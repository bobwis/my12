
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00025760  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001bec8  08025960  08025960  00035960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08041828  08041828  0006068c  2**0
                  CONTENTS
  4 .ARM          00000008  08041828  08041828  00051828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08041830  08041830  0006068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08041830  08041830  00051830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08041834  08041834  00051834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  08041838  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037b48  20000690  08041ec4  00060690  2**3
                  ALLOC
 10 ._user_heap_stack 00040000  200381d8  08041ec4  000681d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0006068c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ad316  00000000  00000000  000606ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013e9c  00000000  00000000  0010d9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004515a  00000000  00000000  0012186c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003500  00000000  00000000  001669c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007650  00000000  00000000  00169ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047d2d  00000000  00000000  00171518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00083120  00000000  00000000  001b9245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00139620  00000000  00000000  0023c365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00375985  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cdb4  00000000  00000000  003759d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000690 	.word	0x20000690
 800021c:	00000000 	.word	0x00000000
 8000220:	08025948 	.word	0x08025948

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000694 	.word	0x20000694
 800023c:	08025948 	.word	0x08025948

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b9 	b.w	80006a4 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006ae:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006b2:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 0;
 80006b6:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006b8:	2101      	movs	r1, #1
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ba:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006bc:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006be:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006ca:	4770      	bx	lr
 80006cc:	200006b8 	.word	0x200006b8
 80006d0:	20022de8 	.word	0x20022de8

080006d4 <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006da:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006de:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006e2:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006e4:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006e6:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006e8:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200006b8 	.word	0x200006b8
 80006fc:	20022de8 	.word	0x20022de8

08000700 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000700:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000702:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000706:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000708:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800070c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000714:	f021 f902 	bl	802191c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000718:	4620      	mov	r0, r4
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800071e:	f006 b807 	b.w	8006730 <HAL_ADC_ErrorCallback>
 8000722:	bf00      	nop
 8000724:	08025b40 	.word	0x08025b40

08000728 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	4605      	mov	r5, r0
 800072e:	4690      	mov	r8, r2
 8000730:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000732:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000734:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000736:	460f      	mov	r7, r1
 8000738:	4699      	mov	r9, r3
	__IO uint32_t counter = 0;
 800073a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073c:	2a01      	cmp	r2, #1
 800073e:	d903      	bls.n	8000748 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000740:	2199      	movs	r1, #153	; 0x99
 8000742:	4845      	ldr	r0, [pc, #276]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000744:	f003 f9f0 	bl	8003b28 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000748:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800074a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800074e:	d17a      	bne.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11e>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000750:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000754:	2b01      	cmp	r3, #1
 8000756:	d903      	bls.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000758:	219b      	movs	r1, #155	; 0x9b
 800075a:	483f      	ldr	r0, [pc, #252]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800075c:	f003 f9e4 	bl	8003b28 <assert_failed>
	__HAL_LOCK(hadc);
 8000760:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000764:	2b01      	cmp	r3, #1
 8000766:	d073      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x128>
 8000768:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800076c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000770:	68b3      	ldr	r3, [r6, #8]
 8000772:	07d9      	lsls	r1, r3, #31
 8000774:	d414      	bmi.n	80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000778:	4939      	ldr	r1, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800077a:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077c:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800077e:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_ADC_ENABLE(hadc);
 8000782:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000788:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800078e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000790:	9b03      	ldr	r3, [sp, #12]
 8000792:	b12b      	cbz	r3, 80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 8000794:	9c03      	ldr	r4, [sp, #12]
 8000796:	3c01      	subs	r4, #1
 8000798:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 800079a:	9803      	ldr	r0, [sp, #12]
 800079c:	2800      	cmp	r0, #0
 800079e:	d1f9      	bne.n	8000794 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a0:	68b3      	ldr	r3, [r6, #8]
 80007a2:	07da      	lsls	r2, r3, #31
 80007a4:	d544      	bpl.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b2:	6873      	ldr	r3, [r6, #4]
 80007b4:	055b      	lsls	r3, r3, #21
 80007b6:	d505      	bpl.n	80007c4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007ca:	d03a      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007ce:	f023 0306 	bic.w	r3, r3, #6
 80007d2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d6:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d8:	4923      	ldr	r1, [pc, #140]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007da:	f06f 0202 	mvn.w	r2, #2
		__HAL_UNLOCK(hadc);
 80007de:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e2:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	e9c0 130f 	strd	r1, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ea:	4921      	ldr	r1, [pc, #132]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	6441      	str	r1, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f0:	6032      	str	r2, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f2:	6873      	ldr	r3, [r6, #4]
			ADC->CCR |= ADC_CCR_DDS;
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007fa:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000800:	b1d3      	cbz	r3, 8000838 <HAL_ADCEx_MultiModeStart_DBDMA+0x110>
			ADC->CCR |= ADC_CCR_DDS;
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000808:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800080a:	4643      	mov	r3, r8
 800080c:	463a      	mov	r2, r7
 800080e:	491a      	ldr	r1, [pc, #104]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000810:	f8cd 9000 	str.w	r9, [sp]
 8000814:	f007 f8bc 	bl	8007990 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000820:	d106      	bne.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	b005      	add	sp, #20
 800082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 8000830:	2000      	movs	r0, #0
}
 8000832:	b005      	add	sp, #20
 8000834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000838:	6853      	ldr	r3, [r2, #4]
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e3      	b.n	800080a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	646b      	str	r3, [r5, #68]	; 0x44
 8000844:	e7c6      	b.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000846:	219a      	movs	r1, #154	; 0x9a
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800084a:	f003 f96d 	bl	8003b28 <assert_failed>
 800084e:	e77f      	b.n	8000750 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 8000850:	2002      	movs	r0, #2
}
 8000852:	b005      	add	sp, #20
 8000854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000858:	08025b58 	.word	0x08025b58
 800085c:	20000250 	.word	0x20000250
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	080006a9 	.word	0x080006a9
 800086c:	08000701 	.word	0x08000701
 8000870:	080006d5 	.word	0x080006d5
 8000874:	40012300 	.word	0x40012300
 8000878:	40012308 	.word	0x40012308

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4a76      	ldr	r2, [pc, #472]	; (8000a58 <ADC_Conv_complete+0x1dc>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000882:	4876      	ldr	r0, [pc, #472]	; (8000a5c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000884:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800088c:	681f      	ldr	r7, [r3, #0]
ADC_Conv_complete() {
 800088e:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000890:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000892:	4d75      	ldr	r5, [pc, #468]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f507 67b8 	addeq.w	r7, r7, #1472	; 0x5c0
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089a:	781b      	ldrb	r3, [r3, #0]
	(*buf)[3] = timestamp;		// this may not get set until now
 800089c:	6814      	ldr	r4, [r2, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089e:	9305      	str	r3, [sp, #20]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 80008a6:	4a71      	ldr	r2, [pc, #452]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (sigsend) {		// oops overrun
 80008ac:	f8df a208 	ldr.w	sl, [pc, #520]	; 8000ab8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b0:	7811      	ldrb	r1, [r2, #0]
 80008b2:	7802      	ldrb	r2, [r0, #0]
 80008b4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60fc      	str	r4, [r7, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f002 0103 	and.w	r1, r2, #3
 80008be:	3201      	adds	r2, #1
 80008c0:	430b      	orrs	r3, r1
 80008c2:	7002      	strb	r2, [r0, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8da 2000 	ldr.w	r2, [sl]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c7 3101 	strd	r3, r1, [r7, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b12a      	cbz	r2, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2200      	movs	r2, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8ca 2000 	str.w	r2, [sl]
 80008de:	4a64      	ldr	r2, [pc, #400]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e0:	2500      	movs	r5, #0
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008e4:	370e      	adds	r7, #14
 80008e6:	f8d2 c000 	ldr.w	ip, [r2]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008ee:	4c63      	ldr	r4, [pc, #396]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f0:	6810      	ldr	r0, [r2, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f4:	4a63      	ldr	r2, [pc, #396]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008f6:	9303      	str	r3, [sp, #12]
 80008f8:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80008fa:	8824      	ldrh	r4, [r4, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000904:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000abc <ADC_Conv_complete+0x240>
 8000908:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000ac0 <ADC_Conv_complete+0x244>
 800090c:	9504      	str	r5, [sp, #16]
 800090e:	9402      	str	r4, [sp, #8]
 8000910:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000912:	f005 041f 	and.w	r4, r5, #31
		thissamp = (*adcbuf16)[i];
 8000916:	f837 3f02 	ldrh.w	r3, [r7, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091a:	2900      	cmp	r1, #0
 800091c:	f105 0501 	add.w	r5, r5, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000920:	f839 b014 	ldrh.w	fp, [r9, r4, lsl #1]
 8000924:	4418      	add	r0, r3
		lastmeanwindiff = abs(meanwindiff);
 8000926:	bfb8      	it	lt
 8000928:	4249      	neglt	r1, r1
		lastsamp[j] = thissamp;			// save last samples
 800092a:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800092e:	eba0 000b 	sub.w	r0, r0, fp
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 8000932:	449c      	add	ip, r3
		lastmeanwindiff = abs(meanwindiff);
 8000934:	fa1f fe81 	uxth.w	lr, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9903      	ldr	r1, [sp, #12]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800093a:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800093e:	eb0e 0b01 	add.w	fp, lr, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000942:	f340 114f 	sbfx	r1, r0, #5, #16
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000946:	1b92      	subs	r2, r2, r6
		if (sigsend)
 8000948:	f8da 6000 	ldr.w	r6, [sl]
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000954:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000956:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000962:	9c02      	ldr	r4, [sp, #8]
 8000964:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000968:	b29b      	uxth	r3, r3
 800096a:	191c      	adds	r4, r3, r4
 800096c:	455c      	cmp	r4, fp
 800096e:	dd04      	ble.n	800097a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000970:	9c01      	ldr	r4, [sp, #4]
 8000972:	3401      	adds	r4, #1
 8000974:	9401      	str	r4, [sp, #4]
 8000976:	2401      	movs	r4, #1
 8000978:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800097a:	b926      	cbnz	r6, 8000986 <ADC_Conv_complete+0x10a>
 800097c:	455b      	cmp	r3, fp
 800097e:	dd02      	ble.n	8000986 <ADC_Conv_complete+0x10a>
			sigsend = 1; // the real trigger
 8000980:	2301      	movs	r3, #1
 8000982:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000986:	f5b5 7f36 	cmp.w	r5, #728	; 0x2d8
 800098a:	d1c2      	bne.n	8000912 <ADC_Conv_complete+0x96>
 800098c:	4c38      	ldr	r4, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <ADC_Conv_complete+0x210>)
 8000990:	f8c4 c000 	str.w	ip, [r4]
 8000994:	4c38      	ldr	r4, [pc, #224]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 8000996:	f8a3 e000 	strh.w	lr, [r3]
 800099a:	6020      	str	r0, [r4, #0]
 800099c:	4839      	ldr	r0, [pc, #228]	; (8000a84 <ADC_Conv_complete+0x208>)
 800099e:	9b04      	ldr	r3, [sp, #16]
 80009a0:	6002      	str	r2, [r0, #0]
 80009a2:	4a37      	ldr	r2, [pc, #220]	; (8000a80 <ADC_Conv_complete+0x204>)
 80009a4:	8011      	strh	r1, [r2, #0]
 80009a6:	b113      	cbz	r3, 80009ae <ADC_Conv_complete+0x132>
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009ae:	f8da 3000 	ldr.w	r3, [sl]
 80009b2:	b343      	cbz	r3, 8000a06 <ADC_Conv_complete+0x18a>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d02d      	beq.n	8000a18 <ADC_Conv_complete+0x19c>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009bc:	4c2a      	ldr	r4, [pc, #168]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		sigprev = 1;	// remember this trigger for next packet
 80009be:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	4934      	ldr	r1, [pc, #208]	; (8000a94 <ADC_Conv_complete+0x218>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009c4:	6018      	str	r0, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c6:	230f      	movs	r3, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c8:	4402      	add	r2, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009ca:	600b      	str	r3, [r1, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	67e2      	str	r2, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009ce:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d0:	6813      	ldr	r3, [r2, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	d10b      	bne.n	80009f4 <ADC_Conv_complete+0x178>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	492f      	ldr	r1, [pc, #188]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009de:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009e4:	fba1 1303 	umull	r1, r3, r1, r3
		adcbgbaseacc = 0;
 80009e8:	4c21      	ldr	r4, [pc, #132]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80009ea:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	0b9b      	lsrs	r3, r3, #14
		adcbgbaseacc = 0;
 80009ee:	6021      	str	r1, [r4, #0]
		samplecnt = 0;
 80009f0:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009f2:	6003      	str	r3, [r0, #0]
	if (xTaskToNotify == NULL) {
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <ADC_Conv_complete+0x228>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	b332      	cbz	r2, 8000a48 <ADC_Conv_complete+0x1cc>
	} else if (sigsend) {
 80009fa:	f8da 2000 	ldr.w	r2, [sl]
 80009fe:	b982      	cbnz	r2, 8000a22 <ADC_Conv_complete+0x1a6>
}
 8000a00:	b007      	add	sp, #28
 8000a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <ADC_Conv_complete+0x214>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	b112      	cbz	r2, 8000a12 <ADC_Conv_complete+0x196>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e7da      	b.n	80009ce <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a18:	9a05      	ldr	r2, [sp, #20]
 8000a1a:	4912      	ldr	r1, [pc, #72]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000a1c:	3201      	adds	r2, #1
 8000a1e:	700a      	strb	r2, [r1, #0]
 8000a20:	e7cc      	b.n	80009bc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a22:	4c22      	ldr	r4, [pc, #136]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	f012 fefe 	bl	8013828 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0e6      	beq.n	8000a00 <ADC_Conv_complete+0x184>
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <ADC_Conv_complete+0x234>)
 8000a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	f3bf 8f6f 	isb	sy
}
 8000a42:	b007      	add	sp, #28
 8000a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <ADC_Conv_complete+0x238>)
}
 8000a4a:	b007      	add	sp, #28
 8000a4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a50:	f020 bf64 	b.w	802191c <puts>
 8000a54:	200006b8 	.word	0x200006b8
 8000a58:	20022de8 	.word	0x20022de8
 8000a5c:	200006b4 	.word	0x200006b4
 8000a60:	20022dfc 	.word	0x20022dfc
 8000a64:	200006ac 	.word	0x200006ac
 8000a68:	20022d4c 	.word	0x20022d4c
 8000a6c:	20000718 	.word	0x20000718
 8000a70:	200006b0 	.word	0x200006b0
 8000a74:	20000002 	.word	0x20000002
 8000a78:	200007b0 	.word	0x200007b0
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000710 	.word	0x20000710
 8000a84:	2000072c 	.word	0x2000072c
 8000a88:	20000714 	.word	0x20000714
 8000a8c:	200006c8 	.word	0x200006c8
 8000a90:	20000724 	.word	0x20000724
 8000a94:	2000070c 	.word	0x2000070c
 8000a98:	2000071c 	.word	0x2000071c
 8000a9c:	16816817 	.word	0x16816817
 8000aa0:	200006bc 	.word	0x200006bc
 8000aa4:	200007b8 	.word	0x200007b8
 8000aa8:	20000720 	.word	0x20000720
 8000aac:	200007b4 	.word	0x200007b4
 8000ab0:	e000ed04 	.word	0xe000ed04
 8000ab4:	08025b70 	.word	0x08025b70
 8000ab8:	20000728 	.word	0x20000728
 8000abc:	200006cc 	.word	0x200006cc
 8000ac0:	20000730 	.word	0x20000730

08000ac4 <startadc>:
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <startadc+0xb8>)
	statuspkt.adcpktssent = 0;
 8000ac6:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac8:	492d      	ldr	r1, [pc, #180]	; (8000b80 <startadc+0xbc>)

	printf("Starting ADC DMA\n");
 8000aca:	482e      	ldr	r0, [pc, #184]	; (8000b84 <startadc+0xc0>)
void startadc() {
 8000acc:	b510      	push	{r4, lr}
	statuspkt.clktrim = 108000000;
 8000ace:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ad0:	4c2d      	ldr	r4, [pc, #180]	; (8000b88 <startadc+0xc4>)
	statuspkt.adcpktssent = 0;
 8000ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad6:	f020 ff21 	bl	802191c <puts>
	osDelay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f011 f920 	bl	8011d20 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae4:	f013 fb7c 	bl	80141e0 <pvPortMalloc>
 8000ae8:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d041      	beq.n	8000b72 <startadc+0xae>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aee:	0783      	lsls	r3, r0, #30
 8000af0:	d12d      	bne.n	8000b4e <startadc+0x8a>
 8000af2:	1f03      	subs	r3, r0, #4
 8000af4:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000af8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000afc:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d1fb      	bne.n	8000afc <startadc+0x38>
 8000b04:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b08:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b0c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1fb      	bne.n	8000b0c <startadc+0x48>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b14:	f500 62ba 	add.w	r2, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0110 	add.w	r1, r0, #16
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b1e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b22:	4c1b      	ldr	r4, [pc, #108]	; (8000b90 <startadc+0xcc>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b24:	6001      	str	r1, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b28:	6022      	str	r2, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2a:	f7ff fdfd 	bl	8000728 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <startadc+0xd4>)
 8000b30:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b32:	481a      	ldr	r0, [pc, #104]	; (8000b9c <startadc+0xd8>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b34:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b36:	f005 fd5b 	bl	80065f0 <HAL_ADC_Start>
 8000b3a:	b9b0      	cbnz	r0, 8000b6a <startadc+0xa6>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <startadc+0xdc>)
 8000b3e:	f005 fd57 	bl	80065f0 <HAL_ADC_Start>
 8000b42:	b970      	cbnz	r0, 8000b62 <startadc+0x9e>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <startadc+0xd0>)
 8000b46:	f005 fd53 	bl	80065f0 <HAL_ADC_Start>
 8000b4a:	b928      	cbnz	r0, 8000b58 <startadc+0x94>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b4c:	bd10      	pop	{r4, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <startadc+0xe0>)
 8000b50:	f020 fee4 	bl	802191c <puts>
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	e7cc      	b.n	8000af2 <startadc+0x2e>
		printf("ADC1 failed start\r\n");
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <startadc+0xe4>)
}
 8000b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("ADC1 failed start\r\n");
 8000b5e:	f020 bedd 	b.w	802191c <puts>
		printf("ADC2 failed start\r\n");
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <startadc+0xe8>)
 8000b64:	f020 feda 	bl	802191c <puts>
 8000b68:	e7ec      	b.n	8000b44 <startadc+0x80>
		printf("ADC3 failed start\r\n");
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <startadc+0xec>)
 8000b6c:	f020 fed6 	bl	802191c <puts>
 8000b70:	e7e4      	b.n	8000b3c <startadc+0x78>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <startadc+0xf0>)
 8000b74:	f020 fed2 	bl	802191c <puts>
		for (;;)
 8000b78:	e7fe      	b.n	8000b78 <startadc+0xb4>
 8000b7a:	bf00      	nop
 8000b7c:	20022d4c 	.word	0x20022d4c
 8000b80:	066ff300 	.word	0x066ff300
 8000b84:	08025b84 	.word	0x08025b84
 8000b88:	20022dfc 	.word	0x20022dfc
 8000b8c:	20022e00 	.word	0x20022e00
 8000b90:	20022df4 	.word	0x20022df4
 8000b94:	200233fc 	.word	0x200233fc
 8000b98:	20022e04 	.word	0x20022e04
 8000b9c:	20023444 	.word	0x20023444
 8000ba0:	200230b8 	.word	0x200230b8
 8000ba4:	08025bc0 	.word	0x08025bc0
 8000ba8:	08025c20 	.word	0x08025c20
 8000bac:	08025c0c 	.word	0x08025c0c
 8000bb0:	08025bf8 	.word	0x08025bf8
 8000bb4:	08025b98 	.word	0x08025b98

08000bb8 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <vApplicationMallocFailedHook>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc4:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bca:	4d03      	ldr	r5, [pc, #12]	; (8000bd8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bcc:	4c03      	ldr	r4, [pc, #12]	; (8000bdc <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bce:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd0:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bd2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bd4:	bc30      	pop	{r4, r5}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000bbc 	.word	0x20000bbc
 8000bdc:	200007bc 	.word	0x200007bc

08000be0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000be0:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be6:	4d03      	ldr	r5, [pc, #12]	; (8000bf4 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be8:	4c03      	ldr	r4, [pc, #12]	; (8000bf8 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bea:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bec:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bee:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bf0:	bc30      	pop	{r4, r5}
 8000bf2:	4770      	bx	lr
 8000bf4:	20001410 	.word	0x20001410
 8000bf8:	20000c10 	.word	0x20000c10

08000bfc <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bfc:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000bfe:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000c00:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000c02:	749a      	strb	r2, [r3, #18]
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000c08:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c10:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c12:	b082      	sub	sp, #8
 8000c14:	4605      	mov	r5, r0
 8000c16:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c18:	4616      	mov	r6, r2
 8000c1a:	b10a      	cbz	r2, 8000c20 <hc_recv+0x18>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d159      	bne.n	8000cd4 <hc_recv+0xcc>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c20:	bb4e      	cbnz	r6, 8000c76 <hc_recv+0x6e>
 8000c22:	b343      	cbz	r3, 8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000c24:	8a2b      	ldrh	r3, [r5, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8098 	beq.w	8000d5c <hc_recv+0x154>
 8000c2c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2e:	2604      	movs	r6, #4
 8000c30:	68e8      	ldr	r0, [r5, #12]
 8000c32:	e002      	b.n	8000c3a <hc_recv+0x32>
		for (i = 0; i < state->Len; i++) {
 8000c34:	3201      	adds	r2, #1
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dd0c      	ble.n	8000c54 <hc_recv+0x4c>
			if (errormsg == GEN_ERROR) {
 8000c3a:	2e04      	cmp	r6, #4
 8000c3c:	d01f      	beq.n	8000c7e <hc_recv+0x76>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c3e:	5c84      	ldrb	r4, [r0, r2]
 8000c40:	2c0d      	cmp	r4, #13
 8000c42:	d1f7      	bne.n	8000c34 <hc_recv+0x2c>
 8000c44:	1c51      	adds	r1, r2, #1
 8000c46:	5c44      	ldrb	r4, [r0, r1]
 8000c48:	2c0a      	cmp	r4, #10
 8000c4a:	d027      	beq.n	8000c9c <hc_recv+0x94>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c4c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c4e:	3201      	adds	r2, #1
 8000c50:	4293      	cmp	r3, r2
 8000c52:	dcf2      	bgt.n	8000c3a <hc_recv+0x32>
	char *page = NULL;
 8000c54:	2400      	movs	r4, #0
		if (errormsg == OK) {
 8000c56:	b9d6      	cbnz	r6, 8000c8e <hc_recv+0x86>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c58:	4622      	mov	r2, r4
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	696c      	ldr	r4, [r5, #20]
 8000c5e:	7828      	ldrb	r0, [r5, #0]
 8000c60:	47a0      	blx	r4
	if (pcb != NULL) {
 8000c62:	b117      	cbz	r7, 8000c6a <hc_recv+0x62>
		tcp_close(pcb);
 8000c64:	4638      	mov	r0, r7
 8000c66:	f018 f96f 	bl	8018f48 <tcp_close>
		free(state->RecvData);
 8000c6a:	68e8      	ldr	r0, [r5, #12]
 8000c6c:	f01f fe0a 	bl	8020884 <free>
		free(state);
 8000c70:	4628      	mov	r0, r5
 8000c72:	f01f fe07 	bl	8020884 <free>
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	b002      	add	sp, #8
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000c7e:	5c81      	ldrb	r1, [r0, r2]
 8000c80:	2932      	cmp	r1, #50	; 0x32
 8000c82:	d05c      	beq.n	8000d3e <hc_recv+0x136>
				if (*(state->RecvData + i) == '\n')
 8000c84:	290a      	cmp	r1, #10
 8000c86:	d055      	beq.n	8000d34 <hc_recv+0x12c>
		for (i = 0; i < state->Len; i++) {
 8000c88:	3201      	adds	r2, #1
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	dcf7      	bgt.n	8000c7e <hc_recv+0x76>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	696c      	ldr	r4, [r5, #20]
 8000c94:	461a      	mov	r2, r3
 8000c96:	7828      	ldrb	r0, [r5, #0]
 8000c98:	47a0      	blx	r4
 8000c9a:	e7e2      	b.n	8000c62 <hc_recv+0x5a>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c9c:	1c91      	adds	r1, r2, #2
 8000c9e:	5c44      	ldrb	r4, [r0, r1]
 8000ca0:	2c0d      	cmp	r4, #13
 8000ca2:	d1d3      	bne.n	8000c4c <hc_recv+0x44>
 8000ca4:	1cd1      	adds	r1, r2, #3
 8000ca6:	5c44      	ldrb	r4, [r0, r1]
 8000ca8:	2c0a      	cmp	r4, #10
 8000caa:	d1cf      	bne.n	8000c4c <hc_recv+0x44>
					i++;
 8000cac:	3204      	adds	r2, #4
 8000cae:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000cb0:	1881      	adds	r1, r0, r2
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	f7ff facd 	bl	8000254 <strlen>
 8000cba:	4680      	mov	r8, r0
 8000cbc:	f01f fdda 	bl	8020874 <malloc>
					strcpy(page, state->RecvData + i);
 8000cc0:	9900      	ldr	r1, [sp, #0]
 8000cc2:	f108 0201 	add.w	r2, r8, #1
					page = malloc(strlen(state->RecvData + i));
 8000cc6:	4604      	mov	r4, r0
					strcpy(page, state->RecvData + i);
 8000cc8:	f01f fdf2 	bl	80208b0 <memcpy>
					break;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d0c2      	beq.n	8000c58 <hc_recv+0x50>
 8000cd2:	e7dc      	b.n	8000c8e <hc_recv+0x86>
		tcp_recved(pcb, p->tot_len);
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	8911      	ldrh	r1, [r2, #8]
 8000cd8:	f017 fa5a 	bl	8018190 <tcp_recved>
 8000cdc:	4634      	mov	r4, r6
 8000cde:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ce0:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000ce2:	8963      	ldrh	r3, [r4, #10]
 8000ce4:	68e8      	ldr	r0, [r5, #12]
 8000ce6:	4419      	add	r1, r3
 8000ce8:	3101      	adds	r1, #1
 8000cea:	f020 fe5f 	bl	80219ac <realloc>
 8000cee:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d037      	beq.n	8000d64 <hc_recv+0x15c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000cf4:	8a2b      	ldrh	r3, [r5, #16]
 8000cf6:	8962      	ldrh	r2, [r4, #10]
 8000cf8:	6861      	ldr	r1, [r4, #4]
 8000cfa:	4418      	add	r0, r3
 8000cfc:	f021 fd08 	bl	8022710 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000d00:	8961      	ldrh	r1, [r4, #10]
 8000d02:	68eb      	ldr	r3, [r5, #12]
 8000d04:	8a2a      	ldrh	r2, [r5, #16]
 8000d06:	440b      	add	r3, r1
 8000d08:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000d0a:	8963      	ldrh	r3, [r4, #10]
 8000d0c:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000d0e:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000d10:	4419      	add	r1, r3
 8000d12:	b289      	uxth	r1, r1
 8000d14:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d1e3      	bne.n	8000ce2 <hc_recv+0xda>
			temp_p = p->next;
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d1e:	f013 fc7d 	bl	801461c <pbuf_free_callback>
		while (p != NULL) {
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0a7      	beq.n	8000c76 <hc_recv+0x6e>
			temp_p = p->next;
 8000d26:	4630      	mov	r0, r6
 8000d28:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d2a:	f013 fc77 	bl	801461c <pbuf_free_callback>
		while (p != NULL) {
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d1f3      	bne.n	8000d1a <hc_recv+0x112>
 8000d32:	e7a0      	b.n	8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000d34:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000d36:	2603      	movs	r6, #3
		for (i = 0; i < state->Len; i++) {
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	dc80      	bgt.n	8000c3e <hc_recv+0x36>
 8000d3c:	e7a7      	b.n	8000c8e <hc_recv+0x86>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000d3e:	1c54      	adds	r4, r2, #1
 8000d40:	5d01      	ldrb	r1, [r0, r4]
 8000d42:	2930      	cmp	r1, #48	; 0x30
 8000d44:	d001      	beq.n	8000d4a <hc_recv+0x142>
 8000d46:	4622      	mov	r2, r4
 8000d48:	e79c      	b.n	8000c84 <hc_recv+0x7c>
						&& (*(state->RecvData + ++i) == '0'))
 8000d4a:	1c94      	adds	r4, r2, #2
 8000d4c:	5d01      	ldrb	r1, [r0, r4]
 8000d4e:	2930      	cmp	r1, #48	; 0x30
 8000d50:	d1f9      	bne.n	8000d46 <hc_recv+0x13e>
		for (i = 0; i < state->Len; i++) {
 8000d52:	3203      	adds	r2, #3
 8000d54:	4293      	cmp	r3, r2
 8000d56:	dd03      	ble.n	8000d60 <hc_recv+0x158>
					errormsg = OK;
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e770      	b.n	8000c3e <hc_recv+0x36>
	hc_errormsg errormsg = GEN_ERROR;
 8000d5c:	2604      	movs	r6, #4
 8000d5e:	e796      	b.n	8000c8e <hc_recv+0x86>
	char *page = NULL;
 8000d60:	2400      	movs	r4, #0
 8000d62:	e779      	b.n	8000c58 <hc_recv+0x50>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d64:	4603      	mov	r3, r0
 8000d66:	696c      	ldr	r4, [r5, #20]
 8000d68:	7828      	ldrb	r0, [r5, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	47a0      	blx	r4
				return (ERR_OK);
 8000d70:	e781      	b.n	8000c76 <hc_recv+0x6e>
 8000d72:	bf00      	nop

08000d74 <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d74:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d76:	b570      	push	{r4, r5, r6, lr}
 8000d78:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7a:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d7c:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7e:	6946      	ldr	r6, [r0, #20]
 8000d80:	2104      	movs	r1, #4
 8000d82:	7800      	ldrb	r0, [r0, #0]
 8000d84:	47b0      	blx	r6
	free(state->RecvData);
 8000d86:	68e0      	ldr	r0, [r4, #12]
 8000d88:	f01f fd7c 	bl	8020884 <free>
	free(state->PostVars);
 8000d8c:	68a0      	ldr	r0, [r4, #8]
 8000d8e:	f01f fd79 	bl	8020884 <free>
	free(state->Page);
 8000d92:	6860      	ldr	r0, [r4, #4]
 8000d94:	f01f fd76 	bl	8020884 <free>
	free(state);
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f01f fd73 	bl	8020884 <free>
	printf("hc_error: err=%d\n", err);
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <hc_error+0x38>)
}
 8000da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000da6:	f020 bd1d 	b.w	80217e4 <iprintf>
 8000daa:	bf00      	nop
 8000dac:	08025c34 	.word	0x08025c34

08000db0 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db0:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000db2:	7c83      	ldrb	r3, [r0, #18]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000db8:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dba:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dbc:	d801      	bhi.n	8000dc2 <hc_poll+0x12>
}
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	f017 feb9 	bl	8018b3c <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	7820      	ldrb	r0, [r4, #0]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	47a8      	blx	r5
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	4605      	mov	r5, r0
 8000de0:	b085      	sub	sp, #20
 8000de2:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d13f      	bne.n	8000e68 <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8000de8:	6887      	ldr	r7, [r0, #8]
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d04f      	beq.n	8000e8e <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000dee:	4638      	mov	r0, r7
 8000df0:	f7ff fa30 	bl	8000254 <strlen>
 8000df4:	686a      	ldr	r2, [r5, #4]
 8000df6:	4606      	mov	r6, r0
 8000df8:	4610      	mov	r0, r2
 8000dfa:	9203      	str	r2, [sp, #12]
 8000dfc:	f7ff fa2a 	bl	8000254 <strlen>
 8000e00:	4430      	add	r0, r6
 8000e02:	3065      	adds	r0, #101	; 0x65
 8000e04:	f01f fd36 	bl	8020874 <malloc>
		sprintf(headers,
 8000e08:	4633      	mov	r3, r6
 8000e0a:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e0c:	4606      	mov	r6, r0
		sprintf(headers,
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <hc_connected+0xd0>)
 8000e10:	9700      	str	r7, [sp, #0]
 8000e12:	f020 fe5f 	bl	8021ad4 <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 8000e16:	4926      	ldr	r1, [pc, #152]	; (8000eb0 <hc_connected+0xd4>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f017 fa47 	bl	80182ac <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 8000e1e:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <hc_connected+0xd8>)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f017 fa7b 	bl	801831c <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 8000e26:	220a      	movs	r2, #10
 8000e28:	4923      	ldr	r1, [pc, #140]	; (8000eb8 <hc_connected+0xdc>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f017 fa98 	bl	8018360 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <hc_connected+0xe0>)
 8000e32:	4620      	mov	r0, r4
 8000e34:	f017 fa56 	bl	80182e4 <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fa0b 	bl	8000254 <strlen>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4602      	mov	r2, r0
 8000e42:	4631      	mov	r1, r6
 8000e44:	4620      	mov	r0, r4
 8000e46:	f01a f8d7 	bl	801aff8 <tcp_write>
	tcp_output(pcb);
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f01a ff3a 	bl	801bcc4 <tcp_output>

	// remove headers
	free(headers);
 8000e50:	4630      	mov	r0, r6
 8000e52:	f01f fd17 	bl	8020884 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e56:	68a8      	ldr	r0, [r5, #8]
 8000e58:	f01f fd14 	bl	8020884 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e5c:	6868      	ldr	r0, [r5, #4]
 8000e5e:	f01f fd11 	bl	8020884 <free>

	return (ERR_OK);
}
 8000e62:	2000      	movs	r0, #0
 8000e64:	b005      	add	sp, #20
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 8000e68:	b111      	cbz	r1, 8000e70 <hc_connected+0x94>
		tcp_close(pcb);
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	f018 f86c 	bl	8018f48 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000e70:	2300      	movs	r3, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	7828      	ldrb	r0, [r5, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	696c      	ldr	r4, [r5, #20]
 8000e7a:	47a0      	blx	r4
		free(state->RecvData);
 8000e7c:	68e8      	ldr	r0, [r5, #12]
 8000e7e:	f01f fd01 	bl	8020884 <free>
		free(state);
 8000e82:	4628      	mov	r0, r5
 8000e84:	f01f fcfe 	bl	8020884 <free>
}
 8000e88:	2000      	movs	r0, #0
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e8e:	6842      	ldr	r2, [r0, #4]
 8000e90:	4610      	mov	r0, r2
 8000e92:	9203      	str	r2, [sp, #12]
 8000e94:	f7ff f9de 	bl	8000254 <strlen>
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f01f fceb 	bl	8020874 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f020 fe16 	bl	8021ad4 <siprintf>
 8000ea8:	e7b5      	b.n	8000e16 <hc_connected+0x3a>
 8000eaa:	bf00      	nop
 8000eac:	08025c60 	.word	0x08025c60
 8000eb0:	08000c09 	.word	0x08000c09
 8000eb4:	08000d75 	.word	0x08000d75
 8000eb8:	08000db1 	.word	0x08000db1
 8000ebc:	08000bfd 	.word	0x08000bfd
 8000ec0:	08025c48 	.word	0x08025c48

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	4616      	mov	r6, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	9003      	str	r0, [sp, #12]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed0:	2018      	movs	r0, #24
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ed2:	9101      	str	r1, [sp, #4]
	state = malloc(sizeof(struct hc_state));
 8000ed4:	f01f fcce 	bl	8020874 <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f017 ff6b 	bl	8018db4 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d06f      	beq.n	8000fc2 <hc_open+0xfe>
 8000ee2:	4605      	mov	r5, r0
 8000ee4:	fab4 f084 	clz	r0, r4
 8000ee8:	9901      	ldr	r1, [sp, #4]
 8000eea:	0940      	lsrs	r0, r0, #5
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d068      	beq.n	8000fc2 <hc_open+0xfe>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000ef0:	4f39      	ldr	r7, [pc, #228]	; (8000fd8 <hc_open+0x114>)
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e0      	str	r0, [r4, #12]
	num++;
 8000ef4:	783a      	ldrb	r2, [r7, #0]
	state->ConnectionTimeout = 0;
 8000ef6:	74a0      	strb	r0, [r4, #18]
	num++;
 8000ef8:	3201      	adds	r2, #1
	state->Len = 0;
 8000efa:	8220      	strh	r0, [r4, #16]
	state->ReturnPage = returnpage;
 8000efc:	f8c4 8014 	str.w	r8, [r4, #20]
	num++;
 8000f00:	b2d3      	uxtb	r3, r2
 8000f02:	703b      	strb	r3, [r7, #0]
	state->Num = num;
 8000f04:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f06:	b146      	cbz	r6, 8000f1a <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f08:	4630      	mov	r0, r6
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	f7ff f9a2 	bl	8000254 <strlen>
 8000f10:	3001      	adds	r0, #1
 8000f12:	f01f fcaf 	bl	8020874 <malloc>
 8000f16:	9901      	ldr	r1, [sp, #4]
 8000f18:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	9102      	str	r1, [sp, #8]
 8000f1e:	f7ff f999 	bl	8000254 <strlen>
 8000f22:	1c42      	adds	r2, r0, #1
 8000f24:	4610      	mov	r0, r2
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	f01f fca4 	bl	8020874 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f30:	b390      	cbz	r0, 8000f98 <hc_open+0xd4>
 8000f32:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8000f36:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8000f3a:	f1b8 0f00 	cmp.w	r8, #0
 8000f3e:	d02a      	beq.n	8000f96 <hc_open+0xd2>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f40:	f01f fcb6 	bl	80208b0 <memcpy>
	if (PostVars != NULL)
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d039      	beq.n	8000fbc <hc_open+0xf8>
		strcpy(state->PostVars, PostVars);
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	f020 fe69 	bl	8021c22 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f50:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000fe8 <hc_open+0x124>
 8000f58:	e000      	b.n	8000f5c <hc_open+0x98>
		// Local port in use, use port+1
		port++;
 8000f5a:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f5c:	4632      	mov	r2, r6
 8000f5e:	4641      	mov	r1, r8
 8000f60:	4628      	mov	r0, r5
		port++;
 8000f62:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f64:	f017 f808 	bl	8017f78 <tcp_bind>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1f6      	bne.n	8000f5a <hc_open+0x96>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f017 f998 	bl	80182a4 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <hc_open+0x118>)
 8000f76:	4628      	mov	r0, r5
 8000f78:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f7c:	a903      	add	r1, sp, #12
 8000f7e:	f018 f901 	bl	8019184 <tcp_connect>
 8000f82:	b243      	sxtb	r3, r0
 8000f84:	f88d 3017 	strb.w	r3, [sp, #23]

	if (err != ERR_OK) {
 8000f88:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000f8c:	b9eb      	cbnz	r3, 8000fca <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8e:	7838      	ldrb	r0, [r7, #0]
}
 8000f90:	b006      	add	sp, #24
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f96:	b17e      	cbz	r6, 8000fb8 <hc_open+0xf4>
		free(state->Page);
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f01f fc73 	bl	8020884 <free>
		free(state->PostVars);
 8000f9e:	68a0      	ldr	r0, [r4, #8]
 8000fa0:	f01f fc70 	bl	8020884 <free>
		free(state);
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f01f fc6d 	bl	8020884 <free>
		tcp_close(pcb);
 8000faa:	4628      	mov	r0, r5
 8000fac:	f017 ffcc 	bl	8018f48 <tcp_close>
		return 0;
 8000fb0:	2000      	movs	r0, #0
}
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	strcpy(state->Page, Page);
 8000fb8:	f01f fc7a 	bl	80208b0 <memcpy>
		state->PostVars = NULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60a3      	str	r3, [r4, #8]
 8000fc0:	e7c6      	b.n	8000f50 <hc_open+0x8c>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <hc_open+0x11c>)
 8000fc4:	f020 fcaa 	bl	802191c <puts>
		for (;;)
 8000fc8:	e7fe      	b.n	8000fc8 <hc_open+0x104>
		printf("hc_open failed with %d\n", err);
 8000fca:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <hc_open+0x120>)
 8000fd0:	b249      	sxtb	r1, r1
 8000fd2:	f020 fc07 	bl	80217e4 <iprintf>
 8000fd6:	e7da      	b.n	8000f8e <hc_open+0xca>
 8000fd8:	20001464 	.word	0x20001464
 8000fdc:	08000ddd 	.word	0x08000ddd
 8000fe0:	08025cc4 	.word	0x08025cc4
 8000fe4:	08025cf0 	.word	0x08025cf0
 8000fe8:	08040cd4 	.word	0x08040cd4

08000fec <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8000fec:	2300      	movs	r3, #0
int wait_armtx(void) {
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8000ff2:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8000ff4:	9b01      	ldr	r3, [sp, #4]
 8000ff6:	2b95      	cmp	r3, #149	; 0x95
 8000ff8:	dc0d      	bgt.n	8001016 <wait_armtx+0x2a>
 8000ffa:	4c0e      	ldr	r4, [pc, #56]	; (8001034 <wait_armtx+0x48>)
 8000ffc:	e007      	b.n	800100e <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	4403      	add	r3, r0
 8001002:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001004:	f010 fe8c 	bl	8011d20 <osDelay>
	while (timeoutcnt < 150) {
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	2b95      	cmp	r3, #149	; 0x95
 800100c:	dc03      	bgt.n	8001016 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 800100e:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	4283      	cmp	r3, r0
 8001014:	d1f3      	bne.n	8000ffe <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2bf9      	cmp	r3, #249	; 0xf9
 800101a:	dc02      	bgt.n	8001022 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800101c:	2000      	movs	r0, #0
}
 800101e:	b002      	add	sp, #8
 8001020:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <wait_armtx+0x4c>)
 8001024:	f020 fc7a 	bl	802191c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <wait_armtx+0x48>)
 800102a:	2201      	movs	r2, #1
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	601a      	str	r2, [r3, #0]
		return (-1);
 8001032:	e7f4      	b.n	800101e <wait_armtx+0x32>
 8001034:	20001bb0 	.word	0x20001bb0
 8001038:	08025d08 	.word	0x08025d08

0800103c <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_UART_TxCpltCallback+0x14>)
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d000      	beq.n	800104a <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001048:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_UART_TxCpltCallback+0x18>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40005000 	.word	0x40005000
 8001058:	20001bb0 	.word	0x20001bb0

0800105c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001060:	4c1b      	ldr	r4, [pc, #108]	; (80010d0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001062:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <lcd_uart_init+0x78>)
 8001066:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001068:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800106a:	f020 fbbb 	bl	80217e4 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001070:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001072:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001074:	f00e f824 	bl	800f0c0 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001078:	4620      	mov	r0, r4
 800107a:	f00d ff29 	bl	800eed0 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001080:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001082:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001084:	6022      	str	r2, [r4, #0]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001086:	6163      	str	r3, [r4, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001088:	e9c4 6501 	strd	r6, r5, [r4, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800108c:	e9c4 5503 	strd	r5, r5, [r4, #12]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001098:	f00e fd7c 	bl	800fb94 <HAL_UART_Init>
 800109c:	b958      	cbnz	r0, 80010b6 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	490f      	ldr	r1, [pc, #60]	; (80010e0 <lcd_uart_init+0x84>)
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <lcd_uart_init+0x74>)
 80010a4:	f00d ffbc 	bl	800f020 <HAL_UART_Receive_DMA>
 80010a8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80010ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010b0:	b933      	cbnz	r3, 80010c0 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80010b2:	b002      	add	sp, #8
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80010b6:	4631      	mov	r1, r6
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <lcd_uart_init+0x88>)
 80010ba:	f020 fb93 	bl	80217e4 <iprintf>
 80010be:	e7ee      	b.n	800109e <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <lcd_uart_init+0x8c>)
}
 80010c6:	b002      	add	sp, #8
 80010c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010cc:	f020 bb8a 	b.w	80217e4 <iprintf>
 80010d0:	2002337c 	.word	0x2002337c
 80010d4:	08025d1c 	.word	0x08025d1c
 80010d8:	200015e8 	.word	0x200015e8
 80010dc:	40005000 	.word	0x40005000
 80010e0:	200014a8 	.word	0x200014a8
 80010e4:	08025d38 	.word	0x08025d38
 80010e8:	08025d68 	.word	0x08025d68

080010ec <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 80010ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f0:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <lcd_init+0xf0>)
void lcd_init(int baud) {
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	4606      	mov	r6, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <lcd_init+0xf4>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f8:	f10d 0808 	add.w	r8, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010fc:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80010fe:	4f39      	ldr	r7, [pc, #228]	; (80011e4 <lcd_init+0xf8>)
 8001100:	ad04      	add	r5, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001106:	e888 0003 	stmia.w	r8, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	c407      	stmia	r4!, {r0, r1, r2}
 800110e:	0c1a      	lsrs	r2, r3, #16
 8001110:	f824 3b02 	strh.w	r3, [r4], #2
 8001114:	7022      	strb	r2, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001116:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800111a:	c507      	stmia	r5!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 800111c:	4631      	mov	r1, r6
 800111e:	4832      	ldr	r0, [pc, #200]	; (80011e8 <lcd_init+0xfc>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001120:	702b      	strb	r3, [r5, #0]
	printf("lcd_init: baud=%d\n", baud);
 8001122:	f020 fb5f 	bl	80217e4 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001126:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 800112a:	d009      	beq.n	8001140 <lcd_init+0x54>
 800112c:	f5b6 3f61 	cmp.w	r6, #230400	; 0x38400
 8001130:	d006      	beq.n	8001140 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001132:	4631      	mov	r1, r6
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <lcd_init+0x100>)
 8001136:	f020 fb55 	bl	80217e4 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 800113a:	b00c      	add	sp, #48	; 0x30
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	txdmadone = 0;	// TX is NOT free
 8001140:	2300      	movs	r3, #0
 8001142:	4c2b      	ldr	r4, [pc, #172]	; (80011f0 <lcd_init+0x104>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001144:	4641      	mov	r1, r8
 8001146:	2207      	movs	r2, #7
 8001148:	482a      	ldr	r0, [pc, #168]	; (80011f4 <lcd_init+0x108>)
	txdmadone = 0;	// TX is NOT free
 800114a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 800114c:	f00d ff1c 	bl	800ef88 <HAL_UART_Transmit_DMA>
 8001150:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001154:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001158:	b14b      	cbz	r3, 800116e <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800115a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <lcd_init+0x10c>)
 8001160:	f020 fb40 	bl	80217e4 <iprintf>
	while (!(txdmadone)) {
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	b92b      	cbnz	r3, 8001174 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001168:	2001      	movs	r0, #1
 800116a:	f010 fdd9 	bl	8011d20 <osDelay>
	while (!(txdmadone)) {
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f9      	beq.n	8001168 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001174:	2300      	movs	r3, #0
	osDelay(800);
 8001176:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 800117a:	6023      	str	r3, [r4, #0]
	osDelay(800);
 800117c:	f010 fdd0 	bl	8011d20 <osDelay>
	if (baud == 9600)
 8001180:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 8001184:	d018      	beq.n	80011b8 <lcd_init+0xcc>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001186:	a908      	add	r1, sp, #32
 8001188:	220e      	movs	r2, #14
 800118a:	481a      	ldr	r0, [pc, #104]	; (80011f4 <lcd_init+0x108>)
 800118c:	f00d fefc 	bl	800ef88 <HAL_UART_Transmit_DMA>
 8001190:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001198:	b11b      	cbz	r3, 80011a2 <lcd_init+0xb6>
 800119a:	e018      	b.n	80011ce <lcd_init+0xe2>
		osDelay(1);		// wait for comms to complete
 800119c:	2001      	movs	r0, #1
 800119e:	f010 fdbf 	bl	8011d20 <osDelay>
	while (!(txdmadone)) {
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80011a8:	2300      	movs	r3, #0
	osDelay(120);
 80011aa:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80011ac:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80011ae:	f010 fdb7 	bl	8011d20 <osDelay>
}
 80011b2:	b00c      	add	sp, #48	; 0x30
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80011b8:	a904      	add	r1, sp, #16
 80011ba:	220c      	movs	r2, #12
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <lcd_init+0x108>)
 80011be:	f00d fee3 	bl	800ef88 <HAL_UART_Transmit_DMA>
 80011c2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80011c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e9      	beq.n	80011a2 <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80011ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <lcd_init+0x10c>)
 80011d4:	f020 fb06 	bl	80217e4 <iprintf>
 80011d8:	e7e3      	b.n	80011a2 <lcd_init+0xb6>
 80011da:	bf00      	nop
 80011dc:	08025e10 	.word	0x08025e10
 80011e0:	08025e18 	.word	0x08025e18
 80011e4:	08025e28 	.word	0x08025e28
 80011e8:	08025d98 	.word	0x08025d98
 80011ec:	08025dac 	.word	0x08025dac
 80011f0:	20001bb0 	.word	0x20001bb0
 80011f4:	2002337c 	.word	0x2002337c
 80011f8:	08025de0 	.word	0x08025de0

080011fc <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80011fc:	b530      	push	{r4, r5, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[64];
	uint32_t reg;

	if (wait_armtx() == -1)
 8001202:	f7ff fef3 	bl	8000fec <wait_armtx>
 8001206:	4605      	mov	r5, r0
 8001208:	3001      	adds	r0, #1
 800120a:	d01d      	beq.n	8001248 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <lcd_puts+0x60>)
 8001210:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	5ce3      	ldrb	r3, [r4, r3]
 8001216:	b153      	cbz	r3, 800122e <lcd_puts+0x32>
		buffer[i] = str[i];
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	9a01      	ldr	r2, [sp, #4]
		i++;
 800121c:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800121e:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8001220:	3301      	adds	r3, #1
		buffer[i] = str[i];
 8001222:	5481      	strb	r1, [r0, r2]
		i++;
 8001224:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	5ce3      	ldrb	r3, [r4, r3]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 800122e:	9d01      	ldr	r5, [sp, #4]
 8001230:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001232:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <lcd_puts+0x64>)
	buffer[i] = '\0';
 8001236:	5543      	strb	r3, [r0, r5]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001238:	b292      	uxth	r2, r2
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <lcd_puts+0x60>)
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 800123e:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001240:	f00d fea2 	bl	800ef88 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001244:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 8001246:	b910      	cbnz	r0, 800124e <lcd_puts+0x52>
	}
	return (stat);
}
 8001248:	4628      	mov	r0, r5
 800124a:	b003      	add	sp, #12
 800124c:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800124e:	4629      	mov	r1, r5
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <lcd_puts+0x6c>)
 8001252:	f020 fac7 	bl	80217e4 <iprintf>
}
 8001256:	4628      	mov	r0, r5
 8001258:	b003      	add	sp, #12
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	20001468 	.word	0x20001468
 8001260:	20001bb0 	.word	0x20001bb0
 8001264:	2002337c 	.word	0x2002337c
 8001268:	08025e38 	.word	0x08025e38

0800126c <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 800126c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800126e:	2300      	movs	r3, #0
int lcd_rxdma() {
 8001270:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001274:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001276:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001278:	6853      	ldr	r3, [r2, #4]
 800127a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800127e:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8001280:	9a01      	ldr	r2, [sp, #4]
 8001282:	2a80      	cmp	r2, #128	; 0x80
 8001284:	d016      	beq.n	80012b4 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001286:	4d13      	ldr	r5, [pc, #76]	; (80012d4 <lcd_rxdma+0x68>)
 8001288:	9a01      	ldr	r2, [sp, #4]
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	d00e      	beq.n	80012ae <lcd_rxdma+0x42>
 8001290:	4c11      	ldr	r4, [pc, #68]	; (80012d8 <lcd_rxdma+0x6c>)
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001294:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8001296:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001298:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 800129a:	3301      	adds	r3, #1
		count++;
 800129c:	3201      	adds	r2, #1
		return (0);
 800129e:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80012a0:	9200      	str	r2, [sp, #0]
		return (0);
 80012a2:	bfa8      	it	ge
 80012a4:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012a6:	9a01      	ldr	r2, [sp, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d1f3      	bne.n	8001294 <lcd_rxdma+0x28>
 80012ac:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80012ae:	9800      	ldr	r0, [sp, #0]
}
 80012b0:	b003      	add	sp, #12
 80012b2:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <lcd_rxdma+0x70>)
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <lcd_rxdma+0x74>)
 80012b8:	f00d feb2 	bl	800f020 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80012bc:	b910      	cbnz	r0, 80012c4 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80012be:	2300      	movs	r3, #0
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	e7e0      	b.n	8001286 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012c4:	4601      	mov	r1, r0
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <lcd_rxdma+0x78>)
 80012c8:	f020 fa8c 	bl	80217e4 <iprintf>
 80012cc:	e7f7      	b.n	80012be <lcd_rxdma+0x52>
 80012ce:	bf00      	nop
 80012d0:	40026010 	.word	0x40026010
 80012d4:	200015e8 	.word	0x200015e8
 80012d8:	20001568 	.word	0x20001568
 80012dc:	200014a8 	.word	0x200014a8
 80012e0:	2002337c 	.word	0x2002337c
 80012e4:	08025e68 	.word	0x08025e68

080012e8 <intwritelcdcmd>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// internal send a var string to the LCD (len max 255) - cant be blcoked
// terminate with three 0xff's
// returns 0 if sent
int intwritelcdcmd(char *str) {
 80012e8:	b500      	push	{lr}
 80012ea:	b091      	sub	sp, #68	; 0x44
 80012ec:	4601      	mov	r1, r0
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80012ee:	4668      	mov	r0, sp
 80012f0:	f020 fc81 	bl	8021bf6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <intwritelcdcmd+0x20>)
	strcpy(pkt, str);
 80012f6:	4603      	mov	r3, r0
	strcat(pkt, "\xff\xff\xff");
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
	return (lcd_puts(pkt));
 80012fc:	4668      	mov	r0, sp
 80012fe:	f7ff ff7d 	bl	80011fc <lcd_puts>
}
 8001302:	b011      	add	sp, #68	; 0x44
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
 8001308:	08025e14 	.word	0x08025e14

0800130c <writelcdcmd>:


// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 800130c:	b500      	push	{lr}
 800130e:	b091      	sub	sp, #68	; 0x44
 8001310:	4601      	mov	r1, r0
	char i = 0;
	char pkt[64];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8001312:	4668      	mov	r0, sp
 8001314:	f020 fc6f 	bl	8021bf6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <writelcdcmd+0x30>)
	strcpy(pkt, str);
 800131c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800131e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001320:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001322:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001324:	b92b      	cbnz	r3, 8001332 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 8001326:	4668      	mov	r0, sp
 8001328:	f7ff ff68 	bl	80011fc <lcd_puts>
	else
		return(-1);
}
 800132c:	b011      	add	sp, #68	; 0x44
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
		return(-1);
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	e7f9      	b.n	800132c <writelcdcmd+0x20>
 8001338:	08025e14 	.word	0x08025e14
 800133c:	20001564 	.word	0x20001564

08001340 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001340:	b510      	push	{r4, lr}
 8001342:	b092      	sub	sp, #72	; 0x48
	int i;
	char str[64];
	volatile int result = 0;
 8001344:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800134a:	a802      	add	r0, sp, #8
 800134c:	4905      	ldr	r1, [pc, #20]	; (8001364 <setlcdtext+0x24>)
	volatile int result = 0;
 800134e:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001350:	f020 fbc0 	bl	8021ad4 <siprintf>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001354:	a802      	add	r0, sp, #8
 8001356:	f7ff ffd9 	bl	800130c <writelcdcmd>
 800135a:	9001      	str	r0, [sp, #4]
	return (result);
 800135c:	9801      	ldr	r0, [sp, #4]
}
 800135e:	b012      	add	sp, #72	; 0x48
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	08025e98 	.word	0x08025e98

08001368 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001368:	b500      	push	{lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	460b      	mov	r3, r1
 800136e:	4602      	mov	r2, r0
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8001370:	490a      	ldr	r1, [pc, #40]	; (800139c <setlcdbin+0x34>)
 8001372:	a802      	add	r0, sp, #8
 8001374:	f020 fbae 	bl	8021ad4 <siprintf>
	result = writelcdcmd(buffer);
 8001378:	a802      	add	r0, sp, #8
 800137a:	f7ff ffc7 	bl	800130c <writelcdcmd>
 800137e:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	d003      	beq.n	800138e <setlcdbin+0x26>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001386:	9801      	ldr	r0, [sp, #4]
}
 8001388:	b00b      	add	sp, #44	; 0x2c
 800138a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <setlcdbin+0x38>)
 8001390:	f020 fa28 	bl	80217e4 <iprintf>
	return (result);
 8001394:	9801      	ldr	r0, [sp, #4]
}
 8001396:	b00b      	add	sp, #44	; 0x2c
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
 800139c:	08025ea0 	.word	0x08025ea0
 80013a0:	08025ea8 	.word	0x08025ea8

080013a4 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <isnexpkt+0xbc>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a8:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 80013aa:	4d2e      	ldr	r5, [pc, #184]	; (8001464 <isnexpkt+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	682a      	ldr	r2, [r5, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d052      	beq.n	800145a <isnexpkt+0xb6>
	if (++index >= limit)
 80013b4:	1c53      	adds	r3, r2, #1
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80013b6:	4c2c      	ldr	r4, [pc, #176]	; (8001468 <isnexpkt+0xc4>)
		ch = lcdrxbuffer[lastidx];
 80013b8:	4f2c      	ldr	r7, [pc, #176]	; (800146c <isnexpkt+0xc8>)
		rxtimeout = 100;
 80013ba:	f04f 0c64 	mov.w	ip, #100	; 0x64
		return (0);
 80013be:	2b80      	cmp	r3, #128	; 0x80
		buffer[i++] = ch;
 80013c0:	7826      	ldrb	r6, [r4, #0]
		ch = lcdrxbuffer[lastidx];
 80013c2:	5cbf      	ldrb	r7, [r7, r2]
		return (0);
 80013c4:	bfa8      	it	ge
 80013c6:	2300      	movge	r3, #0
		buffer[i++] = ch;
 80013c8:	1c72      	adds	r2, r6, #1
		ch = rawchar & 0xff;
 80013ca:	f88d 7007 	strb.w	r7, [sp, #7]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80013ce:	602b      	str	r3, [r5, #0]
		buffer[i++] = ch;
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
		if (ch == 0xff) {
 80013d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		rxtimeout = 100;
 80013da:	4d25      	ldr	r5, [pc, #148]	; (8001470 <isnexpkt+0xcc>)
		if (ch == 0xff) {
 80013dc:	2bff      	cmp	r3, #255	; 0xff
		buffer[i++] = ch;
 80013de:	7022      	strb	r2, [r4, #0]
		rxtimeout = 100;
 80013e0:	f8c5 c000 	str.w	ip, [r5]
		buffer[i++] = ch;
 80013e4:	5587      	strb	r7, [r0, r6]
		if (ch == 0xff) {
 80013e6:	d029      	beq.n	800143c <isnexpkt+0x98>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013e8:	f89d c007 	ldrb.w	ip, [sp, #7]
			termcnt = 0;
 80013ec:	2300      	movs	r3, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013ee:	4f21      	ldr	r7, [pc, #132]	; (8001474 <isnexpkt+0xd0>)
			termcnt = 0;
 80013f0:	4e21      	ldr	r6, [pc, #132]	; (8001478 <isnexpkt+0xd4>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013f2:	f887 c000 	strb.w	ip, [r7]
			termcnt = 0;
 80013f6:	7033      	strb	r3, [r6, #0]
		}

		if (i == size) { // overrun
 80013f8:	428a      	cmp	r2, r1
 80013fa:	d102      	bne.n	8001402 <isnexpkt+0x5e>
			i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8001400:	7033      	strb	r3, [r6, #0]
		}
	}
	if (rxtimeout > 0)
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	b133      	cbz	r3, 8001414 <isnexpkt+0x70>
		rxtimeout--;
 8001406:	3b01      	subs	r3, #1
 8001408:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800140a:	b11b      	cbz	r3, 8001414 <isnexpkt+0x70>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 800140c:	f06f 0001 	mvn.w	r0, #1
}
 8001410:	b003      	add	sp, #12
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		termcnt = 0;
 8001414:	2200      	movs	r2, #0
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <isnexpkt+0xd4>)
		for (i = 0; i < size; buffer[i++] = 0)
 8001418:	4c13      	ldr	r4, [pc, #76]	; (8001468 <isnexpkt+0xc4>)
		termcnt = 0;
 800141a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800141c:	7022      	strb	r2, [r4, #0]
 800141e:	b139      	cbz	r1, 8001430 <isnexpkt+0x8c>
 8001420:	3901      	subs	r1, #1
 8001422:	1e43      	subs	r3, r0, #1
 8001424:	fa50 f081 	uxtab	r0, r0, r1
 8001428:	f803 2f01 	strb.w	r2, [r3, #1]!
 800142c:	4298      	cmp	r0, r3
 800142e:	d1fb      	bne.n	8001428 <isnexpkt+0x84>
		i = 0;
 8001430:	2300      	movs	r3, #0
		return (-1);
 8001432:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001436:	7023      	strb	r3, [r4, #0]
}
 8001438:	b003      	add	sp, #12
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			termcnt++;
 800143c:	4e0e      	ldr	r6, [pc, #56]	; (8001478 <isnexpkt+0xd4>)
 800143e:	7833      	ldrb	r3, [r6, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2db      	uxtb	r3, r3
			if (termcnt == 3) {
 8001444:	2b03      	cmp	r3, #3
			termcnt++;
 8001446:	7033      	strb	r3, [r6, #0]
			if (termcnt == 3) {
 8001448:	d1d6      	bne.n	80013f8 <isnexpkt+0x54>
				printf(" # ");		// found terminator
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <isnexpkt+0xd8>)
 800144c:	f020 f9ca 	bl	80217e4 <iprintf>
				i = 0;
 8001450:	2300      	movs	r3, #0
				index = i;
 8001452:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001454:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001456:	7023      	strb	r3, [r4, #0]
				return (index);
 8001458:	e7da      	b.n	8001410 <isnexpkt+0x6c>
 800145a:	4d05      	ldr	r5, [pc, #20]	; (8001470 <isnexpkt+0xcc>)
 800145c:	e7d1      	b.n	8001402 <isnexpkt+0x5e>
 800145e:	bf00      	nop
 8001460:	200015e8 	.word	0x200015e8
 8001464:	20001554 	.word	0x20001554
 8001468:	20001548 	.word	0x20001548
 800146c:	20001568 	.word	0x20001568
 8001470:	200019c0 	.word	0x200019c0
 8001474:	200019bc 	.word	0x200019bc
 8001478:	200019c4 	.word	0x200019c4
 800147c:	08025ec4 	.word	0x08025ec4

08001480 <lcd_time>:
//Application specific display stuff
//
//////////////////////////////////////////////////////////////

// send the time to t0.txt
void lcd_time() {
 8001480:	b538      	push	{r3, r4, r5, lr}

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001482:	4c19      	ldr	r4, [pc, #100]	; (80014e8 <lcd_time+0x68>)
 8001484:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001488:	2500      	movs	r5, #0
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <lcd_time+0x6c>)
 800148c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001490:	185b      	adds	r3, r3, r1
 8001492:	eb45 0202 	adc.w	r2, r5, r2
	timeinfo = *localtime(&localepochtime);
 8001496:	4d16      	ldr	r5, [pc, #88]	; (80014f0 <lcd_time+0x70>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001498:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 800149c:	f01f f8d6 	bl	802064c <localtime>
 80014a0:	4604      	mov	r4, r0
 80014a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014aa:	462b      	mov	r3, r5
 80014ac:	6820      	ldr	r0, [r4, #0]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014ae:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <lcd_time+0x74>)
 80014b0:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80014b2:	f843 0920 	str.w	r0, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014b6:	4810      	ldr	r0, [pc, #64]	; (80014f8 <lcd_time+0x78>)
 80014b8:	f021 f90e 	bl	80226d8 <strftime>
	setlcdtext("t0.txt", buffer);
 80014bc:	490e      	ldr	r1, [pc, #56]	; (80014f8 <lcd_time+0x78>)
 80014be:	480f      	ldr	r0, [pc, #60]	; (80014fc <lcd_time+0x7c>)
 80014c0:	f7ff ff3e 	bl	8001340 <setlcdtext>

	if (!(gpslocked))
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <lcd_time+0x80>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b923      	cbnz	r3, 80014d4 <lcd_time+0x54>
		writelcdcmd("vis t3,1");	// hide
 80014ca:	480e      	ldr	r0, [pc, #56]	; (8001504 <lcd_time+0x84>)
	else {
		setlcdtext("t3.txt", "GPS UNLOCKED");
		writelcdcmd("vis t3,0");
	}

}
 80014cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writelcdcmd("vis t3,1");	// hide
 80014d0:	f7ff bf1c 	b.w	800130c <writelcdcmd>
		setlcdtext("t3.txt", "GPS UNLOCKED");
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <lcd_time+0x88>)
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <lcd_time+0x8c>)
 80014d8:	f7ff ff32 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,0");
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <lcd_time+0x90>)
}
 80014de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		writelcdcmd("vis t3,0");
 80014e2:	f7ff bf13 	b.w	800130c <writelcdcmd>
 80014e6:	bf00      	nop
 80014e8:	20023998 	.word	0x20023998
 80014ec:	20022e58 	.word	0x20022e58
 80014f0:	20022e08 	.word	0x20022e08
 80014f4:	08025ec8 	.word	0x08025ec8
 80014f8:	20022e2c 	.word	0x20022e2c
 80014fc:	08025ed4 	.word	0x08025ed4
 8001500:	20001c65 	.word	0x20001c65
 8001504:	08025edc 	.word	0x08025edc
 8001508:	08025ee8 	.word	0x08025ee8
 800150c:	08025ef8 	.word	0x08025ef8
 8001510:	08025f00 	.word	0x08025f00

08001514 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <lcd_date+0x24>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001516:	2128      	movs	r1, #40	; 0x28
 8001518:	4a08      	ldr	r2, [pc, #32]	; (800153c <lcd_date+0x28>)
void lcd_date() {
 800151a:	b570      	push	{r4, r5, r6, lr}
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800151c:	4c08      	ldr	r4, [pc, #32]	; (8001540 <lcd_date+0x2c>)
	lastday = timeinfo.tm_yday;
 800151e:	69de      	ldr	r6, [r3, #28]
 8001520:	4d08      	ldr	r5, [pc, #32]	; (8001544 <lcd_date+0x30>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001522:	4620      	mov	r0, r4
	lastday = timeinfo.tm_yday;
 8001524:	602e      	str	r6, [r5, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001526:	f021 f8d7 	bl	80226d8 <strftime>
	setlcdtext("t1.txt", buffer);
 800152a:	4621      	mov	r1, r4
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <lcd_date+0x34>)
}
 800152e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdtext("t1.txt", buffer);
 8001532:	f7ff bf05 	b.w	8001340 <setlcdtext>
 8001536:	bf00      	nop
 8001538:	20022e08 	.word	0x20022e08
 800153c:	08025f0c 	.word	0x08025f0c
 8001540:	20022e2c 	.word	0x20022e2c
 8001544:	20001550 	.word	0x20001550
 8001548:	08025f1c 	.word	0x08025f1c

0800154c <lcd_showvars>:

// populate the page2 vars
lcd_showvars() {
	unsigned char str[64];

	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <lcd_showvars+0x158>)
 800154e:	4956      	ldr	r1, [pc, #344]	; (80016a8 <lcd_showvars+0x15c>)
 8001550:	681a      	ldr	r2, [r3, #0]
lcd_showvars() {
 8001552:	b530      	push	{r4, r5, lr}
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001554:	0e13      	lsrs	r3, r2, #24
lcd_showvars() {
 8001556:	b095      	sub	sp, #84	; 0x54
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8001558:	f3c2 4407 	ubfx	r4, r2, #16, #8
			(myip & 0xFF000000) >> 24);
	setlcdtext("t11.txt", str);
	sprintf(str, "%d", statuspkt.uid);
 800155c:	4d53      	ldr	r5, [pc, #332]	; (80016ac <lcd_showvars+0x160>)
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	a804      	add	r0, sp, #16
 8001562:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001566:	9400      	str	r4, [sp, #0]
 8001568:	b2d2      	uxtb	r2, r2
	sprintf(str, "%d", statuspkt.uid);
 800156a:	4c51      	ldr	r4, [pc, #324]	; (80016b0 <lcd_showvars+0x164>)
	sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 800156c:	f020 fab2 	bl	8021ad4 <siprintf>
	setlcdtext("t11.txt", str);
 8001570:	a904      	add	r1, sp, #16
 8001572:	4850      	ldr	r0, [pc, #320]	; (80016b4 <lcd_showvars+0x168>)
 8001574:	f7ff fee4 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.uid);
 8001578:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 800157c:	4621      	mov	r1, r4
 800157e:	a804      	add	r0, sp, #16
 8001580:	b292      	uxth	r2, r2
 8001582:	f020 faa7 	bl	8021ad4 <siprintf>
	setlcdtext("t10.txt", str);
 8001586:	a904      	add	r1, sp, #16
 8001588:	484b      	ldr	r0, [pc, #300]	; (80016b8 <lcd_showvars+0x16c>)
 800158a:	f7ff fed9 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.adcpktssent);
 800158e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8001592:	4621      	mov	r1, r4
 8001594:	a804      	add	r0, sp, #16
 8001596:	b292      	uxth	r2, r2
 8001598:	f020 fa9c 	bl	8021ad4 <siprintf>
	setlcdtext("t9.txt", str);
 800159c:	a904      	add	r1, sp, #16
 800159e:	4847      	ldr	r0, [pc, #284]	; (80016bc <lcd_showvars+0x170>)
 80015a0:	f7ff fece 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80015a4:	4b46      	ldr	r3, [pc, #280]	; (80016c0 <lcd_showvars+0x174>)
 80015a6:	4621      	mov	r1, r4
 80015a8:	a804      	add	r0, sp, #16
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015b0:	f020 fa90 	bl	8021ad4 <siprintf>
	setlcdtext("t8.txt", str);
 80015b4:	a904      	add	r1, sp, #16
 80015b6:	4843      	ldr	r0, [pc, #268]	; (80016c4 <lcd_showvars+0x178>)
 80015b8:	f7ff fec2 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80015bc:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <lcd_showvars+0x17c>)
 80015be:	4621      	mov	r1, r4
 80015c0:	a804      	add	r0, sp, #16
 80015c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015c6:	2a00      	cmp	r2, #0
 80015c8:	bfb8      	it	lt
 80015ca:	4252      	neglt	r2, r2
 80015cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80015d0:	f020 fa80 	bl	8021ad4 <siprintf>
	setlcdtext("t7.txt", str);
 80015d4:	a904      	add	r1, sp, #16
 80015d6:	483d      	ldr	r0, [pc, #244]	; (80016cc <lcd_showvars+0x180>)
 80015d8:	f7ff feb2 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", pgagain & 7);	// gain
 80015dc:	4b3c      	ldr	r3, [pc, #240]	; (80016d0 <lcd_showvars+0x184>)
 80015de:	4621      	mov	r1, r4
 80015e0:	a804      	add	r0, sp, #16
 80015e2:	881a      	ldrh	r2, [r3, #0]
 80015e4:	f002 0207 	and.w	r2, r2, #7
 80015e8:	f020 fa74 	bl	8021ad4 <siprintf>
	setlcdtext("t6.txt", str);
 80015ec:	a904      	add	r1, sp, #16
 80015ee:	4839      	ldr	r0, [pc, #228]	; (80016d4 <lcd_showvars+0x188>)
 80015f0:	f7ff fea6 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 80015f4:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80015f6:	4621      	mov	r1, r4
 80015f8:	a804      	add	r0, sp, #16
 80015fa:	f020 fa6b 	bl	8021ad4 <siprintf>
	setlcdtext("t24.txt", str);
 80015fe:	a904      	add	r1, sp, #16
 8001600:	4835      	ldr	r0, [pc, #212]	; (80016d8 <lcd_showvars+0x18c>)
 8001602:	f7ff fe9d 	bl	8001340 <setlcdtext>

	sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001606:	7eea      	ldrb	r2, [r5, #27]
 8001608:	4621      	mov	r1, r4
 800160a:	a804      	add	r0, sp, #16
 800160c:	f020 fa62 	bl	8021ad4 <siprintf>
	setlcdtext("t0.txt", str);
 8001610:	a904      	add	r1, sp, #16
 8001612:	4832      	ldr	r0, [pc, #200]	; (80016dc <lcd_showvars+0x190>)
 8001614:	f7ff fe94 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001618:	6a2a      	ldr	r2, [r5, #32]
 800161a:	4621      	mov	r1, r4
 800161c:	a804      	add	r0, sp, #16
 800161e:	f020 fa59 	bl	8021ad4 <siprintf>
	setlcdtext("t1.txt", str);
 8001622:	a904      	add	r1, sp, #16
 8001624:	482e      	ldr	r0, [pc, #184]	; (80016e0 <lcd_showvars+0x194>)
 8001626:	f7ff fe8b 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 800162a:	69ea      	ldr	r2, [r5, #28]
 800162c:	4621      	mov	r1, r4
 800162e:	a804      	add	r0, sp, #16
 8001630:	f020 fa50 	bl	8021ad4 <siprintf>
	setlcdtext("t2.txt", str);
 8001634:	a904      	add	r1, sp, #16
 8001636:	482b      	ldr	r0, [pc, #172]	; (80016e4 <lcd_showvars+0x198>)
 8001638:	f7ff fe82 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800163c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800163e:	4621      	mov	r1, r4
 8001640:	a804      	add	r0, sp, #16
 8001642:	f020 fa47 	bl	8021ad4 <siprintf>
	setlcdtext("t3.txt", str);
 8001646:	a904      	add	r1, sp, #16
 8001648:	4827      	ldr	r0, [pc, #156]	; (80016e8 <lcd_showvars+0x19c>)
 800164a:	f7ff fe79 	bl	8001340 <setlcdtext>

	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800164e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001650:	4621      	mov	r1, r4
 8001652:	a804      	add	r0, sp, #16
 8001654:	f020 fa3e 	bl	8021ad4 <siprintf>
	setlcdtext("t4.txt", str);
 8001658:	a904      	add	r1, sp, #16
 800165a:	4824      	ldr	r0, [pc, #144]	; (80016ec <lcd_showvars+0x1a0>)
 800165c:	f7ff fe70 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8001660:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8001662:	4621      	mov	r1, r4
 8001664:	a804      	add	r0, sp, #16
 8001666:	f020 fa35 	bl	8021ad4 <siprintf>
	setlcdtext("t5.txt", str);
 800166a:	a904      	add	r1, sp, #16
 800166c:	4820      	ldr	r0, [pc, #128]	; (80016f0 <lcd_showvars+0x1a4>)

	sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
 800166e:	f242 7419 	movw	r4, #10009	; 0x2719
	setlcdtext("t5.txt", str);
 8001672:	f7ff fe65 	bl	8001340 <setlcdtext>
	sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <lcd_showvars+0x1a8>)
 8001678:	4d1f      	ldr	r5, [pc, #124]	; (80016f8 <lcd_showvars+0x1ac>)
 800167a:	a804      	add	r0, sp, #16
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	230c      	movs	r3, #12
 8001680:	491e      	ldr	r1, [pc, #120]	; (80016fc <lcd_showvars+0x1b0>)
 8001682:	9203      	str	r2, [sp, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	682d      	ldr	r5, [r5, #0]
 8001688:	9502      	str	r5, [sp, #8]
 800168a:	6809      	ldr	r1, [r1, #0]
 800168c:	e9cd 4100 	strd	r4, r1, [sp]
 8001690:	491b      	ldr	r1, [pc, #108]	; (8001700 <lcd_showvars+0x1b4>)
 8001692:	f020 fa1f 	bl	8021ad4 <siprintf>
//	sprintf(str, "UID=%lx %lx %lx", STM32_UUID[0],	STM32_UUID[1], STM32_UUID[2]);
	setlcdtext("t26.txt", str);
 8001696:	a904      	add	r1, sp, #16
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <lcd_showvars+0x1b8>)
 800169a:	f7ff fe51 	bl	8001340 <setlcdtext>

}
 800169e:	b015      	add	sp, #84	; 0x54
 80016a0:	bd30      	pop	{r4, r5, pc}
 80016a2:	bf00      	nop
 80016a4:	200231d4 	.word	0x200231d4
 80016a8:	08025f24 	.word	0x08025f24
 80016ac:	20022d4c 	.word	0x20022d4c
 80016b0:	08025fe4 	.word	0x08025fe4
 80016b4:	08025f34 	.word	0x08025f34
 80016b8:	08025f3c 	.word	0x08025f3c
 80016bc:	08025f44 	.word	0x08025f44
 80016c0:	200006bc 	.word	0x200006bc
 80016c4:	08025f4c 	.word	0x08025f4c
 80016c8:	20000710 	.word	0x20000710
 80016cc:	08025f54 	.word	0x08025f54
 80016d0:	20000246 	.word	0x20000246
 80016d4:	08025f5c 	.word	0x08025f5c
 80016d8:	08025f64 	.word	0x08025f64
 80016dc:	08025ed4 	.word	0x08025ed4
 80016e0:	08025f1c 	.word	0x08025f1c
 80016e4:	08025f6c 	.word	0x08025f6c
 80016e8:	08025ef8 	.word	0x08025ef8
 80016ec:	08025f74 	.word	0x08025f74
 80016f0:	08025f7c 	.word	0x08025f7c
 80016f4:	1ff0f428 	.word	0x1ff0f428
 80016f8:	1ff0f424 	.word	0x1ff0f424
 80016fc:	1ff0f420 	.word	0x1ff0f420
 8001700:	08025f84 	.word	0x08025f84
 8001704:	08025fac 	.word	0x08025fac

08001708 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
lcd_trigcharts() {
 8001708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 800170c:	4931      	ldr	r1, [pc, #196]	; (80017d4 <lcd_trigcharts+0xcc>)
lcd_trigcharts() {
 800170e:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8001710:	4831      	ldr	r0, [pc, #196]	; (80017d8 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 8001712:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 8001716:	f7ff fe13 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt","Triggers");
 800171a:	492e      	ldr	r1, [pc, #184]	; (80017d4 <lcd_trigcharts+0xcc>)
 800171c:	482f      	ldr	r0, [pc, #188]	; (80017dc <lcd_trigcharts+0xd4>)
 800171e:	f7ff fe0f 	bl	8001340 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 8001722:	492f      	ldr	r1, [pc, #188]	; (80017e0 <lcd_trigcharts+0xd8>)
 8001724:	482f      	ldr	r0, [pc, #188]	; (80017e4 <lcd_trigcharts+0xdc>)
 8001726:	f7ff fe0b 	bl	8001340 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 800172a:	492d      	ldr	r1, [pc, #180]	; (80017e0 <lcd_trigcharts+0xd8>)
 800172c:	482e      	ldr	r0, [pc, #184]	; (80017e8 <lcd_trigcharts+0xe0>)
 800172e:	f7ff fe07 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <lcd_trigcharts+0xe4>)
 8001734:	492e      	ldr	r1, [pc, #184]	; (80017f0 <lcd_trigcharts+0xe8>)
 8001736:	4668      	mov	r0, sp
 8001738:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800173a:	f020 f9cb 	bl	8021ad4 <siprintf>
	setlcdtext("t0.txt", str);
 800173e:	4669      	mov	r1, sp
 8001740:	482c      	ldr	r0, [pc, #176]	; (80017f4 <lcd_trigcharts+0xec>)
 8001742:	f7ff fdfd 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001746:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <lcd_trigcharts+0xf0>)
 8001748:	4929      	ldr	r1, [pc, #164]	; (80017f0 <lcd_trigcharts+0xe8>)
 800174a:	4668      	mov	r0, sp
 800174c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001750:	4f2a      	ldr	r7, [pc, #168]	; (80017fc <lcd_trigcharts+0xf4>)
 8001752:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001754:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001818 <lcd_trigcharts+0x110>
 8001758:	4e29      	ldr	r6, [pc, #164]	; (8001800 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800175a:	bfb8      	it	lt
 800175c:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800175e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800181c <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001762:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001766:	f020 f9b5 	bl	8021ad4 <siprintf>
	setlcdtext("t2.txt", str);
 800176a:	4669      	mov	r1, sp
 800176c:	4825      	ldr	r0, [pc, #148]	; (8001804 <lcd_trigcharts+0xfc>)
 800176e:	f7ff fde7 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 8001772:	4825      	ldr	r0, [pc, #148]	; (8001808 <lcd_trigcharts+0x100>)
 8001774:	f7ff fdca 	bl	800130c <writelcdcmd>
	buffi = trigindex;
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <lcd_trigcharts+0x104>)
 800177a:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 800177c:	e01c      	b.n	80017b8 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800177e:	f819 2004 	ldrb.w	r2, [r9, r4]
 8001782:	f020 f9a7 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
 8001786:	4668      	mov	r0, sp
 8001788:	f7ff fdc0 	bl	800130c <writelcdcmd>
		osDelay(15);
 800178c:	200f      	movs	r0, #15
 800178e:	f010 fac7 	bl	8011d20 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8001792:	f818 2004 	ldrb.w	r2, [r8, r4]
 8001796:	491e      	ldr	r1, [pc, #120]	; (8001810 <lcd_trigcharts+0x108>)
 8001798:	4668      	mov	r0, sp
 800179a:	f020 f99b 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 800179e:	3401      	adds	r4, #1
		writelcdcmd(str);
 80017a0:	4668      	mov	r0, sp
 80017a2:	f7ff fdb3 	bl	800130c <writelcdcmd>
		osDelay(15);
 80017a6:	200f      	movs	r0, #15
 80017a8:	f010 faba 	bl	8011d20 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80017ac:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80017b0:	bfc8      	it	gt
 80017b2:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80017b4:	3d01      	subs	r5, #1
 80017b6:	d007      	beq.n	80017c8 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 80017b8:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80017ba:	4631      	mov	r1, r6
 80017bc:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d0dd      	beq.n	800177e <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80017c2:	b009      	add	sp, #36	; 0x24
 80017c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80017c8:	4812      	ldr	r0, [pc, #72]	; (8001814 <lcd_trigcharts+0x10c>)
 80017ca:	f7ff fd9f 	bl	800130c <writelcdcmd>
}
 80017ce:	b009      	add	sp, #36	; 0x24
 80017d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d4:	08025fb4 	.word	0x08025fb4
 80017d8:	08025ef8 	.word	0x08025ef8
 80017dc:	08025fc0 	.word	0x08025fc0
 80017e0:	08025fc8 	.word	0x08025fc8
 80017e4:	08025f74 	.word	0x08025f74
 80017e8:	08025f1c 	.word	0x08025f1c
 80017ec:	20022d4c 	.word	0x20022d4c
 80017f0:	08025fe4 	.word	0x08025fe4
 80017f4:	08025ed4 	.word	0x08025ed4
 80017f8:	20000710 	.word	0x20000710
 80017fc:	200017d4 	.word	0x200017d4
 8001800:	08025fdc 	.word	0x08025fdc
 8001804:	08025f6c 	.word	0x08025f6c
 8001808:	08025fd0 	.word	0x08025fd0
 800180c:	200019c8 	.word	0x200019c8
 8001810:	08025fe8 	.word	0x08025fe8
 8001814:	08025ff4 	.word	0x08025ff4
 8001818:	200019cc 	.word	0x200019cc
 800181c:	200015f4 	.word	0x200015f4

08001820 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
lcd_trigplot() {
 8001820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001824:	493c      	ldr	r1, [pc, #240]	; (8001918 <lcd_trigplot+0xf8>)
lcd_trigplot() {
 8001826:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001828:	4d3c      	ldr	r5, [pc, #240]	; (800191c <lcd_trigplot+0xfc>)
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 800182a:	4e3d      	ldr	r6, [pc, #244]	; (8001920 <lcd_trigplot+0x100>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 800182c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 800182e:	6808      	ldr	r0, [r1, #0]
	val = abs(meanwindiff) & 0xfff;
 8001830:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001834:	1a12      	subs	r2, r2, r0

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001836:	f8df c128 	ldr.w	ip, [pc, #296]	; 8001960 <lcd_trigplot+0x140>
	val = abs(meanwindiff) & 0xfff;
 800183a:	2b00      	cmp	r3, #0
	lasttrig = statuspkt.trigcount;
 800183c:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
	val = val * 32;		// scale up: n pixels per trigger
 8001840:	ea4f 1242 	mov.w	r2, r2, lsl #5
	trigvec[trigindex] = val;
 8001844:	4c37      	ldr	r4, [pc, #220]	; (8001924 <lcd_trigplot+0x104>)
	val = abs(meanwindiff) & 0xfff;
 8001846:	bfb8      	it	lt
 8001848:	425b      	neglt	r3, r3
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800184a:	f89c c000 	ldrb.w	ip, [ip]
	trigvec[trigindex] = val;
 800184e:	2a77      	cmp	r2, #119	; 0x77
 8001850:	6820      	ldr	r0, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8001852:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8001856:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8001964 <lcd_trigplot+0x144>
 800185a:	bfa8      	it	ge
 800185c:	2277      	movge	r2, #119	; 0x77
	noisevec[trigindex] = val;
 800185e:	4f32      	ldr	r7, [pc, #200]	; (8001928 <lcd_trigplot+0x108>)
 8001860:	2b77      	cmp	r3, #119	; 0x77
	lasttrig = statuspkt.trigcount;
 8001862:	f8c1 e000 	str.w	lr, [r1]
	trigvec[trigindex] = val;
 8001866:	f808 2000 	strb.w	r2, [r8, r0]
	noisevec[trigindex] = val;
 800186a:	bfa8      	it	ge
 800186c:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800186e:	f1bc 0f02 	cmp.w	ip, #2
	noisevec[trigindex] = val;
 8001872:	543b      	strb	r3, [r7, r0]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001874:	d00c      	beq.n	8001890 <lcd_trigplot+0x70>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8001876:	3001      	adds	r0, #1
	if (trigindex >= LCDXPIXELS)
 8001878:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 800187c:	da03      	bge.n	8001886 <lcd_trigplot+0x66>
	trigindex++;
 800187e:	6020      	str	r0, [r4, #0]
		trigindex = 0;
}
 8001880:	b008      	add	sp, #32
 8001882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	6023      	str	r3, [r4, #0]
}
 800188a:	b008      	add	sp, #32
 800188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8001890:	4926      	ldr	r1, [pc, #152]	; (800192c <lcd_trigplot+0x10c>)
 8001892:	4827      	ldr	r0, [pc, #156]	; (8001930 <lcd_trigplot+0x110>)
 8001894:	f7ff fd54 	bl	8001340 <setlcdtext>
		setlcdtext("t18.txt","Triggers");
 8001898:	4924      	ldr	r1, [pc, #144]	; (800192c <lcd_trigplot+0x10c>)
 800189a:	4826      	ldr	r0, [pc, #152]	; (8001934 <lcd_trigplot+0x114>)
 800189c:	f7ff fd50 	bl	8001340 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 80018a0:	4925      	ldr	r1, [pc, #148]	; (8001938 <lcd_trigplot+0x118>)
 80018a2:	4826      	ldr	r0, [pc, #152]	; (800193c <lcd_trigplot+0x11c>)
 80018a4:	f7ff fd4c 	bl	8001340 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 80018a8:	4923      	ldr	r1, [pc, #140]	; (8001938 <lcd_trigplot+0x118>)
 80018aa:	4825      	ldr	r0, [pc, #148]	; (8001940 <lcd_trigplot+0x120>)
 80018ac:	f7ff fd48 	bl	8001340 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 80018b0:	6823      	ldr	r3, [r4, #0]
 80018b2:	4924      	ldr	r1, [pc, #144]	; (8001944 <lcd_trigplot+0x124>)
 80018b4:	4668      	mov	r0, sp
 80018b6:	f818 2003 	ldrb.w	r2, [r8, r3]
 80018ba:	f020 f90b 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
 80018be:	4668      	mov	r0, sp
 80018c0:	f7ff fd24 	bl	800130c <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	4920      	ldr	r1, [pc, #128]	; (8001948 <lcd_trigplot+0x128>)
 80018c8:	4668      	mov	r0, sp
 80018ca:	5cfa      	ldrb	r2, [r7, r3]
 80018cc:	f020 f902 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
 80018d0:	4668      	mov	r0, sp
 80018d2:	f7ff fd1b 	bl	800130c <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80018d6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80018d8:	491c      	ldr	r1, [pc, #112]	; (800194c <lcd_trigplot+0x12c>)
 80018da:	4668      	mov	r0, sp
 80018dc:	f020 f8fa 	bl	8021ad4 <siprintf>
		setlcdtext("t0.txt", str);
 80018e0:	4669      	mov	r1, sp
 80018e2:	481b      	ldr	r0, [pc, #108]	; (8001950 <lcd_trigplot+0x130>)
 80018e4:	f7ff fd2c 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80018e8:	f9b6 2000 	ldrsh.w	r2, [r6]
 80018ec:	4917      	ldr	r1, [pc, #92]	; (800194c <lcd_trigplot+0x12c>)
 80018ee:	4668      	mov	r0, sp
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	bfb8      	it	lt
 80018f4:	4252      	neglt	r2, r2
 80018f6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80018fa:	f020 f8eb 	bl	8021ad4 <siprintf>
		setlcdtext("t2.txt", str);
 80018fe:	4669      	mov	r1, sp
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <lcd_trigplot+0x134>)
 8001902:	f7ff fd1d 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <lcd_trigplot+0x138>)
 8001908:	f7ff fd00 	bl	800130c <writelcdcmd>
		writelcdcmd("vis t4,1");
 800190c:	4813      	ldr	r0, [pc, #76]	; (800195c <lcd_trigplot+0x13c>)
 800190e:	f7ff fcfd 	bl	800130c <writelcdcmd>
 8001912:	6820      	ldr	r0, [r4, #0]
 8001914:	e7af      	b.n	8001876 <lcd_trigplot+0x56>
 8001916:	bf00      	nop
 8001918:	20001558 	.word	0x20001558
 800191c:	20022d4c 	.word	0x20022d4c
 8001920:	20000710 	.word	0x20000710
 8001924:	200019c8 	.word	0x200019c8
 8001928:	200015f4 	.word	0x200015f4
 800192c:	08025fb4 	.word	0x08025fb4
 8001930:	08025ef8 	.word	0x08025ef8
 8001934:	08025fc0 	.word	0x08025fc0
 8001938:	08025fc8 	.word	0x08025fc8
 800193c:	08025f74 	.word	0x08025f74
 8001940:	08025f1c 	.word	0x08025f1c
 8001944:	08025fdc 	.word	0x08025fdc
 8001948:	08025fe8 	.word	0x08025fe8
 800194c:	08025fe4 	.word	0x08025fe4
 8001950:	08025ed4 	.word	0x08025ed4
 8001954:	08025f6c 	.word	0x08025f6c
 8001958:	08025edc 	.word	0x08025edc
 800195c:	08026004 	.word	0x08026004
 8001960:	200017d4 	.word	0x200017d4
 8001964:	200019cc 	.word	0x200019cc

08001968 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
lcd_presscharts() {
 8001968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 800196c:	4920      	ldr	r1, [pc, #128]	; (80019f0 <lcd_presscharts+0x88>)
lcd_presscharts() {
 800196e:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8001970:	4820      	ldr	r0, [pc, #128]	; (80019f4 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8001972:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8001976:	f7ff fce3 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt","Pressure");
 800197a:	491d      	ldr	r1, [pc, #116]	; (80019f0 <lcd_presscharts+0x88>)
 800197c:	481e      	ldr	r0, [pc, #120]	; (80019f8 <lcd_presscharts+0x90>)
 800197e:	f7ff fcdf 	bl	8001340 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <lcd_presscharts+0x94>)
 8001984:	4a1e      	ldr	r2, [pc, #120]	; (8001a00 <lcd_presscharts+0x98>)
 8001986:	4668      	mov	r0, sp
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	491d      	ldr	r1, [pc, #116]	; (8001a04 <lcd_presscharts+0x9c>)
 8001990:	f020 f8a0 	bl	8021ad4 <siprintf>
	setlcdtext("t0.txt", str);
 8001994:	4669      	mov	r1, sp
 8001996:	481c      	ldr	r0, [pc, #112]	; (8001a08 <lcd_presscharts+0xa0>)
 8001998:	f7ff fcd2 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 800199c:	481b      	ldr	r0, [pc, #108]	; (8001a0c <lcd_presscharts+0xa4>)
 800199e:	f7ff fcb5 	bl	800130c <writelcdcmd>
	buffi = pressindex;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <lcd_presscharts+0xa8>)
 80019a4:	4f1b      	ldr	r7, [pc, #108]	; (8001a14 <lcd_presscharts+0xac>)
 80019a6:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019a8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001a20 <lcd_presscharts+0xb8>
 80019ac:	4e1a      	ldr	r6, [pc, #104]	; (8001a18 <lcd_presscharts+0xb0>)
 80019ae:	e010      	b.n	80019d2 <lcd_presscharts+0x6a>
 80019b0:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80019b4:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019b6:	f020 f88d 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
 80019ba:	4668      	mov	r0, sp
 80019bc:	f7ff fca6 	bl	800130c <writelcdcmd>
		osDelay(15);
 80019c0:	200f      	movs	r0, #15
 80019c2:	f010 f9ad 	bl	8011d20 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80019c6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80019ca:	bfc8      	it	gt
 80019cc:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80019ce:	3d01      	subs	r5, #1
 80019d0:	d007      	beq.n	80019e2 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 80019d2:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019d4:	4631      	mov	r1, r6
 80019d6:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d0e9      	beq.n	80019b0 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80019dc:	b008      	add	sp, #32
 80019de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80019e2:	480e      	ldr	r0, [pc, #56]	; (8001a1c <lcd_presscharts+0xb4>)
 80019e4:	f7ff fc92 	bl	800130c <writelcdcmd>
}
 80019e8:	b008      	add	sp, #32
 80019ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019ee:	bf00      	nop
 80019f0:	08026010 	.word	0x08026010
 80019f4:	08025ef8 	.word	0x08025ef8
 80019f8:	08025fc0 	.word	0x08025fc0
 80019fc:	20023a0c 	.word	0x20023a0c
 8001a00:	20023a08 	.word	0x20023a08
 8001a04:	0802601c 	.word	0x0802601c
 8001a08:	08025ed4 	.word	0x08025ed4
 8001a0c:	08025fd0 	.word	0x08025fd0
 8001a10:	200017d8 	.word	0x200017d8
 8001a14:	200017d4 	.word	0x200017d4
 8001a18:	08025fdc 	.word	0x08025fdc
 8001a1c:	08025ff4 	.word	0x08025ff4
 8001a20:	200017dc 	.word	0x200017dc

08001a24 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
lcd_pressplot() {
 8001a24:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a26:	4d2e      	ldr	r5, [pc, #184]	; (8001ae0 <lcd_pressplot+0xbc>)
lcd_pressplot() {
 8001a28:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001a2a:	4c2e      	ldr	r4, [pc, #184]	; (8001ae4 <lcd_pressplot+0xc0>)

	p = pressure * 1000 + pf;
 8001a2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a30:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001a32:	6823      	ldr	r3, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a34:	0892      	lsrs	r2, r2, #2
	if (p < 93000) p = 93000;		// 93 HPa
 8001a36:	492c      	ldr	r1, [pc, #176]	; (8001ae8 <lcd_pressplot+0xc4>)
	p = pressure;
 8001a38:	9301      	str	r3, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a3a:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001a3c:	9a02      	ldr	r2, [sp, #8]
 8001a3e:	fb00 2303 	mla	r3, r0, r3, r2
 8001a42:	9301      	str	r3, [sp, #4]
	if (p < 93000) p = 93000;		// 93 HPa
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	428b      	cmp	r3, r1
 8001a48:	dc01      	bgt.n	8001a4e <lcd_pressplot+0x2a>
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <lcd_pressplot+0xc8>)
 8001a4c:	9301      	str	r3, [sp, #4]
	if (p > 103000) p - 103000;		// 103 HPa
 8001a4e:	9a01      	ldr	r2, [sp, #4]
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <lcd_pressplot+0xcc>)
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dd00      	ble.n	8001a58 <lcd_pressplot+0x34>
 8001a56:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001a58:	9901      	ldr	r1, [sp, #4]
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <lcd_pressplot+0xd0>)
	val = p / (10000/240);		// scale for 240 Y steps on chart
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <lcd_pressplot+0xd4>)
	p = p - 93000;
 8001a5e:	440b      	add	r3, r1

	printf("pressure for LCD %d",val);
 8001a60:	4826      	ldr	r0, [pc, #152]	; (8001afc <lcd_pressplot+0xd8>)
	p = p - 93000;
 8001a62:	9301      	str	r3, [sp, #4]
	val = p / (10000/240);		// scale for 240 Y steps on chart
 8001a64:	9b01      	ldr	r3, [sp, #4]
 8001a66:	fb82 1203 	smull	r1, r2, r2, r3
 8001a6a:	17db      	asrs	r3, r3, #31
 8001a6c:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001a70:	9303      	str	r3, [sp, #12]
	printf("pressure for LCD %d",val);
 8001a72:	9903      	ldr	r1, [sp, #12]
 8001a74:	f01f feb6 	bl	80217e4 <iprintf>

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001a78:	9b03      	ldr	r3, [sp, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da01      	bge.n	8001a82 <lcd_pressplot+0x5e>
		val = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001a82:	9b03      	ldr	r3, [sp, #12]
 8001a84:	2bef      	cmp	r3, #239	; 0xef
 8001a86:	dd01      	ble.n	8001a8c <lcd_pressplot+0x68>
		val = 239;		// max Y
 8001a88:	23ef      	movs	r3, #239	; 0xef
 8001a8a:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001a8c:	491c      	ldr	r1, [pc, #112]	; (8001b00 <lcd_pressplot+0xdc>)
	pressvec[pressindex] = val;
 8001a8e:	9a03      	ldr	r2, [sp, #12]
 8001a90:	4e1c      	ldr	r6, [pc, #112]	; (8001b04 <lcd_pressplot+0xe0>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001a92:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001a94:	6833      	ldr	r3, [r6, #0]
 8001a96:	481c      	ldr	r0, [pc, #112]	; (8001b08 <lcd_pressplot+0xe4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001a98:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001a9a:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001a9c:	d007      	beq.n	8001aae <lcd_pressplot+0x8a>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001a9e:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001aa0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001aa4:	bfa8      	it	ge
 8001aa6:	2300      	movge	r3, #0
 8001aa8:	6033      	str	r3, [r6, #0]
}
 8001aaa:	b00c      	add	sp, #48	; 0x30
 8001aac:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	4916      	ldr	r1, [pc, #88]	; (8001b0c <lcd_pressplot+0xe8>)
 8001ab2:	a804      	add	r0, sp, #16
 8001ab4:	f020 f80e 	bl	8021ad4 <siprintf>
		writelcdcmd(str);
 8001ab8:	a804      	add	r0, sp, #16
 8001aba:	f7ff fc27 	bl	800130c <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac>>2);	// pressure
 8001abe:	682b      	ldr	r3, [r5, #0]
 8001ac0:	6822      	ldr	r2, [r4, #0]
 8001ac2:	a804      	add	r0, sp, #16
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	4912      	ldr	r1, [pc, #72]	; (8001b10 <lcd_pressplot+0xec>)
 8001ac8:	f020 f804 	bl	8021ad4 <siprintf>
		setlcdtext("t0.txt", str);
 8001acc:	a904      	add	r1, sp, #16
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <lcd_pressplot+0xf0>)
 8001ad0:	f7ff fc36 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001ad4:	4810      	ldr	r0, [pc, #64]	; (8001b18 <lcd_pressplot+0xf4>)
 8001ad6:	f7ff fc19 	bl	800130c <writelcdcmd>
 8001ada:	6833      	ldr	r3, [r6, #0]
 8001adc:	e7df      	b.n	8001a9e <lcd_pressplot+0x7a>
 8001ade:	bf00      	nop
 8001ae0:	20023a0c 	.word	0x20023a0c
 8001ae4:	20023a08 	.word	0x20023a08
 8001ae8:	00016b47 	.word	0x00016b47
 8001aec:	00016b48 	.word	0x00016b48
 8001af0:	00019258 	.word	0x00019258
 8001af4:	fffe94b8 	.word	0xfffe94b8
 8001af8:	63e7063f 	.word	0x63e7063f
 8001afc:	08026028 	.word	0x08026028
 8001b00:	200017d4 	.word	0x200017d4
 8001b04:	200017d8 	.word	0x200017d8
 8001b08:	200017dc 	.word	0x200017dc
 8001b0c:	08025fdc 	.word	0x08025fdc
 8001b10:	0802601c 	.word	0x0802601c
 8001b14:	08025ed4 	.word	0x08025ed4
 8001b18:	08025edc 	.word	0x08025edc

08001b1c <lcd_controls>:


// refresh the entire control page on the lcd
lcd_controls()
{
 8001b1c:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001b1e:	2064      	movs	r0, #100	; 0x64
{
 8001b20:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001b22:	f010 f8fd 	bl	8011d20 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <lcd_controls+0x48>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d002      	beq.n	8001b34 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
	sprintf(str,"Target UDP host: %s\n", udp_target);
	setlcdtext("t3.txt", str);
	}
}
 8001b2e:	b00d      	add	sp, #52	; 0x34
 8001b30:	f85d fb04 	ldr.w	pc, [sp], #4
	setlcdtext("t0.txt", "Sound");
 8001b34:	490c      	ldr	r1, [pc, #48]	; (8001b68 <lcd_controls+0x4c>)
 8001b36:	480d      	ldr	r0, [pc, #52]	; (8001b6c <lcd_controls+0x50>)
 8001b38:	f7ff fc02 	bl	8001340 <setlcdtext>
	setlcdtext("t1.txt", "LEDS");
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <lcd_controls+0x54>)
 8001b3e:	480d      	ldr	r0, [pc, #52]	; (8001b74 <lcd_controls+0x58>)
 8001b40:	f7ff fbfe 	bl	8001340 <setlcdtext>
	setlcdtext("t2.txt", "LCD Brightness");
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <lcd_controls+0x5c>)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <lcd_controls+0x60>)
 8001b48:	f7ff fbfa 	bl	8001340 <setlcdtext>
	sprintf(str,"Target UDP host: %s\n", udp_target);
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <lcd_controls+0x64>)
 8001b4e:	4668      	mov	r0, sp
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <lcd_controls+0x68>)
 8001b52:	f01f ffbf 	bl	8021ad4 <siprintf>
	setlcdtext("t3.txt", str);
 8001b56:	4669      	mov	r1, sp
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <lcd_controls+0x6c>)
 8001b5a:	f7ff fbf1 	bl	8001340 <setlcdtext>
}
 8001b5e:	b00d      	add	sp, #52	; 0x34
 8001b60:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b64:	200017d4 	.word	0x200017d4
 8001b68:	0802603c 	.word	0x0802603c
 8001b6c:	08025ed4 	.word	0x08025ed4
 8001b70:	08026044 	.word	0x08026044
 8001b74:	08025f1c 	.word	0x08025f1c
 8001b78:	0802604c 	.word	0x0802604c
 8001b7c:	08025f6c 	.word	0x08025f6c
 8001b80:	20023a68 	.word	0x20023a68
 8001b84:	0802605c 	.word	0x0802605c
 8001b88:	08025ef8 	.word	0x08025ef8

08001b8c <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001b8c:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001b8e:	4c15      	ldr	r4, [pc, #84]	; (8001be4 <lcd_pagechange+0x58>)
 8001b90:	7823      	ldrb	r3, [r4, #0]
 8001b92:	4283      	cmp	r3, r0
 8001b94:	d00b      	beq.n	8001bae <lcd_pagechange+0x22>
	our_currentpage = newpage;
 8001b96:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001b98:	2805      	cmp	r0, #5
 8001b9a:	d81f      	bhi.n	8001bdc <lcd_pagechange+0x50>
 8001b9c:	e8df f000 	tbb	[pc, r0]
 8001ba0:	19140f03 	.word	0x19140f03
 8001ba4:	070a      	.short	0x070a
		lcd_time();
 8001ba6:	f7ff fc6b 	bl	8001480 <lcd_time>
		lcd_date();
 8001baa:	f7ff fcb3 	bl	8001514 <lcd_date>
	return (our_currentpage);
 8001bae:	7820      	ldrb	r0, [r4, #0]
 8001bb0:	b2c0      	uxtb	r0, r0
}
 8001bb2:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001bb4:	f7ff ffb2 	bl	8001b1c <lcd_controls>
	return (our_currentpage);
 8001bb8:	7820      	ldrb	r0, [r4, #0]
 8001bba:	b2c0      	uxtb	r0, r0
}
 8001bbc:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001bbe:	f7ff fcc5 	bl	800154c <lcd_showvars>
	return (our_currentpage);
 8001bc2:	7820      	ldrb	r0, [r4, #0]
 8001bc4:	b2c0      	uxtb	r0, r0
}
 8001bc6:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001bc8:	f7ff fd9e 	bl	8001708 <lcd_trigcharts>
	return (our_currentpage);
 8001bcc:	7820      	ldrb	r0, [r4, #0]
 8001bce:	b2c0      	uxtb	r0, r0
}
 8001bd0:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001bd2:	f7ff fec9 	bl	8001968 <lcd_presscharts>
	return (our_currentpage);
 8001bd6:	7820      	ldrb	r0, [r4, #0]
 8001bd8:	b2c0      	uxtb	r0, r0
}
 8001bda:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <lcd_pagechange+0x5c>)
 8001bde:	f01f fe9d 	bl	802191c <puts>
		break;
 8001be2:	e7e4      	b.n	8001bae <lcd_pagechange+0x22>
 8001be4:	200017d4 	.word	0x200017d4
 8001be8:	08026074 	.word	0x08026074

08001bec <lcd_event_process>:
int lcd_event_process(void) {
 8001bec:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001bee:	4c85      	ldr	r4, [pc, #532]	; (8001e04 <lcd_event_process+0x218>)
int lcd_event_process(void) {
 8001bf0:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff fbd5 	bl	80013a4 <isnexpkt>
 8001bfa:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001bfc:	9b01      	ldr	r3, [sp, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	dd45      	ble.n	8001c8e <lcd_event_process+0xa2>
		lcdstatus = eventbuffer[0];
 8001c02:	7821      	ldrb	r1, [r4, #0]
 8001c04:	4b80      	ldr	r3, [pc, #512]	; (8001e08 <lcd_event_process+0x21c>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c06:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001c08:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c0a:	d923      	bls.n	8001c54 <lcd_event_process+0x68>
			switch (eventbuffer[0]) {
 8001c0c:	2965      	cmp	r1, #101	; 0x65
 8001c0e:	d066      	beq.n	8001cde <lcd_event_process+0xf2>
 8001c10:	2966      	cmp	r1, #102	; 0x66
 8001c12:	d03f      	beq.n	8001c94 <lcd_event_process+0xa8>
				printf("lcd_event_process: unknown response received 0x%x\n",eventbuffer[0]);
 8001c14:	487d      	ldr	r0, [pc, #500]	; (8001e0c <lcd_event_process+0x220>)
 8001c16:	f01f fde5 	bl	80217e4 <iprintf>
				i = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c1e:	9b00      	ldr	r3, [sp, #0]
 8001c20:	5ce3      	ldrb	r3, [r4, r3]
 8001c22:	2bff      	cmp	r3, #255	; 0xff
 8001c24:	d00f      	beq.n	8001c46 <lcd_event_process+0x5a>
					printf(" 0x%02x", eventbuffer[i++]);
 8001c26:	4d7a      	ldr	r5, [pc, #488]	; (8001e10 <lcd_event_process+0x224>)
 8001c28:	e009      	b.n	8001c3e <lcd_event_process+0x52>
 8001c2a:	9b00      	ldr	r3, [sp, #0]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	5ce1      	ldrb	r1, [r4, r3]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	f01f fdd7 	bl	80217e4 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	5ce3      	ldrb	r3, [r4, r3]
 8001c3a:	2bff      	cmp	r3, #255	; 0xff
 8001c3c:	d003      	beq.n	8001c46 <lcd_event_process+0x5a>
 8001c3e:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001c40:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c42:	2b1f      	cmp	r3, #31
 8001c44:	d9f1      	bls.n	8001c2a <lcd_event_process+0x3e>
				printf("\n");
 8001c46:	200a      	movs	r0, #10
 8001c48:	f01f fde4 	bl	8021814 <putchar>
				return(-1);
 8001c4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c50:	b003      	add	sp, #12
 8001c52:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001c54:	2901      	cmp	r1, #1
 8001c56:	d0fb      	beq.n	8001c50 <lcd_event_process+0x64>
				printf("Nextion reported: ");
 8001c58:	486e      	ldr	r0, [pc, #440]	; (8001e14 <lcd_event_process+0x228>)
 8001c5a:	f01f fdc3 	bl	80217e4 <iprintf>
				switch (eventbuffer[0]) {
 8001c5e:	7821      	ldrb	r1, [r4, #0]
 8001c60:	1e4b      	subs	r3, r1, #1
 8001c62:	2b22      	cmp	r3, #34	; 0x22
 8001c64:	d847      	bhi.n	8001cf6 <lcd_event_process+0x10a>
 8001c66:	e8df f003 	tbb	[pc, r3]
 8001c6a:	467c      	.short	0x467c
 8001c6c:	46464646 	.word	0x46464646
 8001c70:	46464646 	.word	0x46464646
 8001c74:	46464646 	.word	0x46464646
 8001c78:	74464646 	.word	0x74464646
 8001c7c:	46464646 	.word	0x46464646
 8001c80:	6c464646 	.word	0x6c464646
 8001c84:	60466646 	.word	0x60466646
 8001c88:	46465a46 	.word	0x46465a46
 8001c8c:	54          	.byte	0x54
 8001c8d:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8001c8e:	9801      	ldr	r0, [sp, #4]
}
 8001c90:	b003      	add	sp, #12
 8001c92:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: Got Page event, OldPage=%d, NewPage=%d\n", lcd_currentpage, eventbuffer[1]);
 8001c94:	4d60      	ldr	r5, [pc, #384]	; (8001e18 <lcd_event_process+0x22c>)
 8001c96:	7862      	ldrb	r2, [r4, #1]
 8001c98:	7829      	ldrb	r1, [r5, #0]
 8001c9a:	4860      	ldr	r0, [pc, #384]	; (8001e1c <lcd_event_process+0x230>)
 8001c9c:	f01f fda2 	bl	80217e4 <iprintf>
				setlcddim(lcdbright);
 8001ca0:	495f      	ldr	r1, [pc, #380]	; (8001e20 <lcd_event_process+0x234>)
	dimtimer = DIMTIME;
 8001ca2:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <lcd_event_process+0x238>)
 8001ca4:	f64e 2260 	movw	r2, #60000	; 0xea60
				setlcddim(lcdbright);
 8001ca8:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8001caa:	485f      	ldr	r0, [pc, #380]	; (8001e28 <lcd_event_process+0x23c>)
 8001cac:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8001cae:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001cb0:	bf28      	it	cs
 8001cb2:	2163      	movcs	r1, #99	; 0x63
 8001cb4:	f7ff fb58 	bl	8001368 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8001cb8:	7860      	ldrb	r0, [r4, #1]
 8001cba:	f7ff ff67 	bl	8001b8c <lcd_pagechange>
 8001cbe:	2800      	cmp	r0, #0
 8001cc0:	db04      	blt.n	8001ccc <lcd_event_process+0xe0>
 8001cc2:	7860      	ldrb	r0, [r4, #1]
 8001cc4:	f7ff ff62 	bl	8001b8c <lcd_pagechange>
 8001cc8:	2805      	cmp	r0, #5
 8001cca:	dd1a      	ble.n	8001d02 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001ccc:	7860      	ldrb	r0, [r4, #1]
 8001cce:	f7ff ff5d 	bl	8001b8c <lcd_pagechange>
 8001cd2:	4601      	mov	r1, r0
 8001cd4:	4855      	ldr	r0, [pc, #340]	; (8001e2c <lcd_event_process+0x240>)
 8001cd6:	f01f fd85 	bl	80217e4 <iprintf>
		return(0);
 8001cda:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001cdc:	e7b8      	b.n	8001c50 <lcd_event_process+0x64>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n",eventbuffer[1],eventbuffer[2],eventbuffer[3] );
 8001cde:	78e3      	ldrb	r3, [r4, #3]
 8001ce0:	78a2      	ldrb	r2, [r4, #2]
 8001ce2:	7861      	ldrb	r1, [r4, #1]
 8001ce4:	4852      	ldr	r0, [pc, #328]	; (8001e30 <lcd_event_process+0x244>)
 8001ce6:	f01f fd7d 	bl	80217e4 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001cea:	7863      	ldrb	r3, [r4, #1]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d03d      	beq.n	8001d6c <lcd_event_process+0x180>
		return(0);
 8001cf0:	2000      	movs	r0, #0
}
 8001cf2:	b003      	add	sp, #12
 8001cf4:	bd30      	pop	{r4, r5, pc}
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8001cf6:	484f      	ldr	r0, [pc, #316]	; (8001e34 <lcd_event_process+0x248>)
 8001cf8:	f01f fd74 	bl	80217e4 <iprintf>
				return(-1);		// some kindof error
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d00:	e7a6      	b.n	8001c50 <lcd_event_process+0x64>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d02:	7860      	ldrb	r0, [r4, #1]
 8001d04:	f7ff ff42 	bl	8001b8c <lcd_pagechange>
 8001d08:	4603      	mov	r3, r0
		return(0);
 8001d0a:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	702b      	strb	r3, [r5, #0]
 8001d10:	e79e      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Variable name too long\n");
 8001d12:	4849      	ldr	r0, [pc, #292]	; (8001e38 <lcd_event_process+0x24c>)
 8001d14:	f01f fe02 	bl	802191c <puts>
				return(-1);		// some kindof error
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d1c:	e798      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Invalid Escape Char\n");
 8001d1e:	4847      	ldr	r0, [pc, #284]	; (8001e3c <lcd_event_process+0x250>)
 8001d20:	f01f fdfc 	bl	802191c <puts>
				return(-1);		// some kindof error
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d28:	e792      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Invalid number of parameters\n");
 8001d2a:	4845      	ldr	r0, [pc, #276]	; (8001e40 <lcd_event_process+0x254>)
 8001d2c:	f01f fdf6 	bl	802191c <puts>
				return(-1);		// some kindof error
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d34:	e78c      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Attribute assignment failed\n");
 8001d36:	4843      	ldr	r0, [pc, #268]	; (8001e44 <lcd_event_process+0x258>)
 8001d38:	f01f fdf0 	bl	802191c <puts>
				return(-1);		// some kindof error
 8001d3c:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d40:	e786      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8001d42:	4841      	ldr	r0, [pc, #260]	; (8001e48 <lcd_event_process+0x25c>)
 8001d44:	f01f fdea 	bl	802191c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001d48:	f000 f94e 	bl	8001fe8 <getlcdpage>
				return(-1);		// some kindof error
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d50:	e77e      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Invalid Waveform ID\n");
 8001d52:	483e      	ldr	r0, [pc, #248]	; (8001e4c <lcd_event_process+0x260>)
 8001d54:	f01f fde2 	bl	802191c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001d58:	f000 f946 	bl	8001fe8 <getlcdpage>
				return(-1);		// some kindof error
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d60:	e776      	b.n	8001c50 <lcd_event_process+0x64>
					printf("Successful execution\n");
 8001d62:	483b      	ldr	r0, [pc, #236]	; (8001e50 <lcd_event_process+0x264>)
 8001d64:	f01f fdda 	bl	802191c <puts>
					return(0);
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e771      	b.n	8001c50 <lcd_event_process+0x64>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001d6c:	78a3      	ldrb	r3, [r4, #2]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d012      	beq.n	8001d98 <lcd_event_process+0x1ac>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d038      	beq.n	8001de8 <lcd_event_process+0x1fc>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d026      	beq.n	8001dc8 <lcd_event_process+0x1dc>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d1b8      	bne.n	8001cf0 <lcd_event_process+0x104>
					if (eventbuffer[3] == 1) 		// sound on
 8001d7e:	78e3      	ldrb	r3, [r4, #3]
 8001d80:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <lcd_event_process+0x268>)
 8001d82:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8001d86:	4834      	ldr	r0, [pc, #208]	; (8001e58 <lcd_event_process+0x26c>)
					if (eventbuffer[3] == 1) 		// sound on
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	095b      	lsrs	r3, r3, #5
 8001d8e:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8001d90:	f01f fdc4 	bl	802191c <puts>
		return(0);
 8001d94:	2000      	movs	r0, #0
 8001d96:	e75b      	b.n	8001c50 <lcd_event_process+0x64>
					lcdbright = eventbuffer[3];
 8001d98:	78e2      	ldrb	r2, [r4, #3]
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <lcd_event_process+0x234>)
 8001d9c:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2a0d      	cmp	r2, #13
 8001da2:	dc01      	bgt.n	8001da8 <lcd_event_process+0x1bc>
						lcdbright = 14;		// prevent black
 8001da4:	220e      	movs	r2, #14
 8001da6:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8001da8:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8001daa:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <lcd_event_process+0x238>)
	setlcdbin("dim", level);
 8001db0:	2963      	cmp	r1, #99	; 0x63
 8001db2:	481d      	ldr	r0, [pc, #116]	; (8001e28 <lcd_event_process+0x23c>)
	dimtimer = DIMTIME;
 8001db4:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001db6:	bf28      	it	cs
 8001db8:	2163      	movcs	r1, #99	; 0x63
 8001dba:	f7ff fad5 	bl	8001368 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001dbe:	7863      	ldrb	r3, [r4, #1]
 8001dc0:	2b04      	cmp	r3, #4
 8001dc2:	d195      	bne.n	8001cf0 <lcd_event_process+0x104>
 8001dc4:	78a3      	ldrb	r3, [r4, #2]
 8001dc6:	e7d4      	b.n	8001d72 <lcd_event_process+0x186>
					if (eventbuffer[3] == 1) 		// sound on
 8001dc8:	78e3      	ldrb	r3, [r4, #3]
 8001dca:	4a24      	ldr	r2, [pc, #144]	; (8001e5c <lcd_event_process+0x270>)
 8001dcc:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8001dd0:	4823      	ldr	r0, [pc, #140]	; (8001e60 <lcd_event_process+0x274>)
					if (eventbuffer[3] == 1) 		// sound on
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8001dda:	f01f fd9f 	bl	802191c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001dde:	7863      	ldrb	r3, [r4, #1]
 8001de0:	2b04      	cmp	r3, #4
 8001de2:	d185      	bne.n	8001cf0 <lcd_event_process+0x104>
 8001de4:	78a3      	ldrb	r3, [r4, #2]
 8001de6:	e7c8      	b.n	8001d7a <lcd_event_process+0x18e>
					printf("Reboot touch\n");
 8001de8:	481e      	ldr	r0, [pc, #120]	; (8001e64 <lcd_event_process+0x278>)
 8001dea:	f01f fd97 	bl	802191c <puts>
					osDelay(100);
 8001dee:	2064      	movs	r0, #100	; 0x64
 8001df0:	f00f ff96 	bl	8011d20 <osDelay>
					rebootme();
 8001df4:	f000 fdd6 	bl	80029a4 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001df8:	7863      	ldrb	r3, [r4, #1]
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	f47f af78 	bne.w	8001cf0 <lcd_event_process+0x104>
 8001e00:	78a3      	ldrb	r3, [r4, #2]
 8001e02:	e7b8      	b.n	8001d76 <lcd_event_process+0x18a>
 8001e04:	20001528 	.word	0x20001528
 8001e08:	200015ec 	.word	0x200015ec
 8001e0c:	08026220 	.word	0x08026220
 8001e10:	08026254 	.word	0x08026254
 8001e14:	08026088 	.word	0x08026088
 8001e18:	2000155c 	.word	0x2000155c
 8001e1c:	080261b4 	.word	0x080261b4
 8001e20:	2000000c 	.word	0x2000000c
 8001e24:	20000004 	.word	0x20000004
 8001e28:	08025ec0 	.word	0x08025ec0
 8001e2c:	080261f0 	.word	0x080261f0
 8001e30:	0802615c 	.word	0x0802615c
 8001e34:	08026144 	.word	0x08026144
 8001e38:	080260b0 	.word	0x080260b0
 8001e3c:	080260e8 	.word	0x080260e8
 8001e40:	080260c8 	.word	0x080260c8
 8001e44:	080260fc 	.word	0x080260fc
 8001e48:	0802609c 	.word	0x0802609c
 8001e4c:	08026118 	.word	0x08026118
 8001e50:	0802612c 	.word	0x0802612c
 8001e54:	20000242 	.word	0x20000242
 8001e58:	080261a8 	.word	0x080261a8
 8001e5c:	20000248 	.word	0x20000248
 8001e60:	0802619c 	.word	0x0802619c
 8001e64:	0802618c 	.word	0x0802618c

08001e68 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8001e68:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8001e6a:	4d3e      	ldr	r5, [pc, #248]	; (8001f64 <processnex+0xfc>)
void processnex() {		// process Nextion - called at regular intervals
 8001e6c:	b082      	sub	sp, #8
	switch (lcduart_error) {
 8001e6e:	682b      	ldr	r3, [r5, #0]
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d039      	beq.n	8001ee8 <processnex+0x80>
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d01e      	beq.n	8001eb6 <processnex+0x4e>
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d018      	beq.n	8001eae <processnex+0x46>
		break;
 8001e7c:	4c3a      	ldr	r4, [pc, #232]	; (8001f68 <processnex+0x100>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001e7e:	2600      	movs	r6, #0
 8001e80:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d01f      	beq.n	8001ec8 <processnex+0x60>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d05d      	beq.n	8001f4a <processnex+0xe2>
	if (lcd_initflag == 3) {	// uart only
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	d047      	beq.n	8001f24 <processnex+0xbc>
	if (dimtimer > 0) {
 8001e94:	4c35      	ldr	r4, [pc, #212]	; (8001f6c <processnex+0x104>)
	lcd_rxdma();		// get any new characters received
 8001e96:	f7ff f9e9 	bl	800126c <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001e9a:	f7ff fea7 	bl	8001bec <lcd_event_process>
 8001e9e:	9001      	str	r0, [sp, #4]
	if (dimtimer > 0) {
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	b113      	cbz	r3, 8001eaa <processnex+0x42>
		dimtimer--;
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	6023      	str	r3, [r4, #0]
		if (dimtimer == 0) {
 8001ea8:	b32b      	cbz	r3, 8001ef6 <processnex+0x8e>
}
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8001eae:	4830      	ldr	r0, [pc, #192]	; (8001f70 <processnex+0x108>)
 8001eb0:	f01f fd34 	bl	802191c <puts>
 8001eb4:	e7e2      	b.n	8001e7c <processnex+0x14>
		printf("LCD UART OVERRUN\n");
 8001eb6:	4c2c      	ldr	r4, [pc, #176]	; (8001f68 <processnex+0x100>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001eb8:	2600      	movs	r6, #0
		printf("LCD UART OVERRUN\n");
 8001eba:	482e      	ldr	r0, [pc, #184]	; (8001f74 <processnex+0x10c>)
 8001ebc:	f01f fd2e 	bl	802191c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8001ec0:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d1df      	bne.n	8001e88 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001ec8:	482b      	ldr	r0, [pc, #172]	; (8001f78 <processnex+0x110>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001eca:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001ecc:	f01f fd26 	bl	802191c <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8001ed0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001ed4:	f7ff f8c2 	bl	800105c <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8001ed8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001edc:	f7ff f906 	bl	80010ec <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	6023      	str	r3, [r4, #0]
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART FRAMING\n");
 8001ee8:	4824      	ldr	r0, [pc, #144]	; (8001f7c <processnex+0x114>)
 8001eea:	f01f fd17 	bl	802191c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8001eee:	4c1e      	ldr	r4, [pc, #120]	; (8001f68 <processnex+0x100>)
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6023      	str	r3, [r4, #0]
		break;
 8001ef4:	e7c3      	b.n	8001e7e <processnex+0x16>
			printf("Auto Dimming now\n");
 8001ef6:	4822      	ldr	r0, [pc, #136]	; (8001f80 <processnex+0x118>)
 8001ef8:	f01f fd10 	bl	802191c <puts>
			i = lcdbright - 40;
 8001efc:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <processnex+0x11c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3b28      	subs	r3, #40	; 0x28
			if (i < 14)
 8001f02:	2b0d      	cmp	r3, #13
 8001f04:	dd29      	ble.n	8001f5a <processnex+0xf2>
 8001f06:	2b63      	cmp	r3, #99	; 0x63
			i = lcdbright - 40;
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <processnex+0x120>)
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	bf28      	it	cs
 8001f0e:	2163      	movcs	r1, #99	; 0x63
 8001f10:	6013      	str	r3, [r2, #0]
	dimtimer = DIMTIME;
 8001f12:	f64e 2360 	movw	r3, #60000	; 0xea60
	setlcdbin("dim", level);
 8001f16:	481d      	ldr	r0, [pc, #116]	; (8001f8c <processnex+0x124>)
	dimtimer = DIMTIME;
 8001f18:	6023      	str	r3, [r4, #0]
}
 8001f1a:	b002      	add	sp, #8
 8001f1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdbin("dim", level);
 8001f20:	f7ff ba22 	b.w	8001368 <setlcdbin>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001f24:	481a      	ldr	r0, [pc, #104]	; (8001f90 <processnex+0x128>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001f26:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001f28:	f01f fcf8 	bl	802191c <puts>
		lcd_uart_init(230400);
 8001f2c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001f30:	f7ff f894 	bl	800105c <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8001f34:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001f38:	f7ff f8d8 	bl	80010ec <lcd_init>
		osDelay(100);
 8001f3c:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8001f3e:	6026      	str	r6, [r4, #0]
}
 8001f40:	b002      	add	sp, #8
 8001f42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8001f46:	f00f beeb 	b.w	8011d20 <osDelay>
		osDelay(500);
 8001f4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f4e:	f00f fee7 	bl	8011d20 <osDelay>
		lcd_initflag = 3;
 8001f52:	2303      	movs	r3, #3
 8001f54:	6023      	str	r3, [r4, #0]
}
 8001f56:	b002      	add	sp, #8
 8001f58:	bd70      	pop	{r4, r5, r6, pc}
				i = 14;	// prevent black
 8001f5a:	230e      	movs	r3, #14
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	; (8001f88 <processnex+0x120>)
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e7d6      	b.n	8001f12 <processnex+0xaa>
 8001f64:	200015f0 	.word	0x200015f0
 8001f68:	20001560 	.word	0x20001560
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	0802625c 	.word	0x0802625c
 8001f74:	08026280 	.word	0x08026280
 8001f78:	08026294 	.word	0x08026294
 8001f7c:	0802626c 	.word	0x0802626c
 8001f80:	080262e8 	.word	0x080262e8
 8001f84:	2000000c 	.word	0x2000000c
 8001f88:	2000154c 	.word	0x2000154c
 8001f8c:	08025ec0 	.word	0x08025ec0
 8001f90:	080262bc 	.word	0x080262bc

08001f94 <lcd_getlack>:
uint8_t lcd_getlack() {
 8001f94:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 8001f96:	4d11      	ldr	r5, [pc, #68]	; (8001fdc <lcd_getlack+0x48>)
	processnex();
 8001f98:	f7ff ff66 	bl	8001e68 <processnex>
	while (lcdstatus == 0xff) {
 8001f9c:	782b      	ldrb	r3, [r5, #0]
 8001f9e:	2bff      	cmp	r3, #255	; 0xff
 8001fa0:	d118      	bne.n	8001fd4 <lcd_getlack+0x40>
 8001fa2:	b2de      	uxtb	r6, r3
 8001fa4:	4c0e      	ldr	r4, [pc, #56]	; (8001fe0 <lcd_getlack+0x4c>)
 8001fa6:	e007      	b.n	8001fb8 <lcd_getlack+0x24>
		trys++;
 8001fa8:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8001faa:	f00f feb9 	bl	8011d20 <osDelay>
		processnex();
 8001fae:	f7ff ff5b 	bl	8001e68 <processnex>
	while (lcdstatus == 0xff) {
 8001fb2:	782b      	ldrb	r3, [r5, #0]
 8001fb4:	2bff      	cmp	r3, #255	; 0xff
 8001fb6:	d10d      	bne.n	8001fd4 <lcd_getlack+0x40>
		if (trys > 1000) {
 8001fb8:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8001fba:	2001      	movs	r0, #1
		if (trys > 1000) {
 8001fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8001fc0:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8001fc4:	d9f0      	bls.n	8001fa8 <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <lcd_getlack+0x50>)
 8001fc8:	f01f fc0c 	bl	80217e4 <iprintf>
			trys = 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4630      	mov	r0, r6
			trys = 0;
 8001fd0:	6023      	str	r3, [r4, #0]
}
 8001fd2:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 8001fd4:	782e      	ldrb	r6, [r5, #0]
 8001fd6:	b2f6      	uxtb	r6, r6
}
 8001fd8:	4630      	mov	r0, r6
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	200015ec 	.word	0x200015ec
 8001fe0:	20001bac 	.word	0x20001bac
 8001fe4:	080262fc 	.word	0x080262fc

08001fe8 <getlcdpage>:
int getlcdpage(void) {
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
	printf("getlcdpage:\n");
 8001fea:	4821      	ldr	r0, [pc, #132]	; (8002070 <getlcdpage+0x88>)
int getlcdpage(void) {
 8001fec:	b083      	sub	sp, #12
	printf("getlcdpage:\n");
 8001fee:	f01f fc95 	bl	802191c <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8001ff2:	4e20      	ldr	r6, [pc, #128]	; (8002074 <getlcdpage+0x8c>)
 8001ff4:	2301      	movs	r3, #1
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8001ff6:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 8001ff8:	6033      	str	r3, [r6, #0]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8001ffa:	f00f fe91 	bl	8011d20 <osDelay>
	lcdstatus = 0xff;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <getlcdpage+0x90>)
 8002000:	22ff      	movs	r2, #255	; 0xff
	result = intwritelcdcmd("sendme");
 8002002:	481e      	ldr	r0, [pc, #120]	; (800207c <getlcdpage+0x94>)
	lcdstatus = 0xff;
 8002004:	701a      	strb	r2, [r3, #0]
	result = intwritelcdcmd("sendme");
 8002006:	f7ff f96f 	bl	80012e8 <intwritelcdcmd>
 800200a:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 800200c:	9b01      	ldr	r3, [sp, #4]
 800200e:	3301      	adds	r3, #1
 8002010:	d029      	beq.n	8002066 <getlcdpage+0x7e>
	result = lcd_getlack();		// wait for a response
 8002012:	f7ff ffbf 	bl	8001f94 <lcd_getlack>
 8002016:	4603      	mov	r3, r0
	printf("getlcdpage: returned %d\n\r",result);
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <getlcdpage+0x98>)
	result = lcd_getlack();		// wait for a response
 800201a:	9301      	str	r3, [sp, #4]
	printf("getlcdpage: returned %d\n\r",result);
 800201c:	9901      	ldr	r1, [sp, #4]
 800201e:	f01f fbe1 	bl	80217e4 <iprintf>
	while (result == 0xff ) {	// try again
 8002022:	9b01      	ldr	r3, [sp, #4]
 8002024:	2bff      	cmp	r3, #255	; 0xff
 8002026:	d119      	bne.n	800205c <getlcdpage+0x74>
		result = intwritelcdcmd("sendme");
 8002028:	4d14      	ldr	r5, [pc, #80]	; (800207c <getlcdpage+0x94>)
			printf("getlcdpage2: Cmd failed\n\r");
 800202a:	4f16      	ldr	r7, [pc, #88]	; (8002084 <getlcdpage+0x9c>)
		printf("getlcdpage2: returned %d\n\r",result);
 800202c:	4c16      	ldr	r4, [pc, #88]	; (8002088 <getlcdpage+0xa0>)
 800202e:	e00a      	b.n	8002046 <getlcdpage+0x5e>
		result = lcd_getlack();		// wait for a response
 8002030:	f7ff ffb0 	bl	8001f94 <lcd_getlack>
 8002034:	4603      	mov	r3, r0
		printf("getlcdpage2: returned %d\n\r",result);
 8002036:	4620      	mov	r0, r4
		result = lcd_getlack();		// wait for a response
 8002038:	9301      	str	r3, [sp, #4]
		printf("getlcdpage2: returned %d\n\r",result);
 800203a:	9901      	ldr	r1, [sp, #4]
 800203c:	f01f fbd2 	bl	80217e4 <iprintf>
	while (result == 0xff ) {	// try again
 8002040:	9b01      	ldr	r3, [sp, #4]
 8002042:	2bff      	cmp	r3, #255	; 0xff
 8002044:	d10a      	bne.n	800205c <getlcdpage+0x74>
		result = intwritelcdcmd("sendme");
 8002046:	4628      	mov	r0, r5
 8002048:	f7ff f94e 	bl	80012e8 <intwritelcdcmd>
 800204c:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 800204e:	9b01      	ldr	r3, [sp, #4]
 8002050:	3301      	adds	r3, #1
 8002052:	d1ed      	bne.n	8002030 <getlcdpage+0x48>
			printf("getlcdpage2: Cmd failed\n\r");
 8002054:	4638      	mov	r0, r7
 8002056:	f01f fbc5 	bl	80217e4 <iprintf>
 800205a:	e7e9      	b.n	8002030 <getlcdpage+0x48>
	lcd_txblocked = 0;		// allow others sending to the LCD
 800205c:	2300      	movs	r3, #0
 800205e:	6033      	str	r3, [r6, #0]
	return (result);
 8002060:	9801      	ldr	r0, [sp, #4]
}
 8002062:	b003      	add	sp, #12
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("getlcdpage: Cmd failed\n\r");
 8002066:	4809      	ldr	r0, [pc, #36]	; (800208c <getlcdpage+0xa4>)
 8002068:	f01f fbbc 	bl	80217e4 <iprintf>
 800206c:	e7d1      	b.n	8002012 <getlcdpage+0x2a>
 800206e:	bf00      	nop
 8002070:	0802632c 	.word	0x0802632c
 8002074:	20001564 	.word	0x20001564
 8002078:	200015ec 	.word	0x200015ec
 800207c:	08026338 	.word	0x08026338
 8002080:	0802635c 	.word	0x0802635c
 8002084:	08026378 	.word	0x08026378
 8002088:	08026394 	.word	0x08026394
 800208c:	08026340 	.word	0x08026340

08002090 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8002090:	4801      	ldr	r0, [pc, #4]	; (8002098 <netif_status_callbk_fn+0x8>)
 8002092:	f01f bc43 	b.w	802191c <puts>
 8002096:	bf00      	nop
 8002098:	080263c4 	.word	0x080263c4

0800209c <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 800209c:	4801      	ldr	r0, [pc, #4]	; (80020a4 <Callback01+0x8>)
 800209e:	f01f bc3d 	b.w	802191c <puts>
 80020a2:	bf00      	nop
 80020a4:	080263dc 	.word	0x080263dc

080020a8 <StarLPTask>:
	char str[80] = { "empty" };
 80020a8:	4b57      	ldr	r3, [pc, #348]	; (8002208 <StarLPTask+0x160>)
 80020aa:	224a      	movs	r2, #74	; 0x4a
void StarLPTask(void const *argument) {
 80020ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[80] = { "empty" };
 80020b0:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 80020b4:	b09f      	sub	sp, #124	; 0x7c
 80020b6:	2400      	movs	r4, #0
	lcduart_error = HAL_UART_ERROR_NONE;
 80020b8:	4d54      	ldr	r5, [pc, #336]	; (800220c <StarLPTask+0x164>)
	statuspkt.adcudpover = 0;		// debug use count overruns
 80020ba:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8002228 <StarLPTask+0x180>
	char str[80] = { "empty" };
 80020be:	900a      	str	r0, [sp, #40]	; 0x28
 80020c0:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 80020c4:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80020c8:	4621      	mov	r1, r4
void StarLPTask(void const *argument) {
 80020ca:	9407      	str	r4, [sp, #28]
	char str[80] = { "empty" };
 80020cc:	f01e fc18 	bl	8020900 <memset>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80020d0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	statuspkt.adcudpover = 0;		// debug use count overruns
 80020d4:	f8c8 4078 	str.w	r4, [r8, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80020d8:	f8c8 407c 	str.w	r4, [r8, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80020dc:	f8c8 4080 	str.w	r4, [r8, #128]	; 0x80
	lcduart_error = HAL_UART_ERROR_NONE;
 80020e0:	602c      	str	r4, [r5, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80020e2:	f7ff f803 	bl	80010ec <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 80020e6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 80020ea:	f8df a140 	ldr.w	sl, [pc, #320]	; 800222c <StarLPTask+0x184>
	lcd_uart_init(9600); // then change our baud to match
 80020ee:	f7fe ffb5 	bl	800105c <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 80020f2:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80020f6:	f7fe fff9 	bl	80010ec <lcd_init>
	osDelay(600);
 80020fa:	f44f 7016 	mov.w	r0, #600	; 0x258
 80020fe:	f00f fe0f 	bl	8011d20 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 8002102:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002106:	f7fe fff1 	bl	80010ec <lcd_init>
	osDelay(600);
 800210a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800210e:	f00f fe07 	bl	8011d20 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 8002112:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002116:	f7fe ffa1 	bl	800105c <lcd_uart_init>
	osDelay(600);
 800211a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800211e:	f00f fdff 	bl	8011d20 <osDelay>
	writelcdcmd("page 0");
 8002122:	483b      	ldr	r0, [pc, #236]	; (8002210 <StarLPTask+0x168>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002124:	602c      	str	r4, [r5, #0]
	writelcdcmd("page 0");
 8002126:	f7ff f8f1 	bl	800130c <writelcdcmd>
	printf("LCD page 0\n");
 800212a:	483a      	ldr	r0, [pc, #232]	; (8002214 <StarLPTask+0x16c>)
 800212c:	f01f fbf6 	bl	802191c <puts>
	osDelay(600);
 8002130:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002134:	f00f fdf4 	bl	8011d20 <osDelay>
	writelcdcmd("cls BLACK");
 8002138:	4837      	ldr	r0, [pc, #220]	; (8002218 <StarLPTask+0x170>)
 800213a:	f7ff f8e7 	bl	800130c <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d, Build:%d\"", MAJORVERSION, MINORVERSION, BUILD);
 800213e:	f242 7319 	movw	r3, #10009	; 0x2719
 8002142:	4622      	mov	r2, r4
 8002144:	4935      	ldr	r1, [pc, #212]	; (800221c <StarLPTask+0x174>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	a80a      	add	r0, sp, #40	; 0x28
 800214a:	230c      	movs	r3, #12
 800214c:	f01f fcc2 	bl	8021ad4 <siprintf>
	writelcdcmd(str);
 8002150:	a80a      	add	r0, sp, #40	; 0x28
	lcduart_error = HAL_UART_ERROR_NONE;
 8002152:	602c      	str	r4, [r5, #0]
	writelcdcmd(str);
 8002154:	f7ff f8da 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002158:	f8da 7000 	ldr.w	r7, [sl]
	lcduart_error = HAL_UART_ERROR_NONE;
 800215c:	602c      	str	r4, [r5, #0]
	while (main_init_done == 0) { // wait from main to complete the init {
 800215e:	2f00      	cmp	r7, #0
 8002160:	d173      	bne.n	800224a <StarLPTask+0x1a2>
 8002162:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8002230 <StarLPTask+0x188>
 8002166:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8002234 <StarLPTask+0x18c>
 800216a:	e01a      	b.n	80021a2 <StarLPTask+0xfa>
		switch (i & 3) {
 800216c:	f1be 0f01 	cmp.w	lr, #1
 8002170:	f000 8190 	beq.w	8002494 <StarLPTask+0x3ec>
			writelcdcmd(strcat(str, ".\""));
 8002174:	f8b9 2000 	ldrh.w	r2, [r9]
 8002178:	f899 3002 	ldrb.w	r3, [r9, #2]
 800217c:	f8ad 2056 	strh.w	r2, [sp, #86]	; 0x56
 8002180:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8002184:	f7ff f8c2 	bl	800130c <writelcdcmd>
		osDelay(250);
 8002188:	20fa      	movs	r0, #250	; 0xfa
		i++;
 800218a:	3701      	adds	r7, #1
		osDelay(250);
 800218c:	f00f fdc8 	bl	8011d20 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8002190:	4b23      	ldr	r3, [pc, #140]	; (8002220 <StarLPTask+0x178>)
 8002192:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002196:	075b      	lsls	r3, r3, #29
 8002198:	d550      	bpl.n	800223c <StarLPTask+0x194>
	while (main_init_done == 0) { // wait from main to complete the init {
 800219a:	f8da 3000 	ldr.w	r3, [sl]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d153      	bne.n	800224a <StarLPTask+0x1a2>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021a2:	f8df c094 	ldr.w	ip, [pc, #148]	; 8002238 <StarLPTask+0x190>
 80021a6:	ac0a      	add	r4, sp, #40	; 0x28
		switch (i & 3) {
 80021a8:	f007 0e03 	and.w	lr, r7, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80021b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021b8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		switch (i & 3) {
 80021bc:	f1be 0f02 	cmp.w	lr, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 80021c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80021c4:	c407      	stmia	r4!, {r0, r1, r2}
 80021c6:	f824 3b02 	strh.w	r3, [r4], #2
 80021ca:	f884 c000 	strb.w	ip, [r4]
		switch (i & 3) {
 80021ce:	d00e      	beq.n	80021ee <StarLPTask+0x146>
 80021d0:	f1be 0f03 	cmp.w	lr, #3
			writelcdcmd(strcat(str, ".\""));
 80021d4:	a80a      	add	r0, sp, #40	; 0x28
		switch (i & 3) {
 80021d6:	d1c9      	bne.n	800216c <StarLPTask+0xc4>
			writelcdcmd(strcat(str, "....\""));
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <StarLPTask+0x17c>)
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	889b      	ldrh	r3, [r3, #4]
 80021de:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 80021e2:	a80a      	add	r0, sp, #40	; 0x28
 80021e4:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
 80021e8:	f7ff f890 	bl	800130c <writelcdcmd>
			break;
 80021ec:	e7cc      	b.n	8002188 <StarLPTask+0xe0>
			writelcdcmd(strcat(str, "...\""));
 80021ee:	f8db 0000 	ldr.w	r0, [fp]
 80021f2:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80021f6:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 80021fa:	a80a      	add	r0, sp, #40	; 0x28
 80021fc:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8002200:	f7ff f884 	bl	800130c <writelcdcmd>
			break;
 8002204:	e7c0      	b.n	8002188 <StarLPTask+0xe0>
 8002206:	bf00      	nop
 8002208:	08025960 	.word	0x08025960
 800220c:	200015f0 	.word	0x200015f0
 8002210:	080263ec 	.word	0x080263ec
 8002214:	080263e8 	.word	0x080263e8
 8002218:	080263f4 	.word	0x080263f4
 800221c:	08026400 	.word	0x08026400
 8002220:	20023f28 	.word	0x20023f28
 8002224:	080264cc 	.word	0x080264cc
 8002228:	20022d4c 	.word	0x20022d4c
 800222c:	20001c04 	.word	0x20001c04
 8002230:	080264bc 	.word	0x080264bc
 8002234:	080264c4 	.word	0x080264c4
 8002238:	0802648c 	.word	0x0802648c
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 800223c:	48a6      	ldr	r0, [pc, #664]	; (80024d8 <StarLPTask+0x430>)
 800223e:	f7ff f865 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002242:	f8da 3000 	ldr.w	r3, [sl]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0ab      	beq.n	80021a2 <StarLPTask+0xfa>
	lcduart_error = HAL_UART_ERROR_NONE;
 800224a:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 800224c:	48a3      	ldr	r0, [pc, #652]	; (80024dc <StarLPTask+0x434>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800224e:	f8df 934c 	ldr.w	r9, [pc, #844]	; 800259c <StarLPTask+0x4f4>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002252:	602c      	str	r4, [r5, #0]
	writelcdcmd("ref 0");		// refresh screen
 8002254:	f7ff f85a 	bl	800130c <writelcdcmd>
	writelcdcmd("page 0");
 8002258:	48a1      	ldr	r0, [pc, #644]	; (80024e0 <StarLPTask+0x438>)
	uint16_t onesectimer = 0;
 800225a:	4627      	mov	r7, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 800225c:	602c      	str	r4, [r5, #0]
	uint16_t tenmstimer = 0;
 800225e:	4625      	mov	r5, r4
	int last3min = 0;
 8002260:	9409      	str	r4, [sp, #36]	; 0x24
	writelcdcmd("page 0");
 8002262:	f7ff f853 	bl	800130c <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002266:	f8b8 105c 	ldrh.w	r1, [r8, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800226a:	4c9e      	ldr	r4, [pc, #632]	; (80024e4 <StarLPTask+0x43c>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 800226c:	f898 e070 	ldrb.w	lr, [r8, #112]	; 0x70
 8002270:	b289      	uxth	r1, r1
 8002272:	f898 c071 	ldrb.w	ip, [r8, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002276:	4b9c      	ldr	r3, [pc, #624]	; (80024e8 <StarLPTask+0x440>)
 8002278:	4a9c      	ldr	r2, [pc, #624]	; (80024ec <StarLPTask+0x444>)
 800227a:	489d      	ldr	r0, [pc, #628]	; (80024f0 <StarLPTask+0x448>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f8cd c00c 	str.w	ip, [sp, #12]
 8002284:	f8df a318 	ldr.w	sl, [pc, #792]	; 80025a0 <StarLPTask+0x4f8>
 8002288:	f8df b318 	ldr.w	fp, [pc, #792]	; 80025a4 <StarLPTask+0x4fc>
 800228c:	e9cd 1e01 	strd	r1, lr, [sp, #4]
 8002290:	e9cd 9404 	strd	r9, r4, [sp, #16]
 8002294:	6800      	ldr	r0, [r0, #0]
 8002296:	4997      	ldr	r1, [pc, #604]	; (80024f4 <StarLPTask+0x44c>)
 8002298:	9000      	str	r0, [sp, #0]
 800229a:	4897      	ldr	r0, [pc, #604]	; (80024f8 <StarLPTask+0x450>)
 800229c:	f01f fc1a 	bl	8021ad4 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 80022a0:	4896      	ldr	r0, [pc, #600]	; (80024fc <StarLPTask+0x454>)
 80022a2:	f00a fc6b 	bl	800cb7c <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 80022a6:	4c96      	ldr	r4, [pc, #600]	; (8002500 <StarLPTask+0x458>)
 80022a8:	4b96      	ldr	r3, [pc, #600]	; (8002504 <StarLPTask+0x45c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80022ae:	4896      	ldr	r0, [pc, #600]	; (8002508 <StarLPTask+0x460>)
		tenmstimer++;
 80022b0:	3501      	adds	r5, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80022b2:	f007 fe67 	bl	8009f84 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 80022b6:	200a      	movs	r0, #10
 80022b8:	f00f fd32 	bl	8011d20 <osDelay>
		globaladcnoise = abs(meanwindiff);
 80022bc:	4b93      	ldr	r3, [pc, #588]	; (800250c <StarLPTask+0x464>)
		if (!(ledsenabled)) {
 80022be:	4a94      	ldr	r2, [pc, #592]	; (8002510 <StarLPTask+0x468>)
		tenmstimer++;
 80022c0:	b2ad      	uxth	r5, r5
		globaladcnoise = abs(meanwindiff);
 80022c2:	f9b3 3000 	ldrsh.w	r3, [r3]
		if (!(ledsenabled)) {
 80022c6:	8811      	ldrh	r1, [r2, #0]
		globaladcnoise = abs(meanwindiff);
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	4892      	ldr	r0, [pc, #584]	; (8002514 <StarLPTask+0x46c>)
 80022cc:	bfb8      	it	lt
 80022ce:	425b      	neglt	r3, r3
 80022d0:	b29b      	uxth	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80022d2:	09da      	lsrs	r2, r3, #7
		globaladcnoise = abs(meanwindiff);
 80022d4:	6003      	str	r3, [r0, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 80022d6:	1d13      	adds	r3, r2, #4
 80022d8:	4a8f      	ldr	r2, [pc, #572]	; (8002518 <StarLPTask+0x470>)
 80022da:	8013      	strh	r3, [r2, #0]
		if (!(ledsenabled)) {
 80022dc:	2900      	cmp	r1, #0
 80022de:	f000 80e1 	beq.w	80024a4 <StarLPTask+0x3fc>
		} else if (ledhang) {	// trigger led
 80022e2:	4b8e      	ldr	r3, [pc, #568]	; (800251c <StarLPTask+0x474>)
 80022e4:	461e      	mov	r6, r3
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80db 	beq.w	80024a4 <StarLPTask+0x3fc>
			ledhang--;
 80022ee:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80022f0:	2201      	movs	r2, #1
 80022f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022f6:	488a      	ldr	r0, [pc, #552]	; (8002520 <StarLPTask+0x478>)
			ledhang--;
 80022f8:	6033      	str	r3, [r6, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80022fa:	f007 f99f 	bl	800963c <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80022fe:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8002302:	f8da 3000 	ldr.w	r3, [sl]
 8002306:	429a      	cmp	r2, r3
 8002308:	f040 80d9 	bne.w	80024be <StarLPTask+0x416>
		processnex();		// process Nextion
 800230c:	f7ff fdac 	bl	8001e68 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 8002310:	1ce9      	adds	r1, r5, #3
 8002312:	4b84      	ldr	r3, [pc, #528]	; (8002524 <StarLPTask+0x47c>)
 8002314:	4a84      	ldr	r2, [pc, #528]	; (8002528 <StarLPTask+0x480>)
 8002316:	fb03 f301 	mul.w	r3, r3, r1
 800231a:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 800231e:	d315      	bcc.n	800234c <StarLPTask+0x2a4>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 8002320:	4b82      	ldr	r3, [pc, #520]	; (800252c <StarLPTask+0x484>)
 8002322:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f103 0219 	add.w	r2, r3, #25
 800232c:	4291      	cmp	r1, r2
 800232e:	f200 81fe 	bhi.w	800272e <StarLPTask+0x686>
				if (jabbertimeout) {
 8002332:	4a7f      	ldr	r2, [pc, #508]	; (8002530 <StarLPTask+0x488>)
 8002334:	6813      	ldr	r3, [r2, #0]
 8002336:	b10b      	cbz	r3, 800233c <StarLPTask+0x294>
					jabbertimeout--;		// de-arm count
 8002338:	3b01      	subs	r3, #1
 800233a:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 800233c:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 8002340:	4a7a      	ldr	r2, [pc, #488]	; (800252c <StarLPTask+0x484>)
 8002342:	6013      	str	r3, [r2, #0]
			if (gainchanged == 0) {		// gain not just changed
 8002344:	9b07      	ldr	r3, [sp, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8209 	beq.w	800275e <StarLPTask+0x6b6>
		if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 800234c:	4b79      	ldr	r3, [pc, #484]	; (8002534 <StarLPTask+0x48c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	b943      	cbnz	r3, 8002364 <StarLPTask+0x2bc>
 8002352:	4b79      	ldr	r3, [pc, #484]	; (8002538 <StarLPTask+0x490>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	42bb      	cmp	r3, r7
 8002358:	d004      	beq.n	8002364 <StarLPTask+0x2bc>
 800235a:	4b78      	ldr	r3, [pc, #480]	; (800253c <StarLPTask+0x494>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8243 	beq.w	80027ea <StarLPTask+0x742>
		} else if (lcd_currentpage == 1) {
 8002364:	4b75      	ldr	r3, [pc, #468]	; (800253c <StarLPTask+0x494>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	f000 820e 	beq.w	800278a <StarLPTask+0x6e2>
			lcd_showvars();
 800236e:	4a74      	ldr	r2, [pc, #464]	; (8002540 <StarLPTask+0x498>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002370:	f105 030b 	add.w	r3, r5, #11
			lcd_showvars();
 8002374:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8002378:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800237c:	3a01      	subs	r2, #1
 800237e:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002382:	f080 8146 	bcs.w	8002612 <StarLPTask+0x56a>
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002386:	f105 031b 	add.w	r3, r5, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 800238a:	496e      	ldr	r1, [pc, #440]	; (8002544 <StarLPTask+0x49c>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 800238c:	4a6e      	ldr	r2, [pc, #440]	; (8002548 <StarLPTask+0x4a0>)
			lcd_trigplot();		// update lcd trigger and noise plots
 800238e:	fb01 f303 	mul.w	r3, r1, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002392:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 8002396:	d319      	bcc.n	80023cc <StarLPTask+0x324>
			if (agc) {
 8002398:	4b6c      	ldr	r3, [pc, #432]	; (800254c <StarLPTask+0x4a4>)
 800239a:	8818      	ldrh	r0, [r3, #0]
 800239c:	2800      	cmp	r0, #0
 800239e:	f000 81f2 	beq.w	8002786 <StarLPTask+0x6de>
				trigsin10sec = trigs - prevtrigs;
 80023a2:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <StarLPTask+0x4a8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023a4:	496b      	ldr	r1, [pc, #428]	; (8002554 <StarLPTask+0x4ac>)
				trigsin10sec = trigs - prevtrigs;
 80023a6:	f8da 2000 	ldr.w	r2, [sl]
 80023aa:	681b      	ldr	r3, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023ac:	8809      	ldrh	r1, [r1, #0]
				trigsin10sec = trigs - prevtrigs;
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	4869      	ldr	r0, [pc, #420]	; (8002558 <StarLPTask+0x4b0>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023b2:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 80023b4:	6003      	str	r3, [r0, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 80023b6:	d802      	bhi.n	80023be <StarLPTask+0x316>
					if (trigsin10sec < MINTRIGS10S)
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	f240 82c3 	bls.w	8002944 <StarLPTask+0x89c>
				if (trigsin10sec > MAXTRIGS10S)
 80023be:	2b0a      	cmp	r3, #10
 80023c0:	f200 823d 	bhi.w	800283e <StarLPTask+0x796>
				prevtrigs = trigs;
 80023c4:	4b62      	ldr	r3, [pc, #392]	; (8002550 <StarLPTask+0x4a8>)
 80023c6:	601a      	str	r2, [r3, #0]
			gainchanged = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	9307      	str	r3, [sp, #28]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 80023cc:	f640 338c 	movw	r3, #2956	; 0xb8c
 80023d0:	429d      	cmp	r5, r3
 80023d2:	d948      	bls.n	8002466 <StarLPTask+0x3be>
			if (gpsgood == 0) {	// gps is not talking to us
 80023d4:	4b61      	ldr	r3, [pc, #388]	; (800255c <StarLPTask+0x4b4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 81d9 	beq.w	8002790 <StarLPTask+0x6e8>
			if (psensor == MPL115A2) {
 80023de:	4b60      	ldr	r3, [pc, #384]	; (8002560 <StarLPTask+0x4b8>)
			gpsgood = 0;			// reset the good flag
 80023e0:	2200      	movs	r2, #0
 80023e2:	495e      	ldr	r1, [pc, #376]	; (800255c <StarLPTask+0x4b4>)
			if (psensor == MPL115A2) {
 80023e4:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80023e6:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	f000 821f 	beq.w	800282c <StarLPTask+0x784>
			} else if (psensor == MPL3115A2) {
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	f000 823d 	beq.w	800286e <StarLPTask+0x7c6>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80023f4:	4b5b      	ldr	r3, [pc, #364]	; (8002564 <StarLPTask+0x4bc>)
 80023f6:	f242 7219 	movw	r2, #10009	; 0x2719
 80023fa:	f8b8 105c 	ldrh.w	r1, [r8, #92]	; 0x5c
			tenmstimer = 0;
 80023fe:	2500      	movs	r5, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b289      	uxth	r1, r1
 8002404:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8002408:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 800240c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f8cd e008 	str.w	lr, [sp, #8]
 8002416:	e9cd 0c00 	strd	r0, ip, [sp]
 800241a:	4853      	ldr	r0, [pc, #332]	; (8002568 <StarLPTask+0x4c0>)
 800241c:	f01f f9e2 	bl	80217e4 <iprintf>
			printf("triggers:%04d, gain:%d, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n", trigs,
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <StarLPTask+0x4c4>)
 8002422:	4b53      	ldr	r3, [pc, #332]	; (8002570 <StarLPTask+0x4c8>)
 8002424:	6811      	ldr	r1, [r2, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a52      	ldr	r2, [pc, #328]	; (8002574 <StarLPTask+0x4cc>)
 800242a:	0889      	lsrs	r1, r1, #2
 800242c:	4852      	ldr	r0, [pc, #328]	; (8002578 <StarLPTask+0x4d0>)
 800242e:	fba2 2303 	umull	r2, r3, r2, r3
 8002432:	4a52      	ldr	r2, [pc, #328]	; (800257c <StarLPTask+0x4d4>)
 8002434:	6806      	ldr	r6, [r0, #0]
 8002436:	4852      	ldr	r0, [pc, #328]	; (8002580 <StarLPTask+0x4d8>)
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	6800      	ldr	r0, [r0, #0]
 800243e:	9304      	str	r3, [sp, #16]
 8002440:	f002 0207 	and.w	r2, r2, #7
 8002444:	9008      	str	r0, [sp, #32]
 8002446:	4b43      	ldr	r3, [pc, #268]	; (8002554 <StarLPTask+0x4ac>)
 8002448:	484e      	ldr	r0, [pc, #312]	; (8002584 <StarLPTask+0x4dc>)
 800244a:	9102      	str	r1, [sp, #8]
 800244c:	9005      	str	r0, [sp, #20]
 800244e:	9908      	ldr	r1, [sp, #32]
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	484d      	ldr	r0, [pc, #308]	; (8002588 <StarLPTask+0x4e0>)
 8002454:	9603      	str	r6, [sp, #12]
 8002456:	e9cd 3100 	strd	r3, r1, [sp]
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <StarLPTask+0x46c>)
 800245c:	f8da 1000 	ldr.w	r1, [sl]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f01f f9bf 	bl	80217e4 <iprintf>
		if (((onesectimer+21) % 180 == 0) && (last3min != onesectimer)) {
 8002466:	f107 0315 	add.w	r3, r7, #21
 800246a:	4948      	ldr	r1, [pc, #288]	; (800258c <StarLPTask+0x4e4>)
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <StarLPTask+0x4e8>)
 800246e:	fb01 f303 	mul.w	r3, r1, r3
 8002472:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002476:	d305      	bcc.n	8002484 <StarLPTask+0x3dc>
 8002478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800247a:	429f      	cmp	r7, r3
 800247c:	d002      	beq.n	8002484 <StarLPTask+0x3dc>
			lcd_pressplot();		// add a point to the pressure plot
 800247e:	9709      	str	r7, [sp, #36]	; 0x24
 8002480:	f7ff fad0 	bl	8001a24 <lcd_pressplot>
		if (onesectimer > 900) {			// 15 mins
 8002484:	f5b7 7f61 	cmp.w	r7, #900	; 0x384
 8002488:	f67f af11 	bls.w	80022ae <StarLPTask+0x206>
			onesectimer = 0;
 800248c:	2700      	movs	r7, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 800248e:	f003 fed5 	bl	800623c <requestapisn>
 8002492:	e70c      	b.n	80022ae <StarLPTask+0x206>
			writelcdcmd(strcat(str, "..\""));
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <StarLPTask+0x4ec>)
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	f8cd 0056 	str.w	r0, [sp, #86]	; 0x56
 800249c:	a80a      	add	r0, sp, #40	; 0x28
 800249e:	f7fe ff35 	bl	800130c <writelcdcmd>
			break;
 80024a2:	e671      	b.n	8002188 <StarLPTask+0xe0>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024aa:	481d      	ldr	r0, [pc, #116]	; (8002520 <StarLPTask+0x478>)
 80024ac:	f007 f8c6 	bl	800963c <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80024b0:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 80024b4:	f8da 3000 	ldr.w	r3, [sl]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	f43f af27 	beq.w	800230c <StarLPTask+0x264>
			if (soundenabled) {
 80024be:	4b36      	ldr	r3, [pc, #216]	; (8002598 <StarLPTask+0x4f0>)
			trigs = statuspkt.trigcount;
 80024c0:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
			if (soundenabled) {
 80024c4:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 80024c6:	f8ca 2000 	str.w	r2, [sl]
			if (soundenabled) {
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f040 8164 	bne.w	8002798 <StarLPTask+0x6f0>
				printf("sem wait 1a\n");
 80024d0:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 80025a8 <StarLPTask+0x500>
 80024d4:	e06c      	b.n	80025b0 <StarLPTask+0x508>
 80024d6:	bf00      	nop
 80024d8:	080264d4 	.word	0x080264d4
 80024dc:	0802643c 	.word	0x0802643c
 80024e0:	080263ec 	.word	0x080263ec
 80024e4:	20023a50 	.word	0x20023a50
 80024e8:	1ff0f424 	.word	0x1ff0f424
 80024ec:	1ff0f420 	.word	0x1ff0f420
 80024f0:	1ff0f428 	.word	0x1ff0f428
 80024f4:	08026444 	.word	0x08026444
 80024f8:	20000084 	.word	0x20000084
 80024fc:	20023874 	.word	0x20023874
 8002500:	20023578 	.word	0x20023578
 8002504:	20001c00 	.word	0x20001c00
 8002508:	20023150 	.word	0x20023150
 800250c:	20000710 	.word	0x20000710
 8002510:	20000242 	.word	0x20000242
 8002514:	200006c0 	.word	0x200006c0
 8002518:	20000000 	.word	0x20000000
 800251c:	2000070c 	.word	0x2000070c
 8002520:	40020c00 	.word	0x40020c00
 8002524:	cccccccd 	.word	0xcccccccd
 8002528:	19999999 	.word	0x19999999
 800252c:	20001bf4 	.word	0x20001bf4
 8002530:	200006c4 	.word	0x200006c4
 8002534:	20001560 	.word	0x20001560
 8002538:	20000008 	.word	0x20000008
 800253c:	2000155c 	.word	0x2000155c
 8002540:	c28f5c29 	.word	0xc28f5c29
 8002544:	26e978d5 	.word	0x26e978d5
 8002548:	00418937 	.word	0x00418937
 800254c:	20000010 	.word	0x20000010
 8002550:	20001c08 	.word	0x20001c08
 8002554:	20000002 	.word	0x20000002
 8002558:	20001c18 	.word	0x20001c18
 800255c:	20001c20 	.word	0x20001c20
 8002560:	20001c54 	.word	0x20001c54
 8002564:	200231d4 	.word	0x200231d4
 8002568:	080266e4 	.word	0x080266e4
 800256c:	20023a0c 	.word	0x20023a0c
 8002570:	20023a00 	.word	0x20023a00
 8002574:	10624dd3 	.word	0x10624dd3
 8002578:	20023a04 	.word	0x20023a04
 800257c:	20000246 	.word	0x20000246
 8002580:	20023a08 	.word	0x20023a08
 8002584:	20000054 	.word	0x20000054
 8002588:	08026700 	.word	0x08026700
 800258c:	a4fa4fa5 	.word	0xa4fa4fa5
 8002590:	016c16c1 	.word	0x016c16c1
 8002594:	080264c0 	.word	0x080264c0
 8002598:	20000248 	.word	0x20000248
 800259c:	20023a68 	.word	0x20023a68
 80025a0:	20001c14 	.word	0x20001c14
 80025a4:	20000218 	.word	0x20000218
 80025a8:	08026510 	.word	0x08026510
 80025ac:	f01f f9b6 	bl	802191c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80025b0:	2101      	movs	r1, #1
 80025b2:	6820      	ldr	r0, [r4, #0]
 80025b4:	f010 f954 	bl	8012860 <xQueueSemaphoreTake>
 80025b8:	4603      	mov	r3, r0
				printf("sem wait 1a\n");
 80025ba:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d1f5      	bne.n	80025ac <StarLPTask+0x504>
			strcpy(str, ctime(&epochtime));		// ctime
 80025c0:	48b5      	ldr	r0, [pc, #724]	; (8002898 <StarLPTask+0x7f0>)
 80025c2:	f01e f817 	bl	80205f4 <ctime>
 80025c6:	4601      	mov	r1, r0
 80025c8:	a80a      	add	r0, sp, #40	; 0x28
 80025ca:	f01f fb14 	bl	8021bf6 <stpcpy>
			while (i < strlen(str)) {
 80025ce:	ab0a      	add	r3, sp, #40	; 0x28
			n = 0;
 80025d0:	2100      	movs	r1, #0
 80025d2:	1ac0      	subs	r0, r0, r3
			i = 0;
 80025d4:	460b      	mov	r3, r1
			while (i < strlen(str)) {
 80025d6:	4283      	cmp	r3, r0
 80025d8:	d20c      	bcs.n	80025f4 <StarLPTask+0x54c>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80025da:	aa0a      	add	r2, sp, #40	; 0x28
 80025dc:	5cd2      	ldrb	r2, [r2, r3]
				i++;
 80025de:	3301      	adds	r3, #1
				if ((str[i] != '\n') && (str[i] != '\r'))
 80025e0:	2a0a      	cmp	r2, #10
 80025e2:	d0f8      	beq.n	80025d6 <StarLPTask+0x52e>
 80025e4:	2a0d      	cmp	r2, #13
 80025e6:	d0f6      	beq.n	80025d6 <StarLPTask+0x52e>
			while (i < strlen(str)) {
 80025e8:	4283      	cmp	r3, r0
					trigtimestr[n++] = str[i];
 80025ea:	f80b 2001 	strb.w	r2, [fp, r1]
 80025ee:	f101 0101 	add.w	r1, r1, #1
			while (i < strlen(str)) {
 80025f2:	d3f2      	bcc.n	80025da <StarLPTask+0x532>
			trigtimestr[n] = '\0';
 80025f4:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80025f6:	6820      	ldr	r0, [r4, #0]
			trigtimestr[n] = '\0';
 80025f8:	f80b 3001 	strb.w	r3, [fp, r1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80025fc:	461a      	mov	r2, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	f00f fea8 	bl	8012354 <xQueueGenericSend>
 8002604:	2801      	cmp	r0, #1
 8002606:	f43f ae81 	beq.w	800230c <StarLPTask+0x264>
				printf("semaphore 1a release failed\n");
 800260a:	48a4      	ldr	r0, [pc, #656]	; (800289c <StarLPTask+0x7f4>)
 800260c:	f01f f986 	bl	802191c <puts>
 8002610:	e67c      	b.n	800230c <StarLPTask+0x264>
			if (ledsenabled)
 8002612:	4ba3      	ldr	r3, [pc, #652]	; (80028a0 <StarLPTask+0x7f8>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002618:	48a2      	ldr	r0, [pc, #648]	; (80028a4 <StarLPTask+0x7fc>)
			if (ledsenabled)
 800261a:	881a      	ldrh	r2, [r3, #0]
 800261c:	2a00      	cmp	r2, #0
 800261e:	f000 80d8 	beq.w	80027d2 <StarLPTask+0x72a>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8002622:	f007 f825 	bl	8009670 <HAL_GPIO_TogglePin>
				printf("sem wait 1b\n");
 8002626:	f8df 930c 	ldr.w	r9, [pc, #780]	; 8002934 <StarLPTask+0x88c>
 800262a:	e001      	b.n	8002630 <StarLPTask+0x588>
 800262c:	f01f f976 	bl	802191c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002630:	2101      	movs	r1, #1
 8002632:	6820      	ldr	r0, [r4, #0]
 8002634:	f010 f914 	bl	8012860 <xQueueSemaphoreTake>
 8002638:	4603      	mov	r3, r0
				printf("sem wait 1b\n");
 800263a:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 800263c:	2b01      	cmp	r3, #1
 800263e:	d1f5      	bne.n	800262c <StarLPTask+0x584>
			strcpy(str, ctime(&epochtime));
 8002640:	4895      	ldr	r0, [pc, #596]	; (8002898 <StarLPTask+0x7f0>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002642:	ae1e      	add	r6, sp, #120	; 0x78
			strcpy(str, ctime(&epochtime));
 8002644:	f01d ffd6 	bl	80205f4 <ctime>
 8002648:	4601      	mov	r1, r0
 800264a:	a80a      	add	r0, sp, #40	; 0x28
 800264c:	f01f fad3 	bl	8021bf6 <stpcpy>
			sprintf(nowtimestr, "\"%s\"", str);
 8002650:	aa0a      	add	r2, sp, #40	; 0x28
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002652:	f04f 0c00 	mov.w	ip, #0
			sprintf(nowtimestr, "\"%s\"", str);
 8002656:	4994      	ldr	r1, [pc, #592]	; (80028a8 <StarLPTask+0x800>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002658:	1a83      	subs	r3, r0, r2
			sprintf(nowtimestr, "\"%s\"", str);
 800265a:	4894      	ldr	r0, [pc, #592]	; (80028ac <StarLPTask+0x804>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800265c:	4433      	add	r3, r6
			sprintf(statstr,
 800265e:	4e94      	ldr	r6, [pc, #592]	; (80028b0 <StarLPTask+0x808>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002660:	f803 cc51 	strb.w	ip, [r3, #-81]
			sprintf(nowtimestr, "\"%s\"", str);
 8002664:	f01f fa36 	bl	8021ad4 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <StarLPTask+0x80c>)
 800266a:	4a93      	ldr	r2, [pc, #588]	; (80028b8 <StarLPTask+0x810>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4992      	ldr	r1, [pc, #584]	; (80028bc <StarLPTask+0x814>)
 8002672:	4893      	ldr	r0, [pc, #588]	; (80028c0 <StarLPTask+0x818>)
 8002674:	f01f fa2e 	bl	8021ad4 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8002678:	4b92      	ldr	r3, [pc, #584]	; (80028c4 <StarLPTask+0x81c>)
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <StarLPTask+0x820>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6812      	ldr	r2, [r2, #0]
 8002680:	498e      	ldr	r1, [pc, #568]	; (80028bc <StarLPTask+0x814>)
 8002682:	4892      	ldr	r0, [pc, #584]	; (80028cc <StarLPTask+0x824>)
 8002684:	f01f fa26 	bl	8021ad4 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002688:	4b91      	ldr	r3, [pc, #580]	; (80028d0 <StarLPTask+0x828>)
			sprintf(statstr,
 800268a:	4a92      	ldr	r2, [pc, #584]	; (80028d4 <StarLPTask+0x82c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800268c:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8002690:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002692:	2b00      	cmp	r3, #0
			sprintf(statstr,
 8002694:	f8b6 c000 	ldrh.w	ip, [r6]
 8002698:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 800269c:	f3c1 010b 	ubfx	r1, r1, #0, #12
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 80026a0:	bfb8      	it	lt
 80026a2:	425b      	neglt	r3, r3
			sprintf(statstr,
 80026a4:	f8d8 007c 	ldr.w	r0, [r8, #124]	; 0x7c
 80026a8:	f8cd c00c 	str.w	ip, [sp, #12]
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	9000      	str	r0, [sp, #0]
 80026b2:	4889      	ldr	r0, [pc, #548]	; (80028d8 <StarLPTask+0x830>)
 80026b4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80026b8:	4b88      	ldr	r3, [pc, #544]	; (80028dc <StarLPTask+0x834>)
 80026ba:	4989      	ldr	r1, [pc, #548]	; (80028e0 <StarLPTask+0x838>)
 80026bc:	f01f fa0a 	bl	8021ad4 <siprintf>
			if (gpslocked) {
 80026c0:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <StarLPTask+0x83c>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d071      	beq.n	80027ac <StarLPTask+0x704>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 80026c8:	f898 201b 	ldrb.w	r2, [r8, #27]
 80026cc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80026d0:	f8d8 0020 	ldr.w	r0, [r8, #32]
 80026d4:	4984      	ldr	r1, [pc, #528]	; (80028e8 <StarLPTask+0x840>)
 80026d6:	9000      	str	r0, [sp, #0]
 80026d8:	4884      	ldr	r0, [pc, #528]	; (80028ec <StarLPTask+0x844>)
 80026da:	f01f f9fb 	bl	8021ad4 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80026de:	2300      	movs	r3, #0
 80026e0:	6820      	ldr	r0, [r4, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	f00f fe35 	bl	8012354 <xQueueGenericSend>
 80026ea:	2801      	cmp	r0, #1
 80026ec:	d002      	beq.n	80026f4 <StarLPTask+0x64c>
				printf("semaphore 1b release failed\n");
 80026ee:	4880      	ldr	r0, [pc, #512]	; (80028f0 <StarLPTask+0x848>)
 80026f0:	f01f f914 	bl	802191c <puts>
			onesectimer++;
 80026f4:	3701      	adds	r7, #1
				printf("sem wait 1c\n");
 80026f6:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8002938 <StarLPTask+0x890>
			onesectimer++;
 80026fa:	b2bf      	uxth	r7, r7
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80026fc:	e001      	b.n	8002702 <StarLPTask+0x65a>
				printf("sem wait 1c\n");
 80026fe:	f01f f90d 	bl	802191c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8002702:	2119      	movs	r1, #25
 8002704:	6820      	ldr	r0, [r4, #0]
 8002706:	f010 f8ab 	bl	8012860 <xQueueSemaphoreTake>
 800270a:	4603      	mov	r3, r0
				printf("sem wait 1c\n");
 800270c:	4648      	mov	r0, r9
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 800270e:	2b01      	cmp	r3, #1
 8002710:	d1f5      	bne.n	80026fe <StarLPTask+0x656>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8002712:	2300      	movs	r3, #0
 8002714:	6820      	ldr	r0, [r4, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	4619      	mov	r1, r3
 800271a:	f00f fe1b 	bl	8012354 <xQueueGenericSend>
 800271e:	2801      	cmp	r0, #1
 8002720:	d002      	beq.n	8002728 <StarLPTask+0x680>
				printf("semaphore 1c release failed\n");
 8002722:	4874      	ldr	r0, [pc, #464]	; (80028f4 <StarLPTask+0x84c>)
 8002724:	f01f f8fa 	bl	802191c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8002728:	f7ff f87a 	bl	8001820 <lcd_trigplot>
 800272c:	e62b      	b.n	8002386 <StarLPTask+0x2de>
				statuspkt.jabcnt++;
 800272e:	f8b8 2086 	ldrh.w	r2, [r8, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8002732:	2101      	movs	r1, #1
 8002734:	4870      	ldr	r0, [pc, #448]	; (80028f8 <StarLPTask+0x850>)
				statuspkt.jabcnt++;
 8002736:	440a      	add	r2, r1
				jabbertimeout = 1;		// 100mS seconds pause
 8002738:	6001      	str	r1, [r0, #0]
				statuspkt.jabcnt++;
 800273a:	b292      	uxth	r2, r2
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800273c:	486f      	ldr	r0, [pc, #444]	; (80028fc <StarLPTask+0x854>)
				statuspkt.jabcnt++;
 800273e:	f8a8 2086 	strh.w	r2, [r8, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002742:	f8d8 107c 	ldr.w	r1, [r8, #124]	; 0x7c
 8002746:	1ac9      	subs	r1, r1, r3
 8002748:	f01f f84c 	bl	80217e4 <iprintf>
				if (agc) {
 800274c:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <StarLPTask+0x858>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	f040 8095 	bne.w	8002880 <StarLPTask+0x7d8>
				jabtrigcnt = statuspkt.trigcount;
 8002756:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800275a:	4a6a      	ldr	r2, [pc, #424]	; (8002904 <StarLPTask+0x85c>)
 800275c:	6013      	str	r3, [r2, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 800275e:	4b6a      	ldr	r3, [pc, #424]	; (8002908 <StarLPTask+0x860>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <StarLPTask+0x864>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1ad3      	subs	r3, r2, r3
				if (n > 5) {				// too many triggers in 100mS
 8002768:	2b05      	cmp	r3, #5
 800276a:	dd35      	ble.n	80027d8 <StarLPTask+0x730>
					if (trigthresh < 4095)
 800276c:	4850      	ldr	r0, [pc, #320]	; (80028b0 <StarLPTask+0x808>)
 800276e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002772:	8803      	ldrh	r3, [r0, #0]
 8002774:	428b      	cmp	r3, r1
 8002776:	d801      	bhi.n	800277c <StarLPTask+0x6d4>
						trigthresh++;
 8002778:	3301      	adds	r3, #1
 800277a:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 800277c:	2300      	movs	r3, #0
 800277e:	9307      	str	r3, [sp, #28]
 8002780:	4b62      	ldr	r3, [pc, #392]	; (800290c <StarLPTask+0x864>)
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e5e2      	b.n	800234c <StarLPTask+0x2a4>
			gainchanged = 0;
 8002786:	9007      	str	r0, [sp, #28]
 8002788:	e620      	b.n	80023cc <StarLPTask+0x324>
			lcd_showvars();
 800278a:	f7fe fedf 	bl	800154c <lcd_showvars>
 800278e:	e5ee      	b.n	800236e <StarLPTask+0x2c6>
				printf("GPS serial comms problem?\n");
 8002790:	485f      	ldr	r0, [pc, #380]	; (8002910 <StarLPTask+0x868>)
 8002792:	f01f f8c3 	bl	802191c <puts>
 8002796:	e622      	b.n	80023de <StarLPTask+0x336>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8002798:	2008      	movs	r0, #8
 800279a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800279e:	4a5d      	ldr	r2, [pc, #372]	; (8002914 <StarLPTask+0x86c>)
 80027a0:	2100      	movs	r1, #0
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	485c      	ldr	r0, [pc, #368]	; (8002918 <StarLPTask+0x870>)
 80027a6:	f004 fb3f 	bl	8006e28 <HAL_DAC_Start_DMA>
 80027aa:	e691      	b.n	80024d0 <StarLPTask+0x428>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");
 80027ac:	f8df c18c 	ldr.w	ip, [pc, #396]	; 800293c <StarLPTask+0x894>
 80027b0:	f8df e138 	ldr.w	lr, [pc, #312]	; 80028ec <StarLPTask+0x844>
 80027b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80027bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027c0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80027c4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80027c8:	f8ce 0000 	str.w	r0, [lr]
 80027cc:	f8ae 1004 	strh.w	r1, [lr, #4]
 80027d0:	e785      	b.n	80026de <StarLPTask+0x636>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80027d2:	f006 ff33 	bl	800963c <HAL_GPIO_WritePin>
 80027d6:	e726      	b.n	8002626 <StarLPTask+0x57e>
				if (n == 0) {		// no triggers in last 100mS
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1cf      	bne.n	800277c <StarLPTask+0x6d4>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80027dc:	4934      	ldr	r1, [pc, #208]	; (80028b0 <StarLPTask+0x808>)
 80027de:	880b      	ldrh	r3, [r1, #0]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d9cb      	bls.n	800277c <StarLPTask+0x6d4>
						trigthresh--;
 80027e4:	3b01      	subs	r3, #1
 80027e6:	800b      	strh	r3, [r1, #0]
 80027e8:	e7c8      	b.n	800277c <StarLPTask+0x6d4>
			timeinfo = *localtime(&localepochtime);
 80027ea:	484c      	ldr	r0, [pc, #304]	; (800291c <StarLPTask+0x874>)
 80027ec:	f01d ff2e 	bl	802064c <localtime>
 80027f0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8002940 <StarLPTask+0x898>
 80027f4:	4684      	mov	ip, r0
 80027f6:	46ce      	mov	lr, r9
 80027f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80027fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
			lastsec = onesectimer;
 8002808:	4a45      	ldr	r2, [pc, #276]	; (8002920 <StarLPTask+0x878>)
			timeinfo = *localtime(&localepochtime);
 800280a:	f8dc 3000 	ldr.w	r3, [ip]
			lastsec = onesectimer;
 800280e:	8017      	strh	r7, [r2, #0]
			timeinfo = *localtime(&localepochtime);
 8002810:	f8ce 3000 	str.w	r3, [lr]
			lcd_time();
 8002814:	f7fe fe34 	bl	8001480 <lcd_time>
			if (timeinfo.tm_yday != lastday) {
 8002818:	4b42      	ldr	r3, [pc, #264]	; (8002924 <StarLPTask+0x87c>)
 800281a:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	f43f ada4 	beq.w	800236e <StarLPTask+0x2c6>
				lcd_date();
 8002826:	f7fe fe75 	bl	8001514 <lcd_date>
 800282a:	e5a0      	b.n	800236e <StarLPTask+0x2c6>
				if (getpressure115() != HAL_OK) {
 800282c:	f001 fc80 	bl	8004130 <getpressure115>
 8002830:	2800      	cmp	r0, #0
 8002832:	f43f addf 	beq.w	80023f4 <StarLPTask+0x34c>
					printf("MPL115A2 error\n\r");
 8002836:	483c      	ldr	r0, [pc, #240]	; (8002928 <StarLPTask+0x880>)
 8002838:	f01e ffd4 	bl	80217e4 <iprintf>
 800283c:	e5da      	b.n	80023f4 <StarLPTask+0x34c>
					gainchanged = bumppga(-1);
 800283e:	f04f 30ff 	mov.w	r0, #4294967295
 8002842:	f001 fc33 	bl	80040ac <bumppga>
 8002846:	b203      	sxth	r3, r0
 8002848:	9307      	str	r3, [sp, #28]
				prevtrigs = trigs;
 800284a:	f8da 3000 	ldr.w	r3, [sl]
 800284e:	4a37      	ldr	r2, [pc, #220]	; (800292c <StarLPTask+0x884>)
 8002850:	6013      	str	r3, [r2, #0]
				if (gainchanged > 0) {	// increased gain
 8002852:	9b07      	ldr	r3, [sp, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	f77f adb9 	ble.w	80023cc <StarLPTask+0x324>
					if (trigthresh < (4095 - 10))
 800285a:	4915      	ldr	r1, [pc, #84]	; (80028b0 <StarLPTask+0x808>)
 800285c:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002860:	880b      	ldrh	r3, [r1, #0]
 8002862:	4293      	cmp	r3, r2
 8002864:	f63f adb2 	bhi.w	80023cc <StarLPTask+0x324>
						trigthresh += 5;
 8002868:	3305      	adds	r3, #5
 800286a:	800b      	strh	r3, [r1, #0]
 800286c:	e5ae      	b.n	80023cc <StarLPTask+0x324>
				if (getpressure3115() != HAL_OK) {
 800286e:	f001 fdf7 	bl	8004460 <getpressure3115>
 8002872:	2800      	cmp	r0, #0
 8002874:	f43f adbe 	beq.w	80023f4 <StarLPTask+0x34c>
					printf("MPL3115A2 error\n\r");
 8002878:	482d      	ldr	r0, [pc, #180]	; (8002930 <StarLPTask+0x888>)
 800287a:	f01e ffb3 	bl	80217e4 <iprintf>
 800287e:	e5b9      	b.n	80023f4 <StarLPTask+0x34c>
					gainchanged = bumppga(-1);	// decrease gain
 8002880:	f04f 30ff 	mov.w	r0, #4294967295
 8002884:	f001 fc12 	bl	80040ac <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8002888:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 800288c:	b202      	sxth	r2, r0
 800288e:	9207      	str	r2, [sp, #28]
				jabtrigcnt = statuspkt.trigcount;
 8002890:	4a1c      	ldr	r2, [pc, #112]	; (8002904 <StarLPTask+0x85c>)
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	e556      	b.n	8002344 <StarLPTask+0x29c>
 8002896:	bf00      	nop
 8002898:	20023998 	.word	0x20023998
 800289c:	0802651c 	.word	0x0802651c
 80028a0:	20000242 	.word	0x20000242
 80028a4:	40020c00 	.word	0x40020c00
 80028a8:	08026554 	.word	0x08026554
 80028ac:	20000054 	.word	0x20000054
 80028b0:	20000002 	.word	0x20000002
 80028b4:	20023a00 	.word	0x20023a00
 80028b8:	20023a04 	.word	0x20023a04
 80028bc:	0802655c 	.word	0x0802655c
 80028c0:	2000020c 	.word	0x2000020c
 80028c4:	20023a0c 	.word	0x20023a0c
 80028c8:	20023a08 	.word	0x20023a08
 80028cc:	20000074 	.word	0x20000074
 80028d0:	20000710 	.word	0x20000710
 80028d4:	200006bc 	.word	0x200006bc
 80028d8:	20000104 	.word	0x20000104
 80028dc:	20000218 	.word	0x20000218
 80028e0:	08026564 	.word	0x08026564
 80028e4:	20001c65 	.word	0x20001c65
 80028e8:	0802660c 	.word	0x0802660c
 80028ec:	20000014 	.word	0x20000014
 80028f0:	0802665c 	.word	0x0802665c
 80028f4:	08026684 	.word	0x08026684
 80028f8:	200006c4 	.word	0x200006c4
 80028fc:	08026538 	.word	0x08026538
 8002900:	20000010 	.word	0x20000010
 8002904:	20001bf4 	.word	0x20001bf4
 8002908:	20000714 	.word	0x20000714
 800290c:	20001bfc 	.word	0x20001bfc
 8002910:	080266a0 	.word	0x080266a0
 8002914:	08026a40 	.word	0x08026a40
 8002918:	2002349c 	.word	0x2002349c
 800291c:	20022e58 	.word	0x20022e58
 8002920:	20000008 	.word	0x20000008
 8002924:	20001550 	.word	0x20001550
 8002928:	080266bc 	.word	0x080266bc
 800292c:	20001c08 	.word	0x20001c08
 8002930:	080266d0 	.word	0x080266d0
 8002934:	08026548 	.word	0x08026548
 8002938:	08026678 	.word	0x08026678
 800293c:	08026634 	.word	0x08026634
 8002940:	20022e08 	.word	0x20022e08
						gainchanged = bumppga(1);
 8002944:	2001      	movs	r0, #1
 8002946:	f001 fbb1 	bl	80040ac <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 800294a:	4b04      	ldr	r3, [pc, #16]	; (800295c <StarLPTask+0x8b4>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b0a      	cmp	r3, #10
 8002950:	f63f af75 	bhi.w	800283e <StarLPTask+0x796>
						gainchanged = bumppga(1);
 8002954:	b203      	sxth	r3, r0
 8002956:	9307      	str	r3, [sp, #28]
 8002958:	e777      	b.n	800284a <StarLPTask+0x7a2>
 800295a:	bf00      	nop
 800295c:	20001c18 	.word	0x20001c18

08002960 <_write>:
	if (file == 1) {
 8002960:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8002962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002964:	460c      	mov	r4, r1
 8002966:	4617      	mov	r7, r2
	if (file == 1) {
 8002968:	d00e      	beq.n	8002988 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800296a:	2a00      	cmp	r2, #0
 800296c:	dd0a      	ble.n	8002984 <_write+0x24>
 800296e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8002970:	4d0b      	ldr	r5, [pc, #44]	; (80029a0 <_write+0x40>)
 8002972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002976:	230a      	movs	r3, #10
 8002978:	2201      	movs	r2, #1
 800297a:	4628      	mov	r0, r5
 800297c:	f00d f864 	bl	800fa48 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002980:	42a6      	cmp	r6, r4
 8002982:	d1f6      	bne.n	8002972 <_write+0x12>
}
 8002984:	4638      	mov	r0, r7
 8002986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002988:	2a00      	cmp	r2, #0
 800298a:	ddfb      	ble.n	8002984 <_write+0x24>
 800298c:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 800298e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002992:	f001 f8cb 	bl	8003b2c <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002996:	42ac      	cmp	r4, r5
 8002998:	d1f9      	bne.n	800298e <_write+0x2e>
}
 800299a:	4638      	mov	r0, r7
 800299c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800299e:	bf00      	nop
 80029a0:	2002337c 	.word	0x2002337c

080029a4 <rebootme>:
void rebootme() {
 80029a4:	b508      	push	{r3, lr}
		osDelay(2000);
 80029a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029aa:	f00f f9b9 	bl	8011d20 <osDelay>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029ae:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029b2:	4905      	ldr	r1, [pc, #20]	; (80029c8 <rebootme+0x24>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <rebootme+0x28>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80029b6:	68ca      	ldr	r2, [r1, #12]
 80029b8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80029bc:	4313      	orrs	r3, r2
 80029be:	60cb      	str	r3, [r1, #12]
 80029c0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80029c4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80029c6:	e7fd      	b.n	80029c4 <rebootme+0x20>
 80029c8:	e000ed00 	.word	0xe000ed00
 80029cc:	05fa0004 	.word	0x05fa0004

080029d0 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 80029d0:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 80029d4:	074a      	lsls	r2, r1, #29
 80029d6:	d502      	bpl.n	80029de <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 80029d8:	4808      	ldr	r0, [pc, #32]	; (80029fc <netif_link_callbk_fn+0x2c>)
 80029da:	f01e bf03 	b.w	80217e4 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 80029de:	b510      	push	{r4, lr}
 80029e0:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <netif_link_callbk_fn+0x30>)
 80029e4:	f01e fefe 	bl	80217e4 <iprintf>
		if (!(netif_is_link_up(netif))) {
 80029e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80029ec:	075b      	lsls	r3, r3, #29
 80029ee:	d500      	bpl.n	80029f2 <netif_link_callbk_fn+0x22>
}
 80029f0:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 80029f2:	4804      	ldr	r0, [pc, #16]	; (8002a04 <netif_link_callbk_fn+0x34>)
 80029f4:	f01e ff92 	bl	802191c <puts>
			rebootme();
 80029f8:	f7ff ffd4 	bl	80029a4 <rebootme>
 80029fc:	0802675c 	.word	0x0802675c
 8002a00:	0802677c 	.word	0x0802677c
 8002a04:	0802679c 	.word	0x0802679c

08002a08 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8002a08:	2100      	movs	r1, #0
 8002a0a:	f004 ba9f 	b.w	8006f4c <HAL_DAC_Stop_DMA>
 8002a0e:	bf00      	nop

08002a10 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8002a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8002a12:	6803      	ldr	r3, [r0, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d003      	beq.n	8002a22 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d02d      	beq.n	8002a7c <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8002a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a22:	4c1a      	ldr	r4, [pc, #104]	; (8002a8c <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002a26:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8002a28:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a2a:	3101      	adds	r1, #1
 8002a2c:	481a      	ldr	r0, [pc, #104]	; (8002a98 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8002a2e:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a30:	fba3 5301 	umull	r5, r3, r3, r1
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002a3a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002a42:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a44:	4815      	ldr	r0, [pc, #84]	; (8002a9c <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8002a46:	b1b2      	cbz	r2, 8002a76 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002a48:	f006 fe12 	bl	8009670 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8002a4c:	4d14      	ldr	r5, [pc, #80]	; (8002aa0 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8002a4e:	2100      	movs	r1, #0
		diff = lastcap;
 8002a50:	4e14      	ldr	r6, [pc, #80]	; (8002aa4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002a52:	462b      	mov	r3, r5
 8002a54:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002a58:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8002a60:	4298      	cmp	r0, r3
		sum += data[i];
 8002a62:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8002a64:	d1f9      	bne.n	8002a5a <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8002a66:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8002a6a:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8002a6c:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a6e:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8002a70:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002a72:	6033      	str	r3, [r6, #0]
}
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002a76:	f006 fde1 	bl	800963c <HAL_GPIO_WritePin>
 8002a7a:	e7e7      	b.n	8002a4c <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8002a7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8002a82:	f01e bf4b 	b.w	802191c <puts>
 8002a86:	bf00      	nop
 8002a88:	40000800 	.word	0x40000800
 8002a8c:	20022d4c 	.word	0x20022d4c
 8002a90:	88888889 	.word	0x88888889
 8002a94:	20000242 	.word	0x20000242
 8002a98:	20000718 	.word	0x20000718
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	20001bb4 	.word	0x20001bb4
 8002aa4:	20001bf8 	.word	0x20001bf8
 8002aa8:	20022df8 	.word	0x20022df8
 8002aac:	080267d0 	.word	0x080267d0

08002ab0 <HAL_TIM_PeriodElapsedCallback>:
	/* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8002ab0:	4a25      	ldr	r2, [pc, #148]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002ab2:	6803      	ldr	r3, [r0, #0]
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d029      	beq.n	8002b0c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8002ab8:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02d      	beq.n	8002b1a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac2:	d02c      	beq.n	8002b1e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d030      	beq.n	8002b2c <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8002aca:	4a22      	ldr	r2, [pc, #136]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d005      	beq.n	8002adc <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8002ad0:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8002ad6:	4821      	ldr	r0, [pc, #132]	; (8002b5c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002ad8:	f01e bf20 	b.w	802191c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002adc:	b510      	push	{r4, lr}
		t1sec++;
 8002ade:	4920      	ldr	r1, [pc, #128]	; (8002b60 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8002ae0:	4c20      	ldr	r4, [pc, #128]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8002ae2:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8002ae6:	4820      	ldr	r0, [pc, #128]	; (8002b68 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8002ae8:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8002aea:	3301      	adds	r3, #1
		if (netup)
 8002aec:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8002aee:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002af0:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8002af2:	b110      	cbz	r0, 8002afa <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8002af4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002af6:	3301      	adds	r3, #1
 8002af8:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8002afa:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	b9c3      	cbnz	r3, 8002b32 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8002b00:	4a1b      	ldr	r2, [pc, #108]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8002b02:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8002b04:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8002b06:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 8002b0a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8002b0c:	4a19      	ldr	r2, [pc, #100]	; (8002b74 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	6013      	str	r3, [r2, #0]
		return;
 8002b14:	4770      	bx	lr
		HAL_IncTick();
 8002b16:	f003 bbdb 	b.w	80062d0 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8002b1a:	f7fd beaf 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8002b1e:	4a11      	ldr	r2, [pc, #68]	; (8002b64 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002b22:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	4815      	ldr	r0, [pc, #84]	; (8002b7c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002b28:	f01e be5c 	b.w	80217e4 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8002b2c:	4814      	ldr	r0, [pc, #80]	; (8002b80 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002b2e:	f01e bef5 	b.w	802191c <puts>
			statuspkt.gpsuptime++;
 8002b32:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b34:	3301      	adds	r3, #1
 8002b36:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8002b38:	f001 f816 	bl	8003b68 <calcepoch32>
				epochvalid = 1;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002b3e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8002b40:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8002b44:	701a      	strb	r2, [r3, #0]
}
 8002b46:	bd10      	pop	{r4, pc}
 8002b48:	40002000 	.word	0x40002000
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40001000 	.word	0x40001000
 8002b58:	40001800 	.word	0x40001800
 8002b5c:	08026820 	.word	0x08026820
 8002b60:	20001c10 	.word	0x20001c10
 8002b64:	20022d4c 	.word	0x20022d4c
 8002b68:	20000712 	.word	0x20000712
 8002b6c:	20001c65 	.word	0x20001c65
 8002b70:	20001c64 	.word	0x20001c64
 8002b74:	20001c0c 	.word	0x20001c0c
 8002b78:	20022df8 	.word	0x20022df8
 8002b7c:	080267e0 	.word	0x080267e0
 8002b80:	08026804 	.word	0x08026804

08002b84 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8002b84:	4c02      	ldr	r4, [pc, #8]	; (8002b90 <Error_Handler+0xc>)
void Error_Handler(void) {
 8002b86:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f01e fec7 	bl	802191c <puts>
	while (1) {
 8002b8e:	e7fb      	b.n	8002b88 <Error_Handler+0x4>
 8002b90:	08026848 	.word	0x08026848

08002b94 <SystemClock_Config>:
void SystemClock_Config(void) {
 8002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b96:	b0b9      	sub	sp, #228	; 0xe4
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b98:	2234      	movs	r2, #52	; 0x34
 8002b9a:	2100      	movs	r1, #0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b9c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ba0:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba2:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002ba4:	f01d feac 	bl	8020900 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002ba8:	2100      	movs	r1, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002baa:	2290      	movs	r2, #144	; 0x90
 8002bac:	a814      	add	r0, sp, #80	; 0x50
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bae:	9106      	str	r1, [sp, #24]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8002bb0:	2709      	movs	r7, #9
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bb2:	2501      	movs	r5, #1
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bb4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8002bb8:	e9cd 1104 	strd	r1, r1, [sp, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002bbc:	f01d fea0 	bl	8020900 <memset>
	HAL_PWR_EnableBkUpAccess();
 8002bc0:	f008 f816 	bl	800abf0 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	4a2b      	ldr	r2, [pc, #172]	; (8002c74 <SystemClock_Config+0xe0>)
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc6:	4b2c      	ldr	r3, [pc, #176]	; (8002c78 <SystemClock_Config+0xe4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bc8:	a807      	add	r0, sp, #28
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002bcc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002bd0:	6411      	str	r1, [r2, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002bd2:	2104      	movs	r1, #4
	__HAL_RCC_PWR_CLK_ENABLE();
 8002bd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bd6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002bda:	9200      	str	r2, [sp, #0]
 8002bdc:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002be4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.PLL.PLLN = 216;
 8002be6:	22d8      	movs	r2, #216	; 0xd8
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be8:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bea:	9608      	str	r6, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bec:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8002bf4:	9707      	str	r7, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bf6:	950c      	str	r5, [sp, #48]	; 0x30
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bf8:	9301      	str	r3, [sp, #4]
 8002bfa:	9b01      	ldr	r3, [sp, #4]
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8002bfc:	2306      	movs	r3, #6
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bfe:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c00:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 216;
 8002c02:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8002c04:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 4;
 8002c06:	e9cd 610e 	strd	r6, r1, [sp, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c0a:	f008 f835 	bl	800ac78 <HAL_RCC_OscConfig>
 8002c0e:	bb78      	cbnz	r0, 8002c70 <SystemClock_Config+0xdc>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8002c10:	f007 fff6 	bl	800ac00 <HAL_PWREx_EnableOverDrive>
 8002c14:	4603      	mov	r3, r0
 8002c16:	bb58      	cbnz	r0, 8002c70 <SystemClock_Config+0xdc>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c18:	210f      	movs	r1, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c1a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1e:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c24:	9102      	str	r1, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8002c26:	a802      	add	r0, sp, #8
 8002c28:	2107      	movs	r1, #7
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c2a:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8002c30:	f008 fb02 	bl	800b238 <HAL_RCC_ClockConfig>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b9d8      	cbnz	r0, 8002c70 <SystemClock_Config+0xdc>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 8002c38:	4f10      	ldr	r7, [pc, #64]	; (8002c7c <SystemClock_Config+0xe8>)
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c3a:	26c0      	movs	r6, #192	; 0xc0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002c3c:	2103      	movs	r1, #3
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002c42:	a814      	add	r0, sp, #80	; 0x50
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002c44:	951e      	str	r5, [sp, #120]	; 0x78
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002c46:	931f      	str	r3, [sp, #124]	; 0x7c
	PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002c48:	9330      	str	r3, [sp, #192]	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_USART6
 8002c4a:	9714      	str	r7, [sp, #80]	; 0x50
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c4c:	9619      	str	r6, [sp, #100]	; 0x64
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002c4e:	911c      	str	r1, [sp, #112]	; 0x70
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c50:	9233      	str	r2, [sp, #204]	; 0xcc
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002c52:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002c56:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002c5a:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002c5e:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002c62:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002c66:	f008 fc4f 	bl	800b508 <HAL_RCCEx_PeriphCLKConfig>
 8002c6a:	b908      	cbnz	r0, 8002c70 <SystemClock_Config+0xdc>
}
 8002c6c:	b039      	add	sp, #228	; 0xe4
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 8002c70:	f7ff ff88 	bl	8002b84 <Error_Handler>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	40007000 	.word	0x40007000
 8002c7c:	0022df80 	.word	0x0022df80

08002c80 <main>:
int main(void) {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b0dc      	sub	sp, #368	; 0x170
 8002c84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c88:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002c8c:	4bbf      	ldr	r3, [pc, #764]	; (8002f8c <main+0x30c>)
 8002c8e:	2400      	movs	r4, #0
 8002c90:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002c94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002c98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002ca2:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ca4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ca8:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002cac:	4db8      	ldr	r5, [pc, #736]	; (8002f90 <main+0x310>)
	HAL_Init();
 8002cae:	f003 fafd 	bl	80062ac <HAL_Init>
	SystemClock_Config();
 8002cb2:	f7ff ff6f 	bl	8002b94 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cb6:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	48b5      	ldr	r0, [pc, #724]	; (8002f94 <main+0x314>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc0:	2601      	movs	r6, #1
	GPIO_InitStruct.Pin = probe1_Pin;
 8002cc2:	4689      	mov	r9, r1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc4:	f04f 0802 	mov.w	r8, #2
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc8:	2703      	movs	r7, #3
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cca:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 8002fc8 <main+0x348>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cce:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8002cd2:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cd8:	f043 0310 	orr.w	r3, r3, #16
 8002cdc:	632b      	str	r3, [r5, #48]	; 0x30
 8002cde:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cea:	f043 0304 	orr.w	r3, r3, #4
 8002cee:	632b      	str	r3, [r5, #48]	; 0x30
 8002cf0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	9304      	str	r3, [sp, #16]
 8002cf8:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002cfa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	632b      	str	r3, [r5, #48]	; 0x30
 8002d02:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	9305      	str	r3, [sp, #20]
 8002d0a:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d12:	632b      	str	r3, [r5, #48]	; 0x30
 8002d14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d1a:	9306      	str	r3, [sp, #24]
 8002d1c:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	632b      	str	r3, [r5, #48]	; 0x30
 8002d26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	9307      	str	r3, [sp, #28]
 8002d2e:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	632b      	str	r3, [r5, #48]	; 0x30
 8002d38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	9308      	str	r3, [sp, #32]
 8002d40:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002d42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d48:	632b      	str	r3, [r5, #48]	; 0x30
 8002d4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	9309      	str	r3, [sp, #36]	; 0x24
 8002d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002d54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d56:	f043 0308 	orr.w	r3, r3, #8
 8002d5a:	632b      	str	r3, [r5, #48]	; 0x30
 8002d5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	930a      	str	r3, [sp, #40]	; 0x28
 8002d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002d66:	f006 fc69 	bl	800963c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	f644 0181 	movw	r1, #18561	; 0x4881
 8002d70:	4889      	ldr	r0, [pc, #548]	; (8002f98 <main+0x318>)
 8002d72:	f006 fc63 	bl	800963c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0, GPIO_PIN_RESET);
 8002d76:	4622      	mov	r2, r4
 8002d78:	f24d 4101 	movw	r1, #54273	; 0xd401
 8002d7c:	4887      	ldr	r0, [pc, #540]	; (8002f9c <main+0x31c>)
 8002d7e:	f006 fc5d 	bl	800963c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 8002d82:	4632      	mov	r2, r6
 8002d84:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002d88:	4885      	ldr	r0, [pc, #532]	; (8002fa0 <main+0x320>)
 8002d8a:	f006 fc57 	bl	800963c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002d8e:	4622      	mov	r2, r4
 8002d90:	2144      	movs	r1, #68	; 0x44
 8002d92:	4884      	ldr	r0, [pc, #528]	; (8002fa4 <main+0x324>)
 8002d94:	f006 fc52 	bl	800963c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8002d98:	4622      	mov	r2, r4
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	4880      	ldr	r0, [pc, #512]	; (8002fa0 <main+0x320>)
 8002d9e:	f006 fc4d 	bl	800963c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_1;
 8002da2:	f642 138a 	movw	r3, #10634	; 0x298a
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da6:	a955      	add	r1, sp, #340	; 0x154
 8002da8:	487c      	ldr	r0, [pc, #496]	; (8002f9c <main+0x31c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002daa:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dac:	e9cd 3755 	strd	r3, r7, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002db0:	f006 f992 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002db8:	a955      	add	r1, sp, #340	; 0x154
 8002dba:	487b      	ldr	r0, [pc, #492]	; (8002fa8 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dbe:	e9cd 3a55 	strd	r3, sl, [sp, #340]	; 0x154
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002dc2:	f006 f989 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8002dc6:	f643 433c 	movw	r3, #15420	; 0x3c3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dca:	a955      	add	r1, sp, #340	; 0x154
 8002dcc:	4871      	ldr	r0, [pc, #452]	; (8002f94 <main+0x314>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
 8002dce:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dd4:	f006 f980 	bl	80090d8 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002dd8:	a955      	add	r1, sp, #340	; 0x154
 8002dda:	486e      	ldr	r0, [pc, #440]	; (8002f94 <main+0x314>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ddc:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de0:	e9cd 6857 	strd	r6, r8, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002de4:	f006 f978 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 8002de8:	f240 3301 	movw	r3, #769	; 0x301
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dec:	a955      	add	r1, sp, #340	; 0x154
 8002dee:	486e      	ldr	r0, [pc, #440]	; (8002fa8 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_8 | GPIO_PIN_9;
 8002df0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df6:	f006 f96f 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8002dfa:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dfe:	a955      	add	r1, sp, #340	; 0x154
 8002e00:	4865      	ldr	r0, [pc, #404]	; (8002f98 <main+0x318>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8002e02:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e04:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0a:	f006 f965 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8002e0e:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e10:	a955      	add	r1, sp, #340	; 0x154
 8002e12:	4861      	ldr	r0, [pc, #388]	; (8002f98 <main+0x318>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8002e14:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e16:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e1a:	f006 f95d 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 8002e1e:	f24d 433b 	movw	r3, #54331	; 0xd43b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e22:	a955      	add	r1, sp, #340	; 0x154
 8002e24:	485f      	ldr	r0, [pc, #380]	; (8002fa4 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_10 | GPIO_PIN_12
 8002e26:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e28:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e2c:	f006 f954 	bl	80090d8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e30:	a955      	add	r1, sp, #340	; 0x154
 8002e32:	485a      	ldr	r0, [pc, #360]	; (8002f9c <main+0x31c>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e36:	e9cd 9a55 	strd	r9, sl, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e3a:	f006 f94d 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 8002e3e:	f24d 4301 	movw	r3, #54273	; 0xd401
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e42:	a955      	add	r1, sp, #340	; 0x154
 8002e44:	4855      	ldr	r0, [pc, #340]	; (8002f9c <main+0x31c>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | XBEE_RST_Pin | GPIO_PIN_0;
 8002e46:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e48:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e4e:	f006 f943 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8002e52:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e56:	a955      	add	r1, sp, #340	; 0x154
 8002e58:	4851      	ldr	r0, [pc, #324]	; (8002fa0 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8002e5a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e60:	f006 f93a 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8002e64:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e68:	a955      	add	r1, sp, #340	; 0x154
 8002e6a:	484d      	ldr	r0, [pc, #308]	; (8002fa0 <main+0x320>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8002e6c:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e74:	f006 f930 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8002e78:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e7a:	a955      	add	r1, sp, #340	; 0x154
 8002e7c:	4849      	ldr	r0, [pc, #292]	; (8002fa4 <main+0x324>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8002e7e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e80:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e86:	f006 f927 	bl	80090d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002e8a:	2380      	movs	r3, #128	; 0x80
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e8c:	a955      	add	r1, sp, #340	; 0x154
 8002e8e:	4845      	ldr	r0, [pc, #276]	; (8002fa4 <main+0x324>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002e90:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002e96:	f006 f91f 	bl	80090d8 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002e9a:	a955      	add	r1, sp, #340	; 0x154
 8002e9c:	4840      	ldr	r0, [pc, #256]	; (8002fa0 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9e:	e9cd 8655 	strd	r8, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ea2:	e9cd 6857 	strd	r6, r8, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8002ea6:	f006 f917 	bl	80090d8 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002eaa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002eac:	4622      	mov	r2, r4
 8002eae:	4621      	mov	r1, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002eb4:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002eb6:	632b      	str	r3, [r5, #48]	; 0x30
 8002eb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002ec2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ec8:	632b      	str	r3, [r5, #48]	; 0x30
 8002eca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002ed4:	f003 fe52 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002ed8:	200b      	movs	r0, #11
 8002eda:	f003 fe99 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8002ede:	4622      	mov	r2, r4
 8002ee0:	2106      	movs	r1, #6
 8002ee2:	200c      	movs	r0, #12
 8002ee4:	f003 fe4a 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ee8:	200c      	movs	r0, #12
 8002eea:	f003 fe91 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8002eee:	4622      	mov	r2, r4
 8002ef0:	2106      	movs	r1, #6
 8002ef2:	2010      	movs	r0, #16
 8002ef4:	f003 fe42 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ef8:	2010      	movs	r0, #16
 8002efa:	f003 fe89 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8002efe:	4622      	mov	r2, r4
 8002f00:	4621      	mov	r1, r4
 8002f02:	202f      	movs	r0, #47	; 0x2f
 8002f04:	f003 fe3a 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002f08:	202f      	movs	r0, #47	; 0x2f
 8002f0a:	f003 fe81 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8002f0e:	4622      	mov	r2, r4
 8002f10:	2106      	movs	r1, #6
 8002f12:	2039      	movs	r0, #57	; 0x39
 8002f14:	f003 fe32 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002f18:	2039      	movs	r0, #57	; 0x39
 8002f1a:	f003 fe79 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8002f1e:	4622      	mov	r2, r4
 8002f20:	4641      	mov	r1, r8
 8002f22:	203c      	movs	r0, #60	; 0x3c
 8002f24:	f003 fe2a 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002f28:	203c      	movs	r0, #60	; 0x3c
 8002f2a:	f003 fe71 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	hmdios.Instance = MDIOS;
 8002f2e:	481f      	ldr	r0, [pc, #124]	; (8002fac <main+0x32c>)
 8002f30:	4b1f      	ldr	r3, [pc, #124]	; (8002fb0 <main+0x330>)
	hmdios.Init.PreambleCheck = MDIOS_PREAMBLE_CHECK_ENABLE;
 8002f32:	e9c0 4401 	strd	r4, r4, [r0, #4]
	hmdios.Instance = MDIOS;
 8002f36:	6003      	str	r3, [r0, #0]
	if (HAL_MDIOS_Init(&hmdios) != HAL_OK) {
 8002f38:	f007 f82c 	bl	8009f94 <HAL_MDIOS_Init>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 848a 	bne.w	8003856 <main+0xbd6>
	huart2.Instance = USART2;
 8002f42:	4603      	mov	r3, r0
	huart2.Init.BaudRate = 115200;
 8002f44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
	huart2.Instance = USART2;
 8002f48:	481a      	ldr	r0, [pc, #104]	; (8002fb4 <main+0x334>)
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f4a:	250c      	movs	r5, #12
	huart2.Instance = USART2;
 8002f4c:	491a      	ldr	r1, [pc, #104]	; (8002fb8 <main+0x338>)
	huart2.Init.Parity = UART_PARITY_NONE;
 8002f4e:	6103      	str	r3, [r0, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f50:	6145      	str	r5, [r0, #20]
	huart2.Init.BaudRate = 115200;
 8002f52:	e9c0 1200 	strd	r1, r2, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002f56:	461a      	mov	r2, r3
 8002f58:	4619      	mov	r1, r3
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002f5a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f62:	e9c0 3308 	strd	r3, r3, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8002f66:	f00c ff15 	bl	800fd94 <HAL_RS485Ex_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2800      	cmp	r0, #0
 8002f6e:	f040 8472 	bne.w	8003856 <main+0xbd6>
	hadc1.Instance = ADC1;
 8002f72:	4c12      	ldr	r4, [pc, #72]	; (8002fbc <main+0x33c>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f74:	f44f 3580 	mov.w	r5, #65536	; 0x10000
	hadc1.Instance = ADC1;
 8002f78:	4911      	ldr	r1, [pc, #68]	; (8002fc0 <main+0x340>)
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <main+0x344>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8002f7c:	9022      	str	r0, [sp, #136]	; 0x88
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002f7e:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002f80:	9345      	str	r3, [sp, #276]	; 0x114
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f82:	60a3      	str	r3, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f84:	6123      	str	r3, [r4, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8002f86:	61a6      	str	r6, [r4, #24]
 8002f88:	e020      	b.n	8002fcc <main+0x34c>
 8002f8a:	bf00      	nop
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40021400 	.word	0x40021400
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	2002348c 	.word	0x2002348c
 8002fb0:	40017800 	.word	0x40017800
 8002fb4:	20023754 	.word	0x20023754
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	200233fc 	.word	0x200233fc
 8002fc0:	40012000 	.word	0x40012000
 8002fc4:	0f000001 	.word	0x0f000001
 8002fc8:	10110000 	.word	0x10110000
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002fcc:	f884 3020 	strb.w	r3, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fd2:	60e3      	str	r3, [r4, #12]
	hadc1.Init.NbrOfConversion = 1;
 8002fd4:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8002fd6:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002fda:	6163      	str	r3, [r4, #20]
	hadc1.Instance = ADC1;
 8002fdc:	6021      	str	r1, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002fde:	62a2      	str	r2, [r4, #40]	; 0x28
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002fe0:	6065      	str	r5, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002fe2:	9348      	str	r3, [sp, #288]	; 0x120
	ADC_MultiModeTypeDef multimode = { 0 };
 8002fe4:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002fe8:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002fec:	f003 f994 	bl	8006318 <HAL_ADC_Init>
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	f040 8430 	bne.w	8003856 <main+0xbd6>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8002ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8002ffa:	2217      	movs	r2, #23
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8002ffc:	9024      	str	r0, [sp, #144]	; 0x90
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8002ffe:	a922      	add	r1, sp, #136	; 0x88
 8003000:	4620      	mov	r0, r4
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003002:	9323      	str	r3, [sp, #140]	; 0x8c
	multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8003004:	9222      	str	r2, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003006:	f003 fd39 	bl	8006a7c <HAL_ADCEx_MultiModeConfigChannel>
 800300a:	4603      	mov	r3, r0
 800300c:	2800      	cmp	r0, #0
 800300e:	f040 8422 	bne.w	8003856 <main+0xbd6>
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003012:	4620      	mov	r0, r4
 8003014:	a945      	add	r1, sp, #276	; 0x114
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003016:	9347      	str	r3, [sp, #284]	; 0x11c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003018:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800301c:	f003 fc3e 	bl	800689c <HAL_ADC_ConfigChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	2800      	cmp	r0, #0
 8003024:	f040 8417 	bne.w	8003856 <main+0xbd6>
	hadc2.Instance = ADC2;
 8003028:	4cb5      	ldr	r4, [pc, #724]	; (8003300 <main+0x680>)
 800302a:	4ab6      	ldr	r2, [pc, #728]	; (8003304 <main+0x684>)
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800302c:	4620      	mov	r0, r4
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800302e:	9341      	str	r3, [sp, #260]	; 0x104
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003030:	6123      	str	r3, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003032:	f884 3020 	strb.w	r3, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003036:	60e3      	str	r3, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8003038:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800303c:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800303e:	9344      	str	r3, [sp, #272]	; 0x110
	hadc2.Init.ContinuousConvMode = ENABLE;
 8003040:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8003042:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8003044:	6022      	str	r2, [r4, #0]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003046:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800304a:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 800304e:	f003 f963 	bl	8006318 <HAL_ADC_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2800      	cmp	r0, #0
 8003056:	f040 83fe 	bne.w	8003856 <main+0xbd6>
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800305a:	4620      	mov	r0, r4
 800305c:	a941      	add	r1, sp, #260	; 0x104
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800305e:	9343      	str	r3, [sp, #268]	; 0x10c
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003060:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003064:	f003 fc1a 	bl	800689c <HAL_ADC_ConfigChannel>
 8003068:	4603      	mov	r3, r0
 800306a:	2800      	cmp	r0, #0
 800306c:	f040 83f3 	bne.w	8003856 <main+0xbd6>
	hadc3.Instance = ADC3;
 8003070:	4ca5      	ldr	r4, [pc, #660]	; (8003308 <main+0x688>)
 8003072:	4aa6      	ldr	r2, [pc, #664]	; (800330c <main+0x68c>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003074:	903d      	str	r0, [sp, #244]	; 0xf4
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8003076:	4620      	mov	r0, r4
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003078:	6123      	str	r3, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800307a:	f884 3020 	strb.w	r3, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800307e:	60e3      	str	r3, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8003080:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003084:	6163      	str	r3, [r4, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003086:	9340      	str	r3, [sp, #256]	; 0x100
	hadc3.Init.ContinuousConvMode = ENABLE;
 8003088:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 800308a:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 800308c:	6022      	str	r2, [r4, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800308e:	e9c4 5301 	strd	r5, r3, [r4, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003092:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8003096:	f003 f93f 	bl	8006318 <HAL_ADC_Init>
 800309a:	4603      	mov	r3, r0
 800309c:	2800      	cmp	r0, #0
 800309e:	f040 83da 	bne.w	8003856 <main+0xbd6>
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80030a2:	4620      	mov	r0, r4
 80030a4:	a93d      	add	r1, sp, #244	; 0xf4
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80030a6:	933f      	str	r3, [sp, #252]	; 0xfc
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80030a8:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 80030ac:	f003 fbf6 	bl	800689c <HAL_ADC_ConfigChannel>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	f040 83d0 	bne.w	8003856 <main+0xbd6>
	hrng.Instance = RNG;
 80030b6:	4896      	ldr	r0, [pc, #600]	; (8003310 <main+0x690>)
 80030b8:	4b96      	ldr	r3, [pc, #600]	; (8003314 <main+0x694>)
 80030ba:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 80030bc:	f008 ff0a 	bl	800bed4 <HAL_RNG_Init>
 80030c0:	2800      	cmp	r0, #0
 80030c2:	f040 83c8 	bne.w	8003856 <main+0xbd6>
	htim6.Instance = TIM6;
 80030c6:	4c94      	ldr	r4, [pc, #592]	; (8003318 <main+0x698>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030c8:	2300      	movs	r3, #0
	htim6.Instance = TIM6;
 80030ca:	4a94      	ldr	r2, [pc, #592]	; (800331c <main+0x69c>)
	htim6.Init.Prescaler = 10800;
 80030cc:	f642 2730 	movw	r7, #10800	; 0x2a30
	htim6.Init.Period = 10000;
 80030d0:	f242 7510 	movw	r5, #10000	; 0x2710
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d4:	2680      	movs	r6, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80030d6:	4620      	mov	r0, r4
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d8:	60a3      	str	r3, [r4, #8]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030da:	9321      	str	r3, [sp, #132]	; 0x84
	htim6.Init.Period = 10000;
 80030dc:	60e5      	str	r5, [r4, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030de:	61a6      	str	r6, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030e0:	e9cd 331f 	strd	r3, r3, [sp, #124]	; 0x7c
	htim6.Init.Prescaler = 10800;
 80030e4:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80030e8:	f00a fb54 	bl	800d794 <HAL_TIM_Base_Init>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2800      	cmp	r0, #0
 80030f0:	f040 83b1 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80030f4:	2210      	movs	r2, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80030f6:	a91f      	add	r1, sp, #124	; 0x7c
 80030f8:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030fa:	9321      	str	r3, [sp, #132]	; 0x84
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80030fc:	921f      	str	r2, [sp, #124]	; 0x7c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80030fe:	f00b fdf3 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 8003102:	4603      	mov	r3, r0
 8003104:	2800      	cmp	r0, #0
 8003106:	f040 83a6 	bne.w	8003856 <main+0xbd6>
	htim3.Instance = TIM3;
 800310a:	4c85      	ldr	r4, [pc, #532]	; (8003320 <main+0x6a0>)
 800310c:	4a85      	ldr	r2, [pc, #532]	; (8003324 <main+0x6a4>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800310e:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003110:	905b      	str	r0, [sp, #364]	; 0x16c
	htim3.Init.Prescaler = 10800;
 8003112:	6067      	str	r7, [r4, #4]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003114:	6123      	str	r3, [r4, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003116:	61a6      	str	r6, [r4, #24]
	htim3.Instance = TIM3;
 8003118:	6022      	str	r2, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800311a:	933c      	str	r3, [sp, #240]	; 0xf0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800311c:	931e      	str	r3, [sp, #120]	; 0x78
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800311e:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8003122:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8003126:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800312a:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 800312c:	e9c4 3502 	strd	r3, r5, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003130:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003134:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003138:	f00a fb2c 	bl	800d794 <HAL_TIM_Base_Init>
 800313c:	2800      	cmp	r0, #0
 800313e:	f040 838a 	bne.w	8003856 <main+0xbd6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003146:	a939      	add	r1, sp, #228	; 0xe4
 8003148:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800314a:	9339      	str	r3, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800314c:	f009 fe22 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8003150:	2800      	cmp	r0, #0
 8003152:	f040 8380 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003156:	4620      	mov	r0, r4
 8003158:	f00a fc8c 	bl	800da74 <HAL_TIM_PWM_Init>
 800315c:	2800      	cmp	r0, #0
 800315e:	f040 837a 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003162:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003164:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003166:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003168:	4620      	mov	r0, r4
 800316a:	f00b fdbd 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 800316e:	2800      	cmp	r0, #0
 8003170:	f040 8371 	bne.w	8003856 <main+0xbd6>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003174:	2560      	movs	r5, #96	; 0x60
	sConfigOC.Pulse = 10;
 8003176:	230a      	movs	r3, #10
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003178:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800317a:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800317c:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800317e:	a955      	add	r1, sp, #340	; 0x154
 8003180:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003182:	9555      	str	r5, [sp, #340]	; 0x154
	sConfigOC.Pulse = 10;
 8003184:	9356      	str	r3, [sp, #344]	; 0x158
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003186:	f00a ffcb 	bl	800e120 <HAL_TIM_PWM_ConfigChannel>
 800318a:	4605      	mov	r5, r0
 800318c:	2800      	cmp	r0, #0
 800318e:	f040 8362 	bne.w	8003856 <main+0xbd6>
	HAL_TIM_MspPostInit(&htim3);
 8003192:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8003194:	4c64      	ldr	r4, [pc, #400]	; (8003328 <main+0x6a8>)
	HAL_TIM_MspPostInit(&htim3);
 8003196:	f001 fee3 	bl	8004f60 <HAL_TIM_MspPostInit>
	htim7.Init.Period = 9600;
 800319a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	htim7.Instance = TIM7;
 800319e:	4a63      	ldr	r2, [pc, #396]	; (800332c <main+0x6ac>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80031a0:	4620      	mov	r0, r4
	htim7.Init.Period = 9600;
 80031a2:	60e3      	str	r3, [r4, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80031a4:	61a6      	str	r6, [r4, #24]
	htim7.Instance = TIM7;
 80031a6:	6022      	str	r2, [r4, #0]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031a8:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031ae:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80031b2:	f00a faef 	bl	800d794 <HAL_TIM_Base_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f040 834c 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031be:	2220      	movs	r2, #32
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80031c0:	4620      	mov	r0, r4
 80031c2:	a919      	add	r1, sp, #100	; 0x64
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031c4:	931b      	str	r3, [sp, #108]	; 0x6c
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031c6:	9219      	str	r2, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80031c8:	f00b fd8e 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2800      	cmp	r0, #0
 80031d0:	f040 8341 	bne.w	8003856 <main+0xbd6>
	htim1.Instance = TIM1;
 80031d4:	4856      	ldr	r0, [pc, #344]	; (8003330 <main+0x6b0>)
	htim1.Init.Period = 65535;
 80031d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
	htim1.Instance = TIM1;
 80031da:	4956      	ldr	r1, [pc, #344]	; (8003334 <main+0x6b4>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80031dc:	9335      	str	r3, [sp, #212]	; 0xd4
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031de:	6183      	str	r3, [r0, #24]
	htim1.Instance = TIM1;
 80031e0:	6001      	str	r1, [r0, #0]
	htim1.Init.Period = 65535;
 80031e2:	60c2      	str	r2, [r0, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80031e4:	9338      	str	r3, [sp, #224]	; 0xe0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031e6:	9318      	str	r3, [sp, #96]	; 0x60
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim1.Init.RepetitionCounter = 0;
 80031ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80031f0:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80031f4:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80031f8:	f00a facc 	bl	800d794 <HAL_TIM_Base_Init>
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f040 832a 	bne.w	8003856 <main+0xbd6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003202:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003206:	a935      	add	r1, sp, #212	; 0xd4
 8003208:	4849      	ldr	r0, [pc, #292]	; (8003330 <main+0x6b0>)
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320a:	9735      	str	r7, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800320c:	f009 fdc2 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8003210:	2800      	cmp	r0, #0
 8003212:	f040 8320 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003216:	9018      	str	r0, [sp, #96]	; 0x60
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003218:	a916      	add	r1, sp, #88	; 0x58
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800321a:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800321e:	4844      	ldr	r0, [pc, #272]	; (8003330 <main+0x6b0>)
 8003220:	f00b fd62 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 8003224:	4602      	mov	r2, r0
 8003226:	2800      	cmp	r0, #0
 8003228:	f040 8315 	bne.w	8003856 <main+0xbd6>
	hcrc.Instance = CRC;
 800322c:	4842      	ldr	r0, [pc, #264]	; (8003338 <main+0x6b8>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800322e:	2501      	movs	r5, #1
	hcrc.Instance = CRC;
 8003230:	4942      	ldr	r1, [pc, #264]	; (800333c <main+0x6bc>)
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003232:	8082      	strh	r2, [r0, #4]
	hcrc.Instance = CRC;
 8003234:	6001      	str	r1, [r0, #0]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003236:	6205      	str	r5, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003238:	e9c0 2205 	strd	r2, r2, [r0, #20]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800323c:	f003 fd16 	bl	8006c6c <HAL_CRC_Init>
 8003240:	4603      	mov	r3, r0
 8003242:	2800      	cmp	r0, #0
 8003244:	f040 8307 	bne.w	8003856 <main+0xbd6>
	htim2.Instance = TIM2;
 8003248:	4c3d      	ldr	r4, [pc, #244]	; (8003340 <main+0x6c0>)
 800324a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	htim2.Init.Period = 4000000000;
 800324e:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <main+0x6c4>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003250:	ae49      	add	r6, sp, #292	; 0x124
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003252:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003254:	9049      	str	r0, [sp, #292]	; 0x124
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003256:	4620      	mov	r0, r4
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003258:	9331      	str	r3, [sp, #196]	; 0xc4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325a:	6123      	str	r3, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	61a3      	str	r3, [r4, #24]
	htim2.Instance = TIM2;
 800325e:	6021      	str	r1, [r4, #0]
	htim2.Init.Period = 4000000000;
 8003260:	60e2      	str	r2, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003262:	9330      	str	r3, [sp, #192]	; 0xc0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003264:	9315      	str	r3, [sp, #84]	; 0x54
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003266:	9334      	str	r3, [sp, #208]	; 0xd0
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003268:	e9c4 3301 	strd	r3, r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800326c:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003270:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 8003274:	e9cd 334c 	strd	r3, r3, [sp, #304]	; 0x130
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003278:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800327c:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003280:	f00a fa88 	bl	800d794 <HAL_TIM_Base_Init>
 8003284:	2800      	cmp	r0, #0
 8003286:	f040 82e6 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800328a:	a92d      	add	r1, sp, #180	; 0xb4
 800328c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328e:	972d      	str	r7, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003290:	f009 fd80 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8003294:	2800      	cmp	r0, #0
 8003296:	f040 82de 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 800329a:	4620      	mov	r0, r4
 800329c:	f00a fca2 	bl	800dbe4 <HAL_TIM_IC_Init>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	f040 82d8 	bne.w	8003856 <main+0xbd6>
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80032a6:	2704      	movs	r7, #4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80032a8:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032aa:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80032ac:	4631      	mov	r1, r6
	sSlaveConfig.TriggerFilter = 0;
 80032ae:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80032b0:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80032b2:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80032b6:	f00a f83b 	bl	800d330 <HAL_TIM_SlaveConfigSynchro>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	f040 82cb 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c0:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80032c2:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c4:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80032c6:	4620      	mov	r0, r4
 80032c8:	f00b fd0e 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 80032cc:	4602      	mov	r2, r0
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f040 82c1 	bne.w	8003856 <main+0xbd6>
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032d4:	9031      	str	r0, [sp, #196]	; 0xc4
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80032d6:	a931      	add	r1, sp, #196	; 0xc4
 80032d8:	4620      	mov	r0, r4
	sConfigIC.ICFilter = 0;
 80032da:	9234      	str	r2, [sp, #208]	; 0xd0
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032dc:	e9cd 5232 	strd	r5, r2, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80032e0:	f00b f942 	bl	800e568 <HAL_TIM_IC_ConfigChannel>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f040 82b6 	bne.w	8003856 <main+0xbd6>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80032ea:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80032ec:	463a      	mov	r2, r7
 80032ee:	4620      	mov	r0, r4
 80032f0:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80032f2:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80032f4:	f00b f938 	bl	800e568 <HAL_TIM_IC_ConfigChannel>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	f040 82ac 	bne.w	8003856 <main+0xbd6>
 80032fe:	e023      	b.n	8003348 <main+0x6c8>
 8003300:	200230b8 	.word	0x200230b8
 8003304:	40012100 	.word	0x40012100
 8003308:	20023444 	.word	0x20023444
 800330c:	40012200 	.word	0x40012200
 8003310:	20023600 	.word	0x20023600
 8003314:	50060800 	.word	0x50060800
 8003318:	2002357c 	.word	0x2002357c
 800331c:	40001000 	.word	0x40001000
 8003320:	20023278 	.word	0x20023278
 8003324:	40000400 	.word	0x40000400
 8003328:	20023874 	.word	0x20023874
 800332c:	40001400 	.word	0x40001400
 8003330:	200235bc 	.word	0x200235bc
 8003334:	40010000 	.word	0x40010000
 8003338:	20023160 	.word	0x20023160
 800333c:	40023000 	.word	0x40023000
 8003340:	20023714 	.word	0x20023714
 8003344:	ee6b2800 	.word	0xee6b2800
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003348:	a931      	add	r1, sp, #196	; 0xc4
 800334a:	2208      	movs	r2, #8
 800334c:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800334e:	9532      	str	r5, [sp, #200]	; 0xc8
 8003350:	46a8      	mov	r8, r5
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003352:	f00b f909 	bl	800e568 <HAL_TIM_IC_ConfigChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	2800      	cmp	r0, #0
 800335a:	f040 827c 	bne.w	8003856 <main+0xbd6>
	huart6.Instance = USART6;
 800335e:	4cc7      	ldr	r4, [pc, #796]	; (800367c <main+0x9fc>)
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003360:	2130      	movs	r1, #48	; 0x30
	huart6.Instance = USART6;
 8003362:	48c7      	ldr	r0, [pc, #796]	; (8003680 <main+0xa00>)
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003364:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003368:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
	huart6.Init.BaudRate = 9600;
 800336c:	f44f 5716 	mov.w	r7, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003370:	250c      	movs	r5, #12
	huart6.Instance = USART6;
 8003372:	6020      	str	r0, [r4, #0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT | UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003374:	6261      	str	r1, [r4, #36]	; 0x24
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003376:	4620      	mov	r0, r4
 8003378:	4619      	mov	r1, r3
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800337a:	63a2      	str	r2, [r4, #56]	; 0x38
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800337c:	461a      	mov	r2, r3
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800337e:	60a3      	str	r3, [r4, #8]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003380:	6223      	str	r3, [r4, #32]
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003382:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
	huart6.Init.BaudRate = 9600;
 8003386:	6067      	str	r7, [r4, #4]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003388:	6165      	str	r5, [r4, #20]
	huart6.Init.Parity = UART_PARITY_NONE;
 800338a:	e9c4 3303 	strd	r3, r3, [r4, #12]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800338e:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_RS485Ex_Init(&huart6, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003392:	f00c fcff 	bl	800fd94 <HAL_RS485Ex_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 825c 	bne.w	8003856 <main+0xbd6>
	hdac.Instance = DAC;
 800339e:	4cb9      	ldr	r4, [pc, #740]	; (8003684 <main+0xa04>)
 80033a0:	4ab9      	ldr	r2, [pc, #740]	; (8003688 <main+0xa08>)
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80033a2:	4620      	mov	r0, r4
	DAC_ChannelConfTypeDef sConfig = { 0 };
 80033a4:	930b      	str	r3, [sp, #44]	; 0x2c
	hdac.Instance = DAC;
 80033a6:	6022      	str	r2, [r4, #0]
	DAC_ChannelConfTypeDef sConfig = { 0 };
 80033a8:	930c      	str	r3, [sp, #48]	; 0x30
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 80033aa:	f003 fd19 	bl	8006de0 <HAL_DAC_Init>
 80033ae:	4602      	mov	r2, r0
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f040 8250 	bne.w	8003856 <main+0xbd6>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80033b6:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80033b8:	4620      	mov	r0, r4
 80033ba:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80033bc:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 80033be:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80033c0:	f003 fe4e 	bl	8007060 <HAL_DAC_ConfigChannel>
 80033c4:	4681      	mov	r9, r0
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f040 8245 	bne.w	8003856 <main+0xbd6>
	hi2c1.Instance = I2C1;
 80033cc:	4caf      	ldr	r4, [pc, #700]	; (800368c <main+0xa0c>)
	MX_FATFS_Init();
 80033ce:	f00d fad5 	bl	801097c <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 80033d2:	4aaf      	ldr	r2, [pc, #700]	; (8003690 <main+0xa10>)
	hi2c1.Init.Timing = 0x20404768;
 80033d4:	4baf      	ldr	r3, [pc, #700]	; (8003694 <main+0xa14>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80033d6:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 80033d8:	f8c4 9008 	str.w	r9, [r4, #8]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033dc:	e9c4 8903 	strd	r8, r9, [r4, #12]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e0:	e9c4 9905 	strd	r9, r9, [r4, #20]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033e4:	e9c4 9907 	strd	r9, r9, [r4, #28]
	hi2c1.Init.Timing = 0x20404768;
 80033e8:	e9c4 2300 	strd	r2, r3, [r4]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80033ec:	f006 fac6 	bl	800997c <HAL_I2C_Init>
 80033f0:	4601      	mov	r1, r0
 80033f2:	2800      	cmp	r0, #0
 80033f4:	f040 822f 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80033f8:	4620      	mov	r0, r4
 80033fa:	f006 fd21 	bl	8009e40 <HAL_I2CEx_ConfigAnalogFilter>
 80033fe:	4601      	mov	r1, r0
 8003400:	2800      	cmp	r0, #0
 8003402:	f040 8228 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003406:	4620      	mov	r0, r4
 8003408:	f006 fd6c 	bl	8009ee4 <HAL_I2CEx_ConfigDigitalFilter>
 800340c:	2800      	cmp	r0, #0
 800340e:	f040 8222 	bne.w	8003856 <main+0xbd6>
	huart4.Instance = UART4;
 8003412:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <main+0xa18>)
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003414:	f44f 7240 	mov.w	r2, #768	; 0x300
	huart4.Instance = UART4;
 8003418:	49a0      	ldr	r1, [pc, #640]	; (800369c <main+0xa1c>)
	huart4.Init.BaudRate = 115200;
 800341a:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800341e:	6258      	str	r0, [r3, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003420:	619a      	str	r2, [r3, #24]
	huart4.Instance = UART4;
 8003422:	6019      	str	r1, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8003424:	605c      	str	r4, [r3, #4]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8003426:	e9c3 0002 	strd	r0, r0, [r3, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800342a:	e9c3 0504 	strd	r0, r5, [r3, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800342e:	e9c3 0007 	strd	r0, r0, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8003432:	4618      	mov	r0, r3
 8003434:	f00c fbae 	bl	800fb94 <HAL_UART_Init>
 8003438:	4602      	mov	r2, r0
 800343a:	2800      	cmp	r0, #0
 800343c:	f040 820b 	bne.w	8003856 <main+0xbd6>
	huart5.Instance = UART5;
 8003440:	4897      	ldr	r0, [pc, #604]	; (80036a0 <main+0xa20>)
 8003442:	4998      	ldr	r1, [pc, #608]	; (80036a4 <main+0xa24>)
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003444:	6242      	str	r2, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8003446:	6001      	str	r1, [r0, #0]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003448:	e9c0 7201 	strd	r7, r2, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800344c:	e9c0 2203 	strd	r2, r2, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003450:	e9c0 5205 	strd	r5, r2, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003454:	e9c0 2207 	strd	r2, r2, [r0, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8003458:	f00c fb9c 	bl	800fb94 <HAL_UART_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	f040 81f9 	bne.w	8003856 <main+0xbd6>
	huart7.Instance = UART7;
 8003464:	4890      	ldr	r0, [pc, #576]	; (80036a8 <main+0xa28>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003466:	461a      	mov	r2, r3
	huart7.Instance = UART7;
 8003468:	4f90      	ldr	r7, [pc, #576]	; (80036ac <main+0xa2c>)
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800346a:	4619      	mov	r1, r3
	huart7.Init.Mode = UART_MODE_TX_RX;
 800346c:	6145      	str	r5, [r0, #20]
	huart7.Instance = UART7;
 800346e:	6007      	str	r7, [r0, #0]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003470:	e9c0 4301 	strd	r4, r3, [r0, #4]
	huart7.Init.Parity = UART_PARITY_NONE;
 8003474:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003478:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800347c:	e9c0 3308 	strd	r3, r3, [r0, #32]
	if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003480:	f00c fc88 	bl	800fd94 <HAL_RS485Ex_Init>
 8003484:	2800      	cmp	r0, #0
 8003486:	f040 81e6 	bne.w	8003856 <main+0xbd6>
	huart3.Instance = USART3;
 800348a:	4889      	ldr	r0, [pc, #548]	; (80036b0 <main+0xa30>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800348c:	2200      	movs	r2, #0
	huart3.Init.BaudRate = 115200;
 800348e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
	huart3.Instance = USART3;
 8003492:	4c88      	ldr	r4, [pc, #544]	; (80036b4 <main+0xa34>)
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003494:	6082      	str	r2, [r0, #8]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003496:	6145      	str	r5, [r0, #20]
	huart3.Init.BaudRate = 115200;
 8003498:	e9c0 4100 	strd	r4, r1, [r0]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 800349c:	4611      	mov	r1, r2
	huart3.Init.Parity = UART_PARITY_NONE;
 800349e:	e9c0 2203 	strd	r2, r2, [r0, #12]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034a2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034a6:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 80034aa:	f00c fc21 	bl	800fcf0 <HAL_MultiProcessor_Init>
 80034ae:	2800      	cmp	r0, #0
 80034b0:	f040 81d1 	bne.w	8003856 <main+0xbd6>
	hspi4.Instance = SPI4;
 80034b4:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <main+0xa38>)
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80034b6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	hspi4.Instance = SPI4;
 80034ba:	4980      	ldr	r1, [pc, #512]	; (80036bc <main+0xa3c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80034bc:	f44f 7582 	mov.w	r5, #260	; 0x104
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80034c0:	f44f 7940 	mov.w	r9, #768	; 0x300
	hspi4.Init.CRCPolynomial = 7;
 80034c4:	2707      	movs	r7, #7
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034c6:	2408      	movs	r4, #8
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80034c8:	6098      	str	r0, [r3, #8]
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ca:	6318      	str	r0, [r3, #48]	; 0x30
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80034cc:	619a      	str	r2, [r3, #24]
	hspi4.Instance = SPI4;
 80034ce:	6019      	str	r1, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80034d0:	605d      	str	r5, [r3, #4]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80034d2:	f8c3 900c 	str.w	r9, [r3, #12]
	hspi4.Init.CRCPolynomial = 7;
 80034d6:	62df      	str	r7, [r3, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034d8:	635c      	str	r4, [r3, #52]	; 0x34
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034da:	e9c3 0004 	strd	r0, r0, [r3, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034de:	e9c3 0007 	strd	r0, r0, [r3, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034e2:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80034e6:	4618      	mov	r0, r3
 80034e8:	f008 fd9e 	bl	800c028 <HAL_SPI_Init>
 80034ec:	4602      	mov	r2, r0
 80034ee:	2800      	cmp	r0, #0
 80034f0:	f040 81b1 	bne.w	8003856 <main+0xbd6>
	hspi3.Instance = SPI3;
 80034f4:	4872      	ldr	r0, [pc, #456]	; (80036c0 <main+0xa40>)
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80034f6:	f44f 7800 	mov.w	r8, #512	; 0x200
	hspi3.Instance = SPI3;
 80034fa:	4972      	ldr	r1, [pc, #456]	; (80036c4 <main+0xa44>)
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034fc:	6142      	str	r2, [r0, #20]
	hspi3.Instance = SPI3;
 80034fe:	6001      	str	r1, [r0, #0]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8003500:	f8c0 8018 	str.w	r8, [r0, #24]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003504:	e9c0 2201 	strd	r2, r2, [r0, #4]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	e9c0 9203 	strd	r9, r2, [r0, #12]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800350c:	e9c0 2208 	strd	r2, r2, [r0, #32]
	hspi3.Init.CRCPolynomial = 7;
 8003510:	e9c0 270a 	strd	r2, r7, [r0, #40]	; 0x28
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003514:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8003518:	f008 fd86 	bl	800c028 <HAL_SPI_Init>
 800351c:	4602      	mov	r2, r0
 800351e:	2800      	cmp	r0, #0
 8003520:	f040 8199 	bne.w	8003856 <main+0xbd6>
	hspi2.Instance = SPI2;
 8003524:	4868      	ldr	r0, [pc, #416]	; (80036c8 <main+0xa48>)
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003526:	f44f 6370 	mov.w	r3, #3840	; 0xf00
	hspi2.Instance = SPI2;
 800352a:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 80036e4 <main+0xa64>
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800352e:	2138      	movs	r1, #56	; 0x38
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003530:	60c3      	str	r3, [r0, #12]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003532:	f8c0 8018 	str.w	r8, [r0, #24]
	hspi2.Instance = SPI2;
 8003536:	f8c0 e000 	str.w	lr, [r0]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800353a:	61c1      	str	r1, [r0, #28]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800353c:	e9c0 5201 	strd	r5, r2, [r0, #4]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003540:	e9c0 2204 	strd	r2, r2, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003544:	e9c0 2208 	strd	r2, r2, [r0, #32]
	hspi2.Init.CRCPolynomial = 7;
 8003548:	e9c0 270a 	strd	r2, r7, [r0, #40]	; 0x28
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800354c:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8003550:	f008 fd6a 	bl	800c028 <HAL_SPI_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	f040 817d 	bne.w	8003856 <main+0xbd6>
	hi2c4.Instance = I2C4;
 800355c:	4c5b      	ldr	r4, [pc, #364]	; (80036cc <main+0xa4c>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800355e:	2501      	movs	r5, #1
	hi2c4.Instance = I2C4;
 8003560:	4a5b      	ldr	r2, [pc, #364]	; (80036d0 <main+0xa50>)
	hi2c4.Init.Timing = 0x20404768;
 8003562:	4f4c      	ldr	r7, [pc, #304]	; (8003694 <main+0xa14>)
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003564:	4620      	mov	r0, r4
	hi2c4.Init.OwnAddress1 = 0;
 8003566:	60a3      	str	r3, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003568:	6223      	str	r3, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800356a:	60e5      	str	r5, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 800356c:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003570:	e9c4 3306 	strd	r3, r3, [r4, #24]
	hi2c4.Init.Timing = 0x20404768;
 8003574:	e9c4 2700 	strd	r2, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8003578:	f006 fa00 	bl	800997c <HAL_I2C_Init>
 800357c:	4601      	mov	r1, r0
 800357e:	2800      	cmp	r0, #0
 8003580:	f040 8169 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8003584:	4620      	mov	r0, r4
 8003586:	f006 fc5b 	bl	8009e40 <HAL_I2CEx_ConfigAnalogFilter>
 800358a:	4601      	mov	r1, r0
 800358c:	2800      	cmp	r0, #0
 800358e:	f040 8162 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8003592:	4620      	mov	r0, r4
 8003594:	f006 fca6 	bl	8009ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8003598:	4603      	mov	r3, r0
 800359a:	2800      	cmp	r0, #0
 800359c:	f040 815b 	bne.w	8003856 <main+0xbd6>
	hi2c2.Instance = I2C2;
 80035a0:	4c4c      	ldr	r4, [pc, #304]	; (80036d4 <main+0xa54>)
 80035a2:	4a4d      	ldr	r2, [pc, #308]	; (80036d8 <main+0xa58>)
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80035a4:	4620      	mov	r0, r4
	hi2c2.Init.Timing = 0x20404768;
 80035a6:	6067      	str	r7, [r4, #4]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035a8:	6223      	str	r3, [r4, #32]
	hi2c2.Instance = I2C2;
 80035aa:	6022      	str	r2, [r4, #0]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ac:	e9c4 3502 	strd	r3, r5, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 80035b0:	e9c4 3304 	strd	r3, r3, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80035b4:	e9c4 3306 	strd	r3, r3, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80035b8:	f006 f9e0 	bl	800997c <HAL_I2C_Init>
 80035bc:	4601      	mov	r1, r0
 80035be:	2800      	cmp	r0, #0
 80035c0:	f040 8149 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80035c4:	4620      	mov	r0, r4
 80035c6:	f006 fc3b 	bl	8009e40 <HAL_I2CEx_ConfigAnalogFilter>
 80035ca:	4601      	mov	r1, r0
 80035cc:	2800      	cmp	r0, #0
 80035ce:	f040 8142 	bne.w	8003856 <main+0xbd6>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80035d2:	4620      	mov	r0, r4
 80035d4:	f006 fc86 	bl	8009ee4 <HAL_I2CEx_ConfigDigitalFilter>
 80035d8:	2800      	cmp	r0, #0
 80035da:	f040 813c 	bne.w	8003856 <main+0xbd6>
	htim4.Instance = TIM4;
 80035de:	4c3f      	ldr	r4, [pc, #252]	; (80036dc <main+0xa5c>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035e0:	2300      	movs	r3, #0
	htim4.Init.Period = 1100;
 80035e2:	f240 424c 	movw	r2, #1100	; 0x44c
	htim4.Instance = TIM4;
 80035e6:	493e      	ldr	r1, [pc, #248]	; (80036e0 <main+0xa60>)
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035e8:	f04f 0880 	mov.w	r8, #128	; 0x80
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80035ec:	4620      	mov	r0, r4
	htim4.Instance = TIM4;
 80035ee:	6021      	str	r1, [r4, #0]
	htim4.Init.Period = 1100;
 80035f0:	60e2      	str	r2, [r4, #12]
	htim4.Init.Prescaler = 0;
 80035f2:	6063      	str	r3, [r4, #4]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035f4:	9329      	str	r3, [sp, #164]	; 0xa4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80035f6:	934e      	str	r3, [sp, #312]	; 0x138
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035f8:	60a3      	str	r3, [r4, #8]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035fa:	6123      	str	r3, [r4, #16]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80035fc:	932c      	str	r3, [sp, #176]	; 0xb0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80035fe:	9312      	str	r3, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003600:	f8c4 8018 	str.w	r8, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003604:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003608:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800360c:	e9cd 334f 	strd	r3, r3, [sp, #316]	; 0x13c
 8003610:	e9cd 3351 	strd	r3, r3, [sp, #324]	; 0x144
 8003614:	e9cd 3353 	strd	r3, r3, [sp, #332]	; 0x14c
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8003618:	f00a f8bc 	bl	800d794 <HAL_TIM_Base_Init>
 800361c:	2800      	cmp	r0, #0
 800361e:	f040 811a 	bne.w	8003856 <main+0xbd6>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003622:	f44f 5780 	mov.w	r7, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8003626:	a929      	add	r1, sp, #164	; 0xa4
 8003628:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800362a:	9729      	str	r7, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800362c:	f009 fbb2 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8003630:	2800      	cmp	r0, #0
 8003632:	f040 8110 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8003636:	4620      	mov	r0, r4
 8003638:	f00a f964 	bl	800d904 <HAL_TIM_OC_Init>
 800363c:	2800      	cmp	r0, #0
 800363e:	f040 810a 	bne.w	8003856 <main+0xbd6>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003642:	2530      	movs	r5, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003644:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8003646:	a910      	add	r1, sp, #64	; 0x40
 8003648:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800364a:	9510      	str	r5, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800364c:	f00b fb4c 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 8003650:	4603      	mov	r3, r0
 8003652:	2800      	cmp	r0, #0
 8003654:	f040 80ff 	bne.w	8003856 <main+0xbd6>
	sConfigOC.Pulse = 550;
 8003658:	f240 2c26 	movw	ip, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800365c:	9050      	str	r0, [sp, #320]	; 0x140
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800365e:	2208      	movs	r2, #8
 8003660:	a94e      	add	r1, sp, #312	; 0x138
 8003662:	4620      	mov	r0, r4
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8003664:	954e      	str	r5, [sp, #312]	; 0x138
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003666:	9352      	str	r3, [sp, #328]	; 0x148
	sConfigOC.Pulse = 550;
 8003668:	f8cd c13c 	str.w	ip, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800366c:	f00a fbd8 	bl	800de20 <HAL_TIM_OC_ConfigChannel>
 8003670:	4605      	mov	r5, r0
 8003672:	2800      	cmp	r0, #0
 8003674:	f040 80ef 	bne.w	8003856 <main+0xbd6>
 8003678:	e036      	b.n	80036e8 <main+0xa68>
 800367a:	bf00      	nop
 800367c:	20023610 	.word	0x20023610
 8003680:	40011400 	.word	0x40011400
 8003684:	2002349c 	.word	0x2002349c
 8003688:	40007400 	.word	0x40007400
 800368c:	20023100 	.word	0x20023100
 8003690:	40005400 	.word	0x40005400
 8003694:	20404768 	.word	0x20404768
 8003698:	20023690 	.word	0x20023690
 800369c:	40004c00 	.word	0x40004c00
 80036a0:	2002337c 	.word	0x2002337c
 80036a4:	40005000 	.word	0x40005000
 80036a8:	20022f78 	.word	0x20022f78
 80036ac:	40007800 	.word	0x40007800
 80036b0:	20023038 	.word	0x20023038
 80036b4:	40004800 	.word	0x40004800
 80036b8:	200234b4 	.word	0x200234b4
 80036bc:	40013400 	.word	0x40013400
 80036c0:	200232b8 	.word	0x200232b8
 80036c4:	40003c00 	.word	0x40003c00
 80036c8:	20022f14 	.word	0x20022f14
 80036cc:	20022e68 	.word	0x20022e68
 80036d0:	40006000 	.word	0x40006000
 80036d4:	20023184 	.word	0x20023184
 80036d8:	40005800 	.word	0x40005800
 80036dc:	20022ff8 	.word	0x20022ff8
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40003800 	.word	0x40003800
	HAL_TIM_MspPostInit(&htim4);
 80036e8:	4620      	mov	r0, r4
 80036ea:	f001 fc39 	bl	8004f60 <HAL_TIM_MspPostInit>
	htim14.Instance = TIM14;
 80036ee:	485b      	ldr	r0, [pc, #364]	; (800385c <main+0xbdc>)
 80036f0:	495b      	ldr	r1, [pc, #364]	; (8003860 <main+0xbe0>)
	htim14.Init.Period = 10800;
 80036f2:	f642 2230 	movw	r2, #10800	; 0x2a30
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f6:	6105      	str	r5, [r0, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036f8:	f8c0 8018 	str.w	r8, [r0, #24]
	htim14.Instance = TIM14;
 80036fc:	6001      	str	r1, [r0, #0]
	htim14.Init.Period = 10800;
 80036fe:	60c2      	str	r2, [r0, #12]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003700:	e9c0 5501 	strd	r5, r5, [r0, #4]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8003704:	f00a f846 	bl	800d794 <HAL_TIM_Base_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2800      	cmp	r0, #0
 800370c:	f040 80a3 	bne.w	8003856 <main+0xbd6>
	htim5.Instance = TIM5;
 8003710:	4c54      	ldr	r4, [pc, #336]	; (8003864 <main+0xbe4>)
	htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003712:	2110      	movs	r1, #16
	htim5.Init.Period = 4;
 8003714:	2204      	movs	r2, #4
	htim5.Instance = TIM5;
 8003716:	4d54      	ldr	r5, [pc, #336]	; (8003868 <main+0xbe8>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003718:	9025      	str	r0, [sp, #148]	; 0x94
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800371a:	4620      	mov	r0, r4
	htim5.Init.Prescaler = 0;
 800371c:	6063      	str	r3, [r4, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371e:	6123      	str	r3, [r4, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003720:	61a3      	str	r3, [r4, #24]
	htim5.Instance = TIM5;
 8003722:	6025      	str	r5, [r4, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003724:	9328      	str	r3, [sp, #160]	; 0xa0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003726:	930f      	str	r3, [sp, #60]	; 0x3c
	htim5.Init.Period = 4;
 8003728:	e9c4 1202 	strd	r1, r2, [r4, #8]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800372c:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003730:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8003734:	f00a f82e 	bl	800d794 <HAL_TIM_Base_Init>
 8003738:	2800      	cmp	r0, #0
 800373a:	f040 808c 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800373e:	a925      	add	r1, sp, #148	; 0x94
 8003740:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003742:	9725      	str	r7, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8003744:	f009 fb26 	bl	800cd94 <HAL_TIM_ConfigClockSource>
 8003748:	4603      	mov	r3, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	f040 8083 	bne.w	8003856 <main+0xbd6>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003750:	4620      	mov	r0, r4
 8003752:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003754:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003756:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8003758:	f00b fac6 	bl	800ece8 <HAL_TIMEx_MasterConfigSynchronization>
 800375c:	4604      	mov	r4, r0
 800375e:	2800      	cmp	r0, #0
 8003760:	d179      	bne.n	8003856 <main+0xbd6>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003762:	682b      	ldr	r3, [r5, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003764:	4602      	mov	r2, r0
 8003766:	2107      	movs	r1, #7
 8003768:	2026      	movs	r0, #38	; 0x26
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 800376a:	f043 0308 	orr.w	r3, r3, #8
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800376e:	4f3f      	ldr	r7, [pc, #252]	; (800386c <main+0xbec>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8003770:	602b      	str	r3, [r5, #0]
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003772:	f003 fa03 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003776:	2026      	movs	r0, #38	; 0x26
 8003778:	f003 fa4a 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800377c:	4622      	mov	r2, r4
 800377e:	2106      	movs	r1, #6
 8003780:	2047      	movs	r0, #71	; 0x47
 8003782:	f003 f9fb 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003786:	2047      	movs	r0, #71	; 0x47
 8003788:	f003 fa42 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800378c:	4622      	mov	r2, r4
 800378e:	2106      	movs	r1, #6
 8003790:	2012      	movs	r0, #18
 8003792:	f003 f9f3 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003796:	2012      	movs	r0, #18
 8003798:	f003 fa3a 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800379c:	4622      	mov	r2, r4
 800379e:	2106      	movs	r1, #6
 80037a0:	2028      	movs	r0, #40	; 0x28
 80037a2:	f003 f9eb 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037a6:	2028      	movs	r0, #40	; 0x28
 80037a8:	f003 fa32 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80037ac:	4622      	mov	r2, r4
 80037ae:	2101      	movs	r1, #1
 80037b0:	202d      	movs	r0, #45	; 0x2d
 80037b2:	f003 f9e3 	bl	8006b7c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80037b6:	202d      	movs	r0, #45	; 0x2d
 80037b8:	f003 fa2a 	bl	8006c10 <HAL_NVIC_EnableIRQ>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037bc:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 80037be:	4d2c      	ldr	r5, [pc, #176]	; (8003870 <main+0xbf0>)
	osMutexDef(myMutex01);
 80037c0:	e9cd 443d 	strd	r4, r4, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037c4:	f00e fad8 	bl	8011d78 <osMutexCreate>
 80037c8:	4b2a      	ldr	r3, [pc, #168]	; (8003874 <main+0xbf4>)
 80037ca:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037cc:	2101      	movs	r1, #1
 80037ce:	a841      	add	r0, sp, #260	; 0x104
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80037d0:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 80037d2:	e9cd 4441 	strd	r4, r4, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037d6:	f00e fb2b 	bl	8011e30 <osSemaphoreCreate>
	osTimerDef(myTimer01, Callback01);
 80037da:	4b27      	ldr	r3, [pc, #156]	; (8003878 <main+0xbf8>)
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037dc:	4684      	mov	ip, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80037de:	4622      	mov	r2, r4
 80037e0:	2101      	movs	r1, #1
 80037e2:	a845      	add	r0, sp, #276	; 0x114
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80037e4:	f8c7 c000 	str.w	ip, [r7]
	osTimerDef(myTimer01, Callback01);
 80037e8:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80037ea:	4f24      	ldr	r7, [pc, #144]	; (800387c <main+0xbfc>)
	osTimerDef(myTimer01, Callback01);
 80037ec:	9446      	str	r4, [sp, #280]	; 0x118
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80037ee:	f00e fa9f 	bl	8011d30 <osTimerCreate>
 80037f2:	4684      	mov	ip, r0
	osMessageQDef(myQueue01, 256, uint16_t);
 80037f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80037f8:	f8c7 c000 	str.w	ip, [r7]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80037fc:	f105 0710 	add.w	r7, r5, #16
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003800:	352c      	adds	r5, #44	; 0x2c
	osMessageQDef(myQueue01, 256, uint16_t);
 8003802:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003806:	4630      	mov	r0, r6
 8003808:	4621      	mov	r1, r4
 800380a:	f00e fb65 	bl	8011ed8 <osMessageCreate>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800380e:	ae4e      	add	r6, sp, #312	; 0x138
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003810:	4686      	mov	lr, r0
 8003812:	f8df c074 	ldr.w	ip, [pc, #116]	; 8003888 <main+0xc08>
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8003816:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003818:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800381a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800381e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003822:	4621      	mov	r1, r4
 8003824:	a84e      	add	r0, sp, #312	; 0x138
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8003826:	f8cc e000 	str.w	lr, [ip]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800382a:	ae55      	add	r6, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800382c:	f00e fa4c 	bl	8011cc8 <osThreadCreate>
 8003830:	4684      	mov	ip, r0
 8003832:	4f13      	ldr	r7, [pc, #76]	; (8003880 <main+0xc00>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003836:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003838:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800383c:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003840:	4621      	mov	r1, r4
 8003842:	a855      	add	r0, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003844:	f8c7 c000 	str.w	ip, [r7]
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003848:	f00e fa3e 	bl	8011cc8 <osThreadCreate>
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <main+0xc04>)
 800384e:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8003850:	f00e fa2c 	bl	8011cac <osKernelStart>
	while (1) {
 8003854:	e7fe      	b.n	8003854 <main+0xbd4>
		Error_Handler();
 8003856:	f7ff f995 	bl	8002b84 <Error_Handler>
 800385a:	bf00      	nop
 800385c:	20023834 	.word	0x20023834
 8003860:	40002000 	.word	0x40002000
 8003864:	200231d8 	.word	0x200231d8
 8003868:	40000c00 	.word	0x40000c00
 800386c:	20023578 	.word	0x20023578
 8003870:	080259b0 	.word	0x080259b0
 8003874:	200238b4 	.word	0x200238b4
 8003878:	0800209d 	.word	0x0800209d
 800387c:	200235fc 	.word	0x200235fc
 8003880:	20022e64 	.word	0x20022e64
 8003884:	2002314c 	.word	0x2002314c
 8003888:	20023710 	.word	0x20023710

0800388c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 800388c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800388e:	b085      	sub	sp, #20
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8003890:	f242 7619 	movw	r6, #10009	; 0x2719
	MX_USB_DEVICE_Init();
 8003894:	f01c fc22 	bl	80200dc <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 8003898:	250c      	movs	r5, #12
	MX_LWIP_Init();
 800389a:	f00d f893 	bl	80109c4 <MX_LWIP_Init>
	printf("\n\n-------------------------------------------------------------------\n");
 800389e:	487d      	ldr	r0, [pc, #500]	; (8003a94 <StartDefaultTask+0x208>)
 80038a0:	f01e f83c 	bl	802191c <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d\n", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2],
 80038a4:	2400      	movs	r4, #0
 80038a6:	4b7c      	ldr	r3, [pc, #496]	; (8003a98 <StartDefaultTask+0x20c>)
 80038a8:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <StartDefaultTask+0x210>)
 80038aa:	497d      	ldr	r1, [pc, #500]	; (8003aa0 <StartDefaultTask+0x214>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6812      	ldr	r2, [r2, #0]
 80038b0:	6809      	ldr	r1, [r1, #0]
 80038b2:	487c      	ldr	r0, [pc, #496]	; (8003aa4 <StartDefaultTask+0x218>)
 80038b4:	9400      	str	r4, [sp, #0]
 80038b6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80038ba:	f01d ff93 	bl	80217e4 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 80038be:	4b7a      	ldr	r3, [pc, #488]	; (8003aa8 <StartDefaultTask+0x21c>)
 80038c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038c4:	075b      	lsls	r3, r3, #29
 80038c6:	d41d      	bmi.n	8003904 <StartDefaultTask+0x78>
		printf("LAN interface appears disconnected\n\r");
 80038c8:	4878      	ldr	r0, [pc, #480]	; (8003aac <StartDefaultTask+0x220>)
 80038ca:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80038cc:	4d78      	ldr	r5, [pc, #480]	; (8003ab0 <StartDefaultTask+0x224>)
		printf("LAN interface appears disconnected\n\r");
 80038ce:	f01d ff89 	bl	80217e4 <iprintf>
			osDelay(50);
 80038d2:	2032      	movs	r0, #50	; 0x32
 80038d4:	f00e fa24 	bl	8011d20 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038de:	4628      	mov	r0, r5
 80038e0:	f005 feac 	bl	800963c <HAL_GPIO_WritePin>
			osDelay(50);
 80038e4:	2032      	movs	r0, #50	; 0x32
 80038e6:	f00e fa1b 	bl	8011d20 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 80038ea:	2200      	movs	r2, #0
 80038ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f0:	4628      	mov	r0, r5
 80038f2:	f005 fea3 	bl	800963c <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 80038f6:	3c01      	subs	r4, #1
 80038f8:	d1eb      	bne.n	80038d2 <StartDefaultTask+0x46>
		printf("************* REBOOTING **************\n");
 80038fa:	486e      	ldr	r0, [pc, #440]	; (8003ab4 <StartDefaultTask+0x228>)
 80038fc:	f01e f80e 	bl	802191c <puts>
		rebootme();
 8003900:	f7ff f850 	bl	80029a4 <rebootme>
	netif = netif_default;
 8003904:	4b6c      	ldr	r3, [pc, #432]	; (8003ab8 <StartDefaultTask+0x22c>)
 8003906:	4f6d      	ldr	r7, [pc, #436]	; (8003abc <StartDefaultTask+0x230>)
 8003908:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 800390a:	4b6d      	ldr	r3, [pc, #436]	; (8003ac0 <StartDefaultTask+0x234>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800390c:	496d      	ldr	r1, [pc, #436]	; (8003ac4 <StartDefaultTask+0x238>)
	globalfreeze = 0;		// Allow UDP streaming
 800390e:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8003910:	6038      	str	r0, [r7, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003912:	f013 fd6d 	bl	80173f0 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	496b      	ldr	r1, [pc, #428]	; (8003ac8 <StartDefaultTask+0x23c>)
 800391a:	f013 fd25 	bl	8017368 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 800391e:	4b6b      	ldr	r3, [pc, #428]	; (8003acc <StartDefaultTask+0x240>)
	statuspkt.adctrigoff = TRIG_THRES;
 8003920:	2264      	movs	r2, #100	; 0x64
	t2cap[0] = 44444444;
 8003922:	496b      	ldr	r1, [pc, #428]	; (8003ad0 <StartDefaultTask+0x244>)
	statuspkt.uid = BUILDNO;		// 16 bits
 8003924:	f8a3 605c 	strh.w	r6, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8003928:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 800392c:	f883 5071 	strb.w	r5, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8003930:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8003932:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8003934:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8003936:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8003938:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 800393c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003940:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003942:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003944:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8003948:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 800394c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003950:	4860      	ldr	r0, [pc, #384]	; (8003ad4 <StartDefaultTask+0x248>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003952:	f042 0201 	orr.w	r2, r2, #1
	t2cap[0] = 44444444;
 8003956:	6008      	str	r0, [r1, #0]
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	stat = setupneo();
 800395c:	f000 fa10 	bl	8003d80 <setupneo>
	if (stat != HAL_OK) {
 8003960:	2800      	cmp	r0, #0
 8003962:	f040 8093 	bne.w	8003a8c <StartDefaultTask+0x200>
	initsplat();
 8003966:	f000 fe9f 	bl	80046a8 <initsplat>
	printf("Setting up timers\n");
 800396a:	485b      	ldr	r0, [pc, #364]	; (8003ad8 <StartDefaultTask+0x24c>)
 800396c:	f01d ffd6 	bl	802191c <puts>
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003970:	2300      	movs	r3, #0
 8003972:	4a5a      	ldr	r2, [pc, #360]	; (8003adc <StartDefaultTask+0x250>)
 8003974:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003976:	4c5a      	ldr	r4, [pc, #360]	; (8003ae0 <StartDefaultTask+0x254>)
	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003978:	6810      	ldr	r0, [r2, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	f00e fcea 	bl	8012354 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003980:	4858      	ldr	r0, [pc, #352]	; (8003ae4 <StartDefaultTask+0x258>)
 8003982:	f009 f97f 	bl	800cc84 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003986:	2200      	movs	r2, #0
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	4611      	mov	r1, r2
 800398c:	f00a ff6c 	bl	800e868 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8003990:	6820      	ldr	r0, [r4, #0]
 8003992:	2200      	movs	r2, #0
 8003994:	2104      	movs	r1, #4
 8003996:	f00a ff67 	bl	800e868 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 800399a:	2200      	movs	r2, #0
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	210c      	movs	r1, #12
 80039a0:	f00a ff62 	bl	800e868 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 80039a4:	2100      	movs	r1, #0
 80039a6:	4620      	mov	r0, r4
 80039a8:	f00b f8d6 	bl	800eb58 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 80039ac:	2104      	movs	r1, #4
 80039ae:	4620      	mov	r0, r4
 80039b0:	f00b f8d2 	bl	800eb58 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 80039b4:	210c      	movs	r1, #12
 80039b6:	4620      	mov	r0, r4
 80039b8:	f00b f8ce 	bl	800eb58 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 80039bc:	4620      	mov	r0, r4
 80039be:	2301      	movs	r3, #1
 80039c0:	4a43      	ldr	r2, [pc, #268]	; (8003ad0 <StartDefaultTask+0x244>)
 80039c2:	2108      	movs	r1, #8
 80039c4:	f00a ffae 	bl	800e924 <HAL_TIM_IC_Start_DMA>
 80039c8:	4605      	mov	r5, r0
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d158      	bne.n	8003a80 <StartDefaultTask+0x1f4>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	2201      	movs	r2, #1
 80039d2:	2108      	movs	r1, #8
	myip = ip.addr;
 80039d4:	4c44      	ldr	r4, [pc, #272]	; (8003ae8 <StartDefaultTask+0x25c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 80039d6:	f00a ff47 	bl	800e868 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 80039da:	683b      	ldr	r3, [r7, #0]
	printf("*****************************************\n");
 80039dc:	4843      	ldr	r0, [pc, #268]	; (8003aec <StartDefaultTask+0x260>)
	ip = dhcp->offered_ip_addr;
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 80039e0:	4e43      	ldr	r6, [pc, #268]	; (8003af0 <StartDefaultTask+0x264>)
	myip = ip.addr;
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 80039e6:	f01d ff99 	bl	802191c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80039ea:	6821      	ldr	r1, [r4, #0]
 80039ec:	4841      	ldr	r0, [pc, #260]	; (8003af4 <StartDefaultTask+0x268>)
 80039ee:	0e0a      	lsrs	r2, r1, #24
 80039f0:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 80039f4:	4c40      	ldr	r4, [pc, #256]	; (8003af8 <StartDefaultTask+0x26c>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80039f6:	9200      	str	r2, [sp, #0]
 80039f8:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80039fc:	b2c9      	uxtb	r1, r1
 80039fe:	f01d fef1 	bl	80217e4 <iprintf>
	printf("*****************************************\n");
 8003a02:	483a      	ldr	r0, [pc, #232]	; (8003aec <StartDefaultTask+0x260>)
 8003a04:	f01d ff8a 	bl	802191c <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8003a08:	f002 fbe0 	bl	80061cc <initialapisn>
	osDelay(1000);
 8003a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a10:	f00e f986 	bl	8011d20 <osDelay>
	printf("Starting httpd web server\n");
 8003a14:	4839      	ldr	r0, [pc, #228]	; (8003afc <StartDefaultTask+0x270>)
 8003a16:	f01d ff81 	bl	802191c <puts>
	httpd_init();		// start the www server
 8003a1a:	f011 fef7 	bl	801580c <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8003a1e:	f002 fb81 	bl	8006124 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8003a22:	4837      	ldr	r0, [pc, #220]	; (8003b00 <StartDefaultTask+0x274>)
 8003a24:	f01d ff7a 	bl	802191c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003a28:	2208      	movs	r2, #8
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003a30:	9200      	str	r2, [sp, #0]
 8003a32:	4834      	ldr	r0, [pc, #208]	; (8003b04 <StartDefaultTask+0x278>)
 8003a34:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <StartDefaultTask+0x27c>)
 8003a36:	f003 f9f7 	bl	8006e28 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);		// fast interval DAC timer sample rate
 8003a3a:	4834      	ldr	r0, [pc, #208]	; (8003b0c <StartDefaultTask+0x280>)
 8003a3c:	f009 f89e 	bl	800cb7c <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8003a40:	f00f fd78 	bl	8013534 <xTaskGetCurrentTaskHandle>
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <StartDefaultTask+0x284>)
 8003a46:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8003a48:	f001 ffb4 	bl	80059b4 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8003a4c:	4b31      	ldr	r3, [pc, #196]	; (8003b14 <StartDefaultTask+0x288>)
	uip = locateudp();
 8003a4e:	4601      	mov	r1, r0
	main_init_done = 1; // let lptask now main has initialised
 8003a50:	2201      	movs	r2, #1
	printf("Waiting for lptask to start\n");
 8003a52:	4831      	ldr	r0, [pc, #196]	; (8003b18 <StartDefaultTask+0x28c>)
	uip = locateudp();
 8003a54:	6031      	str	r1, [r6, #0]
	main_init_done = 1; // let lptask now main has initialised
 8003a56:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8003a58:	f01d ff60 	bl	802191c <puts>
	while (lptask_init_done == 0)
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	b92b      	cbnz	r3, 8003a6c <StartDefaultTask+0x1e0>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8003a60:	2064      	movs	r0, #100	; 0x64
 8003a62:	f00e f95d 	bl	8011d20 <osDelay>
	while (lptask_init_done == 0)
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f9      	beq.n	8003a60 <StartDefaultTask+0x1d4>
	startadc();		// start the ADC DMA loop
 8003a6c:	f7fd f82a 	bl	8000ac4 <startadc>
		startudp(uip);		// should never return
 8003a70:	6830      	ldr	r0, [r6, #0]
 8003a72:	f001 ffd3 	bl	8005a1c <startudp>
		printf("UDP stream exited!!!\n\r");
 8003a76:	4829      	ldr	r0, [pc, #164]	; (8003b1c <StartDefaultTask+0x290>)
 8003a78:	f01d feb4 	bl	80217e4 <iprintf>
		rebootme();
 8003a7c:	f7fe ff92 	bl	80029a4 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8003a80:	4601      	mov	r1, r0
 8003a82:	4827      	ldr	r0, [pc, #156]	; (8003b20 <StartDefaultTask+0x294>)
 8003a84:	f01d feae 	bl	80217e4 <iprintf>
		Error_Handler();
 8003a88:	f7ff f87c 	bl	8002b84 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8003a8c:	4825      	ldr	r0, [pc, #148]	; (8003b24 <StartDefaultTask+0x298>)
 8003a8e:	f01d fea9 	bl	80217e4 <iprintf>
 8003a92:	e768      	b.n	8003966 <StartDefaultTask+0xda>
 8003a94:	08026860 	.word	0x08026860
 8003a98:	1ff0f428 	.word	0x1ff0f428
 8003a9c:	1ff0f424 	.word	0x1ff0f424
 8003aa0:	1ff0f420 	.word	0x1ff0f420
 8003aa4:	080268a8 	.word	0x080268a8
 8003aa8:	20023f28 	.word	0x20023f28
 8003aac:	080268e0 	.word	0x080268e0
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	08026908 	.word	0x08026908
 8003ab8:	2003678c 	.word	0x2003678c
 8003abc:	20022e60 	.word	0x20022e60
 8003ac0:	20023a60 	.word	0x20023a60
 8003ac4:	080029d1 	.word	0x080029d1
 8003ac8:	08002091 	.word	0x08002091
 8003acc:	20022d4c 	.word	0x20022d4c
 8003ad0:	20022df8 	.word	0x20022df8
 8003ad4:	02a62b1c 	.word	0x02a62b1c
 8003ad8:	08026950 	.word	0x08026950
 8003adc:	20023578 	.word	0x20023578
 8003ae0:	20023714 	.word	0x20023714
 8003ae4:	2002357c 	.word	0x2002357c
 8003ae8:	200231d4 	.word	0x200231d4
 8003aec:	08026980 	.word	0x08026980
 8003af0:	200231d0 	.word	0x200231d0
 8003af4:	080269ac 	.word	0x080269ac
 8003af8:	20001c00 	.word	0x20001c00
 8003afc:	080269d4 	.word	0x080269d4
 8003b00:	080269f0 	.word	0x080269f0
 8003b04:	2002349c 	.word	0x2002349c
 8003b08:	08026a40 	.word	0x08026a40
 8003b0c:	20023874 	.word	0x20023874
 8003b10:	200007b8 	.word	0x200007b8
 8003b14:	20001c04 	.word	0x20001c04
 8003b18:	08026a0c 	.word	0x08026a0c
 8003b1c:	08026a28 	.word	0x08026a28
 8003b20:	08026964 	.word	0x08026964
 8003b24:	08026930 	.word	0x08026930

08003b28 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8003b2c:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8003b2e:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8003b30:	b083      	sub	sp, #12
 8003b32:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8003b34:	d009      	beq.n	8003b4a <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8003b36:	230a      	movs	r3, #10
 8003b38:	2201      	movs	r2, #1
 8003b3a:	a901      	add	r1, sp, #4
 8003b3c:	4808      	ldr	r0, [pc, #32]	; (8003b60 <__io_putchar+0x34>)
 8003b3e:	f00b ff83 	bl	800fa48 <HAL_UART_Transmit>

	return ch;
	}
}
 8003b42:	9801      	ldr	r0, [sp, #4]
 8003b44:	b003      	add	sp, #12
 8003b46:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	4905      	ldr	r1, [pc, #20]	; (8003b64 <__io_putchar+0x38>)
 8003b50:	4803      	ldr	r0, [pc, #12]	; (8003b60 <__io_putchar+0x34>)
 8003b52:	f00b ff79 	bl	800fa48 <HAL_UART_Transmit>
}
 8003b56:	9801      	ldr	r0, [sp, #4]
 8003b58:	b003      	add	sp, #12
 8003b5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b5e:	bf00      	nop
 8003b60:	20023754 	.word	0x20023754
 8003b64:	08027140 	.word	0x08027140

08003b68 <calcepoch32>:
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8003b68:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <calcepoch32+0x40>)
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003b6c:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b70:	480e      	ldr	r0, [pc, #56]	; (8003bac <calcepoch32+0x44>)
 8003b72:	891a      	ldrh	r2, [r3, #8]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003b74:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b76:	b292      	uxth	r2, r2
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003b78:	7add      	ldrb	r5, [r3, #11]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003b7a:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003b7c:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b7e:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_hour = statuspkt.NavPvt.hour;
 8003b82:	7b1c      	ldrb	r4, [r3, #12]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003b84:	e9c0 1204 	strd	r1, r2, [r0, #16]
	now.tm_min = statuspkt.NavPvt.min;
 8003b88:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003b8a:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 8003b8c:	e9c0 4502 	strd	r4, r5, [r0, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003b90:	e9c0 3200 	strd	r3, r2, [r0]

	epochtime = mktime(getgpstime());
 8003b94:	f01c ff94 	bl	8020ac0 <mktime>
 8003b98:	4a05      	ldr	r2, [pc, #20]	; (8003bb0 <calcepoch32+0x48>)
 8003b9a:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8003b9c:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8003ba0:	e9c2 3100 	strd	r3, r1, [r2]
}
 8003ba4:	4418      	add	r0, r3
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20022d4c 	.word	0x20022d4c
 8003bac:	20023918 	.word	0x20023918
 8003bb0:	20023998 	.word	0x20023998

08003bb4 <disableNmea>:

	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8003bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003bb8:	4c21      	ldr	r4, [pc, #132]	; (8003c40 <disableNmea+0x8c>)
void disableNmea() {
 8003bba:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8003bbc:	2700      	movs	r7, #0
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003bbe:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003c44 <disableNmea+0x90>
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003bc2:	ad04      	add	r5, sp, #16
 8003bc4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8003bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bca:	462e      	mov	r6, r5
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd2:	e894 0003 	ldmia.w	r4, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003bd6:	f104 0208 	add.w	r2, r4, #8
 8003bda:	ab01      	add	r3, sp, #4
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003bdc:	e885 0003 	stmia.w	r5, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be2:	f10d 050d 	add.w	r5, sp, #13
 8003be6:	0c14      	lsrs	r4, r2, #16
 8003be8:	c303      	stmia	r3!, {r0, r1}
 8003bea:	f823 2b02 	strh.w	r2, [r3], #2
 8003bee:	701c      	strb	r4, [r3, #0]
		packet[packetSize - 1] = 0x00;
 8003bf0:	2400      	movs	r4, #0
			packet[payloadOffset + j] = messages[i][j];
 8003bf2:	7831      	ldrb	r1, [r6, #0]
 8003bf4:	7873      	ldrb	r3, [r6, #1]
 8003bf6:	f10d 0206 	add.w	r2, sp, #6
		packet[packetSize - 1] = 0x00;
 8003bfa:	46a4      	mov	ip, r4
		packet[packetSize - 2] = 0x00;
 8003bfc:	f88d 700d 	strb.w	r7, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8003c00:	f88d 700e 	strb.w	r7, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8003c04:	f88d 100a 	strb.w	r1, [sp, #10]
 8003c08:	f88d 300b 	strb.w	r3, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8003c0c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003c10:	4463      	add	r3, ip
		for (byte j = 0; j < packetSize - 4; j++) {
 8003c12:	4295      	cmp	r5, r2
			packet[packetSize - 2] += packet[2 + j];
 8003c14:	fa5f fc83 	uxtb.w	ip, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8003c18:	4464      	add	r4, ip
 8003c1a:	b2e4      	uxtb	r4, r4
		for (byte j = 0; j < packetSize - 4; j++) {
 8003c1c:	d1f6      	bne.n	8003c0c <disableNmea+0x58>
 8003c1e:	3602      	adds	r6, #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c20:	2364      	movs	r3, #100	; 0x64
 8003c22:	220b      	movs	r2, #11
 8003c24:	a901      	add	r1, sp, #4
 8003c26:	4640      	mov	r0, r8
 8003c28:	f88d c00d 	strb.w	ip, [sp, #13]
 8003c2c:	f88d 400e 	strb.w	r4, [sp, #14]
 8003c30:	f00b ff0a 	bl	800fa48 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8003c34:	454e      	cmp	r6, r9
 8003c36:	d1db      	bne.n	8003bf0 <disableNmea+0x3c>
		}

		sendPacket(packet, packetSize);
	}
}
 8003c38:	b00f      	add	sp, #60	; 0x3c
 8003c3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c3e:	bf00      	nop
 8003c40:	08025a10 	.word	0x08025a10
 8003c44:	20023610 	.word	0x20023610

08003c48 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8003c48:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <changeFrequency+0x20>)
void changeFrequency() {
 8003c4c:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8003c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c50:	466c      	mov	r4, sp
 8003c52:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c54:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8003c56:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c58:	4669      	mov	r1, sp
 8003c5a:	2364      	movs	r3, #100	; 0x64
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <changeFrequency+0x24>)
 8003c5e:	f00b fef3 	bl	800fa48 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8003c62:	b004      	add	sp, #16
 8003c64:	bd10      	pop	{r4, pc}
 8003c66:	bf00      	nop
 8003c68:	08025a60 	.word	0x08025a60
 8003c6c:	20023610 	.word	0x20023610

08003c70 <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8003c70:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8003c72:	4d09      	ldr	r5, [pc, #36]	; (8003c98 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8003c74:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8003c76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c78:	ac01      	add	r4, sp, #4
 8003c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c84:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003c86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003c8a:	222c      	movs	r2, #44	; 0x2c
 8003c8c:	a901      	add	r1, sp, #4
 8003c8e:	4803      	ldr	r0, [pc, #12]	; (8003c9c <disableUnnecessaryChannels+0x2c>)
 8003c90:	f00b feda 	bl	800fa48 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003c94:	b00d      	add	sp, #52	; 0x34
 8003c96:	bd30      	pop	{r4, r5, pc}
 8003c98:	08025a70 	.word	0x08025a70
 8003c9c:	20023610 	.word	0x20023610

08003ca0 <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 8003ca0:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <enableNavPvt+0x24>)
void enableNavPvt() {
 8003ca4:	b085      	sub	sp, #20
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003ca6:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003ca8:	ac01      	add	r4, sp, #4
 8003caa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cac:	c403      	stmia	r4!, {r0, r1}
 8003cae:	0c15      	lsrs	r5, r2, #16
 8003cb0:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003cb4:	a901      	add	r1, sp, #4
 8003cb6:	220b      	movs	r2, #11
 8003cb8:	4803      	ldr	r0, [pc, #12]	; (8003cc8 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8003cba:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003cbc:	f00b fec4 	bl	800fa48 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003cc0:	b005      	add	sp, #20
 8003cc2:	bd30      	pop	{r4, r5, pc}
 8003cc4:	08025a9c 	.word	0x08025a9c
 8003cc8:	20023610 	.word	0x20023610

08003ccc <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8003ccc:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003cce:	4d09      	ldr	r5, [pc, #36]	; (8003cf4 <enableNaTP5+0x28>)
void enableNaTP5() {
 8003cd0:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cd4:	466c      	mov	r4, sp
 8003cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003ce0:	2364      	movs	r3, #100	; 0x64
 8003ce2:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003ce4:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart6, packet, len, 100);
 8003ce8:	4669      	mov	r1, sp
 8003cea:	4803      	ldr	r0, [pc, #12]	; (8003cf8 <enableNaTP5+0x2c>)
 8003cec:	f00b feac 	bl	800fa48 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8003cf0:	b00b      	add	sp, #44	; 0x2c
 8003cf2:	bd30      	pop	{r4, r5, pc}
 8003cf4:	08025aa8 	.word	0x08025aa8
 8003cf8:	20023610 	.word	0x20023610

08003cfc <IsPacketReady>:
	}
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8003cfc:	b470      	push	{r4, r5, r6}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8003cfe:	4d1c      	ldr	r5, [pc, #112]	; (8003d70 <IsPacketReady+0x74>)
 8003d00:	78eb      	ldrb	r3, [r5, #3]
	if (p < 4)     // this looks for PVT messages
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d809      	bhi.n	8003d1a <IsPacketReady+0x1e>
			{
		// are we starting a packet?
		if (c == UBXGPS_HEADER[p]) {
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <IsPacketReady+0x78>)
 8003d08:	4619      	mov	r1, r3
 8003d0a:	5cd2      	ldrb	r2, [r2, r3]
 8003d0c:	4282      	cmp	r2, r0
 8003d0e:	d00e      	beq.n	8003d2e <IsPacketReady+0x32>
			PACKETstore[p++] = c;
		} else {
			p = 0;
 8003d10:	2300      	movs	r3, #0
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return false;
 8003d12:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8003d14:	70eb      	strb	r3, [r5, #3]
}
 8003d16:	bc70      	pop	{r4, r5, r6}
 8003d18:	4770      	bx	lr
		if (p < (2 + 4 + 84 + 2)) {
 8003d1a:	2b5b      	cmp	r3, #91	; 0x5b
 8003d1c:	d8f9      	bhi.n	8003d12 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	4e15      	ldr	r6, [pc, #84]	; (8003d78 <IsPacketReady+0x7c>)
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	54f0      	strb	r0, [r6, r3]
			if (p == (2 + 4 + 84 + 2)) {
 8003d26:	2a5c      	cmp	r2, #92	; 0x5c
 8003d28:	d006      	beq.n	8003d38 <IsPacketReady+0x3c>
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	e7f1      	b.n	8003d12 <IsPacketReady+0x16>
			PACKETstore[p++] = c;
 8003d2e:	3301      	adds	r3, #1
 8003d30:	4811      	ldr	r0, [pc, #68]	; (8003d78 <IsPacketReady+0x7c>)
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	5442      	strb	r2, [r0, r1]
 8003d36:	e7ec      	b.n	8003d12 <IsPacketReady+0x16>
				UbxGpsv.carriagePosition = p;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	1c71      	adds	r1, r6, #1
 8003d3c:	f106 0459 	add.w	r4, r6, #89	; 0x59
	unsigned char CK_B = 0;
 8003d40:	461a      	mov	r2, r3
				UbxGpsv.carriagePosition = p;
 8003d42:	70eb      	strb	r3, [r5, #3]
		CK_A = CK_A + PACKETstore[i];
 8003d44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003d48:	4403      	add	r3, r0
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8003d4a:	42a1      	cmp	r1, r4
		CK_A = CK_A + PACKETstore[i];
 8003d4c:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8003d4e:	441a      	add	r2, r3
 8003d50:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + 84); i++)		// skip sync bytes
 8003d52:	d1f7      	bne.n	8003d44 <IsPacketReady+0x48>
	return ((CK_A == PACKETstore[90]) && (CK_B == PACKETstore[91]));
 8003d54:	f896 105a 	ldrb.w	r1, [r6, #90]	; 0x5a
 8003d58:	4299      	cmp	r1, r3
 8003d5a:	d1d9      	bne.n	8003d10 <IsPacketReady+0x14>
 8003d5c:	f896 305b 	ldrb.w	r3, [r6, #91]	; 0x5b
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d1d5      	bne.n	8003d10 <IsPacketReady+0x14>
					gpsgood = 1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	4a05      	ldr	r2, [pc, #20]	; (8003d7c <IsPacketReady+0x80>)
					return true;
 8003d68:	4618      	mov	r0, r3
					gpsgood = 1;
 8003d6a:	6013      	str	r3, [r2, #0]
					return true;
 8003d6c:	e7d3      	b.n	8003d16 <IsPacketReady+0x1a>
 8003d6e:	bf00      	nop
 8003d70:	20000238 	.word	0x20000238
 8003d74:	08027240 	.word	0x08027240
 8003d78:	200239a4 	.word	0x200239a4
 8003d7c:	20001c20 	.word	0x20001c20

08003d80 <setupneo>:
		printf("0x%02x ", data);
	}
}

// init neo7
HAL_StatusTypeDef setupneo() {
 8003d80:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8003d82:	f7ff ff17 	bl	8003bb4 <disableNmea>
	 * @param Size: amount of data to be received.
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */
	stat = HAL_UART_Receive_DMA(&huart6, rxdatabuf, 1);
 8003d86:	2201      	movs	r2, #1
 8003d88:	4912      	ldr	r1, [pc, #72]	; (8003dd4 <setupneo+0x54>)
 8003d8a:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <setupneo+0x58>)
 8003d8c:	f00b f948 	bl	800f020 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8003d90:	4604      	mov	r4, r0
 8003d92:	b9d0      	cbnz	r0, 8003dca <setupneo+0x4a>
		printf("Err HAL_UART_Receive_IT usart6\n");
		return (stat);
	}

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8003d94:	4811      	ldr	r0, [pc, #68]	; (8003ddc <setupneo+0x5c>)
 8003d96:	f01d fd25 	bl	80217e4 <iprintf>

	changeFrequency();
 8003d9a:	f7ff ff55 	bl	8003c48 <changeFrequency>
	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8003d9e:	4810      	ldr	r0, [pc, #64]	; (8003de0 <setupneo+0x60>)
 8003da0:	f01d fdbc 	bl	802191c <puts>
	disableUnnecessaryChannels();
 8003da4:	f7ff ff64 	bl	8003c70 <disableUnnecessaryChannels>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8003da8:	480e      	ldr	r0, [pc, #56]	; (8003de4 <setupneo+0x64>)
 8003daa:	f01d fd1b 	bl	80217e4 <iprintf>
	enableNavPvt();
 8003dae:	f7ff ff77 	bl	8003ca0 <enableNavPvt>
	osDelay(100);
 8003db2:	2064      	movs	r0, #100	; 0x64
 8003db4:	f00d ffb4 	bl	8011d20 <osDelay>
// Enable Time pulse
	enableNaTP5();
 8003db8:	f7ff ff88 	bl	8003ccc <enableNaTP5>
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <setupneo+0x68>)
	printf("NEO: Auto-configuration is complete\n\r");
 8003dbe:	480b      	ldr	r0, [pc, #44]	; (8003dec <setupneo+0x6c>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8003dc0:	765c      	strb	r4, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8003dc2:	f01d fd0f 	bl	80217e4 <iprintf>

//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	bd10      	pop	{r4, pc}
		printf("Err HAL_UART_Receive_IT usart6\n");
 8003dca:	4809      	ldr	r0, [pc, #36]	; (8003df0 <setupneo+0x70>)
 8003dcc:	f01d fda6 	bl	802191c <puts>
}
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	bd10      	pop	{r4, pc}
 8003dd4:	20001c24 	.word	0x20001c24
 8003dd8:	20023610 	.word	0x20023610
 8003ddc:	08027164 	.word	0x08027164
 8003de0:	08027194 	.word	0x08027194
 8003de4:	080271bc 	.word	0x080271bc
 8003de8:	20022d4c 	.word	0x20022d4c
 8003dec:	080271e0 	.word	0x080271e0
 8003df0:	08027144 	.word	0x08027144

08003df4 <HAL_UART_RxCpltCallback>:
	const unsigned char offset = 6;
//	unsigned char data;
//	HAL_StatusTypeDef stat;

//	printf("UART6 RxCpl");
	if (huart->Instance == USART6) { //our UART
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_UART_RxCpltCallback+0x64>)
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <HAL_UART_RxCpltCallback+0x18>
		if (stat != HAL_OK) {
			printf("Err HAL_UART_Receive_IT usart6\n");
		}
#endif
	} else {
		if (huart->Instance == UART5) {
 8003dfc:	4a17      	ldr	r2, [pc, #92]	; (8003e5c <HAL_UART_RxCpltCallback+0x68>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d002      	beq.n	8003e08 <HAL_UART_RxCpltCallback+0x14>
			uart5_rxdone();
		} else
			printf("USART unknown uart int\n");
 8003e02:	4817      	ldr	r0, [pc, #92]	; (8003e60 <HAL_UART_RxCpltCallback+0x6c>)
 8003e04:	f01d bd8a 	b.w	802191c <puts>
			uart5_rxdone();
 8003e08:	f7fd b918 	b.w	800103c <uart5_rxdone>
		data = rxdatabuf[0];
 8003e0c:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <HAL_UART_RxCpltCallback+0x70>)
		flag = 1;
 8003e0e:	2201      	movs	r2, #1
		data = rxdatabuf[0];
 8003e10:	4915      	ldr	r1, [pc, #84]	; (8003e68 <HAL_UART_RxCpltCallback+0x74>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003e12:	b510      	push	{r4, lr}
		data = rxdatabuf[0];
 8003e14:	7818      	ldrb	r0, [r3, #0]
		flag = 1;
 8003e16:	4b15      	ldr	r3, [pc, #84]	; (8003e6c <HAL_UART_RxCpltCallback+0x78>)
		data = rxdatabuf[0];
 8003e18:	7008      	strb	r0, [r1, #0]
		flag = 1;
 8003e1a:	601a      	str	r2, [r3, #0]
		if (IsPacketReady(data)) {
 8003e1c:	f7ff ff6e 	bl	8003cfc <IsPacketReady>
 8003e20:	b180      	cbz	r0, 8003e44 <HAL_UART_RxCpltCallback+0x50>
 8003e22:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <HAL_UART_RxCpltCallback+0x7c>)
 8003e24:	4a13      	ldr	r2, [pc, #76]	; (8003e74 <HAL_UART_RxCpltCallback+0x80>)
 8003e26:	f103 004e 	add.w	r0, r3, #78	; 0x4e
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003e2a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003e2e:	4283      	cmp	r3, r0
				*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8003e30:	f802 1f01 	strb.w	r1, [r2, #1]!
			for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8003e34:	d1f9      	bne.n	8003e2a <HAL_UART_RxCpltCallback+0x36>
			if (statuspkt.NavPvt.flags & 1) { // locked
 8003e36:	4c10      	ldr	r4, [pc, #64]	; (8003e78 <HAL_UART_RxCpltCallback+0x84>)
 8003e38:	7e63      	ldrb	r3, [r4, #25]
 8003e3a:	f013 0301 	ands.w	r3, r3, #1
 8003e3e:	d102      	bne.n	8003e46 <HAL_UART_RxCpltCallback+0x52>
				gpslocked = 0;
 8003e40:	4a0e      	ldr	r2, [pc, #56]	; (8003e7c <HAL_UART_RxCpltCallback+0x88>)
 8003e42:	7013      	strb	r3, [r2, #0]
	}
}
 8003e44:	bd10      	pop	{r4, pc}
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8003e46:	f7ff fe8f 	bl	8003b68 <calcepoch32>
				gpslocked = 1;
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_UART_RxCpltCallback+0x88>)
 8003e4c:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8003e4e:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				gpslocked = 1;
 8003e52:	701a      	strb	r2, [r3, #0]
}
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	40011400 	.word	0x40011400
 8003e5c:	40005000 	.word	0x40005000
 8003e60:	08027208 	.word	0x08027208
 8003e64:	20001c24 	.word	0x20001c24
 8003e68:	200239a0 	.word	0x200239a0
 8003e6c:	20001c1c 	.word	0x20001c1c
 8003e70:	200239a9 	.word	0x200239a9
 8003e74:	20022d4f 	.word	0x20022d4f
 8003e78:	20022d4c 	.word	0x20022d4c
 8003e7c:	20001c65 	.word	0x20001c65

08003e80 <HAL_UART_ErrorCallback>:
	HAL_StatusTypeDef stat;
	uint8_t ch;
	volatile uint32_t reg;

	// whatever the error try to clear it blindly
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003e80:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003e82:	2208      	movs	r2, #8
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == USART6) { 		// GPS  UART
 8003e84:	4917      	ldr	r1, [pc, #92]	; (8003ee4 <HAL_UART_ErrorCallback+0x64>)
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003e86:	b470      	push	{r4, r5, r6}
	if (huart->Instance == USART6) { 		// GPS  UART
 8003e88:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003e8a:	f04f 0602 	mov.w	r6, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003e8e:	f04f 0504 	mov.w	r5, #4
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003e92:	f04f 0401 	mov.w	r4, #1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8003e96:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8003e98:	621d      	str	r5, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8003e9a:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8003e9c:	621c      	str	r4, [r3, #32]
	if (huart->Instance == USART6) { 		// GPS  UART
 8003e9e:	d01c      	beq.n	8003eda <HAL_UART_ErrorCallback+0x5a>
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8003ea0:	4911      	ldr	r1, [pc, #68]	; (8003ee8 <HAL_UART_ErrorCallback+0x68>)
 8003ea2:	428b      	cmp	r3, r1
 8003ea4:	d001      	beq.n	8003eaa <HAL_UART_ErrorCallback+0x2a>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8003ea6:	bc70      	pop	{r4, r5, r6}
 8003ea8:	4770      	bx	lr
		if (!(lcd_initflag)) {
 8003eaa:	4910      	ldr	r1, [pc, #64]	; (8003eec <HAL_UART_ErrorCallback+0x6c>)
 8003eac:	6809      	ldr	r1, [r1, #0]
 8003eae:	2900      	cmp	r1, #0
 8003eb0:	d1f9      	bne.n	8003ea6 <HAL_UART_ErrorCallback+0x26>
		lcduart_error = huart->ErrorCode;
 8003eb2:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003eb4:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <HAL_UART_ErrorCallback+0x70>)
 8003eb6:	6008      	str	r0, [r1, #0]
		if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8003eb8:	69d9      	ldr	r1, [r3, #28]
 8003eba:	0708      	lsls	r0, r1, #28
 8003ebc:	d500      	bpl.n	8003ec0 <HAL_UART_ErrorCallback+0x40>
			UART5->ICR = USART_ICR_ORECF;
 8003ebe:	621a      	str	r2, [r3, #32]
		if (UART5->ISR & USART_ISR_NE) // Noise Error
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_UART_ErrorCallback+0x68>)
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	0751      	lsls	r1, r2, #29
 8003ec6:	d501      	bpl.n	8003ecc <HAL_UART_ErrorCallback+0x4c>
			UART5->ICR = USART_ICR_NCF;
 8003ec8:	2204      	movs	r2, #4
 8003eca:	621a      	str	r2, [r3, #32]
		if (UART5->ISR & USART_ISR_FE) // Framing Error
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_UART_ErrorCallback+0x68>)
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	0792      	lsls	r2, r2, #30
 8003ed2:	d5e8      	bpl.n	8003ea6 <HAL_UART_ErrorCallback+0x26>
			UART5->ICR = USART_ICR_FECF;
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	621a      	str	r2, [r3, #32]
 8003ed8:	e7e5      	b.n	8003ea6 <HAL_UART_ErrorCallback+0x26>
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8003eda:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 8003edc:	4805      	ldr	r0, [pc, #20]	; (8003ef4 <HAL_UART_ErrorCallback+0x74>)
}
 8003ede:	bc70      	pop	{r4, r5, r6}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8003ee0:	f01d bc80 	b.w	80217e4 <iprintf>
 8003ee4:	40011400 	.word	0x40011400
 8003ee8:	40005000 	.word	0x40005000
 8003eec:	20001560 	.word	0x20001560
 8003ef0:	200015f0 	.word	0x200015f0
 8003ef4:	08027220 	.word	0x08027220

08003ef8 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 8003ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003efa:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8003efc:	4a1b      	ldr	r2, [pc, #108]	; (8003f6c <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003efe:	4f1c      	ldr	r7, [pc, #112]	; (8003f70 <cycleleds+0x78>)
 8003f00:	ac01      	add	r4, sp, #4
 8003f02:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8003f06:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f08:	4623      	mov	r3, r4
 8003f0a:	4626      	mov	r6, r4
 8003f0c:	c303      	stmia	r3!, {r0, r1}
 8003f0e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003f10:	f836 1b02 	ldrh.w	r1, [r6], #2
 8003f14:	2200      	movs	r2, #0
 8003f16:	4638      	mov	r0, r7
 8003f18:	f005 fb90 	bl	800963c <HAL_GPIO_WritePin>
		osDelay(140);
 8003f1c:	208c      	movs	r0, #140	; 0x8c
 8003f1e:	f00d feff 	bl	8011d20 <osDelay>
	for (i = 0; i < 5; i++) {
 8003f22:	42ae      	cmp	r6, r5
 8003f24:	d1f4      	bne.n	8003f10 <cycleleds+0x18>
	}
	osDelay(600);
 8003f26:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003f2a:	4626      	mov	r6, r4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8003f2c:	4f10      	ldr	r7, [pc, #64]	; (8003f70 <cycleleds+0x78>)
	osDelay(600);
 8003f2e:	f00d fef7 	bl	8011d20 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8003f32:	f836 1b02 	ldrh.w	r1, [r6], #2
 8003f36:	2201      	movs	r2, #1
 8003f38:	4638      	mov	r0, r7
 8003f3a:	f005 fb7f 	bl	800963c <HAL_GPIO_WritePin>
		osDelay(140);
 8003f3e:	208c      	movs	r0, #140	; 0x8c
 8003f40:	f00d feee 	bl	8011d20 <osDelay>
	for (i = 0; i < 5; i++) {
 8003f44:	42ae      	cmp	r6, r5
 8003f46:	d1f4      	bne.n	8003f32 <cycleleds+0x3a>
	}
	osDelay(500);
 8003f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003f4c:	4e08      	ldr	r6, [pc, #32]	; (8003f70 <cycleleds+0x78>)
	osDelay(500);
 8003f4e:	f00d fee7 	bl	8011d20 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8003f52:	f834 1b02 	ldrh.w	r1, [r4], #2
 8003f56:	2200      	movs	r2, #0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f005 fb6f 	bl	800963c <HAL_GPIO_WritePin>
		osDelay(140);
 8003f5e:	208c      	movs	r0, #140	; 0x8c
 8003f60:	f00d fede 	bl	8011d20 <osDelay>
	for (i = 0; i < 5; i++) {
 8003f64:	42ac      	cmp	r4, r5
 8003f66:	d1f4      	bne.n	8003f52 <cycleleds+0x5a>
	}
}
 8003f68:	b005      	add	sp, #20
 8003f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6c:	08025ad0 	.word	0x08025ad0
 8003f70:	40020c00 	.word	0x40020c00

08003f74 <setpgagain>:
//////////////////////////////////////////////
//
// Set the Programmable Gain Amplifier GAIN
//
//////////////////////////////////////////////
void setpgagain(int gain) {
 8003f74:	b510      	push	{r4, lr}
 8003f76:	4604      	mov	r4, r0
	osDelay(5);
 8003f78:	2005      	movs	r0, #5
 8003f7a:	f00d fed1 	bl	8011d20 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003f7e:	2201      	movs	r2, #1
 8003f80:	2104      	movs	r1, #4
 8003f82:	4814      	ldr	r0, [pc, #80]	; (8003fd4 <setpgagain+0x60>)
 8003f84:	f005 fb5a 	bl	800963c <HAL_GPIO_WritePin>
	osDelay(5);
 8003f88:	2005      	movs	r0, #5
 8003f8a:	f00d fec9 	bl	8011d20 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);
	pgagain = 0x4000 | (gain & 0x07);
 8003f8e:	f004 0407 	and.w	r4, r4, #7
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003f92:	2200      	movs	r2, #0
 8003f94:	2104      	movs	r1, #4
 8003f96:	480f      	ldr	r0, [pc, #60]	; (8003fd4 <setpgagain+0x60>)
	pgagain = 0x4000 | (gain & 0x07);
 8003f98:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8003f9c:	f005 fb4e 	bl	800963c <HAL_GPIO_WritePin>
	osDelay(5);
 8003fa0:	2005      	movs	r0, #5
 8003fa2:	f00d febd 	bl	8011d20 <osDelay>
	pgagain = 0x4000 | (gain & 0x07);
 8003fa6:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <setpgagain+0x64>)
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fac:	2201      	movs	r2, #1
 8003fae:	480b      	ldr	r0, [pc, #44]	; (8003fdc <setpgagain+0x68>)
	pgagain = 0x4000 | (gain & 0x07);
 8003fb0:	800c      	strh	r4, [r1, #0]
	if (HAL_SPI_Transmit(&hspi2, &pgagain, 1, 1000) != HAL_OK) {	// select gain
 8003fb2:	f008 f96b 	bl	800c28c <HAL_SPI_Transmit>
 8003fb6:	b948      	cbnz	r0, 8003fcc <setpgagain+0x58>
		printf("setpgagain: SPI Error\n");
	}
	osDelay(5);
 8003fb8:	2005      	movs	r0, #5
 8003fba:	f00d feb1 	bl	8011d20 <osDelay>
//printf("PGA Gain set to %d\n",pgagain & 7);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	2104      	movs	r1, #4
 8003fc2:	4804      	ldr	r0, [pc, #16]	; (8003fd4 <setpgagain+0x60>)
}
 8003fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003fc8:	f005 bb38 	b.w	800963c <HAL_GPIO_WritePin>
		printf("setpgagain: SPI Error\n");
 8003fcc:	4804      	ldr	r0, [pc, #16]	; (8003fe0 <setpgagain+0x6c>)
 8003fce:	f01d fca5 	bl	802191c <puts>
 8003fd2:	e7f1      	b.n	8003fb8 <setpgagain+0x44>
 8003fd4:	40021800 	.word	0x40021800
 8003fd8:	20000246 	.word	0x20000246
 8003fdc:	20022f14 	.word	0x20022f14
 8003fe0:	08027244 	.word	0x08027244

08003fe4 <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 8003fe4:	b510      	push	{r4, lr}
	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003fe6:	2201      	movs	r2, #1
int initpga() {
 8003fe8:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8003fea:	2104      	movs	r1, #4
 8003fec:	482b      	ldr	r0, [pc, #172]	; (800409c <initpga+0xb8>)
 8003fee:	f005 fb25 	bl	800963c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2104      	movs	r1, #4
 8003ff6:	4829      	ldr	r0, [pc, #164]	; (800409c <initpga+0xb8>)
 8003ff8:	f005 fb20 	bl	800963c <HAL_GPIO_WritePin>
	osDelay(50);
 8003ffc:	2032      	movs	r0, #50	; 0x32
 8003ffe:	f00d fe8f 	bl	8011d20 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004002:	2201      	movs	r2, #1
 8004004:	2104      	movs	r1, #4
 8004006:	4825      	ldr	r0, [pc, #148]	; (800409c <initpga+0xb8>)
 8004008:	f005 fb18 	bl	800963c <HAL_GPIO_WritePin>
	osDelay(50);
 800400c:	2032      	movs	r0, #50	; 0x32
 800400e:	f00d fe87 	bl	8011d20 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 8004012:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004014:	2200      	movs	r2, #0
 8004016:	2104      	movs	r1, #4
 8004018:	4820      	ldr	r0, [pc, #128]	; (800409c <initpga+0xb8>)
 800401a:	f005 fb0f 	bl	800963c <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000) != HAL_OK) {	// nop cmd
 800401e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004022:	2201      	movs	r2, #1
 8004024:	a901      	add	r1, sp, #4
 8004026:	481e      	ldr	r0, [pc, #120]	; (80040a0 <initpga+0xbc>)
 8004028:	f8ad 4004 	strh.w	r4, [sp, #4]
 800402c:	f008 f92e 	bl	800c28c <HAL_SPI_Transmit>
 8004030:	bb70      	cbnz	r0, 8004090 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8004032:	9000      	str	r0, [sp, #0]
 8004034:	9b00      	ldr	r3, [sp, #0]
 8004036:	2b31      	cmp	r3, #49	; 0x31
 8004038:	dc05      	bgt.n	8004046 <initpga+0x62>
 800403a:	9b00      	ldr	r3, [sp, #0]
 800403c:	3301      	adds	r3, #1
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	9b00      	ldr	r3, [sp, #0]
 8004042:	2b31      	cmp	r3, #49	; 0x31
 8004044:	ddf9      	ble.n	800403a <initpga+0x56>
			;
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8004046:	2201      	movs	r2, #1
 8004048:	2104      	movs	r1, #4
 800404a:	4814      	ldr	r0, [pc, #80]	; (800409c <initpga+0xb8>)
 800404c:	f005 faf6 	bl	800963c <HAL_GPIO_WritePin>
	osDelay(50);
 8004050:	2032      	movs	r0, #50	; 0x32
 8004052:	f00d fe65 	bl	8011d20 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004056:	2200      	movs	r2, #0
 8004058:	2104      	movs	r1, #4
 800405a:	4810      	ldr	r0, [pc, #64]	; (800409c <initpga+0xb8>)
 800405c:	f005 faee 	bl	800963c <HAL_GPIO_WritePin>
	//osDelay(5);
	if (HAL_SPI_Transmit(&hspi2, &spicmdchan[0], 1, 1000) != HAL_OK) {	// set the channel to ch1
 8004060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004064:	2201      	movs	r2, #1
 8004066:	490f      	ldr	r1, [pc, #60]	; (80040a4 <initpga+0xc0>)
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <initpga+0xbc>)
 800406a:	f008 f90f 	bl	800c28c <HAL_SPI_Transmit>
 800406e:	b978      	cbnz	r0, 8004090 <initpga+0xac>
		printf("initpga: SPI error 2\n\r");
		return (1);
	}
	{
		volatile int dly;
		for (dly = 0; dly < 50; dly++)
 8004070:	9001      	str	r0, [sp, #4]
 8004072:	9b01      	ldr	r3, [sp, #4]
 8004074:	2b31      	cmp	r3, #49	; 0x31
 8004076:	dc05      	bgt.n	8004084 <initpga+0xa0>
 8004078:	9b01      	ldr	r3, [sp, #4]
 800407a:	3301      	adds	r3, #1
 800407c:	9301      	str	r3, [sp, #4]
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	2b31      	cmp	r3, #49	; 0x31
 8004082:	ddf9      	ble.n	8004078 <initpga+0x94>
			;
	}
	setpgagain(1);			// 1 == gain of 2x
 8004084:	2001      	movs	r0, #1
 8004086:	f7ff ff75 	bl	8003f74 <setpgagain>
	return (0);
 800408a:	2000      	movs	r0, #0
}
 800408c:	b002      	add	sp, #8
 800408e:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2\n\r");
 8004090:	4805      	ldr	r0, [pc, #20]	; (80040a8 <initpga+0xc4>)
 8004092:	f01d fba7 	bl	80217e4 <iprintf>
		return (1);
 8004096:	2001      	movs	r0, #1
}
 8004098:	b002      	add	sp, #8
 800409a:	bd10      	pop	{r4, pc}
 800409c:	40021800 	.word	0x40021800
 80040a0:	20022f14 	.word	0x20022f14
 80040a4:	080274ec 	.word	0x080274ec
 80040a8:	0802725c 	.word	0x0802725c

080040ac <bumppga>:

// bump the pga by one step
int bumppga(int i) {
	volatile int gain;

	gain = pgagain & 0x7;
 80040ac:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <bumppga+0x44>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
int bumppga(int i) {
 80040b0:	b510      	push	{r4, lr}
	gain = pgagain & 0x7;
 80040b2:	f003 0307 	and.w	r3, r3, #7
int bumppga(int i) {
 80040b6:	b082      	sub	sp, #8
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 80040b8:	1e04      	subs	r4, r0, #0
	gain = pgagain & 0x7;
 80040ba:	9301      	str	r3, [sp, #4]
	if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	da04      	bge.n	80040ca <bumppga+0x1e>
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	bfd4      	ite	le
 80040c4:	2000      	movle	r0, #0
 80040c6:	2001      	movgt	r0, #1
 80040c8:	b138      	cbz	r0, 80040da <bumppga+0x2e>
 80040ca:	2c00      	cmp	r4, #0
 80040cc:	9801      	ldr	r0, [sp, #4]
 80040ce:	dd06      	ble.n	80040de <bumppga+0x32>
 80040d0:	2806      	cmp	r0, #6
 80040d2:	bfcc      	ite	gt
 80040d4:	2000      	movgt	r0, #0
 80040d6:	2001      	movle	r0, #1
 80040d8:	b908      	cbnz	r0, 80040de <bumppga+0x32>
		gain = gain + i;
		setpgagain(gain);
		return(i);
	}
return(0);
}
 80040da:	b002      	add	sp, #8
 80040dc:	bd10      	pop	{r4, pc}
		gain = gain + i;
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	4423      	add	r3, r4
 80040e2:	9301      	str	r3, [sp, #4]
		setpgagain(gain);
 80040e4:	9801      	ldr	r0, [sp, #4]
 80040e6:	f7ff ff45 	bl	8003f74 <setpgagain>
		return(i);
 80040ea:	4620      	mov	r0, r4
}
 80040ec:	b002      	add	sp, #8
 80040ee:	bd10      	pop	{r4, pc}
 80040f0:	20000246 	.word	0x20000246

080040f4 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 80040f4:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80040f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 80040fa:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 80040fc:	2301      	movs	r3, #1
 80040fe:	4a08      	ldr	r2, [pc, #32]	; (8004120 <initdualmux+0x2c>)
 8004100:	9000      	str	r0, [sp, #0]
 8004102:	2188      	movs	r1, #136	; 0x88
 8004104:	4807      	ldr	r0, [pc, #28]	; (8004124 <initdualmux+0x30>)
 8004106:	f005 fd0b 	bl	8009b20 <HAL_I2C_Master_Transmit>
 800410a:	b910      	cbnz	r0, 8004112 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 800410c:	b003      	add	sp, #12
 800410e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8004112:	4805      	ldr	r0, [pc, #20]	; (8004128 <initdualmux+0x34>)
}
 8004114:	b003      	add	sp, #12
 8004116:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 800411a:	f01d bb63 	b.w	80217e4 <iprintf>
 800411e:	bf00      	nop
 8004120:	20000244 	.word	0x20000244
 8004124:	20023100 	.word	0x20023100
 8004128:	08027274 	.word	0x08027274
 800412c:	00000000 	.word	0x00000000

08004130 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8004130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004134:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004138:	2512      	movs	r5, #18
 800413a:	2302      	movs	r3, #2
 800413c:	21c0      	movs	r1, #192	; 0xc0
 800413e:	487c      	ldr	r0, [pc, #496]	; (8004330 <getpressure115+0x200>)
HAL_StatusTypeDef getpressure115(void) {
 8004140:	ed2d 8b02 	vpush	{d8}
 8004144:	b090      	sub	sp, #64	; 0x40
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004146:	aa05      	add	r2, sp, #20
 8004148:	9400      	str	r4, [sp, #0]
 800414a:	f8ad 5014 	strh.w	r5, [sp, #20]
 800414e:	f005 fce7 	bl	8009b20 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 8004152:	4607      	mov	r7, r0
 8004154:	2800      	cmp	r0, #0
 8004156:	f040 80c9 	bne.w	80042ec <getpressure115+0x1bc>
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800415a:	46a0      	mov	r8, r4
	for (i = 0; i < 4; i++) {
 800415c:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 800415e:	2004      	movs	r0, #4
 8004160:	ae0e      	add	r6, sp, #56	; 0x38
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 8004162:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8004330 <getpressure115+0x200>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004166:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 800435c <getpressure115+0x22c>
	osDelay(4);		// conversion time max 3mS
 800416a:	f00d fdd9 	bl	8011d20 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);		// rd pressure and temp regs
 800416e:	2301      	movs	r3, #1
 8004170:	9600      	str	r6, [sp, #0]
 8004172:	b2a2      	uxth	r2, r4
 8004174:	21c1      	movs	r1, #193	; 0xc1
 8004176:	4648      	mov	r0, r9
 8004178:	f8cd 8008 	str.w	r8, [sp, #8]
 800417c:	9301      	str	r3, [sp, #4]
 800417e:	3601      	adds	r6, #1
 8004180:	f005 fd80 	bl	8009c84 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004184:	4605      	mov	r5, r0
 8004186:	2800      	cmp	r0, #0
 8004188:	f040 80a2 	bne.w	80042d0 <getpressure115+0x1a0>
	for (i = 0; i < 4; i++) {
 800418c:	3401      	adds	r4, #1
 800418e:	2c04      	cmp	r4, #4
 8004190:	d1ed      	bne.n	800416e <getpressure115+0x3e>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 8004192:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 8004196:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 8004198:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800419c:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tr = (data[2] * 256 + data[3]) >> 6;
 80041a0:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 80041a4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 80041a8:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	tempfrac = tempfrac * 100;	// now 10,000
 80041ac:	4d61      	ldr	r5, [pc, #388]	; (8004334 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 80041ae:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80041b2:	4961      	ldr	r1, [pc, #388]	; (8004338 <getpressure115+0x208>)
	t = tr;
 80041b4:	099c      	lsrs	r4, r3, #6
	pr = (data[0] * 256 + data[1]) >> 6;
 80041b6:	0992      	lsrs	r2, r2, #6
	t = tr;
 80041b8:	ee06 4a10 	vmov	s12, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80041bc:	119c      	asrs	r4, r3, #6
	p = pr;
 80041be:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80041c2:	4a5e      	ldr	r2, [pc, #376]	; (800433c <getpressure115+0x20c>)
	t = tr;
 80041c4:	eeb8 6b46 	vcvt.f64.u32	d6, s12
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80041c8:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <getpressure115+0x210>)
	p = pr;
 80041ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 80041ce:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 80041d2:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80041d6:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80041da:	ed91 4b00 	vldr	d4, [r1]
 80041de:	ed92 5b00 	vldr	d5, [r2]
 80041e2:	ed9d 1b08 	vldr	d1, [sp, #32]
 80041e6:	ed93 7b00 	vldr	d7, [r3]
 80041ea:	eea4 5b06 	vfma.f64	d5, d4, d6
 80041ee:	4b55      	ldr	r3, [pc, #340]	; (8004344 <getpressure115+0x214>)
 80041f0:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 80041f4:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80041f8:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8004300 <getpressure115+0x1d0>
 80041fc:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004308 <getpressure115+0x1d8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004200:	eea5 7b01 	vfma.f64	d7, d5, d1
 8004204:	eea2 7b03 	vfma.f64	d7, d2, d3
 8004208:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800420c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004210:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004214:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 8004218:	ed9d 0b08 	vldr	d0, [sp, #32]
 800421c:	f01d fbce 	bl	80219bc <modf>
	t = tr * -0.1706 + 112.27; //C
 8004220:	ee07 4a90 	vmov	s15, r4
	tempfrac = tempfrac * 100;	// now 10,000
 8004224:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8004226:	4b48      	ldr	r3, [pc, #288]	; (8004348 <getpressure115+0x218>)
	t = tr * -0.1706 + 112.27; //C
 8004228:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800422c:	4847      	ldr	r0, [pc, #284]	; (800434c <getpressure115+0x21c>)
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800422e:	4c48      	ldr	r4, [pc, #288]	; (8004350 <getpressure115+0x220>)
	pressure = (uint32_t) n;
 8004230:	4948      	ldr	r1, [pc, #288]	; (8004354 <getpressure115+0x224>)
	t = tr * -0.1706 + 112.27; //C
 8004232:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8004310 <getpressure115+0x1e0>
 8004236:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8004318 <getpressure115+0x1e8>
	ffrac = modf(p, &n);
 800423a:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 800423e:	ed9d 4b0c 	vldr	d4, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 8004242:	eea7 5b06 	vfma.f64	d5, d7, d6
	pressure = (uint32_t) n;
 8004246:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800424a:	ed9d 3b06 	vldr	d3, [sp, #24]
 800424e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004320 <getpressure115+0x1f0>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004252:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8004328 <getpressure115+0x1f8>
	pressure = (uint32_t) n;
 8004256:	ed81 4a00 	vstr	s8, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800425a:	ee23 3b00 	vmul.f64	d3, d3, d0
	t = tr * -0.1706 + 112.27; //C
 800425e:	ed8d 5b0a 	vstr	d5, [sp, #40]	; 0x28
	temperature = t;
 8004262:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 8004266:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800426a:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 800426e:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8004272:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004276:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 800427a:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800427e:	ed84 3a00 	vstr	s6, [r4]
	tempfrac = (t - temperature) * 100;
 8004282:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 8004286:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800428a:	feb8 6b46 	vrinta.f64	d6, d6
 800428e:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 8004292:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004296:	ee16 3a90 	vmov	r3, s13
 800429a:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 800429e:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80042a2:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 80042a6:	ee15 6a10 	vmov	r6, s10
 80042aa:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80042ae:	feb8 7b47 	vrinta.f64	d7, d7
 80042b2:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 80042b6:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80042b8:	ee17 2a10 	vmov	r2, s14
 80042bc:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80042c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 80042c4:	4638      	mov	r0, r7
 80042c6:	b010      	add	sp, #64	; 0x40
 80042c8:	ecbd 8b02 	vpop	{d8}
 80042cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80042d0:	4650      	mov	r0, sl
 80042d2:	4629      	mov	r1, r5
 80042d4:	f01d fa86 	bl	80217e4 <iprintf>
			if (i == 3)
 80042d8:	2c03      	cmp	r4, #3
 80042da:	f47f af57 	bne.w	800418c <getpressure115+0x5c>
 80042de:	462f      	mov	r7, r5
}
 80042e0:	4638      	mov	r0, r7
 80042e2:	b010      	add	sp, #64	; 0x40
 80042e4:	ecbd 8b02 	vpop	{d8}
 80042e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 80042ec:	481a      	ldr	r0, [pc, #104]	; (8004358 <getpressure115+0x228>)
 80042ee:	f01d fa79 	bl	80217e4 <iprintf>
}
 80042f2:	4638      	mov	r0, r7
 80042f4:	b010      	add	sp, #64	; 0x40
 80042f6:	ecbd 8b02 	vpop	{d8}
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	bf00      	nop
 8004300:	04411044 	.word	0x04411044
 8004304:	3fb04411 	.word	0x3fb04411
 8004308:	00000000 	.word	0x00000000
 800430c:	40490000 	.word	0x40490000
 8004310:	86594af5 	.word	0x86594af5
 8004314:	bfc5d638 	.word	0xbfc5d638
 8004318:	ae147ae1 	.word	0xae147ae1
 800431c:	405c1147 	.word	0x405c1147
 8004320:	00000000 	.word	0x00000000
 8004324:	40590000 	.word	0x40590000
 8004328:	00000000 	.word	0x00000000
 800432c:	40af4000 	.word	0x40af4000
 8004330:	20023100 	.word	0x20023100
 8004334:	20023a00 	.word	0x20023a00
 8004338:	20001c48 	.word	0x20001c48
 800433c:	20001c38 	.word	0x20001c38
 8004340:	20001c30 	.word	0x20001c30
 8004344:	20001c40 	.word	0x20001c40
 8004348:	20023a04 	.word	0x20023a04
 800434c:	20022d4c 	.word	0x20022d4c
 8004350:	20023a0c 	.word	0x20023a0c
 8004354:	20023a08 	.word	0x20023a08
 8004358:	08027290 	.word	0x08027290
 800435c:	080272b4 	.word	0x080272b4

08004360 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8004360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004364:	b086      	sub	sp, #24
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8004366:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 800436a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800436e:	2701      	movs	r7, #1
 8004370:	f10d 0a18 	add.w	sl, sp, #24
		data[i] = 0x5A;
 8004374:	ac04      	add	r4, sp, #16
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004376:	4e33      	ldr	r6, [pc, #204]	; (8004444 <initpressure115+0xe4>)
 8004378:	f1ca 090c 	rsb	r9, sl, #12
		data[i] = 0x5A;
 800437c:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8004380:	eb09 0204 	add.w	r2, r9, r4
 8004384:	2301      	movs	r3, #1
 8004386:	9400      	str	r4, [sp, #0]
 8004388:	21c0      	movs	r1, #192	; 0xc0
 800438a:	b292      	uxth	r2, r2
 800438c:	4630      	mov	r0, r6
 800438e:	441c      	add	r4, r3
 8004390:	e9cd 7801 	strd	r7, r8, [sp, #4]
 8004394:	f005 fc76 	bl	8009c84 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004398:	4605      	mov	r5, r0
 800439a:	2800      	cmp	r0, #0
 800439c:	d142      	bne.n	8004424 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 800439e:	4554      	cmp	r4, sl
 80043a0:	d1ee      	bne.n	8004380 <initpressure115+0x20>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 80043a2:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80043a6:	2c5a      	cmp	r4, #90	; 0x5a
 80043a8:	d044      	beq.n	8004434 <initpressure115+0xd4>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 80043aa:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 80043ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 80043b2:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 80043b6:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 80043ba:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 80043be:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 80043c2:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 80043c6:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 80043ca:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 80043ce:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 80043d0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 80043d4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 80043d8:	ee04 0a10 	vmov	s8, r0
 80043dc:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 80043e0:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 80043e2:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 80043e6:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 80043e8:	4817      	ldr	r0, [pc, #92]	; (8004448 <initpressure115+0xe8>)
	b2 = (double) b2co / 16384;
 80043ea:	ee05 1a10 	vmov	s10, r1
 80043ee:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 80043f2:	4916      	ldr	r1, [pc, #88]	; (800444c <initpressure115+0xec>)
	c12 /= (double) 4194304.0;
 80043f4:	ee06 2a10 	vmov	s12, r2
 80043f8:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <initpressure115+0xf0>)
	a0 = (double) a0co / 8;
 80043fe:	ee07 3a10 	vmov	s14, r3
 8004402:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8004406:	4b13      	ldr	r3, [pc, #76]	; (8004454 <initpressure115+0xf4>)
	b1 = (double) b1co / 8192;
 8004408:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 800440c:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 8004410:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 8004414:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8004418:	f7ff fe8a 	bl	8004130 <getpressure115>
	return (HAL_OK);
}
 800441c:	4628      	mov	r0, r5
 800441e:	b006      	add	sp, #24
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004424:	4601      	mov	r1, r0
 8004426:	480c      	ldr	r0, [pc, #48]	; (8004458 <initpressure115+0xf8>)
 8004428:	f01d f9dc 	bl	80217e4 <iprintf>
}
 800442c:	4628      	mov	r0, r5
 800442e:	b006      	add	sp, #24
 8004430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004434:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004436:	4809      	ldr	r0, [pc, #36]	; (800445c <initpressure115+0xfc>)
 8004438:	f01d f9d4 	bl	80217e4 <iprintf>
}
 800443c:	4628      	mov	r0, r5
 800443e:	b006      	add	sp, #24
 8004440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004444:	20023100 	.word	0x20023100
 8004448:	20001c38 	.word	0x20001c38
 800444c:	20001c40 	.word	0x20001c40
 8004450:	20001c48 	.word	0x20001c48
 8004454:	20001c30 	.word	0x20001c30
 8004458:	080272d8 	.word	0x080272d8
 800445c:	08027308 	.word	0x08027308

08004460 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8004460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8004466:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8004468:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 800446a:	4f47      	ldr	r7, [pc, #284]	; (8004588 <getpressure3115+0x128>)
 800446c:	ae08      	add	r6, sp, #32
	data[0] = 0x55;
 800446e:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8004472:	200a      	movs	r0, #10
 8004474:	f00d fc54 	bl	8011d20 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800447c:	2301      	movs	r3, #1
 800447e:	21c0      	movs	r1, #192	; 0xc0
 8004480:	9202      	str	r2, [sp, #8]
 8004482:	2200      	movs	r2, #0
 8004484:	4841      	ldr	r0, [pc, #260]	; (800458c <getpressure3115+0x12c>)
 8004486:	9600      	str	r6, [sp, #0]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	f005 fbfb 	bl	8009c84 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800448e:	4604      	mov	r4, r0
 8004490:	2800      	cmp	r0, #0
 8004492:	d167      	bne.n	8004564 <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8004494:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8004498:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 800449a:	071b      	lsls	r3, r3, #28
 800449c:	d401      	bmi.n	80044a2 <getpressure3115+0x42>
	for (trys = 0; trys < 4; trys++) {
 800449e:	2d04      	cmp	r5, #4
 80044a0:	d1e7      	bne.n	8004472 <getpressure3115+0x12>
 80044a2:	2501      	movs	r5, #1
 80044a4:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80044a6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 80044aa:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800458c <getpressure3115+0x12c>
 80044ae:	46a8      	mov	r8, r5
 80044b0:	2301      	movs	r3, #1
 80044b2:	b2aa      	uxth	r2, r5
 80044b4:	21c0      	movs	r1, #192	; 0xc0
 80044b6:	4648      	mov	r0, r9
 80044b8:	f8cd a008 	str.w	sl, [sp, #8]
	for (i = 1; i < 6; i++) {
 80044bc:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80044be:	f8cd 8004 	str.w	r8, [sp, #4]
 80044c2:	9600      	str	r6, [sp, #0]
 80044c4:	f005 fbde 	bl	8009c84 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80044c8:	4604      	mov	r4, r0
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d154      	bne.n	8004578 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 80044ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 80044d2:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 80044d4:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 80044d8:	d1ea      	bne.n	80044b0 <getpressure3115+0x50>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80044da:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
	ifrac = (p % 4000);		// fractions of a kilopascal
 80044de:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80044e2:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 80044e6:	f24f 4124 	movw	r1, #62500	; 0xf424
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80044ea:	0212      	lsls	r2, r2, #8
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80044ec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80044f0:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80044f4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80044f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80044fc:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004500:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	pressure = ifn;
 8004504:	4e22      	ldr	r6, [pc, #136]	; (8004590 <getpressure3115+0x130>)
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004506:	432a      	orrs	r2, r5
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004508:	4d22      	ldr	r5, [pc, #136]	; (8004594 <getpressure3115+0x134>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800450a:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800450c:	0912      	lsrs	r2, r2, #4
 800450e:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004510:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004512:	9b05      	ldr	r3, [sp, #20]
 8004514:	9a04      	ldr	r2, [sp, #16]
 8004516:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	ifn = p / 4000;		// kilopascals
 800451a:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <getpressure3115+0x138>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 800451c:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	ifn = p / 4000;		// kilopascals
 8004520:	9a04      	ldr	r2, [sp, #16]
 8004522:	fba3 5202 	umull	r5, r2, r3, r2
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004526:	4d1d      	ldr	r5, [pc, #116]	; (800459c <getpressure3115+0x13c>)
	ifn = p / 4000;		// kilopascals
 8004528:	0a12      	lsrs	r2, r2, #8
 800452a:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 800452c:	9a04      	ldr	r2, [sp, #16]
 800452e:	fba3 7302 	umull	r7, r3, r3, r2
	temperature = t >> 4;
 8004532:	4f1b      	ldr	r7, [pc, #108]	; (80045a0 <getpressure3115+0x140>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	fb00 2313 	mls	r3, r0, r3, r2
 800453a:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 800453c:	f8dd c018 	ldr.w	ip, [sp, #24]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004540:	9807      	ldr	r0, [sp, #28]
	temperature = t >> 4;
 8004542:	9b05      	ldr	r3, [sp, #20]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004544:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004546:	6028      	str	r0, [r5, #0]
	temperature = t >> 4;
 8004548:	091b      	lsrs	r3, r3, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 800454a:	f002 020f 	and.w	r2, r2, #15
 800454e:	4815      	ldr	r0, [pc, #84]	; (80045a4 <getpressure3115+0x144>)
	pressure = ifn;
 8004550:	f8c6 c000 	str.w	ip, [r6]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004554:	fb01 f102 	mul.w	r1, r1, r2
	temperature = t >> 4;
 8004558:	603b      	str	r3, [r7, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 800455a:	6001      	str	r1, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 800455c:	4620      	mov	r0, r4
 800455e:	b00c      	add	sp, #48	; 0x30
 8004560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004564:	4638      	mov	r0, r7
 8004566:	4621      	mov	r1, r4
 8004568:	f01d f93c 	bl	80217e4 <iprintf>
			if (trys == 3)
 800456c:	2d03      	cmp	r5, #3
 800456e:	d191      	bne.n	8004494 <getpressure3115+0x34>
}
 8004570:	4620      	mov	r0, r4
 8004572:	b00c      	add	sp, #48	; 0x30
 8004574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8004578:	4601      	mov	r1, r0
 800457a:	480b      	ldr	r0, [pc, #44]	; (80045a8 <getpressure3115+0x148>)
 800457c:	f01d f932 	bl	80217e4 <iprintf>
}
 8004580:	4620      	mov	r0, r4
 8004582:	b00c      	add	sp, #48	; 0x30
 8004584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004588:	08027330 	.word	0x08027330
 800458c:	20023100 	.word	0x20023100
 8004590:	20023a08 	.word	0x20023a08
 8004594:	20022d4c 	.word	0x20022d4c
 8004598:	10624dd3 	.word	0x10624dd3
 800459c:	20023a0c 	.word	0x20023a0c
 80045a0:	20023a04 	.word	0x20023a04
 80045a4:	20023a00 	.word	0x20023a00
 80045a8:	08027358 	.word	0x08027358

080045ac <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 80045b0:	2501      	movs	r5, #1
 80045b2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80045b6:	220c      	movs	r2, #12
 80045b8:	a808      	add	r0, sp, #32
 80045ba:	462b      	mov	r3, r5
 80045bc:	21c0      	movs	r1, #192	; 0xc0
 80045be:	9602      	str	r6, [sp, #8]
 80045c0:	9000      	str	r0, [sp, #0]
 80045c2:	9501      	str	r5, [sp, #4]
 80045c4:	4830      	ldr	r0, [pc, #192]	; (8004688 <initpressure3115+0xdc>)
 80045c6:	f005 fb5d 	bl	8009c84 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d145      	bne.n	800465a <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 80045ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80045d2:	2bc4      	cmp	r3, #196	; 0xc4
 80045d4:	d003      	beq.n	80045de <initpressure3115+0x32>
		return (HAL_ERROR);
 80045d6:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 80045d8:	4620      	mov	r0, r4
 80045da:	b00b      	add	sp, #44	; 0x2c
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 80045de:	4f2b      	ldr	r7, [pc, #172]	; (800468c <initpressure3115+0xe0>)
 80045e0:	2302      	movs	r3, #2
 80045e2:	aa05      	add	r2, sp, #20
 80045e4:	21c0      	movs	r1, #192	; 0xc0
 80045e6:	89bc      	ldrh	r4, [r7, #12]
 80045e8:	4827      	ldr	r0, [pc, #156]	; (8004688 <initpressure3115+0xdc>)
 80045ea:	9600      	str	r6, [sp, #0]
 80045ec:	f8ad 4014 	strh.w	r4, [sp, #20]
 80045f0:	f005 fa96 	bl	8009b20 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80045f4:	4604      	mov	r4, r0
 80045f6:	2800      	cmp	r0, #0
 80045f8:	d136      	bne.n	8004668 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 80045fa:	8a3c      	ldrh	r4, [r7, #16]
 80045fc:	2302      	movs	r3, #2
 80045fe:	aa06      	add	r2, sp, #24
 8004600:	21c0      	movs	r1, #192	; 0xc0
 8004602:	4821      	ldr	r0, [pc, #132]	; (8004688 <initpressure3115+0xdc>)
 8004604:	9600      	str	r6, [sp, #0]
 8004606:	f8ad 4018 	strh.w	r4, [sp, #24]
 800460a:	f005 fa89 	bl	8009b20 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800460e:	4604      	mov	r4, r0
 8004610:	bb70      	cbnz	r0, 8004670 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8004612:	8abc      	ldrh	r4, [r7, #20]
 8004614:	2302      	movs	r3, #2
 8004616:	aa07      	add	r2, sp, #28
 8004618:	21c0      	movs	r1, #192	; 0xc0
 800461a:	481b      	ldr	r0, [pc, #108]	; (8004688 <initpressure3115+0xdc>)
 800461c:	9600      	str	r6, [sp, #0]
 800461e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8004622:	f005 fa7d 	bl	8009b20 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004626:	4604      	mov	r4, r0
 8004628:	bb50      	cbnz	r0, 8004680 <initpressure3115+0xd4>
	osDelay(100);	// allow chip to start up sampling
 800462a:	2064      	movs	r0, #100	; 0x64
 800462c:	f00d fb78 	bl	8011d20 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004630:	aa08      	add	r2, sp, #32
 8004632:	462b      	mov	r3, r5
 8004634:	21c0      	movs	r1, #192	; 0xc0
 8004636:	9200      	str	r2, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4813      	ldr	r0, [pc, #76]	; (8004688 <initpressure3115+0xdc>)
 800463c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004640:	f005 fb20 	bl	8009c84 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004644:	4604      	mov	r4, r0
 8004646:	b9b8      	cbnz	r0, 8004678 <initpressure3115+0xcc>
	result = getpressure3115();
 8004648:	f7ff ff0a 	bl	8004460 <getpressure3115>
	if (result != HAL_OK) {
 800464c:	4604      	mov	r4, r0
 800464e:	2800      	cmp	r0, #0
 8004650:	d0c2      	beq.n	80045d8 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8004652:	480f      	ldr	r0, [pc, #60]	; (8004690 <initpressure3115+0xe4>)
 8004654:	f01d f8c6 	bl	80217e4 <iprintf>
 8004658:	e7be      	b.n	80045d8 <initpressure3115+0x2c>
 800465a:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 800465c:	480d      	ldr	r0, [pc, #52]	; (8004694 <initpressure3115+0xe8>)
 800465e:	f01d f8c1 	bl	80217e4 <iprintf>
}
 8004662:	4620      	mov	r0, r4
 8004664:	b00b      	add	sp, #44	; 0x2c
 8004666:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <initpressure3115+0xec>)
 800466a:	f01d f8bb 	bl	80217e4 <iprintf>
		return (result);
 800466e:	e7b3      	b.n	80045d8 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8004670:	480a      	ldr	r0, [pc, #40]	; (800469c <initpressure3115+0xf0>)
 8004672:	f01d f8b7 	bl	80217e4 <iprintf>
		return (result);
 8004676:	e7af      	b.n	80045d8 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8004678:	4809      	ldr	r0, [pc, #36]	; (80046a0 <initpressure3115+0xf4>)
 800467a:	f01d f8b3 	bl	80217e4 <iprintf>
		return (result);
 800467e:	e7ab      	b.n	80045d8 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8004680:	4808      	ldr	r0, [pc, #32]	; (80046a4 <initpressure3115+0xf8>)
 8004682:	f01d f8af 	bl	80217e4 <iprintf>
		return (result);
 8004686:	e7a7      	b.n	80045d8 <initpressure3115+0x2c>
 8004688:	20023100 	.word	0x20023100
 800468c:	08025ad0 	.word	0x08025ad0
 8004690:	080273f0 	.word	0x080273f0
 8004694:	08027274 	.word	0x08027274
 8004698:	08027380 	.word	0x08027380
 800469c:	0802739c 	.word	0x0802739c
 80046a0:	080273d4 	.word	0x080273d4
 80046a4:	080273b8 	.word	0x080273b8

080046a8 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 80046a8:	b510      	push	{r4, lr}
	int i, j, k;

	cycleleds();
 80046aa:	f7ff fc25 	bl	8003ef8 <cycleleds>
	osDelay(500);
 80046ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046b2:	f00d fb35 	bl	8011d20 <osDelay>
	printf("Initsplat: LED cycle\n");
 80046b6:	4827      	ldr	r0, [pc, #156]	; (8004754 <initsplat+0xac>)
 80046b8:	f01d f930 	bl	802191c <puts>

	printf("Initsplat: Dual Mux\n\r");
 80046bc:	4826      	ldr	r0, [pc, #152]	; (8004758 <initsplat+0xb0>)
 80046be:	f01d f891 	bl	80217e4 <iprintf>
	printf("Initsplat: Programmable Gain Amp\n");
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 80046c2:	4c26      	ldr	r4, [pc, #152]	; (800475c <initsplat+0xb4>)
	initdualmux();
 80046c4:	f7ff fd16 	bl	80040f4 <initdualmux>
	osDelay(500);
 80046c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046cc:	f00d fb28 	bl	8011d20 <osDelay>
	printf("Initsplat: Programmable Gain Amp\n");
 80046d0:	4823      	ldr	r0, [pc, #140]	; (8004760 <initsplat+0xb8>)
 80046d2:	f01d f923 	bl	802191c <puts>
	initpga();
 80046d6:	f7ff fc85 	bl	8003fe4 <initpga>
	osDelay(500);
 80046da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046de:	f00d fb1f 	bl	8011d20 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 80046e2:	4820      	ldr	r0, [pc, #128]	; (8004764 <initsplat+0xbc>)
 80046e4:	f01d f87e 	bl	80217e4 <iprintf>
	psensor = PNONE;
 80046e8:	2300      	movs	r3, #0
 80046ea:	6023      	str	r3, [r4, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 80046ec:	f7ff ff5e 	bl	80045ac <initpressure3115>
 80046f0:	b988      	cbnz	r0, 8004716 <initsplat+0x6e>
		printf("MPL3115A2 pressure sensor present\n\r");
 80046f2:	481d      	ldr	r0, [pc, #116]	; (8004768 <initsplat+0xc0>)
 80046f4:	f01d f876 	bl	80217e4 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2<<3);
 80046f8:	4a1c      	ldr	r2, [pc, #112]	; (800476c <initsplat+0xc4>)
		psensor = MPL3115A2;
 80046fa:	2102      	movs	r1, #2
			statuspkt.bconf |= (MPL115A2<<3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 80046fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		statuspkt.bconf |= (MPL3115A2<<3);
 8004700:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8004704:	6021      	str	r1, [r4, #0]
		statuspkt.bconf |= (MPL3115A2<<3);
 8004706:	f043 0310 	orr.w	r3, r3, #16
}
 800470a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		statuspkt.bconf |= (MPL3115A2<<3);
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8004712:	f00d bb05 	b.w	8011d20 <osDelay>
		if (initpressure115() == HAL_OK) {
 8004716:	f7ff fe23 	bl	8004360 <initpressure115>
 800471a:	b988      	cbnz	r0, 8004740 <initsplat+0x98>
			printf("MPL115A2 pressure sensor present\n\r");
 800471c:	4814      	ldr	r0, [pc, #80]	; (8004770 <initsplat+0xc8>)
 800471e:	f01d f861 	bl	80217e4 <iprintf>
			statuspkt.bconf |= (MPL115A2<<3);
 8004722:	4a12      	ldr	r2, [pc, #72]	; (800476c <initsplat+0xc4>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8004724:	2101      	movs	r1, #1
	osDelay(500);
 8004726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2<<3);
 800472a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 800472e:	6021      	str	r1, [r4, #0]
			statuspkt.bconf |= (MPL115A2<<3);
 8004730:	f043 0308 	orr.w	r3, r3, #8
}
 8004734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			statuspkt.bconf |= (MPL115A2<<3);
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 800473c:	f00d baf0 	b.w	8011d20 <osDelay>
			printf("NO pressure sensor present\n\r");
 8004740:	480c      	ldr	r0, [pc, #48]	; (8004774 <initsplat+0xcc>)
 8004742:	f01d f84f 	bl	80217e4 <iprintf>
	osDelay(500);
 8004746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
}
 800474a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osDelay(500);
 800474e:	f00d bae7 	b.w	8011d20 <osDelay>
 8004752:	bf00      	nop
 8004754:	08027410 	.word	0x08027410
 8004758:	08027428 	.word	0x08027428
 800475c:	20001c54 	.word	0x20001c54
 8004760:	08027440 	.word	0x08027440
 8004764:	08027464 	.word	0x08027464
 8004768:	08027484 	.word	0x08027484
 800476c:	20022d4c 	.word	0x20022d4c
 8004770:	080274a8 	.word	0x080274a8
 8004774:	080274cc 	.word	0x080274cc

08004778 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	210f      	movs	r1, #15
 800477e:	f06f 0001 	mvn.w	r0, #1
{
 8004782:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8004786:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800478c:	641c      	str	r4, [r3, #64]	; 0x40
 800478e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004790:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8004794:	9400      	str	r4, [sp, #0]
 8004796:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004798:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800479a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800479e:	645c      	str	r4, [r3, #68]	; 0x44
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80047aa:	f002 f9e7 	bl	8006b7c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80047ae:	2200      	movs	r2, #0
 80047b0:	2106      	movs	r1, #6
 80047b2:	2005      	movs	r0, #5
 80047b4:	f002 f9e2 	bl	8006b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80047b8:	2005      	movs	r0, #5
 80047ba:	f002 fa29 	bl	8006c10 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80047be:	2200      	movs	r2, #0
 80047c0:	2106      	movs	r1, #6
 80047c2:	2051      	movs	r0, #81	; 0x51
 80047c4:	f002 f9da 	bl	8006b7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80047c8:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ca:	b002      	add	sp, #8
 80047cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80047d0:	f002 ba1e 	b.w	8006c10 <HAL_NVIC_EnableIRQ>
 80047d4:	40023800 	.word	0x40023800

080047d8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80047d8:	4a4a      	ldr	r2, [pc, #296]	; (8004904 <HAL_ADC_MspInit+0x12c>)
 80047da:	6803      	ldr	r3, [r0, #0]
{
 80047dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80047de:	4293      	cmp	r3, r2
{
 80047e0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e2:	f04f 0400 	mov.w	r4, #0
 80047e6:	9408      	str	r4, [sp, #32]
 80047e8:	9407      	str	r4, [sp, #28]
 80047ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80047ec:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 80047f0:	d007      	beq.n	8004802 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80047f2:	4a45      	ldr	r2, [pc, #276]	; (8004908 <HAL_ADC_MspInit+0x130>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d046      	beq.n	8004886 <HAL_ADC_MspInit+0xae>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80047f8:	4a44      	ldr	r2, [pc, #272]	; (800490c <HAL_ADC_MspInit+0x134>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d061      	beq.n	80048c2 <HAL_ADC_MspInit+0xea>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80047fe:	b00d      	add	sp, #52	; 0x34
 8004800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004802:	4b43      	ldr	r3, [pc, #268]	; (8004910 <HAL_ADC_MspInit+0x138>)
 8004804:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004806:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004808:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800480a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800480c:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 800480e:	4e41      	ldr	r6, [pc, #260]	; (8004914 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004810:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
 8004816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004818:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800481c:	9201      	str	r2, [sp, #4]
 800481e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800482a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004830:	4839      	ldr	r0, [pc, #228]	; (8004918 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004832:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004834:	9302      	str	r3, [sp, #8]
 8004836:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004838:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800483a:	f004 fc4d 	bl	80090d8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800483e:	4a37      	ldr	r2, [pc, #220]	; (800491c <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004840:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004844:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004848:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800484c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004850:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Instance = DMA2_Stream4;
 8004852:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004854:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004858:	2204      	movs	r2, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800485a:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800485c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004860:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004862:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004864:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004866:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004868:	6272      	str	r2, [r6, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800486a:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800486c:	e9c6 c005 	strd	ip, r0, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004870:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004872:	e9c6 7107 	strd	r7, r1, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004876:	f002 fc75 	bl	8007164 <HAL_DMA_Init>
 800487a:	2800      	cmp	r0, #0
 800487c:	d13f      	bne.n	80048fe <HAL_ADC_MspInit+0x126>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800487e:	63ae      	str	r6, [r5, #56]	; 0x38
 8004880:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8004882:	b00d      	add	sp, #52	; 0x34
 8004884:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004886:	4b22      	ldr	r3, [pc, #136]	; (8004910 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004888:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800488c:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 800488e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004890:	4821      	ldr	r0, [pc, #132]	; (8004918 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004896:	645a      	str	r2, [r3, #68]	; 0x44
 8004898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800489a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800489e:	9203      	str	r2, [sp, #12]
 80048a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a4:	f042 0201 	orr.w	r2, r2, #1
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
 80048aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ac:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	9304      	str	r3, [sp, #16]
 80048b4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b6:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ba:	f004 fc0d 	bl	80090d8 <HAL_GPIO_Init>
}
 80048be:	b00d      	add	sp, #52	; 0x34
 80048c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80048c4:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048c6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048c8:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048cc:	4812      	ldr	r0, [pc, #72]	; (8004918 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80048ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
 80048d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048d6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80048da:	9205      	str	r2, [sp, #20]
 80048dc:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048e0:	f042 0201 	orr.w	r2, r2, #1
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e8:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	9306      	str	r3, [sp, #24]
 80048f0:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048f2:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048f6:	f004 fbef 	bl	80090d8 <HAL_GPIO_Init>
}
 80048fa:	b00d      	add	sp, #52	; 0x34
 80048fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80048fe:	f7fe f941 	bl	8002b84 <Error_Handler>
 8004902:	e7bc      	b.n	800487e <HAL_ADC_MspInit+0xa6>
 8004904:	40012000 	.word	0x40012000
 8004908:	40012100 	.word	0x40012100
 800490c:	40012200 	.word	0x40012200
 8004910:	40023800 	.word	0x40023800
 8004914:	20023518 	.word	0x20023518
 8004918:	40020000 	.word	0x40020000
 800491c:	40026470 	.word	0x40026470

08004920 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_CRC_MspInit+0x28>)
 8004922:	6802      	ldr	r2, [r0, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d000      	beq.n	800492a <HAL_CRC_MspInit+0xa>
 8004928:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800492a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800492e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8004932:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8004934:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004944:	b002      	add	sp, #8
 8004946:	4770      	bx	lr
 8004948:	40023000 	.word	0x40023000

0800494c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800494c:	4b2b      	ldr	r3, [pc, #172]	; (80049fc <HAL_DAC_MspInit+0xb0>)
 800494e:	6802      	ldr	r2, [r0, #0]
{
 8004950:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8004952:	429a      	cmp	r2, r3
{
 8004954:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004956:	f04f 0400 	mov.w	r4, #0
 800495a:	9404      	str	r4, [sp, #16]
 800495c:	9403      	str	r4, [sp, #12]
 800495e:	9407      	str	r4, [sp, #28]
 8004960:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC)
 8004964:	d001      	beq.n	800496a <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004966:	b009      	add	sp, #36	; 0x24
 8004968:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 800496a:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800496e:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004970:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004972:	2703      	movs	r7, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 8004974:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004976:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 8004978:	4e21      	ldr	r6, [pc, #132]	; (8004a00 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800497a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800497e:	641a      	str	r2, [r3, #64]	; 0x40
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004982:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8004986:	9201      	str	r2, [sp, #4]
 8004988:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498c:	f042 0201 	orr.w	r2, r2, #1
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004994:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004996:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499a:	481a      	ldr	r0, [pc, #104]	; (8004a04 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800499c:	9704      	str	r7, [sp, #16]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800499e:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a2:	9302      	str	r3, [sp, #8]
 80049a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a8:	f004 fb96 	bl	80090d8 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049ae:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80049b0:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80049b4:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80049b6:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 80049b8:	6033      	str	r3, [r6, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80049ba:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049be:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80049c0:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80049c2:	6137      	str	r7, [r6, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80049c4:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049c6:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80049ca:	4630      	mov	r0, r6
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80049cc:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80049d0:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80049d4:	e9c6 1209 	strd	r1, r2, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80049d8:	f002 fbc4 	bl	8007164 <HAL_DMA_Init>
 80049dc:	b958      	cbnz	r0, 80049f6 <HAL_DAC_MspInit+0xaa>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80049e2:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80049e4:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80049e6:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80049e8:	f002 f8c8 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049ec:	2036      	movs	r0, #54	; 0x36
 80049ee:	f002 f90f 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 80049f2:	b009      	add	sp, #36	; 0x24
 80049f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80049f6:	f7fe f8c5 	bl	8002b84 <Error_Handler>
 80049fa:	e7f0      	b.n	80049de <HAL_DAC_MspInit+0x92>
 80049fc:	40007400 	.word	0x40007400
 8004a00:	2002331c 	.word	0x2002331c
 8004a04:	40020000 	.word	0x40020000
 8004a08:	40026088 	.word	0x40026088

08004a0c <HAL_I2C_MspInit>:
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8004a0c:	493e      	ldr	r1, [pc, #248]	; (8004b08 <HAL_I2C_MspInit+0xfc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a0e:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 8004a10:	6802      	ldr	r2, [r0, #0]
{
 8004a12:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->Instance==I2C1)
 8004a14:	428a      	cmp	r2, r1
{
 8004a16:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004a1c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8004a20:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2c->Instance==I2C1)
 8004a22:	d007      	beq.n	8004a34 <HAL_I2C_MspInit+0x28>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8004a24:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <HAL_I2C_MspInit+0x100>)
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d028      	beq.n	8004a7c <HAL_I2C_MspInit+0x70>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8004a2a:	4b39      	ldr	r3, [pc, #228]	; (8004b10 <HAL_I2C_MspInit+0x104>)
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d047      	beq.n	8004ac0 <HAL_I2C_MspInit+0xb4>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8004a30:	b00c      	add	sp, #48	; 0x30
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a34:	4c37      	ldr	r4, [pc, #220]	; (8004b14 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a36:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a38:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004a3a:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a40:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a42:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6323      	str	r3, [r4, #48]	; 0x30
 8004a4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a4c:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a4e:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a50:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a54:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a56:	4830      	ldr	r0, [pc, #192]	; (8004b18 <HAL_I2C_MspInit+0x10c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004a5c:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a5e:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a62:	f004 fb39 	bl	80090d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a6c:	6423      	str	r3, [r4, #64]	; 0x40
 8004a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a74:	9302      	str	r3, [sp, #8]
 8004a76:	9b02      	ldr	r3, [sp, #8]
}
 8004a78:	b00c      	add	sp, #48	; 0x30
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a7c:	4c25      	ldr	r4, [pc, #148]	; (8004b14 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a7e:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a80:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a82:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004a86:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a88:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a8a:	f043 0320 	orr.w	r3, r3, #32
 8004a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8004a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a92:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a94:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a98:	4820      	ldr	r0, [pc, #128]	; (8004b1c <HAL_I2C_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a9a:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a9c:	9303      	str	r3, [sp, #12]
 8004a9e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa0:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004aa2:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004aa4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004aa6:	f004 fb17 	bl	80090d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004aac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ab0:	6423      	str	r3, [r4, #64]	; 0x40
 8004ab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab8:	9304      	str	r3, [sp, #16]
 8004aba:	9b04      	ldr	r3, [sp, #16]
}
 8004abc:	b00c      	add	sp, #48	; 0x30
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ac0:	4c14      	ldr	r4, [pc, #80]	; (8004b14 <HAL_I2C_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ac2:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ac4:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004ac6:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004acc:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ace:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ad0:	f043 0320 	orr.w	r3, r3, #32
 8004ad4:	6323      	str	r3, [r4, #48]	; 0x30
 8004ad6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ad8:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004ada:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004adc:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ae0:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004ae2:	480e      	ldr	r0, [pc, #56]	; (8004b1c <HAL_I2C_MspInit+0x110>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ae4:	9305      	str	r3, [sp, #20]
 8004ae6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004ae8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8004aea:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004aee:	f004 faf3 	bl	80090d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8004af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af8:	6423      	str	r3, [r4, #64]	; 0x40
 8004afa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b00:	9306      	str	r3, [sp, #24]
 8004b02:	9b06      	ldr	r3, [sp, #24]
}
 8004b04:	b00c      	add	sp, #48	; 0x30
 8004b06:	bd70      	pop	{r4, r5, r6, pc}
 8004b08:	40005400 	.word	0x40005400
 8004b0c:	40005800 	.word	0x40005800
 8004b10:	40006000 	.word	0x40006000
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	40021400 	.word	0x40021400

08004b20 <HAL_MDIOS_MspInit>:
* @retval None
*/
void HAL_MDIOS_MspInit(MDIOS_HandleTypeDef* hmdios)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hmdios->Instance==MDIOS)
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_MDIOS_MspInit+0x78>)
 8004b22:	6802      	ldr	r2, [r0, #0]
{
 8004b24:	b570      	push	{r4, r5, r6, lr}
  if(hmdios->Instance==MDIOS)
 8004b26:	429a      	cmp	r2, r3
{
 8004b28:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b2a:	f04f 0400 	mov.w	r4, #0
 8004b2e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004b32:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004b36:	9407      	str	r4, [sp, #28]
  if(hmdios->Instance==MDIOS)
 8004b38:	d001      	beq.n	8004b3e <HAL_MDIOS_MspInit+0x1e>
  /* USER CODE BEGIN MDIOS_MspInit 1 */

  /* USER CODE END MDIOS_MspInit 1 */
  }

}
 8004b3a:	b008      	add	sp, #32
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_MDIO_CLK_ENABLE();
 8004b3e:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8004b42:	f44f 6688 	mov.w	r6, #1088	; 0x440
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b46:	2002      	movs	r0, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b48:	2503      	movs	r5, #3
    __HAL_RCC_MDIO_CLK_ENABLE();
 8004b4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4c:	a903      	add	r1, sp, #12
    __HAL_RCC_MDIO_CLK_ENABLE();
 8004b4e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
 8004b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b5a:	9201      	str	r2, [sp, #4]
 8004b5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b60:	f042 0201 	orr.w	r2, r2, #1
 8004b64:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004b66:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b6a:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b70:	e9cd 6003 	strd	r6, r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b74:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b76:	4809      	ldr	r0, [pc, #36]	; (8004b9c <HAL_MDIOS_MspInit+0x7c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b78:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8004b7a:	e9cd 5206 	strd	r5, r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b7e:	f004 faab 	bl	80090d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(MDIOS_IRQn, 6, 0);
 8004b82:	4622      	mov	r2, r4
 8004b84:	2106      	movs	r1, #6
 8004b86:	206d      	movs	r0, #109	; 0x6d
 8004b88:	f001 fff8 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(MDIOS_IRQn);
 8004b8c:	206d      	movs	r0, #109	; 0x6d
 8004b8e:	f002 f83f 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 8004b92:	b008      	add	sp, #32
 8004b94:	bd70      	pop	{r4, r5, r6, pc}
 8004b96:	bf00      	nop
 8004b98:	40017800 	.word	0x40017800
 8004b9c:	40020000 	.word	0x40020000

08004ba0 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_RNG_MspInit+0x24>)
 8004ba2:	6802      	ldr	r2, [r0, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d000      	beq.n	8004baa <HAL_RNG_MspInit+0xa>
 8004ba8:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004baa:	4b07      	ldr	r3, [pc, #28]	; (8004bc8 <HAL_RNG_MspInit+0x28>)
{
 8004bac:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8004bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004bc0:	b002      	add	sp, #8
 8004bc2:	4770      	bx	lr
 8004bc4:	50060800 	.word	0x50060800
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8004bcc:	4a57      	ldr	r2, [pc, #348]	; (8004d2c <HAL_SPI_MspInit+0x160>)
 8004bce:	6803      	ldr	r3, [r0, #0]
{
 8004bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 8004bd4:	4293      	cmp	r3, r2
{
 8004bd6:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd8:	f04f 0400 	mov.w	r4, #0
 8004bdc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8004be0:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8004be4:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8004be6:	d008      	beq.n	8004bfa <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8004be8:	4a51      	ldr	r2, [pc, #324]	; (8004d30 <HAL_SPI_MspInit+0x164>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d03b      	beq.n	8004c66 <HAL_SPI_MspInit+0x9a>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8004bee:	4a51      	ldr	r2, [pc, #324]	; (8004d34 <HAL_SPI_MspInit+0x168>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d078      	beq.n	8004ce6 <HAL_SPI_MspInit+0x11a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8004bf4:	b00e      	add	sp, #56	; 0x38
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	; (8004d38 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004bfc:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bfe:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c00:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c04:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c06:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004c14:	9201      	str	r2, [sp, #4]
 8004c16:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1a:	f042 0204 	orr.w	r2, r2, #4
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8004c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c22:	f002 0204 	and.w	r2, r2, #4
 8004c26:	9202      	str	r2, [sp, #8]
 8004c28:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c2c:	f042 0208 	orr.w	r2, r2, #8
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004c34:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c36:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c3a:	4840      	ldr	r0, [pc, #256]	; (8004d3c <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3c:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c3e:	9303      	str	r3, [sp, #12]
 8004c40:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c42:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c44:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c48:	f004 fa46 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c4c:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c4e:	a909      	add	r1, sp, #36	; 0x24
 8004c50:	483b      	ldr	r0, [pc, #236]	; (8004d40 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c52:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c54:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004c56:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c58:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004c5c:	f004 fa3c 	bl	80090d8 <HAL_GPIO_Init>
}
 8004c60:	b00e      	add	sp, #56	; 0x38
 8004c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c66:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c68:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c6a:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6c:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004c70:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c72:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004c74:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
 8004c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c80:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004c84:	9204      	str	r2, [sp, #16]
 8004c86:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8a:	4332      	orrs	r2, r6
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c90:	4032      	ands	r2, r6
 8004c92:	9205      	str	r2, [sp, #20]
 8004c94:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c98:	4302      	orrs	r2, r0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004c9e:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca0:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca2:	4828      	ldr	r0, [pc, #160]	; (8004d44 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca4:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ca6:	9306      	str	r3, [sp, #24]
 8004ca8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004caa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8004cac:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cb0:	f004 fa12 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb8:	a909      	add	r1, sp, #36	; 0x24
 8004cba:	4820      	ldr	r0, [pc, #128]	; (8004d3c <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004cbc:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbe:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cc0:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cc8:	f004 fa06 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004ccc:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cce:	a909      	add	r1, sp, #36	; 0x24
 8004cd0:	481c      	ldr	r0, [pc, #112]	; (8004d44 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd4:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004cd6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004cd8:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cdc:	f004 f9fc 	bl	80090d8 <HAL_GPIO_Init>
}
 8004ce0:	b00e      	add	sp, #56	; 0x38
 8004ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004ce8:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cea:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cec:	2602      	movs	r6, #2
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004cee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf0:	2503      	movs	r5, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004cf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44
 8004cf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cfa:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cfe:	9207      	str	r2, [sp, #28]
 8004d00:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d04:	f042 0210 	orr.w	r2, r2, #16
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004d0a:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004d0e:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d10:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d14:	480c      	ldr	r0, [pc, #48]	; (8004d48 <HAL_SPI_MspInit+0x17c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d18:	9308      	str	r3, [sp, #32]
 8004d1a:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004d1e:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d22:	f004 f9d9 	bl	80090d8 <HAL_GPIO_Init>
}
 8004d26:	b00e      	add	sp, #56	; 0x38
 8004d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d2c:	40003800 	.word	0x40003800
 8004d30:	40003c00 	.word	0x40003c00
 8004d34:	40013400 	.word	0x40013400
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40020800 	.word	0x40020800
 8004d40:	40020c00 	.word	0x40020c00
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40021000 	.word	0x40021000

08004d4c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8004d4c:	4a78      	ldr	r2, [pc, #480]	; (8004f30 <HAL_TIM_Base_MspInit+0x1e4>)
 8004d4e:	6803      	ldr	r3, [r0, #0]
{
 8004d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8004d54:	4293      	cmp	r3, r2
{
 8004d56:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d58:	f04f 0400 	mov.w	r4, #0
 8004d5c:	940c      	str	r4, [sp, #48]	; 0x30
 8004d5e:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d60:	940f      	str	r4, [sp, #60]	; 0x3c
 8004d62:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if(htim_base->Instance==TIM1)
 8004d66:	d021      	beq.n	8004dac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d058      	beq.n	8004e20 <HAL_TIM_Base_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8004d6e:	4a71      	ldr	r2, [pc, #452]	; (8004f34 <HAL_TIM_Base_MspInit+0x1e8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d028      	beq.n	8004dc6 <HAL_TIM_Base_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004d74:	4a70      	ldr	r2, [pc, #448]	; (8004f38 <HAL_TIM_Base_MspInit+0x1ec>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d045      	beq.n	8004e06 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8004d7a:	4a70      	ldr	r2, [pc, #448]	; (8004f3c <HAL_TIM_Base_MspInit+0x1f0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	f000 80ad 	beq.w	8004edc <HAL_TIM_Base_MspInit+0x190>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8004d82:	4a6f      	ldr	r2, [pc, #444]	; (8004f40 <HAL_TIM_Base_MspInit+0x1f4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	f000 80bc 	beq.w	8004f02 <HAL_TIM_Base_MspInit+0x1b6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8004d8a:	4a6e      	ldr	r2, [pc, #440]	; (8004f44 <HAL_TIM_Base_MspInit+0x1f8>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d02f      	beq.n	8004df0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8004d90:	4a6d      	ldr	r2, [pc, #436]	; (8004f48 <HAL_TIM_Base_MspInit+0x1fc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d114      	bne.n	8004dc0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004d96:	4b6d      	ldr	r3, [pc, #436]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
 8004d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	930a      	str	r3, [sp, #40]	; 0x28
 8004da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004daa:	e009      	b.n	8004dc0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dac:	4b67      	ldr	r3, [pc, #412]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
 8004dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004db0:	f042 0201 	orr.w	r2, r2, #1
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
 8004db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	9b01      	ldr	r3, [sp, #4]
}
 8004dc0:	b011      	add	sp, #68	; 0x44
 8004dc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dc6:	4b61      	ldr	r3, [pc, #388]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004dc8:	4622      	mov	r2, r4
 8004dca:	2106      	movs	r1, #6
 8004dcc:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dce:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004dd0:	f044 0402 	orr.w	r4, r4, #2
 8004dd4:	641c      	str	r4, [r3, #64]	; 0x40
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	9305      	str	r3, [sp, #20]
 8004dde:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8004de0:	f001 fecc 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004de4:	201d      	movs	r0, #29
 8004de6:	f001 ff13 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 8004dea:	b011      	add	sp, #68	; 0x44
 8004dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004df0:	4b56      	ldr	r3, [pc, #344]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
 8004df2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004df4:	f042 0220 	orr.w	r2, r2, #32
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	9309      	str	r3, [sp, #36]	; 0x24
 8004e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e04:	e7dc      	b.n	8004dc0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e06:	4b51      	ldr	r3, [pc, #324]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
 8004e08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e0a:	f042 0204 	orr.w	r2, r2, #4
 8004e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	9306      	str	r3, [sp, #24]
 8004e18:	9b06      	ldr	r3, [sp, #24]
}
 8004e1a:	b011      	add	sp, #68	; 0x44
 8004e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e20:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e24:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e26:	f04f 0802 	mov.w	r8, #2
 8004e2a:	4605      	mov	r5, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e2e:	2020      	movs	r0, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e30:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e32:	f44f 6980 	mov.w	r9, #1024	; 0x400
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e36:	433a      	orrs	r2, r7
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8004e38:	4e45      	ldr	r6, [pc, #276]	; (8004f50 <HAL_TIM_Base_MspInit+0x204>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e3e:	403a      	ands	r2, r7
 8004e40:	9202      	str	r2, [sp, #8]
 8004e42:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e46:	433a      	orrs	r2, r7
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
 8004e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4c:	403a      	ands	r2, r7
 8004e4e:	9203      	str	r2, [sp, #12]
 8004e50:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e54:	ea42 0208 	orr.w	r2, r2, r8
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e5c:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e5e:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e62:	483c      	ldr	r0, [pc, #240]	; (8004f54 <HAL_TIM_Base_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e64:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6a:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6c:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e72:	f004 f931 	bl	80090d8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e76:	a90b      	add	r1, sp, #44	; 0x2c
 8004e78:	4837      	ldr	r0, [pc, #220]	; (8004f58 <HAL_TIM_Base_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004e7a:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004e7c:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e80:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e84:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e88:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e8c:	f004 f924 	bl	80090d8 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8004e90:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8004f5c <HAL_TIM_Base_MspInit+0x210>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004ea0:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8004ea2:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ea6:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ea8:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8004eaa:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004eac:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8004eb0:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004eb4:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8004eb8:	f002 f954 	bl	8007164 <HAL_DMA_Init>
 8004ebc:	2800      	cmp	r0, #0
 8004ebe:	d133      	bne.n	8004f28 <HAL_TIM_Base_MspInit+0x1dc>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8004ec4:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004ec6:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8004ec8:	62ee      	str	r6, [r5, #44]	; 0x2c
 8004eca:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8004ecc:	f001 fe56 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ed0:	201c      	movs	r0, #28
 8004ed2:	f001 fe9d 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 8004ed6:	b011      	add	sp, #68	; 0x44
 8004ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004edc:	4b1b      	ldr	r3, [pc, #108]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004ede:	4622      	mov	r2, r4
 8004ee0:	2105      	movs	r1, #5
 8004ee2:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ee4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004ee6:	f044 0408 	orr.w	r4, r4, #8
 8004eea:	641c      	str	r4, [r3, #64]	; 0x40
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	9307      	str	r3, [sp, #28]
 8004ef4:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8004ef6:	f001 fe41 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004efa:	2032      	movs	r0, #50	; 0x32
 8004efc:	f001 fe88 	bl	8006c10 <HAL_NVIC_EnableIRQ>
 8004f00:	e75e      	b.n	8004dc0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f02:	4b12      	ldr	r3, [pc, #72]	; (8004f4c <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004f04:	4622      	mov	r2, r4
 8004f06:	2106      	movs	r1, #6
 8004f08:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f0a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004f0c:	f044 0410 	orr.w	r4, r4, #16
 8004f10:	641c      	str	r4, [r3, #64]	; 0x40
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	9308      	str	r3, [sp, #32]
 8004f1a:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8004f1c:	f001 fe2e 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f20:	2036      	movs	r0, #54	; 0x36
 8004f22:	f001 fe75 	bl	8006c10 <HAL_NVIC_EnableIRQ>
 8004f26:	e74b      	b.n	8004dc0 <HAL_TIM_Base_MspInit+0x74>
      Error_Handler();
 8004f28:	f7fd fe2c 	bl	8002b84 <Error_Handler>
 8004f2c:	e7c8      	b.n	8004ec0 <HAL_TIM_Base_MspInit+0x174>
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40001000 	.word	0x40001000
 8004f44:	40001400 	.word	0x40001400
 8004f48:	40002000 	.word	0x40002000
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	20023218 	.word	0x20023218
 8004f54:	40020000 	.word	0x40020000
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	40026028 	.word	0x40026028

08004f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8004f60:	491e      	ldr	r1, [pc, #120]	; (8004fdc <HAL_TIM_MspPostInit+0x7c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f62:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8004f64:	6802      	ldr	r2, [r0, #0]
{
 8004f66:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 8004f68:	428a      	cmp	r2, r1
{
 8004f6a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f6c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8004f70:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004f74:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8004f76:	d004      	beq.n	8004f82 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8004f78:	4919      	ldr	r1, [pc, #100]	; (8004fe0 <HAL_TIM_MspPostInit+0x80>)
 8004f7a:	428a      	cmp	r2, r1
 8004f7c:	d018      	beq.n	8004fb0 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004f7e:	b008      	add	sp, #32
 8004f80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f82:	4a18      	ldr	r2, [pc, #96]	; (8004fe4 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f84:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f86:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f88:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8a:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f8c:	4816      	ldr	r0, [pc, #88]	; (8004fe8 <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8e:	f044 0404 	orr.w	r4, r4, #4
 8004f92:	6314      	str	r4, [r2, #48]	; 0x30
 8004f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f96:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f98:	f002 0204 	and.w	r2, r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f9c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004f9e:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fa0:	9201      	str	r2, [sp, #4]
 8004fa2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004fa6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fa8:	f004 f896 	bl	80090d8 <HAL_GPIO_Init>
}
 8004fac:	b008      	add	sp, #32
 8004fae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fb0:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb2:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fb4:	f44f 7680 	mov.w	r6, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fb8:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fba:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	480b      	ldr	r0, [pc, #44]	; (8004fec <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbe:	432c      	orrs	r4, r5
 8004fc0:	6314      	str	r4, [r2, #48]	; 0x30
 8004fc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc4:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc6:	402a      	ands	r2, r5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fca:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fcc:	9202      	str	r2, [sp, #8]
 8004fce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fd2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fd4:	f004 f880 	bl	80090d8 <HAL_GPIO_Init>
}
 8004fd8:	b008      	add	sp, #32
 8004fda:	bd70      	pop	{r4, r5, r6, pc}
 8004fdc:	40000400 	.word	0x40000400
 8004fe0:	40000800 	.word	0x40000800
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	40020800 	.word	0x40020800
 8004fec:	40020400 	.word	0x40020400

08004ff0 <HAL_UART_MspInit>:
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART4)
 8004ff0:	4aa4      	ldr	r2, [pc, #656]	; (8005284 <HAL_UART_MspInit+0x294>)
 8004ff2:	6803      	ldr	r3, [r0, #0]
{
 8004ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(huart->Instance==UART4)
 8004ff8:	4293      	cmp	r3, r2
{
 8004ffa:	b096      	sub	sp, #88	; 0x58
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ffc:	f04f 0400 	mov.w	r4, #0
 8005000:	9412      	str	r4, [sp, #72]	; 0x48
 8005002:	9411      	str	r4, [sp, #68]	; 0x44
 8005004:	9415      	str	r4, [sp, #84]	; 0x54
 8005006:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if(huart->Instance==UART4)
 800500a:	d036      	beq.n	800507a <HAL_UART_MspInit+0x8a>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 800500c:	4a9e      	ldr	r2, [pc, #632]	; (8005288 <HAL_UART_MspInit+0x298>)
 800500e:	4605      	mov	r5, r0
 8005010:	4293      	cmp	r3, r2
 8005012:	d07c      	beq.n	800510e <HAL_UART_MspInit+0x11e>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005014:	4a9d      	ldr	r2, [pc, #628]	; (800528c <HAL_UART_MspInit+0x29c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	f000 80ed 	beq.w	80051f6 <HAL_UART_MspInit+0x206>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800501c:	4a9c      	ldr	r2, [pc, #624]	; (8005290 <HAL_UART_MspInit+0x2a0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00a      	beq.n	8005038 <HAL_UART_MspInit+0x48>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005022:	4a9c      	ldr	r2, [pc, #624]	; (8005294 <HAL_UART_MspInit+0x2a4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	f000 810a 	beq.w	800523e <HAL_UART_MspInit+0x24e>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 800502a:	4a9b      	ldr	r2, [pc, #620]	; (8005298 <HAL_UART_MspInit+0x2a8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	f000 8149 	beq.w	80052c4 <HAL_UART_MspInit+0x2d4>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005032:	b016      	add	sp, #88	; 0x58
 8005034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8005038:	4b98      	ldr	r3, [pc, #608]	; (800529c <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800503a:	2070      	movs	r0, #112	; 0x70
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503c:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503e:	2503      	movs	r5, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8005040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005042:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART2_CLK_ENABLE();
 8005044:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005048:	641a      	str	r2, [r3, #64]	; 0x40
 800504a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800504c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005050:	920a      	str	r2, [sp, #40]	; 0x28
 8005052:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005056:	f042 0208 	orr.w	r2, r2, #8
 800505a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800505c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005060:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005062:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005066:	488e      	ldr	r0, [pc, #568]	; (80052a0 <HAL_UART_MspInit+0x2b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800506a:	930b      	str	r3, [sp, #44]	; 0x2c
 800506c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005070:	e9cd 5214 	strd	r5, r2, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005074:	f004 f830 	bl	80090d8 <HAL_GPIO_Init>
 8005078:	e7db      	b.n	8005032 <HAL_UART_MspInit+0x42>
    __HAL_RCC_UART4_CLK_ENABLE();
 800507a:	4b88      	ldr	r3, [pc, #544]	; (800529c <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800507c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800507e:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005082:	2603      	movs	r6, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8005084:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005086:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005088:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_UART4_CLK_ENABLE();
 800508a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
 8005090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005092:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005096:	9201      	str	r2, [sp, #4]
 8005098:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800509a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	631a      	str	r2, [r3, #48]	; 0x30
 80050a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a4:	f002 0201 	and.w	r2, r2, #1
 80050a8:	9202      	str	r2, [sp, #8]
 80050aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ae:	433a      	orrs	r2, r7
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
 80050b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b4:	403a      	ands	r2, r7
 80050b6:	9203      	str	r2, [sp, #12]
 80050b8:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050bc:	f042 0204 	orr.w	r2, r2, #4
 80050c0:	631a      	str	r2, [r3, #48]	; 0x30
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80050c4:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050c6:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ca:	4876      	ldr	r0, [pc, #472]	; (80052a4 <HAL_UART_MspInit+0x2b4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050cc:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050d4:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d8:	f003 fffe 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80050dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050e0:	a911      	add	r1, sp, #68	; 0x44
 80050e2:	4871      	ldr	r0, [pc, #452]	; (80052a8 <HAL_UART_MspInit+0x2b8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80050e4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e6:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80050ea:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ee:	f003 fff3 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050f6:	a911      	add	r1, sp, #68	; 0x44
 80050f8:	486c      	ldr	r0, [pc, #432]	; (80052ac <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fa:	9712      	str	r7, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80050fe:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005100:	e9cd 6514 	strd	r6, r5, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005104:	f003 ffe8 	bl	80090d8 <HAL_GPIO_Init>
}
 8005108:	b016      	add	sp, #88	; 0x58
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800510e:	4b63      	ldr	r3, [pc, #396]	; (800529c <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005110:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005114:	2708      	movs	r7, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005116:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 800511a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800511c:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005120:	a911      	add	r1, sp, #68	; 0x44
 8005122:	4861      	ldr	r0, [pc, #388]	; (80052a8 <HAL_UART_MspInit+0x2b8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8005124:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005128:	4e61      	ldr	r6, [pc, #388]	; (80052b0 <HAL_UART_MspInit+0x2c0>)
    __HAL_RCC_UART5_CLK_ENABLE();
 800512a:	641a      	str	r2, [r3, #64]	; 0x40
 800512c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005132:	9205      	str	r2, [sp, #20]
 8005134:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005138:	ea42 0209 	orr.w	r2, r2, r9
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
 800513e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005140:	ea02 0209 	and.w	r2, r2, r9
 8005144:	9206      	str	r2, [sp, #24]
 8005146:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800514a:	f042 0204 	orr.w	r2, r2, #4
 800514e:	631a      	str	r2, [r3, #48]	; 0x30
 8005150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005152:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	9307      	str	r3, [sp, #28]
 800515a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800515c:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005160:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005164:	f003 ffb8 	bl	80090d8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005168:	a911      	add	r1, sp, #68	; 0x44
 800516a:	4850      	ldr	r0, [pc, #320]	; (80052ac <HAL_UART_MspInit+0x2bc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516c:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800516e:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005172:	e9cd a911 	strd	sl, r9, [sp, #68]	; 0x44
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005176:	4f4f      	ldr	r7, [pc, #316]	; (80052b4 <HAL_UART_MspInit+0x2c4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005178:	f003 ffae 	bl	80090d8 <HAL_GPIO_Init>
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800517c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005180:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005184:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005188:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800518a:	6132      	str	r2, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800518c:	61f3      	str	r3, [r6, #28]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800518e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005192:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005196:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800519a:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800519e:	f001 ffe1 	bl	8007164 <HAL_DMA_Init>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	f040 80e8 	bne.w	8005378 <HAL_UART_MspInit+0x388>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80051a8:	4c43      	ldr	r4, [pc, #268]	; (80052b8 <HAL_UART_MspInit+0x2c8>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051aa:	2300      	movs	r3, #0
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80051ac:	4843      	ldr	r0, [pc, #268]	; (80052bc <HAL_UART_MspInit+0x2cc>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80051ae:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051b2:	2140      	movs	r1, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80051b8:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80051ba:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80051bc:	66ee      	str	r6, [r5, #108]	; 0x6c
 80051be:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051c0:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051c2:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051c6:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051ca:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051ce:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80051d2:	f001 ffc7 	bl	8007164 <HAL_DMA_Init>
 80051d6:	2800      	cmp	r0, #0
 80051d8:	f040 80cb 	bne.w	8005372 <HAL_UART_MspInit+0x382>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	2107      	movs	r1, #7
 80051e0:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 80051e2:	66ac      	str	r4, [r5, #104]	; 0x68
 80051e4:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 80051e6:	f001 fcc9 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80051ea:	2035      	movs	r0, #53	; 0x35
 80051ec:	f001 fd10 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 80051f0:	b016      	add	sp, #88	; 0x58
 80051f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_UART7_CLK_ENABLE();
 80051f6:	4b29      	ldr	r3, [pc, #164]	; (800529c <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80051f8:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80051fc:	a911      	add	r1, sp, #68	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051fe:	2602      	movs	r6, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8005200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005202:	2503      	movs	r5, #3
    __HAL_RCC_UART7_CLK_ENABLE();
 8005204:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
 800520a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800520c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005210:	9208      	str	r2, [sp, #32]
 8005212:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005214:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005216:	f042 0220 	orr.w	r2, r2, #32
 800521a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800521c:	2208      	movs	r2, #8
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005220:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005222:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005226:	4826      	ldr	r0, [pc, #152]	; (80052c0 <HAL_UART_MspInit+0x2d0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005228:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800522a:	9309      	str	r3, [sp, #36]	; 0x24
 800522c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522e:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005230:	e9cd 5214 	strd	r5, r2, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005234:	f003 ff50 	bl	80090d8 <HAL_GPIO_Init>
}
 8005238:	b016      	add	sp, #88	; 0x58
 800523a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <HAL_UART_MspInit+0x2ac>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005240:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005244:	2612      	movs	r6, #18
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005246:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8005248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800524a:	a911      	add	r1, sp, #68	; 0x44
    __HAL_RCC_USART3_CLK_ENABLE();
 800524c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
 8005252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005254:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005258:	920c      	str	r2, [sp, #48]	; 0x30
 800525a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800525c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800525e:	f042 0208 	orr.w	r2, r2, #8
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005264:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005268:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800526a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800526e:	480c      	ldr	r0, [pc, #48]	; (80052a0 <HAL_UART_MspInit+0x2b0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005270:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005272:	930d      	str	r3, [sp, #52]	; 0x34
 8005274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005276:	9612      	str	r6, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005278:	e9cd 5214 	strd	r5, r2, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800527c:	f003 ff2c 	bl	80090d8 <HAL_GPIO_Init>
 8005280:	e6d7      	b.n	8005032 <HAL_UART_MspInit+0x42>
 8005282:	bf00      	nop
 8005284:	40004c00 	.word	0x40004c00
 8005288:	40005000 	.word	0x40005000
 800528c:	40007800 	.word	0x40007800
 8005290:	40004400 	.word	0x40004400
 8005294:	40004800 	.word	0x40004800
 8005298:	40011400 	.word	0x40011400
 800529c:	40023800 	.word	0x40023800
 80052a0:	40020c00 	.word	0x40020c00
 80052a4:	40020000 	.word	0x40020000
 80052a8:	40020400 	.word	0x40020400
 80052ac:	40020800 	.word	0x40020800
 80052b0:	200237d4 	.word	0x200237d4
 80052b4:	40026010 	.word	0x40026010
 80052b8:	200238b8 	.word	0x200238b8
 80052bc:	400260b8 	.word	0x400260b8
 80052c0:	40021400 	.word	0x40021400
    __HAL_RCC_USART6_CLK_ENABLE();
 80052c4:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <HAL_UART_MspInit+0x390>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80052c6:	f44f 7040 	mov.w	r0, #768	; 0x300
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80052ca:	2708      	movs	r7, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052cc:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_USART6_CLK_ENABLE();
 80052d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052d2:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80052d6:	a911      	add	r1, sp, #68	; 0x44
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80052d8:	4e2a      	ldr	r6, [pc, #168]	; (8005384 <HAL_UART_MspInit+0x394>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80052da:	f042 0220 	orr.w	r2, r2, #32
 80052de:	645a      	str	r2, [r3, #68]	; 0x44
 80052e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e2:	f002 0220 	and.w	r2, r2, #32
 80052e6:	920e      	str	r2, [sp, #56]	; 0x38
 80052e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80052ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f0:	631a      	str	r2, [r3, #48]	; 0x30
 80052f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052f4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80052f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80052fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	f042 0204 	orr.w	r2, r2, #4
 8005302:	631a      	str	r2, [r3, #48]	; 0x30
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005306:	9011      	str	r0, [sp, #68]	; 0x44
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005308:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800530c:	481e      	ldr	r0, [pc, #120]	; (8005388 <HAL_UART_MspInit+0x398>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	9413      	str	r4, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005310:	9310      	str	r3, [sp, #64]	; 0x40
 8005312:	9b10      	ldr	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005314:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005318:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800531c:	f003 fedc 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005320:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005322:	a911      	add	r1, sp, #68	; 0x44
 8005324:	4819      	ldr	r0, [pc, #100]	; (800538c <HAL_UART_MspInit+0x39c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005326:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005328:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532c:	9413      	str	r4, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800532e:	e9cd 8714 	strd	r8, r7, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005332:	f003 fed1 	bl	80090d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005336:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800533a:	f8df c054 	ldr.w	ip, [pc, #84]	; 8005390 <HAL_UART_MspInit+0x3a0>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800533e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005342:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800534a:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800534c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800534e:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005350:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005354:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005358:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800535c:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005360:	f001 ff00 	bl	8007164 <HAL_DMA_Init>
 8005364:	b910      	cbnz	r0, 800536c <HAL_UART_MspInit+0x37c>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005366:	66ee      	str	r6, [r5, #108]	; 0x6c
 8005368:	63b5      	str	r5, [r6, #56]	; 0x38
}
 800536a:	e662      	b.n	8005032 <HAL_UART_MspInit+0x42>
      Error_Handler();
 800536c:	f7fd fc0a 	bl	8002b84 <Error_Handler>
 8005370:	e7f9      	b.n	8005366 <HAL_UART_MspInit+0x376>
      Error_Handler();
 8005372:	f7fd fc07 	bl	8002b84 <Error_Handler>
 8005376:	e731      	b.n	80051dc <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8005378:	f7fd fc04 	bl	8002b84 <Error_Handler>
 800537c:	e714      	b.n	80051a8 <HAL_UART_MspInit+0x1b8>
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	20022eb4 	.word	0x20022eb4
 8005388:	40021800 	.word	0x40021800
 800538c:	40020800 	.word	0x40020800
 8005390:	40026428 	.word	0x40026428

08005394 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8005394:	4a43      	ldr	r2, [pc, #268]	; (80054a4 <HAL_UART_MspDeInit+0x110>)
 8005396:	6803      	ldr	r3, [r0, #0]
 8005398:	4293      	cmp	r3, r2
{
 800539a:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 800539c:	d01f      	beq.n	80053de <HAL_UART_MspDeInit+0x4a>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 800539e:	4a42      	ldr	r2, [pc, #264]	; (80054a8 <HAL_UART_MspDeInit+0x114>)
 80053a0:	4604      	mov	r4, r0
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d032      	beq.n	800540c <HAL_UART_MspDeInit+0x78>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 80053a6:	4a41      	ldr	r2, [pc, #260]	; (80054ac <HAL_UART_MspDeInit+0x118>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d04a      	beq.n	8005442 <HAL_UART_MspDeInit+0xae>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 80053ac:	4a40      	ldr	r2, [pc, #256]	; (80054b0 <HAL_UART_MspDeInit+0x11c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d006      	beq.n	80053c0 <HAL_UART_MspDeInit+0x2c>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 80053b2:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <HAL_UART_MspDeInit+0x120>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d051      	beq.n	800545c <HAL_UART_MspDeInit+0xc8>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 80053b8:	4a3f      	ldr	r2, [pc, #252]	; (80054b8 <HAL_UART_MspDeInit+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d05b      	beq.n	8005476 <HAL_UART_MspDeInit+0xe2>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80053be:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_DISABLE();
 80053c0:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80053c4:	483d      	ldr	r0, [pc, #244]	; (80054bc <HAL_UART_MspDeInit+0x128>)
 80053c6:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 80053c8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053ce:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80053d0:	f004 f82a 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80053d4:	2026      	movs	r0, #38	; 0x26
}
 80053d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80053da:	f001 bc2d 	b.w	8006c38 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 80053de:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80053e2:	f248 0101 	movw	r1, #32769	; 0x8001
 80053e6:	4836      	ldr	r0, [pc, #216]	; (80054c0 <HAL_UART_MspDeInit+0x12c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 80053e8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80053ea:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80053ee:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 80053f0:	f004 f81a 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 80053f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053f8:	4832      	ldr	r0, [pc, #200]	; (80054c4 <HAL_UART_MspDeInit+0x130>)
 80053fa:	f004 f815 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 80053fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005402:	4831      	ldr	r0, [pc, #196]	; (80054c8 <HAL_UART_MspDeInit+0x134>)
}
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8005408:	f004 b80e 	b.w	8009428 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 800540c:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8005410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005414:	482b      	ldr	r0, [pc, #172]	; (80054c4 <HAL_UART_MspDeInit+0x130>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8005416:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005418:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800541c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 800541e:	f004 f803 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8005422:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005426:	4828      	ldr	r0, [pc, #160]	; (80054c8 <HAL_UART_MspDeInit+0x134>)
 8005428:	f003 fffe 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800542c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800542e:	f002 f84d 	bl	80074cc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005432:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005434:	f002 f84a 	bl	80074cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8005438:	2035      	movs	r0, #53	; 0x35
}
 800543a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 800543e:	f001 bbfb 	b.w	8006c38 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8005442:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 8005446:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800544a:	4820      	ldr	r0, [pc, #128]	; (80054cc <HAL_UART_MspDeInit+0x138>)
    __HAL_RCC_UART7_CLK_DISABLE();
 800544c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800544e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8005452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8005456:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8);
 8005458:	f003 bfe6 	b.w	8009428 <HAL_GPIO_DeInit>
    __HAL_RCC_USART3_CLK_DISABLE();
 800545c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005460:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005464:	4815      	ldr	r0, [pc, #84]	; (80054bc <HAL_UART_MspDeInit+0x128>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8005466:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 800546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8005470:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005472:	f003 bfd9 	b.w	8009428 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8005476:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 800547a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800547e:	4814      	ldr	r0, [pc, #80]	; (80054d0 <HAL_UART_MspDeInit+0x13c>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8005480:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005482:	f023 0320 	bic.w	r3, r3, #32
 8005486:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_8|GPIO_PIN_9);
 8005488:	f003 ffce 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800548c:	2140      	movs	r1, #64	; 0x40
 800548e:	480e      	ldr	r0, [pc, #56]	; (80054c8 <HAL_UART_MspDeInit+0x134>)
 8005490:	f003 ffca 	bl	8009428 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005494:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005496:	f002 f819 	bl	80074cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800549a:	2047      	movs	r0, #71	; 0x47
}
 800549c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 80054a0:	f001 bbca 	b.w	8006c38 <HAL_NVIC_DisableIRQ>
 80054a4:	40004c00 	.word	0x40004c00
 80054a8:	40005000 	.word	0x40005000
 80054ac:	40007800 	.word	0x40007800
 80054b0:	40004400 	.word	0x40004400
 80054b4:	40004800 	.word	0x40004800
 80054b8:	40011400 	.word	0x40011400
 80054bc:	40020c00 	.word	0x40020c00
 80054c0:	40020000 	.word	0x40020000
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40020800 	.word	0x40020800
 80054cc:	40021400 	.word	0x40021400
 80054d0:	40021800 	.word	0x40021800

080054d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054d4:	b530      	push	{r4, r5, lr}
 80054d6:	4601      	mov	r1, r0
 80054d8:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 80054da:	2200      	movs	r2, #0
 80054dc:	202b      	movs	r0, #43	; 0x2b
 80054de:	f001 fb4d 	bl	8006b7c <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80054e2:	202b      	movs	r0, #43	; 0x2b
 80054e4:	f001 fb94 	bl	8006c10 <HAL_NVIC_EnableIRQ>
  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80054ea:	a901      	add	r1, sp, #4
 80054ec:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 80054ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();

  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80054f0:	4d14      	ldr	r5, [pc, #80]	; (8005544 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80054f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 80054f6:	4c14      	ldr	r4, [pc, #80]	; (8005548 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005500:	9302      	str	r3, [sp, #8]
 8005502:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005504:	f005 ffde 	bl	800b4c4 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005508:	f005 ffbc 	bl	800b484 <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000 / 1000) - 1;
 800550c:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005510:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8005512:	490e      	ldr	r1, [pc, #56]	; (800554c <HAL_InitTick+0x78>)
  htim12.Init.Period = (1000000 / 1000) - 1;
 8005514:	60e2      	str	r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8005516:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005518:	fba5 0303 	umull	r0, r3, r5, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800551c:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 800551e:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005520:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.ClockDivision = 0;
 8005522:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005524:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005526:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8005528:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 800552a:	f008 f933 	bl	800d794 <HAL_TIM_Base_Init>
 800552e:	b110      	cbz	r0, 8005536 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8005530:	2001      	movs	r0, #1
}
 8005532:	b009      	add	sp, #36	; 0x24
 8005534:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8005536:	4620      	mov	r0, r4
 8005538:	f007 fba4 	bl	800cc84 <HAL_TIM_Base_Start_IT>
}
 800553c:	b009      	add	sp, #36	; 0x24
 800553e:	bd30      	pop	{r4, r5, pc}
 8005540:	40023800 	.word	0x40023800
 8005544:	431bde83 	.word	0x431bde83
 8005548:	20023a10 	.word	0x20023a10
 800554c:	40001800 	.word	0x40001800

08005550 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop

08005554 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005554:	e7fe      	b.n	8005554 <HardFault_Handler>
 8005556:	bf00      	nop

08005558 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005558:	e7fe      	b.n	8005558 <MemManage_Handler>
 800555a:	bf00      	nop

0800555c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800555c:	e7fe      	b.n	800555c <BusFault_Handler>
 800555e:	bf00      	nop

08005560 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005560:	e7fe      	b.n	8005560 <UsageFault_Handler>
 8005562:	bf00      	nop

08005564 <RCC_IRQHandler>:
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop

08005568 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <DMA1_Stream0_IRQHandler+0x8>)
 800556a:	f002 b91f 	b.w	80077ac <HAL_DMA_IRQHandler>
 800556e:	bf00      	nop
 8005570:	200237d4 	.word	0x200237d4

08005574 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <DMA1_Stream1_IRQHandler+0x8>)
 8005576:	f002 b919 	b.w	80077ac <HAL_DMA_IRQHandler>
 800557a:	bf00      	nop
 800557c:	20023218 	.word	0x20023218

08005580 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <DMA1_Stream5_IRQHandler+0x8>)
 8005582:	f002 b913 	b.w	80077ac <HAL_DMA_IRQHandler>
 8005586:	bf00      	nop
 8005588:	2002331c 	.word	0x2002331c

0800558c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800558c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800558e:	4805      	ldr	r0, [pc, #20]	; (80055a4 <ADC_IRQHandler+0x18>)
 8005590:	f001 f8d0 	bl	8006734 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005594:	4804      	ldr	r0, [pc, #16]	; (80055a8 <ADC_IRQHandler+0x1c>)
 8005596:	f001 f8cd 	bl	8006734 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800559a:	4804      	ldr	r0, [pc, #16]	; (80055ac <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800559c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 80055a0:	f001 b8c8 	b.w	8006734 <HAL_ADC_IRQHandler>
 80055a4:	200233fc 	.word	0x200233fc
 80055a8:	200230b8 	.word	0x200230b8
 80055ac:	20023444 	.word	0x20023444

080055b0 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80055b0:	4801      	ldr	r0, [pc, #4]	; (80055b8 <TIM2_IRQHandler+0x8>)
 80055b2:	f007 bfa9 	b.w	800d508 <HAL_TIM_IRQHandler>
 80055b6:	bf00      	nop
 80055b8:	20023714 	.word	0x20023714

080055bc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80055bc:	4801      	ldr	r0, [pc, #4]	; (80055c4 <TIM3_IRQHandler+0x8>)
 80055be:	f007 bfa3 	b.w	800d508 <HAL_TIM_IRQHandler>
 80055c2:	bf00      	nop
 80055c4:	20023278 	.word	0x20023278

080055c8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055c8:	4801      	ldr	r0, [pc, #4]	; (80055d0 <USART2_IRQHandler+0x8>)
 80055ca:	f009 be41 	b.w	800f250 <HAL_UART_IRQHandler>
 80055ce:	bf00      	nop
 80055d0:	20023754 	.word	0x20023754

080055d4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80055d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80055d8:	f004 b860 	b.w	800969c <HAL_GPIO_EXTI_IRQHandler>

080055dc <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80055dc:	4801      	ldr	r0, [pc, #4]	; (80055e4 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 80055de:	f007 bf93 	b.w	800d508 <HAL_TIM_IRQHandler>
 80055e2:	bf00      	nop
 80055e4:	20023a10 	.word	0x20023a10

080055e8 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80055e8:	4801      	ldr	r0, [pc, #4]	; (80055f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 80055ea:	f007 bf8d 	b.w	800d508 <HAL_TIM_IRQHandler>
 80055ee:	bf00      	nop
 80055f0:	20023834 	.word	0x20023834

080055f4 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80055f4:	4801      	ldr	r0, [pc, #4]	; (80055fc <DMA1_Stream7_IRQHandler+0x8>)
 80055f6:	f002 b8d9 	b.w	80077ac <HAL_DMA_IRQHandler>
 80055fa:	bf00      	nop
 80055fc:	200238b8 	.word	0x200238b8

08005600 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005600:	4801      	ldr	r0, [pc, #4]	; (8005608 <TIM5_IRQHandler+0x8>)
 8005602:	f007 bf81 	b.w	800d508 <HAL_TIM_IRQHandler>
 8005606:	bf00      	nop
 8005608:	200231d8 	.word	0x200231d8

0800560c <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800560c:	4801      	ldr	r0, [pc, #4]	; (8005614 <UART5_IRQHandler+0x8>)
 800560e:	f009 be1f 	b.w	800f250 <HAL_UART_IRQHandler>
 8005612:	bf00      	nop
 8005614:	2002337c 	.word	0x2002337c

08005618 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8005618:	4804      	ldr	r0, [pc, #16]	; (800562c <TIM6_DAC_IRQHandler+0x14>)
{
 800561a:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 800561c:	f001 fcf0 	bl	8007000 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8005620:	4803      	ldr	r0, [pc, #12]	; (8005630 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8005626:	f007 bf6f 	b.w	800d508 <HAL_TIM_IRQHandler>
 800562a:	bf00      	nop
 800562c:	2002349c 	.word	0x2002349c
 8005630:	2002357c 	.word	0x2002357c

08005634 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <DMA2_Stream1_IRQHandler+0x8>)
 8005636:	f002 b8b9 	b.w	80077ac <HAL_DMA_IRQHandler>
 800563a:	bf00      	nop
 800563c:	20022eb4 	.word	0x20022eb4

08005640 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005640:	4801      	ldr	r0, [pc, #4]	; (8005648 <DMA2_Stream4_IRQHandler+0x8>)
 8005642:	f002 b8b3 	b.w	80077ac <HAL_DMA_IRQHandler>
 8005646:	bf00      	nop
 8005648:	20023518 	.word	0x20023518

0800564c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800564c:	4801      	ldr	r0, [pc, #4]	; (8005654 <ETH_IRQHandler+0x8>)
 800564e:	f003 b84f 	b.w	80086f0 <HAL_ETH_IRQHandler>
 8005652:	bf00      	nop
 8005654:	20025840 	.word	0x20025840

08005658 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <OTG_FS_IRQHandler+0x8>)
 800565a:	f004 be05 	b.w	800a268 <HAL_PCD_IRQHandler>
 800565e:	bf00      	nop
 8005660:	20037dc8 	.word	0x20037dc8

08005664 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <USART6_IRQHandler+0x8>)
 8005666:	f009 bdf3 	b.w	800f250 <HAL_UART_IRQHandler>
 800566a:	bf00      	nop
 800566c:	20023610 	.word	0x20023610

08005670 <FPU_IRQHandler>:
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop

08005674 <MDIOS_IRQHandler>:
void MDIOS_IRQHandler(void)
{
  /* USER CODE BEGIN MDIOS_IRQn 0 */

  /* USER CODE END MDIOS_IRQn 0 */
  HAL_MDIOS_IRQHandler(&hmdios);
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <MDIOS_IRQHandler+0x8>)
 8005676:	f004 bcdd 	b.w	800a034 <HAL_MDIOS_IRQHandler>
 800567a:	bf00      	nop
 800567c:	2002348c 	.word	0x2002348c

08005680 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8005680:	2001      	movs	r0, #1
 8005682:	4770      	bx	lr

08005684 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <_kill+0xc>)
 8005686:	2216      	movs	r2, #22
	return -1;
}
 8005688:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 800568c:	601a      	str	r2, [r3, #0]
}
 800568e:	4770      	bx	lr
 8005690:	200368f0 	.word	0x200368f0

08005694 <_exit>:
	errno = EINVAL;
 8005694:	4b01      	ldr	r3, [pc, #4]	; (800569c <_exit+0x8>)
 8005696:	2216      	movs	r2, #22
 8005698:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 800569a:	e7fe      	b.n	800569a <_exit+0x6>
 800569c:	200368f0 	.word	0x200368f0

080056a0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80056a0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80056a2:	1e16      	subs	r6, r2, #0
 80056a4:	dd07      	ble.n	80056b6 <_read+0x16>
 80056a6:	460c      	mov	r4, r1
 80056a8:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 80056aa:	f3af 8000 	nop.w
 80056ae:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80056b2:	42a5      	cmp	r5, r4
 80056b4:	d1f9      	bne.n	80056aa <_read+0xa>
	}

	return len;
}
 80056b6:	4630      	mov	r0, r6
 80056b8:	bd70      	pop	{r4, r5, r6, pc}
 80056ba:	bf00      	nop

080056bc <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 80056c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 80056c8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80056ca:	604b      	str	r3, [r1, #4]
}
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop

080056d0 <_isatty>:

int _isatty(int file) {
	return 1;
}
 80056d0:	2001      	movs	r0, #1
 80056d2:	4770      	bx	lr

080056d4 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 80056d4:	2000      	movs	r0, #0
 80056d6:	4770      	bx	lr

080056d8 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80056d8:	490d      	ldr	r1, [pc, #52]	; (8005710 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 80056da:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80056dc:	4a0d      	ldr	r2, [pc, #52]	; (8005714 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 80056de:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 80056e0:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 80056e2:	4c0d      	ldr	r4, [pc, #52]	; (8005718 <_sbrk+0x40>)
 80056e4:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 80056e6:	b170      	cbz	r0, 8005706 <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80056e8:	4403      	add	r3, r0
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d803      	bhi.n	80056f6 <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 80056ee:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 80056f2:	600b      	str	r3, [r1, #0]
}
 80056f4:	4770      	bx	lr
		errno = ENOMEM;
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <_sbrk+0x44>)
 80056f8:	220c      	movs	r2, #12
		return (void*) -1;
 80056fa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80056fe:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8005706:	4c06      	ldr	r4, [pc, #24]	; (8005720 <_sbrk+0x48>)
 8005708:	4620      	mov	r0, r4
 800570a:	600c      	str	r4, [r1, #0]
 800570c:	e7ec      	b.n	80056e8 <_sbrk+0x10>
 800570e:	bf00      	nop
 8005710:	20001c5c 	.word	0x20001c5c
 8005714:	20080000 	.word	0x20080000
 8005718:	00010000 	.word	0x00010000
 800571c:	200368f0 	.word	0x200368f0
 8005720:	200381d8 	.word	0x200381d8

08005724 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005724:	4a0f      	ldr	r2, [pc, #60]	; (8005764 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005728:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800572c:	490f      	ldr	r1, [pc, #60]	; (800576c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800572e:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8005732:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005734:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8005738:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 800573a:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800573c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 8005740:	4e0b      	ldr	r6, [pc, #44]	; (8005770 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 8005742:	f040 0001 	orr.w	r0, r0, #1
 8005746:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8005748:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	4001      	ands	r1, r0
 800574e:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8005750:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8005758:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 800575a:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800575c:	6095      	str	r5, [r2, #8]
#endif
}
 800575e:	bc70      	pop	{r4, r5, r6}
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	e000ed00 	.word	0xe000ed00
 8005768:	40023800 	.word	0x40023800
 800576c:	fef6ffff 	.word	0xfef6ffff
 8005770:	24003010 	.word	0x24003010

08005774 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8005774:	680b      	ldr	r3, [r1, #0]
 8005776:	4a03      	ldr	r2, [pc, #12]	; (8005784 <dnsfound+0x10>)
 8005778:	2b00      	cmp	r3, #0
		ip_ready = -1;
 800577a:	bf08      	it	eq
 800577c:	f04f 33ff 	moveq.w	r3, #4294967295
 8005780:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 8005782:	4770      	bx	lr
 8005784:	20001c68 	.word	0x20001c68

08005788 <myreboot>:
void myreboot(char *msg) {
 8005788:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 800578a:	480a      	ldr	r0, [pc, #40]	; (80057b4 <myreboot+0x2c>)
void myreboot(char *msg) {
 800578c:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800578e:	f01c f829 	bl	80217e4 <iprintf>
	osDelay(2000);
 8005792:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005796:	f00c fac3 	bl	8011d20 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800579a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800579e:	4906      	ldr	r1, [pc, #24]	; (80057b8 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80057a2:	68ca      	ldr	r2, [r1, #12]
 80057a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80057a8:	4313      	orrs	r3, r2
 80057aa:	60cb      	str	r3, [r1, #12]
 80057ac:	f3bf 8f4f 	dsb	sy
    __NOP();
 80057b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80057b2:	e7fd      	b.n	80057b0 <myreboot+0x28>
 80057b4:	08027508 	.word	0x08027508
 80057b8:	e000ed00 	.word	0xe000ed00
 80057bc:	05fa0004 	.word	0x05fa0004

080057c0 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 80057c0:	b500      	push	{lr}
 80057c2:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 80057c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <sendudp+0x64>)
 80057ca:	f017 f929 	bl	801ca20 <udp_sendto>
 80057ce:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 80057d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057d6:	b943      	cbnz	r3, 80057ea <sendudp+0x2a>
 80057d8:	b25a      	sxtb	r2, r3
		busycount = 0;
 80057da:	4b13      	ldr	r3, [pc, #76]	; (8005828 <sendudp+0x68>)
 80057dc:	601a      	str	r2, [r3, #0]
	return (err);
 80057de:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80057e2:	b240      	sxtb	r0, r0
 80057e4:	b003      	add	sp, #12
 80057e6:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 80057ea:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80057ee:	480f      	ldr	r0, [pc, #60]	; (800582c <sendudp+0x6c>)
 80057f0:	b249      	sxtb	r1, r1
 80057f2:	f01b fff7 	bl	80217e4 <iprintf>
		vTaskDelay(100); //some delay!
 80057f6:	2064      	movs	r0, #100	; 0x64
 80057f8:	f00d fd48 	bl	801328c <vTaskDelay>
		if (err == ERR_MEM) {
 80057fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005800:	2bff      	cmp	r3, #255	; 0xff
 8005802:	d00c      	beq.n	800581e <sendudp+0x5e>
		if (err == ERR_USE) {
 8005804:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005808:	2bf8      	cmp	r3, #248	; 0xf8
 800580a:	d1e8      	bne.n	80057de <sendudp+0x1e>
			if (busycount++ > 10)
 800580c:	4a06      	ldr	r2, [pc, #24]	; (8005828 <sendudp+0x68>)
 800580e:	6813      	ldr	r3, [r2, #0]
 8005810:	1c59      	adds	r1, r3, #1
 8005812:	2b0a      	cmp	r3, #10
 8005814:	6011      	str	r1, [r2, #0]
 8005816:	dde2      	ble.n	80057de <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8005818:	4805      	ldr	r0, [pc, #20]	; (8005830 <sendudp+0x70>)
 800581a:	f7ff ffb5 	bl	8005788 <myreboot>
			myreboot("sendudp: out of mem");
 800581e:	4805      	ldr	r0, [pc, #20]	; (8005834 <sendudp+0x74>)
 8005820:	f7ff ffb2 	bl	8005788 <myreboot>
 8005824:	20023a64 	.word	0x20023a64
 8005828:	20001c60 	.word	0x20001c60
 800582c:	0802751c 	.word	0x0802751c
 8005830:	08027544 	.word	0x08027544
 8005834:	08027530 	.word	0x08027530

08005838 <sendstatus>:
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005838:	b5f0      	push	{r4, r5, r6, r7, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800583a:	4c24      	ldr	r4, [pc, #144]	; (80058cc <sendstatus+0x94>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800583c:	4607      	mov	r7, r0
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <sendstatus+0x98>)
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8005840:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005842:	f9b4 4000 	ldrsh.w	r4, [r4]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8005846:	b083      	sub	sp, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005848:	881d      	ldrh	r5, [r3, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800584a:	ea84 7ce4 	eor.w	ip, r4, r4, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 800584e:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <sendstatus+0x9c>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005850:	4b21      	ldr	r3, [pc, #132]	; (80058d8 <sendstatus+0xa0>)
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005852:	6812      	ldr	r2, [r2, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005854:	ebac 7ce4 	sub.w	ip, ip, r4, asr #31
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005858:	1b64      	subs	r4, r4, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800585a:	4d20      	ldr	r5, [pc, #128]	; (80058dc <sendstatus+0xa4>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800585c:	4e20      	ldr	r6, [pc, #128]	; (80058e0 <sendstatus+0xa8>)
 800585e:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005862:	2c00      	cmp	r4, #0
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005864:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005866:	881b      	ldrh	r3, [r3, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 8005868:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800586c:	f8df e080 	ldr.w	lr, [pc, #128]	; 80058f0 <sendstatus+0xb8>
 8005870:	bfb8      	it	lt
 8005872:	4264      	neglt	r4, r4
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8005874:	f8a6 c072 	strh.w	ip, [r6, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005878:	031b      	lsls	r3, r3, #12
	statuspkt.adcbase = (globaladcavg & 0xfff);	// agc
 800587a:	f8a6 2062 	strh.w	r2, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800587e:	022d      	lsls	r5, r5, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005880:	f8be c000 	ldrh.w	ip, [lr]
 8005884:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <sendstatus+0xac>)
 800588a:	b2ad      	uxth	r5, r5
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800588c:	4464      	add	r4, ip
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800588e:	f8d6 c074 	ldr.w	ip, [r6, #116]	; 0x74
 8005892:	f892 e000 	ldrb.w	lr, [r2]
 8005896:	4a14      	ldr	r2, [pc, #80]	; (80058e8 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8005898:	431c      	orrs	r4, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800589a:	ea45 050e 	orr.w	r5, r5, lr
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800589e:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80058a2:	ea0c 0202 	and.w	r2, ip, r2
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80058a6:	b2a4      	uxth	r4, r4
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80058a8:	f8d1 c004 	ldr.w	ip, [r1, #4]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80058ac:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80058ae:	4a0f      	ldr	r2, [pc, #60]	; (80058ec <sendstatus+0xb4>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80058b0:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80058b2:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80058b6:	f88c 7003 	strb.w	r7, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80058ba:	f7ff ff81 	bl	80057c0 <sendudp>
 80058be:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 80058c2:	6833      	ldr	r3, [r6, #0]
 80058c4:	3301      	adds	r3, #1
 80058c6:	6033      	str	r3, [r6, #0]
}
 80058c8:	b003      	add	sp, #12
 80058ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058cc:	20000710 	.word	0x20000710
 80058d0:	200006c8 	.word	0x200006c8
 80058d4:	200006bc 	.word	0x200006bc
 80058d8:	20000246 	.word	0x20000246
 80058dc:	200006c4 	.word	0x200006c4
 80058e0:	20022d4c 	.word	0x20022d4c
 80058e4:	200006ac 	.word	0x200006ac
 80058e8:	ffff0000 	.word	0xffff0000
 80058ec:	20023a64 	.word	0x20023a64
 80058f0:	20000002 	.word	0x20000002

080058f4 <sendtimedstatus>:
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80058f4:	4b0b      	ldr	r3, [pc, #44]	; (8005924 <sendtimedstatus+0x30>)
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80058f6:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 80058f8:	4d0b      	ldr	r5, [pc, #44]	; (8005928 <sendtimedstatus+0x34>)
 80058fa:	681c      	ldr	r4, [r3, #0]
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	429c      	cmp	r4, r3
 8005900:	d006      	beq.n	8005910 <sendtimedstatus+0x1c>
 8005902:	4b0a      	ldr	r3, [pc, #40]	; (800592c <sendtimedstatus+0x38>)
 8005904:	4e0a      	ldr	r6, [pc, #40]	; (8005930 <sendtimedstatus+0x3c>)
 8005906:	fb03 f304 	mul.w	r3, r3, r4
 800590a:	ebb6 0ff3 	cmp.w	r6, r3, ror #3
 800590e:	d201      	bcs.n	8005914 <sendtimedstatus+0x20>
}
 8005910:	bc70      	pop	{r4, r5, r6}
 8005912:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8005914:	4613      	mov	r3, r2
		talive = t1sec;
 8005916:	602c      	str	r4, [r5, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8005918:	460a      	mov	r2, r1
 800591a:	4601      	mov	r1, r0
 800591c:	2002      	movs	r0, #2
}
 800591e:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8005920:	f7ff bf8a 	b.w	8005838 <sendstatus>
 8005924:	20001c10 	.word	0x20001c10
 8005928:	20001c6c 	.word	0x20001c6c
 800592c:	eeeeeeef 	.word	0xeeeeeeef
 8005930:	02222222 	.word	0x02222222

08005934 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 800593a:	4818      	ldr	r0, [pc, #96]	; (800599c <dnslookup+0x68>)
 800593c:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 800593e:	4e18      	ldr	r6, [pc, #96]	; (80059a0 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8005940:	f01b ff50 	bl	80217e4 <iprintf>
	ip_ready = 0;
 8005944:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8005946:	4620      	mov	r0, r4
 8005948:	4639      	mov	r1, r7
 800594a:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <dnslookup+0x70>)
	ip_ready = 0;
 800594c:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800594e:	f010 fd03 	bl	8016358 <dns_gethostbyname>
 8005952:	4604      	mov	r4, r0

	switch (err) {
 8005954:	3005      	adds	r0, #5
 8005956:	d005      	beq.n	8005964 <dnslookup+0x30>
 8005958:	b114      	cbz	r4, 8005960 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 800595a:	4813      	ldr	r0, [pc, #76]	; (80059a8 <dnslookup+0x74>)
 800595c:	f01b ff42 	bl	80217e4 <iprintf>
		break;
	}
	return (err);
}
 8005960:	4620      	mov	r0, r4
 8005962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 8005964:	4811      	ldr	r0, [pc, #68]	; (80059ac <dnslookup+0x78>)
 8005966:	2514      	movs	r5, #20
 8005968:	f01b ff3c 	bl	80217e4 <iprintf>
		for (i = 0; i < 20; i++) {
 800596c:	e001      	b.n	8005972 <dnslookup+0x3e>
 800596e:	3d01      	subs	r5, #1
 8005970:	d0f3      	beq.n	800595a <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 8005972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005976:	f00c f9d3 	bl	8011d20 <osDelay>
			printf(".");
 800597a:	202e      	movs	r0, #46	; 0x2e
 800597c:	f01b ff4a 	bl	8021814 <putchar>
			if (ip_ready) {
 8005980:	6833      	ldr	r3, [r6, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f3      	beq.n	800596e <dnslookup+0x3a>
				if (ip_ready == -1) {
 8005986:	1c5a      	adds	r2, r3, #1
 8005988:	d002      	beq.n	8005990 <dnslookup+0x5c>
				return (ERR_OK);
 800598a:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 800598c:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 800598e:	e7e7      	b.n	8005960 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8005992:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 8005996:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8005998:	e7e2      	b.n	8005960 <dnslookup+0x2c>
 800599a:	bf00      	nop
 800599c:	08027560 	.word	0x08027560
 80059a0:	20001c68 	.word	0x20001c68
 80059a4:	08005775 	.word	0x08005775
 80059a8:	0802759c 	.word	0x0802759c
 80059ac:	08027574 	.word	0x08027574
 80059b0:	08027590 	.word	0x08027590

080059b4 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 80059b4:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 80059b6:	4913      	ldr	r1, [pc, #76]	; (8005a04 <locateudp+0x50>)
{
 80059b8:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 80059ba:	4813      	ldr	r0, [pc, #76]	; (8005a08 <locateudp+0x54>)
 80059bc:	f01b ff12 	bl	80217e4 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 80059c0:	4912      	ldr	r1, [pc, #72]	; (8005a0c <locateudp+0x58>)
 80059c2:	4810      	ldr	r0, [pc, #64]	; (8005a04 <locateudp+0x50>)
 80059c4:	f7ff ffb6 	bl	8005934 <dnslookup>
 80059c8:	b240      	sxtb	r0, r0
 80059ca:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 80059ce:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80059d2:	b9a3      	cbnz	r3, 80059fe <locateudp+0x4a>
		rebootme();

	ip = udpdestip.addr;
 80059d4:	4b0d      	ldr	r3, [pc, #52]	; (8005a0c <locateudp+0x58>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80059d6:	490e      	ldr	r1, [pc, #56]	; (8005a10 <locateudp+0x5c>)
	ip = udpdestip.addr;
 80059d8:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 80059da:	480e      	ldr	r0, [pc, #56]	; (8005a14 <locateudp+0x60>)
 80059dc:	0e22      	lsrs	r2, r4, #24
 80059de:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80059e2:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80059e6:	9201      	str	r2, [sp, #4]
 80059e8:	b2e2      	uxtb	r2, r4
 80059ea:	9500      	str	r5, [sp, #0]
 80059ec:	f01c f872 	bl	8021ad4 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 80059f0:	4908      	ldr	r1, [pc, #32]	; (8005a14 <locateudp+0x60>)
 80059f2:	4809      	ldr	r0, [pc, #36]	; (8005a18 <locateudp+0x64>)
 80059f4:	f01b fef6 	bl	80217e4 <iprintf>
	return (ip);
}
 80059f8:	4620      	mov	r0, r4
 80059fa:	b005      	add	sp, #20
 80059fc:	bd30      	pop	{r4, r5, pc}
		rebootme();
 80059fe:	f7fc ffd1 	bl	80029a4 <rebootme>
 8005a02:	e7e7      	b.n	80059d4 <locateudp+0x20>
 8005a04:	20023a68 	.word	0x20023a68
 8005a08:	080275c0 	.word	0x080275c0
 8005a0c:	20023a64 	.word	0x20023a64
 8005a10:	080275e0 	.word	0x080275e0
 8005a14:	20023a50 	.word	0x20023a50
 8005a18:	080275f0 	.word	0x080275f0

08005a1c <startudp>:

void startudp(uint32_t ip) {
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8005a22:	f00d fd87 	bl	8013534 <xTaskGetCurrentTaskHandle>
 8005a26:	4b68      	ldr	r3, [pc, #416]	; (8005bc8 <startudp+0x1ac>)
 8005a28:	4602      	mov	r2, r0
	osDelay(1000);
 8005a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8005a2e:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8005a30:	f00c f976 	bl	8011d20 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8005a34:	f017 f8c0 	bl	801cbb8 <udp_new>
	if (pcb == NULL) {
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 80b7 	beq.w	8005bac <startudp+0x190>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4962      	ldr	r1, [pc, #392]	; (8005bcc <startudp+0x1b0>)
 8005a44:	4680      	mov	r8, r0
 8005a46:	f016 fe57 	bl	801c6f8 <udp_bind>
 8005a4a:	4682      	mov	sl, r0
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	f040 80a9 	bne.w	8005ba4 <startudp+0x188>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005a52:	2241      	movs	r2, #65	; 0x41
 8005a54:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 8005a58:	2036      	movs	r0, #54	; 0x36
 8005a5a:	f011 fe19 	bl	8017690 <pbuf_alloc>

	if (p1 == NULL) {
 8005a5e:	9000      	str	r0, [sp, #0]
 8005a60:	2800      	cmp	r0, #0
 8005a62:	f000 80ad 	beq.w	8005bc0 <startudp+0x1a4>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 8005a66:	4c5a      	ldr	r4, [pc, #360]	; (8005bd0 <startudp+0x1b4>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005a68:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 8005a6a:	9d00      	ldr	r5, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005a6c:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 8005a70:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005a72:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 8005a74:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 8005a76:	f011 fe0b 	bl	8017690 <pbuf_alloc>
	if (p2 == NULL) {
 8005a7a:	9001      	str	r0, [sp, #4]
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	f000 8099 	beq.w	8005bb4 <startudp+0x198>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005a82:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005a84:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005a86:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005a88:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005a8a:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005a8e:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8005a90:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8005a92:	f011 fdfd 	bl	8017690 <pbuf_alloc>
	if (ps == NULL) {
 8005a96:	4681      	mov	r9, r0
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f000 8093 	beq.w	8005bc4 <startudp+0x1a8>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8005a9e:	4c4d      	ldr	r4, [pc, #308]	; (8005bd4 <startudp+0x1b8>)

	osDelay(5000);
 8005aa0:	f241 3088 	movw	r0, #5000	; 0x1388
 8005aa4:	4f4c      	ldr	r7, [pc, #304]	; (8005bd8 <startudp+0x1bc>)
	ps->payload = &statuspkt;	// point at status / GPS data
 8005aa6:	f8c9 4004 	str.w	r4, [r9, #4]
	osDelay(5000);
 8005aaa:	f00c f939 	bl	8011d20 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8005aae:	4b4b      	ldr	r3, [pc, #300]	; (8005bdc <startudp+0x1c0>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4a4b      	ldr	r2, [pc, #300]	; (8005be0 <startudp+0x1c4>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8005ab4:	484b      	ldr	r0, [pc, #300]	; (8005be4 <startudp+0x1c8>)
	statuspkt.auxstatus1 = 0;
 8005ab6:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 8005aba:	4e4b      	ldr	r6, [pc, #300]	; (8005be8 <startudp+0x1cc>)
 8005abc:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8005ac0:	f8df b154 	ldr.w	fp, [pc, #340]	; 8005c18 <startudp+0x1fc>
 8005ac4:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8005ac8:	4d48      	ldr	r5, [pc, #288]	; (8005bec <startudp+0x1d0>)
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8005aca:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8005ace:	7011      	strb	r1, [r2, #0]
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8005ad0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8005ad4:	f01b ff22 	bl	802191c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005ad8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005adc:	2001      	movs	r0, #1
 8005ade:	f00d fe6f 	bl	80137c0 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d057      	beq.n	8005b96 <startudp+0x17a>
			sigsend = 0;
 8005ae6:	2200      	movs	r2, #0
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8005ae8:	7833      	ldrb	r3, [r6, #0]
			sigsend = 0;
 8005aea:	603a      	str	r2, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f3      	beq.n	8005ad8 <startudp+0xbc>
 8005af0:	4a3f      	ldr	r2, [pc, #252]	; (8005bf0 <startudp+0x1d4>)
 8005af2:	f8db 3000 	ldr.w	r3, [fp]
 8005af6:	6812      	ldr	r2, [r2, #0]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	d1ed      	bne.n	8005ad8 <startudp+0xbc>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8005afc:	4a3d      	ldr	r2, [pc, #244]	; (8005bf4 <startudp+0x1d8>)
 8005afe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	2a00      	cmp	r2, #0
 8005b06:	bf08      	it	eq
 8005b08:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8005b0a:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8005b0c:	468a      	mov	sl, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8005b0e:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8005b10:	6822      	ldr	r2, [r4, #0]
 8005b12:	684b      	ldr	r3, [r1, #4]
 8005b14:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	684a      	ldr	r2, [r1, #4]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8005b1e:	6823      	ldr	r3, [r4, #0]
 8005b20:	684a      	ldr	r2, [r1, #4]
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 8005b26:	7b89      	ldrb	r1, [r1, #14]
 8005b28:	2901      	cmp	r1, #1
 8005b2a:	d006      	beq.n	8005b3a <startudp+0x11e>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	f01b fe59 	bl	80217e4 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8005b32:	f89a 100e 	ldrb.w	r1, [sl, #14]
 8005b36:	2901      	cmp	r1, #1
 8005b38:	d1f8      	bne.n	8005b2c <startudp+0x110>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8005b3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b3e:	4a2e      	ldr	r2, [pc, #184]	; (8005bf8 <startudp+0x1dc>)
 8005b40:	4651      	mov	r1, sl
 8005b42:	4640      	mov	r0, r8
 8005b44:	f7ff fe3c 	bl	80057c0 <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 8005b48:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <startudp+0x1e0>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 8005b4a:	f88d 000f 	strb.w	r0, [sp, #15]
				if (sendendstatus > 0) {
 8005b4e:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 8005b50:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8005b54:	3301      	adds	r3, #1
 8005b56:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 8005b5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005b5e:	3301      	adds	r3, #1
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	6023      	str	r3, [r4, #0]
				if (sendendstatus > 0) {
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	d0b3      	beq.n	8005ad8 <startudp+0xbc>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 8005b70:	4923      	ldr	r1, [pc, #140]	; (8005c00 <startudp+0x1e4>)
 8005b72:	4642      	mov	r2, r8
 8005b74:	2001      	movs	r0, #1
 8005b76:	780b      	ldrb	r3, [r1, #0]
 8005b78:	4649      	mov	r1, r9
 8005b7a:	f7ff fe5d 	bl	8005838 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <startudp+0x1e0>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005b82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b86:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 8005b88:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8005b8c:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8005b8e:	f00d fe17 	bl	80137c0 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8005b92:	2800      	cmp	r0, #0
 8005b94:	d1a7      	bne.n	8005ae6 <startudp+0xca>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <startudp+0x1e4>)
 8005b98:	4641      	mov	r1, r8
 8005b9a:	4648      	mov	r0, r9
 8005b9c:	781a      	ldrb	r2, [r3, #0]
 8005b9e:	f7ff fea9 	bl	80058f4 <sendtimedstatus>
 8005ba2:	e799      	b.n	8005ad8 <startudp+0xbc>
		printf("startudp: udp_bind failed!\n");
 8005ba4:	4817      	ldr	r0, [pc, #92]	; (8005c04 <startudp+0x1e8>)
 8005ba6:	f01b feb9 	bl	802191c <puts>
		for (;;)
 8005baa:	e7fe      	b.n	8005baa <startudp+0x18e>
		printf("startudp: udp_new failed!\n");
 8005bac:	4816      	ldr	r0, [pc, #88]	; (8005c08 <startudp+0x1ec>)
 8005bae:	f01b feb5 	bl	802191c <puts>
		for (;;)
 8005bb2:	e7fe      	b.n	8005bb2 <startudp+0x196>
		printf("startudp: p2 buf_alloc failed!\n");
 8005bb4:	4815      	ldr	r0, [pc, #84]	; (8005c0c <startudp+0x1f0>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8005bb6:	b005      	add	sp, #20
 8005bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8005bbc:	f01b beae 	b.w	802191c <puts>
		printf("startudp: p1 buf_alloc failed!\n");
 8005bc0:	4813      	ldr	r0, [pc, #76]	; (8005c10 <startudp+0x1f4>)
 8005bc2:	e7f8      	b.n	8005bb6 <startudp+0x19a>
		printf("startudp: ps buf_alloc failed!\n");
 8005bc4:	4813      	ldr	r0, [pc, #76]	; (8005c14 <startudp+0x1f8>)
 8005bc6:	e7f6      	b.n	8005bb6 <startudp+0x19a>
 8005bc8:	200007b8 	.word	0x200007b8
 8005bcc:	08040cd4 	.word	0x08040cd4
 8005bd0:	20022dfc 	.word	0x20022dfc
 8005bd4:	20022d4c 	.word	0x20022d4c
 8005bd8:	20000728 	.word	0x20000728
 8005bdc:	dec0edfe 	.word	0xdec0edfe
 8005be0:	20000712 	.word	0x20000712
 8005be4:	0802769c 	.word	0x0802769c
 8005be8:	20001c65 	.word	0x20001c65
 8005bec:	080276d0 	.word	0x080276d0
 8005bf0:	200006c4 	.word	0x200006c4
 8005bf4:	200006b8 	.word	0x200006b8
 8005bf8:	20023a64 	.word	0x20023a64
 8005bfc:	20000720 	.word	0x20000720
 8005c00:	200006ac 	.word	0x200006ac
 8005c04:	08027620 	.word	0x08027620
 8005c08:	08027604 	.word	0x08027604
 8005c0c:	0802765c 	.word	0x0802765c
 8005c10:	0802763c 	.word	0x0802763c
 8005c14:	0802767c 	.word	0x0802767c
 8005c18:	20023a60 	.word	0x20023a60

08005c1c <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8005c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8005c1e:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <tag_callback+0x150>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8005c20:	4604      	mov	r4, r0
 8005c22:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005c24:	4852      	ldr	r0, [pc, #328]	; (8005d70 <tag_callback+0x154>)
	if (ledsenabled) {
 8005c26:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005c28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d03a      	beq.n	8005ca6 <tag_callback+0x8a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8005c30:	f003 fd1e 	bl	8009670 <HAL_GPIO_TogglePin>
 8005c34:	4d4f      	ldr	r5, [pc, #316]	; (8005d74 <tag_callback+0x158>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 8005c36:	4e50      	ldr	r6, [pc, #320]	; (8005d78 <tag_callback+0x15c>)
 8005c38:	e001      	b.n	8005c3e <tag_callback+0x22>
 8005c3a:	f01b fe6f 	bl	802191c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8005c3e:	2101      	movs	r1, #1
 8005c40:	6828      	ldr	r0, [r5, #0]
 8005c42:	f00c fe0d 	bl	8012860 <xQueueSemaphoreTake>
 8005c46:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8005c48:	4630      	mov	r0, r6
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d1f5      	bne.n	8005c3a <tag_callback+0x1e>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 8005c4e:	1f22      	subs	r2, r4, #4
 8005c50:	2a07      	cmp	r2, #7
 8005c52:	d819      	bhi.n	8005c88 <tag_callback+0x6c>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8005c54:	4949      	ldr	r1, [pc, #292]	; (8005d7c <tag_callback+0x160>)
 8005c56:	4093      	lsls	r3, r2
 8005c58:	4a49      	ldr	r2, [pc, #292]	; (8005d80 <tag_callback+0x164>)
 8005c5a:	7809      	ldrb	r1, [r1, #0]
 8005c5c:	400b      	ands	r3, r1
 8005c5e:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8005c60:	bb5b      	cbnz	r3, 8005cba <tag_callback+0x9e>
			strcpy(newstring, "0");
 8005c62:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <tag_callback+0x168>)
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8005c68:	2300      	movs	r3, #0
 8005c6a:	6828      	ldr	r0, [r5, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	4619      	mov	r1, r3
 8005c70:	f00c fb70 	bl	8012354 <xQueueGenericSend>
 8005c74:	2801      	cmp	r0, #1
 8005c76:	d002      	beq.n	8005c7e <tag_callback+0x62>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8005c78:	4843      	ldr	r0, [pc, #268]	; (8005d88 <tag_callback+0x16c>)
 8005c7a:	f01b fe4f 	bl	802191c <puts>
	}
	return (strlen(newstring));
 8005c7e:	4638      	mov	r0, r7
}
 8005c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8005c84:	f7fa bae6 	b.w	8000254 <strlen>
		switch (index) {
 8005c88:	2c14      	cmp	r4, #20
 8005c8a:	d868      	bhi.n	8005d5e <tag_callback+0x142>
 8005c8c:	e8df f004 	tbb	[pc, r4]
 8005c90:	0e585d62 	.word	0x0e585d62
 8005c94:	67676767 	.word	0x67676767
 8005c98:	67676767 	.word	0x67676767
 8005c9c:	3b444d54 	.word	0x3b444d54
 8005ca0:	21262b30 	.word	0x21262b30
 8005ca4:	19          	.byte	0x19
 8005ca5:	00          	.byte	0x00
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8005ca6:	f003 fcc9 	bl	800963c <HAL_GPIO_WritePin>
 8005caa:	e7c3      	b.n	8005c34 <tag_callback+0x18>
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8005cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cb0:	482f      	ldr	r0, [pc, #188]	; (8005d70 <tag_callback+0x154>)
 8005cb2:	f003 fcb1 	bl	8009618 <HAL_GPIO_ReadPin>
 8005cb6:	2801      	cmp	r0, #1
 8005cb8:	d1d3      	bne.n	8005c62 <tag_callback+0x46>
			strcpy(newstring, "1");
 8005cba:	4b34      	ldr	r3, [pc, #208]	; (8005d8c <tag_callback+0x170>)
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	803b      	strh	r3, [r7, #0]
 8005cc0:	e7d2      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8005cc2:	4b33      	ldr	r3, [pc, #204]	; (8005d90 <tag_callback+0x174>)
 8005cc4:	881b      	ldrh	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bf14      	ite	ne
 8005cca:	2331      	movne	r3, #49	; 0x31
 8005ccc:	2330      	moveq	r3, #48	; 0x30
 8005cce:	803b      	strh	r3, [r7, #0]
			break;
 8005cd0:	e7ca      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, gpsstr);		// GPS Status
 8005cd2:	4930      	ldr	r1, [pc, #192]	; (8005d94 <tag_callback+0x178>)
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f01b ffa4 	bl	8021c22 <strcpy>
			break;
 8005cda:	e7c5      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, statstr);		// Detector Status
 8005cdc:	492e      	ldr	r1, [pc, #184]	; (8005d98 <tag_callback+0x17c>)
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f01b ff9f 	bl	8021c22 <strcpy>
			break;
 8005ce4:	e7c0      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, snstr);			// Detector ID
 8005ce6:	492d      	ldr	r1, [pc, #180]	; (8005d9c <tag_callback+0x180>)
 8005ce8:	4638      	mov	r0, r7
 8005cea:	f01b ff9a 	bl	8021c22 <strcpy>
			break;
 8005cee:	e7bb      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8005cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005cf4:	482a      	ldr	r0, [pc, #168]	; (8005da0 <tag_callback+0x184>)
 8005cf6:	f003 fc8f 	bl	8009618 <HAL_GPIO_ReadPin>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	bf14      	ite	ne
 8005cfe:	2330      	movne	r3, #48	; 0x30
 8005d00:	2331      	moveq	r3, #49	; 0x31
 8005d02:	803b      	strh	r3, [r7, #0]
			break;
 8005d04:	e7b0      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 8005d06:	4b27      	ldr	r3, [pc, #156]	; (8005da4 <tag_callback+0x188>)
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	f013 0f04 	tst.w	r3, #4
 8005d0e:	bf14      	ite	ne
 8005d10:	2331      	movne	r3, #49	; 0x31
 8005d12:	2330      	moveq	r3, #48	; 0x30
 8005d14:	803b      	strh	r3, [r7, #0]
			break;
 8005d16:	e7a7      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 8005d18:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <tag_callback+0x188>)
 8005d1a:	881b      	ldrh	r3, [r3, #0]
 8005d1c:	f013 0f02 	tst.w	r3, #2
 8005d20:	bf14      	ite	ne
 8005d22:	2331      	movne	r3, #49	; 0x31
 8005d24:	2330      	moveq	r3, #48	; 0x30
 8005d26:	803b      	strh	r3, [r7, #0]
			break;
 8005d28:	e79e      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8005d2a:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <tag_callback+0x188>)
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	3330      	adds	r3, #48	; 0x30
 8005d34:	803b      	strh	r3, [r7, #0]
			break;
 8005d36:	e797      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, "5");
 8005d38:	4b1b      	ldr	r3, [pc, #108]	; (8005da8 <tag_callback+0x18c>)
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	803b      	strh	r3, [r7, #0]
			break;
 8005d3e:	e793      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, nowtimestr);
 8005d40:	491a      	ldr	r1, [pc, #104]	; (8005dac <tag_callback+0x190>)
 8005d42:	4638      	mov	r0, r7
 8005d44:	f01b ff6d 	bl	8021c22 <strcpy>
			break;
 8005d48:	e78e      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, pressstr);		// pressure
 8005d4a:	4919      	ldr	r1, [pc, #100]	; (8005db0 <tag_callback+0x194>)
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	f01b ff68 	bl	8021c22 <strcpy>
			break;
 8005d52:	e789      	b.n	8005c68 <tag_callback+0x4c>
			strcpy(newstring, tempstr);		// temperature
 8005d54:	4917      	ldr	r1, [pc, #92]	; (8005db4 <tag_callback+0x198>)
 8005d56:	4638      	mov	r0, r7
 8005d58:	f01b ff63 	bl	8021c22 <strcpy>
			break;
 8005d5c:	e784      	b.n	8005c68 <tag_callback+0x4c>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8005d5e:	4622      	mov	r2, r4
 8005d60:	4915      	ldr	r1, [pc, #84]	; (8005db8 <tag_callback+0x19c>)
 8005d62:	4638      	mov	r0, r7
 8005d64:	f01b feb6 	bl	8021ad4 <siprintf>
			break;
 8005d68:	e77e      	b.n	8005c68 <tag_callback+0x4c>
 8005d6a:	bf00      	nop
 8005d6c:	20000242 	.word	0x20000242
 8005d70:	40020c00 	.word	0x40020c00
 8005d74:	20023578 	.word	0x20023578
 8005d78:	080277b8 	.word	0x080277b8
 8005d7c:	20000244 	.word	0x20000244
 8005d80:	20023aac 	.word	0x20023aac
 8005d84:	080408b0 	.word	0x080408b0
 8005d88:	080277e4 	.word	0x080277e4
 8005d8c:	08027598 	.word	0x08027598
 8005d90:	20000010 	.word	0x20000010
 8005d94:	20000014 	.word	0x20000014
 8005d98:	20000104 	.word	0x20000104
 8005d9c:	20000084 	.word	0x20000084
 8005da0:	40021000 	.word	0x40021000
 8005da4:	20000246 	.word	0x20000246
 8005da8:	0803ec28 	.word	0x0803ec28
 8005dac:	20000054 	.word	0x20000054
 8005db0:	20000074 	.word	0x20000074
 8005db4:	2000020c 	.word	0x2000020c
 8005db8:	080277c4 	.word	0x080277c4

08005dbc <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005dbe:	4d3d      	ldr	r5, [pc, #244]	; (8005eb4 <returnpage+0xf8>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005dc0:	b08d      	sub	sp, #52	; 0x34
 8005dc2:	4616      	mov	r6, r2
 8005dc4:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005dc8:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8005dca:	f88d 100e 	strb.w	r1, [sp, #14]
 8005dce:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8005dd2:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8005dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005dd8:	682d      	ldr	r5, [r5, #0]
 8005dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ddc:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8005dde:	b10f      	cbz	r7, 8005de4 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8005de0:	b00d      	add	sp, #52	; 0x34
 8005de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8005de4:	aa06      	add	r2, sp, #24
 8005de6:	a905      	add	r1, sp, #20
 8005de8:	4b33      	ldr	r3, [pc, #204]	; (8005eb8 <returnpage+0xfc>)
 8005dea:	4630      	mov	r0, r6
 8005dec:	9201      	str	r2, [sp, #4]
 8005dee:	aa04      	add	r2, sp, #16
 8005df0:	9100      	str	r1, [sp, #0]
 8005df2:	4932      	ldr	r1, [pc, #200]	; (8005ebc <returnpage+0x100>)
 8005df4:	f01b fe8e 	bl	8021b14 <siscanf>
		if (nconv != EOF) {
 8005df8:	1c43      	adds	r3, r0, #1
 8005dfa:	d032      	beq.n	8005e62 <returnpage+0xa6>
			switch (nconv) {
 8005dfc:	2802      	cmp	r0, #2
 8005dfe:	d020      	beq.n	8005e42 <returnpage+0x86>
 8005e00:	dc13      	bgt.n	8005e2a <returnpage+0x6e>
 8005e02:	2801      	cmp	r0, #1
 8005e04:	d128      	bne.n	8005e58 <returnpage+0x9c>
				if (statuspkt.uid != sn) {
 8005e06:	4a2e      	ldr	r2, [pc, #184]	; (8005ec0 <returnpage+0x104>)
 8005e08:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8005e0c:	9904      	ldr	r1, [sp, #16]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	428b      	cmp	r3, r1
 8005e12:	d0e5      	beq.n	8005de0 <returnpage+0x24>
					statuspkt.uid = sn;
 8005e14:	9b04      	ldr	r3, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8005e16:	482b      	ldr	r0, [pc, #172]	; (8005ec4 <returnpage+0x108>)
					statuspkt.uid = sn;
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8005e1e:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8005e22:	b289      	uxth	r1, r1
 8005e24:	f01b fcde 	bl	80217e4 <iprintf>
 8005e28:	e7da      	b.n	8005de0 <returnpage+0x24>
			switch (nconv) {
 8005e2a:	1ec3      	subs	r3, r0, #3
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d813      	bhi.n	8005e58 <returnpage+0x9c>
				if (p1 == 1) {		// reboot
 8005e30:	9b05      	ldr	r3, [sp, #20]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d033      	beq.n	8005e9e <returnpage+0xe2>
				if (p1 == 2) {		// freeze the UDP streaming
 8005e36:	9b05      	ldr	r3, [sp, #20]
 8005e38:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 8005e3a:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <returnpage+0x10c>)
				if (p1 == 2) {		// freeze the UDP streaming
 8005e3c:	d029      	beq.n	8005e92 <returnpage+0xd6>
					globalfreeze = 0;
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 8005e42:	4c1d      	ldr	r4, [pc, #116]	; (8005eb8 <returnpage+0xfc>)
 8005e44:	4620      	mov	r0, r4
 8005e46:	f7fa fa05 	bl	8000254 <strlen>
 8005e4a:	2806      	cmp	r0, #6
 8005e4c:	d918      	bls.n	8005e80 <returnpage+0xc4>
				printf("Server -> Target UDP host: %s\n", udp_target);
 8005e4e:	491a      	ldr	r1, [pc, #104]	; (8005eb8 <returnpage+0xfc>)
 8005e50:	481e      	ldr	r0, [pc, #120]	; (8005ecc <returnpage+0x110>)
 8005e52:	f01b fcc7 	bl	80217e4 <iprintf>
 8005e56:	e7d6      	b.n	8005e06 <returnpage+0x4a>
				printf("Wrong number of params from Server -> %d\n", nconv);
 8005e58:	4601      	mov	r1, r0
 8005e5a:	481d      	ldr	r0, [pc, #116]	; (8005ed0 <returnpage+0x114>)
 8005e5c:	f01b fcc2 	bl	80217e4 <iprintf>
				break;
 8005e60:	e7be      	b.n	8005de0 <returnpage+0x24>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 8005e62:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8005e66:	ac0c      	add	r4, sp, #48	; 0x30
 8005e68:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8005e6c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005e70:	4818      	ldr	r0, [pc, #96]	; (8005ed4 <returnpage+0x118>)
 8005e72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e76:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8005e7a:	f01b fcb3 	bl	80217e4 <iprintf>
}
 8005e7e:	e7af      	b.n	8005de0 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 8005e80:	4d15      	ldr	r5, [pc, #84]	; (8005ed8 <returnpage+0x11c>)
 8005e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e84:	6020      	str	r0, [r4, #0]
 8005e86:	6828      	ldr	r0, [r5, #0]
 8005e88:	6061      	str	r1, [r4, #4]
 8005e8a:	6120      	str	r0, [r4, #16]
 8005e8c:	60a2      	str	r2, [r4, #8]
 8005e8e:	60e3      	str	r3, [r4, #12]
 8005e90:	e7dd      	b.n	8005e4e <returnpage+0x92>
					globalfreeze = 1;
 8005e92:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 8005e94:	4811      	ldr	r0, [pc, #68]	; (8005edc <returnpage+0x120>)
					globalfreeze = 1;
 8005e96:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 8005e98:	f01b fd40 	bl	802191c <puts>
 8005e9c:	e7d1      	b.n	8005e42 <returnpage+0x86>
					printf("Server -> commands a reboot...\n");
 8005e9e:	4810      	ldr	r0, [pc, #64]	; (8005ee0 <returnpage+0x124>)
 8005ea0:	f01b fd3c 	bl	802191c <puts>
					osDelay(2000);
 8005ea4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005ea8:	f00b ff3a 	bl	8011d20 <osDelay>
					rebootme();
 8005eac:	f7fc fd7a 	bl	80029a4 <rebootme>
 8005eb0:	e7c1      	b.n	8005e36 <returnpage+0x7a>
 8005eb2:	bf00      	nop
 8005eb4:	08025ae8 	.word	0x08025ae8
 8005eb8:	20023a68 	.word	0x20023a68
 8005ebc:	080277fc 	.word	0x080277fc
 8005ec0:	20022d4c 	.word	0x20022d4c
 8005ec4:	08027884 	.word	0x08027884
 8005ec8:	20023a60 	.word	0x20023a60
 8005ecc:	08027864 	.word	0x08027864
 8005ed0:	080278a4 	.word	0x080278a4
 8005ed4:	080278d0 	.word	0x080278d0
 8005ed8:	08027850 	.word	0x08027850
 8005edc:	08027828 	.word	0x08027828
 8005ee0:	08027808 	.word	0x08027808

08005ee4 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8005ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	4615      	mov	r5, r2
 8005eec:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8005eee:	220a      	movs	r2, #10
 8005ef0:	a903      	add	r1, sp, #12
 8005ef2:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8005ef4:	4699      	mov	r9, r3
 8005ef6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8005ef8:	f01c fca4 	bl	8022844 <strtol>
 8005efc:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8005efe:	4621      	mov	r1, r4
 8005f00:	462a      	mov	r2, r5
 8005f02:	486f      	ldr	r0, [pc, #444]	; (80060c0 <httpd_cgi_handler+0x1dc>)
 8005f04:	4633      	mov	r3, r6
 8005f06:	f01b fc6d 	bl	80217e4 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005f0a:	2d00      	cmp	r5, #0
 8005f0c:	dd37      	ble.n	8005f7e <httpd_cgi_handler+0x9a>
 8005f0e:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005f10:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80060f0 <httpd_cgi_handler+0x20c>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005f14:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80060f4 <httpd_cgi_handler+0x210>
		switch (j) {
 8005f18:	f1a6 030a 	sub.w	r3, r6, #10
 8005f1c:	2b0e      	cmp	r3, #14
 8005f1e:	f200 80c9 	bhi.w	80060b4 <httpd_cgi_handler+0x1d0>
 8005f22:	e8df f003 	tbb	[pc, r3]
 8005f26:	9bb3      	.short	0x9bb3
 8005f28:	08080808 	.word	0x08080808
 8005f2c:	08080808 	.word	0x08080808
 8005f30:	834d5f71 	.word	0x834d5f71
 8005f34:	3a          	.byte	0x3a
 8005f35:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8005f36:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005f38:	2101      	movs	r1, #1
 8005f3a:	f1a6 000c 	sub.w	r0, r6, #12
 8005f3e:	4b61      	ldr	r3, [pc, #388]	; (80060c4 <httpd_cgi_handler+0x1e0>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8005f40:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8005f42:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005f46:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8005f48:	2a30      	cmp	r2, #48	; 0x30
 8005f4a:	d01b      	beq.n	8005f84 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	4311      	orrs	r1, r2
 8005f50:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005f52:	f001 0202 	and.w	r2, r1, #2
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005f56:	4650      	mov	r0, sl
 8005f58:	7019      	strb	r1, [r3, #0]
			j -= 11;	// now offset 0
 8005f5a:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8005f5c:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8005f60:	f01b fc40 	bl	80217e4 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8005f64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4a56      	ldr	r2, [pc, #344]	; (80060c4 <httpd_cgi_handler+0x1e0>)
 8005f6c:	2188      	movs	r1, #136	; 0x88
 8005f6e:	9000      	str	r0, [sp, #0]
 8005f70:	4855      	ldr	r0, [pc, #340]	; (80060c8 <httpd_cgi_handler+0x1e4>)
 8005f72:	f003 fdd5 	bl	8009b20 <HAL_I2C_Master_Transmit>
 8005f76:	b960      	cbnz	r0, 8005f92 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005f78:	3401      	adds	r4, #1
 8005f7a:	42a5      	cmp	r5, r4
 8005f7c:	d1cc      	bne.n	8005f18 <httpd_cgi_handler+0x34>
}
 8005f7e:	b005      	add	sp, #20
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8005f84:	2201      	movs	r2, #1
 8005f86:	7819      	ldrb	r1, [r3, #0]
 8005f88:	fa02 f600 	lsl.w	r6, r2, r0
 8005f8c:	ea21 0106 	bic.w	r1, r1, r6
 8005f90:	e7df      	b.n	8005f52 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8005f92:	484e      	ldr	r0, [pc, #312]	; (80060cc <httpd_cgi_handler+0x1e8>)
 8005f94:	f01b fc26 	bl	80217e4 <iprintf>
 8005f98:	e7ee      	b.n	8005f78 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	3c01      	subs	r4, #1
 8005f9e:	484c      	ldr	r0, [pc, #304]	; (80060d0 <httpd_cgi_handler+0x1ec>)
 8005fa0:	440c      	add	r4, r1
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fa8:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8005faa:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fac:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8005fb0:	bf18      	it	ne
 8005fb2:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fb4:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8005fb6:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fb8:	dcf3      	bgt.n	8005fa2 <httpd_cgi_handler+0xbe>
}
 8005fba:	b005      	add	sp, #20
 8005fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc0:	4e44      	ldr	r6, [pc, #272]	; (80060d4 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	8830      	ldrh	r0, [r6, #0]
 8005fc6:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fc8:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8005fca:	2b30      	cmp	r3, #48	; 0x30
 8005fcc:	bf0c      	ite	eq
 8005fce:	f020 0001 	biceq.w	r0, r0, #1
 8005fd2:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8005fd6:	f7fd ffcd 	bl	8003f74 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fda:	42a5      	cmp	r5, r4
 8005fdc:	dcf1      	bgt.n	8005fc2 <httpd_cgi_handler+0xde>
}
 8005fde:	b005      	add	sp, #20
 8005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe4:	4e3b      	ldr	r6, [pc, #236]	; (80060d4 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	8830      	ldrh	r0, [r6, #0]
 8005fea:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005fec:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	bf0c      	ite	eq
 8005ff2:	f020 0002 	biceq.w	r0, r0, #2
 8005ff6:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8005ffa:	f7fd ffbb 	bl	8003f74 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8005ffe:	42a5      	cmp	r5, r4
 8006000:	dcf1      	bgt.n	8005fe6 <httpd_cgi_handler+0x102>
}
 8006002:	b005      	add	sp, #20
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	4e32      	ldr	r6, [pc, #200]	; (80060d4 <httpd_cgi_handler+0x1f0>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	8830      	ldrh	r0, [r6, #0]
 800600e:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006010:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006012:	2b30      	cmp	r3, #48	; 0x30
 8006014:	bf0c      	ite	eq
 8006016:	f020 0004 	biceq.w	r0, r0, #4
 800601a:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 800601e:	f7fd ffa9 	bl	8003f74 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006022:	42a5      	cmp	r5, r4
 8006024:	dcf1      	bgt.n	800600a <httpd_cgi_handler+0x126>
}
 8006026:	b005      	add	sp, #20
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602c:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 800602e:	4e2a      	ldr	r6, [pc, #168]	; (80060d8 <httpd_cgi_handler+0x1f4>)
 8006030:	e004      	b.n	800603c <httpd_cgi_handler+0x158>
 8006032:	f003 fb03 	bl	800963c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006036:	42a5      	cmp	r5, r4
 8006038:	dda1      	ble.n	8005f7e <httpd_cgi_handler+0x9a>
 800603a:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 800603c:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 800603e:	2201      	movs	r2, #1
 8006040:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006044:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8006046:	4423      	add	r3, r4
 8006048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800604c:	2b31      	cmp	r3, #49	; 0x31
 800604e:	d1f0      	bne.n	8006032 <httpd_cgi_handler+0x14e>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8006050:	2200      	movs	r2, #0
 8006052:	f003 faf3 	bl	800963c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006056:	42a5      	cmp	r5, r4
 8006058:	dcef      	bgt.n	800603a <httpd_cgi_handler+0x156>
 800605a:	e790      	b.n	8005f7e <httpd_cgi_handler+0x9a>
 800605c:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800605e:	4e1f      	ldr	r6, [pc, #124]	; (80060dc <httpd_cgi_handler+0x1f8>)
 8006060:	e004      	b.n	800606c <httpd_cgi_handler+0x188>
 8006062:	f003 faeb 	bl	800963c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006066:	42ac      	cmp	r4, r5
 8006068:	da89      	bge.n	8005f7e <httpd_cgi_handler+0x9a>
 800606a:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 800606c:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 800606e:	2201      	movs	r2, #1
 8006070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006074:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8006076:	4423      	add	r3, r4
 8006078:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800607c:	2b30      	cmp	r3, #48	; 0x30
 800607e:	d1f0      	bne.n	8006062 <httpd_cgi_handler+0x17e>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006080:	2200      	movs	r2, #0
 8006082:	f003 fadb 	bl	800963c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006086:	42a5      	cmp	r5, r4
 8006088:	dcef      	bgt.n	800606a <httpd_cgi_handler+0x186>
 800608a:	e778      	b.n	8005f7e <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 800608c:	4814      	ldr	r0, [pc, #80]	; (80060e0 <httpd_cgi_handler+0x1fc>)
 800608e:	f01b fc45 	bl	802191c <puts>
			osDelay(1000);
 8006092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006096:	f00b fe43 	bl	8011d20 <osDelay>
 800609a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800609e:	4911      	ldr	r1, [pc, #68]	; (80060e4 <httpd_cgi_handler+0x200>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80060a0:	4b11      	ldr	r3, [pc, #68]	; (80060e8 <httpd_cgi_handler+0x204>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80060a2:	68ca      	ldr	r2, [r1, #12]
 80060a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80060a8:	4313      	orrs	r3, r2
 80060aa:	60cb      	str	r3, [r1, #12]
 80060ac:	f3bf 8f4f 	dsb	sy
    __NOP();
 80060b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80060b2:	e7fd      	b.n	80060b0 <httpd_cgi_handler+0x1cc>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 80060b4:	f8d9 1000 	ldr.w	r1, [r9]
 80060b8:	480c      	ldr	r0, [pc, #48]	; (80060ec <httpd_cgi_handler+0x208>)
 80060ba:	f01b fb93 	bl	80217e4 <iprintf>
			break;
 80060be:	e75b      	b.n	8005f78 <httpd_cgi_handler+0x94>
 80060c0:	0802790c 	.word	0x0802790c
 80060c4:	20000244 	.word	0x20000244
 80060c8:	20023100 	.word	0x20023100
 80060cc:	08027274 	.word	0x08027274
 80060d0:	20000010 	.word	0x20000010
 80060d4:	20000246 	.word	0x20000246
 80060d8:	40021000 	.word	0x40021000
 80060dc:	40020c00 	.word	0x40020c00
 80060e0:	08027938 	.word	0x08027938
 80060e4:	e000ed00 	.word	0xe000ed00
 80060e8:	05fa0004 	.word	0x05fa0004
 80060ec:	08027970 	.word	0x08027970
 80060f0:	20001c50 	.word	0x20001c50
 80060f4:	08027954 	.word	0x08027954

080060f8 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80060f8:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 80060fa:	4802      	ldr	r0, [pc, #8]	; (8006104 <httpd_post_receive_data+0xc>)
 80060fc:	f01b fc0e 	bl	802191c <puts>
}
 8006100:	2000      	movs	r0, #0
 8006102:	bd08      	pop	{r3, pc}
 8006104:	08027990 	.word	0x08027990

08006108 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8006108:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 800610a:	4802      	ldr	r0, [pc, #8]	; (8006114 <httpd_post_begin+0xc>)
 800610c:	f01b fc06 	bl	802191c <puts>
}
 8006110:	2000      	movs	r0, #0
 8006112:	bd08      	pop	{r3, pc}
 8006114:	080279ac 	.word	0x080279ac

08006118 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <httpd_post_finished+0x8>)
 800611a:	f01b bbff 	b.w	802191c <puts>
 800611e:	bf00      	nop
 8006120:	080279c0 	.word	0x080279c0

08006124 <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006124:	4803      	ldr	r0, [pc, #12]	; (8006134 <init_httpd_ssi+0x10>)
 8006126:	2215      	movs	r2, #21
 8006128:	4903      	ldr	r1, [pc, #12]	; (8006138 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 800612a:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 800612c:	f00f fbb6 	bl	801589c <http_set_ssi_handler>
}
 8006130:	bd08      	pop	{r3, pc}
 8006132:	bf00      	nop
 8006134:	08005c1d 	.word	0x08005c1d
 8006138:	20000254 	.word	0x20000254

0800613c <httpclient>:

void httpclient(char Page[64]) {
 800613c:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 800613e:	4910      	ldr	r1, [pc, #64]	; (8006180 <httpclient+0x44>)
void httpclient(char Page[64]) {
 8006140:	b084      	sub	sp, #16
 8006142:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8006144:	480f      	ldr	r0, [pc, #60]	; (8006184 <httpclient+0x48>)
 8006146:	f7ff fbf5 	bl	8005934 <dnslookup>
	if (err != ERR_OK)
 800614a:	b9b0      	cbnz	r0, 800617a <httpclient+0x3e>
		rebootme();
	ip = remoteip.addr;
 800614c:	4d0c      	ldr	r5, [pc, #48]	; (8006180 <httpclient+0x44>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 800614e:	490d      	ldr	r1, [pc, #52]	; (8006184 <httpclient+0x48>)
	ip = remoteip.addr;
 8006150:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8006152:	480d      	ldr	r0, [pc, #52]	; (8006188 <httpclient+0x4c>)
 8006154:	0e13      	lsrs	r3, r2, #24
 8006156:	f3c2 4607 	ubfx	r6, r2, #16, #8
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006160:	9600      	str	r6, [sp, #0]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	f01b fb3e 	bl	80217e4 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8006168:	4621      	mov	r1, r4
 800616a:	4b08      	ldr	r3, [pc, #32]	; (800618c <httpclient+0x50>)
 800616c:	2200      	movs	r2, #0
 800616e:	6828      	ldr	r0, [r5, #0]
 8006170:	f7fa fea8 	bl	8000ec4 <hc_open>
 8006174:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8006176:	b004      	add	sp, #16
 8006178:	bd70      	pop	{r4, r5, r6, pc}
		rebootme();
 800617a:	f7fc fc13 	bl	80029a4 <rebootme>
 800617e:	e7e5      	b.n	800614c <httpclient+0x10>
 8006180:	20001c70 	.word	0x20001c70
 8006184:	08027850 	.word	0x08027850
 8006188:	080279d8 	.word	0x080279d8
 800618c:	08005dbd 	.word	0x08005dbd

08006190 <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006190:	4909      	ldr	r1, [pc, #36]	; (80061b8 <apisn+0x28>)
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <apisn+0x2c>)
 8006194:	6809      	ldr	r1, [r1, #0]
 8006196:	4a0a      	ldr	r2, [pc, #40]	; (80061c0 <apisn+0x30>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6812      	ldr	r2, [r2, #0]
void apisn() {
 800619c:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 800619e:	4c09      	ldr	r4, [pc, #36]	; (80061c4 <apisn+0x34>)
void apisn() {
 80061a0:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 80061a2:	4620      	mov	r0, r4
 80061a4:	9100      	str	r1, [sp, #0]
 80061a6:	4908      	ldr	r1, [pc, #32]	; (80061c8 <apisn+0x38>)
 80061a8:	f01b fc94 	bl	8021ad4 <siprintf>
	httpclient(stmuid);		// get sn and targ
 80061ac:	4620      	mov	r0, r4
}
 80061ae:	b002      	add	sp, #8
 80061b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 80061b4:	f7ff bfc2 	b.w	800613c <httpclient>
 80061b8:	1ff0f428 	.word	0x1ff0f428
 80061bc:	1ff0f424 	.word	0x1ff0f424
 80061c0:	1ff0f420 	.word	0x1ff0f420
 80061c4:	20001c74 	.word	0x20001c74
 80061c8:	08027a00 	.word	0x08027a00

080061cc <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 80061cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80061d0:	4e17      	ldr	r6, [pc, #92]	; (8006230 <initialapisn+0x64>)
 80061d2:	f242 7319 	movw	r3, #10009	; 0x2719
 80061d6:	f8b6 505c 	ldrh.w	r5, [r6, #92]	; 0x5c
 80061da:	b2ad      	uxth	r5, r5
 80061dc:	429d      	cmp	r5, r3
 80061de:	d125      	bne.n	800622c <initialapisn+0x60>
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80061e0:	2101      	movs	r1, #1
 80061e2:	4814      	ldr	r0, [pc, #80]	; (8006234 <initialapisn+0x68>)
		apisn();
		osDelay(5000);

		i++;
 80061e4:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80061e6:	4f13      	ldr	r7, [pc, #76]	; (8006234 <initialapisn+0x68>)
		if (i > 10) {
			printf("************* ABORTED **************\n");
 80061e8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8006238 <initialapisn+0x6c>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 80061ec:	f01b fafa 	bl	80217e4 <iprintf>
		apisn();
 80061f0:	f7ff ffce 	bl	8006190 <apisn>
		osDelay(5000);
 80061f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80061f8:	f00b fd92 	bl	8011d20 <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 80061fc:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006200:	4621      	mov	r1, r4
 8006202:	4638      	mov	r0, r7
		i++;
 8006204:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006206:	b29b      	uxth	r3, r3
 8006208:	42ab      	cmp	r3, r5
 800620a:	d10f      	bne.n	800622c <initialapisn+0x60>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 800620c:	f01b faea 	bl	80217e4 <iprintf>
		apisn();
 8006210:	f7ff ffbe 	bl	8006190 <apisn>
		osDelay(5000);
 8006214:	f241 3088 	movw	r0, #5000	; 0x1388
 8006218:	f00b fd82 	bl	8011d20 <osDelay>
		if (i > 10) {
 800621c:	2c0a      	cmp	r4, #10
 800621e:	dded      	ble.n	80061fc <initialapisn+0x30>
			printf("************* ABORTED **************\n");
 8006220:	4640      	mov	r0, r8
 8006222:	f01b fb7b 	bl	802191c <puts>
			rebootme();
 8006226:	f7fc fbbd 	bl	80029a4 <rebootme>
 800622a:	e7e7      	b.n	80061fc <initialapisn+0x30>
		}
	}
}
 800622c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006230:	20022d4c 	.word	0x20022d4c
 8006234:	08027a18 	.word	0x08027a18
 8006238:	08027a48 	.word	0x08027a48

0800623c <requestapisn>:

void requestapisn() {
 800623c:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 800623e:	4804      	ldr	r0, [pc, #16]	; (8006250 <requestapisn+0x14>)
 8006240:	f01b fb6c 	bl	802191c <puts>
	httpclient(stmuid);		// get sn and targ
 8006244:	4803      	ldr	r0, [pc, #12]	; (8006254 <requestapisn+0x18>)
}
 8006246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 800624a:	f7ff bf77 	b.w	800613c <httpclient>
 800624e:	bf00      	nop
 8006250:	08027a70 	.word	0x08027a70
 8006254:	20001c74 	.word	0x20001c74

08006258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8006258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006290 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800625c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800625e:	e003      	b.n	8006268 <LoopCopyDataInit>

08006260 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006260:	4b0c      	ldr	r3, [pc, #48]	; (8006294 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006262:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006264:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006266:	3104      	adds	r1, #4

08006268 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006268:	480b      	ldr	r0, [pc, #44]	; (8006298 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800626c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800626e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006270:	d3f6      	bcc.n	8006260 <CopyDataInit>
  ldr  r2, =_sbss
 8006272:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006274:	e002      	b.n	800627c <LoopFillZerobss>

08006276 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006276:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006278:	f842 3b04 	str.w	r3, [r2], #4

0800627c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800627c:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800627e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006280:	d3f9      	bcc.n	8006276 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006282:	f7ff fa4f 	bl	8005724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006286:	f01a f9bd 	bl	8020604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800628a:	f7fc fcf9 	bl	8002c80 <main>
  bx  lr    
 800628e:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8006290:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006294:	08041838 	.word	0x08041838
  ldr  r0, =_sdata
 8006298:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800629c:	2000068c 	.word	0x2000068c
  ldr  r2, =_sbss
 80062a0:	20000690 	.word	0x20000690
  ldr  r3, = _ebss
 80062a4:	200381d8 	.word	0x200381d8

080062a8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062a8:	e7fe      	b.n	80062a8 <CAN1_RX0_IRQHandler>
	...

080062ac <HAL_Init>:
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062ac:	4a07      	ldr	r2, [pc, #28]	; (80062cc <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062ae:	2003      	movs	r0, #3
{
 80062b0:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80062b2:	6813      	ldr	r3, [r2, #0]
 80062b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b8:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062ba:	f000 fc41 	bl	8006b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80062be:	2000      	movs	r0, #0
 80062c0:	f7ff f908 	bl	80054d4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80062c4:	f7fe fa58 	bl	8004778 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80062c8:	2000      	movs	r0, #0
 80062ca:	bd08      	pop	{r3, pc}
 80062cc:	40023c00 	.word	0x40023c00

080062d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80062d0:	4a03      	ldr	r2, [pc, #12]	; (80062e0 <HAL_IncTick+0x10>)
 80062d2:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <HAL_IncTick+0x14>)
 80062d4:	6811      	ldr	r1, [r2, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	440b      	add	r3, r1
 80062da:	6013      	str	r3, [r2, #0]
}
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20023ab0 	.word	0x20023ab0
 80062e4:	200002ac 	.word	0x200002ac

080062e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80062e8:	4b01      	ldr	r3, [pc, #4]	; (80062f0 <HAL_GetTick+0x8>)
 80062ea:	6818      	ldr	r0, [r3, #0]
}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20023ab0 	.word	0x20023ab0

080062f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80062f8:	f7ff fff6 	bl	80062e8 <HAL_GetTick>
 80062fc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062fe:	1c63      	adds	r3, r4, #1
 8006300:	d002      	beq.n	8006308 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006302:	4b04      	ldr	r3, [pc, #16]	; (8006314 <HAL_Delay+0x20>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006308:	f7ff ffee 	bl	80062e8 <HAL_GetTick>
 800630c:	1b43      	subs	r3, r0, r5
 800630e:	42a3      	cmp	r3, r4
 8006310:	d3fa      	bcc.n	8006308 <HAL_Delay+0x14>
  {
  }
}
 8006312:	bd38      	pop	{r3, r4, r5, pc}
 8006314:	200002ac 	.word	0x200002ac

08006318 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006318:	2800      	cmp	r0, #0
 800631a:	f000 8146 	beq.w	80065aa <HAL_ADC_Init+0x292>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800631e:	49ae      	ldr	r1, [pc, #696]	; (80065d8 <HAL_ADC_Init+0x2c0>)
 8006320:	4aae      	ldr	r2, [pc, #696]	; (80065dc <HAL_ADC_Init+0x2c4>)
{
 8006322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006324:	6803      	ldr	r3, [r0, #0]
 8006326:	4604      	mov	r4, r0
 8006328:	428b      	cmp	r3, r1
 800632a:	bf18      	it	ne
 800632c:	4293      	cmpne	r3, r2
 800632e:	d003      	beq.n	8006338 <HAL_ADC_Init+0x20>
 8006330:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006334:	4293      	cmp	r3, r2
 8006336:	d177      	bne.n	8006428 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006338:	6863      	ldr	r3, [r4, #4]
 800633a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 800633e:	d17c      	bne.n	800643a <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006340:	68a3      	ldr	r3, [r4, #8]
 8006342:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8006346:	f040 8082 	bne.w	800644e <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800634a:	6923      	ldr	r3, [r4, #16]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d84e      	bhi.n	80063ee <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006350:	69a3      	ldr	r3, [r4, #24]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d845      	bhi.n	80063e2 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8006356:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006358:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 800635c:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8006360:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006364:	bf18      	it	ne
 8006366:	2900      	cmpne	r1, #0
 8006368:	bf14      	ite	ne
 800636a:	2301      	movne	r3, #1
 800636c:	2300      	moveq	r3, #0
 800636e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8006372:	bf0c      	ite	eq
 8006374:	2300      	moveq	r3, #0
 8006376:	f003 0301 	andne.w	r3, r3, #1
 800637a:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800637e:	bf0c      	ite	eq
 8006380:	2300      	moveq	r3, #0
 8006382:	f003 0301 	andne.w	r3, r3, #1
 8006386:	b123      	cbz	r3, 8006392 <HAL_ADC_Init+0x7a>
 8006388:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 800638c:	2a01      	cmp	r2, #1
 800638e:	f200 8113 	bhi.w	80065b8 <HAL_ADC_Init+0x2a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006392:	68e3      	ldr	r3, [r4, #12]
 8006394:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006398:	d165      	bne.n	8006466 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800639a:	69e3      	ldr	r3, [r4, #28]
 800639c:	3b01      	subs	r3, #1
 800639e:	2b0f      	cmp	r3, #15
 80063a0:	d85b      	bhi.n	800645a <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80063a2:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d830      	bhi.n	800640c <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80063aa:	6963      	ldr	r3, [r4, #20]
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d835      	bhi.n	800641c <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80063b0:	f894 3020 	ldrb.w	r3, [r4, #32]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d823      	bhi.n	8006400 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80063b8:	4b89      	ldr	r3, [pc, #548]	; (80065e0 <HAL_ADC_Init+0x2c8>)
 80063ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80063bc:	429a      	cmp	r2, r3
 80063be:	d004      	beq.n	80063ca <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80063c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80063c2:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80063c6:	f040 80ea 	bne.w	800659e <HAL_ADC_Init+0x286>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80063ca:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80063cc:	2d00      	cmp	r5, #0
 80063ce:	f000 80d6 	beq.w	800657e <HAL_ADC_Init+0x266>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063d4:	06db      	lsls	r3, r3, #27
 80063d6:	d54c      	bpl.n	8006472 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063d8:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80063da:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80063dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80063e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80063e2:	f240 1151 	movw	r1, #337	; 0x151
 80063e6:	487f      	ldr	r0, [pc, #508]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 80063e8:	f7fd fb9e 	bl	8003b28 <assert_failed>
 80063ec:	e7b3      	b.n	8006356 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80063ee:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80063f2:	487c      	ldr	r0, [pc, #496]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 80063f4:	f7fd fb98 	bl	8003b28 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80063f8:	69a3      	ldr	r3, [r4, #24]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d9ab      	bls.n	8006356 <HAL_ADC_Init+0x3e>
 80063fe:	e7f0      	b.n	80063e2 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006400:	f240 1157 	movw	r1, #343	; 0x157
 8006404:	4877      	ldr	r0, [pc, #476]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006406:	f7fd fb8f 	bl	8003b28 <assert_failed>
 800640a:	e7d5      	b.n	80063b8 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800640c:	f240 1155 	movw	r1, #341	; 0x155
 8006410:	4874      	ldr	r0, [pc, #464]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006412:	f7fd fb89 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006416:	6963      	ldr	r3, [r4, #20]
 8006418:	2b02      	cmp	r3, #2
 800641a:	d9c9      	bls.n	80063b0 <HAL_ADC_Init+0x98>
 800641c:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8006420:	4870      	ldr	r0, [pc, #448]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006422:	f7fd fb81 	bl	8003b28 <assert_failed>
 8006426:	e7c3      	b.n	80063b0 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006428:	f240 114d 	movw	r1, #333	; 0x14d
 800642c:	486d      	ldr	r0, [pc, #436]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 800642e:	f7fd fb7b 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006438:	d082      	beq.n	8006340 <HAL_ADC_Init+0x28>
 800643a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800643e:	4869      	ldr	r0, [pc, #420]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006440:	f7fd fb72 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006444:	68a3      	ldr	r3, [r4, #8]
 8006446:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 800644a:	f43f af7e 	beq.w	800634a <HAL_ADC_Init+0x32>
 800644e:	f240 114f 	movw	r1, #335	; 0x14f
 8006452:	4864      	ldr	r0, [pc, #400]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006454:	f7fd fb68 	bl	8003b28 <assert_failed>
 8006458:	e777      	b.n	800634a <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800645a:	f44f 71aa 	mov.w	r1, #340	; 0x154
 800645e:	4861      	ldr	r0, [pc, #388]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 8006460:	f7fd fb62 	bl	8003b28 <assert_failed>
 8006464:	e79d      	b.n	80063a2 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006466:	f240 1153 	movw	r1, #339	; 0x153
 800646a:	485e      	ldr	r0, [pc, #376]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 800646c:	f7fd fb5c 	bl	8003b28 <assert_failed>
 8006470:	e793      	b.n	800639a <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8006472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006474:	4a5c      	ldr	r2, [pc, #368]	; (80065e8 <HAL_ADC_Init+0x2d0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006476:	495d      	ldr	r1, [pc, #372]	; (80065ec <HAL_ADC_Init+0x2d4>)
    ADC_STATE_CLR_SET(hadc->State,
 8006478:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800647a:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800647c:	4d58      	ldr	r5, [pc, #352]	; (80065e0 <HAL_ADC_Init+0x2c8>)
    ADC_STATE_CLR_SET(hadc->State,
 800647e:	f042 0202 	orr.w	r2, r2, #2
 8006482:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006484:	684a      	ldr	r2, [r1, #4]
 8006486:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800648a:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800648c:	684a      	ldr	r2, [r1, #4]
 800648e:	6860      	ldr	r0, [r4, #4]
 8006490:	4302      	orrs	r2, r0
 8006492:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006494:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006496:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800649c:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064a0:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80064a2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064a4:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064a8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064ac:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80064ae:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80064b0:	6858      	ldr	r0, [r3, #4]
 80064b2:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80064b6:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80064b8:	6859      	ldr	r1, [r3, #4]
 80064ba:	ea41 010c 	orr.w	r1, r1, ip
 80064be:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80064c0:	6899      	ldr	r1, [r3, #8]
 80064c2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80064c6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	ea42 0207 	orr.w	r2, r2, r7
 80064ce:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064d0:	d05c      	beq.n	800658c <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064d2:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064d4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80064d6:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80064da:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	4316      	orrs	r6, r2
 80064e0:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80064e2:	6899      	ldr	r1, [r3, #8]
 80064e4:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80064e8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	4302      	orrs	r2, r0
 80064ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064f0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80064f2:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80064f4:	f021 0102 	bic.w	r1, r1, #2
 80064f8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006500:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006502:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006506:	2a00      	cmp	r2, #0
 8006508:	d051      	beq.n	80065ae <HAL_ADC_Init+0x296>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 800650a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800650c:	3a01      	subs	r2, #1
 800650e:	2a07      	cmp	r2, #7
 8006510:	d858      	bhi.n	80065c4 <HAL_ADC_Init+0x2ac>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006512:	6859      	ldr	r1, [r3, #4]
 8006514:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006518:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006520:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006522:	6859      	ldr	r1, [r3, #4]
 8006524:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8006528:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800652a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 800652c:	2500      	movs	r5, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800652e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006530:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006534:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006536:	1e4a      	subs	r2, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006538:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800653a:	4628      	mov	r0, r5
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800653c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800653e:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
 8006542:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006544:	6899      	ldr	r1, [r3, #8]
 8006546:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800654a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800654c:	6899      	ldr	r1, [r3, #8]
 800654e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006552:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8006556:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006558:	6899      	ldr	r1, [r3, #8]
 800655a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800655e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006560:	689a      	ldr	r2, [r3, #8]
 8006562:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006566:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8006568:	6465      	str	r5, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800656a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800656c:	f023 0303 	bic.w	r3, r3, #3
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8006576:	2300      	movs	r3, #0
 8006578:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800657c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 800657e:	4620      	mov	r0, r4
 8006580:	f7fe f92a 	bl	80047d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006584:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8006586:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 800658a:	e722      	b.n	80063d2 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800658c:	689a      	ldr	r2, [r3, #8]
 800658e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006592:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800659a:	609a      	str	r2, [r3, #8]
 800659c:	e7a8      	b.n	80064f0 <HAL_ADC_Init+0x1d8>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800659e:	f240 115b 	movw	r1, #347	; 0x15b
 80065a2:	4810      	ldr	r0, [pc, #64]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 80065a4:	f7fd fac0 	bl	8003b28 <assert_failed>
 80065a8:	e70f      	b.n	80063ca <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 80065aa:	2001      	movs	r0, #1
}
 80065ac:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b4:	605a      	str	r2, [r3, #4]
 80065b6:	e7b8      	b.n	800652a <HAL_ADC_Init+0x212>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80065b8:	f44f 71a9 	mov.w	r1, #338	; 0x152
 80065bc:	4809      	ldr	r0, [pc, #36]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 80065be:	f7fd fab3 	bl	8003b28 <assert_failed>
 80065c2:	e6e6      	b.n	8006392 <HAL_ADC_Init+0x7a>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80065c4:	f44f 61ef 	mov.w	r1, #1912	; 0x778
 80065c8:	4806      	ldr	r0, [pc, #24]	; (80065e4 <HAL_ADC_Init+0x2cc>)
 80065ca:	f7fd faad 	bl	8003b28 <assert_failed>
 80065ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	3a01      	subs	r2, #1
 80065d4:	e79d      	b.n	8006512 <HAL_ADC_Init+0x1fa>
 80065d6:	bf00      	nop
 80065d8:	40012000 	.word	0x40012000
 80065dc:	40012100 	.word	0x40012100
 80065e0:	0f000001 	.word	0x0f000001
 80065e4:	08027a98 	.word	0x08027a98
 80065e8:	ffffeefd 	.word	0xffffeefd
 80065ec:	40012300 	.word	0x40012300

080065f0 <HAL_ADC_Start>:
{
 80065f0:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 80065f2:	2300      	movs	r3, #0
{
 80065f4:	b082      	sub	sp, #8
 80065f6:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 80065f8:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80065fa:	6983      	ldr	r3, [r0, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d904      	bls.n	800660a <HAL_ADC_Start+0x1a>
 8006600:	f240 21df 	movw	r1, #735	; 0x2df
 8006604:	4841      	ldr	r0, [pc, #260]	; (800670c <HAL_ADC_Start+0x11c>)
 8006606:	f7fd fa8f 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800660a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800660c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8006610:	d170      	bne.n	80066f4 <HAL_ADC_Start+0x104>
  __HAL_LOCK(hadc);
 8006612:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006616:	2b01      	cmp	r3, #1
 8006618:	d075      	beq.n	8006706 <HAL_ADC_Start+0x116>
 800661a:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800661c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 800661e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006622:	6893      	ldr	r3, [r2, #8]
 8006624:	07d9      	lsls	r1, r3, #31
 8006626:	d414      	bmi.n	8006652 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006628:	4b39      	ldr	r3, [pc, #228]	; (8006710 <HAL_ADC_Start+0x120>)
 800662a:	483a      	ldr	r0, [pc, #232]	; (8006714 <HAL_ADC_Start+0x124>)
 800662c:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 800662e:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006630:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8006634:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8006638:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800663a:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800663c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006640:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8006642:	9b01      	ldr	r3, [sp, #4]
 8006644:	b12b      	cbz	r3, 8006652 <HAL_ADC_Start+0x62>
      counter--;
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f9      	bne.n	8006646 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006652:	6893      	ldr	r3, [r2, #8]
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d524      	bpl.n	80066a2 <HAL_ADC_Start+0xb2>
    ADC_STATE_CLR_SET(hadc->State,
 8006658:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800665a:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <HAL_ADC_Start+0x128>)
 800665c:	400b      	ands	r3, r1
 800665e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006662:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006664:	6853      	ldr	r3, [r2, #4]
 8006666:	0558      	lsls	r0, r3, #21
 8006668:	d505      	bpl.n	8006676 <HAL_ADC_Start+0x86>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800666a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800666c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006670:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006674:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006676:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006678:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800667c:	d026      	beq.n	80066cc <HAL_ADC_Start+0xdc>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800667e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006680:	f023 0306 	bic.w	r3, r3, #6
 8006684:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006686:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800668a:	2000      	movs	r0, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800668c:	4b23      	ldr	r3, [pc, #140]	; (800671c <HAL_ADC_Start+0x12c>)
    __HAL_UNLOCK(hadc);
 800668e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006692:	6011      	str	r1, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8006694:	6859      	ldr	r1, [r3, #4]
 8006696:	06c9      	lsls	r1, r1, #27
 8006698:	d106      	bne.n	80066a8 <HAL_ADC_Start+0xb8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800669a:	6890      	ldr	r0, [r2, #8]
 800669c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80066a0:	d016      	beq.n	80066d0 <HAL_ADC_Start+0xe0>
  return HAL_OK;
 80066a2:	2000      	movs	r0, #0
}
 80066a4:	b002      	add	sp, #8
 80066a6:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066a8:	491d      	ldr	r1, [pc, #116]	; (8006720 <HAL_ADC_Start+0x130>)
 80066aa:	428a      	cmp	r2, r1
 80066ac:	d016      	beq.n	80066dc <HAL_ADC_Start+0xec>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80066ae:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066b0:	06db      	lsls	r3, r3, #27
 80066b2:	d4f6      	bmi.n	80066a2 <HAL_ADC_Start+0xb2>
 80066b4:	491b      	ldr	r1, [pc, #108]	; (8006724 <HAL_ADC_Start+0x134>)
 80066b6:	428a      	cmp	r2, r1
 80066b8:	d1f3      	bne.n	80066a2 <HAL_ADC_Start+0xb2>
 80066ba:	6888      	ldr	r0, [r1, #8]
 80066bc:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80066c0:	d1ef      	bne.n	80066a2 <HAL_ADC_Start+0xb2>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066c2:	688b      	ldr	r3, [r1, #8]
 80066c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066c8:	608b      	str	r3, [r1, #8]
 80066ca:	e7eb      	b.n	80066a4 <HAL_ADC_Start+0xb4>
      ADC_CLEAR_ERRORCODE(hadc);
 80066cc:	6463      	str	r3, [r4, #68]	; 0x44
 80066ce:	e7da      	b.n	8006686 <HAL_ADC_Start+0x96>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066d0:	6893      	ldr	r3, [r2, #8]
 80066d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066d6:	6093      	str	r3, [r2, #8]
}
 80066d8:	b002      	add	sp, #8
 80066da:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066dc:	6893      	ldr	r3, [r2, #8]
 80066de:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 80066e2:	d103      	bne.n	80066ec <HAL_ADC_Start+0xfc>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066e4:	6893      	ldr	r3, [r2, #8]
 80066e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ea:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80066ec:	4b0b      	ldr	r3, [pc, #44]	; (800671c <HAL_ADC_Start+0x12c>)
  return HAL_OK;
 80066ee:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80066f0:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066f2:	e7d7      	b.n	80066a4 <HAL_ADC_Start+0xb4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80066f4:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80066f8:	4804      	ldr	r0, [pc, #16]	; (800670c <HAL_ADC_Start+0x11c>)
 80066fa:	f7fd fa15 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hadc);
 80066fe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d189      	bne.n	800661a <HAL_ADC_Start+0x2a>
 8006706:	2002      	movs	r0, #2
}
 8006708:	b002      	add	sp, #8
 800670a:	bd10      	pop	{r4, pc}
 800670c:	08027a98 	.word	0x08027a98
 8006710:	20000250 	.word	0x20000250
 8006714:	431bde83 	.word	0x431bde83
 8006718:	fffff8fe 	.word	0xfffff8fe
 800671c:	40012300 	.word	0x40012300
 8006720:	40012000 	.word	0x40012000
 8006724:	40012200 	.word	0x40012200

08006728 <HAL_ADC_ConvCpltCallback>:
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop

0800672c <HAL_ADC_LevelOutOfWindowCallback>:
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop

08006730 <HAL_ADC_ErrorCallback>:
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop

08006734 <HAL_ADC_IRQHandler>:
{
 8006734:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006736:	6983      	ldr	r3, [r0, #24]
{
 8006738:	4604      	mov	r4, r0
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800673a:	2b01      	cmp	r3, #1
 800673c:	d904      	bls.n	8006748 <HAL_ADC_IRQHandler+0x14>
 800673e:	f240 41a6 	movw	r1, #1190	; 0x4a6
 8006742:	4855      	ldr	r0, [pc, #340]	; (8006898 <HAL_ADC_IRQHandler+0x164>)
 8006744:	f7fd f9f0 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8006748:	69e3      	ldr	r3, [r4, #28]
 800674a:	3b01      	subs	r3, #1
 800674c:	2b0f      	cmp	r3, #15
 800674e:	f200 808c 	bhi.w	800686a <HAL_ADC_IRQHandler+0x136>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006752:	6963      	ldr	r3, [r4, #20]
 8006754:	2b02      	cmp	r3, #2
 8006756:	f200 8082 	bhi.w	800685e <HAL_ADC_IRQHandler+0x12a>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800675e:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 8006760:	0790      	lsls	r0, r2, #30
 8006762:	d52b      	bpl.n	80067bc <HAL_ADC_IRQHandler+0x88>
 8006764:	068a      	lsls	r2, r1, #26
 8006766:	d529      	bpl.n	80067bc <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006768:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800676a:	06d5      	lsls	r5, r2, #27
 800676c:	d403      	bmi.n	8006776 <HAL_ADC_IRQHandler+0x42>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800676e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006774:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800677c:	d117      	bne.n	80067ae <HAL_ADC_IRQHandler+0x7a>
 800677e:	69a2      	ldr	r2, [r4, #24]
 8006780:	b9aa      	cbnz	r2, 80067ae <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006784:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8006788:	d002      	beq.n	8006790 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800678a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800678c:	0550      	lsls	r0, r2, #21
 800678e:	d40e      	bmi.n	80067ae <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	f022 0220 	bic.w	r2, r2, #32
 8006796:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800679a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80067a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067a2:	04d9      	lsls	r1, r3, #19
 80067a4:	d403      	bmi.n	80067ae <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067a8:	f043 0301 	orr.w	r3, r3, #1
 80067ac:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff ffba 	bl	8006728 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	f06f 0212 	mvn.w	r2, #18
 80067ba:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80067bc:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80067be:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 80067c0:	0752      	lsls	r2, r2, #29
 80067c2:	d52f      	bpl.n	8006824 <HAL_ADC_IRQHandler+0xf0>
 80067c4:	060d      	lsls	r5, r1, #24
 80067c6:	d52d      	bpl.n	8006824 <HAL_ADC_IRQHandler+0xf0>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80067c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067ca:	06d0      	lsls	r0, r2, #27
 80067cc:	d403      	bmi.n	80067d6 <HAL_ADC_IRQHandler+0xa2>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80067ce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80067d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d4:	6422      	str	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80067dc:	d11b      	bne.n	8006816 <HAL_ADC_IRQHandler+0xe2>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80067de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80067e0:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 80067e4:	d153      	bne.n	800688e <HAL_ADC_IRQHandler+0x15a>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80067e6:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80067e8:	0552      	lsls	r2, r2, #21
 80067ea:	d414      	bmi.n	8006816 <HAL_ADC_IRQHandler+0xe2>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80067ec:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80067ee:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80067f2:	d110      	bne.n	8006816 <HAL_ADC_IRQHandler+0xe2>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80067f4:	69a2      	ldr	r2, [r4, #24]
 80067f6:	b972      	cbnz	r2, 8006816 <HAL_ADC_IRQHandler+0xe2>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80067f8:	685a      	ldr	r2, [r3, #4]
 80067fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067fe:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8006800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006806:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800680a:	05dd      	lsls	r5, r3, #23
 800680c:	d403      	bmi.n	8006816 <HAL_ADC_IRQHandler+0xe2>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800680e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006816:	4620      	mov	r0, r4
 8006818:	f000 f92e 	bl	8006a78 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800681c:	6823      	ldr	r3, [r4, #0]
 800681e:	f06f 020c 	mvn.w	r2, #12
 8006822:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8006824:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8006826:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8006828:	0650      	lsls	r0, r2, #25
 800682a:	d504      	bpl.n	8006836 <HAL_ADC_IRQHandler+0x102>
 800682c:	07ca      	lsls	r2, r1, #31
 800682e:	d502      	bpl.n	8006836 <HAL_ADC_IRQHandler+0x102>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	07d5      	lsls	r5, r2, #31
 8006834:	d41f      	bmi.n	8006876 <HAL_ADC_IRQHandler+0x142>
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8006836:	681a      	ldr	r2, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8006838:	6859      	ldr	r1, [r3, #4]
  if(tmp1 && tmp2)
 800683a:	0690      	lsls	r0, r2, #26
 800683c:	d501      	bpl.n	8006842 <HAL_ADC_IRQHandler+0x10e>
 800683e:	014a      	lsls	r2, r1, #5
 8006840:	d400      	bmi.n	8006844 <HAL_ADC_IRQHandler+0x110>
}
 8006842:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006844:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006846:	f06f 0520 	mvn.w	r5, #32
      HAL_ADC_ErrorCallback(hadc);
 800684a:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800684c:	f042 0202 	orr.w	r2, r2, #2
 8006850:	6462      	str	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006852:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8006854:	f7ff ff6c 	bl	8006730 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	601d      	str	r5, [r3, #0]
}
 800685c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800685e:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
 8006862:	480d      	ldr	r0, [pc, #52]	; (8006898 <HAL_ADC_IRQHandler+0x164>)
 8006864:	f7fd f960 	bl	8003b28 <assert_failed>
 8006868:	e777      	b.n	800675a <HAL_ADC_IRQHandler+0x26>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800686a:	f240 41a7 	movw	r1, #1191	; 0x4a7
 800686e:	480a      	ldr	r0, [pc, #40]	; (8006898 <HAL_ADC_IRQHandler+0x164>)
 8006870:	f7fd f95a 	bl	8003b28 <assert_failed>
 8006874:	e76d      	b.n	8006752 <HAL_ADC_IRQHandler+0x1e>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006876:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006878:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800687a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800687e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006880:	f7ff ff54 	bl	800672c <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	f06f 0201 	mvn.w	r2, #1
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	e7d3      	b.n	8006836 <HAL_ADC_IRQHandler+0x102>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800688e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8006890:	0551      	lsls	r1, r2, #21
 8006892:	d4c0      	bmi.n	8006816 <HAL_ADC_IRQHandler+0xe2>
 8006894:	e7a7      	b.n	80067e6 <HAL_ADC_IRQHandler+0xb2>
 8006896:	bf00      	nop
 8006898:	08027a98 	.word	0x08027a98

0800689c <HAL_ADC_ConfigChannel>:
{
 800689c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 800689e:	2300      	movs	r3, #0
{
 80068a0:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80068a2:	4a70      	ldr	r2, [pc, #448]	; (8006a64 <HAL_ADC_ConfigChannel+0x1c8>)
{
 80068a4:	460e      	mov	r6, r1
  __IO uint32_t counter = 0;
 80068a6:	9301      	str	r3, [sp, #4]
{
 80068a8:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80068aa:	680b      	ldr	r3, [r1, #0]
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf18      	it	ne
 80068b0:	2b12      	cmpne	r3, #18
 80068b2:	d902      	bls.n	80068ba <HAL_ADC_ConfigChannel+0x1e>
 80068b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b8:	d143      	bne.n	8006942 <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80068ba:	6873      	ldr	r3, [r6, #4]
 80068bc:	3b01      	subs	r3, #1
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d848      	bhi.n	8006954 <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80068c2:	68b3      	ldr	r3, [r6, #8]
 80068c4:	2b07      	cmp	r3, #7
 80068c6:	d84d      	bhi.n	8006964 <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 80068c8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d052      	beq.n	8006976 <HAL_ADC_ConfigChannel+0xda>
 80068d0:	2301      	movs	r3, #1
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068d2:	2107      	movs	r1, #7
 80068d4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hadc);
 80068d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80068da:	6835      	ldr	r5, [r6, #0]
 80068dc:	2d09      	cmp	r5, #9
 80068de:	b2af      	uxth	r7, r5
 80068e0:	d94c      	bls.n	800697c <HAL_ADC_ConfigChannel+0xe0>
 80068e2:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80068e6:	d049      	beq.n	800697c <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068e8:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 80068ec:	68c2      	ldr	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068ee:	f8df c174 	ldr.w	ip, [pc, #372]	; 8006a64 <HAL_ADC_ConfigChannel+0x1c8>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068f2:	3b1e      	subs	r3, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80068f4:	4565      	cmp	r5, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068f6:	fa01 f103 	lsl.w	r1, r1, r3
 80068fa:	ea22 0201 	bic.w	r2, r2, r1
 80068fe:	60c2      	str	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006900:	f000 8082 	beq.w	8006a08 <HAL_ADC_ConfigChannel+0x16c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006904:	68b2      	ldr	r2, [r6, #8]
 8006906:	68c1      	ldr	r1, [r0, #12]
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	430b      	orrs	r3, r1
 800690e:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 8006910:	6873      	ldr	r3, [r6, #4]
 8006912:	2b06      	cmp	r3, #6
 8006914:	d843      	bhi.n	800699e <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006916:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800691a:	211f      	movs	r1, #31
 800691c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800691e:	3b05      	subs	r3, #5
 8006920:	4099      	lsls	r1, r3
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006922:	fa07 f303 	lsl.w	r3, r7, r3
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006926:	ea22 0201 	bic.w	r2, r2, r1
 800692a:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800692c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800692e:	4313      	orrs	r3, r2
 8006930:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8006932:	4b4d      	ldr	r3, [pc, #308]	; (8006a68 <HAL_ADC_ConfigChannel+0x1cc>)
 8006934:	4298      	cmp	r0, r3
 8006936:	d047      	beq.n	80069c8 <HAL_ADC_ConfigChannel+0x12c>
  __HAL_UNLOCK(hadc);
 8006938:	2000      	movs	r0, #0
 800693a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800693e:	b003      	add	sp, #12
 8006940:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8006942:	f240 615d 	movw	r1, #1629	; 0x65d
 8006946:	4849      	ldr	r0, [pc, #292]	; (8006a6c <HAL_ADC_ConfigChannel+0x1d0>)
 8006948:	f7fd f8ee 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800694c:	6873      	ldr	r3, [r6, #4]
 800694e:	3b01      	subs	r3, #1
 8006950:	2b0f      	cmp	r3, #15
 8006952:	d9b6      	bls.n	80068c2 <HAL_ADC_ConfigChannel+0x26>
 8006954:	f240 615e 	movw	r1, #1630	; 0x65e
 8006958:	4844      	ldr	r0, [pc, #272]	; (8006a6c <HAL_ADC_ConfigChannel+0x1d0>)
 800695a:	f7fd f8e5 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800695e:	68b3      	ldr	r3, [r6, #8]
 8006960:	2b07      	cmp	r3, #7
 8006962:	d9b1      	bls.n	80068c8 <HAL_ADC_ConfigChannel+0x2c>
 8006964:	f240 615f 	movw	r1, #1631	; 0x65f
 8006968:	4840      	ldr	r0, [pc, #256]	; (8006a6c <HAL_ADC_ConfigChannel+0x1d0>)
 800696a:	f7fd f8dd 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hadc);
 800696e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006972:	2b01      	cmp	r3, #1
 8006974:	d1ac      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x34>
 8006976:	2002      	movs	r0, #2
}
 8006978:	b003      	add	sp, #12
 800697a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800697c:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
 8006980:	6902      	ldr	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006982:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006984:	fa01 f10c 	lsl.w	r1, r1, ip
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006988:	fa03 f30c 	lsl.w	r3, r3, ip
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800698c:	ea22 0201 	bic.w	r2, r2, r1
 8006990:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006992:	6902      	ldr	r2, [r0, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7)
 8006998:	6873      	ldr	r3, [r6, #4]
 800699a:	2b06      	cmp	r3, #6
 800699c:	d9bb      	bls.n	8006916 <HAL_ADC_ConfigChannel+0x7a>
  else if (sConfig->Rank < 13)
 800699e:	2b0c      	cmp	r3, #12
 80069a0:	d81d      	bhi.n	80069de <HAL_ADC_ConfigChannel+0x142>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80069a6:	261f      	movs	r6, #31
 80069a8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80069aa:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 80069ae:	fa06 f301 	lsl.w	r3, r6, r1
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069b2:	fa07 f101 	lsl.w	r1, r7, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069b6:	ea22 0303 	bic.w	r3, r2, r3
 80069ba:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069be:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80069c0:	4b29      	ldr	r3, [pc, #164]	; (8006a68 <HAL_ADC_ConfigChannel+0x1cc>)
 80069c2:	4298      	cmp	r0, r3
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069c4:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80069c6:	d1b7      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
 80069c8:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 80069cc:	d016      	beq.n	80069fc <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069ce:	2d12      	cmp	r5, #18
 80069d0:	d121      	bne.n	8006a16 <HAL_ADC_ConfigChannel+0x17a>
    ADC->CCR |= ADC_CCR_VBATE;
 80069d2:	4a27      	ldr	r2, [pc, #156]	; (8006a70 <HAL_ADC_ConfigChannel+0x1d4>)
 80069d4:	6853      	ldr	r3, [r2, #4]
 80069d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069da:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80069dc:	e7ac      	b.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80069e2:	261f      	movs	r6, #31
 80069e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80069e6:	3a41      	subs	r2, #65	; 0x41
 80069e8:	4096      	lsls	r6, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069ea:	fa07 f102 	lsl.w	r1, r7, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069ee:	ea23 0306 	bic.w	r3, r3, r6
 80069f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80069f6:	4311      	orrs	r1, r2
 80069f8:	62c1      	str	r1, [r0, #44]	; 0x2c
 80069fa:	e79a      	b.n	8006932 <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_ADC_ConfigChannel+0x1d4>)
 80069fe:	6853      	ldr	r3, [r2, #4]
 8006a00:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8006a04:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a06:	e797      	b.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8006a08:	68c3      	ldr	r3, [r0, #12]
 8006a0a:	2712      	movs	r7, #18
 8006a0c:	68b2      	ldr	r2, [r6, #8]
 8006a0e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006a12:	60c3      	str	r3, [r0, #12]
 8006a14:	e77c      	b.n	8006910 <HAL_ADC_ConfigChannel+0x74>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a16:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <HAL_ADC_ConfigChannel+0x1c8>)
 8006a18:	429d      	cmp	r5, r3
 8006a1a:	d001      	beq.n	8006a20 <HAL_ADC_ConfigChannel+0x184>
 8006a1c:	2d11      	cmp	r5, #17
 8006a1e:	d18b      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006a20:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <HAL_ADC_ConfigChannel+0x1d4>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a22:	4910      	ldr	r1, [pc, #64]	; (8006a64 <HAL_ADC_ConfigChannel+0x1c8>)
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006a24:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a26:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8006a28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a2c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006a2e:	d183      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006a30:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8006a34:	4b0f      	ldr	r3, [pc, #60]	; (8006a74 <HAL_ADC_ConfigChannel+0x1d8>)
 8006a36:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8006a40:	fba2 2303 	umull	r2, r3, r2, r3
 8006a44:	0c9b      	lsrs	r3, r3, #18
 8006a46:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006a4e:	9b01      	ldr	r3, [sp, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f43f af71 	beq.w	8006938 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 8006a56:	9b01      	ldr	r3, [sp, #4]
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8006a5c:	9b01      	ldr	r3, [sp, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1f9      	bne.n	8006a56 <HAL_ADC_ConfigChannel+0x1ba>
 8006a62:	e769      	b.n	8006938 <HAL_ADC_ConfigChannel+0x9c>
 8006a64:	10000012 	.word	0x10000012
 8006a68:	40012000 	.word	0x40012000
 8006a6c:	08027a98 	.word	0x08027a98
 8006a70:	40012300 	.word	0x40012300
 8006a74:	20000250 	.word	0x20000250

08006a78 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop

08006a7c <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006a7c:	680b      	ldr	r3, [r1, #0]
 8006a7e:	2b19      	cmp	r3, #25
{
 8006a80:	b570      	push	{r4, r5, r6, lr}
 8006a82:	460c      	mov	r4, r1
 8006a84:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006a86:	d93e      	bls.n	8006b06 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8006a88:	f240 3193 	movw	r1, #915	; 0x393
 8006a8c:	4829      	ldr	r0, [pc, #164]	; (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006a8e:	f7fd f84b 	bl	8003b28 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8006a98:	d13e      	bne.n	8006b18 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006a9a:	68a3      	ldr	r3, [r4, #8]
 8006a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa4:	bf18      	it	ne
 8006aa6:	2b00      	cmpne	r3, #0
 8006aa8:	bf14      	ite	ne
 8006aaa:	2201      	movne	r2, #1
 8006aac:	2200      	moveq	r2, #0
 8006aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ab2:	bf0c      	ite	eq
 8006ab4:	2200      	moveq	r2, #0
 8006ab6:	f002 0201 	andne.w	r2, r2, #1
 8006aba:	b112      	cbz	r2, 8006ac2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ac0:	d132      	bne.n	8006b28 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ac2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d02c      	beq.n	8006b24 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006aca:	4b1b      	ldr	r3, [pc, #108]	; (8006b38 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006acc:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006ace:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006ad0:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8006ad2:	f022 021f 	bic.w	r2, r2, #31
 8006ad6:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	6826      	ldr	r6, [r4, #0]
 8006adc:	4332      	orrs	r2, r6
 8006ade:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006ae6:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	6866      	ldr	r6, [r4, #4]
 8006aec:	4332      	orrs	r2, r6
 8006aee:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8006af6:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8006af8:	68a4      	ldr	r4, [r4, #8]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	4322      	orrs	r2, r4
 8006afe:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8006b00:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8006b06:	4a0d      	ldr	r2, [pc, #52]	; (8006b3c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006b08:	fa22 f303 	lsr.w	r3, r2, r3
 8006b0c:	07db      	lsls	r3, r3, #31
 8006b0e:	d5bb      	bpl.n	8006a88 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8006b16:	d0c0      	beq.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006b18:	f44f 7165 	mov.w	r1, #916	; 0x394
 8006b1c:	4805      	ldr	r0, [pc, #20]	; (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006b1e:	f7fd f803 	bl	8003b28 <assert_failed>
 8006b22:	e7ba      	b.n	8006a9a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 8006b24:	2002      	movs	r0, #2
}
 8006b26:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8006b28:	f240 3195 	movw	r1, #917	; 0x395
 8006b2c:	4801      	ldr	r0, [pc, #4]	; (8006b34 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8006b2e:	f7fc fffb 	bl	8003b28 <assert_failed>
 8006b32:	e7c6      	b.n	8006ac2 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8006b34:	08027ad0 	.word	0x08027ad0
 8006b38:	40012300 	.word	0x40012300
 8006b3c:	02e602e7 	.word	0x02e602e7

08006b40 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b40:	1ec3      	subs	r3, r0, #3
 8006b42:	2b04      	cmp	r3, #4
{
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b48:	d80c      	bhi.n	8006b64 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b4a:	4909      	ldr	r1, [pc, #36]	; (8006b70 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b4c:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b4e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8006b52:	4b08      	ldr	r3, [pc, #32]	; (8006b74 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b54:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b56:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b5a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b5c:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8006b5e:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8006b60:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006b62:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8006b64:	2192      	movs	r1, #146	; 0x92
 8006b66:	4804      	ldr	r0, [pc, #16]	; (8006b78 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8006b68:	f7fc ffde 	bl	8003b28 <assert_failed>
 8006b6c:	e7ed      	b.n	8006b4a <HAL_NVIC_SetPriorityGrouping+0xa>
 8006b6e:	bf00      	nop
 8006b70:	e000ed00 	.word	0xe000ed00
 8006b74:	05fa0000 	.word	0x05fa0000
 8006b78:	08027b0c 	.word	0x08027b0c

08006b7c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006b7c:	2a0f      	cmp	r2, #15
{ 
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	4616      	mov	r6, r2
 8006b82:	4605      	mov	r5, r0
 8006b84:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006b86:	d836      	bhi.n	8006bf6 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006b88:	2c0f      	cmp	r4, #15
 8006b8a:	d82f      	bhi.n	8006bec <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b8c:	4b1c      	ldr	r3, [pc, #112]	; (8006c00 <HAL_NVIC_SetPriority+0x84>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b94:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b98:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b9a:	2804      	cmp	r0, #4
 8006b9c:	bf28      	it	cs
 8006b9e:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ba0:	2a06      	cmp	r2, #6
 8006ba2:	d918      	bls.n	8006bd6 <HAL_NVIC_SetPriority+0x5a>
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8006baa:	409a      	lsls	r2, r3
 8006bac:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb0:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8006bb4:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb6:	fa01 f100 	lsl.w	r1, r1, r0
 8006bba:	ea24 0401 	bic.w	r4, r4, r1
 8006bbe:	fa04 f403 	lsl.w	r4, r4, r3
 8006bc2:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8006bc6:	db09      	blt.n	8006bdc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bc8:	0124      	lsls	r4, r4, #4
 8006bca:	4b0e      	ldr	r3, [pc, #56]	; (8006c04 <HAL_NVIC_SetPriority+0x88>)
 8006bcc:	b2e4      	uxtb	r4, r4
 8006bce:	442b      	add	r3, r5
 8006bd0:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
 8006bd6:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bd8:	4633      	mov	r3, r6
 8006bda:	e7e9      	b.n	8006bb0 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bdc:	f005 050f 	and.w	r5, r5, #15
 8006be0:	0124      	lsls	r4, r4, #4
 8006be2:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <HAL_NVIC_SetPriority+0x8c>)
 8006be4:	b2e4      	uxtb	r4, r4
 8006be6:	442b      	add	r3, r5
 8006be8:	761c      	strb	r4, [r3, #24]
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8006bec:	21ab      	movs	r1, #171	; 0xab
 8006bee:	4807      	ldr	r0, [pc, #28]	; (8006c0c <HAL_NVIC_SetPriority+0x90>)
 8006bf0:	f7fc ff9a 	bl	8003b28 <assert_failed>
 8006bf4:	e7ca      	b.n	8006b8c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8006bf6:	21aa      	movs	r1, #170	; 0xaa
 8006bf8:	4804      	ldr	r0, [pc, #16]	; (8006c0c <HAL_NVIC_SetPriority+0x90>)
 8006bfa:	f7fc ff95 	bl	8003b28 <assert_failed>
 8006bfe:	e7c3      	b.n	8006b88 <HAL_NVIC_SetPriority+0xc>
 8006c00:	e000ed00 	.word	0xe000ed00
 8006c04:	e000e100 	.word	0xe000e100
 8006c08:	e000ecfc 	.word	0xe000ecfc
 8006c0c:	08027b0c 	.word	0x08027b0c

08006c10 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c10:	2800      	cmp	r0, #0
 8006c12:	db08      	blt.n	8006c26 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c14:	f000 011f 	and.w	r1, r0, #31
 8006c18:	2301      	movs	r3, #1
 8006c1a:	0940      	lsrs	r0, r0, #5
 8006c1c:	4a04      	ldr	r2, [pc, #16]	; (8006c30 <HAL_NVIC_EnableIRQ+0x20>)
 8006c1e:	408b      	lsls	r3, r1
 8006c20:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006c24:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c26:	21be      	movs	r1, #190	; 0xbe
 8006c28:	4802      	ldr	r0, [pc, #8]	; (8006c34 <HAL_NVIC_EnableIRQ+0x24>)
 8006c2a:	f7fc bf7d 	b.w	8003b28 <assert_failed>
 8006c2e:	bf00      	nop
 8006c30:	e000e100 	.word	0xe000e100
 8006c34:	08027b0c 	.word	0x08027b0c

08006c38 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	db0e      	blt.n	8006c5a <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c3c:	0943      	lsrs	r3, r0, #5
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f000 001f 	and.w	r0, r0, #31
 8006c44:	4907      	ldr	r1, [pc, #28]	; (8006c64 <HAL_NVIC_DisableIRQ+0x2c>)
 8006c46:	3320      	adds	r3, #32
 8006c48:	fa02 f000 	lsl.w	r0, r2, r0
 8006c4c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8006c50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006c54:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006c58:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8006c5a:	21ce      	movs	r1, #206	; 0xce
 8006c5c:	4802      	ldr	r0, [pc, #8]	; (8006c68 <HAL_NVIC_DisableIRQ+0x30>)
 8006c5e:	f7fc bf63 	b.w	8003b28 <assert_failed>
 8006c62:	bf00      	nop
 8006c64:	e000e100 	.word	0xe000e100
 8006c68:	08027b0c 	.word	0x08027b0c

08006c6c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d075      	beq.n	8006d5c <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006c70:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <HAL_CRC_Init+0xf4>)
 8006c72:	6802      	ldr	r2, [r0, #0]
 8006c74:	429a      	cmp	r2, r3
{
 8006c76:	b510      	push	{r4, lr}
 8006c78:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8006c7a:	d003      	beq.n	8006c84 <HAL_CRC_Init+0x18>
 8006c7c:	2170      	movs	r1, #112	; 0x70
 8006c7e:	4839      	ldr	r0, [pc, #228]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006c80:	f7fc ff52 	bl	8003b28 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006c84:	7f63      	ldrb	r3, [r4, #29]
 8006c86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d055      	beq.n	8006d3a <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006c8e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c90:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006c92:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006c94:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006c96:	d838      	bhi.n	8006d0a <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d13d      	bne.n	8006d18 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	4a32      	ldr	r2, [pc, #200]	; (8006d68 <HAL_CRC_Init+0xfc>)
 8006ca0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	f022 0218 	bic.w	r2, r2, #24
 8006ca8:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006caa:	7963      	ldrb	r3, [r4, #5]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d83c      	bhi.n	8006d2a <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006cb0:	b1e3      	cbz	r3, 8006cec <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006cb2:	6922      	ldr	r2, [r4, #16]
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8006cb8:	6962      	ldr	r2, [r4, #20]
 8006cba:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8006cbe:	d11d      	bne.n	8006cfc <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cc0:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006cc2:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cc4:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8006cc8:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006cca:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006cce:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006cd0:	d13d      	bne.n	8006d4e <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006cd2:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006cd4:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006cda:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006cdc:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006cde:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006ce0:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006ce2:	d82f      	bhi.n	8006d44 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006ce4:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8006ce6:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8006ce8:	7763      	strb	r3, [r4, #29]
}
 8006cea:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006cec:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8006cf4:	6962      	ldr	r2, [r4, #20]
 8006cf6:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8006cfa:	d0e1      	beq.n	8006cc0 <HAL_CRC_Init+0x54>
 8006cfc:	219c      	movs	r1, #156	; 0x9c
 8006cfe:	4819      	ldr	r0, [pc, #100]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006d00:	f7fc ff12 	bl	8003b28 <assert_failed>
 8006d04:	6962      	ldr	r2, [r4, #20]
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	e7da      	b.n	8006cc0 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8006d0a:	217e      	movs	r1, #126	; 0x7e
 8006d0c:	4815      	ldr	r0, [pc, #84]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006d0e:	f7fc ff0b 	bl	8003b28 <assert_failed>
 8006d12:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0c1      	beq.n	8006c9c <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006d18:	68e2      	ldr	r2, [r4, #12]
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	68a1      	ldr	r1, [r4, #8]
 8006d1e:	f000 f825 	bl	8006d6c <HAL_CRCEx_Polynomial_Set>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d0c1      	beq.n	8006caa <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8006d26:	2001      	movs	r0, #1
}
 8006d28:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8006d2a:	2190      	movs	r1, #144	; 0x90
 8006d2c:	480d      	ldr	r0, [pc, #52]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006d2e:	f7fc fefb 	bl	8003b28 <assert_failed>
 8006d32:	7963      	ldrb	r3, [r4, #5]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1bc      	bne.n	8006cb2 <HAL_CRC_Init+0x46>
 8006d38:	e7d8      	b.n	8006cec <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8006d3a:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8006d3c:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8006d3e:	f7fd fdef 	bl	8004920 <HAL_CRC_MspInit>
 8006d42:	e7a4      	b.n	8006c8e <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8006d44:	21a5      	movs	r1, #165	; 0xa5
 8006d46:	4807      	ldr	r0, [pc, #28]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006d48:	f7fc feee 	bl	8003b28 <assert_failed>
 8006d4c:	e7ca      	b.n	8006ce4 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8006d4e:	4805      	ldr	r0, [pc, #20]	; (8006d64 <HAL_CRC_Init+0xf8>)
 8006d50:	21a0      	movs	r1, #160	; 0xa0
 8006d52:	f7fc fee9 	bl	8003b28 <assert_failed>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	69a0      	ldr	r0, [r4, #24]
 8006d5a:	e7ba      	b.n	8006cd2 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8006d5c:	2001      	movs	r0, #1
}
 8006d5e:	4770      	bx	lr
 8006d60:	40023000 	.word	0x40023000
 8006d64:	08027b48 	.word	0x08027b48
 8006d68:	04c11db7 	.word	0x04c11db7

08006d6c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8006d6e:	f032 0318 	bics.w	r3, r2, #24
{
 8006d72:	4617      	mov	r7, r2
 8006d74:	4606      	mov	r6, r0
 8006d76:	460d      	mov	r5, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8006d78:	d003      	beq.n	8006d82 <HAL_CRCEx_Polynomial_Set+0x16>
 8006d7a:	215f      	movs	r1, #95	; 0x5f
 8006d7c:	4817      	ldr	r0, [pc, #92]	; (8006ddc <HAL_CRCEx_Polynomial_Set+0x70>)
 8006d7e:	f7fc fed3 	bl	8003b28 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006d82:	231e      	movs	r3, #30
 8006d84:	e001      	b.n	8006d8a <HAL_CRCEx_Polynomial_Set+0x1e>
 8006d86:	3b01      	subs	r3, #1
 8006d88:	d314      	bcc.n	8006db4 <HAL_CRCEx_Polynomial_Set+0x48>
 8006d8a:	fa25 f403 	lsr.w	r4, r5, r3
 8006d8e:	07e2      	lsls	r2, r4, #31
 8006d90:	d5f9      	bpl.n	8006d86 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8006d92:	2f18      	cmp	r7, #24
 8006d94:	d80f      	bhi.n	8006db6 <HAL_CRCEx_Polynomial_Set+0x4a>
 8006d96:	e8df f007 	tbb	[pc, r7]
 8006d9a:	0e12      	.short	0x0e12
 8006d9c:	0e0e0e0e 	.word	0x0e0e0e0e
 8006da0:	0e1b0e0e 	.word	0x0e1b0e0e
 8006da4:	0e0e0e0e 	.word	0x0e0e0e0e
 8006da8:	0e1e0e0e 	.word	0x0e1e0e0e
 8006dac:	0e0e0e0e 	.word	0x0e0e0e0e
 8006db0:	0e0e      	.short	0x0e0e
 8006db2:	10          	.byte	0x10
 8006db3:	00          	.byte	0x00
 8006db4:	b11f      	cbz	r7, 8006dbe <HAL_CRCEx_Polynomial_Set+0x52>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8006db6:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8006db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8006dba:	2b06      	cmp	r3, #6
 8006dbc:	d8fb      	bhi.n	8006db6 <HAL_CRCEx_Polynomial_Set+0x4a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006dbe:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006dc0:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006dc2:	614d      	str	r5, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006dc4:	688b      	ldr	r3, [r1, #8]
 8006dc6:	f023 0318 	bic.w	r3, r3, #24
 8006dca:	433b      	orrs	r3, r7
 8006dcc:	608b      	str	r3, [r1, #8]
}
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8006dd0:	2b0f      	cmp	r3, #15
 8006dd2:	d9f4      	bls.n	8006dbe <HAL_CRCEx_Polynomial_Set+0x52>
 8006dd4:	e7ef      	b.n	8006db6 <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_8B)
 8006dd6:	2b07      	cmp	r3, #7
 8006dd8:	d9f1      	bls.n	8006dbe <HAL_CRCEx_Polynomial_Set+0x52>
 8006dda:	e7ec      	b.n	8006db6 <HAL_CRCEx_Polynomial_Set+0x4a>
 8006ddc:	08027b80 	.word	0x08027b80

08006de0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8006de0:	b1d8      	cbz	r0, 8006e1a <HAL_DAC_Init+0x3a>
  {
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006de2:	4b0f      	ldr	r3, [pc, #60]	; (8006e20 <HAL_DAC_Init+0x40>)
 8006de4:	6802      	ldr	r2, [r0, #0]
 8006de6:	429a      	cmp	r2, r3
{ 
 8006de8:	b510      	push	{r4, lr}
 8006dea:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8006dec:	d004      	beq.n	8006df8 <HAL_DAC_Init+0x18>
 8006dee:	f240 1113 	movw	r1, #275	; 0x113
 8006df2:	480c      	ldr	r0, [pc, #48]	; (8006e24 <HAL_DAC_Init+0x44>)
 8006df4:	f7fc fe98 	bl	8003b28 <assert_failed>
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8006df8:	7923      	ldrb	r3, [r4, #4]
 8006dfa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006dfe:	b13b      	cbz	r3, 8006e10 <HAL_DAC_Init+0x30>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e00:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e02:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006e04:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e06:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8006e08:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006e0a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006e0c:	7122      	strb	r2, [r4, #4]
}
 8006e0e:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8006e10:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED; 
 8006e12:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8006e14:	f7fd fd9a 	bl	800494c <HAL_DAC_MspInit>
 8006e18:	e7f2      	b.n	8006e00 <HAL_DAC_Init+0x20>
     return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
}
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40007400 	.word	0x40007400
 8006e24:	08027bbc 	.word	0x08027bbc

08006e28 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2c:	4698      	mov	r8, r3
  uint32_t tmpreg = 0;
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8006e2e:	f031 0310 	bics.w	r3, r1, #16
{
 8006e32:	460d      	mov	r5, r1
 8006e34:	4604      	mov	r4, r0
 8006e36:	4617      	mov	r7, r2
 8006e38:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8006e3a:	d161      	bne.n	8006f00 <HAL_DAC_Start_DMA+0xd8>
  assert_param(IS_DAC_ALIGN(Alignment));
 8006e3c:	f036 0304 	bics.w	r3, r6, #4
 8006e40:	d001      	beq.n	8006e46 <HAL_DAC_Start_DMA+0x1e>
 8006e42:	2e08      	cmp	r6, #8
 8006e44:	d151      	bne.n	8006eea <HAL_DAC_Start_DMA+0xc2>
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006e46:	7962      	ldrb	r2, [r4, #5]
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d056      	beq.n	8006efa <HAL_DAC_Start_DMA+0xd2>
 8006e4c:	2201      	movs	r2, #1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e4e:	2302      	movs	r3, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006e50:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8006e54:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e56:	7123      	strb	r3, [r4, #4]
  if(Channel == DAC_CHANNEL_1)
 8006e58:	b9f5      	cbnz	r5, 8006e98 <HAL_DAC_Start_DMA+0x70>
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006e5a:	f8dc 3000 	ldr.w	r3, [ip]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8006e5e:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006e60:	68a0      	ldr	r0, [r4, #8]
 8006e62:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <HAL_DAC_Start_DMA+0x108>)
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006e64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006e68:	4932      	ldr	r1, [pc, #200]	; (8006f34 <HAL_DAC_Start_DMA+0x10c>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006e6a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006e6c:	4a32      	ldr	r2, [pc, #200]	; (8006f38 <HAL_DAC_Start_DMA+0x110>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006e6e:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006e70:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8006e72:	f8cc 3000 	str.w	r3, [ip]
    switch(Alignment)
 8006e76:	d04f      	beq.n	8006f18 <HAL_DAC_Start_DMA+0xf0>
 8006e78:	2e08      	cmp	r6, #8
 8006e7a:	d04a      	beq.n	8006f12 <HAL_DAC_Start_DMA+0xea>
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	d045      	beq.n	8006f0c <HAL_DAC_Start_DMA+0xe4>
 8006e80:	462a      	mov	r2, r5
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006e82:	f8dc 6000 	ldr.w	r6, [ip]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006e86:	4643      	mov	r3, r8
 8006e88:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006e8a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8006e8e:	f8cc 6000 	str.w	r6, [ip]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006e92:	f000 fbd3 	bl	800763c <HAL_DMA_Start_IT>
 8006e96:	e01c      	b.n	8006ed2 <HAL_DAC_Start_DMA+0xaa>
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8006e98:	f8dc 3000 	ldr.w	r3, [ip]
    switch(Alignment)
 8006e9c:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006e9e:	68e0      	ldr	r0, [r4, #12]
 8006ea0:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <HAL_DAC_Start_DMA+0x114>)
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8006ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006ea6:	4926      	ldr	r1, [pc, #152]	; (8006f40 <HAL_DAC_Start_DMA+0x118>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006ea8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006eaa:	4a26      	ldr	r2, [pc, #152]	; (8006f44 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006eac:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006eae:	64c2      	str	r2, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8006eb0:	f8cc 3000 	str.w	r3, [ip]
    switch(Alignment)
 8006eb4:	d039      	beq.n	8006f2a <HAL_DAC_Start_DMA+0x102>
 8006eb6:	2e08      	cmp	r6, #8
 8006eb8:	d034      	beq.n	8006f24 <HAL_DAC_Start_DMA+0xfc>
 8006eba:	b386      	cbz	r6, 8006f1e <HAL_DAC_Start_DMA+0xf6>
 8006ebc:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ebe:	f8dc 6000 	ldr.w	r6, [ip]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006ec2:	4643      	mov	r3, r8
 8006ec4:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006ec6:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8006eca:	f8cc 6000 	str.w	r6, [ip]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006ece:	f000 fbb5 	bl	800763c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	2101      	movs	r1, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006ed6:	2300      	movs	r3, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8006ed8:	6816      	ldr	r6, [r2, #0]
 8006eda:	fa01 f505 	lsl.w	r5, r1, r5
  
  /* Return function status */
  return HAL_OK;
 8006ede:	4618      	mov	r0, r3
  __HAL_DAC_ENABLE(hdac, Channel);
 8006ee0:	4335      	orrs	r5, r6
 8006ee2:	6015      	str	r5, [r2, #0]
  __HAL_UNLOCK(hdac);
 8006ee4:	7163      	strb	r3, [r4, #5]
}
 8006ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8006eea:	f240 210e 	movw	r1, #526	; 0x20e
 8006eee:	4816      	ldr	r0, [pc, #88]	; (8006f48 <HAL_DAC_Start_DMA+0x120>)
 8006ef0:	f7fc fe1a 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hdac);
 8006ef4:	7962      	ldrb	r2, [r4, #5]
 8006ef6:	2a01      	cmp	r2, #1
 8006ef8:	d1a8      	bne.n	8006e4c <HAL_DAC_Start_DMA+0x24>
 8006efa:	2002      	movs	r0, #2
}
 8006efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006f00:	f240 210d 	movw	r1, #525	; 0x20d
 8006f04:	4810      	ldr	r0, [pc, #64]	; (8006f48 <HAL_DAC_Start_DMA+0x120>)
 8006f06:	f7fc fe0f 	bl	8003b28 <assert_failed>
 8006f0a:	e797      	b.n	8006e3c <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006f0c:	f10c 0208 	add.w	r2, ip, #8
        break;
 8006f10:	e7b7      	b.n	8006e82 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006f12:	f10c 0210 	add.w	r2, ip, #16
        break;
 8006f16:	e7b4      	b.n	8006e82 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006f18:	f10c 020c 	add.w	r2, ip, #12
        break;
 8006f1c:	e7b1      	b.n	8006e82 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006f1e:	f10c 0214 	add.w	r2, ip, #20
        break;
 8006f22:	e7cc      	b.n	8006ebe <HAL_DAC_Start_DMA+0x96>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006f24:	f10c 021c 	add.w	r2, ip, #28
        break;
 8006f28:	e7c9      	b.n	8006ebe <HAL_DAC_Start_DMA+0x96>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006f2a:	f10c 0218 	add.w	r2, ip, #24
        break;
 8006f2e:	e7c6      	b.n	8006ebe <HAL_DAC_Start_DMA+0x96>
 8006f30:	08006fc1 	.word	0x08006fc1
 8006f34:	08006fd5 	.word	0x08006fd5
 8006f38:	08006fe5 	.word	0x08006fe5
 8006f3c:	08007131 	.word	0x08007131
 8006f40:	08007141 	.word	0x08007141
 8006f44:	0800714d 	.word	0x0800714d
 8006f48:	08027bbc 	.word	0x08027bbc

08006f4c <HAL_DAC_Stop_DMA>:
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8006f4c:	f031 0310 	bics.w	r3, r1, #16
{
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	460c      	mov	r4, r1
 8006f54:	4605      	mov	r5, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8006f56:	d119      	bne.n	8006f8c <HAL_DAC_Stop_DMA+0x40>
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f58:	6803      	ldr	r3, [r0, #0]
 8006f5a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f5e:	2201      	movs	r2, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f64:	fa02 f101 	lsl.w	r1, r2, r1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f68:	ea20 0006 	bic.w	r0, r0, r6
 8006f6c:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	ea22 0201 	bic.w	r2, r2, r1
 8006f74:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 8006f76:	b9e4      	cbnz	r4, 8006fb2 <HAL_DAC_Stop_DMA+0x66>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8006f78:	68a8      	ldr	r0, [r5, #8]
 8006f7a:	f000 fbbb 	bl	80076f4 <HAL_DMA_Abort>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8006f7e:	b110      	cbz	r0, 8006f86 <HAL_DAC_Stop_DMA+0x3a>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8006f80:	2304      	movs	r3, #4
 8006f82:	712b      	strb	r3, [r5, #4]
    hdac->State = HAL_DAC_STATE_READY;
  }

  /* Return function status */
  return status;
}
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
    hdac->State = HAL_DAC_STATE_READY;
 8006f86:	2301      	movs	r3, #1
 8006f88:	712b      	strb	r3, [r5, #4]
}
 8006f8a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8006f8c:	f44f 7121 	mov.w	r1, #644	; 0x284
 8006f90:	480a      	ldr	r0, [pc, #40]	; (8006fbc <HAL_DAC_Stop_DMA+0x70>)
 8006f92:	f7fc fdc9 	bl	8003b28 <assert_failed>
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f96:	682b      	ldr	r3, [r5, #0]
 8006f98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8006f9c:	2101      	movs	r1, #1
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	40a0      	lsls	r0, r4
  __HAL_DAC_DISABLE(hdac, Channel);
 8006fa2:	40a1      	lsls	r1, r4
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8006fa4:	ea22 0200 	bic.w	r2, r2, r0
 8006fa8:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8006faa:	681c      	ldr	r4, [r3, #0]
 8006fac:	ea24 0401 	bic.w	r4, r4, r1
 8006fb0:	601c      	str	r4, [r3, #0]
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8006fb2:	68e8      	ldr	r0, [r5, #12]
 8006fb4:	f000 fb9e 	bl	80076f4 <HAL_DMA_Abort>
 8006fb8:	e7e1      	b.n	8006f7e <HAL_DAC_Stop_DMA+0x32>
 8006fba:	bf00      	nop
 8006fbc:	08027bbc 	.word	0x08027bbc

08006fc0 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8006fc0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fc2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7fb fd1f 	bl	8002a08 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	7123      	strb	r3, [r4, #4]
}
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop

08006fd4 <DAC_DMAHalfConvCpltCh1>:
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006fd4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8006fd6:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8006fd8:	f7ff fffa 	bl	8006fd0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8006fdc:	bd08      	pop	{r3, pc}
 8006fde:	bf00      	nop

08006fe0 <HAL_DAC_ErrorCallbackCh1>:
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop

08006fe4 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8006fe4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006fe6:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006fe8:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006fea:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006fec:	f043 0304 	orr.w	r3, r3, #4
 8006ff0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8006ff2:	f7ff fff5 	bl	8006fe0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	7123      	strb	r3, [r4, #4]
}
 8006ffa:	bd10      	pop	{r4, pc}

08006ffc <HAL_DAC_DMAUnderrunCallbackCh1>:
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop

08007000 <HAL_DAC_IRQHandler>:
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007000:	6803      	ldr	r3, [r0, #0]
 8007002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007004:	0491      	lsls	r1, r2, #18
{
 8007006:	b510      	push	{r4, lr}
 8007008:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800700a:	d403      	bmi.n	8007014 <HAL_DAC_IRQHandler+0x14>
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800700c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800700e:	0092      	lsls	r2, r2, #2
 8007010:	d413      	bmi.n	800703a <HAL_DAC_IRQHandler+0x3a>
}
 8007012:	bd10      	pop	{r4, pc}
    hdac->State = HAL_DAC_STATE_ERROR;
 8007014:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8007016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    hdac->State = HAL_DAC_STATE_ERROR;
 800701a:	7102      	strb	r2, [r0, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800701c:	6902      	ldr	r2, [r0, #16]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	6102      	str	r2, [r0, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8007024:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800702c:	601a      	str	r2, [r3, #0]
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800702e:	f7ff ffe5 	bl	8006ffc <HAL_DAC_DMAUnderrunCallbackCh1>
 8007032:	6823      	ldr	r3, [r4, #0]
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007036:	0092      	lsls	r2, r2, #2
 8007038:	d5eb      	bpl.n	8007012 <HAL_DAC_IRQHandler+0x12>
    hdac->State = HAL_DAC_STATE_ERROR;
 800703a:	2204      	movs	r2, #4
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800703c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007040:	4620      	mov	r0, r4
    hdac->State = HAL_DAC_STATE_ERROR;
 8007042:	7122      	strb	r2, [r4, #4]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8007044:	6922      	ldr	r2, [r4, #16]
 8007046:	f042 0202 	orr.w	r2, r2, #2
 800704a:	6122      	str	r2, [r4, #16]
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800704c:	6359      	str	r1, [r3, #52]	; 0x34
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8007054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8007058:	601a      	str	r2, [r3, #0]
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800705a:	f000 b867 	b.w	800712c <HAL_DACEx_DMAUnderrunCallbackCh2>
 800705e:	bf00      	nop

08007060 <HAL_DAC_ConfigChannel>:
{
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007064:	680a      	ldr	r2, [r1, #0]
{
 8007066:	4604      	mov	r4, r0
 8007068:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800706a:	f022 0308 	bic.w	r3, r2, #8
 800706e:	f022 0004 	bic.w	r0, r2, #4
 8007072:	f022 0110 	bic.w	r1, r2, #16
 8007076:	2b24      	cmp	r3, #36	; 0x24
 8007078:	bf18      	it	ne
 800707a:	2800      	cmpne	r0, #0
 800707c:	bf14      	ite	ne
 800707e:	2301      	movne	r3, #1
 8007080:	2300      	moveq	r3, #0
 8007082:	2a3c      	cmp	r2, #60	; 0x3c
 8007084:	bf0c      	ite	eq
 8007086:	2300      	moveq	r3, #0
 8007088:	f003 0301 	andne.w	r3, r3, #1
 800708c:	290c      	cmp	r1, #12
 800708e:	bf0c      	ite	eq
 8007090:	2300      	moveq	r3, #0
 8007092:	f003 0301 	andne.w	r3, r3, #1
 8007096:	b11b      	cbz	r3, 80070a0 <HAL_DAC_ConfigChannel+0x40>
 8007098:	f022 0220 	bic.w	r2, r2, #32
 800709c:	2a14      	cmp	r2, #20
 800709e:	d136      	bne.n	800710e <HAL_DAC_ConfigChannel+0xae>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 80070a0:	686b      	ldr	r3, [r5, #4]
 80070a2:	f033 0302 	bics.w	r3, r3, #2
 80070a6:	d12c      	bne.n	8007102 <HAL_DAC_ConfigChannel+0xa2>
  assert_param(IS_DAC_CHANNEL(Channel));
 80070a8:	f036 0310 	bics.w	r3, r6, #16
 80070ac:	d11f      	bne.n	80070ee <HAL_DAC_ConfigChannel+0x8e>
  __HAL_LOCK(hdac);
 80070ae:	7963      	ldrb	r3, [r4, #5]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d024      	beq.n	80070fe <HAL_DAC_ConfigChannel+0x9e>
  hdac->State = HAL_DAC_STATE_BUSY;
 80070b4:	2302      	movs	r3, #2
  tmpreg1 = hdac->Instance->CR;
 80070b6:	6821      	ldr	r1, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80070b8:	20c0      	movs	r0, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80070ba:	f640 77fe 	movw	r7, #4094	; 0xffe
  hdac->State = HAL_DAC_STATE_BUSY;
 80070be:	7123      	strb	r3, [r4, #4]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80070c0:	686a      	ldr	r2, [r5, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80070c2:	40b7      	lsls	r7, r6
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80070c4:	682b      	ldr	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80070c6:	fa00 f506 	lsl.w	r5, r0, r6
  tmpreg1 = hdac->Instance->CR;
 80070ca:	6808      	ldr	r0, [r1, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80070cc:	4313      	orrs	r3, r2
  tmpreg1 |= tmpreg2 << Channel;
 80070ce:	fa03 f206 	lsl.w	r2, r3, r6
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80070d2:	ea20 0307 	bic.w	r3, r0, r7
  __HAL_UNLOCK(hdac);
 80070d6:	2600      	movs	r6, #0
  hdac->State = HAL_DAC_STATE_READY;
 80070d8:	2701      	movs	r7, #1
  tmpreg1 |= tmpreg2 << Channel;
 80070da:	431a      	orrs	r2, r3
  return HAL_OK;
 80070dc:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 80070de:	600a      	str	r2, [r1, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80070e0:	680b      	ldr	r3, [r1, #0]
 80070e2:	ea23 0305 	bic.w	r3, r3, r5
 80070e6:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80070e8:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 80070ea:	7166      	strb	r6, [r4, #5]
}
 80070ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80070ee:	f44f 7157 	mov.w	r1, #860	; 0x35c
 80070f2:	480a      	ldr	r0, [pc, #40]	; (800711c <HAL_DAC_ConfigChannel+0xbc>)
 80070f4:	f7fc fd18 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hdac);
 80070f8:	7963      	ldrb	r3, [r4, #5]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d1da      	bne.n	80070b4 <HAL_DAC_ConfigChannel+0x54>
 80070fe:	2002      	movs	r0, #2
}
 8007100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8007102:	f240 315b 	movw	r1, #859	; 0x35b
 8007106:	4805      	ldr	r0, [pc, #20]	; (800711c <HAL_DAC_ConfigChannel+0xbc>)
 8007108:	f7fc fd0e 	bl	8003b28 <assert_failed>
 800710c:	e7cc      	b.n	80070a8 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 800710e:	f240 315a 	movw	r1, #858	; 0x35a
 8007112:	4802      	ldr	r0, [pc, #8]	; (800711c <HAL_DAC_ConfigChannel+0xbc>)
 8007114:	f7fc fd08 	bl	8003b28 <assert_failed>
 8007118:	e7c2      	b.n	80070a0 <HAL_DAC_ConfigChannel+0x40>
 800711a:	bf00      	nop
 800711c:	08027bbc 	.word	0x08027bbc

08007120 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop

08007128 <HAL_DACEx_ErrorCallbackCh2>:
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop

0800712c <HAL_DACEx_DMAUnderrunCallbackCh2>:
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8007130:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007132:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8007134:	4620      	mov	r0, r4
 8007136:	f7ff fff3 	bl	8007120 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800713a:	2301      	movs	r3, #1
 800713c:	7123      	strb	r3, [r4, #4]
}
 800713e:	bd10      	pop	{r4, pc}

08007140 <DAC_DMAHalfConvCpltCh2>:
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8007140:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007142:	b508      	push	{r3, lr}
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8007144:	f7ff ffee 	bl	8007124 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007148:	bd08      	pop	{r3, pc}
 800714a:	bf00      	nop

0800714c <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800714c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800714e:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007150:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8007152:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007154:	f043 0304 	orr.w	r3, r3, #4
 8007158:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800715a:	f7ff ffe5 	bl	8007128 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800715e:	2301      	movs	r3, #1
 8007160:	7123      	strb	r3, [r4, #4]
}
 8007162:	bd10      	pop	{r4, pc}

08007164 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8007168:	f7ff f8be 	bl	80062e8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800716c:	2c00      	cmp	r4, #0
 800716e:	f000 8145 	beq.w	80073fc <HAL_DMA_Init+0x298>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	4605      	mov	r5, r0
 8007176:	4bb8      	ldr	r3, [pc, #736]	; (8007458 <HAL_DMA_Init+0x2f4>)
 8007178:	48b8      	ldr	r0, [pc, #736]	; (800745c <HAL_DMA_Init+0x2f8>)
 800717a:	49b9      	ldr	r1, [pc, #740]	; (8007460 <HAL_DMA_Init+0x2fc>)
 800717c:	429a      	cmp	r2, r3
 800717e:	bf18      	it	ne
 8007180:	4282      	cmpne	r2, r0
 8007182:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	428a      	cmp	r2, r1
 800718e:	bf0c      	ite	eq
 8007190:	2300      	moveq	r3, #0
 8007192:	f003 0301 	andne.w	r3, r3, #1
 8007196:	3130      	adds	r1, #48	; 0x30
 8007198:	4282      	cmp	r2, r0
 800719a:	bf0c      	ite	eq
 800719c:	2300      	moveq	r3, #0
 800719e:	f003 0301 	andne.w	r3, r3, #1
 80071a2:	3030      	adds	r0, #48	; 0x30
 80071a4:	428a      	cmp	r2, r1
 80071a6:	bf0c      	ite	eq
 80071a8:	2300      	moveq	r3, #0
 80071aa:	f003 0301 	andne.w	r3, r3, #1
 80071ae:	3130      	adds	r1, #48	; 0x30
 80071b0:	4282      	cmp	r2, r0
 80071b2:	bf0c      	ite	eq
 80071b4:	2300      	moveq	r3, #0
 80071b6:	f003 0301 	andne.w	r3, r3, #1
 80071ba:	3030      	adds	r0, #48	; 0x30
 80071bc:	428a      	cmp	r2, r1
 80071be:	bf0c      	ite	eq
 80071c0:	2300      	moveq	r3, #0
 80071c2:	f003 0301 	andne.w	r3, r3, #1
 80071c6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80071ca:	4282      	cmp	r2, r0
 80071cc:	bf0c      	ite	eq
 80071ce:	2300      	moveq	r3, #0
 80071d0:	f003 0301 	andne.w	r3, r3, #1
 80071d4:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80071d8:	428a      	cmp	r2, r1
 80071da:	bf0c      	ite	eq
 80071dc:	2300      	moveq	r3, #0
 80071de:	f003 0301 	andne.w	r3, r3, #1
 80071e2:	3130      	adds	r1, #48	; 0x30
 80071e4:	4282      	cmp	r2, r0
 80071e6:	bf0c      	ite	eq
 80071e8:	2300      	moveq	r3, #0
 80071ea:	f003 0301 	andne.w	r3, r3, #1
 80071ee:	3030      	adds	r0, #48	; 0x30
 80071f0:	428a      	cmp	r2, r1
 80071f2:	bf0c      	ite	eq
 80071f4:	2300      	moveq	r3, #0
 80071f6:	f003 0301 	andne.w	r3, r3, #1
 80071fa:	3130      	adds	r1, #48	; 0x30
 80071fc:	4282      	cmp	r2, r0
 80071fe:	bf0c      	ite	eq
 8007200:	2300      	moveq	r3, #0
 8007202:	f003 0301 	andne.w	r3, r3, #1
 8007206:	3030      	adds	r0, #48	; 0x30
 8007208:	428a      	cmp	r2, r1
 800720a:	bf0c      	ite	eq
 800720c:	2300      	moveq	r3, #0
 800720e:	f003 0301 	andne.w	r3, r3, #1
 8007212:	3130      	adds	r1, #48	; 0x30
 8007214:	4282      	cmp	r2, r0
 8007216:	bf0c      	ite	eq
 8007218:	2300      	moveq	r3, #0
 800721a:	f003 0301 	andne.w	r3, r3, #1
 800721e:	428a      	cmp	r2, r1
 8007220:	bf0c      	ite	eq
 8007222:	2300      	moveq	r3, #0
 8007224:	f003 0301 	andne.w	r3, r3, #1
 8007228:	b11b      	cbz	r3, 8007232 <HAL_DMA_Init+0xce>
 800722a:	4b8e      	ldr	r3, [pc, #568]	; (8007464 <HAL_DMA_Init+0x300>)
 800722c:	429a      	cmp	r2, r3
 800722e:	f040 812c 	bne.w	800748a <HAL_DMA_Init+0x326>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007232:	6863      	ldr	r3, [r4, #4]
 8007234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007238:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800723c:	bf18      	it	ne
 800723e:	2b00      	cmpne	r3, #0
 8007240:	bf14      	ite	ne
 8007242:	2201      	movne	r2, #1
 8007244:	2200      	moveq	r2, #0
 8007246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800724a:	bf0c      	ite	eq
 800724c:	2200      	moveq	r2, #0
 800724e:	f002 0201 	andne.w	r2, r2, #1
 8007252:	b11a      	cbz	r2, 800725c <HAL_DMA_Init+0xf8>
 8007254:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007258:	f040 811c 	bne.w	8007494 <HAL_DMA_Init+0x330>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800725c:	68a3      	ldr	r3, [r4, #8]
 800725e:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8007262:	d002      	beq.n	800726a <HAL_DMA_Init+0x106>
 8007264:	2b80      	cmp	r3, #128	; 0x80
 8007266:	f040 80ab 	bne.w	80073c0 <HAL_DMA_Init+0x25c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007270:	f040 80af 	bne.w	80073d2 <HAL_DMA_Init+0x26e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800727a:	f040 80b3 	bne.w	80073e4 <HAL_DMA_Init+0x280>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800727e:	6963      	ldr	r3, [r4, #20]
 8007280:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007284:	d003      	beq.n	800728e <HAL_DMA_Init+0x12a>
 8007286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800728a:	f040 8094 	bne.w	80073b6 <HAL_DMA_Init+0x252>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800728e:	69a3      	ldr	r3, [r4, #24]
 8007290:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8007294:	d003      	beq.n	800729e <HAL_DMA_Init+0x13a>
 8007296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800729a:	f040 8087 	bne.w	80073ac <HAL_DMA_Init+0x248>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800729e:	69e3      	ldr	r3, [r4, #28]
 80072a0:	f033 0220 	bics.w	r2, r3, #32
 80072a4:	d002      	beq.n	80072ac <HAL_DMA_Init+0x148>
 80072a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072aa:	d172      	bne.n	8007392 <HAL_DMA_Init+0x22e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80072ac:	6a23      	ldr	r3, [r4, #32]
 80072ae:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80072b2:	d176      	bne.n	80073a2 <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80072b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072b6:	f033 0204 	bics.w	r2, r3, #4
 80072ba:	d162      	bne.n	8007382 <HAL_DMA_Init+0x21e>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d150      	bne.n	8007362 <HAL_DMA_Init+0x1fe>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072c0:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80072c2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80072c4:	2100      	movs	r1, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80072c6:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80072ca:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	f022 0201 	bic.w	r2, r2, #1
 80072d4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072d6:	e006      	b.n	80072e6 <HAL_DMA_Init+0x182>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072d8:	f7ff f806 	bl	80062e8 <HAL_GetTick>
 80072dc:	1b40      	subs	r0, r0, r5
 80072de:	2805      	cmp	r0, #5
 80072e0:	f200 8085 	bhi.w	80073ee <HAL_DMA_Init+0x28a>
 80072e4:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	07d1      	lsls	r1, r2, #31
 80072ea:	d4f5      	bmi.n	80072d8 <HAL_DMA_Init+0x174>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072ec:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80072f0:	68e5      	ldr	r5, [r4, #12]
 80072f2:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 80072f4:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072f6:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072fa:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072fc:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 80072fe:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007300:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007304:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007306:	4958      	ldr	r1, [pc, #352]	; (8007468 <HAL_DMA_Init+0x304>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007308:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800730a:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800730c:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800730e:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8007310:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007312:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007314:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007318:	d072      	beq.n	8007400 <HAL_DMA_Init+0x29c>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800731a:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800731c:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800731e:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007322:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007324:	b2da      	uxtb	r2, r3
 8007326:	4951      	ldr	r1, [pc, #324]	; (800746c <HAL_DMA_Init+0x308>)
  hdma->Instance->FCR = tmp;
 8007328:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800732a:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800732c:	4850      	ldr	r0, [pc, #320]	; (8007470 <HAL_DMA_Init+0x30c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800732e:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8007332:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007334:	4a4f      	ldr	r2, [pc, #316]	; (8007474 <HAL_DMA_Init+0x310>)
  hdma->State = HAL_DMA_STATE_READY;
 8007336:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800733a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800733e:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007342:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007346:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007348:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800734c:	bf88      	it	hi
 800734e:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007350:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007352:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007354:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8007356:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007358:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735a:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800735c:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8007362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007364:	2b03      	cmp	r3, #3
 8007366:	d86c      	bhi.n	8007442 <HAL_DMA_Init+0x2de>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8007368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800736a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800736e:	d16d      	bne.n	800744c <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8007370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007372:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8007376:	d0a3      	beq.n	80072c0 <HAL_DMA_Init+0x15c>
 8007378:	21c9      	movs	r1, #201	; 0xc9
 800737a:	483f      	ldr	r0, [pc, #252]	; (8007478 <HAL_DMA_Init+0x314>)
 800737c:	f7fc fbd4 	bl	8003b28 <assert_failed>
 8007380:	e79e      	b.n	80072c0 <HAL_DMA_Init+0x15c>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8007382:	21c2      	movs	r1, #194	; 0xc2
 8007384:	483c      	ldr	r0, [pc, #240]	; (8007478 <HAL_DMA_Init+0x314>)
 8007386:	f7fc fbcf 	bl	8003b28 <assert_failed>
 800738a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800738c:	2b00      	cmp	r3, #0
 800738e:	d097      	beq.n	80072c0 <HAL_DMA_Init+0x15c>
 8007390:	e7e7      	b.n	8007362 <HAL_DMA_Init+0x1fe>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8007392:	21c0      	movs	r1, #192	; 0xc0
 8007394:	4838      	ldr	r0, [pc, #224]	; (8007478 <HAL_DMA_Init+0x314>)
 8007396:	f7fc fbc7 	bl	8003b28 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800739a:	6a23      	ldr	r3, [r4, #32]
 800739c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80073a0:	d088      	beq.n	80072b4 <HAL_DMA_Init+0x150>
 80073a2:	21c1      	movs	r1, #193	; 0xc1
 80073a4:	4834      	ldr	r0, [pc, #208]	; (8007478 <HAL_DMA_Init+0x314>)
 80073a6:	f7fc fbbf 	bl	8003b28 <assert_failed>
 80073aa:	e783      	b.n	80072b4 <HAL_DMA_Init+0x150>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80073ac:	21bf      	movs	r1, #191	; 0xbf
 80073ae:	4832      	ldr	r0, [pc, #200]	; (8007478 <HAL_DMA_Init+0x314>)
 80073b0:	f7fc fbba 	bl	8003b28 <assert_failed>
 80073b4:	e773      	b.n	800729e <HAL_DMA_Init+0x13a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80073b6:	21be      	movs	r1, #190	; 0xbe
 80073b8:	482f      	ldr	r0, [pc, #188]	; (8007478 <HAL_DMA_Init+0x314>)
 80073ba:	f7fc fbb5 	bl	8003b28 <assert_failed>
 80073be:	e766      	b.n	800728e <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80073c0:	21bb      	movs	r1, #187	; 0xbb
 80073c2:	482d      	ldr	r0, [pc, #180]	; (8007478 <HAL_DMA_Init+0x314>)
 80073c4:	f7fc fbb0 	bl	8003b28 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80073c8:	68e3      	ldr	r3, [r4, #12]
 80073ca:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80073ce:	f43f af51 	beq.w	8007274 <HAL_DMA_Init+0x110>
 80073d2:	21bc      	movs	r1, #188	; 0xbc
 80073d4:	4828      	ldr	r0, [pc, #160]	; (8007478 <HAL_DMA_Init+0x314>)
 80073d6:	f7fc fba7 	bl	8003b28 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80073e0:	f43f af4d 	beq.w	800727e <HAL_DMA_Init+0x11a>
 80073e4:	21bd      	movs	r1, #189	; 0xbd
 80073e6:	4824      	ldr	r0, [pc, #144]	; (8007478 <HAL_DMA_Init+0x314>)
 80073e8:	f7fc fb9e 	bl	8003b28 <assert_failed>
 80073ec:	e747      	b.n	800727e <HAL_DMA_Init+0x11a>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073f0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80073f2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80073f4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80073f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80073fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80073fc:	2001      	movs	r0, #1
}
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007400:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8007404:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007406:	4338      	orrs	r0, r7
 8007408:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 800740a:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 800740c:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800740e:	f025 0507 	bic.w	r5, r5, #7
 8007412:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 8007414:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007418:	2f00      	cmp	r7, #0
 800741a:	d083      	beq.n	8007324 <HAL_DMA_Init+0x1c0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800741c:	b376      	cbz	r6, 800747c <HAL_DMA_Init+0x318>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800741e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8007422:	d03c      	beq.n	800749e <HAL_DMA_Init+0x33a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007424:	2a02      	cmp	r2, #2
 8007426:	d905      	bls.n	8007434 <HAL_DMA_Init+0x2d0>
 8007428:	2a03      	cmp	r2, #3
 800742a:	f47f af7b 	bne.w	8007324 <HAL_DMA_Init+0x1c0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800742e:	01fa      	lsls	r2, r7, #7
 8007430:	f57f af78 	bpl.w	8007324 <HAL_DMA_Init+0x1c0>
        hdma->State = HAL_DMA_STATE_READY;
 8007434:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007436:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8007438:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800743a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800743c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8007442:	21c7      	movs	r1, #199	; 0xc7
 8007444:	480c      	ldr	r0, [pc, #48]	; (8007478 <HAL_DMA_Init+0x314>)
 8007446:	f7fc fb6f 	bl	8003b28 <assert_failed>
 800744a:	e78d      	b.n	8007368 <HAL_DMA_Init+0x204>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800744c:	21c8      	movs	r1, #200	; 0xc8
 800744e:	480a      	ldr	r0, [pc, #40]	; (8007478 <HAL_DMA_Init+0x314>)
 8007450:	f7fc fb6a 	bl	8003b28 <assert_failed>
 8007454:	e78c      	b.n	8007370 <HAL_DMA_Init+0x20c>
 8007456:	bf00      	nop
 8007458:	40026010 	.word	0x40026010
 800745c:	40026028 	.word	0x40026028
 8007460:	40026040 	.word	0x40026040
 8007464:	400264b8 	.word	0x400264b8
 8007468:	e010803f 	.word	0xe010803f
 800746c:	aaaaaaab 	.word	0xaaaaaaab
 8007470:	08027c2c 	.word	0x08027c2c
 8007474:	fffffc00 	.word	0xfffffc00
 8007478:	08027bf4 	.word	0x08027bf4
    switch (tmp)
 800747c:	2a01      	cmp	r2, #1
 800747e:	d01d      	beq.n	80074bc <HAL_DMA_Init+0x358>
 8007480:	f032 0202 	bics.w	r2, r2, #2
 8007484:	f47f af4e 	bne.w	8007324 <HAL_DMA_Init+0x1c0>
 8007488:	e7d1      	b.n	800742e <HAL_DMA_Init+0x2ca>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800748a:	21b9      	movs	r1, #185	; 0xb9
 800748c:	480e      	ldr	r0, [pc, #56]	; (80074c8 <HAL_DMA_Init+0x364>)
 800748e:	f7fc fb4b 	bl	8003b28 <assert_failed>
 8007492:	e6ce      	b.n	8007232 <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007494:	21ba      	movs	r1, #186	; 0xba
 8007496:	480c      	ldr	r0, [pc, #48]	; (80074c8 <HAL_DMA_Init+0x364>)
 8007498:	f7fc fb46 	bl	8003b28 <assert_failed>
 800749c:	e6de      	b.n	800725c <HAL_DMA_Init+0xf8>
    switch (tmp)
 800749e:	2a03      	cmp	r2, #3
 80074a0:	f63f af40 	bhi.w	8007324 <HAL_DMA_Init+0x1c0>
 80074a4:	a101      	add	r1, pc, #4	; (adr r1, 80074ac <HAL_DMA_Init+0x348>)
 80074a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074aa:	bf00      	nop
 80074ac:	08007435 	.word	0x08007435
 80074b0:	0800742f 	.word	0x0800742f
 80074b4:	08007435 	.word	0x08007435
 80074b8:	080074bd 	.word	0x080074bd
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074bc:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 80074c0:	f47f af30 	bne.w	8007324 <HAL_DMA_Init+0x1c0>
 80074c4:	e7b6      	b.n	8007434 <HAL_DMA_Init+0x2d0>
 80074c6:	bf00      	nop
 80074c8:	08027bf4 	.word	0x08027bf4

080074cc <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80074cc:	2800      	cmp	r0, #0
 80074ce:	f000 8099 	beq.w	8007604 <HAL_DMA_DeInit+0x138>
{
 80074d2:	b570      	push	{r4, r5, r6, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80074d4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80074d8:	4604      	mov	r4, r0
 80074da:	2b02      	cmp	r3, #2
 80074dc:	b2d8      	uxtb	r0, r3
 80074de:	f000 808b 	beq.w	80075f8 <HAL_DMA_DeInit+0x12c>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	4b4c      	ldr	r3, [pc, #304]	; (8007618 <HAL_DMA_DeInit+0x14c>)
 80074e6:	484d      	ldr	r0, [pc, #308]	; (800761c <HAL_DMA_DeInit+0x150>)
 80074e8:	494d      	ldr	r1, [pc, #308]	; (8007620 <HAL_DMA_DeInit+0x154>)
 80074ea:	429a      	cmp	r2, r3
 80074ec:	bf18      	it	ne
 80074ee:	4282      	cmpne	r2, r0
 80074f0:	4d4c      	ldr	r5, [pc, #304]	; (8007624 <HAL_DMA_DeInit+0x158>)
 80074f2:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80074f6:	bf14      	ite	ne
 80074f8:	2301      	movne	r3, #1
 80074fa:	2300      	moveq	r3, #0
 80074fc:	428a      	cmp	r2, r1
 80074fe:	bf0c      	ite	eq
 8007500:	2300      	moveq	r3, #0
 8007502:	f003 0301 	andne.w	r3, r3, #1
 8007506:	3148      	adds	r1, #72	; 0x48
 8007508:	42aa      	cmp	r2, r5
 800750a:	bf0c      	ite	eq
 800750c:	2300      	moveq	r3, #0
 800750e:	f003 0301 	andne.w	r3, r3, #1
 8007512:	3548      	adds	r5, #72	; 0x48
 8007514:	4282      	cmp	r2, r0
 8007516:	bf0c      	ite	eq
 8007518:	2300      	moveq	r3, #0
 800751a:	f003 0301 	andne.w	r3, r3, #1
 800751e:	3048      	adds	r0, #72	; 0x48
 8007520:	428a      	cmp	r2, r1
 8007522:	bf0c      	ite	eq
 8007524:	2300      	moveq	r3, #0
 8007526:	f003 0301 	andne.w	r3, r3, #1
 800752a:	f501 7162 	add.w	r1, r1, #904	; 0x388
 800752e:	42aa      	cmp	r2, r5
 8007530:	bf0c      	ite	eq
 8007532:	2300      	moveq	r3, #0
 8007534:	f003 0301 	andne.w	r3, r3, #1
 8007538:	f505 7562 	add.w	r5, r5, #904	; 0x388
 800753c:	4282      	cmp	r2, r0
 800753e:	bf0c      	ite	eq
 8007540:	2300      	moveq	r3, #0
 8007542:	f003 0301 	andne.w	r3, r3, #1
 8007546:	f500 7062 	add.w	r0, r0, #904	; 0x388
 800754a:	428a      	cmp	r2, r1
 800754c:	bf0c      	ite	eq
 800754e:	2300      	moveq	r3, #0
 8007550:	f003 0301 	andne.w	r3, r3, #1
 8007554:	3148      	adds	r1, #72	; 0x48
 8007556:	42aa      	cmp	r2, r5
 8007558:	bf0c      	ite	eq
 800755a:	2300      	moveq	r3, #0
 800755c:	f003 0301 	andne.w	r3, r3, #1
 8007560:	3548      	adds	r5, #72	; 0x48
 8007562:	4282      	cmp	r2, r0
 8007564:	bf0c      	ite	eq
 8007566:	2300      	moveq	r3, #0
 8007568:	f003 0301 	andne.w	r3, r3, #1
 800756c:	3048      	adds	r0, #72	; 0x48
 800756e:	428a      	cmp	r2, r1
 8007570:	bf0c      	ite	eq
 8007572:	2300      	moveq	r3, #0
 8007574:	f003 0301 	andne.w	r3, r3, #1
 8007578:	3148      	adds	r1, #72	; 0x48
 800757a:	42aa      	cmp	r2, r5
 800757c:	bf0c      	ite	eq
 800757e:	2300      	moveq	r3, #0
 8007580:	f003 0301 	andne.w	r3, r3, #1
 8007584:	4282      	cmp	r2, r0
 8007586:	bf0c      	ite	eq
 8007588:	2300      	moveq	r3, #0
 800758a:	f003 0301 	andne.w	r3, r3, #1
 800758e:	428a      	cmp	r2, r1
 8007590:	bf0c      	ite	eq
 8007592:	2300      	moveq	r3, #0
 8007594:	f003 0301 	andne.w	r3, r3, #1
 8007598:	b113      	cbz	r3, 80075a0 <HAL_DMA_DeInit+0xd4>
 800759a:	4b23      	ldr	r3, [pc, #140]	; (8007628 <HAL_DMA_DeInit+0x15c>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d133      	bne.n	8007608 <HAL_DMA_DeInit+0x13c>
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075a0:	b2d3      	uxtb	r3, r2
 80075a2:	4822      	ldr	r0, [pc, #136]	; (800762c <HAL_DMA_DeInit+0x160>)
  __HAL_DMA_DISABLE(hdma);
 80075a4:	6815      	ldr	r5, [r2, #0]
  hdma->Instance->CR   = 0U;
 80075a6:	2100      	movs	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075a8:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 80075aa:	f025 0501 	bic.w	r5, r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075ae:	fba0 6003 	umull	r6, r0, r0, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075b2:	4e1f      	ldr	r6, [pc, #124]	; (8007630 <HAL_DMA_DeInit+0x164>)
  __HAL_DMA_DISABLE(hdma);
 80075b4:	6015      	str	r5, [r2, #0]
  if (stream_number > 3U)
 80075b6:	2b5f      	cmp	r3, #95	; 0x5f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075b8:	ea4f 1010 	mov.w	r0, r0, lsr #4
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80075bc:	f04f 0521 	mov.w	r5, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80075c0:	6011      	str	r1, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075c2:	5c30      	ldrb	r0, [r6, r0]
  hdma->Instance->NDTR = 0U;
 80075c4:	6051      	str	r1, [r2, #4]
  hdma->Instance->PAR  = 0U;
 80075c6:	6091      	str	r1, [r2, #8]
  hdma->Instance->M0AR = 0U;
 80075c8:	60d1      	str	r1, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80075ca:	6111      	str	r1, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80075cc:	6155      	str	r5, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075ce:	65e0      	str	r0, [r4, #92]	; 0x5c
  if (stream_number > 3U)
 80075d0:	d813      	bhi.n	80075fa <HAL_DMA_DeInit+0x12e>
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075d2:	4918      	ldr	r1, [pc, #96]	; (8007634 <HAL_DMA_DeInit+0x168>)
 80075d4:	4011      	ands	r1, r2
  hdma->XferCpltCallback = NULL;
 80075d6:	2300      	movs	r3, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075d8:	223f      	movs	r2, #63	; 0x3f
 80075da:	65a1      	str	r1, [r4, #88]	; 0x58
 80075dc:	4082      	lsls	r2, r0
  return HAL_OK;
 80075de:	4618      	mov	r0, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075e0:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075e2:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80075e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80075e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80075ec:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80075f0:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80075f4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80075f8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075fa:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80075fe:	4011      	ands	r1, r2
 8007600:	3104      	adds	r1, #4
 8007602:	e7e8      	b.n	80075d6 <HAL_DMA_DeInit+0x10a>
    return HAL_ERROR;
 8007604:	2001      	movs	r0, #1
}
 8007606:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007608:	f240 1149 	movw	r1, #329	; 0x149
 800760c:	480a      	ldr	r0, [pc, #40]	; (8007638 <HAL_DMA_DeInit+0x16c>)
 800760e:	f7fc fa8b 	bl	8003b28 <assert_failed>
 8007612:	6822      	ldr	r2, [r4, #0]
 8007614:	e7c4      	b.n	80075a0 <HAL_DMA_DeInit+0xd4>
 8007616:	bf00      	nop
 8007618:	40026010 	.word	0x40026010
 800761c:	40026028 	.word	0x40026028
 8007620:	40026040 	.word	0x40026040
 8007624:	40026058 	.word	0x40026058
 8007628:	400264b8 	.word	0x400264b8
 800762c:	aaaaaaab 	.word	0xaaaaaaab
 8007630:	08027c2c 	.word	0x08027c2c
 8007634:	fffffc00 	.word	0xfffffc00
 8007638:	08027bf4 	.word	0x08027bf4

0800763c <HAL_DMA_Start_IT>:
{
 800763c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007640:	461e      	mov	r6, r3
 8007642:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007644:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8007648:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800764a:	1e70      	subs	r0, r6, #1
{
 800764c:	4617      	mov	r7, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800764e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007652:	4298      	cmp	r0, r3
 8007654:	d83b      	bhi.n	80076ce <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8007656:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800765a:	2b01      	cmp	r3, #1
 800765c:	d040      	beq.n	80076e0 <HAL_DMA_Start_IT+0xa4>
 800765e:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8007660:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007664:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8007666:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800766a:	d005      	beq.n	8007678 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800766c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800766e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8007670:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007678:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800767a:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800767c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800767e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007682:	68a2      	ldr	r2, [r4, #8]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007684:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007686:	682b      	ldr	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007688:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800768a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800768e:	602b      	str	r3, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 8007690:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007692:	d028      	beq.n	80076e6 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8007694:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8007698:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800769c:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800769e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80076a0:	408b      	lsls	r3, r1
 80076a2:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80076a6:	682b      	ldr	r3, [r5, #0]
 80076a8:	f043 0316 	orr.w	r3, r3, #22
 80076ac:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80076ae:	696b      	ldr	r3, [r5, #20]
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80076b6:	b11a      	cbz	r2, 80076c0 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	f043 0308 	orr.w	r3, r3, #8
 80076be:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80076c0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076c2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80076c4:	f043 0301 	orr.w	r3, r3, #1
 80076c8:	602b      	str	r3, [r5, #0]
}
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80076ce:	f240 11cd 	movw	r1, #461	; 0x1cd
 80076d2:	4807      	ldr	r0, [pc, #28]	; (80076f0 <HAL_DMA_Start_IT+0xb4>)
 80076d4:	f7fc fa28 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hdma);
 80076d8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d1be      	bne.n	800765e <HAL_DMA_Start_IT+0x22>
 80076e0:	2002      	movs	r0, #2
}
 80076e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 80076e6:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80076e8:	f8c5 800c 	str.w	r8, [r5, #12]
 80076ec:	e7d5      	b.n	800769a <HAL_DMA_Start_IT+0x5e>
 80076ee:	bf00      	nop
 80076f0:	08027bf4 	.word	0x08027bf4

080076f4 <HAL_DMA_Abort>:
{
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076f8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80076fa:	f7fe fdf5 	bl	80062e8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076fe:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8007702:	2b02      	cmp	r3, #2
 8007704:	d006      	beq.n	8007714 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007706:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8007708:	2300      	movs	r3, #0
    return HAL_ERROR;
 800770a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800770c:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800770e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8007712:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007718:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	f022 0216 	bic.w	r2, r2, #22
 8007720:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007728:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800772a:	b339      	cbz	r1, 800777c <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	f022 0208 	bic.w	r2, r2, #8
 8007732:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800773c:	e005      	b.n	800774a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800773e:	f7fe fdd3 	bl	80062e8 <HAL_GetTick>
 8007742:	1b43      	subs	r3, r0, r5
 8007744:	2b05      	cmp	r3, #5
 8007746:	d80f      	bhi.n	8007768 <HAL_DMA_Abort+0x74>
 8007748:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f013 0301 	ands.w	r3, r3, #1
 8007750:	d1f5      	bne.n	800773e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007752:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007754:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8007756:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007758:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800775a:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800775c:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 800775e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 8007762:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8007766:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007768:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800776a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800776c:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800776e:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8007770:	4618      	mov	r0, r3
        __HAL_UNLOCK(hdma);
 8007772:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007776:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800777a:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800777c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800777e:	2a00      	cmp	r2, #0
 8007780:	d1d4      	bne.n	800772c <HAL_DMA_Abort+0x38>
 8007782:	e7d7      	b.n	8007734 <HAL_DMA_Abort+0x40>

08007784 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007784:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8007788:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800778a:	2a02      	cmp	r2, #2
 800778c:	d003      	beq.n	8007796 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800778e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8007790:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007792:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007794:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8007796:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8007798:	2105      	movs	r1, #5
  return HAL_OK;
 800779a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800779c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80077a0:	6813      	ldr	r3, [r2, #0]
 80077a2:	f023 0301 	bic.w	r3, r3, #1
 80077a6:	6013      	str	r3, [r2, #0]
}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 80077ac:	4b75      	ldr	r3, [pc, #468]	; (8007984 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 80077ae:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077b0:	2208      	movs	r2, #8
{
 80077b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 80077b6:	681d      	ldr	r5, [r3, #0]
{
 80077b8:	b082      	sub	sp, #8
 80077ba:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 80077bc:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077be:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80077c2:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80077c4:	409a      	lsls	r2, r3
 80077c6:	4222      	tst	r2, r4
 80077c8:	d004      	beq.n	80077d4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80077ca:	6801      	ldr	r1, [r0, #0]
 80077cc:	680f      	ldr	r7, [r1, #0]
 80077ce:	0778      	lsls	r0, r7, #29
 80077d0:	f100 808a 	bmi.w	80078e8 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80077d4:	2201      	movs	r2, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	4222      	tst	r2, r4
 80077da:	d004      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80077dc:	f8d8 1000 	ldr.w	r1, [r8]
 80077e0:	6949      	ldr	r1, [r1, #20]
 80077e2:	0609      	lsls	r1, r1, #24
 80077e4:	d478      	bmi.n	80078d8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80077e6:	2204      	movs	r2, #4
 80077e8:	409a      	lsls	r2, r3
 80077ea:	4222      	tst	r2, r4
 80077ec:	d004      	beq.n	80077f8 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077ee:	f8d8 1000 	ldr.w	r1, [r8]
 80077f2:	6809      	ldr	r1, [r1, #0]
 80077f4:	078f      	lsls	r7, r1, #30
 80077f6:	d467      	bmi.n	80078c8 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077f8:	2210      	movs	r2, #16
 80077fa:	409a      	lsls	r2, r3
 80077fc:	4222      	tst	r2, r4
 80077fe:	d004      	beq.n	800780a <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007800:	f8d8 1000 	ldr.w	r1, [r8]
 8007804:	680f      	ldr	r7, [r1, #0]
 8007806:	0738      	lsls	r0, r7, #28
 8007808:	d449      	bmi.n	800789e <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800780a:	2220      	movs	r2, #32
 800780c:	409a      	lsls	r2, r3
 800780e:	4222      	tst	r2, r4
 8007810:	d017      	beq.n	8007842 <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007812:	f8d8 1000 	ldr.w	r1, [r8]
 8007816:	680c      	ldr	r4, [r1, #0]
 8007818:	06e0      	lsls	r0, r4, #27
 800781a:	d512      	bpl.n	8007842 <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800781c:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800781e:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8007822:	2a05      	cmp	r2, #5
 8007824:	d073      	beq.n	800790e <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007826:	680b      	ldr	r3, [r1, #0]
 8007828:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800782c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800782e:	f000 8090 	beq.w	8007952 <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007832:	0319      	lsls	r1, r3, #12
 8007834:	f140 809b 	bpl.w	800796e <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 8007838:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800783c:	b10b      	cbz	r3, 8007842 <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 800783e:	4640      	mov	r0, r8
 8007840:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007842:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8007846:	b33b      	cbz	r3, 8007898 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007848:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800784c:	07da      	lsls	r2, r3, #31
 800784e:	d51b      	bpl.n	8007888 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 8007850:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8007854:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8007856:	4b4c      	ldr	r3, [pc, #304]	; (8007988 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8007858:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 800785c:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 8007860:	6813      	ldr	r3, [r2, #0]
 8007862:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8007866:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e002      	b.n	8007872 <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800786c:	6813      	ldr	r3, [r2, #0]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d504      	bpl.n	800787c <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	3301      	adds	r3, #1
 8007876:	42ab      	cmp	r3, r5
 8007878:	9301      	str	r3, [sp, #4]
 800787a:	d9f7      	bls.n	800786c <HAL_DMA_IRQHandler+0xc0>
      __HAL_UNLOCK(hdma);
 800787c:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800787e:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8007880:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8007884:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8007888:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800788c:	b123      	cbz	r3, 8007898 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 800788e:	4640      	mov	r0, r8
}
 8007890:	b002      	add	sp, #8
 8007892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8007896:	4718      	bx	r3
}
 8007898:	b002      	add	sp, #8
 800789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800789e:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078a0:	680a      	ldr	r2, [r1, #0]
 80078a2:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80078a6:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80078a8:	d12a      	bne.n	8007900 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80078aa:	05d7      	lsls	r7, r2, #23
 80078ac:	d403      	bmi.n	80078b6 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078ae:	680a      	ldr	r2, [r1, #0]
 80078b0:	f022 0208 	bic.w	r2, r2, #8
 80078b4:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80078b6:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80078ba:	2a00      	cmp	r2, #0
 80078bc:	d0a5      	beq.n	800780a <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80078be:	4640      	mov	r0, r8
 80078c0:	4790      	blx	r2
 80078c2:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80078c6:	e7a0      	b.n	800780a <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078c8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078ca:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80078ce:	f042 0204 	orr.w	r2, r2, #4
 80078d2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80078d6:	e78f      	b.n	80077f8 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078d8:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078da:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80078de:	f042 0202 	orr.w	r2, r2, #2
 80078e2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80078e6:	e77e      	b.n	80077e6 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80078e8:	680f      	ldr	r7, [r1, #0]
 80078ea:	f027 0704 	bic.w	r7, r7, #4
 80078ee:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80078f0:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078f2:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80078fe:	e769      	b.n	80077d4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007900:	0312      	lsls	r2, r2, #12
 8007902:	d5d8      	bpl.n	80078b6 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007904:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8007908:	2a00      	cmp	r2, #0
 800790a:	d1d8      	bne.n	80078be <HAL_DMA_IRQHandler+0x112>
 800790c:	e77d      	b.n	800780a <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800790e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007910:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007914:	f022 0216 	bic.w	r2, r2, #22
 8007918:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800791a:	694a      	ldr	r2, [r1, #20]
 800791c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007920:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007922:	b354      	cbz	r4, 800797a <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007924:	680a      	ldr	r2, [r1, #0]
 8007926:	f022 0208 	bic.w	r2, r2, #8
 800792a:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800792c:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 800792e:	2400      	movs	r4, #0
        hdma->State = HAL_DMA_STATE_READY;
 8007930:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8007936:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800793a:	60b3      	str	r3, [r6, #8]
        __HAL_UNLOCK(hdma);
 800793c:	f888 4034 	strb.w	r4, [r8, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8007940:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8007944:	2a00      	cmp	r2, #0
 8007946:	d0a7      	beq.n	8007898 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8007948:	4640      	mov	r0, r8
}
 800794a:	b002      	add	sp, #8
 800794c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8007950:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007952:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8007956:	f47f af6f 	bne.w	8007838 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800795a:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800795c:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800795e:	f022 0210 	bic.w	r2, r2, #16
 8007962:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8007964:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8007968:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
 800796c:	e764      	b.n	8007838 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800796e:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8007972:	2b00      	cmp	r3, #0
 8007974:	f47f af63 	bne.w	800783e <HAL_DMA_IRQHandler+0x92>
 8007978:	e763      	b.n	8007842 <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800797a:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800797e:	2a00      	cmp	r2, #0
 8007980:	d1d0      	bne.n	8007924 <HAL_DMA_IRQHandler+0x178>
 8007982:	e7d3      	b.n	800792c <HAL_DMA_IRQHandler+0x180>
 8007984:	20000250 	.word	0x20000250
 8007988:	1b4e81b5 	.word	0x1b4e81b5

0800798c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800798c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800798e:	4770      	bx	lr

08007990 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007994:	f8dd 8020 	ldr.w	r8, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007998:	f64f 75fe 	movw	r5, #65534	; 0xfffe
{
 800799c:	4604      	mov	r4, r0
 800799e:	4689      	mov	r9, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80079a0:	f108 36ff 	add.w	r6, r8, #4294967295
{
 80079a4:	4692      	mov	sl, r2
 80079a6:	461f      	mov	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80079a8:	42ae      	cmp	r6, r5
 80079aa:	d85f      	bhi.n	8007a6c <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079ac:	68a0      	ldr	r0, [r4, #8]
 80079ae:	2880      	cmp	r0, #128	; 0x80
 80079b0:	d063      	beq.n	8007a7a <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80079b2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	f000 8090 	beq.w	8007adc <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80079bc:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80079be:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80079c2:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 80079c4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80079c8:	d005      	beq.n	80079d6 <HAL_DMAEx_MultiBufferStart_IT+0x46>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80079ca:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 80079cc:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80079ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 80079d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80079d6:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079d8:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80079da:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079dc:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80079de:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079e2:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80079e4:	682b      	ldr	r3, [r5, #0]
 80079e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079ea:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 80079ec:	612f      	str	r7, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 80079ee:	f8c5 8004 	str.w	r8, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079f2:	d06a      	beq.n	8007aca <HAL_DMAEx_MultiBufferStart_IT+0x13a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80079f4:	f8c5 9008 	str.w	r9, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80079f8:	f8c5 a00c 	str.w	sl, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079fc:	4ba4      	ldr	r3, [pc, #656]	; (8007c90 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80079fe:	429d      	cmp	r5, r3
 8007a00:	d941      	bls.n	8007a86 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
 8007a02:	3b48      	subs	r3, #72	; 0x48
 8007a04:	49a3      	ldr	r1, [pc, #652]	; (8007c94 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8007a06:	4aa4      	ldr	r2, [pc, #656]	; (8007c98 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007a08:	429d      	cmp	r5, r3
 8007a0a:	bf18      	it	ne
 8007a0c:	428d      	cmpne	r5, r1
 8007a0e:	bf14      	ite	ne
 8007a10:	2301      	movne	r3, #1
 8007a12:	2300      	moveq	r3, #0
 8007a14:	4295      	cmp	r5, r2
 8007a16:	bf0c      	ite	eq
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	f003 0301 	andne.w	r3, r3, #1
 8007a1e:	b11b      	cbz	r3, 8007a28 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 8007a20:	4b9e      	ldr	r3, [pc, #632]	; (8007c9c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007a22:	429d      	cmp	r5, r3
 8007a24:	f040 8111 	bne.w	8007c4a <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 8007a28:	4b9d      	ldr	r3, [pc, #628]	; (8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007a2a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007a2c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007a2e:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007a30:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007a32:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007a34:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007a36:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007a38:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007a3a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007a3c:	4b98      	ldr	r3, [pc, #608]	; (8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007a3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007a40:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a42:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007a44:	f043 0316 	orr.w	r3, r3, #22
 8007a48:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007a4a:	696b      	ldr	r3, [r5, #20]
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d03e      	beq.n	8007ad4 <HAL_DMAEx_MultiBufferStart_IT+0x144>
      hdma->Instance->CR  |= DMA_IT_HT;
 8007a56:	682b      	ldr	r3, [r5, #0]
 8007a58:	f043 0308 	orr.w	r3, r3, #8
 8007a5c:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 8007a5e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a60:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 8007a62:	f043 0301 	orr.w	r3, r3, #1
 8007a66:	602b      	str	r3, [r5, #0]
}
 8007a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8007a6c:	488d      	ldr	r0, [pc, #564]	; (8007ca4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8007a6e:	21a2      	movs	r1, #162	; 0xa2
 8007a70:	f7fc f85a 	bl	8003b28 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a74:	68a0      	ldr	r0, [r4, #8]
 8007a76:	2880      	cmp	r0, #128	; 0x80
 8007a78:	d19b      	bne.n	80079b2 <HAL_DMAEx_MultiBufferStart_IT+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 8007a7e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007a80:	6563      	str	r3, [r4, #84]	; 0x54
}
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007a86:	4b88      	ldr	r3, [pc, #544]	; (8007ca8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8007a88:	429d      	cmp	r5, r3
 8007a8a:	d929      	bls.n	8007ae0 <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8007a8c:	3ba8      	subs	r3, #168	; 0xa8
 8007a8e:	4987      	ldr	r1, [pc, #540]	; (8007cac <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007a90:	4a81      	ldr	r2, [pc, #516]	; (8007c98 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007a92:	429d      	cmp	r5, r3
 8007a94:	bf18      	it	ne
 8007a96:	428d      	cmpne	r5, r1
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	4295      	cmp	r5, r2
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2300      	moveq	r3, #0
 8007aa4:	f003 0301 	andne.w	r3, r3, #1
 8007aa8:	b113      	cbz	r3, 8007ab0 <HAL_DMAEx_MultiBufferStart_IT+0x120>
 8007aaa:	4b7c      	ldr	r3, [pc, #496]	; (8007c9c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007aac:	429d      	cmp	r5, r3
 8007aae:	d15a      	bne.n	8007b66 <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 8007ab0:	4b7b      	ldr	r3, [pc, #492]	; (8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007ab2:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ab4:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007ab6:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ab8:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007aba:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007abc:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007abe:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007ac0:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007ac2:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007ac4:	4b76      	ldr	r3, [pc, #472]	; (8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007ac6:	609a      	str	r2, [r3, #8]
 8007ac8:	e7ba      	b.n	8007a40 <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    hdma->Instance->PAR = DstAddress;
 8007aca:	f8c5 a008 	str.w	sl, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8007ace:	f8c5 900c 	str.w	r9, [r5, #12]
 8007ad2:	e793      	b.n	80079fc <HAL_DMAEx_MultiBufferStart_IT+0x6c>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ad4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1bd      	bne.n	8007a56 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 8007ada:	e7c0      	b.n	8007a5e <HAL_DMAEx_MultiBufferStart_IT+0xce>
  __HAL_LOCK(hdma);
 8007adc:	2002      	movs	r0, #2
 8007ade:	e778      	b.n	80079d2 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ae0:	4b73      	ldr	r3, [pc, #460]	; (8007cb0 <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8007ae2:	429d      	cmp	r5, r3
 8007ae4:	d91f      	bls.n	8007b26 <HAL_DMAEx_MultiBufferStart_IT+0x196>
 8007ae6:	3b48      	subs	r3, #72	; 0x48
 8007ae8:	4970      	ldr	r1, [pc, #448]	; (8007cac <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007aea:	4a6b      	ldr	r2, [pc, #428]	; (8007c98 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007aec:	429d      	cmp	r5, r3
 8007aee:	bf18      	it	ne
 8007af0:	428d      	cmpne	r5, r1
 8007af2:	bf14      	ite	ne
 8007af4:	2301      	movne	r3, #1
 8007af6:	2300      	moveq	r3, #0
 8007af8:	4295      	cmp	r5, r2
 8007afa:	bf0c      	ite	eq
 8007afc:	2300      	moveq	r3, #0
 8007afe:	f003 0301 	andne.w	r3, r3, #1
 8007b02:	b11b      	cbz	r3, 8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 8007b04:	4b65      	ldr	r3, [pc, #404]	; (8007c9c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007b06:	429d      	cmp	r5, r3
 8007b08:	f040 8152 	bne.w	8007db0 <HAL_DMAEx_MultiBufferStart_IT+0x420>
 8007b0c:	4b69      	ldr	r3, [pc, #420]	; (8007cb4 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007b0e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007b10:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007b12:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007b14:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007b16:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007b18:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007b1a:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007b1c:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007b1e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007b20:	4b64      	ldr	r3, [pc, #400]	; (8007cb4 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007b22:	60da      	str	r2, [r3, #12]
 8007b24:	e78c      	b.n	8007a40 <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007b26:	4b61      	ldr	r3, [pc, #388]	; (8007cac <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8007b28:	495a      	ldr	r1, [pc, #360]	; (8007c94 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8007b2a:	4a5b      	ldr	r2, [pc, #364]	; (8007c98 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8007b2c:	429d      	cmp	r5, r3
 8007b2e:	bf18      	it	ne
 8007b30:	428d      	cmpne	r5, r1
 8007b32:	bf14      	ite	ne
 8007b34:	2301      	movne	r3, #1
 8007b36:	2300      	moveq	r3, #0
 8007b38:	4295      	cmp	r5, r2
 8007b3a:	bf0c      	ite	eq
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	f003 0301 	andne.w	r3, r3, #1
 8007b42:	b11b      	cbz	r3, 8007b4c <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 8007b44:	4b55      	ldr	r3, [pc, #340]	; (8007c9c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8007b46:	429d      	cmp	r5, r3
 8007b48:	f040 80be 	bne.w	8007cc8 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8007b4c:	4b59      	ldr	r3, [pc, #356]	; (8007cb4 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007b4e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007b50:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007b52:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007b54:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007b56:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007b58:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007b5a:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007b5c:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007b5e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007b60:	4b54      	ldr	r3, [pc, #336]	; (8007cb4 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8007b62:	609a      	str	r2, [r3, #8]
 8007b64:	e76c      	b.n	8007a40 <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007b66:	3b48      	subs	r3, #72	; 0x48
 8007b68:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007b6c:	3218      	adds	r2, #24
 8007b6e:	429d      	cmp	r5, r3
 8007b70:	bf18      	it	ne
 8007b72:	428d      	cmpne	r5, r1
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	4295      	cmp	r5, r2
 8007b7c:	bf0c      	ite	eq
 8007b7e:	2300      	moveq	r3, #0
 8007b80:	f003 0301 	andne.w	r3, r3, #1
 8007b84:	b11b      	cbz	r3, 8007b8e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
 8007b86:	4b4c      	ldr	r3, [pc, #304]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007b88:	429d      	cmp	r5, r3
 8007b8a:	f040 8215 	bne.w	8007fb8 <HAL_DMAEx_MultiBufferStart_IT+0x628>
 8007b8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007b92:	4b4a      	ldr	r3, [pc, #296]	; (8007cbc <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007b94:	4a4a      	ldr	r2, [pc, #296]	; (8007cc0 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007b96:	484b      	ldr	r0, [pc, #300]	; (8007cc4 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007b98:	429d      	cmp	r5, r3
 8007b9a:	bf18      	it	ne
 8007b9c:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007b9e:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ba2:	bf14      	ite	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	2300      	moveq	r3, #0
 8007ba8:	4285      	cmp	r5, r0
 8007baa:	bf0c      	ite	eq
 8007bac:	2300      	moveq	r3, #0
 8007bae:	f003 0301 	andne.w	r3, r3, #1
 8007bb2:	b11b      	cbz	r3, 8007bbc <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8007bb4:	4b40      	ldr	r3, [pc, #256]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007bb6:	429d      	cmp	r5, r3
 8007bb8:	f040 8218 	bne.w	8007fec <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8007bbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007bc0:	4b3e      	ldr	r3, [pc, #248]	; (8007cbc <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007bc2:	493f      	ldr	r1, [pc, #252]	; (8007cc0 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007bc4:	483f      	ldr	r0, [pc, #252]	; (8007cc4 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007bc6:	429d      	cmp	r5, r3
 8007bc8:	bf18      	it	ne
 8007bca:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007bcc:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007bd0:	bf14      	ite	ne
 8007bd2:	2301      	movne	r3, #1
 8007bd4:	2300      	moveq	r3, #0
 8007bd6:	4285      	cmp	r5, r0
 8007bd8:	bf0c      	ite	eq
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	f003 0301 	andne.w	r3, r3, #1
 8007be0:	b11b      	cbz	r3, 8007bea <HAL_DMAEx_MultiBufferStart_IT+0x25a>
 8007be2:	4b35      	ldr	r3, [pc, #212]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007be4:	429d      	cmp	r5, r3
 8007be6:	f040 8231 	bne.w	800804c <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8007bea:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007bee:	4b34      	ldr	r3, [pc, #208]	; (8007cc0 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007bf0:	4932      	ldr	r1, [pc, #200]	; (8007cbc <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007bf2:	4834      	ldr	r0, [pc, #208]	; (8007cc4 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007bf4:	429d      	cmp	r5, r3
 8007bf6:	bf18      	it	ne
 8007bf8:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007bfa:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007bfe:	bf14      	ite	ne
 8007c00:	2301      	movne	r3, #1
 8007c02:	2300      	moveq	r3, #0
 8007c04:	4285      	cmp	r5, r0
 8007c06:	bf0c      	ite	eq
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	f003 0301 	andne.w	r3, r3, #1
 8007c0e:	b11b      	cbz	r3, 8007c18 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 8007c10:	4b29      	ldr	r3, [pc, #164]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007c12:	429d      	cmp	r5, r3
 8007c14:	f040 8202 	bne.w	800801c <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 8007c18:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007c1c:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8007c1e:	4927      	ldr	r1, [pc, #156]	; (8007cbc <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8007c20:	4828      	ldr	r0, [pc, #160]	; (8007cc4 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8007c22:	429d      	cmp	r5, r3
 8007c24:	bf18      	it	ne
 8007c26:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007c28:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	4285      	cmp	r5, r0
 8007c34:	bf0c      	ite	eq
 8007c36:	2300      	moveq	r3, #0
 8007c38:	f003 0301 	andne.w	r3, r3, #1
 8007c3c:	b11b      	cbz	r3, 8007c46 <HAL_DMAEx_MultiBufferStart_IT+0x2b6>
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007c40:	429d      	cmp	r5, r3
 8007c42:	f040 821b 	bne.w	800807c <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	e73c      	b.n	8007ac4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007c4a:	3b48      	subs	r3, #72	; 0x48
 8007c4c:	3118      	adds	r1, #24
 8007c4e:	3218      	adds	r2, #24
 8007c50:	429d      	cmp	r5, r3
 8007c52:	bf18      	it	ne
 8007c54:	428d      	cmpne	r5, r1
 8007c56:	bf14      	ite	ne
 8007c58:	2301      	movne	r3, #1
 8007c5a:	2300      	moveq	r3, #0
 8007c5c:	4295      	cmp	r5, r2
 8007c5e:	bf0c      	ite	eq
 8007c60:	2300      	moveq	r3, #0
 8007c62:	f003 0301 	andne.w	r3, r3, #1
 8007c66:	b11b      	cbz	r3, 8007c70 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 8007c68:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	f040 8115 	bne.w	8007e9a <HAL_DMAEx_MultiBufferStart_IT+0x50a>
 8007c70:	4b0b      	ldr	r3, [pc, #44]	; (8007ca0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8007c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c76:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007c7a:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007c7e:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007c80:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007c84:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007c86:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007c88:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007c8a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007c8c:	e6d6      	b.n	8007a3c <HAL_DMAEx_MultiBufferStart_IT+0xac>
 8007c8e:	bf00      	nop
 8007c90:	40026458 	.word	0x40026458
 8007c94:	40026010 	.word	0x40026010
 8007c98:	40026070 	.word	0x40026070
 8007c9c:	40026470 	.word	0x40026470
 8007ca0:	40026400 	.word	0x40026400
 8007ca4:	08027c34 	.word	0x08027c34
 8007ca8:	400260b8 	.word	0x400260b8
 8007cac:	40026410 	.word	0x40026410
 8007cb0:	40026058 	.word	0x40026058
 8007cb4:	40026000 	.word	0x40026000
 8007cb8:	40026488 	.word	0x40026488
 8007cbc:	40026028 	.word	0x40026028
 8007cc0:	40026428 	.word	0x40026428
 8007cc4:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007cc8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007ccc:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8007cd0:	3218      	adds	r2, #24
 8007cd2:	429d      	cmp	r5, r3
 8007cd4:	bf18      	it	ne
 8007cd6:	428d      	cmpne	r5, r1
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	4295      	cmp	r5, r2
 8007ce0:	bf0c      	ite	eq
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	f003 0301 	andne.w	r3, r3, #1
 8007ce8:	b11b      	cbz	r3, 8007cf2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8007cea:	4bab      	ldr	r3, [pc, #684]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007cec:	429d      	cmp	r5, r3
 8007cee:	f040 81dd 	bne.w	80080ac <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 8007cf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007cf6:	4ba9      	ldr	r3, [pc, #676]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007cf8:	4aa9      	ldr	r2, [pc, #676]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007cfa:	48aa      	ldr	r0, [pc, #680]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007cfc:	429d      	cmp	r5, r3
 8007cfe:	bf18      	it	ne
 8007d00:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007d02:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	4285      	cmp	r5, r0
 8007d0e:	bf0c      	ite	eq
 8007d10:	2300      	moveq	r3, #0
 8007d12:	f003 0301 	andne.w	r3, r3, #1
 8007d16:	b11b      	cbz	r3, 8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8007d18:	4b9f      	ldr	r3, [pc, #636]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007d1a:	429d      	cmp	r5, r3
 8007d1c:	f040 81df 	bne.w	80080de <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8007d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d24:	4b9d      	ldr	r3, [pc, #628]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007d26:	499e      	ldr	r1, [pc, #632]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007d28:	489e      	ldr	r0, [pc, #632]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	bf18      	it	ne
 8007d2e:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007d30:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d34:	bf14      	ite	ne
 8007d36:	2301      	movne	r3, #1
 8007d38:	2300      	moveq	r3, #0
 8007d3a:	4285      	cmp	r5, r0
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	f003 0301 	andne.w	r3, r3, #1
 8007d44:	b11b      	cbz	r3, 8007d4e <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8007d46:	4b94      	ldr	r3, [pc, #592]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007d48:	429d      	cmp	r5, r3
 8007d4a:	f040 8228 	bne.w	800819e <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8007d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d52:	4b93      	ldr	r3, [pc, #588]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007d54:	4991      	ldr	r1, [pc, #580]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007d56:	4893      	ldr	r0, [pc, #588]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007d58:	429d      	cmp	r5, r3
 8007d5a:	bf18      	it	ne
 8007d5c:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d5e:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007d68:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d6a:	4285      	cmp	r5, r0
 8007d6c:	bf0c      	ite	eq
 8007d6e:	2300      	moveq	r3, #0
 8007d70:	f003 0301 	andne.w	r3, r3, #1
 8007d74:	b11b      	cbz	r3, 8007d7e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8007d76:	4b88      	ldr	r3, [pc, #544]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007d78:	429d      	cmp	r5, r3
 8007d7a:	f040 81e0 	bne.w	800813e <HAL_DMAEx_MultiBufferStart_IT+0x7ae>
 8007d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007d82:	4b86      	ldr	r3, [pc, #536]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007d84:	4986      	ldr	r1, [pc, #536]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007d86:	4887      	ldr	r0, [pc, #540]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007d88:	429d      	cmp	r5, r3
 8007d8a:	bf18      	it	ne
 8007d8c:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007d8e:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007d92:	bf14      	ite	ne
 8007d94:	2301      	movne	r3, #1
 8007d96:	2300      	moveq	r3, #0
 8007d98:	4285      	cmp	r5, r0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2300      	moveq	r3, #0
 8007d9e:	f003 0301 	andne.w	r3, r3, #1
 8007da2:	b11b      	cbz	r3, 8007dac <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8007da4:	4b7c      	ldr	r3, [pc, #496]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007da6:	429d      	cmp	r5, r3
 8007da8:	f040 8229 	bne.w	80081fe <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8007dac:	2240      	movs	r2, #64	; 0x40
 8007dae:	e6d7      	b.n	8007b60 <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007db0:	3b48      	subs	r3, #72	; 0x48
 8007db2:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8007db6:	3218      	adds	r2, #24
 8007db8:	429d      	cmp	r5, r3
 8007dba:	bf18      	it	ne
 8007dbc:	428d      	cmpne	r5, r1
 8007dbe:	bf14      	ite	ne
 8007dc0:	2301      	movne	r3, #1
 8007dc2:	2300      	moveq	r3, #0
 8007dc4:	4295      	cmp	r5, r2
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2300      	moveq	r3, #0
 8007dca:	f003 0301 	andne.w	r3, r3, #1
 8007dce:	b11b      	cbz	r3, 8007dd8 <HAL_DMAEx_MultiBufferStart_IT+0x448>
 8007dd0:	4b71      	ldr	r3, [pc, #452]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007dd2:	429d      	cmp	r5, r3
 8007dd4:	f040 81cb 	bne.w	800816e <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8007dd8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ddc:	4b70      	ldr	r3, [pc, #448]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007dde:	4a6f      	ldr	r2, [pc, #444]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007de0:	4870      	ldr	r0, [pc, #448]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007de2:	429d      	cmp	r5, r3
 8007de4:	bf18      	it	ne
 8007de6:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007de8:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007dec:	bf14      	ite	ne
 8007dee:	2301      	movne	r3, #1
 8007df0:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007df2:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007df4:	4285      	cmp	r5, r0
 8007df6:	bf0c      	ite	eq
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	f003 0301 	andne.w	r3, r3, #1
 8007dfe:	b11b      	cbz	r3, 8007e08 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 8007e00:	4b65      	ldr	r3, [pc, #404]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007e02:	429d      	cmp	r5, r3
 8007e04:	f040 8183 	bne.w	800810e <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8007e08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e0c:	4b63      	ldr	r3, [pc, #396]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007e0e:	4964      	ldr	r1, [pc, #400]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007e10:	4864      	ldr	r0, [pc, #400]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007e12:	429d      	cmp	r5, r3
 8007e14:	bf18      	it	ne
 8007e16:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007e18:	f841 2c1c 	str.w	r2, [r1, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e1c:	bf14      	ite	ne
 8007e1e:	2301      	movne	r3, #1
 8007e20:	2300      	moveq	r3, #0
 8007e22:	4285      	cmp	r5, r0
 8007e24:	bf0c      	ite	eq
 8007e26:	2300      	moveq	r3, #0
 8007e28:	f003 0301 	andne.w	r3, r3, #1
 8007e2c:	b11b      	cbz	r3, 8007e36 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 8007e2e:	4b5a      	ldr	r3, [pc, #360]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007e30:	429d      	cmp	r5, r3
 8007e32:	f040 81fa 	bne.w	800822a <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 8007e36:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e3a:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007e3c:	4957      	ldr	r1, [pc, #348]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007e3e:	4859      	ldr	r0, [pc, #356]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007e40:	429d      	cmp	r5, r3
 8007e42:	bf18      	it	ne
 8007e44:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e46:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e4a:	bf14      	ite	ne
 8007e4c:	2301      	movne	r3, #1
 8007e4e:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007e50:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e52:	4285      	cmp	r5, r0
 8007e54:	bf0c      	ite	eq
 8007e56:	2300      	moveq	r3, #0
 8007e58:	f003 0301 	andne.w	r3, r3, #1
 8007e5c:	b11b      	cbz	r3, 8007e66 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8007e5e:	4b4e      	ldr	r3, [pc, #312]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007e60:	429d      	cmp	r5, r3
 8007e62:	f040 81b4 	bne.w	80081ce <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8007e66:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e6a:	4b4d      	ldr	r3, [pc, #308]	; (8007fa0 <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8007e6c:	494b      	ldr	r1, [pc, #300]	; (8007f9c <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8007e6e:	484d      	ldr	r0, [pc, #308]	; (8007fa4 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8007e70:	429d      	cmp	r5, r3
 8007e72:	bf18      	it	ne
 8007e74:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e76:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e7a:	bf14      	ite	ne
 8007e7c:	2301      	movne	r3, #1
 8007e7e:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007e80:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007e82:	4285      	cmp	r5, r0
 8007e84:	bf0c      	ite	eq
 8007e86:	2300      	moveq	r3, #0
 8007e88:	f003 0301 	andne.w	r3, r3, #1
 8007e8c:	b11b      	cbz	r3, 8007e96 <HAL_DMAEx_MultiBufferStart_IT+0x506>
 8007e8e:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8007e90:	429d      	cmp	r5, r3
 8007e92:	f040 81e0 	bne.w	8008256 <HAL_DMAEx_MultiBufferStart_IT+0x8c6>
 8007e96:	2240      	movs	r2, #64	; 0x40
 8007e98:	e642      	b.n	8007b20 <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007e9a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007e9e:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8007ea2:	3218      	adds	r2, #24
 8007ea4:	429d      	cmp	r5, r3
 8007ea6:	bf18      	it	ne
 8007ea8:	428d      	cmpne	r5, r1
 8007eaa:	bf14      	ite	ne
 8007eac:	2301      	movne	r3, #1
 8007eae:	2300      	moveq	r3, #0
 8007eb0:	4295      	cmp	r5, r2
 8007eb2:	bf0c      	ite	eq
 8007eb4:	2300      	moveq	r3, #0
 8007eb6:	f003 0301 	andne.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 81f5 	beq.w	80082aa <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8007ec0:	4b39      	ldr	r3, [pc, #228]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8007ec2:	429d      	cmp	r5, r3
 8007ec4:	f000 81f1 	beq.w	80082aa <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8007ec8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007ecc:	4b37      	ldr	r3, [pc, #220]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8007ece:	4a38      	ldr	r2, [pc, #224]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8007ed0:	4838      	ldr	r0, [pc, #224]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	bf18      	it	ne
 8007ed6:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007ed8:	f842 1c34 	str.w	r1, [r2, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007edc:	bf14      	ite	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	2300      	moveq	r3, #0
 8007ee2:	4285      	cmp	r5, r0
 8007ee4:	bf0c      	ite	eq
 8007ee6:	2300      	moveq	r3, #0
 8007ee8:	f003 0301 	andne.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f000 81d9 	beq.w	80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8007ef2:	4b2d      	ldr	r3, [pc, #180]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8007ef4:	429d      	cmp	r5, r3
 8007ef6:	f000 81d5 	beq.w	80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8007efa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007efe:	4b2b      	ldr	r3, [pc, #172]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8007f00:	492b      	ldr	r1, [pc, #172]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8007f02:	482c      	ldr	r0, [pc, #176]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8007f04:	429d      	cmp	r5, r3
 8007f06:	bf18      	it	ne
 8007f08:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007f0a:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007f0e:	bf14      	ite	ne
 8007f10:	2301      	movne	r3, #1
 8007f12:	2300      	moveq	r3, #0
 8007f14:	4285      	cmp	r5, r0
 8007f16:	bf0c      	ite	eq
 8007f18:	2300      	moveq	r3, #0
 8007f1a:	f003 0301 	andne.w	r3, r3, #1
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f000 81b5 	beq.w	800828e <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8007f24:	4b20      	ldr	r3, [pc, #128]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8007f26:	429d      	cmp	r5, r3
 8007f28:	f000 81b1 	beq.w	800828e <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8007f2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f30:	4b1e      	ldr	r3, [pc, #120]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8007f32:	491f      	ldr	r1, [pc, #124]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8007f34:	481f      	ldr	r0, [pc, #124]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8007f36:	429d      	cmp	r5, r3
 8007f38:	bf18      	it	ne
 8007f3a:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8007f3c:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f40:	bf14      	ite	ne
 8007f42:	2301      	movne	r3, #1
 8007f44:	2300      	moveq	r3, #0
 8007f46:	4285      	cmp	r5, r0
 8007f48:	bf0c      	ite	eq
 8007f4a:	2300      	moveq	r3, #0
 8007f4c:	f003 0301 	andne.w	r3, r3, #1
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 8199 	beq.w	8008288 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8007f58:	429d      	cmp	r5, r3
 8007f5a:	f000 8195 	beq.w	8008288 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8007f5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f62:	4b12      	ldr	r3, [pc, #72]	; (8007fac <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8007f64:	4912      	ldr	r1, [pc, #72]	; (8007fb0 <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8007f66:	4813      	ldr	r0, [pc, #76]	; (8007fb4 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8007f68:	429d      	cmp	r5, r3
 8007f6a:	bf18      	it	ne
 8007f6c:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8007f6e:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8007f72:	bf14      	ite	ne
 8007f74:	2301      	movne	r3, #1
 8007f76:	2300      	moveq	r3, #0
 8007f78:	4285      	cmp	r5, r0
 8007f7a:	bf0c      	ite	eq
 8007f7c:	2300      	moveq	r3, #0
 8007f7e:	f003 0301 	andne.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 817c 	beq.w	8008280 <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 8007f88:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8007f8a:	429d      	cmp	r5, r3
 8007f8c:	f000 8178 	beq.w	8008280 <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 8007f90:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007f94:	e552      	b.n	8007a3c <HAL_DMAEx_MultiBufferStart_IT+0xac>
 8007f96:	bf00      	nop
 8007f98:	40026488 	.word	0x40026488
 8007f9c:	40026428 	.word	0x40026428
 8007fa0:	40026028 	.word	0x40026028
 8007fa4:	40026088 	.word	0x40026088
 8007fa8:	400264a0 	.word	0x400264a0
 8007fac:	40026040 	.word	0x40026040
 8007fb0:	40026440 	.word	0x40026440
 8007fb4:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007fb8:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8007fbc:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8007fc0:	3218      	adds	r2, #24
 8007fc2:	429d      	cmp	r5, r3
 8007fc4:	bf18      	it	ne
 8007fc6:	428d      	cmpne	r5, r1
 8007fc8:	bf14      	ite	ne
 8007fca:	2301      	movne	r3, #1
 8007fcc:	2300      	moveq	r3, #0
 8007fce:	4295      	cmp	r5, r2
 8007fd0:	bf0c      	ite	eq
 8007fd2:	2300      	moveq	r3, #0
 8007fd4:	f003 0301 	andne.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f000 816c 	beq.w	80082b6 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8007fde:	4bad      	ldr	r3, [pc, #692]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8007fe0:	429d      	cmp	r5, r3
 8007fe2:	f000 8168 	beq.w	80082b6 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8007fe6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007fea:	e5d2      	b.n	8007b92 <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007fec:	4baa      	ldr	r3, [pc, #680]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8007fee:	49ab      	ldr	r1, [pc, #684]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8007ff0:	4aab      	ldr	r2, [pc, #684]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8007ff2:	429d      	cmp	r5, r3
 8007ff4:	bf18      	it	ne
 8007ff6:	428d      	cmpne	r5, r1
 8007ff8:	bf14      	ite	ne
 8007ffa:	2301      	movne	r3, #1
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	4295      	cmp	r5, r2
 8008000:	bf0c      	ite	eq
 8008002:	2300      	moveq	r3, #0
 8008004:	f003 0301 	andne.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 815a 	beq.w	80082c2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800800e:	4ba1      	ldr	r3, [pc, #644]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008010:	429d      	cmp	r5, r3
 8008012:	f000 8156 	beq.w	80082c2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8008016:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800801a:	e5d1      	b.n	8007bc0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800801c:	4b9f      	ldr	r3, [pc, #636]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800801e:	499e      	ldr	r1, [pc, #632]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008020:	4a9f      	ldr	r2, [pc, #636]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008022:	429d      	cmp	r5, r3
 8008024:	bf18      	it	ne
 8008026:	428d      	cmpne	r5, r1
 8008028:	bf14      	ite	ne
 800802a:	2301      	movne	r3, #1
 800802c:	2300      	moveq	r3, #0
 800802e:	4295      	cmp	r5, r2
 8008030:	bf0c      	ite	eq
 8008032:	2300      	moveq	r3, #0
 8008034:	f003 0301 	andne.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 813f 	beq.w	80082bc <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 800803e:	4b95      	ldr	r3, [pc, #596]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008040:	429d      	cmp	r5, r3
 8008042:	f000 813b 	beq.w	80082bc <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8008046:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800804a:	e5e7      	b.n	8007c1c <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800804c:	4b93      	ldr	r3, [pc, #588]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800804e:	4992      	ldr	r1, [pc, #584]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008050:	4a93      	ldr	r2, [pc, #588]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008052:	429d      	cmp	r5, r3
 8008054:	bf18      	it	ne
 8008056:	428d      	cmpne	r5, r1
 8008058:	bf14      	ite	ne
 800805a:	2301      	movne	r3, #1
 800805c:	2300      	moveq	r3, #0
 800805e:	4295      	cmp	r5, r2
 8008060:	bf0c      	ite	eq
 8008062:	2300      	moveq	r3, #0
 8008064:	f003 0301 	andne.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 812d 	beq.w	80082c8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800806e:	4b89      	ldr	r3, [pc, #548]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008070:	429d      	cmp	r5, r3
 8008072:	f000 8129 	beq.w	80082c8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8008076:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800807a:	e5b8      	b.n	8007bee <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800807c:	4b87      	ldr	r3, [pc, #540]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800807e:	4986      	ldr	r1, [pc, #536]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008080:	4a87      	ldr	r2, [pc, #540]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008082:	429d      	cmp	r5, r3
 8008084:	bf18      	it	ne
 8008086:	428d      	cmpne	r5, r1
 8008088:	bf14      	ite	ne
 800808a:	2301      	movne	r3, #1
 800808c:	2300      	moveq	r3, #0
 800808e:	4295      	cmp	r5, r2
 8008090:	bf0c      	ite	eq
 8008092:	2300      	moveq	r3, #0
 8008094:	f003 0301 	andne.w	r3, r3, #1
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 8109 	beq.w	80082b0 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 800809e:	4b7d      	ldr	r3, [pc, #500]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80080a0:	429d      	cmp	r5, r3
 80080a2:	f000 8105 	beq.w	80082b0 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 80080a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80080aa:	e50b      	b.n	8007ac4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80080ac:	3b48      	subs	r3, #72	; 0x48
 80080ae:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80080b2:	3218      	adds	r2, #24
 80080b4:	429d      	cmp	r5, r3
 80080b6:	bf18      	it	ne
 80080b8:	428d      	cmpne	r5, r1
 80080ba:	bf14      	ite	ne
 80080bc:	2301      	movne	r3, #1
 80080be:	2300      	moveq	r3, #0
 80080c0:	4295      	cmp	r5, r2
 80080c2:	bf0c      	ite	eq
 80080c4:	2300      	moveq	r3, #0
 80080c6:	f003 0301 	andne.w	r3, r3, #1
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8111 	beq.w	80082f2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80080d0:	4b70      	ldr	r3, [pc, #448]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80080d2:	429d      	cmp	r5, r3
 80080d4:	f000 810d 	beq.w	80082f2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 80080d8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80080dc:	e60b      	b.n	8007cf6 <HAL_DMAEx_MultiBufferStart_IT+0x366>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80080de:	4b6f      	ldr	r3, [pc, #444]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80080e0:	496d      	ldr	r1, [pc, #436]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80080e2:	4a6f      	ldr	r2, [pc, #444]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80080e4:	429d      	cmp	r5, r3
 80080e6:	bf18      	it	ne
 80080e8:	428d      	cmpne	r5, r1
 80080ea:	bf14      	ite	ne
 80080ec:	2301      	movne	r3, #1
 80080ee:	2300      	moveq	r3, #0
 80080f0:	4295      	cmp	r5, r2
 80080f2:	bf0c      	ite	eq
 80080f4:	2300      	moveq	r3, #0
 80080f6:	f003 0301 	andne.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	f000 80ed 	beq.w	80082da <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8008100:	4b64      	ldr	r3, [pc, #400]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008102:	429d      	cmp	r5, r3
 8008104:	f000 80e9 	beq.w	80082da <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8008108:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800810c:	e60a      	b.n	8007d24 <HAL_DMAEx_MultiBufferStart_IT+0x394>
 800810e:	4b62      	ldr	r3, [pc, #392]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008110:	4962      	ldr	r1, [pc, #392]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008112:	4a63      	ldr	r2, [pc, #396]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008114:	429d      	cmp	r5, r3
 8008116:	bf18      	it	ne
 8008118:	428d      	cmpne	r5, r1
 800811a:	bf14      	ite	ne
 800811c:	2301      	movne	r3, #1
 800811e:	2300      	moveq	r3, #0
 8008120:	4295      	cmp	r5, r2
 8008122:	bf0c      	ite	eq
 8008124:	2300      	moveq	r3, #0
 8008126:	f003 0301 	andne.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80e7 	beq.w	80082fe <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8008130:	4b58      	ldr	r3, [pc, #352]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008132:	429d      	cmp	r5, r3
 8008134:	f000 80e3 	beq.w	80082fe <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8008138:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800813c:	e666      	b.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800813e:	4b56      	ldr	r3, [pc, #344]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008140:	4956      	ldr	r1, [pc, #344]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008142:	4a57      	ldr	r2, [pc, #348]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008144:	429d      	cmp	r5, r3
 8008146:	bf18      	it	ne
 8008148:	428d      	cmpne	r5, r1
 800814a:	bf14      	ite	ne
 800814c:	2301      	movne	r3, #1
 800814e:	2300      	moveq	r3, #0
 8008150:	4295      	cmp	r5, r2
 8008152:	bf0c      	ite	eq
 8008154:	2300      	moveq	r3, #0
 8008156:	f003 0301 	andne.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	f000 80ba 	beq.w	80082d4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8008160:	4b4c      	ldr	r3, [pc, #304]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008162:	429d      	cmp	r5, r3
 8008164:	f000 80b6 	beq.w	80082d4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8008168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800816c:	e609      	b.n	8007d82 <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800816e:	3b48      	subs	r3, #72	; 0x48
 8008170:	3118      	adds	r1, #24
 8008172:	3218      	adds	r2, #24
 8008174:	429d      	cmp	r5, r3
 8008176:	bf18      	it	ne
 8008178:	428d      	cmpne	r5, r1
 800817a:	bf14      	ite	ne
 800817c:	2301      	movne	r3, #1
 800817e:	2300      	moveq	r3, #0
 8008180:	4295      	cmp	r5, r2
 8008182:	bf0c      	ite	eq
 8008184:	2300      	moveq	r3, #0
 8008186:	f003 0301 	andne.w	r3, r3, #1
 800818a:	2b00      	cmp	r3, #0
 800818c:	f000 80b4 	beq.w	80082f8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8008190:	4b40      	ldr	r3, [pc, #256]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008192:	429d      	cmp	r5, r3
 8008194:	f000 80b0 	beq.w	80082f8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8008198:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800819c:	e61e      	b.n	8007ddc <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800819e:	4b3f      	ldr	r3, [pc, #252]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80081a0:	493d      	ldr	r1, [pc, #244]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80081a2:	4a3f      	ldr	r2, [pc, #252]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80081a4:	429d      	cmp	r5, r3
 80081a6:	bf18      	it	ne
 80081a8:	428d      	cmpne	r5, r1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	4295      	cmp	r5, r2
 80081b2:	bf0c      	ite	eq
 80081b4:	2300      	moveq	r3, #0
 80081b6:	f003 0301 	andne.w	r3, r3, #1
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8093 	beq.w	80082e6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80081c0:	4b34      	ldr	r3, [pc, #208]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80081c2:	429d      	cmp	r5, r3
 80081c4:	f000 808f 	beq.w	80082e6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 80081c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80081cc:	e5c1      	b.n	8007d52 <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80081ce:	4b32      	ldr	r3, [pc, #200]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 80081d0:	4932      	ldr	r1, [pc, #200]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 80081d2:	4a33      	ldr	r2, [pc, #204]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 80081d4:	429d      	cmp	r5, r3
 80081d6:	bf18      	it	ne
 80081d8:	428d      	cmpne	r5, r1
 80081da:	bf14      	ite	ne
 80081dc:	2301      	movne	r3, #1
 80081de:	2300      	moveq	r3, #0
 80081e0:	4295      	cmp	r5, r2
 80081e2:	bf0c      	ite	eq
 80081e4:	2300      	moveq	r3, #0
 80081e6:	f003 0301 	andne.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 808a 	beq.w	8008304 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 80081f0:	4b28      	ldr	r3, [pc, #160]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 80081f2:	429d      	cmp	r5, r3
 80081f4:	f000 8086 	beq.w	8008304 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 80081f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081fc:	e635      	b.n	8007e6a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80081fe:	4b27      	ldr	r3, [pc, #156]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008200:	4925      	ldr	r1, [pc, #148]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008202:	4a27      	ldr	r2, [pc, #156]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008204:	429d      	cmp	r5, r3
 8008206:	bf18      	it	ne
 8008208:	428d      	cmpne	r5, r1
 800820a:	bf14      	ite	ne
 800820c:	2301      	movne	r3, #1
 800820e:	2300      	moveq	r3, #0
 8008210:	4295      	cmp	r5, r2
 8008212:	bf0c      	ite	eq
 8008214:	2300      	moveq	r3, #0
 8008216:	f003 0301 	andne.w	r3, r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	d060      	beq.n	80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008220:	429d      	cmp	r5, r3
 8008222:	d05d      	beq.n	80082e0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008224:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008228:	e49a      	b.n	8007b60 <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800822a:	4b1c      	ldr	r3, [pc, #112]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 800822c:	491a      	ldr	r1, [pc, #104]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800822e:	4a1c      	ldr	r2, [pc, #112]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008230:	429d      	cmp	r5, r3
 8008232:	bf18      	it	ne
 8008234:	428d      	cmpne	r5, r1
 8008236:	bf14      	ite	ne
 8008238:	2301      	movne	r3, #1
 800823a:	2300      	moveq	r3, #0
 800823c:	4295      	cmp	r5, r2
 800823e:	bf0c      	ite	eq
 8008240:	2300      	moveq	r3, #0
 8008242:	f003 0301 	andne.w	r3, r3, #1
 8008246:	2b00      	cmp	r3, #0
 8008248:	d050      	beq.n	80082ec <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 800824c:	429d      	cmp	r5, r3
 800824e:	d04d      	beq.n	80082ec <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8008250:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008254:	e5f1      	b.n	8007e3a <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008256:	4b11      	ldr	r3, [pc, #68]	; (800829c <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008258:	490f      	ldr	r1, [pc, #60]	; (8008298 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 800825a:	4a11      	ldr	r2, [pc, #68]	; (80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 800825c:	429d      	cmp	r5, r3
 800825e:	bf18      	it	ne
 8008260:	428d      	cmpne	r5, r1
 8008262:	bf14      	ite	ne
 8008264:	2301      	movne	r3, #1
 8008266:	2300      	moveq	r3, #0
 8008268:	4295      	cmp	r5, r2
 800826a:	bf0c      	ite	eq
 800826c:	2300      	moveq	r3, #0
 800826e:	f003 0301 	andne.w	r3, r3, #1
 8008272:	b363      	cbz	r3, 80082ce <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008276:	429d      	cmp	r5, r3
 8008278:	d029      	beq.n	80082ce <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 800827a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800827e:	e44f      	b.n	8007b20 <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8008280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008284:	f7ff bbda 	b.w	8007a3c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008288:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800828c:	e669      	b.n	8007f62 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800828e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008292:	e64d      	b.n	8007f30 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
 8008294:	400264a0 	.word	0x400264a0
 8008298:	40026440 	.word	0x40026440
 800829c:	40026040 	.word	0x40026040
 80082a0:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80082a4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082a8:	e629      	b.n	8007efe <HAL_DMAEx_MultiBufferStart_IT+0x56e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80082aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082ae:	e60d      	b.n	8007ecc <HAL_DMAEx_MultiBufferStart_IT+0x53c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80082b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082b4:	e406      	b.n	8007ac4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80082b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082ba:	e46a      	b.n	8007b92 <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80082bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80082c0:	e4ac      	b.n	8007c1c <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80082c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082c6:	e47b      	b.n	8007bc0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80082c8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082cc:	e48f      	b.n	8007bee <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80082ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082d2:	e425      	b.n	8007b20 <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80082d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80082d8:	e553      	b.n	8007d82 <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80082da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082de:	e521      	b.n	8007d24 <HAL_DMAEx_MultiBufferStart_IT+0x394>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80082e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082e4:	e43c      	b.n	8007b60 <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80082e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082ea:	e532      	b.n	8007d52 <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
 80082ec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80082f0:	e5a3      	b.n	8007e3a <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80082f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082f6:	e4fe      	b.n	8007cf6 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 80082f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80082fc:	e56e      	b.n	8007ddc <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80082fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008302:	e583      	b.n	8007e0c <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008304:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008308:	e5af      	b.n	8007e6a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800830a:	bf00      	nop

0800830c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800830c:	b530      	push	{r4, r5, lr}
  __IO uint32_t tmpreg = 0;
 800830e:	2300      	movs	r3, #0
{
 8008310:	b083      	sub	sp, #12
 8008312:	4605      	mov	r5, r0
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008314:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8008318:	9301      	str	r3, [sp, #4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800831a:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	591a      	ldr	r2, [r3, r4]
 8008320:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008324:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8008326:	591b      	ldr	r3, [r3, r4]
 8008328:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800832a:	f7fd ffe3 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800832e:	682b      	ldr	r3, [r5, #0]
 8008330:	9a01      	ldr	r2, [sp, #4]
 8008332:	511a      	str	r2, [r3, r4]
}
 8008334:	b003      	add	sp, #12
 8008336:	bd30      	pop	{r4, r5, pc}

08008338 <ETH_MACDMAConfig>:
{
 8008338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800833c:	2900      	cmp	r1, #0
 800833e:	d15e      	bne.n	80083fe <ETH_MACDMAConfig+0xc6>
 8008340:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8008344:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008346:	69e3      	ldr	r3, [r4, #28]
 8008348:	b90b      	cbnz	r3, 800834e <ETH_MACDMAConfig+0x16>
 800834a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800834e:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008350:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008352:	4b2f      	ldr	r3, [pc, #188]	; (8008410 <ETH_MACDMAConfig+0xd8>)
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008354:	2600      	movs	r6, #0
  tmpreg = (heth->Instance)->MACCR;
 8008356:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008358:	402b      	ands	r3, r5
    tmpreg = (heth->Instance)->DMAOMR;
 800835a:	f241 0518 	movw	r5, #4120	; 0x1018
 800835e:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8008360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008364:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008366:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008368:	f7fd ffc4 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800836c:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800836e:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008370:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8008372:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008374:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8008376:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008378:	f7fd ffbc 	bl	80062f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800837c:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800837e:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008382:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8008384:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008386:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008388:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800838a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800838c:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800838e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008392:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8008394:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008396:	f7fd ffad 	bl	80062f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800839a:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800839c:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800839e:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80083a0:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80083a2:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80083a4:	f7fd ffa6 	bl	80062f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80083a8:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80083aa:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80083ac:	4919      	ldr	r1, [pc, #100]	; (8008414 <ETH_MACDMAConfig+0xdc>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80083ae:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80083b0:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80083b2:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80083b4:	4a18      	ldr	r2, [pc, #96]	; (8008418 <ETH_MACDMAConfig+0xe0>)
 80083b6:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80083b8:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80083ba:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80083bc:	f7fd ff9a 	bl	80062f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80083c0:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80083c2:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80083c4:	4a15      	ldr	r2, [pc, #84]	; (800841c <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->DMAOMR = tmpreg;
 80083c6:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80083c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083cc:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80083ce:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80083d0:	f7fd ff90 	bl	80062f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80083d4:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80083d6:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 80083d8:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80083dc:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 80083de:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80083e0:	d105      	bne.n	80083ee <ETH_MACDMAConfig+0xb6>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80083e2:	f241 011c 	movw	r1, #4124	; 0x101c
 80083e6:	4a0e      	ldr	r2, [pc, #56]	; (8008420 <ETH_MACDMAConfig+0xe8>)
 80083e8:	5858      	ldr	r0, [r3, r1]
 80083ea:	4302      	orrs	r2, r0
 80083ec:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80083ee:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80083f0:	490c      	ldr	r1, [pc, #48]	; (8008424 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80083f2:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80083f4:	4a0c      	ldr	r2, [pc, #48]	; (8008428 <ETH_MACDMAConfig+0xf0>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80083f6:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80083f8:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80083fa:	6013      	str	r3, [r2, #0]
}
 80083fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80083fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8008402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008406:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800840a:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800840e:	e79a      	b.n	8008346 <ETH_MACDMAConfig+0xe>
 8008410:	ff20810f 	.word	0xff20810f
 8008414:	f8de3f23 	.word	0xf8de3f23
 8008418:	02200004 	.word	0x02200004
 800841c:	02c12080 	.word	0x02c12080
 8008420:	00010040 	.word	0x00010040
 8008424:	40028040 	.word	0x40028040
 8008428:	40028044 	.word	0x40028044

0800842c <HAL_ETH_DMATxDescListInit>:
{
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	469e      	mov	lr, r3
  __HAL_LOCK(heth);
 8008432:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008436:	2b01      	cmp	r3, #1
 8008438:	d045      	beq.n	80084c6 <HAL_ETH_DMATxDescListInit+0x9a>
 800843a:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY;
 800843c:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 800843e:	2001      	movs	r0, #1
  heth->TxDesc = DMATxDescTab;
 8008440:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8008444:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008448:	f888 3044 	strb.w	r3, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800844c:	f1be 0f00 	cmp.w	lr, #0
 8008450:	d02b      	beq.n	80084aa <HAL_ETH_DMATxDescListInit+0x7e>
 8008452:	f8d8 a01c 	ldr.w	sl, [r8, #28]
 8008456:	f10e 39ff 	add.w	r9, lr, #4294967295
 800845a:	460c      	mov	r4, r1
 800845c:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800845e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008462:	e009      	b.n	8008478 <HAL_ETH_DMATxDescListInit+0x4c>
 8008464:	f105 0c01 	add.w	ip, r5, #1
 8008468:	4637      	mov	r7, r6
 800846a:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 800846e:	45e6      	cmp	lr, ip
 8008470:	60e7      	str	r7, [r4, #12]
 8008472:	4665      	mov	r5, ip
 8008474:	4634      	mov	r4, r6
 8008476:	d918      	bls.n	80084aa <HAL_ETH_DMATxDescListInit+0x7e>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8008478:	f104 0620 	add.w	r6, r4, #32
 800847c:	f105 0c01 	add.w	ip, r5, #1
 8008480:	460f      	mov	r7, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008482:	6020      	str	r0, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008484:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008486:	f1ba 0f00 	cmp.w	sl, #0
 800848a:	d103      	bne.n	8008494 <HAL_ETH_DMATxDescListInit+0x68>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008492:	6023      	str	r3, [r4, #0]
    if(i < (TxBuffCount-1))
 8008494:	45a9      	cmp	r9, r5
 8008496:	d8e5      	bhi.n	8008464 <HAL_ETH_DMATxDescListInit+0x38>
 8008498:	f104 0620 	add.w	r6, r4, #32
  for(i=0; i < TxBuffCount; i++)
 800849c:	45e6      	cmp	lr, ip
 800849e:	60e7      	str	r7, [r4, #12]
 80084a0:	4665      	mov	r5, ip
 80084a2:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80084a6:	4634      	mov	r4, r6
 80084a8:	d8e6      	bhi.n	8008478 <HAL_ETH_DMATxDescListInit+0x4c>
  __HAL_UNLOCK(heth);
 80084aa:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80084ac:	f8d8 4000 	ldr.w	r4, [r8]
 80084b0:	f241 0010 	movw	r0, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 80084b4:	2201      	movs	r2, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80084b6:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 80084b8:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 80084ba:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80084be:	f888 3045 	strb.w	r3, [r8, #69]	; 0x45
}
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 80084c6:	2002      	movs	r0, #2
}
 80084c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080084cc <HAL_ETH_DMARxDescListInit>:
{
 80084cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084d0:	4686      	mov	lr, r0
  __HAL_LOCK(heth);
 80084d2:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 80084d6:	2801      	cmp	r0, #1
 80084d8:	d033      	beq.n	8008542 <HAL_ETH_DMARxDescListInit+0x76>
 80084da:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80084dc:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 80084de:	f8ce 1028 	str.w	r1, [lr, #40]	; 0x28
  __HAL_LOCK(heth);
 80084e2:	f88e 4045 	strb.w	r4, [lr, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 80084e6:	f88e 0044 	strb.w	r0, [lr, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 80084ea:	b1e3      	cbz	r3, 8008526 <HAL_ETH_DMARxDescListInit+0x5a>
 80084ec:	f103 39ff 	add.w	r9, r3, #4294967295
 80084f0:	460c      	mov	r4, r1
 80084f2:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80084f4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80084f8:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 80084fc:	45a9      	cmp	r9, r5
 80084fe:	f104 0620 	add.w	r6, r4, #32
 8008502:	f105 0c01 	add.w	ip, r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008506:	460f      	mov	r7, r1
 8008508:	bf94      	ite	ls
 800850a:	f104 0620 	addls.w	r6, r4, #32
 800850e:	4637      	movhi	r7, r6
  for(i=0; i < RxBuffCount; i++)
 8008510:	4563      	cmp	r3, ip
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8008512:	60a2      	str	r2, [r4, #8]
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8008514:	f8c4 8000 	str.w	r8, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008518:	4665      	mov	r5, ip
 800851a:	6060      	str	r0, [r4, #4]
    if(i < (RxBuffCount-1))
 800851c:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8008520:	60e7      	str	r7, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 8008522:	4634      	mov	r4, r6
 8008524:	d8ea      	bhi.n	80084fc <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_UNLOCK(heth);
 8008526:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008528:	f8de 4000 	ldr.w	r4, [lr]
 800852c:	f241 000c 	movw	r0, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 8008530:	2201      	movs	r2, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008532:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 8008534:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008536:	f88e 2044 	strb.w	r2, [lr, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800853a:	f88e 3045 	strb.w	r3, [lr, #69]	; 0x45
}
 800853e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(heth);
 8008542:	2002      	movs	r0, #2
}
 8008544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008548 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8008548:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800854c:	2b01      	cmp	r3, #1
 800854e:	d074      	beq.n	800863a <HAL_ETH_TransmitFrame+0xf2>
 8008550:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8008552:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8008554:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008556:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 800855a:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 800855e:	2900      	cmp	r1, #0
 8008560:	d038      	beq.n	80085d4 <HAL_ETH_TransmitFrame+0x8c>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008562:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8008564:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008566:	681c      	ldr	r4, [r3, #0]
 8008568:	2c00      	cmp	r4, #0
 800856a:	db5c      	blt.n	8008626 <HAL_ETH_TransmitFrame+0xde>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800856c:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8008570:	4281      	cmp	r1, r0
 8008572:	d936      	bls.n	80085e2 <HAL_ETH_TransmitFrame+0x9a>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8008574:	4d32      	ldr	r5, [pc, #200]	; (8008640 <HAL_ETH_TransmitFrame+0xf8>)
 8008576:	fba5 4501 	umull	r4, r5, r5, r1
 800857a:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800857c:	fb00 1015 	mls	r0, r0, r5, r1
 8008580:	b368      	cbz	r0, 80085de <HAL_ETH_TransmitFrame+0x96>
      bufcount++;
 8008582:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8008584:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8008588:	4c2e      	ldr	r4, [pc, #184]	; (8008644 <HAL_ETH_TransmitFrame+0xfc>)
    for (i=0; i< bufcount; i++)
 800858a:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800858c:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8008590:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8008594:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8008596:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800859a:	e00f      	b.n	80085bc <HAL_ETH_TransmitFrame+0x74>
      if (i == (bufcount-1))
 800859c:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800859e:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80085a0:	d104      	bne.n	80085ac <HAL_ETH_TransmitFrame+0x64>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80085a2:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80085a4:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80085a6:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 80085aa:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80085ac:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 80085ae:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80085b0:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80085b4:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80085b6:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80085b8:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80085ba:	d03c      	beq.n	8008636 <HAL_ETH_TransmitFrame+0xee>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80085bc:	681c      	ldr	r4, [r3, #0]
 80085be:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 80085c2:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d1e9      	bne.n	800859c <HAL_ETH_TransmitFrame+0x54>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80085c8:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80085ca:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80085cc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 80085d0:	601c      	str	r4, [r3, #0]
      if (i == (bufcount-1))
 80085d2:	e7eb      	b.n	80085ac <HAL_ETH_TransmitFrame+0x64>
    heth->State = HAL_ETH_STATE_READY;
 80085d4:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80085d8:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 80085dc:	4770      	bx	lr
  if (bufcount == 1)
 80085de:	2d01      	cmp	r5, #1
 80085e0:	d1d0      	bne.n	8008584 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80085e2:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80085e4:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80085e8:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80085ea:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80085ee:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80085f0:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80085f2:	6819      	ldr	r1, [r3, #0]
 80085f4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80085f8:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80085fa:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80085fc:	6813      	ldr	r3, [r2, #0]
 80085fe:	f241 0114 	movw	r1, #4116	; 0x1014
 8008602:	5858      	ldr	r0, [r3, r1]
 8008604:	0740      	lsls	r0, r0, #29
 8008606:	d505      	bpl.n	8008614 <HAL_ETH_TransmitFrame+0xcc>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008608:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 800860a:	f241 0004 	movw	r0, #4100	; 0x1004
 800860e:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008610:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 8008612:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 8008614:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8008616:	2101      	movs	r1, #1
  return HAL_OK;
 8008618:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800861a:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800861e:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8008622:	bcf0      	pop	{r4, r5, r6, r7}
 8008624:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008626:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8008628:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800862a:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800862e:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8008632:	bcf0      	pop	{r4, r5, r6, r7}
 8008634:	4770      	bx	lr
 8008636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008638:	e7e0      	b.n	80085fc <HAL_ETH_TransmitFrame+0xb4>
  __HAL_LOCK(heth);
 800863a:	2002      	movs	r0, #2
}
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	ac02b00b 	.word	0xac02b00b
 8008644:	fffffa0c 	.word	0xfffffa0c

08008648 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8008648:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800864c:	2b01      	cmp	r3, #1
 800864e:	d02f      	beq.n	80086b0 <HAL_ETH_GetReceivedFrame_IT+0x68>
 8008650:	4602      	mov	r2, r0
 8008652:	2101      	movs	r1, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008654:	2002      	movs	r0, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008656:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8008658:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(heth);
 800865a:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800865e:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	2800      	cmp	r0, #0
 8008666:	db16      	blt.n	8008696 <HAL_ETH_GetReceivedFrame_IT+0x4e>
      heth->RxFrameInfos.SegCount = 1;   
 8008668:	460c      	mov	r4, r1
  uint32_t descriptorscancounter = 0;
 800866a:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800866c:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800866e:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8008670:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8008674:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008678:	d015      	beq.n	80086a6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800867a:	6819      	ldr	r1, [r3, #0]
 800867c:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 8008680:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8008682:	d117      	bne.n	80086b4 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008684:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8008686:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008688:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800868a:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800868c:	6819      	ldr	r1, [r3, #0]
 800868e:	2900      	cmp	r1, #0
 8008690:	db01      	blt.n	8008696 <HAL_ETH_GetReceivedFrame_IT+0x4e>
 8008692:	2804      	cmp	r0, #4
 8008694:	d1ea      	bne.n	800866c <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 8008696:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8008698:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800869a:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800869e:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80086a2:	bc70      	pop	{r4, r5, r6}
 80086a4:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80086a6:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80086a8:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 80086aa:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80086ac:	6293      	str	r3, [r2, #40]	; 0x28
 80086ae:	e7ed      	b.n	800868c <HAL_ETH_GetReceivedFrame_IT+0x44>
  __HAL_LOCK(heth);
 80086b0:	2002      	movs	r0, #2
}
 80086b2:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 80086b4:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80086b6:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 80086b8:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 80086ba:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 80086bc:	d011      	beq.n	80086e2 <HAL_ETH_GetReceivedFrame_IT+0x9a>
 80086be:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80086c0:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 80086c2:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80086c4:	6880      	ldr	r0, [r0, #8]
      heth->State = HAL_ETH_STATE_READY;
 80086c6:	2501      	movs	r5, #1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80086c8:	f3c1 410d 	ubfx	r1, r1, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80086cc:	68de      	ldr	r6, [r3, #12]
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80086ce:	6410      	str	r0, [r2, #64]	; 0x40
      return HAL_OK;
 80086d0:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80086d2:	3904      	subs	r1, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80086d4:	6296      	str	r6, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 80086d6:	f882 5044 	strb.w	r5, [r2, #68]	; 0x44
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80086da:	63d1      	str	r1, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 80086dc:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 80086e0:	e7df      	b.n	80086a2 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80086e2:	4618      	mov	r0, r3
 80086e4:	6313      	str	r3, [r2, #48]	; 0x30
 80086e6:	e7eb      	b.n	80086c0 <HAL_ETH_GetReceivedFrame_IT+0x78>

080086e8 <HAL_ETH_TxCpltCallback>:
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop

080086ec <HAL_ETH_ErrorCallback>:
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop

080086f0 <HAL_ETH_IRQHandler>:
{
 80086f0:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80086f8:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80086fa:	599d      	ldr	r5, [r3, r6]
 80086fc:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8008700:	d123      	bne.n	800874a <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8008702:	599a      	ldr	r2, [r3, r6]
 8008704:	07d2      	lsls	r2, r2, #31
 8008706:	d416      	bmi.n	8008736 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8008708:	f241 0514 	movw	r5, #4116	; 0x1014
 800870c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008710:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8008712:	595b      	ldr	r3, [r3, r5]
 8008714:	041b      	lsls	r3, r3, #16
 8008716:	d400      	bmi.n	800871a <HAL_ETH_IRQHandler+0x2a>
}
 8008718:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 800871a:	4620      	mov	r0, r4
 800871c:	f7ff ffe6 	bl	80086ec <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8008720:	6821      	ldr	r1, [r4, #0]
 8008722:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 8008726:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 8008728:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800872a:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 800872c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8008730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008734:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 8008736:	f7ff ffd7 	bl	80086e8 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800873a:	2201      	movs	r2, #1
 800873c:	6823      	ldr	r3, [r4, #0]
 800873e:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8008740:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8008744:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008748:	e7de      	b.n	8008708 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800874a:	f008 fb0f 	bl	8010d6c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 8008752:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8008754:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8008756:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8008758:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800875c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008760:	e7d2      	b.n	8008708 <HAL_ETH_IRQHandler+0x18>
 8008762:	bf00      	nop

08008764 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008764:	8a03      	ldrh	r3, [r0, #16]
 8008766:	2b20      	cmp	r3, #32
{
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	460e      	mov	r6, r1
 800876e:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008770:	d834      	bhi.n	80087dc <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008772:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008776:	2b82      	cmp	r3, #130	; 0x82
 8008778:	d039      	beq.n	80087ee <HAL_ETH_ReadPHYRegister+0x8a>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800877a:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800877c:	01b1      	lsls	r1, r6, #6
  tmpreg = heth->Instance->MACMIIAR;
 800877e:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008780:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008782:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008784:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008788:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800878c:	b29b      	uxth	r3, r3
  tmpreg = heth->Instance->MACMIIAR;
 800878e:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008790:	430b      	orrs	r3, r1
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8008792:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008796:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8008798:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800879c:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800879e:	f7fd fda3 	bl	80062e8 <HAL_GetTick>
 80087a2:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80087a4:	e004      	b.n	80087b0 <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 80087a6:	6821      	ldr	r1, [r4, #0]
 80087a8:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80087aa:	f013 0301 	ands.w	r3, r3, #1
 80087ae:	d00d      	beq.n	80087cc <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80087b0:	f7fd fd9a 	bl	80062e8 <HAL_GetTick>
 80087b4:	1b83      	subs	r3, r0, r6
 80087b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ba:	d3f4      	bcc.n	80087a6 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 80087bc:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 80087be:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80087c0:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 80087c2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80087c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80087ca:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80087cc:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 80087ce:	2101      	movs	r1, #1
  return HAL_OK;
 80087d0:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80087d2:	b292      	uxth	r2, r2
 80087d4:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 80087d6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 80087da:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80087dc:	f240 5116 	movw	r1, #1302	; 0x516
 80087e0:	4804      	ldr	r0, [pc, #16]	; (80087f4 <HAL_ETH_ReadPHYRegister+0x90>)
 80087e2:	f7fb f9a1 	bl	8003b28 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80087e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087ea:	2b82      	cmp	r3, #130	; 0x82
 80087ec:	d1c5      	bne.n	800877a <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 80087ee:	2002      	movs	r0, #2
}
 80087f0:	bd70      	pop	{r4, r5, r6, pc}
 80087f2:	bf00      	nop
 80087f4:	08027c70 	.word	0x08027c70

080087f8 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80087f8:	8a03      	ldrh	r3, [r0, #16]
 80087fa:	2b20      	cmp	r3, #32
{
 80087fc:	b570      	push	{r4, r5, r6, lr}
 80087fe:	4604      	mov	r4, r0
 8008800:	460d      	mov	r5, r1
 8008802:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8008804:	d833      	bhi.n	800886e <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008806:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800880a:	2b42      	cmp	r3, #66	; 0x42
 800880c:	d038      	beq.n	8008880 <HAL_ETH_WritePHYRegister+0x88>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800880e:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008810:	01a9      	lsls	r1, r5, #6
  tmpreg = heth->Instance->MACMIIAR;
 8008812:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008814:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008816:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008818:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800881c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8008820:	b2b6      	uxth	r6, r6
 8008822:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008824:	b29b      	uxth	r3, r3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8008826:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8008828:	f005 021c 	and.w	r2, r5, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800882c:	430b      	orrs	r3, r1
 800882e:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8008830:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 8008834:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 8008836:	f7fd fd57 	bl	80062e8 <HAL_GetTick>
 800883a:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800883c:	e004      	b.n	8008848 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008842:	f013 0301 	ands.w	r3, r3, #1
 8008846:	d00d      	beq.n	8008864 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8008848:	f7fd fd4e 	bl	80062e8 <HAL_GetTick>
 800884c:	1b43      	subs	r3, r0, r5
 800884e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008852:	d3f4      	bcc.n	800883e <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8008854:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8008856:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008858:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800885a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800885e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8008862:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8008864:	2201      	movs	r2, #1
  return HAL_OK; 
 8008866:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8008868:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800886c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800886e:	f240 515e 	movw	r1, #1374	; 0x55e
 8008872:	4804      	ldr	r0, [pc, #16]	; (8008884 <HAL_ETH_WritePHYRegister+0x8c>)
 8008874:	f7fb f958 	bl	8003b28 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008878:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800887c:	2b42      	cmp	r3, #66	; 0x42
 800887e:	d1c6      	bne.n	800880e <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 8008880:	2002      	movs	r0, #2
}
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	08027c70 	.word	0x08027c70

08008888 <HAL_ETH_Init>:
{
 8008888:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800888a:	2300      	movs	r3, #0
{
 800888c:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800888e:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8008890:	2800      	cmp	r0, #0
 8008892:	f000 80f3 	beq.w	8008a7c <HAL_ETH_Init+0x1f4>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8008896:	6843      	ldr	r3, [r0, #4]
 8008898:	4604      	mov	r4, r0
 800889a:	2b01      	cmp	r3, #1
 800889c:	f200 809c 	bhi.w	80089d8 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 80088a0:	69a3      	ldr	r3, [r4, #24]
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	f200 808f 	bhi.w	80089c6 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 80088a8:	69e3      	ldr	r3, [r4, #28]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d873      	bhi.n	8008996 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 80088ae:	6a23      	ldr	r3, [r4, #32]
 80088b0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 80088b4:	d177      	bne.n	80089a6 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 80088b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d07b      	beq.n	80089ba <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088c2:	4a90      	ldr	r2, [pc, #576]	; (8008b04 <HAL_ETH_Init+0x27c>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80088c4:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088c6:	6c51      	ldr	r1, [r2, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80088c8:	488f      	ldr	r0, [pc, #572]	; (8008b08 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80088ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088ce:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80088d2:	6451      	str	r1, [r2, #68]	; 0x44
 80088d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80088d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80088da:	9201      	str	r2, [sp, #4]
 80088dc:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80088de:	6842      	ldr	r2, [r0, #4]
 80088e0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80088e4:	6042      	str	r2, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80088e6:	6842      	ldr	r2, [r0, #4]
 80088e8:	6a21      	ldr	r1, [r4, #32]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	6042      	str	r2, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	f042 0201 	orr.w	r2, r2, #1
 80088f4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80088f6:	f7fd fcf7 	bl	80062e8 <HAL_GetTick>
 80088fa:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80088fc:	e005      	b.n	800890a <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80088fe:	f7fd fcf3 	bl	80062e8 <HAL_GetTick>
 8008902:	1b43      	subs	r3, r0, r5
 8008904:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008908:	d86f      	bhi.n	80089ea <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8008910:	6812      	ldr	r2, [r2, #0]
 8008912:	07d0      	lsls	r0, r2, #31
 8008914:	d4f3      	bmi.n	80088fe <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 8008916:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8008918:	f002 fdae 	bl	800b478 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800891c:	4b7b      	ldr	r3, [pc, #492]	; (8008b0c <HAL_ETH_Init+0x284>)
 800891e:	4a7c      	ldr	r2, [pc, #496]	; (8008b10 <HAL_ETH_Init+0x288>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8008920:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8008924:	4403      	add	r3, r0
 8008926:	4293      	cmp	r3, r2
 8008928:	d272      	bcs.n	8008a10 <HAL_ETH_Init+0x188>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800892a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800892e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008934:	2100      	movs	r1, #0
 8008936:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8008938:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800893a:	f7ff ff5d 	bl	80087f8 <HAL_ETH_WritePHYRegister>
 800893e:	4605      	mov	r5, r0
 8008940:	2800      	cmp	r0, #0
 8008942:	d15b      	bne.n	80089fc <HAL_ETH_Init+0x174>
  HAL_Delay(PHY_RESET_DELAY);
 8008944:	20ff      	movs	r0, #255	; 0xff
 8008946:	f7fd fcd5 	bl	80062f4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800894a:	6863      	ldr	r3, [r4, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d176      	bne.n	8008a3e <HAL_ETH_Init+0x1b6>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008956:	f040 809c 	bne.w	8008a92 <HAL_ETH_Init+0x20a>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008960:	f040 8090 	bne.w	8008a84 <HAL_ETH_Init+0x1fc>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008964:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8008966:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8008968:	2100      	movs	r1, #0
 800896a:	4620      	mov	r0, r4
 800896c:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8008970:	b292      	uxth	r2, r2
 8008972:	f7ff ff41 	bl	80087f8 <HAL_ETH_WritePHYRegister>
 8008976:	2800      	cmp	r0, #0
 8008978:	d140      	bne.n	80089fc <HAL_ETH_Init+0x174>
    HAL_Delay(PHY_CONFIG_DELAY);
 800897a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800897e:	f7fd fcb9 	bl	80062f4 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 8008982:	4620      	mov	r0, r4
 8008984:	2100      	movs	r1, #0
 8008986:	f7ff fcd7 	bl	8008338 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800898a:	2301      	movs	r3, #1
}
 800898c:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800898e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008992:	b003      	add	sp, #12
 8008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8008996:	21e0      	movs	r1, #224	; 0xe0
 8008998:	485e      	ldr	r0, [pc, #376]	; (8008b14 <HAL_ETH_Init+0x28c>)
 800899a:	f7fb f8c5 	bl	8003b28 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800899e:	6a23      	ldr	r3, [r4, #32]
 80089a0:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 80089a4:	d087      	beq.n	80088b6 <HAL_ETH_Init+0x2e>
 80089a6:	21e1      	movs	r1, #225	; 0xe1
 80089a8:	485a      	ldr	r0, [pc, #360]	; (8008b14 <HAL_ETH_Init+0x28c>)
 80089aa:	f7fb f8bd 	bl	8003b28 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 80089ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d183      	bne.n	80088c2 <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 80089ba:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 80089bc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 80089c0:	f008 f944 	bl	8010c4c <HAL_ETH_MspInit>
 80089c4:	e77d      	b.n	80088c2 <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 80089c6:	21df      	movs	r1, #223	; 0xdf
 80089c8:	4852      	ldr	r0, [pc, #328]	; (8008b14 <HAL_ETH_Init+0x28c>)
 80089ca:	f7fb f8ad 	bl	8003b28 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 80089ce:	69e3      	ldr	r3, [r4, #28]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f67f af6c 	bls.w	80088ae <HAL_ETH_Init+0x26>
 80089d6:	e7de      	b.n	8008996 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 80089d8:	21de      	movs	r1, #222	; 0xde
 80089da:	484e      	ldr	r0, [pc, #312]	; (8008b14 <HAL_ETH_Init+0x28c>)
 80089dc:	f7fb f8a4 	bl	8003b28 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 80089e0:	69a3      	ldr	r3, [r4, #24]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	f67f af60 	bls.w	80088a8 <HAL_ETH_Init+0x20>
 80089e8:	e7ed      	b.n	80089c6 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80089ea:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80089ec:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80089ee:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80089f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80089f6:	4628      	mov	r0, r5
 80089f8:	b003      	add	sp, #12
 80089fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      heth->State = HAL_ETH_STATE_READY;
 80089fc:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80089fe:	4620      	mov	r0, r4
 8008a00:	2101      	movs	r1, #1
 8008a02:	f7ff fc99 	bl	8008338 <ETH_MACDMAConfig>
}
 8008a06:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 8008a08:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 8008a0c:	b003      	add	sp, #12
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8008a10:	4b41      	ldr	r3, [pc, #260]	; (8008b18 <HAL_ETH_Init+0x290>)
 8008a12:	4a42      	ldr	r2, [pc, #264]	; (8008b1c <HAL_ETH_Init+0x294>)
 8008a14:	4403      	add	r3, r0
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d90e      	bls.n	8008a38 <HAL_ETH_Init+0x1b0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8008a1a:	4b41      	ldr	r3, [pc, #260]	; (8008b20 <HAL_ETH_Init+0x298>)
 8008a1c:	4a41      	ldr	r2, [pc, #260]	; (8008b24 <HAL_ETH_Init+0x29c>)
 8008a1e:	4403      	add	r3, r0
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d384      	bcc.n	800892e <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8008a24:	4b40      	ldr	r3, [pc, #256]	; (8008b28 <HAL_ETH_Init+0x2a0>)
 8008a26:	4a41      	ldr	r2, [pc, #260]	; (8008b2c <HAL_ETH_Init+0x2a4>)
 8008a28:	4403      	add	r3, r0
 8008a2a:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008a2c:	bf94      	ite	ls
 8008a2e:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8008a32:	f045 0510 	orrhi.w	r5, r5, #16
 8008a36:	e77a      	b.n	800892e <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008a38:	f045 050c 	orr.w	r5, r5, #12
 8008a3c:	e777      	b.n	800892e <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 8008a3e:	f7fd fc53 	bl	80062e8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008a42:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008a46:	4606      	mov	r6, r0
 8008a48:	e002      	b.n	8008a50 <HAL_ETH_Init+0x1c8>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008a4a:	9b00      	ldr	r3, [sp, #0]
 8008a4c:	0759      	lsls	r1, r3, #29
 8008a4e:	d426      	bmi.n	8008a9e <HAL_ETH_Init+0x216>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008a50:	466a      	mov	r2, sp
 8008a52:	2101      	movs	r1, #1
 8008a54:	4620      	mov	r0, r4
 8008a56:	f7ff fe85 	bl	8008764 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8008a5a:	f7fd fc45 	bl	80062e8 <HAL_GetTick>
 8008a5e:	1b80      	subs	r0, r0, r6
 8008a60:	42b8      	cmp	r0, r7
 8008a62:	d9f2      	bls.n	8008a4a <HAL_ETH_Init+0x1c2>
        ETH_MACDMAConfig(heth, err);
 8008a64:	2101      	movs	r1, #1
 8008a66:	4620      	mov	r0, r4
 8008a68:	f7ff fc66 	bl	8008338 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8008a6c:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 8008a6e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8008a70:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8008a72:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8008a76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8008a7a:	e7bc      	b.n	80089f6 <HAL_ETH_Init+0x16e>
    return HAL_ERROR;
 8008a7c:	2501      	movs	r5, #1
}
 8008a7e:	4628      	mov	r0, r5
 8008a80:	b003      	add	sp, #12
 8008a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8008a84:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8008a88:	4822      	ldr	r0, [pc, #136]	; (8008b14 <HAL_ETH_Init+0x28c>)
 8008a8a:	f7fb f84d 	bl	8003b28 <assert_failed>
 8008a8e:	68e3      	ldr	r3, [r4, #12]
 8008a90:	e768      	b.n	8008964 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008a92:	f240 11c5 	movw	r1, #453	; 0x1c5
 8008a96:	481f      	ldr	r0, [pc, #124]	; (8008b14 <HAL_ETH_Init+0x28c>)
 8008a98:	f7fb f846 	bl	8003b28 <assert_failed>
 8008a9c:	e75d      	b.n	800895a <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8008a9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008aa2:	2100      	movs	r1, #0
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f7ff fea7 	bl	80087f8 <HAL_ETH_WritePHYRegister>
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	d1a6      	bne.n	80089fc <HAL_ETH_Init+0x174>
    tickstart = HAL_GetTick();
 8008aae:	f7fd fc1b 	bl	80062e8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008ab2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	e002      	b.n	8008ac0 <HAL_ETH_Init+0x238>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008aba:	9b00      	ldr	r3, [sp, #0]
 8008abc:	069a      	lsls	r2, r3, #26
 8008abe:	d40a      	bmi.n	8008ad6 <HAL_ETH_Init+0x24e>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008ac0:	466a      	mov	r2, sp
 8008ac2:	2101      	movs	r1, #1
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f7ff fe4d 	bl	8008764 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008aca:	f7fd fc0d 	bl	80062e8 <HAL_GetTick>
 8008ace:	1b80      	subs	r0, r0, r6
 8008ad0:	42b8      	cmp	r0, r7
 8008ad2:	d9f2      	bls.n	8008aba <HAL_ETH_Init+0x232>
 8008ad4:	e7c6      	b.n	8008a64 <HAL_ETH_Init+0x1dc>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008ad6:	466a      	mov	r2, sp
 8008ad8:	211f      	movs	r1, #31
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fe42 	bl	8008764 <HAL_ETH_ReadPHYRegister>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d18b      	bne.n	80089fc <HAL_ETH_Init+0x174>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008ae4:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8008ae6:	f013 0210 	ands.w	r2, r3, #16
 8008aea:	bf18      	it	ne
 8008aec:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8008af0:	075b      	lsls	r3, r3, #29
 8008af2:	60e2      	str	r2, [r4, #12]
 8008af4:	d501      	bpl.n	8008afa <HAL_ETH_Init+0x272>
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008af6:	60a0      	str	r0, [r4, #8]
 8008af8:	e743      	b.n	8008982 <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 8008afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008afe:	60a3      	str	r3, [r4, #8]
 8008b00:	e73f      	b.n	8008982 <HAL_ETH_Init+0xfa>
 8008b02:	bf00      	nop
 8008b04:	40023800 	.word	0x40023800
 8008b08:	40013800 	.word	0x40013800
 8008b0c:	feced300 	.word	0xfeced300
 8008b10:	00e4e1c0 	.word	0x00e4e1c0
 8008b14:	08027c70 	.word	0x08027c70
 8008b18:	fde9f140 	.word	0xfde9f140
 8008b1c:	017d783f 	.word	0x017d783f
 8008b20:	fc6c7900 	.word	0xfc6c7900
 8008b24:	02625a00 	.word	0x02625a00
 8008b28:	fa0a1f00 	.word	0xfa0a1f00
 8008b2c:	02faf07f 	.word	0x02faf07f

08008b30 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8008b30:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d039      	beq.n	8008bac <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008b38:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8008b3a:	2202      	movs	r2, #2
{  
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4604      	mov	r4, r0
 8008b40:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 8008b42:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8008b44:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8008b46:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __IO uint32_t tmpreg = 0;
 8008b4a:	9501      	str	r5, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b4c:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8008b4e:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	f042 0208 	orr.w	r2, r2, #8
 8008b58:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b5e:	f7fd fbc9 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008b62:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b64:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8008b66:	6823      	ldr	r3, [r4, #0]
 8008b68:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8008b6a:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	f042 0204 	orr.w	r2, r2, #4
 8008b72:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b78:	f7fd fbbc 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008b7c:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8008b7e:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8008b80:	9a00      	ldr	r2, [sp, #0]
 8008b82:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8008b84:	f7ff fbc2 	bl	800830c <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008b88:	6822      	ldr	r2, [r4, #0]
 8008b8a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8008b8e:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008b90:	58d1      	ldr	r1, [r2, r3]
 8008b92:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8008b96:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8008b98:	58d1      	ldr	r1, [r2, r3]
 8008b9a:	f041 0102 	orr.w	r1, r1, #2
 8008b9e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8008ba0:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008ba4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8008ba8:	b002      	add	sp, #8
 8008baa:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8008bac:	2002      	movs	r0, #2
}
 8008bae:	4770      	bx	lr

08008bb0 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 8008bb0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d039      	beq.n	8008c2c <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008bb8:	6803      	ldr	r3, [r0, #0]
 8008bba:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 8008bbe:	2102      	movs	r1, #2
{  
 8008bc0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8008bc2:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008bc4:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 8008bc8:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0;
 8008bca:	2500      	movs	r5, #0
  __HAL_LOCK(heth);
 8008bcc:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 8008bd0:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008bd2:	5899      	ldr	r1, [r3, r2]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008bd4:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8008bd6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008bda:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8008bdc:	5899      	ldr	r1, [r3, r2]
 8008bde:	f021 0102 	bic.w	r1, r1, #2
 8008be2:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 8008be4:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	f022 0204 	bic.w	r2, r2, #4
 8008bec:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008bf2:	f7fd fb7f 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008bf6:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8008bf8:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8008bfa:	9a01      	ldr	r2, [sp, #4]
 8008bfc:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8008bfe:	f7ff fb85 	bl	800830c <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008c02:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 8008c04:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c06:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	f022 0208 	bic.w	r2, r2, #8
 8008c0e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c14:	f7fd fb6e 	bl	80062f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8008c18:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 8008c1a:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8008c1c:	6823      	ldr	r3, [r4, #0]
 8008c1e:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 8008c20:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008c24:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8008c28:	b002      	add	sp, #8
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8008c2c:	2002      	movs	r0, #2
}
 8008c2e:	4770      	bx	lr

08008c30 <HAL_ETH_ConfigMAC>:
{
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8008c32:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	f000 8242 	beq.w	80090c0 <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008c3c:	6883      	ldr	r3, [r0, #8]
 8008c3e:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 8008c40:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 8008c42:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008c44:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8008c48:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8008c4a:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 8008c4e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8008c52:	f040 8207 	bne.w	8009064 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8008c56:	68eb      	ldr	r3, [r5, #12]
 8008c58:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8008c5c:	f040 8114 	bne.w	8008e88 <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	f000 8119 	beq.w	8008e98 <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8008c66:	6823      	ldr	r3, [r4, #0]
 8008c68:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8008c6c:	f040 8139 	bne.w	8008ee2 <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008c76:	f040 816b 	bne.w	8008f50 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8008c7a:	68a3      	ldr	r3, [r4, #8]
 8008c7c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8008c80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008c84:	d002      	beq.n	8008c8c <HAL_ETH_ConfigMAC+0x5c>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f040 821c 	bne.w	80090c4 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8008c8c:	68e3      	ldr	r3, [r4, #12]
 8008c8e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008c92:	f040 8152 	bne.w	8008f3a <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8008c9c:	f040 8142 	bne.w	8008f24 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8008ca0:	6963      	ldr	r3, [r4, #20]
 8008ca2:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008ca6:	f040 8132 	bne.w	8008f0e <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008caa:	69a3      	ldr	r3, [r4, #24]
 8008cac:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008cb0:	f040 8122 	bne.w	8008ef8 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008cb4:	69e3      	ldr	r3, [r4, #28]
 8008cb6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008cba:	f040 81a3 	bne.w	8009004 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8008cbe:	6a23      	ldr	r3, [r4, #32]
 8008cc0:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008cc4:	f040 818e 	bne.w	8008fe4 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8008cc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cca:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8008cce:	f040 8193 	bne.w	8008ff8 <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8008cd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008cd4:	f033 0310 	bics.w	r3, r3, #16
 8008cd8:	f040 8179 	bne.w	8008fce <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8008cdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008cde:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8008ce2:	f040 819a 	bne.w	800901a <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8008ce6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ce8:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8008cec:	d003      	beq.n	8008cf6 <HAL_ETH_ConfigMAC+0xc6>
 8008cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cf2:	f040 81d3 	bne.w	800909c <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8008cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008cf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cfc:	2a40      	cmp	r2, #64	; 0x40
 8008cfe:	d002      	beq.n	8008d06 <HAL_ETH_ConfigMAC+0xd6>
 8008d00:	2b80      	cmp	r3, #128	; 0x80
 8008d02:	f040 81b5 	bne.w	8009070 <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8008d06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008d08:	f033 0320 	bics.w	r3, r3, #32
 8008d0c:	f040 80de 	bne.w	8008ecc <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8008d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008d12:	f033 0308 	bics.w	r3, r3, #8
 8008d16:	f040 80cf 	bne.w	8008eb8 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8008d1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	f200 80a5 	bhi.w	8008e6c <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8008d22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d24:	f240 4204 	movw	r2, #1028	; 0x404
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	bf18      	it	ne
 8008d2c:	2b10      	cmpne	r3, #16
 8008d2e:	d003      	beq.n	8008d38 <HAL_ETH_ConfigMAC+0x108>
 8008d30:	f033 0304 	bics.w	r3, r3, #4
 8008d34:	f040 81be 	bne.w	80090b4 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8008d38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008d3a:	f033 0202 	bics.w	r2, r3, #2
 8008d3e:	d004      	beq.n	8008d4a <HAL_ETH_ConfigMAC+0x11a>
 8008d40:	f240 4202 	movw	r2, #1026	; 0x402
 8008d44:	4293      	cmp	r3, r2
 8008d46:	f040 819e 	bne.w	8009086 <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8008d4a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d50:	f080 816e 	bcs.w	8009030 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8008d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008d56:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8008d5a:	f040 8173 	bne.w	8009044 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8008d5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008d60:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8008d64:	f040 8178 	bne.w	8009058 <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8008d68:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8008d6a:	f033 0308 	bics.w	r3, r3, #8
 8008d6e:	f040 8123 	bne.w	8008fb8 <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8008d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d74:	f033 0304 	bics.w	r3, r3, #4
 8008d78:	f040 8113 	bne.w	8008fa2 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8008d7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008d7e:	f033 0302 	bics.w	r3, r3, #2
 8008d82:	f040 8103 	bne.w	8008f8c <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008d86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008d88:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008d8c:	f040 80f3 	bne.w	8008f76 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8008d90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d96:	f080 80e8 	bcs.w	8008f6a <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 8008d9a:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008d9c:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 8008d9e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 8008da2:	430b      	orrs	r3, r1
 8008da4:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	6962      	ldr	r2, [r4, #20]
 8008dac:	4333      	orrs	r3, r6
 8008dae:	69a6      	ldr	r6, [r4, #24]
 8008db0:	430b      	orrs	r3, r1
 8008db2:	69e1      	ldr	r1, [r4, #28]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	6a22      	ldr	r2, [r4, #32]
 8008db8:	4333      	orrs	r3, r6
 8008dba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	68aa      	ldr	r2, [r5, #8]
 8008dc4:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 8008dc6:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 8008dc8:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 8008dca:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 8008dcc:	68e9      	ldr	r1, [r5, #12]
 8008dce:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008dd0:	4abf      	ldr	r2, [pc, #764]	; (80090d0 <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 8008dd2:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008dd4:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008dd6:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8008dda:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008ddc:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 8008dde:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008de0:	f7fd fa88 	bl	80062f4 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008de4:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008de6:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 8008dea:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008dec:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 8008dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 8008df0:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 8008df2:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 8008df4:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008df8:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 8008dfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 8008dfc:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 8008dfe:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 8008e00:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 8008e02:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 8008e04:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 8008e06:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008e08:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 8008e0a:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e0c:	f7fd fa72 	bl	80062f4 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 8008e10:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008e12:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 8008e14:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 8008e16:	430b      	orrs	r3, r1
 8008e18:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008e1a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 8008e20:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 8008e22:	430b      	orrs	r3, r1
 8008e24:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008e26:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 8008e28:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008e2a:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8008e2c:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e2e:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008e30:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 8008e32:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 8008e34:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008e38:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8008e3a:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008e3c:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 8008e3e:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e40:	f7fd fa58 	bl	80062f4 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008e44:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e46:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008e48:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 8008e4a:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008e4c:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 8008e4e:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008e50:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 8008e52:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e54:	f7fd fa4e 	bl	80062f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8008e5c:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 8008e5e:	2201      	movs	r2, #1
  return HAL_OK;  
 8008e60:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008e62:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008e66:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8008e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8008e6c:	f240 6123 	movw	r1, #1571	; 0x623
 8008e70:	4898      	ldr	r0, [pc, #608]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008e72:	f7fa fe59 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8008e76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008e78:	f240 4204 	movw	r2, #1028	; 0x404
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	bf18      	it	ne
 8008e80:	2b10      	cmpne	r3, #16
 8008e82:	f47f af55 	bne.w	8008d30 <HAL_ETH_ConfigMAC+0x100>
 8008e86:	e757      	b.n	8008d38 <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8008e88:	f240 610e 	movw	r1, #1550	; 0x60e
 8008e8c:	4891      	ldr	r0, [pc, #580]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008e8e:	f7fa fe4b 	bl	8003b28 <assert_failed>
  if (macconf != NULL)
 8008e92:	2c00      	cmp	r4, #0
 8008e94:	f47f aee7 	bne.w	8008c66 <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 8008e98:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e9a:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008e9c:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 8008e9e:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008ea0:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 8008ea2:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008ea6:	4323      	orrs	r3, r4
 8008ea8:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008eaa:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8008eac:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008eae:	f7fd fa21 	bl	80062f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8008eb2:	682b      	ldr	r3, [r5, #0]
 8008eb4:	601c      	str	r4, [r3, #0]
 8008eb6:	e7d1      	b.n	8008e5c <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8008eb8:	f240 6122 	movw	r1, #1570	; 0x622
 8008ebc:	4885      	ldr	r0, [pc, #532]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008ebe:	f7fa fe33 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8008ec2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	f67f af2c 	bls.w	8008d22 <HAL_ETH_ConfigMAC+0xf2>
 8008eca:	e7cf      	b.n	8008e6c <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8008ecc:	f240 6121 	movw	r1, #1569	; 0x621
 8008ed0:	4880      	ldr	r0, [pc, #512]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008ed2:	f7fa fe29 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8008ed6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ed8:	f033 0308 	bics.w	r3, r3, #8
 8008edc:	f43f af1d 	beq.w	8008d1a <HAL_ETH_ConfigMAC+0xea>
 8008ee0:	e7ea      	b.n	8008eb8 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8008ee2:	f240 6113 	movw	r1, #1555	; 0x613
 8008ee6:	487b      	ldr	r0, [pc, #492]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008ee8:	f7fa fe1e 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8008eec:	6863      	ldr	r3, [r4, #4]
 8008eee:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8008ef2:	f43f aec2 	beq.w	8008c7a <HAL_ETH_ConfigMAC+0x4a>
 8008ef6:	e02b      	b.n	8008f50 <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008ef8:	f240 6119 	movw	r1, #1561	; 0x619
 8008efc:	4875      	ldr	r0, [pc, #468]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008efe:	f7fa fe13 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8008f02:	69e3      	ldr	r3, [r4, #28]
 8008f04:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008f08:	f43f aed9 	beq.w	8008cbe <HAL_ETH_ConfigMAC+0x8e>
 8008f0c:	e07a      	b.n	8009004 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8008f0e:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 8008f12:	4870      	ldr	r0, [pc, #448]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f14:	f7fa fe08 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8008f18:	69a3      	ldr	r3, [r4, #24]
 8008f1a:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008f1e:	f43f aec9 	beq.w	8008cb4 <HAL_ETH_ConfigMAC+0x84>
 8008f22:	e7e9      	b.n	8008ef8 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008f24:	f240 6117 	movw	r1, #1559	; 0x617
 8008f28:	486a      	ldr	r0, [pc, #424]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f2a:	f7fa fdfd 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 8008f2e:	6963      	ldr	r3, [r4, #20]
 8008f30:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8008f34:	f43f aeb9 	beq.w	8008caa <HAL_ETH_ConfigMAC+0x7a>
 8008f38:	e7e9      	b.n	8008f0e <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8008f3a:	f240 6116 	movw	r1, #1558	; 0x616
 8008f3e:	4865      	ldr	r0, [pc, #404]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f40:	f7fa fdf2 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8008f4a:	f43f aea9 	beq.w	8008ca0 <HAL_ETH_ConfigMAC+0x70>
 8008f4e:	e7e9      	b.n	8008f24 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8008f50:	f240 6114 	movw	r1, #1556	; 0x614
 8008f54:	485f      	ldr	r0, [pc, #380]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f56:	f7fa fde7 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8008f60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f64:	f47f ae8f 	bne.w	8008c86 <HAL_ETH_ConfigMAC+0x56>
 8008f68:	e690      	b.n	8008c8c <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8008f6a:	f240 612d 	movw	r1, #1581	; 0x62d
 8008f6e:	4859      	ldr	r0, [pc, #356]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f70:	f7fa fdda 	bl	8003b28 <assert_failed>
 8008f74:	e711      	b.n	8008d9a <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008f76:	f240 612c 	movw	r1, #1580	; 0x62c
 8008f7a:	4856      	ldr	r0, [pc, #344]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f7c:	f7fa fdd4 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8008f80:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8008f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f86:	f4ff af08 	bcc.w	8008d9a <HAL_ETH_ConfigMAC+0x16a>
 8008f8a:	e7ee      	b.n	8008f6a <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8008f8c:	f240 612b 	movw	r1, #1579	; 0x62b
 8008f90:	4850      	ldr	r0, [pc, #320]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008f92:	f7fa fdc9 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8008f96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008f98:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8008f9c:	f43f aef8 	beq.w	8008d90 <HAL_ETH_ConfigMAC+0x160>
 8008fa0:	e7e9      	b.n	8008f76 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8008fa2:	f240 612a 	movw	r1, #1578	; 0x62a
 8008fa6:	484b      	ldr	r0, [pc, #300]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008fa8:	f7fa fdbe 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8008fac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008fae:	f033 0302 	bics.w	r3, r3, #2
 8008fb2:	f43f aee8 	beq.w	8008d86 <HAL_ETH_ConfigMAC+0x156>
 8008fb6:	e7e9      	b.n	8008f8c <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8008fb8:	f240 6129 	movw	r1, #1577	; 0x629
 8008fbc:	4845      	ldr	r0, [pc, #276]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008fbe:	f7fa fdb3 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8008fc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fc4:	f033 0304 	bics.w	r3, r3, #4
 8008fc8:	f43f aed8 	beq.w	8008d7c <HAL_ETH_ConfigMAC+0x14c>
 8008fcc:	e7e9      	b.n	8008fa2 <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8008fce:	f240 611d 	movw	r1, #1565	; 0x61d
 8008fd2:	4840      	ldr	r0, [pc, #256]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008fd4:	f7fa fda8 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8008fd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008fda:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8008fde:	f43f ae82 	beq.w	8008ce6 <HAL_ETH_ConfigMAC+0xb6>
 8008fe2:	e01a      	b.n	800901a <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8008fe4:	f240 611b 	movw	r1, #1563	; 0x61b
 8008fe8:	483a      	ldr	r0, [pc, #232]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008fea:	f7fa fd9d 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8008fee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff0:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8008ff4:	f43f ae6d 	beq.w	8008cd2 <HAL_ETH_ConfigMAC+0xa2>
 8008ff8:	f240 611c 	movw	r1, #1564	; 0x61c
 8008ffc:	4835      	ldr	r0, [pc, #212]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8008ffe:	f7fa fd93 	bl	8003b28 <assert_failed>
 8009002:	e666      	b.n	8008cd2 <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8009004:	f240 611a 	movw	r1, #1562	; 0x61a
 8009008:	4832      	ldr	r0, [pc, #200]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 800900a:	f7fa fd8d 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800900e:	6a23      	ldr	r3, [r4, #32]
 8009010:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009014:	f43f ae58 	beq.w	8008cc8 <HAL_ETH_ConfigMAC+0x98>
 8009018:	e7e4      	b.n	8008fe4 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800901a:	f240 611e 	movw	r1, #1566	; 0x61e
 800901e:	482d      	ldr	r0, [pc, #180]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8009020:	f7fa fd82 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009024:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009026:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800902a:	f47f ae60 	bne.w	8008cee <HAL_ETH_ConfigMAC+0xbe>
 800902e:	e662      	b.n	8008cf6 <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009030:	f240 6126 	movw	r1, #1574	; 0x626
 8009034:	4827      	ldr	r0, [pc, #156]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8009036:	f7fa fd77 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800903a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800903c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009040:	f43f ae8d 	beq.w	8008d5e <HAL_ETH_ConfigMAC+0x12e>
 8009044:	f240 6127 	movw	r1, #1575	; 0x627
 8009048:	4822      	ldr	r0, [pc, #136]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 800904a:	f7fa fd6d 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800904e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009050:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009054:	f43f ae88 	beq.w	8008d68 <HAL_ETH_ConfigMAC+0x138>
 8009058:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800905c:	481d      	ldr	r0, [pc, #116]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 800905e:	f7fa fd63 	bl	8003b28 <assert_failed>
 8009062:	e681      	b.n	8008d68 <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009064:	f240 610d 	movw	r1, #1549	; 0x60d
 8009068:	481a      	ldr	r0, [pc, #104]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 800906a:	f7fa fd5d 	bl	8003b28 <assert_failed>
 800906e:	e5f2      	b.n	8008c56 <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8009070:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8009074:	4817      	ldr	r0, [pc, #92]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 8009076:	f7fa fd57 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800907a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800907c:	f033 0320 	bics.w	r3, r3, #32
 8009080:	f43f ae46 	beq.w	8008d10 <HAL_ETH_ConfigMAC+0xe0>
 8009084:	e722      	b.n	8008ecc <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8009086:	f240 6125 	movw	r1, #1573	; 0x625
 800908a:	4812      	ldr	r0, [pc, #72]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 800908c:	f7fa fd4c 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009090:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009096:	f4ff ae5d 	bcc.w	8008d54 <HAL_ETH_ConfigMAC+0x124>
 800909a:	e7c9      	b.n	8009030 <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800909c:	f240 611f 	movw	r1, #1567	; 0x61f
 80090a0:	480c      	ldr	r0, [pc, #48]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 80090a2:	f7fa fd41 	bl	8003b28 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 80090a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80090ac:	2a40      	cmp	r2, #64	; 0x40
 80090ae:	f47f ae27 	bne.w	8008d00 <HAL_ETH_ConfigMAC+0xd0>
 80090b2:	e628      	b.n	8008d06 <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80090b4:	f240 6124 	movw	r1, #1572	; 0x624
 80090b8:	4806      	ldr	r0, [pc, #24]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 80090ba:	f7fa fd35 	bl	8003b28 <assert_failed>
 80090be:	e63b      	b.n	8008d38 <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 80090c0:	2002      	movs	r0, #2
}
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 80090c4:	f240 6115 	movw	r1, #1557	; 0x615
 80090c8:	4802      	ldr	r0, [pc, #8]	; (80090d4 <HAL_ETH_ConfigMAC+0x4a4>)
 80090ca:	f7fa fd2d 	bl	8003b28 <assert_failed>
 80090ce:	e5dd      	b.n	8008c8c <HAL_ETH_ConfigMAC+0x5c>
 80090d0:	ff20810f 	.word	0xff20810f
 80090d4:	08027c70 	.word	0x08027c70

080090d8 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80090d8:	4bbe      	ldr	r3, [pc, #760]	; (80093d4 <HAL_GPIO_Init+0x2fc>)
 80090da:	4abf      	ldr	r2, [pc, #764]	; (80093d8 <HAL_GPIO_Init+0x300>)
 80090dc:	4290      	cmp	r0, r2
 80090de:	bf18      	it	ne
 80090e0:	4298      	cmpne	r0, r3
 80090e2:	bf14      	ite	ne
 80090e4:	2301      	movne	r3, #1
 80090e6:	2300      	moveq	r3, #0
{
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	4606      	mov	r6, r0
 80090ee:	b085      	sub	sp, #20
 80090f0:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80090f2:	461d      	mov	r5, r3
 80090f4:	d026      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 80090f6:	4bb9      	ldr	r3, [pc, #740]	; (80093dc <HAL_GPIO_Init+0x304>)
 80090f8:	4298      	cmp	r0, r3
 80090fa:	d023      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 80090fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009100:	4298      	cmp	r0, r3
 8009102:	d01f      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 8009104:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009108:	4298      	cmp	r0, r3
 800910a:	d01b      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 800910c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009110:	4298      	cmp	r0, r3
 8009112:	d017      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 8009114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009118:	4298      	cmp	r0, r3
 800911a:	d013      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 800911c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009120:	4298      	cmp	r0, r3
 8009122:	d00f      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 8009124:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912c:	4290      	cmp	r0, r2
 800912e:	bf18      	it	ne
 8009130:	4298      	cmpne	r0, r3
 8009132:	d007      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 8009134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009138:	4298      	cmp	r0, r3
 800913a:	d003      	beq.n	8009144 <HAL_GPIO_Init+0x6c>
 800913c:	21b1      	movs	r1, #177	; 0xb1
 800913e:	48a8      	ldr	r0, [pc, #672]	; (80093e0 <HAL_GPIO_Init+0x308>)
 8009140:	f7fa fcf2 	bl	8003b28 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009144:	883b      	ldrh	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f000 811b 	beq.w	8009382 <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	4ba5      	ldr	r3, [pc, #660]	; (80093e4 <HAL_GPIO_Init+0x30c>)
 8009150:	4ca5      	ldr	r4, [pc, #660]	; (80093e8 <HAL_GPIO_Init+0x310>)
 8009152:	f1a2 0011 	sub.w	r0, r2, #17
 8009156:	429a      	cmp	r2, r3
 8009158:	bf18      	it	ne
 800915a:	2a03      	cmpne	r2, #3
 800915c:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8009160:	bf8c      	ite	hi
 8009162:	2301      	movhi	r3, #1
 8009164:	2300      	movls	r3, #0
 8009166:	42a2      	cmp	r2, r4
 8009168:	bf0c      	ite	eq
 800916a:	2300      	moveq	r3, #0
 800916c:	f003 0301 	andne.w	r3, r3, #1
 8009170:	4a9e      	ldr	r2, [pc, #632]	; (80093ec <HAL_GPIO_Init+0x314>)
 8009172:	2801      	cmp	r0, #1
 8009174:	bf94      	ite	ls
 8009176:	2300      	movls	r3, #0
 8009178:	f003 0301 	andhi.w	r3, r3, #1
 800917c:	4291      	cmp	r1, r2
 800917e:	bf0c      	ite	eq
 8009180:	2300      	moveq	r3, #0
 8009182:	f003 0301 	andne.w	r3, r3, #1
 8009186:	b11b      	cbz	r3, 8009190 <HAL_GPIO_Init+0xb8>
 8009188:	4b99      	ldr	r3, [pc, #612]	; (80093f0 <HAL_GPIO_Init+0x318>)
 800918a:	4299      	cmp	r1, r3
 800918c:	f040 811c 	bne.w	80093c8 <HAL_GPIO_Init+0x2f0>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	2b02      	cmp	r3, #2
 8009194:	f200 80fa 	bhi.w	800938c <HAL_GPIO_Init+0x2b4>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009198:	46b8      	mov	r8, r7
{
 800919a:	2400      	movs	r4, #0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800919c:	f8df a278 	ldr.w	sl, [pc, #632]	; 8009418 <HAL_GPIO_Init+0x340>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80091a0:	462f      	mov	r7, r5
 80091a2:	e003      	b.n	80091ac <HAL_GPIO_Init+0xd4>
  for(position = 0; position < GPIO_NUMBER; position++)
 80091a4:	3401      	adds	r4, #1
 80091a6:	2c10      	cmp	r4, #16
 80091a8:	f000 80c1 	beq.w	800932e <HAL_GPIO_Init+0x256>
    ioposition = ((uint32_t)0x01) << position;
 80091ac:	2501      	movs	r5, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091ae:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 80091b2:	40a5      	lsls	r5, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80091b4:	ea05 0903 	and.w	r9, r5, r3
    if(iocurrent == ioposition)
 80091b8:	ea35 0303 	bics.w	r3, r5, r3
 80091bc:	d1f2      	bne.n	80091a4 <HAL_GPIO_Init+0xcc>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80091be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091c2:	f021 0010 	bic.w	r0, r1, #16
 80091c6:	1e43      	subs	r3, r0, #1
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	f200 80b3 	bhi.w	8009334 <HAL_GPIO_Init+0x25c>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80091ce:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80091d2:	f1be 0f03 	cmp.w	lr, #3
 80091d6:	f200 80b4 	bhi.w	8009342 <HAL_GPIO_Init+0x26a>
        temp = GPIOx->OSPEEDR; 
 80091da:	ea4f 0b44 	mov.w	fp, r4, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091de:	2203      	movs	r2, #3
        temp = GPIOx->OSPEEDR; 
 80091e0:	68b3      	ldr	r3, [r6, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80091e2:	f3c1 1c00 	ubfx	ip, r1, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091e6:	fa02 f20b 	lsl.w	r2, r2, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 80091ea:	fa0e fe0b 	lsl.w	lr, lr, fp
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80091ee:	fa0c fc04 	lsl.w	ip, ip, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80091f2:	ea23 0302 	bic.w	r3, r3, r2
 80091f6:	43d2      	mvns	r2, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 80091f8:	ea4e 0303 	orr.w	r3, lr, r3
        GPIOx->OSPEEDR = temp;
 80091fc:	60b3      	str	r3, [r6, #8]
        temp = GPIOx->OTYPER;
 80091fe:	6873      	ldr	r3, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009200:	ea23 0505 	bic.w	r5, r3, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8009204:	ea4c 0505 	orr.w	r5, ip, r5
        GPIOx->OTYPER = temp;
 8009208:	6075      	str	r5, [r6, #4]
      temp = GPIOx->PUPDR;
 800920a:	68f5      	ldr	r5, [r6, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800920c:	2802      	cmp	r0, #2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800920e:	f8d8 3008 	ldr.w	r3, [r8, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009212:	ea05 0502 	and.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8009216:	fa03 f30b 	lsl.w	r3, r3, fp
 800921a:	ea43 0305 	orr.w	r3, r3, r5
      GPIOx->PUPDR = temp;
 800921e:	60f3      	str	r3, [r6, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009220:	d116      	bne.n	8009250 <HAL_GPIO_Init+0x178>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009222:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009226:	2b0f      	cmp	r3, #15
 8009228:	f200 809b 	bhi.w	8009362 <HAL_GPIO_Init+0x28a>
        temp = GPIOx->AFR[position >> 3];
 800922c:	08e0      	lsrs	r0, r4, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800922e:	f004 0e07 	and.w	lr, r4, #7
 8009232:	f04f 0c0f 	mov.w	ip, #15
 8009236:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800923a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800923e:	6a05      	ldr	r5, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009240:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009244:	fa03 f30e 	lsl.w	r3, r3, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009248:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800924c:	432b      	orrs	r3, r5
        GPIOx->AFR[position >> 3] = temp;
 800924e:	6203      	str	r3, [r0, #32]
      temp = GPIOx->MODER;
 8009250:	6830      	ldr	r0, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009252:	f001 0303 	and.w	r3, r1, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009256:	4002      	ands	r2, r0
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009258:	fa03 f30b 	lsl.w	r3, r3, fp
 800925c:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 800925e:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009260:	00cb      	lsls	r3, r1, #3
 8009262:	d59f      	bpl.n	80091a4 <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009264:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
 8009268:	f024 0c03 	bic.w	ip, r4, #3
 800926c:	4d61      	ldr	r5, [pc, #388]	; (80093f4 <HAL_GPIO_Init+0x31c>)
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800926e:	f004 0303 	and.w	r3, r4, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009272:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009276:	220f      	movs	r2, #15
 8009278:	4465      	add	r5, ip
 800927a:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800927c:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
 8009280:	f8da 0044 	ldr.w	r0, [sl, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009284:	409a      	lsls	r2, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009286:	f8df c150 	ldr.w	ip, [pc, #336]	; 80093d8 <HAL_GPIO_Init+0x300>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800928a:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800928e:	4566      	cmp	r6, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009290:	9003      	str	r0, [sp, #12]
 8009292:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8009294:	68a8      	ldr	r0, [r5, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009296:	ea20 0202 	bic.w	r2, r0, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800929a:	d01f      	beq.n	80092dc <HAL_GPIO_Init+0x204>
 800929c:	2f00      	cmp	r7, #0
 800929e:	d05b      	beq.n	8009358 <HAL_GPIO_Init+0x280>
 80092a0:	484e      	ldr	r0, [pc, #312]	; (80093dc <HAL_GPIO_Init+0x304>)
 80092a2:	4286      	cmp	r6, r0
 80092a4:	d068      	beq.n	8009378 <HAL_GPIO_Init+0x2a0>
 80092a6:	4854      	ldr	r0, [pc, #336]	; (80093f8 <HAL_GPIO_Init+0x320>)
 80092a8:	4286      	cmp	r6, r0
 80092aa:	d074      	beq.n	8009396 <HAL_GPIO_Init+0x2be>
 80092ac:	4853      	ldr	r0, [pc, #332]	; (80093fc <HAL_GPIO_Init+0x324>)
 80092ae:	4286      	cmp	r6, r0
 80092b0:	d076      	beq.n	80093a0 <HAL_GPIO_Init+0x2c8>
 80092b2:	4853      	ldr	r0, [pc, #332]	; (8009400 <HAL_GPIO_Init+0x328>)
 80092b4:	4286      	cmp	r6, r0
 80092b6:	d07d      	beq.n	80093b4 <HAL_GPIO_Init+0x2dc>
 80092b8:	4852      	ldr	r0, [pc, #328]	; (8009404 <HAL_GPIO_Init+0x32c>)
 80092ba:	4286      	cmp	r6, r0
 80092bc:	d07f      	beq.n	80093be <HAL_GPIO_Init+0x2e6>
 80092be:	4852      	ldr	r0, [pc, #328]	; (8009408 <HAL_GPIO_Init+0x330>)
 80092c0:	4286      	cmp	r6, r0
 80092c2:	d072      	beq.n	80093aa <HAL_GPIO_Init+0x2d2>
 80092c4:	4851      	ldr	r0, [pc, #324]	; (800940c <HAL_GPIO_Init+0x334>)
 80092c6:	4286      	cmp	r6, r0
 80092c8:	f000 80a8 	beq.w	800941c <HAL_GPIO_Init+0x344>
 80092cc:	4850      	ldr	r0, [pc, #320]	; (8009410 <HAL_GPIO_Init+0x338>)
 80092ce:	4286      	cmp	r6, r0
 80092d0:	bf0c      	ite	eq
 80092d2:	2009      	moveq	r0, #9
 80092d4:	200a      	movne	r0, #10
 80092d6:	fa00 f303 	lsl.w	r3, r0, r3
 80092da:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80092dc:	4b4d      	ldr	r3, [pc, #308]	; (8009414 <HAL_GPIO_Init+0x33c>)
        temp &= ~((uint32_t)iocurrent);
 80092de:	ea6f 0009 	mvn.w	r0, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 80092e2:	60aa      	str	r2, [r5, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092e4:	03cd      	lsls	r5, r1, #15
        temp = EXTI->IMR;
 80092e6:	681a      	ldr	r2, [r3, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80092e8:	f104 0401 	add.w	r4, r4, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80092ec:	4b49      	ldr	r3, [pc, #292]	; (8009414 <HAL_GPIO_Init+0x33c>)
        temp &= ~((uint32_t)iocurrent);
 80092ee:	bf54      	ite	pl
 80092f0:	4002      	andpl	r2, r0
          temp |= iocurrent;
 80092f2:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->IMR = temp;
 80092f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80092f8:	685a      	ldr	r2, [r3, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092fa:	038b      	lsls	r3, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80092fc:	4b45      	ldr	r3, [pc, #276]	; (8009414 <HAL_GPIO_Init+0x33c>)
        temp &= ~((uint32_t)iocurrent);
 80092fe:	bf54      	ite	pl
 8009300:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8009302:	ea49 0202 	orrmi.w	r2, r9, r2

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009306:	02cd      	lsls	r5, r1, #11
        EXTI->EMR = temp;
 8009308:	605a      	str	r2, [r3, #4]
        temp = EXTI->RTSR;
 800930a:	689a      	ldr	r2, [r3, #8]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800930c:	4b41      	ldr	r3, [pc, #260]	; (8009414 <HAL_GPIO_Init+0x33c>)
        temp &= ~((uint32_t)iocurrent);
 800930e:	bf54      	ite	pl
 8009310:	4002      	andpl	r2, r0
          temp |= iocurrent;
 8009312:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->RTSR = temp;
 8009316:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009318:	028a      	lsls	r2, r1, #10
        temp = EXTI->FTSR;
 800931a:	68db      	ldr	r3, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800931c:	4a3d      	ldr	r2, [pc, #244]	; (8009414 <HAL_GPIO_Init+0x33c>)
        temp &= ~((uint32_t)iocurrent);
 800931e:	bf54      	ite	pl
 8009320:	4003      	andpl	r3, r0
          temp |= iocurrent;
 8009322:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 8009326:	2c10      	cmp	r4, #16
        EXTI->FTSR = temp;
 8009328:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800932a:	f47f af3f 	bne.w	80091ac <HAL_GPIO_Init+0xd4>
      }
    }
  }
}
 800932e:	b005      	add	sp, #20
 8009330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009334:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8009338:	2203      	movs	r2, #3
 800933a:	fa02 f20b 	lsl.w	r2, r2, fp
 800933e:	43d2      	mvns	r2, r2
 8009340:	e763      	b.n	800920a <HAL_GPIO_Init+0x132>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009342:	21c6      	movs	r1, #198	; 0xc6
 8009344:	4826      	ldr	r0, [pc, #152]	; (80093e0 <HAL_GPIO_Init+0x308>)
 8009346:	f7fa fbef 	bl	8003b28 <assert_failed>
 800934a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800934e:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 8009352:	f021 0010 	bic.w	r0, r1, #16
 8009356:	e740      	b.n	80091da <HAL_GPIO_Init+0x102>
 8009358:	2001      	movs	r0, #1
 800935a:	fa00 f303 	lsl.w	r3, r0, r3
 800935e:	431a      	orrs	r2, r3
 8009360:	e7bc      	b.n	80092dc <HAL_GPIO_Init+0x204>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009362:	21de      	movs	r1, #222	; 0xde
 8009364:	481e      	ldr	r0, [pc, #120]	; (80093e0 <HAL_GPIO_Init+0x308>)
 8009366:	9201      	str	r2, [sp, #4]
 8009368:	f7fa fbde 	bl	8003b28 <assert_failed>
 800936c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8009370:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009374:	9a01      	ldr	r2, [sp, #4]
 8009376:	e759      	b.n	800922c <HAL_GPIO_Init+0x154>
 8009378:	2002      	movs	r0, #2
 800937a:	fa00 f303 	lsl.w	r3, r0, r3
 800937e:	431a      	orrs	r2, r3
 8009380:	e7ac      	b.n	80092dc <HAL_GPIO_Init+0x204>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009382:	21b2      	movs	r1, #178	; 0xb2
 8009384:	4816      	ldr	r0, [pc, #88]	; (80093e0 <HAL_GPIO_Init+0x308>)
 8009386:	f7fa fbcf 	bl	8003b28 <assert_failed>
 800938a:	e6df      	b.n	800914c <HAL_GPIO_Init+0x74>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800938c:	21b4      	movs	r1, #180	; 0xb4
 800938e:	4814      	ldr	r0, [pc, #80]	; (80093e0 <HAL_GPIO_Init+0x308>)
 8009390:	f7fa fbca 	bl	8003b28 <assert_failed>
 8009394:	e700      	b.n	8009198 <HAL_GPIO_Init+0xc0>
 8009396:	2003      	movs	r0, #3
 8009398:	fa00 f303 	lsl.w	r3, r0, r3
 800939c:	431a      	orrs	r2, r3
 800939e:	e79d      	b.n	80092dc <HAL_GPIO_Init+0x204>
 80093a0:	2004      	movs	r0, #4
 80093a2:	fa00 f303 	lsl.w	r3, r0, r3
 80093a6:	431a      	orrs	r2, r3
 80093a8:	e798      	b.n	80092dc <HAL_GPIO_Init+0x204>
 80093aa:	2007      	movs	r0, #7
 80093ac:	fa00 f303 	lsl.w	r3, r0, r3
 80093b0:	431a      	orrs	r2, r3
 80093b2:	e793      	b.n	80092dc <HAL_GPIO_Init+0x204>
 80093b4:	2005      	movs	r0, #5
 80093b6:	fa00 f303 	lsl.w	r3, r0, r3
 80093ba:	431a      	orrs	r2, r3
 80093bc:	e78e      	b.n	80092dc <HAL_GPIO_Init+0x204>
 80093be:	2006      	movs	r0, #6
 80093c0:	fa00 f303 	lsl.w	r3, r0, r3
 80093c4:	431a      	orrs	r2, r3
 80093c6:	e789      	b.n	80092dc <HAL_GPIO_Init+0x204>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80093c8:	21b3      	movs	r1, #179	; 0xb3
 80093ca:	4805      	ldr	r0, [pc, #20]	; (80093e0 <HAL_GPIO_Init+0x308>)
 80093cc:	f7fa fbac 	bl	8003b28 <assert_failed>
 80093d0:	e6de      	b.n	8009190 <HAL_GPIO_Init+0xb8>
 80093d2:	bf00      	nop
 80093d4:	40020400 	.word	0x40020400
 80093d8:	40020000 	.word	0x40020000
 80093dc:	40020800 	.word	0x40020800
 80093e0:	08027ca8 	.word	0x08027ca8
 80093e4:	10210000 	.word	0x10210000
 80093e8:	10220000 	.word	0x10220000
 80093ec:	10110000 	.word	0x10110000
 80093f0:	10120000 	.word	0x10120000
 80093f4:	40013800 	.word	0x40013800
 80093f8:	40020c00 	.word	0x40020c00
 80093fc:	40021000 	.word	0x40021000
 8009400:	40021400 	.word	0x40021400
 8009404:	40021800 	.word	0x40021800
 8009408:	40021c00 	.word	0x40021c00
 800940c:	40022000 	.word	0x40022000
 8009410:	40022400 	.word	0x40022400
 8009414:	40013c00 	.word	0x40013c00
 8009418:	40023800 	.word	0x40023800
 800941c:	2008      	movs	r0, #8
 800941e:	fa00 f303 	lsl.w	r3, r0, r3
 8009422:	431a      	orrs	r2, r3
 8009424:	e75a      	b.n	80092dc <HAL_GPIO_Init+0x204>
 8009426:	bf00      	nop

08009428 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800942c:	4a6d      	ldr	r2, [pc, #436]	; (80095e4 <HAL_GPIO_DeInit+0x1bc>)
{
 800942e:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009430:	4b6d      	ldr	r3, [pc, #436]	; (80095e8 <HAL_GPIO_DeInit+0x1c0>)
{
 8009432:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009434:	4290      	cmp	r0, r2
 8009436:	bf18      	it	ne
 8009438:	4298      	cmpne	r0, r3
 800943a:	bf14      	ite	ne
 800943c:	f04f 0801 	movne.w	r8, #1
 8009440:	f04f 0800 	moveq.w	r8, #0
 8009444:	d028      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 8009446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800944a:	4298      	cmp	r0, r3
 800944c:	d024      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 800944e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009452:	4298      	cmp	r0, r3
 8009454:	d020      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 8009456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800945a:	4298      	cmp	r0, r3
 800945c:	d01c      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 800945e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009462:	4298      	cmp	r0, r3
 8009464:	d018      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 8009466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800946a:	4298      	cmp	r0, r3
 800946c:	d014      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 800946e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009472:	4298      	cmp	r0, r3
 8009474:	d010      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 8009476:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800947a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947e:	4290      	cmp	r0, r2
 8009480:	bf18      	it	ne
 8009482:	4298      	cmpne	r0, r3
 8009484:	d008      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 8009486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800948a:	4298      	cmp	r0, r3
 800948c:	d004      	beq.n	8009498 <HAL_GPIO_DeInit+0x70>
 800948e:	f44f 7197 	mov.w	r1, #302	; 0x12e
 8009492:	4856      	ldr	r0, [pc, #344]	; (80095ec <HAL_GPIO_DeInit+0x1c4>)
 8009494:	f7fa fb48 	bl	8003b28 <assert_failed>
{
 8009498:	2300      	movs	r3, #0
 800949a:	f8df b174 	ldr.w	fp, [pc, #372]	; 8009610 <HAL_GPIO_DeInit+0x1e8>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800949e:	f8df a144 	ldr.w	sl, [pc, #324]	; 80095e4 <HAL_GPIO_DeInit+0x1bc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80094a2:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8009614 <HAL_GPIO_DeInit+0x1ec>
 80094a6:	e002      	b.n	80094ae <HAL_GPIO_DeInit+0x86>
  for(position = 0; position < GPIO_NUMBER; position++)
 80094a8:	3301      	adds	r3, #1
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d07c      	beq.n	80095a8 <HAL_GPIO_DeInit+0x180>
    ioposition = ((uint32_t)0x01) << position;
 80094ae:	2001      	movs	r0, #1
 80094b0:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 80094b4:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 80094b8:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 80094bc:	d1f4      	bne.n	80094a8 <HAL_GPIO_DeInit+0x80>
      tmp = SYSCFG->EXTICR[position >> 2];
 80094be:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80094c2:	f003 0103 	and.w	r1, r3, #3
 80094c6:	270f      	movs	r7, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80094c8:	4554      	cmp	r4, sl
 80094ca:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80094cc:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 80094d0:	f8d6 e008 	ldr.w	lr, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80094d4:	fa07 f701 	lsl.w	r7, r7, r1
 80094d8:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80094dc:	d01f      	beq.n	800951e <HAL_GPIO_DeInit+0xf6>
 80094de:	f1b8 0f00 	cmp.w	r8, #0
 80094e2:	d064      	beq.n	80095ae <HAL_GPIO_DeInit+0x186>
 80094e4:	4842      	ldr	r0, [pc, #264]	; (80095f0 <HAL_GPIO_DeInit+0x1c8>)
 80094e6:	4284      	cmp	r4, r0
 80094e8:	d064      	beq.n	80095b4 <HAL_GPIO_DeInit+0x18c>
 80094ea:	4842      	ldr	r0, [pc, #264]	; (80095f4 <HAL_GPIO_DeInit+0x1cc>)
 80094ec:	4284      	cmp	r4, r0
 80094ee:	d065      	beq.n	80095bc <HAL_GPIO_DeInit+0x194>
 80094f0:	4841      	ldr	r0, [pc, #260]	; (80095f8 <HAL_GPIO_DeInit+0x1d0>)
 80094f2:	4284      	cmp	r4, r0
 80094f4:	d066      	beq.n	80095c4 <HAL_GPIO_DeInit+0x19c>
 80094f6:	4841      	ldr	r0, [pc, #260]	; (80095fc <HAL_GPIO_DeInit+0x1d4>)
 80094f8:	4284      	cmp	r4, r0
 80094fa:	d067      	beq.n	80095cc <HAL_GPIO_DeInit+0x1a4>
 80094fc:	4840      	ldr	r0, [pc, #256]	; (8009600 <HAL_GPIO_DeInit+0x1d8>)
 80094fe:	4284      	cmp	r4, r0
 8009500:	d054      	beq.n	80095ac <HAL_GPIO_DeInit+0x184>
 8009502:	4840      	ldr	r0, [pc, #256]	; (8009604 <HAL_GPIO_DeInit+0x1dc>)
 8009504:	4284      	cmp	r4, r0
 8009506:	d065      	beq.n	80095d4 <HAL_GPIO_DeInit+0x1ac>
 8009508:	483f      	ldr	r0, [pc, #252]	; (8009608 <HAL_GPIO_DeInit+0x1e0>)
 800950a:	4284      	cmp	r4, r0
 800950c:	d066      	beq.n	80095dc <HAL_GPIO_DeInit+0x1b4>
 800950e:	483f      	ldr	r0, [pc, #252]	; (800960c <HAL_GPIO_DeInit+0x1e4>)
 8009510:	4284      	cmp	r4, r0
 8009512:	bf14      	ite	ne
 8009514:	200a      	movne	r0, #10
 8009516:	2009      	moveq	r0, #9
 8009518:	fa00 f101 	lsl.w	r1, r0, r1
 800951c:	e000      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 800951e:	2100      	movs	r1, #0
 8009520:	458e      	cmp	lr, r1
 8009522:	d11b      	bne.n	800955c <HAL_GPIO_DeInit+0x134>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009524:	f8d9 1000 	ldr.w	r1, [r9]
 8009528:	ea21 010c 	bic.w	r1, r1, ip
 800952c:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009530:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009534:	ea21 010c 	bic.w	r1, r1, ip
 8009538:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800953c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8009540:	ea21 010c 	bic.w	r1, r1, ip
 8009544:	f8c9 1008 	str.w	r1, [r9, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009548:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800954c:	ea21 010c 	bic.w	r1, r1, ip
 8009550:	f8c9 100c 	str.w	r1, [r9, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009554:	68b1      	ldr	r1, [r6, #8]
 8009556:	ea21 0707 	bic.w	r7, r1, r7
 800955a:	60b7      	str	r7, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800955c:	0059      	lsls	r1, r3, #1
 800955e:	2603      	movs	r6, #3
 8009560:	f8d4 c000 	ldr.w	ip, [r4]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009564:	270f      	movs	r7, #15
 8009566:	fa23 f006 	lsr.w	r0, r3, r6
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800956a:	408e      	lsls	r6, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800956c:	f003 0107 	and.w	r1, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 8009570:	3301      	adds	r3, #1
 8009572:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009576:	ea2c 0c06 	bic.w	ip, ip, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800957a:	0089      	lsls	r1, r1, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 800957c:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800957e:	f8c4 c000 	str.w	ip, [r4]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009582:	fa07 f701 	lsl.w	r7, r7, r1
 8009586:	6a01      	ldr	r1, [r0, #32]
 8009588:	ea21 0107 	bic.w	r1, r1, r7
 800958c:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800958e:	68e1      	ldr	r1, [r4, #12]
 8009590:	ea21 0106 	bic.w	r1, r1, r6
 8009594:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009596:	6861      	ldr	r1, [r4, #4]
 8009598:	ea21 0202 	bic.w	r2, r1, r2
 800959c:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800959e:	68a2      	ldr	r2, [r4, #8]
 80095a0:	ea22 0606 	bic.w	r6, r2, r6
 80095a4:	60a6      	str	r6, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80095a6:	d182      	bne.n	80094ae <HAL_GPIO_DeInit+0x86>
    }
  }
}
 80095a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ac:	2006      	movs	r0, #6
 80095ae:	fa00 f101 	lsl.w	r1, r0, r1
 80095b2:	e7b5      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095b4:	2002      	movs	r0, #2
 80095b6:	fa00 f101 	lsl.w	r1, r0, r1
 80095ba:	e7b1      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095bc:	2003      	movs	r0, #3
 80095be:	fa00 f101 	lsl.w	r1, r0, r1
 80095c2:	e7ad      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095c4:	2004      	movs	r0, #4
 80095c6:	fa00 f101 	lsl.w	r1, r0, r1
 80095ca:	e7a9      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095cc:	2005      	movs	r0, #5
 80095ce:	fa00 f101 	lsl.w	r1, r0, r1
 80095d2:	e7a5      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095d4:	2007      	movs	r0, #7
 80095d6:	fa00 f101 	lsl.w	r1, r0, r1
 80095da:	e7a1      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095dc:	2008      	movs	r0, #8
 80095de:	fa00 f101 	lsl.w	r1, r0, r1
 80095e2:	e79d      	b.n	8009520 <HAL_GPIO_DeInit+0xf8>
 80095e4:	40020000 	.word	0x40020000
 80095e8:	40020400 	.word	0x40020400
 80095ec:	08027ca8 	.word	0x08027ca8
 80095f0:	40020800 	.word	0x40020800
 80095f4:	40020c00 	.word	0x40020c00
 80095f8:	40021000 	.word	0x40021000
 80095fc:	40021400 	.word	0x40021400
 8009600:	40021800 	.word	0x40021800
 8009604:	40021c00 	.word	0x40021c00
 8009608:	40022000 	.word	0x40022000
 800960c:	40022400 	.word	0x40022400
 8009610:	40013800 	.word	0x40013800
 8009614:	40013c00 	.word	0x40013c00

08009618 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800961c:	460c      	mov	r4, r1
 800961e:	b129      	cbz	r1, 800962c <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009620:	692b      	ldr	r3, [r5, #16]
 8009622:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8009624:	bf14      	ite	ne
 8009626:	2001      	movne	r0, #1
 8009628:	2000      	moveq	r0, #0
 800962a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800962c:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8009630:	4801      	ldr	r0, [pc, #4]	; (8009638 <HAL_GPIO_ReadPin+0x20>)
 8009632:	f7fa fa79 	bl	8003b28 <assert_failed>
 8009636:	e7f3      	b.n	8009620 <HAL_GPIO_ReadPin+0x8>
 8009638:	08027ca8 	.word	0x08027ca8

0800963c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009640:	460c      	mov	r4, r1
{
 8009642:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009644:	b161      	cbz	r1, 8009660 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8009646:	2d01      	cmp	r5, #1
 8009648:	d803      	bhi.n	8009652 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800964a:	b905      	cbnz	r5, 800964e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800964c:	0424      	lsls	r4, r4, #16
 800964e:	61b4      	str	r4, [r6, #24]
  }
}
 8009650:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8009652:	f240 119b 	movw	r1, #411	; 0x19b
 8009656:	4805      	ldr	r0, [pc, #20]	; (800966c <HAL_GPIO_WritePin+0x30>)
 8009658:	f7fa fa66 	bl	8003b28 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800965c:	61b4      	str	r4, [r6, #24]
}
 800965e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009660:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <HAL_GPIO_WritePin+0x30>)
 8009666:	f7fa fa5f 	bl	8003b28 <assert_failed>
 800966a:	e7ec      	b.n	8009646 <HAL_GPIO_WritePin+0xa>
 800966c:	08027ca8 	.word	0x08027ca8

08009670 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009674:	460c      	mov	r4, r1
 8009676:	b129      	cbz	r1, 8009684 <HAL_GPIO_TogglePin+0x14>

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009678:	6943      	ldr	r3, [r0, #20]
 800967a:	420b      	tst	r3, r1
 800967c:	d008      	beq.n	8009690 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800967e:	040c      	lsls	r4, r1, #16
 8009680:	6184      	str	r4, [r0, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009682:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8009684:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8009688:	4802      	ldr	r0, [pc, #8]	; (8009694 <HAL_GPIO_TogglePin+0x24>)
 800968a:	f7fa fa4d 	bl	8003b28 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800968e:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009690:	61ac      	str	r4, [r5, #24]
}
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	08027ca8 	.word	0x08027ca8

08009698 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop

0800969c <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800969c:	4a04      	ldr	r2, [pc, #16]	; (80096b0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800969e:	6951      	ldr	r1, [r2, #20]
 80096a0:	4201      	tst	r1, r0
 80096a2:	d100      	bne.n	80096a6 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80096a4:	4770      	bx	lr
{
 80096a6:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80096a8:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80096aa:	f7ff fff5 	bl	8009698 <HAL_GPIO_EXTI_Callback>
}
 80096ae:	bd08      	pop	{r3, pc}
 80096b0:	40013c00 	.word	0x40013c00

080096b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80096b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096b8:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8009778 <I2C_TransferConfig+0xc4>
{
 80096bc:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096be:	4e27      	ldr	r6, [pc, #156]	; (800975c <I2C_TransferConfig+0xa8>)
{
 80096c0:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096c2:	6801      	ldr	r1, [r0, #0]
{
 80096c4:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096c6:	4826      	ldr	r0, [pc, #152]	; (8009760 <I2C_TransferConfig+0xac>)
{
 80096c8:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096ca:	42b1      	cmp	r1, r6
 80096cc:	bf18      	it	ne
 80096ce:	4561      	cmpne	r1, ip
{
 80096d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80096d4:	bf14      	ite	ne
 80096d6:	2601      	movne	r6, #1
 80096d8:	2600      	moveq	r6, #0
 80096da:	4281      	cmp	r1, r0
 80096dc:	bf0c      	ite	eq
 80096de:	2600      	moveq	r6, #0
 80096e0:	f006 0601 	andne.w	r6, r6, #1
 80096e4:	b116      	cbz	r6, 80096ec <I2C_TransferConfig+0x38>
 80096e6:	4b1f      	ldr	r3, [pc, #124]	; (8009764 <I2C_TransferConfig+0xb0>)
 80096e8:	4299      	cmp	r1, r3
 80096ea:	d124      	bne.n	8009736 <I2C_TransferConfig+0x82>
  assert_param(IS_TRANSFER_MODE(Mode));
 80096ec:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 80096f0:	d002      	beq.n	80096f8 <I2C_TransferConfig+0x44>
 80096f2:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80096f6:	d12a      	bne.n	800974e <I2C_TransferConfig+0x9a>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80096f8:	4b1b      	ldr	r3, [pc, #108]	; (8009768 <I2C_TransferConfig+0xb4>)
 80096fa:	4599      	cmp	r9, r3
 80096fc:	d007      	beq.n	800970e <I2C_TransferConfig+0x5a>
 80096fe:	f429 6380 	bic.w	r3, r9, #1024	; 0x400
 8009702:	4a1a      	ldr	r2, [pc, #104]	; (800976c <I2C_TransferConfig+0xb8>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d002      	beq.n	800970e <I2C_TransferConfig+0x5a>
 8009708:	f1b9 0f00 	cmp.w	r9, #0
 800970c:	d119      	bne.n	8009742 <I2C_TransferConfig+0x8e>

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800970e:	ea49 4204 	orr.w	r2, r9, r4, lsl #16
 8009712:	f8d8 1000 	ldr.w	r1, [r8]
 8009716:	4816      	ldr	r0, [pc, #88]	; (8009770 <I2C_TransferConfig+0xbc>)
 8009718:	f3c5 0409 	ubfx	r4, r5, #0, #10
 800971c:	ea42 0307 	orr.w	r3, r2, r7
 8009720:	684a      	ldr	r2, [r1, #4]
 8009722:	ea40 5959 	orr.w	r9, r0, r9, lsr #21
 8009726:	431c      	orrs	r4, r3
 8009728:	ea22 0909 	bic.w	r9, r2, r9
 800972c:	ea44 0409 	orr.w	r4, r4, r9
 8009730:	604c      	str	r4, [r1, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009736:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
 800973a:	480e      	ldr	r0, [pc, #56]	; (8009774 <I2C_TransferConfig+0xc0>)
 800973c:	f7fa f9f4 	bl	8003b28 <assert_failed>
 8009740:	e7d4      	b.n	80096ec <I2C_TransferConfig+0x38>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8009742:	f641 01c2 	movw	r1, #6338	; 0x18c2
 8009746:	480b      	ldr	r0, [pc, #44]	; (8009774 <I2C_TransferConfig+0xc0>)
 8009748:	f7fa f9ee 	bl	8003b28 <assert_failed>
 800974c:	e7df      	b.n	800970e <I2C_TransferConfig+0x5a>
  assert_param(IS_TRANSFER_MODE(Mode));
 800974e:	f641 01c1 	movw	r1, #6337	; 0x18c1
 8009752:	4808      	ldr	r0, [pc, #32]	; (8009774 <I2C_TransferConfig+0xc0>)
 8009754:	f7fa f9e8 	bl	8003b28 <assert_failed>
 8009758:	e7ce      	b.n	80096f8 <I2C_TransferConfig+0x44>
 800975a:	bf00      	nop
 800975c:	40005400 	.word	0x40005400
 8009760:	40005c00 	.word	0x40005c00
 8009764:	40006000 	.word	0x40006000
 8009768:	80004000 	.word	0x80004000
 800976c:	80002000 	.word	0x80002000
 8009770:	03ff63ff 	.word	0x03ff63ff
 8009774:	08027ce4 	.word	0x08027ce4
 8009778:	40005800 	.word	0x40005800

0800977c <I2C_IsAcknowledgeFailed.part.0>:
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
 800977c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977e:	4606      	mov	r6, r0
 8009780:	460d      	mov	r5, r1
 8009782:	4617      	mov	r7, r2
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009784:	6834      	ldr	r4, [r6, #0]
 8009786:	e001      	b.n	800978c <I2C_IsAcknowledgeFailed.part.0+0x10>
      if (Timeout != HAL_MAX_DELAY)
 8009788:	1c68      	adds	r0, r5, #1
 800978a:	d120      	bne.n	80097ce <I2C_IsAcknowledgeFailed.part.0+0x52>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800978c:	69a3      	ldr	r3, [r4, #24]
 800978e:	0699      	lsls	r1, r3, #26
 8009790:	d5fa      	bpl.n	8009788 <I2C_IsAcknowledgeFailed.part.0+0xc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009792:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009794:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009796:	61e2      	str	r2, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009798:	61e3      	str	r3, [r4, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800979a:	69a3      	ldr	r3, [r4, #24]
 800979c:	079a      	lsls	r2, r3, #30
 800979e:	d501      	bpl.n	80097a4 <I2C_IsAcknowledgeFailed.part.0+0x28>
    hi2c->Instance->TXDR = 0x00U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097a4:	69a3      	ldr	r3, [r4, #24]
 80097a6:	07db      	lsls	r3, r3, #31
 80097a8:	d524      	bpl.n	80097f4 <I2C_IsAcknowledgeFailed.part.0+0x78>
    I2C_RESET_CR2(hi2c);
 80097aa:	6863      	ldr	r3, [r4, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ac:	2200      	movs	r2, #0
    I2C_RESET_CR2(hi2c);
 80097ae:	4814      	ldr	r0, [pc, #80]	; (8009800 <I2C_IsAcknowledgeFailed.part.0+0x84>)
    hi2c->State = HAL_I2C_STATE_READY;
 80097b0:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 80097b2:	4003      	ands	r3, r0
 80097b4:	6063      	str	r3, [r4, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097b6:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80097b8:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80097bc:	f043 0304 	orr.w	r3, r3, #4
 80097c0:	6473      	str	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80097c2:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80097c6:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
 80097ca:	2001      	movs	r0, #1
 80097cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ce:	f7fc fd8b 	bl	80062e8 <HAL_GetTick>
 80097d2:	1bc0      	subs	r0, r0, r7
 80097d4:	4285      	cmp	r5, r0
 80097d6:	d301      	bcc.n	80097dc <I2C_IsAcknowledgeFailed.part.0+0x60>
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d1d3      	bne.n	8009784 <I2C_IsAcknowledgeFailed.part.0+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097dc:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097de:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097e0:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097e2:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 80097e4:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80097e8:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80097ea:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80097ee:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          return HAL_ERROR;
 80097f2:	e7ea      	b.n	80097ca <I2C_IsAcknowledgeFailed.part.0+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80097f4:	69a3      	ldr	r3, [r4, #24]
 80097f6:	f043 0301 	orr.w	r3, r3, #1
 80097fa:	61a3      	str	r3, [r4, #24]
 80097fc:	e7d5      	b.n	80097aa <I2C_IsAcknowledgeFailed.part.0+0x2e>
 80097fe:	bf00      	nop
 8009800:	fe00e800 	.word	0xfe00e800

08009804 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	4605      	mov	r5, r0
 8009808:	460c      	mov	r4, r1
 800980a:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800980c:	e007      	b.n	800981e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	06de      	lsls	r6, r3, #27
 8009812:	d502      	bpl.n	800981a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
 8009814:	f7ff ffb2 	bl	800977c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009818:	b9f0      	cbnz	r0, 8009858 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (Timeout != HAL_MAX_DELAY)
 800981a:	1c63      	adds	r3, r4, #1
 800981c:	d108      	bne.n	8009830 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	463a      	mov	r2, r7
 8009822:	4621      	mov	r1, r4
 8009824:	4628      	mov	r0, r5
 8009826:	699e      	ldr	r6, [r3, #24]
 8009828:	07b6      	lsls	r6, r6, #30
 800982a:	d5f0      	bpl.n	800980e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800982c:	2000      	movs	r0, #0
}
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009830:	f7fc fd5a 	bl	80062e8 <HAL_GetTick>
 8009834:	1bc0      	subs	r0, r0, r7
 8009836:	42a0      	cmp	r0, r4
 8009838:	d801      	bhi.n	800983e <I2C_WaitOnTXISFlagUntilTimeout+0x3a>
 800983a:	2c00      	cmp	r4, #0
 800983c:	d1ef      	bne.n	800981e <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800983e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009840:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009842:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009844:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009846:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8009848:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800984c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800984e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009852:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8009856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8009858:	2001      	movs	r0, #1
}
 800985a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800985c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	4605      	mov	r5, r0
 8009860:	460c      	mov	r4, r1
 8009862:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009864:	e00b      	b.n	800987e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	06db      	lsls	r3, r3, #27
 800986a:	d502      	bpl.n	8009872 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 800986c:	f7ff ff86 	bl	800977c <I2C_IsAcknowledgeFailed.part.0>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009870:	b9d8      	cbnz	r0, 80098aa <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009872:	f7fc fd39 	bl	80062e8 <HAL_GetTick>
 8009876:	1b80      	subs	r0, r0, r6
 8009878:	42a0      	cmp	r0, r4
 800987a:	d809      	bhi.n	8009890 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 800987c:	b144      	cbz	r4, 8009890 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	4632      	mov	r2, r6
 8009882:	4621      	mov	r1, r4
 8009884:	4628      	mov	r0, r5
 8009886:	699f      	ldr	r7, [r3, #24]
 8009888:	06bf      	lsls	r7, r7, #26
 800988a:	d5ec      	bpl.n	8009866 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800988c:	2000      	movs	r0, #0
}
 800988e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009890:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009892:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009894:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8009896:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009898:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800989a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800989e:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098a0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098a4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80098a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80098aa:	2001      	movs	r0, #1
}
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098ae:	bf00      	nop

080098b0 <I2C_WaitOnFlagUntilTimeout>:
{
 80098b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	4680      	mov	r8, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	4616      	mov	r6, r2
 80098ba:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098bc:	f8d8 3000 	ldr.w	r3, [r8]
 80098c0:	e001      	b.n	80098c6 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 80098c2:	1c6a      	adds	r2, r5, #1
 80098c4:	d10a      	bne.n	80098dc <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098c6:	699c      	ldr	r4, [r3, #24]
 80098c8:	ea37 0204 	bics.w	r2, r7, r4
 80098cc:	bf0c      	ite	eq
 80098ce:	2401      	moveq	r4, #1
 80098d0:	2400      	movne	r4, #0
 80098d2:	42b4      	cmp	r4, r6
 80098d4:	d0f5      	beq.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 80098d6:	2000      	movs	r0, #0
}
 80098d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098dc:	f7fc fd04 	bl	80062e8 <HAL_GetTick>
 80098e0:	9b06      	ldr	r3, [sp, #24]
 80098e2:	1ac0      	subs	r0, r0, r3
 80098e4:	42a8      	cmp	r0, r5
 80098e6:	d801      	bhi.n	80098ec <I2C_WaitOnFlagUntilTimeout+0x3c>
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	d1e7      	bne.n	80098bc <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098ec:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80098f0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80098f2:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80098f4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098f6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80098f8:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098fc:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009900:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009904:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
        return HAL_ERROR;
 8009908:	e7e6      	b.n	80098d8 <I2C_WaitOnFlagUntilTimeout+0x28>
 800990a:	bf00      	nop

0800990c <I2C_RequestMemoryRead>:
{
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009910:	4f19      	ldr	r7, [pc, #100]	; (8009978 <I2C_RequestMemoryRead+0x6c>)
{
 8009912:	b082      	sub	sp, #8
 8009914:	461e      	mov	r6, r3
 8009916:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009918:	9700      	str	r7, [sp, #0]
{
 800991a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800991c:	2300      	movs	r3, #0
 800991e:	b2f2      	uxtb	r2, r6
{
 8009920:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009924:	f7ff fec6 	bl	80096b4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009928:	4620      	mov	r0, r4
 800992a:	4642      	mov	r2, r8
 800992c:	4639      	mov	r1, r7
 800992e:	f7ff ff69 	bl	8009804 <I2C_WaitOnTXISFlagUntilTimeout>
 8009932:	b9e0      	cbnz	r0, 800996e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009934:	2e01      	cmp	r6, #1
 8009936:	d110      	bne.n	800995a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800993c:	4620      	mov	r0, r4
 800993e:	2200      	movs	r2, #0
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009940:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009942:	2140      	movs	r1, #64	; 0x40
 8009944:	463b      	mov	r3, r7
 8009946:	f8cd 8000 	str.w	r8, [sp]
 800994a:	f7ff ffb1 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800994e:	3800      	subs	r0, #0
 8009950:	bf18      	it	ne
 8009952:	2001      	movne	r0, #1
}
 8009954:	b002      	add	sp, #8
 8009956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800995a:	6820      	ldr	r0, [r4, #0]
 800995c:	0a2b      	lsrs	r3, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800995e:	4642      	mov	r2, r8
 8009960:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009962:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009964:	4620      	mov	r0, r4
 8009966:	f7ff ff4d 	bl	8009804 <I2C_WaitOnTXISFlagUntilTimeout>
 800996a:	2800      	cmp	r0, #0
 800996c:	d0e4      	beq.n	8009938 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 800996e:	2001      	movs	r0, #1
}
 8009970:	b002      	add	sp, #8
 8009972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009976:	bf00      	nop
 8009978:	80002000 	.word	0x80002000

0800997c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800997c:	2800      	cmp	r0, #0
 800997e:	f000 80c0 	beq.w	8009b02 <HAL_I2C_Init+0x186>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009982:	6802      	ldr	r2, [r0, #0]
 8009984:	4960      	ldr	r1, [pc, #384]	; (8009b08 <HAL_I2C_Init+0x18c>)
{
 8009986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009988:	4b60      	ldr	r3, [pc, #384]	; (8009b0c <HAL_I2C_Init+0x190>)
 800998a:	4604      	mov	r4, r0
 800998c:	4860      	ldr	r0, [pc, #384]	; (8009b10 <HAL_I2C_Init+0x194>)
 800998e:	429a      	cmp	r2, r3
 8009990:	bf18      	it	ne
 8009992:	4282      	cmpne	r2, r0
 8009994:	bf14      	ite	ne
 8009996:	2301      	movne	r3, #1
 8009998:	2300      	moveq	r3, #0
 800999a:	428a      	cmp	r2, r1
 800999c:	bf0c      	ite	eq
 800999e:	2300      	moveq	r3, #0
 80099a0:	f003 0301 	andne.w	r3, r3, #1
 80099a4:	b11b      	cbz	r3, 80099ae <HAL_I2C_Init+0x32>
 80099a6:	4b5b      	ldr	r3, [pc, #364]	; (8009b14 <HAL_I2C_Init+0x198>)
 80099a8:	429a      	cmp	r2, r3
 80099aa:	f040 80a4 	bne.w	8009af6 <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099b4:	f080 8099 	bcs.w	8009aea <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80099b8:	68e3      	ldr	r3, [r4, #12]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d854      	bhi.n	8009a6a <HAL_I2C_Init+0xee>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80099c0:	6923      	ldr	r3, [r4, #16]
 80099c2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80099c6:	d159      	bne.n	8009a7c <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80099c8:	6963      	ldr	r3, [r4, #20]
 80099ca:	2bff      	cmp	r3, #255	; 0xff
 80099cc:	d85e      	bhi.n	8009a8c <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80099ce:	69a3      	ldr	r3, [r4, #24]
 80099d0:	2b07      	cmp	r3, #7
 80099d2:	d863      	bhi.n	8009a9c <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80099d4:	69e3      	ldr	r3, [r4, #28]
 80099d6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 80099da:	d168      	bne.n	8009aae <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80099dc:	6a23      	ldr	r3, [r4, #32]
 80099de:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 80099e2:	d16d      	bne.n	8009ac0 <HAL_I2C_Init+0x144>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099e4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80099e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d072      	beq.n	8009ad6 <HAL_I2C_Init+0x15a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80099f0:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099f2:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099f4:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80099f8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099fc:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 80099fe:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8009a04:	f021 0101 	bic.w	r1, r1, #1
 8009a08:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a0a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a0c:	689a      	ldr	r2, [r3, #8]
 8009a0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a12:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a14:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a16:	d064      	beq.n	8009ae2 <HAL_I2C_Init+0x166>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a18:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a1c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a1e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a20:	d102      	bne.n	8009a28 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009a26:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a28:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a2a:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a2c:	483a      	ldr	r0, [pc, #232]	; (8009b18 <HAL_I2C_Init+0x19c>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009a2e:	2720      	movs	r7, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a30:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a32:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a34:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a38:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a3a:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a3c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a3e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a40:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a44:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a46:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a4a:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a4c:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 8009a4e:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8009a50:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a52:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a5c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009a5e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a62:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a64:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8009a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8009a6a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8009a6e:	482b      	ldr	r0, [pc, #172]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009a70:	f7fa f85a 	bl	8003b28 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8009a7a:	d0a5      	beq.n	80099c8 <HAL_I2C_Init+0x4c>
 8009a7c:	f240 11e1 	movw	r1, #481	; 0x1e1
 8009a80:	4826      	ldr	r0, [pc, #152]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009a82:	f7fa f851 	bl	8003b28 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8009a86:	6963      	ldr	r3, [r4, #20]
 8009a88:	2bff      	cmp	r3, #255	; 0xff
 8009a8a:	d9a0      	bls.n	80099ce <HAL_I2C_Init+0x52>
 8009a8c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8009a90:	4822      	ldr	r0, [pc, #136]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009a92:	f7fa f849 	bl	8003b28 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8009a96:	69a3      	ldr	r3, [r4, #24]
 8009a98:	2b07      	cmp	r3, #7
 8009a9a:	d99b      	bls.n	80099d4 <HAL_I2C_Init+0x58>
 8009a9c:	f240 11e3 	movw	r1, #483	; 0x1e3
 8009aa0:	481e      	ldr	r0, [pc, #120]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009aa2:	f7fa f841 	bl	8003b28 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8009aa6:	69e3      	ldr	r3, [r4, #28]
 8009aa8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 8009aac:	d096      	beq.n	80099dc <HAL_I2C_Init+0x60>
 8009aae:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 8009ab2:	481a      	ldr	r0, [pc, #104]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009ab4:	f7fa f838 	bl	8003b28 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8009ab8:	6a23      	ldr	r3, [r4, #32]
 8009aba:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 8009abe:	d091      	beq.n	80099e4 <HAL_I2C_Init+0x68>
 8009ac0:	f240 11e5 	movw	r1, #485	; 0x1e5
 8009ac4:	4815      	ldr	r0, [pc, #84]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009ac6:	f7fa f82f 	bl	8003b28 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009aca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009ace:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d18c      	bne.n	80099f0 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 8009ad6:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8009ad8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8009adc:	f7fa ff96 	bl	8004a0c <HAL_I2C_MspInit>
 8009ae0:	e786      	b.n	80099f0 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009ae2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ae6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009ae8:	e79e      	b.n	8009a28 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8009aea:	f240 11df 	movw	r1, #479	; 0x1df
 8009aee:	480b      	ldr	r0, [pc, #44]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009af0:	f7fa f81a 	bl	8003b28 <assert_failed>
 8009af4:	e760      	b.n	80099b8 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009af6:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009afa:	4808      	ldr	r0, [pc, #32]	; (8009b1c <HAL_I2C_Init+0x1a0>)
 8009afc:	f7fa f814 	bl	8003b28 <assert_failed>
 8009b00:	e755      	b.n	80099ae <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 8009b02:	2001      	movs	r0, #1
}
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	40005c00 	.word	0x40005c00
 8009b0c:	40005400 	.word	0x40005400
 8009b10:	40005800 	.word	0x40005800
 8009b14:	40006000 	.word	0x40006000
 8009b18:	02008000 	.word	0x02008000
 8009b1c:	08027ce4 	.word	0x08027ce4

08009b20 <HAL_I2C_Master_Transmit>:
{
 8009b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b24:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009b2a:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b2c:	2b20      	cmp	r3, #32
{
 8009b2e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b30:	f040 808a 	bne.w	8009c48 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 8009b34:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009b38:	4604      	mov	r4, r0
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	f000 8084 	beq.w	8009c48 <HAL_I2C_Master_Transmit+0x128>
 8009b40:	f04f 0a01 	mov.w	sl, #1
 8009b44:	4688      	mov	r8, r1
 8009b46:	4691      	mov	r9, r2
 8009b48:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009b4c:	f7fc fbcc 	bl	80062e8 <HAL_GetTick>
 8009b50:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b52:	4652      	mov	r2, sl
 8009b54:	2319      	movs	r3, #25
 8009b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	9600      	str	r6, [sp, #0]
 8009b5e:	f7ff fea7 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d16c      	bne.n	8009c40 <HAL_I2C_Master_Transmit+0x120>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b66:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b68:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 8009b6a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b6e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009b72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b76:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009b78:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009b7c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	2bff      	cmp	r3, #255	; 0xff
 8009b82:	d865      	bhi.n	8009c50 <HAL_I2C_Master_Transmit+0x130>
      hi2c->XferSize = hi2c->XferCount;
 8009b84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b8a:	4d3c      	ldr	r5, [pc, #240]	; (8009c7c <HAL_I2C_Master_Transmit+0x15c>)
 8009b8c:	4641      	mov	r1, r8
      hi2c->XferSize = hi2c->XferCount;
 8009b8e:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009b90:	4620      	mov	r0, r4
 8009b92:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009b94:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8009b96:	b2d2      	uxtb	r2, r2
 8009b98:	f7ff fd8c 	bl	80096b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009b9c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b9e:	4632      	mov	r2, r6
 8009ba0:	4639      	mov	r1, r7
 8009ba2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d039      	beq.n	8009c1e <HAL_I2C_Master_Transmit+0xfe>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009baa:	f7ff fe2b 	bl	8009804 <I2C_WaitOnTXISFlagUntilTimeout>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d146      	bne.n	8009c40 <HAL_I2C_Master_Transmit+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009bb4:	6821      	ldr	r1, [r4, #0]
 8009bb6:	f812 5b01 	ldrb.w	r5, [r2], #1
      hi2c->XferSize--;
 8009bba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009bbc:	628d      	str	r5, [r1, #40]	; 0x28
      hi2c->XferCount--;
 8009bbe:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009bc0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8009bc2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009bc4:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 8009bc6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009bc8:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 8009bca:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009bcc:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009bce:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009bd0:	b292      	uxth	r2, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1e2      	bne.n	8009b9c <HAL_I2C_Master_Transmit+0x7c>
 8009bd6:	2a00      	cmp	r2, #0
 8009bd8:	d0e0      	beq.n	8009b9c <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bda:	4602      	mov	r2, r0
 8009bdc:	463b      	mov	r3, r7
 8009bde:	2180      	movs	r1, #128	; 0x80
 8009be0:	4620      	mov	r0, r4
 8009be2:	9600      	str	r6, [sp, #0]
 8009be4:	f7ff fe64 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009be8:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bec:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4672      	mov	r2, lr
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009bf8:	bb15      	cbnz	r5, 8009c40 <HAL_I2C_Master_Transmit+0x120>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009bfa:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
 8009bfe:	fa1f fc8c 	uxth.w	ip, ip
 8009c02:	45f4      	cmp	ip, lr
 8009c04:	d92f      	bls.n	8009c66 <HAL_I2C_Master_Transmit+0x146>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c06:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c0a:	9500      	str	r5, [sp, #0]
 8009c0c:	f7ff fd52 	bl	80096b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009c10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c12:	4632      	mov	r2, r6
 8009c14:	4639      	mov	r1, r7
    while (hi2c->XferCount > 0U)
 8009c16:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c18:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1c5      	bne.n	8009baa <HAL_I2C_Master_Transmit+0x8a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c1e:	f7ff fe1d 	bl	800985c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009c22:	b968      	cbnz	r0, 8009c40 <HAL_I2C_Master_Transmit+0x120>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009c28:	4d15      	ldr	r5, [pc, #84]	; (8009c80 <HAL_I2C_Master_Transmit+0x160>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009c2a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	402a      	ands	r2, r5
 8009c30:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009c32:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009c36:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009c3a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009c3e:	e000      	b.n	8009c42 <HAL_I2C_Master_Transmit+0x122>
      return HAL_ERROR;
 8009c40:	2001      	movs	r0, #1
}
 8009c42:	b002      	add	sp, #8
 8009c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8009c48:	2002      	movs	r0, #2
}
 8009c4a:	b002      	add	sp, #8
 8009c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c50:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c52:	480a      	ldr	r0, [pc, #40]	; (8009c7c <HAL_I2C_Master_Transmit+0x15c>)
 8009c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c58:	4641      	mov	r1, r8
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c5a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009c5c:	9000      	str	r0, [sp, #0]
 8009c5e:	4620      	mov	r0, r4
 8009c60:	f7ff fd28 	bl	80096b4 <I2C_TransferConfig>
 8009c64:	e79a      	b.n	8009b9c <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 8009c66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c6c:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009c6e:	b292      	uxth	r2, r2
 8009c70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	f7ff fd1e 	bl	80096b4 <I2C_TransferConfig>
 8009c78:	e790      	b.n	8009b9c <HAL_I2C_Master_Transmit+0x7c>
 8009c7a:	bf00      	nop
 8009c7c:	80002000 	.word	0x80002000
 8009c80:	fe00e800 	.word	0xfe00e800

08009c84 <HAL_I2C_Mem_Read>:
{
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	461d      	mov	r5, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8009c8a:	3b01      	subs	r3, #1
{
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8009c90:	2b01      	cmp	r3, #1
{
 8009c92:	460e      	mov	r6, r1
 8009c94:	4617      	mov	r7, r2
 8009c96:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8009c9a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8009c9e:	d904      	bls.n	8009caa <HAL_I2C_Mem_Read+0x26>
 8009ca0:	f640 1174 	movw	r1, #2420	; 0x974
 8009ca4:	4863      	ldr	r0, [pc, #396]	; (8009e34 <HAL_I2C_Mem_Read+0x1b0>)
 8009ca6:	f7f9 ff3f 	bl	8003b28 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009caa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	d125      	bne.n	8009cfe <HAL_I2C_Mem_Read+0x7a>
    if ((pData == NULL) || (Size == 0U))
 8009cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb4:	b1e3      	cbz	r3, 8009cf0 <HAL_I2C_Mem_Read+0x6c>
 8009cb6:	f1bb 0f00 	cmp.w	fp, #0
 8009cba:	d019      	beq.n	8009cf0 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 8009cbc:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d01c      	beq.n	8009cfe <HAL_I2C_Mem_Read+0x7a>
 8009cc4:	f04f 0a01 	mov.w	sl, #1
 8009cc8:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009ccc:	f7fc fb0c 	bl	80062e8 <HAL_GetTick>
 8009cd0:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	2319      	movs	r3, #25
 8009cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f8cd 8000 	str.w	r8, [sp]
 8009ce0:	f7ff fde6 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 8009ce4:	9003      	str	r0, [sp, #12]
 8009ce6:	b170      	cbz	r0, 8009d06 <HAL_I2C_Mem_Read+0x82>
      return HAL_ERROR;
 8009ce8:	2001      	movs	r0, #1
}
 8009cea:	b005      	add	sp, #20
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 8009cf4:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009cf6:	6463      	str	r3, [r4, #68]	; 0x44
}
 8009cf8:	b005      	add	sp, #20
 8009cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8009cfe:	2002      	movs	r0, #2
}
 8009d00:	b005      	add	sp, #20
 8009d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
 8009d06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d08:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d0a:	2040      	movs	r0, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d0c:	463a      	mov	r2, r7
    hi2c->pBuffPtr  = pData;
 8009d0e:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d10:	462b      	mov	r3, r5
    hi2c->XferISR   = NULL;
 8009d12:	9d03      	ldr	r5, [sp, #12]
 8009d14:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d16:	e9cd 9800 	strd	r9, r8, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d1a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d1e:	4631      	mov	r1, r6
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d20:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d24:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d26:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8009d28:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009d2c:	f7ff fdee 	bl	800990c <I2C_RequestMemoryRead>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	d157      	bne.n	8009de4 <HAL_I2C_Mem_Read+0x160>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	2bff      	cmp	r3, #255	; 0xff
 8009d3a:	d958      	bls.n	8009dee <HAL_I2C_Mem_Read+0x16a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d3c:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009d3e:	483e      	ldr	r0, [pc, #248]	; (8009e38 <HAL_I2C_Mem_Read+0x1b4>)
 8009d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d44:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d46:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8009d48:	9000      	str	r0, [sp, #0]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff fcb2 	bl	80096b4 <I2C_TransferConfig>
 8009d50:	e003      	b.n	8009d5a <HAL_I2C_Mem_Read+0xd6>
    while (hi2c->XferCount > 0U);
 8009d52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d056      	beq.n	8009e08 <HAL_I2C_Mem_Read+0x184>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009d5a:	464b      	mov	r3, r9
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2104      	movs	r1, #4
 8009d60:	4620      	mov	r0, r4
 8009d62:	f8cd 8000 	str.w	r8, [sp]
 8009d66:	f7ff fda3 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d1bc      	bne.n	8009ce8 <HAL_I2C_Mem_Read+0x64>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009d6e:	6822      	ldr	r2, [r4, #0]
 8009d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d74:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8009d76:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009d78:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009d7a:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 8009d7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009d7e:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 8009d80:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 8009d82:	3501      	adds	r5, #1
      hi2c->XferSize--;
 8009d84:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009d86:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009d8a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d8c:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8009d8e:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d1de      	bne.n	8009d52 <HAL_I2C_Mem_Read+0xce>
 8009d94:	2a00      	cmp	r2, #0
 8009d96:	d0dc      	beq.n	8009d52 <HAL_I2C_Mem_Read+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009d98:	4602      	mov	r2, r0
 8009d9a:	464b      	mov	r3, r9
 8009d9c:	2180      	movs	r1, #128	; 0x80
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f8cd 8000 	str.w	r8, [sp]
 8009da4:	f7ff fd84 	bl	80098b0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009da8:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009dac:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009db2:	4631      	mov	r1, r6
 8009db4:	4620      	mov	r0, r4
 8009db6:	4662      	mov	r2, ip
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009db8:	2d00      	cmp	r5, #0
 8009dba:	d195      	bne.n	8009ce8 <HAL_I2C_Mem_Read+0x64>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009dbc:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8009dbe:	b2bf      	uxth	r7, r7
 8009dc0:	4567      	cmp	r7, ip
 8009dc2:	d905      	bls.n	8009dd0 <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009dc4:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009dc8:	9500      	str	r5, [sp, #0]
 8009dca:	f7ff fc73 	bl	80096b4 <I2C_TransferConfig>
 8009dce:	e7c0      	b.n	8009d52 <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = hi2c->XferCount;
 8009dd0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009dd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009dd6:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8009dd8:	b292      	uxth	r2, r2
 8009dda:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	f7ff fc69 	bl	80096b4 <I2C_TransferConfig>
 8009de2:	e7b6      	b.n	8009d52 <HAL_I2C_Mem_Read+0xce>
      __HAL_UNLOCK(hi2c);
 8009de4:	9b03      	ldr	r3, [sp, #12]
      return HAL_ERROR;
 8009de6:	4650      	mov	r0, sl
      __HAL_UNLOCK(hi2c);
 8009de8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009dec:	e77d      	b.n	8009cea <HAL_I2C_Mem_Read+0x66>
      hi2c->XferSize = hi2c->XferCount;
 8009dee:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009df0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009df4:	4d10      	ldr	r5, [pc, #64]	; (8009e38 <HAL_I2C_Mem_Read+0x1b4>)
 8009df6:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 8009df8:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8009dfe:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8009e00:	b2d2      	uxtb	r2, r2
 8009e02:	f7ff fc57 	bl	80096b4 <I2C_TransferConfig>
 8009e06:	e7a8      	b.n	8009d5a <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e08:	4642      	mov	r2, r8
 8009e0a:	4649      	mov	r1, r9
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f7ff fd25 	bl	800985c <I2C_WaitOnSTOPFlagUntilTimeout>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	f47f af68 	bne.w	8009ce8 <HAL_I2C_Mem_Read+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 8009e1c:	4d07      	ldr	r5, [pc, #28]	; (8009e3c <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009e1e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009e20:	685a      	ldr	r2, [r3, #4]
 8009e22:	402a      	ands	r2, r5
 8009e24:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009e26:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009e2a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009e2e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8009e32:	e75a      	b.n	8009cea <HAL_I2C_Mem_Read+0x66>
 8009e34:	08027ce4 	.word	0x08027ce4
 8009e38:	80002400 	.word	0x80002400
 8009e3c:	fe00e800 	.word	0xfe00e800

08009e40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e42:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009e44:	4b22      	ldr	r3, [pc, #136]	; (8009ed0 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 8009e46:	4e23      	ldr	r6, [pc, #140]	; (8009ed4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 8009e48:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	4822      	ldr	r0, [pc, #136]	; (8009ed8 <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	bf18      	it	ne
 8009e52:	42b2      	cmpne	r2, r6
 8009e54:	bf14      	ite	ne
 8009e56:	2301      	movne	r3, #1
 8009e58:	2300      	moveq	r3, #0
 8009e5a:	4282      	cmp	r2, r0
 8009e5c:	bf0c      	ite	eq
 8009e5e:	2300      	moveq	r3, #0
 8009e60:	f003 0301 	andne.w	r3, r3, #1
 8009e64:	b113      	cbz	r3, 8009e6c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8009e66:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d12c      	bne.n	8009ec6 <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8009e6c:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 8009e70:	d124      	bne.n	8009ebc <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e72:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009e76:	2b20      	cmp	r3, #32
 8009e78:	b2de      	uxtb	r6, r3
 8009e7a:	d11d      	bne.n	8009eb8 <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e7c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d019      	beq.n	8009eb8 <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e84:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e86:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e88:	2700      	movs	r7, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e8a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009e8e:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 8009e90:	4638      	mov	r0, r7
    __HAL_I2C_DISABLE(hi2c);
 8009e92:	f022 0201 	bic.w	r2, r2, #1
 8009e96:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e9e:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ea0:	6819      	ldr	r1, [r3, #0]
 8009ea2:	430d      	orrs	r5, r1
 8009ea4:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	f042 0201 	orr.w	r2, r2, #1
 8009eac:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009eae:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009eb2:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009eb8:	2002      	movs	r0, #2
}
 8009eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8009ebc:	2160      	movs	r1, #96	; 0x60
 8009ebe:	4808      	ldr	r0, [pc, #32]	; (8009ee0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8009ec0:	f7f9 fe32 	bl	8003b28 <assert_failed>
 8009ec4:	e7d5      	b.n	8009e72 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009ec6:	215f      	movs	r1, #95	; 0x5f
 8009ec8:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 8009eca:	f7f9 fe2d 	bl	8003b28 <assert_failed>
 8009ece:	e7cd      	b.n	8009e6c <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 8009ed0:	40005400 	.word	0x40005400
 8009ed4:	40005800 	.word	0x40005800
 8009ed8:	40005c00 	.word	0x40005c00
 8009edc:	40006000 	.word	0x40006000
 8009ee0:	08027d1c 	.word	0x08027d1c

08009ee4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009ee8:	4b21      	ldr	r3, [pc, #132]	; (8009f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 8009eea:	4e22      	ldr	r6, [pc, #136]	; (8009f74 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 8009eec:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	4821      	ldr	r0, [pc, #132]	; (8009f78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	bf18      	it	ne
 8009ef6:	42b2      	cmpne	r2, r6
 8009ef8:	bf14      	ite	ne
 8009efa:	2301      	movne	r3, #1
 8009efc:	2300      	moveq	r3, #0
 8009efe:	4282      	cmp	r2, r0
 8009f00:	bf0c      	ite	eq
 8009f02:	2300      	moveq	r3, #0
 8009f04:	f003 0301 	andne.w	r3, r3, #1
 8009f08:	b113      	cbz	r3, 8009f10 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8009f0a:	4b1c      	ldr	r3, [pc, #112]	; (8009f7c <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d12a      	bne.n	8009f66 <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8009f10:	2d0f      	cmp	r5, #15
 8009f12:	d823      	bhi.n	8009f5c <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009f18:	2b20      	cmp	r3, #32
 8009f1a:	b2df      	uxtb	r7, r3
 8009f1c:	d11c      	bne.n	8009f58 <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f1e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d018      	beq.n	8009f58 <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f26:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f28:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f2a:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f2c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009f30:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 8009f32:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 8009f34:	f022 0201 	bic.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8009f3a:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8009f3c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8009f40:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8009f44:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	f042 0201 	orr.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009f4e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009f52:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8009f58:	2002      	movs	r0, #2
}
 8009f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8009f5c:	218e      	movs	r1, #142	; 0x8e
 8009f5e:	4808      	ldr	r0, [pc, #32]	; (8009f80 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8009f60:	f7f9 fde2 	bl	8003b28 <assert_failed>
 8009f64:	e7d6      	b.n	8009f14 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8009f66:	218d      	movs	r1, #141	; 0x8d
 8009f68:	4805      	ldr	r0, [pc, #20]	; (8009f80 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 8009f6a:	f7f9 fddd 	bl	8003b28 <assert_failed>
 8009f6e:	e7cf      	b.n	8009f10 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 8009f70:	40005400 	.word	0x40005400
 8009f74:	40005800 	.word	0x40005800
 8009f78:	40005c00 	.word	0x40005c00
 8009f7c:	40006000 	.word	0x40006000
 8009f80:	08027d1c 	.word	0x08027d1c

08009f84 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009f84:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009f86:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8009f8a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	601a      	str	r2, [r3, #0]
}
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop

08009f94 <HAL_MDIOS_Init>:
HAL_StatusTypeDef HAL_MDIOS_Init(MDIOS_HandleTypeDef *hmdios)
{
  uint32_t tmpcr = 0;

  /* Check the MDIOS handle allocation */
  if(hmdios == NULL)
 8009f94:	2800      	cmp	r0, #0
 8009f96:	d03c      	beq.n	800a012 <HAL_MDIOS_Init+0x7e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8009f98:	6802      	ldr	r2, [r0, #0]
{
 8009f9a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_MDIOS_ALL_INSTANCE(hmdios->Instance));
 8009f9c:	4b1e      	ldr	r3, [pc, #120]	; (800a018 <HAL_MDIOS_Init+0x84>)
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d003      	beq.n	8009fac <HAL_MDIOS_Init+0x18>
 8009fa4:	21c7      	movs	r1, #199	; 0xc7
 8009fa6:	481d      	ldr	r0, [pc, #116]	; (800a01c <HAL_MDIOS_Init+0x88>)
 8009fa8:	f7f9 fdbe 	bl	8003b28 <assert_failed>
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 8009fac:	6863      	ldr	r3, [r4, #4]
 8009fae:	2b1f      	cmp	r3, #31
 8009fb0:	d82a      	bhi.n	800a008 <HAL_MDIOS_Init+0x74>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8009fb2:	68a3      	ldr	r3, [r4, #8]
 8009fb4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009fb8:	d11d      	bne.n	8009ff6 <HAL_MDIOS_Init+0x62>
  
  /* Process Locked */
  __HAL_LOCK(hmdios);
 8009fba:	7b63      	ldrb	r3, [r4, #13]
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d021      	beq.n	800a004 <HAL_MDIOS_Init+0x70>
 8009fc0:	2201      	movs	r2, #1
  
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8009fc2:	7b23      	ldrb	r3, [r4, #12]
  __HAL_LOCK(hmdios);
 8009fc4:	7362      	strb	r2, [r4, #13]
  if(hmdios->State == HAL_MDIOS_STATE_RESET)
 8009fc6:	b193      	cbz	r3, 8009fee <HAL_MDIOS_Init+0x5a>
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_BUSY;
  
  /* Get the MDIOS CR value */
  tmpcr = hmdios->Instance->CR;
 8009fc8:	6821      	ldr	r1, [r4, #0]
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8009fca:	2202      	movs	r2, #2
  
  /* Clear PORT_ADDRESS, DPC and EN bits */
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8009fcc:	4b14      	ldr	r3, [pc, #80]	; (800a020 <HAL_MDIOS_Init+0x8c>)
  
  /* Write the MDIOS CR */
  hmdios->Instance->CR = tmpcr;
  
  /* Change the MDIOS state */
  hmdios->State = HAL_MDIOS_STATE_READY;
 8009fce:	2501      	movs	r5, #1
  hmdios->State = HAL_MDIOS_STATE_BUSY;
 8009fd0:	7322      	strb	r2, [r4, #12]
  
  /* Release Lock */
  __HAL_UNLOCK(hmdios);
 8009fd2:	2200      	movs	r2, #0
  tmpcr = hmdios->Instance->CR;
 8009fd4:	6808      	ldr	r0, [r1, #0]
  tmpcr &= ((uint32_t)~(MDIOS_CR_EN | MDIOS_CR_DPC | MDIOS_CR_PORT_ADDRESS));
 8009fd6:	4003      	ands	r3, r0
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8009fd8:	68a0      	ldr	r0, [r4, #8]
 8009fda:	4303      	orrs	r3, r0
 8009fdc:	6860      	ldr	r0, [r4, #4]
 8009fde:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  
  /* Return function status */
  return HAL_OK;
 8009fe2:	4610      	mov	r0, r2
  tmpcr |=  (uint32_t)(((hmdios->Init.PortAddress) << MDIOS_PORT_ADDRESS_SHIFT)    |\
 8009fe4:	432b      	orrs	r3, r5
  hmdios->Instance->CR = tmpcr;
 8009fe6:	600b      	str	r3, [r1, #0]
  hmdios->State = HAL_MDIOS_STATE_READY;
 8009fe8:	7325      	strb	r5, [r4, #12]
  __HAL_UNLOCK(hmdios);
 8009fea:	7362      	strb	r2, [r4, #13]

}
 8009fec:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_MspInit(hmdios);
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7fa fd96 	bl	8004b20 <HAL_MDIOS_MspInit>
 8009ff4:	e7e8      	b.n	8009fc8 <HAL_MDIOS_Init+0x34>
  assert_param(IS_MDIOS_PREAMBLECHECK(hmdios->Init.PreambleCheck));
 8009ff6:	21c9      	movs	r1, #201	; 0xc9
 8009ff8:	4808      	ldr	r0, [pc, #32]	; (800a01c <HAL_MDIOS_Init+0x88>)
 8009ffa:	f7f9 fd95 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hmdios);
 8009ffe:	7b63      	ldrb	r3, [r4, #13]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d1dd      	bne.n	8009fc0 <HAL_MDIOS_Init+0x2c>
 800a004:	2002      	movs	r0, #2
}
 800a006:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_MDIOS_PORTADDRESS(hmdios->Init.PortAddress));
 800a008:	21c8      	movs	r1, #200	; 0xc8
 800a00a:	4804      	ldr	r0, [pc, #16]	; (800a01c <HAL_MDIOS_Init+0x88>)
 800a00c:	f7f9 fd8c 	bl	8003b28 <assert_failed>
 800a010:	e7cf      	b.n	8009fb2 <HAL_MDIOS_Init+0x1e>
    return HAL_ERROR;
 800a012:	2001      	movs	r0, #1
}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	40017800 	.word	0x40017800
 800a01c:	08027d58 	.word	0x08027d58
 800a020:	ffffe07e 	.word	0xffffe07e

0800a024 <HAL_MDIOS_WriteCpltCallback>:
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop

0800a028 <HAL_MDIOS_ReadCpltCallback>:
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop

0800a02c <HAL_MDIOS_ErrorCallback>:
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop

0800a030 <HAL_MDIOS_WakeUpCallback>:
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop

0800a034 <HAL_MDIOS_IRQHandler>:
  * @brief This function handles MDIOS interrupt request.
  * @param hmdios MDIOS handle
  * @retval None
  */
void HAL_MDIOS_IRQHandler(MDIOS_HandleTypeDef *hmdios)
{
 800a034:	b538      	push	{r3, r4, r5, lr}
  /* Write Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 800a036:	6803      	ldr	r3, [r0, #0]
{
 800a038:	4604      	mov	r4, r0
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_WRITE) != RESET)
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	0795      	lsls	r5, r2, #30
 800a03e:	d501      	bpl.n	800a044 <HAL_MDIOS_IRQHandler+0x10>
  return hmdios->Instance->WRFR;   
 800a040:	685a      	ldr	r2, [r3, #4]
  {
    /* Write register flag */
    if(HAL_MDIOS_GetWrittenRegAddress(hmdios) != RESET)
 800a042:	bb22      	cbnz	r2, 800a08e <HAL_MDIOS_IRQHandler+0x5a>
      HAL_MDIOS_ClearWriteRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Read Register Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_READ) != RESET)
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	0750      	lsls	r0, r2, #29
 800a048:	d502      	bpl.n	800a050 <HAL_MDIOS_IRQHandler+0x1c>
  return hmdios->Instance->RDFR;   
 800a04a:	68da      	ldr	r2, [r3, #12]
  {
    /* Read register flag */
    if(HAL_MDIOS_GetReadRegAddress(hmdios) != RESET)
 800a04c:	2a00      	cmp	r2, #0
 800a04e:	d130      	bne.n	800a0b2 <HAL_MDIOS_IRQHandler+0x7e>
      HAL_MDIOS_ClearReadRegAddress(hmdios, MDIOS_ALL_REG_FLAG);
    }
  }
  
  /* Error Interrupt enabled ? */
  if(__HAL_MDIOS_GET_IT_SOURCE(hmdios, MDIOS_IT_ERROR) != RESET)
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	0711      	lsls	r1, r2, #28
 800a054:	d502      	bpl.n	800a05c <HAL_MDIOS_IRQHandler+0x28>
  {
    /* All Errors Flag */
    if(__HAL_MDIOS_GET_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG) !=RESET)
 800a056:	695b      	ldr	r3, [r3, #20]
 800a058:	075a      	lsls	r2, r3, #29
 800a05a:	d10b      	bne.n	800a074 <HAL_MDIOS_IRQHandler+0x40>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
    }
  }
   
  /* check MDIOS WAKEUP exti flag */
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800a05c:	4d1e      	ldr	r5, [pc, #120]	; (800a0d8 <HAL_MDIOS_IRQHandler+0xa4>)
 800a05e:	696b      	ldr	r3, [r5, #20]
 800a060:	01db      	lsls	r3, r3, #7
 800a062:	d400      	bmi.n	800a066 <HAL_MDIOS_IRQHandler+0x32>
#endif /* USE_HAL_MDIOS_REGISTER_CALLBACKS */

    /* Clear MDIOS WAKEUP Exti pending bit */
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
  }
}
 800a064:	bd38      	pop	{r3, r4, r5, pc}
    HAL_MDIOS_WakeUpCallback(hmdios);
 800a066:	4620      	mov	r0, r4
 800a068:	f7ff ffe2 	bl	800a030 <HAL_MDIOS_WakeUpCallback>
    __HAL_MDIOS_WAKEUP_EXTI_CLEAR_FLAG();
 800a06c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a070:	616b      	str	r3, [r5, #20]
}
 800a072:	bd38      	pop	{r3, r4, r5, pc}
      HAL_MDIOS_ErrorCallback(hmdios);
 800a074:	4620      	mov	r0, r4
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800a076:	4d18      	ldr	r5, [pc, #96]	; (800a0d8 <HAL_MDIOS_IRQHandler+0xa4>)
      HAL_MDIOS_ErrorCallback(hmdios);
 800a078:	f7ff ffd8 	bl	800a02c <HAL_MDIOS_ErrorCallback>
      __HAL_MDIOS_CLEAR_ERROR_FLAG(hmdios, MDIOS_ALL_ERRORS_FLAG);
 800a07c:	6822      	ldr	r2, [r4, #0]
 800a07e:	6993      	ldr	r3, [r2, #24]
 800a080:	f043 0307 	orr.w	r3, r3, #7
 800a084:	6193      	str	r3, [r2, #24]
  if(__HAL_MDIOS_WAKEUP_EXTI_GET_FLAG() != RESET)
 800a086:	696b      	ldr	r3, [r5, #20]
 800a088:	01db      	lsls	r3, r3, #7
 800a08a:	d5eb      	bpl.n	800a064 <HAL_MDIOS_IRQHandler+0x30>
 800a08c:	e7eb      	b.n	800a066 <HAL_MDIOS_IRQHandler+0x32>
      HAL_MDIOS_WriteCpltCallback(hmdios);
 800a08e:	f7ff ffc9 	bl	800a024 <HAL_MDIOS_WriteCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 800a092:	f44f 7121 	mov.w	r1, #644	; 0x284
 800a096:	4811      	ldr	r0, [pc, #68]	; (800a0dc <HAL_MDIOS_IRQHandler+0xa8>)
 800a098:	f7f9 fd46 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hmdios);
 800a09c:	7b63      	ldrb	r3, [r4, #13]
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	d0cf      	beq.n	800a044 <HAL_MDIOS_IRQHandler+0x10>
  hmdios->Instance->CWRFR |= (RegNum);
 800a0a4:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 800a0a8:	2200      	movs	r2, #0
  hmdios->Instance->CWRFR |= (RegNum);
 800a0aa:	6898      	ldr	r0, [r3, #8]
 800a0ac:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(hmdios);
 800a0ae:	7362      	strb	r2, [r4, #13]
  return HAL_OK;  
 800a0b0:	e7c8      	b.n	800a044 <HAL_MDIOS_IRQHandler+0x10>
      HAL_MDIOS_ReadCpltCallback(hmdios);
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f7ff ffb8 	bl	800a028 <HAL_MDIOS_ReadCpltCallback>
  assert_param(IS_MDIOS_REGISTER(RegNum));
 800a0b8:	f240 219b 	movw	r1, #667	; 0x29b
 800a0bc:	4807      	ldr	r0, [pc, #28]	; (800a0dc <HAL_MDIOS_IRQHandler+0xa8>)
 800a0be:	f7f9 fd33 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hmdios);
 800a0c2:	7b63      	ldrb	r3, [r4, #13]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	d0c2      	beq.n	800a050 <HAL_MDIOS_IRQHandler+0x1c>
  hmdios->Instance->CRDFR |= (RegNum); 
 800a0ca:	f04f 31ff 	mov.w	r1, #4294967295
  __HAL_UNLOCK(hmdios);
 800a0ce:	2200      	movs	r2, #0
  hmdios->Instance->CRDFR |= (RegNum); 
 800a0d0:	6918      	ldr	r0, [r3, #16]
 800a0d2:	6119      	str	r1, [r3, #16]
  __HAL_UNLOCK(hmdios);
 800a0d4:	7362      	strb	r2, [r4, #13]
  return HAL_OK;    
 800a0d6:	e7bb      	b.n	800a050 <HAL_MDIOS_IRQHandler+0x1c>
 800a0d8:	40013c00 	.word	0x40013c00
 800a0dc:	08027d58 	.word	0x08027d58

0800a0e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0e2:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	f000 809d 	beq.w	800a224 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a0ea:	6804      	ldr	r4, [r0, #0]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800a0f2:	d003      	beq.n	800a0fc <HAL_PCD_Init+0x1c>
 800a0f4:	4b4f      	ldr	r3, [pc, #316]	; (800a234 <HAL_PCD_Init+0x154>)
 800a0f6:	429c      	cmp	r4, r3
 800a0f8:	f040 8081 	bne.w	800a1fe <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0fc:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800a100:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 8086 	beq.w	800a216 <HAL_PCD_Init+0x136>
 800a10a:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a10c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a10e:	462e      	mov	r6, r5
 800a110:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800a112:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a116:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a118:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a11a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800a11e:	bf08      	it	eq
 800a120:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800a122:	f005 ffb1 	bl	8010088 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a126:	f856 eb10 	ldr.w	lr, [r6], #16
 800a12a:	46b4      	mov	ip, r6
 800a12c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a130:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a132:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a138:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800a13c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a140:	4670      	mov	r0, lr
 800a142:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a146:	f005 fedd 	bl	800ff04 <USB_CoreInit>
 800a14a:	4604      	mov	r4, r0
 800a14c:	b130      	cbz	r0, 800a15c <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800a14e:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a150:	2302      	movs	r3, #2
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800a152:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a154:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800a158:	b00b      	add	sp, #44	; 0x2c
 800a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a15c:	4601      	mov	r1, r0
 800a15e:	6828      	ldr	r0, [r5, #0]
 800a160:	f005 ff9a 	bl	8010098 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a164:	6868      	ldr	r0, [r5, #4]
 800a166:	b358      	cbz	r0, 800a1c0 <HAL_PCD_Init+0xe0>
 800a168:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a16a:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a16e:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800a170:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a174:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800a178:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800a17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a180:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a184:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800a188:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a18c:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a18e:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800a192:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a194:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a198:	d3ea      	bcc.n	800a170 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800a19a:	2200      	movs	r2, #0
 800a19c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1a0:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800a1a2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800a1a6:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1aa:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800a1ac:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b0:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1b2:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a1b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a1ba:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1be:	d3ed      	bcc.n	800a19c <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a1c0:	466c      	mov	r4, sp
 800a1c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a1c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1ca:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a1ce:	e884 0003 	stmia.w	r4, {r0, r1}
 800a1d2:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800a1d6:	6828      	ldr	r0, [r5, #0]
 800a1d8:	f005 ff76 	bl	80100c8 <USB_DevInit>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d1b5      	bne.n	800a14e <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800a1e2:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800a1e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800a1e6:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800a1ea:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800a1ec:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800a1f0:	d01c      	beq.n	800a22c <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800a1f2:	6828      	ldr	r0, [r5, #0]
 800a1f4:	f006 fb3e 	bl	8010874 <USB_DevDisconnect>
}
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	b00b      	add	sp, #44	; 0x2c
 800a1fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800a1fe:	2187      	movs	r1, #135	; 0x87
 800a200:	480d      	ldr	r0, [pc, #52]	; (800a238 <HAL_PCD_Init+0x158>)
 800a202:	f7f9 fc91 	bl	8003b28 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a206:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800a20a:	682c      	ldr	r4, [r5, #0]
 800a20c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a210:	2b00      	cmp	r3, #0
 800a212:	f47f af7a 	bne.w	800a10a <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800a216:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800a218:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800a21c:	f016 f846 	bl	80202ac <HAL_PCD_MspInit>
 800a220:	6828      	ldr	r0, [r5, #0]
 800a222:	e773      	b.n	800a10c <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800a224:	2401      	movs	r4, #1
}
 800a226:	4620      	mov	r0, r4
 800a228:	b00b      	add	sp, #44	; 0x2c
 800a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a22c:	4628      	mov	r0, r5
 800a22e:	f000 fcc9 	bl	800abc4 <HAL_PCDEx_ActivateLPM>
 800a232:	e7de      	b.n	800a1f2 <HAL_PCD_Init+0x112>
 800a234:	40040000 	.word	0x40040000
 800a238:	08027d94 	.word	0x08027d94

0800a23c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800a23c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800a240:	2b01      	cmp	r3, #1
 800a242:	d00e      	beq.n	800a262 <HAL_PCD_Start+0x26>
 800a244:	2301      	movs	r3, #1
{
 800a246:	b510      	push	{r4, lr}
 800a248:	4604      	mov	r4, r0
  (void)USB_DevConnect(hpcd->Instance);
 800a24a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800a24c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800a250:	f006 fb02 	bl	8010858 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800a254:	6820      	ldr	r0, [r4, #0]
 800a256:	f005 ff0f 	bl	8010078 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800a25a:	2000      	movs	r0, #0
 800a25c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 800a260:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a262:	2002      	movs	r0, #2
}
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop

0800a268 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a26c:	6806      	ldr	r6, [r0, #0]
{
 800a26e:	b087      	sub	sp, #28
 800a270:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a272:	4630      	mov	r0, r6
 800a274:	f006 fb3c 	bl	80108f0 <USB_GetMode>
 800a278:	b110      	cbz	r0, 800a280 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800a27a:	b007      	add	sp, #28
 800a27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a280:	4683      	mov	fp, r0
 800a282:	6820      	ldr	r0, [r4, #0]
 800a284:	f006 fb04 	bl	8010890 <USB_ReadInterrupts>
 800a288:	2800      	cmp	r0, #0
 800a28a:	d0f6      	beq.n	800a27a <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a28c:	6820      	ldr	r0, [r4, #0]
 800a28e:	f006 faff 	bl	8010890 <USB_ReadInterrupts>
 800a292:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a296:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a298:	d003      	beq.n	800a2a2 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a29a:	6943      	ldr	r3, [r0, #20]
 800a29c:	f003 0302 	and.w	r3, r3, #2
 800a2a0:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a2a2:	f006 faf5 	bl	8010890 <USB_ReadInterrupts>
 800a2a6:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2aa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a2ac:	d012      	beq.n	800a2d4 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2ae:	6983      	ldr	r3, [r0, #24]
 800a2b0:	f023 0310 	bic.w	r3, r3, #16
 800a2b4:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800a2b6:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a2b8:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800a2bc:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	f000 826c 	beq.w	800a79e <HAL_PCD_IRQHandler+0x536>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800a2c6:	2b06      	cmp	r3, #6
 800a2c8:	f000 81cb 	beq.w	800a662 <HAL_PCD_IRQHandler+0x3fa>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a2cc:	6983      	ldr	r3, [r0, #24]
 800a2ce:	f043 0310 	orr.w	r3, r3, #16
 800a2d2:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a2d4:	f006 fadc 	bl	8010890 <USB_ReadInterrupts>
 800a2d8:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a2dc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a2de:	f040 80df 	bne.w	800a4a0 <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a2e2:	f006 fad5 	bl	8010890 <USB_ReadInterrupts>
 800a2e6:	0342      	lsls	r2, r0, #13
 800a2e8:	d478      	bmi.n	800a3dc <HAL_PCD_IRQHandler+0x174>
 800a2ea:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	f006 face 	bl	8010890 <USB_ReadInterrupts>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	db5d      	blt.n	800a3b4 <HAL_PCD_IRQHandler+0x14c>
 800a2f8:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a2fa:	f006 fac9 	bl	8010890 <USB_ReadInterrupts>
 800a2fe:	0500      	lsls	r0, r0, #20
 800a300:	d44d      	bmi.n	800a39e <HAL_PCD_IRQHandler+0x136>
 800a302:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a304:	f006 fac4 	bl	8010890 <USB_ReadInterrupts>
 800a308:	0102      	lsls	r2, r0, #4
 800a30a:	d514      	bpl.n	800a336 <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a30c:	6822      	ldr	r2, [r4, #0]
 800a30e:	6953      	ldr	r3, [r2, #20]
 800a310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a314:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800a316:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f040 818b 	bne.w	800a636 <HAL_PCD_IRQHandler+0x3ce>
        hpcd->LPM_State = LPM_L1;
 800a320:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a322:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800a324:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a328:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800a32a:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a32e:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a332:	f016 f929 	bl	8020588 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a336:	6820      	ldr	r0, [r4, #0]
 800a338:	f006 faaa 	bl	8010890 <USB_ReadInterrupts>
 800a33c:	04c3      	lsls	r3, r0, #19
 800a33e:	f100 8129 	bmi.w	800a594 <HAL_PCD_IRQHandler+0x32c>
 800a342:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a344:	f006 faa4 	bl	8010890 <USB_ReadInterrupts>
 800a348:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800a34c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a34e:	f040 810a 	bne.w	800a566 <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a352:	f006 fa9d 	bl	8010890 <USB_ReadInterrupts>
 800a356:	0707      	lsls	r7, r0, #28
 800a358:	f100 80fc 	bmi.w	800a554 <HAL_PCD_IRQHandler+0x2ec>
 800a35c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a35e:	f006 fa97 	bl	8010890 <USB_ReadInterrupts>
 800a362:	02c6      	lsls	r6, r0, #11
 800a364:	f100 80ec 	bmi.w	800a540 <HAL_PCD_IRQHandler+0x2d8>
 800a368:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a36a:	f006 fa91 	bl	8010890 <USB_ReadInterrupts>
 800a36e:	0285      	lsls	r5, r0, #10
 800a370:	f100 80dc 	bmi.w	800a52c <HAL_PCD_IRQHandler+0x2c4>
 800a374:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a376:	f006 fa8b 	bl	8010890 <USB_ReadInterrupts>
 800a37a:	0040      	lsls	r0, r0, #1
 800a37c:	f100 80cd 	bmi.w	800a51a <HAL_PCD_IRQHandler+0x2b2>
 800a380:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a382:	f006 fa85 	bl	8010890 <USB_ReadInterrupts>
 800a386:	0741      	lsls	r1, r0, #29
 800a388:	f57f af77 	bpl.w	800a27a <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a390:	076a      	lsls	r2, r5, #29
 800a392:	f100 8225 	bmi.w	800a7e0 <HAL_PCD_IRQHandler+0x578>
      hpcd->Instance->GOTGINT |= temp;
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	432a      	orrs	r2, r5
 800a39a:	605a      	str	r2, [r3, #4]
 800a39c:	e76d      	b.n	800a27a <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a39e:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800a3a2:	07d9      	lsls	r1, r3, #31
 800a3a4:	f100 8218 	bmi.w	800a7d8 <HAL_PCD_IRQHandler+0x570>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a3a8:	6820      	ldr	r0, [r4, #0]
 800a3aa:	6943      	ldr	r3, [r0, #20]
 800a3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3b0:	6143      	str	r3, [r0, #20]
 800a3b2:	e7a7      	b.n	800a304 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a3b4:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800a3b8:	f023 0301 	bic.w	r3, r3, #1
 800a3bc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800a3c0:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	f000 8145 	beq.w	800a654 <HAL_PCD_IRQHandler+0x3ec>
        HAL_PCD_ResumeCallback(hpcd);
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f016 f80a 	bl	80203e4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a3d0:	6820      	ldr	r0, [r4, #0]
 800a3d2:	6943      	ldr	r3, [r0, #20]
 800a3d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3d8:	6143      	str	r3, [r0, #20]
 800a3da:	e78e      	b.n	800a2fa <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a3dc:	6820      	ldr	r0, [r4, #0]
 800a3de:	f006 fa63 	bl	80108a8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800a3e2:	f8d4 8000 	ldr.w	r8, [r4]
 800a3e6:	4681      	mov	r9, r0
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d080      	beq.n	800a2ee <HAL_PCD_IRQHandler+0x86>
 800a3ec:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 800a3f0:	4625      	mov	r5, r4
      epnum = 0U;
 800a3f2:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a3f6:	f8cd b010 	str.w	fp, [sp, #16]
 800a3fa:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800a3fe:	e007      	b.n	800a410 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 800a400:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800a404:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800a408:	f105 051c 	add.w	r5, r5, #28
 800a40c:	f000 813e 	beq.w	800a68c <HAL_PCD_IRQHandler+0x424>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a410:	f019 0f01 	tst.w	r9, #1
 800a414:	d0f4      	beq.n	800a400 <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a416:	fa5f f78a 	uxtb.w	r7, sl
 800a41a:	4640      	mov	r0, r8
 800a41c:	4639      	mov	r1, r7
 800a41e:	f006 fa55 	bl	80108cc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a422:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a424:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a426:	d519      	bpl.n	800a45c <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a428:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a42c:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a42e:	f00a 010f 	and.w	r1, sl, #15
 800a432:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a434:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a438:	fa0c f101 	lsl.w	r1, ip, r1
 800a43c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a440:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 800a444:	6921      	ldr	r1, [r4, #16]
 800a446:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a448:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a44c:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 800a450:	f000 81cb 	beq.w	800a7ea <HAL_PCD_IRQHandler+0x582>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a454:	4639      	mov	r1, r7
 800a456:	4620      	mov	r0, r4
 800a458:	f015 ff88 	bl	802036c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a45c:	0730      	lsls	r0, r6, #28
 800a45e:	d504      	bpl.n	800a46a <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	2208      	movs	r2, #8
 800a464:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a468:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a46a:	06f1      	lsls	r1, r6, #27
 800a46c:	d504      	bpl.n	800a478 <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a46e:	9b02      	ldr	r3, [sp, #8]
 800a470:	2210      	movs	r2, #16
 800a472:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a476:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a478:	0672      	lsls	r2, r6, #25
 800a47a:	d504      	bpl.n	800a486 <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a47c:	9b02      	ldr	r3, [sp, #8]
 800a47e:	2240      	movs	r2, #64	; 0x40
 800a480:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a484:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a486:	07b3      	lsls	r3, r6, #30
 800a488:	d504      	bpl.n	800a494 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a48a:	9b02      	ldr	r3, [sp, #8]
 800a48c:	2202      	movs	r2, #2
 800a48e:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800a492:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a494:	0636      	lsls	r6, r6, #24
 800a496:	f100 80fc 	bmi.w	800a692 <HAL_PCD_IRQHandler+0x42a>
 800a49a:	f8d4 8000 	ldr.w	r8, [r4]
 800a49e:	e7af      	b.n	800a400 <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a4a0:	f006 f9fa 	bl	8010898 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	6820      	ldr	r0, [r4, #0]
 800a4a8:	2d00      	cmp	r5, #0
 800a4aa:	f43f af1a 	beq.w	800a2e2 <HAL_PCD_IRQHandler+0x7a>
 800a4ae:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 800a4b2:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 800a4b6:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a4b8:	9602      	str	r6, [sp, #8]
 800a4ba:	469a      	mov	sl, r3
 800a4bc:	e006      	b.n	800a4cc <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 800a4be:	086d      	lsrs	r5, r5, #1
        epnum++;
 800a4c0:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 800a4c4:	f109 091c 	add.w	r9, r9, #28
 800a4c8:	f000 80de 	beq.w	800a688 <HAL_PCD_IRQHandler+0x420>
        if ((ep_intr & 0x1U) != 0U)
 800a4cc:	07ee      	lsls	r6, r5, #31
 800a4ce:	d5f6      	bpl.n	800a4be <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a4d0:	b2fe      	uxtb	r6, r7
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	f006 f9f0 	bl	80108b8 <USB_ReadDevOutEPInterrupt>
 800a4d8:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4da:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a4dc:	f018 0f01 	tst.w	r8, #1
 800a4e0:	f040 813e 	bne.w	800a760 <HAL_PCD_IRQHandler+0x4f8>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a4e4:	f018 0f08 	tst.w	r8, #8
 800a4e8:	f040 8120 	bne.w	800a72c <HAL_PCD_IRQHandler+0x4c4>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a4ec:	f018 0f10 	tst.w	r8, #16
 800a4f0:	d003      	beq.n	800a4fa <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a4f2:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a4fa:	f018 0f20 	tst.w	r8, #32
 800a4fe:	d003      	beq.n	800a508 <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a500:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a504:	2220      	movs	r2, #32
 800a506:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a508:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800a50c:	d0d7      	beq.n	800a4be <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a50e:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800a512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a516:	609a      	str	r2, [r3, #8]
 800a518:	e7d1      	b.n	800a4be <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 800a51a:	4620      	mov	r0, r4
 800a51c:	f015 ff6e 	bl	80203fc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a520:	6820      	ldr	r0, [r4, #0]
 800a522:	6943      	ldr	r3, [r0, #20]
 800a524:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a528:	6143      	str	r3, [r0, #20]
 800a52a:	e72a      	b.n	800a382 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a52c:	4620      	mov	r0, r4
 800a52e:	2100      	movs	r1, #0
 800a530:	f015 ff5c 	bl	80203ec <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a534:	6820      	ldr	r0, [r4, #0]
 800a536:	6943      	ldr	r3, [r0, #20]
 800a538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a53c:	6143      	str	r3, [r0, #20]
 800a53e:	e71a      	b.n	800a376 <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a540:	4620      	mov	r0, r4
 800a542:	2100      	movs	r1, #0
 800a544:	f015 ff56 	bl	80203f4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a548:	6820      	ldr	r0, [r4, #0]
 800a54a:	6943      	ldr	r3, [r0, #20]
 800a54c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a550:	6143      	str	r3, [r0, #20]
 800a552:	e70a      	b.n	800a36a <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 800a554:	4620      	mov	r0, r4
 800a556:	f015 ff13 	bl	8020380 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a55a:	6820      	ldr	r0, [r4, #0]
 800a55c:	6943      	ldr	r3, [r0, #20]
 800a55e:	f003 0308 	and.w	r3, r3, #8
 800a562:	6143      	str	r3, [r0, #20]
 800a564:	e6fb      	b.n	800a35e <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 800a566:	f006 f9c7 	bl	80108f8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	f005 fe8a 	bl	8010284 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a570:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a572:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a574:	f000 ff80 	bl	800b478 <HAL_RCC_GetHCLKFreq>
 800a578:	7b22      	ldrb	r2, [r4, #12]
 800a57a:	4601      	mov	r1, r0
 800a57c:	4628      	mov	r0, r5
 800a57e:	f005 fcff 	bl	800ff80 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800a582:	4620      	mov	r0, r4
 800a584:	f015 ff00 	bl	8020388 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	6943      	ldr	r3, [r0, #20]
 800a58c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a590:	6143      	str	r3, [r0, #20]
 800a592:	e6de      	b.n	800a352 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a594:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a598:	2110      	movs	r1, #16
 800a59a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a59c:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800a5a0:	f023 0301 	bic.w	r3, r3, #1
 800a5a4:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a5a6:	f005 fe5b 	bl	8010260 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5aa:	6860      	ldr	r0, [r4, #4]
 800a5ac:	b310      	cbz	r0, 800a5f4 <HAL_PCD_IRQHandler+0x38c>
 800a5ae:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a5b2:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800a5b6:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5b8:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5c0:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a5c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a5c6:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a5ca:	f853 2c20 	ldr.w	r2, [r3, #-32]
 800a5ce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a5d2:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a5d6:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a5da:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a5de:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800a5e2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5e6:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800a5ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a5ee:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a5f2:	d1e0      	bne.n	800a5b6 <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a5f4:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a5f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a5f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a5fc:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a5fe:	b9f2      	cbnz	r2, 800a63e <HAL_PCD_IRQHandler+0x3d6>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a600:	696a      	ldr	r2, [r5, #20]
 800a602:	f242 032b 	movw	r3, #8235	; 0x202b
 800a606:	4313      	orrs	r3, r2
 800a608:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a60a:	692b      	ldr	r3, [r5, #16]
 800a60c:	f043 030b 	orr.w	r3, r3, #11
 800a610:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a612:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a616:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a61a:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a61c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a620:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a622:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a626:	f006 f97d 	bl	8010924 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a62a:	6820      	ldr	r0, [r4, #0]
 800a62c:	6943      	ldr	r3, [r0, #20]
 800a62e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a632:	6143      	str	r3, [r0, #20]
 800a634:	e686      	b.n	800a344 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 800a636:	4620      	mov	r0, r4
 800a638:	f015 febc 	bl	80203b4 <HAL_PCD_SuspendCallback>
 800a63c:	e67b      	b.n	800a336 <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a63e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a642:	f043 030b 	orr.w	r3, r3, #11
 800a646:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a64a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a64c:	f043 030b 	orr.w	r3, r3, #11
 800a650:	646b      	str	r3, [r5, #68]	; 0x44
 800a652:	e7de      	b.n	800a612 <HAL_PCD_IRQHandler+0x3aa>
        hpcd->LPM_State = LPM_L0;
 800a654:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a656:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800a658:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a65c:	f015 ff94 	bl	8020588 <HAL_PCDEx_LPM_Callback>
 800a660:	e6b6      	b.n	800a3d0 <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a662:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a666:	2208      	movs	r2, #8
 800a668:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800a66c:	4630      	mov	r0, r6
 800a66e:	f006 f86f 	bl	8010750 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a672:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800a676:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800a67a:	6820      	ldr	r0, [r4, #0]
 800a67c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800a680:	440b      	add	r3, r1
 800a682:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800a686:	e621      	b.n	800a2cc <HAL_PCD_IRQHandler+0x64>
 800a688:	9e02      	ldr	r6, [sp, #8]
 800a68a:	e62a      	b.n	800a2e2 <HAL_PCD_IRQHandler+0x7a>
 800a68c:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 800a690:	e62d      	b.n	800a2ee <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800a692:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a696:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800a69a:	428b      	cmp	r3, r1
 800a69c:	f63f aeb0 	bhi.w	800a400 <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 800a6a0:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 800a6a2:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6a4:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a8:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 800a6ac:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6ae:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800a6b2:	bf28      	it	cs
 800a6b4:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6b6:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 800a6ba:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6bc:	b280      	uxth	r0, r0
 800a6be:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 800a6c2:	d21b      	bcs.n	800a6fc <HAL_PCD_IRQHandler+0x494>
 800a6c4:	e022      	b.n	800a70c <HAL_PCD_IRQHandler+0x4a4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6c6:	b1f9      	cbz	r1, 800a708 <HAL_PCD_IRQHandler+0x4a0>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a6c8:	f894 c010 	ldrb.w	ip, [r4, #16]
 800a6cc:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800a6d0:	f8cd c000 	str.w	ip, [sp]
 800a6d4:	429e      	cmp	r6, r3
 800a6d6:	bf28      	it	cs
 800a6d8:	461e      	movcs	r6, r3
 800a6da:	b2b3      	uxth	r3, r6
 800a6dc:	f006 f822 	bl	8010724 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6e0:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 800a6e4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800a6e6:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 800a6e8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6ea:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 800a6ec:	4431      	add	r1, r6
    ep->xfer_count += len;
 800a6ee:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f0:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800a6f4:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800a6f6:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a6f8:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800a6fa:	d305      	bcc.n	800a708 <HAL_PCD_IRQHandler+0x4a0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a6fc:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 800a6fe:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a702:	463a      	mov	r2, r7
 800a704:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a706:	d3de      	bcc.n	800a6c6 <HAL_PCD_IRQHandler+0x45e>
 800a708:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 800a70c:	428b      	cmp	r3, r1
 800a70e:	f4ff ae77 	bcc.w	800a400 <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a712:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a714:	f00a 010f 	and.w	r1, sl, #15
 800a718:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a71a:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a71e:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a722:	ea22 0201 	bic.w	r2, r2, r1
 800a726:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800a72a:	e669      	b.n	800a400 <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a72c:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 800a730:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a732:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a736:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a738:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a73e:	485e      	ldr	r0, [pc, #376]	; (800a8b8 <HAL_PCD_IRQHandler+0x650>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a740:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a742:	4282      	cmp	r2, r0
 800a744:	d963      	bls.n	800a80e <HAL_PCD_IRQHandler+0x5a6>
 800a746:	0409      	lsls	r1, r1, #16
 800a748:	d502      	bpl.n	800a750 <HAL_PCD_IRQHandler+0x4e8>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a74a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a74e:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a750:	4620      	mov	r0, r4
 800a752:	f015 fdfb 	bl	802034c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a756:	6921      	ldr	r1, [r4, #16]
 800a758:	2901      	cmp	r1, #1
 800a75a:	d07b      	beq.n	800a854 <HAL_PCD_IRQHandler+0x5ec>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	e6c5      	b.n	800a4ec <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 800a760:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a764:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a768:	2301      	movs	r3, #1
 800a76a:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a76e:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800a772:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a776:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a778:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a77a:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800a77e:	d04b      	beq.n	800a818 <HAL_PCD_IRQHandler+0x5b0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a780:	494e      	ldr	r1, [pc, #312]	; (800a8bc <HAL_PCD_IRQHandler+0x654>)
 800a782:	428b      	cmp	r3, r1
 800a784:	d057      	beq.n	800a836 <HAL_PCD_IRQHandler+0x5ce>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a786:	b927      	cbnz	r7, 800a792 <HAL_PCD_IRQHandler+0x52a>
 800a788:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	f000 808c 	beq.w	800a8aa <HAL_PCD_IRQHandler+0x642>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a792:	4620      	mov	r0, r4
 800a794:	4631      	mov	r1, r6
 800a796:	f015 fddf 	bl	8020358 <HAL_PCD_DataOutStageCallback>
 800a79a:	6820      	ldr	r0, [r4, #0]
 800a79c:	e6a2      	b.n	800a4e4 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a79e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a7a2:	421d      	tst	r5, r3
 800a7a4:	f43f ad92 	beq.w	800a2cc <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a7a8:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800a7ac:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800a7b6:	4615      	mov	r5, r2
 800a7b8:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800a7bc:	f005 ffc8 	bl	8010750 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7c8:	442a      	add	r2, r5
 800a7ca:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7cc:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7ce:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a7d2:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800a7d6:	e579      	b.n	800a2cc <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f015 fdeb 	bl	80203b4 <HAL_PCD_SuspendCallback>
 800a7de:	e5e3      	b.n	800a3a8 <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f015 fe0f 	bl	8020404 <HAL_PCD_DisconnectCallback>
 800a7e6:	6823      	ldr	r3, [r4, #0]
 800a7e8:	e5d5      	b.n	800a396 <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a7ea:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800a7ee:	4413      	add	r3, r2
 800a7f0:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a7f2:	f1ba 0f00 	cmp.w	sl, #0
 800a7f6:	f47f ae2d 	bne.w	800a454 <HAL_PCD_IRQHandler+0x1ec>
 800a7fa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f47f ae29 	bne.w	800a454 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a802:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a806:	6820      	ldr	r0, [r4, #0]
 800a808:	f006 f88c 	bl	8010924 <USB_EP0_OutStart>
 800a80c:	e622      	b.n	800a454 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 800a80e:	4620      	mov	r0, r4
 800a810:	f015 fd9c 	bl	802034c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a814:	6820      	ldr	r0, [r4, #0]
 800a816:	e669      	b.n	800a4ec <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a818:	f01e 0f08 	tst.w	lr, #8
 800a81c:	d014      	beq.n	800a848 <HAL_PCD_IRQHandler+0x5e0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a81e:	4926      	ldr	r1, [pc, #152]	; (800a8b8 <HAL_PCD_IRQHandler+0x650>)
 800a820:	428b      	cmp	r3, r1
 800a822:	f67f ae5f 	bls.w	800a4e4 <HAL_PCD_IRQHandler+0x27c>
 800a826:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800a82a:	f43f ae5b 	beq.w	800a4e4 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a82e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a832:	6093      	str	r3, [r2, #8]
 800a834:	e656      	b.n	800a4e4 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a836:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800a83a:	d1f8      	bne.n	800a82e <HAL_PCD_IRQHandler+0x5c6>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a83c:	f01e 0f20 	tst.w	lr, #32
 800a840:	d0a7      	beq.n	800a792 <HAL_PCD_IRQHandler+0x52a>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a842:	2120      	movs	r1, #32
 800a844:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a846:	e7a4      	b.n	800a792 <HAL_PCD_IRQHandler+0x52a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a848:	f01e 0f20 	tst.w	lr, #32
 800a84c:	d008      	beq.n	800a860 <HAL_PCD_IRQHandler+0x5f8>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a84e:	2320      	movs	r3, #32
 800a850:	6093      	str	r3, [r2, #8]
 800a852:	e647      	b.n	800a4e4 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a854:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a858:	6820      	ldr	r0, [r4, #0]
 800a85a:	f006 f863 	bl	8010924 <USB_EP0_OutStart>
 800a85e:	e77d      	b.n	800a75c <HAL_PCD_IRQHandler+0x4f4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a860:	f01e 0f28 	tst.w	lr, #40	; 0x28
 800a864:	f47f ae3e 	bne.w	800a4e4 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a868:	4913      	ldr	r1, [pc, #76]	; (800a8b8 <HAL_PCD_IRQHandler+0x650>)
 800a86a:	428b      	cmp	r3, r1
 800a86c:	d902      	bls.n	800a874 <HAL_PCD_IRQHandler+0x60c>
 800a86e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800a872:	d1dc      	bne.n	800a82e <HAL_PCD_IRQHandler+0x5c6>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a874:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800a876:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a87a:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a87e:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a882:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 800a884:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a886:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 800a88a:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a88e:	2f00      	cmp	r7, #0
 800a890:	f47f af7f 	bne.w	800a792 <HAL_PCD_IRQHandler+0x52a>
 800a894:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800a898:	2a00      	cmp	r2, #0
 800a89a:	f47f af7a 	bne.w	800a792 <HAL_PCD_IRQHandler+0x52a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a89e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a8a2:	2101      	movs	r1, #1
 800a8a4:	f006 f83e 	bl	8010924 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a8a8:	e773      	b.n	800a792 <HAL_PCD_IRQHandler+0x52a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a8aa:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f006 f838 	bl	8010924 <USB_EP0_OutStart>
 800a8b4:	e76d      	b.n	800a792 <HAL_PCD_IRQHandler+0x52a>
 800a8b6:	bf00      	nop
 800a8b8:	4f54300a 	.word	0x4f54300a
 800a8bc:	4f54310a 	.word	0x4f54310a

0800a8c0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800a8c0:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800a8c4:	2a01      	cmp	r2, #1
 800a8c6:	d00d      	beq.n	800a8e4 <HAL_PCD_SetAddress+0x24>
 800a8c8:	2201      	movs	r2, #1
{
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 800a8ce:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a8d2:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800a8d4:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a8d8:	f005 ffac 	bl	8010834 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a8dc:	2000      	movs	r0, #0
 800a8de:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800a8e2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800a8e4:	2002      	movs	r0, #2
}
 800a8e6:	4770      	bx	lr

0800a8e8 <HAL_PCD_EP_Open>:
{
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800a8ee:	0609      	lsls	r1, r1, #24
{
 800a8f0:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a8f2:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800a8f6:	d422      	bmi.n	800a93e <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 800a8f8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a8fc:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 800a900:	2700      	movs	r7, #0
 800a902:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a906:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800a90a:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 800a90e:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a910:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800a912:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800a914:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800a916:	b100      	cbz	r0, 800a91a <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800a918:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d101      	bne.n	800a922 <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800a922:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 800a926:	2b01      	cmp	r3, #1
 800a928:	d015      	beq.n	800a956 <HAL_PCD_EP_Open+0x6e>
 800a92a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a92c:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 800a92e:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a932:	f005 fcb3 	bl	801029c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a936:	2000      	movs	r0, #0
 800a938:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 800a93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800a93e:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800a942:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a944:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 800a948:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a94c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800a950:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 800a954:	e7db      	b.n	800a90e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800a956:	2002      	movs	r0, #2
}
 800a958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95a:	bf00      	nop

0800a95c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800a95c:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a960:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a964:	f04f 011c 	mov.w	r1, #28
{
 800a968:	b510      	push	{r4, lr}
 800a96a:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800a96c:	d119      	bne.n	800a9a2 <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a96e:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800a972:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800a976:	2000      	movs	r0, #0
 800a978:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a97c:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800a980:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a984:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a986:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d018      	beq.n	800a9c0 <HAL_PCD_EP_Close+0x64>
 800a98e:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a990:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800a992:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a996:	f005 fcc9 	bl	801032c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a99a:	2000      	movs	r0, #0
 800a99c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800a9a0:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9a2:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800a9a6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800a9aa:	2001      	movs	r0, #1
 800a9ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a9b0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800a9b2:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a9b6:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800a9b8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800a9bc:	2b01      	cmp	r3, #1
 800a9be:	d1e6      	bne.n	800a98e <HAL_PCD_EP_Close+0x32>
 800a9c0:	2002      	movs	r0, #2
}
 800a9c2:	bd10      	pop	{r4, pc}

0800a9c4 <HAL_PCD_EP_Receive>:
{
 800a9c4:	b570      	push	{r4, r5, r6, lr}
 800a9c6:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 800a9ca:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9cc:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800a9ce:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9d2:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800a9d6:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a9da:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 800a9de:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800a9e2:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800a9e6:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800a9ea:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800a9ee:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800a9f2:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a9f4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800a9f6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800a9f8:	bf08      	it	eq
 800a9fa:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a9fe:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aa00:	b91d      	cbnz	r5, 800aa0a <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa02:	f005 fe09 	bl	8010618 <USB_EP0StartXfer>
}
 800aa06:	2000      	movs	r0, #0
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa0a:	f005 fcf1 	bl	80103f0 <USB_EPStartXfer>
}
 800aa0e:	2000      	movs	r0, #0
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	bf00      	nop

0800aa14 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800aa14:	f001 010f 	and.w	r1, r1, #15
 800aa18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800aa1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800aa20:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop

0800aa28 <HAL_PCD_EP_Transmit>:
{
 800aa28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2a:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 800aa2e:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800aa30:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa32:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800aa34:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa38:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800aa3c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aa40:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800aa42:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800aa44:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa46:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800aa4a:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800aa4c:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800aa50:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa52:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800aa54:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800aa56:	bf08      	it	eq
 800aa58:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa5a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aa5c:	b91d      	cbnz	r5, 800aa66 <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa5e:	f005 fddb 	bl	8010618 <USB_EP0StartXfer>
}
 800aa62:	2000      	movs	r0, #0
 800aa64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800aa66:	f005 fcc3 	bl	80103f0 <USB_EPStartXfer>
}
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6e:	bf00      	nop

0800aa70 <HAL_PCD_EP_SetStall>:
{
 800aa70:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800aa72:	6843      	ldr	r3, [r0, #4]
 800aa74:	f001 050f 	and.w	r5, r1, #15
 800aa78:	429d      	cmp	r5, r3
 800aa7a:	d833      	bhi.n	800aae4 <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 800aa7c:	060b      	lsls	r3, r1, #24
 800aa7e:	4604      	mov	r4, r0
 800aa80:	d41c      	bmi.n	800aabc <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800aa82:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800aa86:	201c      	movs	r0, #28
    ep->is_in = 0U;
 800aa88:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800aa8a:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800aa8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800aa92:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800aa96:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800aa9a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800aa9c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800aa9e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800aaa0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d01b      	beq.n	800aae0 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aaa8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800aaaa:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800aaae:	f005 fe61 	bl	8010774 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800aab2:	b1cd      	cbz	r5, 800aae8 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 800aab4:	2000      	movs	r0, #0
 800aab6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aabc:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800aabe:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800aac2:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aac4:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800aac8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aacc:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800aace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800aad2:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800aad4:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800aad6:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800aad8:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800aadc:	429a      	cmp	r2, r3
 800aade:	d1e3      	bne.n	800aaa8 <HAL_PCD_EP_SetStall+0x38>
 800aae0:	2002      	movs	r0, #2
}
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800aae4:	2001      	movs	r0, #1
}
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800aae8:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800aaec:	7c21      	ldrb	r1, [r4, #16]
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	f005 ff18 	bl	8010924 <USB_EP0_OutStart>
 800aaf4:	e7de      	b.n	800aab4 <HAL_PCD_EP_SetStall+0x44>
 800aaf6:	bf00      	nop

0800aaf8 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800aaf8:	6842      	ldr	r2, [r0, #4]
{
 800aafa:	b538      	push	{r3, r4, r5, lr}
 800aafc:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d832      	bhi.n	800ab6a <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800ab04:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ab08:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab0a:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800ab0e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800ab12:	d119      	bne.n	800ab48 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab14:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ab18:	2000      	movs	r0, #0
 800ab1a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ab1e:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab20:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800ab24:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab28:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800ab2a:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800ab2c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d018      	beq.n	800ab66 <HAL_PCD_EP_ClrStall+0x6e>
 800ab34:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ab36:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ab38:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ab3c:	f005 fe4e 	bl	80107dc <USB_EPClearStall>
  return HAL_OK;
 800ab40:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800ab42:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab48:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ab52:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab54:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ab56:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800ab5a:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800ab5c:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800ab5e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d1e6      	bne.n	800ab34 <HAL_PCD_EP_ClrStall+0x3c>
 800ab66:	2002      	movs	r0, #2
}
 800ab68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ab6a:	2001      	movs	r0, #1
}
 800ab6c:	bd38      	pop	{r3, r4, r5, pc}
 800ab6e:	bf00      	nop

0800ab70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab70:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ab72:	6805      	ldr	r5, [r0, #0]
 800ab74:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 800ab76:	b929      	cbnz	r1, 800ab84 <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800ab7c:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab7e:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800ab80:	bc30      	pop	{r4, r5}
 800ab82:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab84:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800ab86:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab88:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800ab8c:	d00b      	beq.n	800aba6 <HAL_PCDEx_SetTxFiFo+0x36>
 800ab8e:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ab90:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800ab94:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ab96:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800ab9a:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ab9c:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800ab9e:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aba0:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800aba4:	d3f4      	bcc.n	800ab90 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800aba6:	3440      	adds	r4, #64	; 0x40
 800aba8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800abac:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800abb0:	6060      	str	r0, [r4, #4]
}
 800abb2:	2000      	movs	r0, #0
 800abb4:	bc30      	pop	{r4, r5}
 800abb6:	4770      	bx	lr

0800abb8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abb8:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800abba:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	6259      	str	r1, [r3, #36]	; 0x24
}
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop

0800abc4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800abc4:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800abc6:	4909      	ldr	r1, [pc, #36]	; (800abec <HAL_PCDEx_ActivateLPM+0x28>)
{
 800abc8:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abca:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 800abcc:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 800abce:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 800abd0:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 800abd4:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800abd6:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 800abd8:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800abdc:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 800abe0:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800abe2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800abe4:	4319      	orrs	r1, r3
}
 800abe6:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800abe8:	6551      	str	r1, [r2, #84]	; 0x54
}
 800abea:	4770      	bx	lr
 800abec:	10000003 	.word	0x10000003

0800abf0 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abf0:	4a02      	ldr	r2, [pc, #8]	; (800abfc <HAL_PWR_EnableBkUpAccess+0xc>)
 800abf2:	6813      	ldr	r3, [r2, #0]
 800abf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abf8:	6013      	str	r3, [r2, #0]
}
 800abfa:	4770      	bx	lr
 800abfc:	40007000 	.word	0x40007000

0800ac00 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac00:	4a1b      	ldr	r2, [pc, #108]	; (800ac70 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac02:	4b1c      	ldr	r3, [pc, #112]	; (800ac74 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac04:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ac06:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800ac0a:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac0c:	6411      	str	r1, [r2, #64]	; 0x40
{
 800ac0e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac10:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac12:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac14:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ac18:	9201      	str	r2, [sp, #4]
 800ac1a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac1c:	681a      	ldr	r2, [r3, #0]
 800ac1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ac22:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800ac24:	f7fb fb60 	bl	80062e8 <HAL_GetTick>
 800ac28:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac2a:	e005      	b.n	800ac38 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac2c:	f7fb fb5c 	bl	80062e8 <HAL_GetTick>
 800ac30:	1b00      	subs	r0, r0, r4
 800ac32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ac36:	d817      	bhi.n	800ac68 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac38:	686b      	ldr	r3, [r5, #4]
 800ac3a:	03da      	lsls	r2, r3, #15
 800ac3c:	d5f6      	bpl.n	800ac2c <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac3e:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac40:	4e0c      	ldr	r6, [pc, #48]	; (800ac74 <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac46:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800ac48:	f7fb fb4e 	bl	80062e8 <HAL_GetTick>
 800ac4c:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac4e:	e005      	b.n	800ac5c <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac50:	f7fb fb4a 	bl	80062e8 <HAL_GetTick>
 800ac54:	1b00      	subs	r0, r0, r4
 800ac56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ac5a:	d805      	bhi.n	800ac68 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac5c:	6873      	ldr	r3, [r6, #4]
 800ac5e:	039b      	lsls	r3, r3, #14
 800ac60:	d5f6      	bpl.n	800ac50 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800ac62:	2000      	movs	r0, #0
}
 800ac64:	b002      	add	sp, #8
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800ac68:	2003      	movs	r0, #3
}
 800ac6a:	b002      	add	sp, #8
 800ac6c:	bd70      	pop	{r4, r5, r6, pc}
 800ac6e:	bf00      	nop
 800ac70:	40023800 	.word	0x40023800
 800ac74:	40007000 	.word	0x40007000

0800ac78 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	f000 8296 	beq.w	800b1aa <HAL_RCC_OscConfig+0x532>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ac7e:	6803      	ldr	r3, [r0, #0]
 800ac80:	2b0f      	cmp	r3, #15
{
 800ac82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800ac8a:	f200 8126 	bhi.w	800aeda <HAL_RCC_OscConfig+0x262>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac8e:	07dd      	lsls	r5, r3, #31
 800ac90:	d534      	bpl.n	800acfc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800ac92:	6863      	ldr	r3, [r4, #4]
 800ac94:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800ac98:	d003      	beq.n	800aca2 <HAL_RCC_OscConfig+0x2a>
 800ac9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac9e:	f040 8179 	bne.w	800af94 <HAL_RCC_OscConfig+0x31c>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aca2:	4ab4      	ldr	r2, [pc, #720]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800aca4:	6893      	ldr	r3, [r2, #8]
 800aca6:	f003 030c 	and.w	r3, r3, #12
 800acaa:	2b04      	cmp	r3, #4
 800acac:	d01d      	beq.n	800acea <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acae:	6893      	ldr	r3, [r2, #8]
 800acb0:	f003 030c 	and.w	r3, r3, #12
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d015      	beq.n	800ace4 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acb8:	6863      	ldr	r3, [r4, #4]
 800acba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acbe:	f000 816f 	beq.w	800afa0 <HAL_RCC_OscConfig+0x328>
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 81a1 	beq.w	800b00a <HAL_RCC_OscConfig+0x392>
 800acc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800accc:	4ba9      	ldr	r3, [pc, #676]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	f000 8236 	beq.w	800b140 <HAL_RCC_OscConfig+0x4c8>
 800acd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ace0:	601a      	str	r2, [r3, #0]
 800ace2:	e162      	b.n	800afaa <HAL_RCC_OscConfig+0x332>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ace4:	6853      	ldr	r3, [r2, #4]
 800ace6:	0258      	lsls	r0, r3, #9
 800ace8:	d5e6      	bpl.n	800acb8 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800acea:	4ba2      	ldr	r3, [pc, #648]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	0399      	lsls	r1, r3, #14
 800acf0:	d503      	bpl.n	800acfa <HAL_RCC_OscConfig+0x82>
 800acf2:	6863      	ldr	r3, [r4, #4]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8102 	beq.w	800aefe <HAL_RCC_OscConfig+0x286>
 800acfa:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800acfc:	079f      	lsls	r7, r3, #30
 800acfe:	d532      	bpl.n	800ad66 <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800ad00:	68e3      	ldr	r3, [r4, #12]
 800ad02:	2b01      	cmp	r3, #1
 800ad04:	f200 80ff 	bhi.w	800af06 <HAL_RCC_OscConfig+0x28e>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800ad08:	6923      	ldr	r3, [r4, #16]
 800ad0a:	2b1f      	cmp	r3, #31
 800ad0c:	f200 8104 	bhi.w	800af18 <HAL_RCC_OscConfig+0x2a0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ad10:	4b98      	ldr	r3, [pc, #608]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	f012 0f0c 	tst.w	r2, #12
 800ad18:	f000 80ea 	beq.w	800aef0 <HAL_RCC_OscConfig+0x278>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ad1c:	689a      	ldr	r2, [r3, #8]
 800ad1e:	f002 020c 	and.w	r2, r2, #12
 800ad22:	2a08      	cmp	r2, #8
 800ad24:	f000 80e0 	beq.w	800aee8 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ad28:	68e3      	ldr	r3, [r4, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 81a5 	beq.w	800b07a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ad30:	4b90      	ldr	r3, [pc, #576]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800ad32:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad34:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 800ad36:	f042 0201 	orr.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ad3c:	f7fb fad4 	bl	80062e8 <HAL_GetTick>
 800ad40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad42:	e005      	b.n	800ad50 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad44:	f7fb fad0 	bl	80062e8 <HAL_GetTick>
 800ad48:	1b40      	subs	r0, r0, r5
 800ad4a:	2802      	cmp	r0, #2
 800ad4c:	f200 8159 	bhi.w	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad50:	6833      	ldr	r3, [r6, #0]
 800ad52:	0798      	lsls	r0, r3, #30
 800ad54:	d5f6      	bpl.n	800ad44 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ad56:	6833      	ldr	r3, [r6, #0]
 800ad58:	6922      	ldr	r2, [r4, #16]
 800ad5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ad5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ad62:	6033      	str	r3, [r6, #0]
 800ad64:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad66:	071a      	lsls	r2, r3, #28
 800ad68:	d42a      	bmi.n	800adc0 <HAL_RCC_OscConfig+0x148>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad6a:	075e      	lsls	r6, r3, #29
 800ad6c:	d545      	bpl.n	800adfa <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ad6e:	68a3      	ldr	r3, [r4, #8]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d906      	bls.n	800ad82 <HAL_RCC_OscConfig+0x10a>
 800ad74:	2b05      	cmp	r3, #5
 800ad76:	d004      	beq.n	800ad82 <HAL_RCC_OscConfig+0x10a>
 800ad78:	f44f 7102 	mov.w	r1, #520	; 0x208
 800ad7c:	487e      	ldr	r0, [pc, #504]	; (800af78 <HAL_RCC_OscConfig+0x300>)
 800ad7e:	f7f8 fed3 	bl	8003b28 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad82:	4b7c      	ldr	r3, [pc, #496]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800ad84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad86:	00d5      	lsls	r5, r2, #3
 800ad88:	f140 80e8 	bpl.w	800af5c <HAL_RCC_OscConfig+0x2e4>
  FlagStatus pwrclkchanged = RESET;
 800ad8c:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ad8e:	4b7b      	ldr	r3, [pc, #492]	; (800af7c <HAL_RCC_OscConfig+0x304>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	05d0      	lsls	r0, r2, #23
 800ad94:	f140 8124 	bpl.w	800afe0 <HAL_RCC_OscConfig+0x368>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	f000 8181 	beq.w	800b0a2 <HAL_RCC_OscConfig+0x42a>
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 8149 	beq.w	800b038 <HAL_RCC_OscConfig+0x3c0>
 800ada6:	2b05      	cmp	r3, #5
 800ada8:	4b72      	ldr	r3, [pc, #456]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800adaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adac:	f000 81d0 	beq.w	800b150 <HAL_RCC_OscConfig+0x4d8>
 800adb0:	f022 0201 	bic.w	r2, r2, #1
 800adb4:	671a      	str	r2, [r3, #112]	; 0x70
 800adb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adb8:	f022 0204 	bic.w	r2, r2, #4
 800adbc:	671a      	str	r2, [r3, #112]	; 0x70
 800adbe:	e175      	b.n	800b0ac <HAL_RCC_OscConfig+0x434>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800adc0:	6963      	ldr	r3, [r4, #20]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	f200 80c1 	bhi.w	800af4a <HAL_RCC_OscConfig+0x2d2>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 80ab 	beq.w	800af24 <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_LSI_ENABLE();
 800adce:	4b69      	ldr	r3, [pc, #420]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800add0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800add2:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800add4:	f042 0201 	orr.w	r2, r2, #1
 800add8:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800adda:	f7fb fa85 	bl	80062e8 <HAL_GetTick>
 800adde:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ade0:	e005      	b.n	800adee <HAL_RCC_OscConfig+0x176>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ade2:	f7fb fa81 	bl	80062e8 <HAL_GetTick>
 800ade6:	1b40      	subs	r0, r0, r5
 800ade8:	2802      	cmp	r0, #2
 800adea:	f200 810a 	bhi.w	800b002 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800adee:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800adf0:	079b      	lsls	r3, r3, #30
 800adf2:	d5f6      	bpl.n	800ade2 <HAL_RCC_OscConfig+0x16a>
 800adf4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800adf6:	075e      	lsls	r6, r3, #29
 800adf8:	d4b9      	bmi.n	800ad6e <HAL_RCC_OscConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800adfa:	69a0      	ldr	r0, [r4, #24]
 800adfc:	2802      	cmp	r0, #2
 800adfe:	f200 80bf 	bhi.w	800af80 <HAL_RCC_OscConfig+0x308>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae02:	2800      	cmp	r0, #0
 800ae04:	d065      	beq.n	800aed2 <HAL_RCC_OscConfig+0x25a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae06:	4a5b      	ldr	r2, [pc, #364]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800ae08:	6893      	ldr	r3, [r2, #8]
 800ae0a:	f003 030c 	and.w	r3, r3, #12
 800ae0e:	2b08      	cmp	r3, #8
 800ae10:	f000 815f 	beq.w	800b0d2 <HAL_RCC_OscConfig+0x45a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae14:	2802      	cmp	r0, #2
 800ae16:	f040 81b5 	bne.w	800b184 <HAL_RCC_OscConfig+0x50c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800ae1a:	69e3      	ldr	r3, [r4, #28]
 800ae1c:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ae20:	f040 81aa 	bne.w	800b178 <HAL_RCC_OscConfig+0x500>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800ae24:	6a23      	ldr	r3, [r4, #32]
 800ae26:	3b02      	subs	r3, #2
 800ae28:	2b3d      	cmp	r3, #61	; 0x3d
 800ae2a:	f200 819f 	bhi.w	800b16c <HAL_RCC_OscConfig+0x4f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800ae2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae30:	3b32      	subs	r3, #50	; 0x32
 800ae32:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800ae36:	f200 8193 	bhi.w	800b160 <HAL_RCC_OscConfig+0x4e8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800ae3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae3c:	2b08      	cmp	r3, #8
 800ae3e:	f200 8179 	bhi.w	800b134 <HAL_RCC_OscConfig+0x4bc>
 800ae42:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800ae46:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4a:	07d8      	lsls	r0, r3, #31
 800ae4c:	f140 8172 	bpl.w	800b134 <HAL_RCC_OscConfig+0x4bc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800ae50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae52:	3b02      	subs	r3, #2
 800ae54:	2b0d      	cmp	r3, #13
 800ae56:	f200 81b0 	bhi.w	800b1ba <HAL_RCC_OscConfig+0x542>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800ae5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ae5c:	3b02      	subs	r3, #2
 800ae5e:	2b05      	cmp	r3, #5
 800ae60:	f200 81a5 	bhi.w	800b1ae <HAL_RCC_OscConfig+0x536>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae64:	4b43      	ldr	r3, [pc, #268]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800ae66:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae68:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800ae6a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800ae6e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ae70:	f7fb fa3a 	bl	80062e8 <HAL_GetTick>
 800ae74:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae76:	e005      	b.n	800ae84 <HAL_RCC_OscConfig+0x20c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae78:	f7fb fa36 	bl	80062e8 <HAL_GetTick>
 800ae7c:	1b80      	subs	r0, r0, r6
 800ae7e:	2802      	cmp	r0, #2
 800ae80:	f200 80bf 	bhi.w	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	0199      	lsls	r1, r3, #6
 800ae88:	d4f6      	bmi.n	800ae78 <HAL_RCC_OscConfig+0x200>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ae8a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800ae8e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ae90:	4313      	orrs	r3, r2
 800ae92:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800ae96:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800ae9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ae9c:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae9e:	4c35      	ldr	r4, [pc, #212]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aea0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800aea4:	3a01      	subs	r2, #1
 800aea6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800aeaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aeae:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800aeb0:	682b      	ldr	r3, [r5, #0]
 800aeb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aeb6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800aeb8:	f7fb fa16 	bl	80062e8 <HAL_GetTick>
 800aebc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aebe:	e005      	b.n	800aecc <HAL_RCC_OscConfig+0x254>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aec0:	f7fb fa12 	bl	80062e8 <HAL_GetTick>
 800aec4:	1b40      	subs	r0, r0, r5
 800aec6:	2802      	cmp	r0, #2
 800aec8:	f200 809b 	bhi.w	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	019a      	lsls	r2, r3, #6
 800aed0:	d5f6      	bpl.n	800aec0 <HAL_RCC_OscConfig+0x248>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800aed2:	2000      	movs	r0, #0
}
 800aed4:	b002      	add	sp, #8
 800aed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800aeda:	f240 1165 	movw	r1, #357	; 0x165
 800aede:	4826      	ldr	r0, [pc, #152]	; (800af78 <HAL_RCC_OscConfig+0x300>)
 800aee0:	f7f8 fe22 	bl	8003b28 <assert_failed>
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	e6d2      	b.n	800ac8e <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aee8:	685b      	ldr	r3, [r3, #4]
 800aeea:	025e      	lsls	r6, r3, #9
 800aeec:	f53f af1c 	bmi.w	800ad28 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aef0:	4b20      	ldr	r3, [pc, #128]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	079d      	lsls	r5, r3, #30
 800aef6:	d566      	bpl.n	800afc6 <HAL_RCC_OscConfig+0x34e>
 800aef8:	68e3      	ldr	r3, [r4, #12]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d063      	beq.n	800afc6 <HAL_RCC_OscConfig+0x34e>
        return HAL_ERROR;
 800aefe:	2001      	movs	r0, #1
}
 800af00:	b002      	add	sp, #8
 800af02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800af06:	f240 119d 	movw	r1, #413	; 0x19d
 800af0a:	481b      	ldr	r0, [pc, #108]	; (800af78 <HAL_RCC_OscConfig+0x300>)
 800af0c:	f7f8 fe0c 	bl	8003b28 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800af10:	6923      	ldr	r3, [r4, #16]
 800af12:	2b1f      	cmp	r3, #31
 800af14:	f67f aefc 	bls.w	800ad10 <HAL_RCC_OscConfig+0x98>
 800af18:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 800af1c:	4816      	ldr	r0, [pc, #88]	; (800af78 <HAL_RCC_OscConfig+0x300>)
 800af1e:	f7f8 fe03 	bl	8003b28 <assert_failed>
 800af22:	e6f5      	b.n	800ad10 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800af24:	4b13      	ldr	r3, [pc, #76]	; (800af74 <HAL_RCC_OscConfig+0x2fc>)
 800af26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af28:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800af2a:	f022 0201 	bic.w	r2, r2, #1
 800af2e:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800af30:	f7fb f9da 	bl	80062e8 <HAL_GetTick>
 800af34:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af36:	e004      	b.n	800af42 <HAL_RCC_OscConfig+0x2ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af38:	f7fb f9d6 	bl	80062e8 <HAL_GetTick>
 800af3c:	1b40      	subs	r0, r0, r5
 800af3e:	2802      	cmp	r0, #2
 800af40:	d85f      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af42:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800af44:	079f      	lsls	r7, r3, #30
 800af46:	d4f7      	bmi.n	800af38 <HAL_RCC_OscConfig+0x2c0>
 800af48:	e754      	b.n	800adf4 <HAL_RCC_OscConfig+0x17c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800af4a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800af4e:	480a      	ldr	r0, [pc, #40]	; (800af78 <HAL_RCC_OscConfig+0x300>)
 800af50:	f7f8 fdea 	bl	8003b28 <assert_failed>
 800af54:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0e4      	beq.n	800af24 <HAL_RCC_OscConfig+0x2ac>
 800af5a:	e738      	b.n	800adce <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800af5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800af5e:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800af60:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800af64:	641a      	str	r2, [r3, #64]	; 0x40
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af6c:	9301      	str	r3, [sp, #4]
 800af6e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800af70:	e70d      	b.n	800ad8e <HAL_RCC_OscConfig+0x116>
 800af72:	bf00      	nop
 800af74:	40023800 	.word	0x40023800
 800af78:	08027dcc 	.word	0x08027dcc
 800af7c:	40007000 	.word	0x40007000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800af80:	4891      	ldr	r0, [pc, #580]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800af82:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800af86:	f7f8 fdcf 	bl	8003b28 <assert_failed>
 800af8a:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af8c:	2800      	cmp	r0, #0
 800af8e:	f47f af3a 	bne.w	800ae06 <HAL_RCC_OscConfig+0x18e>
 800af92:	e79e      	b.n	800aed2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800af94:	f240 116b 	movw	r1, #363	; 0x16b
 800af98:	488b      	ldr	r0, [pc, #556]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800af9a:	f7f8 fdc5 	bl	8003b28 <assert_failed>
 800af9e:	e680      	b.n	800aca2 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afa0:	4a8a      	ldr	r2, [pc, #552]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800afa2:	6813      	ldr	r3, [r2, #0]
 800afa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800afaa:	f7fb f99d 	bl	80062e8 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afae:	4e87      	ldr	r6, [pc, #540]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800afb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afb2:	e004      	b.n	800afbe <HAL_RCC_OscConfig+0x346>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afb4:	f7fb f998 	bl	80062e8 <HAL_GetTick>
 800afb8:	1b40      	subs	r0, r0, r5
 800afba:	2864      	cmp	r0, #100	; 0x64
 800afbc:	d821      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afbe:	6833      	ldr	r3, [r6, #0]
 800afc0:	039a      	lsls	r2, r3, #14
 800afc2:	d5f7      	bpl.n	800afb4 <HAL_RCC_OscConfig+0x33c>
 800afc4:	e699      	b.n	800acfa <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afc6:	4a81      	ldr	r2, [pc, #516]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800afc8:	6921      	ldr	r1, [r4, #16]
 800afca:	6813      	ldr	r3, [r2, #0]
 800afcc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800afd0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800afd8:	071a      	lsls	r2, r3, #28
 800afda:	f57f aec6 	bpl.w	800ad6a <HAL_RCC_OscConfig+0xf2>
 800afde:	e6ef      	b.n	800adc0 <HAL_RCC_OscConfig+0x148>
      PWR->CR1 |= PWR_CR1_DBP;
 800afe0:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800afe2:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800afe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afe8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800afea:	f7fb f97d 	bl	80062e8 <HAL_GetTick>
 800afee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	05d9      	lsls	r1, r3, #23
 800aff4:	f53f aed0 	bmi.w	800ad98 <HAL_RCC_OscConfig+0x120>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aff8:	f7fb f976 	bl	80062e8 <HAL_GetTick>
 800affc:	1b80      	subs	r0, r0, r6
 800affe:	2864      	cmp	r0, #100	; 0x64
 800b000:	d9f6      	bls.n	800aff0 <HAL_RCC_OscConfig+0x378>
            return HAL_TIMEOUT;
 800b002:	2003      	movs	r0, #3
}
 800b004:	b002      	add	sp, #8
 800b006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b00a:	4b70      	ldr	r3, [pc, #448]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800b00c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b00e:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b010:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b014:	601a      	str	r2, [r3, #0]
 800b016:	681a      	ldr	r2, [r3, #0]
 800b018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b01c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b01e:	f7fb f963 	bl	80062e8 <HAL_GetTick>
 800b022:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b024:	e004      	b.n	800b030 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b026:	f7fb f95f 	bl	80062e8 <HAL_GetTick>
 800b02a:	1b40      	subs	r0, r0, r5
 800b02c:	2864      	cmp	r0, #100	; 0x64
 800b02e:	d8e8      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b030:	6833      	ldr	r3, [r6, #0]
 800b032:	039b      	lsls	r3, r3, #14
 800b034:	d4f7      	bmi.n	800b026 <HAL_RCC_OscConfig+0x3ae>
 800b036:	e660      	b.n	800acfa <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b038:	4b64      	ldr	r3, [pc, #400]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b03a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b03e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b040:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b042:	f022 0201 	bic.w	r2, r2, #1
 800b046:	671a      	str	r2, [r3, #112]	; 0x70
 800b048:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b04a:	f022 0204 	bic.w	r2, r2, #4
 800b04e:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b050:	f7fb f94a 	bl	80062e8 <HAL_GetTick>
 800b054:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b056:	e004      	b.n	800b062 <HAL_RCC_OscConfig+0x3ea>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b058:	f7fb f946 	bl	80062e8 <HAL_GetTick>
 800b05c:	1b80      	subs	r0, r0, r6
 800b05e:	4540      	cmp	r0, r8
 800b060:	d8cf      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b064:	079b      	lsls	r3, r3, #30
 800b066:	d4f7      	bmi.n	800b058 <HAL_RCC_OscConfig+0x3e0>
    if (pwrclkchanged == SET)
 800b068:	2d00      	cmp	r5, #0
 800b06a:	f43f aec6 	beq.w	800adfa <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b06e:	4a57      	ldr	r2, [pc, #348]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800b070:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800b072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b076:	6413      	str	r3, [r2, #64]	; 0x40
 800b078:	e6bf      	b.n	800adfa <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 800b07a:	4b54      	ldr	r3, [pc, #336]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800b07c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b07e:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800b080:	f022 0201 	bic.w	r2, r2, #1
 800b084:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800b086:	f7fb f92f 	bl	80062e8 <HAL_GetTick>
 800b08a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08c:	e004      	b.n	800b098 <HAL_RCC_OscConfig+0x420>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b08e:	f7fb f92b 	bl	80062e8 <HAL_GetTick>
 800b092:	1b40      	subs	r0, r0, r5
 800b094:	2802      	cmp	r0, #2
 800b096:	d8b4      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b098:	6833      	ldr	r3, [r6, #0]
 800b09a:	0799      	lsls	r1, r3, #30
 800b09c:	d4f7      	bmi.n	800b08e <HAL_RCC_OscConfig+0x416>
 800b09e:	6823      	ldr	r3, [r4, #0]
 800b0a0:	e661      	b.n	800ad66 <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b0a2:	4a4a      	ldr	r2, [pc, #296]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
 800b0a4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800b0a6:	f043 0301 	orr.w	r3, r3, #1
 800b0aa:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800b0ac:	f7fb f91c 	bl	80062e8 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0b0:	4f46      	ldr	r7, [pc, #280]	; (800b1cc <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0b2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800b0b6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0b8:	e004      	b.n	800b0c4 <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ba:	f7fb f915 	bl	80062e8 <HAL_GetTick>
 800b0be:	1b80      	subs	r0, r0, r6
 800b0c0:	4540      	cmp	r0, r8
 800b0c2:	d89e      	bhi.n	800b002 <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b0c6:	079a      	lsls	r2, r3, #30
 800b0c8:	d5f7      	bpl.n	800b0ba <HAL_RCC_OscConfig+0x442>
    if (pwrclkchanged == SET)
 800b0ca:	2d00      	cmp	r5, #0
 800b0cc:	f43f ae95 	beq.w	800adfa <HAL_RCC_OscConfig+0x182>
 800b0d0:	e7cd      	b.n	800b06e <HAL_RCC_OscConfig+0x3f6>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0d2:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800b0d4:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0d6:	f43f aefd 	beq.w	800aed4 <HAL_RCC_OscConfig+0x25c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0da:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b0de:	69e1      	ldr	r1, [r4, #28]
 800b0e0:	428b      	cmp	r3, r1
 800b0e2:	f47f af0c 	bne.w	800aefe <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0e6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b0ea:	6a21      	ldr	r1, [r4, #32]
 800b0ec:	428b      	cmp	r3, r1
 800b0ee:	f47f af06 	bne.w	800aefe <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b0f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b0f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0f8:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b0fa:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800b0fe:	f47f aefe 	bne.w	800aefe <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b102:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b104:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800b108:	085b      	lsrs	r3, r3, #1
 800b10a:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b10c:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800b110:	f47f aef5 	bne.w	800aefe <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b114:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800b118:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b11a:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800b11e:	f47f aeee 	bne.w	800aefe <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b122:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b124:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b128:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800b12c:	bf14      	ite	ne
 800b12e:	2001      	movne	r0, #1
 800b130:	2000      	moveq	r0, #0
 800b132:	e6cf      	b.n	800aed4 <HAL_RCC_OscConfig+0x25c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800b134:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b138:	4823      	ldr	r0, [pc, #140]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b13a:	f7f8 fcf5 	bl	8003b28 <assert_failed>
 800b13e:	e687      	b.n	800ae50 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b140:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b144:	601a      	str	r2, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e72c      	b.n	800afaa <HAL_RCC_OscConfig+0x332>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b150:	f042 0204 	orr.w	r2, r2, #4
 800b154:	671a      	str	r2, [r3, #112]	; 0x70
 800b156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b158:	f042 0201 	orr.w	r2, r2, #1
 800b15c:	671a      	str	r2, [r3, #112]	; 0x70
 800b15e:	e7a5      	b.n	800b0ac <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800b160:	f240 2157 	movw	r1, #599	; 0x257
 800b164:	4818      	ldr	r0, [pc, #96]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b166:	f7f8 fcdf 	bl	8003b28 <assert_failed>
 800b16a:	e666      	b.n	800ae3a <HAL_RCC_OscConfig+0x1c2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800b16c:	f240 2156 	movw	r1, #598	; 0x256
 800b170:	4815      	ldr	r0, [pc, #84]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b172:	f7f8 fcd9 	bl	8003b28 <assert_failed>
 800b176:	e65a      	b.n	800ae2e <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800b178:	f240 2155 	movw	r1, #597	; 0x255
 800b17c:	4812      	ldr	r0, [pc, #72]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b17e:	f7f8 fcd3 	bl	8003b28 <assert_failed>
 800b182:	e64f      	b.n	800ae24 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 800b184:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b186:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800b188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b18c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800b18e:	f7fb f8ab 	bl	80062e8 <HAL_GetTick>
 800b192:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b194:	e005      	b.n	800b1a2 <HAL_RCC_OscConfig+0x52a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b196:	f7fb f8a7 	bl	80062e8 <HAL_GetTick>
 800b19a:	1b00      	subs	r0, r0, r4
 800b19c:	2802      	cmp	r0, #2
 800b19e:	f63f af30 	bhi.w	800b002 <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	019b      	lsls	r3, r3, #6
 800b1a6:	d4f6      	bmi.n	800b196 <HAL_RCC_OscConfig+0x51e>
 800b1a8:	e693      	b.n	800aed2 <HAL_RCC_OscConfig+0x25a>
    return HAL_ERROR;
 800b1aa:	2001      	movs	r0, #1
}
 800b1ac:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800b1ae:	f240 215b 	movw	r1, #603	; 0x25b
 800b1b2:	4805      	ldr	r0, [pc, #20]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b1b4:	f7f8 fcb8 	bl	8003b28 <assert_failed>
 800b1b8:	e654      	b.n	800ae64 <HAL_RCC_OscConfig+0x1ec>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800b1ba:	f240 2159 	movw	r1, #601	; 0x259
 800b1be:	4802      	ldr	r0, [pc, #8]	; (800b1c8 <HAL_RCC_OscConfig+0x550>)
 800b1c0:	f7f8 fcb2 	bl	8003b28 <assert_failed>
 800b1c4:	e649      	b.n	800ae5a <HAL_RCC_OscConfig+0x1e2>
 800b1c6:	bf00      	nop
 800b1c8:	08027dcc 	.word	0x08027dcc
 800b1cc:	40023800 	.word	0x40023800

0800b1d0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1d0:	4916      	ldr	r1, [pc, #88]	; (800b22c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800b1d2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1d4:	688b      	ldr	r3, [r1, #8]
 800b1d6:	f003 030c 	and.w	r3, r3, #12
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d01b      	beq.n	800b216 <HAL_RCC_GetSysClockFreq+0x46>
 800b1de:	2b08      	cmp	r3, #8
 800b1e0:	d117      	bne.n	800b212 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1e2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b1e4:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1ea:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b1ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800b1f0:	d113      	bne.n	800b21a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1f2:	480f      	ldr	r0, [pc, #60]	; (800b230 <HAL_RCC_GetSysClockFreq+0x60>)
 800b1f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b1f8:	fba1 0100 	umull	r0, r1, r1, r0
 800b1fc:	f7f5 f8d8 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b200:	4b0a      	ldr	r3, [pc, #40]	; (800b22c <HAL_RCC_GetSysClockFreq+0x5c>)
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800b208:	3301      	adds	r3, #1
 800b20a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800b20c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800b210:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800b212:	4807      	ldr	r0, [pc, #28]	; (800b230 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800b214:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b216:	4807      	ldr	r0, [pc, #28]	; (800b234 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800b218:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b21a:	4806      	ldr	r0, [pc, #24]	; (800b234 <HAL_RCC_GetSysClockFreq+0x64>)
 800b21c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800b220:	2300      	movs	r3, #0
 800b222:	fba1 0100 	umull	r0, r1, r1, r0
 800b226:	f7f5 f8c3 	bl	80003b0 <__aeabi_uldivmod>
 800b22a:	e7e9      	b.n	800b200 <HAL_RCC_GetSysClockFreq+0x30>
 800b22c:	40023800 	.word	0x40023800
 800b230:	00f42400 	.word	0x00f42400
 800b234:	007a1200 	.word	0x007a1200

0800b238 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800b238:	2800      	cmp	r0, #0
 800b23a:	f000 80f7 	beq.w	800b42c <HAL_RCC_ClockConfig+0x1f4>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	3b01      	subs	r3, #1
 800b242:	2b0e      	cmp	r3, #14
{
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	4604      	mov	r4, r0
 800b24a:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b24c:	f200 80d7 	bhi.w	800b3fe <HAL_RCC_ClockConfig+0x1c6>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800b250:	2d0f      	cmp	r5, #15
 800b252:	f200 80c4 	bhi.w	800b3de <HAL_RCC_ClockConfig+0x1a6>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b256:	4a82      	ldr	r2, [pc, #520]	; (800b460 <HAL_RCC_ClockConfig+0x228>)
 800b258:	6813      	ldr	r3, [r2, #0]
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	42ab      	cmp	r3, r5
 800b260:	d370      	bcc.n	800b344 <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b262:	6823      	ldr	r3, [r4, #0]
 800b264:	0798      	lsls	r0, r3, #30
 800b266:	d530      	bpl.n	800b2ca <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b268:	0759      	lsls	r1, r3, #29
 800b26a:	d504      	bpl.n	800b276 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b26c:	497d      	ldr	r1, [pc, #500]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b26e:	688a      	ldr	r2, [r1, #8]
 800b270:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800b274:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b276:	071a      	lsls	r2, r3, #28
 800b278:	d504      	bpl.n	800b284 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b27a:	497a      	ldr	r1, [pc, #488]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b27c:	688a      	ldr	r2, [r1, #8]
 800b27e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800b282:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800b284:	68a1      	ldr	r1, [r4, #8]
 800b286:	f021 0220 	bic.w	r2, r1, #32
 800b28a:	f021 0680 	bic.w	r6, r1, #128	; 0x80
 800b28e:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800b292:	2a90      	cmp	r2, #144	; 0x90
 800b294:	bf18      	it	ne
 800b296:	2e00      	cmpne	r6, #0
 800b298:	bf14      	ite	ne
 800b29a:	2201      	movne	r2, #1
 800b29c:	2200      	moveq	r2, #0
 800b29e:	29f0      	cmp	r1, #240	; 0xf0
 800b2a0:	bf0c      	ite	eq
 800b2a2:	2200      	moveq	r2, #0
 800b2a4:	f002 0201 	andne.w	r2, r2, #1
 800b2a8:	28a0      	cmp	r0, #160	; 0xa0
 800b2aa:	bf0c      	ite	eq
 800b2ac:	2200      	moveq	r2, #0
 800b2ae:	f002 0201 	andne.w	r2, r2, #1
 800b2b2:	b122      	cbz	r2, 800b2be <HAL_RCC_ClockConfig+0x86>
 800b2b4:	f021 0210 	bic.w	r2, r1, #16
 800b2b8:	2ac0      	cmp	r2, #192	; 0xc0
 800b2ba:	f040 80b9 	bne.w	800b430 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b2be:	4869      	ldr	r0, [pc, #420]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b2c0:	6882      	ldr	r2, [r0, #8]
 800b2c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800b2c6:	4311      	orrs	r1, r2
 800b2c8:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2ca:	07df      	lsls	r7, r3, #31
 800b2cc:	d527      	bpl.n	800b31e <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b2ce:	6863      	ldr	r3, [r4, #4]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	f200 80a2 	bhi.w	800b41a <HAL_RCC_ClockConfig+0x1e2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2d6:	4a63      	ldr	r2, [pc, #396]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2d8:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2da:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2dc:	f000 8099 	beq.w	800b412 <HAL_RCC_ClockConfig+0x1da>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	f000 8092 	beq.w	800b40a <HAL_RCC_ClockConfig+0x1d2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2e6:	0791      	lsls	r1, r2, #30
 800b2e8:	d529      	bpl.n	800b33e <HAL_RCC_ClockConfig+0x106>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2ea:	495e      	ldr	r1, [pc, #376]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2ec:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2f0:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f2:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2f4:	f022 0203 	bic.w	r2, r2, #3
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800b2fc:	f7fa fff4 	bl	80062e8 <HAL_GetTick>
 800b300:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b302:	e005      	b.n	800b310 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b304:	f7fa fff0 	bl	80062e8 <HAL_GetTick>
 800b308:	1b80      	subs	r0, r0, r6
 800b30a:	4540      	cmp	r0, r8
 800b30c:	f200 808c 	bhi.w	800b428 <HAL_RCC_ClockConfig+0x1f0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6862      	ldr	r2, [r4, #4]
 800b314:	f003 030c 	and.w	r3, r3, #12
 800b318:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800b31c:	d1f2      	bne.n	800b304 <HAL_RCC_ClockConfig+0xcc>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b31e:	4a50      	ldr	r2, [pc, #320]	; (800b460 <HAL_RCC_ClockConfig+0x228>)
 800b320:	6813      	ldr	r3, [r2, #0]
 800b322:	f003 030f 	and.w	r3, r3, #15
 800b326:	42ab      	cmp	r3, r5
 800b328:	d91a      	bls.n	800b360 <HAL_RCC_ClockConfig+0x128>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	f023 030f 	bic.w	r3, r3, #15
 800b330:	432b      	orrs	r3, r5
 800b332:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b334:	6813      	ldr	r3, [r2, #0]
 800b336:	f003 030f 	and.w	r3, r3, #15
 800b33a:	42ab      	cmp	r3, r5
 800b33c:	d010      	beq.n	800b360 <HAL_RCC_ClockConfig+0x128>
    return HAL_ERROR;
 800b33e:	2001      	movs	r0, #1
}
 800b340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b344:	6813      	ldr	r3, [r2, #0]
 800b346:	f023 030f 	bic.w	r3, r3, #15
 800b34a:	432b      	orrs	r3, r5
 800b34c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b34e:	6813      	ldr	r3, [r2, #0]
 800b350:	f003 030f 	and.w	r3, r3, #15
 800b354:	42ab      	cmp	r3, r5
 800b356:	d1f2      	bne.n	800b33e <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	0798      	lsls	r0, r3, #30
 800b35c:	d484      	bmi.n	800b268 <HAL_RCC_ClockConfig+0x30>
 800b35e:	e7b4      	b.n	800b2ca <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b360:	6823      	ldr	r3, [r4, #0]
 800b362:	075a      	lsls	r2, r3, #29
 800b364:	d512      	bpl.n	800b38c <HAL_RCC_ClockConfig+0x154>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b366:	68e1      	ldr	r1, [r4, #12]
 800b368:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800b36c:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800b370:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800b374:	bf18      	it	ne
 800b376:	2a00      	cmpne	r2, #0
 800b378:	d002      	beq.n	800b380 <HAL_RCC_ClockConfig+0x148>
 800b37a:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800b37e:	d15f      	bne.n	800b440 <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b380:	4838      	ldr	r0, [pc, #224]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b382:	6882      	ldr	r2, [r0, #8]
 800b384:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800b388:	430a      	orrs	r2, r1
 800b38a:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b38c:	071b      	lsls	r3, r3, #28
 800b38e:	d513      	bpl.n	800b3b8 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b390:	6922      	ldr	r2, [r4, #16]
 800b392:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800b396:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800b39a:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800b39e:	bf18      	it	ne
 800b3a0:	2b00      	cmpne	r3, #0
 800b3a2:	d002      	beq.n	800b3aa <HAL_RCC_ClockConfig+0x172>
 800b3a4:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800b3a8:	d152      	bne.n	800b450 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b3aa:	492e      	ldr	r1, [pc, #184]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b3ac:	688b      	ldr	r3, [r1, #8]
 800b3ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b3b2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b3b6:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3b8:	f7ff ff0a 	bl	800b1d0 <HAL_RCC_GetSysClockFreq>
 800b3bc:	4a29      	ldr	r2, [pc, #164]	; (800b464 <HAL_RCC_ClockConfig+0x22c>)
 800b3be:	4c2a      	ldr	r4, [pc, #168]	; (800b468 <HAL_RCC_ClockConfig+0x230>)
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800b3c4:	4829      	ldr	r0, [pc, #164]	; (800b46c <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3c6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800b3ca:	4929      	ldr	r1, [pc, #164]	; (800b470 <HAL_RCC_ClockConfig+0x238>)
  HAL_InitTick(uwTickPrio);
 800b3cc:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3ce:	5ca2      	ldrb	r2, [r4, r2]
 800b3d0:	40d3      	lsrs	r3, r2
 800b3d2:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800b3d4:	f7fa f87e 	bl	80054d4 <HAL_InitTick>
  return HAL_OK;
 800b3d8:	2000      	movs	r0, #0
}
 800b3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800b3de:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 800b3e2:	4824      	ldr	r0, [pc, #144]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b3e4:	f7f8 fba0 	bl	8003b28 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3e8:	4b1d      	ldr	r3, [pc, #116]	; (800b460 <HAL_RCC_ClockConfig+0x228>)
      return HAL_ERROR;
 800b3ea:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3ec:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ee:	6819      	ldr	r1, [r3, #0]
 800b3f0:	f021 010f 	bic.w	r1, r1, #15
 800b3f4:	430d      	orrs	r5, r1
 800b3f6:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3f8:	681b      	ldr	r3, [r3, #0]
}
 800b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800b3fe:	f240 21df 	movw	r1, #735	; 0x2df
 800b402:	481c      	ldr	r0, [pc, #112]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b404:	f7f8 fb90 	bl	8003b28 <assert_failed>
 800b408:	e722      	b.n	800b250 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b40a:	0190      	lsls	r0, r2, #6
 800b40c:	f53f af6d 	bmi.w	800b2ea <HAL_RCC_ClockConfig+0xb2>
 800b410:	e795      	b.n	800b33e <HAL_RCC_ClockConfig+0x106>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b412:	0396      	lsls	r6, r2, #14
 800b414:	f53f af69 	bmi.w	800b2ea <HAL_RCC_ClockConfig+0xb2>
 800b418:	e791      	b.n	800b33e <HAL_RCC_ClockConfig+0x106>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800b41a:	f240 310b 	movw	r1, #779	; 0x30b
 800b41e:	4815      	ldr	r0, [pc, #84]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b420:	f7f8 fb82 	bl	8003b28 <assert_failed>
 800b424:	6863      	ldr	r3, [r4, #4]
 800b426:	e756      	b.n	800b2d6 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800b428:	2003      	movs	r0, #3
 800b42a:	e789      	b.n	800b340 <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 800b42c:	2001      	movs	r0, #1
}
 800b42e:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800b430:	f44f 7141 	mov.w	r1, #772	; 0x304
 800b434:	480f      	ldr	r0, [pc, #60]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b436:	f7f8 fb77 	bl	8003b28 <assert_failed>
 800b43a:	68a1      	ldr	r1, [r4, #8]
 800b43c:	6823      	ldr	r3, [r4, #0]
 800b43e:	e73e      	b.n	800b2be <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800b440:	f44f 7152 	mov.w	r1, #840	; 0x348
 800b444:	480b      	ldr	r0, [pc, #44]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b446:	f7f8 fb6f 	bl	8003b28 <assert_failed>
 800b44a:	68e1      	ldr	r1, [r4, #12]
 800b44c:	6823      	ldr	r3, [r4, #0]
 800b44e:	e797      	b.n	800b380 <HAL_RCC_ClockConfig+0x148>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800b450:	f240 314f 	movw	r1, #847	; 0x34f
 800b454:	4807      	ldr	r0, [pc, #28]	; (800b474 <HAL_RCC_ClockConfig+0x23c>)
 800b456:	f7f8 fb67 	bl	8003b28 <assert_failed>
 800b45a:	6922      	ldr	r2, [r4, #16]
 800b45c:	e7a5      	b.n	800b3aa <HAL_RCC_ClockConfig+0x172>
 800b45e:	bf00      	nop
 800b460:	40023c00 	.word	0x40023c00
 800b464:	40023800 	.word	0x40023800
 800b468:	080274f0 	.word	0x080274f0
 800b46c:	200002b0 	.word	0x200002b0
 800b470:	20000250 	.word	0x20000250
 800b474:	08027dcc 	.word	0x08027dcc

0800b478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800b478:	4b01      	ldr	r3, [pc, #4]	; (800b480 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800b47a:	6818      	ldr	r0, [r3, #0]
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	20000250 	.word	0x20000250

0800b484 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b484:	4b04      	ldr	r3, [pc, #16]	; (800b498 <HAL_RCC_GetPCLK1Freq+0x14>)
 800b486:	4a05      	ldr	r2, [pc, #20]	; (800b49c <HAL_RCC_GetPCLK1Freq+0x18>)
 800b488:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b48a:	4905      	ldr	r1, [pc, #20]	; (800b4a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b48c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800b490:	6808      	ldr	r0, [r1, #0]
 800b492:	5cd3      	ldrb	r3, [r2, r3]
}
 800b494:	40d8      	lsrs	r0, r3
 800b496:	4770      	bx	lr
 800b498:	40023800 	.word	0x40023800
 800b49c:	08027500 	.word	0x08027500
 800b4a0:	20000250 	.word	0x20000250

0800b4a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4a4:	4b04      	ldr	r3, [pc, #16]	; (800b4b8 <HAL_RCC_GetPCLK2Freq+0x14>)
 800b4a6:	4a05      	ldr	r2, [pc, #20]	; (800b4bc <HAL_RCC_GetPCLK2Freq+0x18>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800b4aa:	4905      	ldr	r1, [pc, #20]	; (800b4c0 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b4ac:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800b4b0:	6808      	ldr	r0, [r1, #0]
 800b4b2:	5cd3      	ldrb	r3, [r2, r3]
}
 800b4b4:	40d8      	lsrs	r0, r3
 800b4b6:	4770      	bx	lr
 800b4b8:	40023800 	.word	0x40023800
 800b4bc:	08027500 	.word	0x08027500
 800b4c0:	20000250 	.word	0x20000250

0800b4c4 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b4c4:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b4c6:	220f      	movs	r2, #15
 800b4c8:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b4ca:	689a      	ldr	r2, [r3, #8]
 800b4cc:	f002 0203 	and.w	r2, r2, #3
 800b4d0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800b4d8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b4da:	689a      	ldr	r2, [r3, #8]
 800b4dc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800b4e0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b4e2:	689b      	ldr	r3, [r3, #8]
 800b4e4:	08db      	lsrs	r3, r3, #3
{
 800b4e6:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b4e8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b4ec:	4c05      	ldr	r4, [pc, #20]	; (800b504 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800b4ee:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b4f0:	6823      	ldr	r3, [r4, #0]
}
 800b4f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b4f6:	f003 030f 	and.w	r3, r3, #15
 800b4fa:	600b      	str	r3, [r1, #0]
}
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40023800 	.word	0x40023800
 800b504:	40023c00 	.word	0x40023c00

0800b508 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b508:	4a56      	ldr	r2, [pc, #344]	; (800b664 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800b50a:	6803      	ldr	r3, [r0, #0]
 800b50c:	401a      	ands	r2, r3
{
 800b50e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b512:	4604      	mov	r4, r0
 800b514:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800b516:	2a00      	cmp	r2, #0
 800b518:	f000 833f 	beq.w	800bb9a <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b51c:	f013 0601 	ands.w	r6, r3, #1
 800b520:	d00f      	beq.n	800b542 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800b522:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b524:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800b528:	f040 8342 	bne.w	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b52c:	4a4e      	ldr	r2, [pc, #312]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b52e:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b532:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b534:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b536:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800b53a:	6090      	str	r0, [r2, #8]
 800b53c:	6890      	ldr	r0, [r2, #8]
 800b53e:	4301      	orrs	r1, r0
 800b540:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b542:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800b546:	d014      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800b548:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800b54a:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800b54e:	f040 8365 	bne.w	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x714>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b552:	4945      	ldr	r1, [pc, #276]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b554:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b558:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800b55c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b560:	ea42 0205 	orr.w	r2, r2, r5
 800b564:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b568:	f000 831d 	beq.w	800bba6 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b56c:	fab5 f585 	clz	r5, r5
 800b570:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b572:	02df      	lsls	r7, r3, #11
 800b574:	d514      	bpl.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800b576:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b578:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800b57c:	f040 8347 	bne.w	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x706>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b580:	4839      	ldr	r0, [pc, #228]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b582:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b586:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800b58a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b58e:	ea42 0201 	orr.w	r2, r2, r1
 800b592:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b596:	f000 8309 	beq.w	800bbac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800b59a:	2900      	cmp	r1, #0
 800b59c:	bf08      	it	eq
 800b59e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800b5a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b5a4:	bf18      	it	ne
 800b5a6:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b5a8:	0698      	lsls	r0, r3, #26
 800b5aa:	f140 809f 	bpl.w	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800b5ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800b5b0:	492e      	ldr	r1, [pc, #184]	; (800b66c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800b5b2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b5b6:	bf18      	it	ne
 800b5b8:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800b5bc:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800b5c0:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800b5c4:	482a      	ldr	r0, [pc, #168]	; (800b670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800b5c6:	bf14      	ite	ne
 800b5c8:	2301      	movne	r3, #1
 800b5ca:	2300      	moveq	r3, #0
 800b5cc:	458c      	cmp	ip, r1
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2300      	moveq	r3, #0
 800b5d2:	f003 0301 	andne.w	r3, r3, #1
 800b5d6:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800b5da:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800b680 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800b5de:	4287      	cmp	r7, r0
 800b5e0:	bf0c      	ite	eq
 800b5e2:	2300      	moveq	r3, #0
 800b5e4:	f003 0301 	andne.w	r3, r3, #1
 800b5e8:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800b5ec:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800b5f0:	4561      	cmp	r1, ip
 800b5f2:	bf0c      	ite	eq
 800b5f4:	2300      	moveq	r3, #0
 800b5f6:	f003 0301 	andne.w	r3, r3, #1
 800b5fa:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800b5fe:	4287      	cmp	r7, r0
 800b600:	bf0c      	ite	eq
 800b602:	2300      	moveq	r3, #0
 800b604:	f003 0301 	andne.w	r3, r3, #1
 800b608:	4f1a      	ldr	r7, [pc, #104]	; (800b674 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800b60a:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800b60e:	4561      	cmp	r1, ip
 800b610:	bf0c      	ite	eq
 800b612:	2300      	moveq	r3, #0
 800b614:	f003 0301 	andne.w	r3, r3, #1
 800b618:	42b9      	cmp	r1, r7
 800b61a:	bf0c      	ite	eq
 800b61c:	2300      	moveq	r3, #0
 800b61e:	f003 0301 	andne.w	r3, r3, #1
 800b622:	4281      	cmp	r1, r0
 800b624:	bf0c      	ite	eq
 800b626:	2300      	moveq	r3, #0
 800b628:	f003 0301 	andne.w	r3, r3, #1
 800b62c:	b12b      	cbz	r3, 800b63a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800b62e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b632:	4b11      	ldr	r3, [pc, #68]	; (800b678 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800b634:	429a      	cmp	r2, r3
 800b636:	f040 8443 	bne.w	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b63a:	4a0b      	ldr	r2, [pc, #44]	; (800b668 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b63c:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <HAL_RCCEx_PeriphCLKConfig+0x174>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800b63e:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b640:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800b642:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800b646:	6411      	str	r1, [r2, #64]	; 0x40
 800b648:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b64a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b64e:	9201      	str	r2, [sp, #4]
 800b650:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b658:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b65a:	f7fa fe45 	bl	80062e8 <HAL_GetTick>
 800b65e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b660:	e016      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800b662:	bf00      	nop
 800b664:	1dfffff9 	.word	0x1dfffff9
 800b668:	40023800 	.word	0x40023800
 800b66c:	00020300 	.word	0x00020300
 800b670:	00040300 	.word	0x00040300
 800b674:	00140300 	.word	0x00140300
 800b678:	001c0300 	.word	0x001c0300
 800b67c:	40007000 	.word	0x40007000
 800b680:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b684:	f7fa fe30 	bl	80062e8 <HAL_GetTick>
 800b688:	1bc0      	subs	r0, r0, r7
 800b68a:	2864      	cmp	r0, #100	; 0x64
 800b68c:	f200 820d 	bhi.w	800baaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b690:	f8d8 3000 	ldr.w	r3, [r8]
 800b694:	05d9      	lsls	r1, r3, #23
 800b696:	d5f5      	bpl.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b698:	4fc4      	ldr	r7, [pc, #784]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b69c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b69e:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800b6a2:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800b6a6:	d011      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800b6a8:	4291      	cmp	r1, r2
 800b6aa:	d00f      	beq.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6ae:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800b6b4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b6b8:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b6ba:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b6bc:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800b6c0:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b6c2:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b6c4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b6c6:	07d2      	lsls	r2, r2, #31
 800b6c8:	f100 8378 	bmi.w	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b6cc:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800b6d0:	f000 8294 	beq.w	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 800b6d4:	49b5      	ldr	r1, [pc, #724]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6d6:	688a      	ldr	r2, [r1, #8]
 800b6d8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800b6dc:	608a      	str	r2, [r1, #8]
 800b6de:	4ab3      	ldr	r2, [pc, #716]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b6e4:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b6e6:	430b      	orrs	r3, r1
 800b6e8:	6713      	str	r3, [r2, #112]	; 0x70
 800b6ea:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b6ec:	06df      	lsls	r7, r3, #27
 800b6ee:	d510      	bpl.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800b6f0:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800b6f2:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800b6f6:	f040 82bd 	bne.w	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x76c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b6fa:	4aac      	ldr	r2, [pc, #688]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b6fc:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800b700:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800b704:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800b708:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800b70c:	4339      	orrs	r1, r7
 800b70e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b712:	0458      	lsls	r0, r3, #17
 800b714:	d50f      	bpl.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800b716:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b718:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800b71c:	d003      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b71e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b722:	f040 8254 	bne.w	800bbce <HAL_RCCEx_PeriphCLKConfig+0x6c6>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b726:	48a1      	ldr	r0, [pc, #644]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b728:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b72c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800b730:	430a      	orrs	r2, r1
 800b732:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b736:	0419      	lsls	r1, r3, #16
 800b738:	d50f      	bpl.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800b73a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b73c:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800b740:	d003      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800b742:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800b746:	f040 8249 	bne.w	800bbdc <HAL_RCCEx_PeriphCLKConfig+0x6d4>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b74a:	4898      	ldr	r0, [pc, #608]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b74c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b750:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800b754:	430a      	orrs	r2, r1
 800b756:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b75a:	03da      	lsls	r2, r3, #15
 800b75c:	d50f      	bpl.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800b75e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b760:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800b764:	d003      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x266>
 800b766:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b76a:	f040 823f 	bne.w	800bbec <HAL_RCCEx_PeriphCLKConfig+0x6e4>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b76e:	488f      	ldr	r0, [pc, #572]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b770:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b774:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800b778:	430a      	orrs	r2, r1
 800b77a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b77e:	039f      	lsls	r7, r3, #14
 800b780:	d50f      	bpl.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800b782:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b784:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800b788:	d003      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800b78a:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b78e:	f040 8216 	bne.w	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b792:	4886      	ldr	r0, [pc, #536]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b794:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b798:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800b79c:	430a      	orrs	r2, r1
 800b79e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b7a2:	0658      	lsls	r0, r3, #25
 800b7a4:	d50b      	bpl.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800b7a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b7a8:	2903      	cmp	r1, #3
 800b7aa:	f200 82a3 	bhi.w	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b7ae:	487f      	ldr	r0, [pc, #508]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7b0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b7b4:	f022 0203 	bic.w	r2, r2, #3
 800b7b8:	430a      	orrs	r2, r1
 800b7ba:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b7be:	0619      	lsls	r1, r3, #24
 800b7c0:	d50c      	bpl.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800b7c2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b7c4:	f031 020c 	bics.w	r2, r1, #12
 800b7c8:	f040 82b2 	bne.w	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x828>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b7cc:	4877      	ldr	r0, [pc, #476]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7ce:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b7d2:	f022 020c 	bic.w	r2, r2, #12
 800b7d6:	430a      	orrs	r2, r1
 800b7d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b7dc:	05da      	lsls	r2, r3, #23
 800b7de:	d50c      	bpl.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800b7e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b7e2:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800b7e6:	f040 82ab 	bne.w	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x838>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b7ea:	4870      	ldr	r0, [pc, #448]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b7ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b7f0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800b7f4:	430a      	orrs	r2, r1
 800b7f6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b7fa:	059f      	lsls	r7, r3, #22
 800b7fc:	d50c      	bpl.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800b7fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b800:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800b804:	f040 82a4 	bne.w	800bd50 <HAL_RCCEx_PeriphCLKConfig+0x848>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b808:	4868      	ldr	r0, [pc, #416]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b80a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b80e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b812:	430a      	orrs	r2, r1
 800b814:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b818:	0558      	lsls	r0, r3, #21
 800b81a:	d50c      	bpl.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800b81c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b81e:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800b822:	f040 829d 	bne.w	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x858>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b826:	4861      	ldr	r0, [pc, #388]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b828:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b82c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b830:	430a      	orrs	r2, r1
 800b832:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b836:	0519      	lsls	r1, r3, #20
 800b838:	d50c      	bpl.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800b83a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b83c:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800b840:	f040 8296 	bne.w	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x868>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b844:	4859      	ldr	r0, [pc, #356]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b846:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b84a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800b84e:	430a      	orrs	r2, r1
 800b850:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b854:	04da      	lsls	r2, r3, #19
 800b856:	d50c      	bpl.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800b858:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b85a:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800b85e:	f040 828f 	bne.w	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x878>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b862:	4852      	ldr	r0, [pc, #328]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b864:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b868:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800b86c:	430a      	orrs	r2, r1
 800b86e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b872:	049f      	lsls	r7, r3, #18
 800b874:	d50c      	bpl.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800b876:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b878:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800b87c:	f040 8242 	bne.w	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x7fc>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b880:	484a      	ldr	r0, [pc, #296]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b882:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b886:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b88a:	430a      	orrs	r2, r1
 800b88c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b890:	0258      	lsls	r0, r3, #9
 800b892:	d50c      	bpl.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800b894:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b896:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800b89a:	f040 81f2 	bne.w	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x77a>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b89e:	4843      	ldr	r0, [pc, #268]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b8a0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b8a4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b8ae:	0299      	lsls	r1, r3, #10
 800b8b0:	d510      	bpl.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800b8b2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b8b4:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800b8b8:	f040 81eb 	bne.w	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x78a>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b8bc:	483b      	ldr	r0, [pc, #236]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800b8be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b8c2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800b8c6:	bf08      	it	eq
 800b8c8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b8ca:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800b8d4:	f013 0f08 	tst.w	r3, #8
 800b8d8:	bf18      	it	ne
 800b8da:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8dc:	035a      	lsls	r2, r3, #13
 800b8de:	d50c      	bpl.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800b8e0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b8e2:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800b8e6:	f040 8215 	bne.w	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x80c>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b8ea:	4830      	ldr	r0, [pc, #192]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b8ec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b8f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b8fa:	021f      	lsls	r7, r3, #8
 800b8fc:	d50d      	bpl.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800b8fe:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b902:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800b906:	f040 81cc 	bne.w	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x79a>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b90a:	4828      	ldr	r0, [pc, #160]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b90c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b910:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b914:	430a      	orrs	r2, r1
 800b916:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800b91a:	0158      	lsls	r0, r3, #5
 800b91c:	d50d      	bpl.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800b91e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800b922:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800b926:	f040 81cb 	bne.w	800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800b92a:	4820      	ldr	r0, [pc, #128]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b92c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800b930:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b934:	430a      	orrs	r2, r1
 800b936:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b93a:	0119      	lsls	r1, r3, #4
 800b93c:	d50d      	bpl.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800b93e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b942:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800b946:	f040 81c4 	bne.w	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x7ca>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b94a:	4818      	ldr	r0, [pc, #96]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b94c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800b950:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800b954:	430a      	orrs	r2, r1
 800b956:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800b95a:	00da      	lsls	r2, r3, #3
 800b95c:	d50d      	bpl.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800b95e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800b962:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800b966:	f040 81bd 	bne.w	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800b96a:	4910      	ldr	r1, [pc, #64]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b96c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800b970:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b974:	4313      	orrs	r3, r2
 800b976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b97a:	2e01      	cmp	r6, #1
 800b97c:	f000 8099 	beq.w	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b986:	f000 8094 	beq.w	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b98a:	2d01      	cmp	r5, #1
 800b98c:	d003      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x48e>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800b98e:	2000      	movs	r0, #0
}
 800b990:	b003      	add	sp, #12
 800b992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800b998:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b99a:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800b99c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800b9a0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800b9a2:	f7fa fca1 	bl	80062e8 <HAL_GetTick>
 800b9a6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9a8:	e007      	b.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800b9aa:	bf00      	nop
 800b9ac:	40023800 	.word	0x40023800
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b9b0:	f7fa fc9a 	bl	80062e8 <HAL_GetTick>
 800b9b4:	1b40      	subs	r0, r0, r5
 800b9b6:	2864      	cmp	r0, #100	; 0x64
 800b9b8:	d877      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b9ba:	6833      	ldr	r3, [r6, #0]
 800b9bc:	009f      	lsls	r7, r3, #2
 800b9be:	d4f7      	bmi.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800b9c0:	6963      	ldr	r3, [r4, #20]
 800b9c2:	3b32      	subs	r3, #50	; 0x32
 800b9c4:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800b9c8:	d904      	bls.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 800b9ca:	f240 2146 	movw	r1, #582	; 0x246
 800b9ce:	48b9      	ldr	r0, [pc, #740]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800b9d0:	f7f8 f8aa 	bl	8003b28 <assert_failed>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	031d      	lsls	r5, r3, #12
 800b9d8:	f100 8204 	bmi.w	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b9dc:	02d8      	lsls	r0, r3, #11
 800b9de:	d526      	bpl.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x526>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b9e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800b9e2:	bb22      	cbnz	r2, 800ba2e <HAL_RCCEx_PeriphCLKConfig+0x526>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800b9e4:	69a3      	ldr	r3, [r4, #24]
 800b9e6:	3b02      	subs	r3, #2
 800b9e8:	2b0d      	cmp	r3, #13
 800b9ea:	f200 8254 	bhi.w	800be96 <HAL_RCCEx_PeriphCLKConfig+0x98e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800b9ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9f0:	1e59      	subs	r1, r3, #1
 800b9f2:	291f      	cmp	r1, #31
 800b9f4:	f200 8247 	bhi.w	800be86 <HAL_RCCEx_PeriphCLKConfig+0x97e>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b9f8:	4aaf      	ldr	r2, [pc, #700]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b9fa:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b9fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ba00:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ba04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba08:	69a0      	ldr	r0, [r4, #24]
 800ba0a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800ba0e:	4333      	orrs	r3, r6
 800ba10:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ba14:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800ba18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ba1c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ba20:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800ba24:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ba28:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ba2c:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ba2e:	0299      	lsls	r1, r3, #10
 800ba30:	d504      	bpl.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x534>
 800ba32:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800ba34:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800ba38:	f000 820a 	beq.w	800be50 <HAL_RCCEx_PeriphCLKConfig+0x948>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ba3c:	071a      	lsls	r2, r3, #28
 800ba3e:	d522      	bpl.n	800ba86 <HAL_RCCEx_PeriphCLKConfig+0x57e>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800ba40:	69e3      	ldr	r3, [r4, #28]
 800ba42:	3b02      	subs	r3, #2
 800ba44:	2b05      	cmp	r3, #5
 800ba46:	f200 8218 	bhi.w	800be7a <HAL_RCCEx_PeriphCLKConfig+0x972>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800ba4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ba4c:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800ba50:	f040 8227 	bne.w	800bea2 <HAL_RCCEx_PeriphCLKConfig+0x99a>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba54:	4a98      	ldr	r2, [pc, #608]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ba56:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ba58:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ba5c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ba60:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800ba64:	69e4      	ldr	r4, [r4, #28]
 800ba66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ba70:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800ba74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ba78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800ba7c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800ba80:	4303      	orrs	r3, r0
 800ba82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800ba86:	4b8c      	ldr	r3, [pc, #560]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 800ba88:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba8a:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800ba8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ba90:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800ba92:	f7fa fc29 	bl	80062e8 <HAL_GetTick>
 800ba96:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ba98:	682b      	ldr	r3, [r5, #0]
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	f53f af77 	bmi.w	800b98e <HAL_RCCEx_PeriphCLKConfig+0x486>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800baa0:	f7fa fc22 	bl	80062e8 <HAL_GetTick>
 800baa4:	1b00      	subs	r0, r0, r4
 800baa6:	2864      	cmp	r0, #100	; 0x64
 800baa8:	d9f6      	bls.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x590>
        return HAL_TIMEOUT;
 800baaa:	2003      	movs	r0, #3
}
 800baac:	b003      	add	sp, #12
 800baae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800bab2:	4b81      	ldr	r3, [pc, #516]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 800bab4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bab6:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800bab8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800babc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800babe:	f7fa fc13 	bl	80062e8 <HAL_GetTick>
 800bac2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bac4:	e004      	b.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bac6:	f7fa fc0f 	bl	80062e8 <HAL_GetTick>
 800baca:	1b80      	subs	r0, r0, r6
 800bacc:	2864      	cmp	r0, #100	; 0x64
 800bace:	d8ec      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	011b      	lsls	r3, r3, #4
 800bad4:	d4f7      	bmi.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800bad6:	6863      	ldr	r3, [r4, #4]
 800bad8:	3b32      	subs	r3, #50	; 0x32
 800bada:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800bade:	f200 8121 	bhi.w	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x81c>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	07df      	lsls	r7, r3, #31
 800bae6:	d503      	bpl.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
 800bae8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800baea:	2a00      	cmp	r2, #0
 800baec:	f000 8150 	beq.w	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x888>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800baf0:	031e      	lsls	r6, r3, #12
 800baf2:	d504      	bpl.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800baf4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800baf6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800bafa:	f000 8096 	beq.w	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x722>
 800bafe:	02d8      	lsls	r0, r3, #11
 800bb00:	d504      	bpl.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x604>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bb02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bb04:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800bb08:	f000 808f 	beq.w	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x722>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb0c:	01d9      	lsls	r1, r3, #7
 800bb0e:	d514      	bpl.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x632>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800bb10:	6927      	ldr	r7, [r4, #16]
 800bb12:	2f03      	cmp	r7, #3
 800bb14:	f200 818c 	bhi.w	800be30 <HAL_RCCEx_PeriphCLKConfig+0x928>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb18:	4967      	ldr	r1, [pc, #412]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bb1a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb1c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb20:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bb24:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800bb28:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800bb2c:	4332      	orrs	r2, r6
 800bb2e:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800bb32:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800bb36:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb3a:	019a      	lsls	r2, r3, #6
 800bb3c:	d51a      	bpl.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800bb3e:	6923      	ldr	r3, [r4, #16]
 800bb40:	2b03      	cmp	r3, #3
 800bb42:	f200 816f 	bhi.w	800be24 <HAL_RCCEx_PeriphCLKConfig+0x91c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800bb46:	68a3      	ldr	r3, [r4, #8]
 800bb48:	3b02      	subs	r3, #2
 800bb4a:	2b05      	cmp	r3, #5
 800bb4c:	f200 8164 	bhi.w	800be18 <HAL_RCCEx_PeriphCLKConfig+0x910>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800bb50:	68e2      	ldr	r2, [r4, #12]
 800bb52:	1e93      	subs	r3, r2, #2
 800bb54:	2b0d      	cmp	r3, #13
 800bb56:	f200 8158 	bhi.w	800be0a <HAL_RCCEx_PeriphCLKConfig+0x902>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb5a:	6923      	ldr	r3, [r4, #16]
 800bb5c:	6861      	ldr	r1, [r4, #4]
 800bb5e:	041b      	lsls	r3, r3, #16
 800bb60:	68a0      	ldr	r0, [r4, #8]
 800bb62:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800bb66:	4954      	ldr	r1, [pc, #336]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 800bb68:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800bb6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bb70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800bb74:	4b50      	ldr	r3, [pc, #320]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 800bb76:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb78:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800bb7a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bb7e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800bb80:	f7fa fbb2 	bl	80062e8 <HAL_GetTick>
 800bb84:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb86:	e004      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x68a>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bb88:	f7fa fbae 	bl	80062e8 <HAL_GetTick>
 800bb8c:	1b80      	subs	r0, r0, r6
 800bb8e:	2864      	cmp	r0, #100	; 0x64
 800bb90:	d88b      	bhi.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	011b      	lsls	r3, r3, #4
 800bb96:	d5f7      	bpl.n	800bb88 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800bb98:	e6f7      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x482>
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800bb9a:	2174      	movs	r1, #116	; 0x74
 800bb9c:	4845      	ldr	r0, [pc, #276]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bb9e:	f7f7 ffc3 	bl	8003b28 <assert_failed>
 800bba2:	6823      	ldr	r3, [r4, #0]
 800bba4:	e4ba      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x14>
  uint32_t pllsaiused = 0;
 800bba6:	2500      	movs	r5, #0
      plli2sused = 1;
 800bba8:	2601      	movs	r6, #1
 800bbaa:	e4e2      	b.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      plli2sused = 1;
 800bbac:	2601      	movs	r6, #1
 800bbae:	e4f7      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800bbb0:	217a      	movs	r1, #122	; 0x7a
 800bbb2:	4840      	ldr	r0, [pc, #256]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bbb4:	f7f7 ffb8 	bl	8003b28 <assert_failed>
 800bbb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbba:	6823      	ldr	r3, [r4, #0]
 800bbbc:	e4b6      	b.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x24>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800bbbe:	f240 111b 	movw	r1, #283	; 0x11b
 800bbc2:	483c      	ldr	r0, [pc, #240]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bbc4:	f7f7 ffb0 	bl	8003b28 <assert_failed>
 800bbc8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800bbca:	6823      	ldr	r3, [r4, #0]
 800bbcc:	e5e1      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800bbce:	21fd      	movs	r1, #253	; 0xfd
 800bbd0:	4838      	ldr	r0, [pc, #224]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bbd2:	f7f7 ffa9 	bl	8003b28 <assert_failed>
 800bbd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	e5a4      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800bbdc:	f240 1107 	movw	r1, #263	; 0x107
 800bbe0:	4834      	ldr	r0, [pc, #208]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bbe2:	f7f7 ffa1 	bl	8003b28 <assert_failed>
 800bbe6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	e5ae      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x242>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800bbec:	f240 1111 	movw	r1, #273	; 0x111
 800bbf0:	4830      	ldr	r0, [pc, #192]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bbf2:	f7f7 ff99 	bl	8003b28 <assert_failed>
 800bbf6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800bbf8:	6823      	ldr	r3, [r4, #0]
 800bbfa:	e5b8      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bbfc:	482e      	ldr	r0, [pc, #184]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 800bbfe:	492f      	ldr	r1, [pc, #188]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x7b4>)
 800bc00:	6882      	ldr	r2, [r0, #8]
 800bc02:	4019      	ands	r1, r3
 800bc04:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	6082      	str	r2, [r0, #8]
 800bc0c:	e567      	b.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800bc0e:	219e      	movs	r1, #158	; 0x9e
 800bc10:	4828      	ldr	r0, [pc, #160]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bc12:	f7f7 ff89 	bl	8003b28 <assert_failed>
 800bc16:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	e4b1      	b.n	800b580 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800bc1c:	218a      	movs	r1, #138	; 0x8a
 800bc1e:	4825      	ldr	r0, [pc, #148]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bc20:	f7f7 ff82 	bl	8003b28 <assert_failed>
 800bc24:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	e493      	b.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800bc2a:	68e3      	ldr	r3, [r4, #12]
 800bc2c:	3b02      	subs	r3, #2
 800bc2e:	2b0d      	cmp	r3, #13
 800bc30:	f200 80e5 	bhi.w	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800bc34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc36:	1e5e      	subs	r6, r3, #1
 800bc38:	2e1f      	cmp	r6, #31
 800bc3a:	f200 80d8 	bhi.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc3e:	4a1e      	ldr	r2, [pc, #120]	; (800bcb8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bc40:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bc42:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc46:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800bc4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc4e:	68e1      	ldr	r1, [r4, #12]
 800bc50:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800bc54:	433b      	orrs	r3, r7
 800bc56:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800bc5a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800bc5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bc62:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800bc66:	f023 031f 	bic.w	r3, r3, #31
 800bc6a:	4333      	orrs	r3, r6
 800bc6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800bc70:	6823      	ldr	r3, [r4, #0]
 800bc72:	e74b      	b.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x604>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800bc74:	21f3      	movs	r1, #243	; 0xf3
 800bc76:	480f      	ldr	r0, [pc, #60]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bc78:	f7f7 ff56 	bl	8003b28 <assert_failed>
 800bc7c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	e53b      	b.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800bc82:	f240 1175 	movw	r1, #373	; 0x175
 800bc86:	480b      	ldr	r0, [pc, #44]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bc88:	f7f7 ff4e 	bl	8003b28 <assert_failed>
 800bc8c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	e605      	b.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800bc92:	f240 117f 	movw	r1, #383	; 0x17f
 800bc96:	4807      	ldr	r0, [pc, #28]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bc98:	f7f7 ff46 	bl	8003b28 <assert_failed>
 800bc9c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	e60c      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800bca2:	f240 11a1 	movw	r1, #417	; 0x1a1
 800bca6:	4803      	ldr	r0, [pc, #12]	; (800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x7ac>)
 800bca8:	f7f7 ff3e 	bl	8003b28 <assert_failed>
 800bcac:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800bcb0:	6823      	ldr	r3, [r4, #0]
 800bcb2:	e62a      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x402>
 800bcb4:	08027e04 	.word	0x08027e04
 800bcb8:	40023800 	.word	0x40023800
 800bcbc:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800bcc0:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 800bcc4:	4881      	ldr	r0, [pc, #516]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bcc6:	f7f7 ff2f 	bl	8003b28 <assert_failed>
 800bcca:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800bcce:	6823      	ldr	r3, [r4, #0]
 800bcd0:	e62b      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x422>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800bcd2:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800bcd6:	487d      	ldr	r0, [pc, #500]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bcd8:	f7f7 ff26 	bl	8003b28 <assert_failed>
 800bcdc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	e632      	b.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x442>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800bce4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800bce8:	4878      	ldr	r0, [pc, #480]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bcea:	f7f7 ff1d 	bl	8003b28 <assert_failed>
 800bcee:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800bcf2:	e63a      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x462>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800bcf4:	f240 1125 	movw	r1, #293	; 0x125
 800bcf8:	4874      	ldr	r0, [pc, #464]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bcfa:	f7f7 ff15 	bl	8003b28 <assert_failed>
 800bcfe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bd00:	6823      	ldr	r3, [r4, #0]
 800bd02:	e554      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800bd04:	f240 116b 	movw	r1, #363	; 0x16b
 800bd08:	4870      	ldr	r0, [pc, #448]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd0a:	f7f7 ff0d 	bl	8003b28 <assert_failed>
 800bd0e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800bd10:	6823      	ldr	r3, [r4, #0]
 800bd12:	e5b5      	b.n	800b880 <HAL_RCCEx_PeriphCLKConfig+0x378>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800bd14:	f240 1197 	movw	r1, #407	; 0x197
 800bd18:	486c      	ldr	r0, [pc, #432]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd1a:	f7f7 ff05 	bl	8003b28 <assert_failed>
 800bd1e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800bd20:	6823      	ldr	r3, [r4, #0]
 800bd22:	e5e2      	b.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800bd24:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800bd28:	4868      	ldr	r0, [pc, #416]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd2a:	f7f7 fefd 	bl	8003b28 <assert_failed>
 800bd2e:	e6d8      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800bd30:	f240 112f 	movw	r1, #303	; 0x12f
 800bd34:	4865      	ldr	r0, [pc, #404]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd36:	f7f7 fef7 	bl	8003b28 <assert_failed>
 800bd3a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	e545      	b.n	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800bd40:	f240 1139 	movw	r1, #313	; 0x139
 800bd44:	4861      	ldr	r0, [pc, #388]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd46:	f7f7 feef 	bl	8003b28 <assert_failed>
 800bd4a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	e54c      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800bd50:	f240 1143 	movw	r1, #323	; 0x143
 800bd54:	485d      	ldr	r0, [pc, #372]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd56:	f7f7 fee7 	bl	8003b28 <assert_failed>
 800bd5a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	e553      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x300>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800bd60:	f240 114d 	movw	r1, #333	; 0x14d
 800bd64:	4859      	ldr	r0, [pc, #356]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd66:	f7f7 fedf 	bl	8003b28 <assert_failed>
 800bd6a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800bd6c:	6823      	ldr	r3, [r4, #0]
 800bd6e:	e55a      	b.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800bd70:	f240 1157 	movw	r1, #343	; 0x157
 800bd74:	4855      	ldr	r0, [pc, #340]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd76:	f7f7 fed7 	bl	8003b28 <assert_failed>
 800bd7a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800bd7c:	6823      	ldr	r3, [r4, #0]
 800bd7e:	e561      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800bd80:	f240 1161 	movw	r1, #353	; 0x161
 800bd84:	4851      	ldr	r0, [pc, #324]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bd86:	f7f7 fecf 	bl	8003b28 <assert_failed>
 800bd8a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	e568      	b.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800bd90:	68a7      	ldr	r7, [r4, #8]
 800bd92:	1eba      	subs	r2, r7, #2
 800bd94:	2a05      	cmp	r2, #5
 800bd96:	d853      	bhi.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x938>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bd98:	494d      	ldr	r1, [pc, #308]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd9a:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800bd9c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bda0:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800bda4:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800bda8:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800bdac:	4332      	orrs	r2, r6
 800bdae:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800bdb2:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800bdb6:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800bdba:	e699      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
        tickstart = HAL_GetTick();
 800bdbc:	f7fa fa94 	bl	80062e8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdc0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800bdc4:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdc6:	e006      	b.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdc8:	f7fa fa8e 	bl	80062e8 <HAL_GetTick>
 800bdcc:	eba0 0008 	sub.w	r0, r0, r8
 800bdd0:	4548      	cmp	r0, r9
 800bdd2:	f63f ae6a 	bhi.w	800baaa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bdd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bdd8:	079b      	lsls	r3, r3, #30
 800bdda:	d5f5      	bpl.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800bddc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdde:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800bde2:	e473      	b.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bde4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bde6:	2a00      	cmp	r2, #0
 800bde8:	f43f adfc 	beq.w	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800bdec:	e5f6      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800bdee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800bdf2:	4836      	ldr	r0, [pc, #216]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bdf4:	f7f7 fe98 	bl	8003b28 <assert_failed>
 800bdf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdfa:	1e5e      	subs	r6, r3, #1
 800bdfc:	e71f      	b.n	800bc3e <HAL_RCCEx_PeriphCLKConfig+0x736>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800bdfe:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800be02:	4832      	ldr	r0, [pc, #200]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be04:	f7f7 fe90 	bl	8003b28 <assert_failed>
 800be08:	e714      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x72c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800be0a:	f44f 7106 	mov.w	r1, #536	; 0x218
 800be0e:	482f      	ldr	r0, [pc, #188]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be10:	f7f7 fe8a 	bl	8003b28 <assert_failed>
 800be14:	68e2      	ldr	r2, [r4, #12]
 800be16:	e6a0      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x652>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800be18:	f240 2117 	movw	r1, #535	; 0x217
 800be1c:	482b      	ldr	r0, [pc, #172]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be1e:	f7f7 fe83 	bl	8003b28 <assert_failed>
 800be22:	e695      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x648>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800be24:	f240 2116 	movw	r1, #534	; 0x216
 800be28:	4828      	ldr	r0, [pc, #160]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be2a:	f7f7 fe7d 	bl	8003b28 <assert_failed>
 800be2e:	e68a      	b.n	800bb46 <HAL_RCCEx_PeriphCLKConfig+0x63e>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800be30:	f240 2107 	movw	r1, #519	; 0x207
 800be34:	4825      	ldr	r0, [pc, #148]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be36:	f7f7 fe77 	bl	8003b28 <assert_failed>
 800be3a:	6927      	ldr	r7, [r4, #16]
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	e66b      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800be40:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800be44:	4821      	ldr	r0, [pc, #132]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be46:	f7f7 fe6f 	bl	8003b28 <assert_failed>
 800be4a:	68a7      	ldr	r7, [r4, #8]
 800be4c:	6823      	ldr	r3, [r4, #0]
 800be4e:	e7a3      	b.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x890>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800be50:	6a20      	ldr	r0, [r4, #32]
 800be52:	2803      	cmp	r0, #3
 800be54:	d82c      	bhi.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be56:	491e      	ldr	r1, [pc, #120]	; (800bed0 <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800be58:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be5a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800be5e:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800be62:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800be66:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800be6a:	4332      	orrs	r2, r6
 800be6c:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800be70:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800be74:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800be78:	e5e0      	b.n	800ba3c <HAL_RCCEx_PeriphCLKConfig+0x534>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800be7a:	f240 2171 	movw	r1, #625	; 0x271
 800be7e:	4813      	ldr	r0, [pc, #76]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be80:	f7f7 fe52 	bl	8003b28 <assert_failed>
 800be84:	e5e1      	b.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x542>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800be86:	f240 214f 	movw	r1, #591	; 0x24f
 800be8a:	4810      	ldr	r0, [pc, #64]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be8c:	f7f7 fe4c 	bl	8003b28 <assert_failed>
 800be90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800be92:	1e59      	subs	r1, r3, #1
 800be94:	e5b0      	b.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800be96:	f240 214d 	movw	r1, #589	; 0x24d
 800be9a:	480c      	ldr	r0, [pc, #48]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800be9c:	f7f7 fe44 	bl	8003b28 <assert_failed>
 800bea0:	e5a5      	b.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800bea2:	480a      	ldr	r0, [pc, #40]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bea4:	f240 2172 	movw	r1, #626	; 0x272
 800bea8:	f7f7 fe3e 	bl	8003b28 <assert_failed>
 800beac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800beae:	e5d1      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800beb0:	4806      	ldr	r0, [pc, #24]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800beb2:	f240 2162 	movw	r1, #610	; 0x262
 800beb6:	f7f7 fe37 	bl	8003b28 <assert_failed>
 800beba:	6a20      	ldr	r0, [r4, #32]
 800bebc:	6823      	ldr	r3, [r4, #0]
 800bebe:	e7ca      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x94e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800bec0:	21b9      	movs	r1, #185	; 0xb9
 800bec2:	4802      	ldr	r0, [pc, #8]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 800bec4:	f7f7 fe30 	bl	8003b28 <assert_failed>
 800bec8:	f7ff bbb7 	b.w	800b63a <HAL_RCCEx_PeriphCLKConfig+0x132>
 800becc:	08027e04 	.word	0x08027e04
 800bed0:	40023800 	.word	0x40023800

0800bed4 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800bed4:	b1f8      	cbz	r0, 800bf16 <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800bed6:	6802      	ldr	r2, [r0, #0]
{
 800bed8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800beda:	4b10      	ldr	r3, [pc, #64]	; (800bf1c <HAL_RNG_Init+0x48>)
 800bedc:	4604      	mov	r4, r0
 800bede:	429a      	cmp	r2, r3
 800bee0:	d003      	beq.n	800beea <HAL_RNG_Init+0x16>
 800bee2:	21a3      	movs	r1, #163	; 0xa3
 800bee4:	480e      	ldr	r0, [pc, #56]	; (800bf20 <HAL_RNG_Init+0x4c>)
 800bee6:	f7f7 fe1f 	bl	8003b28 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800beea:	7963      	ldrb	r3, [r4, #5]
 800beec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bef0:	b163      	cbz	r3, 800bf0c <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800bef2:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800bef4:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bef6:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800bef8:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800befa:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800befc:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800befe:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800bf00:	f043 0304 	orr.w	r3, r3, #4
 800bf04:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800bf06:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bf08:	60a2      	str	r2, [r4, #8]
}
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
    HAL_RNG_MspInit(hrng);
 800bf0c:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800bf0e:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800bf10:	f7f8 fe46 	bl	8004ba0 <HAL_RNG_MspInit>
 800bf14:	e7ed      	b.n	800bef2 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800bf16:	2001      	movs	r0, #1
}
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	50060800 	.word	0x50060800
 800bf20:	08027e40 	.word	0x08027e40

0800bf24 <SPI_WaitFifoStateUntilTimeout.part.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800bf24:	4603      	mov	r3, r0
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf26:	e9d0 2000 	ldrd	r2, r0, [r0]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf2a:	6851      	ldr	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf2c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bf30:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
 800bf34:	6051      	str	r1, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf36:	d013      	beq.n	800bf60 <SPI_WaitFifoStateUntilTimeout.part.0+0x3c>
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bf38:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800bf3a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800bf3e:	d107      	bne.n	800bf50 <SPI_WaitFifoStateUntilTimeout.part.0+0x2c>
        {
          SPI_RESET_CRC(hspi);
 800bf40:	6811      	ldr	r1, [r2, #0]
 800bf42:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800bf46:	6011      	str	r1, [r2, #0]
 800bf48:	6811      	ldr	r1, [r2, #0]
 800bf4a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 800bf4e:	6011      	str	r1, [r2, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bf50:	2101      	movs	r1, #1

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bf52:	2200      	movs	r2, #0
      }
    }
  }

  return HAL_OK;
}
 800bf54:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800bf56:	f883 105d 	strb.w	r1, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800bf5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800bf5e:	4770      	bx	lr
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf60:	6899      	ldr	r1, [r3, #8]
 800bf62:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800bf66:	d002      	beq.n	800bf6e <SPI_WaitFifoStateUntilTimeout.part.0+0x4a>
 800bf68:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bf6c:	d1e4      	bne.n	800bf38 <SPI_WaitFifoStateUntilTimeout.part.0+0x14>
          __HAL_SPI_DISABLE(hspi);
 800bf6e:	6811      	ldr	r1, [r2, #0]
 800bf70:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800bf74:	6011      	str	r1, [r2, #0]
 800bf76:	e7df      	b.n	800bf38 <SPI_WaitFifoStateUntilTimeout.part.0+0x14>

0800bf78 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800bf78:	b570      	push	{r4, r5, r6, lr}
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf80:	6829      	ldr	r1, [r5, #0]
 800bf82:	e001      	b.n	800bf88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x10>
    if (Timeout != HAL_MAX_DELAY)
 800bf84:	1c63      	adds	r3, r4, #1
 800bf86:	d105      	bne.n	800bf94 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x1c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bf88:	688b      	ldr	r3, [r1, #8]
 800bf8a:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800bf8e:	d1f9      	bne.n	800bf84 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bf94:	f7fa f9a8 	bl	80062e8 <HAL_GetTick>
 800bf98:	1b80      	subs	r0, r0, r6
 800bf9a:	4284      	cmp	r4, r0
 800bf9c:	d8f0      	bhi.n	800bf80 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8>
 800bf9e:	4628      	mov	r0, r5
}
 800bfa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bfa4:	f7ff bfbe 	b.w	800bf24 <SPI_WaitFifoStateUntilTimeout.part.0>

0800bfa8 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfac:	4607      	mov	r7, r0
 800bfae:	460d      	mov	r5, r1
 800bfb0:	4616      	mov	r6, r2
 800bfb2:	4698      	mov	r8, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((hspi->Instance->SR & Fifo) != State)
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	e005      	b.n	800bfc4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x1c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800bfb8:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 800bfbc:	d100      	bne.n	800bfc0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x18>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800bfbe:	7b0a      	ldrb	r2, [r1, #12]
    }

    if (Timeout != HAL_MAX_DELAY)
 800bfc0:	1c73      	adds	r3, r6, #1
 800bfc2:	d105      	bne.n	800bfd0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x28>
  while ((hspi->Instance->SR & Fifo) != State)
 800bfc4:	688c      	ldr	r4, [r1, #8]
 800bfc6:	402c      	ands	r4, r5
 800bfc8:	d1f6      	bne.n	800bfb8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x10>
      }
    }
  }

  return HAL_OK;
}
 800bfca:	4620      	mov	r0, r4
 800bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bfd0:	f7fa f98a 	bl	80062e8 <HAL_GetTick>
 800bfd4:	eba0 0008 	sub.w	r0, r0, r8
 800bfd8:	4286      	cmp	r6, r0
 800bfda:	d8eb      	bhi.n	800bfb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc>
 800bfdc:	4638      	mov	r0, r7
}
 800bfde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe2:	f7ff bf9f 	b.w	800bf24 <SPI_WaitFifoStateUntilTimeout.part.0>
 800bfe6:	bf00      	nop

0800bfe8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	460d      	mov	r5, r1
 800bfec:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bfee:	4613      	mov	r3, r2
 800bff0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bff4:	462a      	mov	r2, r5
{
 800bff6:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bff8:	f7ff ffd6 	bl	800bfa8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800bffc:	b970      	cbnz	r0, 800c01c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bffe:	4632      	mov	r2, r6
 800c000:	4629      	mov	r1, r5
 800c002:	4620      	mov	r0, r4
 800c004:	f7ff ffb8 	bl	800bf78 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800c008:	b940      	cbnz	r0, 800c01c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800c00a:	4633      	mov	r3, r6
 800c00c:	462a      	mov	r2, r5
 800c00e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800c012:	4620      	mov	r0, r4
 800c014:	f7ff ffc8 	bl	800bfa8 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800c018:	b900      	cbnz	r0, 800c01c <SPI_EndRxTxTransaction+0x34>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800c01a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c01c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800c01e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c026:	bd70      	pop	{r4, r5, r6, pc}

0800c028 <HAL_SPI_Init>:
  if (hspi == NULL)
 800c028:	2800      	cmp	r0, #0
 800c02a:	f000 810f 	beq.w	800c24c <HAL_SPI_Init+0x224>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c02e:	6802      	ldr	r2, [r0, #0]
 800c030:	4b90      	ldr	r3, [pc, #576]	; (800c274 <HAL_SPI_Init+0x24c>)
 800c032:	4991      	ldr	r1, [pc, #580]	; (800c278 <HAL_SPI_Init+0x250>)
 800c034:	429a      	cmp	r2, r3
 800c036:	bf18      	it	ne
 800c038:	428a      	cmpne	r2, r1
 800c03a:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800c03e:	bf14      	ite	ne
 800c040:	2301      	movne	r3, #1
 800c042:	2300      	moveq	r3, #0
{
 800c044:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c046:	4d8d      	ldr	r5, [pc, #564]	; (800c27c <HAL_SPI_Init+0x254>)
 800c048:	4604      	mov	r4, r0
 800c04a:	488d      	ldr	r0, [pc, #564]	; (800c280 <HAL_SPI_Init+0x258>)
{
 800c04c:	b083      	sub	sp, #12
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c04e:	42aa      	cmp	r2, r5
 800c050:	bf0c      	ite	eq
 800c052:	2300      	moveq	r3, #0
 800c054:	f003 0301 	andne.w	r3, r3, #1
 800c058:	4282      	cmp	r2, r0
 800c05a:	bf0c      	ite	eq
 800c05c:	2300      	moveq	r3, #0
 800c05e:	f003 0301 	andne.w	r3, r3, #1
 800c062:	428a      	cmp	r2, r1
 800c064:	bf0c      	ite	eq
 800c066:	2300      	moveq	r3, #0
 800c068:	f003 0301 	andne.w	r3, r3, #1
 800c06c:	b11b      	cbz	r3, 800c076 <HAL_SPI_Init+0x4e>
 800c06e:	4b85      	ldr	r3, [pc, #532]	; (800c284 <HAL_SPI_Init+0x25c>)
 800c070:	429a      	cmp	r2, r3
 800c072:	f040 80e5 	bne.w	800c240 <HAL_SPI_Init+0x218>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800c076:	6863      	ldr	r3, [r4, #4]
 800c078:	b11b      	cbz	r3, 800c082 <HAL_SPI_Init+0x5a>
 800c07a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c07e:	f040 80a8 	bne.w	800c1d2 <HAL_SPI_Init+0x1aa>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800c082:	68a3      	ldr	r3, [r4, #8]
 800c084:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800c088:	d003      	beq.n	800c092 <HAL_SPI_Init+0x6a>
 800c08a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c08e:	f040 80bf 	bne.w	800c210 <HAL_SPI_Init+0x1e8>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800c092:	68e2      	ldr	r2, [r4, #12]
 800c094:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800c098:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800c09c:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800c0a0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c0a4:	bf18      	it	ne
 800c0a6:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800c0aa:	bf14      	ite	ne
 800c0ac:	2301      	movne	r3, #1
 800c0ae:	2300      	moveq	r3, #0
 800c0b0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800c0b4:	bf0c      	ite	eq
 800c0b6:	2300      	moveq	r3, #0
 800c0b8:	f003 0301 	andne.w	r3, r3, #1
 800c0bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c0c0:	bf0c      	ite	eq
 800c0c2:	2300      	moveq	r3, #0
 800c0c4:	f003 0301 	andne.w	r3, r3, #1
 800c0c8:	b12b      	cbz	r3, 800c0d6 <HAL_SPI_Init+0xae>
 800c0ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0ce:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800c0d2:	f040 80c9 	bne.w	800c268 <HAL_SPI_Init+0x240>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800c0d6:	69a3      	ldr	r3, [r4, #24]
 800c0d8:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800c0dc:	d003      	beq.n	800c0e6 <HAL_SPI_Init+0xbe>
 800c0de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0e2:	f040 8085 	bne.w	800c1f0 <HAL_SPI_Init+0x1c8>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800c0e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0e8:	f033 0308 	bics.w	r3, r3, #8
 800c0ec:	f040 808a 	bne.w	800c204 <HAL_SPI_Init+0x1dc>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c0f0:	69e3      	ldr	r3, [r4, #28]
 800c0f2:	f023 0318 	bic.w	r3, r3, #24
 800c0f6:	2b20      	cmp	r3, #32
 800c0f8:	d002      	beq.n	800c100 <HAL_SPI_Init+0xd8>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f040 80ae 	bne.w	800c25c <HAL_SPI_Init+0x234>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800c100:	6a23      	ldr	r3, [r4, #32]
 800c102:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800c106:	f040 808f 	bne.w	800c228 <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800c10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c10c:	f033 0210 	bics.w	r2, r3, #16
 800c110:	d165      	bne.n	800c1de <HAL_SPI_Init+0x1b6>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c112:	b943      	cbnz	r3, 800c126 <HAL_SPI_Init+0xfe>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800c114:	6923      	ldr	r3, [r4, #16]
 800c116:	f033 0302 	bics.w	r3, r3, #2
 800c11a:	f040 8099 	bne.w	800c250 <HAL_SPI_Init+0x228>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800c11e:	6963      	ldr	r3, [r4, #20]
 800c120:	2b01      	cmp	r3, #1
 800c122:	f200 8087 	bhi.w	800c234 <HAL_SPI_Init+0x20c>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c126:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c128:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c12c:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800c12e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c132:	2b00      	cmp	r3, #0
 800c134:	d072      	beq.n	800c21c <HAL_SPI_Init+0x1f4>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c136:	68e0      	ldr	r0, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800c138:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800c13a:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c13c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800c140:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c144:	f420 6100 	bic.w	r1, r0, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800c148:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c14a:	bf8c      	ite	hi
 800c14c:	2500      	movhi	r5, #0
 800c14e:	f44f 5580 	movls.w	r5, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800c152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c156:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800c15a:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c15c:	d135      	bne.n	800c1ca <HAL_SPI_Init+0x1a2>
 800c15e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c162:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c164:	b92b      	cbnz	r3, 800c172 <HAL_SPI_Init+0x14a>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c166:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c16a:	bf8c      	ite	hi
 800c16c:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c16e:	2301      	movls	r3, #1
 800c170:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c172:	68a7      	ldr	r7, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c174:	2100      	movs	r1, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c176:	6863      	ldr	r3, [r4, #4]
 800c178:	6926      	ldr	r6, [r4, #16]
 800c17a:	433b      	orrs	r3, r7
 800c17c:	6967      	ldr	r7, [r4, #20]
 800c17e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c180:	6a66      	ldr	r6, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c182:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c184:	9601      	str	r6, [sp, #4]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c186:	69e6      	ldr	r6, [r4, #28]
 800c188:	69a7      	ldr	r7, [r4, #24]
 800c18a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c18c:	9e01      	ldr	r6, [sp, #4]
 800c18e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c192:	f407 7700 	and.w	r7, r7, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c196:	4306      	orrs	r6, r0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c198:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c19a:	f00e 0e04 	and.w	lr, lr, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c19e:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c1a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800c1a2:	4306      	orrs	r6, r0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c1a4:	433b      	orrs	r3, r7
  return HAL_OK;
 800c1a6:	4608      	mov	r0, r1
  hspi->State     = HAL_SPI_STATE_READY;
 800c1a8:	2701      	movs	r7, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c1aa:	ea46 060e 	orr.w	r6, r6, lr
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c1ae:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c1b2:	4335      	orrs	r5, r6
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c1b4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c1b6:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c1b8:	69d3      	ldr	r3, [r2, #28]
 800c1ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1be:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1c0:	6621      	str	r1, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c1c2:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
}
 800c1c6:	b003      	add	sp, #12
 800c1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	469c      	mov	ip, r3
 800c1ce:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1d0:	e7c7      	b.n	800c162 <HAL_SPI_Init+0x13a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800c1d2:	f240 1145 	movw	r1, #325	; 0x145
 800c1d6:	482c      	ldr	r0, [pc, #176]	; (800c288 <HAL_SPI_Init+0x260>)
 800c1d8:	f7f7 fca6 	bl	8003b28 <assert_failed>
 800c1dc:	e751      	b.n	800c082 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800c1de:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800c1e2:	4829      	ldr	r0, [pc, #164]	; (800c288 <HAL_SPI_Init+0x260>)
 800c1e4:	f7f7 fca0 	bl	8003b28 <assert_failed>
 800c1e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d19b      	bne.n	800c126 <HAL_SPI_Init+0xfe>
 800c1ee:	e791      	b.n	800c114 <HAL_SPI_Init+0xec>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800c1f0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800c1f4:	4824      	ldr	r0, [pc, #144]	; (800c288 <HAL_SPI_Init+0x260>)
 800c1f6:	f7f7 fc97 	bl	8003b28 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800c1fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c1fc:	f033 0308 	bics.w	r3, r3, #8
 800c200:	f43f af76 	beq.w	800c0f0 <HAL_SPI_Init+0xc8>
 800c204:	f240 1149 	movw	r1, #329	; 0x149
 800c208:	481f      	ldr	r0, [pc, #124]	; (800c288 <HAL_SPI_Init+0x260>)
 800c20a:	f7f7 fc8d 	bl	8003b28 <assert_failed>
 800c20e:	e76f      	b.n	800c0f0 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800c210:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800c214:	481c      	ldr	r0, [pc, #112]	; (800c288 <HAL_SPI_Init+0x260>)
 800c216:	f7f7 fc87 	bl	8003b28 <assert_failed>
 800c21a:	e73a      	b.n	800c092 <HAL_SPI_Init+0x6a>
    HAL_SPI_MspInit(hspi);
 800c21c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800c21e:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800c222:	f7f8 fcd3 	bl	8004bcc <HAL_SPI_MspInit>
 800c226:	e786      	b.n	800c136 <HAL_SPI_Init+0x10e>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800c228:	f240 114b 	movw	r1, #331	; 0x14b
 800c22c:	4816      	ldr	r0, [pc, #88]	; (800c288 <HAL_SPI_Init+0x260>)
 800c22e:	f7f7 fc7b 	bl	8003b28 <assert_failed>
 800c232:	e76a      	b.n	800c10a <HAL_SPI_Init+0xe2>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800c234:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800c238:	4813      	ldr	r0, [pc, #76]	; (800c288 <HAL_SPI_Init+0x260>)
 800c23a:	f7f7 fc75 	bl	8003b28 <assert_failed>
 800c23e:	e772      	b.n	800c126 <HAL_SPI_Init+0xfe>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800c240:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800c244:	4810      	ldr	r0, [pc, #64]	; (800c288 <HAL_SPI_Init+0x260>)
 800c246:	f7f7 fc6f 	bl	8003b28 <assert_failed>
 800c24a:	e714      	b.n	800c076 <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800c24c:	2001      	movs	r0, #1
}
 800c24e:	4770      	bx	lr
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800c250:	f240 114f 	movw	r1, #335	; 0x14f
 800c254:	480c      	ldr	r0, [pc, #48]	; (800c288 <HAL_SPI_Init+0x260>)
 800c256:	f7f7 fc67 	bl	8003b28 <assert_failed>
 800c25a:	e760      	b.n	800c11e <HAL_SPI_Init+0xf6>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800c25c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800c260:	4809      	ldr	r0, [pc, #36]	; (800c288 <HAL_SPI_Init+0x260>)
 800c262:	f7f7 fc61 	bl	8003b28 <assert_failed>
 800c266:	e74b      	b.n	800c100 <HAL_SPI_Init+0xd8>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800c268:	f240 1147 	movw	r1, #327	; 0x147
 800c26c:	4806      	ldr	r0, [pc, #24]	; (800c288 <HAL_SPI_Init+0x260>)
 800c26e:	f7f7 fc5b 	bl	8003b28 <assert_failed>
 800c272:	e730      	b.n	800c0d6 <HAL_SPI_Init+0xae>
 800c274:	40013000 	.word	0x40013000
 800c278:	40003800 	.word	0x40003800
 800c27c:	40003c00 	.word	0x40003c00
 800c280:	40013400 	.word	0x40013400
 800c284:	40015400 	.word	0x40015400
 800c288:	08027e78 	.word	0x08027e78

0800c28c <HAL_SPI_Transmit>:
{
 800c28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c290:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c292:	6883      	ldr	r3, [r0, #8]
{
 800c294:	b082      	sub	sp, #8
 800c296:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c298:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800c29c:	460f      	mov	r7, r1
 800c29e:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c2a0:	d16b      	bne.n	800c37a <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800c2a2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d070      	beq.n	800c38c <HAL_SPI_Transmit+0x100>
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800c2b0:	f7fa f81a 	bl	80062e8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800c2b4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800c2b8:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	b2d8      	uxtb	r0, r3
 800c2be:	d009      	beq.n	800c2d4 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800c2c0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800c2c2:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800c2c4:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800c2c6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800c2ca:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800c2ce:	b002      	add	sp, #8
 800c2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800c2d4:	2f00      	cmp	r7, #0
 800c2d6:	d0f4      	beq.n	800c2c2 <HAL_SPI_Transmit+0x36>
 800c2d8:	fab8 f388 	clz	r3, r8
 800c2dc:	095b      	lsrs	r3, r3, #5
 800c2de:	f1b8 0f00 	cmp.w	r8, #0
 800c2e2:	d0ee      	beq.n	800c2c2 <HAL_SPI_Transmit+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2e4:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2e6:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c2e8:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2ea:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c2ee:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800c2f2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2f6:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c2f8:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800c2fa:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800c2fe:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c302:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800c306:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    SPI_1LINE_TX(hspi);
 800c30a:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c30c:	d072      	beq.n	800c3f4 <HAL_SPI_Transmit+0x168>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	0652      	lsls	r2, r2, #25
 800c312:	d403      	bmi.n	800c31c <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c31a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c31c:	68e2      	ldr	r2, [r4, #12]
 800c31e:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c322:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c324:	d936      	bls.n	800c394 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c326:	b112      	cbz	r2, 800c32e <HAL_SPI_Transmit+0xa2>
 800c328:	f1b8 0f01 	cmp.w	r8, #1
 800c32c:	d107      	bne.n	800c33e <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c32e:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c332:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800c334:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c336:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800c338:	3a01      	subs	r2, #1
 800c33a:	b292      	uxth	r2, r2
 800c33c:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c33e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c340:	b292      	uxth	r2, r2
 800c342:	b972      	cbnz	r2, 800c362 <HAL_SPI_Transmit+0xd6>
 800c344:	e066      	b.n	800c414 <HAL_SPI_Transmit+0x188>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c346:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c348:	f831 2b02 	ldrh.w	r2, [r1], #2
 800c34c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800c34e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c350:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c352:	3a01      	subs	r2, #1
 800c354:	b292      	uxth	r2, r2
 800c356:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c358:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d059      	beq.n	800c414 <HAL_SPI_Transmit+0x188>
 800c360:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c362:	689a      	ldr	r2, [r3, #8]
 800c364:	0797      	lsls	r7, r2, #30
 800c366:	d4ee      	bmi.n	800c346 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c368:	f7f9 ffbe 	bl	80062e8 <HAL_GetTick>
 800c36c:	1b80      	subs	r0, r0, r6
 800c36e:	42a8      	cmp	r0, r5
 800c370:	d3f2      	bcc.n	800c358 <HAL_SPI_Transmit+0xcc>
 800c372:	1c68      	adds	r0, r5, #1
 800c374:	d0f0      	beq.n	800c358 <HAL_SPI_Transmit+0xcc>
          errorcode = HAL_TIMEOUT;
 800c376:	2003      	movs	r0, #3
 800c378:	e7a3      	b.n	800c2c2 <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800c37a:	f44f 7147 	mov.w	r1, #796	; 0x31c
 800c37e:	4835      	ldr	r0, [pc, #212]	; (800c454 <HAL_SPI_Transmit+0x1c8>)
 800c380:	f7f7 fbd2 	bl	8003b28 <assert_failed>
  __HAL_LOCK(hspi);
 800c384:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d18e      	bne.n	800c2aa <HAL_SPI_Transmit+0x1e>
 800c38c:	2002      	movs	r0, #2
}
 800c38e:	b002      	add	sp, #8
 800c390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c394:	b112      	cbz	r2, 800c39c <HAL_SPI_Transmit+0x110>
 800c396:	f1b8 0f01 	cmp.w	r8, #1
 800c39a:	d10b      	bne.n	800c3b4 <HAL_SPI_Transmit+0x128>
      if (hspi->TxXferCount > 1U)
 800c39c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c39e:	b292      	uxth	r2, r2
 800c3a0:	2a01      	cmp	r2, #1
 800c3a2:	d94d      	bls.n	800c440 <HAL_SPI_Transmit+0x1b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3a4:	f837 2b02 	ldrh.w	r2, [r7], #2
 800c3a8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800c3aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ac:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c3ae:	3b02      	subs	r3, #2
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c3b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c3b6:	b29b      	uxth	r3, r3
 800c3b8:	b983      	cbnz	r3, 800c3dc <HAL_SPI_Transmit+0x150>
 800c3ba:	e02b      	b.n	800c414 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 800c3bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d91c      	bls.n	800c3fe <HAL_SPI_Transmit+0x172>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c3c6:	f831 3b02 	ldrh.w	r3, [r1], #2
 800c3ca:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800c3cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3ce:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c3d0:	3b02      	subs	r3, #2
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800c3d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800c3d8:	b292      	uxth	r2, r2
 800c3da:	b1da      	cbz	r2, 800c414 <HAL_SPI_Transmit+0x188>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3dc:	6822      	ldr	r2, [r4, #0]
 800c3de:	6893      	ldr	r3, [r2, #8]
 800c3e0:	0799      	lsls	r1, r3, #30
 800c3e2:	d4eb      	bmi.n	800c3bc <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3e4:	f7f9 ff80 	bl	80062e8 <HAL_GetTick>
 800c3e8:	1b80      	subs	r0, r0, r6
 800c3ea:	42a8      	cmp	r0, r5
 800c3ec:	d3f3      	bcc.n	800c3d6 <HAL_SPI_Transmit+0x14a>
 800c3ee:	1c6b      	adds	r3, r5, #1
 800c3f0:	d0f1      	beq.n	800c3d6 <HAL_SPI_Transmit+0x14a>
 800c3f2:	e7c0      	b.n	800c376 <HAL_SPI_Transmit+0xea>
    SPI_1LINE_TX(hspi);
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3fa:	601a      	str	r2, [r3, #0]
 800c3fc:	e787      	b.n	800c30e <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800c404:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800c406:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c408:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800c40a:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800c40c:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800c40e:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800c410:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c412:	e7e0      	b.n	800c3d6 <HAL_SPI_Transmit+0x14a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c414:	4632      	mov	r2, r6
 800c416:	4629      	mov	r1, r5
 800c418:	4620      	mov	r0, r4
 800c41a:	f7ff fde5 	bl	800bfe8 <SPI_EndRxTxTransaction>
 800c41e:	b108      	cbz	r0, 800c424 <HAL_SPI_Transmit+0x198>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c420:	2320      	movs	r3, #32
 800c422:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c424:	68a3      	ldr	r3, [r4, #8]
 800c426:	b933      	cbnz	r3, 800c436 <HAL_SPI_Transmit+0x1aa>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c428:	6822      	ldr	r2, [r4, #0]
 800c42a:	9301      	str	r3, [sp, #4]
 800c42c:	68d3      	ldr	r3, [r2, #12]
 800c42e:	9301      	str	r3, [sp, #4]
 800c430:	6893      	ldr	r3, [r2, #8]
 800c432:	9301      	str	r3, [sp, #4]
 800c434:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c436:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800c438:	3800      	subs	r0, #0
 800c43a:	bf18      	it	ne
 800c43c:	2001      	movne	r0, #1
error:
 800c43e:	e740      	b.n	800c2c2 <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c440:	783a      	ldrb	r2, [r7, #0]
 800c442:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800c444:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800c446:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c448:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800c44a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800c44c:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800c44e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800c450:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800c452:	e7af      	b.n	800c3b4 <HAL_SPI_Transmit+0x128>
 800c454:	08027e78 	.word	0x08027e78

0800c458 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c458:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c45a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c45c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c45e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800c462:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c464:	4a10      	ldr	r2, [pc, #64]	; (800c4a8 <TIM_OC5_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c466:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c468:	4d10      	ldr	r5, [pc, #64]	; (800c4ac <TIM_OC5_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800c46a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c46c:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c46e:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800c470:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800c474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c478:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c47c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800c480:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c484:	d00a      	beq.n	800c49c <TIM_OC5_SetConfig+0x44>
 800c486:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c48a:	42a8      	cmp	r0, r5
 800c48c:	d006      	beq.n	800c49c <TIM_OC5_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c48e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800c490:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800c492:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800c494:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c496:	6203      	str	r3, [r0, #32]
}
 800c498:	bcf0      	pop	{r4, r5, r6, r7}
 800c49a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c49c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c4a0:	694d      	ldr	r5, [r1, #20]
 800c4a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800c4a6:	e7f2      	b.n	800c48e <TIM_OC5_SetConfig+0x36>
 800c4a8:	fffeff8f 	.word	0xfffeff8f
 800c4ac:	40010000 	.word	0x40010000

0800c4b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c4b0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4b2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c4b4:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4b6:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4ba:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4bc:	4a10      	ldr	r2, [pc, #64]	; (800c500 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4be:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4c0:	4d10      	ldr	r5, [pc, #64]	; (800c504 <TIM_OC6_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800c4c2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800c4c4:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4c6:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800c4c8:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c4cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c4d0:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c4d4:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4d8:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4dc:	d00a      	beq.n	800c4f4 <TIM_OC6_SetConfig+0x44>
 800c4de:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800c4e2:	42a8      	cmp	r0, r5
 800c4e4:	d006      	beq.n	800c4f4 <TIM_OC6_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c4e6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800c4e8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800c4ea:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800c4ec:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4ee:	6203      	str	r3, [r0, #32]
}
 800c4f0:	bcf0      	pop	{r4, r5, r6, r7}
 800c4f2:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c4f4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c4f8:	694d      	ldr	r5, [r1, #20]
 800c4fa:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800c4fe:	e7f2      	b.n	800c4e6 <TIM_OC6_SetConfig+0x36>
 800c500:	feff8fff 	.word	0xfeff8fff
 800c504:	40010000 	.word	0x40010000

0800c508 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c508:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c50a:	4b2d      	ldr	r3, [pc, #180]	; (800c5c0 <TIM_OC1_SetConfig+0xb8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c50c:	f022 0201 	bic.w	r2, r2, #1
{
 800c510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c514:	4604      	mov	r4, r0
 800c516:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c518:	492a      	ldr	r1, [pc, #168]	; (800c5c4 <TIM_OC1_SetConfig+0xbc>)
  tmpccer |= OC_Config->OCPolarity;
 800c51a:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800c51e:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c520:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c522:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800c524:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800c526:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800c528:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800c52a:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c52e:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= OC_Config->OCPolarity;
 800c532:	ea45 050c 	orr.w	r5, r5, ip
  tmpccmrx |= OC_Config->OCMode;
 800c536:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c53a:	d00a      	beq.n	800c552 <TIM_OC1_SetConfig+0x4a>
 800c53c:	4b22      	ldr	r3, [pc, #136]	; (800c5c8 <TIM_OC1_SetConfig+0xc0>)
 800c53e:	429c      	cmp	r4, r3
 800c540:	d007      	beq.n	800c552 <TIM_OC1_SetConfig+0x4a>
  TIMx->CCR1 = OC_Config->Pulse;
 800c542:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800c544:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800c546:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800c54a:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800c54c:	6225      	str	r5, [r4, #32]
}
 800c54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c552:	68f2      	ldr	r2, [r6, #12]
 800c554:	f032 0308 	bics.w	r3, r2, #8
 800c558:	d120      	bne.n	800c59c <TIM_OC1_SetConfig+0x94>
    tmpccer &= ~TIM_CCER_CC1NP;
 800c55a:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c55e:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800c560:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c562:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800c566:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c56a:	d11e      	bne.n	800c5aa <TIM_OC1_SetConfig+0xa2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c56c:	6973      	ldr	r3, [r6, #20]
 800c56e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c572:	d106      	bne.n	800c582 <TIM_OC1_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c574:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800c578:	69b1      	ldr	r1, [r6, #24]
 800c57a:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800c57c:	ea42 0703 	orr.w	r7, r2, r3
 800c580:	e7df      	b.n	800c542 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c582:	f241 7199 	movw	r1, #6041	; 0x1799
 800c586:	4811      	ldr	r0, [pc, #68]	; (800c5cc <TIM_OC1_SetConfig+0xc4>)
 800c588:	f7f7 face 	bl	8003b28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c58c:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800c590:	69b1      	ldr	r1, [r6, #24]
 800c592:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800c594:	430a      	orrs	r2, r1
 800c596:	ea42 0703 	orr.w	r7, r2, r3
 800c59a:	e7d2      	b.n	800c542 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c59c:	f241 718b 	movw	r1, #6027	; 0x178b
 800c5a0:	480a      	ldr	r0, [pc, #40]	; (800c5cc <TIM_OC1_SetConfig+0xc4>)
 800c5a2:	f7f7 fac1 	bl	8003b28 <assert_failed>
 800c5a6:	68f2      	ldr	r2, [r6, #12]
 800c5a8:	e7d7      	b.n	800c55a <TIM_OC1_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c5aa:	f241 7198 	movw	r1, #6040	; 0x1798
 800c5ae:	4807      	ldr	r0, [pc, #28]	; (800c5cc <TIM_OC1_SetConfig+0xc4>)
 800c5b0:	f7f7 faba 	bl	8003b28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c5b4:	6973      	ldr	r3, [r6, #20]
 800c5b6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c5ba:	d0db      	beq.n	800c574 <TIM_OC1_SetConfig+0x6c>
 800c5bc:	e7e1      	b.n	800c582 <TIM_OC1_SetConfig+0x7a>
 800c5be:	bf00      	nop
 800c5c0:	fffeff8c 	.word	0xfffeff8c
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40010400 	.word	0x40010400
 800c5cc:	08027eb0 	.word	0x08027eb0

0800c5d0 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5d0:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5d2:	4b2e      	ldr	r3, [pc, #184]	; (800c68c <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800c5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5dc:	4604      	mov	r4, r0
 800c5de:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5e0:	492b      	ldr	r1, [pc, #172]	; (800c690 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5e2:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800c5e6:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c5e8:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5ea:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800c5ec:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800c5ee:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800c5f0:	69e2      	ldr	r2, [r4, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800c5f2:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5f6:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5fa:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800c5fe:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c602:	d00a      	beq.n	800c61a <TIM_OC3_SetConfig+0x4a>
 800c604:	4b23      	ldr	r3, [pc, #140]	; (800c694 <TIM_OC3_SetConfig+0xc4>)
 800c606:	429c      	cmp	r4, r3
 800c608:	d007      	beq.n	800c61a <TIM_OC3_SetConfig+0x4a>
  TIMx->CCR3 = OC_Config->Pulse;
 800c60a:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800c60c:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c60e:	f8c4 801c 	str.w	r8, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800c612:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800c614:	6225      	str	r5, [r4, #32]
}
 800c616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c61a:	68f2      	ldr	r2, [r6, #12]
 800c61c:	f032 0308 	bics.w	r3, r2, #8
 800c620:	d123      	bne.n	800c66a <TIM_OC3_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800c622:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c626:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c628:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c62c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800c630:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c634:	d120      	bne.n	800c678 <TIM_OC3_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c636:	6973      	ldr	r3, [r6, #20]
 800c638:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c63c:	d107      	bne.n	800c64e <TIM_OC3_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c63e:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c642:	69b1      	ldr	r1, [r6, #24]
 800c644:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800c648:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800c64c:	e7dd      	b.n	800c60a <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c64e:	f641 012f 	movw	r1, #6191	; 0x182f
 800c652:	4811      	ldr	r0, [pc, #68]	; (800c698 <TIM_OC3_SetConfig+0xc8>)
 800c654:	f7f7 fa68 	bl	8003b28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c658:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c65c:	69b1      	ldr	r1, [r6, #24]
 800c65e:	6973      	ldr	r3, [r6, #20]
 800c660:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800c664:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800c668:	e7cf      	b.n	800c60a <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800c66a:	f641 0121 	movw	r1, #6177	; 0x1821
 800c66e:	480a      	ldr	r0, [pc, #40]	; (800c698 <TIM_OC3_SetConfig+0xc8>)
 800c670:	f7f7 fa5a 	bl	8003b28 <assert_failed>
 800c674:	68f2      	ldr	r2, [r6, #12]
 800c676:	e7d4      	b.n	800c622 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800c678:	f641 012e 	movw	r1, #6190	; 0x182e
 800c67c:	4806      	ldr	r0, [pc, #24]	; (800c698 <TIM_OC3_SetConfig+0xc8>)
 800c67e:	f7f7 fa53 	bl	8003b28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c682:	6973      	ldr	r3, [r6, #20]
 800c684:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800c688:	d0d9      	beq.n	800c63e <TIM_OC3_SetConfig+0x6e>
 800c68a:	e7e0      	b.n	800c64e <TIM_OC3_SetConfig+0x7e>
 800c68c:	fffeff8c 	.word	0xfffeff8c
 800c690:	40010000 	.word	0x40010000
 800c694:	40010400 	.word	0x40010400
 800c698:	08027eb0 	.word	0x08027eb0

0800c69c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c69c:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c69e:	4a1d      	ldr	r2, [pc, #116]	; (800c714 <TIM_OC4_SetConfig+0x78>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800c6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6a6:	4604      	mov	r4, r0
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6a8:	4f1b      	ldr	r7, [pc, #108]	; (800c718 <TIM_OC4_SetConfig+0x7c>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6aa:	6888      	ldr	r0, [r1, #8]
{
 800c6ac:	460d      	mov	r5, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6ae:	6809      	ldr	r1, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6b0:	4294      	cmp	r4, r2
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6b2:	6223      	str	r3, [r4, #32]
{
 800c6b4:	b083      	sub	sp, #12
  tmpccer = TIMx->CCER;
 800c6b6:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800c6b8:	6863      	ldr	r3, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800c6ba:	f8d4 c01c 	ldr.w	ip, [r4, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800c6be:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6c2:	ea0c 0707 	and.w	r7, ip, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c6c6:	ea46 3600 	orr.w	r6, r6, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6ca:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ce:	d00a      	beq.n	800c6e6 <TIM_OC4_SetConfig+0x4a>
 800c6d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c6d4:	4294      	cmp	r4, r2
 800c6d6:	d006      	beq.n	800c6e6 <TIM_OC4_SetConfig+0x4a>
  TIMx->CCR4 = OC_Config->Pulse;
 800c6d8:	686a      	ldr	r2, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800c6da:	6063      	str	r3, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800c6dc:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800c6de:	6422      	str	r2, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800c6e0:	6226      	str	r6, [r4, #32]
}
 800c6e2:	b003      	add	sp, #12
 800c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c6e6:	696a      	ldr	r2, [r5, #20]
 800c6e8:	f432 7180 	bics.w	r1, r2, #256	; 0x100
 800c6ec:	d104      	bne.n	800c6f8 <TIM_OC4_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6f2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c6f6:	e7ef      	b.n	800c6d8 <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800c6f8:	f641 016d 	movw	r1, #6253	; 0x186d
 800c6fc:	4807      	ldr	r0, [pc, #28]	; (800c71c <TIM_OC4_SetConfig+0x80>)
 800c6fe:	9301      	str	r3, [sp, #4]
 800c700:	f7f7 fa12 	bl	8003b28 <assert_failed>
 800c704:	9b01      	ldr	r3, [sp, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c706:	696a      	ldr	r2, [r5, #20]
 800c708:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c70c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800c710:	e7e2      	b.n	800c6d8 <TIM_OC4_SetConfig+0x3c>
 800c712:	bf00      	nop
 800c714:	40010000 	.word	0x40010000
 800c718:	feff8cff 	.word	0xfeff8cff
 800c71c:	08027eb0 	.word	0x08027eb0

0800c720 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c722:	6803      	ldr	r3, [r0, #0]
{
 800c724:	460c      	mov	r4, r1

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c726:	684a      	ldr	r2, [r1, #4]
{
 800c728:	4607      	mov	r7, r0
  tmpsmcr = htim->Instance->SMCR;
 800c72a:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c72c:	4dac      	ldr	r5, [pc, #688]	; (800c9e0 <TIM_SlaveTimer_SetConfig+0x2c0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c72e:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800c730:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c734:	6826      	ldr	r6, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c736:	ea41 0102 	orr.w	r1, r1, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c73a:	ea05 0501 	and.w	r5, r5, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c73e:	ea45 0506 	orr.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 800c742:	609d      	str	r5, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800c744:	f000 8091 	beq.w	800c86a <TIM_SlaveTimer_SetConfig+0x14a>
 800c748:	d953      	bls.n	800c7f2 <TIM_SlaveTimer_SetConfig+0xd2>
 800c74a:	2a60      	cmp	r2, #96	; 0x60
 800c74c:	f000 80f8 	beq.w	800c940 <TIM_SlaveTimer_SetConfig+0x220>
 800c750:	2a70      	cmp	r2, #112	; 0x70
 800c752:	f040 8083 	bne.w	800c85c <TIM_SlaveTimer_SetConfig+0x13c>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800c756:	4aa3      	ldr	r2, [pc, #652]	; (800c9e4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800c758:	49a3      	ldr	r1, [pc, #652]	; (800c9e8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	bf18      	it	ne
 800c75e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c762:	48a2      	ldr	r0, [pc, #648]	; (800c9ec <TIM_SlaveTimer_SetConfig+0x2cc>)
 800c764:	bf14      	ite	ne
 800c766:	2201      	movne	r2, #1
 800c768:	2200      	moveq	r2, #0
 800c76a:	428b      	cmp	r3, r1
 800c76c:	bf0c      	ite	eq
 800c76e:	2200      	moveq	r2, #0
 800c770:	f002 0201 	andne.w	r2, r2, #1
 800c774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c778:	4283      	cmp	r3, r0
 800c77a:	bf0c      	ite	eq
 800c77c:	2200      	moveq	r2, #0
 800c77e:	f002 0201 	andne.w	r2, r2, #1
 800c782:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800c786:	428b      	cmp	r3, r1
 800c788:	bf0c      	ite	eq
 800c78a:	2200      	moveq	r2, #0
 800c78c:	f002 0201 	andne.w	r2, r2, #1
 800c790:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800c794:	4283      	cmp	r3, r0
 800c796:	bf0c      	ite	eq
 800c798:	2200      	moveq	r2, #0
 800c79a:	f002 0201 	andne.w	r2, r2, #1
 800c79e:	428b      	cmp	r3, r1
 800c7a0:	bf0c      	ite	eq
 800c7a2:	2200      	moveq	r2, #0
 800c7a4:	f002 0201 	andne.w	r2, r2, #1
 800c7a8:	b11a      	cbz	r2, 800c7b2 <TIM_SlaveTimer_SetConfig+0x92>
 800c7aa:	4a91      	ldr	r2, [pc, #580]	; (800c9f0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	f040 81c8 	bne.w	800cb42 <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800c7b8:	f040 81a5 	bne.w	800cb06 <TIM_SlaveTimer_SetConfig+0x3e6>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800c7bc:	68a3      	ldr	r3, [r4, #8]
 800c7be:	2b0a      	cmp	r3, #10
 800c7c0:	bf18      	it	ne
 800c7c2:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c7c6:	d003      	beq.n	800c7d0 <TIM_SlaveTimer_SetConfig+0xb0>
 800c7c8:	f033 0302 	bics.w	r3, r3, #2
 800c7cc:	f040 81a1 	bne.w	800cb12 <TIM_SlaveTimer_SetConfig+0x3f2>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c7d0:	6921      	ldr	r1, [r4, #16]
 800c7d2:	290f      	cmp	r1, #15
 800c7d4:	f200 8173 	bhi.w	800cabe <TIM_SlaveTimer_SetConfig+0x39e>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c7d8:	683d      	ldr	r5, [r7, #0]
    }

    default:
      break;
  }
  return HAL_OK;
 800c7da:	2000      	movs	r0, #0
 800c7dc:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7de:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7e0:	68a4      	ldr	r4, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7e2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800c7e6:	4323      	orrs	r3, r4
 800c7e8:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ee:	60ab      	str	r3, [r5, #8]
}
 800c7f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800c7f2:	2a40      	cmp	r2, #64	; 0x40
 800c7f4:	f000 8104 	beq.w	800ca00 <TIM_SlaveTimer_SetConfig+0x2e0>
 800c7f8:	d830      	bhi.n	800c85c <TIM_SlaveTimer_SetConfig+0x13c>
 800c7fa:	2a20      	cmp	r2, #32
 800c7fc:	d002      	beq.n	800c804 <TIM_SlaveTimer_SetConfig+0xe4>
 800c7fe:	d92f      	bls.n	800c860 <TIM_SlaveTimer_SetConfig+0x140>
 800c800:	2a30      	cmp	r2, #48	; 0x30
 800c802:	d12b      	bne.n	800c85c <TIM_SlaveTimer_SetConfig+0x13c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c804:	4a77      	ldr	r2, [pc, #476]	; (800c9e4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800c806:	4978      	ldr	r1, [pc, #480]	; (800c9e8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800c808:	4293      	cmp	r3, r2
 800c80a:	bf18      	it	ne
 800c80c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c810:	4d76      	ldr	r5, [pc, #472]	; (800c9ec <TIM_SlaveTimer_SetConfig+0x2cc>)
 800c812:	4c78      	ldr	r4, [pc, #480]	; (800c9f4 <TIM_SlaveTimer_SetConfig+0x2d4>)
 800c814:	bf14      	ite	ne
 800c816:	2201      	movne	r2, #1
 800c818:	2200      	moveq	r2, #0
 800c81a:	4877      	ldr	r0, [pc, #476]	; (800c9f8 <TIM_SlaveTimer_SetConfig+0x2d8>)
 800c81c:	428b      	cmp	r3, r1
 800c81e:	bf0c      	ite	eq
 800c820:	2200      	moveq	r2, #0
 800c822:	f002 0201 	andne.w	r2, r2, #1
 800c826:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800c82a:	42ab      	cmp	r3, r5
 800c82c:	bf0c      	ite	eq
 800c82e:	2200      	moveq	r2, #0
 800c830:	f002 0201 	andne.w	r2, r2, #1
 800c834:	42a3      	cmp	r3, r4
 800c836:	bf0c      	ite	eq
 800c838:	2200      	moveq	r2, #0
 800c83a:	f002 0201 	andne.w	r2, r2, #1
 800c83e:	4283      	cmp	r3, r0
 800c840:	bf0c      	ite	eq
 800c842:	2200      	moveq	r2, #0
 800c844:	f002 0201 	andne.w	r2, r2, #1
 800c848:	428b      	cmp	r3, r1
 800c84a:	bf0c      	ite	eq
 800c84c:	2200      	moveq	r2, #0
 800c84e:	f002 0201 	andne.w	r2, r2, #1
 800c852:	b11a      	cbz	r2, 800c85c <TIM_SlaveTimer_SetConfig+0x13c>
 800c854:	4a66      	ldr	r2, [pc, #408]	; (800c9f0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800c856:	4293      	cmp	r3, r2
 800c858:	f040 814c 	bne.w	800caf4 <TIM_SlaveTimer_SetConfig+0x3d4>
  return HAL_OK;
 800c85c:	2000      	movs	r0, #0
}
 800c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800c860:	f032 0210 	bics.w	r2, r2, #16
 800c864:	d0ce      	beq.n	800c804 <TIM_SlaveTimer_SetConfig+0xe4>
  return HAL_OK;
 800c866:	2000      	movs	r0, #0
 800c868:	e7f9      	b.n	800c85e <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800c86a:	4a5e      	ldr	r2, [pc, #376]	; (800c9e4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800c86c:	495e      	ldr	r1, [pc, #376]	; (800c9e8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	bf18      	it	ne
 800c872:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c876:	485d      	ldr	r0, [pc, #372]	; (800c9ec <TIM_SlaveTimer_SetConfig+0x2cc>)
 800c878:	bf14      	ite	ne
 800c87a:	2201      	movne	r2, #1
 800c87c:	2200      	moveq	r2, #0
 800c87e:	428b      	cmp	r3, r1
 800c880:	bf0c      	ite	eq
 800c882:	2200      	moveq	r2, #0
 800c884:	f002 0201 	andne.w	r2, r2, #1
 800c888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c88c:	4283      	cmp	r3, r0
 800c88e:	bf0c      	ite	eq
 800c890:	2200      	moveq	r2, #0
 800c892:	f002 0201 	andne.w	r2, r2, #1
 800c896:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800c89a:	428b      	cmp	r3, r1
 800c89c:	bf0c      	ite	eq
 800c89e:	2200      	moveq	r2, #0
 800c8a0:	f002 0201 	andne.w	r2, r2, #1
 800c8a4:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800c8a8:	4283      	cmp	r3, r0
 800c8aa:	bf0c      	ite	eq
 800c8ac:	2200      	moveq	r2, #0
 800c8ae:	f002 0201 	andne.w	r2, r2, #1
 800c8b2:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800c8b6:	428b      	cmp	r3, r1
 800c8b8:	bf0c      	ite	eq
 800c8ba:	2200      	moveq	r2, #0
 800c8bc:	f002 0201 	andne.w	r2, r2, #1
 800c8c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8c4:	4283      	cmp	r3, r0
 800c8c6:	bf0c      	ite	eq
 800c8c8:	2200      	moveq	r2, #0
 800c8ca:	f002 0201 	andne.w	r2, r2, #1
 800c8ce:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800c8d2:	428b      	cmp	r3, r1
 800c8d4:	bf0c      	ite	eq
 800c8d6:	2200      	moveq	r2, #0
 800c8d8:	f002 0201 	andne.w	r2, r2, #1
 800c8dc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800c8e0:	4283      	cmp	r3, r0
 800c8e2:	bf0c      	ite	eq
 800c8e4:	2200      	moveq	r2, #0
 800c8e6:	f002 0201 	andne.w	r2, r2, #1
 800c8ea:	428b      	cmp	r3, r1
 800c8ec:	bf0c      	ite	eq
 800c8ee:	2200      	moveq	r2, #0
 800c8f0:	f002 0201 	andne.w	r2, r2, #1
 800c8f4:	b11a      	cbz	r2, 800c8fe <TIM_SlaveTimer_SetConfig+0x1de>
 800c8f6:	4a41      	ldr	r2, [pc, #260]	; (800c9fc <TIM_SlaveTimer_SetConfig+0x2dc>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	f040 812e 	bne.w	800cb5a <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800c8fe:	68a3      	ldr	r3, [r4, #8]
 800c900:	2b0a      	cmp	r3, #10
 800c902:	bf18      	it	ne
 800c904:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c908:	d003      	beq.n	800c912 <TIM_SlaveTimer_SetConfig+0x1f2>
 800c90a:	f033 0302 	bics.w	r3, r3, #2
 800c90e:	f040 810c 	bne.w	800cb2a <TIM_SlaveTimer_SetConfig+0x40a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c912:	6926      	ldr	r6, [r4, #16]
 800c914:	2e0f      	cmp	r6, #15
 800c916:	f200 80df 	bhi.w	800cad8 <TIM_SlaveTimer_SetConfig+0x3b8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c91a:	683b      	ldr	r3, [r7, #0]
  return HAL_OK;
 800c91c:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c91e:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800c920:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c922:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c924:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c928:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800c92c:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c92e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c930:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c932:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c936:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800c93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c93c:	6219      	str	r1, [r3, #32]
}
 800c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800c940:	4a28      	ldr	r2, [pc, #160]	; (800c9e4 <TIM_SlaveTimer_SetConfig+0x2c4>)
 800c942:	4929      	ldr	r1, [pc, #164]	; (800c9e8 <TIM_SlaveTimer_SetConfig+0x2c8>)
 800c944:	4293      	cmp	r3, r2
 800c946:	bf18      	it	ne
 800c948:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800c94c:	4827      	ldr	r0, [pc, #156]	; (800c9ec <TIM_SlaveTimer_SetConfig+0x2cc>)
 800c94e:	bf14      	ite	ne
 800c950:	2201      	movne	r2, #1
 800c952:	2200      	moveq	r2, #0
 800c954:	428b      	cmp	r3, r1
 800c956:	bf0c      	ite	eq
 800c958:	2200      	moveq	r2, #0
 800c95a:	f002 0201 	andne.w	r2, r2, #1
 800c95e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c962:	4283      	cmp	r3, r0
 800c964:	bf0c      	ite	eq
 800c966:	2200      	moveq	r2, #0
 800c968:	f002 0201 	andne.w	r2, r2, #1
 800c96c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800c970:	428b      	cmp	r3, r1
 800c972:	bf0c      	ite	eq
 800c974:	2200      	moveq	r2, #0
 800c976:	f002 0201 	andne.w	r2, r2, #1
 800c97a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800c97e:	4283      	cmp	r3, r0
 800c980:	bf0c      	ite	eq
 800c982:	2200      	moveq	r2, #0
 800c984:	f002 0201 	andne.w	r2, r2, #1
 800c988:	428b      	cmp	r3, r1
 800c98a:	bf0c      	ite	eq
 800c98c:	2200      	moveq	r2, #0
 800c98e:	f002 0201 	andne.w	r2, r2, #1
 800c992:	b11a      	cbz	r2, 800c99c <TIM_SlaveTimer_SetConfig+0x27c>
 800c994:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <TIM_SlaveTimer_SetConfig+0x2d0>)
 800c996:	4293      	cmp	r3, r2
 800c998:	f040 80cd 	bne.w	800cb36 <TIM_SlaveTimer_SetConfig+0x416>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800c99c:	68a3      	ldr	r3, [r4, #8]
 800c99e:	2b0a      	cmp	r3, #10
 800c9a0:	bf18      	it	ne
 800c9a2:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800c9a6:	d003      	beq.n	800c9b0 <TIM_SlaveTimer_SetConfig+0x290>
 800c9a8:	f033 0302 	bics.w	r3, r3, #2
 800c9ac:	f040 80b7 	bne.w	800cb1e <TIM_SlaveTimer_SetConfig+0x3fe>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800c9b0:	6925      	ldr	r5, [r4, #16]
 800c9b2:	2d0f      	cmp	r5, #15
 800c9b4:	f200 8097 	bhi.w	800cae6 <TIM_SlaveTimer_SetConfig+0x3c6>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9b8:	683b      	ldr	r3, [r7, #0]
  return HAL_OK;
 800c9ba:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9bc:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9be:	6a1c      	ldr	r4, [r3, #32]
 800c9c0:	f024 0410 	bic.w	r4, r4, #16
 800c9c4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9c6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800c9c8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9ca:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9d2:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9d6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800c9da:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9dc:	621a      	str	r2, [r3, #32]
}
 800c9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e0:	fffefff8 	.word	0xfffefff8
 800c9e4:	40010000 	.word	0x40010000
 800c9e8:	40000400 	.word	0x40000400
 800c9ec:	40000800 	.word	0x40000800
 800c9f0:	40001800 	.word	0x40001800
 800c9f4:	40000c00 	.word	0x40000c00
 800c9f8:	40010400 	.word	0x40010400
 800c9fc:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ca00:	4a59      	ldr	r2, [pc, #356]	; (800cb68 <TIM_SlaveTimer_SetConfig+0x448>)
 800ca02:	495a      	ldr	r1, [pc, #360]	; (800cb6c <TIM_SlaveTimer_SetConfig+0x44c>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	bf18      	it	ne
 800ca08:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ca0c:	4858      	ldr	r0, [pc, #352]	; (800cb70 <TIM_SlaveTimer_SetConfig+0x450>)
 800ca0e:	bf14      	ite	ne
 800ca10:	2201      	movne	r2, #1
 800ca12:	2200      	moveq	r2, #0
 800ca14:	428b      	cmp	r3, r1
 800ca16:	bf0c      	ite	eq
 800ca18:	2200      	moveq	r2, #0
 800ca1a:	f002 0201 	andne.w	r2, r2, #1
 800ca1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca22:	4283      	cmp	r3, r0
 800ca24:	bf0c      	ite	eq
 800ca26:	2200      	moveq	r2, #0
 800ca28:	f002 0201 	andne.w	r2, r2, #1
 800ca2c:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ca30:	428b      	cmp	r3, r1
 800ca32:	bf0c      	ite	eq
 800ca34:	2200      	moveq	r2, #0
 800ca36:	f002 0201 	andne.w	r2, r2, #1
 800ca3a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800ca3e:	4283      	cmp	r3, r0
 800ca40:	bf0c      	ite	eq
 800ca42:	2200      	moveq	r2, #0
 800ca44:	f002 0201 	andne.w	r2, r2, #1
 800ca48:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800ca4c:	428b      	cmp	r3, r1
 800ca4e:	bf0c      	ite	eq
 800ca50:	2200      	moveq	r2, #0
 800ca52:	f002 0201 	andne.w	r2, r2, #1
 800ca56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca5a:	4283      	cmp	r3, r0
 800ca5c:	bf0c      	ite	eq
 800ca5e:	2200      	moveq	r2, #0
 800ca60:	f002 0201 	andne.w	r2, r2, #1
 800ca64:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800ca68:	428b      	cmp	r3, r1
 800ca6a:	bf0c      	ite	eq
 800ca6c:	2200      	moveq	r2, #0
 800ca6e:	f002 0201 	andne.w	r2, r2, #1
 800ca72:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800ca76:	4283      	cmp	r3, r0
 800ca78:	bf0c      	ite	eq
 800ca7a:	2200      	moveq	r2, #0
 800ca7c:	f002 0201 	andne.w	r2, r2, #1
 800ca80:	428b      	cmp	r3, r1
 800ca82:	bf0c      	ite	eq
 800ca84:	2200      	moveq	r2, #0
 800ca86:	f002 0201 	andne.w	r2, r2, #1
 800ca8a:	b112      	cbz	r2, 800ca92 <TIM_SlaveTimer_SetConfig+0x372>
 800ca8c:	4a39      	ldr	r2, [pc, #228]	; (800cb74 <TIM_SlaveTimer_SetConfig+0x454>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d15d      	bne.n	800cb4e <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ca92:	6923      	ldr	r3, [r4, #16]
 800ca94:	2b0f      	cmp	r3, #15
 800ca96:	d819      	bhi.n	800cacc <TIM_SlaveTimer_SetConfig+0x3ac>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	2b05      	cmp	r3, #5
 800ca9c:	d031      	beq.n	800cb02 <TIM_SlaveTimer_SetConfig+0x3e2>
      tmpccer = htim->Instance->CCER;
 800ca9e:	683b      	ldr	r3, [r7, #0]
  return HAL_OK;
 800caa0:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800caa2:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800caa4:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800caa6:	6a19      	ldr	r1, [r3, #32]
 800caa8:	f021 0101 	bic.w	r1, r1, #1
 800caac:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800caae:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cab0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800cab4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800cab8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800caba:	621c      	str	r4, [r3, #32]
}
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cabe:	f641 1114 	movw	r1, #6420	; 0x1914
 800cac2:	482d      	ldr	r0, [pc, #180]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cac4:	f7f7 f830 	bl	8003b28 <assert_failed>
 800cac8:	6921      	ldr	r1, [r4, #16]
 800caca:	e685      	b.n	800c7d8 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cacc:	f641 1121 	movw	r1, #6433	; 0x1921
 800cad0:	4829      	ldr	r0, [pc, #164]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cad2:	f7f7 f829 	bl	8003b28 <assert_failed>
 800cad6:	e7df      	b.n	800ca98 <TIM_SlaveTimer_SetConfig+0x378>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cad8:	f641 113c 	movw	r1, #6460	; 0x193c
 800cadc:	4826      	ldr	r0, [pc, #152]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cade:	f7f7 f823 	bl	8003b28 <assert_failed>
 800cae2:	6926      	ldr	r6, [r4, #16]
 800cae4:	e719      	b.n	800c91a <TIM_SlaveTimer_SetConfig+0x1fa>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800cae6:	f641 114a 	movw	r1, #6474	; 0x194a
 800caea:	4823      	ldr	r0, [pc, #140]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800caec:	f7f7 f81c 	bl	8003b28 <assert_failed>
 800caf0:	6925      	ldr	r5, [r4, #16]
 800caf2:	e761      	b.n	800c9b8 <TIM_SlaveTimer_SetConfig+0x298>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800caf4:	f641 1159 	movw	r1, #6489	; 0x1959
 800caf8:	481f      	ldr	r0, [pc, #124]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cafa:	f7f7 f815 	bl	8003b28 <assert_failed>
  return HAL_OK;
 800cafe:	2000      	movs	r0, #0
}
 800cb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800cb02:	2001      	movs	r0, #1
}
 800cb04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800cb06:	f641 1112 	movw	r1, #6418	; 0x1912
 800cb0a:	481b      	ldr	r0, [pc, #108]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb0c:	f7f7 f80c 	bl	8003b28 <assert_failed>
 800cb10:	e654      	b.n	800c7bc <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cb12:	f641 1113 	movw	r1, #6419	; 0x1913
 800cb16:	4818      	ldr	r0, [pc, #96]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb18:	f7f7 f806 	bl	8003b28 <assert_failed>
 800cb1c:	e658      	b.n	800c7d0 <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cb1e:	f641 1149 	movw	r1, #6473	; 0x1949
 800cb22:	4815      	ldr	r0, [pc, #84]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb24:	f7f7 f800 	bl	8003b28 <assert_failed>
 800cb28:	e742      	b.n	800c9b0 <TIM_SlaveTimer_SetConfig+0x290>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800cb2a:	f641 113b 	movw	r1, #6459	; 0x193b
 800cb2e:	4812      	ldr	r0, [pc, #72]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb30:	f7f6 fffa 	bl	8003b28 <assert_failed>
 800cb34:	e6ed      	b.n	800c912 <TIM_SlaveTimer_SetConfig+0x1f2>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800cb36:	f641 1148 	movw	r1, #6472	; 0x1948
 800cb3a:	480f      	ldr	r0, [pc, #60]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb3c:	f7f6 fff4 	bl	8003b28 <assert_failed>
 800cb40:	e72c      	b.n	800c99c <TIM_SlaveTimer_SetConfig+0x27c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cb42:	f641 1111 	movw	r1, #6417	; 0x1911
 800cb46:	480c      	ldr	r0, [pc, #48]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb48:	f7f6 ffee 	bl	8003b28 <assert_failed>
 800cb4c:	e631      	b.n	800c7b2 <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cb4e:	f44f 51c9 	mov.w	r1, #6432	; 0x1920
 800cb52:	4809      	ldr	r0, [pc, #36]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb54:	f7f6 ffe8 	bl	8003b28 <assert_failed>
 800cb58:	e79b      	b.n	800ca92 <TIM_SlaveTimer_SetConfig+0x372>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800cb5a:	f641 113a 	movw	r1, #6458	; 0x193a
 800cb5e:	4806      	ldr	r0, [pc, #24]	; (800cb78 <TIM_SlaveTimer_SetConfig+0x458>)
 800cb60:	f7f6 ffe2 	bl	8003b28 <assert_failed>
 800cb64:	e6cb      	b.n	800c8fe <TIM_SlaveTimer_SetConfig+0x1de>
 800cb66:	bf00      	nop
 800cb68:	40010000 	.word	0x40010000
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40002000 	.word	0x40002000
 800cb78:	08027eb0 	.word	0x08027eb0

0800cb7c <HAL_TIM_Base_Start>:
{
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cb80:	4b38      	ldr	r3, [pc, #224]	; (800cc64 <HAL_TIM_Base_Start+0xe8>)
 800cb82:	4d39      	ldr	r5, [pc, #228]	; (800cc68 <HAL_TIM_Base_Start+0xec>)
 800cb84:	6822      	ldr	r2, [r4, #0]
 800cb86:	4839      	ldr	r0, [pc, #228]	; (800cc6c <HAL_TIM_Base_Start+0xf0>)
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	bf18      	it	ne
 800cb8c:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cb90:	4937      	ldr	r1, [pc, #220]	; (800cc70 <HAL_TIM_Base_Start+0xf4>)
 800cb92:	4e38      	ldr	r6, [pc, #224]	; (800cc74 <HAL_TIM_Base_Start+0xf8>)
 800cb94:	bf14      	ite	ne
 800cb96:	2301      	movne	r3, #1
 800cb98:	2300      	moveq	r3, #0
 800cb9a:	42aa      	cmp	r2, r5
 800cb9c:	bf0c      	ite	eq
 800cb9e:	2300      	moveq	r3, #0
 800cba0:	f003 0301 	andne.w	r3, r3, #1
 800cba4:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800cba8:	4282      	cmp	r2, r0
 800cbaa:	bf0c      	ite	eq
 800cbac:	2300      	moveq	r3, #0
 800cbae:	f003 0301 	andne.w	r3, r3, #1
 800cbb2:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cbb6:	428a      	cmp	r2, r1
 800cbb8:	bf0c      	ite	eq
 800cbba:	2300      	moveq	r3, #0
 800cbbc:	f003 0301 	andne.w	r3, r3, #1
 800cbc0:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cbc4:	42b2      	cmp	r2, r6
 800cbc6:	bf0c      	ite	eq
 800cbc8:	2300      	moveq	r3, #0
 800cbca:	f003 0301 	andne.w	r3, r3, #1
 800cbce:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800cbd2:	42aa      	cmp	r2, r5
 800cbd4:	bf0c      	ite	eq
 800cbd6:	2300      	moveq	r3, #0
 800cbd8:	f003 0301 	andne.w	r3, r3, #1
 800cbdc:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800cbe0:	4282      	cmp	r2, r0
 800cbe2:	bf0c      	ite	eq
 800cbe4:	2300      	moveq	r3, #0
 800cbe6:	f003 0301 	andne.w	r3, r3, #1
 800cbea:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800cbee:	428a      	cmp	r2, r1
 800cbf0:	bf0c      	ite	eq
 800cbf2:	2300      	moveq	r3, #0
 800cbf4:	f003 0301 	andne.w	r3, r3, #1
 800cbf8:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800cbfc:	42b2      	cmp	r2, r6
 800cbfe:	bf0c      	ite	eq
 800cc00:	2300      	moveq	r3, #0
 800cc02:	f003 0301 	andne.w	r3, r3, #1
 800cc06:	42aa      	cmp	r2, r5
 800cc08:	bf0c      	ite	eq
 800cc0a:	2300      	moveq	r3, #0
 800cc0c:	f003 0301 	andne.w	r3, r3, #1
 800cc10:	4282      	cmp	r2, r0
 800cc12:	bf0c      	ite	eq
 800cc14:	2300      	moveq	r3, #0
 800cc16:	f003 0301 	andne.w	r3, r3, #1
 800cc1a:	428a      	cmp	r2, r1
 800cc1c:	bf0c      	ite	eq
 800cc1e:	2300      	moveq	r3, #0
 800cc20:	f003 0301 	andne.w	r3, r3, #1
 800cc24:	b113      	cbz	r3, 800cc2c <HAL_TIM_Base_Start+0xb0>
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <HAL_TIM_Base_Start+0xfc>)
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d113      	bne.n	800cc54 <HAL_TIM_Base_Start+0xd8>
  htim->State = HAL_TIM_STATE_BUSY;
 800cc2c:	2102      	movs	r1, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc2e:	4b13      	ldr	r3, [pc, #76]	; (800cc7c <HAL_TIM_Base_Start+0x100>)
  htim->State = HAL_TIM_STATE_BUSY;
 800cc30:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc34:	6891      	ldr	r1, [r2, #8]
 800cc36:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc38:	2b06      	cmp	r3, #6
 800cc3a:	d006      	beq.n	800cc4a <HAL_TIM_Base_Start+0xce>
 800cc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc40:	d003      	beq.n	800cc4a <HAL_TIM_Base_Start+0xce>
    __HAL_TIM_ENABLE(htim);
 800cc42:	6813      	ldr	r3, [r2, #0]
 800cc44:	f043 0301 	orr.w	r3, r3, #1
 800cc48:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 800cc4a:	2301      	movs	r3, #1
}
 800cc4c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800cc4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800cc52:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc54:	f44f 71c4 	mov.w	r1, #392	; 0x188
 800cc58:	4809      	ldr	r0, [pc, #36]	; (800cc80 <HAL_TIM_Base_Start+0x104>)
 800cc5a:	f7f6 ff65 	bl	8003b28 <assert_failed>
 800cc5e:	6822      	ldr	r2, [r4, #0]
 800cc60:	e7e4      	b.n	800cc2c <HAL_TIM_Base_Start+0xb0>
 800cc62:	bf00      	nop
 800cc64:	40010000 	.word	0x40010000
 800cc68:	40000400 	.word	0x40000400
 800cc6c:	40000800 	.word	0x40000800
 800cc70:	40000c00 	.word	0x40000c00
 800cc74:	40001000 	.word	0x40001000
 800cc78:	40002000 	.word	0x40002000
 800cc7c:	00010007 	.word	0x00010007
 800cc80:	08027eb0 	.word	0x08027eb0

0800cc84 <HAL_TIM_Base_Start_IT>:
{
 800cc84:	b570      	push	{r4, r5, r6, lr}
 800cc86:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cc88:	4b37      	ldr	r3, [pc, #220]	; (800cd68 <HAL_TIM_Base_Start_IT+0xe4>)
 800cc8a:	4d38      	ldr	r5, [pc, #224]	; (800cd6c <HAL_TIM_Base_Start_IT+0xe8>)
 800cc8c:	6822      	ldr	r2, [r4, #0]
 800cc8e:	4838      	ldr	r0, [pc, #224]	; (800cd70 <HAL_TIM_Base_Start_IT+0xec>)
 800cc90:	429a      	cmp	r2, r3
 800cc92:	bf18      	it	ne
 800cc94:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cc98:	4936      	ldr	r1, [pc, #216]	; (800cd74 <HAL_TIM_Base_Start_IT+0xf0>)
 800cc9a:	4e37      	ldr	r6, [pc, #220]	; (800cd78 <HAL_TIM_Base_Start_IT+0xf4>)
 800cc9c:	bf14      	ite	ne
 800cc9e:	2301      	movne	r3, #1
 800cca0:	2300      	moveq	r3, #0
 800cca2:	42aa      	cmp	r2, r5
 800cca4:	bf0c      	ite	eq
 800cca6:	2300      	moveq	r3, #0
 800cca8:	f003 0301 	andne.w	r3, r3, #1
 800ccac:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800ccb0:	4282      	cmp	r2, r0
 800ccb2:	bf0c      	ite	eq
 800ccb4:	2300      	moveq	r3, #0
 800ccb6:	f003 0301 	andne.w	r3, r3, #1
 800ccba:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800ccbe:	428a      	cmp	r2, r1
 800ccc0:	bf0c      	ite	eq
 800ccc2:	2300      	moveq	r3, #0
 800ccc4:	f003 0301 	andne.w	r3, r3, #1
 800ccc8:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cccc:	42b2      	cmp	r2, r6
 800ccce:	bf0c      	ite	eq
 800ccd0:	2300      	moveq	r3, #0
 800ccd2:	f003 0301 	andne.w	r3, r3, #1
 800ccd6:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800ccda:	42aa      	cmp	r2, r5
 800ccdc:	bf0c      	ite	eq
 800ccde:	2300      	moveq	r3, #0
 800cce0:	f003 0301 	andne.w	r3, r3, #1
 800cce4:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800cce8:	4282      	cmp	r2, r0
 800ccea:	bf0c      	ite	eq
 800ccec:	2300      	moveq	r3, #0
 800ccee:	f003 0301 	andne.w	r3, r3, #1
 800ccf2:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800ccf6:	428a      	cmp	r2, r1
 800ccf8:	bf0c      	ite	eq
 800ccfa:	2300      	moveq	r3, #0
 800ccfc:	f003 0301 	andne.w	r3, r3, #1
 800cd00:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800cd04:	42b2      	cmp	r2, r6
 800cd06:	bf0c      	ite	eq
 800cd08:	2300      	moveq	r3, #0
 800cd0a:	f003 0301 	andne.w	r3, r3, #1
 800cd0e:	42aa      	cmp	r2, r5
 800cd10:	bf0c      	ite	eq
 800cd12:	2300      	moveq	r3, #0
 800cd14:	f003 0301 	andne.w	r3, r3, #1
 800cd18:	4282      	cmp	r2, r0
 800cd1a:	bf0c      	ite	eq
 800cd1c:	2300      	moveq	r3, #0
 800cd1e:	f003 0301 	andne.w	r3, r3, #1
 800cd22:	428a      	cmp	r2, r1
 800cd24:	bf0c      	ite	eq
 800cd26:	2300      	moveq	r3, #0
 800cd28:	f003 0301 	andne.w	r3, r3, #1
 800cd2c:	b113      	cbz	r3, 800cd34 <HAL_TIM_Base_Start_IT+0xb0>
 800cd2e:	4b13      	ldr	r3, [pc, #76]	; (800cd7c <HAL_TIM_Base_Start_IT+0xf8>)
 800cd30:	429a      	cmp	r2, r3
 800cd32:	d111      	bne.n	800cd58 <HAL_TIM_Base_Start_IT+0xd4>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd34:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd36:	4b12      	ldr	r3, [pc, #72]	; (800cd80 <HAL_TIM_Base_Start_IT+0xfc>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd38:	f041 0101 	orr.w	r1, r1, #1
 800cd3c:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd3e:	6891      	ldr	r1, [r2, #8]
 800cd40:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd42:	2b06      	cmp	r3, #6
 800cd44:	d006      	beq.n	800cd54 <HAL_TIM_Base_Start_IT+0xd0>
 800cd46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd4a:	d003      	beq.n	800cd54 <HAL_TIM_Base_Start_IT+0xd0>
    __HAL_TIM_ENABLE(htim);
 800cd4c:	6813      	ldr	r3, [r2, #0]
 800cd4e:	f043 0301 	orr.w	r3, r3, #1
 800cd52:	6013      	str	r3, [r2, #0]
}
 800cd54:	2000      	movs	r0, #0
 800cd56:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800cd58:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800cd5c:	4809      	ldr	r0, [pc, #36]	; (800cd84 <HAL_TIM_Base_Start_IT+0x100>)
 800cd5e:	f7f6 fee3 	bl	8003b28 <assert_failed>
 800cd62:	6822      	ldr	r2, [r4, #0]
 800cd64:	e7e6      	b.n	800cd34 <HAL_TIM_Base_Start_IT+0xb0>
 800cd66:	bf00      	nop
 800cd68:	40010000 	.word	0x40010000
 800cd6c:	40000400 	.word	0x40000400
 800cd70:	40000800 	.word	0x40000800
 800cd74:	40000c00 	.word	0x40000c00
 800cd78:	40001000 	.word	0x40001000
 800cd7c:	40002000 	.word	0x40002000
 800cd80:	00010007 	.word	0x00010007
 800cd84:	08027eb0 	.word	0x08027eb0

0800cd88 <HAL_TIM_OC_MspInit>:
 800cd88:	4770      	bx	lr
 800cd8a:	bf00      	nop

0800cd8c <HAL_TIM_PWM_MspInit>:
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop

0800cd90 <HAL_TIM_IC_MspInit>:
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop

0800cd94 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800cd94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f000 8148 	beq.w	800d02e <HAL_TIM_ConfigClockSource+0x29a>
 800cd9e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800cda0:	2302      	movs	r3, #2
{
 800cda2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800cda4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800cda8:	460d      	mov	r5, r1
 800cdaa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800cdae:	4604      	mov	r4, r0
 800cdb0:	680b      	ldr	r3, [r1, #0]
 800cdb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdb6:	bf18      	it	ne
 800cdb8:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800cdbc:	bf14      	ite	ne
 800cdbe:	2201      	movne	r2, #1
 800cdc0:	2200      	moveq	r2, #0
 800cdc2:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800cdc6:	bf08      	it	eq
 800cdc8:	2200      	moveq	r2, #0
 800cdca:	b112      	cbz	r2, 800cdd2 <HAL_TIM_ConfigClockSource+0x3e>
 800cdcc:	2940      	cmp	r1, #64	; 0x40
 800cdce:	f040 8246 	bne.w	800d25e <HAL_TIM_ConfigClockSource+0x4ca>
  tmpsmcr = htim->Instance->SMCR;
 800cdd2:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800cdd4:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdd6:	4997      	ldr	r1, [pc, #604]	; (800d034 <HAL_TIM_ConfigClockSource+0x2a0>)
  tmpsmcr = htim->Instance->SMCR;
 800cdd8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdda:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800cdde:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800cde0:	f000 8134 	beq.w	800d04c <HAL_TIM_ConfigClockSource+0x2b8>
 800cde4:	d853      	bhi.n	800ce8e <HAL_TIM_ConfigClockSource+0xfa>
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	f000 81d6 	beq.w	800d198 <HAL_TIM_ConfigClockSource+0x404>
 800cdec:	f240 80ec 	bls.w	800cfc8 <HAL_TIM_ConfigClockSource+0x234>
 800cdf0:	2b50      	cmp	r3, #80	; 0x50
 800cdf2:	d144      	bne.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800cdf4:	4b90      	ldr	r3, [pc, #576]	; (800d038 <HAL_TIM_ConfigClockSource+0x2a4>)
 800cdf6:	4991      	ldr	r1, [pc, #580]	; (800d03c <HAL_TIM_ConfigClockSource+0x2a8>)
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	bf18      	it	ne
 800cdfc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ce00:	488f      	ldr	r0, [pc, #572]	; (800d040 <HAL_TIM_ConfigClockSource+0x2ac>)
 800ce02:	bf14      	ite	ne
 800ce04:	2301      	movne	r3, #1
 800ce06:	2300      	moveq	r3, #0
 800ce08:	428a      	cmp	r2, r1
 800ce0a:	bf0c      	ite	eq
 800ce0c:	2300      	moveq	r3, #0
 800ce0e:	f003 0301 	andne.w	r3, r3, #1
 800ce12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce16:	4282      	cmp	r2, r0
 800ce18:	bf0c      	ite	eq
 800ce1a:	2300      	moveq	r3, #0
 800ce1c:	f003 0301 	andne.w	r3, r3, #1
 800ce20:	428a      	cmp	r2, r1
 800ce22:	bf0c      	ite	eq
 800ce24:	2300      	moveq	r3, #0
 800ce26:	f003 0301 	andne.w	r3, r3, #1
 800ce2a:	b11b      	cbz	r3, 800ce34 <HAL_TIM_ConfigClockSource+0xa0>
 800ce2c:	4b85      	ldr	r3, [pc, #532]	; (800d044 <HAL_TIM_ConfigClockSource+0x2b0>)
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	f040 820f 	bne.w	800d252 <HAL_TIM_ConfigClockSource+0x4be>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800ce34:	686b      	ldr	r3, [r5, #4]
 800ce36:	2b0a      	cmp	r3, #10
 800ce38:	bf18      	it	ne
 800ce3a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800ce3e:	d003      	beq.n	800ce48 <HAL_TIM_ConfigClockSource+0xb4>
 800ce40:	f033 0302 	bics.w	r3, r3, #2
 800ce44:	f040 824d 	bne.w	800d2e2 <HAL_TIM_ConfigClockSource+0x54e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800ce48:	68ee      	ldr	r6, [r5, #12]
 800ce4a:	2e0f      	cmp	r6, #15
 800ce4c:	f200 8223 	bhi.w	800d296 <HAL_TIM_ConfigClockSource+0x502>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce50:	6823      	ldr	r3, [r4, #0]
 800ce52:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800ce54:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce56:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ce58:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce5c:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800ce60:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce62:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce64:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ce66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ce6a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800ce6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce70:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800ce72:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce78:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800ce7c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800ce7e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ce80:	2201      	movs	r2, #1
  return HAL_OK;
 800ce82:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800ce84:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ce88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ce8c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800ce8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce92:	f000 8122 	beq.w	800d0da <HAL_TIM_ConfigClockSource+0x346>
 800ce96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce9a:	d142      	bne.n	800cf22 <HAL_TIM_ConfigClockSource+0x18e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ce9c:	4b66      	ldr	r3, [pc, #408]	; (800d038 <HAL_TIM_ConfigClockSource+0x2a4>)
 800ce9e:	4967      	ldr	r1, [pc, #412]	; (800d03c <HAL_TIM_ConfigClockSource+0x2a8>)
 800cea0:	429a      	cmp	r2, r3
 800cea2:	bf18      	it	ne
 800cea4:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cea8:	4865      	ldr	r0, [pc, #404]	; (800d040 <HAL_TIM_ConfigClockSource+0x2ac>)
 800ceaa:	bf14      	ite	ne
 800ceac:	2301      	movne	r3, #1
 800ceae:	2300      	moveq	r3, #0
 800ceb0:	428a      	cmp	r2, r1
 800ceb2:	bf0c      	ite	eq
 800ceb4:	2300      	moveq	r3, #0
 800ceb6:	f003 0301 	andne.w	r3, r3, #1
 800ceba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cebe:	4282      	cmp	r2, r0
 800cec0:	bf0c      	ite	eq
 800cec2:	2300      	moveq	r3, #0
 800cec4:	f003 0301 	andne.w	r3, r3, #1
 800cec8:	428a      	cmp	r2, r1
 800ceca:	bf0c      	ite	eq
 800cecc:	2300      	moveq	r3, #0
 800cece:	f003 0301 	andne.w	r3, r3, #1
 800ced2:	b11b      	cbz	r3, 800cedc <HAL_TIM_ConfigClockSource+0x148>
 800ced4:	4b5b      	ldr	r3, [pc, #364]	; (800d044 <HAL_TIM_ConfigClockSource+0x2b0>)
 800ced6:	429a      	cmp	r2, r3
 800ced8:	f040 81ad 	bne.w	800d236 <HAL_TIM_ConfigClockSource+0x4a2>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cedc:	68ab      	ldr	r3, [r5, #8]
 800cede:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800cee2:	f040 81e6 	bne.w	800d2b2 <HAL_TIM_ConfigClockSource+0x51e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cee6:	686b      	ldr	r3, [r5, #4]
 800cee8:	2b0a      	cmp	r3, #10
 800ceea:	bf18      	it	ne
 800ceec:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cef0:	d003      	beq.n	800cefa <HAL_TIM_ConfigClockSource+0x166>
 800cef2:	f033 0302 	bics.w	r3, r3, #2
 800cef6:	f040 81ee 	bne.w	800d2d6 <HAL_TIM_ConfigClockSource+0x542>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cefa:	68e8      	ldr	r0, [r5, #12]
 800cefc:	280f      	cmp	r0, #15
 800cefe:	f200 81c3 	bhi.w	800d288 <HAL_TIM_ConfigClockSource+0x4f4>
      TIM_ETR_SetConfig(htim->Instance,
 800cf02:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cf04:	68ab      	ldr	r3, [r5, #8]
 800cf06:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf08:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cf0a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800cf0e:	432b      	orrs	r3, r5
 800cf10:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cf12:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800cf16:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cf18:	6893      	ldr	r3, [r2, #8]
 800cf1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf1e:	6093      	str	r3, [r2, #8]
      break;
 800cf20:	e7ad      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 800cf22:	2b70      	cmp	r3, #112	; 0x70
 800cf24:	d1ab      	bne.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800cf26:	4b44      	ldr	r3, [pc, #272]	; (800d038 <HAL_TIM_ConfigClockSource+0x2a4>)
 800cf28:	4944      	ldr	r1, [pc, #272]	; (800d03c <HAL_TIM_ConfigClockSource+0x2a8>)
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	bf18      	it	ne
 800cf2e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cf32:	4843      	ldr	r0, [pc, #268]	; (800d040 <HAL_TIM_ConfigClockSource+0x2ac>)
 800cf34:	bf14      	ite	ne
 800cf36:	2301      	movne	r3, #1
 800cf38:	2300      	moveq	r3, #0
 800cf3a:	428a      	cmp	r2, r1
 800cf3c:	bf0c      	ite	eq
 800cf3e:	2300      	moveq	r3, #0
 800cf40:	f003 0301 	andne.w	r3, r3, #1
 800cf44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf48:	4282      	cmp	r2, r0
 800cf4a:	bf0c      	ite	eq
 800cf4c:	2300      	moveq	r3, #0
 800cf4e:	f003 0301 	andne.w	r3, r3, #1
 800cf52:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800cf56:	428a      	cmp	r2, r1
 800cf58:	bf0c      	ite	eq
 800cf5a:	2300      	moveq	r3, #0
 800cf5c:	f003 0301 	andne.w	r3, r3, #1
 800cf60:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800cf64:	4282      	cmp	r2, r0
 800cf66:	bf0c      	ite	eq
 800cf68:	2300      	moveq	r3, #0
 800cf6a:	f003 0301 	andne.w	r3, r3, #1
 800cf6e:	428a      	cmp	r2, r1
 800cf70:	bf0c      	ite	eq
 800cf72:	2300      	moveq	r3, #0
 800cf74:	f003 0301 	andne.w	r3, r3, #1
 800cf78:	b11b      	cbz	r3, 800cf82 <HAL_TIM_ConfigClockSource+0x1ee>
 800cf7a:	4b33      	ldr	r3, [pc, #204]	; (800d048 <HAL_TIM_ConfigClockSource+0x2b4>)
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	f040 81c2 	bne.w	800d306 <HAL_TIM_ConfigClockSource+0x572>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800cf82:	68ab      	ldr	r3, [r5, #8]
 800cf84:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800cf88:	f040 8199 	bne.w	800d2be <HAL_TIM_ConfigClockSource+0x52a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800cf8c:	686b      	ldr	r3, [r5, #4]
 800cf8e:	2b0a      	cmp	r3, #10
 800cf90:	bf18      	it	ne
 800cf92:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800cf96:	d003      	beq.n	800cfa0 <HAL_TIM_ConfigClockSource+0x20c>
 800cf98:	f033 0302 	bics.w	r3, r3, #2
 800cf9c:	f040 81a7 	bne.w	800d2ee <HAL_TIM_ConfigClockSource+0x55a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800cfa0:	68e8      	ldr	r0, [r5, #12]
 800cfa2:	280f      	cmp	r0, #15
 800cfa4:	f200 817e 	bhi.w	800d2a4 <HAL_TIM_ConfigClockSource+0x510>
      TIM_ETR_SetConfig(htim->Instance,
 800cfa8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800cfaa:	68ab      	ldr	r3, [r5, #8]
 800cfac:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfae:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cfb0:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800cfb4:	432b      	orrs	r3, r5
 800cfb6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cfb8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  TIMx->SMCR = tmpsmcr;
 800cfbc:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800cfbe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cfc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800cfc4:	6093      	str	r3, [r2, #8]
      break;
 800cfc6:	e75a      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 800cfc8:	2b20      	cmp	r3, #32
 800cfca:	d003      	beq.n	800cfd4 <HAL_TIM_ConfigClockSource+0x240>
 800cfcc:	d92a      	bls.n	800d024 <HAL_TIM_ConfigClockSource+0x290>
 800cfce:	2b30      	cmp	r3, #48	; 0x30
 800cfd0:	f47f af55 	bne.w	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800cfd4:	4918      	ldr	r1, [pc, #96]	; (800d038 <HAL_TIM_ConfigClockSource+0x2a4>)
 800cfd6:	4819      	ldr	r0, [pc, #100]	; (800d03c <HAL_TIM_ConfigClockSource+0x2a8>)
 800cfd8:	428a      	cmp	r2, r1
 800cfda:	bf18      	it	ne
 800cfdc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800cfe0:	4e17      	ldr	r6, [pc, #92]	; (800d040 <HAL_TIM_ConfigClockSource+0x2ac>)
 800cfe2:	bf14      	ite	ne
 800cfe4:	2101      	movne	r1, #1
 800cfe6:	2100      	moveq	r1, #0
 800cfe8:	4282      	cmp	r2, r0
 800cfea:	bf0c      	ite	eq
 800cfec:	2100      	moveq	r1, #0
 800cfee:	f001 0101 	andne.w	r1, r1, #1
 800cff2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800cff6:	42b2      	cmp	r2, r6
 800cff8:	bf0c      	ite	eq
 800cffa:	2100      	moveq	r1, #0
 800cffc:	f001 0101 	andne.w	r1, r1, #1
 800d000:	4282      	cmp	r2, r0
 800d002:	bf0c      	ite	eq
 800d004:	2100      	moveq	r1, #0
 800d006:	f001 0101 	andne.w	r1, r1, #1
 800d00a:	b119      	cbz	r1, 800d014 <HAL_TIM_ConfigClockSource+0x280>
 800d00c:	490d      	ldr	r1, [pc, #52]	; (800d044 <HAL_TIM_ConfigClockSource+0x2b0>)
 800d00e:	428a      	cmp	r2, r1
 800d010:	f040 8117 	bne.w	800d242 <HAL_TIM_ConfigClockSource+0x4ae>
  tmpsmcr = TIMx->SMCR;
 800d014:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d016:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d01a:	430b      	orrs	r3, r1
 800d01c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800d020:	6093      	str	r3, [r2, #8]
}
 800d022:	e72c      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
  switch (sClockSourceConfig->ClockSource)
 800d024:	f033 0110 	bics.w	r1, r3, #16
 800d028:	f47f af29 	bne.w	800ce7e <HAL_TIM_ConfigClockSource+0xea>
 800d02c:	e7d2      	b.n	800cfd4 <HAL_TIM_ConfigClockSource+0x240>
  __HAL_LOCK(htim);
 800d02e:	2002      	movs	r0, #2
}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop
 800d034:	fffe0088 	.word	0xfffe0088
 800d038:	40010000 	.word	0x40010000
 800d03c:	40000400 	.word	0x40000400
 800d040:	40000800 	.word	0x40000800
 800d044:	40010400 	.word	0x40010400
 800d048:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d04c:	4bb1      	ldr	r3, [pc, #708]	; (800d314 <HAL_TIM_ConfigClockSource+0x580>)
 800d04e:	49b2      	ldr	r1, [pc, #712]	; (800d318 <HAL_TIM_ConfigClockSource+0x584>)
 800d050:	429a      	cmp	r2, r3
 800d052:	bf18      	it	ne
 800d054:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d058:	48b0      	ldr	r0, [pc, #704]	; (800d31c <HAL_TIM_ConfigClockSource+0x588>)
 800d05a:	bf14      	ite	ne
 800d05c:	2301      	movne	r3, #1
 800d05e:	2300      	moveq	r3, #0
 800d060:	428a      	cmp	r2, r1
 800d062:	bf0c      	ite	eq
 800d064:	2300      	moveq	r3, #0
 800d066:	f003 0301 	andne.w	r3, r3, #1
 800d06a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d06e:	4282      	cmp	r2, r0
 800d070:	bf0c      	ite	eq
 800d072:	2300      	moveq	r3, #0
 800d074:	f003 0301 	andne.w	r3, r3, #1
 800d078:	428a      	cmp	r2, r1
 800d07a:	bf0c      	ite	eq
 800d07c:	2300      	moveq	r3, #0
 800d07e:	f003 0301 	andne.w	r3, r3, #1
 800d082:	b11b      	cbz	r3, 800d08c <HAL_TIM_ConfigClockSource+0x2f8>
 800d084:	4ba6      	ldr	r3, [pc, #664]	; (800d320 <HAL_TIM_ConfigClockSource+0x58c>)
 800d086:	429a      	cmp	r2, r3
 800d088:	f040 80cf 	bne.w	800d22a <HAL_TIM_ConfigClockSource+0x496>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d08c:	686b      	ldr	r3, [r5, #4]
 800d08e:	2b0a      	cmp	r3, #10
 800d090:	bf18      	it	ne
 800d092:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d096:	d003      	beq.n	800d0a0 <HAL_TIM_ConfigClockSource+0x30c>
 800d098:	f033 0302 	bics.w	r3, r3, #2
 800d09c:	f040 812d 	bne.w	800d2fa <HAL_TIM_ConfigClockSource+0x566>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d0a0:	68ee      	ldr	r6, [r5, #12]
 800d0a2:	2e0f      	cmp	r6, #15
 800d0a4:	f200 80e2 	bhi.w	800d26c <HAL_TIM_ConfigClockSource+0x4d8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d0a8:	6823      	ldr	r3, [r4, #0]
 800d0aa:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0ac:	6a18      	ldr	r0, [r3, #32]
 800d0ae:	f020 0010 	bic.w	r0, r0, #16
 800d0b2:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d0b4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800d0b6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d0b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d0bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d0c0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800d0c4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800d0c8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800d0ca:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d0cc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0d2:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800d0d6:	609a      	str	r2, [r3, #8]
}
 800d0d8:	e6d1      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d0da:	4b8e      	ldr	r3, [pc, #568]	; (800d314 <HAL_TIM_ConfigClockSource+0x580>)
 800d0dc:	488e      	ldr	r0, [pc, #568]	; (800d318 <HAL_TIM_ConfigClockSource+0x584>)
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	bf18      	it	ne
 800d0e2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d0e6:	498d      	ldr	r1, [pc, #564]	; (800d31c <HAL_TIM_ConfigClockSource+0x588>)
 800d0e8:	4d8e      	ldr	r5, [pc, #568]	; (800d324 <HAL_TIM_ConfigClockSource+0x590>)
 800d0ea:	bf14      	ite	ne
 800d0ec:	2301      	movne	r3, #1
 800d0ee:	2300      	moveq	r3, #0
 800d0f0:	4282      	cmp	r2, r0
 800d0f2:	bf0c      	ite	eq
 800d0f4:	2300      	moveq	r3, #0
 800d0f6:	f003 0301 	andne.w	r3, r3, #1
 800d0fa:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d0fe:	428a      	cmp	r2, r1
 800d100:	bf0c      	ite	eq
 800d102:	2300      	moveq	r3, #0
 800d104:	f003 0301 	andne.w	r3, r3, #1
 800d108:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d10c:	42aa      	cmp	r2, r5
 800d10e:	bf0c      	ite	eq
 800d110:	2300      	moveq	r3, #0
 800d112:	f003 0301 	andne.w	r3, r3, #1
 800d116:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800d11a:	4282      	cmp	r2, r0
 800d11c:	bf0c      	ite	eq
 800d11e:	2300      	moveq	r3, #0
 800d120:	f003 0301 	andne.w	r3, r3, #1
 800d124:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800d128:	428a      	cmp	r2, r1
 800d12a:	bf0c      	ite	eq
 800d12c:	2300      	moveq	r3, #0
 800d12e:	f003 0301 	andne.w	r3, r3, #1
 800d132:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800d136:	42aa      	cmp	r2, r5
 800d138:	bf0c      	ite	eq
 800d13a:	2300      	moveq	r3, #0
 800d13c:	f003 0301 	andne.w	r3, r3, #1
 800d140:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800d144:	4282      	cmp	r2, r0
 800d146:	bf0c      	ite	eq
 800d148:	2300      	moveq	r3, #0
 800d14a:	f003 0301 	andne.w	r3, r3, #1
 800d14e:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d152:	428a      	cmp	r2, r1
 800d154:	bf0c      	ite	eq
 800d156:	2300      	moveq	r3, #0
 800d158:	f003 0301 	andne.w	r3, r3, #1
 800d15c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d160:	42aa      	cmp	r2, r5
 800d162:	bf0c      	ite	eq
 800d164:	2300      	moveq	r3, #0
 800d166:	f003 0301 	andne.w	r3, r3, #1
 800d16a:	4282      	cmp	r2, r0
 800d16c:	bf0c      	ite	eq
 800d16e:	2300      	moveq	r3, #0
 800d170:	f003 0301 	andne.w	r3, r3, #1
 800d174:	428a      	cmp	r2, r1
 800d176:	bf0c      	ite	eq
 800d178:	2300      	moveq	r3, #0
 800d17a:	f003 0301 	andne.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f43f ae7d 	beq.w	800ce7e <HAL_TIM_ConfigClockSource+0xea>
 800d184:	4b68      	ldr	r3, [pc, #416]	; (800d328 <HAL_TIM_ConfigClockSource+0x594>)
 800d186:	429a      	cmp	r2, r3
 800d188:	f43f ae79 	beq.w	800ce7e <HAL_TIM_ConfigClockSource+0xea>
 800d18c:	f241 2116 	movw	r1, #4630	; 0x1216
 800d190:	4866      	ldr	r0, [pc, #408]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d192:	f7f6 fcc9 	bl	8003b28 <assert_failed>
 800d196:	e672      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d198:	4b5e      	ldr	r3, [pc, #376]	; (800d314 <HAL_TIM_ConfigClockSource+0x580>)
 800d19a:	495f      	ldr	r1, [pc, #380]	; (800d318 <HAL_TIM_ConfigClockSource+0x584>)
 800d19c:	429a      	cmp	r2, r3
 800d19e:	bf18      	it	ne
 800d1a0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d1a4:	485d      	ldr	r0, [pc, #372]	; (800d31c <HAL_TIM_ConfigClockSource+0x588>)
 800d1a6:	bf14      	ite	ne
 800d1a8:	2301      	movne	r3, #1
 800d1aa:	2300      	moveq	r3, #0
 800d1ac:	428a      	cmp	r2, r1
 800d1ae:	bf0c      	ite	eq
 800d1b0:	2300      	moveq	r3, #0
 800d1b2:	f003 0301 	andne.w	r3, r3, #1
 800d1b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1ba:	4282      	cmp	r2, r0
 800d1bc:	bf0c      	ite	eq
 800d1be:	2300      	moveq	r3, #0
 800d1c0:	f003 0301 	andne.w	r3, r3, #1
 800d1c4:	428a      	cmp	r2, r1
 800d1c6:	bf0c      	ite	eq
 800d1c8:	2300      	moveq	r3, #0
 800d1ca:	f003 0301 	andne.w	r3, r3, #1
 800d1ce:	b113      	cbz	r3, 800d1d6 <HAL_TIM_ConfigClockSource+0x442>
 800d1d0:	4b53      	ldr	r3, [pc, #332]	; (800d320 <HAL_TIM_ConfigClockSource+0x58c>)
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d123      	bne.n	800d21e <HAL_TIM_ConfigClockSource+0x48a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d1d6:	686b      	ldr	r3, [r5, #4]
 800d1d8:	2b0a      	cmp	r3, #10
 800d1da:	bf18      	it	ne
 800d1dc:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d1e0:	d002      	beq.n	800d1e8 <HAL_TIM_ConfigClockSource+0x454>
 800d1e2:	f033 0302 	bics.w	r3, r3, #2
 800d1e6:	d170      	bne.n	800d2ca <HAL_TIM_ConfigClockSource+0x536>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d1e8:	68ee      	ldr	r6, [r5, #12]
 800d1ea:	2e0f      	cmp	r6, #15
 800d1ec:	d845      	bhi.n	800d27a <HAL_TIM_ConfigClockSource+0x4e6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800d1f2:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1f4:	6a18      	ldr	r0, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d1f6:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d1fa:	f020 0001 	bic.w	r0, r0, #1
  tmpccer |= TIM_ICPolarity;
 800d1fe:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d200:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d202:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d204:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d208:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d20c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d20e:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800d210:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800d212:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d216:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800d21a:	609a      	str	r2, [r3, #8]
}
 800d21c:	e62f      	b.n	800ce7e <HAL_TIM_ConfigClockSource+0xea>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d21e:	f241 2169 	movw	r1, #4713	; 0x1269
 800d222:	4842      	ldr	r0, [pc, #264]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d224:	f7f6 fc80 	bl	8003b28 <assert_failed>
 800d228:	e7d5      	b.n	800d1d6 <HAL_TIM_ConfigClockSource+0x442>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d22a:	f241 2159 	movw	r1, #4697	; 0x1259
 800d22e:	483f      	ldr	r0, [pc, #252]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d230:	f7f6 fc7a 	bl	8003b28 <assert_failed>
 800d234:	e72a      	b.n	800d08c <HAL_TIM_ConfigClockSource+0x2f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800d236:	f241 2135 	movw	r1, #4661	; 0x1235
 800d23a:	483c      	ldr	r0, [pc, #240]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d23c:	f7f6 fc74 	bl	8003b28 <assert_failed>
 800d240:	e64c      	b.n	800cedc <HAL_TIM_ConfigClockSource+0x148>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800d242:	f241 217c 	movw	r1, #4732	; 0x127c
 800d246:	4839      	ldr	r0, [pc, #228]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d248:	f7f6 fc6e 	bl	8003b28 <assert_failed>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	6822      	ldr	r2, [r4, #0]
 800d250:	e6e0      	b.n	800d014 <HAL_TIM_ConfigClockSource+0x280>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800d252:	f241 2149 	movw	r1, #4681	; 0x1249
 800d256:	4835      	ldr	r0, [pc, #212]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d258:	f7f6 fc66 	bl	8003b28 <assert_failed>
 800d25c:	e5ea      	b.n	800ce34 <HAL_TIM_ConfigClockSource+0xa0>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800d25e:	f241 210a 	movw	r1, #4618	; 0x120a
 800d262:	4832      	ldr	r0, [pc, #200]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d264:	f7f6 fc60 	bl	8003b28 <assert_failed>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	e5b2      	b.n	800cdd2 <HAL_TIM_ConfigClockSource+0x3e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d26c:	f241 215d 	movw	r1, #4701	; 0x125d
 800d270:	482e      	ldr	r0, [pc, #184]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d272:	f7f6 fc59 	bl	8003b28 <assert_failed>
 800d276:	68ee      	ldr	r6, [r5, #12]
 800d278:	e716      	b.n	800d0a8 <HAL_TIM_ConfigClockSource+0x314>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d27a:	f241 216d 	movw	r1, #4717	; 0x126d
 800d27e:	482b      	ldr	r0, [pc, #172]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d280:	f7f6 fc52 	bl	8003b28 <assert_failed>
 800d284:	68ee      	ldr	r6, [r5, #12]
 800d286:	e7b2      	b.n	800d1ee <HAL_TIM_ConfigClockSource+0x45a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d288:	4828      	ldr	r0, [pc, #160]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d28a:	f241 213a 	movw	r1, #4666	; 0x123a
 800d28e:	f7f6 fc4b 	bl	8003b28 <assert_failed>
 800d292:	68e8      	ldr	r0, [r5, #12]
 800d294:	e635      	b.n	800cf02 <HAL_TIM_ConfigClockSource+0x16e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d296:	f241 214d 	movw	r1, #4685	; 0x124d
 800d29a:	4824      	ldr	r0, [pc, #144]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d29c:	f7f6 fc44 	bl	8003b28 <assert_failed>
 800d2a0:	68ee      	ldr	r6, [r5, #12]
 800d2a2:	e5d5      	b.n	800ce50 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800d2a4:	4821      	ldr	r0, [pc, #132]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2a6:	f241 2122 	movw	r1, #4642	; 0x1222
 800d2aa:	f7f6 fc3d 	bl	8003b28 <assert_failed>
 800d2ae:	68e8      	ldr	r0, [r5, #12]
 800d2b0:	e67a      	b.n	800cfa8 <HAL_TIM_ConfigClockSource+0x214>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d2b2:	f241 2138 	movw	r1, #4664	; 0x1238
 800d2b6:	481d      	ldr	r0, [pc, #116]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2b8:	f7f6 fc36 	bl	8003b28 <assert_failed>
 800d2bc:	e613      	b.n	800cee6 <HAL_TIM_ConfigClockSource+0x152>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800d2be:	f44f 5191 	mov.w	r1, #4640	; 0x1220
 800d2c2:	481a      	ldr	r0, [pc, #104]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2c4:	f7f6 fc30 	bl	8003b28 <assert_failed>
 800d2c8:	e660      	b.n	800cf8c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2ca:	f241 216c 	movw	r1, #4716	; 0x126c
 800d2ce:	4817      	ldr	r0, [pc, #92]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2d0:	f7f6 fc2a 	bl	8003b28 <assert_failed>
 800d2d4:	e788      	b.n	800d1e8 <HAL_TIM_ConfigClockSource+0x454>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2d6:	f241 2139 	movw	r1, #4665	; 0x1239
 800d2da:	4814      	ldr	r0, [pc, #80]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2dc:	f7f6 fc24 	bl	8003b28 <assert_failed>
 800d2e0:	e60b      	b.n	800cefa <HAL_TIM_ConfigClockSource+0x166>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2e2:	f241 214c 	movw	r1, #4684	; 0x124c
 800d2e6:	4811      	ldr	r0, [pc, #68]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2e8:	f7f6 fc1e 	bl	8003b28 <assert_failed>
 800d2ec:	e5ac      	b.n	800ce48 <HAL_TIM_ConfigClockSource+0xb4>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2ee:	f241 2121 	movw	r1, #4641	; 0x1221
 800d2f2:	480e      	ldr	r0, [pc, #56]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d2f4:	f7f6 fc18 	bl	8003b28 <assert_failed>
 800d2f8:	e652      	b.n	800cfa0 <HAL_TIM_ConfigClockSource+0x20c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800d2fa:	f241 215c 	movw	r1, #4700	; 0x125c
 800d2fe:	480b      	ldr	r0, [pc, #44]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d300:	f7f6 fc12 	bl	8003b28 <assert_failed>
 800d304:	e6cc      	b.n	800d0a0 <HAL_TIM_ConfigClockSource+0x30c>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d306:	f241 211d 	movw	r1, #4637	; 0x121d
 800d30a:	4808      	ldr	r0, [pc, #32]	; (800d32c <HAL_TIM_ConfigClockSource+0x598>)
 800d30c:	f7f6 fc0c 	bl	8003b28 <assert_failed>
 800d310:	e637      	b.n	800cf82 <HAL_TIM_ConfigClockSource+0x1ee>
 800d312:	bf00      	nop
 800d314:	40010000 	.word	0x40010000
 800d318:	40000400 	.word	0x40000400
 800d31c:	40000800 	.word	0x40000800
 800d320:	40010400 	.word	0x40010400
 800d324:	40000c00 	.word	0x40000c00
 800d328:	40002000 	.word	0x40002000
 800d32c:	08027eb0 	.word	0x08027eb0

0800d330 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d330:	6802      	ldr	r2, [r0, #0]
 800d332:	f8df c100 	ldr.w	ip, [pc, #256]	; 800d434 <HAL_TIM_SlaveConfigSynchro+0x104>
{
 800d336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d338:	4b37      	ldr	r3, [pc, #220]	; (800d418 <HAL_TIM_SlaveConfigSynchro+0xe8>)
{
 800d33a:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d33c:	4f37      	ldr	r7, [pc, #220]	; (800d41c <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800d33e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d340:	429a      	cmp	r2, r3
 800d342:	bf18      	it	ne
 800d344:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d348:	4e35      	ldr	r6, [pc, #212]	; (800d420 <HAL_TIM_SlaveConfigSynchro+0xf0>)
 800d34a:	4836      	ldr	r0, [pc, #216]	; (800d424 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800d34c:	bf14      	ite	ne
 800d34e:	2301      	movne	r3, #1
 800d350:	2300      	moveq	r3, #0
 800d352:	4935      	ldr	r1, [pc, #212]	; (800d428 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800d354:	4562      	cmp	r2, ip
 800d356:	bf0c      	ite	eq
 800d358:	2300      	moveq	r3, #0
 800d35a:	f003 0301 	andne.w	r3, r3, #1
 800d35e:	42ba      	cmp	r2, r7
 800d360:	bf0c      	ite	eq
 800d362:	2300      	moveq	r3, #0
 800d364:	f003 0301 	andne.w	r3, r3, #1
 800d368:	42b2      	cmp	r2, r6
 800d36a:	bf0c      	ite	eq
 800d36c:	2300      	moveq	r3, #0
 800d36e:	f003 0301 	andne.w	r3, r3, #1
 800d372:	4282      	cmp	r2, r0
 800d374:	bf0c      	ite	eq
 800d376:	2300      	moveq	r3, #0
 800d378:	f003 0301 	andne.w	r3, r3, #1
 800d37c:	428a      	cmp	r2, r1
 800d37e:	bf0c      	ite	eq
 800d380:	2300      	moveq	r3, #0
 800d382:	f003 0301 	andne.w	r3, r3, #1
 800d386:	b113      	cbz	r3, 800d38e <HAL_TIM_SlaveConfigSynchro+0x5e>
 800d388:	4b28      	ldr	r3, [pc, #160]	; (800d42c <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d138      	bne.n	800d400 <HAL_TIM_SlaveConfigSynchro+0xd0>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	1f1a      	subs	r2, r3, #4
 800d392:	2a03      	cmp	r2, #3
 800d394:	d902      	bls.n	800d39c <HAL_TIM_SlaveConfigSynchro+0x6c>
 800d396:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800d39a:	d12b      	bne.n	800d3f4 <HAL_TIM_SlaveConfigSynchro+0xc4>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800d39c:	686b      	ldr	r3, [r5, #4]
 800d39e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800d3a2:	2b40      	cmp	r3, #64	; 0x40
 800d3a4:	d000      	beq.n	800d3a8 <HAL_TIM_SlaveConfigSynchro+0x78>
 800d3a6:	bb8b      	cbnz	r3, 800d40c <HAL_TIM_SlaveConfigSynchro+0xdc>
  __HAL_LOCK(htim);
 800d3a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d01f      	beq.n	800d3f0 <HAL_TIM_SlaveConfigSynchro+0xc0>
 800d3b0:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b2:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800d3b8:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800d3bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d3c0:	f7ff f9ae 	bl	800c720 <TIM_SlaveTimer_SetConfig>
 800d3c4:	b968      	cbnz	r0, 800d3e2 <HAL_TIM_SlaveConfigSynchro+0xb2>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d3ce:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d3d0:	68da      	ldr	r2, [r3, #12]
 800d3d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3d6:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800d3d8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800d3dc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800d3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800d3e2:	2300      	movs	r3, #0
    return HAL_ERROR;
 800d3e4:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800d3e6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800d3ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800d3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800d3f0:	2002      	movs	r0, #2
}
 800d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800d3f4:	f241 21bc 	movw	r1, #4796	; 0x12bc
 800d3f8:	480d      	ldr	r0, [pc, #52]	; (800d430 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d3fa:	f7f6 fb95 	bl	8003b28 <assert_failed>
 800d3fe:	e7cd      	b.n	800d39c <HAL_TIM_SlaveConfigSynchro+0x6c>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800d400:	f241 21bb 	movw	r1, #4795	; 0x12bb
 800d404:	480a      	ldr	r0, [pc, #40]	; (800d430 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d406:	f7f6 fb8f 	bl	8003b28 <assert_failed>
 800d40a:	e7c0      	b.n	800d38e <HAL_TIM_SlaveConfigSynchro+0x5e>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800d40c:	f241 21bd 	movw	r1, #4797	; 0x12bd
 800d410:	4807      	ldr	r0, [pc, #28]	; (800d430 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800d412:	f7f6 fb89 	bl	8003b28 <assert_failed>
 800d416:	e7c7      	b.n	800d3a8 <HAL_TIM_SlaveConfigSynchro+0x78>
 800d418:	40010000 	.word	0x40010000
 800d41c:	40000800 	.word	0x40000800
 800d420:	40000c00 	.word	0x40000c00
 800d424:	40010400 	.word	0x40010400
 800d428:	40014000 	.word	0x40014000
 800d42c:	40001800 	.word	0x40001800
 800d430:	08027eb0 	.word	0x08027eb0
 800d434:	40000400 	.word	0x40000400

0800d438 <HAL_TIM_OC_DelayElapsedCallback>:
 800d438:	4770      	bx	lr
 800d43a:	bf00      	nop

0800d43c <TIM_DMACaptureCplt>:
{
 800d43c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d43e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800d440:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d442:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800d444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d448:	4282      	cmp	r2, r0
 800d44a:	d017      	beq.n	800d47c <TIM_DMACaptureCplt+0x40>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d44c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d44e:	4283      	cmp	r3, r0
 800d450:	d00b      	beq.n	800d46a <TIM_DMACaptureCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d454:	4283      	cmp	r3, r0
 800d456:	d018      	beq.n	800d48a <TIM_DMACaptureCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d458:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d45a:	4283      	cmp	r3, r0
 800d45c:	d00d      	beq.n	800d47a <TIM_DMACaptureCplt+0x3e>
  HAL_TIM_IC_CaptureCallback(htim);
 800d45e:	4620      	mov	r0, r4
 800d460:	f7f5 fad6 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d464:	2300      	movs	r3, #0
 800d466:	7723      	strb	r3, [r4, #28]
}
 800d468:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d46a:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureCallback(htim);
 800d46c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d46e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800d470:	f7f5 face 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d474:	2300      	movs	r3, #0
 800d476:	7723      	strb	r3, [r4, #28]
}
 800d478:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d47a:	2308      	movs	r3, #8
 800d47c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800d47e:	4620      	mov	r0, r4
 800d480:	f7f5 fac6 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d484:	2300      	movs	r3, #0
 800d486:	7723      	strb	r3, [r4, #28]
}
 800d488:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d48a:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureCallback(htim);
 800d48c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d48e:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 800d490:	f7f5 fabe 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d494:	2300      	movs	r3, #0
 800d496:	7723      	strb	r3, [r4, #28]
}
 800d498:	bd10      	pop	{r4, pc}
 800d49a:	bf00      	nop

0800d49c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800d49c:	4770      	bx	lr
 800d49e:	bf00      	nop

0800d4a0 <TIM_DMACaptureHalfCplt>:
{
 800d4a0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800d4a4:	2301      	movs	r3, #1
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d4a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
  htim->State = HAL_TIM_STATE_READY;
 800d4a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800d4ac:	4282      	cmp	r2, r0
 800d4ae:	d017      	beq.n	800d4e0 <TIM_DMACaptureHalfCplt+0x40>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800d4b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d4b2:	4283      	cmp	r3, r0
 800d4b4:	d00b      	beq.n	800d4ce <TIM_DMACaptureHalfCplt+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800d4b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d4b8:	4283      	cmp	r3, r0
 800d4ba:	d018      	beq.n	800d4ee <TIM_DMACaptureHalfCplt+0x4e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800d4bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d4be:	4283      	cmp	r3, r0
 800d4c0:	d00d      	beq.n	800d4de <TIM_DMACaptureHalfCplt+0x3e>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f7ff ffea 	bl	800d49c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	7723      	strb	r3, [r4, #28]
}
 800d4cc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4ce:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4d0:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d4d2:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4d4:	f7ff ffe2 	bl	800d49c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	7723      	strb	r3, [r4, #28]
}
 800d4dc:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4de:	2308      	movs	r3, #8
 800d4e0:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f7ff ffda 	bl	800d49c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	7723      	strb	r3, [r4, #28]
}
 800d4ec:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4ee:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4f0:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4f2:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800d4f4:	f7ff ffd2 	bl	800d49c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	7723      	strb	r3, [r4, #28]
}
 800d4fc:	bd10      	pop	{r4, pc}
 800d4fe:	bf00      	nop

0800d500 <HAL_TIM_PWM_PulseFinishedCallback>:
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop

0800d504 <HAL_TIM_TriggerCallback>:
 800d504:	4770      	bx	lr
 800d506:	bf00      	nop

0800d508 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d508:	6803      	ldr	r3, [r0, #0]
 800d50a:	691a      	ldr	r2, [r3, #16]
 800d50c:	0791      	lsls	r1, r2, #30
{
 800d50e:	b510      	push	{r4, lr}
 800d510:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d512:	d502      	bpl.n	800d51a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	0792      	lsls	r2, r2, #30
 800d518:	d468      	bmi.n	800d5ec <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d51a:	691a      	ldr	r2, [r3, #16]
 800d51c:	0752      	lsls	r2, r2, #29
 800d51e:	d502      	bpl.n	800d526 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d520:	68da      	ldr	r2, [r3, #12]
 800d522:	0750      	lsls	r0, r2, #29
 800d524:	d44f      	bmi.n	800d5c6 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d526:	691a      	ldr	r2, [r3, #16]
 800d528:	0711      	lsls	r1, r2, #28
 800d52a:	d502      	bpl.n	800d532 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d52c:	68da      	ldr	r2, [r3, #12]
 800d52e:	0712      	lsls	r2, r2, #28
 800d530:	d437      	bmi.n	800d5a2 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d532:	691a      	ldr	r2, [r3, #16]
 800d534:	06d0      	lsls	r0, r2, #27
 800d536:	d502      	bpl.n	800d53e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d538:	68da      	ldr	r2, [r3, #12]
 800d53a:	06d1      	lsls	r1, r2, #27
 800d53c:	d41e      	bmi.n	800d57c <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d53e:	691a      	ldr	r2, [r3, #16]
 800d540:	07d2      	lsls	r2, r2, #31
 800d542:	d502      	bpl.n	800d54a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d544:	68da      	ldr	r2, [r3, #12]
 800d546:	07d0      	lsls	r0, r2, #31
 800d548:	d469      	bmi.n	800d61e <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d54a:	691a      	ldr	r2, [r3, #16]
 800d54c:	0611      	lsls	r1, r2, #24
 800d54e:	d502      	bpl.n	800d556 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	0612      	lsls	r2, r2, #24
 800d554:	d46b      	bmi.n	800d62e <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d556:	691a      	ldr	r2, [r3, #16]
 800d558:	05d0      	lsls	r0, r2, #23
 800d55a:	d502      	bpl.n	800d562 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d55c:	68da      	ldr	r2, [r3, #12]
 800d55e:	0611      	lsls	r1, r2, #24
 800d560:	d46d      	bmi.n	800d63e <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d562:	691a      	ldr	r2, [r3, #16]
 800d564:	0652      	lsls	r2, r2, #25
 800d566:	d502      	bpl.n	800d56e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	0650      	lsls	r0, r2, #25
 800d56c:	d46f      	bmi.n	800d64e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d56e:	691a      	ldr	r2, [r3, #16]
 800d570:	0691      	lsls	r1, r2, #26
 800d572:	d502      	bpl.n	800d57a <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d574:	68da      	ldr	r2, [r3, #12]
 800d576:	0692      	lsls	r2, r2, #26
 800d578:	d449      	bmi.n	800d60e <HAL_TIM_IRQHandler+0x106>
}
 800d57a:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d57c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d580:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800d582:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d584:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d586:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d588:	69db      	ldr	r3, [r3, #28]
 800d58a:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d58e:	d16f      	bne.n	800d670 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d590:	f7ff ff52 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d594:	4620      	mov	r0, r4
 800d596:	f7ff ffb3 	bl	800d500 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d59a:	2200      	movs	r2, #0
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	7722      	strb	r2, [r4, #28]
 800d5a0:	e7cd      	b.n	800d53e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5a2:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5a6:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800d5a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d5aa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d5ac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d5ae:	69db      	ldr	r3, [r3, #28]
 800d5b0:	079b      	lsls	r3, r3, #30
 800d5b2:	d15a      	bne.n	800d66a <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5b4:	f7ff ff40 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5b8:	4620      	mov	r0, r4
 800d5ba:	f7ff ffa1 	bl	800d500 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5be:	2200      	movs	r2, #0
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	7722      	strb	r2, [r4, #28]
 800d5c4:	e7b5      	b.n	800d532 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5c6:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5ca:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800d5cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5ce:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5d0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	f413 7f40 	tst.w	r3, #768	; 0x300
 800d5d8:	d144      	bne.n	800d664 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5da:	f7ff ff2d 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff ff8e 	bl	800d500 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	7722      	strb	r2, [r4, #28]
 800d5ea:	e79c      	b.n	800d526 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5ec:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5f0:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5f2:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5f4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5f6:	699b      	ldr	r3, [r3, #24]
 800d5f8:	0799      	lsls	r1, r3, #30
 800d5fa:	d130      	bne.n	800d65e <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5fc:	f7ff ff1c 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d600:	4620      	mov	r0, r4
 800d602:	f7ff ff7d 	bl	800d500 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d606:	2200      	movs	r2, #0
 800d608:	6823      	ldr	r3, [r4, #0]
 800d60a:	7722      	strb	r2, [r4, #28]
 800d60c:	e785      	b.n	800d51a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d60e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800d612:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d614:	611a      	str	r2, [r3, #16]
}
 800d616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800d61a:	f001 bc53 	b.w	800eec4 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d61e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800d622:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d624:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800d626:	f7f5 fa43 	bl	8002ab0 <HAL_TIM_PeriodElapsedCallback>
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	e78d      	b.n	800d54a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d62e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800d632:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d634:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800d636:	f001 fc47 	bl	800eec8 <HAL_TIMEx_BreakCallback>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	e78b      	b.n	800d556 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d63e:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800d642:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d644:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800d646:	f001 fc41 	bl	800eecc <HAL_TIMEx_Break2Callback>
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	e789      	b.n	800d562 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d64e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800d652:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d654:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800d656:	f7ff ff55 	bl	800d504 <HAL_TIM_TriggerCallback>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	e787      	b.n	800d56e <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800d65e:	f7f5 f9d7 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 800d662:	e7d0      	b.n	800d606 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800d664:	f7f5 f9d4 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 800d668:	e7bc      	b.n	800d5e4 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800d66a:	f7f5 f9d1 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 800d66e:	e7a6      	b.n	800d5be <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800d670:	f7f5 f9ce 	bl	8002a10 <HAL_TIM_IC_CaptureCallback>
 800d674:	e791      	b.n	800d59a <HAL_TIM_IRQHandler+0x92>
 800d676:	bf00      	nop

0800d678 <HAL_TIM_ErrorCallback>:
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop

0800d67c <TIM_DMAError>:
{
 800d67c:	b508      	push	{r3, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d67e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_READY;
 800d680:	2301      	movs	r3, #1
 800d682:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800d686:	f7ff fff7 	bl	800d678 <HAL_TIM_ErrorCallback>
}
 800d68a:	bd08      	pop	{r3, pc}

0800d68c <TIM_Base_SetConfig>:
{
 800d68c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d68e:	4c38      	ldr	r4, [pc, #224]	; (800d770 <TIM_Base_SetConfig+0xe4>)
 800d690:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800d694:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d696:	eba0 0404 	sub.w	r4, r0, r4
 800d69a:	fab4 f484 	clz	r4, r4
 800d69e:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800d6a2:	d006      	beq.n	800d6b2 <TIM_Base_SetConfig+0x26>
 800d6a4:	b92c      	cbnz	r4, 800d6b2 <TIM_Base_SetConfig+0x26>
 800d6a6:	4d33      	ldr	r5, [pc, #204]	; (800d774 <TIM_Base_SetConfig+0xe8>)
 800d6a8:	4a33      	ldr	r2, [pc, #204]	; (800d778 <TIM_Base_SetConfig+0xec>)
 800d6aa:	4290      	cmp	r0, r2
 800d6ac:	bf18      	it	ne
 800d6ae:	42a8      	cmpne	r0, r5
 800d6b0:	d121      	bne.n	800d6f6 <TIM_Base_SetConfig+0x6a>
 800d6b2:	4a32      	ldr	r2, [pc, #200]	; (800d77c <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800d6b8:	684d      	ldr	r5, [r1, #4]
 800d6ba:	1a82      	subs	r2, r0, r2
 800d6bc:	432b      	orrs	r3, r5
 800d6be:	fab2 f282 	clz	r2, r2
 800d6c2:	0952      	lsrs	r2, r2, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6c4:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6ca:	694d      	ldr	r5, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6cc:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6ce:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800d6d0:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6d6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800d6d8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6da:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d6dc:	6286      	str	r6, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6de:	b924      	cbnz	r4, 800d6ea <TIM_Base_SetConfig+0x5e>
 800d6e0:	b91a      	cbnz	r2, 800d6ea <TIM_Base_SetConfig+0x5e>
  TIMx->EGR = TIM_EGR_UG;
 800d6e2:	2301      	movs	r3, #1
}
 800d6e4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800d6e6:	6143      	str	r3, [r0, #20]
}
 800d6e8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800d6ea:	690b      	ldr	r3, [r1, #16]
 800d6ec:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800d6ee:	2301      	movs	r3, #1
}
 800d6f0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800d6f2:	6143      	str	r3, [r0, #20]
}
 800d6f4:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d6f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d6fa:	4290      	cmp	r0, r2
 800d6fc:	d024      	beq.n	800d748 <TIM_Base_SetConfig+0xbc>
 800d6fe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800d702:	4290      	cmp	r0, r2
 800d704:	d020      	beq.n	800d748 <TIM_Base_SetConfig+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d706:	4a1e      	ldr	r2, [pc, #120]	; (800d780 <TIM_Base_SetConfig+0xf4>)
 800d708:	4d1e      	ldr	r5, [pc, #120]	; (800d784 <TIM_Base_SetConfig+0xf8>)
 800d70a:	4290      	cmp	r0, r2
 800d70c:	bf18      	it	ne
 800d70e:	42a8      	cmpne	r0, r5
 800d710:	bf0c      	ite	eq
 800d712:	2201      	moveq	r2, #1
 800d714:	2200      	movne	r2, #0
 800d716:	d028      	beq.n	800d76a <TIM_Base_SetConfig+0xde>
 800d718:	4e1b      	ldr	r6, [pc, #108]	; (800d788 <TIM_Base_SetConfig+0xfc>)
 800d71a:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800d71e:	42a8      	cmp	r0, r5
 800d720:	bf18      	it	ne
 800d722:	42b0      	cmpne	r0, r6
 800d724:	d0ce      	beq.n	800d6c4 <TIM_Base_SetConfig+0x38>
 800d726:	4a19      	ldr	r2, [pc, #100]	; (800d78c <TIM_Base_SetConfig+0x100>)
 800d728:	4290      	cmp	r0, r2
 800d72a:	d01e      	beq.n	800d76a <TIM_Base_SetConfig+0xde>
 800d72c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d730:	4290      	cmp	r0, r2
 800d732:	d01a      	beq.n	800d76a <TIM_Base_SetConfig+0xde>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d734:	694a      	ldr	r2, [r1, #20]
 800d736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d73a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d73c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800d73e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800d740:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d742:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800d744:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d746:	e7cc      	b.n	800d6e2 <TIM_Base_SetConfig+0x56>
 800d748:	4a0c      	ldr	r2, [pc, #48]	; (800d77c <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d74a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d74e:	4d10      	ldr	r5, [pc, #64]	; (800d790 <TIM_Base_SetConfig+0x104>)
 800d750:	1a82      	subs	r2, r0, r2
    tmpcr1 |= Structure->CounterMode;
 800d752:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d754:	42a8      	cmp	r0, r5
 800d756:	fab2 f282 	clz	r2, r2
    tmpcr1 |= Structure->CounterMode;
 800d75a:	ea43 0306 	orr.w	r3, r3, r6
 800d75e:	ea4f 1252 	mov.w	r2, r2, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d762:	d0af      	beq.n	800d6c4 <TIM_Base_SetConfig+0x38>
 800d764:	2a00      	cmp	r2, #0
 800d766:	d1ad      	bne.n	800d6c4 <TIM_Base_SetConfig+0x38>
 800d768:	e7cd      	b.n	800d706 <TIM_Base_SetConfig+0x7a>
 800d76a:	2200      	movs	r2, #0
 800d76c:	e7aa      	b.n	800d6c4 <TIM_Base_SetConfig+0x38>
 800d76e:	bf00      	nop
 800d770:	40010000 	.word	0x40010000
 800d774:	40000400 	.word	0x40000400
 800d778:	40000800 	.word	0x40000800
 800d77c:	40010400 	.word	0x40010400
 800d780:	40014400 	.word	0x40014400
 800d784:	40014000 	.word	0x40014000
 800d788:	40014800 	.word	0x40014800
 800d78c:	40001c00 	.word	0x40001c00
 800d790:	40000c00 	.word	0x40000c00

0800d794 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800d794:	2800      	cmp	r0, #0
 800d796:	f000 80a1 	beq.w	800d8dc <HAL_TIM_Base_Init+0x148>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d79a:	6802      	ldr	r2, [r0, #0]
 800d79c:	4953      	ldr	r1, [pc, #332]	; (800d8ec <HAL_TIM_Base_Init+0x158>)
{
 800d79e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d7a0:	4b53      	ldr	r3, [pc, #332]	; (800d8f0 <HAL_TIM_Base_Init+0x15c>)
 800d7a2:	4604      	mov	r4, r0
 800d7a4:	4853      	ldr	r0, [pc, #332]	; (800d8f4 <HAL_TIM_Base_Init+0x160>)
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	bf18      	it	ne
 800d7aa:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d7ae:	4d52      	ldr	r5, [pc, #328]	; (800d8f8 <HAL_TIM_Base_Init+0x164>)
 800d7b0:	bf14      	ite	ne
 800d7b2:	2301      	movne	r3, #1
 800d7b4:	2300      	moveq	r3, #0
 800d7b6:	4282      	cmp	r2, r0
 800d7b8:	bf0c      	ite	eq
 800d7ba:	2300      	moveq	r3, #0
 800d7bc:	f003 0301 	andne.w	r3, r3, #1
 800d7c0:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d7c4:	428a      	cmp	r2, r1
 800d7c6:	bf0c      	ite	eq
 800d7c8:	2300      	moveq	r3, #0
 800d7ca:	f003 0301 	andne.w	r3, r3, #1
 800d7ce:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d7d2:	42aa      	cmp	r2, r5
 800d7d4:	bf0c      	ite	eq
 800d7d6:	2300      	moveq	r3, #0
 800d7d8:	f003 0301 	andne.w	r3, r3, #1
 800d7dc:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800d7e0:	4282      	cmp	r2, r0
 800d7e2:	bf0c      	ite	eq
 800d7e4:	2300      	moveq	r3, #0
 800d7e6:	f003 0301 	andne.w	r3, r3, #1
 800d7ea:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800d7ee:	428a      	cmp	r2, r1
 800d7f0:	bf0c      	ite	eq
 800d7f2:	2300      	moveq	r3, #0
 800d7f4:	f003 0301 	andne.w	r3, r3, #1
 800d7f8:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800d7fc:	42aa      	cmp	r2, r5
 800d7fe:	bf0c      	ite	eq
 800d800:	2300      	moveq	r3, #0
 800d802:	f003 0301 	andne.w	r3, r3, #1
 800d806:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800d80a:	4282      	cmp	r2, r0
 800d80c:	bf0c      	ite	eq
 800d80e:	2300      	moveq	r3, #0
 800d810:	f003 0301 	andne.w	r3, r3, #1
 800d814:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d818:	428a      	cmp	r2, r1
 800d81a:	bf0c      	ite	eq
 800d81c:	2300      	moveq	r3, #0
 800d81e:	f003 0301 	andne.w	r3, r3, #1
 800d822:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d826:	42aa      	cmp	r2, r5
 800d828:	bf0c      	ite	eq
 800d82a:	2300      	moveq	r3, #0
 800d82c:	f003 0301 	andne.w	r3, r3, #1
 800d830:	4282      	cmp	r2, r0
 800d832:	bf0c      	ite	eq
 800d834:	2300      	moveq	r3, #0
 800d836:	f003 0301 	andne.w	r3, r3, #1
 800d83a:	428a      	cmp	r2, r1
 800d83c:	bf0c      	ite	eq
 800d83e:	2300      	moveq	r3, #0
 800d840:	f003 0301 	andne.w	r3, r3, #1
 800d844:	b113      	cbz	r3, 800d84c <HAL_TIM_Base_Init+0xb8>
 800d846:	4b2d      	ldr	r3, [pc, #180]	; (800d8fc <HAL_TIM_Base_Init+0x168>)
 800d848:	429a      	cmp	r2, r3
 800d84a:	d149      	bne.n	800d8e0 <HAL_TIM_Base_Init+0x14c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d84c:	68a3      	ldr	r3, [r4, #8]
 800d84e:	f023 0210 	bic.w	r2, r3, #16
 800d852:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800d856:	2920      	cmp	r1, #32
 800d858:	bf18      	it	ne
 800d85a:	2a00      	cmpne	r2, #0
 800d85c:	d001      	beq.n	800d862 <HAL_TIM_Base_Init+0xce>
 800d85e:	2b40      	cmp	r3, #64	; 0x40
 800d860:	d136      	bne.n	800d8d0 <HAL_TIM_Base_Init+0x13c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d862:	6923      	ldr	r3, [r4, #16]
 800d864:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d868:	d002      	beq.n	800d870 <HAL_TIM_Base_Init+0xdc>
 800d86a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d86e:	d115      	bne.n	800d89c <HAL_TIM_Base_Init+0x108>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d870:	69a3      	ldr	r3, [r4, #24]
 800d872:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d876:	d11a      	bne.n	800d8ae <HAL_TIM_Base_Init+0x11a>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d878:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d87c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d880:	b303      	cbz	r3, 800d8c4 <HAL_TIM_Base_Init+0x130>
  htim->State = HAL_TIM_STATE_BUSY;
 800d882:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d884:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800d886:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d88a:	f851 0b04 	ldr.w	r0, [r1], #4
 800d88e:	f7ff fefd 	bl	800d68c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800d892:	2301      	movs	r3, #1
  return HAL_OK;
 800d894:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800d896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800d89a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d89c:	f240 1117 	movw	r1, #279	; 0x117
 800d8a0:	4817      	ldr	r0, [pc, #92]	; (800d900 <HAL_TIM_Base_Init+0x16c>)
 800d8a2:	f7f6 f941 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d8a6:	69a3      	ldr	r3, [r4, #24]
 800d8a8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d8ac:	d0e4      	beq.n	800d878 <HAL_TIM_Base_Init+0xe4>
 800d8ae:	f44f 718c 	mov.w	r1, #280	; 0x118
 800d8b2:	4813      	ldr	r0, [pc, #76]	; (800d900 <HAL_TIM_Base_Init+0x16c>)
 800d8b4:	f7f6 f938 	bl	8003b28 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d8b8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d8bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1de      	bne.n	800d882 <HAL_TIM_Base_Init+0xee>
    HAL_TIM_Base_MspInit(htim);
 800d8c4:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800d8c6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800d8ca:	f7f7 fa3f 	bl	8004d4c <HAL_TIM_Base_MspInit>
 800d8ce:	e7d8      	b.n	800d882 <HAL_TIM_Base_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d8d0:	f44f 718b 	mov.w	r1, #278	; 0x116
 800d8d4:	480a      	ldr	r0, [pc, #40]	; (800d900 <HAL_TIM_Base_Init+0x16c>)
 800d8d6:	f7f6 f927 	bl	8003b28 <assert_failed>
 800d8da:	e7c2      	b.n	800d862 <HAL_TIM_Base_Init+0xce>
    return HAL_ERROR;
 800d8dc:	2001      	movs	r0, #1
}
 800d8de:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d8e0:	f240 1115 	movw	r1, #277	; 0x115
 800d8e4:	4806      	ldr	r0, [pc, #24]	; (800d900 <HAL_TIM_Base_Init+0x16c>)
 800d8e6:	f7f6 f91f 	bl	8003b28 <assert_failed>
 800d8ea:	e7af      	b.n	800d84c <HAL_TIM_Base_Init+0xb8>
 800d8ec:	40000800 	.word	0x40000800
 800d8f0:	40010000 	.word	0x40010000
 800d8f4:	40000400 	.word	0x40000400
 800d8f8:	40000c00 	.word	0x40000c00
 800d8fc:	40002000 	.word	0x40002000
 800d900:	08027eb0 	.word	0x08027eb0

0800d904 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800d904:	2800      	cmp	r0, #0
 800d906:	f000 80a1 	beq.w	800da4c <HAL_TIM_OC_Init+0x148>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d90a:	6802      	ldr	r2, [r0, #0]
 800d90c:	4953      	ldr	r1, [pc, #332]	; (800da5c <HAL_TIM_OC_Init+0x158>)
{
 800d90e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d910:	4b53      	ldr	r3, [pc, #332]	; (800da60 <HAL_TIM_OC_Init+0x15c>)
 800d912:	4604      	mov	r4, r0
 800d914:	4853      	ldr	r0, [pc, #332]	; (800da64 <HAL_TIM_OC_Init+0x160>)
 800d916:	429a      	cmp	r2, r3
 800d918:	bf18      	it	ne
 800d91a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d91e:	4d52      	ldr	r5, [pc, #328]	; (800da68 <HAL_TIM_OC_Init+0x164>)
 800d920:	bf14      	ite	ne
 800d922:	2301      	movne	r3, #1
 800d924:	2300      	moveq	r3, #0
 800d926:	4282      	cmp	r2, r0
 800d928:	bf0c      	ite	eq
 800d92a:	2300      	moveq	r3, #0
 800d92c:	f003 0301 	andne.w	r3, r3, #1
 800d930:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800d934:	428a      	cmp	r2, r1
 800d936:	bf0c      	ite	eq
 800d938:	2300      	moveq	r3, #0
 800d93a:	f003 0301 	andne.w	r3, r3, #1
 800d93e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800d942:	42aa      	cmp	r2, r5
 800d944:	bf0c      	ite	eq
 800d946:	2300      	moveq	r3, #0
 800d948:	f003 0301 	andne.w	r3, r3, #1
 800d94c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800d950:	4282      	cmp	r2, r0
 800d952:	bf0c      	ite	eq
 800d954:	2300      	moveq	r3, #0
 800d956:	f003 0301 	andne.w	r3, r3, #1
 800d95a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800d95e:	428a      	cmp	r2, r1
 800d960:	bf0c      	ite	eq
 800d962:	2300      	moveq	r3, #0
 800d964:	f003 0301 	andne.w	r3, r3, #1
 800d968:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800d96c:	42aa      	cmp	r2, r5
 800d96e:	bf0c      	ite	eq
 800d970:	2300      	moveq	r3, #0
 800d972:	f003 0301 	andne.w	r3, r3, #1
 800d976:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800d97a:	4282      	cmp	r2, r0
 800d97c:	bf0c      	ite	eq
 800d97e:	2300      	moveq	r3, #0
 800d980:	f003 0301 	andne.w	r3, r3, #1
 800d984:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800d988:	428a      	cmp	r2, r1
 800d98a:	bf0c      	ite	eq
 800d98c:	2300      	moveq	r3, #0
 800d98e:	f003 0301 	andne.w	r3, r3, #1
 800d992:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800d996:	42aa      	cmp	r2, r5
 800d998:	bf0c      	ite	eq
 800d99a:	2300      	moveq	r3, #0
 800d99c:	f003 0301 	andne.w	r3, r3, #1
 800d9a0:	4282      	cmp	r2, r0
 800d9a2:	bf0c      	ite	eq
 800d9a4:	2300      	moveq	r3, #0
 800d9a6:	f003 0301 	andne.w	r3, r3, #1
 800d9aa:	428a      	cmp	r2, r1
 800d9ac:	bf0c      	ite	eq
 800d9ae:	2300      	moveq	r3, #0
 800d9b0:	f003 0301 	andne.w	r3, r3, #1
 800d9b4:	b113      	cbz	r3, 800d9bc <HAL_TIM_OC_Init+0xb8>
 800d9b6:	4b2d      	ldr	r3, [pc, #180]	; (800da6c <HAL_TIM_OC_Init+0x168>)
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d149      	bne.n	800da50 <HAL_TIM_OC_Init+0x14c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800d9bc:	68a3      	ldr	r3, [r4, #8]
 800d9be:	f023 0210 	bic.w	r2, r3, #16
 800d9c2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800d9c6:	2920      	cmp	r1, #32
 800d9c8:	bf18      	it	ne
 800d9ca:	2a00      	cmpne	r2, #0
 800d9cc:	d001      	beq.n	800d9d2 <HAL_TIM_OC_Init+0xce>
 800d9ce:	2b40      	cmp	r3, #64	; 0x40
 800d9d0:	d136      	bne.n	800da40 <HAL_TIM_OC_Init+0x13c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800d9d2:	6923      	ldr	r3, [r4, #16]
 800d9d4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d9d8:	d002      	beq.n	800d9e0 <HAL_TIM_OC_Init+0xdc>
 800d9da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9de:	d115      	bne.n	800da0c <HAL_TIM_OC_Init+0x108>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800d9e0:	69a3      	ldr	r3, [r4, #24]
 800d9e2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800d9e6:	d11a      	bne.n	800da1e <HAL_TIM_OC_Init+0x11a>
  if (htim->State == HAL_TIM_STATE_RESET)
 800d9e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800d9ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d9f0:	b303      	cbz	r3, 800da34 <HAL_TIM_OC_Init+0x130>
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d9f4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800d9f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d9fa:	f851 0b04 	ldr.w	r0, [r1], #4
 800d9fe:	f7ff fe45 	bl	800d68c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800da02:	2301      	movs	r3, #1
  return HAL_OK;
 800da04:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800da06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800da0c:	f240 2163 	movw	r1, #611	; 0x263
 800da10:	4817      	ldr	r0, [pc, #92]	; (800da70 <HAL_TIM_OC_Init+0x16c>)
 800da12:	f7f6 f889 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800da16:	69a3      	ldr	r3, [r4, #24]
 800da18:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800da1c:	d0e4      	beq.n	800d9e8 <HAL_TIM_OC_Init+0xe4>
 800da1e:	f44f 7119 	mov.w	r1, #612	; 0x264
 800da22:	4813      	ldr	r0, [pc, #76]	; (800da70 <HAL_TIM_OC_Init+0x16c>)
 800da24:	f7f6 f880 	bl	8003b28 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800da28:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800da2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1de      	bne.n	800d9f2 <HAL_TIM_OC_Init+0xee>
    HAL_TIM_OC_MspInit(htim);
 800da34:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800da36:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800da3a:	f7ff f9a5 	bl	800cd88 <HAL_TIM_OC_MspInit>
 800da3e:	e7d8      	b.n	800d9f2 <HAL_TIM_OC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800da40:	f240 2162 	movw	r1, #610	; 0x262
 800da44:	480a      	ldr	r0, [pc, #40]	; (800da70 <HAL_TIM_OC_Init+0x16c>)
 800da46:	f7f6 f86f 	bl	8003b28 <assert_failed>
 800da4a:	e7c2      	b.n	800d9d2 <HAL_TIM_OC_Init+0xce>
    return HAL_ERROR;
 800da4c:	2001      	movs	r0, #1
}
 800da4e:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800da50:	f240 2161 	movw	r1, #609	; 0x261
 800da54:	4806      	ldr	r0, [pc, #24]	; (800da70 <HAL_TIM_OC_Init+0x16c>)
 800da56:	f7f6 f867 	bl	8003b28 <assert_failed>
 800da5a:	e7af      	b.n	800d9bc <HAL_TIM_OC_Init+0xb8>
 800da5c:	40000800 	.word	0x40000800
 800da60:	40010000 	.word	0x40010000
 800da64:	40000400 	.word	0x40000400
 800da68:	40000c00 	.word	0x40000c00
 800da6c:	40002000 	.word	0x40002000
 800da70:	08027eb0 	.word	0x08027eb0

0800da74 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800da74:	2800      	cmp	r0, #0
 800da76:	f000 80a1 	beq.w	800dbbc <HAL_TIM_PWM_Init+0x148>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800da7a:	6802      	ldr	r2, [r0, #0]
 800da7c:	4953      	ldr	r1, [pc, #332]	; (800dbcc <HAL_TIM_PWM_Init+0x158>)
{
 800da7e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800da80:	4b53      	ldr	r3, [pc, #332]	; (800dbd0 <HAL_TIM_PWM_Init+0x15c>)
 800da82:	4604      	mov	r4, r0
 800da84:	4853      	ldr	r0, [pc, #332]	; (800dbd4 <HAL_TIM_PWM_Init+0x160>)
 800da86:	429a      	cmp	r2, r3
 800da88:	bf18      	it	ne
 800da8a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800da8e:	4d52      	ldr	r5, [pc, #328]	; (800dbd8 <HAL_TIM_PWM_Init+0x164>)
 800da90:	bf14      	ite	ne
 800da92:	2301      	movne	r3, #1
 800da94:	2300      	moveq	r3, #0
 800da96:	4282      	cmp	r2, r0
 800da98:	bf0c      	ite	eq
 800da9a:	2300      	moveq	r3, #0
 800da9c:	f003 0301 	andne.w	r3, r3, #1
 800daa0:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800daa4:	428a      	cmp	r2, r1
 800daa6:	bf0c      	ite	eq
 800daa8:	2300      	moveq	r3, #0
 800daaa:	f003 0301 	andne.w	r3, r3, #1
 800daae:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800dab2:	42aa      	cmp	r2, r5
 800dab4:	bf0c      	ite	eq
 800dab6:	2300      	moveq	r3, #0
 800dab8:	f003 0301 	andne.w	r3, r3, #1
 800dabc:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800dac0:	4282      	cmp	r2, r0
 800dac2:	bf0c      	ite	eq
 800dac4:	2300      	moveq	r3, #0
 800dac6:	f003 0301 	andne.w	r3, r3, #1
 800daca:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800dace:	428a      	cmp	r2, r1
 800dad0:	bf0c      	ite	eq
 800dad2:	2300      	moveq	r3, #0
 800dad4:	f003 0301 	andne.w	r3, r3, #1
 800dad8:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800dadc:	42aa      	cmp	r2, r5
 800dade:	bf0c      	ite	eq
 800dae0:	2300      	moveq	r3, #0
 800dae2:	f003 0301 	andne.w	r3, r3, #1
 800dae6:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800daea:	4282      	cmp	r2, r0
 800daec:	bf0c      	ite	eq
 800daee:	2300      	moveq	r3, #0
 800daf0:	f003 0301 	andne.w	r3, r3, #1
 800daf4:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800daf8:	428a      	cmp	r2, r1
 800dafa:	bf0c      	ite	eq
 800dafc:	2300      	moveq	r3, #0
 800dafe:	f003 0301 	andne.w	r3, r3, #1
 800db02:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800db06:	42aa      	cmp	r2, r5
 800db08:	bf0c      	ite	eq
 800db0a:	2300      	moveq	r3, #0
 800db0c:	f003 0301 	andne.w	r3, r3, #1
 800db10:	4282      	cmp	r2, r0
 800db12:	bf0c      	ite	eq
 800db14:	2300      	moveq	r3, #0
 800db16:	f003 0301 	andne.w	r3, r3, #1
 800db1a:	428a      	cmp	r2, r1
 800db1c:	bf0c      	ite	eq
 800db1e:	2300      	moveq	r3, #0
 800db20:	f003 0301 	andne.w	r3, r3, #1
 800db24:	b113      	cbz	r3, 800db2c <HAL_TIM_PWM_Init+0xb8>
 800db26:	4b2d      	ldr	r3, [pc, #180]	; (800dbdc <HAL_TIM_PWM_Init+0x168>)
 800db28:	429a      	cmp	r2, r3
 800db2a:	d149      	bne.n	800dbc0 <HAL_TIM_PWM_Init+0x14c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800db2c:	68a3      	ldr	r3, [r4, #8]
 800db2e:	f023 0210 	bic.w	r2, r3, #16
 800db32:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800db36:	2920      	cmp	r1, #32
 800db38:	bf18      	it	ne
 800db3a:	2a00      	cmpne	r2, #0
 800db3c:	d001      	beq.n	800db42 <HAL_TIM_PWM_Init+0xce>
 800db3e:	2b40      	cmp	r3, #64	; 0x40
 800db40:	d136      	bne.n	800dbb0 <HAL_TIM_PWM_Init+0x13c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800db42:	6923      	ldr	r3, [r4, #16]
 800db44:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800db48:	d002      	beq.n	800db50 <HAL_TIM_PWM_Init+0xdc>
 800db4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db4e:	d115      	bne.n	800db7c <HAL_TIM_PWM_Init+0x108>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800db50:	69a3      	ldr	r3, [r4, #24]
 800db52:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800db56:	d11a      	bne.n	800db8e <HAL_TIM_PWM_Init+0x11a>
  if (htim->State == HAL_TIM_STATE_RESET)
 800db58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800db5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800db60:	b303      	cbz	r3, 800dba4 <HAL_TIM_PWM_Init+0x130>
  htim->State = HAL_TIM_STATE_BUSY;
 800db62:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db64:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800db66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db6a:	f851 0b04 	ldr.w	r0, [r1], #4
 800db6e:	f7ff fd8d 	bl	800d68c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800db72:	2301      	movs	r3, #1
  return HAL_OK;
 800db74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800db76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800db7a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800db7c:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800db80:	4817      	ldr	r0, [pc, #92]	; (800dbe0 <HAL_TIM_PWM_Init+0x16c>)
 800db82:	f7f5 ffd1 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800db86:	69a3      	ldr	r3, [r4, #24]
 800db88:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800db8c:	d0e4      	beq.n	800db58 <HAL_TIM_PWM_Init+0xe4>
 800db8e:	f240 41a5 	movw	r1, #1189	; 0x4a5
 800db92:	4813      	ldr	r0, [pc, #76]	; (800dbe0 <HAL_TIM_PWM_Init+0x16c>)
 800db94:	f7f5 ffc8 	bl	8003b28 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800db98:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800db9c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1de      	bne.n	800db62 <HAL_TIM_PWM_Init+0xee>
    HAL_TIM_PWM_MspInit(htim);
 800dba4:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800dba6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800dbaa:	f7ff f8ef 	bl	800cd8c <HAL_TIM_PWM_MspInit>
 800dbae:	e7d8      	b.n	800db62 <HAL_TIM_PWM_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800dbb0:	f240 41a3 	movw	r1, #1187	; 0x4a3
 800dbb4:	480a      	ldr	r0, [pc, #40]	; (800dbe0 <HAL_TIM_PWM_Init+0x16c>)
 800dbb6:	f7f5 ffb7 	bl	8003b28 <assert_failed>
 800dbba:	e7c2      	b.n	800db42 <HAL_TIM_PWM_Init+0xce>
    return HAL_ERROR;
 800dbbc:	2001      	movs	r0, #1
}
 800dbbe:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dbc0:	f240 41a2 	movw	r1, #1186	; 0x4a2
 800dbc4:	4806      	ldr	r0, [pc, #24]	; (800dbe0 <HAL_TIM_PWM_Init+0x16c>)
 800dbc6:	f7f5 ffaf 	bl	8003b28 <assert_failed>
 800dbca:	e7af      	b.n	800db2c <HAL_TIM_PWM_Init+0xb8>
 800dbcc:	40000800 	.word	0x40000800
 800dbd0:	40010000 	.word	0x40010000
 800dbd4:	40000400 	.word	0x40000400
 800dbd8:	40000c00 	.word	0x40000c00
 800dbdc:	40002000 	.word	0x40002000
 800dbe0:	08027eb0 	.word	0x08027eb0

0800dbe4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	f000 80a1 	beq.w	800dd2c <HAL_TIM_IC_Init+0x148>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dbea:	6802      	ldr	r2, [r0, #0]
 800dbec:	4953      	ldr	r1, [pc, #332]	; (800dd3c <HAL_TIM_IC_Init+0x158>)
{
 800dbee:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dbf0:	4b53      	ldr	r3, [pc, #332]	; (800dd40 <HAL_TIM_IC_Init+0x15c>)
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	4853      	ldr	r0, [pc, #332]	; (800dd44 <HAL_TIM_IC_Init+0x160>)
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	bf18      	it	ne
 800dbfa:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800dbfe:	4d52      	ldr	r5, [pc, #328]	; (800dd48 <HAL_TIM_IC_Init+0x164>)
 800dc00:	bf14      	ite	ne
 800dc02:	2301      	movne	r3, #1
 800dc04:	2300      	moveq	r3, #0
 800dc06:	4282      	cmp	r2, r0
 800dc08:	bf0c      	ite	eq
 800dc0a:	2300      	moveq	r3, #0
 800dc0c:	f003 0301 	andne.w	r3, r3, #1
 800dc10:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800dc14:	428a      	cmp	r2, r1
 800dc16:	bf0c      	ite	eq
 800dc18:	2300      	moveq	r3, #0
 800dc1a:	f003 0301 	andne.w	r3, r3, #1
 800dc1e:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800dc22:	42aa      	cmp	r2, r5
 800dc24:	bf0c      	ite	eq
 800dc26:	2300      	moveq	r3, #0
 800dc28:	f003 0301 	andne.w	r3, r3, #1
 800dc2c:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800dc30:	4282      	cmp	r2, r0
 800dc32:	bf0c      	ite	eq
 800dc34:	2300      	moveq	r3, #0
 800dc36:	f003 0301 	andne.w	r3, r3, #1
 800dc3a:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800dc3e:	428a      	cmp	r2, r1
 800dc40:	bf0c      	ite	eq
 800dc42:	2300      	moveq	r3, #0
 800dc44:	f003 0301 	andne.w	r3, r3, #1
 800dc48:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800dc4c:	42aa      	cmp	r2, r5
 800dc4e:	bf0c      	ite	eq
 800dc50:	2300      	moveq	r3, #0
 800dc52:	f003 0301 	andne.w	r3, r3, #1
 800dc56:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800dc5a:	4282      	cmp	r2, r0
 800dc5c:	bf0c      	ite	eq
 800dc5e:	2300      	moveq	r3, #0
 800dc60:	f003 0301 	andne.w	r3, r3, #1
 800dc64:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800dc68:	428a      	cmp	r2, r1
 800dc6a:	bf0c      	ite	eq
 800dc6c:	2300      	moveq	r3, #0
 800dc6e:	f003 0301 	andne.w	r3, r3, #1
 800dc72:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800dc76:	42aa      	cmp	r2, r5
 800dc78:	bf0c      	ite	eq
 800dc7a:	2300      	moveq	r3, #0
 800dc7c:	f003 0301 	andne.w	r3, r3, #1
 800dc80:	4282      	cmp	r2, r0
 800dc82:	bf0c      	ite	eq
 800dc84:	2300      	moveq	r3, #0
 800dc86:	f003 0301 	andne.w	r3, r3, #1
 800dc8a:	428a      	cmp	r2, r1
 800dc8c:	bf0c      	ite	eq
 800dc8e:	2300      	moveq	r3, #0
 800dc90:	f003 0301 	andne.w	r3, r3, #1
 800dc94:	b113      	cbz	r3, 800dc9c <HAL_TIM_IC_Init+0xb8>
 800dc96:	4b2d      	ldr	r3, [pc, #180]	; (800dd4c <HAL_TIM_IC_Init+0x168>)
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d149      	bne.n	800dd30 <HAL_TIM_IC_Init+0x14c>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800dc9c:	68a3      	ldr	r3, [r4, #8]
 800dc9e:	f023 0210 	bic.w	r2, r3, #16
 800dca2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800dca6:	2920      	cmp	r1, #32
 800dca8:	bf18      	it	ne
 800dcaa:	2a00      	cmpne	r2, #0
 800dcac:	d001      	beq.n	800dcb2 <HAL_TIM_IC_Init+0xce>
 800dcae:	2b40      	cmp	r3, #64	; 0x40
 800dcb0:	d136      	bne.n	800dd20 <HAL_TIM_IC_Init+0x13c>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800dcb2:	6923      	ldr	r3, [r4, #16]
 800dcb4:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800dcb8:	d002      	beq.n	800dcc0 <HAL_TIM_IC_Init+0xdc>
 800dcba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcbe:	d115      	bne.n	800dcec <HAL_TIM_IC_Init+0x108>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800dcc0:	69a3      	ldr	r3, [r4, #24]
 800dcc2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800dcc6:	d11a      	bne.n	800dcfe <HAL_TIM_IC_Init+0x11a>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dcc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800dccc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dcd0:	b303      	cbz	r3, 800dd14 <HAL_TIM_IC_Init+0x130>
  htim->State = HAL_TIM_STATE_BUSY;
 800dcd2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcd4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800dcd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcda:	f851 0b04 	ldr.w	r0, [r1], #4
 800dcde:	f7ff fcd5 	bl	800d68c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800dce2:	2301      	movs	r3, #1
  return HAL_OK;
 800dce4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800dce6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800dcea:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800dcec:	f240 61e6 	movw	r1, #1766	; 0x6e6
 800dcf0:	4817      	ldr	r0, [pc, #92]	; (800dd50 <HAL_TIM_IC_Init+0x16c>)
 800dcf2:	f7f5 ff19 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800dcf6:	69a3      	ldr	r3, [r4, #24]
 800dcf8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800dcfc:	d0e4      	beq.n	800dcc8 <HAL_TIM_IC_Init+0xe4>
 800dcfe:	f240 61e7 	movw	r1, #1767	; 0x6e7
 800dd02:	4813      	ldr	r0, [pc, #76]	; (800dd50 <HAL_TIM_IC_Init+0x16c>)
 800dd04:	f7f5 ff10 	bl	8003b28 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800dd08:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800dd0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d1de      	bne.n	800dcd2 <HAL_TIM_IC_Init+0xee>
    HAL_TIM_IC_MspInit(htim);
 800dd14:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800dd16:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800dd1a:	f7ff f839 	bl	800cd90 <HAL_TIM_IC_MspInit>
 800dd1e:	e7d8      	b.n	800dcd2 <HAL_TIM_IC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800dd20:	f240 61e5 	movw	r1, #1765	; 0x6e5
 800dd24:	480a      	ldr	r0, [pc, #40]	; (800dd50 <HAL_TIM_IC_Init+0x16c>)
 800dd26:	f7f5 feff 	bl	8003b28 <assert_failed>
 800dd2a:	e7c2      	b.n	800dcb2 <HAL_TIM_IC_Init+0xce>
    return HAL_ERROR;
 800dd2c:	2001      	movs	r0, #1
}
 800dd2e:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dd30:	f240 61e4 	movw	r1, #1764	; 0x6e4
 800dd34:	4806      	ldr	r0, [pc, #24]	; (800dd50 <HAL_TIM_IC_Init+0x16c>)
 800dd36:	f7f5 fef7 	bl	8003b28 <assert_failed>
 800dd3a:	e7af      	b.n	800dc9c <HAL_TIM_IC_Init+0xb8>
 800dd3c:	40000800 	.word	0x40000800
 800dd40:	40010000 	.word	0x40010000
 800dd44:	40000400 	.word	0x40000400
 800dd48:	40000c00 	.word	0x40000c00
 800dd4c:	40002000 	.word	0x40002000
 800dd50:	08027eb0 	.word	0x08027eb0

0800dd54 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd54:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd56:	4b2e      	ldr	r3, [pc, #184]	; (800de10 <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd58:	f022 0210 	bic.w	r2, r2, #16
{
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	4604      	mov	r4, r0
 800dd62:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd64:	492b      	ldr	r1, [pc, #172]	; (800de14 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd66:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd6a:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd6c:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dd6e:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800dd70:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800dd72:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800dd74:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800dd76:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dd7a:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dd7e:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dd82:	ea43 2800 	orr.w	r8, r3, r0, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800dd86:	d00a      	beq.n	800dd9e <TIM_OC2_SetConfig+0x4a>
 800dd88:	4b23      	ldr	r3, [pc, #140]	; (800de18 <TIM_OC2_SetConfig+0xc4>)
 800dd8a:	429c      	cmp	r4, r3
 800dd8c:	d007      	beq.n	800dd9e <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 800dd8e:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800dd90:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800dd92:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800dd96:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800dd98:	6225      	str	r5, [r4, #32]
}
 800dd9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800dd9e:	68f2      	ldr	r2, [r6, #12]
 800dda0:	f032 0308 	bics.w	r3, r2, #8
 800dda4:	d123      	bne.n	800ddee <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800dda6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ddaa:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ddac:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ddb0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800ddb4:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ddb8:	d120      	bne.n	800ddfc <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ddba:	6973      	ldr	r3, [r6, #20]
 800ddbc:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ddc0:	d107      	bne.n	800ddd2 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ddc2:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ddc6:	69b1      	ldr	r1, [r6, #24]
 800ddc8:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ddcc:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800ddd0:	e7dd      	b.n	800dd8e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ddd2:	f241 71e5 	movw	r1, #6117	; 0x17e5
 800ddd6:	4811      	ldr	r0, [pc, #68]	; (800de1c <TIM_OC2_SetConfig+0xc8>)
 800ddd8:	f7f5 fea6 	bl	8003b28 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dddc:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dde0:	69b1      	ldr	r1, [r6, #24]
 800dde2:	6973      	ldr	r3, [r6, #20]
 800dde4:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800dde8:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800ddec:	e7cf      	b.n	800dd8e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ddee:	f241 71d6 	movw	r1, #6102	; 0x17d6
 800ddf2:	480a      	ldr	r0, [pc, #40]	; (800de1c <TIM_OC2_SetConfig+0xc8>)
 800ddf4:	f7f5 fe98 	bl	8003b28 <assert_failed>
 800ddf8:	68f2      	ldr	r2, [r6, #12]
 800ddfa:	e7d4      	b.n	800dda6 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ddfc:	f241 71e4 	movw	r1, #6116	; 0x17e4
 800de00:	4806      	ldr	r0, [pc, #24]	; (800de1c <TIM_OC2_SetConfig+0xc8>)
 800de02:	f7f5 fe91 	bl	8003b28 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800de06:	6973      	ldr	r3, [r6, #20]
 800de08:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800de0c:	d0d9      	beq.n	800ddc2 <TIM_OC2_SetConfig+0x6e>
 800de0e:	e7e0      	b.n	800ddd2 <TIM_OC2_SetConfig+0x7e>
 800de10:	feff8cff 	.word	0xfeff8cff
 800de14:	40010000 	.word	0x40010000
 800de18:	40010400 	.word	0x40010400
 800de1c:	08027eb0 	.word	0x08027eb0

0800de20 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800de20:	2a14      	cmp	r2, #20
{
 800de22:	b570      	push	{r4, r5, r6, lr}
 800de24:	4615      	mov	r5, r2
 800de26:	4604      	mov	r4, r0
 800de28:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800de2a:	f240 808f 	bls.w	800df4c <HAL_TIM_OC_ConfigChannel+0x12c>
 800de2e:	2a3c      	cmp	r2, #60	; 0x3c
 800de30:	f040 8091 	bne.w	800df56 <HAL_TIM_OC_ConfigChannel+0x136>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800de34:	6833      	ldr	r3, [r6, #0]
 800de36:	f023 0210 	bic.w	r2, r3, #16
 800de3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800de3e:	2a40      	cmp	r2, #64	; 0x40
 800de40:	bf18      	it	ne
 800de42:	2b00      	cmpne	r3, #0
 800de44:	d003      	beq.n	800de4e <HAL_TIM_OC_ConfigChannel+0x2e>
 800de46:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800de4a:	f040 8137 	bne.w	800e0bc <HAL_TIM_OC_ConfigChannel+0x29c>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800de4e:	68b3      	ldr	r3, [r6, #8]
 800de50:	f033 0302 	bics.w	r3, r3, #2
 800de54:	f040 8085 	bne.w	800df62 <HAL_TIM_OC_ConfigChannel+0x142>
  __HAL_LOCK(htim);
 800de58:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	f000 808a 	beq.w	800df76 <HAL_TIM_OC_ConfigChannel+0x156>
 800de62:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800de64:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800de66:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800de6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800de6e:	2d14      	cmp	r5, #20
 800de70:	d864      	bhi.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
 800de72:	e8df f015 	tbh	[pc, r5, lsl #1]
 800de76:	0015      	.short	0x0015
 800de78:	00630063 	.word	0x00630063
 800de7c:	00820063 	.word	0x00820063
 800de80:	00630063 	.word	0x00630063
 800de84:	00b50063 	.word	0x00b50063
 800de88:	00630063 	.word	0x00630063
 800de8c:	00d90063 	.word	0x00d90063
 800de90:	00630063 	.word	0x00630063
 800de94:	00fd0063 	.word	0x00fd0063
 800de98:	00630063 	.word	0x00630063
 800de9c:	01090063 	.word	0x01090063
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800dea0:	6820      	ldr	r0, [r4, #0]
 800dea2:	4b97      	ldr	r3, [pc, #604]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800dea4:	4a97      	ldr	r2, [pc, #604]	; (800e104 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800dea6:	4298      	cmp	r0, r3
 800dea8:	bf18      	it	ne
 800deaa:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800deae:	4996      	ldr	r1, [pc, #600]	; (800e108 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800deb0:	bf14      	ite	ne
 800deb2:	2301      	movne	r3, #1
 800deb4:	2300      	moveq	r3, #0
 800deb6:	4290      	cmp	r0, r2
 800deb8:	bf0c      	ite	eq
 800deba:	2300      	moveq	r3, #0
 800debc:	f003 0301 	andne.w	r3, r3, #1
 800dec0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dec4:	4288      	cmp	r0, r1
 800dec6:	bf0c      	ite	eq
 800dec8:	2300      	moveq	r3, #0
 800deca:	f003 0301 	andne.w	r3, r3, #1
 800dece:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ded2:	4290      	cmp	r0, r2
 800ded4:	bf0c      	ite	eq
 800ded6:	2300      	moveq	r3, #0
 800ded8:	f003 0301 	andne.w	r3, r3, #1
 800dedc:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800dee0:	4288      	cmp	r0, r1
 800dee2:	bf0c      	ite	eq
 800dee4:	2300      	moveq	r3, #0
 800dee6:	f003 0301 	andne.w	r3, r3, #1
 800deea:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800deee:	4290      	cmp	r0, r2
 800def0:	bf0c      	ite	eq
 800def2:	2300      	moveq	r3, #0
 800def4:	f003 0301 	andne.w	r3, r3, #1
 800def8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800defc:	4288      	cmp	r0, r1
 800defe:	bf0c      	ite	eq
 800df00:	2300      	moveq	r3, #0
 800df02:	f003 0301 	andne.w	r3, r3, #1
 800df06:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800df0a:	4290      	cmp	r0, r2
 800df0c:	bf0c      	ite	eq
 800df0e:	2300      	moveq	r3, #0
 800df10:	f003 0301 	andne.w	r3, r3, #1
 800df14:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800df18:	4288      	cmp	r0, r1
 800df1a:	bf0c      	ite	eq
 800df1c:	2300      	moveq	r3, #0
 800df1e:	f003 0301 	andne.w	r3, r3, #1
 800df22:	4290      	cmp	r0, r2
 800df24:	bf0c      	ite	eq
 800df26:	2300      	moveq	r3, #0
 800df28:	f003 0301 	andne.w	r3, r3, #1
 800df2c:	b11b      	cbz	r3, 800df36 <HAL_TIM_OC_ConfigChannel+0x116>
 800df2e:	4b77      	ldr	r3, [pc, #476]	; (800e10c <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800df30:	4298      	cmp	r0, r3
 800df32:	f040 80de 	bne.w	800e0f2 <HAL_TIM_OC_ConfigChannel+0x2d2>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800df36:	4631      	mov	r1, r6
 800df38:	f7fe fae6 	bl	800c508 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 800df3c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800df3e:	2201      	movs	r2, #1
  return HAL_OK;
 800df40:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800df42:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800df46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800df4a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800df4c:	4b70      	ldr	r3, [pc, #448]	; (800e110 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800df4e:	40d3      	lsrs	r3, r2
 800df50:	07db      	lsls	r3, r3, #31
 800df52:	f53f af6f 	bmi.w	800de34 <HAL_TIM_OC_ConfigChannel+0x14>
 800df56:	f640 5155 	movw	r1, #3413	; 0xd55
 800df5a:	486e      	ldr	r0, [pc, #440]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800df5c:	f7f5 fde4 	bl	8003b28 <assert_failed>
 800df60:	e768      	b.n	800de34 <HAL_TIM_OC_ConfigChannel+0x14>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800df62:	f640 5157 	movw	r1, #3415	; 0xd57
 800df66:	486b      	ldr	r0, [pc, #428]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800df68:	f7f5 fdde 	bl	8003b28 <assert_failed>
  __HAL_LOCK(htim);
 800df6c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800df70:	2b01      	cmp	r3, #1
 800df72:	f47f af76 	bne.w	800de62 <HAL_TIM_OC_ConfigChannel+0x42>
 800df76:	2002      	movs	r0, #2
}
 800df78:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800df7a:	6820      	ldr	r0, [r4, #0]
 800df7c:	4b60      	ldr	r3, [pc, #384]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800df7e:	4a61      	ldr	r2, [pc, #388]	; (800e104 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800df80:	4298      	cmp	r0, r3
 800df82:	bf18      	it	ne
 800df84:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800df88:	495f      	ldr	r1, [pc, #380]	; (800e108 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800df8a:	bf14      	ite	ne
 800df8c:	2301      	movne	r3, #1
 800df8e:	2300      	moveq	r3, #0
 800df90:	4290      	cmp	r0, r2
 800df92:	bf0c      	ite	eq
 800df94:	2300      	moveq	r3, #0
 800df96:	f003 0301 	andne.w	r3, r3, #1
 800df9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df9e:	4288      	cmp	r0, r1
 800dfa0:	bf0c      	ite	eq
 800dfa2:	2300      	moveq	r3, #0
 800dfa4:	f003 0301 	andne.w	r3, r3, #1
 800dfa8:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800dfac:	4290      	cmp	r0, r2
 800dfae:	bf0c      	ite	eq
 800dfb0:	2300      	moveq	r3, #0
 800dfb2:	f003 0301 	andne.w	r3, r3, #1
 800dfb6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800dfba:	4288      	cmp	r0, r1
 800dfbc:	bf0c      	ite	eq
 800dfbe:	2300      	moveq	r3, #0
 800dfc0:	f003 0301 	andne.w	r3, r3, #1
 800dfc4:	4290      	cmp	r0, r2
 800dfc6:	bf0c      	ite	eq
 800dfc8:	2300      	moveq	r3, #0
 800dfca:	f003 0301 	andne.w	r3, r3, #1
 800dfce:	b11b      	cbz	r3, 800dfd8 <HAL_TIM_OC_ConfigChannel+0x1b8>
 800dfd0:	4b51      	ldr	r3, [pc, #324]	; (800e118 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 800dfd2:	4298      	cmp	r0, r3
 800dfd4:	f040 8086 	bne.w	800e0e4 <HAL_TIM_OC_ConfigChannel+0x2c4>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dfd8:	4631      	mov	r1, r6
 800dfda:	f7ff febb 	bl	800dd54 <TIM_OC2_SetConfig>
      break;
 800dfde:	e7ad      	b.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800dfe0:	6820      	ldr	r0, [r4, #0]
 800dfe2:	4b47      	ldr	r3, [pc, #284]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800dfe4:	4a47      	ldr	r2, [pc, #284]	; (800e104 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800dfe6:	4298      	cmp	r0, r3
 800dfe8:	bf18      	it	ne
 800dfea:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800dfee:	4946      	ldr	r1, [pc, #280]	; (800e108 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800dff0:	bf14      	ite	ne
 800dff2:	2301      	movne	r3, #1
 800dff4:	2300      	moveq	r3, #0
 800dff6:	4290      	cmp	r0, r2
 800dff8:	bf0c      	ite	eq
 800dffa:	2300      	moveq	r3, #0
 800dffc:	f003 0301 	andne.w	r3, r3, #1
 800e000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e004:	4288      	cmp	r0, r1
 800e006:	bf0c      	ite	eq
 800e008:	2300      	moveq	r3, #0
 800e00a:	f003 0301 	andne.w	r3, r3, #1
 800e00e:	4290      	cmp	r0, r2
 800e010:	bf0c      	ite	eq
 800e012:	2300      	moveq	r3, #0
 800e014:	f003 0301 	andne.w	r3, r3, #1
 800e018:	b113      	cbz	r3, 800e020 <HAL_TIM_OC_ConfigChannel+0x200>
 800e01a:	4b40      	ldr	r3, [pc, #256]	; (800e11c <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800e01c:	4298      	cmp	r0, r3
 800e01e:	d15a      	bne.n	800e0d6 <HAL_TIM_OC_ConfigChannel+0x2b6>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e020:	4631      	mov	r1, r6
 800e022:	f7fe fad5 	bl	800c5d0 <TIM_OC3_SetConfig>
      break;
 800e026:	e789      	b.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e028:	6820      	ldr	r0, [r4, #0]
 800e02a:	4b35      	ldr	r3, [pc, #212]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e02c:	4a35      	ldr	r2, [pc, #212]	; (800e104 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800e02e:	4298      	cmp	r0, r3
 800e030:	bf18      	it	ne
 800e032:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e036:	4934      	ldr	r1, [pc, #208]	; (800e108 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800e038:	bf14      	ite	ne
 800e03a:	2301      	movne	r3, #1
 800e03c:	2300      	moveq	r3, #0
 800e03e:	4290      	cmp	r0, r2
 800e040:	bf0c      	ite	eq
 800e042:	2300      	moveq	r3, #0
 800e044:	f003 0301 	andne.w	r3, r3, #1
 800e048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e04c:	4288      	cmp	r0, r1
 800e04e:	bf0c      	ite	eq
 800e050:	2300      	moveq	r3, #0
 800e052:	f003 0301 	andne.w	r3, r3, #1
 800e056:	4290      	cmp	r0, r2
 800e058:	bf0c      	ite	eq
 800e05a:	2300      	moveq	r3, #0
 800e05c:	f003 0301 	andne.w	r3, r3, #1
 800e060:	b113      	cbz	r3, 800e068 <HAL_TIM_OC_ConfigChannel+0x248>
 800e062:	4b2e      	ldr	r3, [pc, #184]	; (800e11c <HAL_TIM_OC_ConfigChannel+0x2fc>)
 800e064:	4298      	cmp	r0, r3
 800e066:	d12f      	bne.n	800e0c8 <HAL_TIM_OC_ConfigChannel+0x2a8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e068:	4631      	mov	r1, r6
 800e06a:	f7fe fb17 	bl	800c69c <TIM_OC4_SetConfig>
      break;
 800e06e:	e765      	b.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e070:	6820      	ldr	r0, [r4, #0]
 800e072:	4b23      	ldr	r3, [pc, #140]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e074:	4298      	cmp	r0, r3
 800e076:	d003      	beq.n	800e080 <HAL_TIM_OC_ConfigChannel+0x260>
 800e078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e07c:	4298      	cmp	r0, r3
 800e07e:	d116      	bne.n	800e0ae <HAL_TIM_OC_ConfigChannel+0x28e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e080:	4631      	mov	r1, r6
 800e082:	f7fe f9e9 	bl	800c458 <TIM_OC5_SetConfig>
      break;
 800e086:	e759      	b.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e088:	6820      	ldr	r0, [r4, #0]
 800e08a:	4b1d      	ldr	r3, [pc, #116]	; (800e100 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800e08c:	4298      	cmp	r0, r3
 800e08e:	d003      	beq.n	800e098 <HAL_TIM_OC_ConfigChannel+0x278>
 800e090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e094:	4298      	cmp	r0, r3
 800e096:	d103      	bne.n	800e0a0 <HAL_TIM_OC_ConfigChannel+0x280>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e098:	4631      	mov	r1, r6
 800e09a:	f7fe fa09 	bl	800c4b0 <TIM_OC6_SetConfig>
      break;
 800e09e:	e74d      	b.n	800df3c <HAL_TIM_OC_ConfigChannel+0x11c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e0a0:	481c      	ldr	r0, [pc, #112]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0a2:	f640 5195 	movw	r1, #3477	; 0xd95
 800e0a6:	f7f5 fd3f 	bl	8003b28 <assert_failed>
 800e0aa:	6820      	ldr	r0, [r4, #0]
 800e0ac:	e7f4      	b.n	800e098 <HAL_TIM_OC_ConfigChannel+0x278>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e0ae:	4819      	ldr	r0, [pc, #100]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0b0:	f640 518b 	movw	r1, #3467	; 0xd8b
 800e0b4:	f7f5 fd38 	bl	8003b28 <assert_failed>
 800e0b8:	6820      	ldr	r0, [r4, #0]
 800e0ba:	e7e1      	b.n	800e080 <HAL_TIM_OC_ConfigChannel+0x260>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800e0bc:	f640 5156 	movw	r1, #3414	; 0xd56
 800e0c0:	4814      	ldr	r0, [pc, #80]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0c2:	f7f5 fd31 	bl	8003b28 <assert_failed>
 800e0c6:	e6c2      	b.n	800de4e <HAL_TIM_OC_ConfigChannel+0x2e>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e0c8:	4812      	ldr	r0, [pc, #72]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0ca:	f640 5181 	movw	r1, #3457	; 0xd81
 800e0ce:	f7f5 fd2b 	bl	8003b28 <assert_failed>
 800e0d2:	6820      	ldr	r0, [r4, #0]
 800e0d4:	e7c8      	b.n	800e068 <HAL_TIM_OC_ConfigChannel+0x248>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e0d6:	480f      	ldr	r0, [pc, #60]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0d8:	f640 5177 	movw	r1, #3447	; 0xd77
 800e0dc:	f7f5 fd24 	bl	8003b28 <assert_failed>
 800e0e0:	6820      	ldr	r0, [r4, #0]
 800e0e2:	e79d      	b.n	800e020 <HAL_TIM_OC_ConfigChannel+0x200>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e0e4:	480b      	ldr	r0, [pc, #44]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0e6:	f640 516d 	movw	r1, #3437	; 0xd6d
 800e0ea:	f7f5 fd1d 	bl	8003b28 <assert_failed>
 800e0ee:	6820      	ldr	r0, [r4, #0]
 800e0f0:	e772      	b.n	800dfd8 <HAL_TIM_OC_ConfigChannel+0x1b8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e0f2:	4808      	ldr	r0, [pc, #32]	; (800e114 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800e0f4:	f640 5163 	movw	r1, #3427	; 0xd63
 800e0f8:	f7f5 fd16 	bl	8003b28 <assert_failed>
 800e0fc:	6820      	ldr	r0, [r4, #0]
 800e0fe:	e71a      	b.n	800df36 <HAL_TIM_OC_ConfigChannel+0x116>
 800e100:	40010000 	.word	0x40010000
 800e104:	40000400 	.word	0x40000400
 800e108:	40000800 	.word	0x40000800
 800e10c:	40002000 	.word	0x40002000
 800e110:	00111111 	.word	0x00111111
 800e114:	08027eb0 	.word	0x08027eb0
 800e118:	40001800 	.word	0x40001800
 800e11c:	40010400 	.word	0x40010400

0800e120 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800e120:	2a14      	cmp	r2, #20
{
 800e122:	b570      	push	{r4, r5, r6, lr}
 800e124:	4616      	mov	r6, r2
 800e126:	4604      	mov	r4, r0
 800e128:	460d      	mov	r5, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800e12a:	f240 809f 	bls.w	800e26c <HAL_TIM_PWM_ConfigChannel+0x14c>
 800e12e:	2a3c      	cmp	r2, #60	; 0x3c
 800e130:	f040 80a1 	bne.w	800e276 <HAL_TIM_PWM_ConfigChannel+0x156>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800e134:	682a      	ldr	r2, [r5, #0]
 800e136:	4bab      	ldr	r3, [pc, #684]	; (800e3e4 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800e138:	4013      	ands	r3, r2
 800e13a:	2b60      	cmp	r3, #96	; 0x60
 800e13c:	d005      	beq.n	800e14a <HAL_TIM_PWM_ConfigChannel+0x2a>
 800e13e:	f022 0210 	bic.w	r2, r2, #16
 800e142:	4ba9      	ldr	r3, [pc, #676]	; (800e3e8 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800e144:	429a      	cmp	r2, r3
 800e146:	f040 80ae 	bne.w	800e2a6 <HAL_TIM_PWM_ConfigChannel+0x186>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e14a:	68ab      	ldr	r3, [r5, #8]
 800e14c:	f033 0302 	bics.w	r3, r3, #2
 800e150:	f040 80a3 	bne.w	800e29a <HAL_TIM_PWM_ConfigChannel+0x17a>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800e154:	692b      	ldr	r3, [r5, #16]
 800e156:	f033 0304 	bics.w	r3, r3, #4
 800e15a:	f040 8092 	bne.w	800e282 <HAL_TIM_PWM_ConfigChannel+0x162>
  __HAL_LOCK(htim);
 800e15e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e162:	2b01      	cmp	r3, #1
 800e164:	f000 8097 	beq.w	800e296 <HAL_TIM_PWM_ConfigChannel+0x176>
 800e168:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e16a:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800e16c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800e170:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  switch (Channel)
 800e174:	2e14      	cmp	r6, #20
 800e176:	d871      	bhi.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800e178:	e8df f016 	tbh	[pc, r6, lsl #1]
 800e17c:	00700015 	.word	0x00700015
 800e180:	00700070 	.word	0x00700070
 800e184:	00700146 	.word	0x00700146
 800e188:	00700070 	.word	0x00700070
 800e18c:	007000d0 	.word	0x007000d0
 800e190:	00700070 	.word	0x00700070
 800e194:	00700102 	.word	0x00700102
 800e198:	00700070 	.word	0x00700070
 800e19c:	0070009b 	.word	0x0070009b
 800e1a0:	00700070 	.word	0x00700070
 800e1a4:	00b5      	.short	0x00b5
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e1a6:	6820      	ldr	r0, [r4, #0]
 800e1a8:	4b90      	ldr	r3, [pc, #576]	; (800e3ec <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e1aa:	4a91      	ldr	r2, [pc, #580]	; (800e3f0 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e1ac:	4298      	cmp	r0, r3
 800e1ae:	bf18      	it	ne
 800e1b0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e1b4:	498f      	ldr	r1, [pc, #572]	; (800e3f4 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e1b6:	bf14      	ite	ne
 800e1b8:	2301      	movne	r3, #1
 800e1ba:	2300      	moveq	r3, #0
 800e1bc:	4290      	cmp	r0, r2
 800e1be:	bf0c      	ite	eq
 800e1c0:	2300      	moveq	r3, #0
 800e1c2:	f003 0301 	andne.w	r3, r3, #1
 800e1c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1ca:	4288      	cmp	r0, r1
 800e1cc:	bf0c      	ite	eq
 800e1ce:	2300      	moveq	r3, #0
 800e1d0:	f003 0301 	andne.w	r3, r3, #1
 800e1d4:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800e1d8:	4290      	cmp	r0, r2
 800e1da:	bf0c      	ite	eq
 800e1dc:	2300      	moveq	r3, #0
 800e1de:	f003 0301 	andne.w	r3, r3, #1
 800e1e2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800e1e6:	4288      	cmp	r0, r1
 800e1e8:	bf0c      	ite	eq
 800e1ea:	2300      	moveq	r3, #0
 800e1ec:	f003 0301 	andne.w	r3, r3, #1
 800e1f0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800e1f4:	4290      	cmp	r0, r2
 800e1f6:	bf0c      	ite	eq
 800e1f8:	2300      	moveq	r3, #0
 800e1fa:	f003 0301 	andne.w	r3, r3, #1
 800e1fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e202:	4288      	cmp	r0, r1
 800e204:	bf0c      	ite	eq
 800e206:	2300      	moveq	r3, #0
 800e208:	f003 0301 	andne.w	r3, r3, #1
 800e20c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800e210:	4290      	cmp	r0, r2
 800e212:	bf0c      	ite	eq
 800e214:	2300      	moveq	r3, #0
 800e216:	f003 0301 	andne.w	r3, r3, #1
 800e21a:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800e21e:	4288      	cmp	r0, r1
 800e220:	bf0c      	ite	eq
 800e222:	2300      	moveq	r3, #0
 800e224:	f003 0301 	andne.w	r3, r3, #1
 800e228:	4290      	cmp	r0, r2
 800e22a:	bf0c      	ite	eq
 800e22c:	2300      	moveq	r3, #0
 800e22e:	f003 0301 	andne.w	r3, r3, #1
 800e232:	b11b      	cbz	r3, 800e23c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800e234:	4b70      	ldr	r3, [pc, #448]	; (800e3f8 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 800e236:	4298      	cmp	r0, r3
 800e238:	f040 8149 	bne.w	800e4ce <HAL_TIM_PWM_ConfigChannel+0x3ae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e23c:	4629      	mov	r1, r5
 800e23e:	f7fe f963 	bl	800c508 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e242:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e244:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e246:	6999      	ldr	r1, [r3, #24]
 800e248:	f041 0108 	orr.w	r1, r1, #8
 800e24c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e24e:	6999      	ldr	r1, [r3, #24]
 800e250:	f021 0104 	bic.w	r1, r1, #4
 800e254:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e256:	699a      	ldr	r2, [r3, #24]
 800e258:	4302      	orrs	r2, r0
 800e25a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800e25c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e25e:	2201      	movs	r2, #1
  return HAL_OK;
 800e260:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800e262:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e266:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800e26c:	4b63      	ldr	r3, [pc, #396]	; (800e3fc <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800e26e:	40d3      	lsrs	r3, r2
 800e270:	07db      	lsls	r3, r3, #31
 800e272:	f53f af5f 	bmi.w	800e134 <HAL_TIM_PWM_ConfigChannel+0x14>
 800e276:	f640 611c 	movw	r1, #3612	; 0xe1c
 800e27a:	4861      	ldr	r0, [pc, #388]	; (800e400 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 800e27c:	f7f5 fc54 	bl	8003b28 <assert_failed>
 800e280:	e758      	b.n	800e134 <HAL_TIM_PWM_ConfigChannel+0x14>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800e282:	f640 611f 	movw	r1, #3615	; 0xe1f
 800e286:	485e      	ldr	r0, [pc, #376]	; (800e400 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 800e288:	f7f5 fc4e 	bl	8003b28 <assert_failed>
  __HAL_LOCK(htim);
 800e28c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e290:	2b01      	cmp	r3, #1
 800e292:	f47f af69 	bne.w	800e168 <HAL_TIM_PWM_ConfigChannel+0x48>
 800e296:	2002      	movs	r0, #2
}
 800e298:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800e29a:	f640 611e 	movw	r1, #3614	; 0xe1e
 800e29e:	4858      	ldr	r0, [pc, #352]	; (800e400 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 800e2a0:	f7f5 fc42 	bl	8003b28 <assert_failed>
 800e2a4:	e756      	b.n	800e154 <HAL_TIM_PWM_ConfigChannel+0x34>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800e2a6:	f640 611d 	movw	r1, #3613	; 0xe1d
 800e2aa:	4855      	ldr	r0, [pc, #340]	; (800e400 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 800e2ac:	f7f5 fc3c 	bl	8003b28 <assert_failed>
 800e2b0:	e74b      	b.n	800e14a <HAL_TIM_PWM_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e2b2:	6820      	ldr	r0, [r4, #0]
 800e2b4:	4b4d      	ldr	r3, [pc, #308]	; (800e3ec <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e2b6:	4298      	cmp	r0, r3
 800e2b8:	d004      	beq.n	800e2c4 <HAL_TIM_PWM_ConfigChannel+0x1a4>
 800e2ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2be:	4298      	cmp	r0, r3
 800e2c0:	f040 80e9 	bne.w	800e496 <HAL_TIM_PWM_ConfigChannel+0x376>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e2c4:	4629      	mov	r1, r5
 800e2c6:	f7fe f8c7 	bl	800c458 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e2ca:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e2cc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e2ce:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e2d0:	f041 0108 	orr.w	r1, r1, #8
 800e2d4:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e2d6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e2d8:	f021 0104 	bic.w	r1, r1, #4
 800e2dc:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e2de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2e0:	4302      	orrs	r2, r0
 800e2e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e2e4:	e7ba      	b.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e2e6:	6820      	ldr	r0, [r4, #0]
 800e2e8:	4b40      	ldr	r3, [pc, #256]	; (800e3ec <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e2ea:	4298      	cmp	r0, r3
 800e2ec:	d004      	beq.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
 800e2ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e2f2:	4298      	cmp	r0, r3
 800e2f4:	f040 80c8 	bne.w	800e488 <HAL_TIM_PWM_ConfigChannel+0x368>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e2f8:	4629      	mov	r1, r5
 800e2fa:	f7fe f8d9 	bl	800c4b0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e2fe:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e300:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e302:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e304:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800e308:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e30a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e30c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e310:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e312:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e314:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e318:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800e31a:	e79f      	b.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e31c:	6820      	ldr	r0, [r4, #0]
 800e31e:	4b33      	ldr	r3, [pc, #204]	; (800e3ec <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e320:	4a33      	ldr	r2, [pc, #204]	; (800e3f0 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e322:	4298      	cmp	r0, r3
 800e324:	bf18      	it	ne
 800e326:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e32a:	4932      	ldr	r1, [pc, #200]	; (800e3f4 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e32c:	bf14      	ite	ne
 800e32e:	2301      	movne	r3, #1
 800e330:	2300      	moveq	r3, #0
 800e332:	4290      	cmp	r0, r2
 800e334:	bf0c      	ite	eq
 800e336:	2300      	moveq	r3, #0
 800e338:	f003 0301 	andne.w	r3, r3, #1
 800e33c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e340:	4288      	cmp	r0, r1
 800e342:	bf0c      	ite	eq
 800e344:	2300      	moveq	r3, #0
 800e346:	f003 0301 	andne.w	r3, r3, #1
 800e34a:	4290      	cmp	r0, r2
 800e34c:	bf0c      	ite	eq
 800e34e:	2300      	moveq	r3, #0
 800e350:	f003 0301 	andne.w	r3, r3, #1
 800e354:	b11b      	cbz	r3, 800e35e <HAL_TIM_PWM_ConfigChannel+0x23e>
 800e356:	4b2b      	ldr	r3, [pc, #172]	; (800e404 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800e358:	4298      	cmp	r0, r3
 800e35a:	f040 80aa 	bne.w	800e4b2 <HAL_TIM_PWM_ConfigChannel+0x392>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e35e:	4629      	mov	r1, r5
 800e360:	f7fe f936 	bl	800c5d0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e364:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e366:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e368:	69d9      	ldr	r1, [r3, #28]
 800e36a:	f041 0108 	orr.w	r1, r1, #8
 800e36e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e370:	69d9      	ldr	r1, [r3, #28]
 800e372:	f021 0104 	bic.w	r1, r1, #4
 800e376:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e378:	69da      	ldr	r2, [r3, #28]
 800e37a:	4302      	orrs	r2, r0
 800e37c:	61da      	str	r2, [r3, #28]
      break;
 800e37e:	e76d      	b.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e380:	6820      	ldr	r0, [r4, #0]
 800e382:	4b1a      	ldr	r3, [pc, #104]	; (800e3ec <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800e384:	4a1a      	ldr	r2, [pc, #104]	; (800e3f0 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800e386:	4298      	cmp	r0, r3
 800e388:	bf18      	it	ne
 800e38a:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e38e:	4919      	ldr	r1, [pc, #100]	; (800e3f4 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800e390:	bf14      	ite	ne
 800e392:	2301      	movne	r3, #1
 800e394:	2300      	moveq	r3, #0
 800e396:	4290      	cmp	r0, r2
 800e398:	bf0c      	ite	eq
 800e39a:	2300      	moveq	r3, #0
 800e39c:	f003 0301 	andne.w	r3, r3, #1
 800e3a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3a4:	4288      	cmp	r0, r1
 800e3a6:	bf0c      	ite	eq
 800e3a8:	2300      	moveq	r3, #0
 800e3aa:	f003 0301 	andne.w	r3, r3, #1
 800e3ae:	4290      	cmp	r0, r2
 800e3b0:	bf0c      	ite	eq
 800e3b2:	2300      	moveq	r3, #0
 800e3b4:	f003 0301 	andne.w	r3, r3, #1
 800e3b8:	b113      	cbz	r3, 800e3c0 <HAL_TIM_PWM_ConfigChannel+0x2a0>
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <HAL_TIM_PWM_ConfigChannel+0x2e4>)
 800e3bc:	4298      	cmp	r0, r3
 800e3be:	d171      	bne.n	800e4a4 <HAL_TIM_PWM_ConfigChannel+0x384>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	f7fe f96b 	bl	800c69c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3c6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3c8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e3ca:	69d9      	ldr	r1, [r3, #28]
 800e3cc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800e3d0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e3d2:	69d9      	ldr	r1, [r3, #28]
 800e3d4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e3d8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e3da:	69da      	ldr	r2, [r3, #28]
 800e3dc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e3e0:	61da      	str	r2, [r3, #28]
      break;
 800e3e2:	e73b      	b.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
 800e3e4:	fffeffef 	.word	0xfffeffef
 800e3e8:	00010040 	.word	0x00010040
 800e3ec:	40010000 	.word	0x40010000
 800e3f0:	40000400 	.word	0x40000400
 800e3f4:	40000800 	.word	0x40000800
 800e3f8:	40002000 	.word	0x40002000
 800e3fc:	00111111 	.word	0x00111111
 800e400:	08027eb0 	.word	0x08027eb0
 800e404:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e408:	6820      	ldr	r0, [r4, #0]
 800e40a:	4b34      	ldr	r3, [pc, #208]	; (800e4dc <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 800e40c:	4a34      	ldr	r2, [pc, #208]	; (800e4e0 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 800e40e:	4298      	cmp	r0, r3
 800e410:	bf18      	it	ne
 800e412:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e416:	4933      	ldr	r1, [pc, #204]	; (800e4e4 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800e418:	bf14      	ite	ne
 800e41a:	2301      	movne	r3, #1
 800e41c:	2300      	moveq	r3, #0
 800e41e:	4290      	cmp	r0, r2
 800e420:	bf0c      	ite	eq
 800e422:	2300      	moveq	r3, #0
 800e424:	f003 0301 	andne.w	r3, r3, #1
 800e428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e42c:	4288      	cmp	r0, r1
 800e42e:	bf0c      	ite	eq
 800e430:	2300      	moveq	r3, #0
 800e432:	f003 0301 	andne.w	r3, r3, #1
 800e436:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800e43a:	4290      	cmp	r0, r2
 800e43c:	bf0c      	ite	eq
 800e43e:	2300      	moveq	r3, #0
 800e440:	f003 0301 	andne.w	r3, r3, #1
 800e444:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800e448:	4288      	cmp	r0, r1
 800e44a:	bf0c      	ite	eq
 800e44c:	2300      	moveq	r3, #0
 800e44e:	f003 0301 	andne.w	r3, r3, #1
 800e452:	4290      	cmp	r0, r2
 800e454:	bf0c      	ite	eq
 800e456:	2300      	moveq	r3, #0
 800e458:	f003 0301 	andne.w	r3, r3, #1
 800e45c:	b113      	cbz	r3, 800e464 <HAL_TIM_PWM_ConfigChannel+0x344>
 800e45e:	4b22      	ldr	r3, [pc, #136]	; (800e4e8 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800e460:	4298      	cmp	r0, r3
 800e462:	d12d      	bne.n	800e4c0 <HAL_TIM_PWM_ConfigChannel+0x3a0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e464:	4629      	mov	r1, r5
 800e466:	f7ff fc75 	bl	800dd54 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e46a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e46c:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e46e:	6999      	ldr	r1, [r3, #24]
 800e470:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800e474:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e476:	6999      	ldr	r1, [r3, #24]
 800e478:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800e47c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e47e:	699a      	ldr	r2, [r3, #24]
 800e480:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800e484:	619a      	str	r2, [r3, #24]
      break;
 800e486:	e6e9      	b.n	800e25c <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800e488:	4818      	ldr	r0, [pc, #96]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e48a:	f44f 6168 	mov.w	r1, #3712	; 0xe80
 800e48e:	f7f5 fb4b 	bl	8003b28 <assert_failed>
 800e492:	6820      	ldr	r0, [r4, #0]
 800e494:	e730      	b.n	800e2f8 <HAL_TIM_PWM_ConfigChannel+0x1d8>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800e496:	4815      	ldr	r0, [pc, #84]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e498:	f640 616f 	movw	r1, #3695	; 0xe6f
 800e49c:	f7f5 fb44 	bl	8003b28 <assert_failed>
 800e4a0:	6820      	ldr	r0, [r4, #0]
 800e4a2:	e70f      	b.n	800e2c4 <HAL_TIM_PWM_ConfigChannel+0x1a4>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e4a4:	4811      	ldr	r0, [pc, #68]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e4a6:	f640 615e 	movw	r1, #3678	; 0xe5e
 800e4aa:	f7f5 fb3d 	bl	8003b28 <assert_failed>
 800e4ae:	6820      	ldr	r0, [r4, #0]
 800e4b0:	e786      	b.n	800e3c0 <HAL_TIM_PWM_ConfigChannel+0x2a0>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e4b2:	480e      	ldr	r0, [pc, #56]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e4b4:	f640 614d 	movw	r1, #3661	; 0xe4d
 800e4b8:	f7f5 fb36 	bl	8003b28 <assert_failed>
 800e4bc:	6820      	ldr	r0, [r4, #0]
 800e4be:	e74e      	b.n	800e35e <HAL_TIM_PWM_ConfigChannel+0x23e>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e4c0:	480a      	ldr	r0, [pc, #40]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e4c2:	f640 613c 	movw	r1, #3644	; 0xe3c
 800e4c6:	f7f5 fb2f 	bl	8003b28 <assert_failed>
 800e4ca:	6820      	ldr	r0, [r4, #0]
 800e4cc:	e7ca      	b.n	800e464 <HAL_TIM_PWM_ConfigChannel+0x344>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e4ce:	4807      	ldr	r0, [pc, #28]	; (800e4ec <HAL_TIM_PWM_ConfigChannel+0x3cc>)
 800e4d0:	f640 612b 	movw	r1, #3627	; 0xe2b
 800e4d4:	f7f5 fb28 	bl	8003b28 <assert_failed>
 800e4d8:	6820      	ldr	r0, [r4, #0]
 800e4da:	e6af      	b.n	800e23c <HAL_TIM_PWM_ConfigChannel+0x11c>
 800e4dc:	40010000 	.word	0x40010000
 800e4e0:	40000400 	.word	0x40000400
 800e4e4:	40000800 	.word	0x40000800
 800e4e8:	40001800 	.word	0x40001800
 800e4ec:	08027eb0 	.word	0x08027eb0

0800e4f0 <TIM_TI1_SetConfig>:
{
 800e4f0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4f2:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e4f4:	4e1b      	ldr	r6, [pc, #108]	; (800e564 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4f6:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e4fa:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e4fc:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e4fe:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800e500:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e502:	d01d      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e504:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e508:	d01a      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e50a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800e50e:	42b0      	cmp	r0, r6
 800e510:	d016      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e512:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e516:	42b0      	cmp	r0, r6
 800e518:	d012      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e51a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800e51e:	42b0      	cmp	r0, r6
 800e520:	d00e      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e522:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800e526:	42b0      	cmp	r0, r6
 800e528:	d00a      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e52a:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800e52e:	42b0      	cmp	r0, r6
 800e530:	d006      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
 800e532:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800e536:	42b0      	cmp	r0, r6
 800e538:	d002      	beq.n	800e540 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e53a:	f044 0201 	orr.w	r2, r4, #1
 800e53e:	e002      	b.n	800e546 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e540:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800e544:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e546:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e548:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e54c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e550:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e554:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e556:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e558:	4313      	orrs	r3, r2
}
 800e55a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800e55c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800e55e:	6201      	str	r1, [r0, #32]
}
 800e560:	4770      	bx	lr
 800e562:	bf00      	nop
 800e564:	40010000 	.word	0x40010000

0800e568 <HAL_TIM_IC_ConfigChannel>:
{
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e56c:	4bb1      	ldr	r3, [pc, #708]	; (800e834 <HAL_TIM_IC_ConfigChannel+0x2cc>)
{
 800e56e:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e570:	4fb1      	ldr	r7, [pc, #708]	; (800e838 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800e572:	6829      	ldr	r1, [r5, #0]
{
 800e574:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e576:	48b1      	ldr	r0, [pc, #708]	; (800e83c <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800e578:	4299      	cmp	r1, r3
 800e57a:	bf18      	it	ne
 800e57c:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800e580:	4aaf      	ldr	r2, [pc, #700]	; (800e840 <HAL_TIM_IC_ConfigChannel+0x2d8>)
 800e582:	bf14      	ite	ne
 800e584:	2301      	movne	r3, #1
 800e586:	2300      	moveq	r3, #0
 800e588:	42b9      	cmp	r1, r7
 800e58a:	bf0c      	ite	eq
 800e58c:	2300      	moveq	r3, #0
 800e58e:	f003 0301 	andne.w	r3, r3, #1
 800e592:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800e596:	4281      	cmp	r1, r0
 800e598:	bf0c      	ite	eq
 800e59a:	2300      	moveq	r3, #0
 800e59c:	f003 0301 	andne.w	r3, r3, #1
 800e5a0:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800e5a4:	4291      	cmp	r1, r2
 800e5a6:	bf0c      	ite	eq
 800e5a8:	2300      	moveq	r3, #0
 800e5aa:	f003 0301 	andne.w	r3, r3, #1
 800e5ae:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800e5b2:	42b9      	cmp	r1, r7
 800e5b4:	bf0c      	ite	eq
 800e5b6:	2300      	moveq	r3, #0
 800e5b8:	f003 0301 	andne.w	r3, r3, #1
 800e5bc:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800e5c0:	4281      	cmp	r1, r0
 800e5c2:	bf0c      	ite	eq
 800e5c4:	2300      	moveq	r3, #0
 800e5c6:	f003 0301 	andne.w	r3, r3, #1
 800e5ca:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e5ce:	4291      	cmp	r1, r2
 800e5d0:	bf0c      	ite	eq
 800e5d2:	2300      	moveq	r3, #0
 800e5d4:	f003 0301 	andne.w	r3, r3, #1
 800e5d8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800e5dc:	42b9      	cmp	r1, r7
 800e5de:	bf0c      	ite	eq
 800e5e0:	2300      	moveq	r3, #0
 800e5e2:	f003 0301 	andne.w	r3, r3, #1
 800e5e6:	4281      	cmp	r1, r0
 800e5e8:	bf0c      	ite	eq
 800e5ea:	2300      	moveq	r3, #0
 800e5ec:	f003 0301 	andne.w	r3, r3, #1
 800e5f0:	4291      	cmp	r1, r2
 800e5f2:	bf0c      	ite	eq
 800e5f4:	2300      	moveq	r3, #0
 800e5f6:	f003 0301 	andne.w	r3, r3, #1
 800e5fa:	b11b      	cbz	r3, 800e604 <HAL_TIM_IC_ConfigChannel+0x9c>
 800e5fc:	4b91      	ldr	r3, [pc, #580]	; (800e844 <HAL_TIM_IC_ConfigChannel+0x2dc>)
 800e5fe:	4299      	cmp	r1, r3
 800e600:	f040 810b 	bne.w	800e81a <HAL_TIM_IC_ConfigChannel+0x2b2>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	f033 0202 	bics.w	r2, r3, #2
 800e60a:	d001      	beq.n	800e610 <HAL_TIM_IC_ConfigChannel+0xa8>
 800e60c:	2b0a      	cmp	r3, #10
 800e60e:	d167      	bne.n	800e6e0 <HAL_TIM_IC_ConfigChannel+0x178>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800e610:	6863      	ldr	r3, [r4, #4]
 800e612:	3b01      	subs	r3, #1
 800e614:	2b02      	cmp	r3, #2
 800e616:	d86c      	bhi.n	800e6f2 <HAL_TIM_IC_ConfigChannel+0x18a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800e618:	68a3      	ldr	r3, [r4, #8]
 800e61a:	f033 030c 	bics.w	r3, r3, #12
 800e61e:	d171      	bne.n	800e704 <HAL_TIM_IC_ConfigChannel+0x19c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800e620:	68e3      	ldr	r3, [r4, #12]
 800e622:	2b0f      	cmp	r3, #15
 800e624:	d876      	bhi.n	800e714 <HAL_TIM_IC_ConfigChannel+0x1ac>
  __HAL_LOCK(htim);
 800e626:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d07b      	beq.n	800e726 <HAL_TIM_IC_ConfigChannel+0x1be>
 800e62e:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e630:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800e632:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800e636:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  if (Channel == TIM_CHANNEL_1)
 800e63a:	2e00      	cmp	r6, #0
 800e63c:	d075      	beq.n	800e72a <HAL_TIM_IC_ConfigChannel+0x1c2>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e63e:	4a7d      	ldr	r2, [pc, #500]	; (800e834 <HAL_TIM_IC_ConfigChannel+0x2cc>)
 800e640:	682b      	ldr	r3, [r5, #0]
 800e642:	497d      	ldr	r1, [pc, #500]	; (800e838 <HAL_TIM_IC_ConfigChannel+0x2d0>)
 800e644:	4293      	cmp	r3, r2
 800e646:	bf18      	it	ne
 800e648:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800e64c:	487b      	ldr	r0, [pc, #492]	; (800e83c <HAL_TIM_IC_ConfigChannel+0x2d4>)
 800e64e:	bf14      	ite	ne
 800e650:	2201      	movne	r2, #1
 800e652:	2200      	moveq	r2, #0
 800e654:	428b      	cmp	r3, r1
 800e656:	bf0c      	ite	eq
 800e658:	2200      	moveq	r2, #0
 800e65a:	f002 0201 	andne.w	r2, r2, #1
 800e65e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e662:	4283      	cmp	r3, r0
 800e664:	bf0c      	ite	eq
 800e666:	2200      	moveq	r2, #0
 800e668:	f002 0201 	andne.w	r2, r2, #1
  else if (Channel == TIM_CHANNEL_2)
 800e66c:	2e04      	cmp	r6, #4
 800e66e:	d06c      	beq.n	800e74a <HAL_TIM_IC_ConfigChannel+0x1e2>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e670:	428b      	cmp	r3, r1
 800e672:	bf0c      	ite	eq
 800e674:	2200      	moveq	r2, #0
 800e676:	f002 0201 	andne.w	r2, r2, #1
  else if (Channel == TIM_CHANNEL_3)
 800e67a:	2e08      	cmp	r6, #8
 800e67c:	f000 80a0 	beq.w	800e7c0 <HAL_TIM_IC_ConfigChannel+0x258>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e680:	b11a      	cbz	r2, 800e68a <HAL_TIM_IC_ConfigChannel+0x122>
 800e682:	4a71      	ldr	r2, [pc, #452]	; (800e848 <HAL_TIM_IC_ConfigChannel+0x2e0>)
 800e684:	4293      	cmp	r3, r2
 800e686:	f040 80c1 	bne.w	800e80c <HAL_TIM_IC_ConfigChannel+0x2a4>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e68a:	6a18      	ldr	r0, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 800e68c:	6822      	ldr	r2, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e68e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800e692:	6867      	ldr	r7, [r4, #4]
 800e694:	68e1      	ldr	r1, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e696:	0312      	lsls	r2, r2, #12
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e698:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e69a:	69d8      	ldr	r0, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e69c:	0309      	lsls	r1, r1, #12
  tmpccer = TIMx->CCER;
 800e69e:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e6a0:	f402 4220 	and.w	r2, r2, #40960	; 0xa000
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e6a4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e6a8:	b289      	uxth	r1, r1
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e6aa:	f426 4620 	bic.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e6ae:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e6b0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e6b4:	4332      	orrs	r2, r6
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e6b6:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e6ba:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800e6bc:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e6be:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e6c0:	69d9      	ldr	r1, [r3, #28]
 800e6c2:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800e6c6:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e6c8:	69da      	ldr	r2, [r3, #28]
 800e6ca:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e6ce:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800e6d0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800e6d2:	2201      	movs	r2, #1
  return HAL_OK;
 800e6d4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800e6d6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e6da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800e6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800e6e0:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800e6e4:	4859      	ldr	r0, [pc, #356]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e6e6:	f7f5 fa1f 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800e6ea:	6863      	ldr	r3, [r4, #4]
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	2b02      	cmp	r3, #2
 800e6f0:	d992      	bls.n	800e618 <HAL_TIM_IC_ConfigChannel+0xb0>
 800e6f2:	f640 51b9 	movw	r1, #3513	; 0xdb9
 800e6f6:	4855      	ldr	r0, [pc, #340]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e6f8:	f7f5 fa16 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800e6fc:	68a3      	ldr	r3, [r4, #8]
 800e6fe:	f033 030c 	bics.w	r3, r3, #12
 800e702:	d08d      	beq.n	800e620 <HAL_TIM_IC_ConfigChannel+0xb8>
 800e704:	f640 51ba 	movw	r1, #3514	; 0xdba
 800e708:	4850      	ldr	r0, [pc, #320]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e70a:	f7f5 fa0d 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800e70e:	68e3      	ldr	r3, [r4, #12]
 800e710:	2b0f      	cmp	r3, #15
 800e712:	d988      	bls.n	800e626 <HAL_TIM_IC_ConfigChannel+0xbe>
 800e714:	f640 51bb 	movw	r1, #3515	; 0xdbb
 800e718:	484c      	ldr	r0, [pc, #304]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e71a:	f7f5 fa05 	bl	8003b28 <assert_failed>
  __HAL_LOCK(htim);
 800e71e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800e722:	2b01      	cmp	r3, #1
 800e724:	d183      	bne.n	800e62e <HAL_TIM_IC_ConfigChannel+0xc6>
 800e726:	2002      	movs	r0, #2
}
 800e728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800e72a:	e9d4 1200 	ldrd	r1, r2, [r4]
 800e72e:	68e3      	ldr	r3, [r4, #12]
 800e730:	6828      	ldr	r0, [r5, #0]
 800e732:	f7ff fedd 	bl	800e4f0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e736:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e738:	68a0      	ldr	r0, [r4, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e73a:	6999      	ldr	r1, [r3, #24]
 800e73c:	f021 010c 	bic.w	r1, r1, #12
 800e740:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e742:	699a      	ldr	r2, [r3, #24]
 800e744:	4302      	orrs	r2, r0
 800e746:	619a      	str	r2, [r3, #24]
 800e748:	e7c2      	b.n	800e6d0 <HAL_TIM_IC_ConfigChannel+0x168>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e74a:	428b      	cmp	r3, r1
 800e74c:	bf0c      	ite	eq
 800e74e:	2200      	moveq	r2, #0
 800e750:	f002 0201 	andne.w	r2, r2, #1
 800e754:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800e758:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800e75c:	4283      	cmp	r3, r0
 800e75e:	bf0c      	ite	eq
 800e760:	2200      	moveq	r2, #0
 800e762:	f002 0201 	andne.w	r2, r2, #1
 800e766:	428b      	cmp	r3, r1
 800e768:	bf0c      	ite	eq
 800e76a:	2200      	moveq	r2, #0
 800e76c:	f002 0201 	andne.w	r2, r2, #1
 800e770:	b112      	cbz	r2, 800e778 <HAL_TIM_IC_ConfigChannel+0x210>
 800e772:	4a37      	ldr	r2, [pc, #220]	; (800e850 <HAL_TIM_IC_ConfigChannel+0x2e8>)
 800e774:	4293      	cmp	r3, r2
 800e776:	d16d      	bne.n	800e854 <HAL_TIM_IC_ConfigChannel+0x2ec>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e778:	6a18      	ldr	r0, [r3, #32]
    TIM_TI2_SetConfig(htim->Instance,
 800e77a:	6822      	ldr	r2, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e77c:	f020 0010 	bic.w	r0, r0, #16
    TIM_TI2_SetConfig(htim->Instance,
 800e780:	6867      	ldr	r7, [r4, #4]
 800e782:	68e1      	ldr	r1, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e784:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e786:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e788:	6998      	ldr	r0, [r3, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e78a:	0309      	lsls	r1, r1, #12
  tmpccer = TIMx->CCER;
 800e78c:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e78e:	f002 02a0 	and.w	r2, r2, #160	; 0xa0
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e792:	f420 7040 	bic.w	r0, r0, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e796:	b289      	uxth	r1, r1
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e798:	f026 06a0 	bic.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e79c:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e79e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e7a2:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7a4:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e7a8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 800e7aa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7ac:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e7ae:	6999      	ldr	r1, [r3, #24]
 800e7b0:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800e7b4:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e7b6:	699a      	ldr	r2, [r3, #24]
 800e7b8:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800e7bc:	619a      	str	r2, [r3, #24]
 800e7be:	e787      	b.n	800e6d0 <HAL_TIM_IC_ConfigChannel+0x168>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e7c0:	b112      	cbz	r2, 800e7c8 <HAL_TIM_IC_ConfigChannel+0x260>
 800e7c2:	4a21      	ldr	r2, [pc, #132]	; (800e848 <HAL_TIM_IC_ConfigChannel+0x2e0>)
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d12e      	bne.n	800e826 <HAL_TIM_IC_ConfigChannel+0x2be>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7c8:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 800e7ca:	6822      	ldr	r2, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7cc:	f426 7680 	bic.w	r6, r6, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800e7d0:	6860      	ldr	r0, [r4, #4]
 800e7d2:	68e1      	ldr	r1, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e7d4:	0212      	lsls	r2, r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7d6:	621e      	str	r6, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e7d8:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e7da:	0109      	lsls	r1, r1, #4
  tmpccer = TIMx->CCER;
 800e7dc:	6a1e      	ldr	r6, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e7de:	f402 6220 	and.w	r2, r2, #2560	; 0xa00
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e7e2:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e7e6:	b2c9      	uxtb	r1, r1
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e7e8:	f426 6620 	bic.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e7ec:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 |= TIM_ICSelection;
 800e7ee:	4338      	orrs	r0, r7
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e7f0:	4332      	orrs	r2, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e7f2:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e7f6:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800e7f8:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 800e7fa:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e7fc:	69d9      	ldr	r1, [r3, #28]
 800e7fe:	f021 010c 	bic.w	r1, r1, #12
 800e802:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e804:	69da      	ldr	r2, [r3, #28]
 800e806:	4322      	orrs	r2, r4
 800e808:	61da      	str	r2, [r3, #28]
 800e80a:	e761      	b.n	800e6d0 <HAL_TIM_IC_ConfigChannel+0x168>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800e80c:	f640 51f3 	movw	r1, #3571	; 0xdf3
 800e810:	480e      	ldr	r0, [pc, #56]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e812:	f7f5 f989 	bl	8003b28 <assert_failed>
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	e737      	b.n	800e68a <HAL_TIM_IC_ConfigChannel+0x122>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800e81a:	f640 51b7 	movw	r1, #3511	; 0xdb7
 800e81e:	480b      	ldr	r0, [pc, #44]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e820:	f7f5 f982 	bl	8003b28 <assert_failed>
 800e824:	e6ee      	b.n	800e604 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800e826:	f640 51e3 	movw	r1, #3555	; 0xde3
 800e82a:	4808      	ldr	r0, [pc, #32]	; (800e84c <HAL_TIM_IC_ConfigChannel+0x2e4>)
 800e82c:	f7f5 f97c 	bl	8003b28 <assert_failed>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	e7c9      	b.n	800e7c8 <HAL_TIM_IC_ConfigChannel+0x260>
 800e834:	40010000 	.word	0x40010000
 800e838:	40000400 	.word	0x40000400
 800e83c:	40000800 	.word	0x40000800
 800e840:	40000c00 	.word	0x40000c00
 800e844:	40002000 	.word	0x40002000
 800e848:	40010400 	.word	0x40010400
 800e84c:	08027eb0 	.word	0x08027eb0
 800e850:	40001800 	.word	0x40001800
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800e854:	f640 51d3 	movw	r1, #3539	; 0xdd3
 800e858:	4802      	ldr	r0, [pc, #8]	; (800e864 <HAL_TIM_IC_ConfigChannel+0x2fc>)
 800e85a:	f7f5 f965 	bl	8003b28 <assert_failed>
 800e85e:	682b      	ldr	r3, [r5, #0]
 800e860:	e78a      	b.n	800e778 <HAL_TIM_IC_ConfigChannel+0x210>
 800e862:	bf00      	nop
 800e864:	08027eb0 	.word	0x08027eb0

0800e868 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800e868:	4b2b      	ldr	r3, [pc, #172]	; (800e918 <TIM_CCxChannelCmd+0xb0>)
 800e86a:	4298      	cmp	r0, r3
{
 800e86c:	b530      	push	{r4, r5, lr}
 800e86e:	4604      	mov	r4, r0
 800e870:	b083      	sub	sp, #12
 800e872:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800e874:	d031      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e876:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800e87a:	d02e      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e87c:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800e880:	4298      	cmp	r0, r3
 800e882:	d02a      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e888:	4298      	cmp	r0, r3
 800e88a:	d026      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e88c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e890:	4298      	cmp	r0, r3
 800e892:	d022      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e894:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800e898:	4298      	cmp	r0, r3
 800e89a:	d01e      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e89c:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800e8a0:	4298      	cmp	r0, r3
 800e8a2:	d01a      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8a8:	4298      	cmp	r0, r3
 800e8aa:	d016      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8b0:	4298      	cmp	r0, r3
 800e8b2:	d012      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8b4:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800e8b8:	4298      	cmp	r0, r3
 800e8ba:	d00e      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8c0:	4298      	cmp	r0, r3
 800e8c2:	d00a      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e8c8:	4298      	cmp	r0, r3
 800e8ca:	d006      	beq.n	800e8da <TIM_CCxChannelCmd+0x72>
 800e8cc:	f641 21c2 	movw	r1, #6850	; 0x1ac2
 800e8d0:	4812      	ldr	r0, [pc, #72]	; (800e91c <TIM_CCxChannelCmd+0xb4>)
 800e8d2:	9201      	str	r2, [sp, #4]
 800e8d4:	f7f5 f928 	bl	8003b28 <assert_failed>
 800e8d8:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800e8da:	2d14      	cmp	r5, #20
 800e8dc:	d90f      	bls.n	800e8fe <TIM_CCxChannelCmd+0x96>
 800e8de:	2d3c      	cmp	r5, #60	; 0x3c
 800e8e0:	d111      	bne.n	800e906 <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8e2:	f005 051f 	and.w	r5, r5, #31
 800e8e6:	2001      	movs	r0, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e8e8:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e8ea:	40a8      	lsls	r0, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8ec:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 800e8ee:	ea23 0300 	bic.w	r3, r3, r0
 800e8f2:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e8f4:	6a25      	ldr	r5, [r4, #32]
 800e8f6:	4315      	orrs	r5, r2
 800e8f8:	6225      	str	r5, [r4, #32]
}
 800e8fa:	b003      	add	sp, #12
 800e8fc:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800e8fe:	4b08      	ldr	r3, [pc, #32]	; (800e920 <TIM_CCxChannelCmd+0xb8>)
 800e900:	40eb      	lsrs	r3, r5
 800e902:	07db      	lsls	r3, r3, #31
 800e904:	d4ed      	bmi.n	800e8e2 <TIM_CCxChannelCmd+0x7a>
 800e906:	f641 21c3 	movw	r1, #6851	; 0x1ac3
 800e90a:	4804      	ldr	r0, [pc, #16]	; (800e91c <TIM_CCxChannelCmd+0xb4>)
 800e90c:	9201      	str	r2, [sp, #4]
 800e90e:	f7f5 f90b 	bl	8003b28 <assert_failed>
 800e912:	9a01      	ldr	r2, [sp, #4]
 800e914:	e7e5      	b.n	800e8e2 <TIM_CCxChannelCmd+0x7a>
 800e916:	bf00      	nop
 800e918:	40010000 	.word	0x40010000
 800e91c:	08027eb0 	.word	0x08027eb0
 800e920:	00111111 	.word	0x00111111

0800e924 <HAL_TIM_IC_Start_DMA>:
{
 800e924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e926:	4604      	mov	r4, r0
 800e928:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e92a:	487b      	ldr	r0, [pc, #492]	; (800eb18 <HAL_TIM_IC_Start_DMA+0x1f4>)
{
 800e92c:	b083      	sub	sp, #12
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e92e:	6821      	ldr	r1, [r4, #0]
 800e930:	4281      	cmp	r1, r0
 800e932:	d06a      	beq.n	800ea0a <HAL_TIM_IC_Start_DMA+0xe6>
 800e934:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800e938:	d05d      	beq.n	800e9f6 <HAL_TIM_IC_Start_DMA+0xd2>
 800e93a:	4878      	ldr	r0, [pc, #480]	; (800eb1c <HAL_TIM_IC_Start_DMA+0x1f8>)
 800e93c:	4281      	cmp	r1, r0
 800e93e:	d05a      	beq.n	800e9f6 <HAL_TIM_IC_Start_DMA+0xd2>
 800e940:	4877      	ldr	r0, [pc, #476]	; (800eb20 <HAL_TIM_IC_Start_DMA+0x1fc>)
 800e942:	4281      	cmp	r1, r0
 800e944:	d057      	beq.n	800e9f6 <HAL_TIM_IC_Start_DMA+0xd2>
 800e946:	4877      	ldr	r0, [pc, #476]	; (800eb24 <HAL_TIM_IC_Start_DMA+0x200>)
 800e948:	4281      	cmp	r1, r0
 800e94a:	d054      	beq.n	800e9f6 <HAL_TIM_IC_Start_DMA+0xd2>
 800e94c:	4876      	ldr	r0, [pc, #472]	; (800eb28 <HAL_TIM_IC_Start_DMA+0x204>)
 800e94e:	4281      	cmp	r1, r0
 800e950:	d05b      	beq.n	800ea0a <HAL_TIM_IC_Start_DMA+0xe6>
 800e952:	4876      	ldr	r0, [pc, #472]	; (800eb2c <HAL_TIM_IC_Start_DMA+0x208>)
 800e954:	4281      	cmp	r1, r0
 800e956:	d00c      	beq.n	800e972 <HAL_TIM_IC_Start_DMA+0x4e>
 800e958:	4875      	ldr	r0, [pc, #468]	; (800eb30 <HAL_TIM_IC_Start_DMA+0x20c>)
 800e95a:	4281      	cmp	r1, r0
 800e95c:	f000 80c9 	beq.w	800eaf2 <HAL_TIM_IC_Start_DMA+0x1ce>
 800e960:	4874      	ldr	r0, [pc, #464]	; (800eb34 <HAL_TIM_IC_Start_DMA+0x210>)
 800e962:	4281      	cmp	r1, r0
 800e964:	f000 80c5 	beq.w	800eaf2 <HAL_TIM_IC_Start_DMA+0x1ce>
 800e968:	f5a0 3098 	sub.w	r0, r0, #77824	; 0x13000
 800e96c:	4281      	cmp	r1, r0
 800e96e:	f040 80b9 	bne.w	800eae4 <HAL_TIM_IC_Start_DMA+0x1c0>
 800e972:	f035 0104 	bics.w	r1, r5, #4
 800e976:	f000 80bf 	beq.w	800eaf8 <HAL_TIM_IC_Start_DMA+0x1d4>
 800e97a:	f640 0115 	movw	r1, #2069	; 0x815
 800e97e:	486e      	ldr	r0, [pc, #440]	; (800eb38 <HAL_TIM_IC_Start_DMA+0x214>)
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800e980:	4e66      	ldr	r6, [pc, #408]	; (800eb1c <HAL_TIM_IC_Start_DMA+0x1f8>)
 800e982:	4f67      	ldr	r7, [pc, #412]	; (800eb20 <HAL_TIM_IC_Start_DMA+0x1fc>)
 800e984:	e9cd 2300 	strd	r2, r3, [sp]
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e988:	f7f5 f8ce 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800e98c:	6820      	ldr	r0, [r4, #0]
 800e98e:	4962      	ldr	r1, [pc, #392]	; (800eb18 <HAL_TIM_IC_Start_DMA+0x1f4>)
 800e990:	4288      	cmp	r0, r1
 800e992:	bf18      	it	ne
 800e994:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800e998:	bf14      	ite	ne
 800e99a:	2101      	movne	r1, #1
 800e99c:	2100      	moveq	r1, #0
 800e99e:	42b0      	cmp	r0, r6
 800e9a0:	bf0c      	ite	eq
 800e9a2:	2100      	moveq	r1, #0
 800e9a4:	f001 0101 	andne.w	r1, r1, #1
 800e9a8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800e9ac:	42b8      	cmp	r0, r7
 800e9ae:	bf0c      	ite	eq
 800e9b0:	2100      	moveq	r1, #0
 800e9b2:	f001 0101 	andne.w	r1, r1, #1
 800e9b6:	42b0      	cmp	r0, r6
 800e9b8:	bf0c      	ite	eq
 800e9ba:	2100      	moveq	r1, #0
 800e9bc:	f001 0101 	andne.w	r1, r1, #1
 800e9c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9c4:	b119      	cbz	r1, 800e9ce <HAL_TIM_IC_Start_DMA+0xaa>
 800e9c6:	4958      	ldr	r1, [pc, #352]	; (800eb28 <HAL_TIM_IC_Start_DMA+0x204>)
 800e9c8:	4288      	cmp	r0, r1
 800e9ca:	f040 8095 	bne.w	800eaf8 <HAL_TIM_IC_Start_DMA+0x1d4>
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e9ce:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800e9d2:	2902      	cmp	r1, #2
 800e9d4:	b2c8      	uxtb	r0, r1
 800e9d6:	d016      	beq.n	800ea06 <HAL_TIM_IC_Start_DMA+0xe2>
  else if (htim->State == HAL_TIM_STATE_READY)
 800e9d8:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800e9dc:	2901      	cmp	r1, #1
 800e9de:	d01b      	beq.n	800ea18 <HAL_TIM_IC_Start_DMA+0xf4>
  switch (Channel)
 800e9e0:	2d0c      	cmp	r5, #12
 800e9e2:	d820      	bhi.n	800ea26 <HAL_TIM_IC_Start_DMA+0x102>
 800e9e4:	e8df f005 	tbb	[pc, r5]
 800e9e8:	1f1f1f5a 	.word	0x1f1f1f5a
 800e9ec:	1f1f1f6c 	.word	0x1f1f1f6c
 800e9f0:	1f1f1f34 	.word	0x1f1f1f34
 800e9f4:	47          	.byte	0x47
 800e9f5:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800e9f6:	f035 010c 	bics.w	r1, r5, #12
 800e9fa:	d1be      	bne.n	800e97a <HAL_TIM_IC_Start_DMA+0x56>
  if (htim->State == HAL_TIM_STATE_BUSY)
 800e9fc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 800ea00:	2902      	cmp	r1, #2
 800ea02:	b2c8      	uxtb	r0, r1
 800ea04:	d1e8      	bne.n	800e9d8 <HAL_TIM_IC_Start_DMA+0xb4>
}
 800ea06:	b003      	add	sp, #12
 800ea08:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ea0a:	2d14      	cmp	r5, #20
 800ea0c:	d8b5      	bhi.n	800e97a <HAL_TIM_IC_Start_DMA+0x56>
 800ea0e:	494b      	ldr	r1, [pc, #300]	; (800eb3c <HAL_TIM_IC_Start_DMA+0x218>)
 800ea10:	40e9      	lsrs	r1, r5
 800ea12:	07c9      	lsls	r1, r1, #31
 800ea14:	d4db      	bmi.n	800e9ce <HAL_TIM_IC_Start_DMA+0xaa>
 800ea16:	e7b0      	b.n	800e97a <HAL_TIM_IC_Start_DMA+0x56>
    if ((pData == NULL) && (Length > 0U))
 800ea18:	b90a      	cbnz	r2, 800ea1e <HAL_TIM_IC_Start_DMA+0xfa>
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d176      	bne.n	800eb0c <HAL_TIM_IC_Start_DMA+0x1e8>
      htim->State = HAL_TIM_STATE_BUSY;
 800ea1e:	2102      	movs	r1, #2
 800ea20:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 800ea24:	e7dc      	b.n	800e9e0 <HAL_TIM_IC_Start_DMA+0xbc>
 800ea26:	6820      	ldr	r0, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ea28:	4629      	mov	r1, r5
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f7ff ff1c 	bl	800e868 <TIM_CCxChannelCmd>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea30:	6822      	ldr	r2, [r4, #0]
 800ea32:	4b43      	ldr	r3, [pc, #268]	; (800eb40 <HAL_TIM_IC_Start_DMA+0x21c>)
 800ea34:	6891      	ldr	r1, [r2, #8]
 800ea36:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea38:	2b06      	cmp	r3, #6
 800ea3a:	d06a      	beq.n	800eb12 <HAL_TIM_IC_Start_DMA+0x1ee>
 800ea3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea40:	d067      	beq.n	800eb12 <HAL_TIM_IC_Start_DMA+0x1ee>
    __HAL_TIM_ENABLE(htim);
 800ea42:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800ea44:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800ea46:	f043 0301 	orr.w	r3, r3, #1
 800ea4a:	6013      	str	r3, [r2, #0]
}
 800ea4c:	b003      	add	sp, #12
 800ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800ea50:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800ea52:	4e3c      	ldr	r6, [pc, #240]	; (800eb44 <HAL_TIM_IC_Start_DMA+0x220>)
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ea54:	493c      	ldr	r1, [pc, #240]	; (800eb48 <HAL_TIM_IC_Start_DMA+0x224>)
 800ea56:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800ea5a:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ea5c:	4e3b      	ldr	r6, [pc, #236]	; (800eb4c <HAL_TIM_IC_Start_DMA+0x228>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800ea5e:	313c      	adds	r1, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800ea60:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800ea62:	f7f8 fdeb 	bl	800763c <HAL_DMA_Start_IT>
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d150      	bne.n	800eb0c <HAL_TIM_IC_Start_DMA+0x1e8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ea6a:	6820      	ldr	r0, [r4, #0]
 800ea6c:	68c3      	ldr	r3, [r0, #12]
 800ea6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ea72:	60c3      	str	r3, [r0, #12]
      break;
 800ea74:	e7d8      	b.n	800ea28 <HAL_TIM_IC_Start_DMA+0x104>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800ea76:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ea78:	4e32      	ldr	r6, [pc, #200]	; (800eb44 <HAL_TIM_IC_Start_DMA+0x220>)
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ea7a:	4933      	ldr	r1, [pc, #204]	; (800eb48 <HAL_TIM_IC_Start_DMA+0x224>)
 800ea7c:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800ea80:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ea82:	4e32      	ldr	r6, [pc, #200]	; (800eb4c <HAL_TIM_IC_Start_DMA+0x228>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800ea84:	3140      	adds	r1, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ea86:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800ea88:	f7f8 fdd8 	bl	800763c <HAL_DMA_Start_IT>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d13d      	bne.n	800eb0c <HAL_TIM_IC_Start_DMA+0x1e8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ea90:	6820      	ldr	r0, [r4, #0]
 800ea92:	68c3      	ldr	r3, [r0, #12]
 800ea94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea98:	60c3      	str	r3, [r0, #12]
      break;
 800ea9a:	e7c5      	b.n	800ea28 <HAL_TIM_IC_Start_DMA+0x104>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ea9c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ea9e:	4e29      	ldr	r6, [pc, #164]	; (800eb44 <HAL_TIM_IC_Start_DMA+0x220>)
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800eaa0:	4929      	ldr	r1, [pc, #164]	; (800eb48 <HAL_TIM_IC_Start_DMA+0x224>)
 800eaa2:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800eaa6:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800eaa8:	4e28      	ldr	r6, [pc, #160]	; (800eb4c <HAL_TIM_IC_Start_DMA+0x228>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800eaaa:	3134      	adds	r1, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800eaac:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800eaae:	f7f8 fdc5 	bl	800763c <HAL_DMA_Start_IT>
 800eab2:	bb58      	cbnz	r0, 800eb0c <HAL_TIM_IC_Start_DMA+0x1e8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800eab4:	6820      	ldr	r0, [r4, #0]
 800eab6:	68c3      	ldr	r3, [r0, #12]
 800eab8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eabc:	60c3      	str	r3, [r0, #12]
      break;
 800eabe:	e7b3      	b.n	800ea28 <HAL_TIM_IC_Start_DMA+0x104>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800eac0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800eac2:	4e20      	ldr	r6, [pc, #128]	; (800eb44 <HAL_TIM_IC_Start_DMA+0x220>)
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800eac4:	4920      	ldr	r1, [pc, #128]	; (800eb48 <HAL_TIM_IC_Start_DMA+0x224>)
 800eac6:	e9c0 610f 	strd	r6, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800eaca:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800eacc:	4e1f      	ldr	r6, [pc, #124]	; (800eb4c <HAL_TIM_IC_Start_DMA+0x228>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800eace:	3138      	adds	r1, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ead0:	64c6      	str	r6, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800ead2:	f7f8 fdb3 	bl	800763c <HAL_DMA_Start_IT>
 800ead6:	b9c8      	cbnz	r0, 800eb0c <HAL_TIM_IC_Start_DMA+0x1e8>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800ead8:	6820      	ldr	r0, [r4, #0]
 800eada:	68c3      	ldr	r3, [r0, #12]
 800eadc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eae0:	60c3      	str	r3, [r0, #12]
      break;
 800eae2:	e7a1      	b.n	800ea28 <HAL_TIM_IC_Start_DMA+0x104>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800eae4:	481a      	ldr	r0, [pc, #104]	; (800eb50 <HAL_TIM_IC_Start_DMA+0x22c>)
 800eae6:	4281      	cmp	r1, r0
 800eae8:	d003      	beq.n	800eaf2 <HAL_TIM_IC_Start_DMA+0x1ce>
 800eaea:	481a      	ldr	r0, [pc, #104]	; (800eb54 <HAL_TIM_IC_Start_DMA+0x230>)
 800eaec:	4281      	cmp	r1, r0
 800eaee:	f47f af44 	bne.w	800e97a <HAL_TIM_IC_Start_DMA+0x56>
 800eaf2:	2d00      	cmp	r5, #0
 800eaf4:	f47f af41 	bne.w	800e97a <HAL_TIM_IC_Start_DMA+0x56>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800eaf8:	f640 0116 	movw	r1, #2070	; 0x816
 800eafc:	480e      	ldr	r0, [pc, #56]	; (800eb38 <HAL_TIM_IC_Start_DMA+0x214>)
 800eafe:	e9cd 2300 	strd	r2, r3, [sp]
 800eb02:	f7f5 f811 	bl	8003b28 <assert_failed>
 800eb06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb0a:	e760      	b.n	800e9ce <HAL_TIM_IC_Start_DMA+0xaa>
      return HAL_ERROR;
 800eb0c:	2001      	movs	r0, #1
}
 800eb0e:	b003      	add	sp, #12
 800eb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 800eb12:	2000      	movs	r0, #0
}
 800eb14:	b003      	add	sp, #12
 800eb16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb18:	40010000 	.word	0x40010000
 800eb1c:	40000400 	.word	0x40000400
 800eb20:	40000800 	.word	0x40000800
 800eb24:	40000c00 	.word	0x40000c00
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40014400 	.word	0x40014400
 800eb34:	40014800 	.word	0x40014800
 800eb38:	08027eb0 	.word	0x08027eb0
 800eb3c:	00111111 	.word	0x00111111
 800eb40:	00010007 	.word	0x00010007
 800eb44:	0800d43d 	.word	0x0800d43d
 800eb48:	0800d4a1 	.word	0x0800d4a1
 800eb4c:	0800d67d 	.word	0x0800d67d
 800eb50:	40001c00 	.word	0x40001c00
 800eb54:	40002000 	.word	0x40002000

0800eb58 <HAL_TIM_IC_Stop_DMA>:
{
 800eb58:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800eb5a:	4a57      	ldr	r2, [pc, #348]	; (800ecb8 <HAL_TIM_IC_Stop_DMA+0x160>)
{
 800eb5c:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800eb5e:	6803      	ldr	r3, [r0, #0]
{
 800eb60:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800eb62:	4293      	cmp	r3, r2
 800eb64:	f000 8092 	beq.w	800ec8c <HAL_TIM_IC_Stop_DMA+0x134>
 800eb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb6c:	d04e      	beq.n	800ec0c <HAL_TIM_IC_Stop_DMA+0xb4>
 800eb6e:	4a53      	ldr	r2, [pc, #332]	; (800ecbc <HAL_TIM_IC_Stop_DMA+0x164>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d04b      	beq.n	800ec0c <HAL_TIM_IC_Stop_DMA+0xb4>
 800eb74:	4a52      	ldr	r2, [pc, #328]	; (800ecc0 <HAL_TIM_IC_Stop_DMA+0x168>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d048      	beq.n	800ec0c <HAL_TIM_IC_Stop_DMA+0xb4>
 800eb7a:	4a52      	ldr	r2, [pc, #328]	; (800ecc4 <HAL_TIM_IC_Stop_DMA+0x16c>)
 800eb7c:	4293      	cmp	r3, r2
 800eb7e:	d045      	beq.n	800ec0c <HAL_TIM_IC_Stop_DMA+0xb4>
 800eb80:	4a51      	ldr	r2, [pc, #324]	; (800ecc8 <HAL_TIM_IC_Stop_DMA+0x170>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	f000 8082 	beq.w	800ec8c <HAL_TIM_IC_Stop_DMA+0x134>
 800eb88:	4a50      	ldr	r2, [pc, #320]	; (800eccc <HAL_TIM_IC_Stop_DMA+0x174>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d00b      	beq.n	800eba6 <HAL_TIM_IC_Stop_DMA+0x4e>
 800eb8e:	4a50      	ldr	r2, [pc, #320]	; (800ecd0 <HAL_TIM_IC_Stop_DMA+0x178>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	f000 8088 	beq.w	800eca6 <HAL_TIM_IC_Stop_DMA+0x14e>
 800eb96:	4a4f      	ldr	r2, [pc, #316]	; (800ecd4 <HAL_TIM_IC_Stop_DMA+0x17c>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	f000 8084 	beq.w	800eca6 <HAL_TIM_IC_Stop_DMA+0x14e>
 800eb9e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d179      	bne.n	800ec9a <HAL_TIM_IC_Stop_DMA+0x142>
 800eba6:	f035 0304 	bics.w	r3, r5, #4
 800ebaa:	d07e      	beq.n	800ecaa <HAL_TIM_IC_Stop_DMA+0x152>
 800ebac:	f640 019a 	movw	r1, #2202	; 0x89a
 800ebb0:	4849      	ldr	r0, [pc, #292]	; (800ecd8 <HAL_TIM_IC_Stop_DMA+0x180>)
 800ebb2:	f7f4 ffb9 	bl	8003b28 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800ebb6:	6823      	ldr	r3, [r4, #0]
 800ebb8:	4a3f      	ldr	r2, [pc, #252]	; (800ecb8 <HAL_TIM_IC_Stop_DMA+0x160>)
 800ebba:	4940      	ldr	r1, [pc, #256]	; (800ecbc <HAL_TIM_IC_Stop_DMA+0x164>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	bf18      	it	ne
 800ebc0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ebc4:	483e      	ldr	r0, [pc, #248]	; (800ecc0 <HAL_TIM_IC_Stop_DMA+0x168>)
 800ebc6:	bf14      	ite	ne
 800ebc8:	2201      	movne	r2, #1
 800ebca:	2200      	moveq	r2, #0
 800ebcc:	428b      	cmp	r3, r1
 800ebce:	bf0c      	ite	eq
 800ebd0:	2200      	moveq	r2, #0
 800ebd2:	f002 0201 	andne.w	r2, r2, #1
 800ebd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebda:	4283      	cmp	r3, r0
 800ebdc:	bf0c      	ite	eq
 800ebde:	2200      	moveq	r2, #0
 800ebe0:	f002 0201 	andne.w	r2, r2, #1
 800ebe4:	428b      	cmp	r3, r1
 800ebe6:	bf0c      	ite	eq
 800ebe8:	2200      	moveq	r2, #0
 800ebea:	f002 0201 	andne.w	r2, r2, #1
 800ebee:	b112      	cbz	r2, 800ebf6 <HAL_TIM_IC_Stop_DMA+0x9e>
 800ebf0:	4a35      	ldr	r2, [pc, #212]	; (800ecc8 <HAL_TIM_IC_Stop_DMA+0x170>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d159      	bne.n	800ecaa <HAL_TIM_IC_Stop_DMA+0x152>
  switch (Channel)
 800ebf6:	2d0c      	cmp	r5, #12
 800ebf8:	d814      	bhi.n	800ec24 <HAL_TIM_IC_Stop_DMA+0xcc>
 800ebfa:	e8df f005 	tbb	[pc, r5]
 800ebfe:	130b      	.short	0x130b
 800ec00:	133e1313 	.word	0x133e1313
 800ec04:	13351313 	.word	0x13351313
 800ec08:	1313      	.short	0x1313
 800ec0a:	2c          	.byte	0x2c
 800ec0b:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ec0c:	f035 020c 	bics.w	r2, r5, #12
 800ec10:	d1cc      	bne.n	800ebac <HAL_TIM_IC_Stop_DMA+0x54>
 800ec12:	e7f0      	b.n	800ebf6 <HAL_TIM_IC_Stop_DMA+0x9e>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ec14:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ec16:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800ec18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ec1c:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800ec1e:	f7f8 fdb1 	bl	8007784 <HAL_DMA_Abort_IT>
      break;
 800ec22:	6823      	ldr	r3, [r4, #0]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ec24:	4629      	mov	r1, r5
 800ec26:	4618      	mov	r0, r3
 800ec28:	2200      	movs	r2, #0
 800ec2a:	f7ff fe1d 	bl	800e868 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	f241 1211 	movw	r2, #4369	; 0x1111
 800ec34:	6a19      	ldr	r1, [r3, #32]
 800ec36:	4211      	tst	r1, r2
 800ec38:	d108      	bne.n	800ec4c <HAL_TIM_IC_Stop_DMA+0xf4>
 800ec3a:	6a19      	ldr	r1, [r3, #32]
 800ec3c:	f240 4244 	movw	r2, #1092	; 0x444
 800ec40:	4211      	tst	r1, r2
 800ec42:	d103      	bne.n	800ec4c <HAL_TIM_IC_Stop_DMA+0xf4>
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	f022 0201 	bic.w	r2, r2, #1
 800ec4a:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 800ec4c:	2301      	movs	r3, #1
}
 800ec4e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800ec50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ec54:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ec56:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ec58:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ec5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ec60:	f7f8 fd90 	bl	8007784 <HAL_DMA_Abort_IT>
      break;
 800ec64:	6823      	ldr	r3, [r4, #0]
 800ec66:	e7dd      	b.n	800ec24 <HAL_TIM_IC_Stop_DMA+0xcc>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ec68:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ec6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ec6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ec70:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ec72:	f7f8 fd87 	bl	8007784 <HAL_DMA_Abort_IT>
      break;
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	e7d4      	b.n	800ec24 <HAL_TIM_IC_Stop_DMA+0xcc>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ec7a:	68da      	ldr	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ec7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ec7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec82:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ec84:	f7f8 fd7e 	bl	8007784 <HAL_DMA_Abort_IT>
      break;
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	e7cb      	b.n	800ec24 <HAL_TIM_IC_Stop_DMA+0xcc>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ec8c:	2d14      	cmp	r5, #20
 800ec8e:	d88d      	bhi.n	800ebac <HAL_TIM_IC_Stop_DMA+0x54>
 800ec90:	4a12      	ldr	r2, [pc, #72]	; (800ecdc <HAL_TIM_IC_Stop_DMA+0x184>)
 800ec92:	40ea      	lsrs	r2, r5
 800ec94:	07d2      	lsls	r2, r2, #31
 800ec96:	d4ae      	bmi.n	800ebf6 <HAL_TIM_IC_Stop_DMA+0x9e>
 800ec98:	e788      	b.n	800ebac <HAL_TIM_IC_Stop_DMA+0x54>
 800ec9a:	4a11      	ldr	r2, [pc, #68]	; (800ece0 <HAL_TIM_IC_Stop_DMA+0x188>)
 800ec9c:	4293      	cmp	r3, r2
 800ec9e:	d002      	beq.n	800eca6 <HAL_TIM_IC_Stop_DMA+0x14e>
 800eca0:	4a10      	ldr	r2, [pc, #64]	; (800ece4 <HAL_TIM_IC_Stop_DMA+0x18c>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d182      	bne.n	800ebac <HAL_TIM_IC_Stop_DMA+0x54>
 800eca6:	2d00      	cmp	r5, #0
 800eca8:	d180      	bne.n	800ebac <HAL_TIM_IC_Stop_DMA+0x54>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800ecaa:	f640 019b 	movw	r1, #2203	; 0x89b
 800ecae:	480a      	ldr	r0, [pc, #40]	; (800ecd8 <HAL_TIM_IC_Stop_DMA+0x180>)
 800ecb0:	f7f4 ff3a 	bl	8003b28 <assert_failed>
 800ecb4:	6823      	ldr	r3, [r4, #0]
 800ecb6:	e79e      	b.n	800ebf6 <HAL_TIM_IC_Stop_DMA+0x9e>
 800ecb8:	40010000 	.word	0x40010000
 800ecbc:	40000400 	.word	0x40000400
 800ecc0:	40000800 	.word	0x40000800
 800ecc4:	40000c00 	.word	0x40000c00
 800ecc8:	40010400 	.word	0x40010400
 800eccc:	40014000 	.word	0x40014000
 800ecd0:	40014400 	.word	0x40014400
 800ecd4:	40014800 	.word	0x40014800
 800ecd8:	08027eb0 	.word	0x08027eb0
 800ecdc:	00111111 	.word	0x00111111
 800ece0:	40001c00 	.word	0x40001c00
 800ece4:	40002000 	.word	0x40002000

0800ece8 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ece8:	6802      	ldr	r2, [r0, #0]
 800ecea:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
{
 800ecee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ecf2:	4b6b      	ldr	r3, [pc, #428]	; (800eea0 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
{
 800ecf4:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ecf6:	4f6b      	ldr	r7, [pc, #428]	; (800eea4 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 800ecf8:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	bf18      	it	ne
 800ecfe:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ed02:	4e69      	ldr	r6, [pc, #420]	; (800eea8 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 800ed04:	4869      	ldr	r0, [pc, #420]	; (800eeac <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 800ed06:	bf14      	ite	ne
 800ed08:	2301      	movne	r3, #1
 800ed0a:	2300      	moveq	r3, #0
 800ed0c:	4968      	ldr	r1, [pc, #416]	; (800eeb0 <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 800ed0e:	4562      	cmp	r2, ip
 800ed10:	bf0c      	ite	eq
 800ed12:	2300      	moveq	r3, #0
 800ed14:	f003 0301 	andne.w	r3, r3, #1
 800ed18:	42ba      	cmp	r2, r7
 800ed1a:	bf0c      	ite	eq
 800ed1c:	2300      	moveq	r3, #0
 800ed1e:	f003 0301 	andne.w	r3, r3, #1
 800ed22:	42b2      	cmp	r2, r6
 800ed24:	bf0c      	ite	eq
 800ed26:	2300      	moveq	r3, #0
 800ed28:	f003 0301 	andne.w	r3, r3, #1
 800ed2c:	4282      	cmp	r2, r0
 800ed2e:	bf0c      	ite	eq
 800ed30:	2300      	moveq	r3, #0
 800ed32:	f003 0301 	andne.w	r3, r3, #1
 800ed36:	428a      	cmp	r2, r1
 800ed38:	bf0c      	ite	eq
 800ed3a:	2300      	moveq	r3, #0
 800ed3c:	f003 0301 	andne.w	r3, r3, #1
 800ed40:	b11b      	cbz	r3, 800ed4a <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800ed42:	4b5c      	ldr	r3, [pc, #368]	; (800eeb4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 800ed44:	429a      	cmp	r2, r3
 800ed46:	f040 808c 	bne.w	800ee62 <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ed4a:	682b      	ldr	r3, [r5, #0]
 800ed4c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800ed50:	2b40      	cmp	r3, #64	; 0x40
 800ed52:	d002      	beq.n	800ed5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	f040 808a 	bne.w	800ee6e <HAL_TIMEx_MasterConfigSynchronization+0x186>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ed5a:	68ab      	ldr	r3, [r5, #8]
 800ed5c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ed60:	d173      	bne.n	800ee4a <HAL_TIMEx_MasterConfigSynchronization+0x162>

  /* Check input state */
  __HAL_LOCK(htim);
 800ed62:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	d078      	beq.n	800ee5c <HAL_TIMEx_MasterConfigSynchronization+0x174>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ed6a:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 800ed6c:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed6e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 800eea0 <HAL_TIMEx_MasterConfigSynchronization+0x1b8>
  htim->State = HAL_TIM_STATE_BUSY;
 800ed72:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed74:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800eeb4 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 800ed78:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed7c:	eba2 0009 	sub.w	r0, r2, r9
 800ed80:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 800ed84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed88:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 800ed8c:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed8e:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 800ed92:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ed94:	0940      	lsrs	r0, r0, #5
 800ed96:	0949      	lsrs	r1, r1, #5
 800ed98:	ea50 0301 	orrs.w	r3, r0, r1
 800ed9c:	d135      	bne.n	800ee0a <HAL_TIMEx_MasterConfigSynchronization+0x122>
 800ed9e:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eda0:	430b      	orrs	r3, r1
 800eda2:	4845      	ldr	r0, [pc, #276]	; (800eeb8 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 800eda4:	493f      	ldr	r1, [pc, #252]	; (800eea4 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800eda6:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edaa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800edae:	bf08      	it	eq
 800edb0:	f043 0301 	orreq.w	r3, r3, #1
 800edb4:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800eea8 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>
 800edb8:	4282      	cmp	r2, r0
 800edba:	bf08      	it	eq
 800edbc:	f043 0301 	orreq.w	r3, r3, #1
 800edc0:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800edc4:	428a      	cmp	r2, r1
 800edc6:	bf08      	it	eq
 800edc8:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800edcc:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edce:	4562      	cmp	r2, ip
 800edd0:	bf08      	it	eq
 800edd2:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800edd6:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edd8:	4282      	cmp	r2, r0
 800edda:	bf08      	it	eq
 800eddc:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 800ede0:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ede2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ede6:	d102      	bne.n	800edee <HAL_TIMEx_MasterConfigSynchronization+0x106>
 800ede8:	4b34      	ldr	r3, [pc, #208]	; (800eebc <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 800edea:	429a      	cmp	r2, r3
 800edec:	d104      	bne.n	800edf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edee:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800edf0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800edf4:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800edf6:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800edf8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800edfa:	2201      	movs	r2, #1

  return HAL_OK;
 800edfc:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 800edfe:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ee02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ee06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800ee0a:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800ee0e:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 800ee12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee16:	bf18      	it	ne
 800ee18:	2b00      	cmpne	r3, #0
 800ee1a:	bf14      	ite	ne
 800ee1c:	f04f 0c01 	movne.w	ip, #1
 800ee20:	f04f 0c00 	moveq.w	ip, #0
 800ee24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee28:	bf0c      	ite	eq
 800ee2a:	f04f 0c00 	moveq.w	ip, #0
 800ee2e:	f00c 0c01 	andne.w	ip, ip, #1
 800ee32:	f1bc 0f00 	cmp.w	ip, #0
 800ee36:	d002      	beq.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0x156>
 800ee38:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800ee3c:	d11d      	bne.n	800ee7a <HAL_TIMEx_MasterConfigSynchronization+0x192>
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ee3e:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ee42:	4603      	mov	r3, r0
 800ee44:	ea47 070e 	orr.w	r7, r7, lr
 800ee48:	e7aa      	b.n	800eda0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800ee4a:	f44f 61cd 	mov.w	r1, #1640	; 0x668
 800ee4e:	481c      	ldr	r0, [pc, #112]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800ee50:	f7f4 fe6a 	bl	8003b28 <assert_failed>
  __HAL_LOCK(htim);
 800ee54:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d186      	bne.n	800ed6a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ee5c:	2002      	movs	r0, #2
}
 800ee5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800ee62:	f240 6166 	movw	r1, #1638	; 0x666
 800ee66:	4816      	ldr	r0, [pc, #88]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800ee68:	f7f4 fe5e 	bl	8003b28 <assert_failed>
 800ee6c:	e76d      	b.n	800ed4a <HAL_TIMEx_MasterConfigSynchronization+0x62>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800ee6e:	f240 6167 	movw	r1, #1639	; 0x667
 800ee72:	4813      	ldr	r0, [pc, #76]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800ee74:	f7f4 fe58 	bl	8003b28 <assert_failed>
 800ee78:	e76f      	b.n	800ed5a <HAL_TIMEx_MasterConfigSynchronization+0x72>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 800ee7a:	f240 617a 	movw	r1, #1658	; 0x67a
 800ee7e:	4810      	ldr	r0, [pc, #64]	; (800eec0 <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 800ee80:	f7f4 fe52 	bl	8003b28 <assert_failed>
 800ee84:	6822      	ldr	r2, [r4, #0]
 800ee86:	f8d5 e004 	ldr.w	lr, [r5, #4]
 800ee8a:	eba2 0309 	sub.w	r3, r2, r9
 800ee8e:	eba2 0c08 	sub.w	ip, r2, r8
 800ee92:	4258      	negs	r0, r3
 800ee94:	4158      	adcs	r0, r3
 800ee96:	f1dc 0100 	rsbs	r1, ip, #0
 800ee9a:	eb41 010c 	adc.w	r1, r1, ip
 800ee9e:	e7ce      	b.n	800ee3e <HAL_TIMEx_MasterConfigSynchronization+0x156>
 800eea0:	40010000 	.word	0x40010000
 800eea4:	40000800 	.word	0x40000800
 800eea8:	40000c00 	.word	0x40000c00
 800eeac:	40001000 	.word	0x40001000
 800eeb0:	40001400 	.word	0x40001400
 800eeb4:	40010400 	.word	0x40010400
 800eeb8:	40000400 	.word	0x40000400
 800eebc:	40001800 	.word	0x40001800
 800eec0:	08027ee8 	.word	0x08027ee8

0800eec4 <HAL_TIMEx_CommutCallback>:
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop

0800eec8 <HAL_TIMEx_BreakCallback>:
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop

0800eecc <HAL_TIMEx_Break2Callback>:
 800eecc:	4770      	bx	lr
 800eece:	bf00      	nop

0800eed0 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d043      	beq.n	800ef5c <HAL_UART_DeInit+0x8c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800eed4:	6802      	ldr	r2, [r0, #0]
 800eed6:	4926      	ldr	r1, [pc, #152]	; (800ef70 <HAL_UART_DeInit+0xa0>)
{
 800eed8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800eeda:	4b26      	ldr	r3, [pc, #152]	; (800ef74 <HAL_UART_DeInit+0xa4>)
 800eedc:	4604      	mov	r4, r0
 800eede:	4826      	ldr	r0, [pc, #152]	; (800ef78 <HAL_UART_DeInit+0xa8>)
 800eee0:	429a      	cmp	r2, r3
 800eee2:	bf18      	it	ne
 800eee4:	428a      	cmpne	r2, r1
 800eee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800eeea:	4d24      	ldr	r5, [pc, #144]	; (800ef7c <HAL_UART_DeInit+0xac>)
 800eeec:	bf14      	ite	ne
 800eeee:	2301      	movne	r3, #1
 800eef0:	2300      	moveq	r3, #0
 800eef2:	4282      	cmp	r2, r0
 800eef4:	bf0c      	ite	eq
 800eef6:	2300      	moveq	r3, #0
 800eef8:	f003 0301 	andne.w	r3, r3, #1
 800eefc:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800ef00:	428a      	cmp	r2, r1
 800ef02:	bf0c      	ite	eq
 800ef04:	2300      	moveq	r3, #0
 800ef06:	f003 0301 	andne.w	r3, r3, #1
 800ef0a:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800ef0e:	42aa      	cmp	r2, r5
 800ef10:	bf0c      	ite	eq
 800ef12:	2300      	moveq	r3, #0
 800ef14:	f003 0301 	andne.w	r3, r3, #1
 800ef18:	4282      	cmp	r2, r0
 800ef1a:	bf0c      	ite	eq
 800ef1c:	2300      	moveq	r3, #0
 800ef1e:	f003 0301 	andne.w	r3, r3, #1
 800ef22:	428a      	cmp	r2, r1
 800ef24:	bf0c      	ite	eq
 800ef26:	2300      	moveq	r3, #0
 800ef28:	f003 0301 	andne.w	r3, r3, #1
 800ef2c:	b113      	cbz	r3, 800ef34 <HAL_UART_DeInit+0x64>
 800ef2e:	4b14      	ldr	r3, [pc, #80]	; (800ef80 <HAL_UART_DeInit+0xb0>)
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d115      	bne.n	800ef60 <HAL_UART_DeInit+0x90>

  huart->gState = HAL_UART_STATE_BUSY;
 800ef34:	2324      	movs	r3, #36	; 0x24

  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 800ef36:	2500      	movs	r5, #0
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ef38:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800ef3a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800ef3c:	6813      	ldr	r3, [r2, #0]
 800ef3e:	f023 0301 	bic.w	r3, r3, #1
 800ef42:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 800ef44:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 800ef46:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 800ef48:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 800ef4a:	f7f6 fa23 	bl	8005394 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef4e:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 800ef50:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800ef52:	6765      	str	r5, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800ef54:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_RESET;
 800ef58:	67a5      	str	r5, [r4, #120]	; 0x78
}
 800ef5a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ef5c:	2001      	movs	r0, #1
}
 800ef5e:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 800ef60:	f240 2165 	movw	r1, #613	; 0x265
 800ef64:	4807      	ldr	r0, [pc, #28]	; (800ef84 <HAL_UART_DeInit+0xb4>)
 800ef66:	f7f4 fddf 	bl	8003b28 <assert_failed>
 800ef6a:	6822      	ldr	r2, [r4, #0]
 800ef6c:	e7e2      	b.n	800ef34 <HAL_UART_DeInit+0x64>
 800ef6e:	bf00      	nop
 800ef70:	40004400 	.word	0x40004400
 800ef74:	40011000 	.word	0x40011000
 800ef78:	40004800 	.word	0x40004800
 800ef7c:	40005000 	.word	0x40005000
 800ef80:	40007c00 	.word	0x40007c00
 800ef84:	08027f24 	.word	0x08027f24

0800ef88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ef8a:	6f47      	ldr	r7, [r0, #116]	; 0x74
 800ef8c:	2f20      	cmp	r7, #32
 800ef8e:	d13e      	bne.n	800f00e <HAL_UART_Transmit_DMA+0x86>
  {
    if ((pData == NULL) || (Size == 0U))
 800ef90:	2900      	cmp	r1, #0
 800ef92:	d03a      	beq.n	800f00a <HAL_UART_Transmit_DMA+0x82>
 800ef94:	fab2 f682 	clz	r6, r2
 800ef98:	0976      	lsrs	r6, r6, #5
 800ef9a:	2a00      	cmp	r2, #0
 800ef9c:	d035      	beq.n	800f00a <HAL_UART_Transmit_DMA+0x82>
 800ef9e:	4604      	mov	r4, r0
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800efa0:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
 800efa4:	2801      	cmp	r0, #1
 800efa6:	d032      	beq.n	800f00e <HAL_UART_Transmit_DMA+0x86>
 800efa8:	2501      	movs	r5, #1
    huart->pTxBuffPtr  = pData;
    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efaa:	f04f 0c21 	mov.w	ip, #33	; 0x21

    if (huart->hdmatx != NULL)
 800efae:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 800efb0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 800efb4:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800efb6:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->TxXferSize  = Size;
 800efb8:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 800efbc:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800efc0:	f8c4 c074 	str.w	ip, [r4, #116]	; 0x74
    if (huart->hdmatx != NULL)
 800efc4:	b1b0      	cbz	r0, 800eff4 <HAL_UART_Transmit_DMA+0x6c>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800efc6:	f8df c050 	ldr.w	ip, [pc, #80]	; 800f018 <HAL_UART_Transmit_DMA+0x90>

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efca:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800efcc:	4a11      	ldr	r2, [pc, #68]	; (800f014 <HAL_UART_Transmit_DMA+0x8c>)
      huart->hdmatx->XferAbortCallback = NULL;
 800efce:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800efd0:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efd4:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800efd6:	f8df c044 	ldr.w	ip, [pc, #68]	; 800f01c <HAL_UART_Transmit_DMA+0x94>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efda:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800efdc:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800efe0:	f7f8 fb2c 	bl	800763c <HAL_DMA_Start_IT>
 800efe4:	b130      	cbz	r0, 800eff4 <HAL_UART_Transmit_DMA+0x6c>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efe6:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 800efe8:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 800efea:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efee:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800eff0:	6767      	str	r7, [r4, #116]	; 0x74
  }
  else
  {
    return HAL_BUSY;
  }
}
 800eff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800eff4:	6823      	ldr	r3, [r4, #0]
 800eff6:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800eff8:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800effa:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800effc:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f000:	689a      	ldr	r2, [r3, #8]
 800f002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f006:	609a      	str	r2, [r3, #8]
}
 800f008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800f00a:	2001      	movs	r0, #1
}
 800f00c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800f00e:	2002      	movs	r0, #2
}
 800f010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f012:	bf00      	nop
 800f014:	0800f185 	.word	0x0800f185
 800f018:	0800f155 	.word	0x0800f155
 800f01c:	0800f1d9 	.word	0x0800f1d9

0800f020 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f022:	6f87      	ldr	r7, [r0, #120]	; 0x78
 800f024:	2f20      	cmp	r7, #32
 800f026:	d142      	bne.n	800f0ae <HAL_UART_Receive_DMA+0x8e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f028:	2900      	cmp	r1, #0
 800f02a:	d03e      	beq.n	800f0aa <HAL_UART_Receive_DMA+0x8a>
 800f02c:	fab2 f682 	clz	r6, r2
 800f030:	0976      	lsrs	r6, r6, #5
 800f032:	2a00      	cmp	r2, #0
 800f034:	d039      	beq.n	800f0aa <HAL_UART_Receive_DMA+0x8a>
    {
      return HAL_ERROR;
    }

    __HAL_LOCK(huart);
 800f036:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800f03a:	4604      	mov	r4, r0
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d036      	beq.n	800f0ae <HAL_UART_Receive_DMA+0x8e>
    huart->RxXferSize = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    if (huart->hdmarx != NULL)
 800f040:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    __HAL_LOCK(huart);
 800f042:	2501      	movs	r5, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f044:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f046:	67e6      	str	r6, [r4, #124]	; 0x7c
    huart->pRxBuffPtr = pData;
 800f048:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 800f04a:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    __HAL_LOCK(huart);
 800f04e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f052:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmarx != NULL)
 800f054:	b1c0      	cbz	r0, 800f088 <HAL_UART_Receive_DMA+0x68>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f056:	f8df c05c 	ldr.w	ip, [pc, #92]	; 800f0b4 <HAL_UART_Receive_DMA+0x94>

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f05a:	4613      	mov	r3, r2
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f05c:	f8df e058 	ldr.w	lr, [pc, #88]	; 800f0b8 <HAL_UART_Receive_DMA+0x98>
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f060:	460a      	mov	r2, r1
 800f062:	6821      	ldr	r1, [r4, #0]
      huart->hdmarx->XferAbortCallback = NULL;
 800f064:	6506      	str	r6, [r0, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f066:	3124      	adds	r1, #36	; 0x24
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f068:	e9c0 ec0f 	strd	lr, ip, [r0, #60]	; 0x3c
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f06c:	f8df c04c 	ldr.w	ip, [pc, #76]	; 800f0bc <HAL_UART_Receive_DMA+0x9c>
 800f070:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f074:	f7f8 fae2 	bl	800763c <HAL_DMA_Start_IT>
 800f078:	b130      	cbz	r0, 800f088 <HAL_UART_Receive_DMA+0x68>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f07a:	2310      	movs	r3, #16
        __HAL_UNLOCK(huart);

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;

        return HAL_ERROR;
 800f07c:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 800f07e:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f082:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800f084:	6767      	str	r7, [r4, #116]	; 0x74
  }
  else
  {
    return HAL_BUSY;
  }
}
 800f086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f088:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 800f08a:	2000      	movs	r0, #0
 800f08c:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f090:	681a      	ldr	r2, [r3, #0]
 800f092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f096:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f098:	689a      	ldr	r2, [r3, #8]
 800f09a:	f042 0201 	orr.w	r2, r2, #1
 800f09e:	609a      	str	r2, [r3, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0a0:	689a      	ldr	r2, [r3, #8]
 800f0a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f0a6:	609a      	str	r2, [r3, #8]
}
 800f0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800f0aa:	2001      	movs	r0, #1
}
 800f0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800f0ae:	2002      	movs	r0, #2
}
 800f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0b2:	bf00      	nop
 800f0b4:	0800f1cd 	.word	0x0800f1cd
 800f0b8:	0800f191 	.word	0x0800f191
 800f0bc:	0800f1d9 	.word	0x0800f1d9

0800f0c0 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f0c0:	b538      	push	{r3, r4, r5, lr}
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f0c2:	6803      	ldr	r3, [r0, #0]
{
 800f0c4:	4604      	mov	r4, r0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800f0cc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0ce:	689a      	ldr	r2, [r3, #8]
 800f0d0:	f022 0201 	bic.w	r2, r2, #1
 800f0d4:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f0d6:	689a      	ldr	r2, [r3, #8]
 800f0d8:	0611      	lsls	r1, r2, #24
 800f0da:	d50b      	bpl.n	800f0f4 <HAL_UART_Abort+0x34>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f0dc:	689a      	ldr	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f0de:	6e80      	ldr	r0, [r0, #104]	; 0x68
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f0e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f0e4:	609a      	str	r2, [r3, #8]
    if (huart->hdmatx != NULL)
 800f0e6:	b128      	cbz	r0, 800f0f4 <HAL_UART_Abort+0x34>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	6503      	str	r3, [r0, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f0ec:	f7f8 fb02 	bl	80076f4 <HAL_DMA_Abort>
 800f0f0:	bb00      	cbnz	r0, 800f134 <HAL_UART_Abort+0x74>
 800f0f2:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f0f4:	689a      	ldr	r2, [r3, #8]
 800f0f6:	0652      	lsls	r2, r2, #25
 800f0f8:	d50b      	bpl.n	800f112 <HAL_UART_Abort+0x52>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0fa:	689a      	ldr	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f0fc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f102:	609a      	str	r2, [r3, #8]
    if (huart->hdmarx != NULL)
 800f104:	b128      	cbz	r0, 800f112 <HAL_UART_Abort+0x52>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f106:	2300      	movs	r3, #0
 800f108:	6503      	str	r3, [r0, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f10a:	f7f8 faf3 	bl	80076f4 <HAL_DMA_Abort>
 800f10e:	b9d0      	cbnz	r0, 800f146 <HAL_UART_Abort+0x86>
 800f110:	6823      	ldr	r3, [r4, #0]
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800f112:	2200      	movs	r2, #0
  huart->RxXferCount = 0U;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f114:	210f      	movs	r1, #15

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800f116:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 800f118:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
  huart->RxState = HAL_UART_STATE_READY;

  huart->ErrorCode = HAL_UART_ERROR_NONE;

  return HAL_OK;
 800f11c:	4610      	mov	r0, r2
  huart->RxXferCount = 0U;
 800f11e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800f122:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f124:	6999      	ldr	r1, [r3, #24]
 800f126:	f041 0108 	orr.w	r1, r1, #8
 800f12a:	6199      	str	r1, [r3, #24]
  huart->gState  = HAL_UART_STATE_READY;
 800f12c:	6765      	str	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800f12e:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f130:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 800f132:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f134:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800f136:	f7f8 fc29 	bl	800798c <HAL_DMA_GetError>
 800f13a:	2820      	cmp	r0, #32
 800f13c:	d1d9      	bne.n	800f0f2 <HAL_UART_Abort+0x32>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f13e:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 800f140:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f142:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 800f144:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f146:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f148:	f7f8 fc20 	bl	800798c <HAL_DMA_GetError>
 800f14c:	2820      	cmp	r0, #32
 800f14e:	d1df      	bne.n	800f110 <HAL_UART_Abort+0x50>
 800f150:	e7f5      	b.n	800f13e <HAL_UART_Abort+0x7e>
 800f152:	bf00      	nop

0800f154 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f154:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f156:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f158:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f15a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f15e:	d00c      	beq.n	800f17a <UART_DMATransmitCplt+0x26>
  {
    huart->TxXferCount = 0U;

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f160:	6803      	ldr	r3, [r0, #0]
    huart->TxXferCount = 0U;
 800f162:	2200      	movs	r2, #0
 800f164:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f168:	689a      	ldr	r2, [r3, #8]
 800f16a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f16e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f176:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f178:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800f17a:	f7f1 ff61 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 800f17e:	bd08      	pop	{r3, pc}

0800f180 <HAL_UART_TxHalfCpltCallback>:
 800f180:	4770      	bx	lr
 800f182:	bf00      	nop

0800f184 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f184:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f186:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800f188:	f7ff fffa 	bl	800f180 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f18c:	bd08      	pop	{r3, pc}
 800f18e:	bf00      	nop

0800f190 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f190:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f192:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f194:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f19a:	d011      	beq.n	800f1c0 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f19c:	6803      	ldr	r3, [r0, #0]
    huart->RxXferCount = 0U;
 800f19e:	2200      	movs	r2, #0
    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f1a0:	2120      	movs	r1, #32
    huart->RxXferCount = 0U;
 800f1a2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f1ac:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1ae:	689a      	ldr	r2, [r3, #8]
 800f1b0:	f022 0201 	bic.w	r2, r2, #1
 800f1b4:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1b6:	689a      	ldr	r2, [r3, #8]
 800f1b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f1bc:	609a      	str	r2, [r3, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800f1be:	6781      	str	r1, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800f1c0:	f7f4 fe18 	bl	8003df4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1c4:	bd08      	pop	{r3, pc}
 800f1c6:	bf00      	nop

0800f1c8 <HAL_UART_RxHalfCpltCallback>:
 800f1c8:	4770      	bx	lr
 800f1ca:	bf00      	nop

0800f1cc <UART_DMARxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800f1cc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800f1ce:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800f1d0:	f7ff fffa 	bl	800f1c8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1d4:	bd08      	pop	{r3, pc}
 800f1d6:	bf00      	nop

0800f1d8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f1d8:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f1da:	6803      	ldr	r3, [r0, #0]
{
 800f1dc:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f1de:	6f44      	ldr	r4, [r0, #116]	; 0x74
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f1e0:	6f81      	ldr	r1, [r0, #120]	; 0x78
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f1e2:	689a      	ldr	r2, [r3, #8]
 800f1e4:	0612      	lsls	r2, r2, #24
 800f1e6:	d501      	bpl.n	800f1ec <UART_DMAError+0x14>
 800f1e8:	2c21      	cmp	r4, #33	; 0x21
 800f1ea:	d01a      	beq.n	800f222 <UART_DMAError+0x4a>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f1ec:	689a      	ldr	r2, [r3, #8]
 800f1ee:	0652      	lsls	r2, r2, #25
 800f1f0:	d501      	bpl.n	800f1f6 <UART_DMAError+0x1e>
 800f1f2:	2922      	cmp	r1, #34	; 0x22
 800f1f4:	d006      	beq.n	800f204 <UART_DMAError+0x2c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f1f6:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f1f8:	f043 0310 	orr.w	r3, r3, #16
 800f1fc:	67c3      	str	r3, [r0, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1fe:	f7f4 fe3f 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f202:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800f204:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_READY;
 800f206:	2420      	movs	r4, #32
    huart->RxXferCount = 0U;
 800f208:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800f212:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f214:	689a      	ldr	r2, [r3, #8]
 800f216:	f022 0201 	bic.w	r2, r2, #1
 800f21a:	609a      	str	r2, [r3, #8]
  huart->RxISR = NULL;
 800f21c:	6601      	str	r1, [r0, #96]	; 0x60
  huart->RxState = HAL_UART_STATE_READY;
 800f21e:	6784      	str	r4, [r0, #120]	; 0x78
}
 800f220:	e7e9      	b.n	800f1f6 <UART_DMAError+0x1e>
    huart->TxXferCount = 0U;
 800f222:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800f224:	2420      	movs	r4, #32
    huart->TxXferCount = 0U;
 800f226:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f22a:	681a      	ldr	r2, [r3, #0]
 800f22c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800f230:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f232:	6744      	str	r4, [r0, #116]	; 0x74
}
 800f234:	e7da      	b.n	800f1ec <UART_DMAError+0x14>
 800f236:	bf00      	nop

0800f238 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f238:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f23a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800f23c:	2300      	movs	r3, #0
 800f23e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800f242:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f246:	f7f4 fe1b 	bl	8003e80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f24a:	bd08      	pop	{r3, pc}

0800f24c <HAL_UARTEx_WakeupCallback>:
}
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop

0800f250 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f250:	6802      	ldr	r2, [r0, #0]
{
 800f252:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f254:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f256:	f640 050f 	movw	r5, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f25a:	6811      	ldr	r1, [r2, #0]
{
 800f25c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800f25e:	422b      	tst	r3, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f260:	6896      	ldr	r6, [r2, #8]
  if (errorflags == 0U)
 800f262:	d11a      	bne.n	800f29a <HAL_UART_IRQHandler+0x4a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f264:	069d      	lsls	r5, r3, #26
 800f266:	d502      	bpl.n	800f26e <HAL_UART_IRQHandler+0x1e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f268:	068d      	lsls	r5, r1, #26
 800f26a:	f100 8082 	bmi.w	800f372 <HAL_UART_IRQHandler+0x122>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f26e:	02dd      	lsls	r5, r3, #11
 800f270:	d502      	bpl.n	800f278 <HAL_UART_IRQHandler+0x28>
 800f272:	0270      	lsls	r0, r6, #9
 800f274:	f100 8081 	bmi.w	800f37a <HAL_UART_IRQHandler+0x12a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800f278:	061e      	lsls	r6, r3, #24
 800f27a:	d405      	bmi.n	800f288 <HAL_UART_IRQHandler+0x38>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f27c:	0658      	lsls	r0, r3, #25
 800f27e:	d502      	bpl.n	800f286 <HAL_UART_IRQHandler+0x36>
 800f280:	064b      	lsls	r3, r1, #25
 800f282:	f100 8085 	bmi.w	800f390 <HAL_UART_IRQHandler+0x140>
}
 800f286:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800f288:	060d      	lsls	r5, r1, #24
 800f28a:	d5f7      	bpl.n	800f27c <HAL_UART_IRQHandler+0x2c>
    if (huart->TxISR != NULL)
 800f28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d0f9      	beq.n	800f286 <HAL_UART_IRQHandler+0x36>
      huart->TxISR(huart);
 800f292:	4620      	mov	r0, r4
}
 800f294:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 800f298:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f29a:	f006 0001 	and.w	r0, r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800f29e:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800f2a2:	4305      	orrs	r5, r0
 800f2a4:	d0e3      	beq.n	800f26e <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2a6:	07de      	lsls	r6, r3, #31
 800f2a8:	d507      	bpl.n	800f2ba <HAL_UART_IRQHandler+0x6a>
 800f2aa:	05cd      	lsls	r5, r1, #23
 800f2ac:	d505      	bpl.n	800f2ba <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2ae:	2501      	movs	r5, #1
 800f2b0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2b2:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f2b4:	f045 0501 	orr.w	r5, r5, #1
 800f2b8:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2ba:	079e      	lsls	r6, r3, #30
 800f2bc:	d54e      	bpl.n	800f35c <HAL_UART_IRQHandler+0x10c>
 800f2be:	b138      	cbz	r0, 800f2d0 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2c0:	2502      	movs	r5, #2
 800f2c2:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f2c4:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f2c6:	f045 0504 	orr.w	r5, r5, #4
 800f2ca:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2cc:	075d      	lsls	r5, r3, #29
 800f2ce:	d449      	bmi.n	800f364 <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f2d0:	071d      	lsls	r5, r3, #28
 800f2d2:	d509      	bpl.n	800f2e8 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800f2d4:	f001 0520 	and.w	r5, r1, #32
 800f2d8:	4328      	orrs	r0, r5
 800f2da:	d005      	beq.n	800f2e8 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2dc:	2008      	movs	r0, #8
 800f2de:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f2e0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f2e2:	f040 0008 	orr.w	r0, r0, #8
 800f2e6:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f2e8:	051e      	lsls	r6, r3, #20
 800f2ea:	d508      	bpl.n	800f2fe <HAL_UART_IRQHandler+0xae>
 800f2ec:	014d      	lsls	r5, r1, #5
 800f2ee:	d506      	bpl.n	800f2fe <HAL_UART_IRQHandler+0xae>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f2f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f2f4:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f2f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f2f8:	f040 0020 	orr.w	r0, r0, #32
 800f2fc:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f2fe:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f300:	2800      	cmp	r0, #0
 800f302:	d0c0      	beq.n	800f286 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800f304:	0698      	lsls	r0, r3, #26
 800f306:	d501      	bpl.n	800f30c <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f308:	068b      	lsls	r3, r1, #26
 800f30a:	d44d      	bmi.n	800f3a8 <HAL_UART_IRQHandler+0x158>
      errorcode = huart->ErrorCode;
 800f30c:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f30e:	6893      	ldr	r3, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f310:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f318:	431d      	orrs	r5, r3
 800f31a:	d04c      	beq.n	800f3b6 <HAL_UART_IRQHandler+0x166>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f31c:	6813      	ldr	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 800f31e:	2020      	movs	r0, #32
  huart->RxISR = NULL;
 800f320:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f326:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f328:	6893      	ldr	r3, [r2, #8]
 800f32a:	f023 0301 	bic.w	r3, r3, #1
 800f32e:	6093      	str	r3, [r2, #8]
  huart->RxState = HAL_UART_STATE_READY;
 800f330:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f332:	6893      	ldr	r3, [r2, #8]
  huart->RxISR = NULL;
 800f334:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f336:	065e      	lsls	r6, r3, #25
 800f338:	d526      	bpl.n	800f388 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f33a:	6893      	ldr	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800f33c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f33e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f342:	6093      	str	r3, [r2, #8]
          if (huart->hdmarx != NULL)
 800f344:	b300      	cbz	r0, 800f388 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f346:	4b1e      	ldr	r3, [pc, #120]	; (800f3c0 <HAL_UART_IRQHandler+0x170>)
 800f348:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f34a:	f7f8 fa1b 	bl	8007784 <HAL_DMA_Abort_IT>
 800f34e:	2800      	cmp	r0, #0
 800f350:	d099      	beq.n	800f286 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f352:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 800f354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f358:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f35a:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f35c:	075e      	lsls	r6, r3, #29
 800f35e:	d5b7      	bpl.n	800f2d0 <HAL_UART_IRQHandler+0x80>
 800f360:	2800      	cmp	r0, #0
 800f362:	d0b5      	beq.n	800f2d0 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f364:	2504      	movs	r5, #4
 800f366:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f368:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800f36a:	f045 0502 	orr.w	r5, r5, #2
 800f36e:	67e5      	str	r5, [r4, #124]	; 0x7c
 800f370:	e7ae      	b.n	800f2d0 <HAL_UART_IRQHandler+0x80>
      if (huart->RxISR != NULL)
 800f372:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800f374:	2b00      	cmp	r3, #0
 800f376:	d18d      	bne.n	800f294 <HAL_UART_IRQHandler+0x44>
 800f378:	e785      	b.n	800f286 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f37a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800f37e:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f380:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800f382:	f7ff ff63 	bl	800f24c <HAL_UARTEx_WakeupCallback>
}
 800f386:	bd70      	pop	{r4, r5, r6, pc}
            HAL_UART_ErrorCallback(huart);
 800f388:	4620      	mov	r0, r4
 800f38a:	f7f4 fd79 	bl	8003e80 <HAL_UART_ErrorCallback>
}
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f390:	6813      	ldr	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f392:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f394:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f396:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f39c:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800f39e:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800f3a0:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 800f3a2:	f7f1 fe4d 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 800f3a8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0ae      	beq.n	800f30c <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	4798      	blx	r3
 800f3b2:	6822      	ldr	r2, [r4, #0]
 800f3b4:	e7aa      	b.n	800f30c <HAL_UART_IRQHandler+0xbc>
        HAL_UART_ErrorCallback(huart);
 800f3b6:	4620      	mov	r0, r4
 800f3b8:	f7f4 fd62 	bl	8003e80 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3bc:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 800f3be:	bd70      	pop	{r4, r5, r6, pc}
 800f3c0:	0800f239 	.word	0x0800f239

0800f3c4 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f3c4:	4bbc      	ldr	r3, [pc, #752]	; (800f6b8 <UART_SetConfig+0x2f4>)
 800f3c6:	6842      	ldr	r2, [r0, #4]
 800f3c8:	429a      	cmp	r2, r3
{
 800f3ca:	b570      	push	{r4, r5, r6, lr}
 800f3cc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f3ce:	f200 80de 	bhi.w	800f58e <UART_SetConfig+0x1ca>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f3d2:	68a3      	ldr	r3, [r4, #8]
 800f3d4:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 800f3d8:	d002      	beq.n	800f3e0 <UART_SetConfig+0x1c>
 800f3da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3de:	d17e      	bne.n	800f4de <UART_SetConfig+0x11a>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f3e0:	68e3      	ldr	r3, [r4, #12]
 800f3e2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f3e6:	f040 8084 	bne.w	800f4f2 <UART_SetConfig+0x12e>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800f3ea:	6a23      	ldr	r3, [r4, #32]
 800f3ec:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800f3f0:	f040 8089 	bne.w	800f506 <UART_SetConfig+0x142>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f3f4:	6923      	ldr	r3, [r4, #16]
 800f3f6:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800f3fa:	d002      	beq.n	800f402 <UART_SetConfig+0x3e>
 800f3fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f400:	d167      	bne.n	800f4d2 <UART_SetConfig+0x10e>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f402:	6963      	ldr	r3, [r4, #20]
 800f404:	f033 020c 	bics.w	r2, r3, #12
 800f408:	d14a      	bne.n	800f4a0 <UART_SetConfig+0xdc>
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d048      	beq.n	800f4a0 <UART_SetConfig+0xdc>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f40e:	69a3      	ldr	r3, [r4, #24]
 800f410:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800f414:	d14d      	bne.n	800f4b2 <UART_SetConfig+0xee>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800f416:	69e0      	ldr	r0, [r4, #28]
 800f418:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800f41c:	d152      	bne.n	800f4c4 <UART_SetConfig+0x100>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f41e:	6823      	ldr	r3, [r4, #0]
 800f420:	6921      	ldr	r1, [r4, #16]
 800f422:	68a2      	ldr	r2, [r4, #8]
 800f424:	681e      	ldr	r6, [r3, #0]
 800f426:	430a      	orrs	r2, r1
 800f428:	4da4      	ldr	r5, [pc, #656]	; (800f6bc <UART_SetConfig+0x2f8>)
 800f42a:	6961      	ldr	r1, [r4, #20]
 800f42c:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f42e:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f430:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f432:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f434:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800f436:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f438:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 800f43a:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f43c:	4da0      	ldr	r5, [pc, #640]	; (800f6c0 <UART_SetConfig+0x2fc>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f43e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f440:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f442:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f444:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800f448:	ea42 0206 	orr.w	r2, r2, r6
 800f44c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f44e:	689a      	ldr	r2, [r3, #8]
 800f450:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800f454:	ea41 0102 	orr.w	r1, r1, r2
 800f458:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f45a:	f000 809e 	beq.w	800f59a <UART_SetConfig+0x1d6>
 800f45e:	4a99      	ldr	r2, [pc, #612]	; (800f6c4 <UART_SetConfig+0x300>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d056      	beq.n	800f512 <UART_SetConfig+0x14e>
 800f464:	4a98      	ldr	r2, [pc, #608]	; (800f6c8 <UART_SetConfig+0x304>)
 800f466:	4293      	cmp	r3, r2
 800f468:	f000 814c 	beq.w	800f704 <UART_SetConfig+0x340>
 800f46c:	4a97      	ldr	r2, [pc, #604]	; (800f6cc <UART_SetConfig+0x308>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	f000 815a 	beq.w	800f728 <UART_SetConfig+0x364>
 800f474:	4a96      	ldr	r2, [pc, #600]	; (800f6d0 <UART_SetConfig+0x30c>)
 800f476:	4293      	cmp	r3, r2
 800f478:	f000 80bb 	beq.w	800f5f2 <UART_SetConfig+0x22e>
 800f47c:	4a95      	ldr	r2, [pc, #596]	; (800f6d4 <UART_SetConfig+0x310>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	f000 80d3 	beq.w	800f62a <UART_SetConfig+0x266>
 800f484:	4a94      	ldr	r2, [pc, #592]	; (800f6d8 <UART_SetConfig+0x314>)
 800f486:	4293      	cmp	r3, r2
 800f488:	f000 8181 	beq.w	800f78e <UART_SetConfig+0x3ca>
 800f48c:	4a93      	ldr	r2, [pc, #588]	; (800f6dc <UART_SetConfig+0x318>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	f000 816a 	beq.w	800f768 <UART_SetConfig+0x3a4>
 800f494:	2101      	movs	r1, #1
  huart->RxISR = NULL;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4608      	mov	r0, r1
  huart->TxISR = NULL;
 800f49a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800f49e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800f4a0:	f640 21c4 	movw	r1, #2756	; 0xac4
 800f4a4:	488e      	ldr	r0, [pc, #568]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4a6:	f7f4 fb3f 	bl	8003b28 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800f4aa:	69a3      	ldr	r3, [r4, #24]
 800f4ac:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 800f4b0:	d0b1      	beq.n	800f416 <UART_SetConfig+0x52>
 800f4b2:	488b      	ldr	r0, [pc, #556]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4b4:	f640 21c5 	movw	r1, #2757	; 0xac5
 800f4b8:	f7f4 fb36 	bl	8003b28 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800f4bc:	69e0      	ldr	r0, [r4, #28]
 800f4be:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 800f4c2:	d0ac      	beq.n	800f41e <UART_SetConfig+0x5a>
 800f4c4:	4886      	ldr	r0, [pc, #536]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4c6:	f640 21c6 	movw	r1, #2758	; 0xac6
 800f4ca:	f7f4 fb2d 	bl	8003b28 <assert_failed>
 800f4ce:	69e0      	ldr	r0, [r4, #28]
 800f4d0:	e7a5      	b.n	800f41e <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800f4d2:	f640 21c3 	movw	r1, #2755	; 0xac3
 800f4d6:	4882      	ldr	r0, [pc, #520]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4d8:	f7f4 fb26 	bl	8003b28 <assert_failed>
 800f4dc:	e791      	b.n	800f402 <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800f4de:	f640 21bf 	movw	r1, #2751	; 0xabf
 800f4e2:	487f      	ldr	r0, [pc, #508]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4e4:	f7f4 fb20 	bl	8003b28 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800f4e8:	68e3      	ldr	r3, [r4, #12]
 800f4ea:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f4ee:	f43f af7c 	beq.w	800f3ea <UART_SetConfig+0x26>
 800f4f2:	f44f 612c 	mov.w	r1, #2752	; 0xac0
 800f4f6:	487a      	ldr	r0, [pc, #488]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f4f8:	f7f4 fb16 	bl	8003b28 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800f4fc:	6a23      	ldr	r3, [r4, #32]
 800f4fe:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800f502:	f43f af77 	beq.w	800f3f4 <UART_SetConfig+0x30>
 800f506:	f640 21c1 	movw	r1, #2753	; 0xac1
 800f50a:	4875      	ldr	r0, [pc, #468]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f50c:	f7f4 fb0c 	bl	8003b28 <assert_failed>
 800f510:	e770      	b.n	800f3f4 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f512:	4b74      	ldr	r3, [pc, #464]	; (800f6e4 <UART_SetConfig+0x320>)
 800f514:	4a74      	ldr	r2, [pc, #464]	; (800f6e8 <UART_SetConfig+0x324>)
 800f516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f51a:	f003 030c 	and.w	r3, r3, #12
 800f51e:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f520:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f524:	d016      	beq.n	800f554 <UART_SetConfig+0x190>
    switch (clocksource)
 800f526:	2b08      	cmp	r3, #8
 800f528:	d8b4      	bhi.n	800f494 <UART_SetConfig+0xd0>
 800f52a:	a201      	add	r2, pc, #4	; (adr r2, 800f530 <UART_SetConfig+0x16c>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f65d 	.word	0x0800f65d
 800f534:	0800f5b3 	.word	0x0800f5b3
 800f538:	0800f643 	.word	0x0800f643
 800f53c:	0800f495 	.word	0x0800f495
 800f540:	0800f615 	.word	0x0800f615
 800f544:	0800f495 	.word	0x0800f495
 800f548:	0800f495 	.word	0x0800f495
 800f54c:	0800f495 	.word	0x0800f495
 800f550:	0800f5c7 	.word	0x0800f5c7
    switch (clocksource)
 800f554:	2b08      	cmp	r3, #8
 800f556:	d806      	bhi.n	800f566 <UART_SetConfig+0x1a2>
 800f558:	e8df f003 	tbb	[pc, r3]
 800f55c:	0597a0ab 	.word	0x0597a0ab
 800f560:	0505058c 	.word	0x0505058c
 800f564:	83          	.byte	0x83
 800f565:	00          	.byte	0x00
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f566:	2101      	movs	r1, #1
 800f568:	2300      	movs	r3, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f56a:	f1a3 0010 	sub.w	r0, r3, #16
 800f56e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800f572:	4290      	cmp	r0, r2
 800f574:	d88e      	bhi.n	800f494 <UART_SetConfig+0xd0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f576:	f023 020f 	bic.w	r2, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f57a:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 800f57e:	6820      	ldr	r0, [r4, #0]
 800f580:	4313      	orrs	r3, r2
 800f582:	60c3      	str	r3, [r0, #12]
  huart->RxISR = NULL;
 800f584:	2300      	movs	r3, #0
}
 800f586:	4608      	mov	r0, r1
  huart->TxISR = NULL;
 800f588:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800f58c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800f58e:	f640 21be 	movw	r1, #2750	; 0xabe
 800f592:	4853      	ldr	r0, [pc, #332]	; (800f6e0 <UART_SetConfig+0x31c>)
 800f594:	f7f4 fac8 	bl	8003b28 <assert_failed>
 800f598:	e71b      	b.n	800f3d2 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f59a:	4b52      	ldr	r3, [pc, #328]	; (800f6e4 <UART_SetConfig+0x320>)
 800f59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5a0:	f003 0303 	and.w	r3, r3, #3
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	2b02      	cmp	r3, #2
 800f5a8:	f240 80a4 	bls.w	800f6f4 <UART_SetConfig+0x330>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f5b0:	d074      	beq.n	800f69c <UART_SetConfig+0x2d8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5b2:	f7fb ff77 	bl	800b4a4 <HAL_RCC_GetPCLK2Freq>
 800f5b6:	e02f      	b.n	800f618 <UART_SetConfig+0x254>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f5bc:	f47f af6a 	bne.w	800f494 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f5c4:	d04d      	beq.n	800f662 <UART_SetConfig+0x29e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800f5c6:	6862      	ldr	r2, [r4, #4]
 800f5c8:	0853      	lsrs	r3, r2, #1
 800f5ca:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5d2:	b29b      	uxth	r3, r3
        break;
 800f5d4:	f1a3 0210 	sub.w	r2, r3, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f5d8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800f5dc:	428a      	cmp	r2, r1
 800f5de:	f63f af59 	bhi.w	800f494 <UART_SetConfig+0xd0>
      huart->Instance->BRR = usartdiv;
 800f5e2:	6822      	ldr	r2, [r4, #0]
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4608      	mov	r0, r1
  huart->TxISR = NULL;
 800f5ec:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 800f5f0:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5f2:	4b3c      	ldr	r3, [pc, #240]	; (800f6e4 <UART_SetConfig+0x320>)
 800f5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f600:	d01c      	beq.n	800f63c <UART_SetConfig+0x278>
 800f602:	d87a      	bhi.n	800f6fa <UART_SetConfig+0x336>
 800f604:	b33b      	cbz	r3, 800f656 <UART_SetConfig+0x292>
 800f606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f60a:	f47f af43 	bne.w	800f494 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f60e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f612:	d02f      	beq.n	800f674 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetSysClockFreq();
 800f614:	f7fb fddc 	bl	800b1d0 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800f61e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f622:	b29b      	uxth	r3, r3
        break;
 800f624:	f1a3 0210 	sub.w	r2, r3, #16
 800f628:	e7d6      	b.n	800f5d8 <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f62a:	4b2e      	ldr	r3, [pc, #184]	; (800f6e4 <UART_SetConfig+0x320>)
 800f62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f630:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800f634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f638:	f040 8088 	bne.w	800f74c <UART_SetConfig+0x388>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f63c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f640:	d023      	beq.n	800f68a <UART_SetConfig+0x2c6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800f642:	6862      	ldr	r2, [r4, #4]
 800f644:	4b29      	ldr	r3, [pc, #164]	; (800f6ec <UART_SetConfig+0x328>)
 800f646:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f64a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f64e:	b29b      	uxth	r3, r3
        break;
 800f650:	f1a3 0210 	sub.w	r2, r3, #16
 800f654:	e7c0      	b.n	800f5d8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f656:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800f65a:	d02a      	beq.n	800f6b2 <UART_SetConfig+0x2ee>
        pclk = HAL_RCC_GetPCLK1Freq();
 800f65c:	f7fb ff12 	bl	800b484 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f660:	e7da      	b.n	800f618 <UART_SetConfig+0x254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f662:	6862      	ldr	r2, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f664:	2100      	movs	r1, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800f666:	0853      	lsrs	r3, r2, #1
 800f668:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f66c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f670:	b29b      	uxth	r3, r3
        break;
 800f672:	e77a      	b.n	800f56a <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetSysClockFreq();
 800f674:	f7fb fdac 	bl	800b1d0 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f678:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f67a:	2100      	movs	r1, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f67c:	086a      	lsrs	r2, r5, #1
 800f67e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800f682:	fbb3 f3f5 	udiv	r3, r3, r5
 800f686:	b29b      	uxth	r3, r3
        break;
 800f688:	e76f      	b.n	800f56a <UART_SetConfig+0x1a6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f68a:	6862      	ldr	r2, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f68c:	2100      	movs	r1, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800f68e:	4b18      	ldr	r3, [pc, #96]	; (800f6f0 <UART_SetConfig+0x32c>)
 800f690:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800f694:	fbb3 f3f2 	udiv	r3, r3, r2
 800f698:	b29b      	uxth	r3, r3
        break;
 800f69a:	e766      	b.n	800f56a <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 800f69c:	f7fb ff02 	bl	800b4a4 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f6a0:	6863      	ldr	r3, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 800f6a2:	2100      	movs	r1, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f6a4:	085a      	lsrs	r2, r3, #1
 800f6a6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800f6aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800f6ae:	b29b      	uxth	r3, r3
        break;
 800f6b0:	e75b      	b.n	800f56a <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800f6b2:	f7fb fee7 	bl	800b484 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f6b6:	e7f3      	b.n	800f6a0 <UART_SetConfig+0x2dc>
 800f6b8:	019bfcc0 	.word	0x019bfcc0
 800f6bc:	efff69f3 	.word	0xefff69f3
 800f6c0:	40011000 	.word	0x40011000
 800f6c4:	40004400 	.word	0x40004400
 800f6c8:	40004800 	.word	0x40004800
 800f6cc:	40004c00 	.word	0x40004c00
 800f6d0:	40005000 	.word	0x40005000
 800f6d4:	40011400 	.word	0x40011400
 800f6d8:	40007800 	.word	0x40007800
 800f6dc:	40007c00 	.word	0x40007c00
 800f6e0:	08027f24 	.word	0x08027f24
 800f6e4:	40023800 	.word	0x40023800
 800f6e8:	08027f64 	.word	0x08027f64
 800f6ec:	00f42400 	.word	0x00f42400
 800f6f0:	01e84800 	.word	0x01e84800
 800f6f4:	4a31      	ldr	r2, [pc, #196]	; (800f7bc <UART_SetConfig+0x3f8>)
 800f6f6:	5cd3      	ldrb	r3, [r2, r3]
 800f6f8:	e712      	b.n	800f520 <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f6fe:	f43f af5f 	beq.w	800f5c0 <UART_SetConfig+0x1fc>
 800f702:	e6c7      	b.n	800f494 <UART_SetConfig+0xd0>
 800f704:	4b2e      	ldr	r3, [pc, #184]	; (800f7c0 <UART_SetConfig+0x3fc>)
 800f706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f70a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f70e:	2b20      	cmp	r3, #32
 800f710:	d094      	beq.n	800f63c <UART_SetConfig+0x278>
 800f712:	d805      	bhi.n	800f720 <UART_SetConfig+0x35c>
 800f714:	2b00      	cmp	r3, #0
 800f716:	d09e      	beq.n	800f656 <UART_SetConfig+0x292>
 800f718:	2b10      	cmp	r3, #16
 800f71a:	f43f af78 	beq.w	800f60e <UART_SetConfig+0x24a>
 800f71e:	e6b9      	b.n	800f494 <UART_SetConfig+0xd0>
 800f720:	2b30      	cmp	r3, #48	; 0x30
 800f722:	f43f af4d 	beq.w	800f5c0 <UART_SetConfig+0x1fc>
 800f726:	e6b5      	b.n	800f494 <UART_SetConfig+0xd0>
 800f728:	4b25      	ldr	r3, [pc, #148]	; (800f7c0 <UART_SetConfig+0x3fc>)
 800f72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f72e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f732:	2b80      	cmp	r3, #128	; 0x80
 800f734:	d082      	beq.n	800f63c <UART_SetConfig+0x278>
 800f736:	d805      	bhi.n	800f744 <UART_SetConfig+0x380>
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d08c      	beq.n	800f656 <UART_SetConfig+0x292>
 800f73c:	2b40      	cmp	r3, #64	; 0x40
 800f73e:	f43f af66 	beq.w	800f60e <UART_SetConfig+0x24a>
 800f742:	e6a7      	b.n	800f494 <UART_SetConfig+0xd0>
 800f744:	2bc0      	cmp	r3, #192	; 0xc0
 800f746:	f43f af3b 	beq.w	800f5c0 <UART_SetConfig+0x1fc>
 800f74a:	e6a3      	b.n	800f494 <UART_SetConfig+0xd0>
 800f74c:	d807      	bhi.n	800f75e <UART_SetConfig+0x39a>
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f43f af2c 	beq.w	800f5ac <UART_SetConfig+0x1e8>
 800f754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f758:	f43f af59 	beq.w	800f60e <UART_SetConfig+0x24a>
 800f75c:	e69a      	b.n	800f494 <UART_SetConfig+0xd0>
 800f75e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800f762:	f43f af2d 	beq.w	800f5c0 <UART_SetConfig+0x1fc>
 800f766:	e695      	b.n	800f494 <UART_SetConfig+0xd0>
 800f768:	4b15      	ldr	r3, [pc, #84]	; (800f7c0 <UART_SetConfig+0x3fc>)
 800f76a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f76e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f776:	f43f af61 	beq.w	800f63c <UART_SetConfig+0x278>
 800f77a:	f63f af1d 	bhi.w	800f5b8 <UART_SetConfig+0x1f4>
 800f77e:	2b00      	cmp	r3, #0
 800f780:	f43f af69 	beq.w	800f656 <UART_SetConfig+0x292>
 800f784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f788:	f43f af41 	beq.w	800f60e <UART_SetConfig+0x24a>
 800f78c:	e682      	b.n	800f494 <UART_SetConfig+0xd0>
 800f78e:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <UART_SetConfig+0x3fc>)
 800f790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f794:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800f798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f79c:	f43f af4e 	beq.w	800f63c <UART_SetConfig+0x278>
 800f7a0:	d807      	bhi.n	800f7b2 <UART_SetConfig+0x3ee>
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	f43f af57 	beq.w	800f656 <UART_SetConfig+0x292>
 800f7a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f7ac:	f43f af2f 	beq.w	800f60e <UART_SetConfig+0x24a>
 800f7b0:	e670      	b.n	800f494 <UART_SetConfig+0xd0>
 800f7b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f7b6:	f43f af03 	beq.w	800f5c0 <UART_SetConfig+0x1fc>
 800f7ba:	e66b      	b.n	800f494 <UART_SetConfig+0xd0>
 800f7bc:	08027f60 	.word	0x08027f60
 800f7c0:	40023800 	.word	0x40023800

0800f7c4 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800f7c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f7c6:	2bff      	cmp	r3, #255	; 0xff
{
 800f7c8:	b510      	push	{r4, lr}
 800f7ca:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800f7cc:	d87b      	bhi.n	800f8c6 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f7ce:	07da      	lsls	r2, r3, #31
 800f7d0:	d50a      	bpl.n	800f7e8 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800f7d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f7d4:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 800f7d8:	f040 808e 	bne.w	800f8f8 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f7dc:	6820      	ldr	r0, [r4, #0]
 800f7de:	6842      	ldr	r2, [r0, #4]
 800f7e0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800f7e4:	430a      	orrs	r2, r1
 800f7e6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f7e8:	0798      	lsls	r0, r3, #30
 800f7ea:	d50a      	bpl.n	800f802 <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800f7ec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f7ee:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800f7f2:	f040 8089 	bne.w	800f908 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f7f6:	6820      	ldr	r0, [r4, #0]
 800f7f8:	6842      	ldr	r2, [r0, #4]
 800f7fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800f7fe:	430a      	orrs	r2, r1
 800f800:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f802:	0759      	lsls	r1, r3, #29
 800f804:	d50a      	bpl.n	800f81c <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800f806:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f808:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800f80c:	f040 8084 	bne.w	800f918 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f810:	6820      	ldr	r0, [r4, #0]
 800f812:	6842      	ldr	r2, [r0, #4]
 800f814:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f818:	430a      	orrs	r2, r1
 800f81a:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f81c:	071a      	lsls	r2, r3, #28
 800f81e:	d509      	bpl.n	800f834 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800f820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f822:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 800f826:	d17f      	bne.n	800f928 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f828:	6820      	ldr	r0, [r4, #0]
 800f82a:	6842      	ldr	r2, [r0, #4]
 800f82c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f830:	430a      	orrs	r2, r1
 800f832:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f834:	06d8      	lsls	r0, r3, #27
 800f836:	d509      	bpl.n	800f84c <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800f838:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f83a:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800f83e:	d17b      	bne.n	800f938 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f840:	6820      	ldr	r0, [r4, #0]
 800f842:	6882      	ldr	r2, [r0, #8]
 800f844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f848:	430a      	orrs	r2, r1
 800f84a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f84c:	0699      	lsls	r1, r3, #26
 800f84e:	d509      	bpl.n	800f864 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800f850:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f852:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 800f856:	d177      	bne.n	800f948 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f858:	6820      	ldr	r0, [r4, #0]
 800f85a:	6882      	ldr	r2, [r0, #8]
 800f85c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f860:	430a      	orrs	r2, r1
 800f862:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f864:	065a      	lsls	r2, r3, #25
 800f866:	d521      	bpl.n	800f8ac <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800f868:	4b46      	ldr	r3, [pc, #280]	; (800f984 <UART_AdvFeatureConfig+0x1c0>)
 800f86a:	6822      	ldr	r2, [r4, #0]
 800f86c:	4846      	ldr	r0, [pc, #280]	; (800f988 <UART_AdvFeatureConfig+0x1c4>)
 800f86e:	4947      	ldr	r1, [pc, #284]	; (800f98c <UART_AdvFeatureConfig+0x1c8>)
 800f870:	429a      	cmp	r2, r3
 800f872:	bf18      	it	ne
 800f874:	4282      	cmpne	r2, r0
 800f876:	bf14      	ite	ne
 800f878:	2301      	movne	r3, #1
 800f87a:	2300      	moveq	r3, #0
 800f87c:	428a      	cmp	r2, r1
 800f87e:	bf0c      	ite	eq
 800f880:	2300      	moveq	r3, #0
 800f882:	f003 0301 	andne.w	r3, r3, #1
 800f886:	b113      	cbz	r3, 800f88e <UART_AdvFeatureConfig+0xca>
 800f888:	4b41      	ldr	r3, [pc, #260]	; (800f990 <UART_AdvFeatureConfig+0x1cc>)
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d16b      	bne.n	800f966 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800f88e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f890:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 800f894:	d160      	bne.n	800f958 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f896:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f898:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f89c:	684b      	ldr	r3, [r1, #4]
 800f89e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f8a2:	ea43 0302 	orr.w	r3, r3, r2
 800f8a6:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f8a8:	d014      	beq.n	800f8d4 <UART_AdvFeatureConfig+0x110>
 800f8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f8ac:	061b      	lsls	r3, r3, #24
 800f8ae:	d509      	bpl.n	800f8c4 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800f8b0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f8b2:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 800f8b6:	d118      	bne.n	800f8ea <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f8b8:	6821      	ldr	r1, [r4, #0]
 800f8ba:	684b      	ldr	r3, [r1, #4]
 800f8bc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	604b      	str	r3, [r1, #4]
}
 800f8c4:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800f8c6:	f640 3143 	movw	r1, #2883	; 0xb43
 800f8ca:	4832      	ldr	r0, [pc, #200]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f8cc:	f7f4 f92c 	bl	8003b28 <assert_failed>
 800f8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8d2:	e77c      	b.n	800f7ce <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800f8d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f8d6:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 800f8da:	d14a      	bne.n	800f972 <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f8dc:	684a      	ldr	r2, [r1, #4]
 800f8de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8e0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800f8e4:	4302      	orrs	r2, r0
 800f8e6:	604a      	str	r2, [r1, #4]
 800f8e8:	e7e0      	b.n	800f8ac <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800f8ea:	f44f 6138 	mov.w	r1, #2944	; 0xb80
 800f8ee:	4829      	ldr	r0, [pc, #164]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f8f0:	f7f4 f91a 	bl	8003b28 <assert_failed>
 800f8f4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800f8f6:	e7df      	b.n	800f8b8 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800f8f8:	f640 3148 	movw	r1, #2888	; 0xb48
 800f8fc:	4825      	ldr	r0, [pc, #148]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f8fe:	f7f4 f913 	bl	8003b28 <assert_failed>
 800f902:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 800f906:	e769      	b.n	800f7dc <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800f908:	f640 314f 	movw	r1, #2895	; 0xb4f
 800f90c:	4821      	ldr	r0, [pc, #132]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f90e:	f7f4 f90b 	bl	8003b28 <assert_failed>
 800f912:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f916:	e76e      	b.n	800f7f6 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800f918:	f640 3156 	movw	r1, #2902	; 0xb56
 800f91c:	481d      	ldr	r0, [pc, #116]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f91e:	f7f4 f903 	bl	8003b28 <assert_failed>
 800f922:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f924:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f926:	e773      	b.n	800f810 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800f928:	f640 315d 	movw	r1, #2909	; 0xb5d
 800f92c:	4819      	ldr	r0, [pc, #100]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f92e:	f7f4 f8fb 	bl	8003b28 <assert_failed>
 800f932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f934:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f936:	e777      	b.n	800f828 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800f938:	f640 3164 	movw	r1, #2916	; 0xb64
 800f93c:	4815      	ldr	r0, [pc, #84]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f93e:	f7f4 f8f3 	bl	8003b28 <assert_failed>
 800f942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f946:	e77b      	b.n	800f840 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800f948:	f640 316b 	movw	r1, #2923	; 0xb6b
 800f94c:	4811      	ldr	r0, [pc, #68]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f94e:	f7f4 f8eb 	bl	8003b28 <assert_failed>
 800f952:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f956:	e77f      	b.n	800f858 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800f958:	f640 3173 	movw	r1, #2931	; 0xb73
 800f95c:	480d      	ldr	r0, [pc, #52]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f95e:	f7f4 f8e3 	bl	8003b28 <assert_failed>
 800f962:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800f964:	e797      	b.n	800f896 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800f966:	f640 3172 	movw	r1, #2930	; 0xb72
 800f96a:	480a      	ldr	r0, [pc, #40]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f96c:	f7f4 f8dc 	bl	8003b28 <assert_failed>
 800f970:	e78d      	b.n	800f88e <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800f972:	f640 3178 	movw	r1, #2936	; 0xb78
 800f976:	4807      	ldr	r0, [pc, #28]	; (800f994 <UART_AdvFeatureConfig+0x1d0>)
 800f978:	f7f4 f8d6 	bl	8003b28 <assert_failed>
 800f97c:	6821      	ldr	r1, [r4, #0]
 800f97e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800f980:	e7ac      	b.n	800f8dc <UART_AdvFeatureConfig+0x118>
 800f982:	bf00      	nop
 800f984:	40011000 	.word	0x40011000
 800f988:	40004400 	.word	0x40004400
 800f98c:	40004800 	.word	0x40004800
 800f990:	40011400 	.word	0x40011400
 800f994:	08027f24 	.word	0x08027f24

0800f998 <UART_WaitOnFlagUntilTimeout>:
{
 800f998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f99c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9a0:	4681      	mov	r9, r0
 800f9a2:	460f      	mov	r7, r1
 800f9a4:	4616      	mov	r6, r2
 800f9a6:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9a8:	6805      	ldr	r5, [r0, #0]
 800f9aa:	e002      	b.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 800f9ac:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f9b0:	d10a      	bne.n	800f9c8 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9b2:	69ec      	ldr	r4, [r5, #28]
 800f9b4:	ea37 0304 	bics.w	r3, r7, r4
 800f9b8:	bf0c      	ite	eq
 800f9ba:	2401      	moveq	r4, #1
 800f9bc:	2400      	movne	r4, #0
 800f9be:	42b4      	cmp	r4, r6
 800f9c0:	d0f4      	beq.n	800f9ac <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 800f9c2:	2000      	movs	r0, #0
}
 800f9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f9c8:	f7f6 fc8e 	bl	80062e8 <HAL_GetTick>
 800f9cc:	eba0 000a 	sub.w	r0, r0, sl
 800f9d0:	fab8 f288 	clz	r2, r8
 800f9d4:	4540      	cmp	r0, r8
 800f9d6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800f9da:	d820      	bhi.n	800fa1e <UART_WaitOnFlagUntilTimeout+0x86>
 800f9dc:	f1b8 0f00 	cmp.w	r8, #0
 800f9e0:	d01d      	beq.n	800fa1e <UART_WaitOnFlagUntilTimeout+0x86>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f9e2:	f8d9 5000 	ldr.w	r5, [r9]
 800f9e6:	682b      	ldr	r3, [r5, #0]
 800f9e8:	0759      	lsls	r1, r3, #29
 800f9ea:	d5e2      	bpl.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f9ec:	69eb      	ldr	r3, [r5, #28]
 800f9ee:	051b      	lsls	r3, r3, #20
 800f9f0:	d5df      	bpl.n	800f9b2 <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
          huart->gState = HAL_UART_STATE_READY;
 800f9f6:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 800f9f8:	2003      	movs	r0, #3
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f9fa:	6229      	str	r1, [r5, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800f9fc:	6829      	ldr	r1, [r5, #0]
 800f9fe:	f421 71d0 	bic.w	r1, r1, #416	; 0x1a0
 800fa02:	6029      	str	r1, [r5, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa04:	68a9      	ldr	r1, [r5, #8]
 800fa06:	f021 0101 	bic.w	r1, r1, #1
 800fa0a:	60a9      	str	r1, [r5, #8]
          huart->gState = HAL_UART_STATE_READY;
 800fa0c:	f8c9 3074 	str.w	r3, [r9, #116]	; 0x74
          __HAL_UNLOCK(huart);
 800fa10:	f889 2070 	strb.w	r2, [r9, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 800fa14:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fa18:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          return HAL_TIMEOUT;
 800fa1c:	e7d2      	b.n	800f9c4 <UART_WaitOnFlagUntilTimeout+0x2c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa1e:	f8d9 3000 	ldr.w	r3, [r9]
        huart->gState = HAL_UART_STATE_READY;
 800fa22:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800fa24:	2400      	movs	r4, #0
 800fa26:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800fa2e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa30:	689a      	ldr	r2, [r3, #8]
 800fa32:	f022 0201 	bic.w	r2, r2, #1
 800fa36:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800fa38:	f8c9 1074 	str.w	r1, [r9, #116]	; 0x74
        __HAL_UNLOCK(huart);
 800fa3c:	f889 4070 	strb.w	r4, [r9, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 800fa40:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
        return HAL_TIMEOUT;
 800fa44:	e7be      	b.n	800f9c4 <UART_WaitOnFlagUntilTimeout+0x2c>
 800fa46:	bf00      	nop

0800fa48 <HAL_UART_Transmit>:
{
 800fa48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa4c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800fa4e:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 800fa50:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 800fa52:	2b20      	cmp	r3, #32
 800fa54:	d14b      	bne.n	800faee <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800fa56:	460d      	mov	r5, r1
 800fa58:	2900      	cmp	r1, #0
 800fa5a:	d044      	beq.n	800fae6 <HAL_UART_Transmit+0x9e>
 800fa5c:	fab2 f982 	clz	r9, r2
 800fa60:	4617      	mov	r7, r2
 800fa62:	ea4f 1959 	mov.w	r9, r9, lsr #5
 800fa66:	2a00      	cmp	r2, #0
 800fa68:	d03d      	beq.n	800fae6 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 800fa6a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800fa6e:	4604      	mov	r4, r0
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d03c      	beq.n	800faee <HAL_UART_Transmit+0xa6>
 800fa74:	2201      	movs	r2, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa76:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa78:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 800fa7c:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa80:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 800fa82:	f7f6 fc31 	bl	80062e8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa86:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800fa88:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 800fa8a:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa8e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800fa92:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fa96:	d040      	beq.n	800fb1a <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 800fa98:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 800fa9c:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800fa9e:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800faa0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800faa4:	b973      	cbnz	r3, 800fac4 <HAL_UART_Transmit+0x7c>
 800faa6:	e02a      	b.n	800fafe <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800faa8:	6823      	ldr	r3, [r4, #0]
 800faaa:	f815 2b01 	ldrb.w	r2, [r5], #1
 800faae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 800fab0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800fab4:	3a01      	subs	r2, #1
 800fab6:	b292      	uxth	r2, r2
 800fab8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800fabc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800fac0:	b292      	uxth	r2, r2
 800fac2:	b1e2      	cbz	r2, 800fafe <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fac4:	4643      	mov	r3, r8
 800fac6:	2200      	movs	r2, #0
 800fac8:	2180      	movs	r1, #128	; 0x80
 800faca:	4620      	mov	r0, r4
 800facc:	9600      	str	r6, [sp, #0]
 800face:	f7ff ff63 	bl	800f998 <UART_WaitOnFlagUntilTimeout>
 800fad2:	b980      	cbnz	r0, 800faf6 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 800fad4:	2d00      	cmp	r5, #0
 800fad6:	d1e7      	bne.n	800faa8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fad8:	f839 3b02 	ldrh.w	r3, [r9], #2
 800fadc:	6822      	ldr	r2, [r4, #0]
 800fade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fae2:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 800fae4:	e7e4      	b.n	800fab0 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 800fae6:	2001      	movs	r0, #1
}
 800fae8:	b003      	add	sp, #12
 800faea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800faee:	2002      	movs	r0, #2
}
 800faf0:	b003      	add	sp, #12
 800faf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 800faf6:	2003      	movs	r0, #3
}
 800faf8:	b003      	add	sp, #12
 800fafa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fafe:	4643      	mov	r3, r8
 800fb00:	2200      	movs	r2, #0
 800fb02:	2140      	movs	r1, #64	; 0x40
 800fb04:	4620      	mov	r0, r4
 800fb06:	9600      	str	r6, [sp, #0]
 800fb08:	f7ff ff46 	bl	800f998 <UART_WaitOnFlagUntilTimeout>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d1f2      	bne.n	800faf6 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 800fb10:	2320      	movs	r3, #32
 800fb12:	6763      	str	r3, [r4, #116]	; 0x74
}
 800fb14:	b003      	add	sp, #12
 800fb16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb1a:	6923      	ldr	r3, [r4, #16]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d1bb      	bne.n	800fa98 <HAL_UART_Transmit+0x50>
 800fb20:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800fb22:	461d      	mov	r5, r3
 800fb24:	e7b8      	b.n	800fa98 <HAL_UART_Transmit+0x50>
 800fb26:	bf00      	nop

0800fb28 <UART_CheckIdleState>:
{
 800fb28:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb2a:	2600      	movs	r6, #0
{
 800fb2c:	4604      	mov	r4, r0
 800fb2e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb30:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800fb32:	f7f6 fbd9 	bl	80062e8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb36:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800fb38:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	0712      	lsls	r2, r2, #28
 800fb3e:	d40b      	bmi.n	800fb58 <UART_CheckIdleState+0x30>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	075b      	lsls	r3, r3, #29
 800fb44:	d417      	bmi.n	800fb76 <UART_CheckIdleState+0x4e>
  __HAL_UNLOCK(huart);
 800fb46:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800fb48:	2220      	movs	r2, #32
  return HAL_OK;
 800fb4a:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800fb4c:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 800fb4e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 800fb52:	67a2      	str	r2, [r4, #120]	; 0x78
}
 800fb54:	b002      	add	sp, #8
 800fb56:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb58:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800fb5c:	4632      	mov	r2, r6
 800fb5e:	462b      	mov	r3, r5
 800fb60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fb64:	9000      	str	r0, [sp, #0]
 800fb66:	4620      	mov	r0, r4
 800fb68:	f7ff ff16 	bl	800f998 <UART_WaitOnFlagUntilTimeout>
 800fb6c:	b978      	cbnz	r0, 800fb8e <UART_CheckIdleState+0x66>
 800fb6e:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	075b      	lsls	r3, r3, #29
 800fb74:	d5e7      	bpl.n	800fb46 <UART_CheckIdleState+0x1e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fb76:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 800fb7a:	462b      	mov	r3, r5
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fb82:	9000      	str	r0, [sp, #0]
 800fb84:	4620      	mov	r0, r4
 800fb86:	f7ff ff07 	bl	800f998 <UART_WaitOnFlagUntilTimeout>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0db      	beq.n	800fb46 <UART_CheckIdleState+0x1e>
      return HAL_TIMEOUT;
 800fb8e:	2003      	movs	r0, #3
}
 800fb90:	b002      	add	sp, #8
 800fb92:	bd70      	pop	{r4, r5, r6, pc}

0800fb94 <HAL_UART_Init>:
  if (huart == NULL)
 800fb94:	2800      	cmp	r0, #0
 800fb96:	f000 8097 	beq.w	800fcc8 <HAL_UART_Init+0x134>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800fb9a:	6802      	ldr	r2, [r0, #0]
{
 800fb9c:	b538      	push	{r3, r4, r5, lr}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800fb9e:	6983      	ldr	r3, [r0, #24]
 800fba0:	4604      	mov	r4, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d050      	beq.n	800fc48 <HAL_UART_Init+0xb4>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800fba6:	4b4c      	ldr	r3, [pc, #304]	; (800fcd8 <HAL_UART_Init+0x144>)
 800fba8:	494c      	ldr	r1, [pc, #304]	; (800fcdc <HAL_UART_Init+0x148>)
 800fbaa:	484d      	ldr	r0, [pc, #308]	; (800fce0 <HAL_UART_Init+0x14c>)
 800fbac:	429a      	cmp	r2, r3
 800fbae:	bf18      	it	ne
 800fbb0:	428a      	cmpne	r2, r1
 800fbb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fbb6:	4d4b      	ldr	r5, [pc, #300]	; (800fce4 <HAL_UART_Init+0x150>)
 800fbb8:	bf14      	ite	ne
 800fbba:	2301      	movne	r3, #1
 800fbbc:	2300      	moveq	r3, #0
 800fbbe:	4282      	cmp	r2, r0
 800fbc0:	bf0c      	ite	eq
 800fbc2:	2300      	moveq	r3, #0
 800fbc4:	f003 0301 	andne.w	r3, r3, #1
 800fbc8:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800fbcc:	428a      	cmp	r2, r1
 800fbce:	bf0c      	ite	eq
 800fbd0:	2300      	moveq	r3, #0
 800fbd2:	f003 0301 	andne.w	r3, r3, #1
 800fbd6:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800fbda:	42aa      	cmp	r2, r5
 800fbdc:	bf0c      	ite	eq
 800fbde:	2300      	moveq	r3, #0
 800fbe0:	f003 0301 	andne.w	r3, r3, #1
 800fbe4:	4282      	cmp	r2, r0
 800fbe6:	bf0c      	ite	eq
 800fbe8:	2300      	moveq	r3, #0
 800fbea:	f003 0301 	andne.w	r3, r3, #1
 800fbee:	428a      	cmp	r2, r1
 800fbf0:	bf0c      	ite	eq
 800fbf2:	2300      	moveq	r3, #0
 800fbf4:	f003 0301 	andne.w	r3, r3, #1
 800fbf8:	b113      	cbz	r3, 800fc00 <HAL_UART_Init+0x6c>
 800fbfa:	4b3b      	ldr	r3, [pc, #236]	; (800fce8 <HAL_UART_Init+0x154>)
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d165      	bne.n	800fccc <HAL_UART_Init+0x138>
  if (huart->gState == HAL_UART_STATE_RESET)
 800fc00:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d056      	beq.n	800fcb4 <HAL_UART_Init+0x120>
  __HAL_UART_DISABLE(huart);
 800fc06:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800fc08:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc0a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800fc0c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800fc0e:	6813      	ldr	r3, [r2, #0]
 800fc10:	f023 0301 	bic.w	r3, r3, #1
 800fc14:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fc16:	f7ff fbd5 	bl	800f3c4 <UART_SetConfig>
 800fc1a:	2801      	cmp	r0, #1
 800fc1c:	d048      	beq.n	800fcb0 <HAL_UART_Init+0x11c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fc1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d14d      	bne.n	800fcc0 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc24:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800fc26:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc28:	685a      	ldr	r2, [r3, #4]
 800fc2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fc2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fc30:	689a      	ldr	r2, [r3, #8]
 800fc32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fc36:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800fc38:	681a      	ldr	r2, [r3, #0]
 800fc3a:	f042 0201 	orr.w	r2, r2, #1
 800fc3e:	601a      	str	r2, [r3, #0]
}
 800fc40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 800fc44:	f7ff bf70 	b.w	800fb28 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800fc48:	4b23      	ldr	r3, [pc, #140]	; (800fcd8 <HAL_UART_Init+0x144>)
 800fc4a:	4924      	ldr	r1, [pc, #144]	; (800fcdc <HAL_UART_Init+0x148>)
 800fc4c:	4824      	ldr	r0, [pc, #144]	; (800fce0 <HAL_UART_Init+0x14c>)
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	bf18      	it	ne
 800fc52:	428a      	cmpne	r2, r1
 800fc54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc58:	4d22      	ldr	r5, [pc, #136]	; (800fce4 <HAL_UART_Init+0x150>)
 800fc5a:	bf14      	ite	ne
 800fc5c:	2301      	movne	r3, #1
 800fc5e:	2300      	moveq	r3, #0
 800fc60:	4282      	cmp	r2, r0
 800fc62:	bf0c      	ite	eq
 800fc64:	2300      	moveq	r3, #0
 800fc66:	f003 0301 	andne.w	r3, r3, #1
 800fc6a:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 800fc6e:	428a      	cmp	r2, r1
 800fc70:	bf0c      	ite	eq
 800fc72:	2300      	moveq	r3, #0
 800fc74:	f003 0301 	andne.w	r3, r3, #1
 800fc78:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 800fc7c:	42aa      	cmp	r2, r5
 800fc7e:	bf0c      	ite	eq
 800fc80:	2300      	moveq	r3, #0
 800fc82:	f003 0301 	andne.w	r3, r3, #1
 800fc86:	4282      	cmp	r2, r0
 800fc88:	bf0c      	ite	eq
 800fc8a:	2300      	moveq	r3, #0
 800fc8c:	f003 0301 	andne.w	r3, r3, #1
 800fc90:	428a      	cmp	r2, r1
 800fc92:	bf0c      	ite	eq
 800fc94:	2300      	moveq	r3, #0
 800fc96:	f003 0301 	andne.w	r3, r3, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0b0      	beq.n	800fc00 <HAL_UART_Init+0x6c>
 800fc9e:	4b12      	ldr	r3, [pc, #72]	; (800fce8 <HAL_UART_Init+0x154>)
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d0ad      	beq.n	800fc00 <HAL_UART_Init+0x6c>
 800fca4:	f240 112f 	movw	r1, #303	; 0x12f
 800fca8:	4810      	ldr	r0, [pc, #64]	; (800fcec <HAL_UART_Init+0x158>)
 800fcaa:	f7f3 ff3d 	bl	8003b28 <assert_failed>
 800fcae:	e7a7      	b.n	800fc00 <HAL_UART_Init+0x6c>
}
 800fcb0:	2001      	movs	r0, #1
 800fcb2:	bd38      	pop	{r3, r4, r5, pc}
    HAL_UART_MspInit(huart);
 800fcb4:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 800fcb6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800fcba:	f7f5 f999 	bl	8004ff0 <HAL_UART_MspInit>
 800fcbe:	e7a2      	b.n	800fc06 <HAL_UART_Init+0x72>
    UART_AdvFeatureConfig(huart);
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f7ff fd7f 	bl	800f7c4 <UART_AdvFeatureConfig>
 800fcc6:	e7ad      	b.n	800fc24 <HAL_UART_Init+0x90>
}
 800fcc8:	2001      	movs	r0, #1
 800fcca:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800fccc:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800fcd0:	4806      	ldr	r0, [pc, #24]	; (800fcec <HAL_UART_Init+0x158>)
 800fcd2:	f7f3 ff29 	bl	8003b28 <assert_failed>
 800fcd6:	e793      	b.n	800fc00 <HAL_UART_Init+0x6c>
 800fcd8:	40011000 	.word	0x40011000
 800fcdc:	40004400 	.word	0x40004400
 800fce0:	40004800 	.word	0x40004800
 800fce4:	40005000 	.word	0x40005000
 800fce8:	40007c00 	.word	0x40007c00
 800fcec:	08027f24 	.word	0x08027f24

0800fcf0 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d04a      	beq.n	800fd8a <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800fcf4:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 800fcf8:	b570      	push	{r4, r5, r6, lr}
 800fcfa:	460e      	mov	r6, r1
 800fcfc:	4604      	mov	r4, r0
 800fcfe:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800fd00:	d13d      	bne.n	800fd7e <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 800fd02:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d034      	beq.n	800fd72 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 800fd08:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800fd0a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd0c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 800fd0e:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800fd10:	6813      	ldr	r3, [r2, #0]
 800fd12:	f023 0301 	bic.w	r3, r3, #1
 800fd16:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd18:	f7ff fb54 	bl	800f3c4 <UART_SetConfig>
 800fd1c:	2801      	cmp	r0, #1
 800fd1e:	d026      	beq.n	800fd6e <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd22:	bb03      	cbnz	r3, 800fd66 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd24:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800fd26:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd2a:	685a      	ldr	r2, [r3, #4]
 800fd2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd32:	689a      	ldr	r2, [r3, #8]
 800fd34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd38:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 800fd3a:	d00d      	beq.n	800fd58 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800fd3c:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800fd3e:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 800fd40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd44:	4315      	orrs	r5, r2
 800fd46:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	f042 0201 	orr.w	r2, r2, #1
}
 800fd4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 800fd52:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800fd54:	f7ff bee8 	b.w	800fb28 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 800fd58:	6859      	ldr	r1, [r3, #4]
 800fd5a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800fd5e:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 800fd62:	605e      	str	r6, [r3, #4]
 800fd64:	e7ea      	b.n	800fd3c <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 800fd66:	4620      	mov	r0, r4
 800fd68:	f7ff fd2c 	bl	800f7c4 <UART_AdvFeatureConfig>
 800fd6c:	e7da      	b.n	800fd24 <HAL_MultiProcessor_Init+0x34>
}
 800fd6e:	2001      	movs	r0, #1
 800fd70:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 800fd72:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 800fd74:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800fd78:	f7f5 f93a 	bl	8004ff0 <HAL_UART_MspInit>
 800fd7c:	e7c4      	b.n	800fd08 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 800fd7e:	f240 211b 	movw	r1, #539	; 0x21b
 800fd82:	4803      	ldr	r0, [pc, #12]	; (800fd90 <HAL_MultiProcessor_Init+0xa0>)
 800fd84:	f7f3 fed0 	bl	8003b28 <assert_failed>
 800fd88:	e7bb      	b.n	800fd02 <HAL_MultiProcessor_Init+0x12>
}
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	4770      	bx	lr
 800fd8e:	bf00      	nop
 800fd90:	08027f24 	.word	0x08027f24

0800fd94 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd94:	2800      	cmp	r0, #0
 800fd96:	f000 8089 	beq.w	800feac <HAL_RS485Ex_Init+0x118>
{
 800fd9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800fd9e:	4c47      	ldr	r4, [pc, #284]	; (800febc <HAL_RS485Ex_Init+0x128>)
 800fda0:	460e      	mov	r6, r1
 800fda2:	461d      	mov	r5, r3
 800fda4:	4946      	ldr	r1, [pc, #280]	; (800fec0 <HAL_RS485Ex_Init+0x12c>)
 800fda6:	6803      	ldr	r3, [r0, #0]
 800fda8:	4617      	mov	r7, r2
 800fdaa:	4a46      	ldr	r2, [pc, #280]	; (800fec4 <HAL_RS485Ex_Init+0x130>)
 800fdac:	4680      	mov	r8, r0
 800fdae:	42a3      	cmp	r3, r4
 800fdb0:	bf18      	it	ne
 800fdb2:	428b      	cmpne	r3, r1
 800fdb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdb8:	bf14      	ite	ne
 800fdba:	2401      	movne	r4, #1
 800fdbc:	2400      	moveq	r4, #0
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	bf0c      	ite	eq
 800fdc2:	2400      	moveq	r4, #0
 800fdc4:	f004 0401 	andne.w	r4, r4, #1
 800fdc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdcc:	428b      	cmp	r3, r1
 800fdce:	bf0c      	ite	eq
 800fdd0:	2400      	moveq	r4, #0
 800fdd2:	f004 0401 	andne.w	r4, r4, #1
 800fdd6:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 800fdda:	4293      	cmp	r3, r2
 800fddc:	bf0c      	ite	eq
 800fdde:	2400      	moveq	r4, #0
 800fde0:	f004 0401 	andne.w	r4, r4, #1
 800fde4:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 800fde8:	428b      	cmp	r3, r1
 800fdea:	bf0c      	ite	eq
 800fdec:	2400      	moveq	r4, #0
 800fdee:	f004 0401 	andne.w	r4, r4, #1
 800fdf2:	4293      	cmp	r3, r2
 800fdf4:	bf0c      	ite	eq
 800fdf6:	2400      	moveq	r4, #0
 800fdf8:	f004 0401 	andne.w	r4, r4, #1
 800fdfc:	b11c      	cbz	r4, 800fe06 <HAL_RS485Ex_Init+0x72>
 800fdfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800fe02:	4293      	cmp	r3, r2
 800fe04:	d154      	bne.n	800feb0 <HAL_RS485Ex_Init+0x11c>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800fe06:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 800fe0a:	d14a      	bne.n	800fea2 <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800fe0c:	2f1f      	cmp	r7, #31
 800fe0e:	d843      	bhi.n	800fe98 <HAL_RS485Ex_Init+0x104>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800fe10:	2d1f      	cmp	r5, #31
 800fe12:	d83c      	bhi.n	800fe8e <HAL_RS485Ex_Init+0xfa>

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe14:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800fe18:	b39b      	cbz	r3, 800fe82 <HAL_RS485Ex_Init+0xee>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fe1a:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 800fe1e:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe20:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 800fe22:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800fe26:	6813      	ldr	r3, [r2, #0]
 800fe28:	f023 0301 	bic.w	r3, r3, #1
 800fe2c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe2e:	f7ff fac9 	bl	800f3c4 <UART_SetConfig>
 800fe32:	2801      	cmp	r0, #1
 800fe34:	d022      	beq.n	800fe7c <HAL_RS485Ex_Init+0xe8>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe36:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 800fe3a:	b9db      	cbnz	r3, 800fe74 <HAL_RS485Ex_Init+0xe0>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800fe3c:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800fe40:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800fe42:	4a21      	ldr	r2, [pc, #132]	; (800fec8 <HAL_RS485Ex_Init+0x134>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe44:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800fe46:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 800fe48:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800fe4c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800fe50:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800fe52:	6899      	ldr	r1, [r3, #8]
 800fe54:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800fe58:	430e      	orrs	r6, r1
 800fe5a:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800fe5c:	6819      	ldr	r1, [r3, #0]
 800fe5e:	400a      	ands	r2, r1
 800fe60:	4317      	orrs	r7, r2
 800fe62:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	f042 0201 	orr.w	r2, r2, #1
}
 800fe6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 800fe6e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800fe70:	f7ff be5a 	b.w	800fb28 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800fe74:	4640      	mov	r0, r8
 800fe76:	f7ff fca5 	bl	800f7c4 <UART_AdvFeatureConfig>
 800fe7a:	e7df      	b.n	800fe3c <HAL_RS485Ex_Init+0xa8>
}
 800fe7c:	2001      	movs	r0, #1
 800fe7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 800fe82:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 800fe84:	f888 3070 	strb.w	r3, [r8, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800fe88:	f7f5 f8b2 	bl	8004ff0 <HAL_UART_MspInit>
 800fe8c:	e7c5      	b.n	800fe1a <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 800fe8e:	21aa      	movs	r1, #170	; 0xaa
 800fe90:	480e      	ldr	r0, [pc, #56]	; (800fecc <HAL_RS485Ex_Init+0x138>)
 800fe92:	f7f3 fe49 	bl	8003b28 <assert_failed>
 800fe96:	e7bd      	b.n	800fe14 <HAL_RS485Ex_Init+0x80>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 800fe98:	21a7      	movs	r1, #167	; 0xa7
 800fe9a:	480c      	ldr	r0, [pc, #48]	; (800fecc <HAL_RS485Ex_Init+0x138>)
 800fe9c:	f7f3 fe44 	bl	8003b28 <assert_failed>
 800fea0:	e7b6      	b.n	800fe10 <HAL_RS485Ex_Init+0x7c>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 800fea2:	21a4      	movs	r1, #164	; 0xa4
 800fea4:	4809      	ldr	r0, [pc, #36]	; (800fecc <HAL_RS485Ex_Init+0x138>)
 800fea6:	f7f3 fe3f 	bl	8003b28 <assert_failed>
 800feaa:	e7af      	b.n	800fe0c <HAL_RS485Ex_Init+0x78>
}
 800feac:	2001      	movs	r0, #1
 800feae:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 800feb0:	21a1      	movs	r1, #161	; 0xa1
 800feb2:	4806      	ldr	r0, [pc, #24]	; (800fecc <HAL_RS485Ex_Init+0x138>)
 800feb4:	f7f3 fe38 	bl	8003b28 <assert_failed>
 800feb8:	e7a5      	b.n	800fe06 <HAL_RS485Ex_Init+0x72>
 800feba:	bf00      	nop
 800febc:	40011000 	.word	0x40011000
 800fec0:	40004400 	.word	0x40004400
 800fec4:	40004800 	.word	0x40004800
 800fec8:	fc00ffff 	.word	0xfc00ffff
 800fecc:	08027f74 	.word	0x08027f74

0800fed0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800fed0:	4b0b      	ldr	r3, [pc, #44]	; (800ff00 <USB_CoreReset+0x30>)
 800fed2:	e001      	b.n	800fed8 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800fed4:	3b01      	subs	r3, #1
 800fed6:	d010      	beq.n	800fefa <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fed8:	6902      	ldr	r2, [r0, #16]
 800feda:	2a00      	cmp	r2, #0
 800fedc:	dafa      	bge.n	800fed4 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800fede:	6903      	ldr	r3, [r0, #16]
 800fee0:	4a07      	ldr	r2, [pc, #28]	; (800ff00 <USB_CoreReset+0x30>)
 800fee2:	f043 0301 	orr.w	r3, r3, #1
 800fee6:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800fee8:	e001      	b.n	800feee <USB_CoreReset+0x1e>
 800feea:	3a01      	subs	r2, #1
 800feec:	d005      	beq.n	800fefa <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800feee:	6903      	ldr	r3, [r0, #16]
 800fef0:	f013 0301 	ands.w	r3, r3, #1
 800fef4:	d1f9      	bne.n	800feea <USB_CoreReset+0x1a>

  return HAL_OK;
 800fef6:	4618      	mov	r0, r3
}
 800fef8:	4770      	bx	lr
      return HAL_TIMEOUT;
 800fefa:	2003      	movs	r0, #3
 800fefc:	4770      	bx	lr
 800fefe:	bf00      	nop
 800ff00:	00030d40 	.word	0x00030d40

0800ff04 <USB_CoreInit>:
{
 800ff04:	b084      	sub	sp, #16
 800ff06:	b570      	push	{r4, r5, r6, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
 800ff0a:	ad05      	add	r5, sp, #20
 800ff0c:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff0e:	2e01      	cmp	r6, #1
{
 800ff10:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ff14:	d121      	bne.n	800ff5a <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff16:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ff18:	4b18      	ldr	r3, [pc, #96]	; (800ff7c <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 800ff1e:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff20:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 800ff22:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ff24:	68c2      	ldr	r2, [r0, #12]
 800ff26:	ea03 0302 	and.w	r3, r3, r2
 800ff2a:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ff2c:	68c3      	ldr	r3, [r0, #12]
 800ff2e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ff32:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800ff34:	d01c      	beq.n	800ff70 <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7ff ffca 	bl	800fed0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800ff3c:	9b08      	ldr	r3, [sp, #32]
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d107      	bne.n	800ff52 <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	f043 0306 	orr.w	r3, r3, #6
 800ff48:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	f043 0320 	orr.w	r3, r3, #32
 800ff50:	60a3      	str	r3, [r4, #8]
}
 800ff52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ff56:	b004      	add	sp, #16
 800ff58:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff5a:	68c3      	ldr	r3, [r0, #12]
 800ff5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff60:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800ff62:	f7ff ffb5 	bl	800fed0 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ff68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff6c:	63a3      	str	r3, [r4, #56]	; 0x38
 800ff6e:	e7e5      	b.n	800ff3c <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ff70:	68c3      	ldr	r3, [r0, #12]
 800ff72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff76:	60c3      	str	r3, [r0, #12]
 800ff78:	e7dd      	b.n	800ff36 <USB_CoreInit+0x32>
 800ff7a:	bf00      	nop
 800ff7c:	ffbdffbf 	.word	0xffbdffbf

0800ff80 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 800ff80:	2a02      	cmp	r2, #2
{
 800ff82:	4603      	mov	r3, r0
 800ff84:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 800ff86:	d00c      	beq.n	800ffa2 <USB_SetTurnaroundTime+0x22>
 800ff88:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff8c:	68d9      	ldr	r1, [r3, #12]
}
 800ff8e:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ff90:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 800ff94:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ff96:	68da      	ldr	r2, [r3, #12]
 800ff98:	4322      	orrs	r2, r4
}
 800ff9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ff9e:	60da      	str	r2, [r3, #12]
}
 800ffa0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ffa2:	4a23      	ldr	r2, [pc, #140]	; (8010030 <USB_SetTurnaroundTime+0xb0>)
 800ffa4:	4823      	ldr	r0, [pc, #140]	; (8010034 <USB_SetTurnaroundTime+0xb4>)
 800ffa6:	440a      	add	r2, r1
 800ffa8:	4282      	cmp	r2, r0
 800ffaa:	d92c      	bls.n	8010006 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ffac:	4a22      	ldr	r2, [pc, #136]	; (8010038 <USB_SetTurnaroundTime+0xb8>)
 800ffae:	4823      	ldr	r0, [pc, #140]	; (801003c <USB_SetTurnaroundTime+0xbc>)
 800ffb0:	440a      	add	r2, r1
 800ffb2:	4282      	cmp	r2, r0
 800ffb4:	d92a      	bls.n	801000c <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ffb6:	4a22      	ldr	r2, [pc, #136]	; (8010040 <USB_SetTurnaroundTime+0xc0>)
 800ffb8:	4822      	ldr	r0, [pc, #136]	; (8010044 <USB_SetTurnaroundTime+0xc4>)
 800ffba:	440a      	add	r2, r1
 800ffbc:	4282      	cmp	r2, r0
 800ffbe:	d928      	bls.n	8010012 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ffc0:	4a21      	ldr	r2, [pc, #132]	; (8010048 <USB_SetTurnaroundTime+0xc8>)
 800ffc2:	4822      	ldr	r0, [pc, #136]	; (801004c <USB_SetTurnaroundTime+0xcc>)
 800ffc4:	440a      	add	r2, r1
 800ffc6:	4282      	cmp	r2, r0
 800ffc8:	d326      	bcc.n	8010018 <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ffca:	4a21      	ldr	r2, [pc, #132]	; (8010050 <USB_SetTurnaroundTime+0xd0>)
 800ffcc:	4821      	ldr	r0, [pc, #132]	; (8010054 <USB_SetTurnaroundTime+0xd4>)
 800ffce:	440a      	add	r2, r1
 800ffd0:	4282      	cmp	r2, r0
 800ffd2:	d924      	bls.n	801001e <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ffd4:	4a20      	ldr	r2, [pc, #128]	; (8010058 <USB_SetTurnaroundTime+0xd8>)
 800ffd6:	4821      	ldr	r0, [pc, #132]	; (801005c <USB_SetTurnaroundTime+0xdc>)
 800ffd8:	440a      	add	r2, r1
 800ffda:	4282      	cmp	r2, r0
 800ffdc:	d322      	bcc.n	8010024 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ffde:	4a20      	ldr	r2, [pc, #128]	; (8010060 <USB_SetTurnaroundTime+0xe0>)
 800ffe0:	4820      	ldr	r0, [pc, #128]	; (8010064 <USB_SetTurnaroundTime+0xe4>)
 800ffe2:	440a      	add	r2, r1
 800ffe4:	4282      	cmp	r2, r0
 800ffe6:	d3cf      	bcc.n	800ff88 <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ffe8:	4a1f      	ldr	r2, [pc, #124]	; (8010068 <USB_SetTurnaroundTime+0xe8>)
 800ffea:	4820      	ldr	r0, [pc, #128]	; (801006c <USB_SetTurnaroundTime+0xec>)
 800ffec:	440a      	add	r2, r1
 800ffee:	4282      	cmp	r2, r0
 800fff0:	d31b      	bcc.n	801002a <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fff2:	4a1f      	ldr	r2, [pc, #124]	; (8010070 <USB_SetTurnaroundTime+0xf0>)
 800fff4:	4c1f      	ldr	r4, [pc, #124]	; (8010074 <USB_SetTurnaroundTime+0xf4>)
 800fff6:	440a      	add	r2, r1
 800fff8:	42a2      	cmp	r2, r4
 800fffa:	bf34      	ite	cc
 800fffc:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 8010000:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 8010004:	e7c2      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 8010006:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 801000a:	e7bf      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 801000c:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8010010:	e7bc      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 8010012:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 8010016:	e7b9      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 8010018:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 801001c:	e7b6      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 801001e:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8010022:	e7b3      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 8010024:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8010028:	e7b0      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 801002a:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 801002e:	e7ad      	b.n	800ff8c <USB_SetTurnaroundTime+0xc>
 8010030:	ff275340 	.word	0xff275340
 8010034:	000c34ff 	.word	0x000c34ff
 8010038:	ff1b1e40 	.word	0xff1b1e40
 801003c:	000f423f 	.word	0x000f423f
 8010040:	ff0bdc00 	.word	0xff0bdc00
 8010044:	00124f7f 	.word	0x00124f7f
 8010048:	fef98c80 	.word	0xfef98c80
 801004c:	0013d620 	.word	0x0013d620
 8010050:	fee5b660 	.word	0xfee5b660
 8010054:	0016e35f 	.word	0x0016e35f
 8010058:	feced300 	.word	0xfeced300
 801005c:	001b7740 	.word	0x001b7740
 8010060:	feb35bc0 	.word	0xfeb35bc0
 8010064:	002191c0 	.word	0x002191c0
 8010068:	fe91ca00 	.word	0xfe91ca00
 801006c:	00387520 	.word	0x00387520
 8010070:	fe5954e0 	.word	0xfe5954e0
 8010074:	00419ce0 	.word	0x00419ce0

08010078 <USB_EnableGlobalInt>:
{
 8010078:	4603      	mov	r3, r0
}
 801007a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801007c:	689a      	ldr	r2, [r3, #8]
 801007e:	f042 0201 	orr.w	r2, r2, #1
 8010082:	609a      	str	r2, [r3, #8]
}
 8010084:	4770      	bx	lr
 8010086:	bf00      	nop

08010088 <USB_DisableGlobalInt>:
{
 8010088:	4603      	mov	r3, r0
}
 801008a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801008c:	689a      	ldr	r2, [r3, #8]
 801008e:	f022 0201 	bic.w	r2, r2, #1
 8010092:	609a      	str	r2, [r3, #8]
}
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop

08010098 <USB_SetCurrentMode>:
{
 8010098:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801009a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801009c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801009e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80100a2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80100a4:	d00b      	beq.n	80100be <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80100a6:	b941      	cbnz	r1, 80100ba <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80100a8:	68c3      	ldr	r3, [r0, #12]
 80100aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100ae:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80100b0:	2032      	movs	r0, #50	; 0x32
 80100b2:	f7f6 f91f 	bl	80062f4 <HAL_Delay>
  return HAL_OK;
 80100b6:	2000      	movs	r0, #0
}
 80100b8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80100ba:	2001      	movs	r0, #1
}
 80100bc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80100be:	68c3      	ldr	r3, [r0, #12]
 80100c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80100c4:	60c3      	str	r3, [r0, #12]
 80100c6:	e7f3      	b.n	80100b0 <USB_SetCurrentMode+0x18>

080100c8 <USB_DevInit>:
{
 80100c8:	b084      	sub	sp, #16
 80100ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 80100ce:	2500      	movs	r5, #0
{
 80100d0:	af08      	add	r7, sp, #32
 80100d2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80100d6:	4604      	mov	r4, r0
 80100d8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80100da:	e887 000e 	stmia.w	r7, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80100de:	462a      	mov	r2, r5
 80100e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80100e2:	f105 0340 	add.w	r3, r5, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80100e6:	3501      	adds	r5, #1
    USBx->DIEPTXF[i] = 0U;
 80100e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 80100ec:	2d0f      	cmp	r5, #15
    USBx->DIEPTXF[i] = 0U;
 80100ee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80100f0:	d1f7      	bne.n	80100e2 <USB_DevInit+0x1a>
  if (cfg.vbus_sensing_enable == 0U)
 80100f2:	2e00      	cmp	r6, #0
 80100f4:	f040 80a2 	bne.w	801023c <USB_DevInit+0x174>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80100f8:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 80100fc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8010100:	f043 0302 	orr.w	r3, r3, #2
 8010104:	606b      	str	r3, [r5, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010108:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801010c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801010e:	6823      	ldr	r3, [r4, #0]
 8010110:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010114:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801011c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 801011e:	2300      	movs	r3, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010120:	f1bc 0f01 	cmp.w	ip, #1
  USBx_PCGCCTL = 0U;
 8010124:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010128:	682b      	ldr	r3, [r5, #0]
 801012a:	602b      	str	r3, [r5, #0]
  USBx_DEVICE->DCFG |= speed;
 801012c:	682b      	ldr	r3, [r5, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801012e:	d03a      	beq.n	80101a6 <USB_DevInit+0xde>
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8010130:	f1bc 0f03 	cmp.w	ip, #3
 8010134:	d037      	beq.n	80101a6 <USB_DevInit+0xde>
  USBx_DEVICE->DCFG |= speed;
 8010136:	f043 0303 	orr.w	r3, r3, #3
 801013a:	602b      	str	r3, [r5, #0]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801013c:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8010140:	4b44      	ldr	r3, [pc, #272]	; (8010254 <USB_DevInit+0x18c>)
 8010142:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 8010144:	e002      	b.n	801014c <USB_DevInit+0x84>
 8010146:	3b01      	subs	r3, #1
 8010148:	f000 8081 	beq.w	801024e <USB_DevInit+0x186>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801014c:	6920      	ldr	r0, [r4, #16]
 801014e:	f010 0020 	ands.w	r0, r0, #32
 8010152:	d1f8      	bne.n	8010146 <USB_DevInit+0x7e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010154:	2210      	movs	r2, #16
 8010156:	4b3f      	ldr	r3, [pc, #252]	; (8010254 <USB_DevInit+0x18c>)
 8010158:	6122      	str	r2, [r4, #16]
    if (++count > 200000U)
 801015a:	e001      	b.n	8010160 <USB_DevInit+0x98>
 801015c:	3b01      	subs	r3, #1
 801015e:	d074      	beq.n	801024a <USB_DevInit+0x182>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010160:	6922      	ldr	r2, [r4, #16]
 8010162:	06d2      	lsls	r2, r2, #27
 8010164:	d4fa      	bmi.n	801015c <USB_DevInit+0x94>
  USBx_DEVICE->DIEPMSK = 0U;
 8010166:	2200      	movs	r2, #0
 8010168:	612a      	str	r2, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801016a:	616a      	str	r2, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801016c:	61ea      	str	r2, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801016e:	b319      	cbz	r1, 80101b8 <USB_DevInit+0xf0>
 8010170:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010174:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010178:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 801017c:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801017e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8010182:	e009      	b.n	8010198 <USB_DevInit+0xd0>
      USBx_INEP(i)->DIEPCTL = 0U;
 8010184:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010188:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 801018a:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801018e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010192:	3320      	adds	r3, #32
 8010194:	428a      	cmp	r2, r1
 8010196:	d032      	beq.n	80101fe <USB_DevInit+0x136>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010198:	681f      	ldr	r7, [r3, #0]
 801019a:	2f00      	cmp	r7, #0
 801019c:	daf2      	bge.n	8010184 <USB_DevInit+0xbc>
      if (i == 0U)
 801019e:	b142      	cbz	r2, 80101b2 <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80101a0:	f8c3 8000 	str.w	r8, [r3]
 80101a4:	e7f0      	b.n	8010188 <USB_DevInit+0xc0>
    if (cfg.speed == USBD_HS_SPEED)
 80101a6:	2800      	cmp	r0, #0
 80101a8:	d0c7      	beq.n	801013a <USB_DevInit+0x72>
  USBx_DEVICE->DCFG |= speed;
 80101aa:	f043 0301 	orr.w	r3, r3, #1
 80101ae:	602b      	str	r3, [r5, #0]
  return HAL_OK;
 80101b0:	e7c4      	b.n	801013c <USB_DevInit+0x74>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80101b2:	f8c3 9000 	str.w	r9, [r3]
 80101b6:	e7e7      	b.n	8010188 <USB_DevInit+0xc0>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80101b8:	692b      	ldr	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80101ba:	2700      	movs	r7, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 80101bc:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 80101c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80101c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101c6:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 80101c8:	61a7      	str	r7, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80101ca:	6161      	str	r1, [r4, #20]
  if (cfg.dma_enable == 0U)
 80101cc:	b91a      	cbnz	r2, 80101d6 <USB_DevInit+0x10e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80101ce:	69a3      	ldr	r3, [r4, #24]
 80101d0:	f043 0310 	orr.w	r3, r3, #16
 80101d4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80101d6:	69a1      	ldr	r1, [r4, #24]
 80101d8:	4b1f      	ldr	r3, [pc, #124]	; (8010258 <USB_DevInit+0x190>)
  if (cfg.Sof_enable != 0U)
 80101da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80101dc:	430b      	orrs	r3, r1
 80101de:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80101e0:	b11a      	cbz	r2, 80101ea <USB_DevInit+0x122>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80101e2:	69a3      	ldr	r3, [r4, #24]
 80101e4:	f043 0308 	orr.w	r3, r3, #8
 80101e8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80101ea:	2e01      	cmp	r6, #1
 80101ec:	d103      	bne.n	80101f6 <USB_DevInit+0x12e>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80101ee:	69a2      	ldr	r2, [r4, #24]
 80101f0:	4b1a      	ldr	r3, [pc, #104]	; (801025c <USB_DevInit+0x194>)
 80101f2:	4313      	orrs	r3, r2
 80101f4:	61a3      	str	r3, [r4, #24]
}
 80101f6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101fa:	b004      	add	sp, #16
 80101fc:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101fe:	2200      	movs	r2, #0
 8010200:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010204:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010208:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801020c:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801020e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8010212:	e009      	b.n	8010228 <USB_DevInit+0x160>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010214:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010218:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801021a:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801021e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010222:	3320      	adds	r3, #32
 8010224:	428a      	cmp	r2, r1
 8010226:	d0c7      	beq.n	80101b8 <USB_DevInit+0xf0>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010228:	681f      	ldr	r7, [r3, #0]
 801022a:	2f00      	cmp	r7, #0
 801022c:	daf2      	bge.n	8010214 <USB_DevInit+0x14c>
      if (i == 0U)
 801022e:	b112      	cbz	r2, 8010236 <USB_DevInit+0x16e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010230:	f8c3 8000 	str.w	r8, [r3]
 8010234:	e7f0      	b.n	8010218 <USB_DevInit+0x150>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010236:	f8c3 9000 	str.w	r9, [r3]
 801023a:	e7ed      	b.n	8010218 <USB_DevInit+0x150>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801023c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801023e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8010242:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010246:	63a3      	str	r3, [r4, #56]	; 0x38
 8010248:	e769      	b.n	801011e <USB_DevInit+0x56>
    ret = HAL_ERROR;
 801024a:	2001      	movs	r0, #1
 801024c:	e78b      	b.n	8010166 <USB_DevInit+0x9e>
    ret = HAL_ERROR;
 801024e:	2001      	movs	r0, #1
 8010250:	e780      	b.n	8010154 <USB_DevInit+0x8c>
 8010252:	bf00      	nop
 8010254:	00030d40 	.word	0x00030d40
 8010258:	803c3800 	.word	0x803c3800
 801025c:	40000004 	.word	0x40000004

08010260 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010260:	0189      	lsls	r1, r1, #6
 8010262:	4a07      	ldr	r2, [pc, #28]	; (8010280 <USB_FlushTxFifo+0x20>)
 8010264:	f041 0120 	orr.w	r1, r1, #32
 8010268:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 801026a:	e001      	b.n	8010270 <USB_FlushTxFifo+0x10>
 801026c:	3a01      	subs	r2, #1
 801026e:	d005      	beq.n	801027c <USB_FlushTxFifo+0x1c>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010270:	6903      	ldr	r3, [r0, #16]
 8010272:	f013 0320 	ands.w	r3, r3, #32
 8010276:	d1f9      	bne.n	801026c <USB_FlushTxFifo+0xc>
  return HAL_OK;
 8010278:	4618      	mov	r0, r3
 801027a:	4770      	bx	lr
      return HAL_TIMEOUT;
 801027c:	2003      	movs	r0, #3
}
 801027e:	4770      	bx	lr
 8010280:	00030d40 	.word	0x00030d40

08010284 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010284:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010288:	f013 0006 	ands.w	r0, r3, #6
 801028c:	d004      	beq.n	8010298 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801028e:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8010292:	bf14      	ite	ne
 8010294:	2002      	movne	r0, #2
 8010296:	200f      	moveq	r0, #15
}
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop

0801029c <USB_ActivateEndpoint>:
{
 801029c:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 801029e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80102a0:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d01f      	beq.n	80102e6 <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80102a6:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80102aa:	f002 050f 	and.w	r5, r2, #15
 80102ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80102b2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80102b6:	69e2      	ldr	r2, [r4, #28]
 80102b8:	40ab      	lsls	r3, r5
 80102ba:	4313      	orrs	r3, r2
 80102bc:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80102be:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80102c2:	041b      	lsls	r3, r3, #16
 80102c4:	d40c      	bmi.n	80102e0 <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102c6:	688b      	ldr	r3, [r1, #8]
 80102c8:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 80102cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80102d0:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80102d2:	4a15      	ldr	r2, [pc, #84]	; (8010328 <USB_ActivateEndpoint+0x8c>)
 80102d4:	4323      	orrs	r3, r4
 80102d6:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80102da:	431a      	orrs	r2, r3
 80102dc:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 80102e0:	2000      	movs	r0, #0
 80102e2:	bc70      	pop	{r4, r5, r6}
 80102e4:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80102e6:	f002 040f 	and.w	r4, r2, #15
 80102ea:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 80102ee:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80102f2:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80102f6:	40a3      	lsls	r3, r4
 80102f8:	4333      	orrs	r3, r6
 80102fa:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80102fc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8010300:	041c      	lsls	r4, r3, #16
 8010302:	d4ed      	bmi.n	80102e0 <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010304:	688b      	ldr	r3, [r1, #8]
 8010306:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 801030a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801030e:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010310:	4905      	ldr	r1, [pc, #20]	; (8010328 <USB_ActivateEndpoint+0x8c>)
 8010312:	432b      	orrs	r3, r5
 8010314:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8010318:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 801031c:	4311      	orrs	r1, r2
}
 801031e:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010320:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8010324:	2000      	movs	r0, #0
 8010326:	4770      	bx	lr
 8010328:	10008000 	.word	0x10008000

0801032c <USB_DeactivateEndpoint>:
{
 801032c:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 801032e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8010330:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8010332:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010334:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8010338:	d02b      	beq.n	8010392 <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801033a:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 801033e:	2a00      	cmp	r2, #0
 8010340:	db1a      	blt.n	8010378 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010346:	f003 030f 	and.w	r3, r3, #15
 801034a:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 801034e:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010352:	4925      	ldr	r1, [pc, #148]	; (80103e8 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010354:	ea24 0403 	bic.w	r4, r4, r3
 8010358:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801035c:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8010360:	ea22 0303 	bic.w	r3, r2, r3
 8010364:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8010368:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801036a:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 801036e:	4019      	ands	r1, r3
 8010370:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 8010374:	bc30      	pop	{r4, r5}
 8010376:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010378:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 801037c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8010380:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010384:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8010388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801038c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 8010390:	e7d7      	b.n	8010342 <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010392:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 8010396:	2a00      	cmp	r2, #0
 8010398:	da0b      	bge.n	80103b2 <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801039a:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 801039e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80103a2:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80103a6:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 80103aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80103ae:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103b2:	2201      	movs	r2, #1
 80103b4:	f003 030f 	and.w	r3, r3, #15
 80103b8:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 80103bc:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80103c0:	490a      	ldr	r1, [pc, #40]	; (80103ec <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103c2:	ea24 0403 	bic.w	r4, r4, r3
 80103c6:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80103ca:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 80103ce:	ea22 0303 	bic.w	r3, r2, r3
 80103d2:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80103d6:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80103d8:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 80103dc:	4019      	ands	r1, r3
 80103de:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 80103e2:	bc30      	pop	{r4, r5}
 80103e4:	4770      	bx	lr
 80103e6:	bf00      	nop
 80103e8:	eff37800 	.word	0xeff37800
 80103ec:	ec337800 	.word	0xec337800

080103f0 <USB_EPStartXfer>:
{
 80103f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 80103f4:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80103f6:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80103f8:	2d01      	cmp	r5, #1
 80103fa:	d054      	beq.n	80104a6 <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80103fc:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8010400:	4f82      	ldr	r7, [pc, #520]	; (801060c <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 8010402:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010404:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 8010408:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801040c:	4e80      	ldr	r6, [pc, #512]	; (8010610 <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801040e:	ea0c 0707 	and.w	r7, ip, r7
 8010412:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010414:	691f      	ldr	r7, [r3, #16]
 8010416:	403e      	ands	r6, r7
 8010418:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 801041a:	b395      	cbz	r5, 8010482 <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801041c:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 801041e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010420:	4f7c      	ldr	r7, [pc, #496]	; (8010614 <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010422:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010424:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010428:	f105 35ff 	add.w	r5, r5, #4294967295
 801042c:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010430:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010434:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010438:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801043c:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010440:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010444:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010446:	691d      	ldr	r5, [r3, #16]
 8010448:	ea46 0605 	orr.w	r6, r6, r5
 801044c:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 801044e:	d025      	beq.n	801049c <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 8010450:	78cb      	ldrb	r3, [r1, #3]
 8010452:	2b01      	cmp	r3, #1
 8010454:	d10c      	bne.n	8010470 <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010456:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 801045a:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801045e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8010462:	bf0c      	ite	eq
 8010464:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010468:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 801046c:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010470:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8010474:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010478:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 801047c:	2000      	movs	r0, #0
 801047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010482:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8010484:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010486:	691e      	ldr	r6, [r3, #16]
 8010488:	f3c5 0512 	ubfx	r5, r5, #0, #19
 801048c:	ea45 0506 	orr.w	r5, r5, r6
 8010490:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010492:	691d      	ldr	r5, [r3, #16]
 8010494:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8010498:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 801049a:	d1d9      	bne.n	8010450 <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 801049c:	68ca      	ldr	r2, [r1, #12]
 801049e:	2a00      	cmp	r2, #0
 80104a0:	d0d6      	beq.n	8010450 <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104a2:	615a      	str	r2, [r3, #20]
 80104a4:	e7d4      	b.n	8010450 <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 80104a6:	694e      	ldr	r6, [r1, #20]
 80104a8:	2e00      	cmp	r6, #0
 80104aa:	d040      	beq.n	801052e <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104ac:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104b0:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104b4:	f8df a154 	ldr.w	sl, [pc, #340]	; 801060c <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80104b8:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104bc:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104c0:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104c4:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 80104c8:	ea09 0a0a 	and.w	sl, r9, sl
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104cc:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104d0:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8010610 <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104d4:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104d8:	f8d3 a010 	ldr.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104dc:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104e0:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104e4:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8010614 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104e8:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80104ec:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 80104f0:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80104f4:	ea4c 0c08 	orr.w	ip, ip, r8
 80104f8:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80104fc:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8010500:	ea47 070c 	orr.w	r7, r7, ip
 8010504:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 8010506:	78cf      	ldrb	r7, [r1, #3]
 8010508:	2f01      	cmp	r7, #1
 801050a:	d04e      	beq.n	80105aa <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 801050c:	2a01      	cmp	r2, #1
 801050e:	d068      	beq.n	80105e2 <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010510:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010514:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010518:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801051c:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801051e:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010522:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8010526:	4325      	orrs	r5, r4
 8010528:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 801052c:	e7a6      	b.n	801047c <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801052e:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8010532:	4f37      	ldr	r7, [pc, #220]	; (8010610 <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010534:	4d35      	ldr	r5, [pc, #212]	; (801060c <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 8010536:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010538:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 801053c:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 8010540:	ea0e 0707 	and.w	r7, lr, r7
 8010544:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010546:	691f      	ldr	r7, [r3, #16]
 8010548:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 801054c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801054e:	691f      	ldr	r7, [r3, #16]
 8010550:	ea05 0507 	and.w	r5, r5, r7
 8010554:	611d      	str	r5, [r3, #16]
 8010556:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 8010558:	d038      	beq.n	80105cc <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801055a:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801055e:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010560:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8010564:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8010568:	d188      	bne.n	801047c <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801056a:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 801056e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010572:	681d      	ldr	r5, [r3, #0]
 8010574:	bf0c      	ite	eq
 8010576:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801057a:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 801057e:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 8010580:	2a00      	cmp	r2, #0
 8010582:	f47f af7b 	bne.w	801047c <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8010586:	b2b6      	uxth	r6, r6
 8010588:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 801058a:	08b6      	lsrs	r6, r6, #2
 801058c:	f43f af76 	beq.w	801047c <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010590:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010592:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8010596:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 801059a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801059e:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 80105a2:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80105a4:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80105a6:	d1fa      	bne.n	801059e <USB_EPStartXfer+0x1ae>
 80105a8:	e768      	b.n	801047c <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80105aa:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 80105ac:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80105ae:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 80105b2:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80105b4:	691d      	ldr	r5, [r3, #16]
 80105b6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80105ba:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80105bc:	d016      	beq.n	80105ec <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105be:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 80105c2:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 80105c6:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80105ca:	e7ce      	b.n	801056a <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 80105cc:	690a      	ldr	r2, [r1, #16]
 80105ce:	b95a      	cbnz	r2, 80105e8 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 80105d0:	2f01      	cmp	r7, #1
 80105d2:	d00e      	beq.n	80105f2 <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105d4:	681a      	ldr	r2, [r3, #0]
}
 80105d6:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105d8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80105dc:	601a      	str	r2, [r3, #0]
}
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 80105e2:	690a      	ldr	r2, [r1, #16]
 80105e4:	2a00      	cmp	r2, #0
 80105e6:	d0f5      	beq.n	80105d4 <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80105e8:	615a      	str	r2, [r3, #20]
 80105ea:	e7f1      	b.n	80105d0 <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 80105ec:	690a      	ldr	r2, [r1, #16]
 80105ee:	2a00      	cmp	r2, #0
 80105f0:	d1fa      	bne.n	80105e8 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80105f2:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 80105f6:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80105fa:	681a      	ldr	r2, [r3, #0]
 80105fc:	bf0c      	ite	eq
 80105fe:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010602:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8010606:	601a      	str	r2, [r3, #0]
 8010608:	e7e4      	b.n	80105d4 <USB_EPStartXfer+0x1e4>
 801060a:	bf00      	nop
 801060c:	fff80000 	.word	0xfff80000
 8010610:	e007ffff 	.word	0xe007ffff
 8010614:	1ff80000 	.word	0x1ff80000

08010618 <USB_EP0StartXfer>:
{
 8010618:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 801061a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801061c:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 801061e:	2b01      	cmp	r3, #1
 8010620:	d029      	beq.n	8010676 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010622:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8010626:	4d3d      	ldr	r5, [pc, #244]	; (801071c <USB_EP0StartXfer+0x104>)
    if (ep->xfer_len > 0U)
 8010628:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801062a:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 801062e:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010632:	4c3b      	ldr	r4, [pc, #236]	; (8010720 <USB_EP0StartXfer+0x108>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010634:	403d      	ands	r5, r7
 8010636:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010638:	691d      	ldr	r5, [r3, #16]
 801063a:	402c      	ands	r4, r5
 801063c:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 801063e:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8010640:	b106      	cbz	r6, 8010644 <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 8010642:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010644:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010646:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 801064a:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801064c:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8010650:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010652:	691d      	ldr	r5, [r3, #16]
 8010654:	ea44 0405 	orr.w	r4, r4, r5
 8010658:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 801065a:	d007      	beq.n	801066c <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801065c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8010660:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010664:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8010668:	2000      	movs	r0, #0
 801066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 801066c:	68ca      	ldr	r2, [r1, #12]
 801066e:	2a00      	cmp	r2, #0
 8010670:	d0f4      	beq.n	801065c <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010672:	615a      	str	r2, [r3, #20]
 8010674:	e7f2      	b.n	801065c <USB_EP0StartXfer+0x44>
    if (ep->xfer_len == 0U)
 8010676:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010678:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 801067c:	b38d      	cbz	r5, 80106e2 <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801067e:	f8d3 e910 	ldr.w	lr, [r3, #2320]	; 0x910
 8010682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010686:	4f25      	ldr	r7, [pc, #148]	; (801071c <USB_EP0StartXfer+0x104>)
      if (ep->xfer_len > ep->maxpacket)
 8010688:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801068c:	ea0e 0707 	and.w	r7, lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010690:	4e23      	ldr	r6, [pc, #140]	; (8010720 <USB_EP0StartXfer+0x108>)
      if (ep->xfer_len > ep->maxpacket)
 8010692:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010694:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010696:	691f      	ldr	r7, [r3, #16]
 8010698:	ea06 0607 	and.w	r6, r6, r7
 801069c:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 801069e:	d902      	bls.n	80106a6 <USB_EP0StartXfer+0x8e>
        ep->xfer_len = ep->maxpacket;
 80106a0:	4665      	mov	r5, ip
 80106a2:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106a6:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80106a8:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 80106ac:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106ae:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80106b2:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80106b4:	691e      	ldr	r6, [r3, #16]
 80106b6:	ea45 0506 	orr.w	r5, r5, r6
 80106ba:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80106bc:	d025      	beq.n	801070a <USB_EP0StartXfer+0xf2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106be:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 80106c0:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106c2:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80106c6:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 80106c8:	2900      	cmp	r1, #0
 80106ca:	d0cd      	beq.n	8010668 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80106cc:	f004 020f 	and.w	r2, r4, #15
 80106d0:	2401      	movs	r4, #1
 80106d2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80106d6:	4094      	lsls	r4, r2
 80106d8:	431c      	orrs	r4, r3
 80106da:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 80106de:	2000      	movs	r0, #0
 80106e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106e2:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80106e6:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106ea:	4e0d      	ldr	r6, [pc, #52]	; (8010720 <USB_EP0StartXfer+0x108>)
    if (dma == 1U)
 80106ec:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f2:	ea06 0607 	and.w	r6, r6, r7
 80106f6:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80106f8:	691e      	ldr	r6, [r3, #16]
 80106fa:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 80106fe:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010700:	691e      	ldr	r6, [r3, #16]
 8010702:	ea05 0506 	and.w	r5, r5, r6
 8010706:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8010708:	d1d9      	bne.n	80106be <USB_EP0StartXfer+0xa6>
      if ((uint32_t)ep->dma_addr != 0U)
 801070a:	690a      	ldr	r2, [r1, #16]
 801070c:	b102      	cbz	r2, 8010710 <USB_EP0StartXfer+0xf8>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801070e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010710:	681a      	ldr	r2, [r3, #0]
}
 8010712:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010714:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8010718:	601a      	str	r2, [r3, #0]
}
 801071a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801071c:	fff80000 	.word	0xfff80000
 8010720:	e007ffff 	.word	0xe007ffff

08010724 <USB_WritePacket>:
{
 8010724:	b410      	push	{r4}
 8010726:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 801072a:	b964      	cbnz	r4, 8010746 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 801072c:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 801072e:	089b      	lsrs	r3, r3, #2
 8010730:	d009      	beq.n	8010746 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010732:	3201      	adds	r2, #1
 8010734:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010738:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 801073c:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8010740:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010742:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8010744:	d1fa      	bne.n	801073c <USB_WritePacket+0x18>
}
 8010746:	2000      	movs	r0, #0
 8010748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop

08010750 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010750:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8010752:	0892      	lsrs	r2, r2, #2
 8010754:	d00c      	beq.n	8010770 <USB_ReadPacket+0x20>
{
 8010756:	b410      	push	{r4}
 8010758:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 801075c:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010760:	6823      	ldr	r3, [r4, #0]
 8010762:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8010766:	4281      	cmp	r1, r0
 8010768:	d1fa      	bne.n	8010760 <USB_ReadPacket+0x10>
}
 801076a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801076e:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8010770:	4608      	mov	r0, r1
}
 8010772:	4770      	bx	lr

08010774 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8010774:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8010776:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8010778:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801077a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801077e:	d00c      	beq.n	801079a <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010780:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8010784:	b10b      	cbz	r3, 801078a <USB_EPSetStall+0x16>
 8010786:	2a00      	cmp	r2, #0
 8010788:	da14      	bge.n	80107b4 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801078a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 801078e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010792:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8010796:	2000      	movs	r0, #0
 8010798:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801079a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 801079e:	2a00      	cmp	r2, #0
 80107a0:	db00      	blt.n	80107a4 <USB_EPSetStall+0x30>
 80107a2:	b973      	cbnz	r3, 80107c2 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107a4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80107a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107ac:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80107b0:	2000      	movs	r0, #0
 80107b2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80107b4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80107b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107bc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80107c0:	e7e3      	b.n	801078a <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80107c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80107c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80107ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80107ce:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80107d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80107d6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80107da:	e7e9      	b.n	80107b0 <USB_EPSetStall+0x3c>

080107dc <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80107dc:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80107de:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80107e0:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80107e2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80107e6:	d013      	beq.n	8010810 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80107e8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80107ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80107f0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80107f4:	78cb      	ldrb	r3, [r1, #3]
 80107f6:	3b02      	subs	r3, #2
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	d901      	bls.n	8010800 <USB_EPClearStall+0x24>
}
 80107fc:	2000      	movs	r0, #0
 80107fe:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010800:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8010804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010808:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801080c:	2000      	movs	r0, #0
 801080e:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010810:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8010814:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010818:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801081c:	78cb      	ldrb	r3, [r1, #3]
 801081e:	3b02      	subs	r3, #2
 8010820:	2b01      	cmp	r3, #1
 8010822:	d8eb      	bhi.n	80107fc <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010824:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8010828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801082c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8010830:	2000      	movs	r0, #0
 8010832:	4770      	bx	lr

08010834 <USB_SetDevAddress>:
{
 8010834:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010836:	0109      	lsls	r1, r1, #4
}
 8010838:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801083a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801083e:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010842:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8010846:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801084a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 801084e:	4311      	orrs	r1, r2
 8010850:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8010854:	4770      	bx	lr
 8010856:	bf00      	nop

08010858 <USB_DevConnect>:
{
 8010858:	b508      	push	{r3, lr}
 801085a:	4603      	mov	r3, r0
  HAL_Delay(3U);
 801085c:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801085e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 8010862:	f022 0202 	bic.w	r2, r2, #2
 8010866:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  HAL_Delay(3U);
 801086a:	f7f5 fd43 	bl	80062f4 <HAL_Delay>
}
 801086e:	2000      	movs	r0, #0
 8010870:	bd08      	pop	{r3, pc}
 8010872:	bf00      	nop

08010874 <USB_DevDisconnect>:
{
 8010874:	b508      	push	{r3, lr}
 8010876:	4603      	mov	r3, r0
  HAL_Delay(3U);
 8010878:	2003      	movs	r0, #3
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801087a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
 801087e:	f042 0202 	orr.w	r2, r2, #2
 8010882:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  HAL_Delay(3U);
 8010886:	f7f5 fd35 	bl	80062f4 <HAL_Delay>
}
 801088a:	2000      	movs	r0, #0
 801088c:	bd08      	pop	{r3, pc}
 801088e:	bf00      	nop

08010890 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8010890:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8010892:	6980      	ldr	r0, [r0, #24]
}
 8010894:	4010      	ands	r0, r2
 8010896:	4770      	bx	lr

08010898 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8010898:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 801089c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80108a0:	69c0      	ldr	r0, [r0, #28]
 80108a2:	4018      	ands	r0, r3
}
 80108a4:	0c00      	lsrs	r0, r0, #16
 80108a6:	4770      	bx	lr

080108a8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80108a8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80108ac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80108b0:	69c0      	ldr	r0, [r0, #28]
 80108b2:	4018      	ands	r0, r3
}
 80108b4:	b280      	uxth	r0, r0
 80108b6:	4770      	bx	lr

080108b8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80108b8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80108bc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80108c0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80108c4:	6940      	ldr	r0, [r0, #20]
}
 80108c6:	4010      	ands	r0, r2
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop

080108cc <USB_ReadDevInEPInterrupt>:
{
 80108cc:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 80108ce:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80108d2:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 80108d6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80108da:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80108de:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80108e0:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80108e4:	01db      	lsls	r3, r3, #7
 80108e6:	b2db      	uxtb	r3, r3
 80108e8:	4323      	orrs	r3, r4
}
 80108ea:	bc30      	pop	{r4, r5}
 80108ec:	4018      	ands	r0, r3
 80108ee:	4770      	bx	lr

080108f0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80108f0:	6940      	ldr	r0, [r0, #20]
}
 80108f2:	f000 0001 	and.w	r0, r0, #1
 80108f6:	4770      	bx	lr

080108f8 <USB_ActivateSetup>:
{
 80108f8:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80108fa:	4a09      	ldr	r2, [pc, #36]	; (8010920 <USB_ActivateSetup+0x28>)
}
 80108fc:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80108fe:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8010902:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010904:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8010908:	4022      	ands	r2, r4
}
 801090a:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801090e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010912:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8010916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801091a:	604b      	str	r3, [r1, #4]
}
 801091c:	4770      	bx	lr
 801091e:	bf00      	nop
 8010920:	fffff800 	.word	0xfffff800

08010924 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010924:	4b14      	ldr	r3, [pc, #80]	; (8010978 <USB_EP0_OutStart+0x54>)
{
 8010926:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010928:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801092a:	429c      	cmp	r4, r3
 801092c:	d81a      	bhi.n	8010964 <USB_EP0_OutStart+0x40>
 801092e:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010932:	2300      	movs	r3, #0
  if (dma == 1U)
 8010934:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010936:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010938:	6903      	ldr	r3, [r0, #16]
 801093a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801093e:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010940:	6903      	ldr	r3, [r0, #16]
 8010942:	f043 0318 	orr.w	r3, r3, #24
 8010946:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010948:	6903      	ldr	r3, [r0, #16]
 801094a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801094e:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8010950:	d104      	bne.n	801095c <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010952:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010954:	6803      	ldr	r3, [r0, #0]
 8010956:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801095a:	6003      	str	r3, [r0, #0]
}
 801095c:	2000      	movs	r0, #0
 801095e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010962:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010964:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8010968:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 801096c:	2b00      	cmp	r3, #0
 801096e:	dae0      	bge.n	8010932 <USB_EP0_OutStart+0xe>
}
 8010970:	2000      	movs	r0, #0
 8010972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	4f54300a 	.word	0x4f54300a

0801097c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801097c:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801097e:	4903      	ldr	r1, [pc, #12]	; (801098c <MX_FATFS_Init+0x10>)
 8010980:	4803      	ldr	r0, [pc, #12]	; (8010990 <MX_FATFS_Init+0x14>)
 8010982:	f001 f96f 	bl	8011c64 <FATFS_LinkDriver>
 8010986:	4b03      	ldr	r3, [pc, #12]	; (8010994 <MX_FATFS_Init+0x18>)
 8010988:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801098a:	bd08      	pop	{r3, pc}
 801098c:	20023ab4 	.word	0x20023ab4
 8010990:	200002b8 	.word	0x200002b8
 8010994:	20023ab8 	.word	0x20023ab8

08010998 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8010998:	4b02      	ldr	r3, [pc, #8]	; (80109a4 <USER_initialize+0xc>)
 801099a:	2201      	movs	r2, #1
 801099c:	701a      	strb	r2, [r3, #0]
    return Stat;
 801099e:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	200002b4 	.word	0x200002b4

080109a8 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80109a8:	2000      	movs	r0, #0
 80109aa:	4770      	bx	lr

080109ac <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80109ac:	2001      	movs	r0, #1
 80109ae:	4770      	bx	lr

080109b0 <USER_write>:
 80109b0:	2000      	movs	r0, #0
 80109b2:	4770      	bx	lr

080109b4 <USER_status>:
 80109b4:	4b02      	ldr	r3, [pc, #8]	; (80109c0 <USER_status+0xc>)
 80109b6:	2201      	movs	r2, #1
 80109b8:	701a      	strb	r2, [r3, #0]
 80109ba:	7818      	ldrb	r0, [r3, #0]
 80109bc:	4770      	bx	lr
 80109be:	bf00      	nop
 80109c0:	200002b4 	.word	0x200002b4

080109c4 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80109c4:	2100      	movs	r1, #0
{
 80109c6:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 80109c8:	4608      	mov	r0, r1
{
 80109ca:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 80109cc:	f003 fde0 	bl	8014590 <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80109d0:	4e1e      	ldr	r6, [pc, #120]	; (8010a4c <MX_LWIP_Init+0x88>)
  ipaddr.addr = 0;
 80109d2:	2400      	movs	r4, #0
  gw.addr = 0;
 80109d4:	4b1e      	ldr	r3, [pc, #120]	; (8010a50 <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80109d6:	491f      	ldr	r1, [pc, #124]	; (8010a54 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80109d8:	4a1f      	ldr	r2, [pc, #124]	; (8010a58 <MX_LWIP_Init+0x94>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80109da:	4820      	ldr	r0, [pc, #128]	; (8010a5c <MX_LWIP_Init+0x98>)
 80109dc:	4d20      	ldr	r5, [pc, #128]	; (8010a60 <MX_LWIP_Init+0x9c>)
 80109de:	9002      	str	r0, [sp, #8]
 80109e0:	4630      	mov	r0, r6
 80109e2:	9400      	str	r4, [sp, #0]
  gw.addr = 0;
 80109e4:	601c      	str	r4, [r3, #0]
  ipaddr.addr = 0;
 80109e6:	600c      	str	r4, [r1, #0]
  netmask.addr = 0;
 80109e8:	6014      	str	r4, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80109ea:	9501      	str	r5, [sp, #4]
 80109ec:	f006 fbc6 	bl	801717c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80109f0:	4630      	mov	r0, r6
 80109f2:	f006 fc6d 	bl	80172d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80109f6:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80109fa:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 80109fc:	075b      	lsls	r3, r3, #29
 80109fe:	d522      	bpl.n	8010a46 <MX_LWIP_Init+0x82>
    netif_set_up(&gnetif);
 8010a00:	f006 fc6c 	bl	80172dc <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8010a04:	4917      	ldr	r1, [pc, #92]	; (8010a64 <MX_LWIP_Init+0xa0>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8010a06:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8010a08:	4810      	ldr	r0, [pc, #64]	; (8010a4c <MX_LWIP_Init+0x88>)
 8010a0a:	f006 fcf1 	bl	80173f0 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 8010a0e:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8010a10:	2101      	movs	r1, #1
 8010a12:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 8010a14:	4f14      	ldr	r7, [pc, #80]	; (8010a68 <MX_LWIP_Init+0xa4>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8010a16:	4d15      	ldr	r5, [pc, #84]	; (8010a6c <MX_LWIP_Init+0xa8>)
  osSemaphoreDef(Netif_SEM);
 8010a18:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8010a1c:	f001 fa08 	bl	8011e30 <osSemaphoreCreate>
 8010a20:	4b13      	ldr	r3, [pc, #76]	; (8010a70 <MX_LWIP_Init+0xac>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8010a22:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8010a24:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8010a26:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8010a28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010a2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010a2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8010a34:	4639      	mov	r1, r7
 8010a36:	a807      	add	r0, sp, #28
 8010a38:	f001 f946 	bl	8011cc8 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8010a3c:	4803      	ldr	r0, [pc, #12]	; (8010a4c <MX_LWIP_Init+0x88>)
 8010a3e:	f00d fa6f 	bl	801df20 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8010a42:	b00f      	add	sp, #60	; 0x3c
 8010a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8010a46:	f006 fc6b 	bl	8017320 <netif_set_down>
 8010a4a:	e7db      	b.n	8010a04 <MX_LWIP_Init+0x40>
 8010a4c:	20023f28 	.word	0x20023f28
 8010a50:	20023f6c 	.word	0x20023f6c
 8010a54:	20023f64 	.word	0x20023f64
 8010a58:	20023f68 	.word	0x20023f68
 8010a5c:	08014509 	.word	0x08014509
 8010a60:	08010d79 	.word	0x08010d79
 8010a64:	08010f51 	.word	0x08010f51
 8010a68:	20023f20 	.word	0x20023f20
 8010a6c:	08025afc 	.word	0x08025afc
 8010a70:	20001cb4 	.word	0x20001cb4

08010a74 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8010a74:	4b2d      	ldr	r3, [pc, #180]	; (8010b2c <low_level_output+0xb8>)
{
 8010a76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8010a7a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8010a7c:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8010a7e:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8010a80:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8010a82:	2900      	cmp	r1, #0
 8010a84:	d04f      	beq.n	8010b26 <low_level_output+0xb2>
  bufferoffset = 0;
 8010a86:	2500      	movs	r5, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010a88:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8010a8c:	46a8      	mov	r8, r5
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010a8e:	6822      	ldr	r2, [r4, #0]
 8010a90:	2a00      	cmp	r2, #0
 8010a92:	db1b      	blt.n	8010acc <low_level_output+0x58>
      byteslefttocopy = q->len;
 8010a94:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010a98:	1956      	adds	r6, r2, r5
 8010a9a:	454e      	cmp	r6, r9
 8010a9c:	d93e      	bls.n	8010b1c <low_level_output+0xa8>
      payloadoffset = 0;
 8010a9e:	2700      	movs	r7, #0
 8010aa0:	e002      	b.n	8010aa8 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010aa2:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8010aa4:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010aa6:	d923      	bls.n	8010af0 <low_level_output+0x7c>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8010aa8:	eba9 0a05 	sub.w	sl, r9, r5
 8010aac:	f8db 1004 	ldr.w	r1, [fp, #4]
 8010ab0:	1958      	adds	r0, r3, r5

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8010ab2:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8010ab4:	4439      	add	r1, r7
 8010ab6:	4652      	mov	r2, sl
 8010ab8:	f00f fefa 	bl	80208b0 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8010abc:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8010abe:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8010ac2:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010ac4:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8010ac6:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010ac8:	42ab      	cmp	r3, r5
 8010aca:	daea      	bge.n	8010aa2 <low_level_output+0x2e>
        errval = ERR_USE;
 8010acc:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8010ad0:	4b16      	ldr	r3, [pc, #88]	; (8010b2c <low_level_output+0xb8>)
 8010ad2:	f241 0214 	movw	r2, #4116	; 0x1014
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	5899      	ldr	r1, [r3, r2]
 8010ada:	0689      	lsls	r1, r1, #26
 8010adc:	d505      	bpl.n	8010aea <low_level_output+0x76>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8010ade:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8010ae0:	f241 0104 	movw	r1, #4100	; 0x1004
 8010ae4:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8010ae6:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 8010ae8:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 8010aea:	b003      	add	sp, #12
 8010aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af0:	4618      	mov	r0, r3
 8010af2:	4635      	mov	r5, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8010af4:	f8db 1004 	ldr.w	r1, [fp, #4]
 8010af8:	4632      	mov	r2, r6
 8010afa:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8010afc:	44b0      	add	r8, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8010afe:	4439      	add	r1, r7
 8010b00:	f00f fed6 	bl	80208b0 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8010b04:	f8db b000 	ldr.w	fp, [fp]
 8010b08:	9b01      	ldr	r3, [sp, #4]
 8010b0a:	f1bb 0f00 	cmp.w	fp, #0
 8010b0e:	d1be      	bne.n	8010a8e <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8010b10:	4641      	mov	r1, r8
 8010b12:	4806      	ldr	r0, [pc, #24]	; (8010b2c <low_level_output+0xb8>)
 8010b14:	f7f7 fd18 	bl	8008548 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8010b18:	2000      	movs	r0, #0
 8010b1a:	e7d9      	b.n	8010ad0 <low_level_output+0x5c>
 8010b1c:	1958      	adds	r0, r3, r5
      payloadoffset = 0;
 8010b1e:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010b20:	4635      	mov	r5, r6
      byteslefttocopy = q->len;
 8010b22:	4616      	mov	r6, r2
 8010b24:	e7e6      	b.n	8010af4 <low_level_output+0x80>
  uint32_t framelength = 0;
 8010b26:	4688      	mov	r8, r1
 8010b28:	e7f2      	b.n	8010b10 <low_level_output+0x9c>
 8010b2a:	bf00      	nop
 8010b2c:	20025840 	.word	0x20025840

08010b30 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8010b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b34:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8010c48 <ethernetif_input+0x118>
 8010b38:	b083      	sub	sp, #12
 8010b3a:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8010b3c:	4b40      	ldr	r3, [pc, #256]	; (8010c40 <ethernetif_input+0x110>)
 8010b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8010b42:	6818      	ldr	r0, [r3, #0]
 8010b44:	f001 f99a 	bl	8011e7c <osSemaphoreWait>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d1f7      	bne.n	8010b3c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8010b4c:	483d      	ldr	r0, [pc, #244]	; (8010c44 <ethernetif_input+0x114>)
 8010b4e:	f00f faa7 	bl	80200a0 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8010b52:	483d      	ldr	r0, [pc, #244]	; (8010c48 <ethernetif_input+0x118>)
 8010b54:	f7f7 fd78 	bl	8008648 <HAL_ETH_GetReceivedFrame_IT>
 8010b58:	4604      	mov	r4, r0
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d167      	bne.n	8010c2e <ethernetif_input+0xfe>
  len = heth.RxFrameInfos.length;
 8010b5e:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8010b62:	bb59      	cbnz	r1, 8010bbc <ethernetif_input+0x8c>
  struct pbuf *p = NULL;
 8010b64:	2300      	movs	r3, #0
 8010b66:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010b68:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8010b6c:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010b70:	b140      	cbz	r0, 8010b84 <ethernetif_input+0x54>
 8010b72:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8010b74:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010b76:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8010b78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010b7c:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8010b7e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8010b80:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010b82:	d1f7      	bne.n	8010b74 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 8010b84:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8010b86:	f8d9 3000 	ldr.w	r3, [r9]
 8010b8a:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 8010b8e:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8010b92:	5899      	ldr	r1, [r3, r2]
 8010b94:	0609      	lsls	r1, r1, #24
 8010b96:	d505      	bpl.n	8010ba4 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8010b98:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 8010b9a:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8010b9e:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 8010ba4:	9800      	ldr	r0, [sp, #0]
 8010ba6:	2800      	cmp	r0, #0
 8010ba8:	d041      	beq.n	8010c2e <ethernetif_input+0xfe>
        {
          if (netif->input( p, netif) != ERR_OK )
 8010baa:	9901      	ldr	r1, [sp, #4]
 8010bac:	690b      	ldr	r3, [r1, #16]
 8010bae:	4798      	blx	r3
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	d140      	bne.n	8010c36 <ethernetif_input+0x106>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8010bb4:	4823      	ldr	r0, [pc, #140]	; (8010c44 <ethernetif_input+0x114>)
 8010bb6:	f00f fa79 	bl	80200ac <sys_mutex_unlock>
      } while(p!=NULL);
 8010bba:	e7c7      	b.n	8010b4c <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8010bbc:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8010bc0:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8010bc4:	f006 fd64 	bl	8017690 <pbuf_alloc>
  if (p != NULL)
 8010bc8:	4606      	mov	r6, r0
 8010bca:	9000      	str	r0, [sp, #0]
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d0c9      	beq.n	8010b64 <ethernetif_input+0x34>
    bufferoffset = 0;
 8010bd0:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8010bd2:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010bd4:	f240 58f4 	movw	r8, #1524	; 0x5f4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8010bd8:	46ab      	mov	fp, r5
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010bda:	1854      	adds	r4, r2, r1
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8010bdc:	f8d9 7030 	ldr.w	r7, [r9, #48]	; 0x30
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010be0:	4544      	cmp	r4, r8
 8010be2:	d921      	bls.n	8010c28 <ethernetif_input+0xf8>
      payloadoffset = 0;
 8010be4:	2500      	movs	r5, #0
 8010be6:	465b      	mov	r3, fp
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8010be8:	eba8 0a01 	sub.w	sl, r8, r1
 8010bec:	6870      	ldr	r0, [r6, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8010bee:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8010bf2:	4419      	add	r1, r3
 8010bf4:	4428      	add	r0, r5
 8010bf6:	4652      	mov	r2, sl
 8010bf8:	f00f fe5a 	bl	80208b0 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8010bfc:	68ff      	ldr	r7, [r7, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010bfe:	4544      	cmp	r4, r8
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8010c00:	4455      	add	r5, sl
        bufferoffset = 0;
 8010c02:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8010c06:	68bb      	ldr	r3, [r7, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010c08:	d8ee      	bhi.n	8010be8 <ethernetif_input+0xb8>
 8010c0a:	469b      	mov	fp, r3
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8010c0c:	4619      	mov	r1, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8010c0e:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8010c10:	6870      	ldr	r0, [r6, #4]
 8010c12:	4428      	add	r0, r5
 8010c14:	f00f fe4c 	bl	80208b0 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8010c18:	6836      	ldr	r6, [r6, #0]
 8010c1a:	2e00      	cmp	r6, #0
 8010c1c:	d0a4      	beq.n	8010b68 <ethernetif_input+0x38>
 8010c1e:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8010c20:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8010c22:	1854      	adds	r4, r2, r1
 8010c24:	4544      	cmp	r4, r8
 8010c26:	d8dd      	bhi.n	8010be4 <ethernetif_input+0xb4>
 8010c28:	4459      	add	r1, fp
      payloadoffset = 0;
 8010c2a:	2500      	movs	r5, #0
 8010c2c:	e7f0      	b.n	8010c10 <ethernetif_input+0xe0>
        UNLOCK_TCPIP_CORE();
 8010c2e:	4805      	ldr	r0, [pc, #20]	; (8010c44 <ethernetif_input+0x114>)
 8010c30:	f00f fa3c 	bl	80200ac <sys_mutex_unlock>
      } while(p!=NULL);
 8010c34:	e782      	b.n	8010b3c <ethernetif_input+0xc>
            pbuf_free(p);
 8010c36:	9800      	ldr	r0, [sp, #0]
 8010c38:	f006 fcbc 	bl	80175b4 <pbuf_free>
 8010c3c:	e7ba      	b.n	8010bb4 <ethernetif_input+0x84>
 8010c3e:	bf00      	nop
 8010c40:	20001cb8 	.word	0x20001cb8
 8010c44:	20027098 	.word	0x20027098
 8010c48:	20025840 	.word	0x20025840

08010c4c <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8010c4c:	4b42      	ldr	r3, [pc, #264]	; (8010d58 <HAL_ETH_MspInit+0x10c>)
 8010c4e:	6802      	ldr	r2, [r0, #0]
{
 8010c50:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8010c52:	429a      	cmp	r2, r3
{
 8010c54:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010c56:	f04f 0400 	mov.w	r4, #0
 8010c5a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8010c5e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8010c62:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8010c64:	d001      	beq.n	8010c6a <HAL_ETH_MspInit+0x1e>
}
 8010c66:	b00d      	add	sp, #52	; 0x34
 8010c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8010c6a:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c6e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8010c70:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c72:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8010c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010c76:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010c78:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 8010c7a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8010c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8010c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c82:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8010c86:	9200      	str	r2, [sp, #0]
 8010c88:	9a00      	ldr	r2, [sp, #0]
 8010c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c8c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010c90:	631a      	str	r2, [r3, #48]	; 0x30
 8010c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c94:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8010c98:	9201      	str	r2, [sp, #4]
 8010c9a:	9a01      	ldr	r2, [sp, #4]
 8010c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8010ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8010ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ca6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8010caa:	9202      	str	r2, [sp, #8]
 8010cac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cb0:	f042 0204 	orr.w	r2, r2, #4
 8010cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8010cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cb8:	f002 0204 	and.w	r2, r2, #4
 8010cbc:	9203      	str	r2, [sp, #12]
 8010cbe:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cc2:	f042 0201 	orr.w	r2, r2, #1
 8010cc6:	631a      	str	r2, [r3, #48]	; 0x30
 8010cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cca:	f002 0201 	and.w	r2, r2, #1
 8010cce:	9204      	str	r2, [sp, #16]
 8010cd0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cd4:	433a      	orrs	r2, r7
 8010cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8010cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010cda:	403a      	ands	r2, r7
 8010cdc:	9205      	str	r2, [sp, #20]
 8010cde:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010ce2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8010ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8010cea:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010cf0:	481a      	ldr	r0, [pc, #104]	; (8010d5c <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cf2:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8010cf4:	9306      	str	r3, [sp, #24]
 8010cf6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cf8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010cfa:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010cfe:	f7f8 f9eb 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8010d02:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d04:	a907      	add	r1, sp, #28
 8010d06:	4816      	ldr	r0, [pc, #88]	; (8010d60 <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8010d08:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d0a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d0c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d0e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010d12:	f7f8 f9e1 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8010d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8010d1a:	a907      	add	r1, sp, #28
 8010d1c:	4811      	ldr	r0, [pc, #68]	; (8010d64 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8010d1e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d20:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d22:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d24:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8010d28:	f7f8 f9d6 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8010d2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d30:	a907      	add	r1, sp, #28
 8010d32:	480d      	ldr	r0, [pc, #52]	; (8010d68 <HAL_ETH_MspInit+0x11c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8010d34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d36:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d38:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8010d3a:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8010d3e:	f7f8 f9cb 	bl	80090d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8010d42:	4622      	mov	r2, r4
 8010d44:	2106      	movs	r1, #6
 8010d46:	203d      	movs	r0, #61	; 0x3d
 8010d48:	f7f5 ff18 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8010d4c:	203d      	movs	r0, #61	; 0x3d
 8010d4e:	f7f5 ff5f 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 8010d52:	b00d      	add	sp, #52	; 0x34
 8010d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d56:	bf00      	nop
 8010d58:	40028000 	.word	0x40028000
 8010d5c:	40020800 	.word	0x40020800
 8010d60:	40020000 	.word	0x40020000
 8010d64:	40020400 	.word	0x40020400
 8010d68:	40021800 	.word	0x40021800

08010d6c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8010d6c:	4b01      	ldr	r3, [pc, #4]	; (8010d74 <HAL_ETH_RxCpltCallback+0x8>)
 8010d6e:	6818      	ldr	r0, [r3, #0]
 8010d70:	f001 b8b0 	b.w	8011ed4 <osSemaphoreRelease>
 8010d74:	20001cb8 	.word	0x20001cb8

08010d78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8010d78:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010d7a:	4604      	mov	r4, r0
{
 8010d7c:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	f000 8094 	beq.w	8010eac <ethernetif_init+0x134>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8010d84:	f247 4173 	movw	r1, #29811	; 0x7473
  heth.Instance = ETH;
 8010d88:	4d4c      	ldr	r5, [pc, #304]	; (8010ebc <ethernetif_init+0x144>)
  uint32_t regvalue = 0;
 8010d8a:	f04f 0e00 	mov.w	lr, #0
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010d8e:	484c      	ldr	r0, [pc, #304]	; (8010ec0 <ethernetif_init+0x148>)
  netif->name[0] = IFNAME0;
 8010d90:	86e1      	strh	r1, [r4, #54]	; 0x36
  heth.Init.MACAddr = &MACAddr[0];
 8010d92:	af01      	add	r7, sp, #4
  heth.Instance = ETH;
 8010d94:	4a4b      	ldr	r2, [pc, #300]	; (8010ec4 <ethernetif_init+0x14c>)
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010d96:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  MACAddr[0] = 0x00;
 8010d9a:	4b4b      	ldr	r3, [pc, #300]	; (8010ec8 <ethernetif_init+0x150>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010d9c:	494b      	ldr	r1, [pc, #300]	; (8010ecc <ethernetif_init+0x154>)
  uint32_t regvalue = 0;
 8010d9e:	f8cd e000 	str.w	lr, [sp]
  MACAddr[0] = 0x00;
 8010da2:	9301      	str	r3, [sp, #4]
  heth.Instance = ETH;
 8010da4:	602a      	str	r2, [r5, #0]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010da6:	6803      	ldr	r3, [r0, #0]
 8010da8:	680e      	ldr	r6, [r1, #0]
 8010daa:	4a49      	ldr	r2, [pc, #292]	; (8010ed0 <ethernetif_init+0x158>)
 8010dac:	4073      	eors	r3, r6
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8010dae:	f8a5 e010 	strh.w	lr, [r5, #16]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010db2:	6816      	ldr	r6, [r2, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010db4:	f8df e140 	ldr.w	lr, [pc, #320]	; 8010ef8 <ethernetif_init+0x180>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8010db8:	4073      	eors	r3, r6
 8010dba:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010dbe:	6803      	ldr	r3, [r0, #0]
 8010dc0:	6809      	ldr	r1, [r1, #0]
 8010dc2:	6810      	ldr	r0, [r2, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8010dc4:	2201      	movs	r2, #1
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010dc6:	404b      	eors	r3, r1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8010dc8:	4942      	ldr	r1, [pc, #264]	; (8010ed4 <ethernetif_init+0x15c>)
  netif->output = etharp_output;
 8010dca:	f8c4 e014 	str.w	lr, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010dce:	4043      	eors	r3, r0
  netif->linkoutput = low_level_output;
 8010dd0:	61a1      	str	r1, [r4, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010dd2:	4628      	mov	r0, r5
  heth.Init.MACAddr = &MACAddr[0];
 8010dd4:	616f      	str	r7, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8010dd6:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010dda:	f8c5 c020 	str.w	ip, [r5, #32]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8010dde:	606a      	str	r2, [r5, #4]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8010de0:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8010de4:	f7f7 fd50 	bl	8008888 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8010de8:	b928      	cbnz	r0, 8010df6 <ethernetif_init+0x7e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8010dea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8010dee:	f043 0304 	orr.w	r3, r3, #4
 8010df2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8010df6:	2304      	movs	r3, #4
 8010df8:	4a37      	ldr	r2, [pc, #220]	; (8010ed8 <ethernetif_init+0x160>)
 8010dfa:	4938      	ldr	r1, [pc, #224]	; (8010edc <ethernetif_init+0x164>)
  osSemaphoreDef(SEM);
 8010dfc:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8010dfe:	482f      	ldr	r0, [pc, #188]	; (8010ebc <ethernetif_init+0x144>)
 8010e00:	f7f7 fb14 	bl	800842c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8010e04:	2304      	movs	r3, #4
 8010e06:	4a36      	ldr	r2, [pc, #216]	; (8010ee0 <ethernetif_init+0x168>)
 8010e08:	4936      	ldr	r1, [pc, #216]	; (8010ee4 <ethernetif_init+0x16c>)
 8010e0a:	482c      	ldr	r0, [pc, #176]	; (8010ebc <ethernetif_init+0x144>)
 8010e0c:	f7f7 fb5e 	bl	80084cc <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010e10:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010e12:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010e14:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 8010e18:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e1c:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010e1e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010e22:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010e26:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e28:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8010e2a:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8010e2e:	785e      	ldrb	r6, [r3, #1]
 8010e30:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8010e34:	789e      	ldrb	r6, [r3, #2]
 8010e36:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010e3a:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 8010e3c:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8010e3e:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8010e42:	791e      	ldrb	r6, [r3, #4]
 8010e44:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010e48:	795b      	ldrb	r3, [r3, #5]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010e4a:	4e27      	ldr	r6, [pc, #156]	; (8010ee8 <ethernetif_init+0x170>)
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8010e4c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8010e50:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 8010e54:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010e56:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 8010e58:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e5a:	f000 ffe9 	bl	8011e30 <osSemaphoreCreate>
 8010e5e:	4686      	mov	lr, r0
 8010e60:	f8df c098 	ldr.w	ip, [pc, #152]	; 8010efc <ethernetif_init+0x184>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8010e64:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010e68:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8010e6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8010e70:	4621      	mov	r1, r4
 8010e72:	a805      	add	r0, sp, #20
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8010e74:	f8cc e000 	str.w	lr, [ip]
  osThreadCreate (osThread(EthIf), netif);
 8010e78:	f000 ff26 	bl	8011cc8 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8010e7c:	480f      	ldr	r0, [pc, #60]	; (8010ebc <ethernetif_init+0x144>)
 8010e7e:	f7f7 fe57 	bl	8008b30 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8010e82:	466a      	mov	r2, sp
 8010e84:	211d      	movs	r1, #29
 8010e86:	480d      	ldr	r0, [pc, #52]	; (8010ebc <ethernetif_init+0x144>)
 8010e88:	f7f7 fc6c 	bl	8008764 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8010e8c:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010e8e:	211d      	movs	r1, #29
 8010e90:	480a      	ldr	r0, [pc, #40]	; (8010ebc <ethernetif_init+0x144>)
  regvalue |= (PHY_ISFR_INT4);
 8010e92:	f042 020b 	orr.w	r2, r2, #11
 8010e96:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010e98:	f7f7 fcae 	bl	80087f8 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8010e9c:	466a      	mov	r2, sp
 8010e9e:	211d      	movs	r1, #29
 8010ea0:	4806      	ldr	r0, [pc, #24]	; (8010ebc <ethernetif_init+0x144>)
 8010ea2:	f7f7 fc5f 	bl	8008764 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8010ea6:	4638      	mov	r0, r7
 8010ea8:	b00d      	add	sp, #52	; 0x34
 8010eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010eac:	4b0f      	ldr	r3, [pc, #60]	; (8010eec <ethernetif_init+0x174>)
 8010eae:	f240 2237 	movw	r2, #567	; 0x237
 8010eb2:	490f      	ldr	r1, [pc, #60]	; (8010ef0 <ethernetif_init+0x178>)
 8010eb4:	480f      	ldr	r0, [pc, #60]	; (8010ef4 <ethernetif_init+0x17c>)
 8010eb6:	f010 fc95 	bl	80217e4 <iprintf>
 8010eba:	e763      	b.n	8010d84 <ethernetif_init+0xc>
 8010ebc:	20025840 	.word	0x20025840
 8010ec0:	1ff0f420 	.word	0x1ff0f420
 8010ec4:	40028000 	.word	0x40028000
 8010ec8:	00e18000 	.word	0x00e18000
 8010ecc:	1ff0f424 	.word	0x1ff0f424
 8010ed0:	1ff0f428 	.word	0x1ff0f428
 8010ed4:	08010a75 	.word	0x08010a75
 8010ed8:	20025888 	.word	0x20025888
 8010edc:	20023f70 	.word	0x20023f70
 8010ee0:	20023ff0 	.word	0x20023ff0
 8010ee4:	200257c0 	.word	0x200257c0
 8010ee8:	08025b18 	.word	0x08025b18
 8010eec:	08027fc0 	.word	0x08027fc0
 8010ef0:	08027fdc 	.word	0x08027fdc
 8010ef4:	08027fec 	.word	0x08027fec
 8010ef8:	0801ea89 	.word	0x0801ea89
 8010efc:	20001cb8 	.word	0x20001cb8

08010f00 <sys_now>:
 8010f00:	f7f5 b9f2 	b.w	80062e8 <HAL_GetTick>

08010f04 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8010f04:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8010f06:	2300      	movs	r3, #0
{
 8010f08:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010f0a:	4d0f      	ldr	r5, [pc, #60]	; (8010f48 <ethernetif_set_link+0x44>)
{
 8010f0c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8010f0e:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8010f10:	e003      	b.n	8010f1a <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8010f12:	b1b3      	cbz	r3, 8010f42 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8010f14:	20c8      	movs	r0, #200	; 0xc8
 8010f16:	f000 ff03 	bl	8011d20 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010f1a:	aa01      	add	r2, sp, #4
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	4628      	mov	r0, r5
 8010f20:	f7f7 fc20 	bl	8008764 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010f24:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8010f26:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010f28:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8010f2c:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010f30:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8010f32:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8010f34:	d4ed      	bmi.n	8010f12 <ethernetif_set_link+0xe>
 8010f36:	b113      	cbz	r3, 8010f3e <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8010f38:	f006 fa1a 	bl	8017370 <netif_set_link_up>
 8010f3c:	e7ea      	b.n	8010f14 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8010f3e:	0753      	lsls	r3, r2, #29
 8010f40:	d5e8      	bpl.n	8010f14 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8010f42:	f006 fa3b 	bl	80173bc <netif_set_link_down>
 8010f46:	e7e5      	b.n	8010f14 <ethernetif_set_link+0x10>
 8010f48:	20025840 	.word	0x20025840

08010f4c <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8010f4c:	4770      	bx	lr
 8010f4e:	bf00      	nop

08010f50 <ethernetif_update_config>:
{
 8010f50:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 8010f52:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8010f56:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 8010f58:	2100      	movs	r1, #0
{
 8010f5a:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 8010f5c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8010f5e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8010f60:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8010f62:	d539      	bpl.n	8010fd8 <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8010f64:	4d32      	ldr	r5, [pc, #200]	; (8011030 <ethernetif_update_config+0xe0>)
 8010f66:	686b      	ldr	r3, [r5, #4]
 8010f68:	b9e3      	cbnz	r3, 8010fa4 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8010f6a:	68ab      	ldr	r3, [r5, #8]
 8010f6c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8010f70:	d141      	bne.n	8010ff6 <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8010f72:	68eb      	ldr	r3, [r5, #12]
 8010f74:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8010f78:	d136      	bne.n	8010fe8 <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8010f7a:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8010f7c:	08db      	lsrs	r3, r3, #3
 8010f7e:	2100      	movs	r1, #0
 8010f80:	482b      	ldr	r0, [pc, #172]	; (8011030 <ethernetif_update_config+0xe0>)
 8010f82:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 8010f86:	b292      	uxth	r2, r2
 8010f88:	f7f7 fc36 	bl	80087f8 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8010f8c:	2100      	movs	r1, #0
 8010f8e:	4828      	ldr	r0, [pc, #160]	; (8011030 <ethernetif_update_config+0xe0>)
 8010f90:	f7f7 fe4e 	bl	8008c30 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8010f94:	4826      	ldr	r0, [pc, #152]	; (8011030 <ethernetif_update_config+0xe0>)
 8010f96:	f7f7 fdcb 	bl	8008b30 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	f7ff ffd6 	bl	8010f4c <ethernetif_notify_conn_changed>
}
 8010fa0:	b002      	add	sp, #8
 8010fa2:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8010fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010fa8:	4628      	mov	r0, r5
 8010faa:	f7f7 fc25 	bl	80087f8 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010fae:	462e      	mov	r6, r5
      tickstart = HAL_GetTick();
 8010fb0:	f7f5 f99a 	bl	80062e8 <HAL_GetTick>
 8010fb4:	9000      	str	r0, [sp, #0]
 8010fb6:	e002      	b.n	8010fbe <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8010fb8:	9b01      	ldr	r3, [sp, #4]
 8010fba:	069a      	lsls	r2, r3, #26
 8010fbc:	d425      	bmi.n	801100a <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8010fbe:	aa01      	add	r2, sp, #4
 8010fc0:	2101      	movs	r1, #1
 8010fc2:	4630      	mov	r0, r6
 8010fc4:	f7f7 fbce 	bl	8008764 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 8010fc8:	f7f5 f98e 	bl	80062e8 <HAL_GetTick>
 8010fcc:	9b00      	ldr	r3, [sp, #0]
 8010fce:	1ac3      	subs	r3, r0, r3
 8010fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010fd4:	d9f0      	bls.n	8010fb8 <ethernetif_update_config+0x68>
 8010fd6:	e7c8      	b.n	8010f6a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8010fd8:	4815      	ldr	r0, [pc, #84]	; (8011030 <ethernetif_update_config+0xe0>)
 8010fda:	f7f7 fde9 	bl	8008bb0 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 8010fde:	4620      	mov	r0, r4
 8010fe0:	f7ff ffb4 	bl	8010f4c <ethernetif_notify_conn_changed>
}
 8010fe4:	b002      	add	sp, #8
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8010fe8:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8010fec:	4811      	ldr	r0, [pc, #68]	; (8011034 <ethernetif_update_config+0xe4>)
 8010fee:	f7f2 fd9b 	bl	8003b28 <assert_failed>
 8010ff2:	68eb      	ldr	r3, [r5, #12]
 8010ff4:	e7c1      	b.n	8010f7a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8010ff6:	f240 21df 	movw	r1, #735	; 0x2df
 8010ffa:	480e      	ldr	r0, [pc, #56]	; (8011034 <ethernetif_update_config+0xe4>)
 8010ffc:	f7f2 fd94 	bl	8003b28 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8011000:	68eb      	ldr	r3, [r5, #12]
 8011002:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8011006:	d0b8      	beq.n	8010f7a <ethernetif_update_config+0x2a>
 8011008:	e7ee      	b.n	8010fe8 <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 801100a:	aa01      	add	r2, sp, #4
 801100c:	211f      	movs	r1, #31
 801100e:	4808      	ldr	r0, [pc, #32]	; (8011030 <ethernetif_update_config+0xe0>)
 8011010:	f7f7 fba8 	bl	8008764 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8011014:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8011016:	f013 0210 	ands.w	r2, r3, #16
 801101a:	bf18      	it	ne
 801101c:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8011020:	075b      	lsls	r3, r3, #29
        heth.Init.Speed = ETH_SPEED_10M;
 8011022:	bf4c      	ite	mi
 8011024:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8011026:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 801102a:	60ea      	str	r2, [r5, #12]
 801102c:	60ab      	str	r3, [r5, #8]
 801102e:	e7ad      	b.n	8010f8c <ethernetif_update_config+0x3c>
 8011030:	20025840 	.word	0x20025840
 8011034:	08027fc0 	.word	0x08027fc0

08011038 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011038:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801103c:	b183      	cbz	r3, 8011060 <USBD_CDC_EP0_RxReady+0x28>
{
 801103e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011040:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011044:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8011048:	28ff      	cmp	r0, #255	; 0xff
 801104a:	d007      	beq.n	801105c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801104c:	689b      	ldr	r3, [r3, #8]
 801104e:	4621      	mov	r1, r4
 8011050:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8011054:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8011056:	23ff      	movs	r3, #255	; 0xff
 8011058:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801105c:	2000      	movs	r0, #0
 801105e:	bd10      	pop	{r4, pc}
 8011060:	2000      	movs	r0, #0
 8011062:	4770      	bx	lr

08011064 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011064:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011066:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8011068:	4801      	ldr	r0, [pc, #4]	; (8011070 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801106a:	801a      	strh	r2, [r3, #0]
}
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	20000304 	.word	0x20000304

08011074 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011074:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011076:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8011078:	4801      	ldr	r0, [pc, #4]	; (8011080 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801107a:	801a      	strh	r2, [r3, #0]
}
 801107c:	4770      	bx	lr
 801107e:	bf00      	nop
 8011080:	20000348 	.word	0x20000348

08011084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011084:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011086:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8011088:	4801      	ldr	r0, [pc, #4]	; (8011090 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801108a:	801a      	strh	r2, [r3, #0]
}
 801108c:	4770      	bx	lr
 801108e:	bf00      	nop
 8011090:	20000398 	.word	0x20000398

08011094 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011094:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011096:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8011098:	4801      	ldr	r0, [pc, #4]	; (80110a0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801109a:	801a      	strh	r2, [r3, #0]
}
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	2000038c 	.word	0x2000038c

080110a4 <USBD_CDC_DataOut>:
{
 80110a4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80110a6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80110aa:	b175      	cbz	r5, 80110ca <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80110ac:	4604      	mov	r4, r0
 80110ae:	f00f fa67 	bl	8020580 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80110b2:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80110b6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80110ba:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80110c4:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80110c6:	2000      	movs	r0, #0
}
 80110c8:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80110ca:	2003      	movs	r0, #3
}
 80110cc:	bd38      	pop	{r3, r4, r5, pc}
 80110ce:	bf00      	nop

080110d0 <USBD_CDC_DataIn>:
{
 80110d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80110d2:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 80110d6:	b347      	cbz	r7, 801112a <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80110d8:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 80110dc:	4605      	mov	r5, r0
 80110de:	460a      	mov	r2, r1
 80110e0:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80110e4:	69b3      	ldr	r3, [r6, #24]
 80110e6:	b163      	cbz	r3, 8011102 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80110e8:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80110ec:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80110f0:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80110f4:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80110f8:	fbb3 f4fc 	udiv	r4, r3, ip
 80110fc:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011100:	b164      	cbz	r4, 801111c <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011102:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8011106:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011108:	f507 7104 	add.w	r1, r7, #528	; 0x210
 801110c:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8011110:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8011112:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011116:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8011118:	4620      	mov	r0, r4
}
 801111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801111c:	4623      	mov	r3, r4
 801111e:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8011120:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011122:	f00f fa11 	bl	8020548 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8011126:	4620      	mov	r0, r4
}
 8011128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 801112a:	2003      	movs	r0, #3
}
 801112c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801112e:	bf00      	nop

08011130 <USBD_CDC_Setup>:
{
 8011130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011134:	780f      	ldrb	r7, [r1, #0]
{
 8011136:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8011138:	2300      	movs	r3, #0
{
 801113a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801113c:	f017 0660 	ands.w	r6, r7, #96	; 0x60
{
 8011140:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011142:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8011146:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 801114a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801114e:	d01c      	beq.n	801118a <USBD_CDC_Setup+0x5a>
 8011150:	2e20      	cmp	r6, #32
 8011152:	d111      	bne.n	8011178 <USBD_CDC_Setup+0x48>
    if (req->wLength != 0U)
 8011154:	88ca      	ldrh	r2, [r1, #6]
 8011156:	2a00      	cmp	r2, #0
 8011158:	d036      	beq.n	80111c8 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 801115a:	0639      	lsls	r1, r7, #24
 801115c:	d557      	bpl.n	801120e <USBD_CDC_Setup+0xde>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801115e:	f8d0 62c0 	ldr.w	r6, [r0, #704]	; 0x2c0
 8011162:	4641      	mov	r1, r8
 8011164:	7860      	ldrb	r0, [r4, #1]
 8011166:	68b7      	ldr	r7, [r6, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8011168:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801116a:	47b8      	blx	r7
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801116c:	88e2      	ldrh	r2, [r4, #6]
 801116e:	4641      	mov	r1, r8
 8011170:	4628      	mov	r0, r5
 8011172:	f000 fd2f 	bl	8011bd4 <USBD_CtlSendData>
 8011176:	e004      	b.n	8011182 <USBD_CDC_Setup+0x52>
      USBD_CtlError(pdev, req);
 8011178:	4621      	mov	r1, r4
 801117a:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 801117c:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 801117e:	f000 fcf7 	bl	8011b70 <USBD_CtlError>
}
 8011182:	4630      	mov	r0, r6
 8011184:	b002      	add	sp, #8
 8011186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 801118a:	784b      	ldrb	r3, [r1, #1]
 801118c:	2b0b      	cmp	r3, #11
 801118e:	d8f3      	bhi.n	8011178 <USBD_CDC_Setup+0x48>
 8011190:	a201      	add	r2, pc, #4	; (adr r2, 8011198 <USBD_CDC_Setup+0x68>)
 8011192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011196:	bf00      	nop
 8011198:	080111dd 	.word	0x080111dd
 801119c:	08011183 	.word	0x08011183
 80111a0:	08011179 	.word	0x08011179
 80111a4:	08011179 	.word	0x08011179
 80111a8:	08011179 	.word	0x08011179
 80111ac:	08011179 	.word	0x08011179
 80111b0:	08011179 	.word	0x08011179
 80111b4:	08011179 	.word	0x08011179
 80111b8:	08011179 	.word	0x08011179
 80111bc:	08011179 	.word	0x08011179
 80111c0:	080111fb 	.word	0x080111fb
 80111c4:	080111f1 	.word	0x080111f1
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111c8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80111cc:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80111ce:	7848      	ldrb	r0, [r1, #1]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	4798      	blx	r3
}
 80111d4:	4630      	mov	r0, r6
 80111d6:	b002      	add	sp, #8
 80111d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111dc:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80111e0:	2a03      	cmp	r2, #3
 80111e2:	d01e      	beq.n	8011222 <USBD_CDC_Setup+0xf2>
        USBD_CtlError(pdev, req);
 80111e4:	4621      	mov	r1, r4
 80111e6:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80111e8:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80111ea:	f000 fcc1 	bl	8011b70 <USBD_CtlError>
        ret = USBD_FAIL;
 80111ee:	e7c8      	b.n	8011182 <USBD_CDC_Setup+0x52>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80111f0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80111f4:	2b03      	cmp	r3, #3
 80111f6:	d0c4      	beq.n	8011182 <USBD_CDC_Setup+0x52>
 80111f8:	e7f4      	b.n	80111e4 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80111fe:	2b03      	cmp	r3, #3
 8011200:	d1f0      	bne.n	80111e4 <USBD_CDC_Setup+0xb4>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011202:	2201      	movs	r2, #1
 8011204:	f10d 0105 	add.w	r1, sp, #5
 8011208:	f000 fce4 	bl	8011bd4 <USBD_CtlSendData>
 801120c:	e7b9      	b.n	8011182 <USBD_CDC_Setup+0x52>
        hcdc->CmdOpCode = req->bRequest;
 801120e:	7864      	ldrb	r4, [r4, #1]
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011210:	4641      	mov	r1, r8
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011212:	f888 2201 	strb.w	r2, [r8, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 8011216:	461e      	mov	r6, r3
        hcdc->CmdOpCode = req->bRequest;
 8011218:	f888 4200 	strb.w	r4, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801121c:	f000 fcf2 	bl	8011c04 <USBD_CtlPrepareRx>
 8011220:	e7af      	b.n	8011182 <USBD_CDC_Setup+0x52>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011222:	2202      	movs	r2, #2
 8011224:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8011228:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801122a:	f000 fcd3 	bl	8011bd4 <USBD_CtlSendData>
 801122e:	e7a8      	b.n	8011182 <USBD_CDC_Setup+0x52>

08011230 <USBD_CDC_DeInit>:
{
 8011230:	b538      	push	{r3, r4, r5, lr}
 8011232:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011234:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011236:	2181      	movs	r1, #129	; 0x81
 8011238:	f00f f93a 	bl	80204b0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801123c:	2101      	movs	r1, #1
 801123e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011240:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011242:	f00f f935 	bl	80204b0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011246:	4620      	mov	r0, r4
 8011248:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801124a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801124e:	f00f f92f 	bl	80204b0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8011252:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011256:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8011258:	b14b      	cbz	r3, 801126e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801125a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011262:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8011266:	f00f fb0d 	bl	8020884 <free>
    pdev->pClassData = NULL;
 801126a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801126e:	2000      	movs	r0, #0
 8011270:	bd38      	pop	{r3, r4, r5, pc}
 8011272:	bf00      	nop

08011274 <USBD_CDC_Init>:
{
 8011274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011278:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801127a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801127e:	f00f faf9 	bl	8020874 <malloc>
  if (hcdc == NULL)
 8011282:	4605      	mov	r5, r0
 8011284:	2800      	cmp	r0, #0
 8011286:	d04d      	beq.n	8011324 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011288:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801128a:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 801128c:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011290:	b38b      	cbz	r3, 80112f6 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011292:	2340      	movs	r3, #64	; 0x40
 8011294:	2181      	movs	r1, #129	; 0x81
 8011296:	2202      	movs	r2, #2
 8011298:	4620      	mov	r0, r4
 801129a:	f00f f8f7 	bl	802048c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801129e:	4631      	mov	r1, r6
 80112a0:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80112a2:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80112a4:	2202      	movs	r2, #2
 80112a6:	4620      	mov	r0, r4
 80112a8:	f00f f8f0 	bl	802048c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80112ac:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80112ae:	2203      	movs	r2, #3
 80112b0:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80112b2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80112b6:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80112b8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80112bc:	2308      	movs	r3, #8
 80112be:	f00f f8e5 	bl	802048c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80112c2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80112c6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80112ca:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80112cc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112d4:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80112d6:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80112da:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112de:	b9b6      	cbnz	r6, 801130e <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80112e0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80112e4:	4641      	mov	r1, r8
 80112e6:	4620      	mov	r0, r4
 80112e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112ec:	f00f f93a 	bl	8020564 <USBD_LL_PrepareReceive>
}
 80112f0:	4630      	mov	r0, r6
 80112f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80112f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112fa:	2181      	movs	r1, #129	; 0x81
 80112fc:	2202      	movs	r2, #2
 80112fe:	4620      	mov	r0, r4
 8011300:	f00f f8c4 	bl	802048c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011304:	4631      	mov	r1, r6
 8011306:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801130a:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801130c:	e7ca      	b.n	80112a4 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 801130e:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011310:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8011314:	4641      	mov	r1, r8
 8011316:	4620      	mov	r0, r4
 8011318:	2340      	movs	r3, #64	; 0x40
 801131a:	f00f f923 	bl	8020564 <USBD_LL_PrepareReceive>
}
 801131e:	4630      	mov	r0, r6
 8011320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8011324:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8011326:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801132a:	e7e1      	b.n	80112f0 <USBD_CDC_Init+0x7c>

0801132c <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 801132c:	b119      	cbz	r1, 8011336 <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 801132e:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011332:	2000      	movs	r0, #0
 8011334:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8011336:	2003      	movs	r0, #3
}
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop

0801133c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801133c:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 801133e:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8011344:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011348:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop

08011350 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011350:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8011352:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8011354:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011358:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 801135c:	4770      	bx	lr
 801135e:	bf00      	nop

08011360 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011360:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8011364:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8011366:	b18a      	cbz	r2, 801138c <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011368:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801136a:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801136e:	b134      	cbz	r4, 801137e <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011370:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011372:	2340      	movs	r3, #64	; 0x40
 8011374:	2101      	movs	r1, #1
 8011376:	f00f f8f5 	bl	8020564 <USBD_LL_PrepareReceive>
}
 801137a:	4620      	mov	r0, r4
 801137c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801137e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011382:	2101      	movs	r1, #1
 8011384:	f00f f8ee 	bl	8020564 <USBD_LL_PrepareReceive>
}
 8011388:	4620      	mov	r0, r4
 801138a:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 801138c:	2403      	movs	r4, #3
}
 801138e:	4620      	mov	r0, r4
 8011390:	bd10      	pop	{r4, pc}
 8011392:	bf00      	nop

08011394 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011394:	b1a0      	cbz	r0, 80113c0 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011396:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801139a:	b113      	cbz	r3, 80113a2 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 801139c:	2300      	movs	r3, #0
 801139e:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80113a2:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 80113a6:	b113      	cbz	r3, 80113ae <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 80113a8:	2300      	movs	r3, #0
 80113aa:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113ae:	b109      	cbz	r1, 80113b4 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80113b0:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113b4:	2301      	movs	r3, #1
  pdev->id = id;
 80113b6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113b8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80113bc:	f00f b826 	b.w	802040c <USBD_LL_Init>

  return ret;
}
 80113c0:	2003      	movs	r0, #3
 80113c2:	4770      	bx	lr

080113c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80113c4:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 80113c6:	2400      	movs	r4, #0
{
 80113c8:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80113ca:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80113ce:	b159      	cbz	r1, 80113e8 <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80113d0:	4605      	mov	r5, r0
 80113d2:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80113d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80113d8:	f10d 0006 	add.w	r0, sp, #6
 80113dc:	4798      	blx	r3
 80113de:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80113e2:	4620      	mov	r0, r4
 80113e4:	b003      	add	sp, #12
 80113e6:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80113e8:	2403      	movs	r4, #3
}
 80113ea:	4620      	mov	r0, r4
 80113ec:	b003      	add	sp, #12
 80113ee:	bd30      	pop	{r4, r5, pc}

080113f0 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80113f0:	f00f b83e 	b.w	8020470 <USBD_LL_Start>

080113f4 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80113f4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80113f8:	b10b      	cbz	r3, 80113fe <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4718      	bx	r3
  }

  return ret;
}
 80113fe:	2003      	movs	r0, #3
 8011400:	4770      	bx	lr
 8011402:	bf00      	nop

08011404 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011404:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011406:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801140a:	b10b      	cbz	r3, 8011410 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8011410:	2000      	movs	r0, #0
 8011412:	bd08      	pop	{r3, pc}

08011414 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011414:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011416:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 801141a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801141c:	4628      	mov	r0, r5
 801141e:	f000 fb93 	bl	8011b48 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8011422:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8011426:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8011428:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 801142c:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8011430:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 8011432:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8011436:	d009      	beq.n	801144c <USBD_LL_SetupStage+0x38>
 8011438:	2b02      	cmp	r3, #2
 801143a:	d013      	beq.n	8011464 <USBD_LL_SetupStage+0x50>
 801143c:	b163      	cbz	r3, 8011458 <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801143e:	4620      	mov	r0, r4
 8011440:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8011444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011448:	f00f b840 	b.w	80204cc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801144c:	4629      	mov	r1, r5
 801144e:	4620      	mov	r0, r4
}
 8011450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011454:	f000 ba9e 	b.w	8011994 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011458:	4629      	mov	r1, r5
 801145a:	4620      	mov	r0, r4
}
 801145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011460:	f000 b8f4 	b.w	801164c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011464:	4629      	mov	r1, r5
 8011466:	4620      	mov	r0, r4
}
 8011468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801146c:	f000 baca 	b.w	8011a04 <USBD_StdEPReq>

08011470 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011474:	b931      	cbnz	r1, 8011484 <USBD_LL_DataOutStage+0x14>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011476:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 801147a:	460c      	mov	r4, r1
 801147c:	2b03      	cmp	r3, #3
 801147e:	d00e      	beq.n	801149e <USBD_LL_DataOutStage+0x2e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8011480:	2000      	movs	r0, #0
}
 8011482:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8011484:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8011488:	699b      	ldr	r3, [r3, #24]
 801148a:	b133      	cbz	r3, 801149a <USBD_LL_DataOutStage+0x2a>
 801148c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8011490:	2a03      	cmp	r2, #3
 8011492:	d102      	bne.n	801149a <USBD_LL_DataOutStage+0x2a>
}
 8011494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011498:	4718      	bx	r3
    return USBD_FAIL;
 801149a:	2003      	movs	r0, #3
}
 801149c:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 801149e:	e9d0 3657 	ldrd	r3, r6, [r0, #348]	; 0x15c
 80114a2:	42b3      	cmp	r3, r6
 80114a4:	d80d      	bhi.n	80114c2 <USBD_LL_DataOutStage+0x52>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80114a6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80114aa:	691b      	ldr	r3, [r3, #16]
 80114ac:	b123      	cbz	r3, 80114b8 <USBD_LL_DataOutStage+0x48>
 80114ae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80114b2:	2a03      	cmp	r2, #3
 80114b4:	d100      	bne.n	80114b8 <USBD_LL_DataOutStage+0x48>
          pdev->pClass->EP0_RxReady(pdev);
 80114b6:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80114b8:	4628      	mov	r0, r5
 80114ba:	f000 fbbb 	bl	8011c34 <USBD_CtlSendStatus>
  return USBD_OK;
 80114be:	2000      	movs	r0, #0
 80114c0:	e7df      	b.n	8011482 <USBD_LL_DataOutStage+0x12>
        pep->rem_length -= pep->maxpacket;
 80114c2:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114c4:	4611      	mov	r1, r2
 80114c6:	4632      	mov	r2, r6
 80114c8:	429e      	cmp	r6, r3
        pep->rem_length -= pep->maxpacket;
 80114ca:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80114ce:	bf28      	it	cs
 80114d0:	461a      	movcs	r2, r3
 80114d2:	f000 fba5 	bl	8011c20 <USBD_CtlContinueRx>
  return USBD_OK;
 80114d6:	4620      	mov	r0, r4
}
 80114d8:	bd70      	pop	{r4, r5, r6, pc}
 80114da:	bf00      	nop

080114dc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80114dc:	b570      	push	{r4, r5, r6, lr}
 80114de:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80114e0:	b949      	cbnz	r1, 80114f6 <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80114e2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80114e6:	2b02      	cmp	r3, #2
 80114e8:	d015      	beq.n	8011516 <USBD_LL_DataInStage+0x3a>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80114ea:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80114ee:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d00d      	beq.n	8011510 <USBD_LL_DataInStage+0x34>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80114f4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80114f6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80114fa:	695b      	ldr	r3, [r3, #20]
 80114fc:	b133      	cbz	r3, 801150c <USBD_LL_DataInStage+0x30>
 80114fe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8011502:	2a03      	cmp	r2, #3
 8011504:	d102      	bne.n	801150c <USBD_LL_DataInStage+0x30>
}
 8011506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801150a:	4718      	bx	r3
    return USBD_FAIL;
 801150c:	2003      	movs	r0, #3
}
 801150e:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8011510:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8011514:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8011516:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 801151a:	460d      	mov	r5, r1
 801151c:	42b3      	cmp	r3, r6
 801151e:	d815      	bhi.n	801154c <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8011520:	d024      	beq.n	801156c <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011522:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8011526:	68db      	ldr	r3, [r3, #12]
 8011528:	b11b      	cbz	r3, 8011532 <USBD_LL_DataInStage+0x56>
 801152a:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 801152e:	2a03      	cmp	r2, #3
 8011530:	d019      	beq.n	8011566 <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011532:	2180      	movs	r1, #128	; 0x80
 8011534:	4620      	mov	r0, r4
 8011536:	f00e ffc9 	bl	80204cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801153a:	4620      	mov	r0, r4
 801153c:	f000 fb86 	bl	8011c4c <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8011540:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8011544:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8011546:	2b01      	cmp	r3, #1
 8011548:	d1d4      	bne.n	80114f4 <USBD_LL_DataInStage+0x18>
 801154a:	e7e1      	b.n	8011510 <USBD_LL_DataInStage+0x34>
        pep->rem_length -= pep->maxpacket;
 801154c:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801154e:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8011550:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011552:	461a      	mov	r2, r3
 8011554:	f000 fb4c 	bl	8011bf0 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011558:	462b      	mov	r3, r5
 801155a:	462a      	mov	r2, r5
 801155c:	4629      	mov	r1, r5
 801155e:	4620      	mov	r0, r4
 8011560:	f00f f800 	bl	8020564 <USBD_LL_PrepareReceive>
 8011564:	e7c1      	b.n	80114ea <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8011566:	4620      	mov	r0, r4
 8011568:	4798      	blx	r3
 801156a:	e7e2      	b.n	8011532 <USBD_LL_DataInStage+0x56>
            (pep->total_length >= pep->maxpacket) &&
 801156c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 801156e:	4293      	cmp	r3, r2
 8011570:	d8d7      	bhi.n	8011522 <USBD_LL_DataInStage+0x46>
            (pep->total_length >= pep->maxpacket) &&
 8011572:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8011576:	429a      	cmp	r2, r3
 8011578:	d2d3      	bcs.n	8011522 <USBD_LL_DataInStage+0x46>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801157a:	460a      	mov	r2, r1
 801157c:	f000 fb38 	bl	8011bf0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011580:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8011584:	e7e8      	b.n	8011558 <USBD_LL_DataInStage+0x7c>
 8011586:	bf00      	nop

08011588 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8011588:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801158a:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 801158c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8011590:	b570      	push	{r4, r5, r6, lr}
 8011592:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011594:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011598:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 801159c:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 801159e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 80115a2:	b11b      	cbz	r3, 80115ac <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80115a4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115ac:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115ae:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80115b0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115b2:	4620      	mov	r0, r4
 80115b4:	462b      	mov	r3, r5
 80115b6:	4611      	mov	r1, r2
 80115b8:	f00e ff68 	bl	802048c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115bc:	462b      	mov	r3, r5
 80115be:	2200      	movs	r2, #0
 80115c0:	2180      	movs	r1, #128	; 0x80
 80115c2:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80115c4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80115c8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80115cc:	f00e ff5e 	bl	802048c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80115d0:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80115d2:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80115d4:	6225      	str	r5, [r4, #32]
}
 80115d6:	bd70      	pop	{r4, r5, r6, pc}

080115d8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80115d8:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80115da:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80115dc:	7419      	strb	r1, [r3, #16]
}
 80115de:	4770      	bx	lr

080115e0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80115e0:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80115e2:	2104      	movs	r1, #4

  return USBD_OK;
}
 80115e4:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80115e6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80115ea:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80115ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 80115f2:	4770      	bx	lr

080115f4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80115f4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80115f8:	2b04      	cmp	r3, #4
 80115fa:	d103      	bne.n	8011604 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 80115fc:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8011600:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8011604:	2000      	movs	r0, #0
 8011606:	4770      	bx	lr

08011608 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011608:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801160c:	2a03      	cmp	r2, #3
 801160e:	d001      	beq.n	8011614 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8011610:	2000      	movs	r0, #0
 8011612:	4770      	bx	lr
{
 8011614:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8011616:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801161a:	69db      	ldr	r3, [r3, #28]
 801161c:	b103      	cbz	r3, 8011620 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 801161e:	4798      	blx	r3
}
 8011620:	2000      	movs	r0, #0
 8011622:	bd08      	pop	{r3, pc}

08011624 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8011624:	2000      	movs	r0, #0
 8011626:	4770      	bx	lr

08011628 <USBD_LL_IsoOUTIncomplete>:
 8011628:	2000      	movs	r0, #0
 801162a:	4770      	bx	lr

0801162c <USBD_LL_DevConnected>:
 801162c:	2000      	movs	r0, #0
 801162e:	4770      	bx	lr

08011630 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011630:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8011632:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011636:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 801163a:	b12a      	cbz	r2, 8011648 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801163c:	6852      	ldr	r2, [r2, #4]
 801163e:	7901      	ldrb	r1, [r0, #4]
{
 8011640:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011642:	4790      	blx	r2
  }

  return USBD_OK;
}
 8011644:	2000      	movs	r0, #0
 8011646:	bd08      	pop	{r3, pc}
 8011648:	2000      	movs	r0, #0
 801164a:	4770      	bx	lr

0801164c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801164c:	b570      	push	{r4, r5, r6, lr}
 801164e:	780c      	ldrb	r4, [r1, #0]
 8011650:	b082      	sub	sp, #8
 8011652:	460e      	mov	r6, r1
 8011654:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011656:	f004 0460 	and.w	r4, r4, #96	; 0x60
 801165a:	2c20      	cmp	r4, #32
 801165c:	d00e      	beq.n	801167c <USBD_StdDevReq+0x30>
 801165e:	2c40      	cmp	r4, #64	; 0x40
 8011660:	d00c      	beq.n	801167c <USBD_StdDevReq+0x30>
 8011662:	b1ac      	cbz	r4, 8011690 <USBD_StdDevReq+0x44>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011664:	2180      	movs	r1, #128	; 0x80
 8011666:	4628      	mov	r0, r5
 8011668:	f00e ff30 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801166c:	2100      	movs	r1, #0
 801166e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8011670:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8011672:	f00e ff2b 	bl	80204cc <USBD_LL_StallEP>
}
 8011676:	4620      	mov	r0, r4
 8011678:	b002      	add	sp, #8
 801167a:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801167c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8011680:	4631      	mov	r1, r6
 8011682:	4628      	mov	r0, r5
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	4798      	blx	r3
 8011688:	4604      	mov	r4, r0
}
 801168a:	4620      	mov	r0, r4
 801168c:	b002      	add	sp, #8
 801168e:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8011690:	784b      	ldrb	r3, [r1, #1]
 8011692:	2b09      	cmp	r3, #9
 8011694:	d8e6      	bhi.n	8011664 <USBD_StdDevReq+0x18>
 8011696:	a201      	add	r2, pc, #4	; (adr r2, 801169c <USBD_StdDevReq+0x50>)
 8011698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801169c:	080116fb 	.word	0x080116fb
 80116a0:	08011729 	.word	0x08011729
 80116a4:	08011665 	.word	0x08011665
 80116a8:	08011745 	.word	0x08011745
 80116ac:	08011665 	.word	0x08011665
 80116b0:	08011757 	.word	0x08011757
 80116b4:	0801178f 	.word	0x0801178f
 80116b8:	08011665 	.word	0x08011665
 80116bc:	080117b3 	.word	0x080117b3
 80116c0:	080116c5 	.word	0x080116c5
  cfgidx = (uint8_t)(req->wValue);
 80116c4:	7889      	ldrb	r1, [r1, #2]
 80116c6:	4eb2      	ldr	r6, [pc, #712]	; (8011990 <USBD_StdDevReq+0x344>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80116c8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80116ca:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80116cc:	f200 8142 	bhi.w	8011954 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 80116d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	f000 812b 	beq.w	8011930 <USBD_StdDevReq+0x2e4>
 80116da:	2b03      	cmp	r3, #3
 80116dc:	f000 8105 	beq.w	80118ea <USBD_StdDevReq+0x29e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80116e0:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 80116e2:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80116e4:	f00e fef2 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80116e8:	2100      	movs	r1, #0
 80116ea:	4628      	mov	r0, r5
 80116ec:	f00e feee 	bl	80204cc <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80116f0:	7831      	ldrb	r1, [r6, #0]
 80116f2:	4628      	mov	r0, r5
 80116f4:	f7ff fe86 	bl	8011404 <USBD_ClrClassConfig>
    break;
 80116f8:	e7bd      	b.n	8011676 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 80116fa:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80116fe:	3a01      	subs	r2, #1
 8011700:	2a02      	cmp	r2, #2
 8011702:	d86c      	bhi.n	80117de <USBD_StdDevReq+0x192>
    if (req->wLength != 0x2U)
 8011704:	88ca      	ldrh	r2, [r1, #6]
 8011706:	2a02      	cmp	r2, #2
 8011708:	d169      	bne.n	80117de <USBD_StdDevReq+0x192>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801170a:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 801170c:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011710:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8011712:	b10a      	cbz	r2, 8011718 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011714:	2203      	movs	r2, #3
 8011716:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011718:	2202      	movs	r2, #2
 801171a:	f105 010c 	add.w	r1, r5, #12
 801171e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8011720:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011722:	f000 fa57 	bl	8011bd4 <USBD_CtlSendData>
    break;
 8011726:	e7a6      	b.n	8011676 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8011728:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801172c:	3b01      	subs	r3, #1
 801172e:	2b02      	cmp	r3, #2
 8011730:	d855      	bhi.n	80117de <USBD_StdDevReq+0x192>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011732:	884b      	ldrh	r3, [r1, #2]
 8011734:	2b01      	cmp	r3, #1
 8011736:	d19e      	bne.n	8011676 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8011738:	2300      	movs	r3, #0
 801173a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801173e:	f000 fa79 	bl	8011c34 <USBD_CtlSendStatus>
 8011742:	e798      	b.n	8011676 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011744:	884b      	ldrh	r3, [r1, #2]
 8011746:	2b01      	cmp	r3, #1
 8011748:	d195      	bne.n	8011676 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 801174a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801174e:	4628      	mov	r0, r5
 8011750:	f000 fa70 	bl	8011c34 <USBD_CtlSendStatus>
 8011754:	e78f      	b.n	8011676 <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011756:	888b      	ldrh	r3, [r1, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d140      	bne.n	80117de <USBD_StdDevReq+0x192>
 801175c:	88cb      	ldrh	r3, [r1, #6]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d13d      	bne.n	80117de <USBD_StdDevReq+0x192>
 8011762:	884e      	ldrh	r6, [r1, #2]
 8011764:	2e7f      	cmp	r6, #127	; 0x7f
 8011766:	d83a      	bhi.n	80117de <USBD_StdDevReq+0x192>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011768:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801176c:	2b03      	cmp	r3, #3
 801176e:	d036      	beq.n	80117de <USBD_StdDevReq+0x192>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011770:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8011772:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011776:	f00e fed9 	bl	802052c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801177a:	4628      	mov	r0, r5
 801177c:	f000 fa5a 	bl	8011c34 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8011780:	2e00      	cmp	r6, #0
 8011782:	f040 80d1 	bne.w	8011928 <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011786:	2301      	movs	r3, #1
 8011788:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801178c:	e773      	b.n	8011676 <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 801178e:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8011790:	2100      	movs	r1, #0
 8011792:	0a13      	lsrs	r3, r2, #8
 8011794:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 8011798:	3b01      	subs	r3, #1
 801179a:	2b0e      	cmp	r3, #14
 801179c:	d81f      	bhi.n	80117de <USBD_StdDevReq+0x192>
 801179e:	e8df f003 	tbb	[pc, r3]
 80117a2:	6b77      	.short	0x6b77
 80117a4:	4f1e1e59 	.word	0x4f1e1e59
 80117a8:	1e1e1e43 	.word	0x1e1e1e43
 80117ac:	1e1e1e1e 	.word	0x1e1e1e1e
 80117b0:	29          	.byte	0x29
 80117b1:	00          	.byte	0x00
  if (req->wLength != 1U)
 80117b2:	88ca      	ldrh	r2, [r1, #6]
 80117b4:	2a01      	cmp	r2, #1
 80117b6:	d112      	bne.n	80117de <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 80117b8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80117bc:	2b02      	cmp	r3, #2
 80117be:	f200 808d 	bhi.w	80118dc <USBD_StdDevReq+0x290>
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f43f af4e 	beq.w	8011664 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80117c8:	2300      	movs	r3, #0
 80117ca:	4601      	mov	r1, r0
 80117cc:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80117d0:	f000 fa00 	bl	8011bd4 <USBD_CtlSendData>
      break;
 80117d4:	e74f      	b.n	8011676 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80117d6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	b97b      	cbnz	r3, 80117fe <USBD_StdDevReq+0x1b2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80117de:	2180      	movs	r1, #128	; 0x80
 80117e0:	4628      	mov	r0, r5
 80117e2:	f00e fe73 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80117e6:	4628      	mov	r0, r5
 80117e8:	2100      	movs	r1, #0
 80117ea:	f00e fe6f 	bl	80204cc <USBD_LL_StallEP>
}
 80117ee:	4620      	mov	r0, r4
 80117f0:	b002      	add	sp, #8
 80117f2:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80117f4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80117f8:	69db      	ldr	r3, [r3, #28]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d0ef      	beq.n	80117de <USBD_StdDevReq+0x192>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80117fe:	f10d 0106 	add.w	r1, sp, #6
 8011802:	7c28      	ldrb	r0, [r5, #16]
 8011804:	4798      	blx	r3
    if (req->wLength != 0U)
 8011806:	88f2      	ldrh	r2, [r6, #6]
 8011808:	2a00      	cmp	r2, #0
 801180a:	d0a0      	beq.n	801174e <USBD_StdDevReq+0x102>
      if (len != 0U)
 801180c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d0e4      	beq.n	80117de <USBD_StdDevReq+0x192>
        len = MIN(len, req->wLength);
 8011814:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011816:	4601      	mov	r1, r0
 8011818:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 801181a:	bf28      	it	cs
 801181c:	461a      	movcs	r2, r3
 801181e:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011822:	f000 f9d7 	bl	8011bd4 <USBD_CtlSendData>
 8011826:	e726      	b.n	8011676 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011828:	7c03      	ldrb	r3, [r0, #16]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d1d7      	bne.n	80117de <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801182e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8011832:	f10d 0006 	add.w	r0, sp, #6
 8011836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011838:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801183a:	2307      	movs	r3, #7
 801183c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801183e:	e7e2      	b.n	8011806 <USBD_StdDevReq+0x1ba>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011840:	7c03      	ldrb	r3, [r0, #16]
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1cb      	bne.n	80117de <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011846:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801184a:	f10d 0006 	add.w	r0, sp, #6
 801184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011850:	4798      	blx	r3
  if (err != 0U)
 8011852:	e7d8      	b.n	8011806 <USBD_StdDevReq+0x1ba>
    switch ((uint8_t)(req->wValue))
 8011854:	b2d2      	uxtb	r2, r2
 8011856:	2a05      	cmp	r2, #5
 8011858:	d8c1      	bhi.n	80117de <USBD_StdDevReq+0x192>
 801185a:	a301      	add	r3, pc, #4	; (adr r3, 8011860 <USBD_StdDevReq+0x214>)
 801185c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8011860:	080117d7 	.word	0x080117d7
 8011864:	080118d1 	.word	0x080118d1
 8011868:	080118c5 	.word	0x080118c5
 801186c:	080118b9 	.word	0x080118b9
 8011870:	080118ad 	.word	0x080118ad
 8011874:	080118a1 	.word	0x080118a1
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011878:	7c03      	ldrb	r3, [r0, #16]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d17e      	bne.n	801197c <USBD_StdDevReq+0x330>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801187e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8011882:	f10d 0006 	add.w	r0, sp, #6
 8011886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011888:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801188a:	2302      	movs	r3, #2
 801188c:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801188e:	e7ba      	b.n	8011806 <USBD_StdDevReq+0x1ba>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011890:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8011894:	f10d 0106 	add.w	r1, sp, #6
 8011898:	7c00      	ldrb	r0, [r0, #16]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4798      	blx	r3
  if (err != 0U)
 801189e:	e7b2      	b.n	8011806 <USBD_StdDevReq+0x1ba>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80118a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80118a4:	699b      	ldr	r3, [r3, #24]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1a9      	bne.n	80117fe <USBD_StdDevReq+0x1b2>
 80118aa:	e798      	b.n	80117de <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80118ac:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80118b0:	695b      	ldr	r3, [r3, #20]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1a3      	bne.n	80117fe <USBD_StdDevReq+0x1b2>
 80118b6:	e792      	b.n	80117de <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80118b8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80118bc:	691b      	ldr	r3, [r3, #16]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d19d      	bne.n	80117fe <USBD_StdDevReq+0x1b2>
 80118c2:	e78c      	b.n	80117de <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80118c4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80118c8:	68db      	ldr	r3, [r3, #12]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d197      	bne.n	80117fe <USBD_StdDevReq+0x1b2>
 80118ce:	e786      	b.n	80117de <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80118d0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d191      	bne.n	80117fe <USBD_StdDevReq+0x1b2>
 80118da:	e780      	b.n	80117de <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 80118dc:	2b03      	cmp	r3, #3
 80118de:	f47f aec1 	bne.w	8011664 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80118e2:	1d01      	adds	r1, r0, #4
 80118e4:	f000 f976 	bl	8011bd4 <USBD_CtlSendData>
      break;
 80118e8:	e6c5      	b.n	8011676 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 80118ea:	2900      	cmp	r1, #0
 80118ec:	d03b      	beq.n	8011966 <USBD_StdDevReq+0x31a>
    else if (cfgidx != pdev->dev_config)
 80118ee:	6841      	ldr	r1, [r0, #4]
 80118f0:	2901      	cmp	r1, #1
 80118f2:	f43f af2c 	beq.w	801174e <USBD_StdDevReq+0x102>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80118f6:	b2c9      	uxtb	r1, r1
 80118f8:	f7ff fd84 	bl	8011404 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80118fc:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80118fe:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8011900:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011902:	f7ff fd77 	bl	80113f4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8011906:	4606      	mov	r6, r0
 8011908:	2800      	cmp	r0, #0
 801190a:	f43f af20 	beq.w	801174e <USBD_StdDevReq+0x102>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801190e:	2180      	movs	r1, #128	; 0x80
 8011910:	4628      	mov	r0, r5
 8011912:	f00e fddb 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011916:	2100      	movs	r1, #0
 8011918:	4628      	mov	r0, r5
 801191a:	4634      	mov	r4, r6
 801191c:	f00e fdd6 	bl	80204cc <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011920:	7929      	ldrb	r1, [r5, #4]
 8011922:	4628      	mov	r0, r5
 8011924:	f7ff fd6e 	bl	8011404 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011928:	2302      	movs	r3, #2
 801192a:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801192e:	e6a2      	b.n	8011676 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8011930:	2900      	cmp	r1, #0
 8011932:	f43f af0c 	beq.w	801174e <USBD_StdDevReq+0x102>
      pdev->dev_config = cfgidx;
 8011936:	2101      	movs	r1, #1
 8011938:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801193a:	f7ff fd5b 	bl	80113f4 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 801193e:	4604      	mov	r4, r0
 8011940:	2800      	cmp	r0, #0
 8011942:	f47f af4c 	bne.w	80117de <USBD_StdDevReq+0x192>
        (void)USBD_CtlSendStatus(pdev);
 8011946:	4628      	mov	r0, r5
 8011948:	f000 f974 	bl	8011c34 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801194c:	2303      	movs	r3, #3
 801194e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8011952:	e690      	b.n	8011676 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011954:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8011956:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011958:	f00e fdb8 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801195c:	4628      	mov	r0, r5
 801195e:	2100      	movs	r1, #0
 8011960:	f00e fdb4 	bl	80204cc <USBD_LL_StallEP>
    return USBD_FAIL;
 8011964:	e687      	b.n	8011676 <USBD_StdDevReq+0x2a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011966:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8011968:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801196a:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801196c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011970:	f7ff fd48 	bl	8011404 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011974:	4628      	mov	r0, r5
 8011976:	f000 f95d 	bl	8011c34 <USBD_CtlSendStatus>
 801197a:	e67c      	b.n	8011676 <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801197c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8011980:	f10d 0006 	add.w	r0, sp, #6
 8011984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011986:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011988:	2302      	movs	r3, #2
 801198a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 801198c:	e73b      	b.n	8011806 <USBD_StdDevReq+0x1ba>
 801198e:	bf00      	nop
 8011990:	20001cbc 	.word	0x20001cbc

08011994 <USBD_StdItfReq>:
{
 8011994:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011996:	780b      	ldrb	r3, [r1, #0]
{
 8011998:	460d      	mov	r5, r1
 801199a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801199c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80119a0:	2a40      	cmp	r2, #64	; 0x40
 80119a2:	d00b      	beq.n	80119bc <USBD_StdItfReq+0x28>
 80119a4:	065b      	lsls	r3, r3, #25
 80119a6:	d509      	bpl.n	80119bc <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80119a8:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80119aa:	2180      	movs	r1, #128	; 0x80
 80119ac:	f00e fd8e 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80119b0:	4620      	mov	r0, r4
 80119b2:	4629      	mov	r1, r5
 80119b4:	f00e fd8a 	bl	80204cc <USBD_LL_StallEP>
}
 80119b8:	4628      	mov	r0, r5
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80119bc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80119c0:	3b01      	subs	r3, #1
 80119c2:	2b02      	cmp	r3, #2
 80119c4:	d812      	bhi.n	80119ec <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80119c6:	792b      	ldrb	r3, [r5, #4]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d80f      	bhi.n	80119ec <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119cc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80119d0:	4629      	mov	r1, r5
 80119d2:	4620      	mov	r0, r4
 80119d4:	689b      	ldr	r3, [r3, #8]
 80119d6:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80119d8:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80119da:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1eb      	bne.n	80119b8 <USBD_StdItfReq+0x24>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d1e9      	bne.n	80119b8 <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80119e4:	4620      	mov	r0, r4
 80119e6:	f000 f925 	bl	8011c34 <USBD_CtlSendStatus>
 80119ea:	e7e5      	b.n	80119b8 <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80119ec:	2180      	movs	r1, #128	; 0x80
 80119ee:	4620      	mov	r0, r4
 80119f0:	f00e fd6c 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80119f4:	2100      	movs	r1, #0
 80119f6:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80119f8:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80119fa:	f00e fd67 	bl	80204cc <USBD_LL_StallEP>
}
 80119fe:	4628      	mov	r0, r5
 8011a00:	bd38      	pop	{r3, r4, r5, pc}
 8011a02:	bf00      	nop

08011a04 <USBD_StdEPReq>:
{
 8011a04:	b570      	push	{r4, r5, r6, lr}
 8011a06:	780b      	ldrb	r3, [r1, #0]
 8011a08:	460d      	mov	r5, r1
 8011a0a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011a0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011a10:	2b20      	cmp	r3, #32
 8011a12:	d00c      	beq.n	8011a2e <USBD_StdEPReq+0x2a>
 8011a14:	2b40      	cmp	r3, #64	; 0x40
 8011a16:	d00a      	beq.n	8011a2e <USBD_StdEPReq+0x2a>
 8011a18:	b18b      	cbz	r3, 8011a3e <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a1a:	2180      	movs	r1, #128	; 0x80
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f00e fd55 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011a22:	4620      	mov	r0, r4
 8011a24:	2100      	movs	r1, #0
 8011a26:	f00e fd51 	bl	80204cc <USBD_LL_StallEP>
}
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a2e:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8011a32:	4629      	mov	r1, r5
 8011a34:	4620      	mov	r0, r4
 8011a36:	689b      	ldr	r3, [r3, #8]
}
 8011a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011a3c:	4718      	bx	r3
    switch (req->bRequest)
 8011a3e:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8011a40:	888a      	ldrh	r2, [r1, #4]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8011a46:	d036      	beq.n	8011ab6 <USBD_StdEPReq+0xb2>
 8011a48:	2b03      	cmp	r3, #3
 8011a4a:	d023      	beq.n	8011a94 <USBD_StdEPReq+0x90>
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1e4      	bne.n	8011a1a <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8011a50:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8011a54:	2b02      	cmp	r3, #2
 8011a56:	d04c      	beq.n	8011af2 <USBD_StdEPReq+0xee>
 8011a58:	2b03      	cmp	r3, #3
 8011a5a:	d1de      	bne.n	8011a1a <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011a5c:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8011a60:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011a62:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8011a66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8011a6a:	d453      	bmi.n	8011b14 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011a6c:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d0d2      	beq.n	8011a1a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a74:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8011a78:	2514      	movs	r5, #20
 8011a7a:	fb05 0503 	mla	r5, r5, r3, r0
 8011a7e:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d152      	bne.n	8011b2c <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8011a86:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a88:	4629      	mov	r1, r5
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	2202      	movs	r2, #2
 8011a8e:	f000 f8a1 	bl	8011bd4 <USBD_CtlSendData>
          break;
 8011a92:	e7ca      	b.n	8011a2a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8011a94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8011a98:	2b02      	cmp	r3, #2
 8011a9a:	d021      	beq.n	8011ae0 <USBD_StdEPReq+0xdc>
 8011a9c:	2b03      	cmp	r3, #3
 8011a9e:	d1bc      	bne.n	8011a1a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011aa0:	886b      	ldrh	r3, [r5, #2]
 8011aa2:	b923      	cbnz	r3, 8011aae <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011aa4:	064a      	lsls	r2, r1, #25
 8011aa6:	d002      	beq.n	8011aae <USBD_StdEPReq+0xaa>
 8011aa8:	88eb      	ldrh	r3, [r5, #6]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d049      	beq.n	8011b42 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 8011aae:	4620      	mov	r0, r4
 8011ab0:	f000 f8c0 	bl	8011c34 <USBD_CtlSendStatus>
        break;
 8011ab4:	e7b9      	b.n	8011a2a <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8011ab6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8011aba:	2b02      	cmp	r3, #2
 8011abc:	d010      	beq.n	8011ae0 <USBD_StdEPReq+0xdc>
 8011abe:	2b03      	cmp	r3, #3
 8011ac0:	d1ab      	bne.n	8011a1a <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8011ac2:	886b      	ldrh	r3, [r5, #2]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d1b0      	bne.n	8011a2a <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8011ac8:	064e      	lsls	r6, r1, #25
 8011aca:	d135      	bne.n	8011b38 <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8011acc:	4620      	mov	r0, r4
 8011ace:	f000 f8b1 	bl	8011c34 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ad2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	4620      	mov	r0, r4
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	4798      	blx	r3
 8011ade:	e7a4      	b.n	8011a2a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ae0:	064b      	lsls	r3, r1, #25
 8011ae2:	d09a      	beq.n	8011a1a <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ae4:	f00e fcf2 	bl	80204cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ae8:	4620      	mov	r0, r4
 8011aea:	2180      	movs	r1, #128	; 0x80
 8011aec:	f00e fcee 	bl	80204cc <USBD_LL_StallEP>
 8011af0:	e79b      	b.n	8011a2a <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011af2:	0648      	lsls	r0, r1, #25
 8011af4:	d191      	bne.n	8011a1a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011af6:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8011af8:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011afc:	4620      	mov	r0, r4
 8011afe:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b02:	bf4c      	ite	mi
 8011b04:	f104 0114 	addmi.w	r1, r4, #20
 8011b08:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8011b0c:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b0e:	f000 f861 	bl	8011bd4 <USBD_CtlSendData>
        break;
 8011b12:	e78a      	b.n	8011a2a <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011b14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f43f af7f 	beq.w	8011a1a <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b1c:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8011b20:	1c5d      	adds	r5, r3, #1
 8011b22:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011b26:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8011b2a:	e7aa      	b.n	8011a82 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f00e fce9 	bl	8020504 <USBD_LL_IsStallEP>
 8011b32:	b120      	cbz	r0, 8011b3e <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8011b34:	2301      	movs	r3, #1
 8011b36:	e7a6      	b.n	8011a86 <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011b38:	f00e fcd6 	bl	80204e8 <USBD_LL_ClearStallEP>
 8011b3c:	e7c6      	b.n	8011acc <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8011b3e:	6028      	str	r0, [r5, #0]
 8011b40:	e7a2      	b.n	8011a88 <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8011b42:	f00e fcc3 	bl	80204cc <USBD_LL_StallEP>
 8011b46:	e7b2      	b.n	8011aae <USBD_StdEPReq+0xaa>

08011b48 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8011b48:	780b      	ldrb	r3, [r1, #0]
 8011b4a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8011b4c:	784b      	ldrb	r3, [r1, #1]
 8011b4e:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011b50:	78ca      	ldrb	r2, [r1, #3]
 8011b52:	788b      	ldrb	r3, [r1, #2]
 8011b54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 8011b58:	8043      	strh	r3, [r0, #2]
 8011b5a:	794a      	ldrb	r2, [r1, #5]
 8011b5c:	790b      	ldrb	r3, [r1, #4]
 8011b5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8011b62:	8083      	strh	r3, [r0, #4]
 8011b64:	79ca      	ldrb	r2, [r1, #7]
 8011b66:	798b      	ldrb	r3, [r1, #6]
 8011b68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8011b6c:	80c3      	strh	r3, [r0, #6]
}
 8011b6e:	4770      	bx	lr

08011b70 <USBD_CtlError>:
{
 8011b70:	b510      	push	{r4, lr}
 8011b72:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011b74:	2180      	movs	r1, #128	; 0x80
 8011b76:	f00e fca9 	bl	80204cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011b7a:	2100      	movs	r1, #0
 8011b7c:	4620      	mov	r0, r4
}
 8011b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8011b82:	f00e bca3 	b.w	80204cc <USBD_LL_StallEP>
 8011b86:	bf00      	nop

08011b88 <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8011b88:	b308      	cbz	r0, 8011bce <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8011b8a:	7803      	ldrb	r3, [r0, #0]
{
 8011b8c:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 8011b8e:	b1fb      	cbz	r3, 8011bd0 <USBD_GetString+0x48>
 8011b90:	4604      	mov	r4, r0
 8011b92:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 8011b96:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 8011b98:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2d00      	cmp	r5, #0
 8011ba0:	d1f9      	bne.n	8011b96 <USBD_GetString+0xe>
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011ba6:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011ba8:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 8011baa:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011bac:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8011bae:	7804      	ldrb	r4, [r0, #0]
 8011bb0:	b15c      	cbz	r4, 8011bca <USBD_GetString+0x42>
  idx++;
 8011bb2:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8011bb4:	2500      	movs	r5, #0
    idx++;
 8011bb6:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8011bb8:	54cc      	strb	r4, [r1, r3]
    idx++;
 8011bba:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8011bbc:	b2d2      	uxtb	r2, r2
    idx++;
 8011bbe:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8011bc0:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8011bc2:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8011bc6:	2c00      	cmp	r4, #0
 8011bc8:	d1f5      	bne.n	8011bb6 <USBD_GetString+0x2e>
}
 8011bca:	bc70      	pop	{r4, r5, r6}
 8011bcc:	4770      	bx	lr
 8011bce:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8011bd0:	2302      	movs	r3, #2
 8011bd2:	e7e8      	b.n	8011ba6 <USBD_GetString+0x1e>

08011bd4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011bd4:	b538      	push	{r3, r4, r5, lr}
 8011bd6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011bd8:	2502      	movs	r5, #2
{
 8011bda:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bdc:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011bde:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8011be2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011be6:	f00e fcaf 	bl	8020548 <USBD_LL_Transmit>

  return USBD_OK;
}
 8011bea:	2000      	movs	r0, #0
 8011bec:	bd38      	pop	{r3, r4, r5, pc}
 8011bee:	bf00      	nop

08011bf0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011bf0:	b510      	push	{r4, lr}
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011bf6:	2100      	movs	r1, #0
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	f00e fca5 	bl	8020548 <USBD_LL_Transmit>

  return USBD_OK;
}
 8011bfe:	2000      	movs	r0, #0
 8011c00:	bd10      	pop	{r4, pc}
 8011c02:	bf00      	nop

08011c04 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011c04:	b538      	push	{r3, r4, r5, lr}
 8011c06:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011c08:	2503      	movs	r5, #3
{
 8011c0a:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c0c:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011c0e:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8011c12:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c16:	f00e fca5 	bl	8020564 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	bd38      	pop	{r3, r4, r5, pc}
 8011c1e:	bf00      	nop

08011c20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011c20:	b510      	push	{r4, lr}
 8011c22:	460c      	mov	r4, r1
 8011c24:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011c26:	2100      	movs	r1, #0
 8011c28:	4622      	mov	r2, r4
 8011c2a:	f00e fc9b 	bl	8020564 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8011c2e:	2000      	movs	r0, #0
 8011c30:	bd10      	pop	{r4, pc}
 8011c32:	bf00      	nop

08011c34 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011c34:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c36:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c38:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011c3a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011c3e:	4619      	mov	r1, r3
 8011c40:	461a      	mov	r2, r3
 8011c42:	f00e fc81 	bl	8020548 <USBD_LL_Transmit>

  return USBD_OK;
}
 8011c46:	2000      	movs	r0, #0
 8011c48:	bd08      	pop	{r3, pc}
 8011c4a:	bf00      	nop

08011c4c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011c4c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c4e:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c50:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011c52:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c56:	4619      	mov	r1, r3
 8011c58:	461a      	mov	r2, r3
 8011c5a:	f00e fc83 	bl	8020564 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8011c5e:	2000      	movs	r0, #0
 8011c60:	bd08      	pop	{r3, pc}
 8011c62:	bf00      	nop

08011c64 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8011c64:	4b10      	ldr	r3, [pc, #64]	; (8011ca8 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011c66:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 8011c68:	7a5c      	ldrb	r4, [r3, #9]
 8011c6a:	b9dc      	cbnz	r4, 8011ca4 <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 8011c6c:	f893 e009 	ldrb.w	lr, [r3, #9]
 8011c70:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 8011c72:	7a5e      	ldrb	r6, [r3, #9]
 8011c74:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 8011c78:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 8011c7a:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 8011c7e:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8011c80:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 8011c84:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 8011c86:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 8011c88:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 8011c8a:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 8011c8c:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 8011c8e:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8011c90:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 8011c92:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 8011c96:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 8011c98:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 8011c9a:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 8011c9c:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8011ca0:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8011ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 8011ca4:	2001      	movs	r0, #1
}
 8011ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ca8:	20001cc0 	.word	0x20001cc0

08011cac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011cac:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8011cae:	f001 f94f 	bl	8012f50 <vTaskStartScheduler>
  
  return osOK;
}
 8011cb2:	2000      	movs	r0, #0
 8011cb4:	bd08      	pop	{r3, pc}
 8011cb6:	bf00      	nop

08011cb8 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cb8:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8011cbc:	b10b      	cbz	r3, 8011cc2 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8011cbe:	f001 b99d 	b.w	8012ffc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8011cc2:	f001 b995 	b.w	8012ff0 <xTaskGetTickCount>
 8011cc6:	bf00      	nop

08011cc8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011cc8:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011cca:	6944      	ldr	r4, [r0, #20]
{
 8011ccc:	b086      	sub	sp, #24
 8011cce:	4602      	mov	r2, r0
 8011cd0:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011cd2:	b18c      	cbz	r4, 8011cf8 <osThreadCreate+0x30>
 8011cd4:	6986      	ldr	r6, [r0, #24]
 8011cd6:	b17e      	cbz	r6, 8011cf8 <osThreadCreate+0x30>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cd8:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8011cdc:	6912      	ldr	r2, [r2, #16]
  if (priority != osPriorityError) {
 8011cde:	2d84      	cmp	r5, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8011ce0:	bf14      	ite	ne
 8011ce2:	3503      	addne	r5, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011ce4:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011ce6:	e9d0 1000 	ldrd	r1, r0, [r0]
 8011cea:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8011cee:	9500      	str	r5, [sp, #0]
 8011cf0:	f001 f8bc 	bl	8012e6c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8011cf4:	b006      	add	sp, #24
 8011cf6:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011cf8:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8011cfc:	ad05      	add	r5, sp, #20
  if (priority != osPriorityError) {
 8011cfe:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8011d00:	bf14      	ite	ne
 8011d02:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011d04:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d06:	e9d2 1000 	ldrd	r1, r0, [r2]
 8011d0a:	8a12      	ldrh	r2, [r2, #16]
 8011d0c:	e9cd 4500 	strd	r4, r5, [sp]
 8011d10:	f001 f8ea 	bl	8012ee8 <xTaskCreate>
 8011d14:	2801      	cmp	r0, #1
 8011d16:	bf0c      	ite	eq
 8011d18:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8011d1a:	2000      	movne	r0, #0
}
 8011d1c:	b006      	add	sp, #24
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}

08011d20 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011d20:	2801      	cmp	r0, #1
{
 8011d22:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011d24:	bf38      	it	cc
 8011d26:	2001      	movcc	r0, #1
 8011d28:	f001 fab0 	bl	801328c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	bd08      	pop	{r3, pc}

08011d30 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8011d30:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
 8011d32:	e9d0 0200 	ldrd	r0, r2, [r0]
{
 8011d36:	b500      	push	{lr}
 8011d38:	b083      	sub	sp, #12
  if(timer_def->controlblock != NULL) {
 8011d3a:	b16a      	cbz	r2, 8011d58 <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 8011d3c:	9201      	str	r2, [sp, #4]
 8011d3e:	f1a1 0201 	sub.w	r2, r1, #1
 8011d42:	2101      	movs	r1, #1
 8011d44:	9000      	str	r0, [sp, #0]
 8011d46:	fab2 f282 	clz	r2, r2
 8011d4a:	480a      	ldr	r0, [pc, #40]	; (8011d74 <osTimerCreate+0x44>)
 8011d4c:	0952      	lsrs	r2, r2, #5
 8011d4e:	f001 feb1 	bl	8013ab4 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8011d52:	b003      	add	sp, #12
 8011d54:	f85d fb04 	ldr.w	pc, [sp], #4
    return xTimerCreate((const char *)"",
 8011d58:	f1a1 0201 	sub.w	r2, r1, #1
 8011d5c:	2101      	movs	r1, #1
 8011d5e:	9000      	str	r0, [sp, #0]
 8011d60:	fab2 f282 	clz	r2, r2
 8011d64:	4803      	ldr	r0, [pc, #12]	; (8011d74 <osTimerCreate+0x44>)
 8011d66:	0952      	lsrs	r2, r2, #5
 8011d68:	f001 fe86 	bl	8013a78 <xTimerCreate>
}
 8011d6c:	b003      	add	sp, #12
 8011d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d72:	bf00      	nop
 8011d74:	08025c5c 	.word	0x08025c5c

08011d78 <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011d78:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011d7a:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8011d7c:	b109      	cbz	r1, 8011d82 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011d7e:	f000 bbb9 	b.w	80124f4 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011d82:	f000 bbcf 	b.w	8012524 <xQueueCreateMutex>
 8011d86:	bf00      	nop

08011d88 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011d88:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011d8a:	2400      	movs	r4, #0
{
 8011d8c:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8011d8e:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8011d90:	b300      	cbz	r0, 8011dd4 <osMutexWait+0x4c>
 8011d92:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011d96:	b933      	cbnz	r3, 8011da6 <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011d98:	f000 fd62 	bl	8012860 <xQueueSemaphoreTake>
 8011d9c:	2801      	cmp	r0, #1
 8011d9e:	d116      	bne.n	8011dce <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8011da0:	2000      	movs	r0, #0
}
 8011da2:	b002      	add	sp, #8
 8011da4:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011da6:	aa01      	add	r2, sp, #4
 8011da8:	4621      	mov	r1, r4
 8011daa:	f000 fe3b 	bl	8012a24 <xQueueReceiveFromISR>
 8011dae:	2801      	cmp	r0, #1
 8011db0:	d10d      	bne.n	8011dce <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 8011db2:	9b01      	ldr	r3, [sp, #4]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d0f3      	beq.n	8011da0 <osMutexWait+0x18>
 8011db8:	4b08      	ldr	r3, [pc, #32]	; (8011ddc <osMutexWait+0x54>)
 8011dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dbe:	601a      	str	r2, [r3, #0]
 8011dc0:	f3bf 8f4f 	dsb	sy
 8011dc4:	f3bf 8f6f 	isb	sy
  return osOK;
 8011dc8:	4620      	mov	r0, r4
}
 8011dca:	b002      	add	sp, #8
 8011dcc:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8011dce:	20ff      	movs	r0, #255	; 0xff
}
 8011dd0:	b002      	add	sp, #8
 8011dd2:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8011dd4:	2080      	movs	r0, #128	; 0x80
}
 8011dd6:	b002      	add	sp, #8
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	bf00      	nop
 8011ddc:	e000ed04 	.word	0xe000ed04

08011de0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011de0:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8011de2:	2400      	movs	r4, #0
{
 8011de4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8011de6:	9401      	str	r4, [sp, #4]
 8011de8:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8011dec:	b18b      	cbz	r3, 8011e12 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011dee:	a901      	add	r1, sp, #4
 8011df0:	f000 fc1c 	bl	801262c <xQueueGiveFromISR>
 8011df4:	2801      	cmp	r0, #1
 8011df6:	d112      	bne.n	8011e1e <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011df8:	9b01      	ldr	r3, [sp, #4]
 8011dfa:	b19b      	cbz	r3, 8011e24 <osMutexRelease+0x44>
 8011dfc:	4b0b      	ldr	r3, [pc, #44]	; (8011e2c <osMutexRelease+0x4c>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8011e0c:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8011e0e:	b002      	add	sp, #8
 8011e10:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011e12:	461a      	mov	r2, r3
 8011e14:	4619      	mov	r1, r3
 8011e16:	f000 fa9d 	bl	8012354 <xQueueGenericSend>
 8011e1a:	2801      	cmp	r0, #1
 8011e1c:	d002      	beq.n	8011e24 <osMutexRelease+0x44>
    result = osErrorOS;
 8011e1e:	20ff      	movs	r0, #255	; 0xff
}
 8011e20:	b002      	add	sp, #8
 8011e22:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8011e24:	2000      	movs	r0, #0
}
 8011e26:	b002      	add	sp, #8
 8011e28:	bd10      	pop	{r4, pc}
 8011e2a:	bf00      	nop
 8011e2c:	e000ed04 	.word	0xe000ed04

08011e30 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011e30:	b510      	push	{r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011e32:	6844      	ldr	r4, [r0, #4]
{ 
 8011e34:	b082      	sub	sp, #8
 8011e36:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 8011e38:	b184      	cbz	r4, 8011e5c <osSemaphoreCreate+0x2c>
    if (count == 1) {
 8011e3a:	2901      	cmp	r1, #1
 8011e3c:	d003      	beq.n	8011e46 <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011e3e:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011e40:	4620      	mov	r0, r4
 8011e42:	b002      	add	sp, #8
 8011e44:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011e46:	2200      	movs	r2, #0
 8011e48:	2103      	movs	r1, #3
 8011e4a:	4623      	mov	r3, r4
 8011e4c:	9100      	str	r1, [sp, #0]
 8011e4e:	4611      	mov	r1, r2
 8011e50:	f000 fa1c 	bl	801228c <xQueueGenericCreateStatic>
 8011e54:	4604      	mov	r4, r0
}
 8011e56:	4620      	mov	r0, r4
 8011e58:	b002      	add	sp, #8
 8011e5a:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8011e5c:	2901      	cmp	r1, #1
 8011e5e:	d1ef      	bne.n	8011e40 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8011e60:	4621      	mov	r1, r4
 8011e62:	2203      	movs	r2, #3
 8011e64:	f000 fa68 	bl	8012338 <xQueueGenericCreate>
 8011e68:	4604      	mov	r4, r0
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	d0e8      	beq.n	8011e40 <osSemaphoreCreate+0x10>
 8011e6e:	2300      	movs	r3, #0
 8011e70:	461a      	mov	r2, r3
 8011e72:	4619      	mov	r1, r3
 8011e74:	f000 fa6e 	bl	8012354 <xQueueGenericSend>
 8011e78:	e7e2      	b.n	8011e40 <osSemaphoreCreate+0x10>
 8011e7a:	bf00      	nop

08011e7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011e7c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011e7e:	2400      	movs	r4, #0
{
 8011e80:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8011e82:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8011e84:	b300      	cbz	r0, 8011ec8 <osSemaphoreWait+0x4c>
 8011e86:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011e8a:	b933      	cbnz	r3, 8011e9a <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8011e8c:	f000 fce8 	bl	8012860 <xQueueSemaphoreTake>
 8011e90:	2801      	cmp	r0, #1
 8011e92:	d116      	bne.n	8011ec2 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8011e94:	2000      	movs	r0, #0
}
 8011e96:	b002      	add	sp, #8
 8011e98:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011e9a:	aa01      	add	r2, sp, #4
 8011e9c:	4621      	mov	r1, r4
 8011e9e:	f000 fdc1 	bl	8012a24 <xQueueReceiveFromISR>
 8011ea2:	2801      	cmp	r0, #1
 8011ea4:	d10d      	bne.n	8011ec2 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 8011ea6:	9b01      	ldr	r3, [sp, #4]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d0f3      	beq.n	8011e94 <osSemaphoreWait+0x18>
 8011eac:	4b08      	ldr	r3, [pc, #32]	; (8011ed0 <osSemaphoreWait+0x54>)
 8011eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb2:	601a      	str	r2, [r3, #0]
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	f3bf 8f6f 	isb	sy
  return osOK;
 8011ebc:	4620      	mov	r0, r4
}
 8011ebe:	b002      	add	sp, #8
 8011ec0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8011ec2:	20ff      	movs	r0, #255	; 0xff
}
 8011ec4:	b002      	add	sp, #8
 8011ec6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8011ec8:	2080      	movs	r0, #128	; 0x80
}
 8011eca:	b002      	add	sp, #8
 8011ecc:	bd10      	pop	{r4, pc}
 8011ece:	bf00      	nop
 8011ed0:	e000ed04 	.word	0xe000ed04

08011ed4 <osSemaphoreRelease>:
 8011ed4:	f7ff bf84 	b.w	8011de0 <osMutexRelease>

08011ed8 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011ed8:	6882      	ldr	r2, [r0, #8]
 8011eda:	b15a      	cbz	r2, 8011ef4 <osMessageCreate+0x1c>
 8011edc:	68c3      	ldr	r3, [r0, #12]
 8011ede:	b14b      	cbz	r3, 8011ef4 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011ee0:	6841      	ldr	r1, [r0, #4]
{
 8011ee2:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011ee4:	2400      	movs	r4, #0
{
 8011ee6:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011ee8:	9400      	str	r4, [sp, #0]
 8011eea:	6800      	ldr	r0, [r0, #0]
 8011eec:	f000 f9ce 	bl	801228c <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8011ef0:	b002      	add	sp, #8
 8011ef2:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	e9d0 0100 	ldrd	r0, r1, [r0]
 8011efa:	f000 ba1d 	b.w	8012338 <xQueueGenericCreate>
 8011efe:	bf00      	nop

08011f00 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011f00:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8011f02:	2400      	movs	r4, #0
{
 8011f04:	b084      	sub	sp, #16
 8011f06:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011f08:	9403      	str	r4, [sp, #12]
 8011f0a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8011f0e:	b15b      	cbz	r3, 8011f28 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8011f10:	4623      	mov	r3, r4
 8011f12:	aa03      	add	r2, sp, #12
 8011f14:	a901      	add	r1, sp, #4
 8011f16:	f000 fb17 	bl	8012548 <xQueueGenericSendFromISR>
 8011f1a:	2801      	cmp	r0, #1
 8011f1c:	d10c      	bne.n	8011f38 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f1e:	9b03      	ldr	r3, [sp, #12]
 8011f20:	b96b      	cbnz	r3, 8011f3e <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8011f22:	2000      	movs	r0, #0
}
 8011f24:	b004      	add	sp, #16
 8011f26:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011f28:	2a01      	cmp	r2, #1
 8011f2a:	a901      	add	r1, sp, #4
 8011f2c:	bf38      	it	cc
 8011f2e:	2201      	movcc	r2, #1
 8011f30:	f000 fa10 	bl	8012354 <xQueueGenericSend>
 8011f34:	2801      	cmp	r0, #1
 8011f36:	d0f4      	beq.n	8011f22 <osMessagePut+0x22>
      return osErrorOS;
 8011f38:	20ff      	movs	r0, #255	; 0xff
}
 8011f3a:	b004      	add	sp, #16
 8011f3c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8011f3e:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <osMessagePut+0x54>)
 8011f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f44:	601a      	str	r2, [r3, #0]
 8011f46:	f3bf 8f4f 	dsb	sy
 8011f4a:	f3bf 8f6f 	isb	sy
  return osOK;
 8011f4e:	4620      	mov	r0, r4
}
 8011f50:	b004      	add	sp, #16
 8011f52:	bd10      	pop	{r4, pc}
 8011f54:	e000ed04 	.word	0xe000ed04

08011f58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011f58:	b530      	push	{r4, r5, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8011f5a:	2300      	movs	r3, #0
{
 8011f5c:	b085      	sub	sp, #20
 8011f5e:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8011f60:	e9cd 3102 	strd	r3, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8011f64:	b361      	cbz	r1, 8011fc0 <osMessageGet+0x68>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8011f66:	9300      	str	r3, [sp, #0]
 8011f68:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8011f6c:	b993      	cbnz	r3, 8011f94 <osMessageGet+0x3c>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011f6e:	4608      	mov	r0, r1
 8011f70:	a902      	add	r1, sp, #8
 8011f72:	4615      	mov	r5, r2
 8011f74:	f000 fbb8 	bl	80126e8 <xQueueReceive>
 8011f78:	2801      	cmp	r0, #1
 8011f7a:	d02b      	beq.n	8011fd4 <osMessageGet+0x7c>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8011f7c:	2d00      	cmp	r5, #0
 8011f7e:	bf18      	it	ne
 8011f80:	2540      	movne	r5, #64	; 0x40
 8011f82:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8011f84:	ab04      	add	r3, sp, #16
 8011f86:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011f8e:	4620      	mov	r0, r4
 8011f90:	b005      	add	sp, #20
 8011f92:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011f94:	466a      	mov	r2, sp
 8011f96:	4608      	mov	r0, r1
 8011f98:	a902      	add	r1, sp, #8
 8011f9a:	f000 fd43 	bl	8012a24 <xQueueReceiveFromISR>
      event.status = osOK;
 8011f9e:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8011fa0:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8011fa2:	bf0c      	ite	eq
 8011fa4:	2210      	moveq	r2, #16
 8011fa6:	2200      	movne	r2, #0
 8011fa8:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d0ea      	beq.n	8011f84 <osMessageGet+0x2c>
 8011fae:	4b0b      	ldr	r3, [pc, #44]	; (8011fdc <osMessageGet+0x84>)
 8011fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fb4:	601a      	str	r2, [r3, #0]
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	f3bf 8f6f 	isb	sy
 8011fbe:	e7e1      	b.n	8011f84 <osMessageGet+0x2c>
    event.status = osErrorParameter;
 8011fc0:	2380      	movs	r3, #128	; 0x80
 8011fc2:	9301      	str	r3, [sp, #4]
    return event;
 8011fc4:	ab04      	add	r3, sp, #16
 8011fc6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8011fca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011fce:	4620      	mov	r0, r4
 8011fd0:	b005      	add	sp, #20
 8011fd2:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 8011fd4:	2310      	movs	r3, #16
 8011fd6:	9301      	str	r3, [sp, #4]
 8011fd8:	e7d4      	b.n	8011f84 <osMessageGet+0x2c>
 8011fda:	bf00      	nop
 8011fdc:	e000ed04 	.word	0xe000ed04

08011fe0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fe0:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011fe4:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011fe8:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011fea:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011fec:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011fee:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011ff0:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011ff4:	4770      	bx	lr
 8011ff6:	bf00      	nop

08011ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop

08012000 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8012000:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8012002:	6802      	ldr	r2, [r0, #0]
{
 8012004:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012006:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8012008:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801200a:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801200e:	689c      	ldr	r4, [r3, #8]
 8012010:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012012:	6099      	str	r1, [r3, #8]
}
 8012014:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8012018:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801201a:	6002      	str	r2, [r0, #0]
}
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012020:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012022:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012024:	1c6b      	adds	r3, r5, #1
 8012026:	d010      	beq.n	801204a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012028:	f100 0308 	add.w	r3, r0, #8
 801202c:	461c      	mov	r4, r3
 801202e:	685b      	ldr	r3, [r3, #4]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	42aa      	cmp	r2, r5
 8012034:	d9fa      	bls.n	801202c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8012036:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8012038:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801203a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801203c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801203e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8012040:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8012042:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8012044:	6002      	str	r2, [r0, #0]
}
 8012046:	bc30      	pop	{r4, r5}
 8012048:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801204a:	6904      	ldr	r4, [r0, #16]
 801204c:	6863      	ldr	r3, [r4, #4]
 801204e:	e7f2      	b.n	8012036 <vListInsert+0x16>

08012050 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012050:	6903      	ldr	r3, [r0, #16]
{
 8012052:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012054:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012056:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 801205a:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 801205c:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012060:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012062:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8012064:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012068:	bf08      	it	eq
 801206a:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 801206c:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 801206e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8012070:	3a01      	subs	r2, #1
 8012072:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8012074:	6818      	ldr	r0, [r3, #0]
}
 8012076:	4770      	bx	lr

08012078 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012078:	b570      	push	{r4, r5, r6, lr}
 801207a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801207c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 801207e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012080:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012082:	b92a      	cbnz	r2, 8012090 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012084:	6805      	ldr	r5, [r0, #0]
 8012086:	b365      	cbz	r5, 80120e2 <prvCopyDataToQueue+0x6a>
 8012088:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801208a:	4610      	mov	r0, r2
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801208c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 801208e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8012090:	b97d      	cbnz	r5, 80120b2 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012092:	6840      	ldr	r0, [r0, #4]
 8012094:	f00e fc0c 	bl	80208b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012098:	6863      	ldr	r3, [r4, #4]
 801209a:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801209c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801209e:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120a0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80120a2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120a4:	d319      	bcc.n	80120da <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80120a6:	6822      	ldr	r2, [r4, #0]
 80120a8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80120aa:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80120ac:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120ae:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80120b0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80120b2:	68c0      	ldr	r0, [r0, #12]
 80120b4:	f00e fbfc 	bl	80208b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80120b8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80120ba:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120bc:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80120be:	4250      	negs	r0, r2
 80120c0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120c2:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80120c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120c6:	d202      	bcs.n	80120ce <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80120c8:	68a3      	ldr	r3, [r4, #8]
 80120ca:	4403      	add	r3, r0
 80120cc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80120ce:	2d02      	cmp	r5, #2
 80120d0:	d00d      	beq.n	80120ee <prvCopyDataToQueue+0x76>
 80120d2:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80120d4:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120d6:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80120d8:	bd70      	pop	{r4, r5, r6, pc}
 80120da:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80120dc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120de:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80120e0:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80120e2:	6880      	ldr	r0, [r0, #8]
 80120e4:	3601      	adds	r6, #1
 80120e6:	f001 fa93 	bl	8013610 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80120ea:	60a5      	str	r5, [r4, #8]
 80120ec:	e7ce      	b.n	801208c <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120ee:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80120f0:	f04f 0000 	mov.w	r0, #0
 80120f4:	bf38      	it	cc
 80120f6:	2601      	movcc	r6, #1
 80120f8:	e7c8      	b.n	801208c <prvCopyDataToQueue+0x14>
 80120fa:	bf00      	nop

080120fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80120fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80120fe:	b172      	cbz	r2, 801211e <prvCopyDataFromQueue+0x22>
 8012100:	460b      	mov	r3, r1
{
 8012102:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012104:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012108:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801210a:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801210c:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801210e:	d301      	bcc.n	8012114 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012110:	6801      	ldr	r1, [r0, #0]
 8012112:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012114:	4618      	mov	r0, r3
	}
}
 8012116:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801211a:	f00e bbc9 	b.w	80208b0 <memcpy>
 801211e:	4770      	bx	lr

08012120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012120:	b570      	push	{r4, r5, r6, lr}
 8012122:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012124:	f001 feee 	bl	8013f04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012128:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 801212c:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801212e:	2d00      	cmp	r5, #0
 8012130:	dd15      	ble.n	801215e <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012132:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8012136:	e004      	b.n	8012142 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012138:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801213a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801213e:	b25d      	sxtb	r5, r3
 8012140:	d00d      	beq.n	801215e <prvUnlockQueue+0x3e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012142:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012144:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012146:	b153      	cbz	r3, 801215e <prvUnlockQueue+0x3e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012148:	f001 f94a 	bl	80133e0 <xTaskRemoveFromEventList>
 801214c:	2800      	cmp	r0, #0
 801214e:	d0f3      	beq.n	8012138 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8012150:	f001 f9ea 	bl	8013528 <vTaskMissedYield>
			--cTxLock;
 8012154:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012156:	f013 0fff 	tst.w	r3, #255	; 0xff
 801215a:	b25d      	sxtb	r5, r3
 801215c:	d1f1      	bne.n	8012142 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801215e:	23ff      	movs	r3, #255	; 0xff
 8012160:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012164:	f001 fef4 	bl	8013f50 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012168:	f001 fecc 	bl	8013f04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801216c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8012170:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012172:	2d00      	cmp	r5, #0
 8012174:	dd15      	ble.n	80121a2 <prvUnlockQueue+0x82>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012176:	f104 0610 	add.w	r6, r4, #16
 801217a:	e004      	b.n	8012186 <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801217c:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801217e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012182:	b25d      	sxtb	r5, r3
 8012184:	d00d      	beq.n	80121a2 <prvUnlockQueue+0x82>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012186:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012188:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801218a:	b153      	cbz	r3, 80121a2 <prvUnlockQueue+0x82>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801218c:	f001 f928 	bl	80133e0 <xTaskRemoveFromEventList>
 8012190:	2800      	cmp	r0, #0
 8012192:	d0f3      	beq.n	801217c <prvUnlockQueue+0x5c>
					vTaskMissedYield();
 8012194:	f001 f9c8 	bl	8013528 <vTaskMissedYield>
				--cRxLock;
 8012198:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801219a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801219e:	b25d      	sxtb	r5, r3
 80121a0:	d1f1      	bne.n	8012186 <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80121a2:	23ff      	movs	r3, #255	; 0xff
 80121a4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80121a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80121ac:	f001 bed0 	b.w	8013f50 <vPortExitCritical>

080121b0 <xQueueGenericReset>:
{
 80121b0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80121b2:	b1e0      	cbz	r0, 80121ee <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
 80121b4:	4604      	mov	r4, r0
 80121b6:	460d      	mov	r5, r1
 80121b8:	f001 fea4 	bl	8013f04 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80121bc:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121be:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80121c0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80121c2:	21ff      	movs	r1, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80121c4:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 80121c6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80121ca:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121ce:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 80121d2:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121d6:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121d8:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121da:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121dc:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80121de:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 80121e0:	b9fd      	cbnz	r5, 8012222 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121e2:	6923      	ldr	r3, [r4, #16]
 80121e4:	b973      	cbnz	r3, 8012204 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 80121e6:	f001 feb3 	bl	8013f50 <vPortExitCritical>
}
 80121ea:	2001      	movs	r0, #1
 80121ec:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80121ee:	f04f 0330 	mov.w	r3, #48	; 0x30
 80121f2:	b672      	cpsid	i
 80121f4:	f383 8811 	msr	BASEPRI, r3
 80121f8:	f3bf 8f6f 	isb	sy
 80121fc:	f3bf 8f4f 	dsb	sy
 8012200:	b662      	cpsie	i
	configASSERT( pxQueue );
 8012202:	e7fe      	b.n	8012202 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012204:	f104 0010 	add.w	r0, r4, #16
 8012208:	f001 f8ea 	bl	80133e0 <xTaskRemoveFromEventList>
 801220c:	2800      	cmp	r0, #0
 801220e:	d0ea      	beq.n	80121e6 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8012210:	4b0a      	ldr	r3, [pc, #40]	; (801223c <xQueueGenericReset+0x8c>)
 8012212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012216:	601a      	str	r2, [r3, #0]
 8012218:	f3bf 8f4f 	dsb	sy
 801221c:	f3bf 8f6f 	isb	sy
 8012220:	e7e1      	b.n	80121e6 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012222:	f104 0010 	add.w	r0, r4, #16
 8012226:	f7ff fedb 	bl	8011fe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801222a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801222e:	f7ff fed7 	bl	8011fe0 <vListInitialise>
	taskEXIT_CRITICAL();
 8012232:	f001 fe8d 	bl	8013f50 <vPortExitCritical>
}
 8012236:	2001      	movs	r0, #1
 8012238:	bd38      	pop	{r3, r4, r5, pc}
 801223a:	bf00      	nop
 801223c:	e000ed04 	.word	0xe000ed04

08012240 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8012240:	b570      	push	{r4, r5, r6, lr}
 8012242:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8012244:	460d      	mov	r5, r1
 8012246:	b169      	cbz	r1, 8012264 <xQueueGenericCreate.part.0+0x24>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012248:	fb00 f001 	mul.w	r0, r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801224c:	3048      	adds	r0, #72	; 0x48
 801224e:	f001 ffc7 	bl	80141e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8012252:	4604      	mov	r4, r0
 8012254:	b1b0      	cbz	r0, 8012284 <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012256:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012258:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801225c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012260:	6003      	str	r3, [r0, #0]
 8012262:	e007      	b.n	8012274 <xQueueGenericCreate.part.0+0x34>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012264:	2048      	movs	r0, #72	; 0x48
 8012266:	f001 ffbb 	bl	80141e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801226a:	4604      	mov	r4, r0
 801226c:	b150      	cbz	r0, 8012284 <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801226e:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012272:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012274:	2101      	movs	r1, #1
 8012276:	4620      	mov	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 8012278:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801227a:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801227c:	f7ff ff98 	bl	80121b0 <xQueueGenericReset>
	}
 8012280:	4620      	mov	r0, r4
 8012282:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012284:	2400      	movs	r4, #0
	}
 8012286:	4620      	mov	r0, r4
 8012288:	bd70      	pop	{r4, r5, r6, pc}
 801228a:	bf00      	nop

0801228c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801228c:	b950      	cbnz	r0, 80122a4 <xQueueGenericCreateStatic+0x18>
 801228e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012292:	b672      	cpsid	i
 8012294:	f383 8811 	msr	BASEPRI, r3
 8012298:	f3bf 8f6f 	isb	sy
 801229c:	f3bf 8f4f 	dsb	sy
 80122a0:	b662      	cpsie	i
 80122a2:	e7fe      	b.n	80122a2 <xQueueGenericCreateStatic+0x16>
	{
 80122a4:	b530      	push	{r4, r5, lr}
 80122a6:	461c      	mov	r4, r3
 80122a8:	b083      	sub	sp, #12
		configASSERT( pxStaticQueue != NULL );
 80122aa:	b353      	cbz	r3, 8012302 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80122ac:	460d      	mov	r5, r1
 80122ae:	b162      	cbz	r2, 80122ca <xQueueGenericCreateStatic+0x3e>
 80122b0:	b951      	cbnz	r1, 80122c8 <xQueueGenericCreateStatic+0x3c>
 80122b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122b6:	b672      	cpsid	i
 80122b8:	f383 8811 	msr	BASEPRI, r3
 80122bc:	f3bf 8f6f 	isb	sy
 80122c0:	f3bf 8f4f 	dsb	sy
 80122c4:	b662      	cpsie	i
 80122c6:	e7fe      	b.n	80122c6 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80122c8:	b95a      	cbnz	r2, 80122e2 <xQueueGenericCreateStatic+0x56>
 80122ca:	b155      	cbz	r5, 80122e2 <xQueueGenericCreateStatic+0x56>
 80122cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122d0:	b672      	cpsid	i
 80122d2:	f383 8811 	msr	BASEPRI, r3
 80122d6:	f3bf 8f6f 	isb	sy
 80122da:	f3bf 8f4f 	dsb	sy
 80122de:	b662      	cpsie	i
 80122e0:	e7fe      	b.n	80122e0 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80122e2:	2348      	movs	r3, #72	; 0x48
 80122e4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80122e6:	9b01      	ldr	r3, [sp, #4]
 80122e8:	2b48      	cmp	r3, #72	; 0x48
 80122ea:	d015      	beq.n	8012318 <xQueueGenericCreateStatic+0x8c>
 80122ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80122f0:	b672      	cpsid	i
 80122f2:	f383 8811 	msr	BASEPRI, r3
 80122f6:	f3bf 8f6f 	isb	sy
 80122fa:	f3bf 8f4f 	dsb	sy
 80122fe:	b662      	cpsie	i
 8012300:	e7fe      	b.n	8012300 <xQueueGenericCreateStatic+0x74>
 8012302:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012306:	b672      	cpsid	i
 8012308:	f383 8811 	msr	BASEPRI, r3
 801230c:	f3bf 8f6f 	isb	sy
 8012310:	f3bf 8f4f 	dsb	sy
 8012314:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8012316:	e7fe      	b.n	8012316 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012318:	2d00      	cmp	r5, #0
 801231a:	bf08      	it	eq
 801231c:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801231e:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8012320:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012322:	4620      	mov	r0, r4
 8012324:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8012326:	6425      	str	r5, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012328:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801232c:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801232e:	f7ff ff3f 	bl	80121b0 <xQueueGenericReset>
	}
 8012332:	4620      	mov	r0, r4
 8012334:	b003      	add	sp, #12
 8012336:	bd30      	pop	{r4, r5, pc}

08012338 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012338:	b950      	cbnz	r0, 8012350 <xQueueGenericCreate+0x18>
 801233a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801233e:	b672      	cpsid	i
 8012340:	f383 8811 	msr	BASEPRI, r3
 8012344:	f3bf 8f6f 	isb	sy
 8012348:	f3bf 8f4f 	dsb	sy
 801234c:	b662      	cpsie	i
 801234e:	e7fe      	b.n	801234e <xQueueGenericCreate+0x16>
 8012350:	f7ff bf76 	b.w	8012240 <xQueueGenericCreate.part.0>

08012354 <xQueueGenericSend>:
{
 8012354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012358:	b084      	sub	sp, #16
 801235a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 801235c:	2800      	cmp	r0, #0
 801235e:	f000 8085 	beq.w	801246c <xQueueGenericSend+0x118>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012362:	460f      	mov	r7, r1
 8012364:	4604      	mov	r4, r0
 8012366:	461e      	mov	r6, r3
 8012368:	2900      	cmp	r1, #0
 801236a:	d06d      	beq.n	8012448 <xQueueGenericSend+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801236c:	2e02      	cmp	r6, #2
 801236e:	d10d      	bne.n	801238c <xQueueGenericSend+0x38>
 8012370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012372:	2b01      	cmp	r3, #1
 8012374:	d00a      	beq.n	801238c <xQueueGenericSend+0x38>
 8012376:	f04f 0330 	mov.w	r3, #48	; 0x30
 801237a:	b672      	cpsid	i
 801237c:	f383 8811 	msr	BASEPRI, r3
 8012380:	f3bf 8f6f 	isb	sy
 8012384:	f3bf 8f4f 	dsb	sy
 8012388:	b662      	cpsie	i
 801238a:	e7fe      	b.n	801238a <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801238c:	f001 f8d8 	bl	8013540 <xTaskGetSchedulerState>
 8012390:	2800      	cmp	r0, #0
 8012392:	d076      	beq.n	8012482 <xQueueGenericSend+0x12e>
 8012394:	f1a6 0502 	sub.w	r5, r6, #2
{
 8012398:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 801239c:	f8df a150 	ldr.w	sl, [pc, #336]	; 80124f0 <xQueueGenericSend+0x19c>
 80123a0:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 80123a4:	46c1      	mov	r9, r8
 80123a6:	096d      	lsrs	r5, r5, #5
 80123a8:	e008      	b.n	80123bc <xQueueGenericSend+0x68>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80123aa:	f001 fdd1 	bl	8013f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80123ae:	4620      	mov	r0, r4
 80123b0:	f7ff feb6 	bl	8012120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80123b4:	f000 fedc 	bl	8013170 <xTaskResumeAll>
{
 80123b8:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80123bc:	f001 fda2 	bl	8013f04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80123c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80123c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d36a      	bcc.n	801249e <xQueueGenericSend+0x14a>
 80123c8:	2d00      	cmp	r5, #0
 80123ca:	d168      	bne.n	801249e <xQueueGenericSend+0x14a>
				if( xTicksToWait == ( TickType_t ) 0 )
 80123cc:	9b01      	ldr	r3, [sp, #4]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f000 8082 	beq.w	80124d8 <xQueueGenericSend+0x184>
				else if( xEntryTimeSet == pdFALSE )
 80123d4:	f1b8 0f00 	cmp.w	r8, #0
 80123d8:	d044      	beq.n	8012464 <xQueueGenericSend+0x110>
		taskEXIT_CRITICAL();
 80123da:	f001 fdb9 	bl	8013f50 <vPortExitCritical>
		vTaskSuspendAll();
 80123de:	f000 fdff 	bl	8012fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80123e2:	f001 fd8f 	bl	8013f04 <vPortEnterCritical>
 80123e6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80123ea:	2bff      	cmp	r3, #255	; 0xff
 80123ec:	d101      	bne.n	80123f2 <xQueueGenericSend+0x9e>
 80123ee:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 80123f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80123f6:	2bff      	cmp	r3, #255	; 0xff
 80123f8:	d101      	bne.n	80123fe <xQueueGenericSend+0xaa>
 80123fa:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 80123fe:	f001 fda7 	bl	8013f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012402:	a901      	add	r1, sp, #4
 8012404:	a802      	add	r0, sp, #8
 8012406:	f001 f843 	bl	8013490 <xTaskCheckForTimeOut>
 801240a:	2800      	cmp	r0, #0
 801240c:	d168      	bne.n	80124e0 <xQueueGenericSend+0x18c>
	taskENTER_CRITICAL();
 801240e:	f001 fd79 	bl	8013f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012412:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012414:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012416:	429a      	cmp	r2, r3
 8012418:	d1c7      	bne.n	80123aa <xQueueGenericSend+0x56>
	taskEXIT_CRITICAL();
 801241a:	f001 fd99 	bl	8013f50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801241e:	9901      	ldr	r1, [sp, #4]
 8012420:	f104 0010 	add.w	r0, r4, #16
 8012424:	f000 ffa0 	bl	8013368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012428:	4620      	mov	r0, r4
 801242a:	f7ff fe79 	bl	8012120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801242e:	f000 fe9f 	bl	8013170 <xTaskResumeAll>
 8012432:	2800      	cmp	r0, #0
 8012434:	d1c0      	bne.n	80123b8 <xQueueGenericSend+0x64>
					portYIELD_WITHIN_API();
 8012436:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801243a:	f8ca 3000 	str.w	r3, [sl]
 801243e:	f3bf 8f4f 	dsb	sy
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	e7b7      	b.n	80123b8 <xQueueGenericSend+0x64>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012448:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801244a:	2b00      	cmp	r3, #0
 801244c:	d08e      	beq.n	801236c <xQueueGenericSend+0x18>
 801244e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012452:	b672      	cpsid	i
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	b662      	cpsie	i
 8012462:	e7fe      	b.n	8012462 <xQueueGenericSend+0x10e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012464:	a802      	add	r0, sp, #8
 8012466:	f001 f807 	bl	8013478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801246a:	e7b6      	b.n	80123da <xQueueGenericSend+0x86>
 801246c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012470:	b672      	cpsid	i
 8012472:	f383 8811 	msr	BASEPRI, r3
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8012480:	e7fe      	b.n	8012480 <xQueueGenericSend+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012482:	9b01      	ldr	r3, [sp, #4]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d085      	beq.n	8012394 <xQueueGenericSend+0x40>
 8012488:	f04f 0330 	mov.w	r3, #48	; 0x30
 801248c:	b672      	cpsid	i
 801248e:	f383 8811 	msr	BASEPRI, r3
 8012492:	f3bf 8f6f 	isb	sy
 8012496:	f3bf 8f4f 	dsb	sy
 801249a:	b662      	cpsie	i
 801249c:	e7fe      	b.n	801249c <xQueueGenericSend+0x148>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801249e:	4632      	mov	r2, r6
 80124a0:	4639      	mov	r1, r7
 80124a2:	4620      	mov	r0, r4
 80124a4:	f7ff fde8 	bl	8012078 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80124a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80124aa:	b973      	cbnz	r3, 80124ca <xQueueGenericSend+0x176>
					else if( xYieldRequired != pdFALSE )
 80124ac:	b138      	cbz	r0, 80124be <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 80124ae:	4b10      	ldr	r3, [pc, #64]	; (80124f0 <xQueueGenericSend+0x19c>)
 80124b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	f3bf 8f4f 	dsb	sy
 80124ba:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80124be:	f001 fd47 	bl	8013f50 <vPortExitCritical>
				return pdPASS;
 80124c2:	2001      	movs	r0, #1
}
 80124c4:	b004      	add	sp, #16
 80124c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80124ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80124ce:	f000 ff87 	bl	80133e0 <xTaskRemoveFromEventList>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d0f3      	beq.n	80124be <xQueueGenericSend+0x16a>
 80124d6:	e7ea      	b.n	80124ae <xQueueGenericSend+0x15a>
					taskEXIT_CRITICAL();
 80124d8:	f001 fd3a 	bl	8013f50 <vPortExitCritical>
					return errQUEUE_FULL;
 80124dc:	4628      	mov	r0, r5
 80124de:	e7f1      	b.n	80124c4 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80124e0:	4620      	mov	r0, r4
 80124e2:	f7ff fe1d 	bl	8012120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80124e6:	f000 fe43 	bl	8013170 <xTaskResumeAll>
			return errQUEUE_FULL;
 80124ea:	2000      	movs	r0, #0
 80124ec:	e7ea      	b.n	80124c4 <xQueueGenericSend+0x170>
 80124ee:	bf00      	nop
 80124f0:	e000ed04 	.word	0xe000ed04

080124f4 <xQueueCreateMutexStatic>:
	{
 80124f4:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80124f6:	2200      	movs	r2, #0
	{
 80124f8:	4604      	mov	r4, r0
 80124fa:	b082      	sub	sp, #8
 80124fc:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80124fe:	2001      	movs	r0, #1
 8012500:	4611      	mov	r1, r2
 8012502:	9400      	str	r4, [sp, #0]
 8012504:	f7ff fec2 	bl	801228c <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8012508:	4604      	mov	r4, r0
 801250a:	b138      	cbz	r0, 801251c <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801250c:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801250e:	461a      	mov	r2, r3
 8012510:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012512:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012514:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012516:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012518:	f7ff ff1c 	bl	8012354 <xQueueGenericSend>
	}
 801251c:	4620      	mov	r0, r4
 801251e:	b002      	add	sp, #8
 8012520:	bd10      	pop	{r4, pc}
 8012522:	bf00      	nop

08012524 <xQueueCreateMutex>:
	{
 8012524:	b510      	push	{r4, lr}
 8012526:	2100      	movs	r1, #0
 8012528:	2001      	movs	r0, #1
 801252a:	f7ff fe89 	bl	8012240 <xQueueGenericCreate.part.0>
		if( pxNewQueue != NULL )
 801252e:	4604      	mov	r4, r0
 8012530:	b138      	cbz	r0, 8012542 <xQueueCreateMutex+0x1e>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012532:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012534:	461a      	mov	r2, r3
 8012536:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012538:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801253a:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801253c:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801253e:	f7ff ff09 	bl	8012354 <xQueueGenericSend>
	}
 8012542:	4620      	mov	r0, r4
 8012544:	bd10      	pop	{r4, pc}
 8012546:	bf00      	nop

08012548 <xQueueGenericSendFromISR>:
{
 8012548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801254c:	2800      	cmp	r0, #0
 801254e:	d051      	beq.n	80125f4 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012550:	4689      	mov	r9, r1
 8012552:	4604      	mov	r4, r0
 8012554:	4690      	mov	r8, r2
 8012556:	461f      	mov	r7, r3
 8012558:	b359      	cbz	r1, 80125b2 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801255a:	2f02      	cmp	r7, #2
 801255c:	d10d      	bne.n	801257a <xQueueGenericSendFromISR+0x32>
 801255e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012560:	2b01      	cmp	r3, #1
 8012562:	d00a      	beq.n	801257a <xQueueGenericSendFromISR+0x32>
 8012564:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012568:	b672      	cpsid	i
 801256a:	f383 8811 	msr	BASEPRI, r3
 801256e:	f3bf 8f6f 	isb	sy
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	b662      	cpsie	i
 8012578:	e7fe      	b.n	8012578 <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801257a:	f001 fdcf 	bl	801411c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801257e:	f3ef 8611 	mrs	r6, BASEPRI
 8012582:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012586:	b672      	cpsid	i
 8012588:	f383 8811 	msr	BASEPRI, r3
 801258c:	f3bf 8f6f 	isb	sy
 8012590:	f3bf 8f4f 	dsb	sy
 8012594:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8012598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801259a:	429a      	cmp	r2, r3
 801259c:	d317      	bcc.n	80125ce <xQueueGenericSendFromISR+0x86>
 801259e:	f1a7 0002 	sub.w	r0, r7, #2
 80125a2:	fab0 f080 	clz	r0, r0
 80125a6:	0940      	lsrs	r0, r0, #5
 80125a8:	b988      	cbnz	r0, 80125ce <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80125aa:	f386 8811 	msr	BASEPRI, r6
}
 80125ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80125b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d0d0      	beq.n	801255a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80125b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125bc:	b672      	cpsid	i
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	b662      	cpsie	i
 80125cc:	e7fe      	b.n	80125cc <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 80125ce:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80125d2:	463a      	mov	r2, r7
 80125d4:	4649      	mov	r1, r9
 80125d6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80125d8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80125da:	f7ff fd4d 	bl	8012078 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80125de:	1c6b      	adds	r3, r5, #1
 80125e0:	d013      	beq.n	801260a <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80125e2:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 80125e4:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80125e6:	b25b      	sxtb	r3, r3
 80125e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 80125ec:	f386 8811 	msr	BASEPRI, r6
}
 80125f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80125f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80125f8:	b672      	cpsid	i
 80125fa:	f383 8811 	msr	BASEPRI, r3
 80125fe:	f3bf 8f6f 	isb	sy
 8012602:	f3bf 8f4f 	dsb	sy
 8012606:	b662      	cpsie	i
	configASSERT( pxQueue );
 8012608:	e7fe      	b.n	8012608 <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801260a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801260c:	b90b      	cbnz	r3, 8012612 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 801260e:	2001      	movs	r0, #1
 8012610:	e7cb      	b.n	80125aa <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012612:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012616:	f000 fee3 	bl	80133e0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801261a:	2800      	cmp	r0, #0
 801261c:	d0f7      	beq.n	801260e <xQueueGenericSendFromISR+0xc6>
 801261e:	f1b8 0f00 	cmp.w	r8, #0
 8012622:	d0f4      	beq.n	801260e <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012624:	2001      	movs	r0, #1
 8012626:	f8c8 0000 	str.w	r0, [r8]
 801262a:	e7be      	b.n	80125aa <xQueueGenericSendFromISR+0x62>

0801262c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 801262c:	b380      	cbz	r0, 8012690 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 801262e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8012630:	b570      	push	{r4, r5, r6, lr}
 8012632:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8012634:	b153      	cbz	r3, 801264c <xQueueGiveFromISR+0x20>
 8012636:	f04f 0330 	mov.w	r3, #48	; 0x30
 801263a:	b672      	cpsid	i
 801263c:	f383 8811 	msr	BASEPRI, r3
 8012640:	f3bf 8f6f 	isb	sy
 8012644:	f3bf 8f4f 	dsb	sy
 8012648:	b662      	cpsie	i
 801264a:	e7fe      	b.n	801264a <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801264c:	6803      	ldr	r3, [r0, #0]
 801264e:	460d      	mov	r5, r1
 8012650:	b34b      	cbz	r3, 80126a6 <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012652:	f001 fd63 	bl	801411c <vPortValidateInterruptPriority>
	__asm volatile
 8012656:	f3ef 8611 	mrs	r6, BASEPRI
 801265a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801265e:	b672      	cpsid	i
 8012660:	f383 8811 	msr	BASEPRI, r3
 8012664:	f3bf 8f6f 	isb	sy
 8012668:	f3bf 8f4f 	dsb	sy
 801266c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801266e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012670:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8012672:	429a      	cmp	r2, r3
 8012674:	d925      	bls.n	80126c2 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8012676:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801267a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 801267c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801267e:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8012680:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8012682:	d022      	beq.n	80126ca <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012684:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8012686:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012688:	b25b      	sxtb	r3, r3
 801268a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801268e:	e019      	b.n	80126c4 <xQueueGiveFromISR+0x98>
	__asm volatile
 8012690:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012694:	b672      	cpsid	i
 8012696:	f383 8811 	msr	BASEPRI, r3
 801269a:	f3bf 8f6f 	isb	sy
 801269e:	f3bf 8f4f 	dsb	sy
 80126a2:	b662      	cpsie	i
	configASSERT( pxQueue );
 80126a4:	e7fe      	b.n	80126a4 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80126a6:	6883      	ldr	r3, [r0, #8]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d0d2      	beq.n	8012652 <xQueueGiveFromISR+0x26>
 80126ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80126b0:	b672      	cpsid	i
 80126b2:	f383 8811 	msr	BASEPRI, r3
 80126b6:	f3bf 8f6f 	isb	sy
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	b662      	cpsie	i
 80126c0:	e7fe      	b.n	80126c0 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 80126c2:	2000      	movs	r0, #0
	__asm volatile
 80126c4:	f386 8811 	msr	BASEPRI, r6
}
 80126c8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126cc:	b90b      	cbnz	r3, 80126d2 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 80126ce:	2001      	movs	r0, #1
 80126d0:	e7f8      	b.n	80126c4 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80126d6:	f000 fe83 	bl	80133e0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 80126da:	2d00      	cmp	r5, #0
 80126dc:	d0f7      	beq.n	80126ce <xQueueGiveFromISR+0xa2>
 80126de:	2800      	cmp	r0, #0
 80126e0:	d0f5      	beq.n	80126ce <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80126e2:	2001      	movs	r0, #1
 80126e4:	6028      	str	r0, [r5, #0]
 80126e6:	e7ed      	b.n	80126c4 <xQueueGiveFromISR+0x98>

080126e8 <xQueueReceive>:
{
 80126e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126ec:	b085      	sub	sp, #20
 80126ee:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80126f0:	2800      	cmp	r0, #0
 80126f2:	f000 808c 	beq.w	801280e <xQueueReceive+0x126>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80126f6:	460e      	mov	r6, r1
 80126f8:	4604      	mov	r4, r0
 80126fa:	2900      	cmp	r1, #0
 80126fc:	d056      	beq.n	80127ac <xQueueReceive+0xc4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80126fe:	f000 ff1f 	bl	8013540 <xTaskGetSchedulerState>
 8012702:	2800      	cmp	r0, #0
 8012704:	d044      	beq.n	8012790 <xQueueReceive+0xa8>
		taskENTER_CRITICAL();
 8012706:	f001 fbfd 	bl	8013f04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801270a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801270c:	2d00      	cmp	r5, #0
 801270e:	f040 8089 	bne.w	8012824 <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8012712:	9b01      	ldr	r3, [sp, #4]
 8012714:	2b00      	cmp	r3, #0
 8012716:	d035      	beq.n	8012784 <xQueueReceive+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012718:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 801271a:	462f      	mov	r7, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801271c:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8012720:	f8df 8138 	ldr.w	r8, [pc, #312]	; 801285c <xQueueReceive+0x174>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012724:	f000 fea8 	bl	8013478 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8012728:	f001 fc12 	bl	8013f50 <vPortExitCritical>
		vTaskSuspendAll();
 801272c:	f000 fc58 	bl	8012fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012730:	f001 fbe8 	bl	8013f04 <vPortEnterCritical>
 8012734:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012738:	2bff      	cmp	r3, #255	; 0xff
 801273a:	d101      	bne.n	8012740 <xQueueReceive+0x58>
 801273c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8012740:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012744:	2bff      	cmp	r3, #255	; 0xff
 8012746:	d101      	bne.n	801274c <xQueueReceive+0x64>
 8012748:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801274c:	f001 fc00 	bl	8013f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012750:	a901      	add	r1, sp, #4
 8012752:	a802      	add	r0, sp, #8
 8012754:	f000 fe9c 	bl	8013490 <xTaskCheckForTimeOut>
 8012758:	2800      	cmp	r0, #0
 801275a:	d135      	bne.n	80127c8 <xQueueReceive+0xe0>
	taskENTER_CRITICAL();
 801275c:	f001 fbd2 	bl	8013f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012762:	2b00      	cmp	r3, #0
 8012764:	d03d      	beq.n	80127e2 <xQueueReceive+0xfa>
	taskEXIT_CRITICAL();
 8012766:	f001 fbf3 	bl	8013f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801276a:	4620      	mov	r0, r4
 801276c:	f7ff fcd8 	bl	8012120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012770:	f000 fcfe 	bl	8013170 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8012774:	f001 fbc6 	bl	8013f04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012778:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801277a:	2d00      	cmp	r5, #0
 801277c:	d152      	bne.n	8012824 <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 801277e:	9b01      	ldr	r3, [sp, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d1d1      	bne.n	8012728 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8012784:	f001 fbe4 	bl	8013f50 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8012788:	2000      	movs	r0, #0
}
 801278a:	b005      	add	sp, #20
 801278c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012790:	9b01      	ldr	r3, [sp, #4]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d0b7      	beq.n	8012706 <xQueueReceive+0x1e>
	__asm volatile
 8012796:	f04f 0330 	mov.w	r3, #48	; 0x30
 801279a:	b672      	cpsid	i
 801279c:	f383 8811 	msr	BASEPRI, r3
 80127a0:	f3bf 8f6f 	isb	sy
 80127a4:	f3bf 8f4f 	dsb	sy
 80127a8:	b662      	cpsie	i
 80127aa:	e7fe      	b.n	80127aa <xQueueReceive+0xc2>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127ac:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d0a5      	beq.n	80126fe <xQueueReceive+0x16>
 80127b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80127b6:	b672      	cpsid	i
 80127b8:	f383 8811 	msr	BASEPRI, r3
 80127bc:	f3bf 8f6f 	isb	sy
 80127c0:	f3bf 8f4f 	dsb	sy
 80127c4:	b662      	cpsie	i
 80127c6:	e7fe      	b.n	80127c6 <xQueueReceive+0xde>
			prvUnlockQueue( pxQueue );
 80127c8:	4620      	mov	r0, r4
 80127ca:	f7ff fca9 	bl	8012120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127ce:	f000 fccf 	bl	8013170 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80127d2:	f001 fb97 	bl	8013f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80127d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d0d3      	beq.n	8012784 <xQueueReceive+0x9c>
	taskEXIT_CRITICAL();
 80127dc:	f001 fbb8 	bl	8013f50 <vPortExitCritical>
 80127e0:	e7c8      	b.n	8012774 <xQueueReceive+0x8c>
 80127e2:	f001 fbb5 	bl	8013f50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80127e6:	9901      	ldr	r1, [sp, #4]
 80127e8:	4648      	mov	r0, r9
 80127ea:	f000 fdbd 	bl	8013368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80127ee:	4620      	mov	r0, r4
 80127f0:	f7ff fc96 	bl	8012120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80127f4:	f000 fcbc 	bl	8013170 <xTaskResumeAll>
 80127f8:	2800      	cmp	r0, #0
 80127fa:	d1bb      	bne.n	8012774 <xQueueReceive+0x8c>
					portYIELD_WITHIN_API();
 80127fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012800:	f8c8 3000 	str.w	r3, [r8]
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 801280c:	e7b2      	b.n	8012774 <xQueueReceive+0x8c>
 801280e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012812:	b672      	cpsid	i
 8012814:	f383 8811 	msr	BASEPRI, r3
 8012818:	f3bf 8f6f 	isb	sy
 801281c:	f3bf 8f4f 	dsb	sy
 8012820:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8012822:	e7fe      	b.n	8012822 <xQueueReceive+0x13a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012824:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012826:	4631      	mov	r1, r6
 8012828:	4620      	mov	r0, r4
 801282a:	f7ff fc67 	bl	80120fc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801282e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012830:	6923      	ldr	r3, [r4, #16]
 8012832:	b91b      	cbnz	r3, 801283c <xQueueReceive+0x154>
				taskEXIT_CRITICAL();
 8012834:	f001 fb8c 	bl	8013f50 <vPortExitCritical>
				return pdPASS;
 8012838:	2001      	movs	r0, #1
 801283a:	e7a6      	b.n	801278a <xQueueReceive+0xa2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801283c:	f104 0010 	add.w	r0, r4, #16
 8012840:	f000 fdce 	bl	80133e0 <xTaskRemoveFromEventList>
 8012844:	2800      	cmp	r0, #0
 8012846:	d0f5      	beq.n	8012834 <xQueueReceive+0x14c>
						queueYIELD_IF_USING_PREEMPTION();
 8012848:	4b04      	ldr	r3, [pc, #16]	; (801285c <xQueueReceive+0x174>)
 801284a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801284e:	601a      	str	r2, [r3, #0]
 8012850:	f3bf 8f4f 	dsb	sy
 8012854:	f3bf 8f6f 	isb	sy
 8012858:	e7ec      	b.n	8012834 <xQueueReceive+0x14c>
 801285a:	bf00      	nop
 801285c:	e000ed04 	.word	0xe000ed04

08012860 <xQueueSemaphoreTake>:
{
 8012860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012864:	b084      	sub	sp, #16
 8012866:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8012868:	b168      	cbz	r0, 8012886 <xQueueSemaphoreTake+0x26>
	configASSERT( pxQueue->uxItemSize == 0 );
 801286a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 801286c:	4604      	mov	r4, r0
 801286e:	b1ad      	cbz	r5, 801289c <xQueueSemaphoreTake+0x3c>
 8012870:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012874:	b672      	cpsid	i
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	b662      	cpsie	i
 8012884:	e7fe      	b.n	8012884 <xQueueSemaphoreTake+0x24>
 8012886:	f04f 0330 	mov.w	r3, #48	; 0x30
 801288a:	b672      	cpsid	i
 801288c:	f383 8811 	msr	BASEPRI, r3
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	f3bf 8f4f 	dsb	sy
 8012898:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801289a:	e7fe      	b.n	801289a <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801289c:	f000 fe50 	bl	8013540 <xTaskGetSchedulerState>
 80128a0:	4606      	mov	r6, r0
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d074      	beq.n	8012990 <xQueueSemaphoreTake+0x130>
 80128a6:	462e      	mov	r6, r5
		taskENTER_CRITICAL();
 80128a8:	f001 fb2c 	bl	8013f04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80128ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80128ae:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80128b0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8012a20 <xQueueSemaphoreTake+0x1c0>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80128b4:	bb7b      	cbnz	r3, 8012916 <xQueueSemaphoreTake+0xb6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80128b6:	9b01      	ldr	r3, [sp, #4]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	f000 80a3 	beq.w	8012a04 <xQueueSemaphoreTake+0x1a4>
				else if( xEntryTimeSet == pdFALSE )
 80128be:	2e00      	cmp	r6, #0
 80128c0:	d062      	beq.n	8012988 <xQueueSemaphoreTake+0x128>
		taskEXIT_CRITICAL();
 80128c2:	f001 fb45 	bl	8013f50 <vPortExitCritical>
		vTaskSuspendAll();
 80128c6:	f000 fb8b 	bl	8012fe0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128ca:	f001 fb1b 	bl	8013f04 <vPortEnterCritical>
 80128ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80128d2:	2bff      	cmp	r3, #255	; 0xff
 80128d4:	d101      	bne.n	80128da <xQueueSemaphoreTake+0x7a>
 80128d6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80128da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80128de:	2bff      	cmp	r3, #255	; 0xff
 80128e0:	d101      	bne.n	80128e6 <xQueueSemaphoreTake+0x86>
 80128e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80128e6:	f001 fb33 	bl	8013f50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128ea:	a901      	add	r1, sp, #4
 80128ec:	a802      	add	r0, sp, #8
 80128ee:	f000 fdcf 	bl	8013490 <xTaskCheckForTimeOut>
 80128f2:	b9e0      	cbnz	r0, 801292e <xQueueSemaphoreTake+0xce>
	taskENTER_CRITICAL();
 80128f4:	f001 fb06 	bl	8013f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80128f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80128fa:	b323      	cbz	r3, 8012946 <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
 80128fc:	f001 fb28 	bl	8013f50 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8012900:	4620      	mov	r0, r4
 8012902:	f7ff fc0d 	bl	8012120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012906:	f000 fc33 	bl	8013170 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801290a:	f001 fafb 	bl	8013f04 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801290e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012910:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012912:	2b00      	cmp	r3, #0
 8012914:	d0cf      	beq.n	80128b6 <xQueueSemaphoreTake+0x56>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012916:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012918:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801291a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801291c:	2a00      	cmp	r2, #0
 801291e:	d064      	beq.n	80129ea <xQueueSemaphoreTake+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012920:	6923      	ldr	r3, [r4, #16]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d152      	bne.n	80129cc <xQueueSemaphoreTake+0x16c>
				return pdPASS;
 8012926:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8012928:	f001 fb12 	bl	8013f50 <vPortExitCritical>
				return pdPASS;
 801292c:	e028      	b.n	8012980 <xQueueSemaphoreTake+0x120>
			prvUnlockQueue( pxQueue );
 801292e:	4620      	mov	r0, r4
 8012930:	f7ff fbf6 	bl	8012120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012934:	f000 fc1c 	bl	8013170 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8012938:	f001 fae4 	bl	8013f04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801293c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801293e:	b1e3      	cbz	r3, 801297a <xQueueSemaphoreTake+0x11a>
	taskEXIT_CRITICAL();
 8012940:	f001 fb06 	bl	8013f50 <vPortExitCritical>
	return xReturn;
 8012944:	e7e1      	b.n	801290a <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 8012946:	f001 fb03 	bl	8013f50 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d050      	beq.n	80129f2 <xQueueSemaphoreTake+0x192>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012950:	9901      	ldr	r1, [sp, #4]
 8012952:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012956:	f000 fd07 	bl	8013368 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801295a:	4620      	mov	r0, r4
 801295c:	f7ff fbe0 	bl	8012120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012960:	f000 fc06 	bl	8013170 <xTaskResumeAll>
 8012964:	2800      	cmp	r0, #0
 8012966:	d1d0      	bne.n	801290a <xQueueSemaphoreTake+0xaa>
					portYIELD_WITHIN_API();
 8012968:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801296c:	f8c8 3000 	str.w	r3, [r8]
 8012970:	f3bf 8f4f 	dsb	sy
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	e7c7      	b.n	801290a <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 801297a:	f001 fae9 	bl	8013f50 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 801297e:	b9b5      	cbnz	r5, 80129ae <xQueueSemaphoreTake+0x14e>
}
 8012980:	4628      	mov	r0, r5
 8012982:	b004      	add	sp, #16
 8012984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012988:	a802      	add	r0, sp, #8
 801298a:	f000 fd75 	bl	8013478 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801298e:	e798      	b.n	80128c2 <xQueueSemaphoreTake+0x62>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012990:	9b01      	ldr	r3, [sp, #4]
 8012992:	b153      	cbz	r3, 80129aa <xQueueSemaphoreTake+0x14a>
 8012994:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012998:	b672      	cpsid	i
 801299a:	f383 8811 	msr	BASEPRI, r3
 801299e:	f3bf 8f6f 	isb	sy
 80129a2:	f3bf 8f4f 	dsb	sy
 80129a6:	b662      	cpsie	i
 80129a8:	e7fe      	b.n	80129a8 <xQueueSemaphoreTake+0x148>
 80129aa:	4605      	mov	r5, r0
 80129ac:	e77c      	b.n	80128a8 <xQueueSemaphoreTake+0x48>
						taskENTER_CRITICAL();
 80129ae:	f001 faa9 	bl	8013f04 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80129b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80129b4:	b119      	cbz	r1, 80129be <xQueueSemaphoreTake+0x15e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80129b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80129b8:	6819      	ldr	r1, [r3, #0]
 80129ba:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80129be:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80129c0:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80129c2:	f000 fe85 	bl	80136d0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80129c6:	f001 fac3 	bl	8013f50 <vPortExitCritical>
 80129ca:	e7d9      	b.n	8012980 <xQueueSemaphoreTake+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129cc:	f104 0010 	add.w	r0, r4, #16
 80129d0:	f000 fd06 	bl	80133e0 <xTaskRemoveFromEventList>
 80129d4:	2800      	cmp	r0, #0
 80129d6:	d0a6      	beq.n	8012926 <xQueueSemaphoreTake+0xc6>
						queueYIELD_IF_USING_PREEMPTION();
 80129d8:	4b11      	ldr	r3, [pc, #68]	; (8012a20 <xQueueSemaphoreTake+0x1c0>)
 80129da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129de:	601a      	str	r2, [r3, #0]
 80129e0:	f3bf 8f4f 	dsb	sy
 80129e4:	f3bf 8f6f 	isb	sy
 80129e8:	e79d      	b.n	8012926 <xQueueSemaphoreTake+0xc6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80129ea:	f000 fedd 	bl	80137a8 <pvTaskIncrementMutexHeldCount>
 80129ee:	60a0      	str	r0, [r4, #8]
 80129f0:	e796      	b.n	8012920 <xQueueSemaphoreTake+0xc0>
						taskENTER_CRITICAL();
 80129f2:	f001 fa87 	bl	8013f04 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80129f6:	68a0      	ldr	r0, [r4, #8]
 80129f8:	f000 fdb2 	bl	8013560 <xTaskPriorityInherit>
 80129fc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80129fe:	f001 faa7 	bl	8013f50 <vPortExitCritical>
 8012a02:	e7a5      	b.n	8012950 <xQueueSemaphoreTake+0xf0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012a04:	2d00      	cmp	r5, #0
 8012a06:	d0de      	beq.n	80129c6 <xQueueSemaphoreTake+0x166>
 8012a08:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a0c:	b672      	cpsid	i
 8012a0e:	f383 8811 	msr	BASEPRI, r3
 8012a12:	f3bf 8f6f 	isb	sy
 8012a16:	f3bf 8f4f 	dsb	sy
 8012a1a:	b662      	cpsie	i
 8012a1c:	e7fe      	b.n	8012a1c <xQueueSemaphoreTake+0x1bc>
 8012a1e:	bf00      	nop
 8012a20:	e000ed04 	.word	0xe000ed04

08012a24 <xQueueReceiveFromISR>:
{
 8012a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8012a28:	b330      	cbz	r0, 8012a78 <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a2a:	4689      	mov	r9, r1
 8012a2c:	4605      	mov	r5, r0
 8012a2e:	4690      	mov	r8, r2
 8012a30:	b1a1      	cbz	r1, 8012a5c <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a32:	f001 fb73 	bl	801411c <vPortValidateInterruptPriority>
	__asm volatile
 8012a36:	f3ef 8711 	mrs	r7, BASEPRI
 8012a3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a3e:	b672      	cpsid	i
 8012a40:	f383 8811 	msr	BASEPRI, r3
 8012a44:	f3bf 8f6f 	isb	sy
 8012a48:	f3bf 8f4f 	dsb	sy
 8012a4c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a4e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012a50:	b9ec      	cbnz	r4, 8012a8e <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8012a52:	4620      	mov	r0, r4
	__asm volatile
 8012a54:	f387 8811 	msr	BASEPRI, r7
}
 8012a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012a5c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d0e7      	beq.n	8012a32 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8012a62:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a66:	b672      	cpsid	i
 8012a68:	f383 8811 	msr	BASEPRI, r3
 8012a6c:	f3bf 8f6f 	isb	sy
 8012a70:	f3bf 8f4f 	dsb	sy
 8012a74:	b662      	cpsie	i
 8012a76:	e7fe      	b.n	8012a76 <xQueueReceiveFromISR+0x52>
 8012a78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012a7c:	b672      	cpsid	i
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8012a8c:	e7fe      	b.n	8012a8c <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8012a8e:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012a92:	4649      	mov	r1, r9
 8012a94:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a96:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8012a98:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012a9a:	f7ff fb2f 	bl	80120fc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012a9e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8012aa0:	1c73      	adds	r3, r6, #1
 8012aa2:	d008      	beq.n	8012ab6 <xQueueReceiveFromISR+0x92>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012aa4:	1c72      	adds	r2, r6, #1
			xReturn = pdPASS;
 8012aa6:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012aa8:	b252      	sxtb	r2, r2
 8012aaa:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	__asm volatile
 8012aae:	f387 8811 	msr	BASEPRI, r7
}
 8012ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012ab6:	692b      	ldr	r3, [r5, #16]
 8012ab8:	b90b      	cbnz	r3, 8012abe <xQueueReceiveFromISR+0x9a>
			xReturn = pdPASS;
 8012aba:	2001      	movs	r0, #1
 8012abc:	e7ca      	b.n	8012a54 <xQueueReceiveFromISR+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012abe:	f105 0010 	add.w	r0, r5, #16
 8012ac2:	f000 fc8d 	bl	80133e0 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8012ac6:	f1b8 0f00 	cmp.w	r8, #0
 8012aca:	d0f6      	beq.n	8012aba <xQueueReceiveFromISR+0x96>
 8012acc:	2800      	cmp	r0, #0
 8012ace:	d0f4      	beq.n	8012aba <xQueueReceiveFromISR+0x96>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012ad0:	2001      	movs	r0, #1
 8012ad2:	f8c8 0000 	str.w	r0, [r8]
 8012ad6:	e7bd      	b.n	8012a54 <xQueueReceiveFromISR+0x30>

08012ad8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ad8:	2300      	movs	r3, #0
 8012ada:	4a08      	ldr	r2, [pc, #32]	; (8012afc <vQueueAddToRegistry+0x24>)
	{
 8012adc:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012ade:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8012ae2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012ae6:	b124      	cbz	r4, 8012af2 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012ae8:	3301      	adds	r3, #1
 8012aea:	2b08      	cmp	r3, #8
 8012aec:	d1f7      	bne.n	8012ade <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012aee:	bc30      	pop	{r4, r5}
 8012af0:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012af2:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012af4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 8012af8:	bc30      	pop	{r4, r5}
 8012afa:	4770      	bx	lr
 8012afc:	20027058 	.word	0x20027058

08012b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	4604      	mov	r4, r0
 8012b04:	460e      	mov	r6, r1
 8012b06:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012b08:	f001 f9fc 	bl	8013f04 <vPortEnterCritical>
 8012b0c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012b10:	2bff      	cmp	r3, #255	; 0xff
 8012b12:	d102      	bne.n	8012b1a <vQueueWaitForMessageRestricted+0x1a>
 8012b14:	2300      	movs	r3, #0
 8012b16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8012b1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8012b1e:	2bff      	cmp	r3, #255	; 0xff
 8012b20:	d102      	bne.n	8012b28 <vQueueWaitForMessageRestricted+0x28>
 8012b22:	2300      	movs	r3, #0
 8012b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b28:	f001 fa12 	bl	8013f50 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8012b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012b2e:	b123      	cbz	r3, 8012b3a <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012b30:	4620      	mov	r0, r4
	}
 8012b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8012b36:	f7ff baf3 	b.w	8012120 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012b3a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8012b3e:	462a      	mov	r2, r5
 8012b40:	4631      	mov	r1, r6
 8012b42:	f000 fc2d 	bl	80133a0 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8012b46:	4620      	mov	r0, r4
	}
 8012b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8012b4c:	f7ff bae8 	b.w	8012120 <prvUnlockQueue>

08012b50 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b52:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012b54:	f001 f9d6 	bl	8013f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012b58:	4a36      	ldr	r2, [pc, #216]	; (8012c34 <prvAddNewTaskToReadyList+0xe4>)
		if( pxCurrentTCB == NULL )
 8012b5a:	4d37      	ldr	r5, [pc, #220]	; (8012c38 <prvAddNewTaskToReadyList+0xe8>)
		uxCurrentNumberOfTasks++;
 8012b5c:	6813      	ldr	r3, [r2, #0]
 8012b5e:	3301      	adds	r3, #1
 8012b60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012b62:	682b      	ldr	r3, [r5, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d031      	beq.n	8012bcc <prvAddNewTaskToReadyList+0x7c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012b68:	4e34      	ldr	r6, [pc, #208]	; (8012c3c <prvAddNewTaskToReadyList+0xec>)
 8012b6a:	6833      	ldr	r3, [r6, #0]
 8012b6c:	b33b      	cbz	r3, 8012bbe <prvAddNewTaskToReadyList+0x6e>
 8012b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012b70:	4833      	ldr	r0, [pc, #204]	; (8012c40 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012b72:	2201      	movs	r2, #1
 8012b74:	4f33      	ldr	r7, [pc, #204]	; (8012c44 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8012b76:	6801      	ldr	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8012b78:	409a      	lsls	r2, r3
 8012b7a:	f8d7 c000 	ldr.w	ip, [r7]
 8012b7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 8012b82:	3101      	adds	r1, #1
		prvAddTaskToReadyList( pxNewTCB );
 8012b84:	ea42 020c 	orr.w	r2, r2, ip
 8012b88:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8012c4c <prvAddNewTaskToReadyList+0xfc>
		uxTaskNumber++;
 8012b8c:	6001      	str	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8012b8e:	1d21      	adds	r1, r4, #4
 8012b90:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
 8012b94:	603a      	str	r2, [r7, #0]
 8012b96:	f7ff fa33 	bl	8012000 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012b9a:	f001 f9d9 	bl	8013f50 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012b9e:	6833      	ldr	r3, [r6, #0]
 8012ba0:	b163      	cbz	r3, 8012bbc <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012ba2:	682a      	ldr	r2, [r5, #0]
 8012ba4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012ba6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	d207      	bcs.n	8012bbc <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012bac:	4b26      	ldr	r3, [pc, #152]	; (8012c48 <prvAddNewTaskToReadyList+0xf8>)
 8012bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bb2:	601a      	str	r2, [r3, #0]
 8012bb4:	f3bf 8f4f 	dsb	sy
 8012bb8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012bbe:	682a      	ldr	r2, [r5, #0]
 8012bc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012bc2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d8d3      	bhi.n	8012b70 <prvAddNewTaskToReadyList+0x20>
					pxCurrentTCB = pxNewTCB;
 8012bc8:	602c      	str	r4, [r5, #0]
 8012bca:	e7d1      	b.n	8012b70 <prvAddNewTaskToReadyList+0x20>
			pxCurrentTCB = pxNewTCB;
 8012bcc:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012bce:	6813      	ldr	r3, [r2, #0]
 8012bd0:	2b01      	cmp	r3, #1
 8012bd2:	d002      	beq.n	8012bda <prvAddNewTaskToReadyList+0x8a>
 8012bd4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012bd6:	4e19      	ldr	r6, [pc, #100]	; (8012c3c <prvAddNewTaskToReadyList+0xec>)
 8012bd8:	e7ca      	b.n	8012b70 <prvAddNewTaskToReadyList+0x20>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012bda:	481c      	ldr	r0, [pc, #112]	; (8012c4c <prvAddNewTaskToReadyList+0xfc>)
 8012bdc:	f7ff fa00 	bl	8011fe0 <vListInitialise>
 8012be0:	481b      	ldr	r0, [pc, #108]	; (8012c50 <prvAddNewTaskToReadyList+0x100>)
 8012be2:	f7ff f9fd 	bl	8011fe0 <vListInitialise>
 8012be6:	481b      	ldr	r0, [pc, #108]	; (8012c54 <prvAddNewTaskToReadyList+0x104>)
 8012be8:	f7ff f9fa 	bl	8011fe0 <vListInitialise>
 8012bec:	481a      	ldr	r0, [pc, #104]	; (8012c58 <prvAddNewTaskToReadyList+0x108>)
 8012bee:	f7ff f9f7 	bl	8011fe0 <vListInitialise>
 8012bf2:	481a      	ldr	r0, [pc, #104]	; (8012c5c <prvAddNewTaskToReadyList+0x10c>)
 8012bf4:	f7ff f9f4 	bl	8011fe0 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012bf8:	4f19      	ldr	r7, [pc, #100]	; (8012c60 <prvAddNewTaskToReadyList+0x110>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012bfa:	481a      	ldr	r0, [pc, #104]	; (8012c64 <prvAddNewTaskToReadyList+0x114>)
 8012bfc:	f7ff f9f0 	bl	8011fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c00:	4e19      	ldr	r6, [pc, #100]	; (8012c68 <prvAddNewTaskToReadyList+0x118>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012c02:	481a      	ldr	r0, [pc, #104]	; (8012c6c <prvAddNewTaskToReadyList+0x11c>)
 8012c04:	f7ff f9ec 	bl	8011fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8012c08:	4638      	mov	r0, r7
 8012c0a:	f7ff f9e9 	bl	8011fe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c0e:	4630      	mov	r0, r6
 8012c10:	f7ff f9e6 	bl	8011fe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012c14:	4816      	ldr	r0, [pc, #88]	; (8012c70 <prvAddNewTaskToReadyList+0x120>)
 8012c16:	f7ff f9e3 	bl	8011fe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012c1a:	4816      	ldr	r0, [pc, #88]	; (8012c74 <prvAddNewTaskToReadyList+0x124>)
 8012c1c:	f7ff f9e0 	bl	8011fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012c20:	4815      	ldr	r0, [pc, #84]	; (8012c78 <prvAddNewTaskToReadyList+0x128>)
 8012c22:	f7ff f9dd 	bl	8011fe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c26:	4b15      	ldr	r3, [pc, #84]	; (8012c7c <prvAddNewTaskToReadyList+0x12c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012c28:	4a15      	ldr	r2, [pc, #84]	; (8012c80 <prvAddNewTaskToReadyList+0x130>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c2a:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012c2c:	6016      	str	r6, [r2, #0]
 8012c2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012c30:	4e02      	ldr	r6, [pc, #8]	; (8012c3c <prvAddNewTaskToReadyList+0xec>)
}
 8012c32:	e79d      	b.n	8012b70 <prvAddNewTaskToReadyList+0x20>
 8012c34:	20001d64 	.word	0x20001d64
 8012c38:	20001ccc 	.word	0x20001ccc
 8012c3c:	20001dc0 	.word	0x20001dc0
 8012c40:	20001d74 	.word	0x20001d74
 8012c44:	20001d78 	.word	0x20001d78
 8012c48:	e000ed04 	.word	0xe000ed04
 8012c4c:	20001cd8 	.word	0x20001cd8
 8012c50:	20001cec 	.word	0x20001cec
 8012c54:	20001d00 	.word	0x20001d00
 8012c58:	20001d14 	.word	0x20001d14
 8012c5c:	20001d28 	.word	0x20001d28
 8012c60:	20001d7c 	.word	0x20001d7c
 8012c64:	20001d3c 	.word	0x20001d3c
 8012c68:	20001d90 	.word	0x20001d90
 8012c6c:	20001d50 	.word	0x20001d50
 8012c70:	20001dac 	.word	0x20001dac
 8012c74:	20001dd8 	.word	0x20001dd8
 8012c78:	20001dc4 	.word	0x20001dc4
 8012c7c:	20001cd0 	.word	0x20001cd0
 8012c80:	20001cd4 	.word	0x20001cd4

08012c84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012c86:	4b1a      	ldr	r3, [pc, #104]	; (8012cf0 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 8012c88:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c8a:	4e1a      	ldr	r6, [pc, #104]	; (8012cf4 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8012c8c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8012c8e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012c90:	6830      	ldr	r0, [r6, #0]
 8012c92:	3004      	adds	r0, #4
 8012c94:	f7ff f9dc 	bl	8012050 <uxListRemove>
 8012c98:	b940      	cbnz	r0, 8012cac <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012c9a:	6833      	ldr	r3, [r6, #0]
 8012c9c:	2201      	movs	r2, #1
 8012c9e:	4916      	ldr	r1, [pc, #88]	; (8012cf8 <prvAddCurrentTaskToDelayedList+0x74>)
 8012ca0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012ca2:	680b      	ldr	r3, [r1, #0]
 8012ca4:	4082      	lsls	r2, r0
 8012ca6:	ea23 0302 	bic.w	r3, r3, r2
 8012caa:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012cac:	1c63      	adds	r3, r4, #1
 8012cae:	d100      	bne.n	8012cb2 <prvAddCurrentTaskToDelayedList+0x2e>
 8012cb0:	b9bf      	cbnz	r7, 8012ce2 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012cb2:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012cb4:	6833      	ldr	r3, [r6, #0]
 8012cb6:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8012cb8:	d307      	bcc.n	8012cca <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cba:	4b10      	ldr	r3, [pc, #64]	; (8012cfc <prvAddCurrentTaskToDelayedList+0x78>)
 8012cbc:	6818      	ldr	r0, [r3, #0]
 8012cbe:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012cc0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cc4:	3104      	adds	r1, #4
 8012cc6:	f7ff b9ab 	b.w	8012020 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cca:	4b0d      	ldr	r3, [pc, #52]	; (8012d00 <prvAddCurrentTaskToDelayedList+0x7c>)
 8012ccc:	6818      	ldr	r0, [r3, #0]
 8012cce:	6831      	ldr	r1, [r6, #0]
 8012cd0:	3104      	adds	r1, #4
 8012cd2:	f7ff f9a5 	bl	8012020 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012cd6:	4b0b      	ldr	r3, [pc, #44]	; (8012d04 <prvAddCurrentTaskToDelayedList+0x80>)
 8012cd8:	681a      	ldr	r2, [r3, #0]
 8012cda:	42a2      	cmp	r2, r4
 8012cdc:	d900      	bls.n	8012ce0 <prvAddCurrentTaskToDelayedList+0x5c>
					xNextTaskUnblockTime = xTimeToWake;
 8012cde:	601c      	str	r4, [r3, #0]
}
 8012ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ce2:	6831      	ldr	r1, [r6, #0]
 8012ce4:	4808      	ldr	r0, [pc, #32]	; (8012d08 <prvAddCurrentTaskToDelayedList+0x84>)
 8012ce6:	3104      	adds	r1, #4
}
 8012ce8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012cec:	f7ff b988 	b.w	8012000 <vListInsertEnd>
 8012cf0:	20001dec 	.word	0x20001dec
 8012cf4:	20001ccc 	.word	0x20001ccc
 8012cf8:	20001d78 	.word	0x20001d78
 8012cfc:	20001cd4 	.word	0x20001cd4
 8012d00:	20001cd0 	.word	0x20001cd0
 8012d04:	20001da4 	.word	0x20001da4
 8012d08:	20001dc4 	.word	0x20001dc4

08012d0c <prvResetNextTaskUnblockTime.part.0>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d0c:	4a03      	ldr	r2, [pc, #12]	; (8012d1c <prvResetNextTaskUnblockTime.part.0+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d0e:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <prvResetNextTaskUnblockTime.part.0+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d10:	6812      	ldr	r2, [r2, #0]
 8012d12:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d14:	68d2      	ldr	r2, [r2, #12]
 8012d16:	6852      	ldr	r2, [r2, #4]
 8012d18:	601a      	str	r2, [r3, #0]
}
 8012d1a:	4770      	bx	lr
 8012d1c:	20001cd0 	.word	0x20001cd0
 8012d20:	20001da4 	.word	0x20001da4

08012d24 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d28:	b083      	sub	sp, #12
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d2a:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012d2e:	460f      	mov	r7, r1
 8012d30:	4601      	mov	r1, r0
 8012d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d34:	4490      	add	r8, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8012d36:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8012d3a:	461a      	mov	r2, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012d3c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8012d3e:	eb04 0488 	add.w	r4, r4, r8, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012d42:	f024 0807 	bic.w	r8, r4, #7
	if( pcName != NULL )
 8012d46:	2f00      	cmp	r7, #0
 8012d48:	d035      	beq.n	8012db6 <prvInitialiseNewTask.isra.0+0x92>
 8012d4a:	1e7c      	subs	r4, r7, #1
 8012d4c:	f105 0633 	add.w	r6, r5, #51	; 0x33
 8012d50:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012d52:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012d56:	f806 3f01 	strb.w	r3, [r6, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8012d5a:	7820      	ldrb	r0, [r4, #0]
 8012d5c:	b108      	cbz	r0, 8012d62 <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012d5e:	42bc      	cmp	r4, r7
 8012d60:	d1f7      	bne.n	8012d52 <prvInitialiseNewTask.isra.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012d62:	2300      	movs	r3, #0
 8012d64:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012d68:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8012d6a:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d6c:	1d28      	adds	r0, r5, #4
 8012d6e:	2c06      	cmp	r4, #6
 8012d70:	bf28      	it	cs
 8012d72:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8012d74:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8012d76:	e9c5 4611 	strd	r4, r6, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d7a:	f1c4 0407 	rsb	r4, r4, #7
 8012d7e:	e9cd 1200 	strd	r1, r2, [sp]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012d82:	f7ff f939 	bl	8011ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012d86:	f105 0018 	add.w	r0, r5, #24
 8012d8a:	f7ff f935 	bl	8011ff8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8012d8e:	64ee      	str	r6, [r5, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012d90:	9a01      	ldr	r2, [sp, #4]
 8012d92:	4640      	mov	r0, r8
 8012d94:	9900      	ldr	r1, [sp, #0]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d96:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012d98:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012d9c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012d9e:	626d      	str	r5, [r5, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012da0:	f001 f884 	bl	8013eac <pxPortInitialiseStack>
 8012da4:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8012da6:	f1b9 0f00 	cmp.w	r9, #0
 8012daa:	d001      	beq.n	8012db0 <prvInitialiseNewTask.isra.0+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012dac:	f8c9 5000 	str.w	r5, [r9]
}
 8012db0:	b003      	add	sp, #12
 8012db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012db6:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 8012dba:	e7d5      	b.n	8012d68 <prvInitialiseNewTask.isra.0+0x44>

08012dbc <prvDeleteTCB>:
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012dbc:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8012dc0:	b173      	cbz	r3, 8012de0 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012dc2:	2b01      	cmp	r3, #1
 8012dc4:	d017      	beq.n	8012df6 <prvDeleteTCB+0x3a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012dc6:	2b02      	cmp	r3, #2
 8012dc8:	d014      	beq.n	8012df4 <prvDeleteTCB+0x38>
	__asm volatile
 8012dca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012dce:	b672      	cpsid	i
 8012dd0:	f383 8811 	msr	BASEPRI, r3
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	f3bf 8f4f 	dsb	sy
 8012ddc:	b662      	cpsie	i
 8012dde:	e7fe      	b.n	8012dde <prvDeleteTCB+0x22>
	{
 8012de0:	b510      	push	{r4, lr}
 8012de2:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 8012de4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012de6:	f001 fa99 	bl	801431c <vPortFree>
				vPortFree( pxTCB );
 8012dea:	4620      	mov	r0, r4
	}
 8012dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8012df0:	f001 ba94 	b.w	801431c <vPortFree>
 8012df4:	4770      	bx	lr
				vPortFree( pxTCB );
 8012df6:	f001 ba91 	b.w	801431c <vPortFree>
 8012dfa:	bf00      	nop

08012dfc <prvIdleTask>:
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	4c16      	ldr	r4, [pc, #88]	; (8012e58 <prvIdleTask+0x5c>)
				taskYIELD();
 8012e00:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8012e04:	4f15      	ldr	r7, [pc, #84]	; (8012e5c <prvIdleTask+0x60>)
 8012e06:	4d16      	ldr	r5, [pc, #88]	; (8012e60 <prvIdleTask+0x64>)
 8012e08:	4e16      	ldr	r6, [pc, #88]	; (8012e64 <prvIdleTask+0x68>)
 8012e0a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8012e68 <prvIdleTask+0x6c>
 8012e0e:	e013      	b.n	8012e38 <prvIdleTask+0x3c>
			taskENTER_CRITICAL();
 8012e10:	f001 f878 	bl	8013f04 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e1a:	f10a 0004 	add.w	r0, sl, #4
 8012e1e:	f7ff f917 	bl	8012050 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012e22:	682b      	ldr	r3, [r5, #0]
 8012e24:	3b01      	subs	r3, #1
 8012e26:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	3b01      	subs	r3, #1
 8012e2c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8012e2e:	f001 f88f 	bl	8013f50 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8012e32:	4650      	mov	r0, sl
 8012e34:	f7ff ffc2 	bl	8012dbc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012e38:	6823      	ldr	r3, [r4, #0]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d1e8      	bne.n	8012e10 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e3e:	6833      	ldr	r3, [r6, #0]
 8012e40:	2b01      	cmp	r3, #1
 8012e42:	d905      	bls.n	8012e50 <prvIdleTask+0x54>
				taskYIELD();
 8012e44:	f8c8 9000 	str.w	r9, [r8]
 8012e48:	f3bf 8f4f 	dsb	sy
 8012e4c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8012e50:	f7ed feb2 	bl	8000bb8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012e54:	e7f0      	b.n	8012e38 <prvIdleTask+0x3c>
 8012e56:	bf00      	nop
 8012e58:	20001d68 	.word	0x20001d68
 8012e5c:	20001dd8 	.word	0x20001dd8
 8012e60:	20001d64 	.word	0x20001d64
 8012e64:	20001cd8 	.word	0x20001cd8
 8012e68:	e000ed04 	.word	0xe000ed04

08012e6c <xTaskCreateStatic>:
	{
 8012e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e6e:	b087      	sub	sp, #28
 8012e70:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8012e74:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 8012e76:	b1dd      	cbz	r5, 8012eb0 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 8012e78:	b17c      	cbz	r4, 8012e9a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8012e7a:	2754      	movs	r7, #84	; 0x54
 8012e7c:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012e7e:	9f05      	ldr	r7, [sp, #20]
 8012e80:	2f54      	cmp	r7, #84	; 0x54
 8012e82:	d020      	beq.n	8012ec6 <xTaskCreateStatic+0x5a>
 8012e84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e88:	b672      	cpsid	i
 8012e8a:	f383 8811 	msr	BASEPRI, r3
 8012e8e:	f3bf 8f6f 	isb	sy
 8012e92:	f3bf 8f4f 	dsb	sy
 8012e96:	b662      	cpsie	i
 8012e98:	e7fe      	b.n	8012e98 <xTaskCreateStatic+0x2c>
 8012e9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012e9e:	b672      	cpsid	i
 8012ea0:	f383 8811 	msr	BASEPRI, r3
 8012ea4:	f3bf 8f6f 	isb	sy
 8012ea8:	f3bf 8f4f 	dsb	sy
 8012eac:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 8012eae:	e7fe      	b.n	8012eae <xTaskCreateStatic+0x42>
 8012eb0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012eb4:	b672      	cpsid	i
 8012eb6:	f383 8811 	msr	BASEPRI, r3
 8012eba:	f3bf 8f6f 	isb	sy
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 8012ec4:	e7fe      	b.n	8012ec4 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012ec6:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012ec8:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012eca:	ad04      	add	r5, sp, #16
 8012ecc:	9402      	str	r4, [sp, #8]
 8012ece:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012ed0:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012ed4:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012ed6:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012ed8:	f7ff ff24 	bl	8012d24 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012edc:	4620      	mov	r0, r4
 8012ede:	f7ff fe37 	bl	8012b50 <prvAddNewTaskToReadyList>
	}
 8012ee2:	9804      	ldr	r0, [sp, #16]
 8012ee4:	b007      	add	sp, #28
 8012ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ee8 <xTaskCreate>:
	{
 8012ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012eec:	4607      	mov	r7, r0
 8012eee:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ef0:	0090      	lsls	r0, r2, #2
	{
 8012ef2:	4615      	mov	r5, r2
 8012ef4:	4688      	mov	r8, r1
 8012ef6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012ef8:	f001 f972 	bl	80141e0 <pvPortMalloc>
			if( pxStack != NULL )
 8012efc:	b1e0      	cbz	r0, 8012f38 <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012efe:	4604      	mov	r4, r0
 8012f00:	2054      	movs	r0, #84	; 0x54
 8012f02:	f001 f96d 	bl	80141e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8012f06:	4606      	mov	r6, r0
 8012f08:	b1d8      	cbz	r0, 8012f42 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 8012f0a:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012f0c:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012f10:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012f12:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012f14:	f886 c051 	strb.w	ip, [r6, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012f18:	462a      	mov	r2, r5
 8012f1a:	9401      	str	r4, [sp, #4]
 8012f1c:	4641      	mov	r1, r8
 8012f1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012f20:	4638      	mov	r0, r7
 8012f22:	9602      	str	r6, [sp, #8]
 8012f24:	9400      	str	r4, [sp, #0]
 8012f26:	f7ff fefd 	bl	8012d24 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	f7ff fe10 	bl	8012b50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012f30:	2001      	movs	r0, #1
	}
 8012f32:	b005      	add	sp, #20
 8012f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012f38:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8012f3c:	b005      	add	sp, #20
 8012f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8012f42:	4620      	mov	r0, r4
 8012f44:	f001 f9ea 	bl	801431c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012f48:	f04f 30ff 	mov.w	r0, #4294967295
 8012f4c:	e7f1      	b.n	8012f32 <xTaskCreate+0x4a>
 8012f4e:	bf00      	nop

08012f50 <vTaskStartScheduler>:
{
 8012f50:	b530      	push	{r4, r5, lr}
 8012f52:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012f54:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f56:	aa07      	add	r2, sp, #28
 8012f58:	a906      	add	r1, sp, #24
 8012f5a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012f5c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012f60:	f7ed fe30 	bl	8000bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012f64:	9905      	ldr	r1, [sp, #20]
 8012f66:	9a06      	ldr	r2, [sp, #24]
 8012f68:	4623      	mov	r3, r4
 8012f6a:	4818      	ldr	r0, [pc, #96]	; (8012fcc <vTaskStartScheduler+0x7c>)
 8012f6c:	9400      	str	r4, [sp, #0]
 8012f6e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8012f72:	9a07      	ldr	r2, [sp, #28]
 8012f74:	4916      	ldr	r1, [pc, #88]	; (8012fd0 <vTaskStartScheduler+0x80>)
 8012f76:	f7ff ff79 	bl	8012e6c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8012f7a:	b1b8      	cbz	r0, 8012fac <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8012f7c:	f000 fd48 	bl	8013a10 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8012f80:	2801      	cmp	r0, #1
 8012f82:	d115      	bne.n	8012fb0 <vTaskStartScheduler+0x60>
 8012f84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012f88:	b672      	cpsid	i
 8012f8a:	f383 8811 	msr	BASEPRI, r3
 8012f8e:	f3bf 8f6f 	isb	sy
 8012f92:	f3bf 8f4f 	dsb	sy
 8012f96:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8012f98:	490e      	ldr	r1, [pc, #56]	; (8012fd4 <vTaskStartScheduler+0x84>)
 8012f9a:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 8012f9e:	4a0e      	ldr	r2, [pc, #56]	; (8012fd8 <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa0:	4b0e      	ldr	r3, [pc, #56]	; (8012fdc <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8012fa2:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8012fa4:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012fa6:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8012fa8:	f001 f852 	bl	8014050 <xPortStartScheduler>
}
 8012fac:	b009      	add	sp, #36	; 0x24
 8012fae:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012fb0:	3001      	adds	r0, #1
 8012fb2:	d1fb      	bne.n	8012fac <vTaskStartScheduler+0x5c>
 8012fb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8012fb8:	b672      	cpsid	i
 8012fba:	f383 8811 	msr	BASEPRI, r3
 8012fbe:	f3bf 8f6f 	isb	sy
 8012fc2:	f3bf 8f4f 	dsb	sy
 8012fc6:	b662      	cpsie	i
 8012fc8:	e7fe      	b.n	8012fc8 <vTaskStartScheduler+0x78>
 8012fca:	bf00      	nop
 8012fcc:	08012dfd 	.word	0x08012dfd
 8012fd0:	08028014 	.word	0x08028014
 8012fd4:	20001da4 	.word	0x20001da4
 8012fd8:	20001dc0 	.word	0x20001dc0
 8012fdc:	20001dec 	.word	0x20001dec

08012fe0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8012fe0:	4a02      	ldr	r2, [pc, #8]	; (8012fec <vTaskSuspendAll+0xc>)
 8012fe2:	6813      	ldr	r3, [r2, #0]
 8012fe4:	3301      	adds	r3, #1
 8012fe6:	6013      	str	r3, [r2, #0]
}
 8012fe8:	4770      	bx	lr
 8012fea:	bf00      	nop
 8012fec:	20001d70 	.word	0x20001d70

08012ff0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8012ff0:	4b01      	ldr	r3, [pc, #4]	; (8012ff8 <xTaskGetTickCount+0x8>)
 8012ff2:	6818      	ldr	r0, [r3, #0]
}
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop
 8012ff8:	20001dec 	.word	0x20001dec

08012ffc <xTaskGetTickCountFromISR>:
{
 8012ffc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012ffe:	f001 f88d 	bl	801411c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8013002:	4b01      	ldr	r3, [pc, #4]	; (8013008 <xTaskGetTickCountFromISR+0xc>)
 8013004:	6818      	ldr	r0, [r3, #0]
}
 8013006:	bd08      	pop	{r3, pc}
 8013008:	20001dec 	.word	0x20001dec

0801300c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801300c:	4b4d      	ldr	r3, [pc, #308]	; (8013144 <xTaskIncrementTick+0x138>)
 801300e:	681b      	ldr	r3, [r3, #0]
{
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013016:	2b00      	cmp	r3, #0
 8013018:	d14d      	bne.n	80130b6 <xTaskIncrementTick+0xaa>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801301a:	4b4b      	ldr	r3, [pc, #300]	; (8013148 <xTaskIncrementTick+0x13c>)
 801301c:	681e      	ldr	r6, [r3, #0]
 801301e:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8013020:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013022:	2e00      	cmp	r6, #0
 8013024:	d055      	beq.n	80130d2 <xTaskIncrementTick+0xc6>
 8013026:	4d49      	ldr	r5, [pc, #292]	; (801314c <xTaskIncrementTick+0x140>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013028:	682b      	ldr	r3, [r5, #0]
 801302a:	42b3      	cmp	r3, r6
 801302c:	d866      	bhi.n	80130fc <xTaskIncrementTick+0xf0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801302e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 801315c <xTaskIncrementTick+0x150>
 8013032:	f8d9 3000 	ldr.w	r3, [r9]
 8013036:	681c      	ldr	r4, [r3, #0]
 8013038:	2c00      	cmp	r4, #0
 801303a:	d079      	beq.n	8013130 <xTaskIncrementTick+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 801303c:	2400      	movs	r4, #0
 801303e:	4f44      	ldr	r7, [pc, #272]	; (8013150 <xTaskIncrementTick+0x144>)
 8013040:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8013168 <xTaskIncrementTick+0x15c>
					prvAddTaskToReadyList( pxTCB );
 8013044:	f8df a124 	ldr.w	sl, [pc, #292]	; 801316c <xTaskIncrementTick+0x160>
 8013048:	e027      	b.n	801309a <xTaskIncrementTick+0x8e>
 801304a:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801304c:	f7ff f800 	bl	8012050 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013050:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013054:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013058:	9901      	ldr	r1, [sp, #4]
 801305a:	b112      	cbz	r2, 8013062 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801305c:	f7fe fff8 	bl	8012050 <uxListRemove>
 8013060:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8013062:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8013066:	2201      	movs	r2, #1
 8013068:	f8da 3000 	ldr.w	r3, [sl]
 801306c:	4082      	lsls	r2, r0
 801306e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013072:	431a      	orrs	r2, r3
 8013074:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8013078:	f8ca 2000 	str.w	r2, [sl]
 801307c:	f7fe ffc0 	bl	8012000 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013080:	f8d8 2000 	ldr.w	r2, [r8]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013084:	f8d9 0000 	ldr.w	r0, [r9]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013088:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 801308c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801308e:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8013090:	4291      	cmp	r1, r2
 8013092:	bf28      	it	cs
 8013094:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013096:	2b00      	cmp	r3, #0
 8013098:	d04d      	beq.n	8013136 <xTaskIncrementTick+0x12a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801309a:	f8d9 3000 	ldr.w	r3, [r9]
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80130a4:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130a8:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80130ac:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130ae:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80130b0:	d2cb      	bcs.n	801304a <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 80130b2:	602a      	str	r2, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80130b4:	e026      	b.n	8013104 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 80130b6:	4a27      	ldr	r2, [pc, #156]	; (8013154 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 80130b8:	2400      	movs	r4, #0
		++uxPendedTicks;
 80130ba:	6813      	ldr	r3, [r2, #0]
 80130bc:	3301      	adds	r3, #1
 80130be:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80130c0:	4b25      	ldr	r3, [pc, #148]	; (8013158 <xTaskIncrementTick+0x14c>)
 80130c2:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80130c4:	2b00      	cmp	r3, #0
}
 80130c6:	bf0c      	ite	eq
 80130c8:	4620      	moveq	r0, r4
 80130ca:	2001      	movne	r0, #1
 80130cc:	b003      	add	sp, #12
 80130ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80130d2:	4b22      	ldr	r3, [pc, #136]	; (801315c <xTaskIncrementTick+0x150>)
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	6812      	ldr	r2, [r2, #0]
 80130d8:	b9fa      	cbnz	r2, 801311a <xTaskIncrementTick+0x10e>
 80130da:	4a21      	ldr	r2, [pc, #132]	; (8013160 <xTaskIncrementTick+0x154>)
 80130dc:	6818      	ldr	r0, [r3, #0]
 80130de:	4921      	ldr	r1, [pc, #132]	; (8013164 <xTaskIncrementTick+0x158>)
 80130e0:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80130e2:	4d1a      	ldr	r5, [pc, #104]	; (801314c <xTaskIncrementTick+0x140>)
			taskSWITCH_DELAYED_LISTS();
 80130e4:	601c      	str	r4, [r3, #0]
 80130e6:	6010      	str	r0, [r2, #0]
 80130e8:	680a      	ldr	r2, [r1, #0]
 80130ea:	3201      	adds	r2, #1
 80130ec:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	bb23      	cbnz	r3, 801313e <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 80130f4:	f04f 33ff 	mov.w	r3, #4294967295
 80130f8:	602b      	str	r3, [r5, #0]
 80130fa:	e795      	b.n	8013028 <xTaskIncrementTick+0x1c>
BaseType_t xSwitchRequired = pdFALSE;
 80130fc:	2400      	movs	r4, #0
 80130fe:	4f14      	ldr	r7, [pc, #80]	; (8013150 <xTaskIncrementTick+0x144>)
 8013100:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8013168 <xTaskIncrementTick+0x15c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013104:	f8d8 3000 	ldr.w	r3, [r8]
 8013108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8013112:	2b02      	cmp	r3, #2
 8013114:	bf28      	it	cs
 8013116:	2401      	movcs	r4, #1
 8013118:	e7d2      	b.n	80130c0 <xTaskIncrementTick+0xb4>
 801311a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801311e:	b672      	cpsid	i
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	b662      	cpsie	i
			taskSWITCH_DELAYED_LISTS();
 801312e:	e7fe      	b.n	801312e <xTaskIncrementTick+0x122>
 8013130:	4f07      	ldr	r7, [pc, #28]	; (8013150 <xTaskIncrementTick+0x144>)
 8013132:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8013168 <xTaskIncrementTick+0x15c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013136:	f04f 33ff 	mov.w	r3, #4294967295
 801313a:	602b      	str	r3, [r5, #0]
					break;
 801313c:	e7e2      	b.n	8013104 <xTaskIncrementTick+0xf8>
 801313e:	f7ff fde5 	bl	8012d0c <prvResetNextTaskUnblockTime.part.0>
 8013142:	e771      	b.n	8013028 <xTaskIncrementTick+0x1c>
 8013144:	20001d70 	.word	0x20001d70
 8013148:	20001dec 	.word	0x20001dec
 801314c:	20001da4 	.word	0x20001da4
 8013150:	20001cd8 	.word	0x20001cd8
 8013154:	20001d6c 	.word	0x20001d6c
 8013158:	20001df0 	.word	0x20001df0
 801315c:	20001cd0 	.word	0x20001cd0
 8013160:	20001cd4 	.word	0x20001cd4
 8013164:	20001da8 	.word	0x20001da8
 8013168:	20001ccc 	.word	0x20001ccc
 801316c:	20001d78 	.word	0x20001d78

08013170 <xTaskResumeAll>:
{
 8013170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8013174:	4c3a      	ldr	r4, [pc, #232]	; (8013260 <xTaskResumeAll+0xf0>)
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	b953      	cbnz	r3, 8013190 <xTaskResumeAll+0x20>
 801317a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801317e:	b672      	cpsid	i
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	b662      	cpsie	i
 801318e:	e7fe      	b.n	801318e <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8013190:	f000 feb8 	bl	8013f04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8013194:	6823      	ldr	r3, [r4, #0]
 8013196:	3b01      	subs	r3, #1
 8013198:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801319a:	6823      	ldr	r3, [r4, #0]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d13c      	bne.n	801321a <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80131a0:	4b30      	ldr	r3, [pc, #192]	; (8013264 <xTaskResumeAll+0xf4>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d038      	beq.n	801321a <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80131a8:	4e2f      	ldr	r6, [pc, #188]	; (8013268 <xTaskResumeAll+0xf8>)
 80131aa:	6833      	ldr	r3, [r6, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d03a      	beq.n	8013226 <xTaskResumeAll+0xb6>
 80131b0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8013280 <xTaskResumeAll+0x110>
					prvAddTaskToReadyList( pxTCB );
 80131b4:	2701      	movs	r7, #1
 80131b6:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8013284 <xTaskResumeAll+0x114>
 80131ba:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8013288 <xTaskResumeAll+0x118>
 80131be:	4d2b      	ldr	r5, [pc, #172]	; (801326c <xTaskResumeAll+0xfc>)
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131c0:	68f3      	ldr	r3, [r6, #12]
 80131c2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131c4:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80131c8:	f104 0018 	add.w	r0, r4, #24
 80131cc:	f7fe ff40 	bl	8012050 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80131d0:	4658      	mov	r0, fp
 80131d2:	f7fe ff3d 	bl	8012050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80131d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80131d8:	f8d8 2000 	ldr.w	r2, [r8]
 80131dc:	4659      	mov	r1, fp
 80131de:	fa07 f300 	lsl.w	r3, r7, r0
 80131e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80131e6:	4313      	orrs	r3, r2
 80131e8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80131ec:	f8c8 3000 	str.w	r3, [r8]
 80131f0:	f7fe ff06 	bl	8012000 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80131f4:	f8da 3000 	ldr.w	r3, [sl]
 80131f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80131fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d300      	bcc.n	8013202 <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8013200:	602f      	str	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013202:	6833      	ldr	r3, [r6, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d1db      	bne.n	80131c0 <xTaskResumeAll+0x50>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013208:	4b19      	ldr	r3, [pc, #100]	; (8013270 <xTaskResumeAll+0x100>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	bb1b      	cbnz	r3, 8013258 <xTaskResumeAll+0xe8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8013210:	4b18      	ldr	r3, [pc, #96]	; (8013274 <xTaskResumeAll+0x104>)
 8013212:	f04f 32ff 	mov.w	r2, #4294967295
 8013216:	601a      	str	r2, [r3, #0]
 8013218:	e006      	b.n	8013228 <xTaskResumeAll+0xb8>
BaseType_t xAlreadyYielded = pdFALSE;
 801321a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 801321c:	f000 fe98 	bl	8013f50 <vPortExitCritical>
}
 8013220:	4620      	mov	r0, r4
 8013222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013226:	4d11      	ldr	r5, [pc, #68]	; (801326c <xTaskResumeAll+0xfc>)
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013228:	4e13      	ldr	r6, [pc, #76]	; (8013278 <xTaskResumeAll+0x108>)
 801322a:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801322c:	b13c      	cbz	r4, 801323e <xTaskResumeAll+0xce>
								xYieldPending = pdTRUE;
 801322e:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8013230:	f7ff feec 	bl	801300c <xTaskIncrementTick>
 8013234:	b100      	cbz	r0, 8013238 <xTaskResumeAll+0xc8>
								xYieldPending = pdTRUE;
 8013236:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013238:	3c01      	subs	r4, #1
 801323a:	d1f9      	bne.n	8013230 <xTaskResumeAll+0xc0>
						uxPendedTicks = 0;
 801323c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 801323e:	682b      	ldr	r3, [r5, #0]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d0ea      	beq.n	801321a <xTaskResumeAll+0xaa>
					taskYIELD_IF_USING_PREEMPTION();
 8013244:	4b0d      	ldr	r3, [pc, #52]	; (801327c <xTaskResumeAll+0x10c>)
 8013246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801324a:	601a      	str	r2, [r3, #0]
 801324c:	f3bf 8f4f 	dsb	sy
 8013250:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8013254:	2401      	movs	r4, #1
 8013256:	e7e1      	b.n	801321c <xTaskResumeAll+0xac>
 8013258:	f7ff fd58 	bl	8012d0c <prvResetNextTaskUnblockTime.part.0>
 801325c:	e7e4      	b.n	8013228 <xTaskResumeAll+0xb8>
 801325e:	bf00      	nop
 8013260:	20001d70 	.word	0x20001d70
 8013264:	20001d64 	.word	0x20001d64
 8013268:	20001dac 	.word	0x20001dac
 801326c:	20001df0 	.word	0x20001df0
 8013270:	20001cd0 	.word	0x20001cd0
 8013274:	20001da4 	.word	0x20001da4
 8013278:	20001d6c 	.word	0x20001d6c
 801327c:	e000ed04 	.word	0xe000ed04
 8013280:	20001d78 	.word	0x20001d78
 8013284:	20001cd8 	.word	0x20001cd8
 8013288:	20001ccc 	.word	0x20001ccc

0801328c <vTaskDelay>:
	{
 801328c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 801328e:	b1a8      	cbz	r0, 80132bc <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8013290:	4b0f      	ldr	r3, [pc, #60]	; (80132d0 <vTaskDelay+0x44>)
 8013292:	6819      	ldr	r1, [r3, #0]
 8013294:	b151      	cbz	r1, 80132ac <vTaskDelay+0x20>
 8013296:	f04f 0330 	mov.w	r3, #48	; 0x30
 801329a:	b672      	cpsid	i
 801329c:	f383 8811 	msr	BASEPRI, r3
 80132a0:	f3bf 8f6f 	isb	sy
 80132a4:	f3bf 8f4f 	dsb	sy
 80132a8:	b662      	cpsie	i
 80132aa:	e7fe      	b.n	80132aa <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 80132ac:	681a      	ldr	r2, [r3, #0]
 80132ae:	3201      	adds	r2, #1
 80132b0:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80132b2:	f7ff fce7 	bl	8012c84 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80132b6:	f7ff ff5b 	bl	8013170 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80132ba:	b938      	cbnz	r0, 80132cc <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 80132bc:	4b05      	ldr	r3, [pc, #20]	; (80132d4 <vTaskDelay+0x48>)
 80132be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132c2:	601a      	str	r2, [r3, #0]
 80132c4:	f3bf 8f4f 	dsb	sy
 80132c8:	f3bf 8f6f 	isb	sy
	}
 80132cc:	bd08      	pop	{r3, pc}
 80132ce:	bf00      	nop
 80132d0:	20001d70 	.word	0x20001d70
 80132d4:	e000ed04 	.word	0xe000ed04

080132d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80132d8:	4b1e      	ldr	r3, [pc, #120]	; (8013354 <vTaskSwitchContext+0x7c>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	b11b      	cbz	r3, 80132e6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80132de:	4b1e      	ldr	r3, [pc, #120]	; (8013358 <vTaskSwitchContext+0x80>)
 80132e0:	2201      	movs	r2, #1
 80132e2:	601a      	str	r2, [r3, #0]
 80132e4:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80132e6:	4a1c      	ldr	r2, [pc, #112]	; (8013358 <vTaskSwitchContext+0x80>)
{
 80132e8:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 80132ea:	4c1c      	ldr	r4, [pc, #112]	; (801335c <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 80132ec:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80132ee:	6822      	ldr	r2, [r4, #0]
 80132f0:	6823      	ldr	r3, [r4, #0]
 80132f2:	6812      	ldr	r2, [r2, #0]
 80132f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d923      	bls.n	8013342 <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80132fa:	4b19      	ldr	r3, [pc, #100]	; (8013360 <vTaskSwitchContext+0x88>)
 80132fc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80132fe:	fab3 f383 	clz	r3, r3
 8013302:	b2db      	uxtb	r3, r3
 8013304:	4a17      	ldr	r2, [pc, #92]	; (8013364 <vTaskSwitchContext+0x8c>)
 8013306:	f1c3 031f 	rsb	r3, r3, #31
 801330a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801330e:	0099      	lsls	r1, r3, #2
 8013310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013314:	5850      	ldr	r0, [r2, r1]
 8013316:	b950      	cbnz	r0, 801332e <vTaskSwitchContext+0x56>
	__asm volatile
 8013318:	f04f 0330 	mov.w	r3, #48	; 0x30
 801331c:	b672      	cpsid	i
 801331e:	f383 8811 	msr	BASEPRI, r3
 8013322:	f3bf 8f6f 	isb	sy
 8013326:	f3bf 8f4f 	dsb	sy
 801332a:	b662      	cpsie	i
 801332c:	e7fe      	b.n	801332c <vTaskSwitchContext+0x54>
 801332e:	6858      	ldr	r0, [r3, #4]
 8013330:	3108      	adds	r1, #8
 8013332:	4411      	add	r1, r2
 8013334:	6842      	ldr	r2, [r0, #4]
 8013336:	428a      	cmp	r2, r1
 8013338:	605a      	str	r2, [r3, #4]
 801333a:	d008      	beq.n	801334e <vTaskSwitchContext+0x76>
 801333c:	68d3      	ldr	r3, [r2, #12]
 801333e:	6023      	str	r3, [r4, #0]
}
 8013340:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8013342:	6820      	ldr	r0, [r4, #0]
 8013344:	6821      	ldr	r1, [r4, #0]
 8013346:	3134      	adds	r1, #52	; 0x34
 8013348:	f7ed fc38 	bl	8000bbc <vApplicationStackOverflowHook>
 801334c:	e7d5      	b.n	80132fa <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801334e:	6852      	ldr	r2, [r2, #4]
 8013350:	605a      	str	r2, [r3, #4]
 8013352:	e7f3      	b.n	801333c <vTaskSwitchContext+0x64>
 8013354:	20001d70 	.word	0x20001d70
 8013358:	20001df0 	.word	0x20001df0
 801335c:	20001ccc 	.word	0x20001ccc
 8013360:	20001d78 	.word	0x20001d78
 8013364:	20001cd8 	.word	0x20001cd8

08013368 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8013368:	b160      	cbz	r0, 8013384 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801336a:	4b0c      	ldr	r3, [pc, #48]	; (801339c <vTaskPlaceOnEventList+0x34>)
{
 801336c:	b510      	push	{r4, lr}
 801336e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013370:	6819      	ldr	r1, [r3, #0]
 8013372:	3118      	adds	r1, #24
 8013374:	f7fe fe54 	bl	8012020 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013378:	4620      	mov	r0, r4
 801337a:	2101      	movs	r1, #1
}
 801337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013380:	f7ff bc80 	b.w	8012c84 <prvAddCurrentTaskToDelayedList>
 8013384:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013388:	b672      	cpsid	i
 801338a:	f383 8811 	msr	BASEPRI, r3
 801338e:	f3bf 8f6f 	isb	sy
 8013392:	f3bf 8f4f 	dsb	sy
 8013396:	b662      	cpsie	i
	configASSERT( pxEventList );
 8013398:	e7fe      	b.n	8013398 <vTaskPlaceOnEventList+0x30>
 801339a:	bf00      	nop
 801339c:	20001ccc 	.word	0x20001ccc

080133a0 <vTaskPlaceOnEventListRestricted>:
	{
 80133a0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80133a2:	b180      	cbz	r0, 80133c6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80133a4:	4b0d      	ldr	r3, [pc, #52]	; (80133dc <vTaskPlaceOnEventListRestricted+0x3c>)
 80133a6:	460d      	mov	r5, r1
 80133a8:	4614      	mov	r4, r2
 80133aa:	6819      	ldr	r1, [r3, #0]
 80133ac:	3118      	adds	r1, #24
 80133ae:	f7fe fe27 	bl	8012000 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80133b2:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80133b4:	4621      	mov	r1, r4
 80133b6:	bf0c      	ite	eq
 80133b8:	4628      	moveq	r0, r5
 80133ba:	f04f 30ff 	movne.w	r0, #4294967295
	}
 80133be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80133c2:	f7ff bc5f 	b.w	8012c84 <prvAddCurrentTaskToDelayedList>
 80133c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80133ca:	b672      	cpsid	i
 80133cc:	f383 8811 	msr	BASEPRI, r3
 80133d0:	f3bf 8f6f 	isb	sy
 80133d4:	f3bf 8f4f 	dsb	sy
 80133d8:	b662      	cpsie	i
		configASSERT( pxEventList );
 80133da:	e7fe      	b.n	80133da <vTaskPlaceOnEventListRestricted+0x3a>
 80133dc:	20001ccc 	.word	0x20001ccc

080133e0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133e0:	68c3      	ldr	r3, [r0, #12]
{
 80133e2:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80133e4:	68dc      	ldr	r4, [r3, #12]
{
 80133e6:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 80133e8:	b364      	cbz	r4, 8013444 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80133ea:	f104 0118 	add.w	r1, r4, #24
 80133ee:	4608      	mov	r0, r1
 80133f0:	9101      	str	r1, [sp, #4]
 80133f2:	f7fe fe2d 	bl	8012050 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80133f6:	4b1a      	ldr	r3, [pc, #104]	; (8013460 <xTaskRemoveFromEventList+0x80>)
 80133f8:	9901      	ldr	r1, [sp, #4]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	b16b      	cbz	r3, 801341a <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80133fe:	4819      	ldr	r0, [pc, #100]	; (8013464 <xTaskRemoveFromEventList+0x84>)
 8013400:	f7fe fdfe 	bl	8012000 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013404:	4b18      	ldr	r3, [pc, #96]	; (8013468 <xTaskRemoveFromEventList+0x88>)
 8013406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801340c:	429a      	cmp	r2, r3
 801340e:	d924      	bls.n	801345a <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8013410:	2001      	movs	r0, #1
 8013412:	4b16      	ldr	r3, [pc, #88]	; (801346c <xTaskRemoveFromEventList+0x8c>)
 8013414:	6018      	str	r0, [r3, #0]
}
 8013416:	b002      	add	sp, #8
 8013418:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801341a:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 801341c:	4d14      	ldr	r5, [pc, #80]	; (8013470 <xTaskRemoveFromEventList+0x90>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801341e:	4608      	mov	r0, r1
 8013420:	9101      	str	r1, [sp, #4]
 8013422:	f7fe fe15 	bl	8012050 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013426:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013428:	2301      	movs	r3, #1
 801342a:	682e      	ldr	r6, [r5, #0]
 801342c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8013430:	9901      	ldr	r1, [sp, #4]
 8013432:	4093      	lsls	r3, r2
 8013434:	4a0f      	ldr	r2, [pc, #60]	; (8013474 <xTaskRemoveFromEventList+0x94>)
 8013436:	4333      	orrs	r3, r6
 8013438:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	f7fe fddf 	bl	8012000 <vListInsertEnd>
 8013442:	e7df      	b.n	8013404 <xTaskRemoveFromEventList+0x24>
 8013444:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013448:	b672      	cpsid	i
 801344a:	f383 8811 	msr	BASEPRI, r3
 801344e:	f3bf 8f6f 	isb	sy
 8013452:	f3bf 8f4f 	dsb	sy
 8013456:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8013458:	e7fe      	b.n	8013458 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 801345a:	2000      	movs	r0, #0
}
 801345c:	b002      	add	sp, #8
 801345e:	bd70      	pop	{r4, r5, r6, pc}
 8013460:	20001d70 	.word	0x20001d70
 8013464:	20001dac 	.word	0x20001dac
 8013468:	20001ccc 	.word	0x20001ccc
 801346c:	20001df0 	.word	0x20001df0
 8013470:	20001d78 	.word	0x20001d78
 8013474:	20001cd8 	.word	0x20001cd8

08013478 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013478:	4a03      	ldr	r2, [pc, #12]	; (8013488 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 801347a:	4b04      	ldr	r3, [pc, #16]	; (801348c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801347c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	e9c0 2300 	strd	r2, r3, [r0]
}
 8013484:	4770      	bx	lr
 8013486:	bf00      	nop
 8013488:	20001da8 	.word	0x20001da8
 801348c:	20001dec 	.word	0x20001dec

08013490 <xTaskCheckForTimeOut>:
{
 8013490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8013492:	b318      	cbz	r0, 80134dc <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 8013494:	460d      	mov	r5, r1
 8013496:	b1b1      	cbz	r1, 80134c6 <xTaskCheckForTimeOut+0x36>
 8013498:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801349a:	f000 fd33 	bl	8013f04 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 801349e:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 80134a0:	f8df c080 	ldr.w	ip, [pc, #128]	; 8013524 <xTaskCheckForTimeOut+0x94>
			if( *pxTicksToWait == portMAX_DELAY )
 80134a4:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 80134a6:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 80134aa:	d02f      	beq.n	801350c <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80134ac:	4e1c      	ldr	r6, [pc, #112]	; (8013520 <xTaskCheckForTimeOut+0x90>)
 80134ae:	e9d4 0200 	ldrd	r0, r2, [r4]
 80134b2:	6837      	ldr	r7, [r6, #0]
 80134b4:	42b8      	cmp	r0, r7
 80134b6:	d01c      	beq.n	80134f2 <xTaskCheckForTimeOut+0x62>
 80134b8:	428a      	cmp	r2, r1
 80134ba:	d81a      	bhi.n	80134f2 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 80134bc:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 80134be:	f000 fd47 	bl	8013f50 <vPortExitCritical>
}
 80134c2:	4630      	mov	r0, r6
 80134c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80134c6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134ca:	b672      	cpsid	i
 80134cc:	f383 8811 	msr	BASEPRI, r3
 80134d0:	f3bf 8f6f 	isb	sy
 80134d4:	f3bf 8f4f 	dsb	sy
 80134d8:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80134da:	e7fe      	b.n	80134da <xTaskCheckForTimeOut+0x4a>
 80134dc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80134e0:	b672      	cpsid	i
 80134e2:	f383 8811 	msr	BASEPRI, r3
 80134e6:	f3bf 8f6f 	isb	sy
 80134ea:	f3bf 8f4f 	dsb	sy
 80134ee:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80134f0:	e7fe      	b.n	80134f0 <xTaskCheckForTimeOut+0x60>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80134f2:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80134f4:	42bb      	cmp	r3, r7
 80134f6:	d90e      	bls.n	8013516 <xTaskCheckForTimeOut+0x86>
			*pxTicksToWait -= xElapsedTime;
 80134f8:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80134fa:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80134fc:	f8dc 1000 	ldr.w	r1, [ip]
			xReturn = pdFALSE;
 8013500:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8013502:	4413      	add	r3, r2
 8013504:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8013506:	e9c4 7100 	strd	r7, r1, [r4]
			xReturn = pdFALSE;
 801350a:	e7d8      	b.n	80134be <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 801350c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 801350e:	f000 fd1f 	bl	8013f50 <vPortExitCritical>
}
 8013512:	4630      	mov	r0, r6
 8013514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8013516:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8013518:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 801351a:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 801351c:	e7cf      	b.n	80134be <xTaskCheckForTimeOut+0x2e>
 801351e:	bf00      	nop
 8013520:	20001da8 	.word	0x20001da8
 8013524:	20001dec 	.word	0x20001dec

08013528 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8013528:	4b01      	ldr	r3, [pc, #4]	; (8013530 <vTaskMissedYield+0x8>)
 801352a:	2201      	movs	r2, #1
 801352c:	601a      	str	r2, [r3, #0]
}
 801352e:	4770      	bx	lr
 8013530:	20001df0 	.word	0x20001df0

08013534 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8013534:	4b01      	ldr	r3, [pc, #4]	; (801353c <xTaskGetCurrentTaskHandle+0x8>)
 8013536:	6818      	ldr	r0, [r3, #0]
	}
 8013538:	4770      	bx	lr
 801353a:	bf00      	nop
 801353c:	20001ccc 	.word	0x20001ccc

08013540 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8013540:	4b05      	ldr	r3, [pc, #20]	; (8013558 <xTaskGetSchedulerState+0x18>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	b133      	cbz	r3, 8013554 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013546:	4b05      	ldr	r3, [pc, #20]	; (801355c <xTaskGetSchedulerState+0x1c>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 801354c:	bf0c      	ite	eq
 801354e:	2002      	moveq	r0, #2
 8013550:	2000      	movne	r0, #0
 8013552:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013554:	2001      	movs	r0, #1
	}
 8013556:	4770      	bx	lr
 8013558:	20001dc0 	.word	0x20001dc0
 801355c:	20001d70 	.word	0x20001d70

08013560 <xTaskPriorityInherit>:
	{
 8013560:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8013562:	4604      	mov	r4, r0
	{
 8013564:	b083      	sub	sp, #12
		if( pxMutexHolder != NULL )
 8013566:	b1c8      	cbz	r0, 801359c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013568:	4d26      	ldr	r5, [pc, #152]	; (8013604 <xTaskPriorityInherit+0xa4>)
 801356a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801356c:	682a      	ldr	r2, [r5, #0]
 801356e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8013570:	4293      	cmp	r3, r2
 8013572:	d215      	bcs.n	80135a0 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013574:	6982      	ldr	r2, [r0, #24]
 8013576:	2a00      	cmp	r2, #0
 8013578:	db04      	blt.n	8013584 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801357a:	682a      	ldr	r2, [r5, #0]
 801357c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801357e:	f1c2 0207 	rsb	r2, r2, #7
 8013582:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013584:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013588:	4e1f      	ldr	r6, [pc, #124]	; (8013608 <xTaskPriorityInherit+0xa8>)
 801358a:	6962      	ldr	r2, [r4, #20]
 801358c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013590:	429a      	cmp	r2, r3
 8013592:	d00e      	beq.n	80135b2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013594:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8013596:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801359a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 801359c:	b003      	add	sp, #12
 801359e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80135a0:	682b      	ldr	r3, [r5, #0]
 80135a2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80135a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a6:	4298      	cmp	r0, r3
 80135a8:	bf2c      	ite	cs
 80135aa:	2000      	movcs	r0, #0
 80135ac:	2001      	movcc	r0, #1
	}
 80135ae:	b003      	add	sp, #12
 80135b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80135b2:	1d21      	adds	r1, r4, #4
 80135b4:	4608      	mov	r0, r1
 80135b6:	9101      	str	r1, [sp, #4]
 80135b8:	f7fe fd4a 	bl	8012050 <uxListRemove>
 80135bc:	9901      	ldr	r1, [sp, #4]
 80135be:	b970      	cbnz	r0, 80135de <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80135c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80135c2:	4a12      	ldr	r2, [pc, #72]	; (801360c <xTaskPriorityInherit+0xac>)
 80135c4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80135c8:	009b      	lsls	r3, r3, #2
 80135ca:	58f3      	ldr	r3, [r6, r3]
 80135cc:	b943      	cbnz	r3, 80135e0 <xTaskPriorityInherit+0x80>
 80135ce:	2701      	movs	r7, #1
 80135d0:	6813      	ldr	r3, [r2, #0]
 80135d2:	fa07 f000 	lsl.w	r0, r7, r0
 80135d6:	ea23 0300 	bic.w	r3, r3, r0
 80135da:	6013      	str	r3, [r2, #0]
 80135dc:	e000      	b.n	80135e0 <xTaskPriorityInherit+0x80>
 80135de:	4a0b      	ldr	r2, [pc, #44]	; (801360c <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135e0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80135e2:	2501      	movs	r5, #1
 80135e4:	6817      	ldr	r7, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80135e8:	fa05 f300 	lsl.w	r3, r5, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80135ec:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80135ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80135f2:	433b      	orrs	r3, r7
 80135f4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80135f8:	6013      	str	r3, [r2, #0]
 80135fa:	f7fe fd01 	bl	8012000 <vListInsertEnd>
				xReturn = pdTRUE;
 80135fe:	4628      	mov	r0, r5
 8013600:	e7cc      	b.n	801359c <xTaskPriorityInherit+0x3c>
 8013602:	bf00      	nop
 8013604:	20001ccc 	.word	0x20001ccc
 8013608:	20001cd8 	.word	0x20001cd8
 801360c:	20001d78 	.word	0x20001d78

08013610 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8013610:	b1e8      	cbz	r0, 801364e <xTaskPriorityDisinherit+0x3e>
			configASSERT( pxTCB == pxCurrentTCB );
 8013612:	4b2c      	ldr	r3, [pc, #176]	; (80136c4 <xTaskPriorityDisinherit+0xb4>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4283      	cmp	r3, r0
	{
 8013618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801361a:	4604      	mov	r4, r0
 801361c:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 801361e:	d00a      	beq.n	8013636 <xTaskPriorityDisinherit+0x26>
 8013620:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013624:	b672      	cpsid	i
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	b662      	cpsie	i
 8013634:	e7fe      	b.n	8013634 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8013636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013638:	b15b      	cbz	r3, 8013652 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801363a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 801363c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801363e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8013640:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013642:	4291      	cmp	r1, r2
 8013644:	d000      	beq.n	8013648 <xTaskPriorityDisinherit+0x38>
 8013646:	b17b      	cbz	r3, 8013668 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8013648:	2000      	movs	r0, #0
	}
 801364a:	b003      	add	sp, #12
 801364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 801364e:	2000      	movs	r0, #0
	}
 8013650:	4770      	bx	lr
 8013652:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013656:	b672      	cpsid	i
 8013658:	f383 8811 	msr	BASEPRI, r3
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8013666:	e7fe      	b.n	8013666 <xTaskPriorityDisinherit+0x56>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013668:	1d01      	adds	r1, r0, #4
 801366a:	4608      	mov	r0, r1
 801366c:	9101      	str	r1, [sp, #4]
 801366e:	f7fe fcef 	bl	8012050 <uxListRemove>
 8013672:	9901      	ldr	r1, [sp, #4]
 8013674:	b1b0      	cbz	r0, 80136a4 <xTaskPriorityDisinherit+0x94>
 8013676:	4814      	ldr	r0, [pc, #80]	; (80136c8 <xTaskPriorityDisinherit+0xb8>)
 8013678:	4a14      	ldr	r2, [pc, #80]	; (80136cc <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801367a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 801367c:	2501      	movs	r5, #1
 801367e:	f8d2 c000 	ldr.w	ip, [r2]
 8013682:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013686:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801368a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801368c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8013690:	ea46 060c 	orr.w	r6, r6, ip
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013694:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8013696:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801369a:	6016      	str	r6, [r2, #0]
 801369c:	f7fe fcb0 	bl	8012000 <vListInsertEnd>
					xReturn = pdTRUE;
 80136a0:	4628      	mov	r0, r5
		return xReturn;
 80136a2:	e7d2      	b.n	801364a <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80136a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136a6:	4808      	ldr	r0, [pc, #32]	; (80136c8 <xTaskPriorityDisinherit+0xb8>)
 80136a8:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80136ac:	4a07      	ldr	r2, [pc, #28]	; (80136cc <xTaskPriorityDisinherit+0xbc>)
 80136ae:	009b      	lsls	r3, r3, #2
 80136b0:	58c3      	ldr	r3, [r0, r3]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d1e1      	bne.n	801367a <xTaskPriorityDisinherit+0x6a>
 80136b6:	2501      	movs	r5, #1
 80136b8:	6813      	ldr	r3, [r2, #0]
 80136ba:	40b5      	lsls	r5, r6
 80136bc:	ea23 0305 	bic.w	r3, r3, r5
 80136c0:	6013      	str	r3, [r2, #0]
 80136c2:	e7da      	b.n	801367a <xTaskPriorityDisinherit+0x6a>
 80136c4:	20001ccc 	.word	0x20001ccc
 80136c8:	20001cd8 	.word	0x20001cd8
 80136cc:	20001d78 	.word	0x20001d78

080136d0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80136d0:	b1d8      	cbz	r0, 801370a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 80136d2:	460b      	mov	r3, r1
 80136d4:	6c81      	ldr	r1, [r0, #72]	; 0x48
	{
 80136d6:	b570      	push	{r4, r5, r6, lr}
 80136d8:	4604      	mov	r4, r0
 80136da:	b082      	sub	sp, #8
			configASSERT( pxTCB->uxMutexesHeld );
 80136dc:	b151      	cbz	r1, 80136f4 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80136de:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 80136e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80136e2:	4283      	cmp	r3, r0
 80136e4:	bf38      	it	cc
 80136e6:	4603      	movcc	r3, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80136e8:	429a      	cmp	r2, r3
 80136ea:	d001      	beq.n	80136f0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80136ec:	2901      	cmp	r1, #1
 80136ee:	d00d      	beq.n	801370c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	}
 80136f0:	b002      	add	sp, #8
 80136f2:	bd70      	pop	{r4, r5, r6, pc}
 80136f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80136f8:	b672      	cpsid	i
 80136fa:	f383 8811 	msr	BASEPRI, r3
 80136fe:	f3bf 8f6f 	isb	sy
 8013702:	f3bf 8f4f 	dsb	sy
 8013706:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8013708:	e7fe      	b.n	8013708 <vTaskPriorityDisinheritAfterTimeout+0x38>
 801370a:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 801370c:	4923      	ldr	r1, [pc, #140]	; (801379c <vTaskPriorityDisinheritAfterTimeout+0xcc>)
 801370e:	6809      	ldr	r1, [r1, #0]
 8013710:	42a1      	cmp	r1, r4
 8013712:	d025      	beq.n	8013760 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013714:	69a1      	ldr	r1, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8013716:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013718:	2900      	cmp	r1, #0
 801371a:	db02      	blt.n	8013722 <vTaskPriorityDisinheritAfterTimeout+0x52>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801371c:	f1c3 0307 	rsb	r3, r3, #7
 8013720:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013722:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8013726:	4d1e      	ldr	r5, [pc, #120]	; (80137a0 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8013728:	6961      	ldr	r1, [r4, #20]
 801372a:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 801372e:	4299      	cmp	r1, r3
 8013730:	d1de      	bne.n	80136f0 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013732:	1d21      	adds	r1, r4, #4
 8013734:	4608      	mov	r0, r1
 8013736:	9101      	str	r1, [sp, #4]
 8013738:	f7fe fc8a 	bl	8012050 <uxListRemove>
 801373c:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801373e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013740:	b1c8      	cbz	r0, 8013776 <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8013742:	2301      	movs	r3, #1
 8013744:	4c17      	ldr	r4, [pc, #92]	; (80137a4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8013746:	0090      	lsls	r0, r2, #2
 8013748:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 801374a:	6826      	ldr	r6, [r4, #0]
 801374c:	4410      	add	r0, r2
 801374e:	4333      	orrs	r3, r6
 8013750:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8013754:	6023      	str	r3, [r4, #0]
	}
 8013756:	b002      	add	sp, #8
 8013758:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 801375c:	f7fe bc50 	b.w	8012000 <vListInsertEnd>
 8013760:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013764:	b672      	cpsid	i
 8013766:	f383 8811 	msr	BASEPRI, r3
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8013774:	e7fe      	b.n	8013774 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013776:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801377a:	0090      	lsls	r0, r2, #2
 801377c:	009b      	lsls	r3, r3, #2
 801377e:	58eb      	ldr	r3, [r5, r3]
 8013780:	b11b      	cbz	r3, 801378a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8013782:	2301      	movs	r3, #1
 8013784:	4c07      	ldr	r4, [pc, #28]	; (80137a4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8013786:	4093      	lsls	r3, r2
 8013788:	e7df      	b.n	801374a <vTaskPriorityDisinheritAfterTimeout+0x7a>
 801378a:	4c06      	ldr	r4, [pc, #24]	; (80137a4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801378c:	2301      	movs	r3, #1
 801378e:	6826      	ldr	r6, [r4, #0]
 8013790:	4093      	lsls	r3, r2
 8013792:	ea26 0603 	bic.w	r6, r6, r3
 8013796:	6026      	str	r6, [r4, #0]
 8013798:	e7d7      	b.n	801374a <vTaskPriorityDisinheritAfterTimeout+0x7a>
 801379a:	bf00      	nop
 801379c:	20001ccc 	.word	0x20001ccc
 80137a0:	20001cd8 	.word	0x20001cd8
 80137a4:	20001d78 	.word	0x20001d78

080137a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80137a8:	4b04      	ldr	r3, [pc, #16]	; (80137bc <pvTaskIncrementMutexHeldCount+0x14>)
 80137aa:	681a      	ldr	r2, [r3, #0]
 80137ac:	b11a      	cbz	r2, 80137b6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80137ae:	6819      	ldr	r1, [r3, #0]
 80137b0:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80137b2:	3201      	adds	r2, #1
 80137b4:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80137b6:	6818      	ldr	r0, [r3, #0]
	}
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	20001ccc 	.word	0x20001ccc

080137c0 <ulTaskNotifyTake>:
	{
 80137c0:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80137c2:	4c17      	ldr	r4, [pc, #92]	; (8013820 <ulTaskNotifyTake+0x60>)
	{
 80137c4:	4606      	mov	r6, r0
 80137c6:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80137c8:	f000 fb9c 	bl	8013f04 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80137cc:	6823      	ldr	r3, [r4, #0]
 80137ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137d0:	b923      	cbnz	r3, 80137dc <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80137d2:	6823      	ldr	r3, [r4, #0]
 80137d4:	2101      	movs	r1, #1
 80137d6:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80137da:	b9ad      	cbnz	r5, 8013808 <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 80137dc:	f000 fbb8 	bl	8013f50 <vPortExitCritical>
		taskENTER_CRITICAL();
 80137e0:	f000 fb90 	bl	8013f04 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80137e8:	b11d      	cbz	r5, 80137f2 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80137ea:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80137ec:	b14e      	cbz	r6, 8013802 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80137ee:	2200      	movs	r2, #0
 80137f0:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80137f2:	6823      	ldr	r3, [r4, #0]
 80137f4:	2200      	movs	r2, #0
 80137f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80137fa:	f000 fba9 	bl	8013f50 <vPortExitCritical>
	}
 80137fe:	4628      	mov	r0, r5
 8013800:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8013802:	1e6a      	subs	r2, r5, #1
 8013804:	64da      	str	r2, [r3, #76]	; 0x4c
 8013806:	e7f4      	b.n	80137f2 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013808:	4628      	mov	r0, r5
 801380a:	f7ff fa3b 	bl	8012c84 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 801380e:	4b05      	ldr	r3, [pc, #20]	; (8013824 <ulTaskNotifyTake+0x64>)
 8013810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013814:	601a      	str	r2, [r3, #0]
 8013816:	f3bf 8f4f 	dsb	sy
 801381a:	f3bf 8f6f 	isb	sy
 801381e:	e7dd      	b.n	80137dc <ulTaskNotifyTake+0x1c>
 8013820:	20001ccc 	.word	0x20001ccc
 8013824:	e000ed04 	.word	0xe000ed04

08013828 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8013828:	b308      	cbz	r0, 801386e <vTaskNotifyGiveFromISR+0x46>
	{
 801382a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801382c:	b083      	sub	sp, #12
 801382e:	4604      	mov	r4, r0
 8013830:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013832:	f000 fc73 	bl	801411c <vPortValidateInterruptPriority>
	__asm volatile
 8013836:	f3ef 8711 	mrs	r7, BASEPRI
 801383a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801383e:	b672      	cpsid	i
 8013840:	f383 8811 	msr	BASEPRI, r3
 8013844:	f3bf 8f6f 	isb	sy
 8013848:	f3bf 8f4f 	dsb	sy
 801384c:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801384e:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013850:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013854:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013858:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 801385a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801385c:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 801385e:	f103 0301 	add.w	r3, r3, #1
 8013862:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013864:	d00e      	beq.n	8013884 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 8013866:	f387 8811 	msr	BASEPRI, r7
	}
 801386a:	b003      	add	sp, #12
 801386c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 801386e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013872:	b672      	cpsid	i
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8013882:	e7fe      	b.n	8013882 <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013884:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013886:	b153      	cbz	r3, 801389e <vTaskNotifyGiveFromISR+0x76>
 8013888:	f04f 0330 	mov.w	r3, #48	; 0x30
 801388c:	b672      	cpsid	i
 801388e:	f383 8811 	msr	BASEPRI, r3
 8013892:	f3bf 8f6f 	isb	sy
 8013896:	f3bf 8f4f 	dsb	sy
 801389a:	b662      	cpsie	i
 801389c:	e7fe      	b.n	801389c <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801389e:	4b16      	ldr	r3, [pc, #88]	; (80138f8 <vTaskNotifyGiveFromISR+0xd0>)
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	bb13      	cbnz	r3, 80138ea <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80138a4:	1d21      	adds	r1, r4, #4
 80138a6:	4608      	mov	r0, r1
 80138a8:	9101      	str	r1, [sp, #4]
 80138aa:	f7fe fbd1 	bl	8012050 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80138ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80138b0:	4a12      	ldr	r2, [pc, #72]	; (80138fc <vTaskNotifyGiveFromISR+0xd4>)
 80138b2:	fa05 f300 	lsl.w	r3, r5, r0
 80138b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80138ba:	f8d2 c000 	ldr.w	ip, [r2]
 80138be:	4d10      	ldr	r5, [pc, #64]	; (8013900 <vTaskNotifyGiveFromISR+0xd8>)
 80138c0:	ea43 030c 	orr.w	r3, r3, ip
 80138c4:	9901      	ldr	r1, [sp, #4]
 80138c6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80138ca:	6013      	str	r3, [r2, #0]
 80138cc:	f7fe fb98 	bl	8012000 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80138d0:	4b0c      	ldr	r3, [pc, #48]	; (8013904 <vTaskNotifyGiveFromISR+0xdc>)
 80138d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138d8:	429a      	cmp	r2, r3
 80138da:	d9c4      	bls.n	8013866 <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 80138dc:	b10e      	cbz	r6, 80138e2 <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80138de:	2301      	movs	r3, #1
 80138e0:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 80138e2:	4b09      	ldr	r3, [pc, #36]	; (8013908 <vTaskNotifyGiveFromISR+0xe0>)
 80138e4:	2201      	movs	r2, #1
 80138e6:	601a      	str	r2, [r3, #0]
 80138e8:	e7bd      	b.n	8013866 <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80138ea:	f104 0118 	add.w	r1, r4, #24
 80138ee:	4807      	ldr	r0, [pc, #28]	; (801390c <vTaskNotifyGiveFromISR+0xe4>)
 80138f0:	f7fe fb86 	bl	8012000 <vListInsertEnd>
 80138f4:	e7ec      	b.n	80138d0 <vTaskNotifyGiveFromISR+0xa8>
 80138f6:	bf00      	nop
 80138f8:	20001d70 	.word	0x20001d70
 80138fc:	20001d78 	.word	0x20001d78
 8013900:	20001cd8 	.word	0x20001cd8
 8013904:	20001ccc 	.word	0x20001ccc
 8013908:	20001df0 	.word	0x20001df0
 801390c:	20001dac 	.word	0x20001dac

08013910 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013910:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8013912:	4c12      	ldr	r4, [pc, #72]	; (801395c <prvCheckForValidListAndQueue+0x4c>)
{
 8013914:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8013916:	f000 faf5 	bl	8013f04 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801391a:	6825      	ldr	r5, [r4, #0]
 801391c:	b125      	cbz	r5, 8013928 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 801391e:	b003      	add	sp, #12
 8013920:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8013924:	f000 bb14 	b.w	8013f50 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8013928:	4f0d      	ldr	r7, [pc, #52]	; (8013960 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801392a:	4e0e      	ldr	r6, [pc, #56]	; (8013964 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 801392c:	4638      	mov	r0, r7
 801392e:	f7fe fb57 	bl	8011fe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013932:	4630      	mov	r0, r6
 8013934:	f7fe fb54 	bl	8011fe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013938:	4b0b      	ldr	r3, [pc, #44]	; (8013968 <prvCheckForValidListAndQueue+0x58>)
			pxOverflowTimerList = &xActiveTimerList2;
 801393a:	4a0c      	ldr	r2, [pc, #48]	; (801396c <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801393c:	2110      	movs	r1, #16
 801393e:	9500      	str	r5, [sp, #0]
 8013940:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8013942:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013944:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013946:	4b0a      	ldr	r3, [pc, #40]	; (8013970 <prvCheckForValidListAndQueue+0x60>)
 8013948:	4a0a      	ldr	r2, [pc, #40]	; (8013974 <prvCheckForValidListAndQueue+0x64>)
 801394a:	f7fe fc9f 	bl	801228c <xQueueGenericCreateStatic>
 801394e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8013950:	2800      	cmp	r0, #0
 8013952:	d0e4      	beq.n	801391e <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013954:	4908      	ldr	r1, [pc, #32]	; (8013978 <prvCheckForValidListAndQueue+0x68>)
 8013956:	f7ff f8bf 	bl	8012ad8 <vQueueAddToRegistry>
 801395a:	e7e0      	b.n	801391e <prvCheckForValidListAndQueue+0xe>
 801395c:	20001f10 	.word	0x20001f10
 8013960:	20001e9c 	.word	0x20001e9c
 8013964:	20001eb0 	.word	0x20001eb0
 8013968:	20001df4 	.word	0x20001df4
 801396c:	20001df8 	.word	0x20001df8
 8013970:	20001ec8 	.word	0x20001ec8
 8013974:	20001dfc 	.word	0x20001dfc
 8013978:	0802801c 	.word	0x0802801c

0801397c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 801397c:	4291      	cmp	r1, r2
{
 801397e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013980:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013982:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8013984:	d805      	bhi.n	8013992 <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013986:	1ad2      	subs	r2, r2, r3
 8013988:	6983      	ldr	r3, [r0, #24]
 801398a:	429a      	cmp	r2, r3
 801398c:	d30c      	bcc.n	80139a8 <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 801398e:	2001      	movs	r0, #1
}
 8013990:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013992:	429a      	cmp	r2, r3
 8013994:	d201      	bcs.n	801399a <prvInsertTimerInActiveList+0x1e>
 8013996:	4299      	cmp	r1, r3
 8013998:	d2f9      	bcs.n	801398e <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801399a:	4b07      	ldr	r3, [pc, #28]	; (80139b8 <prvInsertTimerInActiveList+0x3c>)
 801399c:	1d01      	adds	r1, r0, #4
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	f7fe fb3e 	bl	8012020 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80139a4:	2000      	movs	r0, #0
}
 80139a6:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80139a8:	4b04      	ldr	r3, [pc, #16]	; (80139bc <prvInsertTimerInActiveList+0x40>)
 80139aa:	1d01      	adds	r1, r0, #4
 80139ac:	6818      	ldr	r0, [r3, #0]
 80139ae:	f7fe fb37 	bl	8012020 <vListInsert>
 80139b2:	2000      	movs	r0, #0
}
 80139b4:	bd08      	pop	{r3, pc}
 80139b6:	bf00      	nop
 80139b8:	20001df4 	.word	0x20001df4
 80139bc:	20001df8 	.word	0x20001df8

080139c0 <prvInitialiseNewTimer>:
{
 80139c0:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80139c4:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80139c6:	b951      	cbnz	r1, 80139de <prvInitialiseNewTimer+0x1e>
 80139c8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80139cc:	b672      	cpsid	i
 80139ce:	f383 8811 	msr	BASEPRI, r3
 80139d2:	f3bf 8f6f 	isb	sy
 80139d6:	f3bf 8f4f 	dsb	sy
 80139da:	b662      	cpsie	i
 80139dc:	e7fe      	b.n	80139dc <prvInitialiseNewTimer+0x1c>
	if( pxNewTimer != NULL )
 80139de:	b1ac      	cbz	r4, 8013a0c <prvInitialiseNewTimer+0x4c>
 80139e0:	4681      	mov	r9, r0
 80139e2:	461f      	mov	r7, r3
 80139e4:	460d      	mov	r5, r1
 80139e6:	4616      	mov	r6, r2
		prvCheckForValidListAndQueue();
 80139e8:	f7ff ff92 	bl	8013910 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80139ec:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80139ee:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80139f0:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80139f4:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80139f6:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80139f8:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80139fa:	f7fe fafd 	bl	8011ff8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80139fe:	b12e      	cbz	r6, 8013a0c <prvInitialiseNewTimer+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013a00:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013a04:	f043 0304 	orr.w	r3, r3, #4
 8013a08:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8013a0c:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08013a10 <xTimerCreateTimerTask>:
{
 8013a10:	b510      	push	{r4, lr}
 8013a12:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8013a14:	f7ff ff7c 	bl	8013910 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8013a18:	4b13      	ldr	r3, [pc, #76]	; (8013a68 <xTimerCreateTimerTask+0x58>)
 8013a1a:	681b      	ldr	r3, [r3, #0]
 8013a1c:	b1cb      	cbz	r3, 8013a52 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013a1e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013a20:	aa07      	add	r2, sp, #28
 8013a22:	a906      	add	r1, sp, #24
 8013a24:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013a26:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013a2a:	f7ed f8d9 	bl	8000be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013a2e:	9805      	ldr	r0, [sp, #20]
 8013a30:	9906      	ldr	r1, [sp, #24]
 8013a32:	2202      	movs	r2, #2
 8013a34:	4623      	mov	r3, r4
 8013a36:	9200      	str	r2, [sp, #0]
 8013a38:	9a07      	ldr	r2, [sp, #28]
 8013a3a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8013a3e:	490b      	ldr	r1, [pc, #44]	; (8013a6c <xTimerCreateTimerTask+0x5c>)
 8013a40:	480b      	ldr	r0, [pc, #44]	; (8013a70 <xTimerCreateTimerTask+0x60>)
 8013a42:	f7ff fa13 	bl	8012e6c <xTaskCreateStatic>
 8013a46:	4b0b      	ldr	r3, [pc, #44]	; (8013a74 <xTimerCreateTimerTask+0x64>)
 8013a48:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8013a4a:	b110      	cbz	r0, 8013a52 <xTimerCreateTimerTask+0x42>
}
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	b008      	add	sp, #32
 8013a50:	bd10      	pop	{r4, pc}
 8013a52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013a56:	b672      	cpsid	i
 8013a58:	f383 8811 	msr	BASEPRI, r3
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	b662      	cpsie	i
	configASSERT( xReturn );
 8013a66:	e7fe      	b.n	8013a66 <xTimerCreateTimerTask+0x56>
 8013a68:	20001f10 	.word	0x20001f10
 8013a6c:	08028024 	.word	0x08028024
 8013a70:	08013c01 	.word	0x08013c01
 8013a74:	20001f14 	.word	0x20001f14

08013a78 <xTimerCreate>:
	{
 8013a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	b082      	sub	sp, #8
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013a80:	2028      	movs	r0, #40	; 0x28
	{
 8013a82:	460e      	mov	r6, r1
 8013a84:	4617      	mov	r7, r2
 8013a86:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8013a88:	f000 fbaa 	bl	80141e0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8013a8c:	4604      	mov	r4, r0
 8013a8e:	b160      	cbz	r0, 8013aaa <xTimerCreate+0x32>
			pxNewTimer->ucStatus = 0x00;
 8013a90:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013a94:	4628      	mov	r0, r5
 8013a96:	9d08      	ldr	r5, [sp, #32]
 8013a98:	4643      	mov	r3, r8
			pxNewTimer->ucStatus = 0x00;
 8013a9a:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013a9e:	463a      	mov	r2, r7
 8013aa0:	4631      	mov	r1, r6
 8013aa2:	9401      	str	r4, [sp, #4]
 8013aa4:	9500      	str	r5, [sp, #0]
 8013aa6:	f7ff ff8b 	bl	80139c0 <prvInitialiseNewTimer>
	}
 8013aaa:	4620      	mov	r0, r4
 8013aac:	b002      	add	sp, #8
 8013aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab2:	bf00      	nop

08013ab4 <xTimerCreateStatic>:
	{
 8013ab4:	b570      	push	{r4, r5, r6, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8013ab6:	2528      	movs	r5, #40	; 0x28
	{
 8013ab8:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticTimer_t );
 8013aba:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013abc:	9d03      	ldr	r5, [sp, #12]
 8013abe:	2d28      	cmp	r5, #40	; 0x28
	{
 8013ac0:	e9dd 6408 	ldrd	r6, r4, [sp, #32]
			configASSERT( xSize == sizeof( Timer_t ) );
 8013ac4:	d00a      	beq.n	8013adc <xTimerCreateStatic+0x28>
 8013ac6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013aca:	b672      	cpsid	i
 8013acc:	f383 8811 	msr	BASEPRI, r3
 8013ad0:	f3bf 8f6f 	isb	sy
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	b662      	cpsie	i
 8013ada:	e7fe      	b.n	8013ada <xTimerCreateStatic+0x26>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013adc:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 8013ade:	b14c      	cbz	r4, 8013af4 <xTimerCreateStatic+0x40>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013ae0:	2502      	movs	r5, #2
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013ae2:	e9cd 6400 	strd	r6, r4, [sp]
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8013ae6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013aea:	f7ff ff69 	bl	80139c0 <prvInitialiseNewTimer>
	}
 8013aee:	4620      	mov	r0, r4
 8013af0:	b004      	add	sp, #16
 8013af2:	bd70      	pop	{r4, r5, r6, pc}
 8013af4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013af8:	b672      	cpsid	i
 8013afa:	f383 8811 	msr	BASEPRI, r3
 8013afe:	f3bf 8f6f 	isb	sy
 8013b02:	f3bf 8f4f 	dsb	sy
 8013b06:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8013b08:	e7fe      	b.n	8013b08 <xTimerCreateStatic+0x54>
 8013b0a:	bf00      	nop

08013b0c <xTimerGenericCommand>:
	configASSERT( xTimer );
 8013b0c:	b1b0      	cbz	r0, 8013b3c <xTimerGenericCommand+0x30>
{
 8013b0e:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8013b10:	4d17      	ldr	r5, [pc, #92]	; (8013b70 <xTimerGenericCommand+0x64>)
 8013b12:	4604      	mov	r4, r0
{
 8013b14:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 8013b16:	6828      	ldr	r0, [r5, #0]
 8013b18:	b170      	cbz	r0, 8013b38 <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013b1a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013b1c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013b1e:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013b22:	dc16      	bgt.n	8013b52 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013b24:	f7ff fd0c 	bl	8013540 <xTaskGetSchedulerState>
 8013b28:	2802      	cmp	r0, #2
 8013b2a:	d019      	beq.n	8013b60 <xTimerGenericCommand+0x54>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	6828      	ldr	r0, [r5, #0]
 8013b30:	4669      	mov	r1, sp
 8013b32:	461a      	mov	r2, r3
 8013b34:	f7fe fc0e 	bl	8012354 <xQueueGenericSend>
}
 8013b38:	b004      	add	sp, #16
 8013b3a:	bd70      	pop	{r4, r5, r6, pc}
 8013b3c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b40:	b672      	cpsid	i
 8013b42:	f383 8811 	msr	BASEPRI, r3
 8013b46:	f3bf 8f6f 	isb	sy
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	b662      	cpsie	i
	configASSERT( xTimer );
 8013b50:	e7fe      	b.n	8013b50 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013b52:	461a      	mov	r2, r3
 8013b54:	4669      	mov	r1, sp
 8013b56:	2300      	movs	r3, #0
 8013b58:	f7fe fcf6 	bl	8012548 <xQueueGenericSendFromISR>
}
 8013b5c:	b004      	add	sp, #16
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013b60:	6828      	ldr	r0, [r5, #0]
 8013b62:	2300      	movs	r3, #0
 8013b64:	9a08      	ldr	r2, [sp, #32]
 8013b66:	4669      	mov	r1, sp
 8013b68:	f7fe fbf4 	bl	8012354 <xQueueGenericSend>
 8013b6c:	e7e4      	b.n	8013b38 <xTimerGenericCommand+0x2c>
 8013b6e:	bf00      	nop
 8013b70:	20001f10 	.word	0x20001f10

08013b74 <prvSwitchTimerLists>:
{
 8013b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b78:	4e1f      	ldr	r6, [pc, #124]	; (8013bf8 <prvSwitchTimerLists+0x84>)
 8013b7a:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013b7c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b80:	e00d      	b.n	8013b9e <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b82:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b84:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b86:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b88:	1d25      	adds	r5, r4, #4
 8013b8a:	4628      	mov	r0, r5
 8013b8c:	f7fe fa60 	bl	8012050 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b90:	6a23      	ldr	r3, [r4, #32]
 8013b92:	4620      	mov	r0, r4
 8013b94:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b96:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8013b9a:	075b      	lsls	r3, r3, #29
 8013b9c:	d40a      	bmi.n	8013bb4 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b9e:	6833      	ldr	r3, [r6, #0]
 8013ba0:	681a      	ldr	r2, [r3, #0]
 8013ba2:	2a00      	cmp	r2, #0
 8013ba4:	d1ed      	bne.n	8013b82 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8013ba6:	4a15      	ldr	r2, [pc, #84]	; (8013bfc <prvSwitchTimerLists+0x88>)
 8013ba8:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013baa:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8013bac:	6031      	str	r1, [r6, #0]
}
 8013bae:	b002      	add	sp, #8
 8013bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013bb4:	69a1      	ldr	r1, [r4, #24]
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	463a      	mov	r2, r7
 8013bba:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013bbc:	eb07 0c01 	add.w	ip, r7, r1
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bc0:	4619      	mov	r1, r3
			if( xReloadTime > xNextExpireTime )
 8013bc2:	4567      	cmp	r7, ip
 8013bc4:	d207      	bcs.n	8013bd6 <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bc6:	6830      	ldr	r0, [r6, #0]
 8013bc8:	4629      	mov	r1, r5
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013bca:	f8c4 c004 	str.w	ip, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013bce:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bd0:	f7fe fa26 	bl	8012020 <vListInsert>
 8013bd4:	e7e3      	b.n	8013b9e <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bd6:	f8cd 8000 	str.w	r8, [sp]
 8013bda:	f7ff ff97 	bl	8013b0c <xTimerGenericCommand>
				configASSERT( xResult );
 8013bde:	2800      	cmp	r0, #0
 8013be0:	d1dd      	bne.n	8013b9e <prvSwitchTimerLists+0x2a>
 8013be2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013be6:	b672      	cpsid	i
 8013be8:	f383 8811 	msr	BASEPRI, r3
 8013bec:	f3bf 8f6f 	isb	sy
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	b662      	cpsie	i
 8013bf6:	e7fe      	b.n	8013bf6 <prvSwitchTimerLists+0x82>
 8013bf8:	20001df4 	.word	0x20001df4
 8013bfc:	20001df8 	.word	0x20001df8

08013c00 <prvTimerTask>:
{
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8013e20 <prvTimerTask+0x220>
 8013c08:	b087      	sub	sp, #28
 8013c0a:	4e82      	ldr	r6, [pc, #520]	; (8013e14 <prvTimerTask+0x214>)
 8013c0c:	f04f 0900 	mov.w	r9, #0
 8013c10:	4c81      	ldr	r4, [pc, #516]	; (8013e18 <prvTimerTask+0x218>)
 8013c12:	f8df a210 	ldr.w	sl, [pc, #528]	; 8013e24 <prvTimerTask+0x224>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013c16:	f8d8 3000 	ldr.w	r3, [r8]
 8013c1a:	681d      	ldr	r5, [r3, #0]
 8013c1c:	2d00      	cmp	r5, #0
 8013c1e:	f000 809b 	beq.w	8013d58 <prvTimerTask+0x158>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013c22:	68db      	ldr	r3, [r3, #12]
 8013c24:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 8013c26:	f7ff f9db 	bl	8012fe0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8013c2a:	f7ff f9e1 	bl	8012ff0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013c2e:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8013c30:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8013c32:	4298      	cmp	r0, r3
 8013c34:	f0c0 8098 	bcc.w	8013d68 <prvTimerTask+0x168>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c38:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 8013c3a:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c3c:	f200 80b9 	bhi.w	8013db2 <prvTimerTask+0x1b2>
				( void ) xTaskResumeAll();
 8013c40:	f7ff fa96 	bl	8013170 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c44:	f8d8 3000 	ldr.w	r3, [r8]
 8013c48:	68db      	ldr	r3, [r3, #12]
 8013c4a:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c4c:	1d38      	adds	r0, r7, #4
 8013c4e:	f7fe f9ff 	bl	8012050 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013c52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013c56:	0758      	lsls	r0, r3, #29
 8013c58:	f100 80ad 	bmi.w	8013db6 <prvTimerTask+0x1b6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013c5c:	f023 0301 	bic.w	r3, r3, #1
 8013c60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013c64:	6a3b      	ldr	r3, [r7, #32]
 8013c66:	4638      	mov	r0, r7
 8013c68:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	a902      	add	r1, sp, #8
 8013c6e:	6820      	ldr	r0, [r4, #0]
 8013c70:	f7fe fd3a 	bl	80126e8 <xQueueReceive>
 8013c74:	2800      	cmp	r0, #0
 8013c76:	d0ce      	beq.n	8013c16 <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013c78:	9b02      	ldr	r3, [sp, #8]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	db64      	blt.n	8013d48 <prvTimerTask+0x148>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013c7e:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013c80:	696b      	ldr	r3, [r5, #20]
 8013c82:	b113      	cbz	r3, 8013c8a <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013c84:	1d28      	adds	r0, r5, #4
 8013c86:	f7fe f9e3 	bl	8012050 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8013c8a:	f7ff f9b1 	bl	8012ff0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013c8e:	6831      	ldr	r1, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8013c90:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 8013c92:	4288      	cmp	r0, r1
 8013c94:	d36f      	bcc.n	8013d76 <prvTimerTask+0x176>
	xLastTime = xTimeNow;
 8013c96:	9b02      	ldr	r3, [sp, #8]
 8013c98:	6037      	str	r7, [r6, #0]
			switch( xMessage.xMessageID )
 8013c9a:	2b09      	cmp	r3, #9
 8013c9c:	d8e5      	bhi.n	8013c6a <prvTimerTask+0x6a>
 8013c9e:	e8df f003 	tbb	[pc, r3]
 8013ca2:	0505      	.short	0x0505
 8013ca4:	4a324305 	.word	0x4a324305
 8013ca8:	32430505 	.word	0x32430505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cac:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cb0:	463a      	mov	r2, r7
 8013cb2:	9b03      	ldr	r3, [sp, #12]
 8013cb4:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cb6:	f041 0101 	orr.w	r1, r1, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cba:	69af      	ldr	r7, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013cbc:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013cc0:	19d9      	adds	r1, r3, r7
 8013cc2:	f7ff fe5b 	bl	801397c <prvInsertTimerInActiveList>
 8013cc6:	2800      	cmp	r0, #0
 8013cc8:	d0cf      	beq.n	8013c6a <prvTimerTask+0x6a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013cca:	6a2b      	ldr	r3, [r5, #32]
 8013ccc:	4628      	mov	r0, r5
 8013cce:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013cd0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013cd4:	0759      	lsls	r1, r3, #29
 8013cd6:	d5c8      	bpl.n	8013c6a <prvTimerTask+0x6a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013cd8:	69aa      	ldr	r2, [r5, #24]
 8013cda:	2300      	movs	r3, #0
 8013cdc:	9f03      	ldr	r7, [sp, #12]
 8013cde:	4628      	mov	r0, r5
 8013ce0:	4619      	mov	r1, r3
 8013ce2:	f8cd 9000 	str.w	r9, [sp]
 8013ce6:	443a      	add	r2, r7
 8013ce8:	f7ff ff10 	bl	8013b0c <xTimerGenericCommand>
							configASSERT( xResult );
 8013cec:	2800      	cmp	r0, #0
 8013cee:	d1bc      	bne.n	8013c6a <prvTimerTask+0x6a>
 8013cf0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013cf4:	b672      	cpsid	i
 8013cf6:	f383 8811 	msr	BASEPRI, r3
 8013cfa:	f3bf 8f6f 	isb	sy
 8013cfe:	f3bf 8f4f 	dsb	sy
 8013d02:	b662      	cpsie	i
 8013d04:	e7fe      	b.n	8013d04 <prvTimerTask+0x104>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d06:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013d0a:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d0c:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013d10:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013d12:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013d16:	2900      	cmp	r1, #0
 8013d18:	d071      	beq.n	8013dfe <prvTimerTask+0x1fe>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013d1a:	4439      	add	r1, r7
 8013d1c:	4628      	mov	r0, r5
 8013d1e:	463b      	mov	r3, r7
 8013d20:	463a      	mov	r2, r7
 8013d22:	f7ff fe2b 	bl	801397c <prvInsertTimerInActiveList>
					break;
 8013d26:	e7a0      	b.n	8013c6a <prvTimerTask+0x6a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d28:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013d2c:	f023 0301 	bic.w	r3, r3, #1
 8013d30:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					break;
 8013d34:	e799      	b.n	8013c6a <prvTimerTask+0x6a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013d36:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8013d3a:	079a      	lsls	r2, r3, #30
 8013d3c:	d55b      	bpl.n	8013df6 <prvTimerTask+0x1f6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d3e:	f023 0301 	bic.w	r3, r3, #1
 8013d42:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8013d46:	e790      	b.n	8013c6a <prvTimerTask+0x6a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013d48:	9b03      	ldr	r3, [sp, #12]
 8013d4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013d4e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013d50:	9b02      	ldr	r3, [sp, #8]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	db89      	blt.n	8013c6a <prvTimerTask+0x6a>
 8013d56:	e792      	b.n	8013c7e <prvTimerTask+0x7e>
	vTaskSuspendAll();
 8013d58:	f7ff f942 	bl	8012fe0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8013d5c:	f7ff f948 	bl	8012ff0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8013d60:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8013d62:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8013d64:	4283      	cmp	r3, r0
 8013d66:	d909      	bls.n	8013d7c <prvTimerTask+0x17c>
		prvSwitchTimerLists();
 8013d68:	f7ff ff04 	bl	8013b74 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8013d6c:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 8013d70:	f7ff f9fe 	bl	8013170 <xTaskResumeAll>
 8013d74:	e779      	b.n	8013c6a <prvTimerTask+0x6a>
		prvSwitchTimerLists();
 8013d76:	f7ff fefd 	bl	8013b74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013d7a:	e78c      	b.n	8013c96 <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013d7c:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8013d80:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	fab2 f282 	clz	r2, r2
 8013d8a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013d8c:	eba5 010b 	sub.w	r1, r5, fp
 8013d90:	6820      	ldr	r0, [r4, #0]
 8013d92:	f7fe feb5 	bl	8012b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013d96:	f7ff f9eb 	bl	8013170 <xTaskResumeAll>
 8013d9a:	2800      	cmp	r0, #0
 8013d9c:	f47f af65 	bne.w	8013c6a <prvTimerTask+0x6a>
					portYIELD_WITHIN_API();
 8013da0:	4b1e      	ldr	r3, [pc, #120]	; (8013e1c <prvTimerTask+0x21c>)
 8013da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013da6:	601a      	str	r2, [r3, #0]
 8013da8:	f3bf 8f4f 	dsb	sy
 8013dac:	f3bf 8f6f 	isb	sy
 8013db0:	e75b      	b.n	8013c6a <prvTimerTask+0x6a>
 8013db2:	2200      	movs	r2, #0
 8013db4:	e7ea      	b.n	8013d8c <prvTimerTask+0x18c>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013db6:	69b9      	ldr	r1, [r7, #24]
 8013db8:	465a      	mov	r2, fp
 8013dba:	462b      	mov	r3, r5
 8013dbc:	4638      	mov	r0, r7
 8013dbe:	4429      	add	r1, r5
 8013dc0:	f7ff fddc 	bl	801397c <prvInsertTimerInActiveList>
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	f43f af4d 	beq.w	8013c64 <prvTimerTask+0x64>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013dca:	2300      	movs	r3, #0
 8013dcc:	462a      	mov	r2, r5
 8013dce:	4638      	mov	r0, r7
 8013dd0:	f8cd 9000 	str.w	r9, [sp]
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	f7ff fe99 	bl	8013b0c <xTimerGenericCommand>
			configASSERT( xResult );
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	f47f af42 	bne.w	8013c64 <prvTimerTask+0x64>
 8013de0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013de4:	b672      	cpsid	i
 8013de6:	f383 8811 	msr	BASEPRI, r3
 8013dea:	f3bf 8f6f 	isb	sy
 8013dee:	f3bf 8f4f 	dsb	sy
 8013df2:	b662      	cpsie	i
 8013df4:	e7fe      	b.n	8013df4 <prvTimerTask+0x1f4>
							vPortFree( pxTimer );
 8013df6:	4628      	mov	r0, r5
 8013df8:	f000 fa90 	bl	801431c <vPortFree>
 8013dfc:	e735      	b.n	8013c6a <prvTimerTask+0x6a>
 8013dfe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e02:	b672      	cpsid	i
 8013e04:	f383 8811 	msr	BASEPRI, r3
 8013e08:	f3bf 8f6f 	isb	sy
 8013e0c:	f3bf 8f4f 	dsb	sy
 8013e10:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013e12:	e7fe      	b.n	8013e12 <prvTimerTask+0x212>
 8013e14:	20001ec4 	.word	0x20001ec4
 8013e18:	20001f10 	.word	0x20001f10
 8013e1c:	e000ed04 	.word	0xe000ed04
 8013e20:	20001df4 	.word	0x20001df4
 8013e24:	20001df8 	.word	0x20001df8

08013e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013e28:	4808      	ldr	r0, [pc, #32]	; (8013e4c <prvPortStartFirstTask+0x24>)
 8013e2a:	6800      	ldr	r0, [r0, #0]
 8013e2c:	6800      	ldr	r0, [r0, #0]
 8013e2e:	f380 8808 	msr	MSP, r0
 8013e32:	f04f 0000 	mov.w	r0, #0
 8013e36:	f380 8814 	msr	CONTROL, r0
 8013e3a:	b662      	cpsie	i
 8013e3c:	b661      	cpsie	f
 8013e3e:	f3bf 8f4f 	dsb	sy
 8013e42:	f3bf 8f6f 	isb	sy
 8013e46:	df00      	svc	0
 8013e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8013e4a:	0000      	.short	0x0000
 8013e4c:	e000ed08 	.word	0xe000ed08

08013e50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013e50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013e60 <vPortEnableVFP+0x10>
 8013e54:	6801      	ldr	r1, [r0, #0]
 8013e56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013e5a:	6001      	str	r1, [r0, #0]
 8013e5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013e5e:	0000      	.short	0x0000
 8013e60:	e000ed88 	.word	0xe000ed88

08013e64 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8013e64:	4b10      	ldr	r3, [pc, #64]	; (8013ea8 <prvTaskExitError+0x44>)
{
 8013e66:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8013e68:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8013e6a:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8013e6c:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8013e6e:	3301      	adds	r3, #1
 8013e70:	d00a      	beq.n	8013e88 <prvTaskExitError+0x24>
 8013e72:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e76:	b672      	cpsid	i
 8013e78:	f383 8811 	msr	BASEPRI, r3
 8013e7c:	f3bf 8f6f 	isb	sy
 8013e80:	f3bf 8f4f 	dsb	sy
 8013e84:	b662      	cpsie	i
 8013e86:	e7fe      	b.n	8013e86 <prvTaskExitError+0x22>
 8013e88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e8c:	b672      	cpsid	i
 8013e8e:	f383 8811 	msr	BASEPRI, r3
 8013e92:	f3bf 8f6f 	isb	sy
 8013e96:	f3bf 8f4f 	dsb	sy
 8013e9a:	b662      	cpsie	i
	while( ulDummy == 0 )
 8013e9c:	9b01      	ldr	r3, [sp, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d0fc      	beq.n	8013e9c <prvTaskExitError+0x38>
}
 8013ea2:	b002      	add	sp, #8
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop
 8013ea8:	200003dc 	.word	0x200003dc

08013eac <pxPortInitialiseStack>:
{
 8013eac:	b470      	push	{r4, r5, r6}
 8013eae:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013eb0:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013eb4:	4d08      	ldr	r5, [pc, #32]	; (8013ed8 <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013eb6:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013eba:	f021 0101 	bic.w	r1, r1, #1
}
 8013ebe:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013ec0:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013ec2:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013ec6:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013eca:	f843 4c24 	str.w	r4, [r3, #-36]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013ece:	f843 2c20 	str.w	r2, [r3, #-32]
}
 8013ed2:	bc70      	pop	{r4, r5, r6}
 8013ed4:	4770      	bx	lr
 8013ed6:	bf00      	nop
 8013ed8:	08013e65 	.word	0x08013e65
 8013edc:	00000000 	.word	0x00000000

08013ee0 <SVC_Handler>:
	__asm volatile (
 8013ee0:	4b07      	ldr	r3, [pc, #28]	; (8013f00 <pxCurrentTCBConst2>)
 8013ee2:	6819      	ldr	r1, [r3, #0]
 8013ee4:	6808      	ldr	r0, [r1, #0]
 8013ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eea:	f380 8809 	msr	PSP, r0
 8013eee:	f3bf 8f6f 	isb	sy
 8013ef2:	f04f 0000 	mov.w	r0, #0
 8013ef6:	f380 8811 	msr	BASEPRI, r0
 8013efa:	4770      	bx	lr
 8013efc:	f3af 8000 	nop.w

08013f00 <pxCurrentTCBConst2>:
 8013f00:	20001ccc 	.word	0x20001ccc

08013f04 <vPortEnterCritical>:
 8013f04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f08:	b672      	cpsid	i
 8013f0a:	f383 8811 	msr	BASEPRI, r3
 8013f0e:	f3bf 8f6f 	isb	sy
 8013f12:	f3bf 8f4f 	dsb	sy
 8013f16:	b662      	cpsie	i
	uxCriticalNesting++;
 8013f18:	4a0b      	ldr	r2, [pc, #44]	; (8013f48 <vPortEnterCritical+0x44>)
 8013f1a:	6813      	ldr	r3, [r2, #0]
 8013f1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8013f1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8013f20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8013f22:	d000      	beq.n	8013f26 <vPortEnterCritical+0x22>
}
 8013f24:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013f26:	4b09      	ldr	r3, [pc, #36]	; (8013f4c <vPortEnterCritical+0x48>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f2e:	d0f9      	beq.n	8013f24 <vPortEnterCritical+0x20>
 8013f30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f34:	b672      	cpsid	i
 8013f36:	f383 8811 	msr	BASEPRI, r3
 8013f3a:	f3bf 8f6f 	isb	sy
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	b662      	cpsie	i
 8013f44:	e7fe      	b.n	8013f44 <vPortEnterCritical+0x40>
 8013f46:	bf00      	nop
 8013f48:	200003dc 	.word	0x200003dc
 8013f4c:	e000ed04 	.word	0xe000ed04

08013f50 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8013f50:	4a09      	ldr	r2, [pc, #36]	; (8013f78 <vPortExitCritical+0x28>)
 8013f52:	6813      	ldr	r3, [r2, #0]
 8013f54:	b953      	cbnz	r3, 8013f6c <vPortExitCritical+0x1c>
 8013f56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f5a:	b672      	cpsid	i
 8013f5c:	f383 8811 	msr	BASEPRI, r3
 8013f60:	f3bf 8f6f 	isb	sy
 8013f64:	f3bf 8f4f 	dsb	sy
 8013f68:	b662      	cpsie	i
 8013f6a:	e7fe      	b.n	8013f6a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8013f6c:	3b01      	subs	r3, #1
 8013f6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013f70:	b90b      	cbnz	r3, 8013f76 <vPortExitCritical+0x26>
	__asm volatile
 8013f72:	f383 8811 	msr	BASEPRI, r3
}
 8013f76:	4770      	bx	lr
 8013f78:	200003dc 	.word	0x200003dc
 8013f7c:	00000000 	.word	0x00000000

08013f80 <PendSV_Handler>:
	__asm volatile
 8013f80:	f3ef 8009 	mrs	r0, PSP
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	4b15      	ldr	r3, [pc, #84]	; (8013fe0 <pxCurrentTCBConst>)
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	f01e 0f10 	tst.w	lr, #16
 8013f90:	bf08      	it	eq
 8013f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	6010      	str	r0, [r2, #0]
 8013f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013fa0:	f04f 0030 	mov.w	r0, #48	; 0x30
 8013fa4:	b672      	cpsid	i
 8013fa6:	f380 8811 	msr	BASEPRI, r0
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	f3bf 8f6f 	isb	sy
 8013fb2:	b662      	cpsie	i
 8013fb4:	f7ff f990 	bl	80132d8 <vTaskSwitchContext>
 8013fb8:	f04f 0000 	mov.w	r0, #0
 8013fbc:	f380 8811 	msr	BASEPRI, r0
 8013fc0:	bc09      	pop	{r0, r3}
 8013fc2:	6819      	ldr	r1, [r3, #0]
 8013fc4:	6808      	ldr	r0, [r1, #0]
 8013fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fca:	f01e 0f10 	tst.w	lr, #16
 8013fce:	bf08      	it	eq
 8013fd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013fd4:	f380 8809 	msr	PSP, r0
 8013fd8:	f3bf 8f6f 	isb	sy
 8013fdc:	4770      	bx	lr
 8013fde:	bf00      	nop

08013fe0 <pxCurrentTCBConst>:
 8013fe0:	20001ccc 	.word	0x20001ccc

08013fe4 <SysTick_Handler>:
{
 8013fe4:	b508      	push	{r3, lr}
	__asm volatile
 8013fe6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013fea:	b672      	cpsid	i
 8013fec:	f383 8811 	msr	BASEPRI, r3
 8013ff0:	f3bf 8f6f 	isb	sy
 8013ff4:	f3bf 8f4f 	dsb	sy
 8013ff8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8013ffa:	f7ff f807 	bl	801300c <xTaskIncrementTick>
 8013ffe:	b118      	cbz	r0, 8014008 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014000:	4b03      	ldr	r3, [pc, #12]	; (8014010 <SysTick_Handler+0x2c>)
 8014002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014006:	601a      	str	r2, [r3, #0]
	__asm volatile
 8014008:	2300      	movs	r3, #0
 801400a:	f383 8811 	msr	BASEPRI, r3
}
 801400e:	bd08      	pop	{r3, pc}
 8014010:	e000ed04 	.word	0xe000ed04

08014014 <vPortSetupTimerInterrupt>:
{
 8014014:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014016:	2300      	movs	r3, #0
 8014018:	4a08      	ldr	r2, [pc, #32]	; (801403c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801401a:	4c09      	ldr	r4, [pc, #36]	; (8014040 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801401c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801401e:	4809      	ldr	r0, [pc, #36]	; (8014044 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014022:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014024:	4c08      	ldr	r4, [pc, #32]	; (8014048 <vPortSetupTimerInterrupt+0x34>)
 8014026:	6803      	ldr	r3, [r0, #0]
 8014028:	4808      	ldr	r0, [pc, #32]	; (801404c <vPortSetupTimerInterrupt+0x38>)
 801402a:	fba4 4303 	umull	r4, r3, r4, r3
}
 801402e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014032:	099b      	lsrs	r3, r3, #6
 8014034:	3b01      	subs	r3, #1
 8014036:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014038:	6011      	str	r1, [r2, #0]
}
 801403a:	4770      	bx	lr
 801403c:	e000e010 	.word	0xe000e010
 8014040:	e000e018 	.word	0xe000e018
 8014044:	20000250 	.word	0x20000250
 8014048:	10624dd3 	.word	0x10624dd3
 801404c:	e000e014 	.word	0xe000e014

08014050 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014050:	4b2c      	ldr	r3, [pc, #176]	; (8014104 <xPortStartScheduler+0xb4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014052:	482d      	ldr	r0, [pc, #180]	; (8014108 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014054:	492d      	ldr	r1, [pc, #180]	; (801410c <xPortStartScheduler+0xbc>)
{
 8014056:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014058:	781a      	ldrb	r2, [r3, #0]
{
 801405a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801405c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801405e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014060:	b2d2      	uxtb	r2, r2
 8014062:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014064:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014066:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014068:	600c      	str	r4, [r1, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801406a:	b2db      	uxtb	r3, r3
 801406c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014070:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014074:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014078:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801407c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801407e:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014080:	d50f      	bpl.n	80140a2 <xPortStartScheduler+0x52>
 8014082:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014084:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014088:	4610      	mov	r0, r2
 801408a:	3a01      	subs	r2, #1
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	b2db      	uxtb	r3, r3
 8014090:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014094:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8014098:	061b      	lsls	r3, r3, #24
 801409a:	d4f3      	bmi.n	8014084 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801409c:	2803      	cmp	r0, #3
 801409e:	d00b      	beq.n	80140b8 <xPortStartScheduler+0x68>
 80140a0:	6008      	str	r0, [r1, #0]
	__asm volatile
 80140a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80140a6:	b672      	cpsid	i
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	b662      	cpsie	i
 80140b6:	e7fe      	b.n	80140b6 <xPortStartScheduler+0x66>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140b8:	9a01      	ldr	r2, [sp, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80140ba:	f44f 7540 	mov.w	r5, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140be:	4811      	ldr	r0, [pc, #68]	; (8014104 <xPortStartScheduler+0xb4>)
	uxCriticalNesting = 0;
 80140c0:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80140c2:	4b13      	ldr	r3, [pc, #76]	; (8014110 <xPortStartScheduler+0xc0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140c4:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80140c6:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80140c8:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80140ca:	681a      	ldr	r2, [r3, #0]
 80140cc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80140d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80140d8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80140da:	f7ff ff9b 	bl	8014014 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80140de:	4b0d      	ldr	r3, [pc, #52]	; (8014114 <xPortStartScheduler+0xc4>)
 80140e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80140e2:	f7ff feb5 	bl	8013e50 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80140e6:	4a0c      	ldr	r2, [pc, #48]	; (8014118 <xPortStartScheduler+0xc8>)
 80140e8:	6813      	ldr	r3, [r2, #0]
 80140ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80140ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80140f0:	f7ff fe9a 	bl	8013e28 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80140f4:	f7ff f8f0 	bl	80132d8 <vTaskSwitchContext>
	prvTaskExitError();
 80140f8:	f7ff feb4 	bl	8013e64 <prvTaskExitError>
}
 80140fc:	4620      	mov	r0, r4
 80140fe:	b003      	add	sp, #12
 8014100:	bd30      	pop	{r4, r5, pc}
 8014102:	bf00      	nop
 8014104:	e000e400 	.word	0xe000e400
 8014108:	20001f18 	.word	0x20001f18
 801410c:	20001f1c 	.word	0x20001f1c
 8014110:	e000ed20 	.word	0xe000ed20
 8014114:	200003dc 	.word	0x200003dc
 8014118:	e000ef34 	.word	0xe000ef34

0801411c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801411c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014120:	2b0f      	cmp	r3, #15
 8014122:	d910      	bls.n	8014146 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014124:	4912      	ldr	r1, [pc, #72]	; (8014170 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014126:	4a13      	ldr	r2, [pc, #76]	; (8014174 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014128:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801412a:	7812      	ldrb	r2, [r2, #0]
 801412c:	429a      	cmp	r2, r3
 801412e:	d90a      	bls.n	8014146 <vPortValidateInterruptPriority+0x2a>
 8014130:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014134:	b672      	cpsid	i
 8014136:	f383 8811 	msr	BASEPRI, r3
 801413a:	f3bf 8f6f 	isb	sy
 801413e:	f3bf 8f4f 	dsb	sy
 8014142:	b662      	cpsie	i
 8014144:	e7fe      	b.n	8014144 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014146:	4b0c      	ldr	r3, [pc, #48]	; (8014178 <vPortValidateInterruptPriority+0x5c>)
 8014148:	4a0c      	ldr	r2, [pc, #48]	; (801417c <vPortValidateInterruptPriority+0x60>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	6812      	ldr	r2, [r2, #0]
 801414e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014152:	4293      	cmp	r3, r2
 8014154:	d90a      	bls.n	801416c <vPortValidateInterruptPriority+0x50>
 8014156:	f04f 0330 	mov.w	r3, #48	; 0x30
 801415a:	b672      	cpsid	i
 801415c:	f383 8811 	msr	BASEPRI, r3
 8014160:	f3bf 8f6f 	isb	sy
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	b662      	cpsie	i
 801416a:	e7fe      	b.n	801416a <vPortValidateInterruptPriority+0x4e>
	}
 801416c:	4770      	bx	lr
 801416e:	bf00      	nop
 8014170:	e000e3f0 	.word	0xe000e3f0
 8014174:	20001f18 	.word	0x20001f18
 8014178:	e000ed0c 	.word	0xe000ed0c
 801417c:	20001f1c 	.word	0x20001f1c

08014180 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014180:	4b15      	ldr	r3, [pc, #84]	; (80141d8 <prvInsertBlockIntoFreeList+0x58>)
{
 8014182:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014184:	461a      	mov	r2, r3
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	4283      	cmp	r3, r0
 801418a:	d3fb      	bcc.n	8014184 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801418c:	6851      	ldr	r1, [r2, #4]
 801418e:	1854      	adds	r4, r2, r1
 8014190:	42a0      	cmp	r0, r4
 8014192:	d00a      	beq.n	80141aa <prvInsertBlockIntoFreeList+0x2a>
 8014194:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014196:	1844      	adds	r4, r0, r1
 8014198:	42a3      	cmp	r3, r4
 801419a:	d00d      	beq.n	80141b8 <prvInsertBlockIntoFreeList+0x38>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801419c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801419e:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141a0:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80141a4:	bf18      	it	ne
 80141a6:	6010      	strne	r0, [r2, #0]
}
 80141a8:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80141aa:	6844      	ldr	r4, [r0, #4]
 80141ac:	4610      	mov	r0, r2
 80141ae:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80141b0:	1844      	adds	r4, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80141b2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80141b4:	42a3      	cmp	r3, r4
 80141b6:	d1f1      	bne.n	801419c <prvInsertBlockIntoFreeList+0x1c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80141b8:	4c08      	ldr	r4, [pc, #32]	; (80141dc <prvInsertBlockIntoFreeList+0x5c>)
 80141ba:	6824      	ldr	r4, [r4, #0]
 80141bc:	42a3      	cmp	r3, r4
 80141be:	d0ed      	beq.n	801419c <prvInsertBlockIntoFreeList+0x1c>
	if( pxIterator != pxBlockToInsert )
 80141c0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80141c2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80141c6:	4421      	add	r1, r4
}
 80141c8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80141cc:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80141d0:	bf18      	it	ne
 80141d2:	6010      	strne	r0, [r2, #0]
}
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	20021f30 	.word	0x20021f30
 80141dc:	20001f20 	.word	0x20001f20

080141e0 <pvPortMalloc>:
{
 80141e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80141e6:	f7fe fefb 	bl	8012fe0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80141ea:	4946      	ldr	r1, [pc, #280]	; (8014304 <pvPortMalloc+0x124>)
 80141ec:	680b      	ldr	r3, [r1, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d040      	beq.n	8014274 <pvPortMalloc+0x94>
 80141f2:	4b45      	ldr	r3, [pc, #276]	; (8014308 <pvPortMalloc+0x128>)
 80141f4:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80141f6:	423c      	tst	r4, r7
 80141f8:	d134      	bne.n	8014264 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 80141fa:	2c00      	cmp	r4, #0
 80141fc:	d032      	beq.n	8014264 <pvPortMalloc+0x84>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80141fe:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8014200:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014204:	d002      	beq.n	801420c <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014206:	f023 0307 	bic.w	r3, r3, #7
 801420a:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801420c:	b353      	cbz	r3, 8014264 <pvPortMalloc+0x84>
 801420e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8014318 <pvPortMalloc+0x138>
 8014212:	f8d8 5000 	ldr.w	r5, [r8]
 8014216:	429d      	cmp	r5, r3
 8014218:	d324      	bcc.n	8014264 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 801421a:	483c      	ldr	r0, [pc, #240]	; (801430c <pvPortMalloc+0x12c>)
 801421c:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801421e:	e003      	b.n	8014228 <pvPortMalloc+0x48>
 8014220:	6826      	ldr	r6, [r4, #0]
 8014222:	b126      	cbz	r6, 801422e <pvPortMalloc+0x4e>
 8014224:	4620      	mov	r0, r4
 8014226:	4634      	mov	r4, r6
 8014228:	6862      	ldr	r2, [r4, #4]
 801422a:	429a      	cmp	r2, r3
 801422c:	d3f8      	bcc.n	8014220 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 801422e:	6809      	ldr	r1, [r1, #0]
 8014230:	42a1      	cmp	r1, r4
 8014232:	d017      	beq.n	8014264 <pvPortMalloc+0x84>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014234:	eba2 0c03 	sub.w	ip, r2, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014238:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801423a:	6821      	ldr	r1, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801423c:	f1bc 0f10 	cmp.w	ip, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014240:	f106 0608 	add.w	r6, r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014244:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014246:	d93b      	bls.n	80142c0 <pvPortMalloc+0xe0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014248:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801424a:	0742      	lsls	r2, r0, #29
 801424c:	d032      	beq.n	80142b4 <pvPortMalloc+0xd4>
 801424e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014252:	b672      	cpsid	i
 8014254:	f383 8811 	msr	BASEPRI, r3
 8014258:	f3bf 8f6f 	isb	sy
 801425c:	f3bf 8f4f 	dsb	sy
 8014260:	b662      	cpsie	i
 8014262:	e7fe      	b.n	8014262 <pvPortMalloc+0x82>
			vApplicationMallocFailedHook();
 8014264:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8014266:	f7fe ff83 	bl	8013170 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 801426a:	f7ec fca9 	bl	8000bc0 <vApplicationMallocFailedHook>
}
 801426e:	4630      	mov	r0, r6
 8014270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8014274:	4b26      	ldr	r3, [pc, #152]	; (8014310 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014276:	075d      	lsls	r5, r3, #29
 8014278:	d13d      	bne.n	80142f6 <pvPortMalloc+0x116>
 801427a:	461a      	mov	r2, r3
 801427c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8014280:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8014282:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014284:	4f23      	ldr	r7, [pc, #140]	; (8014314 <pvPortMalloc+0x134>)
	xStart.xBlockSize = ( size_t ) 0;
 8014286:	2500      	movs	r5, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014288:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8014318 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801428c:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014290:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014294:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8014296:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8014298:	e9c3 5500 	strd	r5, r5, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801429c:	603a      	str	r2, [r7, #0]
}
 801429e:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80142a0:	f8cc 2000 	str.w	r2, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80142a4:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80142a8:	4b18      	ldr	r3, [pc, #96]	; (801430c <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80142aa:	4a17      	ldr	r2, [pc, #92]	; (8014308 <pvPortMalloc+0x128>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80142ac:	e9c3 0500 	strd	r0, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80142b0:	6016      	str	r6, [r2, #0]
}
 80142b2:	e7a0      	b.n	80141f6 <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80142b4:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80142b8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80142ba:	f7ff ff61 	bl	8014180 <prvInsertBlockIntoFreeList>
 80142be:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80142c0:	4914      	ldr	r1, [pc, #80]	; (8014314 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80142c2:	1aad      	subs	r5, r5, r2
					pxBlock->pxNextFreeBlock = NULL;
 80142c4:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80142c6:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80142c8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80142ca:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80142ce:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 80142d0:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80142d4:	bf38      	it	cc
 80142d6:	600d      	strcc	r5, [r1, #0]
	( void ) xTaskResumeAll();
 80142d8:	f7fe ff4a 	bl	8013170 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80142dc:	0773      	lsls	r3, r6, #29
 80142de:	d0c6      	beq.n	801426e <pvPortMalloc+0x8e>
 80142e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80142e4:	b672      	cpsid	i
 80142e6:	f383 8811 	msr	BASEPRI, r3
 80142ea:	f3bf 8f6f 	isb	sy
 80142ee:	f3bf 8f4f 	dsb	sy
 80142f2:	b662      	cpsie	i
 80142f4:	e7fe      	b.n	80142f4 <pvPortMalloc+0x114>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80142f6:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80142f8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80142fc:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014300:	4610      	mov	r0, r2
 8014302:	e7be      	b.n	8014282 <pvPortMalloc+0xa2>
 8014304:	20001f20 	.word	0x20001f20
 8014308:	20021f24 	.word	0x20021f24
 801430c:	20021f30 	.word	0x20021f30
 8014310:	20001f24 	.word	0x20001f24
 8014314:	20021f2c 	.word	0x20021f2c
 8014318:	20021f28 	.word	0x20021f28

0801431c <vPortFree>:
	if( pv != NULL )
 801431c:	b300      	cbz	r0, 8014360 <vPortFree+0x44>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801431e:	4a1b      	ldr	r2, [pc, #108]	; (801438c <vPortFree+0x70>)
 8014320:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	4213      	tst	r3, r2
{
 8014328:	b510      	push	{r4, lr}
 801432a:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801432c:	d00d      	beq.n	801434a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801432e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8014332:	b1b1      	cbz	r1, 8014362 <vPortFree+0x46>
 8014334:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014338:	b672      	cpsid	i
 801433a:	f383 8811 	msr	BASEPRI, r3
 801433e:	f3bf 8f6f 	isb	sy
 8014342:	f3bf 8f4f 	dsb	sy
 8014346:	b662      	cpsie	i
 8014348:	e7fe      	b.n	8014348 <vPortFree+0x2c>
 801434a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801434e:	b672      	cpsid	i
 8014350:	f383 8811 	msr	BASEPRI, r3
 8014354:	f3bf 8f6f 	isb	sy
 8014358:	f3bf 8f4f 	dsb	sy
 801435c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801435e:	e7fe      	b.n	801435e <vPortFree+0x42>
 8014360:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014362:	ea23 0302 	bic.w	r3, r3, r2
 8014366:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 801436a:	f7fe fe39 	bl	8012fe0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801436e:	4a08      	ldr	r2, [pc, #32]	; (8014390 <vPortFree+0x74>)
 8014370:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014374:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014378:	6811      	ldr	r1, [r2, #0]
 801437a:	440b      	add	r3, r1
 801437c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801437e:	f7ff feff 	bl	8014180 <prvInsertBlockIntoFreeList>
}
 8014382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8014386:	f7fe bef3 	b.w	8013170 <xTaskResumeAll>
 801438a:	bf00      	nop
 801438c:	20021f24 	.word	0x20021f24
 8014390:	20021f28 	.word	0x20021f28

08014394 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8014394:	f003 b90e 	b.w	80175b4 <pbuf_free>

08014398 <tcpip_thread>:
{
 8014398:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 801439a:	483a      	ldr	r0, [pc, #232]	; (8014484 <tcpip_thread+0xec>)
{
 801439c:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 801439e:	f00b fe7f 	bl	80200a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80143a2:	4b39      	ldr	r3, [pc, #228]	; (8014488 <tcpip_thread+0xf0>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	b113      	cbz	r3, 80143ae <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80143a8:	4a38      	ldr	r2, [pc, #224]	; (801448c <tcpip_thread+0xf4>)
 80143aa:	6810      	ldr	r0, [r2, #0]
 80143ac:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80143ae:	4d35      	ldr	r5, [pc, #212]	; (8014484 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80143b0:	4e37      	ldr	r6, [pc, #220]	; (8014490 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80143b2:	4f38      	ldr	r7, [pc, #224]	; (8014494 <tcpip_thread+0xfc>)
 80143b4:	e010      	b.n	80143d8 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80143b6:	b168      	cbz	r0, 80143d4 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80143b8:	4628      	mov	r0, r5
 80143ba:	f00b fe77 	bl	80200ac <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80143be:	4622      	mov	r2, r4
 80143c0:	a901      	add	r1, sp, #4
 80143c2:	4630      	mov	r0, r6
 80143c4:	f00b fe12 	bl	801ffec <sys_arch_mbox_fetch>
 80143c8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80143ca:	4628      	mov	r0, r5
 80143cc:	f00b fe68 	bl	80200a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80143d0:	3401      	adds	r4, #1
 80143d2:	d111      	bne.n	80143f8 <tcpip_thread+0x60>
    sys_check_timeouts();
 80143d4:	f008 f820 	bl	801c418 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80143d8:	f008 f842 	bl	801c460 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80143dc:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80143de:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80143e0:	d1e9      	bne.n	80143b6 <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80143e2:	4628      	mov	r0, r5
 80143e4:	f00b fe62 	bl	80200ac <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80143e8:	2200      	movs	r2, #0
 80143ea:	a901      	add	r1, sp, #4
 80143ec:	4630      	mov	r0, r6
 80143ee:	f00b fdfd 	bl	801ffec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80143f2:	4628      	mov	r0, r5
 80143f4:	f00b fe54 	bl	80200a0 <sys_mutex_lock>
    if (msg == NULL) {
 80143f8:	9c01      	ldr	r4, [sp, #4]
 80143fa:	b384      	cbz	r4, 801445e <tcpip_thread+0xc6>
  switch (msg->type) {
 80143fc:	7823      	ldrb	r3, [r4, #0]
 80143fe:	2b04      	cmp	r3, #4
 8014400:	d838      	bhi.n	8014474 <tcpip_thread+0xdc>
 8014402:	e8df f003 	tbb	[pc, r3]
 8014406:	1822      	.short	0x1822
 8014408:	070f      	.short	0x070f
 801440a:	03          	.byte	0x03
 801440b:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 801440c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8014410:	4798      	blx	r3
      break;
 8014412:	e7e1      	b.n	80143d8 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8014414:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8014418:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801441a:	4621      	mov	r1, r4
 801441c:	2009      	movs	r0, #9
 801441e:	f002 fdf9 	bl	8017014 <memp_free>
      break;
 8014422:	e7d9      	b.n	80143d8 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8014424:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8014428:	f007 ffd8 	bl	801c3dc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801442c:	4621      	mov	r1, r4
 801442e:	2009      	movs	r0, #9
 8014430:	f002 fdf0 	bl	8017014 <memp_free>
      break;
 8014434:	e7d0      	b.n	80143d8 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8014436:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801443a:	6860      	ldr	r0, [r4, #4]
 801443c:	f007 ff96 	bl	801c36c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8014440:	4621      	mov	r1, r4
 8014442:	2009      	movs	r0, #9
 8014444:	f002 fde6 	bl	8017014 <memp_free>
      break;
 8014448:	e7c6      	b.n	80143d8 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801444a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 801444e:	6860      	ldr	r0, [r4, #4]
 8014450:	4798      	blx	r3
 8014452:	b958      	cbnz	r0, 801446c <tcpip_thread+0xd4>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8014454:	4621      	mov	r1, r4
 8014456:	200a      	movs	r0, #10
 8014458:	f002 fddc 	bl	8017014 <memp_free>
      break;
 801445c:	e7bc      	b.n	80143d8 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801445e:	463b      	mov	r3, r7
 8014460:	2291      	movs	r2, #145	; 0x91
 8014462:	490d      	ldr	r1, [pc, #52]	; (8014498 <tcpip_thread+0x100>)
 8014464:	480d      	ldr	r0, [pc, #52]	; (801449c <tcpip_thread+0x104>)
 8014466:	f00d f9bd 	bl	80217e4 <iprintf>
      continue;
 801446a:	e7b5      	b.n	80143d8 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 801446c:	6860      	ldr	r0, [r4, #4]
 801446e:	f003 f8a1 	bl	80175b4 <pbuf_free>
 8014472:	e7ef      	b.n	8014454 <tcpip_thread+0xbc>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8014474:	463b      	mov	r3, r7
 8014476:	22cf      	movs	r2, #207	; 0xcf
 8014478:	4907      	ldr	r1, [pc, #28]	; (8014498 <tcpip_thread+0x100>)
 801447a:	4808      	ldr	r0, [pc, #32]	; (801449c <tcpip_thread+0x104>)
 801447c:	f00d f9b2 	bl	80217e4 <iprintf>
      break;
 8014480:	e7aa      	b.n	80143d8 <tcpip_thread+0x40>
 8014482:	bf00      	nop
 8014484:	20027098 	.word	0x20027098
 8014488:	20021f38 	.word	0x20021f38
 801448c:	20021f3c 	.word	0x20021f3c
 8014490:	20021f40 	.word	0x20021f40
 8014494:	0802802c 	.word	0x0802802c
 8014498:	0802805c 	.word	0x0802805c
 801449c:	08027fec 	.word	0x08027fec

080144a0 <tcpip_inpkt>:
{
 80144a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144a2:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80144a4:	4814      	ldr	r0, [pc, #80]	; (80144f8 <tcpip_inpkt+0x58>)
{
 80144a6:	460e      	mov	r6, r1
 80144a8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80144aa:	f00b fdc1 	bl	8020030 <sys_mbox_valid>
 80144ae:	b188      	cbz	r0, 80144d4 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80144b0:	22fe      	movs	r2, #254	; 0xfe
 80144b2:	4912      	ldr	r1, [pc, #72]	; (80144fc <tcpip_inpkt+0x5c>)
 80144b4:	200a      	movs	r0, #10
 80144b6:	f002 fd89 	bl	8016fcc <memp_malloc_fn>
  if (msg == NULL) {
 80144ba:	4604      	mov	r4, r0
 80144bc:	b1c0      	cbz	r0, 80144f0 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80144be:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80144c0:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80144c2:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80144c4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80144c6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80144ca:	480b      	ldr	r0, [pc, #44]	; (80144f8 <tcpip_inpkt+0x58>)
 80144cc:	f00b fd7c 	bl	801ffc8 <sys_mbox_trypost>
 80144d0:	b938      	cbnz	r0, 80144e2 <tcpip_inpkt+0x42>
}
 80144d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80144d4:	4b09      	ldr	r3, [pc, #36]	; (80144fc <tcpip_inpkt+0x5c>)
 80144d6:	22fc      	movs	r2, #252	; 0xfc
 80144d8:	4909      	ldr	r1, [pc, #36]	; (8014500 <tcpip_inpkt+0x60>)
 80144da:	480a      	ldr	r0, [pc, #40]	; (8014504 <tcpip_inpkt+0x64>)
 80144dc:	f00d f982 	bl	80217e4 <iprintf>
 80144e0:	e7e6      	b.n	80144b0 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80144e2:	4621      	mov	r1, r4
 80144e4:	200a      	movs	r0, #10
 80144e6:	f002 fd95 	bl	8017014 <memp_free>
    return ERR_MEM;
 80144ea:	f04f 30ff 	mov.w	r0, #4294967295
}
 80144ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80144f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144f6:	bf00      	nop
 80144f8:	20021f40 	.word	0x20021f40
 80144fc:	0802802c 	.word	0x0802802c
 8014500:	0802807c 	.word	0x0802807c
 8014504:	08027fec 	.word	0x08027fec

08014508 <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8014508:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801450c:	f013 0f18 	tst.w	r3, #24
 8014510:	d002      	beq.n	8014518 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8014512:	4a03      	ldr	r2, [pc, #12]	; (8014520 <tcpip_input+0x18>)
 8014514:	f7ff bfc4 	b.w	80144a0 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8014518:	4a02      	ldr	r2, [pc, #8]	; (8014524 <tcpip_input+0x1c>)
 801451a:	f7ff bfc1 	b.w	80144a0 <tcpip_inpkt>
 801451e:	bf00      	nop
 8014520:	0801fe3d 	.word	0x0801fe3d
 8014524:	0801efb1 	.word	0x0801efb1

08014528 <tcpip_try_callback>:
{
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801452c:	4814      	ldr	r0, [pc, #80]	; (8014580 <tcpip_try_callback+0x58>)
{
 801452e:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8014530:	f00b fd7e 	bl	8020030 <sys_mbox_valid>
 8014534:	b188      	cbz	r0, 801455a <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8014536:	f240 125f 	movw	r2, #351	; 0x15f
 801453a:	4912      	ldr	r1, [pc, #72]	; (8014584 <tcpip_try_callback+0x5c>)
 801453c:	2009      	movs	r0, #9
 801453e:	f002 fd45 	bl	8016fcc <memp_malloc_fn>
  if (msg == NULL) {
 8014542:	4604      	mov	r4, r0
 8014544:	b1c0      	cbz	r0, 8014578 <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8014546:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014548:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801454a:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 801454e:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8014550:	480b      	ldr	r0, [pc, #44]	; (8014580 <tcpip_try_callback+0x58>)
 8014552:	f00b fd39 	bl	801ffc8 <sys_mbox_trypost>
 8014556:	b940      	cbnz	r0, 801456a <tcpip_try_callback+0x42>
}
 8014558:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801455a:	4b0a      	ldr	r3, [pc, #40]	; (8014584 <tcpip_try_callback+0x5c>)
 801455c:	f240 125d 	movw	r2, #349	; 0x15d
 8014560:	4909      	ldr	r1, [pc, #36]	; (8014588 <tcpip_try_callback+0x60>)
 8014562:	480a      	ldr	r0, [pc, #40]	; (801458c <tcpip_try_callback+0x64>)
 8014564:	f00d f93e 	bl	80217e4 <iprintf>
 8014568:	e7e5      	b.n	8014536 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801456a:	4621      	mov	r1, r4
 801456c:	2009      	movs	r0, #9
 801456e:	f002 fd51 	bl	8017014 <memp_free>
    return ERR_MEM;
 8014572:	f04f 30ff 	mov.w	r0, #4294967295
}
 8014576:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8014578:	f04f 30ff 	mov.w	r0, #4294967295
}
 801457c:	bd70      	pop	{r4, r5, r6, pc}
 801457e:	bf00      	nop
 8014580:	20021f40 	.word	0x20021f40
 8014584:	0802802c 	.word	0x0802802c
 8014588:	0802807c 	.word	0x0802807c
 801458c:	08027fec 	.word	0x08027fec

08014590 <tcpip_init>:
{
 8014590:	b530      	push	{r4, r5, lr}
 8014592:	b083      	sub	sp, #12
 8014594:	4605      	mov	r5, r0
 8014596:	460c      	mov	r4, r1
  lwip_init();
 8014598:	f001 ff9e 	bl	80164d8 <lwip_init>
  tcpip_init_done = initfunc;
 801459c:	4a15      	ldr	r2, [pc, #84]	; (80145f4 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801459e:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 80145a0:	4b15      	ldr	r3, [pc, #84]	; (80145f8 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80145a2:	4816      	ldr	r0, [pc, #88]	; (80145fc <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80145a4:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80145a6:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80145a8:	f00b fce8 	bl	801ff7c <sys_mbox_new>
 80145ac:	b968      	cbnz	r0, 80145ca <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80145ae:	4814      	ldr	r0, [pc, #80]	; (8014600 <tcpip_init+0x70>)
 80145b0:	f00b fd50 	bl	8020054 <sys_mutex_new>
 80145b4:	b9a8      	cbnz	r0, 80145e2 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80145b6:	2200      	movs	r2, #0
 80145b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145bc:	4911      	ldr	r1, [pc, #68]	; (8014604 <tcpip_init+0x74>)
 80145be:	9200      	str	r2, [sp, #0]
 80145c0:	4811      	ldr	r0, [pc, #68]	; (8014608 <tcpip_init+0x78>)
 80145c2:	f00b fd77 	bl	80200b4 <sys_thread_new>
}
 80145c6:	b003      	add	sp, #12
 80145c8:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80145ca:	4b10      	ldr	r3, [pc, #64]	; (801460c <tcpip_init+0x7c>)
 80145cc:	f240 2261 	movw	r2, #609	; 0x261
 80145d0:	490f      	ldr	r1, [pc, #60]	; (8014610 <tcpip_init+0x80>)
 80145d2:	4810      	ldr	r0, [pc, #64]	; (8014614 <tcpip_init+0x84>)
 80145d4:	f00d f906 	bl	80217e4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80145d8:	4809      	ldr	r0, [pc, #36]	; (8014600 <tcpip_init+0x70>)
 80145da:	f00b fd3b 	bl	8020054 <sys_mutex_new>
 80145de:	2800      	cmp	r0, #0
 80145e0:	d0e9      	beq.n	80145b6 <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80145e2:	4b0a      	ldr	r3, [pc, #40]	; (801460c <tcpip_init+0x7c>)
 80145e4:	f240 2265 	movw	r2, #613	; 0x265
 80145e8:	490b      	ldr	r1, [pc, #44]	; (8014618 <tcpip_init+0x88>)
 80145ea:	480a      	ldr	r0, [pc, #40]	; (8014614 <tcpip_init+0x84>)
 80145ec:	f00d f8fa 	bl	80217e4 <iprintf>
 80145f0:	e7e1      	b.n	80145b6 <tcpip_init+0x26>
 80145f2:	bf00      	nop
 80145f4:	20021f38 	.word	0x20021f38
 80145f8:	20021f3c 	.word	0x20021f3c
 80145fc:	20021f40 	.word	0x20021f40
 8014600:	20027098 	.word	0x20027098
 8014604:	08014399 	.word	0x08014399
 8014608:	080280d4 	.word	0x080280d4
 801460c:	0802802c 	.word	0x0802802c
 8014610:	0802808c 	.word	0x0802808c
 8014614:	08027fec 	.word	0x08027fec
 8014618:	080280b0 	.word	0x080280b0

0801461c <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 801461c:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 801461e:	4801      	ldr	r0, [pc, #4]	; (8014624 <pbuf_free_callback+0x8>)
 8014620:	f7ff bf82 	b.w	8014528 <tcpip_try_callback>
 8014624:	08014395 	.word	0x08014395

08014628 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8014628:	b300      	cbz	r0, 801466c <fs_open+0x44>
{
 801462a:	b570      	push	{r4, r5, r6, lr}
 801462c:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 801462e:	b1d1      	cbz	r1, 8014666 <fs_open+0x3e>
 8014630:	4606      	mov	r6, r0
 8014632:	4910      	ldr	r1, [pc, #64]	; (8014674 <fs_open+0x4c>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8014634:	4c10      	ldr	r4, [pc, #64]	; (8014678 <fs_open+0x50>)
 8014636:	e000      	b.n	801463a <fs_open+0x12>
 8014638:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 801463a:	4628      	mov	r0, r5
 801463c:	f7eb fe00 	bl	8000240 <strcmp>
 8014640:	b130      	cbz	r0, 8014650 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8014642:	6824      	ldr	r4, [r4, #0]
 8014644:	2c00      	cmp	r4, #0
 8014646:	d1f7      	bne.n	8014638 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8014648:	f06f 0305 	mvn.w	r3, #5
}
 801464c:	4618      	mov	r0, r3
 801464e:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8014650:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 8014652:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 8014654:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 8014656:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 801465a:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 801465e:	7c22      	ldrb	r2, [r4, #16]
}
 8014660:	4618      	mov	r0, r3
      file->flags = f->flags;
 8014662:	7432      	strb	r2, [r6, #16]
}
 8014664:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8014666:	f06f 030f 	mvn.w	r3, #15
 801466a:	e7ef      	b.n	801464c <fs_open+0x24>
 801466c:	f06f 030f 	mvn.w	r3, #15
}
 8014670:	4618      	mov	r0, r3
 8014672:	4770      	bx	lr
 8014674:	08032f68 	.word	0x08032f68
 8014678:	0803e0d4 	.word	0x0803e0d4

0801467c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8014680:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8014684:	1a10      	subs	r0, r2, r0
 8014686:	4770      	bx	lr

08014688 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8014688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 801468c:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801468e:	b364      	cbz	r4, 80146ea <http_write+0x62>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8014690:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 8014692:	4690      	mov	r8, r2
 8014694:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8014698:	4606      	mov	r6, r0
 801469a:	006d      	lsls	r5, r5, #1
 801469c:	460f      	mov	r7, r1
 801469e:	4699      	mov	r9, r3
 80146a0:	b2ad      	uxth	r5, r5
 80146a2:	4295      	cmp	r5, r2
 80146a4:	bf28      	it	cs
 80146a6:	4615      	movcs	r5, r2
 80146a8:	42ac      	cmp	r4, r5
 80146aa:	bf28      	it	cs
 80146ac:	462c      	movcs	r4, r5
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80146ae:	464b      	mov	r3, r9
 80146b0:	4622      	mov	r2, r4
 80146b2:	4639      	mov	r1, r7
 80146b4:	4630      	mov	r0, r6
 80146b6:	f006 fc9f 	bl	801aff8 <tcp_write>
    if (err == ERR_MEM) {
 80146ba:	1c43      	adds	r3, r0, #1
 80146bc:	d008      	beq.n	80146d0 <http_write+0x48>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80146be:	b978      	cbnz	r0, 80146e0 <http_write+0x58>
 80146c0:	f8a8 4000 	strh.w	r4, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80146c4:	8b73      	ldrh	r3, [r6, #26]
 80146c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80146ca:	8373      	strh	r3, [r6, #26]
#endif

  return err;
}
 80146cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80146d0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80146d4:	b123      	cbz	r3, 80146e0 <http_write+0x58>
 80146d6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        len /= 2;
 80146da:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80146dc:	2b08      	cmp	r3, #8
 80146de:	d901      	bls.n	80146e4 <http_write+0x5c>
    *length = 0;
 80146e0:	2400      	movs	r4, #0
 80146e2:	e7ed      	b.n	80146c0 <http_write+0x38>
  } while ((err == ERR_MEM) && (len > 1));
 80146e4:	2c01      	cmp	r4, #1
 80146e6:	d8e2      	bhi.n	80146ae <http_write+0x26>
 80146e8:	e7fa      	b.n	80146e0 <http_write+0x58>
    return ERR_OK;
 80146ea:	4620      	mov	r0, r4
}
 80146ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080146f0 <http_state_eof>:
{
 80146f0:	b510      	push	{r4, lr}
 80146f2:	4604      	mov	r4, r0
  if (hs->handle) {
 80146f4:	6940      	ldr	r0, [r0, #20]
 80146f6:	b118      	cbz	r0, 8014700 <http_state_eof+0x10>
    fs_close(hs->handle);
 80146f8:	f7ff ffc0 	bl	801467c <fs_close>
    hs->handle = NULL;
 80146fc:	2300      	movs	r3, #0
 80146fe:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8014700:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014702:	b118      	cbz	r0, 801470c <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 8014704:	f002 f89a 	bl	801683c <mem_free>
    hs->ssi = NULL;
 8014708:	2300      	movs	r3, #0
 801470a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 801470c:	6a20      	ldr	r0, [r4, #32]
 801470e:	b118      	cbz	r0, 8014718 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8014710:	f002 ff50 	bl	80175b4 <pbuf_free>
    hs->req = NULL;
 8014714:	2300      	movs	r3, #0
 8014716:	6223      	str	r3, [r4, #32]
}
 8014718:	bd10      	pop	{r4, pc}
 801471a:	bf00      	nop

0801471c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 801471c:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 801471e:	4b0e      	ldr	r3, [pc, #56]	; (8014758 <http_get_404_file+0x3c>)
{
 8014720:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8014722:	4604      	mov	r4, r0
 8014724:	4619      	mov	r1, r3
  *uri = "/404.html";
 8014726:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8014728:	f7ff ff7e 	bl	8014628 <fs_open>
  if (err != ERR_OK) {
 801472c:	b908      	cbnz	r0, 8014732 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 801472e:	4620      	mov	r0, r4
 8014730:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8014732:	490a      	ldr	r1, [pc, #40]	; (801475c <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8014734:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8014736:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8014738:	f7ff ff76 	bl	8014628 <fs_open>
    if (err != ERR_OK) {
 801473c:	2800      	cmp	r0, #0
 801473e:	d0f6      	beq.n	801472e <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8014740:	4907      	ldr	r1, [pc, #28]	; (8014760 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8014742:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8014744:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8014746:	f7ff ff6f 	bl	8014628 <fs_open>
      if (err != ERR_OK) {
 801474a:	2800      	cmp	r0, #0
 801474c:	d0ef      	beq.n	801472e <http_get_404_file+0x12>
        *uri = NULL;
 801474e:	2300      	movs	r3, #0
        return NULL;
 8014750:	461c      	mov	r4, r3
        *uri = NULL;
 8014752:	602b      	str	r3, [r5, #0]
        return NULL;
 8014754:	e7eb      	b.n	801472e <http_get_404_file+0x12>
 8014756:	bf00      	nop
 8014758:	0803e0e8 	.word	0x0803e0e8
 801475c:	0803e0f4 	.word	0x0803e0f4
 8014760:	0803e100 	.word	0x0803e100

08014764 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8014764:	bb82      	cbnz	r2, 80147c8 <http_accept+0x64>
{
 8014766:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8014768:	fab1 f581 	clz	r5, r1
 801476c:	460c      	mov	r4, r1
 801476e:	096d      	lsrs	r5, r5, #5
 8014770:	b339      	cbz	r1, 80147c2 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8014772:	2101      	movs	r1, #1
 8014774:	4620      	mov	r0, r4
 8014776:	f003 fd5f 	bl	8018238 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801477a:	2034      	movs	r0, #52	; 0x34
 801477c:	f002 fa38 	bl	8016bf0 <mem_malloc>
  if (ret != NULL) {
 8014780:	4606      	mov	r6, r0
 8014782:	b1d8      	cbz	r0, 80147bc <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8014784:	2234      	movs	r2, #52	; 0x34
 8014786:	4629      	mov	r1, r5
 8014788:	f00c f8ba 	bl	8020900 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801478c:	4631      	mov	r1, r6
 801478e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8014790:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8014792:	f003 fd87 	bl	80182a4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8014796:	4620      	mov	r0, r4
 8014798:	490d      	ldr	r1, [pc, #52]	; (80147d0 <http_accept+0x6c>)
 801479a:	f003 fd87 	bl	80182ac <tcp_recv>
  altcp_err(pcb, http_err);
 801479e:	4620      	mov	r0, r4
 80147a0:	490c      	ldr	r1, [pc, #48]	; (80147d4 <http_accept+0x70>)
 80147a2:	f003 fdbb 	bl	801831c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80147a6:	2204      	movs	r2, #4
 80147a8:	4620      	mov	r0, r4
 80147aa:	490b      	ldr	r1, [pc, #44]	; (80147d8 <http_accept+0x74>)
 80147ac:	f003 fdd8 	bl	8018360 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80147b0:	4620      	mov	r0, r4
 80147b2:	490a      	ldr	r1, [pc, #40]	; (80147dc <http_accept+0x78>)
 80147b4:	f003 fd96 	bl	80182e4 <tcp_sent>

  return ERR_OK;
 80147b8:	4628      	mov	r0, r5
}
 80147ba:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80147bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80147c0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80147c2:	f06f 0005 	mvn.w	r0, #5
}
 80147c6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80147c8:	f06f 0005 	mvn.w	r0, #5
}
 80147cc:	4770      	bx	lr
 80147ce:	bf00      	nop
 80147d0:	080153ad 	.word	0x080153ad
 80147d4:	080157f5 	.word	0x080157f5
 80147d8:	08015355 	.word	0x08015355
 80147dc:	0801533d 	.word	0x0801533d

080147e0 <http_init_file>:
{
 80147e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147e4:	b089      	sub	sp, #36	; 0x24
 80147e6:	4604      	mov	r4, r0
  if (file != NULL) {
 80147e8:	460d      	mov	r5, r1
{
 80147ea:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80147ee:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80147f0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 80147f4:	2900      	cmp	r1, #0
 80147f6:	f000 80b0 	beq.w	801495a <http_init_file+0x17a>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80147fa:	680b      	ldr	r3, [r1, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f000 80b2 	beq.w	8014966 <http_init_file+0x186>
    if (tag_check) {
 8014802:	2e00      	cmp	r6, #0
 8014804:	d171      	bne.n	80148ea <http_init_file+0x10a>
    hs->handle = file;
 8014806:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8014808:	2f00      	cmp	r7, #0
 801480a:	d051      	beq.n	80148b0 <http_init_file+0xd0>
  if (!params || (params[0] == '\0')) {
 801480c:	4b64      	ldr	r3, [pc, #400]	; (80149a0 <http_init_file+0x1c0>)
 801480e:	783a      	ldrb	r2, [r7, #0]
 8014810:	9305      	str	r3, [sp, #20]
 8014812:	2a00      	cmp	r2, #0
 8014814:	d045      	beq.n	80148a2 <http_init_file+0xc2>
 8014816:	f04f 0801 	mov.w	r8, #1
 801481a:	f8df b188 	ldr.w	fp, [pc, #392]	; 80149a4 <http_init_file+0x1c4>
        *pair = '\0';
 801481e:	f04f 0a00 	mov.w	sl, #0
 8014822:	4699      	mov	r9, r3
 8014824:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014828:	463c      	mov	r4, r7
 801482a:	e014      	b.n	8014856 <http_init_file+0x76>
 801482c:	2a0e      	cmp	r2, #14
      *pair = '\0';
 801482e:	f807 ab01 	strb.w	sl, [r7], #1
      pair++;
 8014832:	bfcc      	ite	gt
 8014834:	2500      	movgt	r5, #0
 8014836:	2501      	movle	r5, #1
    equals = strchr(equals, '=');
 8014838:	4620      	mov	r0, r4
 801483a:	213d      	movs	r1, #61	; 0x3d
 801483c:	f00d f9e4 	bl	8021c08 <strchr>
    if (equals) {
 8014840:	b318      	cbz	r0, 801488a <http_init_file+0xaa>
      *equals = '\0';
 8014842:	f800 ab01 	strb.w	sl, [r0], #1
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8014846:	f109 0904 	add.w	r9, r9, #4
      http_cgi_param_vals[loop] = equals + 1;
 801484a:	f849 0c04 	str.w	r0, [r9, #-4]
 801484e:	f108 0801 	add.w	r8, r8, #1
 8014852:	463c      	mov	r4, r7
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8014854:	b315      	cbz	r5, 801489c <http_init_file+0xbc>
    pair = strchr(pair, '&');
 8014856:	2126      	movs	r1, #38	; 0x26
 8014858:	4620      	mov	r0, r4
    http_cgi_params[loop] = pair;
 801485a:	f84b 4b04 	str.w	r4, [fp], #4
    pair = strchr(pair, '&');
 801485e:	4646      	mov	r6, r8
 8014860:	f00d f9d2 	bl	8021c08 <strchr>
    if (pair) {
 8014864:	f108 32ff 	add.w	r2, r8, #4294967295
 8014868:	4607      	mov	r7, r0
 801486a:	2800      	cmp	r0, #0
 801486c:	d1de      	bne.n	801482c <http_init_file+0x4c>
      pair = strchr(equals, ' ');
 801486e:	2120      	movs	r1, #32
 8014870:	4620      	mov	r0, r4
        *pair = '\0';
 8014872:	463d      	mov	r5, r7
      pair = strchr(equals, ' ');
 8014874:	f00d f9c8 	bl	8021c08 <strchr>
      if (pair) {
 8014878:	2800      	cmp	r0, #0
 801487a:	d0dd      	beq.n	8014838 <http_init_file+0x58>
        *pair = '\0';
 801487c:	7007      	strb	r7, [r0, #0]
    equals = strchr(equals, '=');
 801487e:	213d      	movs	r1, #61	; 0x3d
 8014880:	4620      	mov	r0, r4
 8014882:	f00d f9c1 	bl	8021c08 <strchr>
    if (equals) {
 8014886:	2800      	cmp	r0, #0
 8014888:	d1db      	bne.n	8014842 <http_init_file+0x62>
      http_cgi_param_vals[loop] = NULL;
 801488a:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801488e:	f108 0801 	add.w	r8, r8, #1
 8014892:	f109 0904 	add.w	r9, r9, #4
 8014896:	463c      	mov	r4, r7
 8014898:	2d00      	cmp	r5, #0
 801489a:	d1dc      	bne.n	8014856 <http_init_file+0x76>
 801489c:	4632      	mov	r2, r6
 801489e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80148a2:	9b05      	ldr	r3, [sp, #20]
 80148a4:	4628      	mov	r0, r5
 80148a6:	9904      	ldr	r1, [sp, #16]
 80148a8:	9300      	str	r3, [sp, #0]
 80148aa:	4b3e      	ldr	r3, [pc, #248]	; (80149a4 <http_init_file+0x1c4>)
 80148ac:	f7f1 fb1a 	bl	8005ee4 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80148b0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80148b4:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80148b6:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80148b8:	db60      	blt.n	801497c <http_init_file+0x19c>
    hs->retries = 0;
 80148ba:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 80148bc:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 80148be:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80148c0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80148c4:	7c1b      	ldrb	r3, [r3, #16]
 80148c6:	07d9      	lsls	r1, r3, #31
 80148c8:	d52a      	bpl.n	8014920 <http_init_file+0x140>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80148ca:	9b03      	ldr	r3, [sp, #12]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d136      	bne.n	801493e <http_init_file+0x15e>
  if (hs->keepalive) {
 80148d0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80148d4:	b12b      	cbz	r3, 80148e2 <http_init_file+0x102>
    if (hs->ssi != NULL) {
 80148d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d058      	beq.n	801498e <http_init_file+0x1ae>
      hs->keepalive = 0;
 80148dc:	2300      	movs	r3, #0
 80148de:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80148e2:	2000      	movs	r0, #0
 80148e4:	b009      	add	sp, #36	; 0x24
 80148e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80148ea:	f44f 7090 	mov.w	r0, #288	; 0x120
 80148ee:	f002 f97f 	bl	8016bf0 <mem_malloc>
  if (ret != NULL) {
 80148f2:	4606      	mov	r6, r0
 80148f4:	2800      	cmp	r0, #0
 80148f6:	d086      	beq.n	8014806 <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80148f8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80148fc:	2100      	movs	r1, #0
 80148fe:	f00b ffff 	bl	8020900 <memset>
        ssi->tag_index = 0;
 8014902:	2200      	movs	r2, #0
        ssi->tag_state = TAG_NONE;
 8014904:	f886 211e 	strb.w	r2, [r6, #286]	; 0x11e
        ssi->parse_left = file->len;
 8014908:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 801490c:	8232      	strh	r2, [r6, #16]
        ssi->parsed = file->data;
 801490e:	6033      	str	r3, [r6, #0]
        ssi->parse_left = file->len;
 8014910:	e9c6 3102 	strd	r3, r1, [r6, #8]
        hs->ssi = ssi;
 8014914:	62e6      	str	r6, [r4, #44]	; 0x2c
    hs->handle = file;
 8014916:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8014918:	2f00      	cmp	r7, #0
 801491a:	f47f af77 	bne.w	801480c <http_init_file+0x2c>
 801491e:	e7c7      	b.n	80148b0 <http_init_file+0xd0>
    LWIP_ASSERT("HTTP headers not included in file system",
 8014920:	4b21      	ldr	r3, [pc, #132]	; (80149a8 <http_init_file+0x1c8>)
 8014922:	f640 1243 	movw	r2, #2371	; 0x943
 8014926:	4921      	ldr	r1, [pc, #132]	; (80149ac <http_init_file+0x1cc>)
 8014928:	4821      	ldr	r0, [pc, #132]	; (80149b0 <http_init_file+0x1d0>)
 801492a:	f00c ff5b 	bl	80217e4 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801492e:	9b03      	ldr	r3, [sp, #12]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d0cd      	beq.n	80148d0 <http_init_file+0xf0>
 8014934:	6963      	ldr	r3, [r4, #20]
 8014936:	7c1b      	ldrb	r3, [r3, #16]
 8014938:	07db      	lsls	r3, r3, #31
 801493a:	d5c9      	bpl.n	80148d0 <http_init_file+0xf0>
 801493c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801493e:	491d      	ldr	r1, [pc, #116]	; (80149b4 <http_init_file+0x1d4>)
 8014940:	69a0      	ldr	r0, [r4, #24]
 8014942:	f000 ffe9 	bl	8015918 <lwip_strnstr>
      if (file_start != NULL) {
 8014946:	2800      	cmp	r0, #0
 8014948:	d0c2      	beq.n	80148d0 <http_init_file+0xf0>
        int diff = file_start + 4 - hs->file;
 801494a:	3004      	adds	r0, #4
 801494c:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 801494e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8014950:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8014952:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8014954:	1a9b      	subs	r3, r3, r2
 8014956:	6263      	str	r3, [r4, #36]	; 0x24
 8014958:	e7ba      	b.n	80148d0 <http_init_file+0xf0>
    hs->file = NULL;
 801495a:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 801495e:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8014960:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8014964:	e7b4      	b.n	80148d0 <http_init_file+0xf0>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8014966:	4b10      	ldr	r3, [pc, #64]	; (80149a8 <http_init_file+0x1c8>)
 8014968:	f640 120b 	movw	r2, #2315	; 0x90b
 801496c:	4912      	ldr	r1, [pc, #72]	; (80149b8 <http_init_file+0x1d8>)
 801496e:	4810      	ldr	r0, [pc, #64]	; (80149b0 <http_init_file+0x1d0>)
 8014970:	f00c ff38 	bl	80217e4 <iprintf>
    if (tag_check) {
 8014974:	2e00      	cmp	r6, #0
 8014976:	f43f af46 	beq.w	8014806 <http_init_file+0x26>
 801497a:	e7b6      	b.n	80148ea <http_init_file+0x10a>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801497c:	f640 1234 	movw	r2, #2356	; 0x934
 8014980:	4b09      	ldr	r3, [pc, #36]	; (80149a8 <http_init_file+0x1c8>)
 8014982:	490e      	ldr	r1, [pc, #56]	; (80149bc <http_init_file+0x1dc>)
 8014984:	480a      	ldr	r0, [pc, #40]	; (80149b0 <http_init_file+0x1d0>)
 8014986:	f00c ff2d 	bl	80217e4 <iprintf>
 801498a:	686a      	ldr	r2, [r5, #4]
 801498c:	e795      	b.n	80148ba <http_init_file+0xda>
      if ((hs->handle != NULL) &&
 801498e:	6963      	ldr	r3, [r4, #20]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d0a6      	beq.n	80148e2 <http_init_file+0x102>
 8014994:	7c1b      	ldrb	r3, [r3, #16]
 8014996:	f003 0303 	and.w	r3, r3, #3
 801499a:	2b01      	cmp	r3, #1
 801499c:	d1a1      	bne.n	80148e2 <http_init_file+0x102>
 801499e:	e79d      	b.n	80148dc <http_init_file+0xfc>
 80149a0:	20021f44 	.word	0x20021f44
 80149a4:	20021f84 	.word	0x20021f84
 80149a8:	0803e10c 	.word	0x0803e10c
 80149ac:	0803e178 	.word	0x0803e178
 80149b0:	08027fec 	.word	0x08027fec
 80149b4:	08025c58 	.word	0x08025c58
 80149b8:	0803e144 	.word	0x0803e144
 80149bc:	0803e158 	.word	0x0803e158

080149c0 <http_find_file>:
{
 80149c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149c4:	ed2d 8b02 	vpush	{d8}
 80149c8:	b087      	sub	sp, #28
 80149ca:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 80149cc:	4608      	mov	r0, r1
 80149ce:	460c      	mov	r4, r1
{
 80149d0:	4690      	mov	r8, r2
 80149d2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80149d4:	f7eb fc3e 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80149d8:	4606      	mov	r6, r0
 80149da:	b138      	cbz	r0, 80149ec <http_find_file+0x2c>
 80149dc:	1e43      	subs	r3, r0, #1
 80149de:	5ce2      	ldrb	r2, [r4, r3]
 80149e0:	2a2f      	cmp	r2, #47	; 0x2f
 80149e2:	d06a      	beq.n	8014aba <http_find_file+0xfa>
 80149e4:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80149e6:	f04f 0900 	mov.w	r9, #0
 80149ea:	e001      	b.n	80149f0 <http_find_file+0x30>
 80149ec:	4681      	mov	r9, r0
 80149ee:	462f      	mov	r7, r5
    params = (char *)strchr(uri, '?');
 80149f0:	213f      	movs	r1, #63	; 0x3f
 80149f2:	4620      	mov	r0, r4
 80149f4:	f00d f908 	bl	8021c08 <strchr>
    if (params != NULL) {
 80149f8:	4606      	mov	r6, r0
 80149fa:	b118      	cbz	r0, 8014a04 <http_find_file+0x44>
      *params = '\0';
 80149fc:	2300      	movs	r3, #0
 80149fe:	f806 3b01 	strb.w	r3, [r6], #1
      params++;
 8014a02:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8014a04:	4621      	mov	r1, r4
 8014a06:	4628      	mov	r0, r5
 8014a08:	f7ff fe0e 	bl	8014628 <fs_open>
    if (err == ERR_OK) {
 8014a0c:	b9b0      	cbnz	r0, 8014a3c <http_find_file+0x7c>
    if (file != NULL) {
 8014a0e:	b1e7      	cbz	r7, 8014a4a <http_find_file+0x8a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8014a10:	f897 9010 	ldrb.w	r9, [r7, #16]
 8014a14:	9c05      	ldr	r4, [sp, #20]
 8014a16:	f019 0908 	ands.w	r9, r9, #8
 8014a1a:	d01d      	beq.n	8014a58 <http_find_file+0x98>
        tag_check = 1;
 8014a1c:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8014a20:	4623      	mov	r3, r4
 8014a22:	4642      	mov	r2, r8
 8014a24:	4639      	mov	r1, r7
 8014a26:	4628      	mov	r0, r5
 8014a28:	9601      	str	r6, [sp, #4]
 8014a2a:	f8cd 9000 	str.w	r9, [sp]
 8014a2e:	f7ff fed7 	bl	80147e0 <http_init_file>
}
 8014a32:	b007      	add	sp, #28
 8014a34:	ecbd 8b02 	vpop	{d8}
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8014a3c:	a905      	add	r1, sp, #20
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f7ff fe6c 	bl	801471c <http_get_404_file>
 8014a44:	4607      	mov	r7, r0
    if (file != NULL) {
 8014a46:	2f00      	cmp	r7, #0
 8014a48:	d1e2      	bne.n	8014a10 <http_find_file+0x50>
    file = http_get_404_file(hs, &uri);
 8014a4a:	a905      	add	r1, sp, #20
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	f7ff fe65 	bl	801471c <http_get_404_file>
 8014a52:	9c05      	ldr	r4, [sp, #20]
 8014a54:	4607      	mov	r7, r0
 8014a56:	e7e3      	b.n	8014a20 <http_find_file+0x60>
    char *param = (char *)strstr(uri, "?");
 8014a58:	213f      	movs	r1, #63	; 0x3f
 8014a5a:	4620      	mov	r0, r4
 8014a5c:	f00d f8d4 	bl	8021c08 <strchr>
    if (param != NULL) {
 8014a60:	4682      	mov	sl, r0
 8014a62:	b108      	cbz	r0, 8014a68 <http_find_file+0xa8>
      *param = 0;
 8014a64:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8014a68:	212e      	movs	r1, #46	; 0x2e
 8014a6a:	4620      	mov	r0, r4
 8014a6c:	f00d f8cc 	bl	8021c08 <strchr>
 8014a70:	4603      	mov	r3, r0
 8014a72:	b138      	cbz	r0, 8014a84 <http_find_file+0xc4>
 8014a74:	1c58      	adds	r0, r3, #1
 8014a76:	212e      	movs	r1, #46	; 0x2e
 8014a78:	461c      	mov	r4, r3
 8014a7a:	f00d f8c5 	bl	8021c08 <strchr>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2800      	cmp	r0, #0
 8014a82:	d1f7      	bne.n	8014a74 <http_find_file+0xb4>
  u8_t tag_check = 0;
 8014a84:	4940      	ldr	r1, [pc, #256]	; (8014b88 <http_find_file+0x1c8>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8014a86:	4620      	mov	r0, r4
 8014a88:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8014b98 <http_find_file+0x1d8>
 8014a8c:	f000 ff6c 	bl	8015968 <lwip_stricmp>
 8014a90:	b148      	cbz	r0, 8014aa6 <http_find_file+0xe6>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8014a92:	4b3e      	ldr	r3, [pc, #248]	; (8014b8c <http_find_file+0x1cc>)
 8014a94:	459b      	cmp	fp, r3
 8014a96:	d008      	beq.n	8014aaa <http_find_file+0xea>
 8014a98:	f85b 1b04 	ldr.w	r1, [fp], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	f000 ff63 	bl	8015968 <lwip_stricmp>
 8014aa2:	2800      	cmp	r0, #0
 8014aa4:	d1f5      	bne.n	8014a92 <http_find_file+0xd2>
        tag_check = 1;
 8014aa6:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8014aaa:	f1ba 0f00 	cmp.w	sl, #0
 8014aae:	d002      	beq.n	8014ab6 <http_find_file+0xf6>
      *param = '?';
 8014ab0:	233f      	movs	r3, #63	; 0x3f
 8014ab2:	f88a 3000 	strb.w	r3, [sl]
 8014ab6:	9c05      	ldr	r4, [sp, #20]
 8014ab8:	e7b2      	b.n	8014a20 <http_find_file+0x60>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8014aba:	4a35      	ldr	r2, [pc, #212]	; (8014b90 <http_find_file+0x1d0>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014abc:	4294      	cmp	r4, r2
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8014abe:	9203      	str	r2, [sp, #12]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014ac0:	d106      	bne.n	8014ad0 <http_find_file+0x110>
 8014ac2:	f1a0 0001 	sub.w	r0, r0, #1
 8014ac6:	fab0 f080 	clz	r0, r0
 8014aca:	0940      	lsrs	r0, r0, #5
 8014acc:	2800      	cmp	r0, #0
 8014ace:	d057      	beq.n	8014b80 <http_find_file+0x1c0>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8014ad0:	2b3f      	cmp	r3, #63	; 0x3f
 8014ad2:	bf28      	it	cs
 8014ad4:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 8014ad6:	2e01      	cmp	r6, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8014ad8:	469a      	mov	sl, r3
    if (copy_len > 0) {
 8014ada:	d008      	beq.n	8014aee <http_find_file+0x12e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8014adc:	461a      	mov	r2, r3
 8014ade:	4621      	mov	r1, r4
 8014ae0:	482b      	ldr	r0, [pc, #172]	; (8014b90 <http_find_file+0x1d0>)
 8014ae2:	f00b fee5 	bl	80208b0 <memcpy>
      http_uri_buf[copy_len] = 0;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	9a03      	ldr	r2, [sp, #12]
 8014aea:	f802 300a 	strb.w	r3, [r2, sl]
 8014aee:	462f      	mov	r7, r5
{
 8014af0:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8014af4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8014b90 <http_find_file+0x1d0>
 8014af8:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8014afc:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8014afe:	46c8      	mov	r8, r9
      if (copy_len > 0) {
 8014b00:	d012      	beq.n	8014b28 <http_find_file+0x168>
        if (len_left > 0) {
 8014b02:	f1da 033f 	rsbs	r3, sl, #63	; 0x3f
 8014b06:	d113      	bne.n	8014b30 <http_find_file+0x170>
      err = fs_open(&hs->file_handle, file_name);
 8014b08:	4641      	mov	r1, r8
 8014b0a:	4628      	mov	r0, r5
 8014b0c:	f7ff fd8c 	bl	8014628 <fs_open>
      if (err == ERR_OK) {
 8014b10:	b340      	cbz	r0, 8014b64 <http_find_file+0x1a4>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8014b12:	f10b 0b01 	add.w	fp, fp, #1
 8014b16:	f1bb 0f05 	cmp.w	fp, #5
 8014b1a:	d1ef      	bne.n	8014afc <http_find_file+0x13c>
 8014b1c:	ee18 8a10 	vmov	r8, s16
 8014b20:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8014b22:	f04f 0900 	mov.w	r9, #0
 8014b26:	e763      	b.n	80149f0 <http_find_file+0x30>
        file_name = httpd_default_filenames[loop].name;
 8014b28:	4b1a      	ldr	r3, [pc, #104]	; (8014b94 <http_find_file+0x1d4>)
 8014b2a:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8014b2e:	e7eb      	b.n	8014b08 <http_find_file+0x148>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8014b30:	9304      	str	r3, [sp, #16]
 8014b32:	4b18      	ldr	r3, [pc, #96]	; (8014b94 <http_find_file+0x1d4>)
 8014b34:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8014b38:	9b03      	ldr	r3, [sp, #12]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8014b3a:	4608      	mov	r0, r1
 8014b3c:	9103      	str	r1, [sp, #12]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8014b3e:	4453      	add	r3, sl
 8014b40:	461c      	mov	r4, r3
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8014b42:	f7eb fb87 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8014b46:	9b04      	ldr	r3, [sp, #16]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8014b48:	4602      	mov	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8014b4a:	9903      	ldr	r1, [sp, #12]
 8014b4c:	4620      	mov	r0, r4
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	bf28      	it	cs
 8014b52:	461a      	movcs	r2, r3
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8014b54:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8014b58:	f00b feaa 	bl	80208b0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	9a04      	ldr	r2, [sp, #16]
 8014b60:	54a3      	strb	r3, [r4, r2]
 8014b62:	e7d1      	b.n	8014b08 <http_find_file+0x148>
        tag_check = httpd_default_filenames[loop].shtml;
 8014b64:	4a0b      	ldr	r2, [pc, #44]	; (8014b94 <http_find_file+0x1d4>)
 8014b66:	4644      	mov	r4, r8
 8014b68:	ee18 8a10 	vmov	r8, s16
 8014b6c:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8014b70:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8014b72:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 8014b76:	2d00      	cmp	r5, #0
 8014b78:	f43f af3a 	beq.w	80149f0 <http_find_file+0x30>
  char *params = NULL;
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	e74f      	b.n	8014a20 <http_find_file+0x60>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8014b80:	4614      	mov	r4, r2
  u8_t tag_check = 0;
 8014b82:	4681      	mov	r9, r0
 8014b84:	462f      	mov	r7, r5
 8014b86:	e733      	b.n	80149f0 <http_find_file+0x30>
 8014b88:	0803e1cc 	.word	0x0803e1cc
 8014b8c:	0803e42c 	.word	0x0803e42c
 8014b90:	20021fc4 	.word	0x20021fc4
 8014b94:	0803e43c 	.word	0x0803e43c
 8014b98:	0803e41c 	.word	0x0803e41c

08014b9c <http_post_rxpbuf>:
{
 8014b9c:	b538      	push	{r3, r4, r5, lr}
 8014b9e:	4604      	mov	r4, r0
  if (p != NULL) {
 8014ba0:	b1c9      	cbz	r1, 8014bd6 <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8014ba2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014ba4:	890a      	ldrh	r2, [r1, #8]
 8014ba6:	4293      	cmp	r3, r2
 8014ba8:	d31a      	bcc.n	8014be0 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 8014baa:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8014bac:	4620      	mov	r0, r4
 8014bae:	6323      	str	r3, [r4, #48]	; 0x30
 8014bb0:	f7f1 faa2 	bl	80060f8 <httpd_post_receive_data>
  if (err != ERR_OK) {
 8014bb4:	b178      	cbz	r0, 8014bd6 <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8014bba:	490a      	ldr	r1, [pc, #40]	; (8014be4 <http_post_rxpbuf+0x48>)
 8014bbc:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8014bc2:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014bc4:	f7f1 faa8 	bl	8006118 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8014bc8:	462a      	mov	r2, r5
 8014bca:	4620      	mov	r0, r4
 8014bcc:	4905      	ldr	r1, [pc, #20]	; (8014be4 <http_post_rxpbuf+0x48>)
}
 8014bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8014bd2:	f7ff bef5 	b.w	80149c0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 8014bd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d0ee      	beq.n	8014bba <http_post_rxpbuf+0x1e>
}
 8014bdc:	2000      	movs	r0, #0
 8014bde:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8014be0:	2300      	movs	r3, #0
 8014be2:	e7e3      	b.n	8014bac <http_post_rxpbuf+0x10>
 8014be4:	20021fc4 	.word	0x20021fc4

08014be8 <http_find_error_file>:
  if (error_nr == 501) {
 8014be8:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 8014bec:	4b17      	ldr	r3, [pc, #92]	; (8014c4c <http_find_error_file+0x64>)
 8014bee:	4291      	cmp	r1, r2
 8014bf0:	4917      	ldr	r1, [pc, #92]	; (8014c50 <http_find_error_file+0x68>)
 8014bf2:	4a18      	ldr	r2, [pc, #96]	; (8014c54 <http_find_error_file+0x6c>)
 8014bf4:	bf18      	it	ne
 8014bf6:	460b      	movne	r3, r1
 8014bf8:	4917      	ldr	r1, [pc, #92]	; (8014c58 <http_find_error_file+0x70>)
{
 8014bfa:	b570      	push	{r4, r5, r6, lr}
 8014bfc:	b084      	sub	sp, #16
    uri3 = "/400.shtml";
 8014bfe:	4e17      	ldr	r6, [pc, #92]	; (8014c5c <http_find_error_file+0x74>)
 8014c00:	bf18      	it	ne
 8014c02:	460e      	movne	r6, r1
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8014c04:	4619      	mov	r1, r3
 8014c06:	9303      	str	r3, [sp, #12]
{
 8014c08:	4604      	mov	r4, r0
    uri3 = "/400.shtml";
 8014c0a:	4d15      	ldr	r5, [pc, #84]	; (8014c60 <http_find_error_file+0x78>)
 8014c0c:	bf08      	it	eq
 8014c0e:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8014c10:	f7ff fd0a 	bl	8014628 <fs_open>
 8014c14:	9b03      	ldr	r3, [sp, #12]
 8014c16:	b128      	cbz	r0, 8014c24 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8014c18:	4629      	mov	r1, r5
 8014c1a:	4620      	mov	r0, r4
 8014c1c:	f7ff fd04 	bl	8014628 <fs_open>
 8014c20:	b948      	cbnz	r0, 8014c36 <http_find_error_file+0x4e>
    uri = uri2;
 8014c22:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8014c24:	2200      	movs	r2, #0
 8014c26:	4621      	mov	r1, r4
 8014c28:	4620      	mov	r0, r4
 8014c2a:	e9cd 2200 	strd	r2, r2, [sp]
 8014c2e:	f7ff fdd7 	bl	80147e0 <http_init_file>
}
 8014c32:	b004      	add	sp, #16
 8014c34:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8014c36:	4631      	mov	r1, r6
 8014c38:	4620      	mov	r0, r4
 8014c3a:	f7ff fcf5 	bl	8014628 <fs_open>
 8014c3e:	b908      	cbnz	r0, 8014c44 <http_find_error_file+0x5c>
    uri = uri3;
 8014c40:	4633      	mov	r3, r6
 8014c42:	e7ef      	b.n	8014c24 <http_find_error_file+0x3c>
    return ERR_ARG;
 8014c44:	f06f 000f 	mvn.w	r0, #15
 8014c48:	e7f3      	b.n	8014c32 <http_find_error_file+0x4a>
 8014c4a:	bf00      	nop
 8014c4c:	0803e1bc 	.word	0x0803e1bc
 8014c50:	0803e1e0 	.word	0x0803e1e0
 8014c54:	0803e1b0 	.word	0x0803e1b0
 8014c58:	0803e1c8 	.word	0x0803e1c8
 8014c5c:	0803e1a4 	.word	0x0803e1a4
 8014c60:	0803e1d4 	.word	0x0803e1d4

08014c64 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4604      	mov	r4, r0
  if (hs != NULL) {
 8014c68:	460d      	mov	r5, r1
 8014c6a:	b391      	cbz	r1, 8014cd2 <http_close_or_abort_conn.constprop.0+0x6e>
    if ((hs->post_content_len_left != 0)
 8014c6c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8014c6e:	bb0b      	cbnz	r3, 8014cb4 <http_close_or_abort_conn.constprop.0+0x50>
  altcp_arg(pcb, NULL);
 8014c70:	2100      	movs	r1, #0
 8014c72:	4620      	mov	r0, r4
 8014c74:	f003 fb16 	bl	80182a4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8014c78:	2100      	movs	r1, #0
 8014c7a:	4620      	mov	r0, r4
 8014c7c:	f003 fb16 	bl	80182ac <tcp_recv>
  altcp_err(pcb, NULL);
 8014c80:	2100      	movs	r1, #0
 8014c82:	4620      	mov	r0, r4
 8014c84:	f003 fb4a 	bl	801831c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8014c88:	2200      	movs	r2, #0
 8014c8a:	4620      	mov	r0, r4
 8014c8c:	4611      	mov	r1, r2
 8014c8e:	f003 fb67 	bl	8018360 <tcp_poll>
  altcp_sent(pcb, NULL);
 8014c92:	2100      	movs	r1, #0
 8014c94:	4620      	mov	r0, r4
 8014c96:	f003 fb25 	bl	80182e4 <tcp_sent>
    http_state_eof(hs);
 8014c9a:	4628      	mov	r0, r5
 8014c9c:	f7ff fd28 	bl	80146f0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	f001 fdcb 	bl	801683c <mem_free>
  err = altcp_close(pcb);
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	f004 f94e 	bl	8018f48 <tcp_close>
  if (err != ERR_OK) {
 8014cac:	4605      	mov	r5, r0
 8014cae:	b948      	cbnz	r0, 8014cc4 <http_close_or_abort_conn.constprop.0+0x60>
}
 8014cb0:	4628      	mov	r0, r5
 8014cb2:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8014cb4:	4911      	ldr	r1, [pc, #68]	; (8014cfc <http_close_or_abort_conn.constprop.0+0x98>)
 8014cb6:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014cb8:	223f      	movs	r2, #63	; 0x3f
 8014cba:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 8014cbc:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014cbe:	f7f1 fa2b 	bl	8006118 <httpd_post_finished>
 8014cc2:	e7d5      	b.n	8014c70 <http_close_or_abort_conn.constprop.0+0xc>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	2204      	movs	r2, #4
 8014cc8:	490d      	ldr	r1, [pc, #52]	; (8014d00 <http_close_or_abort_conn.constprop.0+0x9c>)
 8014cca:	f003 fb49 	bl	8018360 <tcp_poll>
}
 8014cce:	4628      	mov	r0, r5
 8014cd0:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8014cd2:	f003 fae7 	bl	80182a4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8014cd6:	4629      	mov	r1, r5
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f003 fae7 	bl	80182ac <tcp_recv>
  altcp_err(pcb, NULL);
 8014cde:	4629      	mov	r1, r5
 8014ce0:	4620      	mov	r0, r4
 8014ce2:	f003 fb1b 	bl	801831c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	4620      	mov	r0, r4
 8014cea:	462a      	mov	r2, r5
 8014cec:	f003 fb38 	bl	8018360 <tcp_poll>
  altcp_sent(pcb, NULL);
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	f003 faf6 	bl	80182e4 <tcp_sent>
  if (hs != NULL) {
 8014cf8:	e7d5      	b.n	8014ca6 <http_close_or_abort_conn.constprop.0+0x42>
 8014cfa:	bf00      	nop
 8014cfc:	20021fc4 	.word	0x20021fc4
 8014d00:	08015355 	.word	0x08015355

08014d04 <http_eof>:
{
 8014d04:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8014d06:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8014d0a:	b193      	cbz	r3, 8014d32 <http_eof+0x2e>
 8014d0c:	460c      	mov	r4, r1
 8014d0e:	4605      	mov	r5, r0
    http_state_eof(hs);
 8014d10:	4608      	mov	r0, r1
 8014d12:	f7ff fced 	bl	80146f0 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 8014d16:	2234      	movs	r2, #52	; 0x34
 8014d18:	2100      	movs	r1, #0
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f00b fdf0 	bl	8020900 <memset>
    hs->keepalive = 1;
 8014d20:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8014d22:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8014d24:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8014d28:	8b6b      	ldrh	r3, [r5, #26]
 8014d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d2e:	836b      	strh	r3, [r5, #26]
}
 8014d30:	bd38      	pop	{r3, r4, r5, pc}
 8014d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8014d36:	f7ff bf95 	b.w	8014c64 <http_close_or_abort_conn.constprop.0>
 8014d3a:	bf00      	nop

08014d3c <http_send>:
{
 8014d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8014d40:	460d      	mov	r5, r1
{
 8014d42:	b087      	sub	sp, #28
  if (hs == NULL) {
 8014d44:	2900      	cmp	r1, #0
 8014d46:	f000 8157 	beq.w	8014ff8 <http_send+0x2bc>
  if (hs->left == 0) {
 8014d4a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8014d4c:	4681      	mov	r9, r0
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f000 8196 	beq.w	8015080 <http_send+0x344>
  if (hs->ssi) {
 8014d54:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8014d56:	2c00      	cmp	r4, #0
 8014d58:	f000 812b 	beq.w	8014fb2 <http_send+0x276>
  if (ssi->parsed > hs->file) {
 8014d5c:	6826      	ldr	r6, [r4, #0]
 8014d5e:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8014d60:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8014d64:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 8014d66:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (ssi->parsed > hs->file) {
 8014d6a:	f200 80bb 	bhi.w	8014ee4 <http_send+0x1a8>
  u8_t data_to_send = 0;
 8014d6e:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 8014d70:	46b2      	mov	sl, r6
 8014d72:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 8014d76:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8014d7a:	2a04      	cmp	r2, #4
 8014d7c:	d003      	beq.n	8014d86 <http_send+0x4a>
 8014d7e:	68e1      	ldr	r1, [r4, #12]
 8014d80:	2900      	cmp	r1, #0
 8014d82:	f000 8089 	beq.w	8014e98 <http_send+0x15c>
 8014d86:	f1ba 0f00 	cmp.w	sl, #0
 8014d8a:	f040 8215 	bne.w	80151b8 <http_send+0x47c>
    if (len == 0) {
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f000 8124 	beq.w	8014fdc <http_send+0x2a0>
    switch (ssi->tag_state) {
 8014d94:	2a04      	cmp	r2, #4
 8014d96:	d8f0      	bhi.n	8014d7a <http_send+0x3e>
 8014d98:	e8df f002 	tbb	[pc, r2]
 8014d9c:	253f6d5e 	.word	0x253f6d5e
 8014da0:	03          	.byte	0x03
 8014da1:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8014da2:	68a0      	ldr	r0, [r4, #8]
 8014da4:	69a9      	ldr	r1, [r5, #24]
 8014da6:	4288      	cmp	r0, r1
 8014da8:	f240 80e8 	bls.w	8014f7c <http_send+0x240>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8014dac:	6862      	ldr	r2, [r4, #4]
 8014dae:	4291      	cmp	r1, r2
 8014db0:	f200 81e9 	bhi.w	8015186 <http_send+0x44a>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014db4:	1a53      	subs	r3, r2, r1
 8014db6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8014dba:	4283      	cmp	r3, r0
 8014dbc:	f340 8121 	ble.w	8015002 <http_send+0x2c6>
 8014dc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014dc4:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014dc8:	2300      	movs	r3, #0
 8014dca:	f10d 0216 	add.w	r2, sp, #22
 8014dce:	4648      	mov	r0, r9
 8014dd0:	f7ff fc5a 	bl	8014688 <http_write>
          if (err == ERR_OK) {
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	f000 81ea 	beq.w	80151ae <http_send+0x472>
 8014dda:	4682      	mov	sl, r0
 8014ddc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014de0:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8014de4:	e7c9      	b.n	8014d7a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014de6:	6821      	ldr	r1, [r4, #0]
 8014de8:	8a20      	ldrh	r0, [r4, #16]
 8014dea:	f891 e000 	ldrb.w	lr, [r1]
 8014dee:	2800      	cmp	r0, #0
 8014df0:	f040 8096 	bne.w	8014f20 <http_send+0x1e4>
 8014df4:	f1ae 0709 	sub.w	r7, lr, #9
 8014df8:	b2ff      	uxtb	r7, r7
 8014dfa:	2f17      	cmp	r7, #23
 8014dfc:	f200 8090 	bhi.w	8014f20 <http_send+0x1e4>
 8014e00:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8015150 <http_send+0x414>
 8014e04:	fa2c f707 	lsr.w	r7, ip, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014e08:	07ff      	lsls	r7, r7, #31
 8014e0a:	f140 8089 	bpl.w	8014f20 <http_send+0x1e4>
          ssi->parse_left--;
 8014e0e:	68e0      	ldr	r0, [r4, #12]
          ssi->parsed++;
 8014e10:	3101      	adds	r1, #1
          ssi->parse_left--;
 8014e12:	3801      	subs	r0, #1
          ssi->parsed++;
 8014e14:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8014e16:	60e0      	str	r0, [r4, #12]
          break;
 8014e18:	e7af      	b.n	8014d7a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014e1a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8014e1e:	f1bc 0f00 	cmp.w	ip, #0
 8014e22:	f040 8092 	bne.w	8014f4a <http_send+0x20e>
 8014e26:	6821      	ldr	r1, [r4, #0]
 8014e28:	780f      	ldrb	r7, [r1, #0]
 8014e2a:	f1a7 0009 	sub.w	r0, r7, #9
 8014e2e:	b2c0      	uxtb	r0, r0
 8014e30:	2817      	cmp	r0, #23
 8014e32:	f240 811d 	bls.w	8015070 <http_send+0x334>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8014e36:	48bf      	ldr	r0, [pc, #764]	; (8015134 <http_send+0x3f8>)
 8014e38:	f894 e014 	ldrb.w	lr, [r4, #20]
 8014e3c:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8014e40:	6840      	ldr	r0, [r0, #4]
 8014e42:	7800      	ldrb	r0, [r0, #0]
 8014e44:	42b8      	cmp	r0, r7
 8014e46:	d067      	beq.n	8014f18 <http_send+0x1dc>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8014e48:	f10c 0001 	add.w	r0, ip, #1
 8014e4c:	44a4      	add	ip, r4
 8014e4e:	8220      	strh	r0, [r4, #16]
 8014e50:	7808      	ldrb	r0, [r1, #0]
 8014e52:	f88c 0016 	strb.w	r0, [ip, #22]
 8014e56:	e7da      	b.n	8014e0e <http_send+0xd2>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8014e58:	6821      	ldr	r1, [r4, #0]
 8014e5a:	7808      	ldrb	r0, [r1, #0]
 8014e5c:	283c      	cmp	r0, #60	; 0x3c
 8014e5e:	d002      	beq.n	8014e66 <http_send+0x12a>
 8014e60:	282f      	cmp	r0, #47	; 0x2f
 8014e62:	d1d4      	bne.n	8014e0e <http_send+0xd2>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8014e64:	2201      	movs	r2, #1
            ssi->tag_state = TAG_LEADIN;
 8014e66:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 8014e68:	7522      	strb	r2, [r4, #20]
            ssi->tag_started = ssi->parsed;
 8014e6a:	6061      	str	r1, [r4, #4]
            break;
 8014e6c:	4602      	mov	r2, r0
            ssi->tag_state = TAG_LEADIN;
 8014e6e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8014e72:	8220      	strh	r0, [r4, #16]
            break;
 8014e74:	e7cb      	b.n	8014e0e <http_send+0xd2>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8014e76:	49af      	ldr	r1, [pc, #700]	; (8015134 <http_send+0x3f8>)
 8014e78:	7d20      	ldrb	r0, [r4, #20]
 8014e7a:	8a27      	ldrh	r7, [r4, #16]
 8014e7c:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8014e80:	5dc9      	ldrb	r1, [r1, r7]
 8014e82:	2900      	cmp	r1, #0
 8014e84:	f040 8086 	bne.w	8014f94 <http_send+0x258>
          ssi->tag_state = TAG_FOUND;
 8014e88:	2202      	movs	r2, #2
          ssi->tag_index = 0;
 8014e8a:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8014e8c:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8014e8e:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8014e92:	2900      	cmp	r1, #0
 8014e94:	f47f af77 	bne.w	8014d86 <http_send+0x4a>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8014e98:	6824      	ldr	r4, [r4, #0]
 8014e9a:	69a9      	ldr	r1, [r5, #24]
 8014e9c:	428c      	cmp	r4, r1
 8014e9e:	f240 809d 	bls.w	8014fdc <http_send+0x2a0>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014ea2:	1a64      	subs	r4, r4, r1
 8014ea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	4648      	mov	r0, r9
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014eac:	4294      	cmp	r4, r2
 8014eae:	bfa8      	it	ge
 8014eb0:	4614      	movge	r4, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014eb2:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014eb6:	f8ad 4016 	strh.w	r4, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014eba:	f7ff fbe5 	bl	8014688 <http_write>
    if (err == ERR_OK) {
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	f040 808c 	bne.w	8014fdc <http_send+0x2a0>
    hs->file += len;
 8014ec4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 8014ec8:	2601      	movs	r6, #1
    hs->file += len;
 8014eca:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8014ecc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8014ece:	440a      	add	r2, r1
    hs->left -= len;
 8014ed0:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8014ed2:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 8014ed4:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	f000 8084 	beq.w	8014fe4 <http_send+0x2a8>
}
 8014edc:	4630      	mov	r0, r6
 8014ede:	b007      	add	sp, #28
 8014ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014ee4:	1a76      	subs	r6, r6, r1
 8014ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014eea:	2300      	movs	r3, #0
 8014eec:	4648      	mov	r0, r9
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014eee:	4296      	cmp	r6, r2
 8014ef0:	bfa8      	it	ge
 8014ef2:	4616      	movge	r6, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014ef4:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014ef8:	f8ad 6016 	strh.w	r6, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014efc:	f7ff fbc4 	bl	8014688 <http_write>
    if (err == ERR_OK) {
 8014f00:	4682      	mov	sl, r0
 8014f02:	2800      	cmp	r0, #0
 8014f04:	f000 8149 	beq.w	801519a <http_send+0x45e>
  u8_t data_to_send = 0;
 8014f08:	2600      	movs	r6, #0
    if (altcp_sndbuf(pcb) == 0) {
 8014f0a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d064      	beq.n	8014fdc <http_send+0x2a0>
 8014f12:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8014f16:	e72c      	b.n	8014d72 <http_send+0x36>
            ssi->tag_state = TAG_NONE;
 8014f18:	2200      	movs	r2, #0
 8014f1a:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 8014f1e:	e776      	b.n	8014e0e <http_send+0xd2>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8014f20:	f894 c014 	ldrb.w	ip, [r4, #20]
 8014f24:	4f83      	ldr	r7, [pc, #524]	; (8015134 <http_send+0x3f8>)
 8014f26:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 8014f2a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 8014f2e:	f81c 7000 	ldrb.w	r7, [ip, r0]
 8014f32:	4577      	cmp	r7, lr
 8014f34:	f000 80b3 	beq.w	801509e <http_send+0x362>
          ssi->parse_left--;
 8014f38:	68e2      	ldr	r2, [r4, #12]
          ssi->parsed++;
 8014f3a:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8014f3c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8014f40:	1e50      	subs	r0, r2, #1
          ssi->parsed++;
 8014f42:	6021      	str	r1, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8014f44:	2200      	movs	r2, #0
          ssi->parse_left--;
 8014f46:	60e0      	str	r0, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8014f48:	e719      	b.n	8014d7e <http_send+0x42>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8014f4a:	4f7a      	ldr	r7, [pc, #488]	; (8015134 <http_send+0x3f8>)
 8014f4c:	f894 e014 	ldrb.w	lr, [r4, #20]
 8014f50:	6821      	ldr	r1, [r4, #0]
 8014f52:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 8014f56:	7808      	ldrb	r0, [r1, #0]
 8014f58:	f8de e004 	ldr.w	lr, [lr, #4]
 8014f5c:	f89e 8000 	ldrb.w	r8, [lr]
 8014f60:	4580      	cmp	r8, r0
 8014f62:	d06b      	beq.n	801503c <http_send+0x300>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8014f64:	3809      	subs	r0, #9
 8014f66:	b2c0      	uxtb	r0, r0
 8014f68:	2817      	cmp	r0, #23
 8014f6a:	d961      	bls.n	8015030 <http_send+0x2f4>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8014f6c:	f1bc 0f07 	cmp.w	ip, #7
 8014f70:	f67f af6a 	bls.w	8014e48 <http_send+0x10c>
            ssi->tag_state = TAG_NONE;
 8014f74:	2200      	movs	r2, #0
 8014f76:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
        ssi->parse_left--;
 8014f7a:	e748      	b.n	8014e0e <http_send+0xd2>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8014f7c:	8a27      	ldrh	r7, [r4, #16]
 8014f7e:	8a62      	ldrh	r2, [r4, #18]
 8014f80:	4297      	cmp	r7, r2
 8014f82:	f0c0 80e7 	bcc.w	8015154 <http_send+0x418>
              ssi->parsed = ssi->tag_end;
 8014f86:	2200      	movs	r2, #0
              ssi->tag_index = 0;
 8014f88:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8014f8c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8014f90:	6020      	str	r0, [r4, #0]
 8014f92:	e6f4      	b.n	8014d7e <http_send+0x42>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8014f94:	6820      	ldr	r0, [r4, #0]
 8014f96:	f890 c000 	ldrb.w	ip, [r0]
 8014f9a:	458c      	cmp	ip, r1
 8014f9c:	f000 80c7 	beq.w	801512e <http_send+0x3f2>
            ssi->tag_state = TAG_NONE;
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8014fa6:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 8014fa8:	3001      	adds	r0, #1
          ssi->parse_left--;
 8014faa:	3901      	subs	r1, #1
          ssi->parsed++;
 8014fac:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8014fae:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8014fb0:	e6e3      	b.n	8014d7a <http_send+0x3e>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8014fb2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 8014fb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014fba:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014fbc:	4623      	mov	r3, r4
 8014fbe:	f10d 0216 	add.w	r2, sp, #22
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8014fc2:	4286      	cmp	r6, r0
 8014fc4:	bf88      	it	hi
 8014fc6:	460e      	movhi	r6, r1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014fc8:	69a9      	ldr	r1, [r5, #24]
 8014fca:	4648      	mov	r0, r9
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8014fcc:	f8ad 6016 	strh.w	r6, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014fd0:	f7ff fb5a 	bl	8014688 <http_write>
  if (err == ERR_OK) {
 8014fd4:	2800      	cmp	r0, #0
 8014fd6:	f43f af75 	beq.w	8014ec4 <http_send+0x188>
  u8_t data_to_send = 0;
 8014fda:	4626      	mov	r6, r4
 8014fdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	f47f af7c 	bne.w	8014edc <http_send+0x1a0>
 8014fe4:	6968      	ldr	r0, [r5, #20]
 8014fe6:	f7ff fb4b 	bl	8014680 <fs_bytes_left>
 8014fea:	2800      	cmp	r0, #0
 8014fec:	f73f af76 	bgt.w	8014edc <http_send+0x1a0>
    http_eof(pcb, hs);
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	4648      	mov	r0, r9
 8014ff4:	f7ff fe86 	bl	8014d04 <http_eof>
      return 0;
 8014ff8:	2600      	movs	r6, #0
}
 8014ffa:	4630      	mov	r0, r6
 8014ffc:	b007      	add	sp, #28
 8014ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015002:	b29b      	uxth	r3, r3
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015004:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 8015008:	2b00      	cmp	r3, #0
 801500a:	f47f aedd 	bne.w	8014dc8 <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801500e:	4291      	cmp	r1, r2
 8015010:	d305      	bcc.n	801501e <http_send+0x2e2>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8015012:	68a0      	ldr	r0, [r4, #8]
 8015014:	1a82      	subs	r2, r0, r2
 8015016:	4413      	add	r3, r2
 8015018:	b29b      	uxth	r3, r3
 801501a:	f8ad 3016 	strh.w	r3, [sp, #22]
            hs->left -= len;
 801501e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            hs->file += len;
 8015020:	4419      	add	r1, r3
            data_to_send = 1;
 8015022:	2601      	movs	r6, #1
            hs->left -= len;
 8015024:	1ad2      	subs	r2, r2, r3
            hs->file += len;
 8015026:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8015028:	626a      	str	r2, [r5, #36]	; 0x24
 801502a:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 801502e:	e6a4      	b.n	8014d7a <http_send+0x3e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8015030:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8015150 <http_send+0x414>
 8015034:	fa28 f000 	lsr.w	r0, r8, r0
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8015038:	07c0      	lsls	r0, r0, #31
 801503a:	d597      	bpl.n	8014f6c <http_send+0x230>
            ssi->tag_state = TAG_LEADOUT;
 801503c:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801503e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8015042:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8015046:	f200 80c2 	bhi.w	80151ce <http_send+0x492>
            ssi->tag_name[ssi->tag_index] = '\0';
 801504a:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801504e:	f884 c015 	strb.w	ip, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8015052:	f883 b016 	strb.w	fp, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8015056:	f89e 3000 	ldrb.w	r3, [lr]
 801505a:	780a      	ldrb	r2, [r1, #0]
 801505c:	429a      	cmp	r2, r3
 801505e:	f000 80af 	beq.w	80151c0 <http_send+0x484>
              ssi->tag_index = 0;
 8015062:	f8a4 b010 	strh.w	fp, [r4, #16]
 8015066:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 801506a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801506e:	e6ce      	b.n	8014e0e <http_send+0xd2>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8015070:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8015150 <http_send+0x414>
 8015074:	fa2e f000 	lsr.w	r0, lr, r0
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8015078:	07c0      	lsls	r0, r0, #31
 801507a:	f57f aedc 	bpl.w	8014e36 <http_send+0xfa>
 801507e:	e6c6      	b.n	8014e0e <http_send+0xd2>
  if (hs->handle == NULL) {
 8015080:	6948      	ldr	r0, [r1, #20]
 8015082:	2800      	cmp	r0, #0
 8015084:	d0b4      	beq.n	8014ff0 <http_send+0x2b4>
  bytes_left = fs_bytes_left(hs->handle);
 8015086:	f7ff fafb 	bl	8014680 <fs_bytes_left>
  if (bytes_left <= 0) {
 801508a:	2800      	cmp	r0, #0
 801508c:	ddb0      	ble.n	8014ff0 <http_send+0x2b4>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801508e:	4b2a      	ldr	r3, [pc, #168]	; (8015138 <http_send+0x3fc>)
 8015090:	f240 429d 	movw	r2, #1181	; 0x49d
 8015094:	4929      	ldr	r1, [pc, #164]	; (801513c <http_send+0x400>)
 8015096:	482a      	ldr	r0, [pc, #168]	; (8015140 <http_send+0x404>)
 8015098:	f00c fba4 	bl	80217e4 <iprintf>
  return 1;
 801509c:	e65a      	b.n	8014d54 <http_send+0x18>
          ssi->parse_left--;
 801509e:	68e7      	ldr	r7, [r4, #12]
          ssi->tag_index++;
 80150a0:	3001      	adds	r0, #1
          ssi->parsed++;
 80150a2:	3101      	adds	r1, #1
          ssi->tag_index++;
 80150a4:	b280      	uxth	r0, r0
          ssi->parse_left--;
 80150a6:	3f01      	subs	r7, #1
          ssi->parsed++;
 80150a8:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 80150aa:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 80150ac:	60e7      	str	r7, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80150ae:	f81c 1000 	ldrb.w	r1, [ip, r0]
 80150b2:	2900      	cmp	r1, #0
 80150b4:	f47f ae61 	bne.w	8014d7a <http_send+0x3e>
  ssi = hs->ssi;
 80150b8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80150bc:	f1b8 0f00 	cmp.w	r8, #0
 80150c0:	f000 8116 	beq.w	80152f0 <http_send+0x5b4>
  if (httpd_ssi_handler
 80150c4:	4b1f      	ldr	r3, [pc, #124]	; (8015144 <http_send+0x408>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	9300      	str	r3, [sp, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f000 808f 	beq.w	80151ee <http_send+0x4b2>
      && httpd_tags && httpd_num_tags
 80150d0:	4b1d      	ldr	r3, [pc, #116]	; (8015148 <http_send+0x40c>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	2a00      	cmp	r2, #0
 80150d6:	f000 808a 	beq.w	80151ee <http_send+0x4b2>
 80150da:	4b1c      	ldr	r3, [pc, #112]	; (801514c <http_send+0x410>)
 80150dc:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80150de:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 80150e0:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80150e2:	f340 8084 	ble.w	80151ee <http_send+0x4b2>
 80150e6:	f108 0716 	add.w	r7, r8, #22
 80150ea:	3a04      	subs	r2, #4
 80150ec:	2300      	movs	r3, #0
 80150ee:	9401      	str	r4, [sp, #4]
 80150f0:	9602      	str	r6, [sp, #8]
 80150f2:	463e      	mov	r6, r7
 80150f4:	9503      	str	r5, [sp, #12]
 80150f6:	461c      	mov	r4, r3
 80150f8:	4617      	mov	r7, r2
 80150fa:	460d      	mov	r5, r1
 80150fc:	e003      	b.n	8015106 <http_send+0x3ca>
 80150fe:	3401      	adds	r4, #1
 8015100:	42a5      	cmp	r5, r4
 8015102:	f000 8106 	beq.w	8015312 <http_send+0x5d6>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8015106:	f857 1f04 	ldr.w	r1, [r7, #4]!
 801510a:	4630      	mov	r0, r6
 801510c:	f7eb f898 	bl	8000240 <strcmp>
 8015110:	2800      	cmp	r0, #0
 8015112:	d1f4      	bne.n	80150fe <http_send+0x3c2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8015114:	4623      	mov	r3, r4
 8015116:	22fe      	movs	r2, #254	; 0xfe
 8015118:	f108 011f 	add.w	r1, r8, #31
 801511c:	9d03      	ldr	r5, [sp, #12]
 801511e:	4618      	mov	r0, r3
 8015120:	9b00      	ldr	r3, [sp, #0]
 8015122:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 8015126:	4798      	blx	r3
 8015128:	f8a8 0012 	strh.w	r0, [r8, #18]
          return;
 801512c:	e0a0      	b.n	8015270 <http_send+0x534>
            ssi->tag_index++;
 801512e:	3701      	adds	r7, #1
 8015130:	8227      	strh	r7, [r4, #16]
 8015132:	e738      	b.n	8014fa6 <http_send+0x26a>
 8015134:	0803e42c 	.word	0x0803e42c
 8015138:	0803e10c 	.word	0x0803e10c
 801513c:	0803e1ec 	.word	0x0803e1ec
 8015140:	08027fec 	.word	0x08027fec
 8015144:	20022408 	.word	0x20022408
 8015148:	2002240c 	.word	0x2002240c
 801514c:	20022004 	.word	0x20022004
 8015150:	00800013 	.word	0x00800013
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8015154:	f107 011f 	add.w	r1, r7, #31
            len = (ssi->tag_insert_len - ssi->tag_index);
 8015158:	1bd7      	subs	r7, r2, r7
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 801515a:	2301      	movs	r3, #1
 801515c:	f10d 0216 	add.w	r2, sp, #22
 8015160:	4421      	add	r1, r4
 8015162:	4648      	mov	r0, r9
            len = (ssi->tag_insert_len - ssi->tag_index);
 8015164:	f8ad 7016 	strh.w	r7, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8015168:	f7ff fa8e 	bl	8014688 <http_write>
              ssi->tag_index += len;
 801516c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            if (err == ERR_OK) {
 8015170:	4682      	mov	sl, r0
 8015172:	2800      	cmp	r0, #0
 8015174:	f47f ae34 	bne.w	8014de0 <http_send+0xa4>
              ssi->tag_index += len;
 8015178:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 801517a:	2601      	movs	r6, #1
 801517c:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 8015180:	4419      	add	r1, r3
 8015182:	8221      	strh	r1, [r4, #16]
 8015184:	e5f9      	b.n	8014d7a <http_send+0x3e>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8015186:	f240 52ac 	movw	r2, #1452	; 0x5ac
 801518a:	4964      	ldr	r1, [pc, #400]	; (801531c <http_send+0x5e0>)
 801518c:	4b64      	ldr	r3, [pc, #400]	; (8015320 <http_send+0x5e4>)
 801518e:	4865      	ldr	r0, [pc, #404]	; (8015324 <http_send+0x5e8>)
 8015190:	f00c fb28 	bl	80217e4 <iprintf>
 8015194:	6862      	ldr	r2, [r4, #4]
 8015196:	69a9      	ldr	r1, [r5, #24]
 8015198:	e60c      	b.n	8014db4 <http_send+0x78>
      hs->file += len;
 801519a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      data_to_send = 1;
 801519e:	2601      	movs	r6, #1
      hs->file += len;
 80151a0:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 80151a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 80151a4:	440a      	add	r2, r1
      hs->left -= len;
 80151a6:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 80151a8:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 80151aa:	626b      	str	r3, [r5, #36]	; 0x24
 80151ac:	e6ad      	b.n	8014f0a <http_send+0x1ce>
 80151ae:	6862      	ldr	r2, [r4, #4]
 80151b0:	69a9      	ldr	r1, [r5, #24]
 80151b2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80151b6:	e72a      	b.n	801500e <http_send+0x2d2>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80151b8:	2a04      	cmp	r2, #4
 80151ba:	f43f af0f 	beq.w	8014fdc <http_send+0x2a0>
 80151be:	e66b      	b.n	8014e98 <http_send+0x15c>
              ssi->tag_index = 1;
 80151c0:	2301      	movs	r3, #1
 80151c2:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 80151c6:	8223      	strh	r3, [r4, #16]
 80151c8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80151cc:	e61f      	b.n	8014e0e <http_send+0xd2>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80151ce:	4b54      	ldr	r3, [pc, #336]	; (8015320 <http_send+0x5e4>)
 80151d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80151d4:	4954      	ldr	r1, [pc, #336]	; (8015328 <http_send+0x5ec>)
 80151d6:	4853      	ldr	r0, [pc, #332]	; (8015324 <http_send+0x5e8>)
 80151d8:	f00c fb04 	bl	80217e4 <iprintf>
 80151dc:	7d23      	ldrb	r3, [r4, #20]
 80151de:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80151e2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 80151e6:	6821      	ldr	r1, [r4, #0]
 80151e8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 80151ec:	e72d      	b.n	801504a <http_send+0x30e>
 80151ee:	f108 0716 	add.w	r7, r8, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80151f2:	4638      	mov	r0, r7
 80151f4:	f7eb f82e 	bl	8000254 <strlen>
 80151f8:	28e4      	cmp	r0, #228	; 0xe4
 80151fa:	d869      	bhi.n	80152d0 <http_send+0x594>
 80151fc:	2809      	cmp	r0, #9
 80151fe:	bf28      	it	cs
 8015200:	2009      	movcs	r0, #9
 8015202:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8015206:	4686      	mov	lr, r0
 8015208:	9300      	str	r3, [sp, #0]
 801520a:	f100 0319 	add.w	r3, r0, #25
 801520e:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015210:	f8df c124 	ldr.w	ip, [pc, #292]	; 8015338 <http_send+0x5fc>
 8015214:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015218:	f8bc c000 	ldrh.w	ip, [ip]
 801521c:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015220:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015224:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 8015228:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 801522c:	4639      	mov	r1, r7
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801522e:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015232:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8015234:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8015238:	f00b fb3a 	bl	80208b0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801523c:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 801523e:	4b3b      	ldr	r3, [pc, #236]	; (801532c <http_send+0x5f0>)
 8015240:	9900      	ldr	r1, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015242:	4442      	add	r2, r8
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015244:	6818      	ldr	r0, [r3, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8015246:	4694      	mov	ip, r2
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015248:	889f      	ldrh	r7, [r3, #4]
 801524a:	eb08 0201 	add.w	r2, r8, r1
 801524e:	799b      	ldrb	r3, [r3, #6]
 8015250:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8015254:	f108 001f 	add.w	r0, r8, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8015258:	8097      	strh	r7, [r2, #4]
 801525a:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 801525c:	f88c b01f 	strb.w	fp, [ip, #31]
  len = strlen(ssi->tag_insert);
 8015260:	f7ea fff8 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8015264:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8015268:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 801526a:	d239      	bcs.n	80152e0 <http_send+0x5a4>
  ssi->tag_insert_len = (u16_t)len;
 801526c:	f8a8 7012 	strh.w	r7, [r8, #18]
            ssi->tag_state = TAG_SENDING;
 8015270:	2204      	movs	r2, #4
            ssi->parsed = ssi->tag_started;
 8015272:	e9d4 3700 	ldrd	r3, r7, [r4]
            ssi->tag_state = TAG_SENDING;
 8015276:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 801527a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 801527c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8015280:	428b      	cmp	r3, r1
            ssi->tag_end = ssi->parsed;
 8015282:	60a3      	str	r3, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8015284:	6027      	str	r7, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8015286:	d802      	bhi.n	801528e <http_send+0x552>
 8015288:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801528c:	e57b      	b.n	8014d86 <http_send+0x4a>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801528e:	1a7f      	subs	r7, r7, r1
 8015290:	f64f 72ff 	movw	r2, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8015294:	2300      	movs	r3, #0
 8015296:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8015298:	4297      	cmp	r7, r2
 801529a:	bfa8      	it	ge
 801529c:	4617      	movge	r7, r2
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801529e:	f10d 0216 	add.w	r2, sp, #22
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80152a2:	f8ad 7016 	strh.w	r7, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80152a6:	f7ff f9ef 	bl	8014688 <http_write>
              if (err == ERR_OK) {
 80152aa:	4682      	mov	sl, r0
 80152ac:	2800      	cmp	r0, #0
 80152ae:	f47f ad95 	bne.w	8014ddc <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 80152b2:	6861      	ldr	r1, [r4, #4]
 80152b4:	69aa      	ldr	r2, [r5, #24]
 80152b6:	4291      	cmp	r1, r2
 80152b8:	d922      	bls.n	8015300 <http_send+0x5c4>
 80152ba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
                hs->left -= len;
 80152be:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 80152c0:	441a      	add	r2, r3
                data_to_send = 1;
 80152c2:	2601      	movs	r6, #1
                hs->left -= len;
 80152c4:	1ac9      	subs	r1, r1, r3
                hs->file += len;
 80152c6:	61aa      	str	r2, [r5, #24]
                hs->left -= len;
 80152c8:	6269      	str	r1, [r5, #36]	; 0x24
 80152ca:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 80152ce:	e554      	b.n	8014d7a <http_send+0x3e>
 80152d0:	233a      	movs	r3, #58	; 0x3a
 80152d2:	f04f 0c22 	mov.w	ip, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 80152d6:	f04f 0e09 	mov.w	lr, #9
 80152da:	e9cd 3c00 	strd	r3, ip, [sp]
 80152de:	e797      	b.n	8015210 <http_send+0x4d4>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80152e0:	4b0f      	ldr	r3, [pc, #60]	; (8015320 <http_send+0x5e4>)
 80152e2:	f240 323f 	movw	r2, #831	; 0x33f
 80152e6:	4912      	ldr	r1, [pc, #72]	; (8015330 <http_send+0x5f4>)
 80152e8:	480e      	ldr	r0, [pc, #56]	; (8015324 <http_send+0x5e8>)
 80152ea:	f00c fa7b 	bl	80217e4 <iprintf>
 80152ee:	e7bd      	b.n	801526c <http_send+0x530>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80152f0:	4b0b      	ldr	r3, [pc, #44]	; (8015320 <http_send+0x5e4>)
 80152f2:	f240 3206 	movw	r2, #774	; 0x306
 80152f6:	490f      	ldr	r1, [pc, #60]	; (8015334 <http_send+0x5f8>)
 80152f8:	480a      	ldr	r0, [pc, #40]	; (8015324 <http_send+0x5e8>)
 80152fa:	f00c fa73 	bl	80217e4 <iprintf>
 80152fe:	e6e1      	b.n	80150c4 <http_send+0x388>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8015300:	68a3      	ldr	r3, [r4, #8]
 8015302:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8015306:	1a5b      	subs	r3, r3, r1
 8015308:	4403      	add	r3, r0
 801530a:	b29b      	uxth	r3, r3
 801530c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015310:	e7d5      	b.n	80152be <http_send+0x582>
 8015312:	4637      	mov	r7, r6
 8015314:	9c01      	ldr	r4, [sp, #4]
 8015316:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 801531a:	e76a      	b.n	80151f2 <http_send+0x4b6>
 801531c:	0803e274 	.word	0x0803e274
 8015320:	0803e10c 	.word	0x0803e10c
 8015324:	08027fec 	.word	0x08027fec
 8015328:	0803e224 	.word	0x0803e224
 801532c:	0803e25c 	.word	0x0803e25c
 8015330:	0803e264 	.word	0x0803e264
 8015334:	0803e23c 	.word	0x0803e23c
 8015338:	0803e248 	.word	0x0803e248

0801533c <http_sent>:
{
 801533c:	b508      	push	{r3, lr}
  if (hs == NULL) {
 801533e:	4603      	mov	r3, r0
 8015340:	b130      	cbz	r0, 8015350 <http_sent+0x14>
  hs->retries = 0;
 8015342:	2200      	movs	r2, #0
 8015344:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8015346:	4619      	mov	r1, r3
  hs->retries = 0;
 8015348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 801534c:	f7ff fcf6 	bl	8014d3c <http_send>
}
 8015350:	2000      	movs	r0, #0
 8015352:	bd08      	pop	{r3, pc}

08015354 <http_poll>:
{
 8015354:	b510      	push	{r4, lr}
 8015356:	460c      	mov	r4, r1
  if (hs == NULL) {
 8015358:	b1a8      	cbz	r0, 8015386 <http_poll+0x32>
    hs->retries++;
 801535a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 801535e:	3301      	adds	r3, #1
 8015360:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8015362:	2b04      	cmp	r3, #4
    hs->retries++;
 8015364:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8015368:	d019      	beq.n	801539e <http_poll+0x4a>
    if (hs->handle) {
 801536a:	6943      	ldr	r3, [r0, #20]
 801536c:	b123      	cbz	r3, 8015378 <http_poll+0x24>
      if (http_send(pcb, hs)) {
 801536e:	4601      	mov	r1, r0
 8015370:	4620      	mov	r0, r4
 8015372:	f7ff fce3 	bl	8014d3c <http_send>
 8015376:	b908      	cbnz	r0, 801537c <http_poll+0x28>
  return ERR_OK;
 8015378:	2000      	movs	r0, #0
}
 801537a:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 801537c:	4620      	mov	r0, r4
 801537e:	f006 fca1 	bl	801bcc4 <tcp_output>
  return ERR_OK;
 8015382:	2000      	movs	r0, #0
 8015384:	e7f9      	b.n	801537a <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8015386:	4601      	mov	r1, r0
 8015388:	4620      	mov	r0, r4
 801538a:	f7ff fc6b 	bl	8014c64 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 801538e:	3001      	adds	r0, #1
 8015390:	d1f2      	bne.n	8015378 <http_poll+0x24>
      altcp_abort(pcb);
 8015392:	4620      	mov	r0, r4
 8015394:	f003 fbd2 	bl	8018b3c <tcp_abort>
      return ERR_ABRT;
 8015398:	f06f 000c 	mvn.w	r0, #12
}
 801539c:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 801539e:	4601      	mov	r1, r0
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7ff fc5f 	bl	8014c64 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 80153a6:	2000      	movs	r0, #0
}
 80153a8:	bd10      	pop	{r4, pc}
 80153aa:	bf00      	nop

080153ac <http_recv>:
{
 80153ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b0:	4605      	mov	r5, r0
 80153b2:	b08d      	sub	sp, #52	; 0x34
 80153b4:	460e      	mov	r6, r1
 80153b6:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80153b8:	b9ab      	cbnz	r3, 80153e6 <http_recv+0x3a>
 80153ba:	fab2 f782 	clz	r7, r2
 80153be:	097f      	lsrs	r7, r7, #5
 80153c0:	b1ca      	cbz	r2, 80153f6 <http_recv+0x4a>
 80153c2:	b188      	cbz	r0, 80153e8 <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 80153c4:	8911      	ldrh	r1, [r2, #8]
 80153c6:	4630      	mov	r0, r6
 80153c8:	f002 fee2 	bl	8018190 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 80153cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	f040 8140 	bne.w	8015654 <http_recv+0x2a8>
    if (hs->handle == NULL) {
 80153d4:	696b      	ldr	r3, [r5, #20]
 80153d6:	b1b3      	cbz	r3, 8015406 <http_recv+0x5a>
      pbuf_free(p);
 80153d8:	4620      	mov	r0, r4
 80153da:	f002 f8eb 	bl	80175b4 <pbuf_free>
}
 80153de:	2000      	movs	r0, #0
 80153e0:	b00d      	add	sp, #52	; 0x34
 80153e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 80153e6:	b132      	cbz	r2, 80153f6 <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 80153e8:	4630      	mov	r0, r6
 80153ea:	8921      	ldrh	r1, [r4, #8]
 80153ec:	f002 fed0 	bl	8018190 <tcp_recved>
      pbuf_free(p);
 80153f0:	4620      	mov	r0, r4
 80153f2:	f002 f8df 	bl	80175b4 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 80153f6:	4629      	mov	r1, r5
 80153f8:	4630      	mov	r0, r6
 80153fa:	f7ff fc33 	bl	8014c64 <http_close_or_abort_conn.constprop.0>
}
 80153fe:	2000      	movs	r0, #0
 8015400:	b00d      	add	sp, #52	; 0x34
 8015402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8015406:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8015408:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801540a:	2b00      	cmp	r3, #0
 801540c:	f040 8179 	bne.w	8015702 <http_recv+0x356>
  if (hs->req == NULL) {
 8015410:	2800      	cmp	r0, #0
 8015412:	f000 813a 	beq.w	801568a <http_recv+0x2de>
    pbuf_cat(hs->req, p);
 8015416:	4621      	mov	r1, r4
 8015418:	f002 fa4e 	bl	80178b8 <pbuf_cat>
  pbuf_ref(p);
 801541c:	4620      	mov	r0, r4
 801541e:	f002 fa37 	bl	8017890 <pbuf_ref>
  if (hs->req->next != NULL) {
 8015422:	6a28      	ldr	r0, [r5, #32]
 8015424:	6803      	ldr	r3, [r0, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 8131 	beq.w	801568e <http_recv+0x2e2>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801542c:	8907      	ldrh	r7, [r0, #8]
 801542e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8015432:	49bf      	ldr	r1, [pc, #764]	; (8015730 <http_recv+0x384>)
 8015434:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8015436:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8015438:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 801543a:	bf28      	it	cs
 801543c:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 801543e:	463a      	mov	r2, r7
 8015440:	f002 fb50 	bl	8017ae4 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8015444:	2f06      	cmp	r7, #6
 8015446:	f240 80f3 	bls.w	8015630 <http_recv+0x284>
    crlf = lwip_strnstr(data, CRLF, data_len);
 801544a:	463a      	mov	r2, r7
 801544c:	49b9      	ldr	r1, [pc, #740]	; (8015734 <http_recv+0x388>)
 801544e:	4640      	mov	r0, r8
 8015450:	f000 fa62 	bl	8015918 <lwip_strnstr>
    if (crlf != NULL) {
 8015454:	2800      	cmp	r0, #0
 8015456:	f000 80eb 	beq.w	8015630 <http_recv+0x284>
      if (!strncmp(data, "GET ", 4)) {
 801545a:	2204      	movs	r2, #4
 801545c:	49b6      	ldr	r1, [pc, #728]	; (8015738 <http_recv+0x38c>)
 801545e:	4640      	mov	r0, r8
 8015460:	f00d f944 	bl	80226ec <strncmp>
 8015464:	4682      	mov	sl, r0
 8015466:	2800      	cmp	r0, #0
 8015468:	f040 811c 	bne.w	80156a4 <http_recv+0x2f8>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 801546c:	1f3a      	subs	r2, r7, #4
 801546e:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8015472:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8015476:	49b1      	ldr	r1, [pc, #708]	; (801573c <http_recv+0x390>)
 8015478:	b292      	uxth	r2, r2
 801547a:	4658      	mov	r0, fp
        sp1 = data + 3;
 801547c:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 801547e:	9205      	str	r2, [sp, #20]
 8015480:	f000 fa4a 	bl	8015918 <lwip_strnstr>
      if (sp2 == NULL) {
 8015484:	9a05      	ldr	r2, [sp, #20]
 8015486:	4681      	mov	r9, r0
 8015488:	2800      	cmp	r0, #0
 801548a:	f000 8127 	beq.w	80156dc <http_recv+0x330>
      int is_09 = 0;
 801548e:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8015490:	9305      	str	r3, [sp, #20]
 8015492:	f1b9 0f00 	cmp.w	r9, #0
 8015496:	f000 80cb 	beq.w	8015630 <http_recv+0x284>
 801549a:	9b04      	ldr	r3, [sp, #16]
 801549c:	4599      	cmp	r9, r3
 801549e:	f240 80c7 	bls.w	8015630 <http_recv+0x284>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80154a2:	463a      	mov	r2, r7
 80154a4:	49a6      	ldr	r1, [pc, #664]	; (8015740 <http_recv+0x394>)
 80154a6:	4640      	mov	r0, r8
 80154a8:	f000 fa36 	bl	8015918 <lwip_strnstr>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	f000 80bf 	beq.w	8015630 <http_recv+0x284>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 80154b2:	9b05      	ldr	r3, [sp, #20]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	f000 8131 	beq.w	801571c <http_recv+0x370>
            hs->keepalive = 0;
 80154ba:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80154bc:	eba9 020b 	sub.w	r2, r9, fp
 80154c0:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 80154c4:	2100      	movs	r1, #0
 80154c6:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 80154c8:	b292      	uxth	r2, r2
          *sp1 = 0;
 80154ca:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 80154cc:	eb0b 0002 	add.w	r0, fp, r2
 80154d0:	f80b 1002 	strb.w	r1, [fp, r2]
 80154d4:	9006      	str	r0, [sp, #24]
          if (is_post) {
 80154d6:	f1ba 0f00 	cmp.w	sl, #0
 80154da:	f000 8118 	beq.w	801570e <http_recv+0x362>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80154de:	f109 0301 	add.w	r3, r9, #1
 80154e2:	4997      	ldr	r1, [pc, #604]	; (8015740 <http_recv+0x394>)
            struct pbuf *q = hs->req;
 80154e4:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80154e8:	eba3 0208 	sub.w	r2, r3, r8
 80154ec:	4618      	mov	r0, r3
 80154ee:	9305      	str	r3, [sp, #20]
 80154f0:	1aba      	subs	r2, r7, r2
 80154f2:	f000 fa11 	bl	8015918 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 80154f6:	9007      	str	r0, [sp, #28]
 80154f8:	2800      	cmp	r0, #0
 80154fa:	f000 816d 	beq.w	80157d8 <http_recv+0x42c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80154fe:	9b05      	ldr	r3, [sp, #20]
 8015500:	4990      	ldr	r1, [pc, #576]	; (8015744 <http_recv+0x398>)
 8015502:	1ac2      	subs	r2, r0, r3
 8015504:	4618      	mov	r0, r3
 8015506:	f000 fa07 	bl	8015918 <lwip_strnstr>
    if (scontent_len != NULL) {
 801550a:	9008      	str	r0, [sp, #32]
 801550c:	2800      	cmp	r0, #0
 801550e:	f000 8135 	beq.w	801577c <http_recv+0x3d0>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8015512:	f100 0310 	add.w	r3, r0, #16
 8015516:	220a      	movs	r2, #10
 8015518:	4986      	ldr	r1, [pc, #536]	; (8015734 <http_recv+0x388>)
 801551a:	4618      	mov	r0, r3
 801551c:	9309      	str	r3, [sp, #36]	; 0x24
 801551e:	f000 f9fb 	bl	8015918 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8015522:	2800      	cmp	r0, #0
 8015524:	f000 812a 	beq.w	801577c <http_recv+0x3d0>
        content_len = atoi(content_len_num);
 8015528:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801552a:	4618      	mov	r0, r3
 801552c:	f00b f85e 	bl	80205ec <atoi>
        if (content_len == 0) {
 8015530:	1e01      	subs	r1, r0, #0
 8015532:	9109      	str	r1, [sp, #36]	; 0x24
 8015534:	f040 8120 	bne.w	8015778 <http_recv+0x3cc>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8015538:	9b08      	ldr	r3, [sp, #32]
 801553a:	7c1b      	ldrb	r3, [r3, #16]
 801553c:	2b30      	cmp	r3, #48	; 0x30
 801553e:	f040 811d 	bne.w	801577c <http_recv+0x3d0>
 8015542:	9b08      	ldr	r3, [sp, #32]
 8015544:	7c5b      	ldrb	r3, [r3, #17]
 8015546:	2b0d      	cmp	r3, #13
 8015548:	f040 8118 	bne.w	801577c <http_recv+0x3d0>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801554c:	9b07      	ldr	r3, [sp, #28]
          u8_t post_auto_wnd = 1;
 801554e:	f04f 0c01 	mov.w	ip, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8015552:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8015554:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8015558:	3304      	adds	r3, #4
          u8_t post_auto_wnd = 1;
 801555a:	f88d c02f 	strb.w	ip, [sp, #47]	; 0x2f
          http_uri_buf[0] = 0;
 801555e:	f04f 0c00 	mov.w	ip, #0
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8015562:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8015564:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8015568:	1a9b      	subs	r3, r3, r2
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801556a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
 801556e:	9a05      	ldr	r2, [sp, #20]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8015570:	4547      	cmp	r7, r8
 8015572:	bfb4      	ite	lt
 8015574:	46b8      	movlt	r8, r7
 8015576:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801557a:	429f      	cmp	r7, r3
 801557c:	bfa8      	it	ge
 801557e:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8015580:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8015582:	4f71      	ldr	r7, [pc, #452]	; (8015748 <http_recv+0x39c>)
 8015584:	f887 c000 	strb.w	ip, [r7]
          *crlfcrlf = 0;
 8015588:	9f07      	ldr	r7, [sp, #28]
 801558a:	f887 c000 	strb.w	ip, [r7]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 801558e:	4f6e      	ldr	r7, [pc, #440]	; (8015748 <http_recv+0x39c>)
 8015590:	9003      	str	r0, [sp, #12]
 8015592:	4628      	mov	r0, r5
 8015594:	9701      	str	r7, [sp, #4]
 8015596:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015598:	f8cd b008 	str.w	fp, [sp, #8]
 801559c:	9700      	str	r7, [sp, #0]
 801559e:	f7f0 fdb3 	bl	8006108 <httpd_post_begin>
          if (err == ERR_OK) {
 80155a2:	2800      	cmp	r0, #0
 80155a4:	f040 80f8 	bne.w	8015798 <http_recv+0x3ec>
            hs->post_content_len_left = (u32_t)content_len;
 80155a8:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80155aa:	f1ba 0f00 	cmp.w	sl, #0
 80155ae:	f000 80d7 	beq.w	8015760 <http_recv+0x3b4>
 80155b2:	4652      	mov	r2, sl
 80155b4:	e005      	b.n	80155c2 <http_recv+0x216>
              q = q->next;
 80155b6:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 80155b8:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 80155bc:	2a00      	cmp	r2, #0
 80155be:	f000 80cf 	beq.w	8015760 <http_recv+0x3b4>
 80155c2:	8953      	ldrh	r3, [r2, #10]
 80155c4:	4543      	cmp	r3, r8
              start_offset -= q->len;
 80155c6:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 80155ca:	d9f4      	bls.n	80155b6 <http_recv+0x20a>
 80155cc:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 80155ce:	4641      	mov	r1, r8
 80155d0:	4610      	mov	r0, r2
 80155d2:	f001 ffb3 	bl	801753c <pbuf_remove_header>
              pbuf_ref(q);
 80155d6:	4650      	mov	r0, sl
 80155d8:	f002 f95a 	bl	8017890 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80155dc:	4651      	mov	r1, sl
 80155de:	4628      	mov	r0, r5
 80155e0:	f7ff fadc 	bl	8014b9c <http_post_rxpbuf>
 80155e4:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 80155e6:	2f00      	cmp	r7, #0
 80155e8:	f000 80bc 	beq.w	8015764 <http_recv+0x3b8>
              *sp1 = ' ';
 80155ec:	2320      	movs	r3, #32
 80155ee:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 80155f0:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 80155f4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80155f6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80155f8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80155fc:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 80155fe:	d022      	beq.n	8015646 <http_recv+0x29a>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8015600:	2f00      	cmp	r7, #0
 8015602:	d048      	beq.n	8015696 <http_recv+0x2ea>
 8015604:	1d7a      	adds	r2, r7, #5
 8015606:	f43f aee7 	beq.w	80153d8 <http_recv+0x2c>
 801560a:	f027 0308 	bic.w	r3, r7, #8
 801560e:	b25b      	sxtb	r3, r3
 8015610:	3310      	adds	r3, #16
 8015612:	d12e      	bne.n	8015672 <http_recv+0x2c6>
        if (hs->req != NULL) {
 8015614:	6a28      	ldr	r0, [r5, #32]
 8015616:	b3a0      	cbz	r0, 8015682 <http_recv+0x2d6>
          pbuf_free(hs->req);
 8015618:	f001 ffcc 	bl	80175b4 <pbuf_free>
          hs->req = NULL;
 801561c:	2300      	movs	r3, #0
 801561e:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8015620:	4620      	mov	r0, r4
 8015622:	f001 ffc7 	bl	80175b4 <pbuf_free>
      if (parsed == ERR_OK) {
 8015626:	b1df      	cbz	r7, 8015660 <http_recv+0x2b4>
      } else if (parsed == ERR_ARG) {
 8015628:	3710      	adds	r7, #16
 801562a:	f43f aee4 	beq.w	80153f6 <http_recv+0x4a>
 801562e:	e6e6      	b.n	80153fe <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8015630:	6a28      	ldr	r0, [r5, #32]
 8015632:	f002 f923 	bl	801787c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8015636:	6a2b      	ldr	r3, [r5, #32]
 8015638:	891b      	ldrh	r3, [r3, #8]
 801563a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801563e:	d202      	bcs.n	8015646 <http_recv+0x29a>
 8015640:	2805      	cmp	r0, #5
 8015642:	f67f aec9 	bls.w	80153d8 <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8015646:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801564a:	4628      	mov	r0, r5
 801564c:	f7ff facc 	bl	8014be8 <http_find_error_file>
 8015650:	4607      	mov	r7, r0
 8015652:	e7d5      	b.n	8015600 <http_recv+0x254>
    http_post_rxpbuf(hs, p);
 8015654:	4621      	mov	r1, r4
 8015656:	4628      	mov	r0, r5
    hs->retries = 0;
 8015658:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 801565c:	f7ff fa9e 	bl	8014b9c <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8015660:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015662:	2b00      	cmp	r3, #0
 8015664:	f47f aecb 	bne.w	80153fe <http_recv+0x52>
      http_send(pcb, hs);
 8015668:	4629      	mov	r1, r5
 801566a:	4630      	mov	r0, r6
 801566c:	f7ff fb66 	bl	8014d3c <http_send>
 8015670:	e6c5      	b.n	80153fe <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8015672:	4b36      	ldr	r3, [pc, #216]	; (801574c <http_recv+0x3a0>)
 8015674:	f640 2204 	movw	r2, #2564	; 0xa04
 8015678:	4935      	ldr	r1, [pc, #212]	; (8015750 <http_recv+0x3a4>)
 801567a:	4836      	ldr	r0, [pc, #216]	; (8015754 <http_recv+0x3a8>)
 801567c:	f00c f8b2 	bl	80217e4 <iprintf>
 8015680:	e7c8      	b.n	8015614 <http_recv+0x268>
      pbuf_free(p);
 8015682:	4620      	mov	r0, r4
 8015684:	f001 ff96 	bl	80175b4 <pbuf_free>
      if (parsed == ERR_OK) {
 8015688:	e7ce      	b.n	8015628 <http_recv+0x27c>
    hs->req = p;
 801568a:	622c      	str	r4, [r5, #32]
 801568c:	e6c6      	b.n	801541c <http_recv+0x70>
    data = (char *)p->payload;
 801568e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8015692:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8015694:	e6d6      	b.n	8015444 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8015696:	1d7b      	adds	r3, r7, #5
 8015698:	f43f ae9e 	beq.w	80153d8 <http_recv+0x2c>
        if (hs->req != NULL) {
 801569c:	6a28      	ldr	r0, [r5, #32]
 801569e:	2800      	cmp	r0, #0
 80156a0:	d0be      	beq.n	8015620 <http_recv+0x274>
 80156a2:	e7b9      	b.n	8015618 <http_recv+0x26c>
      } else if (!strncmp(data, "POST ", 5)) {
 80156a4:	2205      	movs	r2, #5
 80156a6:	492c      	ldr	r1, [pc, #176]	; (8015758 <http_recv+0x3ac>)
 80156a8:	4640      	mov	r0, r8
 80156aa:	f00d f81f 	bl	80226ec <strncmp>
 80156ae:	9005      	str	r0, [sp, #20]
 80156b0:	b9e8      	cbnz	r0, 80156ee <http_recv+0x342>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80156b2:	f1a7 0a05 	sub.w	sl, r7, #5
 80156b6:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 80156ba:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80156be:	491f      	ldr	r1, [pc, #124]	; (801573c <http_recv+0x390>)
 80156c0:	fa1f fa8a 	uxth.w	sl, sl
 80156c4:	4658      	mov	r0, fp
        sp1 = data + 4;
 80156c6:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80156c8:	4652      	mov	r2, sl
 80156ca:	f000 f925 	bl	8015918 <lwip_strnstr>
      if (sp2 == NULL) {
 80156ce:	4681      	mov	r9, r0
 80156d0:	2800      	cmp	r0, #0
 80156d2:	d05b      	beq.n	801578c <http_recv+0x3e0>
        is_post = 1;
 80156d4:	f04f 0a01 	mov.w	sl, #1
 80156d8:	9b05      	ldr	r3, [sp, #20]
 80156da:	e6d9      	b.n	8015490 <http_recv+0xe4>
        is_09 = 1;
 80156dc:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80156de:	4915      	ldr	r1, [pc, #84]	; (8015734 <http_recv+0x388>)
 80156e0:	4658      	mov	r0, fp
        is_09 = 1;
 80156e2:	9305      	str	r3, [sp, #20]
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80156e4:	f000 f918 	bl	8015918 <lwip_strnstr>
 80156e8:	9b05      	ldr	r3, [sp, #20]
 80156ea:	4681      	mov	r9, r0
        if (is_post) {
 80156ec:	e6d0      	b.n	8015490 <http_recv+0xe4>
        data[4] = 0;
 80156ee:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 80156f0:	f240 11f5 	movw	r1, #501	; 0x1f5
 80156f4:	4628      	mov	r0, r5
        data[4] = 0;
 80156f6:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 80156fa:	f7ff fa75 	bl	8014be8 <http_find_error_file>
 80156fe:	4607      	mov	r7, r0
 8015700:	e77e      	b.n	8015600 <http_recv+0x254>
        if (hs->req != NULL) {
 8015702:	2800      	cmp	r0, #0
 8015704:	f43f ae68 	beq.w	80153d8 <http_recv+0x2c>
 8015708:	f06f 0707 	mvn.w	r7, #7
 801570c:	e784      	b.n	8015618 <http_recv+0x26c>
            return http_find_file(hs, uri, is_09);
 801570e:	461a      	mov	r2, r3
 8015710:	4659      	mov	r1, fp
 8015712:	4628      	mov	r0, r5
 8015714:	f7ff f954 	bl	80149c0 <http_find_file>
 8015718:	4607      	mov	r7, r0
 801571a:	e771      	b.n	8015600 <http_recv+0x254>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801571c:	463a      	mov	r2, r7
 801571e:	490f      	ldr	r1, [pc, #60]	; (801575c <http_recv+0x3b0>)
 8015720:	4640      	mov	r0, r8
 8015722:	f000 f8f9 	bl	8015918 <lwip_strnstr>
 8015726:	9b05      	ldr	r3, [sp, #20]
 8015728:	2800      	cmp	r0, #0
 801572a:	d047      	beq.n	80157bc <http_recv+0x410>
            hs->keepalive = 1;
 801572c:	2001      	movs	r0, #1
 801572e:	e6c5      	b.n	80154bc <http_recv+0x110>
 8015730:	20022008 	.word	0x20022008
 8015734:	08027140 	.word	0x08027140
 8015738:	0803e28c 	.word	0x0803e28c
 801573c:	080279a8 	.word	0x080279a8
 8015740:	08025c58 	.word	0x08025c58
 8015744:	0803e2cc 	.word	0x0803e2cc
 8015748:	20021fc4 	.word	0x20021fc4
 801574c:	0803e10c 	.word	0x0803e10c
 8015750:	0803e2e0 	.word	0x0803e2e0
 8015754:	08027fec 	.word	0x08027fec
 8015758:	0803e294 	.word	0x0803e294
 801575c:	0803e29c 	.word	0x0803e29c
            } else if (hs->post_content_len_left == 0) {
 8015760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015762:	b303      	cbz	r3, 80157a6 <http_recv+0x3fa>
        if (hs->req != NULL) {
 8015764:	6a28      	ldr	r0, [r5, #32]
 8015766:	b398      	cbz	r0, 80157d0 <http_recv+0x424>
          pbuf_free(hs->req);
 8015768:	f001 ff24 	bl	80175b4 <pbuf_free>
          hs->req = NULL;
 801576c:	2300      	movs	r3, #0
      pbuf_free(p);
 801576e:	4620      	mov	r0, r4
          hs->req = NULL;
 8015770:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8015772:	f001 ff1f 	bl	80175b4 <pbuf_free>
      if (parsed == ERR_OK) {
 8015776:	e773      	b.n	8015660 <http_recv+0x2b4>
        if (content_len >= 0) {
 8015778:	f6bf aee8 	bge.w	801554c <http_recv+0x1a0>
              *sp1 = ' ';
 801577c:	2320      	movs	r3, #32
 801577e:	9a04      	ldr	r2, [sp, #16]
 8015780:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8015782:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8015784:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8015788:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801578a:	e75c      	b.n	8015646 <http_recv+0x29a>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801578c:	4652      	mov	r2, sl
 801578e:	4658      	mov	r0, fp
 8015790:	4915      	ldr	r1, [pc, #84]	; (80157e8 <http_recv+0x43c>)
 8015792:	f000 f8c1 	bl	8015918 <lwip_strnstr>
        if (is_post) {
 8015796:	e756      	b.n	8015646 <http_recv+0x29a>
            return http_find_file(hs, http_uri_buf, 0);
 8015798:	2200      	movs	r2, #0
 801579a:	4914      	ldr	r1, [pc, #80]	; (80157ec <http_recv+0x440>)
 801579c:	4628      	mov	r0, r5
 801579e:	f7ff f90f 	bl	80149c0 <http_find_file>
 80157a2:	4607      	mov	r7, r0
 80157a4:	e71f      	b.n	80155e6 <http_recv+0x23a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80157a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157a8:	2241      	movs	r2, #65	; 0x41
 80157aa:	4608      	mov	r0, r1
 80157ac:	f001 ff70 	bl	8017690 <pbuf_alloc>
 80157b0:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 80157b2:	4628      	mov	r0, r5
 80157b4:	f7ff f9f2 	bl	8014b9c <http_post_rxpbuf>
 80157b8:	4607      	mov	r7, r0
 80157ba:	e714      	b.n	80155e6 <http_recv+0x23a>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 80157bc:	463a      	mov	r2, r7
 80157be:	490c      	ldr	r1, [pc, #48]	; (80157f0 <http_recv+0x444>)
 80157c0:	4640      	mov	r0, r8
 80157c2:	f000 f8a9 	bl	8015918 <lwip_strnstr>
            hs->keepalive = 1;
 80157c6:	3800      	subs	r0, #0
 80157c8:	9b05      	ldr	r3, [sp, #20]
 80157ca:	bf18      	it	ne
 80157cc:	2001      	movne	r0, #1
 80157ce:	e675      	b.n	80154bc <http_recv+0x110>
      pbuf_free(p);
 80157d0:	4620      	mov	r0, r4
 80157d2:	f001 feef 	bl	80175b4 <pbuf_free>
      if (parsed == ERR_OK) {
 80157d6:	e743      	b.n	8015660 <http_recv+0x2b4>
              *sp1 = ' ';
 80157d8:	2320      	movs	r3, #32
 80157da:	9a04      	ldr	r2, [sp, #16]
 80157dc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80157de:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80157e0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80157e4:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 80157e6:	e5f7      	b.n	80153d8 <http_recv+0x2c>
 80157e8:	08027140 	.word	0x08027140
 80157ec:	20021fc4 	.word	0x20021fc4
 80157f0:	0803e2b4 	.word	0x0803e2b4

080157f4 <http_err>:
  if (hs != NULL) {
 80157f4:	b140      	cbz	r0, 8015808 <http_err+0x14>
{
 80157f6:	b510      	push	{r4, lr}
 80157f8:	4604      	mov	r4, r0
    http_state_eof(hs);
 80157fa:	f7fe ff79 	bl	80146f0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80157fe:	4620      	mov	r0, r4
}
 8015800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8015804:	f001 b81a 	b.w	801683c <mem_free>
 8015808:	4770      	bx	lr
 801580a:	bf00      	nop

0801580c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801580c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801580e:	202e      	movs	r0, #46	; 0x2e
 8015810:	f003 fad4 	bl	8018dbc <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8015814:	b358      	cbz	r0, 801586e <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8015816:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8015818:	2101      	movs	r1, #1
 801581a:	f002 fd0d 	bl	8018238 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801581e:	2250      	movs	r2, #80	; 0x50
 8015820:	4917      	ldr	r1, [pc, #92]	; (8015880 <httpd_init+0x74>)
 8015822:	4620      	mov	r0, r4
 8015824:	f002 fba8 	bl	8017f78 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8015828:	b958      	cbnz	r0, 8015842 <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801582a:	4620      	mov	r0, r4
 801582c:	21ff      	movs	r1, #255	; 0xff
 801582e:	f002 fc73 	bl	8018118 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8015832:	4604      	mov	r4, r0
 8015834:	b198      	cbz	r0, 801585e <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8015836:	4620      	mov	r0, r4
 8015838:	4912      	ldr	r1, [pc, #72]	; (8015884 <httpd_init+0x78>)
}
 801583a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801583e:	f002 bd89 	b.w	8018354 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8015842:	4b11      	ldr	r3, [pc, #68]	; (8015888 <httpd_init+0x7c>)
 8015844:	f640 2257 	movw	r2, #2647	; 0xa57
 8015848:	4910      	ldr	r1, [pc, #64]	; (801588c <httpd_init+0x80>)
 801584a:	4811      	ldr	r0, [pc, #68]	; (8015890 <httpd_init+0x84>)
 801584c:	f00b ffca 	bl	80217e4 <iprintf>
    pcb = altcp_listen(pcb);
 8015850:	4620      	mov	r0, r4
 8015852:	21ff      	movs	r1, #255	; 0xff
 8015854:	f002 fc60 	bl	8018118 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8015858:	4604      	mov	r4, r0
 801585a:	2800      	cmp	r0, #0
 801585c:	d1eb      	bne.n	8015836 <httpd_init+0x2a>
 801585e:	4b0a      	ldr	r3, [pc, #40]	; (8015888 <httpd_init+0x7c>)
 8015860:	f640 2259 	movw	r2, #2649	; 0xa59
 8015864:	490b      	ldr	r1, [pc, #44]	; (8015894 <httpd_init+0x88>)
 8015866:	480a      	ldr	r0, [pc, #40]	; (8015890 <httpd_init+0x84>)
 8015868:	f00b ffbc 	bl	80217e4 <iprintf>
 801586c:	e7e3      	b.n	8015836 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801586e:	4b06      	ldr	r3, [pc, #24]	; (8015888 <httpd_init+0x7c>)
 8015870:	f640 2272 	movw	r2, #2674	; 0xa72
 8015874:	4908      	ldr	r1, [pc, #32]	; (8015898 <httpd_init+0x8c>)
 8015876:	4806      	ldr	r0, [pc, #24]	; (8015890 <httpd_init+0x84>)
}
 8015878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801587c:	f00b bfb2 	b.w	80217e4 <iprintf>
 8015880:	08040cd4 	.word	0x08040cd4
 8015884:	08014765 	.word	0x08014765
 8015888:	0803e10c 	.word	0x0803e10c
 801588c:	0803e328 	.word	0x0803e328
 8015890:	08027fec 	.word	0x08027fec
 8015894:	0803e344 	.word	0x0803e344
 8015898:	0803e30c 	.word	0x0803e30c

0801589c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801589c:	b570      	push	{r4, r5, r6, lr}
 801589e:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80158a0:	4606      	mov	r6, r0
{
 80158a2:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80158a4:	b1c8      	cbz	r0, 80158da <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 80158a6:	4b11      	ldr	r3, [pc, #68]	; (80158ec <http_set_ssi_handler+0x50>)
 80158a8:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80158aa:	b175      	cbz	r5, 80158ca <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80158ac:	2c00      	cmp	r4, #0
 80158ae:	dd04      	ble.n	80158ba <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 80158b0:	4a0f      	ldr	r2, [pc, #60]	; (80158f0 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 80158b2:	4b10      	ldr	r3, [pc, #64]	; (80158f4 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 80158b4:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 80158b6:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80158b8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80158ba:	4b0f      	ldr	r3, [pc, #60]	; (80158f8 <http_set_ssi_handler+0x5c>)
 80158bc:	f640 229f 	movw	r2, #2719	; 0xa9f
 80158c0:	490e      	ldr	r1, [pc, #56]	; (80158fc <http_set_ssi_handler+0x60>)
 80158c2:	480f      	ldr	r0, [pc, #60]	; (8015900 <http_set_ssi_handler+0x64>)
 80158c4:	f00b ff8e 	bl	80217e4 <iprintf>
 80158c8:	e7f2      	b.n	80158b0 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80158ca:	4b0b      	ldr	r3, [pc, #44]	; (80158f8 <http_set_ssi_handler+0x5c>)
 80158cc:	f640 229e 	movw	r2, #2718	; 0xa9e
 80158d0:	490c      	ldr	r1, [pc, #48]	; (8015904 <http_set_ssi_handler+0x68>)
 80158d2:	480b      	ldr	r0, [pc, #44]	; (8015900 <http_set_ssi_handler+0x64>)
 80158d4:	f00b ff86 	bl	80217e4 <iprintf>
 80158d8:	e7e8      	b.n	80158ac <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80158da:	4b07      	ldr	r3, [pc, #28]	; (80158f8 <http_set_ssi_handler+0x5c>)
 80158dc:	f640 2297 	movw	r2, #2711	; 0xa97
 80158e0:	4909      	ldr	r1, [pc, #36]	; (8015908 <http_set_ssi_handler+0x6c>)
 80158e2:	4807      	ldr	r0, [pc, #28]	; (8015900 <http_set_ssi_handler+0x64>)
 80158e4:	f00b ff7e 	bl	80217e4 <iprintf>
 80158e8:	e7dd      	b.n	80158a6 <http_set_ssi_handler+0xa>
 80158ea:	bf00      	nop
 80158ec:	20022408 	.word	0x20022408
 80158f0:	2002240c 	.word	0x2002240c
 80158f4:	20022004 	.word	0x20022004
 80158f8:	0803e10c 	.word	0x0803e10c
 80158fc:	0803e38c 	.word	0x0803e38c
 8015900:	08027fec 	.word	0x08027fec
 8015904:	0803e37c 	.word	0x0803e37c
 8015908:	0803e364 	.word	0x0803e364

0801590c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801590c:	ba40      	rev16	r0, r0
}
 801590e:	b280      	uxth	r0, r0
 8015910:	4770      	bx	lr
 8015912:	bf00      	nop

08015914 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8015914:	ba00      	rev	r0, r0
 8015916:	4770      	bx	lr

08015918 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8015918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801591c:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801591e:	4608      	mov	r0, r1
{
 8015920:	4688      	mov	r8, r1
 8015922:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8015924:	f7ea fc96 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8015928:	b1c0      	cbz	r0, 801595c <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801592a:	4605      	mov	r5, r0
 801592c:	7820      	ldrb	r0, [r4, #0]
 801592e:	b1b0      	cbz	r0, 801595e <lwip_strnstr+0x46>
 8015930:	4426      	add	r6, r4
 8015932:	1962      	adds	r2, r4, r5
 8015934:	4296      	cmp	r6, r2
 8015936:	d314      	bcc.n	8015962 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8015938:	f898 7000 	ldrb.w	r7, [r8]
 801593c:	e005      	b.n	801594a <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801593e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8015942:	1962      	adds	r2, r4, r5
 8015944:	b158      	cbz	r0, 801595e <lwip_strnstr+0x46>
 8015946:	4296      	cmp	r6, r2
 8015948:	d30b      	bcc.n	8015962 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801594a:	4287      	cmp	r7, r0
 801594c:	d1f7      	bne.n	801593e <lwip_strnstr+0x26>
 801594e:	462a      	mov	r2, r5
 8015950:	4641      	mov	r1, r8
 8015952:	4620      	mov	r0, r4
 8015954:	f00c feca 	bl	80226ec <strncmp>
 8015958:	2800      	cmp	r0, #0
 801595a:	d1f0      	bne.n	801593e <lwip_strnstr+0x26>
 801595c:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801595e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8015962:	2000      	movs	r0, #0
}
 8015964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015968 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8015968:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801596c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8015970:	4293      	cmp	r3, r2
 8015972:	d01c      	beq.n	80159ae <lwip_stricmp+0x46>
{
 8015974:	b430      	push	{r4, r5}
 8015976:	f043 0420 	orr.w	r4, r3, #32
 801597a:	f042 0520 	orr.w	r5, r2, #32
 801597e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8015982:	2a19      	cmp	r2, #25
 8015984:	d810      	bhi.n	80159a8 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8015986:	42ac      	cmp	r4, r5
 8015988:	d10e      	bne.n	80159a8 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801598a:	b1a3      	cbz	r3, 80159b6 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801598c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8015990:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8015994:	4293      	cmp	r3, r2
 8015996:	d0f8      	beq.n	801598a <lwip_stricmp+0x22>
 8015998:	f043 0420 	orr.w	r4, r3, #32
 801599c:	f042 0520 	orr.w	r5, r2, #32
 80159a0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80159a4:	2a19      	cmp	r2, #25
 80159a6:	d9ee      	bls.n	8015986 <lwip_stricmp+0x1e>
        return 1;
 80159a8:	2001      	movs	r0, #1
  return 0;
}
 80159aa:	bc30      	pop	{r4, r5}
 80159ac:	4770      	bx	lr
  } while (c1 != 0);
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d1da      	bne.n	8015968 <lwip_stricmp>
  return 0;
 80159b2:	4618      	mov	r0, r3
}
 80159b4:	4770      	bx	lr
  return 0;
 80159b6:	4618      	mov	r0, r3
}
 80159b8:	bc30      	pop	{r4, r5}
 80159ba:	4770      	bx	lr

080159bc <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80159bc:	b4f0      	push	{r4, r5, r6, r7}
 80159be:	4604      	mov	r4, r0
 80159c0:	e004      	b.n	80159cc <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80159c2:	4566      	cmp	r6, ip
 80159c4:	d111      	bne.n	80159ea <lwip_strnicmp+0x2e>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80159c6:	42f8      	cmn	r0, r7
 80159c8:	d012      	beq.n	80159f0 <lwip_strnicmp+0x34>
 80159ca:	b18b      	cbz	r3, 80159f0 <lwip_strnicmp+0x34>
    c1 = *str1++;
 80159cc:	f814 3b01 	ldrb.w	r3, [r4], #1
    c2 = *str2++;
 80159d0:	f811 5b01 	ldrb.w	r5, [r1], #1
      char c1_upc = c1 | 0x20;
 80159d4:	f043 0620 	orr.w	r6, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80159d8:	1b17      	subs	r7, r2, r4
    if (c1 != c2) {
 80159da:	42ab      	cmp	r3, r5
        if (c1_upc != c2_upc) {
 80159dc:	f045 0c20 	orr.w	ip, r5, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80159e0:	f1a6 0561 	sub.w	r5, r6, #97	; 0x61
    if (c1 != c2) {
 80159e4:	d0ef      	beq.n	80159c6 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80159e6:	2d19      	cmp	r5, #25
 80159e8:	d9eb      	bls.n	80159c2 <lwip_strnicmp+0x6>
        return 1;
 80159ea:	2001      	movs	r0, #1
  return 0;
}
 80159ec:	bcf0      	pop	{r4, r5, r6, r7}
 80159ee:	4770      	bx	lr
  return 0;
 80159f0:	2000      	movs	r0, #0
}
 80159f2:	bcf0      	pop	{r4, r5, r6, r7}
 80159f4:	4770      	bx	lr
 80159f6:	bf00      	nop

080159f8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80159f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159fc:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80159fe:	4f24      	ldr	r7, [pc, #144]	; (8015a90 <dns_call_found+0x98>)
 8015a00:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8015a04:	4c23      	ldr	r4, [pc, #140]	; (8015a94 <dns_call_found+0x9c>)
      /* flush this entry */
      dns_requests[i].found = NULL;
 8015a06:	f04f 0900 	mov.w	r9, #0
{
 8015a0a:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8015a0c:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8015a10:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8015a14:	012e      	lsls	r6, r5, #4
 8015a16:	f100 0b10 	add.w	fp, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8015a1a:	6823      	ldr	r3, [r4, #0]
 8015a1c:	b143      	cbz	r3, 8015a30 <dns_call_found+0x38>
 8015a1e:	7a22      	ldrb	r2, [r4, #8]
 8015a20:	42aa      	cmp	r2, r5
 8015a22:	d105      	bne.n	8015a30 <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8015a24:	6862      	ldr	r2, [r4, #4]
 8015a26:	4651      	mov	r1, sl
 8015a28:	4658      	mov	r0, fp
 8015a2a:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8015a2c:	f8c4 9000 	str.w	r9, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015a30:	340c      	adds	r4, #12
 8015a32:	4544      	cmp	r4, r8
 8015a34:	d1f1      	bne.n	8015a1a <dns_call_found+0x22>
 8015a36:	1973      	adds	r3, r6, r5
 8015a38:	2400      	movs	r4, #0
 8015a3a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8015a3e:	4f14      	ldr	r7, [pc, #80]	; (8015a90 <dns_call_found+0x98>)
 8015a40:	7bd9      	ldrb	r1, [r3, #15]
 8015a42:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 8015a44:	b2e3      	uxtb	r3, r4
 8015a46:	3401      	adds	r4, #1
 8015a48:	429d      	cmp	r5, r3
 8015a4a:	d002      	beq.n	8015a52 <dns_call_found+0x5a>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8015a4c:	7a93      	ldrb	r3, [r2, #10]
 8015a4e:	2b02      	cmp	r3, #2
 8015a50:	d015      	beq.n	8015a7e <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8015a52:	2c04      	cmp	r4, #4
 8015a54:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8015a58:	d1f4      	bne.n	8015a44 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8015a5a:	2903      	cmp	r1, #3
 8015a5c:	d80d      	bhi.n	8015a7a <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015a5e:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8015a60:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8015a98 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015a64:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8015a68:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8015a6c:	f007 f87e 	bl	801cb6c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015a70:	2200      	movs	r2, #0
 8015a72:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015a74:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8015a76:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8015a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8015a7e:	7bd3      	ldrb	r3, [r2, #15]
 8015a80:	428b      	cmp	r3, r1
 8015a82:	d1e6      	bne.n	8015a52 <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8015a84:	4435      	add	r5, r6
 8015a86:	2304      	movs	r3, #4
 8015a88:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8015a8c:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8015a8e:	e7f4      	b.n	8015a7a <dns_call_found+0x82>
 8015a90:	20022460 	.word	0x20022460
 8015a94:	20022424 	.word	0x20022424
 8015a98:	20022414 	.word	0x20022414

08015a9c <dns_send>:
{
 8015a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8015aa0:	0103      	lsls	r3, r0, #4
{
 8015aa2:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8015aa4:	eb00 1400 	add.w	r4, r0, r0, lsl #4
{
 8015aa8:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8015aaa:	9301      	str	r3, [sp, #4]
 8015aac:	4b60      	ldr	r3, [pc, #384]	; (8015c30 <dns_send+0x194>)
 8015aae:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8015ab2:	7ae3      	ldrb	r3, [r4, #11]
 8015ab4:	2b01      	cmp	r3, #1
 8015ab6:	d907      	bls.n	8015ac8 <dns_send+0x2c>
 8015ab8:	4b5e      	ldr	r3, [pc, #376]	; (8015c34 <dns_send+0x198>)
 8015aba:	f240 22fa 	movw	r2, #762	; 0x2fa
 8015abe:	495e      	ldr	r1, [pc, #376]	; (8015c38 <dns_send+0x19c>)
 8015ac0:	485e      	ldr	r0, [pc, #376]	; (8015c3c <dns_send+0x1a0>)
 8015ac2:	f00b fe8f 	bl	80217e4 <iprintf>
 8015ac6:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8015ac8:	4a5d      	ldr	r2, [pc, #372]	; (8015c40 <dns_send+0x1a4>)
 8015aca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015ace:	2c00      	cmp	r4, #0
 8015ad0:	f000 8099 	beq.w	8015c06 <dns_send+0x16a>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8015ad4:	9b01      	ldr	r3, [sp, #4]
 8015ad6:	4e56      	ldr	r6, [pc, #344]	; (8015c30 <dns_send+0x194>)
 8015ad8:	eb03 0409 	add.w	r4, r3, r9
 8015adc:	0124      	lsls	r4, r4, #4
 8015ade:	f104 0510 	add.w	r5, r4, #16
 8015ae2:	4435      	add	r5, r6
 8015ae4:	4628      	mov	r0, r5
 8015ae6:	f7ea fbb5 	bl	8000254 <strlen>
 8015aea:	4601      	mov	r1, r0
 8015aec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015af0:	2036      	movs	r0, #54	; 0x36
 8015af2:	3112      	adds	r1, #18
 8015af4:	b289      	uxth	r1, r1
 8015af6:	f001 fdcb 	bl	8017690 <pbuf_alloc>
  if (p != NULL) {
 8015afa:	4680      	mov	r8, r0
 8015afc:	2800      	cmp	r0, #0
 8015afe:	f000 8093 	beq.w	8015c28 <dns_send+0x18c>
    hdr.id = lwip_htons(entry->txid);
 8015b02:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8015b04:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8015b06:	260c      	movs	r6, #12
    --hostname;
 8015b08:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8015b0a:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8015b0c:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8015b10:	9304      	str	r3, [sp, #16]
 8015b12:	9303      	str	r3, [sp, #12]
 8015b14:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 8015b16:	f7ff fef9 	bl	801590c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8015b1a:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 8015b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8015b20:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8015b24:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8015b28:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8015b2c:	4640      	mov	r0, r8
 8015b2e:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 8015b30:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8015b34:	f002 f822 	bl	8017b7c <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015b38:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8015b3a:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8015b3e:	d051      	beq.n	8015be4 <dns_send+0x148>
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d04f      	beq.n	8015be4 <dns_send+0x148>
      ++hostname;
 8015b44:	463d      	mov	r5, r7
 8015b46:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8015b4a:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015b4c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8015b50:	2b2e      	cmp	r3, #46	; 0x2e
 8015b52:	b2e4      	uxtb	r4, r4
 8015b54:	d001      	beq.n	8015b5a <dns_send+0xbe>
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d1f7      	bne.n	8015b4a <dns_send+0xae>
 8015b5a:	4623      	mov	r3, r4
 8015b5c:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8015b60:	4433      	add	r3, r6
 8015b62:	fa1f fb8b 	uxth.w	fp, fp
 8015b66:	4553      	cmp	r3, sl
 8015b68:	dc44      	bgt.n	8015bf4 <dns_send+0x158>
      pbuf_put_at(p, query_idx, n);
 8015b6a:	4622      	mov	r2, r4
 8015b6c:	4631      	mov	r1, r6
 8015b6e:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8015b70:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8015b72:	f002 f8cf 	bl	8017d14 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8015b76:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8015b78:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8015b7a:	465a      	mov	r2, fp
 8015b7c:	4639      	mov	r1, r7
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8015b82:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8015b84:	f002 f860 	bl	8017c48 <pbuf_take_at>
    } while (*hostname != 0);
 8015b88:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8015b8a:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8015b8c:	2a00      	cmp	r2, #0
 8015b8e:	d1d3      	bne.n	8015b38 <dns_send+0x9c>
    pbuf_put_at(p, query_idx, 0);
 8015b90:	4631      	mov	r1, r6
 8015b92:	4640      	mov	r0, r8
 8015b94:	f002 f8be 	bl	8017d14 <pbuf_put_at>
    query_idx++;
 8015b98:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8015b9a:	f04f 2401 	mov.w	r4, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8015b9e:	2204      	movs	r2, #4
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	a902      	add	r1, sp, #8
 8015ba4:	4640      	mov	r0, r8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8015ba6:	9402      	str	r4, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8015ba8:	f002 f84e 	bl	8017c48 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8015bac:	9b01      	ldr	r3, [sp, #4]
 8015bae:	4a20      	ldr	r2, [pc, #128]	; (8015c30 <dns_send+0x194>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015bb0:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 8015bb2:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015bb4:	4d22      	ldr	r5, [pc, #136]	; (8015c40 <dns_send+0x1a4>)
 8015bb6:	4823      	ldr	r0, [pc, #140]	; (8015c44 <dns_send+0x1a8>)
      dst = &dns_servers[entry->server_idx];
 8015bb8:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015bba:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 8015bbc:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8015bc0:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8015bc4:	f89b 400f 	ldrb.w	r4, [fp, #15]
 8015bc8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8015bcc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015bd0:	f006 ff26 	bl	801ca20 <udp_sendto>
 8015bd4:	4605      	mov	r5, r0
    pbuf_free(p);
 8015bd6:	4640      	mov	r0, r8
 8015bd8:	f001 fcec 	bl	80175b4 <pbuf_free>
}
 8015bdc:	4628      	mov	r0, r5
 8015bde:	b007      	add	sp, #28
 8015be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015be4:	f04f 0b00 	mov.w	fp, #0
      ++hostname;
 8015be8:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8015bea:	465b      	mov	r3, fp
 8015bec:	465c      	mov	r4, fp
      if (query_idx + n + 1 > 0xFFFF) {
 8015bee:	4433      	add	r3, r6
 8015bf0:	4553      	cmp	r3, sl
 8015bf2:	ddba      	ble.n	8015b6a <dns_send+0xce>
  return ERR_VAL;
 8015bf4:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 8015bf8:	4640      	mov	r0, r8
 8015bfa:	f001 fcdb 	bl	80175b4 <pbuf_free>
}
 8015bfe:	4628      	mov	r0, r5
 8015c00:	b007      	add	sp, #28
 8015c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 8015c06:	4648      	mov	r0, r9
 8015c08:	4621      	mov	r1, r4
 8015c0a:	f7ff fef5 	bl	80159f8 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8015c0e:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 8015c10:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 8015c12:	444b      	add	r3, r9
}
 8015c14:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 8015c16:	4699      	mov	r9, r3
 8015c18:	4b05      	ldr	r3, [pc, #20]	; (8015c30 <dns_send+0x194>)
 8015c1a:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 8015c1e:	f88b 400a 	strb.w	r4, [fp, #10]
}
 8015c22:	b007      	add	sp, #28
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8015c28:	f04f 35ff 	mov.w	r5, #4294967295
 8015c2c:	e7d6      	b.n	8015bdc <dns_send+0x140>
 8015c2e:	bf00      	nop
 8015c30:	20022460 	.word	0x20022460
 8015c34:	0803e464 	.word	0x0803e464
 8015c38:	0803e494 	.word	0x0803e494
 8015c3c:	08027fec 	.word	0x08027fec
 8015c40:	20022458 	.word	0x20022458
 8015c44:	20022414 	.word	0x20022414

08015c48 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015c48:	2803      	cmp	r0, #3
{
 8015c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c4e:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015c50:	d835      	bhi.n	8015cbe <dns_check_entry+0x76>

  switch (entry->state) {
 8015c52:	4e39      	ldr	r6, [pc, #228]	; (8015d38 <dns_check_entry+0xf0>)
 8015c54:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8015c58:	0125      	lsls	r5, r4, #4
 8015c5a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8015c5e:	7a9b      	ldrb	r3, [r3, #10]
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	d860      	bhi.n	8015d26 <dns_check_entry+0xde>
 8015c64:	e8df f003 	tbb	[pc, r3]
 8015c68:	0237100e 	.word	0x0237100e
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8015c6c:	192b      	adds	r3, r5, r4
 8015c6e:	011b      	lsls	r3, r3, #4
 8015c70:	58f2      	ldr	r2, [r6, r3]
 8015c72:	b112      	cbz	r2, 8015c7a <dns_check_entry+0x32>
 8015c74:	3a01      	subs	r2, #1
 8015c76:	50f2      	str	r2, [r6, r3]
 8015c78:	b922      	cbnz	r2, 8015c84 <dns_check_entry+0x3c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8015c7a:	442c      	add	r4, r5
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8015c82:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8015c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c88:	4f2c      	ldr	r7, [pc, #176]	; (8015d3c <dns_check_entry+0xf4>)
  txid = (u16_t)DNS_RAND_TXID();
 8015c8a:	f00b fe4f 	bl	802192c <rand>
 8015c8e:	4b2a      	ldr	r3, [pc, #168]	; (8015d38 <dns_check_entry+0xf0>)
 8015c90:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015c92:	7a9a      	ldrb	r2, [r3, #10]
 8015c94:	2a02      	cmp	r2, #2
 8015c96:	d01a      	beq.n	8015cce <dns_check_entry+0x86>
 8015c98:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015c9c:	429f      	cmp	r7, r3
 8015c9e:	d1f8      	bne.n	8015c92 <dns_check_entry+0x4a>
      entry->txid = dns_create_txid();
 8015ca0:	4425      	add	r5, r4
      err = dns_send(i);
 8015ca2:	4620      	mov	r0, r4
      entry->tmr = 1;
 8015ca4:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 8015ca6:	2402      	movs	r4, #2
 8015ca8:	eb06 1305 	add.w	r3, r6, r5, lsl #4
      entry->txid = dns_create_txid();
 8015cac:	461d      	mov	r5, r3
 8015cae:	3308      	adds	r3, #8
 8015cb0:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 8015cb2:	805c      	strh	r4, [r3, #2]
      entry->tmr = 1;
 8015cb4:	809a      	strh	r2, [r3, #4]
}
 8015cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8015cba:	f7ff beef 	b.w	8015a9c <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8015cbe:	4b20      	ldr	r3, [pc, #128]	; (8015d40 <dns_check_entry+0xf8>)
 8015cc0:	f240 421c 	movw	r2, #1052	; 0x41c
 8015cc4:	491f      	ldr	r1, [pc, #124]	; (8015d44 <dns_check_entry+0xfc>)
 8015cc6:	4820      	ldr	r0, [pc, #128]	; (8015d48 <dns_check_entry+0x100>)
 8015cc8:	f00b fd8c 	bl	80217e4 <iprintf>
 8015ccc:	e7c1      	b.n	8015c52 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8015cce:	891a      	ldrh	r2, [r3, #8]
 8015cd0:	428a      	cmp	r2, r1
 8015cd2:	d1e1      	bne.n	8015c98 <dns_check_entry+0x50>
 8015cd4:	e7d9      	b.n	8015c8a <dns_check_entry+0x42>
      if (--entry->tmr == 0) {
 8015cd6:	192a      	adds	r2, r5, r4
 8015cd8:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8015cdc:	7b13      	ldrb	r3, [r2, #12]
 8015cde:	3b01      	subs	r3, #1
 8015ce0:	b2db      	uxtb	r3, r3
 8015ce2:	7313      	strb	r3, [r2, #12]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d1cd      	bne.n	8015c84 <dns_check_entry+0x3c>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8015ce8:	7b53      	ldrb	r3, [r2, #13]
 8015cea:	3301      	adds	r3, #1
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	2b04      	cmp	r3, #4
 8015cf0:	7353      	strb	r3, [r2, #13]
 8015cf2:	d005      	beq.n	8015d00 <dns_check_entry+0xb8>
          entry->tmr = entry->retries;
 8015cf4:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8015cf6:	4620      	mov	r0, r4
}
 8015cf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8015cfc:	f7ff bece 	b.w	8015a9c <dns_send>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8015d00:	7ad3      	ldrb	r3, [r2, #11]
 8015d02:	b933      	cbnz	r3, 8015d12 <dns_check_entry+0xca>
 8015d04:	4b11      	ldr	r3, [pc, #68]	; (8015d4c <dns_check_entry+0x104>)
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	b11b      	cbz	r3, 8015d12 <dns_check_entry+0xca>
            entry->server_idx++;
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8015d0e:	8193      	strh	r3, [r2, #12]
 8015d10:	e7f1      	b.n	8015cf6 <dns_check_entry+0xae>
            dns_call_found(i, NULL);
 8015d12:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8015d14:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8015d16:	2100      	movs	r1, #0
 8015d18:	f7ff fe6e 	bl	80159f8 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8015d22:	72b3      	strb	r3, [r6, #10]
            break;
 8015d24:	e7ae      	b.n	8015c84 <dns_check_entry+0x3c>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8015d26:	4b06      	ldr	r3, [pc, #24]	; (8015d40 <dns_check_entry+0xf8>)
 8015d28:	f240 425b 	movw	r2, #1115	; 0x45b
 8015d2c:	4908      	ldr	r1, [pc, #32]	; (8015d50 <dns_check_entry+0x108>)
 8015d2e:	4806      	ldr	r0, [pc, #24]	; (8015d48 <dns_check_entry+0x100>)
}
 8015d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8015d34:	f00b bd56 	b.w	80217e4 <iprintf>
 8015d38:	20022460 	.word	0x20022460
 8015d3c:	200228a0 	.word	0x200228a0
 8015d40:	0803e464 	.word	0x0803e464
 8015d44:	0803e4ac 	.word	0x0803e4ac
 8015d48:	08027fec 	.word	0x08027fec
 8015d4c:	20022458 	.word	0x20022458
 8015d50:	0803e4c8 	.word	0x0803e4c8

08015d54 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d58:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8015d5a:	8913      	ldrh	r3, [r2, #8]
{
 8015d5c:	b08d      	sub	sp, #52	; 0x34
 8015d5e:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8015d60:	2b0f      	cmp	r3, #15
 8015d62:	d805      	bhi.n	8015d70 <dns_recv+0x1c>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8015d64:	4620      	mov	r0, r4
 8015d66:	f001 fc25 	bl	80175b4 <pbuf_free>
  return;
}
 8015d6a:	b00d      	add	sp, #52	; 0x34
 8015d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8015d70:	2300      	movs	r3, #0
 8015d72:	220c      	movs	r2, #12
 8015d74:	a906      	add	r1, sp, #24
 8015d76:	4620      	mov	r0, r4
 8015d78:	f001 feb4 	bl	8017ae4 <pbuf_copy_partial>
 8015d7c:	280c      	cmp	r0, #12
 8015d7e:	4605      	mov	r5, r0
 8015d80:	d1f0      	bne.n	8015d64 <dns_recv+0x10>
    txid = lwip_htons(hdr.id);
 8015d82:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8016078 <dns_recv+0x324>
 8015d86:	2600      	movs	r6, #0
 8015d88:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8015d8c:	f7ff fdbe 	bl	801590c <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015d90:	4643      	mov	r3, r8
 8015d92:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 8015d94:	7a9a      	ldrb	r2, [r3, #10]
 8015d96:	2a02      	cmp	r2, #2
 8015d98:	d008      	beq.n	8015dac <dns_recv+0x58>
 8015d9a:	3601      	adds	r6, #1
 8015d9c:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8015da0:	2e04      	cmp	r6, #4
 8015da2:	d0df      	beq.n	8015d64 <dns_recv+0x10>
      if ((entry->state == DNS_STATE_ASKING) &&
 8015da4:	7a9a      	ldrb	r2, [r3, #10]
 8015da6:	b2f7      	uxtb	r7, r6
 8015da8:	2a02      	cmp	r2, #2
 8015daa:	d1f6      	bne.n	8015d9a <dns_recv+0x46>
 8015dac:	891a      	ldrh	r2, [r3, #8]
 8015dae:	4282      	cmp	r2, r0
 8015db0:	d1f3      	bne.n	8015d9a <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 8015db2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8015db6:	f7ff fda9 	bl	801590c <lwip_htons>
 8015dba:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8015dbc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8015dc0:	f7ff fda4 	bl	801590c <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 8015dc4:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8015dc8:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8015dca:	09db      	lsrs	r3, r3, #7
 8015dcc:	d0ca      	beq.n	8015d64 <dns_recv+0x10>
 8015dce:	f1ba 0f01 	cmp.w	sl, #1
 8015dd2:	d1c7      	bne.n	8015d64 <dns_recv+0x10>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 8015dd4:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8015dd8:	49a5      	ldr	r1, [pc, #660]	; (8016070 <dns_recv+0x31c>)
 8015dda:	f8d9 2000 	ldr.w	r2, [r9]
 8015dde:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 8015de2:	7adb      	ldrb	r3, [r3, #11]
 8015de4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d1bb      	bne.n	8015d64 <dns_recv+0x10>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8015dec:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015df0:	9602      	str	r6, [sp, #8]
 8015df2:	9703      	str	r7, [sp, #12]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8015df4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8015df8:	fb03 f306 	mul.w	r3, r3, r6
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015dfc:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801607c <dns_recv+0x328>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8015e00:	462e      	mov	r6, r5
 8015e02:	4627      	mov	r7, r4
 8015e04:	f103 0210 	add.w	r2, r3, #16
 8015e08:	9301      	str	r3, [sp, #4]
 8015e0a:	4442      	add	r2, r8
 8015e0c:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8015e0e:	4631      	mov	r1, r6
 8015e10:	4638      	mov	r0, r7
 8015e12:	f001 ff6f 	bl	8017cf4 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8015e16:	2800      	cmp	r0, #0
 8015e18:	db2d      	blt.n	8015e76 <dns_recv+0x122>
 8015e1a:	455e      	cmp	r6, fp
 8015e1c:	d02b      	beq.n	8015e76 <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8015e1e:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 8015e22:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8015e24:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 8015e26:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8015e28:	d025      	beq.n	8015e76 <dns_recv+0x122>
      while (n > 0) {
 8015e2a:	b330      	cbz	r0, 8015e7a <dns_recv+0x126>
 8015e2c:	46aa      	mov	sl, r5
 8015e2e:	182c      	adds	r4, r5, r0
 8015e30:	e01b      	b.n	8015e6a <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015e32:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 8015e36:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015e38:	f819 2000 	ldrb.w	r2, [r9, r0]
 8015e3c:	4601      	mov	r1, r0
        ++query;
 8015e3e:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015e40:	f002 0203 	and.w	r2, r2, #3
 8015e44:	2a01      	cmp	r2, #1
 8015e46:	f819 2003 	ldrb.w	r2, [r9, r3]
 8015e4a:	f002 0203 	and.w	r2, r2, #3
 8015e4e:	bf08      	it	eq
 8015e50:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 8015e54:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8015e56:	2a01      	cmp	r2, #1
 8015e58:	bf08      	it	eq
 8015e5a:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8015e5c:	4299      	cmp	r1, r3
 8015e5e:	d10a      	bne.n	8015e76 <dns_recv+0x122>
 8015e60:	455e      	cmp	r6, fp
        response_offset++;
 8015e62:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8015e64:	d007      	beq.n	8015e76 <dns_recv+0x122>
      while (n > 0) {
 8015e66:	4554      	cmp	r4, sl
 8015e68:	d007      	beq.n	8015e7a <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8015e6a:	4631      	mov	r1, r6
 8015e6c:	4638      	mov	r0, r7
 8015e6e:	f001 ff41 	bl	8017cf4 <pbuf_try_get_at>
        if (c < 0) {
 8015e72:	1e03      	subs	r3, r0, #0
 8015e74:	dadd      	bge.n	8015e32 <dns_recv+0xde>
 8015e76:	463c      	mov	r4, r7
 8015e78:	e774      	b.n	8015d64 <dns_recv+0x10>
    n = pbuf_try_get_at(p, response_offset);
 8015e7a:	4631      	mov	r1, r6
 8015e7c:	4638      	mov	r0, r7
 8015e7e:	f001 ff39 	bl	8017cf4 <pbuf_try_get_at>
    if (n < 0) {
 8015e82:	2800      	cmp	r0, #0
      ++query;
 8015e84:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8015e88:	dbf5      	blt.n	8015e76 <dns_recv+0x122>
  } while (n != 0);
 8015e8a:	d1c0      	bne.n	8015e0e <dns_recv+0xba>
 8015e8c:	4635      	mov	r5, r6
  if (response_offset == 0xFFFF) {
 8015e8e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8015e92:	463c      	mov	r4, r7
 8015e94:	9e02      	ldr	r6, [sp, #8]
 8015e96:	454d      	cmp	r5, r9
 8015e98:	9f03      	ldr	r7, [sp, #12]
 8015e9a:	f43f af63 	beq.w	8015d64 <dns_recv+0x10>
  return (u16_t)(response_offset + 1);
 8015e9e:	f105 0a01 	add.w	sl, r5, #1
 8015ea2:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 8015ea6:	45ca      	cmp	sl, r9
 8015ea8:	f43f af5c 	beq.w	8015d64 <dns_recv+0x10>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8015eac:	4653      	mov	r3, sl
 8015eae:	2204      	movs	r2, #4
 8015eb0:	a904      	add	r1, sp, #16
 8015eb2:	4620      	mov	r0, r4
 8015eb4:	f001 fe16 	bl	8017ae4 <pbuf_copy_partial>
 8015eb8:	2804      	cmp	r0, #4
 8015eba:	f47f af53 	bne.w	8015d64 <dns_recv+0x10>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8015ebe:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ec6:	f47f af4d 	bne.w	8015d64 <dns_recv+0x10>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8015eca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8015ece:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015ed2:	f47f af47 	bne.w	8015d64 <dns_recv+0x10>
 8015ed6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8015eda:	459a      	cmp	sl, r3
 8015edc:	f63f af42 	bhi.w	8015d64 <dns_recv+0x10>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8015ee0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8015ee4:	071b      	lsls	r3, r3, #28
 8015ee6:	f040 80ac 	bne.w	8016042 <dns_recv+0x2ee>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8015eea:	3505      	adds	r5, #5
 8015eec:	f8dd a000 	ldr.w	sl, [sp]
 8015ef0:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8015ef2:	f1ba 0f00 	cmp.w	sl, #0
 8015ef6:	f000 8096 	beq.w	8016026 <dns_recv+0x2d2>
 8015efa:	8923      	ldrh	r3, [r4, #8]
 8015efc:	42ab      	cmp	r3, r5
 8015efe:	d80a      	bhi.n	8015f16 <dns_recv+0x1c2>
 8015f00:	e091      	b.n	8016026 <dns_recv+0x2d2>
      if (offset + n >= p->tot_len) {
 8015f02:	8922      	ldrh	r2, [r4, #8]
 8015f04:	4293      	cmp	r3, r2
 8015f06:	f6bf af2d 	bge.w	8015d64 <dns_recv+0x10>
    n = pbuf_try_get_at(p, offset);
 8015f0a:	f001 fef3 	bl	8017cf4 <pbuf_try_get_at>
    if (n < 0) {
 8015f0e:	2800      	cmp	r0, #0
 8015f10:	f6ff af28 	blt.w	8015d64 <dns_recv+0x10>
  } while (n != 0);
 8015f14:	d018      	beq.n	8015f48 <dns_recv+0x1f4>
    n = pbuf_try_get_at(p, offset++);
 8015f16:	4629      	mov	r1, r5
 8015f18:	4620      	mov	r0, r4
 8015f1a:	f001 feeb 	bl	8017cf4 <pbuf_try_get_at>
 8015f1e:	f105 0b01 	add.w	fp, r5, #1
 8015f22:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 8015f24:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 8015f26:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8015f2a:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8015f2c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8015f30:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 8015f32:	f6ff af17 	blt.w	8015d64 <dns_recv+0x10>
      offset = (u16_t)(offset + n);
 8015f36:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8015f38:	f1bb 0f00 	cmp.w	fp, #0
 8015f3c:	f43f af12 	beq.w	8015d64 <dns_recv+0x10>
    if ((n & 0xc0) == 0xc0) {
 8015f40:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8015f42:	4629      	mov	r1, r5
    if ((n & 0xc0) == 0xc0) {
 8015f44:	d1dd      	bne.n	8015f02 <dns_recv+0x1ae>
    n = pbuf_try_get_at(p, offset++);
 8015f46:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 8015f48:	454d      	cmp	r5, r9
 8015f4a:	f43f af0b 	beq.w	8015d64 <dns_recv+0x10>
  return (u16_t)(offset + 1);
 8015f4e:	f105 0b01 	add.w	fp, r5, #1
 8015f52:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 8015f56:	45cb      	cmp	fp, r9
 8015f58:	f43f af04 	beq.w	8015d64 <dns_recv+0x10>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 8015f5c:	465b      	mov	r3, fp
 8015f5e:	220a      	movs	r2, #10
 8015f60:	a909      	add	r1, sp, #36	; 0x24
 8015f62:	4620      	mov	r0, r4
 8015f64:	f001 fdbe 	bl	8017ae4 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8015f68:	280a      	cmp	r0, #10
 8015f6a:	f47f aefb 	bne.w	8015d64 <dns_recv+0x10>
 8015f6e:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8015f72:	459b      	cmp	fp, r3
 8015f74:	f63f aef6 	bhi.w	8015d64 <dns_recv+0x10>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015f78:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015f7c:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8015f82:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8015f84:	d013      	beq.n	8015fae <dns_recv+0x25a>
 8015f86:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8015f8a:	f7ff fcbf 	bl	801590c <lwip_htons>
 8015f8e:	4428      	add	r0, r5
 8015f90:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8015f94:	f6bf aee6 	bge.w	8015d64 <dns_recv+0x10>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8015f98:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8015f9c:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8015fa0:	f7ff fcb4 	bl	801590c <lwip_htons>
 8015fa4:	4405      	add	r5, r0
            --nanswers;
 8015fa6:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8015faa:	b2ad      	uxth	r5, r5
            --nanswers;
 8015fac:	e7a1      	b.n	8015ef2 <dns_recv+0x19e>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8015fae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8015fb2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 8015fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015fba:	d1e6      	bne.n	8015f8a <dns_recv+0x236>
 8015fbc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015fc0:	d1e3      	bne.n	8015f8a <dns_recv+0x236>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8015fc2:	462b      	mov	r3, r5
 8015fc4:	2204      	movs	r2, #4
 8015fc6:	a905      	add	r1, sp, #20
 8015fc8:	4620      	mov	r0, r4
 8015fca:	f001 fd8b 	bl	8017ae4 <pbuf_copy_partial>
 8015fce:	2804      	cmp	r0, #4
 8015fd0:	f47f aec8 	bne.w	8015d64 <dns_recv+0x10>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8015fd4:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015fd8:	9b05      	ldr	r3, [sp, #20]
                  pbuf_free(p);
 8015fda:	4620      	mov	r0, r4
  if (entry->ttl > DNS_MAX_TTL) {
 8015fdc:	4d25      	ldr	r5, [pc, #148]	; (8016074 <dns_recv+0x320>)
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8015fde:	fb02 f606 	mul.w	r6, r2, r6
 8015fe2:	eb08 0406 	add.w	r4, r8, r6
 8015fe6:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 8015fe8:	f001 fae4 	bl	80175b4 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8015fec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015fee:	f7ff fc91 	bl	8015914 <lwip_htonl>
 8015ff2:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 8015ff4:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 8015ff6:	2203      	movs	r2, #3
  entry->ttl = ttl;
 8015ff8:	42ab      	cmp	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 8015ffa:	4638      	mov	r0, r7
 8015ffc:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8016000:	72a2      	strb	r2, [r4, #10]
  entry->ttl = ttl;
 8016002:	bf28      	it	cs
 8016004:	462b      	movcs	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 8016006:	4441      	add	r1, r8
  entry->ttl = ttl;
 8016008:	f848 3006 	str.w	r3, [r8, r6]
  dns_call_found(idx, &entry->ipaddr);
 801600c:	f7ff fcf4 	bl	80159f8 <dns_call_found>
  if (entry->ttl == 0) {
 8016010:	f858 3006 	ldr.w	r3, [r8, r6]
 8016014:	2b00      	cmp	r3, #0
 8016016:	f47f aea8 	bne.w	8015d6a <dns_recv+0x16>
    if (entry->state == DNS_STATE_DONE) {
 801601a:	7aa2      	ldrb	r2, [r4, #10]
 801601c:	2a03      	cmp	r2, #3
 801601e:	f47f aea4 	bne.w	8015d6a <dns_recv+0x16>
      entry->state = DNS_STATE_UNUSED;
 8016022:	72a3      	strb	r3, [r4, #10]
                  return;
 8016024:	e6a1      	b.n	8015d6a <dns_recv+0x16>
        pbuf_free(p);
 8016026:	4620      	mov	r0, r4
 8016028:	f001 fac4 	bl	80175b4 <pbuf_free>
        dns_call_found(i, NULL);
 801602c:	4638      	mov	r0, r7
 801602e:	2100      	movs	r1, #0
 8016030:	f7ff fce2 	bl	80159f8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8016034:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016038:	2200      	movs	r2, #0
 801603a:	fb03 8606 	mla	r6, r3, r6, r8
 801603e:	72b2      	strb	r2, [r6, #10]
        return;
 8016040:	e693      	b.n	8015d6a <dns_recv+0x16>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8016042:	f44f 7388 	mov.w	r3, #272	; 0x110
 8016046:	fb03 8306 	mla	r3, r3, r6, r8
 801604a:	7adb      	ldrb	r3, [r3, #11]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d1ea      	bne.n	8016026 <dns_recv+0x2d2>
 8016050:	4b07      	ldr	r3, [pc, #28]	; (8016070 <dns_recv+0x31c>)
 8016052:	685b      	ldr	r3, [r3, #4]
 8016054:	2b00      	cmp	r3, #0
 8016056:	d0e6      	beq.n	8016026 <dns_recv+0x2d2>
            entry->tmr     = 1;
 8016058:	f44f 7388 	mov.w	r3, #272	; 0x110
 801605c:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8016060:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8016062:	fb03 8606 	mla	r6, r3, r6, r8
 8016066:	81b2      	strh	r2, [r6, #12]
            dns_check_entry(i);
 8016068:	f7ff fdee 	bl	8015c48 <dns_check_entry>
            goto ignore_packet;
 801606c:	e67a      	b.n	8015d64 <dns_recv+0x10>
 801606e:	bf00      	nop
 8016070:	20022458 	.word	0x20022458
 8016074:	00093a80 	.word	0x00093a80
 8016078:	20022460 	.word	0x20022460
 801607c:	08040f31 	.word	0x08040f31

08016080 <dns_init>:
}
 8016080:	4770      	bx	lr
 8016082:	bf00      	nop

08016084 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8016084:	2801      	cmp	r0, #1
 8016086:	d900      	bls.n	801608a <dns_setserver+0x6>
}
 8016088:	4770      	bx	lr
    if (dnsserver != NULL) {
 801608a:	b121      	cbz	r1, 8016096 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801608c:	680a      	ldr	r2, [r1, #0]
 801608e:	4b05      	ldr	r3, [pc, #20]	; (80160a4 <dns_setserver+0x20>)
 8016090:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8016094:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8016096:	4a04      	ldr	r2, [pc, #16]	; (80160a8 <dns_setserver+0x24>)
 8016098:	4b02      	ldr	r3, [pc, #8]	; (80160a4 <dns_setserver+0x20>)
 801609a:	6812      	ldr	r2, [r2, #0]
 801609c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80160a0:	4770      	bx	lr
 80160a2:	bf00      	nop
 80160a4:	20022458 	.word	0x20022458
 80160a8:	08040cd4 	.word	0x08040cd4

080160ac <dns_tmr>:
{
 80160ac:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80160ae:	2000      	movs	r0, #0
 80160b0:	f7ff fdca 	bl	8015c48 <dns_check_entry>
 80160b4:	2001      	movs	r0, #1
 80160b6:	f7ff fdc7 	bl	8015c48 <dns_check_entry>
 80160ba:	2002      	movs	r0, #2
 80160bc:	f7ff fdc4 	bl	8015c48 <dns_check_entry>
 80160c0:	2003      	movs	r0, #3
}
 80160c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80160c6:	f7ff bdbf 	b.w	8015c48 <dns_check_entry>
 80160ca:	bf00      	nop

080160cc <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80160cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160d0:	b083      	sub	sp, #12
 80160d2:	9201      	str	r2, [sp, #4]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80160d4:	2900      	cmp	r1, #0
 80160d6:	f000 810b 	beq.w	80162f0 <dns_gethostbyname_addrtype+0x224>
 80160da:	fab0 f480 	clz	r4, r0
 80160de:	4607      	mov	r7, r0
 80160e0:	0964      	lsrs	r4, r4, #5
 80160e2:	2800      	cmp	r0, #0
 80160e4:	f000 8104 	beq.w	80162f0 <dns_gethostbyname_addrtype+0x224>
      (!hostname) || (!hostname[0])) {
 80160e8:	7802      	ldrb	r2, [r0, #0]
 80160ea:	2a00      	cmp	r2, #0
 80160ec:	f000 8100 	beq.w	80162f0 <dns_gethostbyname_addrtype+0x224>
 80160f0:	4688      	mov	r8, r1
 80160f2:	4699      	mov	r9, r3
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80160f4:	f7ea f8ae 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80160f8:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 80160fa:	4605      	mov	r5, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80160fc:	f200 80f8 	bhi.w	80162f0 <dns_gethostbyname_addrtype+0x224>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8016100:	4641      	mov	r1, r8
 8016102:	4638      	mov	r0, r7
 8016104:	f009 f964 	bl	801f3d0 <ip4addr_aton>
 8016108:	b118      	cbz	r0, 8016112 <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 801610a:	4620      	mov	r0, r4
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 801610c:	b003      	add	sp, #12
 801610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016112:	4c89      	ldr	r4, [pc, #548]	; (8016338 <dns_gethostbyname_addrtype+0x26c>)
  if (ipaddr_aton(hostname, addr)) {
 8016114:	4606      	mov	r6, r0
 8016116:	46a2      	mov	sl, r4
 8016118:	46a3      	mov	fp, r4
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 801611a:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801611e:	2b03      	cmp	r3, #3
 8016120:	d037      	beq.n	8016192 <dns_gethostbyname_addrtype+0xc6>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016122:	3601      	adds	r6, #1
 8016124:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8016128:	2e04      	cmp	r6, #4
 801612a:	d1f6      	bne.n	801611a <dns_gethostbyname_addrtype+0x4e>
    if (ip_addr_isany_val(dns_servers[0])) {
 801612c:	4a83      	ldr	r2, [pc, #524]	; (801633c <dns_gethostbyname_addrtype+0x270>)
 801612e:	6812      	ldr	r2, [r2, #0]
 8016130:	2a00      	cmp	r2, #0
 8016132:	f000 80f9 	beq.w	8016328 <dns_gethostbyname_addrtype+0x25c>
 8016136:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8016338 <dns_gethostbyname_addrtype+0x26c>
 801613a:	2600      	movs	r6, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 801613c:	f898 300a 	ldrb.w	r3, [r8, #10]
 8016140:	fa5f fb86 	uxtb.w	fp, r6
 8016144:	2b02      	cmp	r3, #2
 8016146:	d03e      	beq.n	80161c6 <dns_gethostbyname_addrtype+0xfa>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016148:	3601      	adds	r6, #1
 801614a:	f508 7888 	add.w	r8, r8, #272	; 0x110
 801614e:	2e04      	cmp	r6, #4
 8016150:	d1f4      	bne.n	801613c <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8016152:	2200      	movs	r2, #0
 8016154:	4b7a      	ldr	r3, [pc, #488]	; (8016340 <dns_gethostbyname_addrtype+0x274>)
  lseq = 0;
 8016156:	4694      	mov	ip, r2
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8016158:	7818      	ldrb	r0, [r3, #0]
    if (entry->state == DNS_STATE_UNUSED) {
 801615a:	7aa3      	ldrb	r3, [r4, #10]
 801615c:	fa5f f882 	uxtb.w	r8, r2
 8016160:	2b00      	cmp	r3, #0
 8016162:	d043      	beq.n	80161ec <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8016164:	2b03      	cmp	r3, #3
 8016166:	f102 0201 	add.w	r2, r2, #1
 801616a:	d024      	beq.n	80161b6 <dns_gethostbyname_addrtype+0xea>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 801616c:	2a04      	cmp	r2, #4
 801616e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8016172:	d1f2      	bne.n	801615a <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8016174:	2e04      	cmp	r6, #4
 8016176:	d007      	beq.n	8016188 <dns_gethostbyname_addrtype+0xbc>
 8016178:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 801617c:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
 8016180:	7aa2      	ldrb	r2, [r4, #10]
 8016182:	2a03      	cmp	r2, #3
 8016184:	f000 80b2 	beq.w	80162ec <dns_gethostbyname_addrtype+0x220>
      return ERR_MEM;
 8016188:	f04f 30ff 	mov.w	r0, #4294967295
}
 801618c:	b003      	add	sp, #12
 801618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8016192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016196:	f10b 0110 	add.w	r1, fp, #16
 801619a:	4638      	mov	r0, r7
 801619c:	f7ff fc0e 	bl	80159bc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80161a0:	2800      	cmp	r0, #0
 80161a2:	d1be      	bne.n	8016122 <dns_gethostbyname_addrtype+0x56>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80161a4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80161a8:	eb0a 1a06 	add.w	sl, sl, r6, lsl #4
 80161ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80161b0:	f8c8 3000 	str.w	r3, [r8]
 80161b4:	e7aa      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80161b6:	7ba3      	ldrb	r3, [r4, #14]
 80161b8:	1ac3      	subs	r3, r0, r3
 80161ba:	b2db      	uxtb	r3, r3
      if (age > lseq) {
 80161bc:	4563      	cmp	r3, ip
 80161be:	d9d5      	bls.n	801616c <dns_gethostbyname_addrtype+0xa0>
 80161c0:	4646      	mov	r6, r8
 80161c2:	469c      	mov	ip, r3
 80161c4:	e7d2      	b.n	801616c <dns_gethostbyname_addrtype+0xa0>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80161c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80161ca:	f108 0110 	add.w	r1, r8, #16
 80161ce:	4638      	mov	r0, r7
 80161d0:	f7ff fbf4 	bl	80159bc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80161d4:	2800      	cmp	r0, #0
 80161d6:	d1b7      	bne.n	8016148 <dns_gethostbyname_addrtype+0x7c>
 80161d8:	4b5a      	ldr	r3, [pc, #360]	; (8016344 <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 80161da:	681a      	ldr	r2, [r3, #0]
 80161dc:	330c      	adds	r3, #12
 80161de:	2a00      	cmp	r2, #0
 80161e0:	f000 8093 	beq.w	801630a <dns_gethostbyname_addrtype+0x23e>
 80161e4:	3001      	adds	r0, #1
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80161e6:	2804      	cmp	r0, #4
 80161e8:	d1f7      	bne.n	80161da <dns_gethostbyname_addrtype+0x10e>
 80161ea:	e7ad      	b.n	8016148 <dns_gethostbyname_addrtype+0x7c>
    entry = &dns_table[i];
 80161ec:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 80161f0:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 80161f4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8016344 <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 80161f8:	2600      	movs	r6, #0
 80161fa:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 80161fc:	6813      	ldr	r3, [r2, #0]
 80161fe:	320c      	adds	r2, #12
 8016200:	b12b      	cbz	r3, 801620e <dns_gethostbyname_addrtype+0x142>
 8016202:	3601      	adds	r6, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8016204:	2e04      	cmp	r6, #4
 8016206:	d1f9      	bne.n	80161fc <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8016208:	f04f 30ff 	mov.w	r0, #4294967295
 801620c:	e7be      	b.n	801618c <dns_gethostbyname_addrtype+0xc0>
  req->dns_table_idx = i;
 801620e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8016212:	469b      	mov	fp, r3
  entry->seqno = dns_seqno;
 8016214:	73a0      	strb	r0, [r4, #14]
  entry->state = DNS_STATE_NEW;
 8016216:	2001      	movs	r0, #1
  req->found = found;
 8016218:	4613      	mov	r3, r2
 801621a:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 801621c:	4639      	mov	r1, r7
  entry->state = DNS_STATE_NEW;
 801621e:	72a0      	strb	r0, [r4, #10]
  req->found = found;
 8016220:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
  req->dns_table_idx = i;
 8016224:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  MEMCPY(entry->name, name, namelen);
 8016228:	462a      	mov	r2, r5
 801622a:	f104 0010 	add.w	r0, r4, #16
  req->dns_table_idx = i;
 801622e:	f883 8008 	strb.w	r8, [r3, #8]
  entry->name[namelen] = 0;
 8016232:	4425      	add	r5, r4
  req->arg   = callback_arg;
 8016234:	f8c3 9004 	str.w	r9, [r3, #4]
  entry->name[namelen] = 0;
 8016238:	465f      	mov	r7, fp
  MEMCPY(entry->name, name, namelen);
 801623a:	f00a fb39 	bl	80208b0 <memcpy>
  entry->name[namelen] = 0;
 801623e:	f885 b010 	strb.w	fp, [r5, #16]
  req->dns_table_idx = i;
 8016242:	0073      	lsls	r3, r6, #1
 8016244:	9301      	str	r3, [sp, #4]
 8016246:	4b40      	ldr	r3, [pc, #256]	; (8016348 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8016248:	f853 2b04 	ldr.w	r2, [r3], #4
 801624c:	b2fd      	uxtb	r5, r7
 801624e:	b312      	cbz	r2, 8016296 <dns_gethostbyname_addrtype+0x1ca>
 8016250:	3701      	adds	r7, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8016252:	2f04      	cmp	r7, #4
 8016254:	d1f8      	bne.n	8016248 <dns_gethostbyname_addrtype+0x17c>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8016256:	483d      	ldr	r0, [pc, #244]	; (801634c <dns_gethostbyname_addrtype+0x280>)
 8016258:	2304      	movs	r3, #4
 801625a:	7805      	ldrb	r5, [r0, #0]
 801625c:	3501      	adds	r5, #1
 801625e:	b2ed      	uxtb	r5, r5
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8016260:	2d03      	cmp	r5, #3
 8016262:	462a      	mov	r2, r5
 8016264:	d901      	bls.n	801626a <dns_gethostbyname_addrtype+0x19e>
 8016266:	2500      	movs	r5, #0
      idx = 0;
 8016268:	462a      	mov	r2, r5
    if (dns_pcbs[idx] != NULL) {
 801626a:	4f37      	ldr	r7, [pc, #220]	; (8016348 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801626c:	1c69      	adds	r1, r5, #1
 801626e:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8016270:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8016274:	2a00      	cmp	r2, #0
 8016276:	d13e      	bne.n	80162f6 <dns_gethostbyname_addrtype+0x22a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8016278:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801627c:	b2cd      	uxtb	r5, r1
 801627e:	d1ef      	bne.n	8016260 <dns_gethostbyname_addrtype+0x194>
    req->found = NULL;
 8016280:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8016282:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8016286:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8016288:	4432      	add	r2, r6
 801628a:	4616      	mov	r6, r2
  entry->pcb_idx = dns_alloc_pcb();
 801628c:	2204      	movs	r2, #4
    req->found = NULL;
 801628e:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8016292:	73e2      	strb	r2, [r4, #15]
    return ERR_MEM;
 8016294:	e73a      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8016296:	202e      	movs	r0, #46	; 0x2e
 8016298:	f006 fca2 	bl	801cbe0 <udp_new_ip_type>
  if (pcb == NULL) {
 801629c:	4681      	mov	r9, r0
 801629e:	2800      	cmp	r0, #0
 80162a0:	d045      	beq.n	801632e <dns_gethostbyname_addrtype+0x262>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80162a2:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8016354 <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80162a6:	f00b fb41 	bl	802192c <rand>
 80162aa:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80162ac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80162b0:	d3f9      	bcc.n	80162a6 <dns_gethostbyname_addrtype+0x1da>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80162b2:	4659      	mov	r1, fp
 80162b4:	4648      	mov	r0, r9
 80162b6:	f006 fa1f 	bl	801c6f8 <udp_bind>
  } while (err == ERR_USE);
 80162ba:	f110 0f08 	cmn.w	r0, #8
 80162be:	d0f2      	beq.n	80162a6 <dns_gethostbyname_addrtype+0x1da>
  if (err != ERR_OK) {
 80162c0:	b9d8      	cbnz	r0, 80162fa <dns_gethostbyname_addrtype+0x22e>
  udp_recv(pcb, dns_recv, NULL);
 80162c2:	4602      	mov	r2, r0
 80162c4:	4922      	ldr	r1, [pc, #136]	; (8016350 <dns_gethostbyname_addrtype+0x284>)
 80162c6:	4648      	mov	r0, r9
 80162c8:	f006 fc3e 	bl	801cb48 <udp_recv>
      dns_last_pcb_idx = i;
 80162cc:	4b1f      	ldr	r3, [pc, #124]	; (801634c <dns_gethostbyname_addrtype+0x280>)
    dns_pcbs[i] = dns_alloc_random_port();
 80162ce:	4a1e      	ldr	r2, [pc, #120]	; (8016348 <dns_gethostbyname_addrtype+0x27c>)
      dns_last_pcb_idx = i;
 80162d0:	701d      	strb	r5, [r3, #0]
    dns_pcbs[i] = dns_alloc_random_port();
 80162d2:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
  dns_seqno++;
 80162d6:	4a1a      	ldr	r2, [pc, #104]	; (8016340 <dns_gethostbyname_addrtype+0x274>)
  dns_check_entry(i);
 80162d8:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 80162da:	73e5      	strb	r5, [r4, #15]
  dns_seqno++;
 80162dc:	7813      	ldrb	r3, [r2, #0]
 80162de:	3301      	adds	r3, #1
 80162e0:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 80162e2:	f7ff fcb1 	bl	8015c48 <dns_check_entry>
  return ERR_INPROGRESS;
 80162e6:	f06f 0004 	mvn.w	r0, #4
 80162ea:	e70f      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 80162ec:	46b0      	mov	r8, r6
 80162ee:	e781      	b.n	80161f4 <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 80162f0:	f06f 000f 	mvn.w	r0, #15
 80162f4:	e70a      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 80162f6:	7005      	strb	r5, [r0, #0]
      return idx;
 80162f8:	e7ed      	b.n	80162d6 <dns_gethostbyname_addrtype+0x20a>
    udp_remove(pcb);
 80162fa:	4648      	mov	r0, r9
 80162fc:	f006 fc36 	bl	801cb6c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8016300:	2300      	movs	r3, #0
 8016302:	4a11      	ldr	r2, [pc, #68]	; (8016348 <dns_gethostbyname_addrtype+0x27c>)
 8016304:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8016308:	e7a5      	b.n	8016256 <dns_gethostbyname_addrtype+0x18a>
          dns_requests[r].found = found;
 801630a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 801630e:	4a0d      	ldr	r2, [pc, #52]	; (8016344 <dns_gethostbyname_addrtype+0x278>)
 8016310:	9901      	ldr	r1, [sp, #4]
          return ERR_INPROGRESS;
 8016312:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].found = found;
 8016316:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 801631a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
          dns_requests[r].arg = callback_arg;
 801631e:	f8c3 9004 	str.w	r9, [r3, #4]
          dns_requests[r].dns_table_idx = i;
 8016322:	f883 b008 	strb.w	fp, [r3, #8]
          return ERR_INPROGRESS;
 8016326:	e6f1      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8016328:	f06f 0005 	mvn.w	r0, #5
 801632c:	e6ee      	b.n	801610c <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801632e:	4b06      	ldr	r3, [pc, #24]	; (8016348 <dns_gethostbyname_addrtype+0x27c>)
 8016330:	f843 9027 	str.w	r9, [r3, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8016334:	e78f      	b.n	8016256 <dns_gethostbyname_addrtype+0x18a>
 8016336:	bf00      	nop
 8016338:	20022460 	.word	0x20022460
 801633c:	20022458 	.word	0x20022458
 8016340:	20022454 	.word	0x20022454
 8016344:	20022424 	.word	0x20022424
 8016348:	20022414 	.word	0x20022414
 801634c:	20022410 	.word	0x20022410
 8016350:	08015d55 	.word	0x08015d55
 8016354:	08040cd4 	.word	0x08040cd4

08016358 <dns_gethostbyname>:
{
 8016358:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801635a:	2400      	movs	r4, #0
{
 801635c:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 801635e:	9400      	str	r4, [sp, #0]
 8016360:	f7ff feb4 	bl	80160cc <dns_gethostbyname_addrtype>
}
 8016364:	b002      	add	sp, #8
 8016366:	bd10      	pop	{r4, pc}

08016368 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8016368:	2300      	movs	r3, #0
{
 801636a:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801636c:	4299      	cmp	r1, r3
{
 801636e:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8016370:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8016374:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8016378:	dd05      	ble.n	8016386 <lwip_standard_chksum+0x1e>
 801637a:	b126      	cbz	r6, 8016386 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 801637c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8016380:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8016382:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8016386:	2901      	cmp	r1, #1
 8016388:	dd26      	ble.n	80163d8 <lwip_standard_chksum+0x70>
 801638a:	3902      	subs	r1, #2
  u32_t sum = 0;
 801638c:	2300      	movs	r3, #0
 801638e:	084d      	lsrs	r5, r1, #1
 8016390:	1c6c      	adds	r4, r5, #1
 8016392:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8016396:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 801639a:	4284      	cmp	r4, r0
    sum += *ps++;
 801639c:	4413      	add	r3, r2
  while (len > 1) {
 801639e:	d1fa      	bne.n	8016396 <lwip_standard_chksum+0x2e>
 80163a0:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 80163a4:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80163a8:	2901      	cmp	r1, #1
 80163aa:	d102      	bne.n	80163b2 <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80163ac:	7822      	ldrb	r2, [r4, #0]
 80163ae:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80163b2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80163b6:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80163b8:	b298      	uxth	r0, r3
 80163ba:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80163be:	b298      	uxth	r0, r3
 80163c0:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80163c4:	b126      	cbz	r6, 80163d0 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 80163c6:	0203      	lsls	r3, r0, #8
 80163c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80163cc:	b29b      	uxth	r3, r3
 80163ce:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80163d0:	b280      	uxth	r0, r0
 80163d2:	b003      	add	sp, #12
 80163d4:	bc70      	pop	{r4, r5, r6}
 80163d6:	4770      	bx	lr
  ps = (const u16_t *)(const void *)pb;
 80163d8:	4604      	mov	r4, r0
  u32_t sum = 0;
 80163da:	2300      	movs	r3, #0
 80163dc:	e7e4      	b.n	80163a8 <lwip_standard_chksum+0x40>
 80163de:	bf00      	nop

080163e0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 80163e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163e4:	9c06      	ldr	r4, [sp, #24]
 80163e6:	4688      	mov	r8, r1
 80163e8:	4617      	mov	r7, r2
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 80163ea:	6826      	ldr	r6, [r4, #0]
  addr = ip4_addr_get_u32(src);
 80163ec:	681c      	ldr	r4, [r3, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80163ee:	0c33      	lsrs	r3, r6, #16
 80163f0:	fa13 f686 	uxtah	r6, r3, r6
 80163f4:	fa16 f684 	uxtah	r6, r6, r4
 80163f8:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80163fc:	b2b4      	uxth	r4, r6
 80163fe:	eb04 4616 	add.w	r6, r4, r6, lsr #16
  acc = FOLD_U32T(acc);
 8016402:	b2b4      	uxth	r4, r6
 8016404:	eb04 4416 	add.w	r4, r4, r6, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8016408:	b1f0      	cbz	r0, 8016448 <inet_chksum_pseudo+0x68>
 801640a:	4605      	mov	r5, r0
  int swapped = 0;
 801640c:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 801640e:	8969      	ldrh	r1, [r5, #10]
 8016410:	6868      	ldr	r0, [r5, #4]
 8016412:	f7ff ffa9 	bl	8016368 <lwip_standard_chksum>
 8016416:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 8016418:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 801641a:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801641c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8016420:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8016424:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8016428:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 801642c:	d003      	beq.n	8016436 <inet_chksum_pseudo+0x56>
      acc = SWAP_BYTES_IN_WORD(acc);
 801642e:	b284      	uxth	r4, r0
 8016430:	f086 0601 	eor.w	r6, r6, #1
 8016434:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8016436:	682d      	ldr	r5, [r5, #0]
 8016438:	2d00      	cmp	r5, #0
 801643a:	d1e8      	bne.n	801640e <inet_chksum_pseudo+0x2e>
  if (swapped) {
 801643c:	b126      	cbz	r6, 8016448 <inet_chksum_pseudo+0x68>
    acc = SWAP_BYTES_IN_WORD(acc);
 801643e:	0223      	lsls	r3, r4, #8
 8016440:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8016444:	b29b      	uxth	r3, r3
 8016446:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8016448:	4640      	mov	r0, r8
 801644a:	f7ff fa5f 	bl	801590c <lwip_htons>
 801644e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8016450:	4638      	mov	r0, r7
 8016452:	f7ff fa5b 	bl	801590c <lwip_htons>
 8016456:	4428      	add	r0, r5
 8016458:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 801645a:	b2a0      	uxth	r0, r4
 801645c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8016460:	b2a0      	uxth	r0, r4
 8016462:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8016466:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8016468:	b280      	uxth	r0, r0
 801646a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801646e:	bf00      	nop

08016470 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8016470:	f7ff bfb6 	b.w	80163e0 <inet_chksum_pseudo>

08016474 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8016474:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8016476:	f7ff ff77 	bl	8016368 <lwip_standard_chksum>
 801647a:	43c0      	mvns	r0, r0
}
 801647c:	b280      	uxth	r0, r0
 801647e:	bd08      	pop	{r3, pc}

08016480 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8016480:	b330      	cbz	r0, 80164d0 <inet_chksum_pbuf+0x50>
{
 8016482:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8016484:	2600      	movs	r6, #0
 8016486:	4605      	mov	r5, r0
  acc = 0;
 8016488:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 801648a:	8969      	ldrh	r1, [r5, #10]
 801648c:	6868      	ldr	r0, [r5, #4]
 801648e:	f7ff ff6b 	bl	8016368 <lwip_standard_chksum>
 8016492:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8016494:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8016496:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8016498:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 801649c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80164a0:	ea4f 2004 	mov.w	r0, r4, lsl #8
 80164a4:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 80164a8:	d003      	beq.n	80164b2 <inet_chksum_pbuf+0x32>
      acc = SWAP_BYTES_IN_WORD(acc);
 80164aa:	b284      	uxth	r4, r0
 80164ac:	f086 0601 	eor.w	r6, r6, #1
 80164b0:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 80164b2:	682d      	ldr	r5, [r5, #0]
 80164b4:	2d00      	cmp	r5, #0
 80164b6:	d1e8      	bne.n	801648a <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80164b8:	b13e      	cbz	r6, 80164ca <inet_chksum_pbuf+0x4a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80164ba:	0220      	lsls	r0, r4, #8
 80164bc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80164c0:	b280      	uxth	r0, r0
 80164c2:	4320      	orrs	r0, r4
 80164c4:	43c0      	mvns	r0, r0
 80164c6:	b280      	uxth	r0, r0
  }
  return (u16_t)~(acc & 0xffffUL);
}
 80164c8:	bd70      	pop	{r4, r5, r6, pc}
 80164ca:	43e0      	mvns	r0, r4
 80164cc:	b280      	uxth	r0, r0
 80164ce:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 80164d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop

080164d8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80164d8:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 80164da:	f001 fcb9 	bl	8017e50 <stats_init>
#if !NO_SYS
  sys_init();
 80164de:	f009 fdad 	bl	802003c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80164e2:	f000 f96f 	bl	80167c4 <mem_init>
  memp_init();
 80164e6:	f000 fd55 	bl	8016f94 <memp_init>
  pbuf_init();
  netif_init();
 80164ea:	f000 fe17 	bl	801711c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80164ee:	f005 ffc9 	bl	801c484 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80164f2:	f001 fd17 	bl	8017f24 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 80164f6:	f7ff fdc3 	bl	8016080 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80164fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80164fe:	f005 bf53 	b.w	801c3a8 <sys_timeouts_init>
 8016502:	bf00      	nop

08016504 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016504:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  pmem = ptr_to_mem(mem->prev);
 8016508:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801650a:	4299      	cmp	r1, r3
{
 801650c:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 801650e:	8805      	ldrh	r5, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016510:	d80d      	bhi.n	801652e <mem_link_valid+0x2a>
 8016512:	429d      	cmp	r5, r3
 8016514:	bf94      	ite	ls
 8016516:	2200      	movls	r2, #0
 8016518:	2201      	movhi	r2, #1
 801651a:	b942      	cbnz	r2, 801652e <mem_link_valid+0x2a>
  return (mem_size_t)((u8_t *)mem - ram);
 801651c:	4b0c      	ldr	r3, [pc, #48]	; (8016550 <mem_link_valid+0x4c>)
 801651e:	681c      	ldr	r4, [r3, #0]
 8016520:	1b03      	subs	r3, r0, r4
 8016522:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016524:	4299      	cmp	r1, r3
 8016526:	d005      	beq.n	8016534 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016528:	5a61      	ldrh	r1, [r4, r1]
 801652a:	4299      	cmp	r1, r3
 801652c:	d002      	beq.n	8016534 <mem_link_valid+0x30>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 801652e:	2000      	movs	r0, #0
  }
  return 1;
}
 8016530:	bc30      	pop	{r4, r5}
 8016532:	4770      	bx	lr
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016534:	4a07      	ldr	r2, [pc, #28]	; (8016554 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8016536:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016538:	6812      	ldr	r2, [r2, #0]
 801653a:	42a2      	cmp	r2, r4
 801653c:	d006      	beq.n	801654c <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801653e:	8860      	ldrh	r0, [r4, #2]
 8016540:	1ac0      	subs	r0, r0, r3
 8016542:	fab0 f080 	clz	r0, r0
}
 8016546:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016548:	0940      	lsrs	r0, r0, #5
}
 801654a:	4770      	bx	lr
  return 1;
 801654c:	2001      	movs	r0, #1
 801654e:	e7ef      	b.n	8016530 <mem_link_valid+0x2c>
 8016550:	200228ac 	.word	0x200228ac
 8016554:	200228b0 	.word	0x200228b0

08016558 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8016558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 801655c:	4f5f      	ldr	r7, [pc, #380]	; (80166dc <mem_sanity+0x184>)
 801655e:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8016560:	7935      	ldrb	r5, [r6, #4]
 8016562:	2d01      	cmp	r5, #1
 8016564:	d907      	bls.n	8016576 <mem_sanity+0x1e>
 8016566:	4b5e      	ldr	r3, [pc, #376]	; (80166e0 <mem_sanity+0x188>)
 8016568:	f240 223f 	movw	r2, #575	; 0x23f
 801656c:	495d      	ldr	r1, [pc, #372]	; (80166e4 <mem_sanity+0x18c>)
 801656e:	485e      	ldr	r0, [pc, #376]	; (80166e8 <mem_sanity+0x190>)
 8016570:	f00b f938 	bl	80217e4 <iprintf>
 8016574:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8016576:	8873      	ldrh	r3, [r6, #2]
 8016578:	2b00      	cmp	r3, #0
 801657a:	f040 80a7 	bne.w	80166cc <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801657e:	8834      	ldrh	r4, [r6, #0]
 8016580:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8016584:	429c      	cmp	r4, r3
 8016586:	f200 8098 	bhi.w	80166ba <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 801658e:	429c      	cmp	r4, r3
 8016590:	d961      	bls.n	8016656 <mem_sanity+0xfe>
 8016592:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8016704 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8016596:	f8df a148 	ldr.w	sl, [pc, #328]	; 80166e0 <mem_sanity+0x188>
 801659a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8016708 <mem_sanity+0x1b0>
 801659e:	4e52      	ldr	r6, [pc, #328]	; (80166e8 <mem_sanity+0x190>)
 80165a0:	e012      	b.n	80165c8 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d006      	beq.n	80165b4 <mem_sanity+0x5c>
 80165a6:	4653      	mov	r3, sl
 80165a8:	f240 2251 	movw	r2, #593	; 0x251
 80165ac:	494f      	ldr	r1, [pc, #316]	; (80166ec <mem_sanity+0x194>)
 80165ae:	4630      	mov	r0, r6
 80165b0:	f00b f918 	bl	80217e4 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80165b4:	4620      	mov	r0, r4
 80165b6:	f7ff ffa5 	bl	8016504 <mem_link_valid>
 80165ba:	b380      	cbz	r0, 801661e <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 80165c0:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 80165c2:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 80165c4:	42a3      	cmp	r3, r4
 80165c6:	d246      	bcs.n	8016656 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 80165c8:	f8d8 2000 	ldr.w	r2, [r8]
 80165cc:	42a2      	cmp	r2, r4
 80165ce:	d942      	bls.n	8016656 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80165d0:	1ce2      	adds	r2, r4, #3
 80165d2:	f022 0203 	bic.w	r2, r2, #3
 80165d6:	4294      	cmp	r4, r2
 80165d8:	d006      	beq.n	80165e8 <mem_sanity+0x90>
 80165da:	4653      	mov	r3, sl
 80165dc:	f240 2249 	movw	r2, #585	; 0x249
 80165e0:	4649      	mov	r1, r9
 80165e2:	4630      	mov	r0, r6
 80165e4:	f00b f8fe 	bl	80217e4 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 80165e8:	8862      	ldrh	r2, [r4, #2]
 80165ea:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d81d      	bhi.n	801662e <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80165f2:	8822      	ldrh	r2, [r4, #0]
 80165f4:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d824      	bhi.n	8016646 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80165fc:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 80165fe:	2d00      	cmp	r5, #0
 8016600:	d0cf      	beq.n	80165a2 <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8016602:	2b01      	cmp	r3, #1
 8016604:	d9d6      	bls.n	80165b4 <mem_sanity+0x5c>
 8016606:	4653      	mov	r3, sl
 8016608:	f240 2253 	movw	r2, #595	; 0x253
 801660c:	4938      	ldr	r1, [pc, #224]	; (80166f0 <mem_sanity+0x198>)
 801660e:	4630      	mov	r0, r6
 8016610:	f00b f8e8 	bl	80217e4 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8016614:	4620      	mov	r0, r4
 8016616:	f7ff ff75 	bl	8016504 <mem_link_valid>
 801661a:	2800      	cmp	r0, #0
 801661c:	d1ce      	bne.n	80165bc <mem_sanity+0x64>
 801661e:	4653      	mov	r3, sl
 8016620:	f240 2256 	movw	r2, #598	; 0x256
 8016624:	4933      	ldr	r1, [pc, #204]	; (80166f4 <mem_sanity+0x19c>)
 8016626:	4630      	mov	r0, r6
 8016628:	f00b f8dc 	bl	80217e4 <iprintf>
 801662c:	e7c6      	b.n	80165bc <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801662e:	4653      	mov	r3, sl
 8016630:	f240 224a 	movw	r2, #586	; 0x24a
 8016634:	4930      	ldr	r1, [pc, #192]	; (80166f8 <mem_sanity+0x1a0>)
 8016636:	4630      	mov	r0, r6
 8016638:	f00b f8d4 	bl	80217e4 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801663c:	8822      	ldrh	r2, [r4, #0]
 801663e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8016642:	429a      	cmp	r2, r3
 8016644:	d9da      	bls.n	80165fc <mem_sanity+0xa4>
 8016646:	4653      	mov	r3, sl
 8016648:	f240 224b 	movw	r2, #587	; 0x24b
 801664c:	492b      	ldr	r1, [pc, #172]	; (80166fc <mem_sanity+0x1a4>)
 801664e:	4630      	mov	r0, r6
 8016650:	f00b f8c8 	bl	80217e4 <iprintf>
 8016654:	e7d2      	b.n	80165fc <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8016656:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 801665a:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 801665c:	4294      	cmp	r4, r2
 801665e:	d006      	beq.n	801666e <mem_sanity+0x116>
 8016660:	4b1f      	ldr	r3, [pc, #124]	; (80166e0 <mem_sanity+0x188>)
 8016662:	f240 225b 	movw	r2, #603	; 0x25b
 8016666:	4926      	ldr	r1, [pc, #152]	; (8016700 <mem_sanity+0x1a8>)
 8016668:	481f      	ldr	r0, [pc, #124]	; (80166e8 <mem_sanity+0x190>)
 801666a:	f00b f8bb 	bl	80217e4 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 801666e:	7923      	ldrb	r3, [r4, #4]
 8016670:	2b01      	cmp	r3, #1
 8016672:	d006      	beq.n	8016682 <mem_sanity+0x12a>
 8016674:	4b1a      	ldr	r3, [pc, #104]	; (80166e0 <mem_sanity+0x188>)
 8016676:	f44f 7217 	mov.w	r2, #604	; 0x25c
 801667a:	491a      	ldr	r1, [pc, #104]	; (80166e4 <mem_sanity+0x18c>)
 801667c:	481a      	ldr	r0, [pc, #104]	; (80166e8 <mem_sanity+0x190>)
 801667e:	f00b f8b1 	bl	80217e4 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8016682:	8862      	ldrh	r2, [r4, #2]
 8016684:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8016688:	429a      	cmp	r2, r3
 801668a:	d006      	beq.n	801669a <mem_sanity+0x142>
 801668c:	4b14      	ldr	r3, [pc, #80]	; (80166e0 <mem_sanity+0x188>)
 801668e:	f240 225d 	movw	r2, #605	; 0x25d
 8016692:	4919      	ldr	r1, [pc, #100]	; (80166f8 <mem_sanity+0x1a0>)
 8016694:	4814      	ldr	r0, [pc, #80]	; (80166e8 <mem_sanity+0x190>)
 8016696:	f00b f8a5 	bl	80217e4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 801669a:	8822      	ldrh	r2, [r4, #0]
 801669c:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d101      	bne.n	80166a8 <mem_sanity+0x150>
}
 80166a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80166a8:	4b0d      	ldr	r3, [pc, #52]	; (80166e0 <mem_sanity+0x188>)
 80166aa:	f240 225e 	movw	r2, #606	; 0x25e
 80166ae:	4913      	ldr	r1, [pc, #76]	; (80166fc <mem_sanity+0x1a4>)
 80166b0:	480d      	ldr	r0, [pc, #52]	; (80166e8 <mem_sanity+0x190>)
}
 80166b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80166b6:	f00b b895 	b.w	80217e4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80166ba:	4b09      	ldr	r3, [pc, #36]	; (80166e0 <mem_sanity+0x188>)
 80166bc:	f240 2242 	movw	r2, #578	; 0x242
 80166c0:	490e      	ldr	r1, [pc, #56]	; (80166fc <mem_sanity+0x1a4>)
 80166c2:	4809      	ldr	r0, [pc, #36]	; (80166e8 <mem_sanity+0x190>)
 80166c4:	f00b f88e 	bl	80217e4 <iprintf>
 80166c8:	8834      	ldrh	r4, [r6, #0]
 80166ca:	e75e      	b.n	801658a <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80166cc:	4b04      	ldr	r3, [pc, #16]	; (80166e0 <mem_sanity+0x188>)
 80166ce:	f240 2241 	movw	r2, #577	; 0x241
 80166d2:	4909      	ldr	r1, [pc, #36]	; (80166f8 <mem_sanity+0x1a0>)
 80166d4:	4804      	ldr	r0, [pc, #16]	; (80166e8 <mem_sanity+0x190>)
 80166d6:	f00b f885 	bl	80217e4 <iprintf>
 80166da:	e750      	b.n	801657e <mem_sanity+0x26>
 80166dc:	200228ac 	.word	0x200228ac
 80166e0:	0803e4e8 	.word	0x0803e4e8
 80166e4:	0803e518 	.word	0x0803e518
 80166e8:	08027fec 	.word	0x08027fec
 80166ec:	0803e580 	.word	0x0803e580
 80166f0:	0803e598 	.word	0x0803e598
 80166f4:	0803e5b4 	.word	0x0803e5b4
 80166f8:	0803e530 	.word	0x0803e530
 80166fc:	0803e54c 	.word	0x0803e54c
 8016700:	0803e5cc 	.word	0x0803e5cc
 8016704:	200228b0 	.word	0x200228b0
 8016708:	0803e568 	.word	0x0803e568

0801670c <mem_overflow_check_raw>:
{
 801670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016710:	1e4c      	subs	r4, r1, #1
 8016712:	310f      	adds	r1, #15
 8016714:	b0a3      	sub	sp, #140	; 0x8c
 8016716:	4606      	mov	r6, r0
 8016718:	4615      	mov	r5, r2
 801671a:	4698      	mov	r8, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801671c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8016798 <mem_overflow_check_raw+0x8c>
 8016720:	4404      	add	r4, r0
 8016722:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 8016724:	f8df b074 	ldr.w	fp, [pc, #116]	; 801679c <mem_overflow_check_raw+0x90>
 8016728:	f8df a074 	ldr.w	sl, [pc, #116]	; 80167a0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801672c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8016730:	464a      	mov	r2, r9
 8016732:	2180      	movs	r1, #128	; 0x80
 8016734:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8016736:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8016738:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801673a:	d009      	beq.n	8016750 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801673c:	f8cd 8000 	str.w	r8, [sp]
 8016740:	f00b f994 	bl	8021a6c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8016744:	465b      	mov	r3, fp
 8016746:	a902      	add	r1, sp, #8
 8016748:	226d      	movs	r2, #109	; 0x6d
 801674a:	4650      	mov	r0, sl
 801674c:	f00b f84a 	bl	80217e4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8016750:	42bc      	cmp	r4, r7
 8016752:	d1eb      	bne.n	801672c <mem_overflow_check_raw+0x20>
 8016754:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8016758:	4f0e      	ldr	r7, [pc, #56]	; (8016794 <mem_overflow_check_raw+0x88>)
 801675a:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801675c:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801679c <mem_overflow_check_raw+0x90>
 8016760:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80167a0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8016764:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8016768:	463a      	mov	r2, r7
 801676a:	2180      	movs	r1, #128	; 0x80
 801676c:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801676e:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8016770:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8016772:	d009      	beq.n	8016788 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8016774:	f8cd 8000 	str.w	r8, [sp]
 8016778:	f00b f978 	bl	8021a6c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801677c:	4653      	mov	r3, sl
 801677e:	a902      	add	r1, sp, #8
 8016780:	2278      	movs	r2, #120	; 0x78
 8016782:	4648      	mov	r0, r9
 8016784:	f00b f82e 	bl	80217e4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8016788:	42b4      	cmp	r4, r6
 801678a:	d1eb      	bne.n	8016764 <mem_overflow_check_raw+0x58>
}
 801678c:	b023      	add	sp, #140	; 0x8c
 801678e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016792:	bf00      	nop
 8016794:	0803e600 	.word	0x0803e600
 8016798:	0803e5e0 	.word	0x0803e5e0
 801679c:	0803e4e8 	.word	0x0803e4e8
 80167a0:	08027fec 	.word	0x08027fec

080167a4 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80167a4:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80167a8:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80167aa:	f840 3c10 	str.w	r3, [r0, #-16]
 80167ae:	f840 3c0c 	str.w	r3, [r0, #-12]
 80167b2:	f840 3c08 	str.w	r3, [r0, #-8]
 80167b6:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80167ba:	5043      	str	r3, [r0, r1]
 80167bc:	6053      	str	r3, [r2, #4]
 80167be:	6093      	str	r3, [r2, #8]
 80167c0:	60d3      	str	r3, [r2, #12]
}
 80167c2:	4770      	bx	lr

080167c4 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80167c4:	4b13      	ldr	r3, [pc, #76]	; (8016814 <mem_init+0x50>)
  mem->used = 0;
 80167c6:	2200      	movs	r2, #0
  ram_end->used = 1;
 80167c8:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80167ca:	4813      	ldr	r0, [pc, #76]	; (8016818 <mem_init+0x54>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80167cc:	f023 0303 	bic.w	r3, r3, #3
{
 80167d0:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80167d2:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  mem->used = 0;
 80167d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80167d8:	4e10      	ldr	r6, [pc, #64]	; (801681c <mem_init+0x58>)
  return (struct mem *)(void *)&ram[ptr];
 80167da:	191a      	adds	r2, r3, r4
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80167dc:	4d10      	ldr	r5, [pc, #64]	; (8016820 <mem_init+0x5c>)
  mem->next = MEM_SIZE_ALIGNED;
 80167de:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 80167e0:	511e      	str	r6, [r3, r4]
  ram_end->used = 1;
 80167e2:	7111      	strb	r1, [r2, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80167e4:	6002      	str	r2, [r0, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80167e6:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 80167e8:	f7ff feb6 	bl	8016558 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 80167ec:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80167ee:	490d      	ldr	r1, [pc, #52]	; (8016824 <mem_init+0x60>)
  lfree = (struct mem *)(void *)ram;
 80167f0:	4b0d      	ldr	r3, [pc, #52]	; (8016828 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80167f2:	480e      	ldr	r0, [pc, #56]	; (801682c <mem_init+0x68>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80167f4:	f8a1 40aa 	strh.w	r4, [r1, #170]	; 0xaa
  lfree = (struct mem *)(void *)ram;
 80167f8:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80167fa:	f009 fc2b 	bl	8020054 <sys_mutex_new>
 80167fe:	b900      	cbnz	r0, 8016802 <mem_init+0x3e>
}
 8016800:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016802:	4b0b      	ldr	r3, [pc, #44]	; (8016830 <mem_init+0x6c>)
 8016804:	f240 221f 	movw	r2, #543	; 0x21f
 8016808:	490a      	ldr	r1, [pc, #40]	; (8016834 <mem_init+0x70>)
 801680a:	480b      	ldr	r0, [pc, #44]	; (8016838 <mem_init+0x74>)
}
 801680c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016810:	f00a bfe8 	b.w	80217e4 <iprintf>
 8016814:	200270b7 	.word	0x200270b7
 8016818:	200228b0 	.word	0x200228b0
 801681c:	2ee02ee0 	.word	0x2ee02ee0
 8016820:	200228ac 	.word	0x200228ac
 8016824:	20036794 	.word	0x20036794
 8016828:	200228a0 	.word	0x200228a0
 801682c:	200228a8 	.word	0x200228a8
 8016830:	0803e4e8 	.word	0x0803e4e8
 8016834:	0803e620 	.word	0x0803e620
 8016838:	08027fec 	.word	0x08027fec

0801683c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801683c:	2800      	cmp	r0, #0
 801683e:	f000 8087 	beq.w	8016950 <mem_free+0x114>
{
 8016842:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016846:	f010 0803 	ands.w	r8, r0, #3
 801684a:	4604      	mov	r4, r0
 801684c:	f040 8081 	bne.w	8016952 <mem_free+0x116>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016850:	4e5e      	ldr	r6, [pc, #376]	; (80169cc <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016852:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016856:	6833      	ldr	r3, [r6, #0]
 8016858:	42ab      	cmp	r3, r5
 801685a:	d805      	bhi.n	8016868 <mem_free+0x2c>
 801685c:	4f5c      	ldr	r7, [pc, #368]	; (80169d0 <mem_free+0x194>)
 801685e:	f100 030c 	add.w	r3, r0, #12
 8016862:	683a      	ldr	r2, [r7, #0]
 8016864:	429a      	cmp	r2, r3
 8016866:	d20e      	bcs.n	8016886 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8016868:	4b5a      	ldr	r3, [pc, #360]	; (80169d4 <mem_free+0x198>)
 801686a:	f240 227f 	movw	r2, #639	; 0x27f
 801686e:	495a      	ldr	r1, [pc, #360]	; (80169d8 <mem_free+0x19c>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8016870:	485a      	ldr	r0, [pc, #360]	; (80169dc <mem_free+0x1a0>)
 8016872:	f00a ffb7 	bl	80217e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016876:	4a5a      	ldr	r2, [pc, #360]	; (80169e0 <mem_free+0x1a4>)
 8016878:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801687c:	3301      	adds	r3, #1
 801687e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8016882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8016886:	4b57      	ldr	r3, [pc, #348]	; (80169e4 <mem_free+0x1a8>)
 8016888:	4a57      	ldr	r2, [pc, #348]	; (80169e8 <mem_free+0x1ac>)
 801688a:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801688e:	f7ff ff3d 	bl	801670c <mem_overflow_check_raw>
  if (!mem->used) {
 8016892:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8016896:	2b00      	cmp	r3, #0
 8016898:	f000 8088 	beq.w	80169ac <mem_free+0x170>
  if (!mem_link_valid(mem)) {
 801689c:	4628      	mov	r0, r5
 801689e:	f7ff fe31 	bl	8016504 <mem_link_valid>
 80168a2:	2800      	cmp	r0, #0
 80168a4:	f000 8087 	beq.w	80169b6 <mem_free+0x17a>
  if (mem < lfree) {
 80168a8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8016a0c <mem_free+0x1d0>
  mem->used = 0;
 80168ac:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 80168b0:	f8d9 3000 	ldr.w	r3, [r9]
 80168b4:	42ab      	cmp	r3, r5
 80168b6:	d901      	bls.n	80168bc <mem_free+0x80>
    lfree = mem;
 80168b8:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80168bc:	4848      	ldr	r0, [pc, #288]	; (80169e0 <mem_free+0x1a4>)
 80168be:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80168c2:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 80168c6:	6831      	ldr	r1, [r6, #0]
 80168c8:	1ad2      	subs	r2, r2, r3
 80168ca:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80168ce:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80168d0:	4462      	add	r2, ip
 80168d2:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80168d6:	d84b      	bhi.n	8016970 <mem_free+0x134>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80168d8:	683a      	ldr	r2, [r7, #0]
 80168da:	4295      	cmp	r5, r2
 80168dc:	d252      	bcs.n	8016984 <mem_free+0x148>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80168de:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80168e2:	4293      	cmp	r3, r2
 80168e4:	d83a      	bhi.n	801695c <mem_free+0x120>
  return (struct mem *)(void *)&ram[ptr];
 80168e6:	6832      	ldr	r2, [r6, #0]
 80168e8:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80168ea:	429d      	cmp	r5, r3
 80168ec:	d013      	beq.n	8016916 <mem_free+0xda>
 80168ee:	7919      	ldrb	r1, [r3, #4]
 80168f0:	b989      	cbnz	r1, 8016916 <mem_free+0xda>
 80168f2:	6839      	ldr	r1, [r7, #0]
 80168f4:	428b      	cmp	r3, r1
 80168f6:	d00e      	beq.n	8016916 <mem_free+0xda>
    if (lfree == nmem) {
 80168f8:	f8d9 1000 	ldr.w	r1, [r9]
 80168fc:	428b      	cmp	r3, r1
 80168fe:	d062      	beq.n	80169c6 <mem_free+0x18a>
    mem->next = nmem->next;
 8016900:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016902:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    mem->next = nmem->next;
 8016906:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801690a:	881b      	ldrh	r3, [r3, #0]
 801690c:	428b      	cmp	r3, r1
 801690e:	d002      	beq.n	8016916 <mem_free+0xda>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016910:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8016912:	1aa9      	subs	r1, r5, r2
 8016914:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8016916:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801691a:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801691c:	429d      	cmp	r5, r3
 801691e:	d010      	beq.n	8016942 <mem_free+0x106>
 8016920:	7918      	ldrb	r0, [r3, #4]
 8016922:	b970      	cbnz	r0, 8016942 <mem_free+0x106>
    if (lfree == mem) {
 8016924:	f8d9 0000 	ldr.w	r0, [r9]
 8016928:	4285      	cmp	r5, r0
 801692a:	d049      	beq.n	80169c0 <mem_free+0x184>
    pmem->next = mem->next;
 801692c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016930:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    pmem->next = mem->next;
 8016934:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016936:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801693a:	4283      	cmp	r3, r0
 801693c:	d001      	beq.n	8016942 <mem_free+0x106>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801693e:	441a      	add	r2, r3
 8016940:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8016942:	f7ff fe09 	bl	8016558 <mem_sanity>
  mem_free_count = 1;
 8016946:	4b29      	ldr	r3, [pc, #164]	; (80169ec <mem_free+0x1b0>)
 8016948:	2201      	movs	r2, #1
 801694a:	701a      	strb	r2, [r3, #0]
}
 801694c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016950:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016952:	4b20      	ldr	r3, [pc, #128]	; (80169d4 <mem_free+0x198>)
 8016954:	f240 2273 	movw	r2, #627	; 0x273
 8016958:	4925      	ldr	r1, [pc, #148]	; (80169f0 <mem_free+0x1b4>)
 801695a:	e789      	b.n	8016870 <mem_free+0x34>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801695c:	4b1d      	ldr	r3, [pc, #116]	; (80169d4 <mem_free+0x198>)
 801695e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016962:	4924      	ldr	r1, [pc, #144]	; (80169f4 <mem_free+0x1b8>)
 8016964:	481d      	ldr	r0, [pc, #116]	; (80169dc <mem_free+0x1a0>)
 8016966:	f00a ff3d 	bl	80217e4 <iprintf>
 801696a:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801696e:	e7ba      	b.n	80168e6 <mem_free+0xaa>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016970:	4b18      	ldr	r3, [pc, #96]	; (80169d4 <mem_free+0x198>)
 8016972:	f240 12df 	movw	r2, #479	; 0x1df
 8016976:	4920      	ldr	r1, [pc, #128]	; (80169f8 <mem_free+0x1bc>)
 8016978:	4818      	ldr	r0, [pc, #96]	; (80169dc <mem_free+0x1a0>)
 801697a:	f00a ff33 	bl	80217e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801697e:	683b      	ldr	r3, [r7, #0]
 8016980:	429d      	cmp	r5, r3
 8016982:	d306      	bcc.n	8016992 <mem_free+0x156>
 8016984:	4b13      	ldr	r3, [pc, #76]	; (80169d4 <mem_free+0x198>)
 8016986:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801698a:	491c      	ldr	r1, [pc, #112]	; (80169fc <mem_free+0x1c0>)
 801698c:	4813      	ldr	r0, [pc, #76]	; (80169dc <mem_free+0x1a0>)
 801698e:	f00a ff29 	bl	80217e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016992:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8016996:	b133      	cbz	r3, 80169a6 <mem_free+0x16a>
 8016998:	4b0e      	ldr	r3, [pc, #56]	; (80169d4 <mem_free+0x198>)
 801699a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801699e:	4918      	ldr	r1, [pc, #96]	; (8016a00 <mem_free+0x1c4>)
 80169a0:	480e      	ldr	r0, [pc, #56]	; (80169dc <mem_free+0x1a0>)
 80169a2:	f00a ff1f 	bl	80217e4 <iprintf>
 80169a6:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80169aa:	e798      	b.n	80168de <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80169ac:	4b09      	ldr	r3, [pc, #36]	; (80169d4 <mem_free+0x198>)
 80169ae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80169b2:	4914      	ldr	r1, [pc, #80]	; (8016a04 <mem_free+0x1c8>)
 80169b4:	e75c      	b.n	8016870 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80169b6:	4b07      	ldr	r3, [pc, #28]	; (80169d4 <mem_free+0x198>)
 80169b8:	f240 2295 	movw	r2, #661	; 0x295
 80169bc:	4912      	ldr	r1, [pc, #72]	; (8016a08 <mem_free+0x1cc>)
 80169be:	e757      	b.n	8016870 <mem_free+0x34>
      lfree = pmem;
 80169c0:	f8c9 3000 	str.w	r3, [r9]
 80169c4:	e7b2      	b.n	801692c <mem_free+0xf0>
      lfree = mem;
 80169c6:	f8c9 5000 	str.w	r5, [r9]
 80169ca:	e799      	b.n	8016900 <mem_free+0xc4>
 80169cc:	200228ac 	.word	0x200228ac
 80169d0:	200228b0 	.word	0x200228b0
 80169d4:	0803e4e8 	.word	0x0803e4e8
 80169d8:	0803e660 	.word	0x0803e660
 80169dc:	08027fec 	.word	0x08027fec
 80169e0:	20036794 	.word	0x20036794
 80169e4:	08025c5c 	.word	0x08025c5c
 80169e8:	0803e67c 	.word	0x0803e67c
 80169ec:	200228a4 	.word	0x200228a4
 80169f0:	0803e63c 	.word	0x0803e63c
 80169f4:	0803e730 	.word	0x0803e730
 80169f8:	0803e6e0 	.word	0x0803e6e0
 80169fc:	0803e6f8 	.word	0x0803e6f8
 8016a00:	0803e714 	.word	0x0803e714
 8016a04:	0803e684 	.word	0x0803e684
 8016a08:	0803e6ac 	.word	0x0803e6ac
 8016a0c:	200228a0 	.word	0x200228a0

08016a10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016a14:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8016a16:	f642 63e0 	movw	r3, #12000	; 0x2ee0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016a1a:	f024 0403 	bic.w	r4, r4, #3
 8016a1e:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8016a20:	2c0c      	cmp	r4, #12
 8016a22:	bf38      	it	cc
 8016a24:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8016a26:	3420      	adds	r4, #32
 8016a28:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8016a2a:	429c      	cmp	r4, r3
 8016a2c:	f200 8086 	bhi.w	8016b3c <mem_trim+0x12c>
 8016a30:	42a1      	cmp	r1, r4
 8016a32:	460e      	mov	r6, r1
 8016a34:	f200 8082 	bhi.w	8016b3c <mem_trim+0x12c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8016a38:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8016bec <mem_trim+0x1dc>
 8016a3c:	4605      	mov	r5, r0
 8016a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8016a42:	4283      	cmp	r3, r0
 8016a44:	d803      	bhi.n	8016a4e <mem_trim+0x3e>
 8016a46:	4b5e      	ldr	r3, [pc, #376]	; (8016bc0 <mem_trim+0x1b0>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	4283      	cmp	r3, r0
 8016a4c:	d817      	bhi.n	8016a7e <mem_trim+0x6e>
 8016a4e:	4b5d      	ldr	r3, [pc, #372]	; (8016bc4 <mem_trim+0x1b4>)
 8016a50:	f240 22d1 	movw	r2, #721	; 0x2d1
 8016a54:	495c      	ldr	r1, [pc, #368]	; (8016bc8 <mem_trim+0x1b8>)
 8016a56:	485d      	ldr	r0, [pc, #372]	; (8016bcc <mem_trim+0x1bc>)
 8016a58:	f00a fec4 	bl	80217e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016a5c:	f8d9 3000 	ldr.w	r3, [r9]
 8016a60:	42ab      	cmp	r3, r5
 8016a62:	d908      	bls.n	8016a76 <mem_trim+0x66>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016a64:	4a5a      	ldr	r2, [pc, #360]	; (8016bd0 <mem_trim+0x1c0>)
    return rmem;
 8016a66:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 8016a68:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8016a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8016a76:	4b52      	ldr	r3, [pc, #328]	; (8016bc0 <mem_trim+0x1b0>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	429d      	cmp	r5, r3
 8016a7c:	d2f2      	bcs.n	8016a64 <mem_trim+0x54>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8016a7e:	4b55      	ldr	r3, [pc, #340]	; (8016bd4 <mem_trim+0x1c4>)
 8016a80:	4628      	mov	r0, r5
 8016a82:	4a55      	ldr	r2, [pc, #340]	; (8016bd8 <mem_trim+0x1c8>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016a84:	f1a5 0718 	sub.w	r7, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8016a88:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8016a8c:	f7ff fe3e 	bl	801670c <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8016a90:	f8d9 2000 	ldr.w	r2, [r9]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8016a94:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8016a98:	1abf      	subs	r7, r7, r2
 8016a9a:	f1a1 0828 	sub.w	r8, r1, #40	; 0x28
 8016a9e:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8016aa0:	fa1f f888 	uxth.w	r8, r8
 8016aa4:	eba8 0307 	sub.w	r3, r8, r7
 8016aa8:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016aaa:	429c      	cmp	r4, r3
 8016aac:	d83d      	bhi.n	8016b2a <mem_trim+0x11a>
  if (newsize == size) {
 8016aae:	d06c      	beq.n	8016b8a <mem_trim+0x17a>
  return (struct mem *)(void *)&ram[ptr];
 8016ab0:	eb02 0a01 	add.w	sl, r2, r1
  if (mem2->used == 0) {
 8016ab4:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8016ab8:	2800      	cmp	r0, #0
 8016aba:	d142      	bne.n	8016b42 <mem_trim+0x132>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016abc:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8016ac0:	4299      	cmp	r1, r3
 8016ac2:	d066      	beq.n	8016b92 <mem_trim+0x182>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016ac4:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8016ac8:	4844      	ldr	r0, [pc, #272]	; (8016bdc <mem_trim+0x1cc>)
    next = mem2->next;
 8016aca:	f8ba c000 	ldrh.w	ip, [sl]
    if (lfree == mem2) {
 8016ace:	6801      	ldr	r1, [r0, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016ad0:	4423      	add	r3, r4
    if (lfree == mem2) {
 8016ad2:	4551      	cmp	r1, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016ad4:	b29b      	uxth	r3, r3
  return (struct mem *)(void *)&ram[ptr];
 8016ad6:	eb02 0103 	add.w	r1, r2, r3
    if (lfree == mem2) {
 8016ada:	d058      	beq.n	8016b8e <mem_trim+0x17e>
    mem2->used = 0;
 8016adc:	f04f 0e00 	mov.w	lr, #0
    mem2->next = next;
 8016ae0:	f8a1 c000 	strh.w	ip, [r1]
    mem2->prev = ptr;
 8016ae4:	804f      	strh	r7, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016ae6:	f642 60e0 	movw	r0, #12000	; 0x2ee0
    mem2->used = 0;
 8016aea:	f881 e004 	strb.w	lr, [r1, #4]
    mem->next = ptr2;
 8016aee:	f825 3c18 	strh.w	r3, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016af2:	8809      	ldrh	r1, [r1, #0]
 8016af4:	4281      	cmp	r1, r0
 8016af6:	d001      	beq.n	8016afc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016af8:	440a      	add	r2, r1
 8016afa:	8053      	strh	r3, [r2, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 8016afc:	4b34      	ldr	r3, [pc, #208]	; (8016bd0 <mem_trim+0x1c0>)
 8016afe:	eba7 0708 	sub.w	r7, r7, r8
 8016b02:	f8b3 80ac 	ldrh.w	r8, [r3, #172]	; 0xac
 8016b06:	4447      	add	r7, r8
 8016b08:	443c      	add	r4, r7
 8016b0a:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
  mem_overflow_init_raw(p, user_size);
 8016b0e:	4628      	mov	r0, r5
 8016b10:	4631      	mov	r1, r6
  mem->user_size = user_size;
 8016b12:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 8016b16:	f7ff fe45 	bl	80167a4 <mem_overflow_init_raw>
  MEM_SANITY();
 8016b1a:	f7ff fd1d 	bl	8016558 <mem_sanity>
  mem_free_count = 1;
 8016b1e:	4b30      	ldr	r3, [pc, #192]	; (8016be0 <mem_trim+0x1d0>)
 8016b20:	2201      	movs	r2, #1
  return rmem;
 8016b22:	4628      	mov	r0, r5
  mem_free_count = 1;
 8016b24:	701a      	strb	r2, [r3, #0]
}
 8016b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8016b2a:	4b26      	ldr	r3, [pc, #152]	; (8016bc4 <mem_trim+0x1b4>)
 8016b2c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8016b30:	492c      	ldr	r1, [pc, #176]	; (8016be4 <mem_trim+0x1d4>)
 8016b32:	4826      	ldr	r0, [pc, #152]	; (8016bcc <mem_trim+0x1bc>)
 8016b34:	f00a fe56 	bl	80217e4 <iprintf>
    return NULL;
 8016b38:	2000      	movs	r0, #0
 8016b3a:	e79a      	b.n	8016a72 <mem_trim+0x62>
    return NULL;
 8016b3c:	2000      	movs	r0, #0
}
 8016b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8016b42:	f104 0014 	add.w	r0, r4, #20
 8016b46:	4298      	cmp	r0, r3
 8016b48:	d8e1      	bhi.n	8016b0e <mem_trim+0xfe>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016b4a:	f107 0a08 	add.w	sl, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016b4e:	f642 63e0 	movw	r3, #12000	; 0x2ee0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016b52:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016b54:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016b56:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016b5a:	d024      	beq.n	8016ba6 <mem_trim+0x196>
    if (mem2 < lfree) {
 8016b5c:	481f      	ldr	r0, [pc, #124]	; (8016bdc <mem_trim+0x1cc>)
  return (struct mem *)(void *)&ram[ptr];
 8016b5e:	eb02 030a 	add.w	r3, r2, sl
    if (mem2 < lfree) {
 8016b62:	f8d0 c000 	ldr.w	ip, [r0]
 8016b66:	459c      	cmp	ip, r3
 8016b68:	d900      	bls.n	8016b6c <mem_trim+0x15c>
      lfree = mem2;
 8016b6a:	6003      	str	r3, [r0, #0]
    mem2->used = 0;
 8016b6c:	2000      	movs	r0, #0
    mem2->next = mem->next;
 8016b6e:	8019      	strh	r1, [r3, #0]
    mem2->prev = ptr;
 8016b70:	805f      	strh	r7, [r3, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016b72:	f642 61e0 	movw	r1, #12000	; 0x2ee0
    mem2->used = 0;
 8016b76:	7118      	strb	r0, [r3, #4]
    mem->next = ptr2;
 8016b78:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8016b7c:	881b      	ldrh	r3, [r3, #0]
 8016b7e:	428b      	cmp	r3, r1
 8016b80:	d0bc      	beq.n	8016afc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016b82:	441a      	add	r2, r3
 8016b84:	f8a2 a002 	strh.w	sl, [r2, #2]
 8016b88:	e7b8      	b.n	8016afc <mem_trim+0xec>
 8016b8a:	4628      	mov	r0, r5
 8016b8c:	e771      	b.n	8016a72 <mem_trim+0x62>
      lfree = ptr_to_mem(ptr2);
 8016b8e:	6001      	str	r1, [r0, #0]
 8016b90:	e7a4      	b.n	8016adc <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016b92:	f240 22f5 	movw	r2, #757	; 0x2f5
 8016b96:	4b0b      	ldr	r3, [pc, #44]	; (8016bc4 <mem_trim+0x1b4>)
 8016b98:	4913      	ldr	r1, [pc, #76]	; (8016be8 <mem_trim+0x1d8>)
 8016b9a:	480c      	ldr	r0, [pc, #48]	; (8016bcc <mem_trim+0x1bc>)
 8016b9c:	f00a fe22 	bl	80217e4 <iprintf>
 8016ba0:	f8d9 2000 	ldr.w	r2, [r9]
 8016ba4:	e78e      	b.n	8016ac4 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016ba6:	f240 3216 	movw	r2, #790	; 0x316
 8016baa:	490f      	ldr	r1, [pc, #60]	; (8016be8 <mem_trim+0x1d8>)
 8016bac:	4b05      	ldr	r3, [pc, #20]	; (8016bc4 <mem_trim+0x1b4>)
 8016bae:	4807      	ldr	r0, [pc, #28]	; (8016bcc <mem_trim+0x1bc>)
 8016bb0:	f00a fe18 	bl	80217e4 <iprintf>
 8016bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8016bb8:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 8016bbc:	e7ce      	b.n	8016b5c <mem_trim+0x14c>
 8016bbe:	bf00      	nop
 8016bc0:	200228b0 	.word	0x200228b0
 8016bc4:	0803e4e8 	.word	0x0803e4e8
 8016bc8:	0803e75c 	.word	0x0803e75c
 8016bcc:	08027fec 	.word	0x08027fec
 8016bd0:	20036794 	.word	0x20036794
 8016bd4:	08025c5c 	.word	0x08025c5c
 8016bd8:	0803e67c 	.word	0x0803e67c
 8016bdc:	200228a0 	.word	0x200228a0
 8016be0:	200228a4 	.word	0x200228a4
 8016be4:	0803e774 	.word	0x0803e774
 8016be8:	0803e794 	.word	0x0803e794
 8016bec:	200228ac 	.word	0x200228ac

08016bf0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016bf4:	4680      	mov	r8, r0
 8016bf6:	2800      	cmp	r0, #0
 8016bf8:	f000 80cb 	beq.w	8016d92 <mem_malloc+0x1a2>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016bfc:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016c00:	f642 64e0 	movw	r4, #12000	; 0x2ee0
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8016c04:	f02a 0a03 	bic.w	sl, sl, #3
 8016c08:	fa1f fa8a 	uxth.w	sl, sl
  if (size < MIN_SIZE_ALIGNED) {
 8016c0c:	f1ba 0f0c 	cmp.w	sl, #12
 8016c10:	bf38      	it	cc
 8016c12:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8016c16:	f10a 0720 	add.w	r7, sl, #32
 8016c1a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016c1c:	42a7      	cmp	r7, r4
 8016c1e:	f200 80b8 	bhi.w	8016d92 <mem_malloc+0x1a2>
 8016c22:	42b8      	cmp	r0, r7
 8016c24:	bf94      	ite	ls
 8016c26:	2500      	movls	r5, #0
 8016c28:	2501      	movhi	r5, #1
 8016c2a:	2d00      	cmp	r5, #0
 8016c2c:	f040 80b1 	bne.w	8016d92 <mem_malloc+0x1a2>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8016c30:	4871      	ldr	r0, [pc, #452]	; (8016df8 <mem_malloc+0x208>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016c32:	f06f 0b07 	mvn.w	fp, #7
  sys_mutex_lock(&mem_mutex);
 8016c36:	f009 fa33 	bl	80200a0 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8016c3a:	4b70      	ldr	r3, [pc, #448]	; (8016dfc <mem_malloc+0x20c>)
      mem_free_count = 0;
 8016c3c:	46ae      	mov	lr, r5
 8016c3e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8016e28 <mem_malloc+0x238>
 8016c42:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 8016c46:	6818      	ldr	r0, [r3, #0]
 8016c48:	4d6d      	ldr	r5, [pc, #436]	; (8016e00 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016c4a:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 8016c4e:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016c50:	b2b3      	uxth	r3, r6
 8016c52:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8016c54:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016c56:	d97e      	bls.n	8016d56 <mem_malloc+0x166>
      mem_free_count = 0;
 8016c58:	f885 e000 	strb.w	lr, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016c5c:	ebab 0203 	sub.w	r2, fp, r3
      if (mem_free_count != 0) {
 8016c60:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8016c62:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8016c64:	2900      	cmp	r1, #0
 8016c66:	d1f0      	bne.n	8016c4a <mem_malloc+0x5a>
      if ((!mem->used) &&
 8016c68:	7923      	ldrb	r3, [r4, #4]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d16f      	bne.n	8016d4e <mem_malloc+0x15e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8016c6e:	8821      	ldrh	r1, [r4, #0]
 8016c70:	440a      	add	r2, r1
 8016c72:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8016c74:	42ba      	cmp	r2, r7
 8016c76:	d3ec      	bcc.n	8016c52 <mem_malloc+0x62>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8016c78:	f107 0314 	add.w	r3, r7, #20
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d377      	bcc.n	8016d70 <mem_malloc+0x180>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016c80:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016c84:	f642 63e0 	movw	r3, #12000	; 0x2ee0
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8016c88:	44b2      	add	sl, r6
 8016c8a:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016c8e:	459a      	cmp	sl, r3
 8016c90:	f000 80a7 	beq.w	8016de2 <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 8016c94:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8016c98:	2200      	movs	r2, #0
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 8016c9a:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 8016c9e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016ca0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
          mem2->next = mem->next;
 8016ca4:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8016ca8:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 8016caa:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8016cae:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016cb2:	f830 300a 	ldrh.w	r3, [r0, sl]
 8016cb6:	4293      	cmp	r3, r2
 8016cb8:	d002      	beq.n	8016cc0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016cba:	4418      	add	r0, r3
 8016cbc:	f8a0 a002 	strh.w	sl, [r0, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8016cc0:	4a50      	ldr	r2, [pc, #320]	; (8016e04 <mem_malloc+0x214>)
 8016cc2:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8016cc6:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 8016cca:	3308      	adds	r3, #8
 8016ccc:	443b      	add	r3, r7
 8016cce:	b29b      	uxth	r3, r3
 8016cd0:	4299      	cmp	r1, r3
 8016cd2:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 8016cd6:	d359      	bcc.n	8016d8c <mem_malloc+0x19c>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8016cd8:	f8d9 3000 	ldr.w	r3, [r9]
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8016cdc:	4e4a      	ldr	r6, [pc, #296]	; (8016e08 <mem_malloc+0x218>)
        if (mem == lfree) {
 8016cde:	42a3      	cmp	r3, r4
 8016ce0:	d11e      	bne.n	8016d20 <mem_malloc+0x130>
  return (struct mem *)(void *)&ram[ptr];
 8016ce2:	4b46      	ldr	r3, [pc, #280]	; (8016dfc <mem_malloc+0x20c>)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 8016ce4:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 8016ce6:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 8016ce8:	f8d3 c000 	ldr.w	ip, [r3]
          struct mem *cur = lfree;
 8016cec:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 8016cf0:	791a      	ldrb	r2, [r3, #4]
 8016cf2:	b942      	cbnz	r2, 8016d06 <mem_malloc+0x116>
 8016cf4:	e009      	b.n	8016d0a <mem_malloc+0x11a>
            mem_free_count = 0;
 8016cf6:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 8016cf8:	782a      	ldrb	r2, [r5, #0]
 8016cfa:	2a00      	cmp	r2, #0
 8016cfc:	d14d      	bne.n	8016d9a <mem_malloc+0x1aa>
  return (struct mem *)(void *)&ram[ptr];
 8016cfe:	881b      	ldrh	r3, [r3, #0]
 8016d00:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 8016d02:	791a      	ldrb	r2, [r3, #4]
 8016d04:	b10a      	cbz	r2, 8016d0a <mem_malloc+0x11a>
 8016d06:	4299      	cmp	r1, r3
 8016d08:	d1f5      	bne.n	8016cf6 <mem_malloc+0x106>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8016d0a:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016d0e:	f8d9 3000 	ldr.w	r3, [r9]
 8016d12:	4299      	cmp	r1, r3
 8016d14:	d004      	beq.n	8016d20 <mem_malloc+0x130>
 8016d16:	f8d9 3000 	ldr.w	r3, [r9]
 8016d1a:	791b      	ldrb	r3, [r3, #4]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d158      	bne.n	8016dd2 <mem_malloc+0x1e2>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016d20:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 8016d22:	4835      	ldr	r0, [pc, #212]	; (8016df8 <mem_malloc+0x208>)
 8016d24:	f009 f9c2 	bl	80200ac <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016d28:	6833      	ldr	r3, [r6, #0]
 8016d2a:	4427      	add	r7, r4
 8016d2c:	42bb      	cmp	r3, r7
 8016d2e:	d348      	bcc.n	8016dc2 <mem_malloc+0x1d2>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016d30:	07a3      	lsls	r3, r4, #30
 8016d32:	d137      	bne.n	8016da4 <mem_malloc+0x1b4>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016d34:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 8016d38:	4641      	mov	r1, r8
  mem->user_size = user_size;
 8016d3a:	f8a4 8006 	strh.w	r8, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 8016d3e:	4628      	mov	r0, r5
 8016d40:	f7ff fd30 	bl	80167a4 <mem_overflow_init_raw>
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 8016d44:	f7ff fc08 	bl	8016558 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8016d48:	4628      	mov	r0, r5
 8016d4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d4e:	8826      	ldrh	r6, [r4, #0]
 8016d50:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8016d52:	459c      	cmp	ip, r3
 8016d54:	d880      	bhi.n	8016c58 <mem_malloc+0x68>
  MEM_STATS_INC(err);
 8016d56:	4a2b      	ldr	r2, [pc, #172]	; (8016e04 <mem_malloc+0x214>)
  return NULL;
 8016d58:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 8016d5a:	4827      	ldr	r0, [pc, #156]	; (8016df8 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 8016d5c:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8016d60:	3301      	adds	r3, #1
 8016d62:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8016d66:	f009 f9a1 	bl	80200ac <sys_mutex_unlock>
}
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8016d70:	4a24      	ldr	r2, [pc, #144]	; (8016e04 <mem_malloc+0x214>)
          mem->used = 1;
 8016d72:	2301      	movs	r3, #1
 8016d74:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8016d76:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 8016d7a:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
 8016d7e:	440b      	add	r3, r1
 8016d80:	1b9b      	subs	r3, r3, r6
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	4298      	cmp	r0, r3
 8016d86:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 8016d8a:	d2a5      	bcs.n	8016cd8 <mem_malloc+0xe8>
 8016d8c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8016d90:	e7a2      	b.n	8016cd8 <mem_malloc+0xe8>
    return NULL;
 8016d92:	2500      	movs	r5, #0
}
 8016d94:	4628      	mov	r0, r5
 8016d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem == lfree) {
 8016d9a:	f8d9 3000 	ldr.w	r3, [r9]
 8016d9e:	42a3      	cmp	r3, r4
 8016da0:	d0a4      	beq.n	8016cec <mem_malloc+0xfc>
 8016da2:	e7bd      	b.n	8016d20 <mem_malloc+0x130>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8016da4:	4b19      	ldr	r3, [pc, #100]	; (8016e0c <mem_malloc+0x21c>)
 8016da6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8016daa:	4919      	ldr	r1, [pc, #100]	; (8016e10 <mem_malloc+0x220>)
 8016dac:	4819      	ldr	r0, [pc, #100]	; (8016e14 <mem_malloc+0x224>)
 8016dae:	f00a fd19 	bl	80217e4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016db2:	4b16      	ldr	r3, [pc, #88]	; (8016e0c <mem_malloc+0x21c>)
 8016db4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016db8:	4917      	ldr	r1, [pc, #92]	; (8016e18 <mem_malloc+0x228>)
 8016dba:	4816      	ldr	r0, [pc, #88]	; (8016e14 <mem_malloc+0x224>)
 8016dbc:	f00a fd12 	bl	80217e4 <iprintf>
 8016dc0:	e7b8      	b.n	8016d34 <mem_malloc+0x144>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8016dc2:	4b12      	ldr	r3, [pc, #72]	; (8016e0c <mem_malloc+0x21c>)
 8016dc4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8016dc8:	4914      	ldr	r1, [pc, #80]	; (8016e1c <mem_malloc+0x22c>)
 8016dca:	4812      	ldr	r0, [pc, #72]	; (8016e14 <mem_malloc+0x224>)
 8016dcc:	f00a fd0a 	bl	80217e4 <iprintf>
 8016dd0:	e7ae      	b.n	8016d30 <mem_malloc+0x140>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8016dd2:	4b0e      	ldr	r3, [pc, #56]	; (8016e0c <mem_malloc+0x21c>)
 8016dd4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8016dd8:	4911      	ldr	r1, [pc, #68]	; (8016e20 <mem_malloc+0x230>)
 8016dda:	480e      	ldr	r0, [pc, #56]	; (8016e14 <mem_malloc+0x224>)
 8016ddc:	f00a fd02 	bl	80217e4 <iprintf>
 8016de0:	e79e      	b.n	8016d20 <mem_malloc+0x130>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016de2:	4b0a      	ldr	r3, [pc, #40]	; (8016e0c <mem_malloc+0x21c>)
 8016de4:	f240 3287 	movw	r2, #903	; 0x387
 8016de8:	490e      	ldr	r1, [pc, #56]	; (8016e24 <mem_malloc+0x234>)
 8016dea:	480a      	ldr	r0, [pc, #40]	; (8016e14 <mem_malloc+0x224>)
 8016dec:	f00a fcfa 	bl	80217e4 <iprintf>
 8016df0:	4b02      	ldr	r3, [pc, #8]	; (8016dfc <mem_malloc+0x20c>)
 8016df2:	8821      	ldrh	r1, [r4, #0]
 8016df4:	6818      	ldr	r0, [r3, #0]
 8016df6:	e74d      	b.n	8016c94 <mem_malloc+0xa4>
 8016df8:	200228a8 	.word	0x200228a8
 8016dfc:	200228ac 	.word	0x200228ac
 8016e00:	200228a4 	.word	0x200228a4
 8016e04:	20036794 	.word	0x20036794
 8016e08:	200228b0 	.word	0x200228b0
 8016e0c:	0803e4e8 	.word	0x0803e4e8
 8016e10:	0803e7f4 	.word	0x0803e7f4
 8016e14:	08027fec 	.word	0x08027fec
 8016e18:	0803e824 	.word	0x0803e824
 8016e1c:	0803e7c4 	.word	0x0803e7c4
 8016e20:	0803e7a8 	.word	0x0803e7a8
 8016e24:	0803e794 	.word	0x0803e794
 8016e28:	200228a0 	.word	0x200228a0

08016e2c <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 8016e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e30:	4f12      	ldr	r7, [pc, #72]	; (8016e7c <memp_overflow_check_all+0x50>)
 8016e32:	2308      	movs	r3, #8
 8016e34:	4c12      	ldr	r4, [pc, #72]	; (8016e80 <memp_overflow_check_all+0x54>)
 8016e36:	f107 083c 	add.w	r8, r7, #60	; 0x3c
 8016e3a:	4d12      	ldr	r5, [pc, #72]	; (8016e84 <memp_overflow_check_all+0x58>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8016e3c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8016e88 <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8016e40:	3403      	adds	r4, #3
 8016e42:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8016e46:	b183      	cbz	r3, 8016e6a <memp_overflow_check_all+0x3e>
 8016e48:	8929      	ldrh	r1, [r5, #8]
 8016e4a:	2600      	movs	r6, #0
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 8016e4c:	3601      	adds	r6, #1
 8016e4e:	f104 001c 	add.w	r0, r4, #28
 8016e52:	682b      	ldr	r3, [r5, #0]
 8016e54:	464a      	mov	r2, r9
 8016e56:	f7ff fc59 	bl	801670c <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8016e5a:	8929      	ldrh	r1, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8016e5c:	b2b3      	uxth	r3, r6
 8016e5e:	8968      	ldrh	r0, [r5, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8016e60:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8016e64:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8016e66:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8016e68:	d8f0      	bhi.n	8016e4c <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 8016e6a:	45b8      	cmp	r8, r7
 8016e6c:	d004      	beq.n	8016e78 <memp_overflow_check_all+0x4c>
 8016e6e:	f857 5b04 	ldr.w	r5, [r7], #4
 8016e72:	68ec      	ldr	r4, [r5, #12]
 8016e74:	896b      	ldrh	r3, [r5, #10]
 8016e76:	e7e3      	b.n	8016e40 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8016e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e7c:	0803eb04 	.word	0x0803eb04
 8016e80:	2002a988 	.word	0x2002a988
 8016e84:	0803ea4c 	.word	0x0803ea4c
 8016e88:	0803e848 	.word	0x0803e848

08016e8c <do_memp_malloc_pool_fn.isra.0>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8016e8c:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8016e8e:	680c      	ldr	r4, [r1, #0]
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8016e90:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8016e92:	b19c      	cbz	r4, 8016ebc <do_memp_malloc_pool_fn.isra.0+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016e94:	6826      	ldr	r6, [r4, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 8016e96:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 8016e98:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 8016e9a:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 8016e9c:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016ea0:	07a3      	lsls	r3, r4, #30
 8016ea2:	d111      	bne.n	8016ec8 <do_memp_malloc_pool_fn.isra.0+0x3c>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8016ea4:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8016ea6:	341c      	adds	r4, #28
    desc->stats->used++;
 8016ea8:	8893      	ldrh	r3, [r2, #4]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8016eaa:	4620      	mov	r0, r4
    if (desc->stats->used > desc->stats->max) {
 8016eac:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 8016eae:	3301      	adds	r3, #1
 8016eb0:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 8016eb2:	4299      	cmp	r1, r3
    desc->stats->used++;
 8016eb4:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 8016eb6:	bf38      	it	cc
 8016eb8:	80d3      	strhcc	r3, [r2, #6]
}
 8016eba:	bd70      	pop	{r4, r5, r6, pc}
    desc->stats->err++;
 8016ebc:	6802      	ldr	r2, [r0, #0]
}
 8016ebe:	4620      	mov	r0, r4
    desc->stats->err++;
 8016ec0:	8813      	ldrh	r3, [r2, #0]
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	8013      	strh	r3, [r2, #0]
}
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8016ec8:	4b03      	ldr	r3, [pc, #12]	; (8016ed8 <do_memp_malloc_pool_fn.isra.0+0x4c>)
 8016eca:	f44f 728c 	mov.w	r2, #280	; 0x118
 8016ece:	4903      	ldr	r1, [pc, #12]	; (8016edc <do_memp_malloc_pool_fn.isra.0+0x50>)
 8016ed0:	4803      	ldr	r0, [pc, #12]	; (8016ee0 <do_memp_malloc_pool_fn.isra.0+0x54>)
 8016ed2:	f00a fc87 	bl	80217e4 <iprintf>
 8016ed6:	e7e5      	b.n	8016ea4 <do_memp_malloc_pool_fn.isra.0+0x18>
 8016ed8:	0803e850 	.word	0x0803e850
 8016edc:	0803e880 	.word	0x0803e880
 8016ee0:	08027fec 	.word	0x08027fec

08016ee4 <do_memp_free_pool.isra.0>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8016ee4:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8016ee6:	b570      	push	{r4, r5, r6, lr}
 8016ee8:	4614      	mov	r4, r2
 8016eea:	4606      	mov	r6, r0
 8016eec:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8016eee:	d116      	bne.n	8016f1e <do_memp_free_pool.isra.0+0x3a>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8016ef0:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8016ef2:	f1a4 031c 	sub.w	r3, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8016ef6:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 8016ef8:	8882      	ldrh	r2, [r0, #4]
  memp->next = *desc->tab;
 8016efa:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 8016efc:	3a01      	subs	r2, #1
 8016efe:	8082      	strh	r2, [r0, #4]
  memp->next = *desc->tab;
 8016f00:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 8016f04:	600b      	str	r3, [r1, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016f06:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 8016f0a:	b13a      	cbz	r2, 8016f1c <do_memp_free_pool.isra.0+0x38>
      if (t == h) {
 8016f0c:	4293      	cmp	r3, r2
 8016f0e:	d00e      	beq.n	8016f2e <do_memp_free_pool.isra.0+0x4a>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8016f10:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016f12:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8016f14:	b112      	cbz	r2, 8016f1c <do_memp_free_pool.isra.0+0x38>
 8016f16:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d1f6      	bne.n	8016f0a <do_memp_free_pool.isra.0+0x26>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8016f1c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8016f1e:	4b08      	ldr	r3, [pc, #32]	; (8016f40 <do_memp_free_pool.isra.0+0x5c>)
 8016f20:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8016f24:	4907      	ldr	r1, [pc, #28]	; (8016f44 <do_memp_free_pool.isra.0+0x60>)
 8016f26:	4808      	ldr	r0, [pc, #32]	; (8016f48 <do_memp_free_pool.isra.0+0x64>)
 8016f28:	f00a fc5c 	bl	80217e4 <iprintf>
 8016f2c:	e7e0      	b.n	8016ef0 <do_memp_free_pool.isra.0+0xc>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8016f2e:	4b04      	ldr	r3, [pc, #16]	; (8016f40 <do_memp_free_pool.isra.0+0x5c>)
 8016f30:	f240 1285 	movw	r2, #389	; 0x185
 8016f34:	4905      	ldr	r1, [pc, #20]	; (8016f4c <do_memp_free_pool.isra.0+0x68>)
 8016f36:	4804      	ldr	r0, [pc, #16]	; (8016f48 <do_memp_free_pool.isra.0+0x64>)
}
 8016f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 8016f3c:	f00a bc52 	b.w	80217e4 <iprintf>
 8016f40:	0803e850 	.word	0x0803e850
 8016f44:	0803e8a4 	.word	0x0803e8a4
 8016f48:	08027fec 	.word	0x08027fec
 8016f4c:	0803e8c4 	.word	0x0803e8c4

08016f50 <memp_init_pool>:
{
 8016f50:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 8016f52:	2200      	movs	r2, #0
{
 8016f54:	4605      	mov	r5, r0
  *desc->tab = NULL;
 8016f56:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 8016f5a:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 8016f5c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8016f5e:	b1a8      	cbz	r0, 8016f8c <memp_init_pool+0x3c>
 8016f60:	3403      	adds	r4, #3
 8016f62:	8929      	ldrh	r1, [r5, #8]
 8016f64:	4616      	mov	r6, r2
 8016f66:	f024 0403 	bic.w	r4, r4, #3
 8016f6a:	e001      	b.n	8016f70 <memp_init_pool+0x20>
 8016f6c:	692b      	ldr	r3, [r5, #16]
 8016f6e:	681a      	ldr	r2, [r3, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8016f70:	f104 001c 	add.w	r0, r4, #28
    memp->next = *desc->tab;
 8016f74:	6022      	str	r2, [r4, #0]
    *desc->tab = memp;
 8016f76:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8016f78:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8016f7a:	f7ff fc13 	bl	80167a4 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016f7e:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 8016f80:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8016f82:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 8016f86:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8016f88:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 8016f8a:	dcef      	bgt.n	8016f6c <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 8016f8c:	686b      	ldr	r3, [r5, #4]
 8016f8e:	8058      	strh	r0, [r3, #2]
}
 8016f90:	bd70      	pop	{r4, r5, r6, pc}
 8016f92:	bf00      	nop

08016f94 <memp_init>:
{
 8016f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f96:	4c0a      	ldr	r4, [pc, #40]	; (8016fc0 <memp_init+0x2c>)
 8016f98:	4e0a      	ldr	r6, [pc, #40]	; (8016fc4 <memp_init+0x30>)
 8016f9a:	f104 0740 	add.w	r7, r4, #64	; 0x40
 8016f9e:	4d0a      	ldr	r5, [pc, #40]	; (8016fc8 <memp_init+0x34>)
 8016fa0:	e001      	b.n	8016fa6 <memp_init+0x12>
 8016fa2:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f7ff ffd2 	bl	8016f50 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8016fac:	686b      	ldr	r3, [r5, #4]
 8016fae:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8016fb2:	42bc      	cmp	r4, r7
 8016fb4:	d1f5      	bne.n	8016fa2 <memp_init+0xe>
}
 8016fb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 8016fba:	f7ff bf37 	b.w	8016e2c <memp_overflow_check_all>
 8016fbe:	bf00      	nop
 8016fc0:	20036848 	.word	0x20036848
 8016fc4:	0803eb04 	.word	0x0803eb04
 8016fc8:	0803ea4c 	.word	0x0803ea4c

08016fcc <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016fcc:	280f      	cmp	r0, #15
{
 8016fce:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016fd0:	d80f      	bhi.n	8016ff2 <memp_malloc_fn+0x26>
  memp_overflow_check_all();
 8016fd2:	460d      	mov	r5, r1
 8016fd4:	4616      	mov	r6, r2
 8016fd6:	4604      	mov	r4, r0
 8016fd8:	f7ff ff28 	bl	8016e2c <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8016fdc:	4909      	ldr	r1, [pc, #36]	; (8017004 <memp_malloc_fn+0x38>)
 8016fde:	4633      	mov	r3, r6
 8016fe0:	462a      	mov	r2, r5
 8016fe2:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 8016fe6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 8016fea:	6901      	ldr	r1, [r0, #16]
 8016fec:	3004      	adds	r0, #4
 8016fee:	f7ff bf4d 	b.w	8016e8c <do_memp_malloc_pool_fn.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016ff2:	4b05      	ldr	r3, [pc, #20]	; (8017008 <memp_malloc_fn+0x3c>)
 8016ff4:	f240 1257 	movw	r2, #343	; 0x157
 8016ff8:	4904      	ldr	r1, [pc, #16]	; (801700c <memp_malloc_fn+0x40>)
 8016ffa:	4805      	ldr	r0, [pc, #20]	; (8017010 <memp_malloc_fn+0x44>)
 8016ffc:	f00a fbf2 	bl	80217e4 <iprintf>
}
 8017000:	2000      	movs	r0, #0
 8017002:	bd70      	pop	{r4, r5, r6, pc}
 8017004:	0803eb00 	.word	0x0803eb00
 8017008:	0803e850 	.word	0x0803e850
 801700c:	0803e8d0 	.word	0x0803e8d0
 8017010:	08027fec 	.word	0x08027fec

08017014 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017014:	280f      	cmp	r0, #15
 8017016:	d811      	bhi.n	801703c <memp_free+0x28>
{
 8017018:	b570      	push	{r4, r5, r6, lr}
 801701a:	460d      	mov	r5, r1

  if (mem == NULL) {
 801701c:	b169      	cbz	r1, 801703a <memp_free+0x26>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801701e:	4604      	mov	r4, r0
 8017020:	f7ff ff04 	bl	8016e2c <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017024:	4b09      	ldr	r3, [pc, #36]	; (801704c <memp_free+0x38>)
 8017026:	462a      	mov	r2, r5
 8017028:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801702c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8017030:	f100 0110 	add.w	r1, r0, #16
 8017034:	3004      	adds	r0, #4
 8017036:	f7ff bf55 	b.w	8016ee4 <do_memp_free_pool.isra.0>
}
 801703a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801703c:	4b04      	ldr	r3, [pc, #16]	; (8017050 <memp_free+0x3c>)
 801703e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017042:	4904      	ldr	r1, [pc, #16]	; (8017054 <memp_free+0x40>)
 8017044:	4804      	ldr	r0, [pc, #16]	; (8017058 <memp_free+0x44>)
 8017046:	f00a bbcd 	b.w	80217e4 <iprintf>
 801704a:	bf00      	nop
 801704c:	0803eb00 	.word	0x0803eb00
 8017050:	0803e850 	.word	0x0803e850
 8017054:	0803e8f0 	.word	0x0803e8f0
 8017058:	08027fec 	.word	0x08027fec

0801705c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801705c:	f06f 000b 	mvn.w	r0, #11
 8017060:	4770      	bx	lr
 8017062:	bf00      	nop

08017064 <netif_issue_reports>:
{
 8017064:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017066:	4604      	mov	r4, r0
{
 8017068:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801706a:	b160      	cbz	r0, 8017086 <netif_issue_reports+0x22>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801706c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8017070:	f003 0205 	and.w	r2, r3, #5
 8017074:	2a05      	cmp	r2, #5
 8017076:	d105      	bne.n	8017084 <netif_issue_reports+0x20>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017078:	07ea      	lsls	r2, r5, #31
 801707a:	d503      	bpl.n	8017084 <netif_issue_reports+0x20>
 801707c:	6862      	ldr	r2, [r4, #4]
 801707e:	b10a      	cbz	r2, 8017084 <netif_issue_reports+0x20>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017080:	071b      	lsls	r3, r3, #28
 8017082:	d408      	bmi.n	8017096 <netif_issue_reports+0x32>
}
 8017084:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017086:	4b07      	ldr	r3, [pc, #28]	; (80170a4 <netif_issue_reports+0x40>)
 8017088:	f240 326d 	movw	r2, #877	; 0x36d
 801708c:	4906      	ldr	r1, [pc, #24]	; (80170a8 <netif_issue_reports+0x44>)
 801708e:	4807      	ldr	r0, [pc, #28]	; (80170ac <netif_issue_reports+0x48>)
 8017090:	f00a fba8 	bl	80217e4 <iprintf>
 8017094:	e7ea      	b.n	801706c <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8017096:	1d21      	adds	r1, r4, #4
 8017098:	4620      	mov	r0, r4
}
 801709a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 801709e:	f007 bdb7 	b.w	801ec10 <etharp_request>
 80170a2:	bf00      	nop
 80170a4:	0803eb40 	.word	0x0803eb40
 80170a8:	0803eb74 	.word	0x0803eb74
 80170ac:	08027fec 	.word	0x08027fec

080170b0 <netif_do_set_ipaddr>:
{
 80170b0:	b570      	push	{r4, r5, r6, lr}
 80170b2:	4605      	mov	r5, r0
 80170b4:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80170b6:	460c      	mov	r4, r1
{
 80170b8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80170ba:	b309      	cbz	r1, 8017100 <netif_do_set_ipaddr+0x50>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80170bc:	686b      	ldr	r3, [r5, #4]
 80170be:	6822      	ldr	r2, [r4, #0]
 80170c0:	429a      	cmp	r2, r3
 80170c2:	d102      	bne.n	80170ca <netif_do_set_ipaddr+0x1a>
  return 0; /* address unchanged */
 80170c4:	2000      	movs	r0, #0
}
 80170c6:	b002      	add	sp, #8
 80170c8:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80170ca:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80170cc:	4630      	mov	r0, r6
 80170ce:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80170d0:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80170d2:	f002 f8f9 	bl	80192c8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80170d6:	a901      	add	r1, sp, #4
 80170d8:	4630      	mov	r0, r6
 80170da:	f005 fd83 	bl	801cbe4 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80170de:	a901      	add	r1, sp, #4
 80170e0:	4630      	mov	r0, r6
 80170e2:	f000 fe99 	bl	8017e18 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80170e6:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80170e8:	2101      	movs	r1, #1
 80170ea:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80170ec:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80170ee:	f7ff ffb9 	bl	8017064 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 80170f2:	69eb      	ldr	r3, [r5, #28]
 80170f4:	b10b      	cbz	r3, 80170fa <netif_do_set_ipaddr+0x4a>
 80170f6:	4628      	mov	r0, r5
 80170f8:	4798      	blx	r3
    return 1; /* address changed */
 80170fa:	2001      	movs	r0, #1
}
 80170fc:	b002      	add	sp, #8
 80170fe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017100:	4b03      	ldr	r3, [pc, #12]	; (8017110 <netif_do_set_ipaddr+0x60>)
 8017102:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017106:	4903      	ldr	r1, [pc, #12]	; (8017114 <netif_do_set_ipaddr+0x64>)
 8017108:	4803      	ldr	r0, [pc, #12]	; (8017118 <netif_do_set_ipaddr+0x68>)
 801710a:	f00a fb6b 	bl	80217e4 <iprintf>
 801710e:	e7d5      	b.n	80170bc <netif_do_set_ipaddr+0xc>
 8017110:	0803eb40 	.word	0x0803eb40
 8017114:	0803eb98 	.word	0x0803eb98
 8017118:	08027fec 	.word	0x08027fec

0801711c <netif_init>:
}
 801711c:	4770      	bx	lr
 801711e:	bf00      	nop

08017120 <netif_set_addr>:
{
 8017120:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8017122:	4e15      	ldr	r6, [pc, #84]	; (8017178 <netif_set_addr+0x58>)
{
 8017124:	b083      	sub	sp, #12
 8017126:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8017128:	2900      	cmp	r1, #0
 801712a:	bf14      	ite	ne
 801712c:	460f      	movne	r7, r1
 801712e:	4637      	moveq	r7, r6
    netmask = IP4_ADDR_ANY4;
 8017130:	2a00      	cmp	r2, #0
 8017132:	bf14      	ite	ne
 8017134:	4615      	movne	r5, r2
 8017136:	4635      	moveq	r5, r6
    gw = IP4_ADDR_ANY4;
 8017138:	2b00      	cmp	r3, #0
 801713a:	bf18      	it	ne
 801713c:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	b16b      	cbz	r3, 801715e <netif_set_addr+0x3e>
 8017142:	2100      	movs	r1, #0
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017144:	682b      	ldr	r3, [r5, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017146:	68a2      	ldr	r2, [r4, #8]
 8017148:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801714a:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801714c:	bf18      	it	ne
 801714e:	60a3      	strne	r3, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017150:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017152:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017154:	bf18      	it	ne
 8017156:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8017158:	b139      	cbz	r1, 801716a <netif_set_addr+0x4a>
}
 801715a:	b003      	add	sp, #12
 801715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801715e:	4639      	mov	r1, r7
 8017160:	aa01      	add	r2, sp, #4
 8017162:	f7ff ffa5 	bl	80170b0 <netif_do_set_ipaddr>
 8017166:	2101      	movs	r1, #1
 8017168:	e7ec      	b.n	8017144 <netif_set_addr+0x24>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801716a:	4639      	mov	r1, r7
 801716c:	aa01      	add	r2, sp, #4
 801716e:	4620      	mov	r0, r4
 8017170:	f7ff ff9e 	bl	80170b0 <netif_do_set_ipaddr>
}
 8017174:	b003      	add	sp, #12
 8017176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017178:	08040cd4 	.word	0x08040cd4

0801717c <netif_add>:
{
 801717c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017180:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017182:	4606      	mov	r6, r0
 8017184:	2800      	cmp	r0, #0
 8017186:	d07d      	beq.n	8017284 <netif_add+0x108>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017188:	2f00      	cmp	r7, #0
 801718a:	f000 8084 	beq.w	8017296 <netif_add+0x11a>
  if (ipaddr == NULL) {
 801718e:	4688      	mov	r8, r1
  netif->num = netif_num;
 8017190:	f8df a12c 	ldr.w	sl, [pc, #300]	; 80172c0 <netif_add+0x144>
  netif->state = state;
 8017194:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017196:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017198:	4d43      	ldr	r5, [pc, #268]	; (80172a8 <netif_add+0x12c>)
  netif->state = state;
 801719a:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 801719c:	f89a e000 	ldrb.w	lr, [sl]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80171a0:	42a3      	cmp	r3, r4
 80171a2:	bf08      	it	eq
 80171a4:	462b      	moveq	r3, r5
  netif->input = input;
 80171a6:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 80171a8:	42a2      	cmp	r2, r4
 80171aa:	bf08      	it	eq
 80171ac:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 80171ae:	f8df c114 	ldr.w	ip, [pc, #276]	; 80172c4 <netif_add+0x148>
  netif->input = input;
 80171b2:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80171b4:	45a0      	cmp	r8, r4
 80171b6:	bf14      	ite	ne
 80171b8:	4641      	movne	r1, r8
 80171ba:	4629      	moveq	r1, r5
  netif->num = netif_num;
 80171bc:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 80171c0:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 80171c2:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 80171c4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80171c8:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 80171ca:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 80171ce:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 80171d2:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80171d6:	f7ff ffa3 	bl	8017120 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80171da:	4630      	mov	r0, r6
 80171dc:	47b8      	blx	r7
 80171de:	2800      	cmp	r0, #0
 80171e0:	d14d      	bne.n	801727e <netif_add+0x102>
 80171e2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 80171e6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 80172c8 <netif_add+0x14c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80171ea:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 80172b4 <netif_add+0x138>
 80171ee:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80172cc <netif_add+0x150>
 80171f2:	4f2e      	ldr	r7, [pc, #184]	; (80172ac <netif_add+0x130>)
      if (netif->num == 255) {
 80171f4:	2aff      	cmp	r2, #255	; 0xff
 80171f6:	d102      	bne.n	80171fe <netif_add+0x82>
        netif->num = 0;
 80171f8:	2300      	movs	r3, #0
 80171fa:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80171fe:	f8d8 4000 	ldr.w	r4, [r8]
 8017202:	b3cc      	cbz	r4, 8017278 <netif_add+0xfc>
      num_netifs = 0;
 8017204:	2500      	movs	r5, #0
 8017206:	e007      	b.n	8017218 <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8017208:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801720c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8017210:	429a      	cmp	r2, r3
 8017212:	d014      	beq.n	801723e <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017214:	6824      	ldr	r4, [r4, #0]
 8017216:	b1fc      	cbz	r4, 8017258 <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017218:	42a6      	cmp	r6, r4
        num_netifs++;
 801721a:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801721e:	d013      	beq.n	8017248 <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017220:	2dff      	cmp	r5, #255	; 0xff
 8017222:	ddf1      	ble.n	8017208 <netif_add+0x8c>
 8017224:	465b      	mov	r3, fp
 8017226:	f240 128d 	movw	r2, #397	; 0x18d
 801722a:	4921      	ldr	r1, [pc, #132]	; (80172b0 <netif_add+0x134>)
 801722c:	4638      	mov	r0, r7
 801722e:	f00a fad9 	bl	80217e4 <iprintf>
        if (netif2->num == netif->num) {
 8017232:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8017236:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801723a:	429a      	cmp	r2, r3
 801723c:	d1ea      	bne.n	8017214 <netif_add+0x98>
          netif->num++;
 801723e:	3201      	adds	r2, #1
 8017240:	b2d2      	uxtb	r2, r2
 8017242:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 8017246:	e7d5      	b.n	80171f4 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017248:	465b      	mov	r3, fp
 801724a:	f240 128b 	movw	r2, #395	; 0x18b
 801724e:	4649      	mov	r1, r9
 8017250:	4638      	mov	r0, r7
 8017252:	f00a fac7 	bl	80217e4 <iprintf>
 8017256:	e7e3      	b.n	8017220 <netif_add+0xa4>
 8017258:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801725c:	2bfe      	cmp	r3, #254	; 0xfe
 801725e:	d009      	beq.n	8017274 <netif_add+0xf8>
    netif_num = (u8_t)(netif->num + 1);
 8017260:	3301      	adds	r3, #1
 8017262:	b2db      	uxtb	r3, r3
  return netif;
 8017264:	4630      	mov	r0, r6
  netif->next = netif_list;
 8017266:	6034      	str	r4, [r6, #0]
 8017268:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801726c:	f8c8 6000 	str.w	r6, [r8]
}
 8017270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netif_num = 0;
 8017274:	2300      	movs	r3, #0
 8017276:	e7f5      	b.n	8017264 <netif_add+0xe8>
 8017278:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801727c:	e7ee      	b.n	801725c <netif_add+0xe0>
    return NULL;
 801727e:	4620      	mov	r0, r4
}
 8017280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8017284:	4b0b      	ldr	r3, [pc, #44]	; (80172b4 <netif_add+0x138>)
 8017286:	f240 1227 	movw	r2, #295	; 0x127
 801728a:	490b      	ldr	r1, [pc, #44]	; (80172b8 <netif_add+0x13c>)
 801728c:	4807      	ldr	r0, [pc, #28]	; (80172ac <netif_add+0x130>)
 801728e:	f00a faa9 	bl	80217e4 <iprintf>
 8017292:	4630      	mov	r0, r6
 8017294:	e7ec      	b.n	8017270 <netif_add+0xf4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017296:	4b07      	ldr	r3, [pc, #28]	; (80172b4 <netif_add+0x138>)
 8017298:	f44f 7294 	mov.w	r2, #296	; 0x128
 801729c:	4907      	ldr	r1, [pc, #28]	; (80172bc <netif_add+0x140>)
 801729e:	4803      	ldr	r0, [pc, #12]	; (80172ac <netif_add+0x130>)
 80172a0:	f00a faa0 	bl	80217e4 <iprintf>
 80172a4:	4638      	mov	r0, r7
 80172a6:	e7e3      	b.n	8017270 <netif_add+0xf4>
 80172a8:	08040cd4 	.word	0x08040cd4
 80172ac:	08027fec 	.word	0x08027fec
 80172b0:	0803ebfc 	.word	0x0803ebfc
 80172b4:	0803eb40 	.word	0x0803eb40
 80172b8:	0803eba8 	.word	0x0803eba8
 80172bc:	0803ebc4 	.word	0x0803ebc4
 80172c0:	200229b4 	.word	0x200229b4
 80172c4:	0801705d 	.word	0x0801705d
 80172c8:	20036788 	.word	0x20036788
 80172cc:	0803ebe8 	.word	0x0803ebe8

080172d0 <netif_set_default>:
  netif_default = netif;
 80172d0:	4b01      	ldr	r3, [pc, #4]	; (80172d8 <netif_set_default+0x8>)
 80172d2:	6018      	str	r0, [r3, #0]
}
 80172d4:	4770      	bx	lr
 80172d6:	bf00      	nop
 80172d8:	2003678c 	.word	0x2003678c

080172dc <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80172dc:	b198      	cbz	r0, 8017306 <netif_set_up+0x2a>
{
 80172de:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80172e0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80172e4:	4604      	mov	r4, r0
 80172e6:	07da      	lsls	r2, r3, #31
 80172e8:	d40c      	bmi.n	8017304 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80172ea:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 80172ee:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 80172f0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 80172f4:	b102      	cbz	r2, 80172f8 <netif_set_up+0x1c>
 80172f6:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80172f8:	4620      	mov	r0, r4
 80172fa:	2103      	movs	r1, #3
}
 80172fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017300:	f7ff beb0 	b.w	8017064 <netif_issue_reports>
}
 8017304:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017306:	4b03      	ldr	r3, [pc, #12]	; (8017314 <netif_set_up+0x38>)
 8017308:	f44f 7254 	mov.w	r2, #848	; 0x350
 801730c:	4902      	ldr	r1, [pc, #8]	; (8017318 <netif_set_up+0x3c>)
 801730e:	4803      	ldr	r0, [pc, #12]	; (801731c <netif_set_up+0x40>)
 8017310:	f00a ba68 	b.w	80217e4 <iprintf>
 8017314:	0803eb40 	.word	0x0803eb40
 8017318:	0803ec2c 	.word	0x0803ec2c
 801731c:	08027fec 	.word	0x08027fec

08017320 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017320:	b1a8      	cbz	r0, 801734e <netif_set_down+0x2e>
{
 8017322:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8017324:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8017328:	4604      	mov	r4, r0
 801732a:	07da      	lsls	r2, r3, #31
 801732c:	d50b      	bpl.n	8017346 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801732e:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017332:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017334:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017338:	d406      	bmi.n	8017348 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801733a:	69e3      	ldr	r3, [r4, #28]
 801733c:	b11b      	cbz	r3, 8017346 <netif_set_down+0x26>
 801733e:	4620      	mov	r0, r4
}
 8017340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8017344:	4718      	bx	r3
}
 8017346:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8017348:	f007 f998 	bl	801e67c <etharp_cleanup_netif>
 801734c:	e7f5      	b.n	801733a <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801734e:	4b03      	ldr	r3, [pc, #12]	; (801735c <netif_set_down+0x3c>)
 8017350:	f240 329b 	movw	r2, #923	; 0x39b
 8017354:	4902      	ldr	r1, [pc, #8]	; (8017360 <netif_set_down+0x40>)
 8017356:	4803      	ldr	r0, [pc, #12]	; (8017364 <netif_set_down+0x44>)
 8017358:	f00a ba44 	b.w	80217e4 <iprintf>
 801735c:	0803eb40 	.word	0x0803eb40
 8017360:	0803ec48 	.word	0x0803ec48
 8017364:	08027fec 	.word	0x08027fec

08017368 <netif_set_status_callback>:
  if (netif) {
 8017368:	b100      	cbz	r0, 801736c <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801736a:	61c1      	str	r1, [r0, #28]
}
 801736c:	4770      	bx	lr
 801736e:	bf00      	nop

08017370 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017370:	b1b8      	cbz	r0, 80173a2 <netif_set_link_up+0x32>
{
 8017372:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8017374:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8017378:	4604      	mov	r4, r0
 801737a:	075a      	lsls	r2, r3, #29
 801737c:	d500      	bpl.n	8017380 <netif_set_link_up+0x10>
}
 801737e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8017380:	f043 0304 	orr.w	r3, r3, #4
 8017384:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 8017388:	f006 fc4a 	bl	801dc20 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801738c:	2103      	movs	r1, #3
 801738e:	4620      	mov	r0, r4
 8017390:	f7ff fe68 	bl	8017064 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8017394:	6a23      	ldr	r3, [r4, #32]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d0f1      	beq.n	801737e <netif_set_link_up+0xe>
 801739a:	4620      	mov	r0, r4
}
 801739c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 80173a0:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80173a2:	4b03      	ldr	r3, [pc, #12]	; (80173b0 <netif_set_link_up+0x40>)
 80173a4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80173a8:	4902      	ldr	r1, [pc, #8]	; (80173b4 <netif_set_link_up+0x44>)
 80173aa:	4803      	ldr	r0, [pc, #12]	; (80173b8 <netif_set_link_up+0x48>)
 80173ac:	f00a ba1a 	b.w	80217e4 <iprintf>
 80173b0:	0803eb40 	.word	0x0803eb40
 80173b4:	0803ec68 	.word	0x0803ec68
 80173b8:	08027fec 	.word	0x08027fec

080173bc <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80173bc:	b158      	cbz	r0, 80173d6 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80173be:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80173c2:	0751      	lsls	r1, r2, #29
 80173c4:	d506      	bpl.n	80173d4 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80173c6:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 80173ca:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80173cc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 80173d0:	b101      	cbz	r1, 80173d4 <netif_set_link_down+0x18>
 80173d2:	4708      	bx	r1
}
 80173d4:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80173d6:	4b03      	ldr	r3, [pc, #12]	; (80173e4 <netif_set_link_down+0x28>)
 80173d8:	f240 4206 	movw	r2, #1030	; 0x406
 80173dc:	4902      	ldr	r1, [pc, #8]	; (80173e8 <netif_set_link_down+0x2c>)
 80173de:	4803      	ldr	r0, [pc, #12]	; (80173ec <netif_set_link_down+0x30>)
 80173e0:	f00a ba00 	b.w	80217e4 <iprintf>
 80173e4:	0803eb40 	.word	0x0803eb40
 80173e8:	0803ec8c 	.word	0x0803ec8c
 80173ec:	08027fec 	.word	0x08027fec

080173f0 <netif_set_link_callback>:
  if (netif) {
 80173f0:	b100      	cbz	r0, 80173f4 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 80173f2:	6201      	str	r1, [r0, #32]
}
 80173f4:	4770      	bx	lr
 80173f6:	bf00      	nop

080173f8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80173f8:	4602      	mov	r2, r0
 80173fa:	b158      	cbz	r0, 8017414 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 80173fc:	4b06      	ldr	r3, [pc, #24]	; (8017418 <netif_get_by_index+0x20>)
 80173fe:	6818      	ldr	r0, [r3, #0]
 8017400:	b910      	cbnz	r0, 8017408 <netif_get_by_index+0x10>
 8017402:	e007      	b.n	8017414 <netif_get_by_index+0x1c>
 8017404:	6800      	ldr	r0, [r0, #0]
 8017406:	b130      	cbz	r0, 8017416 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 8017408:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801740c:	3301      	adds	r3, #1
 801740e:	b2db      	uxtb	r3, r3
 8017410:	4293      	cmp	r3, r2
 8017412:	d1f7      	bne.n	8017404 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 8017414:	4770      	bx	lr
 8017416:	4770      	bx	lr
 8017418:	20036788 	.word	0x20036788

0801741c <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801741c:	4907      	ldr	r1, [pc, #28]	; (801743c <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801741e:	2200      	movs	r2, #0
 8017420:	4b07      	ldr	r3, [pc, #28]	; (8017440 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017422:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017424:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017426:	b910      	cbnz	r0, 801742e <pbuf_free_ooseq_callback+0x12>
 8017428:	e006      	b.n	8017438 <pbuf_free_ooseq_callback+0x1c>
 801742a:	68c0      	ldr	r0, [r0, #12]
 801742c:	b120      	cbz	r0, 8017438 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801742e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8017430:	2b00      	cmp	r3, #0
 8017432:	d0fa      	beq.n	801742a <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017434:	f001 bf72 	b.w	801931c <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8017438:	4770      	bx	lr
 801743a:	bf00      	nop
 801743c:	200368a0 	.word	0x200368a0
 8017440:	20036790 	.word	0x20036790

08017444 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8017444:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017446:	b310      	cbz	r0, 801748e <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8017448:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801744c:	d21d      	bcs.n	801748a <pbuf_add_header_impl+0x46>
    return 1;
  }
  if (header_size_increment == 0) {
 801744e:	b1a1      	cbz	r1, 801747a <pbuf_add_header_impl+0x36>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8017450:	b28d      	uxth	r5, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8017452:	8904      	ldrh	r4, [r0, #8]
 8017454:	4603      	mov	r3, r0
 8017456:	442c      	add	r4, r5
 8017458:	b2a4      	uxth	r4, r4
 801745a:	42a5      	cmp	r5, r4
 801745c:	d815      	bhi.n	801748a <pbuf_add_header_impl+0x46>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801745e:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8017462:	2800      	cmp	r0, #0
 8017464:	db0b      	blt.n	801747e <pbuf_add_header_impl+0x3a>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8017466:	b182      	cbz	r2, 801748a <pbuf_add_header_impl+0x46>
      payload = (u8_t *)p->payload - header_size_increment;
 8017468:	6858      	ldr	r0, [r3, #4]
 801746a:	1a41      	subs	r1, r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 801746c:	895a      	ldrh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 801746e:	2000      	movs	r0, #0
  p->payload = payload;
 8017470:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017472:	4415      	add	r5, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017474:	811c      	strh	r4, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8017476:	815d      	strh	r5, [r3, #10]
}
 8017478:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 801747a:	4608      	mov	r0, r1
}
 801747c:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801747e:	6858      	ldr	r0, [r3, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8017480:	f103 0210 	add.w	r2, r3, #16
    payload = (u8_t *)p->payload - header_size_increment;
 8017484:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8017486:	4291      	cmp	r1, r2
 8017488:	d2f0      	bcs.n	801746c <pbuf_add_header_impl+0x28>
    return 1;
 801748a:	2001      	movs	r0, #1
}
 801748c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801748e:	4b04      	ldr	r3, [pc, #16]	; (80174a0 <pbuf_add_header_impl+0x5c>)
 8017490:	f240 12df 	movw	r2, #479	; 0x1df
 8017494:	4903      	ldr	r1, [pc, #12]	; (80174a4 <pbuf_add_header_impl+0x60>)
 8017496:	4804      	ldr	r0, [pc, #16]	; (80174a8 <pbuf_add_header_impl+0x64>)
 8017498:	f00a f9a4 	bl	80217e4 <iprintf>
    return 1;
 801749c:	2001      	movs	r0, #1
}
 801749e:	bd38      	pop	{r3, r4, r5, pc}
 80174a0:	0803ecb0 	.word	0x0803ecb0
 80174a4:	08040748 	.word	0x08040748
 80174a8:	08027fec 	.word	0x08027fec

080174ac <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80174ac:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80174b0:	2b01      	cmp	r3, #1
{
 80174b2:	b570      	push	{r4, r5, r6, lr}
 80174b4:	4614      	mov	r4, r2
 80174b6:	4606      	mov	r6, r0
 80174b8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80174ba:	d110      	bne.n	80174de <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80174bc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80174c0:	490b      	ldr	r1, [pc, #44]	; (80174f0 <pbuf_alloc_reference+0x44>)
 80174c2:	200e      	movs	r0, #14
 80174c4:	f7ff fd82 	bl	8016fcc <memp_malloc_fn>
  if (p == NULL) {
 80174c8:	b140      	cbz	r0, 80174dc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80174ca:	2300      	movs	r3, #0
  p->ref = 1;
 80174cc:	2201      	movs	r2, #1
  p->payload = payload;
 80174ce:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 80174d0:	8105      	strh	r5, [r0, #8]
  p->len = len;
 80174d2:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 80174d4:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 80174d6:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 80174d8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 80174da:	81c2      	strh	r2, [r0, #14]
}
 80174dc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80174de:	4b04      	ldr	r3, [pc, #16]	; (80174f0 <pbuf_alloc_reference+0x44>)
 80174e0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80174e4:	4903      	ldr	r1, [pc, #12]	; (80174f4 <pbuf_alloc_reference+0x48>)
 80174e6:	4804      	ldr	r0, [pc, #16]	; (80174f8 <pbuf_alloc_reference+0x4c>)
 80174e8:	f00a f97c 	bl	80217e4 <iprintf>
 80174ec:	e7e6      	b.n	80174bc <pbuf_alloc_reference+0x10>
 80174ee:	bf00      	nop
 80174f0:	0803ecb0 	.word	0x0803ecb0
 80174f4:	0803ece0 	.word	0x0803ece0
 80174f8:	08027fec 	.word	0x08027fec

080174fc <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80174fc:	3003      	adds	r0, #3
{
 80174fe:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8017500:	f020 0403 	bic.w	r4, r0, #3
{
 8017504:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8017508:	4618      	mov	r0, r3
 801750a:	9b03      	ldr	r3, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801750c:	190e      	adds	r6, r1, r4
 801750e:	42ae      	cmp	r6, r5
 8017510:	d80d      	bhi.n	801752e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8017512:	b103      	cbz	r3, 8017516 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017514:	4423      	add	r3, r4
  p->next = NULL;
 8017516:	2600      	movs	r6, #0
  p->flags = flags;
 8017518:	2502      	movs	r5, #2
  p->ref = 1;
 801751a:	2401      	movs	r4, #1
  p->type_internal = (u8_t)type;
 801751c:	7302      	strb	r2, [r0, #12]
  p->next = NULL;
 801751e:	6006      	str	r6, [r0, #0]
  p->flags = flags;
 8017520:	7345      	strb	r5, [r0, #13]
  p->ref = 1;
 8017522:	81c4      	strh	r4, [r0, #14]
  p->payload = payload;
 8017524:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8017526:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8017528:	8141      	strh	r1, [r0, #10]
}
 801752a:	bc70      	pop	{r4, r5, r6}
 801752c:	4770      	bx	lr
    return NULL;
 801752e:	2000      	movs	r0, #0
}
 8017530:	bc70      	pop	{r4, r5, r6}
 8017532:	4770      	bx	lr

08017534 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017534:	2200      	movs	r2, #0
 8017536:	f7ff bf85 	b.w	8017444 <pbuf_add_header_impl>
 801753a:	bf00      	nop

0801753c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801753c:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801753e:	b1a0      	cbz	r0, 801756a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8017540:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8017544:	d21a      	bcs.n	801757c <pbuf_remove_header+0x40>
    return 1;
  }
  if (header_size_decrement == 0) {
 8017546:	b171      	cbz	r1, 8017566 <pbuf_remove_header+0x2a>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8017548:	b28c      	uxth	r4, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801754a:	8942      	ldrh	r2, [r0, #10]
 801754c:	4603      	mov	r3, r0
 801754e:	42a2      	cmp	r2, r4
 8017550:	d316      	bcc.n	8017580 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017552:	6840      	ldr	r0, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8017554:	1b12      	subs	r2, r2, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017556:	891d      	ldrh	r5, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017558:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801755a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801755c:	1b2c      	subs	r4, r5, r4

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801755e:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8017560:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8017562:	811c      	strh	r4, [r3, #8]
}
 8017564:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8017566:	4608      	mov	r0, r1
}
 8017568:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801756a:	4b0a      	ldr	r3, [pc, #40]	; (8017594 <pbuf_remove_header+0x58>)
 801756c:	f240 224b 	movw	r2, #587	; 0x24b
 8017570:	4909      	ldr	r1, [pc, #36]	; (8017598 <pbuf_remove_header+0x5c>)
 8017572:	480a      	ldr	r0, [pc, #40]	; (801759c <pbuf_remove_header+0x60>)
 8017574:	f00a f936 	bl	80217e4 <iprintf>
    return 1;
 8017578:	2001      	movs	r0, #1
}
 801757a:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 801757c:	2001      	movs	r0, #1
}
 801757e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8017580:	4b04      	ldr	r3, [pc, #16]	; (8017594 <pbuf_remove_header+0x58>)
 8017582:	f240 2255 	movw	r2, #597	; 0x255
 8017586:	4906      	ldr	r1, [pc, #24]	; (80175a0 <pbuf_remove_header+0x64>)
 8017588:	4804      	ldr	r0, [pc, #16]	; (801759c <pbuf_remove_header+0x60>)
 801758a:	f00a f92b 	bl	80217e4 <iprintf>
 801758e:	2001      	movs	r0, #1
}
 8017590:	bd38      	pop	{r3, r4, r5, pc}
 8017592:	bf00      	nop
 8017594:	0803ecb0 	.word	0x0803ecb0
 8017598:	08040748 	.word	0x08040748
 801759c:	08027fec 	.word	0x08027fec
 80175a0:	0803ecf4 	.word	0x0803ecf4

080175a4 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80175a4:	1e0b      	subs	r3, r1, #0
 80175a6:	db02      	blt.n	80175ae <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80175a8:	2201      	movs	r2, #1
 80175aa:	f7ff bf4b 	b.w	8017444 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80175ae:	4259      	negs	r1, r3
 80175b0:	f7ff bfc4 	b.w	801753c <pbuf_remove_header>

080175b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80175b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80175b8:	4604      	mov	r4, r0
 80175ba:	2800      	cmp	r0, #0
 80175bc:	d052      	beq.n	8017664 <pbuf_free+0xb0>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80175be:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80175c0:	4f2d      	ldr	r7, [pc, #180]	; (8017678 <pbuf_free+0xc4>)
 80175c2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 801768c <pbuf_free+0xd8>
 80175c6:	4e2d      	ldr	r6, [pc, #180]	; (801767c <pbuf_free+0xc8>)
 80175c8:	e00a      	b.n	80175e0 <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80175ca:	6923      	ldr	r3, [r4, #16]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d03b      	beq.n	8017648 <pbuf_free+0x94>
        pc->custom_free_function(p);
 80175d0:	4620      	mov	r0, r4
 80175d2:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 80175d4:	3501      	adds	r5, #1
 80175d6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 80175d8:	f1b9 0f00 	cmp.w	r9, #0
 80175dc:	d01b      	beq.n	8017616 <pbuf_free+0x62>
 80175de:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80175e0:	7ba3      	ldrb	r3, [r4, #14]
 80175e2:	b1db      	cbz	r3, 801761c <pbuf_free+0x68>
    ref = --(p->ref);
 80175e4:	3b01      	subs	r3, #1
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 80175ea:	b9a3      	cbnz	r3, 8017616 <pbuf_free+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80175ec:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 80175ee:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80175f2:	079b      	lsls	r3, r3, #30
 80175f4:	d4e9      	bmi.n	80175ca <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 80175f6:	7b23      	ldrb	r3, [r4, #12]
 80175f8:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80175fc:	2b02      	cmp	r3, #2
 80175fe:	d01e      	beq.n	801763e <pbuf_free+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8017600:	2b01      	cmp	r3, #1
 8017602:	d02a      	beq.n	801765a <pbuf_free+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8017604:	b99b      	cbnz	r3, 801762e <pbuf_free+0x7a>
      count++;
 8017606:	3501      	adds	r5, #1
          mem_free(p);
 8017608:	4620      	mov	r0, r4
 801760a:	f7ff f917 	bl	801683c <mem_free>
      count++;
 801760e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8017610:	f1b9 0f00 	cmp.w	r9, #0
 8017614:	d1e3      	bne.n	80175de <pbuf_free+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8017616:	4628      	mov	r0, r5
 8017618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801761c:	463b      	mov	r3, r7
 801761e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8017622:	4641      	mov	r1, r8
 8017624:	4630      	mov	r0, r6
 8017626:	f00a f8dd 	bl	80217e4 <iprintf>
 801762a:	7ba3      	ldrb	r3, [r4, #14]
 801762c:	e7da      	b.n	80175e4 <pbuf_free+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801762e:	463b      	mov	r3, r7
 8017630:	f240 320f 	movw	r2, #783	; 0x30f
 8017634:	4912      	ldr	r1, [pc, #72]	; (8017680 <pbuf_free+0xcc>)
 8017636:	4630      	mov	r0, r6
 8017638:	f00a f8d4 	bl	80217e4 <iprintf>
 801763c:	e7ca      	b.n	80175d4 <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801763e:	4621      	mov	r1, r4
 8017640:	200f      	movs	r0, #15
 8017642:	f7ff fce7 	bl	8017014 <memp_free>
 8017646:	e7c5      	b.n	80175d4 <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8017648:	463b      	mov	r3, r7
 801764a:	f240 22ff 	movw	r2, #767	; 0x2ff
 801764e:	490d      	ldr	r1, [pc, #52]	; (8017684 <pbuf_free+0xd0>)
 8017650:	4630      	mov	r0, r6
 8017652:	f00a f8c7 	bl	80217e4 <iprintf>
 8017656:	6923      	ldr	r3, [r4, #16]
 8017658:	e7ba      	b.n	80175d0 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 801765a:	4621      	mov	r1, r4
 801765c:	200e      	movs	r0, #14
 801765e:	f7ff fcd9 	bl	8017014 <memp_free>
 8017662:	e7b7      	b.n	80175d4 <pbuf_free+0x20>
    return 0;
 8017664:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 8017666:	4b04      	ldr	r3, [pc, #16]	; (8017678 <pbuf_free+0xc4>)
 8017668:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801766c:	4906      	ldr	r1, [pc, #24]	; (8017688 <pbuf_free+0xd4>)
 801766e:	4803      	ldr	r0, [pc, #12]	; (801767c <pbuf_free+0xc8>)
 8017670:	f00a f8b8 	bl	80217e4 <iprintf>
    return 0;
 8017674:	e7cf      	b.n	8017616 <pbuf_free+0x62>
 8017676:	bf00      	nop
 8017678:	0803ecb0 	.word	0x0803ecb0
 801767c:	08027fec 	.word	0x08027fec
 8017680:	0803ed50 	.word	0x0803ed50
 8017684:	0803ed2c 	.word	0x0803ed2c
 8017688:	08040748 	.word	0x08040748
 801768c:	0803ed14 	.word	0x0803ed14

08017690 <pbuf_alloc>:
  switch (type) {
 8017690:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8017694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017698:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801769a:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801769e:	d03d      	beq.n	801771c <pbuf_alloc+0x8c>
 80176a0:	d80e      	bhi.n	80176c0 <pbuf_alloc+0x30>
 80176a2:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 80176a6:	2c01      	cmp	r4, #1
 80176a8:	d033      	beq.n	8017712 <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80176aa:	4b41      	ldr	r3, [pc, #260]	; (80177b0 <pbuf_alloc+0x120>)
 80176ac:	f240 1227 	movw	r2, #295	; 0x127
 80176b0:	4940      	ldr	r1, [pc, #256]	; (80177b4 <pbuf_alloc+0x124>)
      return NULL;
 80176b2:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80176b4:	4840      	ldr	r0, [pc, #256]	; (80177b8 <pbuf_alloc+0x128>)
 80176b6:	f00a f895 	bl	80217e4 <iprintf>
}
 80176ba:	4628      	mov	r0, r5
 80176bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 80176c0:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80176c4:	d1f1      	bne.n	80176aa <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80176c6:	f10a 0303 	add.w	r3, sl, #3
 80176ca:	1cca      	adds	r2, r1, #3
 80176cc:	4606      	mov	r6, r0
 80176ce:	f022 0203 	bic.w	r2, r2, #3
 80176d2:	f023 0303 	bic.w	r3, r3, #3
 80176d6:	4413      	add	r3, r2
 80176d8:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80176da:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80176de:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80176e0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80176e2:	d34d      	bcc.n	8017780 <pbuf_alloc+0xf0>
 80176e4:	4282      	cmp	r2, r0
 80176e6:	d84b      	bhi.n	8017780 <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80176e8:	f7ff fa82 	bl	8016bf0 <mem_malloc>
      if (p == NULL) {
 80176ec:	4605      	mov	r5, r0
 80176ee:	2800      	cmp	r0, #0
 80176f0:	d0e3      	beq.n	80176ba <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80176f2:	1983      	adds	r3, r0, r6
  p->next = NULL;
 80176f4:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 80176f6:	4a31      	ldr	r2, [pc, #196]	; (80177bc <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80176f8:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 80176fa:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
 80176fe:	f8a0 900a 	strh.w	r9, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017702:	f023 0303 	bic.w	r3, r3, #3
  p->next = NULL;
 8017706:	6001      	str	r1, [r0, #0]
  p->type_internal = (u8_t)type;
 8017708:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801770a:	6043      	str	r3, [r0, #4]
}
 801770c:	4628      	mov	r0, r5
 801770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8017712:	2000      	movs	r0, #0
}
 8017714:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8017718:	f7ff bec8 	b.w	80174ac <pbuf_alloc_reference>
  switch (type) {
 801771c:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801771e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80177b0 <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 8017722:	4f27      	ldr	r7, [pc, #156]	; (80177c0 <pbuf_alloc+0x130>)
  switch (type) {
 8017724:	4625      	mov	r5, r4
 8017726:	e009      	b.n	801773c <pbuf_alloc+0xac>
          last->next = q;
 8017728:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801772a:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801772e:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 8017732:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 8017736:	f1b9 0f00 	cmp.w	r9, #0
 801773a:	d0be      	beq.n	80176ba <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801773c:	22f3      	movs	r2, #243	; 0xf3
 801773e:	4641      	mov	r1, r8
 8017740:	200f      	movs	r0, #15
 8017742:	4626      	mov	r6, r4
 8017744:	f7ff fc42 	bl	8016fcc <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017748:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801774c:	2100      	movs	r1, #0
        if (q == NULL) {
 801774e:	4604      	mov	r4, r0
 8017750:	b1d0      	cbz	r0, 8017788 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017752:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017756:	eb00 020a 	add.w	r2, r0, sl
  p->next = NULL;
 801775a:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801775c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017760:	3213      	adds	r2, #19
  p->tot_len = tot_len;
 8017762:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017766:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017768:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801776c:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801776e:	454b      	cmp	r3, r9
  p->payload = payload;
 8017770:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017772:	bf28      	it	cs
 8017774:	464b      	movcs	r3, r9
  p->len = len;
 8017776:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8017778:	2d00      	cmp	r5, #0
 801777a:	d1d5      	bne.n	8017728 <pbuf_alloc+0x98>
 801777c:	4605      	mov	r5, r0
 801777e:	e7d4      	b.n	801772a <pbuf_alloc+0x9a>
          return NULL;
 8017780:	2500      	movs	r5, #0
}
 8017782:	4628      	mov	r0, r5
 8017784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 8017788:	4e0e      	ldr	r6, [pc, #56]	; (80177c4 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801778a:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801778c:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801778e:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 8017790:	b133      	cbz	r3, 80177a0 <pbuf_alloc+0x110>
          if (p) {
 8017792:	2d00      	cmp	r5, #0
 8017794:	d0f4      	beq.n	8017780 <pbuf_alloc+0xf0>
            pbuf_free(p);
 8017796:	4628      	mov	r0, r5
          return NULL;
 8017798:	2500      	movs	r5, #0
            pbuf_free(p);
 801779a:	f7ff ff0b 	bl	80175b4 <pbuf_free>
 801779e:	e78c      	b.n	80176ba <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80177a0:	4601      	mov	r1, r0
 80177a2:	4809      	ldr	r0, [pc, #36]	; (80177c8 <pbuf_alloc+0x138>)
 80177a4:	f7fc fec0 	bl	8014528 <tcpip_try_callback>
 80177a8:	2800      	cmp	r0, #0
 80177aa:	d0f2      	beq.n	8017792 <pbuf_alloc+0x102>
 80177ac:	7034      	strb	r4, [r6, #0]
 80177ae:	e7f0      	b.n	8017792 <pbuf_alloc+0x102>
 80177b0:	0803ecb0 	.word	0x0803ecb0
 80177b4:	0803ed64 	.word	0x0803ed64
 80177b8:	08027fec 	.word	0x08027fec
 80177bc:	00010080 	.word	0x00010080
 80177c0:	00010082 	.word	0x00010082
 80177c4:	20036790 	.word	0x20036790
 80177c8:	0801741d 	.word	0x0801741d

080177cc <pbuf_realloc>:
{
 80177cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80177ce:	4604      	mov	r4, r0
{
 80177d0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80177d2:	2800      	cmp	r0, #0
 80177d4:	d02d      	beq.n	8017832 <pbuf_realloc+0x66>
  if (new_len >= p->tot_len) {
 80177d6:	8922      	ldrh	r2, [r4, #8]
 80177d8:	42aa      	cmp	r2, r5
 80177da:	d929      	bls.n	8017830 <pbuf_realloc+0x64>
  while (rem_len > q->len) {
 80177dc:	8963      	ldrh	r3, [r4, #10]
 80177de:	429d      	cmp	r5, r3
 80177e0:	d90d      	bls.n	80177fe <pbuf_realloc+0x32>
 80177e2:	1aa9      	subs	r1, r5, r2
 80177e4:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80177e6:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 80177e8:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80177ea:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 80177ec:	b29d      	uxth	r5, r3
    q = q->next;
 80177ee:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80177f0:	2c00      	cmp	r4, #0
 80177f2:	d02f      	beq.n	8017854 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 80177f4:	8963      	ldrh	r3, [r4, #10]
 80177f6:	42ab      	cmp	r3, r5
 80177f8:	d201      	bcs.n	80177fe <pbuf_realloc+0x32>
 80177fa:	8922      	ldrh	r2, [r4, #8]
 80177fc:	e7f3      	b.n	80177e6 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80177fe:	7b22      	ldrb	r2, [r4, #12]
 8017800:	0712      	lsls	r2, r2, #28
 8017802:	d10d      	bne.n	8017820 <pbuf_realloc+0x54>
 8017804:	42ab      	cmp	r3, r5
 8017806:	d00b      	beq.n	8017820 <pbuf_realloc+0x54>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8017808:	7b63      	ldrb	r3, [r4, #13]
 801780a:	079b      	lsls	r3, r3, #30
 801780c:	d408      	bmi.n	8017820 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801780e:	6863      	ldr	r3, [r4, #4]
 8017810:	4620      	mov	r0, r4
 8017812:	1b1b      	subs	r3, r3, r4
 8017814:	18e9      	adds	r1, r5, r3
 8017816:	b289      	uxth	r1, r1
 8017818:	f7ff f8fa 	bl	8016a10 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801781c:	4604      	mov	r4, r0
 801781e:	b180      	cbz	r0, 8017842 <pbuf_realloc+0x76>
  if (q->next != NULL) {
 8017820:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8017822:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8017824:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8017826:	b108      	cbz	r0, 801782c <pbuf_realloc+0x60>
    pbuf_free(q->next);
 8017828:	f7ff fec4 	bl	80175b4 <pbuf_free>
  q->next = NULL;
 801782c:	2300      	movs	r3, #0
 801782e:	6023      	str	r3, [r4, #0]
}
 8017830:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8017832:	4b0d      	ldr	r3, [pc, #52]	; (8017868 <pbuf_realloc+0x9c>)
 8017834:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017838:	490c      	ldr	r1, [pc, #48]	; (801786c <pbuf_realloc+0xa0>)
 801783a:	480d      	ldr	r0, [pc, #52]	; (8017870 <pbuf_realloc+0xa4>)
 801783c:	f009 ffd2 	bl	80217e4 <iprintf>
 8017840:	e7c9      	b.n	80177d6 <pbuf_realloc+0xa>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017842:	4b09      	ldr	r3, [pc, #36]	; (8017868 <pbuf_realloc+0x9c>)
 8017844:	f240 12bd 	movw	r2, #445	; 0x1bd
 8017848:	490a      	ldr	r1, [pc, #40]	; (8017874 <pbuf_realloc+0xa8>)
 801784a:	4809      	ldr	r0, [pc, #36]	; (8017870 <pbuf_realloc+0xa4>)
 801784c:	f009 ffca 	bl	80217e4 <iprintf>
  q->len = rem_len;
 8017850:	8164      	strh	r4, [r4, #10]
 8017852:	deff      	udf	#255	; 0xff
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8017854:	4b04      	ldr	r3, [pc, #16]	; (8017868 <pbuf_realloc+0x9c>)
 8017856:	f240 12af 	movw	r2, #431	; 0x1af
 801785a:	4907      	ldr	r1, [pc, #28]	; (8017878 <pbuf_realloc+0xac>)
 801785c:	4804      	ldr	r0, [pc, #16]	; (8017870 <pbuf_realloc+0xa4>)
 801785e:	f009 ffc1 	bl	80217e4 <iprintf>
  while (rem_len > q->len) {
 8017862:	8963      	ldrh	r3, [r4, #10]
 8017864:	deff      	udf	#255	; 0xff
 8017866:	bf00      	nop
 8017868:	0803ecb0 	.word	0x0803ecb0
 801786c:	0803ed80 	.word	0x0803ed80
 8017870:	08027fec 	.word	0x08027fec
 8017874:	0803edb0 	.word	0x0803edb0
 8017878:	0803ed98 	.word	0x0803ed98

0801787c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 801787c:	4603      	mov	r3, r0
 801787e:	b130      	cbz	r0, 801788e <pbuf_clen+0x12>
  len = 0;
 8017880:	2000      	movs	r0, #0
    ++len;
 8017882:	3001      	adds	r0, #1
    p = p->next;
 8017884:	681b      	ldr	r3, [r3, #0]
    ++len;
 8017886:	b280      	uxth	r0, r0
  while (p != NULL) {
 8017888:	2b00      	cmp	r3, #0
 801788a:	d1fa      	bne.n	8017882 <pbuf_clen+0x6>
 801788c:	4770      	bx	lr
  }
  return len;
}
 801788e:	4770      	bx	lr

08017890 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8017890:	b120      	cbz	r0, 801789c <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8017892:	7b83      	ldrb	r3, [r0, #14]
 8017894:	3301      	adds	r3, #1
 8017896:	b2db      	uxtb	r3, r3
 8017898:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801789a:	b103      	cbz	r3, 801789e <pbuf_ref+0xe>
  }
}
 801789c:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801789e:	4b03      	ldr	r3, [pc, #12]	; (80178ac <pbuf_ref+0x1c>)
 80178a0:	f240 3242 	movw	r2, #834	; 0x342
 80178a4:	4902      	ldr	r1, [pc, #8]	; (80178b0 <pbuf_ref+0x20>)
 80178a6:	4803      	ldr	r0, [pc, #12]	; (80178b4 <pbuf_ref+0x24>)
 80178a8:	f009 bf9c 	b.w	80217e4 <iprintf>
 80178ac:	0803ecb0 	.word	0x0803ecb0
 80178b0:	0803edcc 	.word	0x0803edcc
 80178b4:	08027fec 	.word	0x08027fec

080178b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80178b8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80178ba:	b338      	cbz	r0, 801790c <pbuf_cat+0x54>
 80178bc:	460e      	mov	r6, r1
 80178be:	b329      	cbz	r1, 801790c <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80178c0:	6804      	ldr	r4, [r0, #0]
 80178c2:	b90c      	cbnz	r4, 80178c8 <pbuf_cat+0x10>
 80178c4:	e02b      	b.n	801791e <pbuf_cat+0x66>
 80178c6:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80178c8:	8903      	ldrh	r3, [r0, #8]
 80178ca:	8935      	ldrh	r5, [r6, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80178cc:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80178ce:	442b      	add	r3, r5
 80178d0:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80178d2:	4620      	mov	r0, r4
 80178d4:	2a00      	cmp	r2, #0
 80178d6:	d1f6      	bne.n	80178c6 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80178d8:	8963      	ldrh	r3, [r4, #10]
 80178da:	8922      	ldrh	r2, [r4, #8]
 80178dc:	429a      	cmp	r2, r3
 80178de:	d010      	beq.n	8017902 <pbuf_cat+0x4a>
 80178e0:	4b10      	ldr	r3, [pc, #64]	; (8017924 <pbuf_cat+0x6c>)
 80178e2:	f240 3262 	movw	r2, #866	; 0x362
 80178e6:	4910      	ldr	r1, [pc, #64]	; (8017928 <pbuf_cat+0x70>)
 80178e8:	4810      	ldr	r0, [pc, #64]	; (801792c <pbuf_cat+0x74>)
 80178ea:	f009 ff7b 	bl	80217e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80178ee:	6823      	ldr	r3, [r4, #0]
 80178f0:	b133      	cbz	r3, 8017900 <pbuf_cat+0x48>
 80178f2:	4b0c      	ldr	r3, [pc, #48]	; (8017924 <pbuf_cat+0x6c>)
 80178f4:	f240 3263 	movw	r2, #867	; 0x363
 80178f8:	490d      	ldr	r1, [pc, #52]	; (8017930 <pbuf_cat+0x78>)
 80178fa:	480c      	ldr	r0, [pc, #48]	; (801792c <pbuf_cat+0x74>)
 80178fc:	f009 ff72 	bl	80217e4 <iprintf>
 8017900:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017902:	8932      	ldrh	r2, [r6, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8017904:	6026      	str	r6, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017906:	4413      	add	r3, r2
 8017908:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801790a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801790c:	4b05      	ldr	r3, [pc, #20]	; (8017924 <pbuf_cat+0x6c>)
 801790e:	f240 3259 	movw	r2, #857	; 0x359
 8017912:	4908      	ldr	r1, [pc, #32]	; (8017934 <pbuf_cat+0x7c>)
 8017914:	4805      	ldr	r0, [pc, #20]	; (801792c <pbuf_cat+0x74>)
}
 8017916:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801791a:	f009 bf63 	b.w	80217e4 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 801791e:	4604      	mov	r4, r0
 8017920:	e7da      	b.n	80178d8 <pbuf_cat+0x20>
 8017922:	bf00      	nop
 8017924:	0803ecb0 	.word	0x0803ecb0
 8017928:	0803ee18 	.word	0x0803ee18
 801792c:	08027fec 	.word	0x08027fec
 8017930:	0803ee48 	.word	0x0803ee48
 8017934:	0803ede0 	.word	0x0803ede0

08017938 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8017938:	b510      	push	{r4, lr}
 801793a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801793c:	f7ff ffbc 	bl	80178b8 <pbuf_cat>
  if (p != NULL) {
 8017940:	b124      	cbz	r4, 801794c <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8017942:	7ba3      	ldrb	r3, [r4, #14]
 8017944:	3301      	adds	r3, #1
 8017946:	b2db      	uxtb	r3, r3
 8017948:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801794a:	b103      	cbz	r3, 801794e <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801794c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801794e:	4b04      	ldr	r3, [pc, #16]	; (8017960 <pbuf_chain+0x28>)
 8017950:	f240 3242 	movw	r2, #834	; 0x342
 8017954:	4903      	ldr	r1, [pc, #12]	; (8017964 <pbuf_chain+0x2c>)
 8017956:	4804      	ldr	r0, [pc, #16]	; (8017968 <pbuf_chain+0x30>)
}
 8017958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801795c:	f009 bf42 	b.w	80217e4 <iprintf>
 8017960:	0803ecb0 	.word	0x0803ecb0
 8017964:	0803edcc 	.word	0x0803edcc
 8017968:	08027fec 	.word	0x08027fec

0801796c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801796c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017970:	2800      	cmp	r0, #0
 8017972:	f000 809a 	beq.w	8017aaa <pbuf_copy+0x13e>
 8017976:	fab1 f681 	clz	r6, r1
 801797a:	4688      	mov	r8, r1
 801797c:	0976      	lsrs	r6, r6, #5
 801797e:	2900      	cmp	r1, #0
 8017980:	f000 8093 	beq.w	8017aaa <pbuf_copy+0x13e>
 8017984:	8902      	ldrh	r2, [r0, #8]
 8017986:	4605      	mov	r5, r0
 8017988:	890b      	ldrh	r3, [r1, #8]
 801798a:	429a      	cmp	r2, r3
 801798c:	f0c0 808d 	bcc.w	8017aaa <pbuf_copy+0x13e>
 8017990:	8944      	ldrh	r4, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8017992:	4637      	mov	r7, r6
 8017994:	894b      	ldrh	r3, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017996:	f8df a130 	ldr.w	sl, [pc, #304]	; 8017ac8 <pbuf_copy+0x15c>
 801799a:	f8df b144 	ldr.w	fp, [pc, #324]	; 8017ae0 <pbuf_copy+0x174>
 801799e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8017ad0 <pbuf_copy+0x164>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80179a2:	1b9a      	subs	r2, r3, r6
 80179a4:	1be4      	subs	r4, r4, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80179a6:	6868      	ldr	r0, [r5, #4]
 80179a8:	4294      	cmp	r4, r2
 80179aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80179ae:	4438      	add	r0, r7
 80179b0:	bf28      	it	cs
 80179b2:	4614      	movcs	r4, r2
 80179b4:	4431      	add	r1, r6
 80179b6:	4622      	mov	r2, r4
    offset_to += len;
 80179b8:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80179ba:	f008 ff79 	bl	80208b0 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80179be:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80179c0:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80179c2:	429f      	cmp	r7, r3
 80179c4:	d838      	bhi.n	8017a38 <pbuf_copy+0xcc>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80179c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80179ca:	429e      	cmp	r6, r3
 80179cc:	d82a      	bhi.n	8017a24 <pbuf_copy+0xb8>
    if (offset_from >= p_from->len) {
 80179ce:	429e      	cmp	r6, r3
 80179d0:	d318      	bcc.n	8017a04 <pbuf_copy+0x98>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80179d2:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80179d4:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 80179d8:	429f      	cmp	r7, r3
 80179da:	d04c      	beq.n	8017a76 <pbuf_copy+0x10a>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80179dc:	f1b8 0f00 	cmp.w	r8, #0
 80179e0:	d145      	bne.n	8017a6e <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80179e2:	892a      	ldrh	r2, [r5, #8]
 80179e4:	896b      	ldrh	r3, [r5, #10]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d14d      	bne.n	8017a86 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80179ea:	6828      	ldr	r0, [r5, #0]
 80179ec:	b140      	cbz	r0, 8017a00 <pbuf_copy+0x94>
 80179ee:	4b36      	ldr	r3, [pc, #216]	; (8017ac8 <pbuf_copy+0x15c>)
 80179f0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80179f4:	4935      	ldr	r1, [pc, #212]	; (8017acc <pbuf_copy+0x160>)
 80179f6:	4836      	ldr	r0, [pc, #216]	; (8017ad0 <pbuf_copy+0x164>)
 80179f8:	f009 fef4 	bl	80217e4 <iprintf>
 80179fc:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8017a00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8017a04:	896a      	ldrh	r2, [r5, #10]
 8017a06:	42ba      	cmp	r2, r7
 8017a08:	d040      	beq.n	8017a8c <pbuf_copy+0x120>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017a0a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8017a0e:	429a      	cmp	r2, r3
 8017a10:	d01a      	beq.n	8017a48 <pbuf_copy+0xdc>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017a12:	896c      	ldrh	r4, [r5, #10]
 8017a14:	2d00      	cmp	r5, #0
 8017a16:	d0c4      	beq.n	80179a2 <pbuf_copy+0x36>
 8017a18:	892b      	ldrh	r3, [r5, #8]
 8017a1a:	42a3      	cmp	r3, r4
 8017a1c:	d04f      	beq.n	8017abe <pbuf_copy+0x152>
 8017a1e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8017a22:	e7be      	b.n	80179a2 <pbuf_copy+0x36>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017a24:	4653      	mov	r3, sl
 8017a26:	f240 32da 	movw	r2, #986	; 0x3da
 8017a2a:	492a      	ldr	r1, [pc, #168]	; (8017ad4 <pbuf_copy+0x168>)
 8017a2c:	4648      	mov	r0, r9
 8017a2e:	f009 fed9 	bl	80217e4 <iprintf>
 8017a32:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8017a36:	e7ca      	b.n	80179ce <pbuf_copy+0x62>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017a38:	4653      	mov	r3, sl
 8017a3a:	f240 32d9 	movw	r2, #985	; 0x3d9
 8017a3e:	4659      	mov	r1, fp
 8017a40:	4648      	mov	r0, r9
 8017a42:	f009 fecf 	bl	80217e4 <iprintf>
 8017a46:	e7be      	b.n	80179c6 <pbuf_copy+0x5a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017a48:	f8d8 2000 	ldr.w	r2, [r8]
 8017a4c:	2a00      	cmp	r2, #0
 8017a4e:	d0e0      	beq.n	8017a12 <pbuf_copy+0xa6>
 8017a50:	4b1d      	ldr	r3, [pc, #116]	; (8017ac8 <pbuf_copy+0x15c>)
 8017a52:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8017a56:	491d      	ldr	r1, [pc, #116]	; (8017acc <pbuf_copy+0x160>)
 8017a58:	481d      	ldr	r0, [pc, #116]	; (8017ad0 <pbuf_copy+0x164>)
 8017a5a:	f009 fec3 	bl	80217e4 <iprintf>
 8017a5e:	f06f 0005 	mvn.w	r0, #5
}
 8017a62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8017a66:	f1b8 0f00 	cmp.w	r8, #0
 8017a6a:	d00a      	beq.n	8017a82 <pbuf_copy+0x116>
      offset_to = 0;
 8017a6c:	2700      	movs	r7, #0
 8017a6e:	2600      	movs	r6, #0
 8017a70:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8017a74:	e7c9      	b.n	8017a0a <pbuf_copy+0x9e>
      p_to = p_to->next;
 8017a76:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017a78:	2d00      	cmp	r5, #0
 8017a7a:	d1f4      	bne.n	8017a66 <pbuf_copy+0xfa>
 8017a7c:	f1b8 0f00 	cmp.w	r8, #0
 8017a80:	d108      	bne.n	8017a94 <pbuf_copy+0x128>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8017a82:	2d00      	cmp	r5, #0
 8017a84:	d1ad      	bne.n	80179e2 <pbuf_copy+0x76>
  return ERR_OK;
 8017a86:	2000      	movs	r0, #0
}
 8017a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 8017a8c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017a8e:	b10d      	cbz	r5, 8017a94 <pbuf_copy+0x128>
      offset_to = 0;
 8017a90:	2700      	movs	r7, #0
 8017a92:	e7ed      	b.n	8017a70 <pbuf_copy+0x104>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017a94:	4b0c      	ldr	r3, [pc, #48]	; (8017ac8 <pbuf_copy+0x15c>)
 8017a96:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8017a9a:	490f      	ldr	r1, [pc, #60]	; (8017ad8 <pbuf_copy+0x16c>)
 8017a9c:	480c      	ldr	r0, [pc, #48]	; (8017ad0 <pbuf_copy+0x164>)
 8017a9e:	f009 fea1 	bl	80217e4 <iprintf>
 8017aa2:	f06f 000f 	mvn.w	r0, #15
}
 8017aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8017aaa:	4b07      	ldr	r3, [pc, #28]	; (8017ac8 <pbuf_copy+0x15c>)
 8017aac:	f240 32c9 	movw	r2, #969	; 0x3c9
 8017ab0:	490a      	ldr	r1, [pc, #40]	; (8017adc <pbuf_copy+0x170>)
 8017ab2:	4807      	ldr	r0, [pc, #28]	; (8017ad0 <pbuf_copy+0x164>)
 8017ab4:	f009 fe96 	bl	80217e4 <iprintf>
 8017ab8:	f06f 000f 	mvn.w	r0, #15
 8017abc:	e7a0      	b.n	8017a00 <pbuf_copy+0x94>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8017abe:	682b      	ldr	r3, [r5, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d0ac      	beq.n	8017a1e <pbuf_copy+0xb2>
 8017ac4:	e793      	b.n	80179ee <pbuf_copy+0x82>
 8017ac6:	bf00      	nop
 8017ac8:	0803ecb0 	.word	0x0803ecb0
 8017acc:	0803eecc 	.word	0x0803eecc
 8017ad0:	08027fec 	.word	0x08027fec
 8017ad4:	0803eea0 	.word	0x0803eea0
 8017ad8:	0803eebc 	.word	0x0803eebc
 8017adc:	0803ee58 	.word	0x0803ee58
 8017ae0:	0803ee88 	.word	0x0803ee88

08017ae4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017ae8:	4605      	mov	r5, r0
 8017aea:	b350      	cbz	r0, 8017b42 <pbuf_copy_partial+0x5e>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017aec:	460f      	mov	r7, r1
 8017aee:	b399      	cbz	r1, 8017b58 <pbuf_copy_partial+0x74>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017af0:	4690      	mov	r8, r2
 8017af2:	b37a      	cbz	r2, 8017b54 <pbuf_copy_partial+0x70>
  u16_t left = 0;
 8017af4:	2600      	movs	r6, #0
 8017af6:	e005      	b.n	8017b04 <pbuf_copy_partial+0x20>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017af8:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017afa:	682d      	ldr	r5, [r5, #0]
 8017afc:	f1b8 0f00 	cmp.w	r8, #0
 8017b00:	d01c      	beq.n	8017b3c <pbuf_copy_partial+0x58>
 8017b02:	b1dd      	cbz	r5, 8017b3c <pbuf_copy_partial+0x58>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017b04:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8017b06:	896c      	ldrh	r4, [r5, #10]
 8017b08:	b11b      	cbz	r3, 8017b12 <pbuf_copy_partial+0x2e>
 8017b0a:	429c      	cmp	r4, r3
      offset = (u16_t)(offset - p->len);
 8017b0c:	eba3 0204 	sub.w	r2, r3, r4
    if ((offset != 0) && (offset >= p->len)) {
 8017b10:	d9f2      	bls.n	8017af8 <pbuf_copy_partial+0x14>
      buf_copy_len = (u16_t)(p->len - offset);
 8017b12:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017b14:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8017b16:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017b18:	4419      	add	r1, r3
 8017b1a:	4544      	cmp	r4, r8
 8017b1c:	bf28      	it	cs
 8017b1e:	4644      	movcs	r4, r8
 8017b20:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017b22:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8017b24:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017b28:	f008 fec2 	bl	80208b0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017b2c:	b2b6      	uxth	r6, r6
      offset = 0;
 8017b2e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8017b30:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017b34:	682d      	ldr	r5, [r5, #0]
 8017b36:	f1b8 0f00 	cmp.w	r8, #0
 8017b3a:	d1e2      	bne.n	8017b02 <pbuf_copy_partial+0x1e>
    }
  }
  return copied_total;
}
 8017b3c:	4630      	mov	r0, r6
 8017b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017b42:	4606      	mov	r6, r0
 8017b44:	4b09      	ldr	r3, [pc, #36]	; (8017b6c <pbuf_copy_partial+0x88>)
 8017b46:	f240 420a 	movw	r2, #1034	; 0x40a
 8017b4a:	4909      	ldr	r1, [pc, #36]	; (8017b70 <pbuf_copy_partial+0x8c>)
 8017b4c:	4809      	ldr	r0, [pc, #36]	; (8017b74 <pbuf_copy_partial+0x90>)
 8017b4e:	f009 fe49 	bl	80217e4 <iprintf>
 8017b52:	e7f3      	b.n	8017b3c <pbuf_copy_partial+0x58>
  u16_t left = 0;
 8017b54:	4616      	mov	r6, r2
 8017b56:	e7f1      	b.n	8017b3c <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017b58:	4b04      	ldr	r3, [pc, #16]	; (8017b6c <pbuf_copy_partial+0x88>)
 8017b5a:	f240 420b 	movw	r2, #1035	; 0x40b
 8017b5e:	4906      	ldr	r1, [pc, #24]	; (8017b78 <pbuf_copy_partial+0x94>)
 8017b60:	463e      	mov	r6, r7
 8017b62:	4804      	ldr	r0, [pc, #16]	; (8017b74 <pbuf_copy_partial+0x90>)
 8017b64:	f009 fe3e 	bl	80217e4 <iprintf>
 8017b68:	e7e8      	b.n	8017b3c <pbuf_copy_partial+0x58>
 8017b6a:	bf00      	nop
 8017b6c:	0803ecb0 	.word	0x0803ecb0
 8017b70:	0803eef8 	.word	0x0803eef8
 8017b74:	08027fec 	.word	0x08027fec
 8017b78:	0803ef18 	.word	0x0803ef18

08017b7c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8017b7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8017b80:	2800      	cmp	r0, #0
 8017b82:	d049      	beq.n	8017c18 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8017b84:	460f      	mov	r7, r1
 8017b86:	2900      	cmp	r1, #0
 8017b88:	d03c      	beq.n	8017c04 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8017b8a:	8903      	ldrh	r3, [r0, #8]
 8017b8c:	4604      	mov	r4, r0
 8017b8e:	4690      	mov	r8, r2
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d32d      	bcc.n	8017bf0 <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017b94:	b34a      	cbz	r2, 8017bea <pbuf_take+0x6e>
 8017b96:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8017b98:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8017b9a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8017c30 <pbuf_take+0xb4>
 8017b9e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8017c44 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 8017ba2:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8017ba4:	19b9      	adds	r1, r7, r6
 8017ba6:	6860      	ldr	r0, [r4, #4]
 8017ba8:	42aa      	cmp	r2, r5
 8017baa:	bf28      	it	cs
 8017bac:	462a      	movcs	r2, r5
 8017bae:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 8017bb0:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8017bb2:	f008 fe7d 	bl	80208b0 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 8017bb6:	6824      	ldr	r4, [r4, #0]
 8017bb8:	ebb5 0509 	subs.w	r5, r5, r9
 8017bbc:	d009      	beq.n	8017bd2 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8017bbe:	2c00      	cmp	r4, #0
 8017bc0:	d1ef      	bne.n	8017ba2 <pbuf_take+0x26>
 8017bc2:	465b      	mov	r3, fp
 8017bc4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8017bc8:	4651      	mov	r1, sl
 8017bca:	4818      	ldr	r0, [pc, #96]	; (8017c2c <pbuf_take+0xb0>)
 8017bcc:	f009 fe0a 	bl	80217e4 <iprintf>
 8017bd0:	e7e7      	b.n	8017ba2 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8017bd2:	45b0      	cmp	r8, r6
 8017bd4:	d009      	beq.n	8017bea <pbuf_take+0x6e>
 8017bd6:	4b16      	ldr	r3, [pc, #88]	; (8017c30 <pbuf_take+0xb4>)
 8017bd8:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8017bdc:	4915      	ldr	r1, [pc, #84]	; (8017c34 <pbuf_take+0xb8>)
 8017bde:	4813      	ldr	r0, [pc, #76]	; (8017c2c <pbuf_take+0xb0>)
 8017be0:	f009 fe00 	bl	80217e4 <iprintf>
  return ERR_OK;
 8017be4:	4628      	mov	r0, r5
}
 8017be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 8017bea:	2000      	movs	r0, #0
}
 8017bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8017bf0:	4b0f      	ldr	r3, [pc, #60]	; (8017c30 <pbuf_take+0xb4>)
 8017bf2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8017bf6:	4910      	ldr	r1, [pc, #64]	; (8017c38 <pbuf_take+0xbc>)
 8017bf8:	480c      	ldr	r0, [pc, #48]	; (8017c2c <pbuf_take+0xb0>)
 8017bfa:	f009 fdf3 	bl	80217e4 <iprintf>
 8017bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8017c02:	e7f3      	b.n	8017bec <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8017c04:	4b0a      	ldr	r3, [pc, #40]	; (8017c30 <pbuf_take+0xb4>)
 8017c06:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8017c0a:	490c      	ldr	r1, [pc, #48]	; (8017c3c <pbuf_take+0xc0>)
 8017c0c:	4807      	ldr	r0, [pc, #28]	; (8017c2c <pbuf_take+0xb0>)
 8017c0e:	f009 fde9 	bl	80217e4 <iprintf>
 8017c12:	f06f 000f 	mvn.w	r0, #15
 8017c16:	e7e9      	b.n	8017bec <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8017c18:	4b05      	ldr	r3, [pc, #20]	; (8017c30 <pbuf_take+0xb4>)
 8017c1a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8017c1e:	4908      	ldr	r1, [pc, #32]	; (8017c40 <pbuf_take+0xc4>)
 8017c20:	4802      	ldr	r0, [pc, #8]	; (8017c2c <pbuf_take+0xb0>)
 8017c22:	f009 fddf 	bl	80217e4 <iprintf>
 8017c26:	f06f 000f 	mvn.w	r0, #15
 8017c2a:	e7df      	b.n	8017bec <pbuf_take+0x70>
 8017c2c:	08027fec 	.word	0x08027fec
 8017c30:	0803ecb0 	.word	0x0803ecb0
 8017c34:	0803efa8 	.word	0x0803efa8
 8017c38:	0803ef70 	.word	0x0803ef70
 8017c3c:	0803ef54 	.word	0x0803ef54
 8017c40:	0803ef3c 	.word	0x0803ef3c
 8017c44:	0803ef90 	.word	0x0803ef90

08017c48 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c48:	b390      	cbz	r0, 8017cb0 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8017c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4e:	460f      	mov	r7, r1
 8017c50:	4604      	mov	r4, r0
 8017c52:	e002      	b.n	8017c5a <pbuf_take_at+0x12>
    q = q->next;
 8017c54:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8017c56:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c58:	b334      	cbz	r4, 8017ca8 <pbuf_take_at+0x60>
 8017c5a:	8965      	ldrh	r5, [r4, #10]
 8017c5c:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 8017c5e:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 8017c62:	d9f7      	bls.n	8017c54 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8017c64:	8921      	ldrh	r1, [r4, #8]
 8017c66:	189e      	adds	r6, r3, r2
 8017c68:	42b1      	cmp	r1, r6
 8017c6a:	db1d      	blt.n	8017ca8 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8017c6c:	1ae9      	subs	r1, r5, r3
 8017c6e:	428a      	cmp	r2, r1
 8017c70:	dc07      	bgt.n	8017c82 <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8017c72:	6860      	ldr	r0, [r4, #4]
 8017c74:	4639      	mov	r1, r7
 8017c76:	4418      	add	r0, r3
 8017c78:	f008 fe1a 	bl	80208b0 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 8017c7c:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 8017c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8017c82:	fa1f f881 	uxth.w	r8, r1
 8017c86:	6860      	ldr	r0, [r4, #4]
 8017c88:	4639      	mov	r1, r7
 8017c8a:	4642      	mov	r2, r8
 8017c8c:	4418      	add	r0, r3
 8017c8e:	f008 fe0f 	bl	80208b0 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8017c92:	1b70      	subs	r0, r6, r5
 8017c94:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 8017c96:	2a00      	cmp	r2, #0
 8017c98:	d0f0      	beq.n	8017c7c <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8017c9a:	eb07 0108 	add.w	r1, r7, r8
 8017c9e:	6820      	ldr	r0, [r4, #0]
}
 8017ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 8017ca4:	f7ff bf6a 	b.w	8017b7c <pbuf_take>
  return ERR_MEM;
 8017ca8:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 8017cb0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017cb4:	4770      	bx	lr
 8017cb6:	bf00      	nop

08017cb8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017cb8:	b538      	push	{r3, r4, r5, lr}
 8017cba:	4615      	mov	r5, r2
 8017cbc:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017cbe:	8929      	ldrh	r1, [r5, #8]
 8017cc0:	f7ff fce6 	bl	8017690 <pbuf_alloc>
  if (q == NULL) {
 8017cc4:	4604      	mov	r4, r0
 8017cc6:	b118      	cbz	r0, 8017cd0 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8017cc8:	4629      	mov	r1, r5
 8017cca:	f7ff fe4f 	bl	801796c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017cce:	b908      	cbnz	r0, 8017cd4 <pbuf_clone+0x1c>
  return q;
}
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017cd4:	4b04      	ldr	r3, [pc, #16]	; (8017ce8 <pbuf_clone+0x30>)
 8017cd6:	f240 5224 	movw	r2, #1316	; 0x524
 8017cda:	4904      	ldr	r1, [pc, #16]	; (8017cec <pbuf_clone+0x34>)
 8017cdc:	4804      	ldr	r0, [pc, #16]	; (8017cf0 <pbuf_clone+0x38>)
 8017cde:	f009 fd81 	bl	80217e4 <iprintf>
}
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	bd38      	pop	{r3, r4, r5, pc}
 8017ce6:	bf00      	nop
 8017ce8:	0803ecb0 	.word	0x0803ecb0
 8017cec:	0803efc0 	.word	0x0803efc0
 8017cf0:	08027fec 	.word	0x08027fec

08017cf4 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8017cf4:	b140      	cbz	r0, 8017d08 <pbuf_try_get_at+0x14>
 8017cf6:	8943      	ldrh	r3, [r0, #10]
 8017cf8:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 8017cfa:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8017cfe:	d806      	bhi.n	8017d0e <pbuf_try_get_at+0x1a>
    q = q->next;
 8017d00:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8017d02:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8017d04:	2800      	cmp	r0, #0
 8017d06:	d1f6      	bne.n	8017cf6 <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 8017d08:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d0c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 8017d0e:	6843      	ldr	r3, [r0, #4]
 8017d10:	5c58      	ldrb	r0, [r3, r1]
 8017d12:	4770      	bx	lr

08017d14 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8017d14:	b918      	cbnz	r0, 8017d1e <pbuf_put_at+0xa>
 8017d16:	e00a      	b.n	8017d2e <pbuf_put_at+0x1a>
    q = q->next;
 8017d18:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8017d1a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8017d1c:	b130      	cbz	r0, 8017d2c <pbuf_put_at+0x18>
 8017d1e:	8943      	ldrh	r3, [r0, #10]
 8017d20:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 8017d22:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8017d26:	d9f7      	bls.n	8017d18 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 8017d28:	6843      	ldr	r3, [r0, #4]
 8017d2a:	545a      	strb	r2, [r3, r1]
  }
}
 8017d2c:	4770      	bx	lr
 8017d2e:	4770      	bx	lr

08017d30 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8017d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d34:	4e33      	ldr	r6, [pc, #204]	; (8017e04 <raw_input+0xd4>)
{
 8017d36:	4681      	mov	r9, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017d38:	6831      	ldr	r1, [r6, #0]
 8017d3a:	6970      	ldr	r0, [r6, #20]
 8017d3c:	f007 fb2c 	bl	801f398 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 8017d40:	4a31      	ldr	r2, [pc, #196]	; (8017e08 <raw_input+0xd8>)
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8017d42:	f8d9 3004 	ldr.w	r3, [r9, #4]
  pcb = raw_pcbs;
 8017d46:	6814      	ldr	r4, [r2, #0]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8017d48:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 8017d4a:	2c00      	cmp	r4, #0
 8017d4c:	d04d      	beq.n	8017dea <raw_input+0xba>
 8017d4e:	4680      	mov	r8, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 8017d50:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8017d52:	f106 0b10 	add.w	fp, r6, #16
 8017d56:	46ca      	mov	sl, r9
  prev = NULL;
 8017d58:	4606      	mov	r6, r0
 8017d5a:	e004      	b.n	8017d66 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 8017d5c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 8017d5e:	4626      	mov	r6, r4
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d037      	beq.n	8017dd4 <raw_input+0xa4>
 8017d64:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8017d66:	7c23      	ldrb	r3, [r4, #16]
 8017d68:	42ab      	cmp	r3, r5
 8017d6a:	d1f7      	bne.n	8017d5c <raw_input+0x2c>
 8017d6c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017d6e:	b13a      	cbz	r2, 8017d80 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017d70:	4b24      	ldr	r3, [pc, #144]	; (8017e04 <raw_input+0xd4>)
 8017d72:	685b      	ldr	r3, [r3, #4]
 8017d74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017d78:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	429a      	cmp	r2, r3
 8017d7e:	d1ed      	bne.n	8017d5c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8017d80:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8017d82:	f1b8 0f00 	cmp.w	r8, #0
 8017d86:	d027      	beq.n	8017dd8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d1e7      	bne.n	8017d5c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8017d8c:	7c63      	ldrb	r3, [r4, #17]
 8017d8e:	07db      	lsls	r3, r3, #31
 8017d90:	d504      	bpl.n	8017d9c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8017d92:	4b1c      	ldr	r3, [pc, #112]	; (8017e04 <raw_input+0xd4>)
 8017d94:	6862      	ldr	r2, [r4, #4]
 8017d96:	691b      	ldr	r3, [r3, #16]
 8017d98:	429a      	cmp	r2, r3
 8017d9a:	d1df      	bne.n	8017d5c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 8017d9c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8017da0:	f1b9 0f00 	cmp.w	r9, #0
 8017da4:	d0da      	beq.n	8017d5c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8017da6:	465b      	mov	r3, fp
 8017da8:	4652      	mov	r2, sl
 8017daa:	4621      	mov	r1, r4
 8017dac:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 8017dae:	f8da 7004 	ldr.w	r7, [sl, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8017db2:	47c8      	blx	r9
        if (eaten != 0) {
 8017db4:	b9d8      	cbnz	r0, 8017dee <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 8017db6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017dba:	42bb      	cmp	r3, r7
 8017dbc:	d013      	beq.n	8017de6 <raw_input+0xb6>
 8017dbe:	4b13      	ldr	r3, [pc, #76]	; (8017e0c <raw_input+0xdc>)
 8017dc0:	22c0      	movs	r2, #192	; 0xc0
 8017dc2:	4913      	ldr	r1, [pc, #76]	; (8017e10 <raw_input+0xe0>)
 8017dc4:	4626      	mov	r6, r4
 8017dc6:	4813      	ldr	r0, [pc, #76]	; (8017e14 <raw_input+0xe4>)
 8017dc8:	f009 fd0c 	bl	80217e4 <iprintf>
    pcb = pcb->next;
 8017dcc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 8017dce:	2002      	movs	r0, #2
  while (pcb != NULL) {
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d1c7      	bne.n	8017d64 <raw_input+0x34>
  }
  return ret;
}
 8017dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d0d7      	beq.n	8017d8c <raw_input+0x5c>
 8017ddc:	4a09      	ldr	r2, [pc, #36]	; (8017e04 <raw_input+0xd4>)
 8017dde:	6952      	ldr	r2, [r2, #20]
 8017de0:	4293      	cmp	r3, r2
 8017de2:	d1bb      	bne.n	8017d5c <raw_input+0x2c>
 8017de4:	e7d2      	b.n	8017d8c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 8017de6:	2002      	movs	r0, #2
 8017de8:	e7b8      	b.n	8017d5c <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 8017dea:	4620      	mov	r0, r4
 8017dec:	e7f2      	b.n	8017dd4 <raw_input+0xa4>
          if (prev != NULL) {
 8017dee:	b13e      	cbz	r6, 8017e00 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 8017df0:	4905      	ldr	r1, [pc, #20]	; (8017e08 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 8017df2:	2001      	movs	r0, #1
            prev->next = pcb->next;
 8017df4:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 8017df6:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 8017df8:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 8017dfa:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 8017dfc:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 8017dfe:	e7e9      	b.n	8017dd4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 8017e00:	2001      	movs	r0, #1
 8017e02:	e7e7      	b.n	8017dd4 <raw_input+0xa4>
 8017e04:	2002709c 	.word	0x2002709c
 8017e08:	200229b8 	.word	0x200229b8
 8017e0c:	0803efd4 	.word	0x0803efd4
 8017e10:	0803f004 	.word	0x0803f004
 8017e14:	08027fec 	.word	0x08027fec

08017e18 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8017e18:	b110      	cbz	r0, 8017e20 <raw_netif_ip_addr_changed+0x8>
 8017e1a:	6802      	ldr	r2, [r0, #0]
 8017e1c:	b101      	cbz	r1, 8017e20 <raw_netif_ip_addr_changed+0x8>
 8017e1e:	b902      	cbnz	r2, 8017e22 <raw_netif_ip_addr_changed+0xa>
 8017e20:	4770      	bx	lr
 8017e22:	680b      	ldr	r3, [r1, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d0fb      	beq.n	8017e20 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8017e28:	4b08      	ldr	r3, [pc, #32]	; (8017e4c <raw_netif_ip_addr_changed+0x34>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d0f7      	beq.n	8017e20 <raw_netif_ip_addr_changed+0x8>
{
 8017e30:	b410      	push	{r4}
 8017e32:	e000      	b.n	8017e36 <raw_netif_ip_addr_changed+0x1e>
 8017e34:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8017e36:	681c      	ldr	r4, [r3, #0]
 8017e38:	4294      	cmp	r4, r2
 8017e3a:	d101      	bne.n	8017e40 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 8017e3c:	680a      	ldr	r2, [r1, #0]
 8017e3e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8017e40:	68db      	ldr	r3, [r3, #12]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d1f6      	bne.n	8017e34 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 8017e46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e4a:	4770      	bx	lr
 8017e4c:	200229b8 	.word	0x200229b8

08017e50 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8017e50:	4770      	bx	lr
 8017e52:	bf00      	nop

08017e54 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8017e54:	f8df c060 	ldr.w	ip, [pc, #96]	; 8017eb8 <tcp_new_port+0x64>
{
 8017e58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8017e5c:	b4f0      	push	{r4, r5, r6, r7}
 8017e5e:	f8bc 0000 	ldrh.w	r0, [ip]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8017e62:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017e66:	4f11      	ldr	r7, [pc, #68]	; (8017eac <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017e68:	4d11      	ldr	r5, [pc, #68]	; (8017eb0 <tcp_new_port+0x5c>)
  tcp_port++;
 8017e6a:	3001      	adds	r0, #1
 8017e6c:	4c11      	ldr	r4, [pc, #68]	; (8017eb4 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017e6e:	462b      	mov	r3, r5
  tcp_port++;
 8017e70:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8017e72:	42b0      	cmp	r0, r6
 8017e74:	bf08      	it	eq
 8017e76:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8017e7a:	681b      	ldr	r3, [r3, #0]
 8017e7c:	b913      	cbnz	r3, 8017e84 <tcp_new_port+0x30>
 8017e7e:	e00c      	b.n	8017e9a <tcp_new_port+0x46>
 8017e80:	68db      	ldr	r3, [r3, #12]
 8017e82:	b153      	cbz	r3, 8017e9a <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 8017e84:	8ada      	ldrh	r2, [r3, #22]
 8017e86:	4282      	cmp	r2, r0
 8017e88:	d1fa      	bne.n	8017e80 <tcp_new_port+0x2c>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8017e8a:	3901      	subs	r1, #1
 8017e8c:	b289      	uxth	r1, r1
 8017e8e:	2900      	cmp	r1, #0
 8017e90:	d1eb      	bne.n	8017e6a <tcp_new_port+0x16>
 8017e92:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 8017e96:	4608      	mov	r0, r1
 8017e98:	e006      	b.n	8017ea8 <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8017e9a:	42bc      	cmp	r4, r7
 8017e9c:	d002      	beq.n	8017ea4 <tcp_new_port+0x50>
 8017e9e:	f854 3b04 	ldr.w	r3, [r4], #4
 8017ea2:	e7ea      	b.n	8017e7a <tcp_new_port+0x26>
 8017ea4:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8017ea8:	bcf0      	pop	{r4, r5, r6, r7}
 8017eaa:	4770      	bx	lr
 8017eac:	0803f744 	.word	0x0803f744
 8017eb0:	200368a8 	.word	0x200368a8
 8017eb4:	0803f738 	.word	0x0803f738
 8017eb8:	200003e4 	.word	0x200003e4

08017ebc <tcp_close_shutdown_fin>:
{
 8017ebc:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017ebe:	4604      	mov	r4, r0
 8017ec0:	b310      	cbz	r0, 8017f08 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 8017ec2:	7d23      	ldrb	r3, [r4, #20]
 8017ec4:	2b04      	cmp	r3, #4
 8017ec6:	d005      	beq.n	8017ed4 <tcp_close_shutdown_fin+0x18>
 8017ec8:	2b07      	cmp	r3, #7
 8017eca:	d00e      	beq.n	8017eea <tcp_close_shutdown_fin+0x2e>
 8017ecc:	2b03      	cmp	r3, #3
 8017ece:	d001      	beq.n	8017ed4 <tcp_close_shutdown_fin+0x18>
 8017ed0:	2000      	movs	r0, #0
}
 8017ed2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f003 fd83 	bl	801b9e0 <tcp_send_fin>
      if (err == ERR_OK) {
 8017eda:	b950      	cbnz	r0, 8017ef2 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 8017edc:	2305      	movs	r3, #5
 8017ede:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8017ee0:	4620      	mov	r0, r4
 8017ee2:	f003 feef 	bl	801bcc4 <tcp_output>
 8017ee6:	2000      	movs	r0, #0
}
 8017ee8:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8017eea:	4620      	mov	r0, r4
 8017eec:	f003 fd78 	bl	801b9e0 <tcp_send_fin>
      if (err == ERR_OK) {
 8017ef0:	b138      	cbz	r0, 8017f02 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 8017ef2:	1c43      	adds	r3, r0, #1
 8017ef4:	d1ed      	bne.n	8017ed2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017ef6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 8017ef8:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017efa:	f043 0308 	orr.w	r3, r3, #8
 8017efe:	8363      	strh	r3, [r4, #26]
}
 8017f00:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8017f02:	2309      	movs	r3, #9
 8017f04:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8017f06:	e7eb      	b.n	8017ee0 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017f08:	4b03      	ldr	r3, [pc, #12]	; (8017f18 <tcp_close_shutdown_fin+0x5c>)
 8017f0a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017f0e:	4903      	ldr	r1, [pc, #12]	; (8017f1c <tcp_close_shutdown_fin+0x60>)
 8017f10:	4803      	ldr	r0, [pc, #12]	; (8017f20 <tcp_close_shutdown_fin+0x64>)
 8017f12:	f009 fc67 	bl	80217e4 <iprintf>
 8017f16:	e7d4      	b.n	8017ec2 <tcp_close_shutdown_fin+0x6>
 8017f18:	0803f050 	.word	0x0803f050
 8017f1c:	0803f080 	.word	0x0803f080
 8017f20:	08027fec 	.word	0x08027fec

08017f24 <tcp_init>:
{
 8017f24:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017f26:	f009 fd01 	bl	802192c <rand>
 8017f2a:	4b02      	ldr	r3, [pc, #8]	; (8017f34 <tcp_init+0x10>)
 8017f2c:	4a02      	ldr	r2, [pc, #8]	; (8017f38 <tcp_init+0x14>)
 8017f2e:	4303      	orrs	r3, r0
 8017f30:	8013      	strh	r3, [r2, #0]
}
 8017f32:	bd08      	pop	{r3, pc}
 8017f34:	ffffc000 	.word	0xffffc000
 8017f38:	200003e4 	.word	0x200003e4

08017f3c <tcp_free>:
{
 8017f3c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017f3e:	7d03      	ldrb	r3, [r0, #20]
{
 8017f40:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017f42:	2b01      	cmp	r3, #1
 8017f44:	d005      	beq.n	8017f52 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8017f46:	4621      	mov	r1, r4
 8017f48:	2002      	movs	r0, #2
}
 8017f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8017f4e:	f7ff b861 	b.w	8017014 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017f52:	4906      	ldr	r1, [pc, #24]	; (8017f6c <tcp_free+0x30>)
 8017f54:	22d4      	movs	r2, #212	; 0xd4
 8017f56:	4b06      	ldr	r3, [pc, #24]	; (8017f70 <tcp_free+0x34>)
 8017f58:	4806      	ldr	r0, [pc, #24]	; (8017f74 <tcp_free+0x38>)
 8017f5a:	f009 fc43 	bl	80217e4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8017f5e:	4621      	mov	r1, r4
 8017f60:	2002      	movs	r0, #2
}
 8017f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8017f66:	f7ff b855 	b.w	8017014 <memp_free>
 8017f6a:	bf00      	nop
 8017f6c:	0803f08c 	.word	0x0803f08c
 8017f70:	0803f050 	.word	0x0803f050
 8017f74:	08027fec 	.word	0x08027fec

08017f78 <tcp_bind>:
{
 8017f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8017f7a:	4e26      	ldr	r6, [pc, #152]	; (8018014 <tcp_bind+0x9c>)
 8017f7c:	2900      	cmp	r1, #0
 8017f7e:	bf18      	it	ne
 8017f80:	460e      	movne	r6, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f82:	2800      	cmp	r0, #0
 8017f84:	d03b      	beq.n	8017ffe <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017f86:	7d03      	ldrb	r3, [r0, #20]
 8017f88:	4607      	mov	r7, r0
 8017f8a:	bb73      	cbnz	r3, 8017fea <tcp_bind+0x72>
  if (port == 0) {
 8017f8c:	b312      	cbz	r2, 8017fd4 <tcp_bind+0x5c>
 8017f8e:	4922      	ldr	r1, [pc, #136]	; (8018018 <tcp_bind+0xa0>)
 8017f90:	4b22      	ldr	r3, [pc, #136]	; (801801c <tcp_bind+0xa4>)
 8017f92:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	b913      	cbnz	r3, 8017fa0 <tcp_bind+0x28>
 8017f9a:	e00d      	b.n	8017fb8 <tcp_bind+0x40>
 8017f9c:	68db      	ldr	r3, [r3, #12]
 8017f9e:	b15b      	cbz	r3, 8017fb8 <tcp_bind+0x40>
        if (cpcb->local_port == port) {
 8017fa0:	8adc      	ldrh	r4, [r3, #22]
 8017fa2:	4294      	cmp	r4, r2
 8017fa4:	d1fa      	bne.n	8017f9c <tcp_bind+0x24>
                (ip_addr_isany(&cpcb->local_ip) ||
 8017fa6:	681c      	ldr	r4, [r3, #0]
 8017fa8:	b11c      	cbz	r4, 8017fb2 <tcp_bind+0x3a>
                 ip_addr_isany(ipaddr) ||
 8017faa:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8017fac:	b10d      	cbz	r5, 8017fb2 <tcp_bind+0x3a>
 8017fae:	42ac      	cmp	r4, r5
 8017fb0:	d1f4      	bne.n	8017f9c <tcp_bind+0x24>
              return ERR_USE;
 8017fb2:	f06f 0007 	mvn.w	r0, #7
}
 8017fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 8017fb8:	4281      	cmp	r1, r0
 8017fba:	d113      	bne.n	8017fe4 <tcp_bind+0x6c>
  if (!ip_addr_isany(ipaddr)
 8017fbc:	6833      	ldr	r3, [r6, #0]
 8017fbe:	b103      	cbz	r3, 8017fc2 <tcp_bind+0x4a>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8017fc0:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017fc2:	4b17      	ldr	r3, [pc, #92]	; (8018020 <tcp_bind+0xa8>)
  pcb->local_port = port;
 8017fc4:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8017fc6:	681a      	ldr	r2, [r3, #0]
 8017fc8:	601f      	str	r7, [r3, #0]
 8017fca:	60fa      	str	r2, [r7, #12]
 8017fcc:	f004 f9ae 	bl	801c32c <tcp_timer_needed>
  return ERR_OK;
 8017fd0:	2000      	movs	r0, #0
}
 8017fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 8017fd4:	f7ff ff3e 	bl	8017e54 <tcp_new_port>
    if (port == 0) {
 8017fd8:	4602      	mov	r2, r0
 8017fda:	2800      	cmp	r0, #0
 8017fdc:	d1ee      	bne.n	8017fbc <tcp_bind+0x44>
      return ERR_BUF;
 8017fde:	f06f 0001 	mvn.w	r0, #1
}
 8017fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fe4:	f851 3b04 	ldr.w	r3, [r1], #4
 8017fe8:	e7d5      	b.n	8017f96 <tcp_bind+0x1e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8017fea:	4b0e      	ldr	r3, [pc, #56]	; (8018024 <tcp_bind+0xac>)
 8017fec:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017ff0:	490d      	ldr	r1, [pc, #52]	; (8018028 <tcp_bind+0xb0>)
 8017ff2:	480e      	ldr	r0, [pc, #56]	; (801802c <tcp_bind+0xb4>)
 8017ff4:	f009 fbf6 	bl	80217e4 <iprintf>
 8017ff8:	f06f 0005 	mvn.w	r0, #5
}
 8017ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8017ffe:	4b09      	ldr	r3, [pc, #36]	; (8018024 <tcp_bind+0xac>)
 8018000:	f240 22a9 	movw	r2, #681	; 0x2a9
 8018004:	490a      	ldr	r1, [pc, #40]	; (8018030 <tcp_bind+0xb8>)
 8018006:	4809      	ldr	r0, [pc, #36]	; (801802c <tcp_bind+0xb4>)
 8018008:	f009 fbec 	bl	80217e4 <iprintf>
 801800c:	f06f 000f 	mvn.w	r0, #15
}
 8018010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018012:	bf00      	nop
 8018014:	08040cd4 	.word	0x08040cd4
 8018018:	0803f738 	.word	0x0803f738
 801801c:	200368a8 	.word	0x200368a8
 8018020:	200368ac 	.word	0x200368ac
 8018024:	0803f050 	.word	0x0803f050
 8018028:	0803f0b8 	.word	0x0803f0b8
 801802c:	08027fec 	.word	0x08027fec
 8018030:	0803f0a0 	.word	0x0803f0a0

08018034 <tcp_listen_with_backlog_and_err>:
{
 8018034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8018036:	4604      	mov	r4, r0
{
 8018038:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801803a:	2800      	cmp	r0, #0
 801803c:	d052      	beq.n	80180e4 <tcp_listen_with_backlog_and_err+0xb0>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801803e:	7d05      	ldrb	r5, [r0, #20]
 8018040:	2d00      	cmp	r5, #0
 8018042:	d13c      	bne.n	80180be <tcp_listen_with_backlog_and_err+0x8a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018044:	f240 3272 	movw	r2, #882	; 0x372
 8018048:	492c      	ldr	r1, [pc, #176]	; (80180fc <tcp_listen_with_backlog_and_err+0xc8>)
 801804a:	2003      	movs	r0, #3
 801804c:	f7fe ffbe 	bl	8016fcc <memp_malloc_fn>
  if (lpcb == NULL) {
 8018050:	4606      	mov	r6, r0
 8018052:	2800      	cmp	r0, #0
 8018054:	d043      	beq.n	80180de <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8018056:	6921      	ldr	r1, [r4, #16]
  lpcb->state = LISTEN;
 8018058:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 801805a:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801805c:	7502      	strb	r2, [r0, #20]
  lpcb->callback_arg = pcb->callback_arg;
 801805e:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8018060:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8018062:	7d62      	ldrb	r2, [r4, #21]
 8018064:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8018066:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8018068:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801806a:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801806c:	7ae2      	ldrb	r2, [r4, #11]
 801806e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8018070:	7aa2      	ldrb	r2, [r4, #10]
 8018072:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8018074:	6822      	ldr	r2, [r4, #0]
 8018076:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8018078:	b163      	cbz	r3, 8018094 <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801807a:	4a21      	ldr	r2, [pc, #132]	; (8018100 <tcp_listen_with_backlog_and_err+0xcc>)
 801807c:	6813      	ldr	r3, [r2, #0]
 801807e:	42a3      	cmp	r3, r4
 8018080:	d018      	beq.n	80180b4 <tcp_listen_with_backlog_and_err+0x80>
 8018082:	b12b      	cbz	r3, 8018090 <tcp_listen_with_backlog_and_err+0x5c>
 8018084:	68d9      	ldr	r1, [r3, #12]
 8018086:	42a1      	cmp	r1, r4
 8018088:	d024      	beq.n	80180d4 <tcp_listen_with_backlog_and_err+0xa0>
 801808a:	460b      	mov	r3, r1
 801808c:	2b00      	cmp	r3, #0
 801808e:	d1f9      	bne.n	8018084 <tcp_listen_with_backlog_and_err+0x50>
 8018090:	2300      	movs	r3, #0
 8018092:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8018094:	4620      	mov	r0, r4
 8018096:	f7ff ff51 	bl	8017f3c <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801809a:	4b1a      	ldr	r3, [pc, #104]	; (8018104 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 801809c:	491a      	ldr	r1, [pc, #104]	; (8018108 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801809e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 80180a0:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80180a2:	60f2      	str	r2, [r6, #12]
 80180a4:	601e      	str	r6, [r3, #0]
 80180a6:	f004 f941 	bl	801c32c <tcp_timer_needed>
  res = ERR_OK;
 80180aa:	2300      	movs	r3, #0
  if (err != NULL) {
 80180ac:	b107      	cbz	r7, 80180b0 <tcp_listen_with_backlog_and_err+0x7c>
    *err = res;
 80180ae:	703b      	strb	r3, [r7, #0]
}
 80180b0:	4630      	mov	r0, r6
 80180b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80180b4:	68e3      	ldr	r3, [r4, #12]
 80180b6:	6013      	str	r3, [r2, #0]
 80180b8:	2300      	movs	r3, #0
 80180ba:	60e3      	str	r3, [r4, #12]
 80180bc:	e7ea      	b.n	8018094 <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80180be:	4b0f      	ldr	r3, [pc, #60]	; (80180fc <tcp_listen_with_backlog_and_err+0xc8>)
 80180c0:	f240 325a 	movw	r2, #858	; 0x35a
 80180c4:	4911      	ldr	r1, [pc, #68]	; (801810c <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 80180c6:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80180c8:	4811      	ldr	r0, [pc, #68]	; (8018110 <tcp_listen_with_backlog_and_err+0xdc>)
 80180ca:	f009 fb8b 	bl	80217e4 <iprintf>
 80180ce:	f06f 030e 	mvn.w	r3, #14
 80180d2:	e7eb      	b.n	80180ac <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80180d4:	68e2      	ldr	r2, [r4, #12]
 80180d6:	60da      	str	r2, [r3, #12]
 80180d8:	2300      	movs	r3, #0
 80180da:	60e3      	str	r3, [r4, #12]
 80180dc:	e7da      	b.n	8018094 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 80180de:	f04f 33ff 	mov.w	r3, #4294967295
 80180e2:	e7e3      	b.n	80180ac <tcp_listen_with_backlog_and_err+0x78>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80180e4:	4b05      	ldr	r3, [pc, #20]	; (80180fc <tcp_listen_with_backlog_and_err+0xc8>)
 80180e6:	f240 3259 	movw	r2, #857	; 0x359
 80180ea:	490a      	ldr	r1, [pc, #40]	; (8018114 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 80180ec:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80180ee:	4808      	ldr	r0, [pc, #32]	; (8018110 <tcp_listen_with_backlog_and_err+0xdc>)
 80180f0:	f009 fb78 	bl	80217e4 <iprintf>
 80180f4:	f06f 030f 	mvn.w	r3, #15
 80180f8:	e7d8      	b.n	80180ac <tcp_listen_with_backlog_and_err+0x78>
 80180fa:	bf00      	nop
 80180fc:	0803f050 	.word	0x0803f050
 8018100:	200368ac 	.word	0x200368ac
 8018104:	200368a8 	.word	0x200368a8
 8018108:	08018b45 	.word	0x08018b45
 801810c:	0803f110 	.word	0x0803f110
 8018110:	08027fec 	.word	0x08027fec
 8018114:	0803f0e0 	.word	0x0803f0e0

08018118 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8018118:	2200      	movs	r2, #0
 801811a:	f7ff bf8b 	b.w	8018034 <tcp_listen_with_backlog_and_err>
 801811e:	bf00      	nop

08018120 <tcp_update_rcv_ann_wnd>:
{
 8018120:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018122:	4604      	mov	r4, r0
 8018124:	b1a8      	cbz	r0, 8018152 <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8018126:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8018128:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801812a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801812c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801812e:	1a88      	subs	r0, r1, r2
 8018130:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8018134:	4428      	add	r0, r5
 8018136:	bf94      	ite	ls
 8018138:	1ac3      	subls	r3, r0, r3
 801813a:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 801813e:	2b00      	cmp	r3, #0
 8018140:	db01      	blt.n	8018146 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8018142:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8018144:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8018146:	1aab      	subs	r3, r5, r2
 8018148:	2b00      	cmp	r3, #0
 801814a:	dd0a      	ble.n	8018162 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 801814c:	2000      	movs	r0, #0
 801814e:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 8018150:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018152:	4b0b      	ldr	r3, [pc, #44]	; (8018180 <tcp_update_rcv_ann_wnd+0x60>)
 8018154:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018158:	490a      	ldr	r1, [pc, #40]	; (8018184 <tcp_update_rcv_ann_wnd+0x64>)
 801815a:	480b      	ldr	r0, [pc, #44]	; (8018188 <tcp_update_rcv_ann_wnd+0x68>)
 801815c:	f009 fb42 	bl	80217e4 <iprintf>
 8018160:	e7e1      	b.n	8018126 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8018162:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018164:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8018168:	d202      	bcs.n	8018170 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 801816a:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801816c:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801816e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8018170:	4b03      	ldr	r3, [pc, #12]	; (8018180 <tcp_update_rcv_ann_wnd+0x60>)
 8018172:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018176:	4905      	ldr	r1, [pc, #20]	; (801818c <tcp_update_rcv_ann_wnd+0x6c>)
 8018178:	4803      	ldr	r0, [pc, #12]	; (8018188 <tcp_update_rcv_ann_wnd+0x68>)
 801817a:	f009 fb33 	bl	80217e4 <iprintf>
 801817e:	e7f4      	b.n	801816a <tcp_update_rcv_ann_wnd+0x4a>
 8018180:	0803f050 	.word	0x0803f050
 8018184:	0803f148 	.word	0x0803f148
 8018188:	08027fec 	.word	0x08027fec
 801818c:	0803f16c 	.word	0x0803f16c

08018190 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018190:	b340      	cbz	r0, 80181e4 <tcp_recved+0x54>
{
 8018192:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018194:	7d03      	ldrb	r3, [r0, #20]
 8018196:	4605      	mov	r5, r0
 8018198:	460c      	mov	r4, r1
 801819a:	2b01      	cmp	r3, #1
 801819c:	d01a      	beq.n	80181d4 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801819e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80181a0:	1919      	adds	r1, r3, r4
 80181a2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80181a4:	428b      	cmp	r3, r1
 80181a6:	d802      	bhi.n	80181ae <tcp_recved+0x1e>
 80181a8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 80181ac:	d901      	bls.n	80181b2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80181ae:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80181b2:	4628      	mov	r0, r5
 80181b4:	8529      	strh	r1, [r5, #40]	; 0x28
 80181b6:	f7ff ffb3 	bl	8018120 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80181ba:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80181be:	d200      	bcs.n	80181c2 <tcp_recved+0x32>
}
 80181c0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 80181c2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 80181c4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 80181c6:	f043 0302 	orr.w	r3, r3, #2
 80181ca:	836b      	strh	r3, [r5, #26]
}
 80181cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 80181d0:	f003 bd78 	b.w	801bcc4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80181d4:	4b07      	ldr	r3, [pc, #28]	; (80181f4 <tcp_recved+0x64>)
 80181d6:	f240 32d2 	movw	r2, #978	; 0x3d2
 80181da:	4907      	ldr	r1, [pc, #28]	; (80181f8 <tcp_recved+0x68>)
 80181dc:	4807      	ldr	r0, [pc, #28]	; (80181fc <tcp_recved+0x6c>)
 80181de:	f009 fb01 	bl	80217e4 <iprintf>
 80181e2:	e7dc      	b.n	801819e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80181e4:	4b03      	ldr	r3, [pc, #12]	; (80181f4 <tcp_recved+0x64>)
 80181e6:	f240 32cf 	movw	r2, #975	; 0x3cf
 80181ea:	4905      	ldr	r1, [pc, #20]	; (8018200 <tcp_recved+0x70>)
 80181ec:	4803      	ldr	r0, [pc, #12]	; (80181fc <tcp_recved+0x6c>)
 80181ee:	f009 baf9 	b.w	80217e4 <iprintf>
 80181f2:	bf00      	nop
 80181f4:	0803f050 	.word	0x0803f050
 80181f8:	0803f1a0 	.word	0x0803f1a0
 80181fc:	08027fec 	.word	0x08027fec
 8018200:	0803f188 	.word	0x0803f188

08018204 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8018204:	b158      	cbz	r0, 801821e <tcp_seg_free+0x1a>
{
 8018206:	b510      	push	{r4, lr}
 8018208:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801820a:	6840      	ldr	r0, [r0, #4]
 801820c:	b108      	cbz	r0, 8018212 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801820e:	f7ff f9d1 	bl	80175b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018212:	4621      	mov	r1, r4
 8018214:	2004      	movs	r0, #4
  }
}
 8018216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801821a:	f7fe befb 	b.w	8017014 <memp_free>
 801821e:	4770      	bx	lr

08018220 <tcp_segs_free>:
  while (seg != NULL) {
 8018220:	b140      	cbz	r0, 8018234 <tcp_segs_free+0x14>
{
 8018222:	b510      	push	{r4, lr}
 8018224:	4604      	mov	r4, r0
    struct tcp_seg *next = seg->next;
 8018226:	4620      	mov	r0, r4
 8018228:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801822a:	f7ff ffeb 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 801822e:	2c00      	cmp	r4, #0
 8018230:	d1f9      	bne.n	8018226 <tcp_segs_free+0x6>
}
 8018232:	bd10      	pop	{r4, pc}
 8018234:	4770      	bx	lr
 8018236:	bf00      	nop

08018238 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8018238:	b108      	cbz	r0, 801823e <tcp_setprio+0x6>

  pcb->prio = prio;
 801823a:	7541      	strb	r1, [r0, #21]
}
 801823c:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801823e:	4b03      	ldr	r3, [pc, #12]	; (801824c <tcp_setprio+0x14>)
 8018240:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8018244:	4902      	ldr	r1, [pc, #8]	; (8018250 <tcp_setprio+0x18>)
 8018246:	4803      	ldr	r0, [pc, #12]	; (8018254 <tcp_setprio+0x1c>)
 8018248:	f009 bacc 	b.w	80217e4 <iprintf>
 801824c:	0803f050 	.word	0x0803f050
 8018250:	0803f1c8 	.word	0x0803f1c8
 8018254:	08027fec 	.word	0x08027fec

08018258 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018258:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801825a:	4605      	mov	r5, r0
 801825c:	b1a0      	cbz	r0, 8018288 <tcp_seg_copy+0x30>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801825e:	f240 6284 	movw	r2, #1668	; 0x684
 8018262:	490d      	ldr	r1, [pc, #52]	; (8018298 <tcp_seg_copy+0x40>)
 8018264:	2004      	movs	r0, #4
 8018266:	f7fe feb1 	bl	8016fcc <memp_malloc_fn>
  if (cseg == NULL) {
 801826a:	4604      	mov	r4, r0
 801826c:	b150      	cbz	r0, 8018284 <tcp_seg_copy+0x2c>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801826e:	6828      	ldr	r0, [r5, #0]
 8018270:	6869      	ldr	r1, [r5, #4]
 8018272:	68aa      	ldr	r2, [r5, #8]
 8018274:	68eb      	ldr	r3, [r5, #12]
 8018276:	6020      	str	r0, [r4, #0]
 8018278:	6061      	str	r1, [r4, #4]
 801827a:	60a2      	str	r2, [r4, #8]
  pbuf_ref(cseg->p);
 801827c:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801827e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8018280:	f7ff fb06 	bl	8017890 <pbuf_ref>
  return cseg;
}
 8018284:	4620      	mov	r0, r4
 8018286:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018288:	4b03      	ldr	r3, [pc, #12]	; (8018298 <tcp_seg_copy+0x40>)
 801828a:	f240 6282 	movw	r2, #1666	; 0x682
 801828e:	4903      	ldr	r1, [pc, #12]	; (801829c <tcp_seg_copy+0x44>)
 8018290:	4803      	ldr	r0, [pc, #12]	; (80182a0 <tcp_seg_copy+0x48>)
 8018292:	f009 faa7 	bl	80217e4 <iprintf>
 8018296:	e7e2      	b.n	801825e <tcp_seg_copy+0x6>
 8018298:	0803f050 	.word	0x0803f050
 801829c:	0803f1e4 	.word	0x0803f1e4
 80182a0:	08027fec 	.word	0x08027fec

080182a4 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80182a4:	b100      	cbz	r0, 80182a8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 80182a6:	6101      	str	r1, [r0, #16]
  }
}
 80182a8:	4770      	bx	lr
 80182aa:	bf00      	nop

080182ac <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80182ac:	b140      	cbz	r0, 80182c0 <tcp_recv+0x14>
{
 80182ae:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80182b0:	7d03      	ldrb	r3, [r0, #20]
 80182b2:	4604      	mov	r4, r0
 80182b4:	460d      	mov	r5, r1
 80182b6:	2b01      	cmp	r3, #1
 80182b8:	d003      	beq.n	80182c2 <tcp_recv+0x16>
    pcb->recv = recv;
 80182ba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 80182be:	bd38      	pop	{r3, r4, r5, pc}
 80182c0:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80182c2:	4b05      	ldr	r3, [pc, #20]	; (80182d8 <tcp_recv+0x2c>)
 80182c4:	f240 72df 	movw	r2, #2015	; 0x7df
 80182c8:	4904      	ldr	r1, [pc, #16]	; (80182dc <tcp_recv+0x30>)
 80182ca:	4805      	ldr	r0, [pc, #20]	; (80182e0 <tcp_recv+0x34>)
 80182cc:	f009 fa8a 	bl	80217e4 <iprintf>
    pcb->recv = recv;
 80182d0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 80182d4:	bd38      	pop	{r3, r4, r5, pc}
 80182d6:	bf00      	nop
 80182d8:	0803f050 	.word	0x0803f050
 80182dc:	0803f200 	.word	0x0803f200
 80182e0:	08027fec 	.word	0x08027fec

080182e4 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80182e4:	b140      	cbz	r0, 80182f8 <tcp_sent+0x14>
{
 80182e6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80182e8:	7d03      	ldrb	r3, [r0, #20]
 80182ea:	4604      	mov	r4, r0
 80182ec:	460d      	mov	r5, r1
 80182ee:	2b01      	cmp	r3, #1
 80182f0:	d003      	beq.n	80182fa <tcp_sent+0x16>
    pcb->sent = sent;
 80182f2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 80182f6:	bd38      	pop	{r3, r4, r5, pc}
 80182f8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80182fa:	4b05      	ldr	r3, [pc, #20]	; (8018310 <tcp_sent+0x2c>)
 80182fc:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8018300:	4904      	ldr	r1, [pc, #16]	; (8018314 <tcp_sent+0x30>)
 8018302:	4805      	ldr	r0, [pc, #20]	; (8018318 <tcp_sent+0x34>)
 8018304:	f009 fa6e 	bl	80217e4 <iprintf>
    pcb->sent = sent;
 8018308:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801830c:	bd38      	pop	{r3, r4, r5, pc}
 801830e:	bf00      	nop
 8018310:	0803f050 	.word	0x0803f050
 8018314:	0803f228 	.word	0x0803f228
 8018318:	08027fec 	.word	0x08027fec

0801831c <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801831c:	b140      	cbz	r0, 8018330 <tcp_err+0x14>
{
 801831e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018320:	7d03      	ldrb	r3, [r0, #20]
 8018322:	4604      	mov	r4, r0
 8018324:	460d      	mov	r5, r1
 8018326:	2b01      	cmp	r3, #1
 8018328:	d003      	beq.n	8018332 <tcp_err+0x16>
    pcb->errf = err;
 801832a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 801832e:	bd38      	pop	{r3, r4, r5, pc}
 8018330:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8018332:	4b05      	ldr	r3, [pc, #20]	; (8018348 <tcp_err+0x2c>)
 8018334:	f640 020d 	movw	r2, #2061	; 0x80d
 8018338:	4904      	ldr	r1, [pc, #16]	; (801834c <tcp_err+0x30>)
 801833a:	4805      	ldr	r0, [pc, #20]	; (8018350 <tcp_err+0x34>)
 801833c:	f009 fa52 	bl	80217e4 <iprintf>
    pcb->errf = err;
 8018340:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8018344:	bd38      	pop	{r3, r4, r5, pc}
 8018346:	bf00      	nop
 8018348:	0803f050 	.word	0x0803f050
 801834c:	0803f250 	.word	0x0803f250
 8018350:	08027fec 	.word	0x08027fec

08018354 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8018354:	b118      	cbz	r0, 801835e <tcp_accept+0xa>
 8018356:	7d03      	ldrb	r3, [r0, #20]
 8018358:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 801835a:	bf08      	it	eq
 801835c:	6181      	streq	r1, [r0, #24]
  }
}
 801835e:	4770      	bx	lr

08018360 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8018360:	b1a8      	cbz	r0, 801838e <tcp_poll+0x2e>
{
 8018362:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018364:	7d03      	ldrb	r3, [r0, #20]
 8018366:	460e      	mov	r6, r1
 8018368:	4604      	mov	r4, r0
 801836a:	4615      	mov	r5, r2
 801836c:	2b01      	cmp	r3, #1
 801836e:	d003      	beq.n	8018378 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8018370:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8018374:	7765      	strb	r5, [r4, #29]
}
 8018376:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8018378:	4b08      	ldr	r3, [pc, #32]	; (801839c <tcp_poll+0x3c>)
 801837a:	f640 023e 	movw	r2, #2110	; 0x83e
 801837e:	4908      	ldr	r1, [pc, #32]	; (80183a0 <tcp_poll+0x40>)
 8018380:	4808      	ldr	r0, [pc, #32]	; (80183a4 <tcp_poll+0x44>)
 8018382:	f009 fa2f 	bl	80217e4 <iprintf>
  pcb->poll = poll;
 8018386:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801838a:	7765      	strb	r5, [r4, #29]
}
 801838c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801838e:	4b03      	ldr	r3, [pc, #12]	; (801839c <tcp_poll+0x3c>)
 8018390:	f640 023d 	movw	r2, #2109	; 0x83d
 8018394:	4904      	ldr	r1, [pc, #16]	; (80183a8 <tcp_poll+0x48>)
 8018396:	4803      	ldr	r0, [pc, #12]	; (80183a4 <tcp_poll+0x44>)
 8018398:	f009 ba24 	b.w	80217e4 <iprintf>
 801839c:	0803f050 	.word	0x0803f050
 80183a0:	0803f290 	.word	0x0803f290
 80183a4:	08027fec 	.word	0x08027fec
 80183a8:	0803f278 	.word	0x0803f278

080183ac <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d02f      	beq.n	8018410 <tcp_pcb_purge+0x64>
{
 80183b0:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 80183b2:	7d03      	ldrb	r3, [r0, #20]
 80183b4:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 80183b6:	2b0a      	cmp	r3, #10
 80183b8:	d001      	beq.n	80183be <tcp_pcb_purge+0x12>
 80183ba:	2b01      	cmp	r3, #1
 80183bc:	d800      	bhi.n	80183c0 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 80183be:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 80183c0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80183c2:	b118      	cbz	r0, 80183cc <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 80183c4:	f7ff f8f6 	bl	80175b4 <pbuf_free>
      pcb->refused_data = NULL;
 80183c8:	2300      	movs	r3, #0
 80183ca:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80183cc:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 80183ce:	b134      	cbz	r4, 80183de <tcp_pcb_purge+0x32>
    struct tcp_seg *next = seg->next;
 80183d0:	4620      	mov	r0, r4
 80183d2:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80183d4:	f7ff ff16 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 80183d8:	2c00      	cmp	r4, #0
 80183da:	d1f9      	bne.n	80183d0 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 80183dc:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 80183de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 80183e2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 80183e4:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 80183e6:	b12c      	cbz	r4, 80183f4 <tcp_pcb_purge+0x48>
    struct tcp_seg *next = seg->next;
 80183e8:	4620      	mov	r0, r4
 80183ea:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80183ec:	f7ff ff0a 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 80183f0:	2c00      	cmp	r4, #0
 80183f2:	d1f9      	bne.n	80183e8 <tcp_pcb_purge+0x3c>
    tcp_segs_free(pcb->unacked);
 80183f4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 80183f6:	b12c      	cbz	r4, 8018404 <tcp_pcb_purge+0x58>
    struct tcp_seg *next = seg->next;
 80183f8:	4620      	mov	r0, r4
 80183fa:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 80183fc:	f7ff ff02 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 8018400:	2c00      	cmp	r4, #0
 8018402:	d1f9      	bne.n	80183f8 <tcp_pcb_purge+0x4c>
    pcb->unacked = pcb->unsent = NULL;
 8018404:	2300      	movs	r3, #0
 8018406:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801840a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801840e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8018410:	4b03      	ldr	r3, [pc, #12]	; (8018420 <tcp_pcb_purge+0x74>)
 8018412:	f640 0251 	movw	r2, #2129	; 0x851
 8018416:	4903      	ldr	r1, [pc, #12]	; (8018424 <tcp_pcb_purge+0x78>)
 8018418:	4803      	ldr	r0, [pc, #12]	; (8018428 <tcp_pcb_purge+0x7c>)
 801841a:	f009 b9e3 	b.w	80217e4 <iprintf>
 801841e:	bf00      	nop
 8018420:	0803f050 	.word	0x0803f050
 8018424:	0803f2b0 	.word	0x0803f2b0
 8018428:	08027fec 	.word	0x08027fec

0801842c <tcp_slowtmr>:
{
 801842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8018430:	4fb8      	ldr	r7, [pc, #736]	; (8018714 <tcp_slowtmr+0x2e8>)
{
 8018432:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8018434:	f8df 9300 	ldr.w	r9, [pc, #768]	; 8018738 <tcp_slowtmr+0x30c>
  ++tcp_ticks;
 8018438:	683a      	ldr	r2, [r7, #0]
  ++tcp_timer_ctr;
 801843a:	f899 3000 	ldrb.w	r3, [r9]
  ++tcp_ticks;
 801843e:	3201      	adds	r2, #1
 8018440:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 801873c <tcp_slowtmr+0x310>
  ++tcp_timer_ctr;
 8018444:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018446:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 8018740 <tcp_slowtmr+0x314>
  ++tcp_ticks;
 801844a:	603a      	str	r2, [r7, #0]
  ++tcp_timer_ctr;
 801844c:	f889 3000 	strb.w	r3, [r9]
  pcb = tcp_active_pcbs;
 8018450:	f8db 4000 	ldr.w	r4, [fp]
  while (pcb != NULL) {
 8018454:	2c00      	cmp	r4, #0
 8018456:	f000 8081 	beq.w	801855c <tcp_slowtmr+0x130>
  prev = NULL;
 801845a:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801845e:	7d23      	ldrb	r3, [r4, #20]
 8018460:	2b00      	cmp	r3, #0
 8018462:	f000 80f7 	beq.w	8018654 <tcp_slowtmr+0x228>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018466:	2b01      	cmp	r3, #1
 8018468:	f000 80ff 	beq.w	801866a <tcp_slowtmr+0x23e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801846c:	2b0a      	cmp	r3, #10
 801846e:	f000 8107 	beq.w	8018680 <tcp_slowtmr+0x254>
    if (pcb->last_timer == tcp_timer_ctr) {
 8018472:	f899 2000 	ldrb.w	r2, [r9]
 8018476:	7fa3      	ldrb	r3, [r4, #30]
 8018478:	4293      	cmp	r3, r2
 801847a:	f000 810e 	beq.w	801869a <tcp_slowtmr+0x26e>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801847e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8018480:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8018482:	2b02      	cmp	r3, #2
 8018484:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8018488:	f000 810d 	beq.w	80186a6 <tcp_slowtmr+0x27a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801848c:	2a0b      	cmp	r2, #11
 801848e:	f240 80c8 	bls.w	8018622 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8018492:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8018494:	2b06      	cmp	r3, #6
 8018496:	f000 80b7 	beq.w	8018608 <tcp_slowtmr+0x1dc>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801849a:	7a66      	ldrb	r6, [r4, #9]
 801849c:	f016 0208 	ands.w	r2, r6, #8
 80184a0:	9205      	str	r2, [sp, #20]
 80184a2:	d01b      	beq.n	80184dc <tcp_slowtmr+0xb0>
 80184a4:	2b04      	cmp	r3, #4
 80184a6:	d007      	beq.n	80184b8 <tcp_slowtmr+0x8c>
 80184a8:	f1a3 0307 	sub.w	r3, r3, #7
 80184ac:	fab3 f383 	clz	r3, r3
 80184b0:	095b      	lsrs	r3, r3, #5
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	f000 80b3 	beq.w	801861e <tcp_slowtmr+0x1f2>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80184b8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80184bc:	4b96      	ldr	r3, [pc, #600]	; (8018718 <tcp_slowtmr+0x2ec>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80184be:	683a      	ldr	r2, [r7, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80184c0:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80184c2:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80184c4:	4e95      	ldr	r6, [pc, #596]	; (801871c <tcp_slowtmr+0x2f0>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80184c6:	1a52      	subs	r2, r2, r1
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80184c8:	fba6 6303 	umull	r6, r3, r6, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80184cc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 80184d0:	f240 8145 	bls.w	801875e <tcp_slowtmr+0x332>
        ++pcb_remove;
 80184d4:	3501      	adds	r5, #1
        ++pcb_reset;
 80184d6:	2301      	movs	r3, #1
        ++pcb_remove;
 80184d8:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 80184da:	9305      	str	r3, [sp, #20]
    if (pcb->ooseq != NULL &&
 80184dc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 80184de:	b14e      	cbz	r6, 80184f4 <tcp_slowtmr+0xc8>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80184e0:	6839      	ldr	r1, [r7, #0]
 80184e2:	6a20      	ldr	r0, [r4, #32]
 80184e4:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
 80184e8:	1a09      	subs	r1, r1, r0
 80184ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (pcb->ooseq != NULL &&
 80184ee:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 80184f2:	d255      	bcs.n	80185a0 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 80184f4:	7d23      	ldrb	r3, [r4, #20]
 80184f6:	2b03      	cmp	r3, #3
 80184f8:	d05c      	beq.n	80185b4 <tcp_slowtmr+0x188>
    if (pcb->state == LAST_ACK) {
 80184fa:	2b09      	cmp	r3, #9
 80184fc:	d15f      	bne.n	80185be <tcp_slowtmr+0x192>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	6a22      	ldr	r2, [r4, #32]
 8018502:	1a9b      	subs	r3, r3, r2
 8018504:	2bf0      	cmp	r3, #240	; 0xf0
 8018506:	d95a      	bls.n	80185be <tcp_slowtmr+0x192>
      tcp_pcb_purge(pcb);
 8018508:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801850a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801850e:	f7ff ff4d 	bl	80183ac <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018512:	f8db 3000 	ldr.w	r3, [fp]
      if (prev != NULL) {
 8018516:	f1b8 0f00 	cmp.w	r8, #0
 801851a:	f000 8159 	beq.w	80187d0 <tcp_slowtmr+0x3a4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801851e:	42a3      	cmp	r3, r4
 8018520:	f000 81b2 	beq.w	8018888 <tcp_slowtmr+0x45c>
        prev->next = pcb->next;
 8018524:	68e3      	ldr	r3, [r4, #12]
 8018526:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 801852a:	9b05      	ldr	r3, [sp, #20]
 801852c:	2b00      	cmp	r3, #0
 801852e:	f040 812f 	bne.w	8018790 <tcp_slowtmr+0x364>
      err_arg = pcb->callback_arg;
 8018532:	6922      	ldr	r2, [r4, #16]
      tcp_free(pcb2);
 8018534:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8018536:	4e7a      	ldr	r6, [pc, #488]	; (8018720 <tcp_slowtmr+0x2f4>)
      pcb = pcb->next;
 8018538:	68e4      	ldr	r4, [r4, #12]
      err_arg = pcb->callback_arg;
 801853a:	9205      	str	r2, [sp, #20]
      tcp_free(pcb2);
 801853c:	f7ff fcfe 	bl	8017f3c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8018540:	2300      	movs	r3, #0
 8018542:	7033      	strb	r3, [r6, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018544:	b145      	cbz	r5, 8018558 <tcp_slowtmr+0x12c>
 8018546:	9a05      	ldr	r2, [sp, #20]
 8018548:	f06f 010c 	mvn.w	r1, #12
 801854c:	4610      	mov	r0, r2
 801854e:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8018550:	7833      	ldrb	r3, [r6, #0]
 8018552:	2b00      	cmp	r3, #0
 8018554:	f47f af7c 	bne.w	8018450 <tcp_slowtmr+0x24>
  while (pcb != NULL) {
 8018558:	2c00      	cmp	r4, #0
 801855a:	d180      	bne.n	801845e <tcp_slowtmr+0x32>
  pcb = tcp_tw_pcbs;
 801855c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8018744 <tcp_slowtmr+0x318>
 8018560:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 8018564:	b1cc      	cbz	r4, 801859a <tcp_slowtmr+0x16e>
  prev = NULL;
 8018566:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018568:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8018740 <tcp_slowtmr+0x314>
 801856c:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8018748 <tcp_slowtmr+0x31c>
 8018570:	4e6c      	ldr	r6, [pc, #432]	; (8018724 <tcp_slowtmr+0x2f8>)
 8018572:	7d23      	ldrb	r3, [r4, #20]
 8018574:	2b0a      	cmp	r3, #10
 8018576:	d006      	beq.n	8018586 <tcp_slowtmr+0x15a>
 8018578:	4643      	mov	r3, r8
 801857a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801857e:	4651      	mov	r1, sl
 8018580:	4630      	mov	r0, r6
 8018582:	f009 f92f 	bl	80217e4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	6a22      	ldr	r2, [r4, #32]
 801858a:	1a9b      	subs	r3, r3, r2
 801858c:	2bf0      	cmp	r3, #240	; 0xf0
 801858e:	f200 80ab 	bhi.w	80186e8 <tcp_slowtmr+0x2bc>
      pcb = pcb->next;
 8018592:	4625      	mov	r5, r4
 8018594:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8018596:	2c00      	cmp	r4, #0
 8018598:	d1eb      	bne.n	8018572 <tcp_slowtmr+0x146>
}
 801859a:	b007      	add	sp, #28
 801859c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 80185a0:	4630      	mov	r0, r6
 80185a2:	6836      	ldr	r6, [r6, #0]
    tcp_seg_free(seg);
 80185a4:	f7ff fe2e 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 80185a8:	2e00      	cmp	r6, #0
 80185aa:	d1f9      	bne.n	80185a0 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 80185ac:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 80185ae:	6766      	str	r6, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 80185b0:	2b03      	cmp	r3, #3
 80185b2:	d1a2      	bne.n	80184fa <tcp_slowtmr+0xce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	6a22      	ldr	r2, [r4, #32]
 80185b8:	1a9b      	subs	r3, r3, r2
 80185ba:	2b28      	cmp	r3, #40	; 0x28
 80185bc:	d8a4      	bhi.n	8018508 <tcp_slowtmr+0xdc>
    if (pcb_remove) {
 80185be:	2d00      	cmp	r5, #0
 80185c0:	d1a2      	bne.n	8018508 <tcp_slowtmr+0xdc>
      ++prev->polltmr;
 80185c2:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80185c4:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 80185c6:	3301      	adds	r3, #1
      pcb = pcb->next;
 80185c8:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 80185ca:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80185cc:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80185ce:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80185d0:	d814      	bhi.n	80185fc <tcp_slowtmr+0x1d0>
        tcp_active_pcbs_changed = 0;
 80185d2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8018720 <tcp_slowtmr+0x2f4>
        TCP_EVENT_POLL(prev, err);
 80185d6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 80185da:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80185dc:	f888 5000 	strb.w	r5, [r8]
        TCP_EVENT_POLL(prev, err);
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f000 80b3 	beq.w	801874c <tcp_slowtmr+0x320>
 80185e6:	4621      	mov	r1, r4
 80185e8:	6920      	ldr	r0, [r4, #16]
 80185ea:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80185ec:	f898 3000 	ldrb.w	r3, [r8]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	f47f af2d 	bne.w	8018450 <tcp_slowtmr+0x24>
        if (err == ERR_OK) {
 80185f6:	2800      	cmp	r0, #0
 80185f8:	f000 80a8 	beq.w	801874c <tcp_slowtmr+0x320>
 80185fc:	46a0      	mov	r8, r4
      pcb = pcb->next;
 80185fe:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8018600:	2c00      	cmp	r4, #0
 8018602:	f47f af2c 	bne.w	801845e <tcp_slowtmr+0x32>
 8018606:	e7a9      	b.n	801855c <tcp_slowtmr+0x130>
      if (pcb->flags & TF_RXCLOSED) {
 8018608:	8b63      	ldrh	r3, [r4, #26]
 801860a:	06db      	lsls	r3, r3, #27
 801860c:	d506      	bpl.n	801861c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801860e:	683b      	ldr	r3, [r7, #0]
 8018610:	6a22      	ldr	r2, [r4, #32]
 8018612:	1a9b      	subs	r3, r3, r2
 8018614:	2b28      	cmp	r3, #40	; 0x28
 8018616:	d901      	bls.n	801861c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 8018618:	3501      	adds	r5, #1
 801861a:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 801861c:	2300      	movs	r3, #0
 801861e:	9305      	str	r3, [sp, #20]
 8018620:	e75c      	b.n	80184dc <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 8018622:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8018626:	2d00      	cmp	r5, #0
 8018628:	d043      	beq.n	80186b2 <tcp_slowtmr+0x286>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801862a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801862c:	b133      	cbz	r3, 801863c <tcp_slowtmr+0x210>
 801862e:	4653      	mov	r3, sl
 8018630:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018634:	493c      	ldr	r1, [pc, #240]	; (8018728 <tcp_slowtmr+0x2fc>)
 8018636:	483b      	ldr	r0, [pc, #236]	; (8018724 <tcp_slowtmr+0x2f8>)
 8018638:	f009 f8d4 	bl	80217e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801863c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801863e:	2b00      	cmp	r3, #0
 8018640:	f000 8139 	beq.w	80188b6 <tcp_slowtmr+0x48a>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018644:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8018648:	2b0b      	cmp	r3, #11
 801864a:	f240 80ae 	bls.w	80187aa <tcp_slowtmr+0x37e>
 801864e:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 8018650:	2501      	movs	r5, #1
 8018652:	e71f      	b.n	8018494 <tcp_slowtmr+0x68>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8018654:	4653      	mov	r3, sl
 8018656:	f240 42be 	movw	r2, #1214	; 0x4be
 801865a:	4934      	ldr	r1, [pc, #208]	; (801872c <tcp_slowtmr+0x300>)
 801865c:	4831      	ldr	r0, [pc, #196]	; (8018724 <tcp_slowtmr+0x2f8>)
 801865e:	f009 f8c1 	bl	80217e4 <iprintf>
 8018662:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8018664:	2b01      	cmp	r3, #1
 8018666:	f47f af01 	bne.w	801846c <tcp_slowtmr+0x40>
 801866a:	4653      	mov	r3, sl
 801866c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8018670:	492f      	ldr	r1, [pc, #188]	; (8018730 <tcp_slowtmr+0x304>)
 8018672:	482c      	ldr	r0, [pc, #176]	; (8018724 <tcp_slowtmr+0x2f8>)
 8018674:	f009 f8b6 	bl	80217e4 <iprintf>
 8018678:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801867a:	2b0a      	cmp	r3, #10
 801867c:	f47f aef9 	bne.w	8018472 <tcp_slowtmr+0x46>
 8018680:	4653      	mov	r3, sl
 8018682:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8018686:	492b      	ldr	r1, [pc, #172]	; (8018734 <tcp_slowtmr+0x308>)
 8018688:	4826      	ldr	r0, [pc, #152]	; (8018724 <tcp_slowtmr+0x2f8>)
 801868a:	f009 f8ab 	bl	80217e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801868e:	f899 2000 	ldrb.w	r2, [r9]
 8018692:	7fa3      	ldrb	r3, [r4, #30]
 8018694:	4293      	cmp	r3, r2
 8018696:	f47f aef2 	bne.w	801847e <tcp_slowtmr+0x52>
      continue;
 801869a:	46a0      	mov	r8, r4
      pcb = pcb->next;
 801869c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801869e:	2c00      	cmp	r4, #0
 80186a0:	f47f aedd 	bne.w	801845e <tcp_slowtmr+0x32>
 80186a4:	e75a      	b.n	801855c <tcp_slowtmr+0x130>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80186a6:	2a05      	cmp	r2, #5
 80186a8:	d9bb      	bls.n	8018622 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 80186aa:	2300      	movs	r3, #0
      ++pcb_remove;
 80186ac:	2501      	movs	r5, #1
    pcb_reset = 0;
 80186ae:	9305      	str	r3, [sp, #20]
 80186b0:	e714      	b.n	80184dc <tcp_slowtmr+0xb0>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80186b2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80186b6:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 80186ba:	b291      	uxth	r1, r2
 80186bc:	4281      	cmp	r1, r0
 80186be:	d802      	bhi.n	80186c6 <tcp_slowtmr+0x29a>
          ++pcb->rtime;
 80186c0:	1c4a      	adds	r2, r1, #1
 80186c2:	b212      	sxth	r2, r2
 80186c4:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80186c6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 80186ca:	4291      	cmp	r1, r2
 80186cc:	f73f aee2 	bgt.w	8018494 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80186d0:	4620      	mov	r0, r4
 80186d2:	f003 f9b7 	bl	801ba44 <tcp_rexmit_rto_prepare>
 80186d6:	2800      	cmp	r0, #0
 80186d8:	f000 80a2 	beq.w	8018820 <tcp_slowtmr+0x3f4>
 80186dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80186de:	2b00      	cmp	r3, #0
 80186e0:	f000 809a 	beq.w	8018818 <tcp_slowtmr+0x3ec>
 80186e4:	7d23      	ldrb	r3, [r4, #20]
 80186e6:	e6d5      	b.n	8018494 <tcp_slowtmr+0x68>
      tcp_pcb_purge(pcb);
 80186e8:	4620      	mov	r0, r4
 80186ea:	f7ff fe5f 	bl	80183ac <tcp_pcb_purge>
      if (prev != NULL) {
 80186ee:	2d00      	cmp	r5, #0
 80186f0:	f000 80d2 	beq.w	8018898 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80186f4:	f8d9 3000 	ldr.w	r3, [r9]
 80186f8:	42a3      	cmp	r3, r4
 80186fa:	f000 80f2 	beq.w	80188e2 <tcp_slowtmr+0x4b6>
        prev->next = pcb->next;
 80186fe:	68e3      	ldr	r3, [r4, #12]
 8018700:	60eb      	str	r3, [r5, #12]
 8018702:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 8018704:	4620      	mov	r0, r4
      pcb = pcb->next;
 8018706:	461c      	mov	r4, r3
      tcp_free(pcb2);
 8018708:	f7ff fc18 	bl	8017f3c <tcp_free>
  while (pcb != NULL) {
 801870c:	2c00      	cmp	r4, #0
 801870e:	f47f af30 	bne.w	8018572 <tcp_slowtmr+0x146>
 8018712:	e742      	b.n	801859a <tcp_slowtmr+0x16e>
 8018714:	200368a4 	.word	0x200368a4
 8018718:	000a4cb8 	.word	0x000a4cb8
 801871c:	10624dd3 	.word	0x10624dd3
 8018720:	2003689c 	.word	0x2003689c
 8018724:	08027fec 	.word	0x08027fec
 8018728:	0803f354 	.word	0x0803f354
 801872c:	0803f2cc 	.word	0x0803f2cc
 8018730:	0803f2f8 	.word	0x0803f2f8
 8018734:	0803f324 	.word	0x0803f324
 8018738:	200229bd 	.word	0x200229bd
 801873c:	200368a0 	.word	0x200368a0
 8018740:	0803f050 	.word	0x0803f050
 8018744:	200368b0 	.word	0x200368b0
 8018748:	0803f418 	.word	0x0803f418
          tcp_output(prev);
 801874c:	4620      	mov	r0, r4
 801874e:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8018750:	4634      	mov	r4, r6
          tcp_output(prev);
 8018752:	f003 fab7 	bl	801bcc4 <tcp_output>
  while (pcb != NULL) {
 8018756:	2c00      	cmp	r4, #0
 8018758:	f47f ae81 	bne.w	801845e <tcp_slowtmr+0x32>
 801875c:	e6fe      	b.n	801855c <tcp_slowtmr+0x130>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801875e:	4965      	ldr	r1, [pc, #404]	; (80188f4 <tcp_slowtmr+0x4c8>)
 8018760:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8018764:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 8018768:	4963      	ldr	r1, [pc, #396]	; (80188f8 <tcp_slowtmr+0x4cc>)
 801876a:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801876e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8018772:	f67f af53 	bls.w	801861c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 8018776:	4620      	mov	r0, r4
 8018778:	f003 fcdc 	bl	801c134 <tcp_keepalive>
        if (err == ERR_OK) {
 801877c:	2800      	cmp	r0, #0
 801877e:	f47f af4d 	bne.w	801861c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 8018782:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8018786:	9005      	str	r0, [sp, #20]
          pcb->keep_cnt_sent++;
 8018788:	3301      	adds	r3, #1
 801878a:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801878e:	e6a5      	b.n	80184dc <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018790:	8b26      	ldrh	r6, [r4, #24]
 8018792:	1d20      	adds	r0, r4, #4
 8018794:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018796:	4623      	mov	r3, r4
 8018798:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801879a:	9602      	str	r6, [sp, #8]
 801879c:	8ae6      	ldrh	r6, [r4, #22]
 801879e:	9000      	str	r0, [sp, #0]
 80187a0:	4620      	mov	r0, r4
 80187a2:	9601      	str	r6, [sp, #4]
 80187a4:	f003 fa0e 	bl	801bbc4 <tcp_rst>
 80187a8:	e6c3      	b.n	8018532 <tcp_slowtmr+0x106>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80187aa:	4a54      	ldr	r2, [pc, #336]	; (80188fc <tcp_slowtmr+0x4d0>)
 80187ac:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 80187b0:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80187b4:	440a      	add	r2, r1
 80187b6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80187ba:	4293      	cmp	r3, r2
 80187bc:	d215      	bcs.n	80187ea <tcp_slowtmr+0x3be>
            pcb->persist_cnt++;
 80187be:	3301      	adds	r3, #1
 80187c0:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 80187c2:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 80187c4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80187c8:	d20f      	bcs.n	80187ea <tcp_slowtmr+0x3be>
 80187ca:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 80187cc:	2500      	movs	r5, #0
 80187ce:	e661      	b.n	8018494 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80187d0:	42a3      	cmp	r3, r4
 80187d2:	d006      	beq.n	80187e2 <tcp_slowtmr+0x3b6>
 80187d4:	4653      	mov	r3, sl
 80187d6:	f240 5271 	movw	r2, #1393	; 0x571
 80187da:	4949      	ldr	r1, [pc, #292]	; (8018900 <tcp_slowtmr+0x4d4>)
 80187dc:	4849      	ldr	r0, [pc, #292]	; (8018904 <tcp_slowtmr+0x4d8>)
 80187de:	f009 f801 	bl	80217e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 80187e2:	68e3      	ldr	r3, [r4, #12]
 80187e4:	f8cb 3000 	str.w	r3, [fp]
 80187e8:	e69f      	b.n	801852a <tcp_slowtmr+0xfe>
            if (pcb->snd_wnd == 0) {
 80187ea:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80187ee:	2d00      	cmp	r5, #0
 80187f0:	d169      	bne.n	80188c6 <tcp_slowtmr+0x49a>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80187f2:	4620      	mov	r0, r4
 80187f4:	f003 fcc8 	bl	801c188 <tcp_zero_window_probe>
 80187f8:	2800      	cmp	r0, #0
 80187fa:	f47f af73 	bne.w	80186e4 <tcp_slowtmr+0x2b8>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80187fe:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 8018802:	2500      	movs	r5, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018804:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 8018806:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801880a:	f63f af6b 	bhi.w	80186e4 <tcp_slowtmr+0x2b8>
                pcb->persist_backoff++;
 801880e:	1c5a      	adds	r2, r3, #1
 8018810:	7d23      	ldrb	r3, [r4, #20]
 8018812:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 8018816:	e63d      	b.n	8018494 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018818:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801881a:	2b00      	cmp	r3, #0
 801881c:	f43f af62 	beq.w	80186e4 <tcp_slowtmr+0x2b8>
            if (pcb->state != SYN_SENT) {
 8018820:	7d23      	ldrb	r3, [r4, #20]
 8018822:	2b02      	cmp	r3, #2
 8018824:	d014      	beq.n	8018850 <tcp_slowtmr+0x424>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018826:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801882a:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801882e:	4e36      	ldr	r6, [pc, #216]	; (8018908 <tcp_slowtmr+0x4dc>)
 8018830:	2a0c      	cmp	r2, #12
 8018832:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8018836:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801883a:	bf28      	it	cs
 801883c:	220c      	movcs	r2, #12
 801883e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8018842:	5cb2      	ldrb	r2, [r6, r2]
 8018844:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8018846:	428b      	cmp	r3, r1
 8018848:	bfa8      	it	ge
 801884a:	460b      	movge	r3, r1
 801884c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018850:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->rtime = 0;
 8018854:	2100      	movs	r1, #0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018856:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018858:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801885c:	0042      	lsls	r2, r0, #1
            pcb->cwnd = pcb->mss;
 801885e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8018862:	42b3      	cmp	r3, r6
            tcp_rexmit_rto_commit(pcb);
 8018864:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018866:	b292      	uxth	r2, r2
            pcb->rtime = 0;
 8018868:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->ssthresh = eff_wnd >> 1;
 801886a:	bf28      	it	cs
 801886c:	4633      	movcs	r3, r6
            pcb->bytes_acked = 0;
 801886e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018872:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 8018876:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801887a:	bf88      	it	hi
 801887c:	4613      	movhi	r3, r2
 801887e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 8018882:	f003 fc1d 	bl	801c0c0 <tcp_rexmit_rto_commit>
 8018886:	e72d      	b.n	80186e4 <tcp_slowtmr+0x2b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018888:	4653      	mov	r3, sl
 801888a:	f240 526d 	movw	r2, #1389	; 0x56d
 801888e:	491f      	ldr	r1, [pc, #124]	; (801890c <tcp_slowtmr+0x4e0>)
 8018890:	481c      	ldr	r0, [pc, #112]	; (8018904 <tcp_slowtmr+0x4d8>)
 8018892:	f008 ffa7 	bl	80217e4 <iprintf>
 8018896:	e645      	b.n	8018524 <tcp_slowtmr+0xf8>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018898:	f8d9 3000 	ldr.w	r3, [r9]
 801889c:	42a3      	cmp	r3, r4
 801889e:	d006      	beq.n	80188ae <tcp_slowtmr+0x482>
 80188a0:	4643      	mov	r3, r8
 80188a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80188a6:	491a      	ldr	r1, [pc, #104]	; (8018910 <tcp_slowtmr+0x4e4>)
 80188a8:	4630      	mov	r0, r6
 80188aa:	f008 ff9b 	bl	80217e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80188ae:	68e3      	ldr	r3, [r4, #12]
 80188b0:	f8c9 3000 	str.w	r3, [r9]
 80188b4:	e726      	b.n	8018704 <tcp_slowtmr+0x2d8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80188b6:	4653      	mov	r3, sl
 80188b8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80188bc:	4915      	ldr	r1, [pc, #84]	; (8018914 <tcp_slowtmr+0x4e8>)
 80188be:	4811      	ldr	r0, [pc, #68]	; (8018904 <tcp_slowtmr+0x4d8>)
 80188c0:	f008 ff90 	bl	80217e4 <iprintf>
 80188c4:	e6be      	b.n	8018644 <tcp_slowtmr+0x218>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80188c6:	4629      	mov	r1, r5
 80188c8:	4620      	mov	r0, r4
 80188ca:	f002 fee5 	bl	801b698 <tcp_split_unsent_seg>
 80188ce:	2800      	cmp	r0, #0
 80188d0:	d195      	bne.n	80187fe <tcp_slowtmr+0x3d2>
                if (tcp_output(pcb) == ERR_OK) {
 80188d2:	4620      	mov	r0, r4
 80188d4:	f003 f9f6 	bl	801bcc4 <tcp_output>
 80188d8:	2800      	cmp	r0, #0
 80188da:	d190      	bne.n	80187fe <tcp_slowtmr+0x3d2>
    pcb_remove = 0;
 80188dc:	4605      	mov	r5, r0
 80188de:	7d23      	ldrb	r3, [r4, #20]
 80188e0:	e5d8      	b.n	8018494 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80188e2:	4643      	mov	r3, r8
 80188e4:	f240 52af 	movw	r2, #1455	; 0x5af
 80188e8:	490b      	ldr	r1, [pc, #44]	; (8018918 <tcp_slowtmr+0x4ec>)
 80188ea:	4630      	mov	r0, r6
 80188ec:	f008 ff7a 	bl	80217e4 <iprintf>
 80188f0:	e705      	b.n	80186fe <tcp_slowtmr+0x2d2>
 80188f2:	bf00      	nop
 80188f4:	000124f8 	.word	0x000124f8
 80188f8:	10624dd3 	.word	0x10624dd3
 80188fc:	0803f744 	.word	0x0803f744
 8018900:	0803f3ec 	.word	0x0803f3ec
 8018904:	08027fec 	.word	0x08027fec
 8018908:	0803f724 	.word	0x0803f724
 801890c:	0803f3c0 	.word	0x0803f3c0
 8018910:	0803f470 	.word	0x0803f470
 8018914:	0803f388 	.word	0x0803f388
 8018918:	0803f448 	.word	0x0803f448

0801891c <tcp_pcb_remove>:
{
 801891c:	b538      	push	{r3, r4, r5, lr}
 801891e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8018920:	460c      	mov	r4, r1
 8018922:	2900      	cmp	r1, #0
 8018924:	d04a      	beq.n	80189bc <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8018926:	2d00      	cmp	r5, #0
 8018928:	d051      	beq.n	80189ce <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801892a:	682b      	ldr	r3, [r5, #0]
 801892c:	42a3      	cmp	r3, r4
 801892e:	d032      	beq.n	8018996 <tcp_pcb_remove+0x7a>
 8018930:	b12b      	cbz	r3, 801893e <tcp_pcb_remove+0x22>
 8018932:	68da      	ldr	r2, [r3, #12]
 8018934:	42a2      	cmp	r2, r4
 8018936:	d03e      	beq.n	80189b6 <tcp_pcb_remove+0x9a>
 8018938:	4613      	mov	r3, r2
 801893a:	2b00      	cmp	r3, #0
 801893c:	d1f9      	bne.n	8018932 <tcp_pcb_remove+0x16>
 801893e:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 8018940:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8018942:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8018944:	f7ff fd32 	bl	80183ac <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8018948:	7d23      	ldrb	r3, [r4, #20]
 801894a:	2b0a      	cmp	r3, #10
 801894c:	d02d      	beq.n	80189aa <tcp_pcb_remove+0x8e>
 801894e:	2b01      	cmp	r3, #1
 8018950:	d01d      	beq.n	801898e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 8018952:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8018954:	07da      	lsls	r2, r3, #31
 8018956:	d421      	bmi.n	801899c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8018958:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801895a:	b133      	cbz	r3, 801896a <tcp_pcb_remove+0x4e>
 801895c:	4b20      	ldr	r3, [pc, #128]	; (80189e0 <tcp_pcb_remove+0xc4>)
 801895e:	f640 0293 	movw	r2, #2195	; 0x893
 8018962:	4920      	ldr	r1, [pc, #128]	; (80189e4 <tcp_pcb_remove+0xc8>)
 8018964:	4820      	ldr	r0, [pc, #128]	; (80189e8 <tcp_pcb_remove+0xcc>)
 8018966:	f008 ff3d 	bl	80217e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801896a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801896c:	b133      	cbz	r3, 801897c <tcp_pcb_remove+0x60>
 801896e:	4b1c      	ldr	r3, [pc, #112]	; (80189e0 <tcp_pcb_remove+0xc4>)
 8018970:	f640 0294 	movw	r2, #2196	; 0x894
 8018974:	491d      	ldr	r1, [pc, #116]	; (80189ec <tcp_pcb_remove+0xd0>)
 8018976:	481c      	ldr	r0, [pc, #112]	; (80189e8 <tcp_pcb_remove+0xcc>)
 8018978:	f008 ff34 	bl	80217e4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801897c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801897e:	b133      	cbz	r3, 801898e <tcp_pcb_remove+0x72>
 8018980:	4b17      	ldr	r3, [pc, #92]	; (80189e0 <tcp_pcb_remove+0xc4>)
 8018982:	f640 0296 	movw	r2, #2198	; 0x896
 8018986:	491a      	ldr	r1, [pc, #104]	; (80189f0 <tcp_pcb_remove+0xd4>)
 8018988:	4817      	ldr	r0, [pc, #92]	; (80189e8 <tcp_pcb_remove+0xcc>)
 801898a:	f008 ff2b 	bl	80217e4 <iprintf>
  pcb->state = CLOSED;
 801898e:	2300      	movs	r3, #0
 8018990:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8018992:	82e3      	strh	r3, [r4, #22]
}
 8018994:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 8018996:	68e3      	ldr	r3, [r4, #12]
 8018998:	602b      	str	r3, [r5, #0]
 801899a:	e7d0      	b.n	801893e <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801899c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 80189a0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 80189a2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80189a4:	f003 f98e 	bl	801bcc4 <tcp_output>
 80189a8:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 80189aa:	2b01      	cmp	r3, #1
 80189ac:	d0ef      	beq.n	801898e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80189ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d1d3      	bne.n	801895c <tcp_pcb_remove+0x40>
 80189b4:	e7d9      	b.n	801896a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 80189b6:	68e2      	ldr	r2, [r4, #12]
 80189b8:	60da      	str	r2, [r3, #12]
 80189ba:	e7c0      	b.n	801893e <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80189bc:	4b08      	ldr	r3, [pc, #32]	; (80189e0 <tcp_pcb_remove+0xc4>)
 80189be:	f640 0283 	movw	r2, #2179	; 0x883
 80189c2:	490c      	ldr	r1, [pc, #48]	; (80189f4 <tcp_pcb_remove+0xd8>)
 80189c4:	4808      	ldr	r0, [pc, #32]	; (80189e8 <tcp_pcb_remove+0xcc>)
 80189c6:	f008 ff0d 	bl	80217e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80189ca:	2d00      	cmp	r5, #0
 80189cc:	d1ad      	bne.n	801892a <tcp_pcb_remove+0xe>
 80189ce:	4b04      	ldr	r3, [pc, #16]	; (80189e0 <tcp_pcb_remove+0xc4>)
 80189d0:	f640 0284 	movw	r2, #2180	; 0x884
 80189d4:	4908      	ldr	r1, [pc, #32]	; (80189f8 <tcp_pcb_remove+0xdc>)
 80189d6:	4804      	ldr	r0, [pc, #16]	; (80189e8 <tcp_pcb_remove+0xcc>)
 80189d8:	f008 ff04 	bl	80217e4 <iprintf>
 80189dc:	e7a5      	b.n	801892a <tcp_pcb_remove+0xe>
 80189de:	bf00      	nop
 80189e0:	0803f050 	.word	0x0803f050
 80189e4:	0803f4d4 	.word	0x0803f4d4
 80189e8:	08027fec 	.word	0x08027fec
 80189ec:	0803f4ec 	.word	0x0803f4ec
 80189f0:	0803f508 	.word	0x0803f508
 80189f4:	0803f498 	.word	0x0803f498
 80189f8:	0803f4b4 	.word	0x0803f4b4

080189fc <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80189fc:	2800      	cmp	r0, #0
 80189fe:	f000 8082 	beq.w	8018b06 <tcp_abandon+0x10a>
{
 8018a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018a06:	7d03      	ldrb	r3, [r0, #20]
{
 8018a08:	b085      	sub	sp, #20
 8018a0a:	4605      	mov	r5, r0
 8018a0c:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018a0e:	2b01      	cmp	r3, #1
 8018a10:	d065      	beq.n	8018ade <tcp_abandon+0xe2>
  if (pcb->state == TIME_WAIT) {
 8018a12:	2b0a      	cmp	r3, #10
 8018a14:	d06d      	beq.n	8018af2 <tcp_abandon+0xf6>
    seqno = pcb->snd_nxt;
 8018a16:	f8d5 a050 	ldr.w	sl, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8018a1a:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 8018a1e:	f8d5 7090 	ldr.w	r7, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8018a22:	f8d5 9010 	ldr.w	r9, [r5, #16]
    if (pcb->state == CLOSED) {
 8018a26:	b97b      	cbnz	r3, 8018a48 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 8018a28:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 8018a2c:	f1b8 0f00 	cmp.w	r8, #0
 8018a30:	d038      	beq.n	8018aa4 <tcp_abandon+0xa8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018a32:	4a3a      	ldr	r2, [pc, #232]	; (8018b1c <tcp_abandon+0x120>)
 8018a34:	6813      	ldr	r3, [r2, #0]
 8018a36:	42ab      	cmp	r3, r5
 8018a38:	d036      	beq.n	8018aa8 <tcp_abandon+0xac>
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d036      	beq.n	8018aac <tcp_abandon+0xb0>
 8018a3e:	68da      	ldr	r2, [r3, #12]
 8018a40:	42aa      	cmp	r2, r5
 8018a42:	d067      	beq.n	8018b14 <tcp_abandon+0x118>
 8018a44:	4613      	mov	r3, r2
 8018a46:	e7f8      	b.n	8018a3a <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018a48:	4629      	mov	r1, r5
 8018a4a:	4835      	ldr	r0, [pc, #212]	; (8018b20 <tcp_abandon+0x124>)
      local_port = pcb->local_port;
 8018a4c:	f8b5 8016 	ldrh.w	r8, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018a50:	f7ff ff64 	bl	801891c <tcp_pcb_remove>
 8018a54:	4b33      	ldr	r3, [pc, #204]	; (8018b24 <tcp_abandon+0x128>)
 8018a56:	2201      	movs	r2, #1
 8018a58:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8018a5a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 8018a5c:	b12c      	cbz	r4, 8018a6a <tcp_abandon+0x6e>
    struct tcp_seg *next = seg->next;
 8018a5e:	4620      	mov	r0, r4
 8018a60:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8018a62:	f7ff fbcf 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 8018a66:	2c00      	cmp	r4, #0
 8018a68:	d1f9      	bne.n	8018a5e <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 8018a6a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 8018a6c:	b12c      	cbz	r4, 8018a7a <tcp_abandon+0x7e>
    struct tcp_seg *next = seg->next;
 8018a6e:	4620      	mov	r0, r4
 8018a70:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8018a72:	f7ff fbc7 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 8018a76:	2c00      	cmp	r4, #0
 8018a78:	d1f9      	bne.n	8018a6e <tcp_abandon+0x72>
    if (pcb->ooseq != NULL) {
 8018a7a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8018a7c:	b12c      	cbz	r4, 8018a8a <tcp_abandon+0x8e>
    struct tcp_seg *next = seg->next;
 8018a7e:	4620      	mov	r0, r4
 8018a80:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8018a82:	f7ff fbbf 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 8018a86:	2c00      	cmp	r4, #0
 8018a88:	d1f9      	bne.n	8018a7e <tcp_abandon+0x82>
    if (send_rst) {
 8018a8a:	b9a6      	cbnz	r6, 8018ab6 <tcp_abandon+0xba>
    tcp_free(pcb);
 8018a8c:	4628      	mov	r0, r5
 8018a8e:	f7ff fa55 	bl	8017f3c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018a92:	b30f      	cbz	r7, 8018ad8 <tcp_abandon+0xdc>
 8018a94:	4648      	mov	r0, r9
 8018a96:	f06f 010c 	mvn.w	r1, #12
 8018a9a:	463b      	mov	r3, r7
}
 8018a9c:	b005      	add	sp, #20
 8018a9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018aa2:	4718      	bx	r3
    int send_rst = 0;
 8018aa4:	461e      	mov	r6, r3
 8018aa6:	e7d8      	b.n	8018a5a <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018aa8:	68eb      	ldr	r3, [r5, #12]
 8018aaa:	6013      	str	r3, [r2, #0]
 8018aac:	2300      	movs	r3, #0
    u16_t local_port = 0;
 8018aae:	4698      	mov	r8, r3
    int send_rst = 0;
 8018ab0:	461e      	mov	r6, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018ab2:	60eb      	str	r3, [r5, #12]
 8018ab4:	e7d1      	b.n	8018a5a <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8018ab6:	8b28      	ldrh	r0, [r5, #24]
 8018ab8:	1d2b      	adds	r3, r5, #4
 8018aba:	465a      	mov	r2, fp
 8018abc:	4651      	mov	r1, sl
 8018abe:	9002      	str	r0, [sp, #8]
 8018ac0:	4628      	mov	r0, r5
 8018ac2:	9300      	str	r3, [sp, #0]
 8018ac4:	462b      	mov	r3, r5
 8018ac6:	f8cd 8004 	str.w	r8, [sp, #4]
 8018aca:	f003 f87b 	bl	801bbc4 <tcp_rst>
    tcp_free(pcb);
 8018ace:	4628      	mov	r0, r5
 8018ad0:	f7ff fa34 	bl	8017f3c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018ad4:	2f00      	cmp	r7, #0
 8018ad6:	d1dd      	bne.n	8018a94 <tcp_abandon+0x98>
}
 8018ad8:	b005      	add	sp, #20
 8018ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018ade:	4b12      	ldr	r3, [pc, #72]	; (8018b28 <tcp_abandon+0x12c>)
 8018ae0:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018ae4:	4911      	ldr	r1, [pc, #68]	; (8018b2c <tcp_abandon+0x130>)
 8018ae6:	4812      	ldr	r0, [pc, #72]	; (8018b30 <tcp_abandon+0x134>)
 8018ae8:	f008 fe7c 	bl	80217e4 <iprintf>
 8018aec:	7d2b      	ldrb	r3, [r5, #20]
  if (pcb->state == TIME_WAIT) {
 8018aee:	2b0a      	cmp	r3, #10
 8018af0:	d191      	bne.n	8018a16 <tcp_abandon+0x1a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8018af2:	4629      	mov	r1, r5
 8018af4:	480f      	ldr	r0, [pc, #60]	; (8018b34 <tcp_abandon+0x138>)
 8018af6:	f7ff ff11 	bl	801891c <tcp_pcb_remove>
    tcp_free(pcb);
 8018afa:	4628      	mov	r0, r5
}
 8018afc:	b005      	add	sp, #20
 8018afe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 8018b02:	f7ff ba1b 	b.w	8017f3c <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8018b06:	4b08      	ldr	r3, [pc, #32]	; (8018b28 <tcp_abandon+0x12c>)
 8018b08:	f240 223d 	movw	r2, #573	; 0x23d
 8018b0c:	490a      	ldr	r1, [pc, #40]	; (8018b38 <tcp_abandon+0x13c>)
 8018b0e:	4808      	ldr	r0, [pc, #32]	; (8018b30 <tcp_abandon+0x134>)
 8018b10:	f008 be68 	b.w	80217e4 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018b14:	68ea      	ldr	r2, [r5, #12]
 8018b16:	60da      	str	r2, [r3, #12]
 8018b18:	e7c8      	b.n	8018aac <tcp_abandon+0xb0>
 8018b1a:	bf00      	nop
 8018b1c:	200368ac 	.word	0x200368ac
 8018b20:	200368a0 	.word	0x200368a0
 8018b24:	2003689c 	.word	0x2003689c
 8018b28:	0803f050 	.word	0x0803f050
 8018b2c:	0803f53c 	.word	0x0803f53c
 8018b30:	08027fec 	.word	0x08027fec
 8018b34:	200368b0 	.word	0x200368b0
 8018b38:	0803f520 	.word	0x0803f520

08018b3c <tcp_abort>:
  tcp_abandon(pcb, 1);
 8018b3c:	2101      	movs	r1, #1
 8018b3e:	f7ff bf5d 	b.w	80189fc <tcp_abandon>
 8018b42:	bf00      	nop

08018b44 <tcp_accept_null>:
{
 8018b44:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018b46:	460c      	mov	r4, r1
 8018b48:	b131      	cbz	r1, 8018b58 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	2101      	movs	r1, #1
 8018b4e:	f7ff ff55 	bl	80189fc <tcp_abandon>
}
 8018b52:	f06f 000c 	mvn.w	r0, #12
 8018b56:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8018b58:	4b06      	ldr	r3, [pc, #24]	; (8018b74 <tcp_accept_null+0x30>)
 8018b5a:	f240 320f 	movw	r2, #783	; 0x30f
 8018b5e:	4906      	ldr	r1, [pc, #24]	; (8018b78 <tcp_accept_null+0x34>)
 8018b60:	4806      	ldr	r0, [pc, #24]	; (8018b7c <tcp_accept_null+0x38>)
 8018b62:	f008 fe3f 	bl	80217e4 <iprintf>
  tcp_abandon(pcb, 1);
 8018b66:	4620      	mov	r0, r4
 8018b68:	2101      	movs	r1, #1
 8018b6a:	f7ff ff47 	bl	80189fc <tcp_abandon>
}
 8018b6e:	f06f 000c 	mvn.w	r0, #12
 8018b72:	bd10      	pop	{r4, pc}
 8018b74:	0803f050 	.word	0x0803f050
 8018b78:	0803f570 	.word	0x0803f570
 8018b7c:	08027fec 	.word	0x08027fec

08018b80 <tcp_netif_ip_addr_changed_pcblist>:
{
 8018b80:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018b82:	4605      	mov	r5, r0
{
 8018b84:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018b86:	b178      	cbz	r0, 8018ba8 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 8018b88:	b134      	cbz	r4, 8018b98 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8018b8a:	6822      	ldr	r2, [r4, #0]
 8018b8c:	682b      	ldr	r3, [r5, #0]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d003      	beq.n	8018b9a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 8018b92:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8018b94:	2c00      	cmp	r4, #0
 8018b96:	d1f8      	bne.n	8018b8a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 8018b98:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 8018b9a:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	2101      	movs	r1, #1
      pcb = next;
 8018ba0:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 8018ba2:	f7ff ff2b 	bl	80189fc <tcp_abandon>
      pcb = next;
 8018ba6:	e7ef      	b.n	8018b88 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8018ba8:	4b03      	ldr	r3, [pc, #12]	; (8018bb8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8018baa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8018bae:	4903      	ldr	r1, [pc, #12]	; (8018bbc <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8018bb0:	4803      	ldr	r0, [pc, #12]	; (8018bc0 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8018bb2:	f008 fe17 	bl	80217e4 <iprintf>
 8018bb6:	e7e7      	b.n	8018b88 <tcp_netif_ip_addr_changed_pcblist+0x8>
 8018bb8:	0803f050 	.word	0x0803f050
 8018bbc:	0803f590 	.word	0x0803f590
 8018bc0:	08027fec 	.word	0x08027fec

08018bc4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bc4:	4b0f      	ldr	r3, [pc, #60]	; (8018c04 <tcp_kill_state+0x40>)
 8018bc6:	6819      	ldr	r1, [r3, #0]
 8018bc8:	b1d1      	cbz	r1, 8018c00 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018bca:	4b0f      	ldr	r3, [pc, #60]	; (8018c08 <tcp_kill_state+0x44>)
  inactivity = 0;
 8018bcc:	2200      	movs	r2, #0
{
 8018bce:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018bd0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8018bd2:	4614      	mov	r4, r2
 8018bd4:	e001      	b.n	8018bda <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bd6:	68c9      	ldr	r1, [r1, #12]
 8018bd8:	b159      	cbz	r1, 8018bf2 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 8018bda:	7d0b      	ldrb	r3, [r1, #20]
 8018bdc:	4283      	cmp	r3, r0
 8018bde:	d1fa      	bne.n	8018bd6 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018be0:	6a0b      	ldr	r3, [r1, #32]
 8018be2:	1aeb      	subs	r3, r5, r3
 8018be4:	4293      	cmp	r3, r2
 8018be6:	d3f6      	bcc.n	8018bd6 <tcp_kill_state+0x12>
 8018be8:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bea:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018bec:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018bee:	2900      	cmp	r1, #0
 8018bf0:	d1f3      	bne.n	8018bda <tcp_kill_state+0x16>
  if (inactive != NULL) {
 8018bf2:	b11c      	cbz	r4, 8018bfc <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 8018bf4:	4620      	mov	r0, r4
}
 8018bf6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 8018bf8:	f7ff bf00 	b.w	80189fc <tcp_abandon>
}
 8018bfc:	bc30      	pop	{r4, r5}
 8018bfe:	4770      	bx	lr
 8018c00:	4770      	bx	lr
 8018c02:	bf00      	nop
 8018c04:	200368a0 	.word	0x200368a0
 8018c08:	200368a4 	.word	0x200368a4

08018c0c <tcp_alloc>:
{
 8018c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c0e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 8018c12:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018c14:	495c      	ldr	r1, [pc, #368]	; (8018d88 <tcp_alloc+0x17c>)
 8018c16:	2002      	movs	r0, #2
 8018c18:	f7fe f9d8 	bl	8016fcc <memp_malloc_fn>
  if (pcb == NULL) {
 8018c1c:	b328      	cbz	r0, 8018c6a <tcp_alloc+0x5e>
 8018c1e:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018c20:	229c      	movs	r2, #156	; 0x9c
 8018c22:	2100      	movs	r1, #0
 8018c24:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 8018c26:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018c2a:	f007 fe69 	bl	8020900 <memset>
    pcb->tmr = tcp_ticks;
 8018c2e:	4957      	ldr	r1, [pc, #348]	; (8018d8c <tcp_alloc+0x180>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8018c30:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 8018c32:	4a57      	ldr	r2, [pc, #348]	; (8018d90 <tcp_alloc+0x184>)
    pcb->tmr = tcp_ticks;
 8018c34:	6808      	ldr	r0, [r1, #0]
    pcb->ttl = TCP_TTL;
 8018c36:	21ff      	movs	r1, #255	; 0xff
    pcb->last_timer = tcp_timer_ctr;
 8018c38:	7816      	ldrb	r6, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018c3a:	2206      	movs	r2, #6
    pcb->tmr = tcp_ticks;
 8018c3c:	6218      	str	r0, [r3, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018c3e:	4855      	ldr	r0, [pc, #340]	; (8018d94 <tcp_alloc+0x188>)
    pcb->prio = prio;
 8018c40:	755d      	strb	r5, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8018c42:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->rtime = -1;
 8018c46:	4d54      	ldr	r5, [pc, #336]	; (8018d98 <tcp_alloc+0x18c>)
    pcb->cwnd = 1;
 8018c48:	4c54      	ldr	r4, [pc, #336]	; (8018d9c <tcp_alloc+0x190>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8018c4a:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8018c4c:	72d9      	strb	r1, [r3, #11]
    pcb->recv = tcp_recv_null;
 8018c4e:	4854      	ldr	r0, [pc, #336]	; (8018da0 <tcp_alloc+0x194>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018c50:	4954      	ldr	r1, [pc, #336]	; (8018da4 <tcp_alloc+0x198>)
    pcb->last_timer = tcp_timer_ctr;
 8018c52:	779e      	strb	r6, [r3, #30]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8018c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8018c58:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8018c5a:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8018c5c:	649c      	str	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8018c5e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8018c62:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8018c66:	4618      	mov	r0, r3
 8018c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8018c6a:	4e4f      	ldr	r6, [pc, #316]	; (8018da8 <tcp_alloc+0x19c>)
 8018c6c:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 8018c6e:	b15c      	cbz	r4, 8018c88 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 8018c70:	4620      	mov	r0, r4
 8018c72:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8018c74:	8b43      	ldrh	r3, [r0, #26]
 8018c76:	0719      	lsls	r1, r3, #28
 8018c78:	d5f9      	bpl.n	8018c6e <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018c7a:	f023 0308 	bic.w	r3, r3, #8
 8018c7e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8018c80:	f7ff f91c 	bl	8017ebc <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 8018c84:	2c00      	cmp	r4, #0
 8018c86:	d1f3      	bne.n	8018c70 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018c88:	4b48      	ldr	r3, [pc, #288]	; (8018dac <tcp_alloc+0x1a0>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	b193      	cbz	r3, 8018cb4 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018c8e:	4a3f      	ldr	r2, [pc, #252]	; (8018d8c <tcp_alloc+0x180>)
 8018c90:	4618      	mov	r0, r3
 8018c92:	6a19      	ldr	r1, [r3, #32]
 8018c94:	6814      	ldr	r4, [r2, #0]
 8018c96:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018c98:	68db      	ldr	r3, [r3, #12]
 8018c9a:	b143      	cbz	r3, 8018cae <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018c9c:	6a1a      	ldr	r2, [r3, #32]
 8018c9e:	1aa2      	subs	r2, r4, r2
 8018ca0:	428a      	cmp	r2, r1
 8018ca2:	d3f9      	bcc.n	8018c98 <tcp_alloc+0x8c>
 8018ca4:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018ca6:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8018ca8:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d1f6      	bne.n	8018c9c <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 8018cae:	2101      	movs	r1, #1
 8018cb0:	f7ff fea4 	bl	80189fc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018cb4:	f240 7239 	movw	r2, #1849	; 0x739
 8018cb8:	4933      	ldr	r1, [pc, #204]	; (8018d88 <tcp_alloc+0x17c>)
 8018cba:	2002      	movs	r0, #2
 8018cbc:	f7fe f986 	bl	8016fcc <memp_malloc_fn>
    if (pcb == NULL) {
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	b130      	cbz	r0, 8018cd2 <tcp_alloc+0xc6>
 8018cc4:	4a3a      	ldr	r2, [pc, #232]	; (8018db0 <tcp_alloc+0x1a4>)
 8018cc6:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8018cca:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8018ccc:	3a01      	subs	r2, #1
 8018cce:	800a      	strh	r2, [r1, #0]
 8018cd0:	e7a6      	b.n	8018c20 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 8018cd2:	2009      	movs	r0, #9
 8018cd4:	f7ff ff76 	bl	8018bc4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018cd8:	f240 723f 	movw	r2, #1855	; 0x73f
 8018cdc:	492a      	ldr	r1, [pc, #168]	; (8018d88 <tcp_alloc+0x17c>)
 8018cde:	2002      	movs	r0, #2
 8018ce0:	f7fe f974 	bl	8016fcc <memp_malloc_fn>
      if (pcb == NULL) {
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	b138      	cbz	r0, 8018cf8 <tcp_alloc+0xec>
 8018ce8:	4a31      	ldr	r2, [pc, #196]	; (8018db0 <tcp_alloc+0x1a4>)
 8018cea:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8018cee:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8018cf0:	3a01      	subs	r2, #1
 8018cf2:	b292      	uxth	r2, r2
 8018cf4:	800a      	strh	r2, [r1, #0]
 8018cf6:	e7e9      	b.n	8018ccc <tcp_alloc+0xc0>
        tcp_kill_state(CLOSING);
 8018cf8:	2008      	movs	r0, #8
 8018cfa:	f7ff ff63 	bl	8018bc4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018cfe:	f240 7245 	movw	r2, #1861	; 0x745
 8018d02:	4921      	ldr	r1, [pc, #132]	; (8018d88 <tcp_alloc+0x17c>)
 8018d04:	2002      	movs	r0, #2
 8018d06:	f7fe f961 	bl	8016fcc <memp_malloc_fn>
        if (pcb == NULL) {
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	b138      	cbz	r0, 8018d1e <tcp_alloc+0x112>
 8018d0e:	4a28      	ldr	r2, [pc, #160]	; (8018db0 <tcp_alloc+0x1a4>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8018d10:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 8018d14:	880a      	ldrh	r2, [r1, #0]
 8018d16:	3a01      	subs	r2, #1
 8018d18:	b292      	uxth	r2, r2
 8018d1a:	800a      	strh	r2, [r1, #0]
 8018d1c:	e7e8      	b.n	8018cf0 <tcp_alloc+0xe4>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018d1e:	062a      	lsls	r2, r5, #24
 8018d20:	d42f      	bmi.n	8018d82 <tcp_alloc+0x176>
  if (mprio == 0) {
 8018d22:	b1ed      	cbz	r5, 8018d60 <tcp_alloc+0x154>
 8018d24:	462a      	mov	r2, r5
  mprio--;
 8018d26:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018d28:	6832      	ldr	r2, [r6, #0]
  mprio--;
 8018d2a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018d2c:	b1c2      	cbz	r2, 8018d60 <tcp_alloc+0x154>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018d2e:	4817      	ldr	r0, [pc, #92]	; (8018d8c <tcp_alloc+0x180>)
  inactivity = 0;
 8018d30:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018d32:	6806      	ldr	r6, [r0, #0]
 8018d34:	e005      	b.n	8018d42 <tcp_alloc+0x136>
 8018d36:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 8018d38:	1b37      	subs	r7, r6, r4
    if ((pcb->prio < mprio) ||
 8018d3a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 8018d3c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8018d3e:	68d2      	ldr	r2, [r2, #12]
 8018d40:	b14a      	cbz	r2, 8018d56 <tcp_alloc+0x14a>
    if ((pcb->prio < mprio) ||
 8018d42:	7d50      	ldrb	r0, [r2, #21]
 8018d44:	4281      	cmp	r1, r0
 8018d46:	d8f6      	bhi.n	8018d36 <tcp_alloc+0x12a>
 8018d48:	d1f9      	bne.n	8018d3e <tcp_alloc+0x132>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8018d4a:	6a14      	ldr	r4, [r2, #32]
 8018d4c:	eba6 0c04 	sub.w	ip, r6, r4
 8018d50:	4567      	cmp	r7, ip
 8018d52:	d8f4      	bhi.n	8018d3e <tcp_alloc+0x132>
 8018d54:	e7f0      	b.n	8018d38 <tcp_alloc+0x12c>
  if (inactive != NULL) {
 8018d56:	b11b      	cbz	r3, 8018d60 <tcp_alloc+0x154>
  tcp_abandon(pcb, 1);
 8018d58:	4618      	mov	r0, r3
 8018d5a:	2101      	movs	r1, #1
 8018d5c:	f7ff fe4e 	bl	80189fc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8018d60:	f240 724b 	movw	r2, #1867	; 0x74b
 8018d64:	4908      	ldr	r1, [pc, #32]	; (8018d88 <tcp_alloc+0x17c>)
 8018d66:	2002      	movs	r0, #2
 8018d68:	f7fe f930 	bl	8016fcc <memp_malloc_fn>
          if (pcb != NULL) {
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	2800      	cmp	r0, #0
 8018d70:	f43f af79 	beq.w	8018c66 <tcp_alloc+0x5a>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8018d74:	4a0e      	ldr	r2, [pc, #56]	; (8018db0 <tcp_alloc+0x1a4>)
 8018d76:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 8018d7a:	8801      	ldrh	r1, [r0, #0]
 8018d7c:	3901      	subs	r1, #1
 8018d7e:	8001      	strh	r1, [r0, #0]
 8018d80:	e7c6      	b.n	8018d10 <tcp_alloc+0x104>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8018d82:	227f      	movs	r2, #127	; 0x7f
 8018d84:	e7cf      	b.n	8018d26 <tcp_alloc+0x11a>
 8018d86:	bf00      	nop
 8018d88:	0803f050 	.word	0x0803f050
 8018d8c:	200368a4 	.word	0x200368a4
 8018d90:	200229bd 	.word	0x200229bd
 8018d94:	08600860 	.word	0x08600860
 8018d98:	0218ffff 	.word	0x0218ffff
 8018d9c:	04300001 	.word	0x04300001
 8018da0:	08018f85 	.word	0x08018f85
 8018da4:	006ddd00 	.word	0x006ddd00
 8018da8:	200368a0 	.word	0x200368a0
 8018dac:	200368b0 	.word	0x200368b0
 8018db0:	20036794 	.word	0x20036794

08018db4 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 8018db4:	2040      	movs	r0, #64	; 0x40
 8018db6:	f7ff bf29 	b.w	8018c0c <tcp_alloc>
 8018dba:	bf00      	nop

08018dbc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8018dbc:	2040      	movs	r0, #64	; 0x40
 8018dbe:	f7ff bf25 	b.w	8018c0c <tcp_alloc>
 8018dc2:	bf00      	nop

08018dc4 <tcp_close_shutdown>:
{
 8018dc4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018dc6:	4604      	mov	r4, r0
{
 8018dc8:	b085      	sub	sp, #20
 8018dca:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	d062      	beq.n	8018e96 <tcp_close_shutdown+0xd2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018dd0:	7d23      	ldrb	r3, [r4, #20]
 8018dd2:	b11d      	cbz	r5, 8018ddc <tcp_close_shutdown+0x18>
 8018dd4:	2b04      	cmp	r3, #4
 8018dd6:	d00c      	beq.n	8018df2 <tcp_close_shutdown+0x2e>
 8018dd8:	2b07      	cmp	r3, #7
 8018dda:	d00a      	beq.n	8018df2 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 8018ddc:	2b01      	cmp	r3, #1
 8018dde:	d062      	beq.n	8018ea6 <tcp_close_shutdown+0xe2>
 8018de0:	2b02      	cmp	r3, #2
 8018de2:	d02d      	beq.n	8018e40 <tcp_close_shutdown+0x7c>
 8018de4:	b323      	cbz	r3, 8018e30 <tcp_close_shutdown+0x6c>
      return tcp_close_shutdown_fin(pcb);
 8018de6:	4620      	mov	r0, r4
}
 8018de8:	b005      	add	sp, #20
 8018dea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 8018dee:	f7ff b865 	b.w	8017ebc <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018df2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8018df4:	2a00      	cmp	r2, #0
 8018df6:	d030      	beq.n	8018e5a <tcp_close_shutdown+0x96>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018df8:	8b63      	ldrh	r3, [r4, #26]
 8018dfa:	06db      	lsls	r3, r3, #27
 8018dfc:	d57c      	bpl.n	8018ef8 <tcp_close_shutdown+0x134>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018dfe:	8b20      	ldrh	r0, [r4, #24]
 8018e00:	1d22      	adds	r2, r4, #4
 8018e02:	8ae1      	ldrh	r1, [r4, #22]
 8018e04:	4623      	mov	r3, r4
 8018e06:	9002      	str	r0, [sp, #8]
 8018e08:	4620      	mov	r0, r4
 8018e0a:	e9cd 2100 	strd	r2, r1, [sp]
 8018e0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018e10:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8018e12:	f002 fed7 	bl	801bbc4 <tcp_rst>
      tcp_pcb_purge(pcb);
 8018e16:	4620      	mov	r0, r4
 8018e18:	f7ff fac8 	bl	80183ac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018e1c:	4a3f      	ldr	r2, [pc, #252]	; (8018f1c <tcp_close_shutdown+0x158>)
 8018e1e:	6813      	ldr	r3, [r2, #0]
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	d02a      	beq.n	8018e7a <tcp_close_shutdown+0xb6>
 8018e24:	b35b      	cbz	r3, 8018e7e <tcp_close_shutdown+0xba>
 8018e26:	68da      	ldr	r2, [r3, #12]
 8018e28:	42a2      	cmp	r2, r4
 8018e2a:	d062      	beq.n	8018ef2 <tcp_close_shutdown+0x12e>
 8018e2c:	4613      	mov	r3, r2
 8018e2e:	e7f9      	b.n	8018e24 <tcp_close_shutdown+0x60>
      if (pcb->local_port != 0) {
 8018e30:	8ae3      	ldrh	r3, [r4, #22]
 8018e32:	b9bb      	cbnz	r3, 8018e64 <tcp_close_shutdown+0xa0>
        tcp_free(pcb);
 8018e34:	4620      	mov	r0, r4
 8018e36:	f7ff f881 	bl	8017f3c <tcp_free>
}
 8018e3a:	2000      	movs	r0, #0
 8018e3c:	b005      	add	sp, #20
 8018e3e:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018e40:	4621      	mov	r1, r4
 8018e42:	4836      	ldr	r0, [pc, #216]	; (8018f1c <tcp_close_shutdown+0x158>)
 8018e44:	f7ff fd6a 	bl	801891c <tcp_pcb_remove>
 8018e48:	4b35      	ldr	r3, [pc, #212]	; (8018f20 <tcp_close_shutdown+0x15c>)
 8018e4a:	2201      	movs	r2, #1
      tcp_free(pcb);
 8018e4c:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018e4e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8018e50:	f7ff f874 	bl	8017f3c <tcp_free>
}
 8018e54:	2000      	movs	r0, #0
 8018e56:	b005      	add	sp, #20
 8018e58:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018e5a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8018e5c:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8018e60:	d0bc      	beq.n	8018ddc <tcp_close_shutdown+0x18>
 8018e62:	e7c9      	b.n	8018df8 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018e64:	4a2f      	ldr	r2, [pc, #188]	; (8018f24 <tcp_close_shutdown+0x160>)
 8018e66:	6813      	ldr	r3, [r2, #0]
 8018e68:	42a3      	cmp	r3, r4
 8018e6a:	d03d      	beq.n	8018ee8 <tcp_close_shutdown+0x124>
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d03d      	beq.n	8018eec <tcp_close_shutdown+0x128>
 8018e70:	68da      	ldr	r2, [r3, #12]
 8018e72:	42a2      	cmp	r2, r4
 8018e74:	d04f      	beq.n	8018f16 <tcp_close_shutdown+0x152>
 8018e76:	4613      	mov	r3, r2
 8018e78:	e7f8      	b.n	8018e6c <tcp_close_shutdown+0xa8>
      TCP_RMV_ACTIVE(pcb);
 8018e7a:	68e3      	ldr	r3, [r4, #12]
 8018e7c:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8018e7e:	4b2a      	ldr	r3, [pc, #168]	; (8018f28 <tcp_close_shutdown+0x164>)
      TCP_RMV_ACTIVE(pcb);
 8018e80:	2000      	movs	r0, #0
 8018e82:	4a27      	ldr	r2, [pc, #156]	; (8018f20 <tcp_close_shutdown+0x15c>)
 8018e84:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 8018e86:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 8018e88:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 8018e8a:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 8018e8c:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 8018e8e:	d1d1      	bne.n	8018e34 <tcp_close_shutdown+0x70>
        tcp_trigger_input_pcb_close();
 8018e90:	f001 fed2 	bl	801ac38 <tcp_trigger_input_pcb_close>
 8018e94:	e7d1      	b.n	8018e3a <tcp_close_shutdown+0x76>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018e96:	4b25      	ldr	r3, [pc, #148]	; (8018f2c <tcp_close_shutdown+0x168>)
 8018e98:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018e9c:	4924      	ldr	r1, [pc, #144]	; (8018f30 <tcp_close_shutdown+0x16c>)
 8018e9e:	4825      	ldr	r0, [pc, #148]	; (8018f34 <tcp_close_shutdown+0x170>)
 8018ea0:	f008 fca0 	bl	80217e4 <iprintf>
 8018ea4:	e794      	b.n	8018dd0 <tcp_close_shutdown+0xc>
 8018ea6:	4924      	ldr	r1, [pc, #144]	; (8018f38 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 8018ea8:	2000      	movs	r0, #0
  switch (pcb->state) {
 8018eaa:	4b1e      	ldr	r3, [pc, #120]	; (8018f24 <tcp_close_shutdown+0x160>)
 8018eac:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018eb0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018eb2:	b133      	cbz	r3, 8018ec2 <tcp_close_shutdown+0xfe>
    if (pcb->listener == lpcb) {
 8018eb4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8018eb6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8018eb8:	bf08      	it	eq
 8018eba:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d1f8      	bne.n	8018eb4 <tcp_close_shutdown+0xf0>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018ec2:	428d      	cmp	r5, r1
 8018ec4:	d002      	beq.n	8018ecc <tcp_close_shutdown+0x108>
 8018ec6:	f851 3b04 	ldr.w	r3, [r1], #4
 8018eca:	e7f1      	b.n	8018eb0 <tcp_close_shutdown+0xec>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8018ecc:	4621      	mov	r1, r4
 8018ece:	481b      	ldr	r0, [pc, #108]	; (8018f3c <tcp_close_shutdown+0x178>)
 8018ed0:	f7ff fd24 	bl	801891c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018ed4:	7d23      	ldrb	r3, [r4, #20]
 8018ed6:	2b01      	cmp	r3, #1
 8018ed8:	d016      	beq.n	8018f08 <tcp_close_shutdown+0x144>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018eda:	4621      	mov	r1, r4
 8018edc:	2003      	movs	r0, #3
 8018ede:	f7fe f899 	bl	8017014 <memp_free>
}
 8018ee2:	2000      	movs	r0, #0
 8018ee4:	b005      	add	sp, #20
 8018ee6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018ee8:	68e3      	ldr	r3, [r4, #12]
 8018eea:	6013      	str	r3, [r2, #0]
 8018eec:	2300      	movs	r3, #0
 8018eee:	60e3      	str	r3, [r4, #12]
 8018ef0:	e7a0      	b.n	8018e34 <tcp_close_shutdown+0x70>
      TCP_RMV_ACTIVE(pcb);
 8018ef2:	68e2      	ldr	r2, [r4, #12]
 8018ef4:	60da      	str	r2, [r3, #12]
 8018ef6:	e7c2      	b.n	8018e7e <tcp_close_shutdown+0xba>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018ef8:	4b0c      	ldr	r3, [pc, #48]	; (8018f2c <tcp_close_shutdown+0x168>)
 8018efa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018efe:	4910      	ldr	r1, [pc, #64]	; (8018f40 <tcp_close_shutdown+0x17c>)
 8018f00:	480c      	ldr	r0, [pc, #48]	; (8018f34 <tcp_close_shutdown+0x170>)
 8018f02:	f008 fc6f 	bl	80217e4 <iprintf>
 8018f06:	e77a      	b.n	8018dfe <tcp_close_shutdown+0x3a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018f08:	4b08      	ldr	r3, [pc, #32]	; (8018f2c <tcp_close_shutdown+0x168>)
 8018f0a:	22df      	movs	r2, #223	; 0xdf
 8018f0c:	490d      	ldr	r1, [pc, #52]	; (8018f44 <tcp_close_shutdown+0x180>)
 8018f0e:	4809      	ldr	r0, [pc, #36]	; (8018f34 <tcp_close_shutdown+0x170>)
 8018f10:	f008 fc68 	bl	80217e4 <iprintf>
 8018f14:	e7e1      	b.n	8018eda <tcp_close_shutdown+0x116>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018f16:	68e2      	ldr	r2, [r4, #12]
 8018f18:	60da      	str	r2, [r3, #12]
 8018f1a:	e7e7      	b.n	8018eec <tcp_close_shutdown+0x128>
 8018f1c:	200368a0 	.word	0x200368a0
 8018f20:	2003689c 	.word	0x2003689c
 8018f24:	200368ac 	.word	0x200368ac
 8018f28:	200368b4 	.word	0x200368b4
 8018f2c:	0803f050 	.word	0x0803f050
 8018f30:	0803f5c4 	.word	0x0803f5c4
 8018f34:	08027fec 	.word	0x08027fec
 8018f38:	0803f73c 	.word	0x0803f73c
 8018f3c:	200368a8 	.word	0x200368a8
 8018f40:	0803f5e4 	.word	0x0803f5e4
 8018f44:	0803f600 	.word	0x0803f600

08018f48 <tcp_close>:
{
 8018f48:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018f4a:	b158      	cbz	r0, 8018f64 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 8018f4c:	7d03      	ldrb	r3, [r0, #20]
 8018f4e:	2b01      	cmp	r3, #1
 8018f50:	d003      	beq.n	8018f5a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8018f52:	8b43      	ldrh	r3, [r0, #26]
 8018f54:	f043 0310 	orr.w	r3, r3, #16
 8018f58:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8018f5a:	2101      	movs	r1, #1
}
 8018f5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 8018f60:	f7ff bf30 	b.w	8018dc4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8018f64:	4b04      	ldr	r3, [pc, #16]	; (8018f78 <tcp_close+0x30>)
 8018f66:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8018f6a:	4904      	ldr	r1, [pc, #16]	; (8018f7c <tcp_close+0x34>)
 8018f6c:	4804      	ldr	r0, [pc, #16]	; (8018f80 <tcp_close+0x38>)
 8018f6e:	f008 fc39 	bl	80217e4 <iprintf>
}
 8018f72:	f06f 000f 	mvn.w	r0, #15
 8018f76:	bd08      	pop	{r3, pc}
 8018f78:	0803f050 	.word	0x0803f050
 8018f7c:	0803f61c 	.word	0x0803f61c
 8018f80:	08027fec 	.word	0x08027fec

08018f84 <tcp_recv_null>:
{
 8018f84:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018f86:	b189      	cbz	r1, 8018fac <tcp_recv_null+0x28>
  if (p != NULL) {
 8018f88:	4614      	mov	r4, r2
 8018f8a:	4608      	mov	r0, r1
 8018f8c:	b13a      	cbz	r2, 8018f9e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 8018f8e:	8911      	ldrh	r1, [r2, #8]
 8018f90:	f7ff f8fe 	bl	8018190 <tcp_recved>
    pbuf_free(p);
 8018f94:	4620      	mov	r0, r4
 8018f96:	f7fe fb0d 	bl	80175b4 <pbuf_free>
  return ERR_OK;
 8018f9a:	2000      	movs	r0, #0
}
 8018f9c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8018f9e:	b10b      	cbz	r3, 8018fa4 <tcp_recv_null+0x20>
  return ERR_OK;
 8018fa0:	4610      	mov	r0, r2
}
 8018fa2:	bd10      	pop	{r4, pc}
 8018fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8018fa8:	f7ff bfce 	b.w	8018f48 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fac:	4b04      	ldr	r3, [pc, #16]	; (8018fc0 <tcp_recv_null+0x3c>)
 8018fae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018fb2:	4904      	ldr	r1, [pc, #16]	; (8018fc4 <tcp_recv_null+0x40>)
 8018fb4:	4804      	ldr	r0, [pc, #16]	; (8018fc8 <tcp_recv_null+0x44>)
 8018fb6:	f008 fc15 	bl	80217e4 <iprintf>
 8018fba:	f06f 000f 	mvn.w	r0, #15
}
 8018fbe:	bd10      	pop	{r4, pc}
 8018fc0:	0803f050 	.word	0x0803f050
 8018fc4:	0803f634 	.word	0x0803f634
 8018fc8:	08027fec 	.word	0x08027fec

08018fcc <tcp_process_refused_data>:
{
 8018fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8018fce:	2800      	cmp	r0, #0
 8018fd0:	d035      	beq.n	801903e <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 8018fd2:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 8018fd4:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018fd6:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8018fda:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8018fdc:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8018fde:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018fe0:	b31d      	cbz	r5, 801902a <tcp_process_refused_data+0x5e>
 8018fe2:	4601      	mov	r1, r0
 8018fe4:	4632      	mov	r2, r6
 8018fe6:	6900      	ldr	r0, [r0, #16]
 8018fe8:	47a8      	blx	r5
 8018fea:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8018fec:	b135      	cbz	r5, 8018ffc <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 8018fee:	350d      	adds	r5, #13
 8018ff0:	d017      	beq.n	8019022 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 8018ff2:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 8018ff6:	67a6      	str	r6, [r4, #120]	; 0x78
}
 8018ff8:	4628      	mov	r0, r5
 8018ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018ffc:	06bb      	lsls	r3, r7, #26
 8018ffe:	d5fb      	bpl.n	8018ff8 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019000:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019002:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019006:	d001      	beq.n	801900c <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 8019008:	3301      	adds	r3, #1
 801900a:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801900c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8019010:	2e00      	cmp	r6, #0
 8019012:	d0f1      	beq.n	8018ff8 <tcp_process_refused_data+0x2c>
 8019014:	2300      	movs	r3, #0
 8019016:	4621      	mov	r1, r4
 8019018:	6920      	ldr	r0, [r4, #16]
 801901a:	461a      	mov	r2, r3
 801901c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 801901e:	300d      	adds	r0, #13
 8019020:	d1ea      	bne.n	8018ff8 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 8019022:	f06f 050c 	mvn.w	r5, #12
}
 8019026:	4628      	mov	r0, r5
 8019028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801902a:	462b      	mov	r3, r5
 801902c:	4628      	mov	r0, r5
 801902e:	4632      	mov	r2, r6
 8019030:	4621      	mov	r1, r4
 8019032:	f7ff ffa7 	bl	8018f84 <tcp_recv_null>
 8019036:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8019038:	2d00      	cmp	r5, #0
 801903a:	d1d8      	bne.n	8018fee <tcp_process_refused_data+0x22>
 801903c:	e7de      	b.n	8018ffc <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801903e:	4b05      	ldr	r3, [pc, #20]	; (8019054 <tcp_process_refused_data+0x88>)
 8019040:	f240 6209 	movw	r2, #1545	; 0x609
 8019044:	4904      	ldr	r1, [pc, #16]	; (8019058 <tcp_process_refused_data+0x8c>)
 8019046:	f06f 050f 	mvn.w	r5, #15
 801904a:	4804      	ldr	r0, [pc, #16]	; (801905c <tcp_process_refused_data+0x90>)
 801904c:	f008 fbca 	bl	80217e4 <iprintf>
 8019050:	e7d2      	b.n	8018ff8 <tcp_process_refused_data+0x2c>
 8019052:	bf00      	nop
 8019054:	0803f050 	.word	0x0803f050
 8019058:	0803f650 	.word	0x0803f650
 801905c:	08027fec 	.word	0x08027fec

08019060 <tcp_fasttmr>:
{
 8019060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8019064:	4d1c      	ldr	r5, [pc, #112]	; (80190d8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 8019066:	2700      	movs	r7, #0
 8019068:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80190e0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801906c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801906e:	4e1b      	ldr	r6, [pc, #108]	; (80190dc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8019070:	3301      	adds	r3, #1
 8019072:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8019074:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8019078:	b1bc      	cbz	r4, 80190aa <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801907a:	782a      	ldrb	r2, [r5, #0]
 801907c:	7fa3      	ldrb	r3, [r4, #30]
 801907e:	4293      	cmp	r3, r2
 8019080:	d015      	beq.n	80190ae <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 8019082:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 8019084:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8019086:	07d9      	lsls	r1, r3, #31
 8019088:	d41a      	bmi.n	80190c0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801908a:	071a      	lsls	r2, r3, #28
 801908c:	d411      	bmi.n	80190b2 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801908e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 8019090:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8019094:	b133      	cbz	r3, 80190a4 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 8019096:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8019098:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801909a:	f7ff ff97 	bl	8018fcc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801909e:	7833      	ldrb	r3, [r6, #0]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d1e7      	bne.n	8019074 <tcp_fasttmr+0x14>
      pcb = next;
 80190a4:	464c      	mov	r4, r9
  while (pcb != NULL) {
 80190a6:	2c00      	cmp	r4, #0
 80190a8:	d1e7      	bne.n	801907a <tcp_fasttmr+0x1a>
}
 80190aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 80190ae:	68e4      	ldr	r4, [r4, #12]
 80190b0:	e7e2      	b.n	8019078 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80190b2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 80190b6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80190b8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80190ba:	f7fe feff 	bl	8017ebc <tcp_close_shutdown_fin>
 80190be:	e7e6      	b.n	801908e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 80190c0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 80190c4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80190c6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 80190c8:	f002 fdfc 	bl	801bcc4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80190cc:	8b63      	ldrh	r3, [r4, #26]
 80190ce:	f023 0303 	bic.w	r3, r3, #3
 80190d2:	b29b      	uxth	r3, r3
 80190d4:	8363      	strh	r3, [r4, #26]
 80190d6:	e7d8      	b.n	801908a <tcp_fasttmr+0x2a>
 80190d8:	200229bd 	.word	0x200229bd
 80190dc:	2003689c 	.word	0x2003689c
 80190e0:	200368a0 	.word	0x200368a0

080190e4 <tcp_tmr>:
{
 80190e4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80190e6:	f7ff ffbb 	bl	8019060 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80190ea:	4a06      	ldr	r2, [pc, #24]	; (8019104 <tcp_tmr+0x20>)
 80190ec:	7813      	ldrb	r3, [r2, #0]
 80190ee:	3301      	adds	r3, #1
 80190f0:	b2db      	uxtb	r3, r3
 80190f2:	7013      	strb	r3, [r2, #0]
 80190f4:	07db      	lsls	r3, r3, #31
 80190f6:	d400      	bmi.n	80190fa <tcp_tmr+0x16>
}
 80190f8:	bd08      	pop	{r3, pc}
 80190fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 80190fe:	f7ff b995 	b.w	801842c <tcp_slowtmr>
 8019102:	bf00      	nop
 8019104:	200229bc 	.word	0x200229bc

08019108 <tcp_next_iss>:
{
 8019108:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801910a:	b130      	cbz	r0, 801911a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801910c:	4b07      	ldr	r3, [pc, #28]	; (801912c <tcp_next_iss+0x24>)
 801910e:	4a08      	ldr	r2, [pc, #32]	; (8019130 <tcp_next_iss+0x28>)
 8019110:	6818      	ldr	r0, [r3, #0]
 8019112:	6812      	ldr	r2, [r2, #0]
 8019114:	4410      	add	r0, r2
 8019116:	6018      	str	r0, [r3, #0]
}
 8019118:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801911a:	4b06      	ldr	r3, [pc, #24]	; (8019134 <tcp_next_iss+0x2c>)
 801911c:	f640 02af 	movw	r2, #2223	; 0x8af
 8019120:	4905      	ldr	r1, [pc, #20]	; (8019138 <tcp_next_iss+0x30>)
 8019122:	4806      	ldr	r0, [pc, #24]	; (801913c <tcp_next_iss+0x34>)
 8019124:	f008 fb5e 	bl	80217e4 <iprintf>
 8019128:	e7f0      	b.n	801910c <tcp_next_iss+0x4>
 801912a:	bf00      	nop
 801912c:	200003e0 	.word	0x200003e0
 8019130:	200368a4 	.word	0x200368a4
 8019134:	0803f050 	.word	0x0803f050
 8019138:	0803f678 	.word	0x0803f678
 801913c:	08027fec 	.word	0x08027fec

08019140 <tcp_eff_send_mss_netif>:
{
 8019140:	b538      	push	{r3, r4, r5, lr}
 8019142:	4605      	mov	r5, r0
 8019144:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019146:	b172      	cbz	r2, 8019166 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 8019148:	b144      	cbz	r4, 801915c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801914a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801914c:	b133      	cbz	r3, 801915c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801914e:	2b28      	cmp	r3, #40	; 0x28
 8019150:	d906      	bls.n	8019160 <tcp_eff_send_mss_netif+0x20>
 8019152:	3b28      	subs	r3, #40	; 0x28
 8019154:	b29b      	uxth	r3, r3
 8019156:	429d      	cmp	r5, r3
 8019158:	bf28      	it	cs
 801915a:	461d      	movcs	r5, r3
}
 801915c:	4628      	mov	r0, r5
 801915e:	bd38      	pop	{r3, r4, r5, pc}
 8019160:	2500      	movs	r5, #0
 8019162:	4628      	mov	r0, r5
 8019164:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8019166:	4b04      	ldr	r3, [pc, #16]	; (8019178 <tcp_eff_send_mss_netif+0x38>)
 8019168:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801916c:	4903      	ldr	r1, [pc, #12]	; (801917c <tcp_eff_send_mss_netif+0x3c>)
 801916e:	4804      	ldr	r0, [pc, #16]	; (8019180 <tcp_eff_send_mss_netif+0x40>)
 8019170:	f008 fb38 	bl	80217e4 <iprintf>
 8019174:	e7e8      	b.n	8019148 <tcp_eff_send_mss_netif+0x8>
 8019176:	bf00      	nop
 8019178:	0803f050 	.word	0x0803f050
 801917c:	0803f694 	.word	0x0803f694
 8019180:	08027fec 	.word	0x08027fec

08019184 <tcp_connect>:
{
 8019184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019186:	2800      	cmp	r0, #0
 8019188:	f000 8082 	beq.w	8019290 <tcp_connect+0x10c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801918c:	2900      	cmp	r1, #0
 801918e:	d075      	beq.n	801927c <tcp_connect+0xf8>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019190:	461e      	mov	r6, r3
 8019192:	7d03      	ldrb	r3, [r0, #20]
 8019194:	4604      	mov	r4, r0
 8019196:	2b00      	cmp	r3, #0
 8019198:	d160      	bne.n	801925c <tcp_connect+0xd8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801919a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801919c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801919e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 80191a0:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80191a2:	2800      	cmp	r0, #0
 80191a4:	d042      	beq.n	801922c <tcp_connect+0xa8>
    netif = netif_get_by_index(pcb->netif_idx);
 80191a6:	f7fe f927 	bl	80173f8 <netif_get_by_index>
 80191aa:	4605      	mov	r5, r0
  if (netif == NULL) {
 80191ac:	2d00      	cmp	r5, #0
 80191ae:	d062      	beq.n	8019276 <tcp_connect+0xf2>
  if (ip_addr_isany(&pcb->local_ip)) {
 80191b0:	6823      	ldr	r3, [r4, #0]
 80191b2:	b90b      	cbnz	r3, 80191b8 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80191b4:	686b      	ldr	r3, [r5, #4]
 80191b6:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 80191b8:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 80191ba:	b927      	cbnz	r7, 80191c6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 80191bc:	f7fe fe4a 	bl	8017e54 <tcp_new_port>
 80191c0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d054      	beq.n	8019270 <tcp_connect+0xec>
  iss = tcp_next_iss(pcb);
 80191c6:	4620      	mov	r0, r4
 80191c8:	f7ff ff9e 	bl	8019108 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 80191cc:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 80191ce:	1e42      	subs	r2, r0, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80191d0:	4629      	mov	r1, r5
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80191d2:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 80192c4 <tcp_connect+0x140>
  pcb->snd_wnd = TCP_WND;
 80191d6:	f44f 6506 	mov.w	r5, #2144	; 0x860
  pcb->snd_nxt = iss;
 80191da:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->mss = INITIAL_MSS;
 80191dc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 80191e0:	6263      	str	r3, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80191e2:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->lastack = iss - 1;
 80191e4:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80191e6:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
  pcb->snd_wnd = TCP_WND;
 80191ea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 80191ee:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->snd_lbb = iss - 1;
 80191f0:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80191f4:	1d22      	adds	r2, r4, #4
 80191f6:	f7ff ffa3 	bl	8019140 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 80191fa:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80191fc:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80191fe:	2102      	movs	r1, #2
 8019200:	4620      	mov	r0, r4
  pcb->connected = connected;
 8019202:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 8019206:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801920a:	f002 fb35 	bl	801b878 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801920e:	4605      	mov	r5, r0
 8019210:	b9f8      	cbnz	r0, 8019252 <tcp_connect+0xce>
    pcb->state = SYN_SENT;
 8019212:	2302      	movs	r3, #2
 8019214:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8019216:	b187      	cbz	r7, 801923a <tcp_connect+0xb6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019218:	4a22      	ldr	r2, [pc, #136]	; (80192a4 <tcp_connect+0x120>)
 801921a:	6813      	ldr	r3, [r2, #0]
 801921c:	42a3      	cmp	r3, r4
 801921e:	d00a      	beq.n	8019236 <tcp_connect+0xb2>
 8019220:	b15b      	cbz	r3, 801923a <tcp_connect+0xb6>
 8019222:	68da      	ldr	r2, [r3, #12]
 8019224:	42a2      	cmp	r2, r4
 8019226:	d016      	beq.n	8019256 <tcp_connect+0xd2>
 8019228:	4613      	mov	r3, r2
 801922a:	e7f9      	b.n	8019220 <tcp_connect+0x9c>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801922c:	1d20      	adds	r0, r4, #4
 801922e:	f005 fe87 	bl	801ef40 <ip4_route>
 8019232:	4605      	mov	r5, r0
 8019234:	e7ba      	b.n	80191ac <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019236:	68e3      	ldr	r3, [r4, #12]
 8019238:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 801923a:	4b1b      	ldr	r3, [pc, #108]	; (80192a8 <tcp_connect+0x124>)
 801923c:	681a      	ldr	r2, [r3, #0]
 801923e:	601c      	str	r4, [r3, #0]
 8019240:	60e2      	str	r2, [r4, #12]
 8019242:	f003 f873 	bl	801c32c <tcp_timer_needed>
 8019246:	4b19      	ldr	r3, [pc, #100]	; (80192ac <tcp_connect+0x128>)
 8019248:	2201      	movs	r2, #1
    tcp_output(pcb);
 801924a:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801924c:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801924e:	f002 fd39 	bl	801bcc4 <tcp_output>
}
 8019252:	4628      	mov	r0, r5
 8019254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019256:	68e2      	ldr	r2, [r4, #12]
 8019258:	60da      	str	r2, [r3, #12]
 801925a:	e7ee      	b.n	801923a <tcp_connect+0xb6>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801925c:	4b14      	ldr	r3, [pc, #80]	; (80192b0 <tcp_connect+0x12c>)
 801925e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019262:	4914      	ldr	r1, [pc, #80]	; (80192b4 <tcp_connect+0x130>)
 8019264:	f06f 0509 	mvn.w	r5, #9
 8019268:	4813      	ldr	r0, [pc, #76]	; (80192b8 <tcp_connect+0x134>)
 801926a:	f008 fabb 	bl	80217e4 <iprintf>
 801926e:	e7f0      	b.n	8019252 <tcp_connect+0xce>
      return ERR_BUF;
 8019270:	f06f 0501 	mvn.w	r5, #1
 8019274:	e7ed      	b.n	8019252 <tcp_connect+0xce>
    return ERR_RTE;
 8019276:	f06f 0503 	mvn.w	r5, #3
 801927a:	e7ea      	b.n	8019252 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801927c:	4b0c      	ldr	r3, [pc, #48]	; (80192b0 <tcp_connect+0x12c>)
 801927e:	f240 4236 	movw	r2, #1078	; 0x436
 8019282:	490e      	ldr	r1, [pc, #56]	; (80192bc <tcp_connect+0x138>)
 8019284:	f06f 050f 	mvn.w	r5, #15
 8019288:	480b      	ldr	r0, [pc, #44]	; (80192b8 <tcp_connect+0x134>)
 801928a:	f008 faab 	bl	80217e4 <iprintf>
 801928e:	e7e0      	b.n	8019252 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019290:	4b07      	ldr	r3, [pc, #28]	; (80192b0 <tcp_connect+0x12c>)
 8019292:	f240 4235 	movw	r2, #1077	; 0x435
 8019296:	490a      	ldr	r1, [pc, #40]	; (80192c0 <tcp_connect+0x13c>)
 8019298:	f06f 050f 	mvn.w	r5, #15
 801929c:	4806      	ldr	r0, [pc, #24]	; (80192b8 <tcp_connect+0x134>)
 801929e:	f008 faa1 	bl	80217e4 <iprintf>
 80192a2:	e7d6      	b.n	8019252 <tcp_connect+0xce>
 80192a4:	200368ac 	.word	0x200368ac
 80192a8:	200368a0 	.word	0x200368a0
 80192ac:	2003689c 	.word	0x2003689c
 80192b0:	0803f050 	.word	0x0803f050
 80192b4:	0803f6f4 	.word	0x0803f6f4
 80192b8:	08027fec 	.word	0x08027fec
 80192bc:	0803f6d8 	.word	0x0803f6d8
 80192c0:	0803f6bc 	.word	0x0803f6bc
 80192c4:	08600860 	.word	0x08600860

080192c8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 80192c8:	b308      	cbz	r0, 801930e <tcp_netif_ip_addr_changed+0x46>
{
 80192ca:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 80192cc:	6803      	ldr	r3, [r0, #0]
 80192ce:	4604      	mov	r4, r0
 80192d0:	b903      	cbnz	r3, 80192d4 <tcp_netif_ip_addr_changed+0xc>
}
 80192d2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80192d4:	4b0e      	ldr	r3, [pc, #56]	; (8019310 <tcp_netif_ip_addr_changed+0x48>)
 80192d6:	460d      	mov	r5, r1
 80192d8:	6819      	ldr	r1, [r3, #0]
 80192da:	f7ff fc51 	bl	8018b80 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80192de:	4b0d      	ldr	r3, [pc, #52]	; (8019314 <tcp_netif_ip_addr_changed+0x4c>)
 80192e0:	4620      	mov	r0, r4
 80192e2:	6819      	ldr	r1, [r3, #0]
 80192e4:	f7ff fc4c 	bl	8018b80 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80192e8:	2d00      	cmp	r5, #0
 80192ea:	d0f2      	beq.n	80192d2 <tcp_netif_ip_addr_changed+0xa>
 80192ec:	682b      	ldr	r3, [r5, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d0ef      	beq.n	80192d2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80192f2:	4b09      	ldr	r3, [pc, #36]	; (8019318 <tcp_netif_ip_addr_changed+0x50>)
 80192f4:	681b      	ldr	r3, [r3, #0]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d0eb      	beq.n	80192d2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80192fa:	6819      	ldr	r1, [r3, #0]
 80192fc:	6822      	ldr	r2, [r4, #0]
 80192fe:	4291      	cmp	r1, r2
 8019300:	d101      	bne.n	8019306 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8019302:	682a      	ldr	r2, [r5, #0]
 8019304:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d1f6      	bne.n	80192fa <tcp_netif_ip_addr_changed+0x32>
}
 801930c:	bd38      	pop	{r3, r4, r5, pc}
 801930e:	4770      	bx	lr
 8019310:	200368a0 	.word	0x200368a0
 8019314:	200368ac 	.word	0x200368ac
 8019318:	200368a8 	.word	0x200368a8

0801931c <tcp_free_ooseq>:
{
 801931c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->ooseq) {
 801931e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8019320:	b13c      	cbz	r4, 8019332 <tcp_free_ooseq+0x16>
 8019322:	4605      	mov	r5, r0
    struct tcp_seg *next = seg->next;
 8019324:	4620      	mov	r0, r4
 8019326:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019328:	f7fe ff6c 	bl	8018204 <tcp_seg_free>
  while (seg != NULL) {
 801932c:	2c00      	cmp	r4, #0
 801932e:	d1f9      	bne.n	8019324 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 8019330:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019332:	bd38      	pop	{r3, r4, r5, pc}

08019334 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019338:	4606      	mov	r6, r0
 801933a:	2800      	cmp	r0, #0
 801933c:	f000 8082 	beq.w	8019444 <tcp_parseopt+0x110>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019340:	4b4b      	ldr	r3, [pc, #300]	; (8019470 <tcp_parseopt+0x13c>)
 8019342:	8818      	ldrh	r0, [r3, #0]
 8019344:	2800      	cmp	r0, #0
 8019346:	d039      	beq.n	80193bc <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019348:	4a4a      	ldr	r2, [pc, #296]	; (8019474 <tcp_parseopt+0x140>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801934a:	2300      	movs	r3, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801934c:	4d4a      	ldr	r5, [pc, #296]	; (8019478 <tcp_parseopt+0x144>)
 801934e:	8817      	ldrh	r7, [r2, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019350:	4619      	mov	r1, r3
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019352:	4c4a      	ldr	r4, [pc, #296]	; (801947c <tcp_parseopt+0x148>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019354:	461a      	mov	r2, r3
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019356:	fa5f f887 	uxtb.w	r8, r7
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801935a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801948c <tcp_parseopt+0x158>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801935e:	682d      	ldr	r5, [r5, #0]
    return tcphdr_opt2[idx];
 8019360:	ea6f 0e08 	mvn.w	lr, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019364:	f8d4 c000 	ldr.w	ip, [r4]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019368:	f8a9 3000 	strh.w	r3, [r9]
 801936c:	f102 0414 	add.w	r4, r2, #20
 8019370:	4464      	add	r4, ip
 8019372:	4290      	cmp	r0, r2
  u16_t optidx = tcp_optidx++;
 8019374:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019378:	d91d      	bls.n	80193b6 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 801937a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801937c:	b1ad      	cbz	r5, 80193aa <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 801937e:	eb0e 0103 	add.w	r1, lr, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019382:	4297      	cmp	r7, r2
    return tcphdr_opt2[idx];
 8019384:	b2c9      	uxtb	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019386:	d810      	bhi.n	80193aa <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 8019388:	5c69      	ldrb	r1, [r5, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801938a:	2901      	cmp	r1, #1
 801938c:	d010      	beq.n	80193b0 <tcp_parseopt+0x7c>
 801938e:	2902      	cmp	r1, #2
 8019390:	d01a      	beq.n	80193c8 <tcp_parseopt+0x94>
 8019392:	b1a9      	cbz	r1, 80193c0 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019394:	b10d      	cbz	r5, 801939a <tcp_parseopt+0x66>
 8019396:	42bb      	cmp	r3, r7
 8019398:	d244      	bcs.n	8019424 <tcp_parseopt+0xf0>
    return opts[optidx];
 801939a:	4463      	add	r3, ip
 801939c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801939e:	2b01      	cmp	r3, #1
 80193a0:	d961      	bls.n	8019466 <tcp_parseopt+0x132>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80193a2:	441a      	add	r2, r3
 80193a4:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80193a6:	2101      	movs	r1, #1
 80193a8:	e7e0      	b.n	801936c <tcp_parseopt+0x38>
    return opts[optidx];
 80193aa:	7821      	ldrb	r1, [r4, #0]
      switch (opt) {
 80193ac:	2901      	cmp	r1, #1
 80193ae:	d1ee      	bne.n	801938e <tcp_parseopt+0x5a>
 80193b0:	3401      	adds	r4, #1
  u16_t optidx = tcp_optidx++;
 80193b2:	461a      	mov	r2, r3
 80193b4:	e7dd      	b.n	8019372 <tcp_parseopt+0x3e>
 80193b6:	b109      	cbz	r1, 80193bc <tcp_parseopt+0x88>
 80193b8:	f8a9 2000 	strh.w	r2, [r9]
      }
    }
  }
}
 80193bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193c0:	f8a9 3000 	strh.w	r3, [r9]
 80193c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 80193c8:	1c91      	adds	r1, r2, #2
 80193ca:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193cc:	b10d      	cbz	r5, 80193d2 <tcp_parseopt+0x9e>
 80193ce:	42bb      	cmp	r3, r7
 80193d0:	d223      	bcs.n	801941a <tcp_parseopt+0xe6>
    return opts[optidx];
 80193d2:	4463      	add	r3, ip
 80193d4:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80193d6:	2b04      	cmp	r3, #4
 80193d8:	d142      	bne.n	8019460 <tcp_parseopt+0x12c>
 80193da:	1c4b      	adds	r3, r1, #1
 80193dc:	4283      	cmp	r3, r0
 80193de:	da3f      	bge.n	8019460 <tcp_parseopt+0x12c>
  u16_t optidx = tcp_optidx++;
 80193e0:	1cd3      	adds	r3, r2, #3
 80193e2:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193e4:	2d00      	cmp	r5, #0
 80193e6:	d035      	beq.n	8019454 <tcp_parseopt+0x120>
 80193e8:	428f      	cmp	r7, r1
 80193ea:	d820      	bhi.n	801942e <tcp_parseopt+0xfa>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80193ec:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 80193f0:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193f2:	429f      	cmp	r7, r3
    return tcphdr_opt2[idx];
 80193f4:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 80193f6:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80193f8:	5c6c      	ldrb	r4, [r5, r1]
 80193fa:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193fe:	d81e      	bhi.n	801943e <tcp_parseopt+0x10a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019400:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 8019404:	b2c9      	uxtb	r1, r1
 8019406:	5c6b      	ldrb	r3, [r5, r1]
          mss |= tcp_get_next_optbyte();
 8019408:	4323      	orrs	r3, r4
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801940a:	1e59      	subs	r1, r3, #1
 801940c:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 8019410:	bf28      	it	cs
 8019412:	f44f 7306 	movcs.w	r3, #536	; 0x218
 8019416:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 8019418:	e7c5      	b.n	80193a6 <tcp_parseopt+0x72>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801941a:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801941e:	b2db      	uxtb	r3, r3
 8019420:	5ceb      	ldrb	r3, [r5, r3]
 8019422:	e7d8      	b.n	80193d6 <tcp_parseopt+0xa2>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019424:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 8019428:	b2db      	uxtb	r3, r3
 801942a:	5ceb      	ldrb	r3, [r5, r3]
 801942c:	e7b7      	b.n	801939e <tcp_parseopt+0x6a>
    return opts[optidx];
 801942e:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 8019430:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019432:	429f      	cmp	r7, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019434:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 8019436:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019438:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801943c:	d9e0      	bls.n	8019400 <tcp_parseopt+0xcc>
    return opts[optidx];
 801943e:	4463      	add	r3, ip
 8019440:	7d1b      	ldrb	r3, [r3, #20]
 8019442:	e7e1      	b.n	8019408 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019444:	4b0e      	ldr	r3, [pc, #56]	; (8019480 <tcp_parseopt+0x14c>)
 8019446:	f240 727d 	movw	r2, #1917	; 0x77d
 801944a:	490e      	ldr	r1, [pc, #56]	; (8019484 <tcp_parseopt+0x150>)
 801944c:	480e      	ldr	r0, [pc, #56]	; (8019488 <tcp_parseopt+0x154>)
 801944e:	f008 f9c9 	bl	80217e4 <iprintf>
 8019452:	e775      	b.n	8019340 <tcp_parseopt+0xc>
    return opts[optidx];
 8019454:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 8019456:	3204      	adds	r2, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019458:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801945a:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801945c:	0224      	lsls	r4, r4, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801945e:	e7ee      	b.n	801943e <tcp_parseopt+0x10a>
 8019460:	f8a9 1000 	strh.w	r1, [r9]
 8019464:	e7aa      	b.n	80193bc <tcp_parseopt+0x88>
  u16_t optidx = tcp_optidx++;
 8019466:	3202      	adds	r2, #2
 8019468:	f8a9 2000 	strh.w	r2, [r9]
 801946c:	e7a6      	b.n	80193bc <tcp_parseopt+0x88>
 801946e:	bf00      	nop
 8019470:	200229f8 	.word	0x200229f8
 8019474:	200229f0 	.word	0x200229f0
 8019478:	200229f4 	.word	0x200229f4
 801947c:	200229ec 	.word	0x200229ec
 8019480:	0803f74c 	.word	0x0803f74c
 8019484:	0803f780 	.word	0x0803f780
 8019488:	08027fec 	.word	0x08027fec
 801948c:	200229e8 	.word	0x200229e8

08019490 <tcp_oos_insert_segment>:
{
 8019490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019492:	4605      	mov	r5, r0
{
 8019494:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019496:	2800      	cmp	r0, #0
 8019498:	d03e      	beq.n	8019518 <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801949a:	68eb      	ldr	r3, [r5, #12]
 801949c:	8998      	ldrh	r0, [r3, #12]
 801949e:	f7fc fa35 	bl	801590c <lwip_htons>
 80194a2:	07c2      	lsls	r2, r0, #31
 80194a4:	d432      	bmi.n	801950c <tcp_oos_insert_segment+0x7c>
 80194a6:	4e20      	ldr	r6, [pc, #128]	; (8019528 <tcp_oos_insert_segment+0x98>)
 80194a8:	e005      	b.n	80194b6 <tcp_oos_insert_segment+0x26>
      next = next->next;
 80194aa:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 80194ac:	4620      	mov	r0, r4
 80194ae:	f7fe fea9 	bl	8018204 <tcp_seg_free>
    while (next &&
 80194b2:	463c      	mov	r4, r7
 80194b4:	b1ef      	cbz	r7, 80194f2 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80194b6:	68e1      	ldr	r1, [r4, #12]
 80194b8:	8923      	ldrh	r3, [r4, #8]
 80194ba:	6848      	ldr	r0, [r1, #4]
 80194bc:	6837      	ldr	r7, [r6, #0]
 80194be:	892a      	ldrh	r2, [r5, #8]
 80194c0:	4403      	add	r3, r0
 80194c2:	443a      	add	r2, r7
 80194c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	db15      	blt.n	80194f6 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80194ca:	8988      	ldrh	r0, [r1, #12]
 80194cc:	f7fc fa1e 	bl	801590c <lwip_htons>
 80194d0:	07c3      	lsls	r3, r0, #31
 80194d2:	d5ea      	bpl.n	80194aa <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80194d4:	68eb      	ldr	r3, [r5, #12]
 80194d6:	2001      	movs	r0, #1
 80194d8:	899f      	ldrh	r7, [r3, #12]
 80194da:	f7fc fa17 	bl	801590c <lwip_htons>
 80194de:	68eb      	ldr	r3, [r5, #12]
 80194e0:	4338      	orrs	r0, r7
      next = next->next;
 80194e2:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80194e4:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 80194e6:	4620      	mov	r0, r4
 80194e8:	f7fe fe8c 	bl	8018204 <tcp_seg_free>
    while (next &&
 80194ec:	463c      	mov	r4, r7
 80194ee:	2f00      	cmp	r7, #0
 80194f0:	d1e1      	bne.n	80194b6 <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 80194f2:	602c      	str	r4, [r5, #0]
}
 80194f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80194f6:	1a12      	subs	r2, r2, r0
    if (next &&
 80194f8:	2a00      	cmp	r2, #0
 80194fa:	ddfa      	ble.n	80194f2 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80194fc:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 80194fe:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8019500:	b289      	uxth	r1, r1
 8019502:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8019504:	f7fe f962 	bl	80177cc <pbuf_realloc>
  cseg->next = next;
 8019508:	602c      	str	r4, [r5, #0]
}
 801950a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801950c:	4620      	mov	r0, r4
    next = NULL;
 801950e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8019510:	f7fe fe86 	bl	8018220 <tcp_segs_free>
  cseg->next = next;
 8019514:	602c      	str	r4, [r5, #0]
}
 8019516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8019518:	4b04      	ldr	r3, [pc, #16]	; (801952c <tcp_oos_insert_segment+0x9c>)
 801951a:	f240 421f 	movw	r2, #1055	; 0x41f
 801951e:	4904      	ldr	r1, [pc, #16]	; (8019530 <tcp_oos_insert_segment+0xa0>)
 8019520:	4804      	ldr	r0, [pc, #16]	; (8019534 <tcp_oos_insert_segment+0xa4>)
 8019522:	f008 f95f 	bl	80217e4 <iprintf>
 8019526:	e7b8      	b.n	801949a <tcp_oos_insert_segment+0xa>
 8019528:	200229e4 	.word	0x200229e4
 801952c:	0803f74c 	.word	0x0803f74c
 8019530:	0803f79c 	.word	0x0803f79c
 8019534:	08027fec 	.word	0x08027fec

08019538 <tcp_input_delayed_close>:
{
 8019538:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801953a:	4604      	mov	r4, r0
 801953c:	b1c8      	cbz	r0, 8019572 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801953e:	4b11      	ldr	r3, [pc, #68]	; (8019584 <tcp_input_delayed_close+0x4c>)
 8019540:	781b      	ldrb	r3, [r3, #0]
 8019542:	f013 0310 	ands.w	r3, r3, #16
 8019546:	d101      	bne.n	801954c <tcp_input_delayed_close+0x14>
  return 0;
 8019548:	4618      	mov	r0, r3
}
 801954a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801954c:	8b63      	ldrh	r3, [r4, #26]
 801954e:	06db      	lsls	r3, r3, #27
 8019550:	d406      	bmi.n	8019560 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8019552:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8019556:	b11b      	cbz	r3, 8019560 <tcp_input_delayed_close+0x28>
 8019558:	f06f 010e 	mvn.w	r1, #14
 801955c:	6920      	ldr	r0, [r4, #16]
 801955e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019560:	4621      	mov	r1, r4
 8019562:	4809      	ldr	r0, [pc, #36]	; (8019588 <tcp_input_delayed_close+0x50>)
 8019564:	f7ff f9da 	bl	801891c <tcp_pcb_remove>
    tcp_free(pcb);
 8019568:	4620      	mov	r0, r4
 801956a:	f7fe fce7 	bl	8017f3c <tcp_free>
 801956e:	2001      	movs	r0, #1
}
 8019570:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8019572:	4b06      	ldr	r3, [pc, #24]	; (801958c <tcp_input_delayed_close+0x54>)
 8019574:	f240 225a 	movw	r2, #602	; 0x25a
 8019578:	4905      	ldr	r1, [pc, #20]	; (8019590 <tcp_input_delayed_close+0x58>)
 801957a:	4806      	ldr	r0, [pc, #24]	; (8019594 <tcp_input_delayed_close+0x5c>)
 801957c:	f008 f932 	bl	80217e4 <iprintf>
 8019580:	e7dd      	b.n	801953e <tcp_input_delayed_close+0x6>
 8019582:	bf00      	nop
 8019584:	200229e0 	.word	0x200229e0
 8019588:	200368a0 	.word	0x200368a0
 801958c:	0803f74c 	.word	0x0803f74c
 8019590:	0803f7c4 	.word	0x0803f7c4
 8019594:	08027fec 	.word	0x08027fec

08019598 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8019598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801959c:	b083      	sub	sp, #12
 801959e:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 80195a0:	2900      	cmp	r1, #0
 80195a2:	d03a      	beq.n	801961a <tcp_free_acked_segments.isra.0+0x82>
 80195a4:	4607      	mov	r7, r0
 80195a6:	460c      	mov	r4, r1
 80195a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8019668 <tcp_free_acked_segments.isra.0+0xd0>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80195ac:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801965c <tcp_free_acked_segments.isra.0+0xc4>
 80195b0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801966c <tcp_free_acked_segments.isra.0+0xd4>
 80195b4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8019664 <tcp_free_acked_segments.isra.0+0xcc>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80195b8:	68e3      	ldr	r3, [r4, #12]
 80195ba:	6858      	ldr	r0, [r3, #4]
 80195bc:	f7fc f9aa 	bl	8015914 <lwip_htonl>
 80195c0:	68e3      	ldr	r3, [r4, #12]
 80195c2:	4605      	mov	r5, r0
 80195c4:	8926      	ldrh	r6, [r4, #8]
 80195c6:	8998      	ldrh	r0, [r3, #12]
 80195c8:	f7fc f9a0 	bl	801590c <lwip_htons>
 80195cc:	f8d8 3000 	ldr.w	r3, [r8]
 80195d0:	f010 0003 	ands.w	r0, r0, #3
 80195d4:	eba5 0503 	sub.w	r5, r5, r3
 80195d8:	bf18      	it	ne
 80195da:	2001      	movne	r0, #1
 80195dc:	4435      	add	r5, r6
 80195de:	4428      	add	r0, r5
  while (seg_list != NULL &&
 80195e0:	2800      	cmp	r0, #0
 80195e2:	dc33      	bgt.n	801964c <tcp_free_acked_segments.isra.0+0xb4>
    seg_list = seg_list->next;
 80195e4:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 80195e8:	f7fe f948 	bl	801787c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80195ec:	883b      	ldrh	r3, [r7, #0]
    clen = pbuf_clen(next->p);
 80195ee:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80195f0:	4298      	cmp	r0, r3
 80195f2:	d822      	bhi.n	801963a <tcp_free_acked_segments.isra.0+0xa2>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80195f4:	4a18      	ldr	r2, [pc, #96]	; (8019658 <tcp_free_acked_segments.isra.0+0xc0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80195f6:	1b5d      	subs	r5, r3, r5
    tcp_seg_free(next);
 80195f8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80195fa:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80195fc:	803d      	strh	r5, [r7, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80195fe:	8923      	ldrh	r3, [r4, #8]
 8019600:	4634      	mov	r4, r6
 8019602:	440b      	add	r3, r1
 8019604:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8019606:	f7fe fdfd 	bl	8018204 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 801960a:	883b      	ldrh	r3, [r7, #0]
 801960c:	b11b      	cbz	r3, 8019616 <tcp_free_acked_segments.isra.0+0x7e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801960e:	9b01      	ldr	r3, [sp, #4]
 8019610:	ea56 0503 	orrs.w	r5, r6, r3
 8019614:	d006      	beq.n	8019624 <tcp_free_acked_segments.isra.0+0x8c>
  while (seg_list != NULL &&
 8019616:	2e00      	cmp	r6, #0
 8019618:	d1ce      	bne.n	80195b8 <tcp_free_acked_segments.isra.0+0x20>
 801961a:	2500      	movs	r5, #0
}
 801961c:	4628      	mov	r0, r5
 801961e:	b003      	add	sp, #12
 8019620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8019624:	4b0d      	ldr	r3, [pc, #52]	; (801965c <tcp_free_acked_segments.isra.0+0xc4>)
 8019626:	f240 4261 	movw	r2, #1121	; 0x461
 801962a:	490d      	ldr	r1, [pc, #52]	; (8019660 <tcp_free_acked_segments.isra.0+0xc8>)
 801962c:	480d      	ldr	r0, [pc, #52]	; (8019664 <tcp_free_acked_segments.isra.0+0xcc>)
 801962e:	f008 f8d9 	bl	80217e4 <iprintf>
}
 8019632:	4628      	mov	r0, r5
 8019634:	b003      	add	sp, #12
 8019636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801963a:	465b      	mov	r3, fp
 801963c:	f240 4257 	movw	r2, #1111	; 0x457
 8019640:	4651      	mov	r1, sl
 8019642:	4648      	mov	r0, r9
 8019644:	f008 f8ce 	bl	80217e4 <iprintf>
 8019648:	883b      	ldrh	r3, [r7, #0]
 801964a:	e7d3      	b.n	80195f4 <tcp_free_acked_segments.isra.0+0x5c>
 801964c:	4625      	mov	r5, r4
}
 801964e:	4628      	mov	r0, r5
 8019650:	b003      	add	sp, #12
 8019652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019656:	bf00      	nop
 8019658:	200229d8 	.word	0x200229d8
 801965c:	0803f74c 	.word	0x0803f74c
 8019660:	0803f814 	.word	0x0803f814
 8019664:	08027fec 	.word	0x08027fec
 8019668:	200229c0 	.word	0x200229c0
 801966c:	0803f7ec 	.word	0x0803f7ec

08019670 <tcp_receive>:
{
 8019670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019674:	4604      	mov	r4, r0
 8019676:	2800      	cmp	r0, #0
 8019678:	f000 8205 	beq.w	8019a86 <tcp_receive+0x416>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801967c:	7d23      	ldrb	r3, [r4, #20]
 801967e:	2b03      	cmp	r3, #3
 8019680:	f240 8124 	bls.w	80198cc <tcp_receive+0x25c>
  if (flags & TCP_ACK) {
 8019684:	4bc2      	ldr	r3, [pc, #776]	; (8019990 <tcp_receive+0x320>)
 8019686:	781b      	ldrb	r3, [r3, #0]
 8019688:	06dd      	lsls	r5, r3, #27
 801968a:	f100 809b 	bmi.w	80197c4 <tcp_receive+0x154>
 801968e:	4fc1      	ldr	r7, [pc, #772]	; (8019994 <tcp_receive+0x324>)
 8019690:	4ec1      	ldr	r6, [pc, #772]	; (8019998 <tcp_receive+0x328>)
 8019692:	8839      	ldrh	r1, [r7, #0]
 8019694:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8019696:	2900      	cmp	r1, #0
 8019698:	f000 8083 	beq.w	80197a2 <tcp_receive+0x132>
 801969c:	7d22      	ldrb	r2, [r4, #20]
 801969e:	2a06      	cmp	r2, #6
 80196a0:	d87f      	bhi.n	80197a2 <tcp_receive+0x132>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80196a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80196a4:	eba0 0803 	sub.w	r8, r0, r3
 80196a8:	f1b8 0f01 	cmp.w	r8, #1
 80196ac:	d405      	bmi.n	80196ba <tcp_receive+0x4a>
 80196ae:	1c42      	adds	r2, r0, #1
 80196b0:	1ad2      	subs	r2, r2, r3
 80196b2:	1a51      	subs	r1, r2, r1
 80196b4:	2900      	cmp	r1, #0
 80196b6:	f340 81f7 	ble.w	8019aa8 <tcp_receive+0x438>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80196ba:	1a1a      	subs	r2, r3, r0
 80196bc:	2a00      	cmp	r2, #0
 80196be:	f2c0 81ee 	blt.w	8019a9e <tcp_receive+0x42e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80196c2:	f103 0c01 	add.w	ip, r3, #1
 80196c6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80196c8:	ebac 0200 	sub.w	r2, ip, r0
 80196cc:	1a52      	subs	r2, r2, r1
 80196ce:	2a00      	cmp	r2, #0
 80196d0:	dc3c      	bgt.n	801974c <tcp_receive+0xdc>
      if (pcb->rcv_nxt == seqno) {
 80196d2:	4298      	cmp	r0, r3
 80196d4:	f000 8476 	beq.w	8019fc4 <tcp_receive+0x954>
        if (pcb->ooseq == NULL) {
 80196d8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80196da:	2d00      	cmp	r5, #0
 80196dc:	f000 837b 	beq.w	8019dd6 <tcp_receive+0x766>
            if (seqno == next->tcphdr->seqno) {
 80196e0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 80196e2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80196e6:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 80196ea:	6842      	ldr	r2, [r0, #4]
 80196ec:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80196ee:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 80196f2:	d01a      	beq.n	801972a <tcp_receive+0xba>
              if (prev == NULL) {
 80196f4:	f1b8 0f00 	cmp.w	r8, #0
 80196f8:	f000 8160 	beq.w	80199bc <tcp_receive+0x34c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80196fc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8019700:	6849      	ldr	r1, [r1, #4]
 8019702:	ebae 0101 	sub.w	r1, lr, r1
 8019706:	2900      	cmp	r1, #0
 8019708:	db03      	blt.n	8019712 <tcp_receive+0xa2>
 801970a:	f1b9 0f00 	cmp.w	r9, #0
 801970e:	f340 836b 	ble.w	8019de8 <tcp_receive+0x778>
              if (next->next == NULL &&
 8019712:	6829      	ldr	r1, [r5, #0]
 8019714:	46a8      	mov	r8, r5
 8019716:	2900      	cmp	r1, #0
 8019718:	f000 815c 	beq.w	80199d4 <tcp_receive+0x364>
 801971c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801971e:	68e8      	ldr	r0, [r5, #12]
 8019720:	6842      	ldr	r2, [r0, #4]
 8019722:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019724:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 8019728:	d1e4      	bne.n	80196f4 <tcp_receive+0x84>
              if (inseg.len > next->len) {
 801972a:	489c      	ldr	r0, [pc, #624]	; (801999c <tcp_receive+0x32c>)
 801972c:	892b      	ldrh	r3, [r5, #8]
 801972e:	8902      	ldrh	r2, [r0, #8]
 8019730:	429a      	cmp	r2, r3
 8019732:	d90b      	bls.n	801974c <tcp_receive+0xdc>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019734:	f7fe fd90 	bl	8018258 <tcp_seg_copy>
                if (cseg != NULL) {
 8019738:	b140      	cbz	r0, 801974c <tcp_receive+0xdc>
                  if (prev != NULL) {
 801973a:	f1b8 0f00 	cmp.w	r8, #0
 801973e:	f000 8415 	beq.w	8019f6c <tcp_receive+0x8fc>
                    prev->next = cseg;
 8019742:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8019746:	4629      	mov	r1, r5
 8019748:	f7ff fea2 	bl	8019490 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 801974c:	4620      	mov	r0, r4
}
 801974e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 8019752:	f002 ba83 	b.w	801bc5c <tcp_send_empty_ack>
      if (tcplen == 0) {
 8019756:	4f8f      	ldr	r7, [pc, #572]	; (8019994 <tcp_receive+0x324>)
 8019758:	8839      	ldrh	r1, [r7, #0]
 801975a:	2900      	cmp	r1, #0
 801975c:	f040 8104 	bne.w	8019968 <tcp_receive+0x2f8>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019760:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8019764:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8019766:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019768:	4448      	add	r0, r9
 801976a:	4560      	cmp	r0, ip
 801976c:	f040 80fc 	bne.w	8019968 <tcp_receive+0x2f8>
          if (pcb->rtime >= 0) {
 8019770:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 8019772:	0400      	lsls	r0, r0, #16
 8019774:	f100 80f8 	bmi.w	8019968 <tcp_receive+0x2f8>
 8019778:	4590      	cmp	r8, r2
 801977a:	f040 80f5 	bne.w	8019968 <tcp_receive+0x2f8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801977e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8019782:	28ff      	cmp	r0, #255	; 0xff
 8019784:	f000 8393 	beq.w	8019eae <tcp_receive+0x83e>
                ++pcb->dupacks;
 8019788:	3001      	adds	r0, #1
 801978a:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801978c:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801978e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8019792:	f200 838c 	bhi.w	8019eae <tcp_receive+0x83e>
              if (pcb->dupacks >= 3) {
 8019796:	f000 8396 	beq.w	8019ec6 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801979a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801979c:	2800      	cmp	r0, #0
 801979e:	f040 80b8 	bne.w	8019912 <tcp_receive+0x2a2>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80197a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80197a4:	1a99      	subs	r1, r3, r2
 80197a6:	2900      	cmp	r1, #0
 80197a8:	db06      	blt.n	80197b8 <tcp_receive+0x148>
 80197aa:	f1c2 0201 	rsb	r2, r2, #1
 80197ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80197b0:	1a52      	subs	r2, r2, r1
 80197b2:	4413      	add	r3, r2
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	dd03      	ble.n	80197c0 <tcp_receive+0x150>
      tcp_ack_now(pcb);
 80197b8:	8b63      	ldrh	r3, [r4, #26]
 80197ba:	f043 0302 	orr.w	r3, r3, #2
 80197be:	8363      	strh	r3, [r4, #26]
}
 80197c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197c4:	4e74      	ldr	r6, [pc, #464]	; (8019998 <tcp_receive+0x328>)
 80197c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80197c8:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80197ca:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197ce:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80197d0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197d4:	2900      	cmp	r1, #0
 80197d6:	f2c0 8081 	blt.w	80198dc <tcp_receive+0x26c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197da:	4d71      	ldr	r5, [pc, #452]	; (80199a0 <tcp_receive+0x330>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197dc:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197de:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80197e0:	f000 80c6 	beq.w	8019970 <tcp_receive+0x300>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80197e4:	4594      	cmp	ip, r2
 80197e6:	f000 80cc 	beq.w	8019982 <tcp_receive+0x312>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80197ea:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 80197ee:	eba2 0108 	sub.w	r1, r2, r8
 80197f2:	2900      	cmp	r1, #0
 80197f4:	ddaf      	ble.n	8019756 <tcp_receive+0xe6>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80197f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80197f8:	1ad3      	subs	r3, r2, r3
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	dc7e      	bgt.n	80198fc <tcp_receive+0x28c>
      if (pcb->flags & TF_INFR) {
 80197fe:	8b63      	ldrh	r3, [r4, #26]
 8019800:	0758      	lsls	r0, r3, #29
 8019802:	d509      	bpl.n	8019818 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8019804:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 8019808:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 801980c:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 801980e:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8019810:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8019814:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019818:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 801981c:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801981e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8019820:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8019822:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019824:	eb03 03e7 	add.w	r3, r3, r7, asr #3
      pcb->nrtx = 0;
 8019828:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801982c:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801982e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8019832:	d913      	bls.n	801985c <tcp_receive+0x1ec>
        if (pcb->cwnd < pcb->ssthresh) {
 8019834:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8019838:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801983a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801983e:	4293      	cmp	r3, r2
 8019840:	f200 81ca 	bhi.w	8019bd8 <tcp_receive+0x568>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019844:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8019848:	4419      	add	r1, r3
 801984a:	b289      	uxth	r1, r1
 801984c:	428b      	cmp	r3, r1
 801984e:	f200 82ac 	bhi.w	8019daa <tcp_receive+0x73a>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8019852:	428a      	cmp	r2, r1
 8019854:	f240 82ab 	bls.w	8019dae <tcp_receive+0x73e>
 8019858:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801985c:	f104 0766 	add.w	r7, r4, #102	; 0x66
 8019860:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 8019864:	4638      	mov	r0, r7
 8019866:	f7ff fe97 	bl	8019598 <tcp_free_acked_segments.isra.0>
 801986a:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801986c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801986e:	4638      	mov	r0, r7
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8019870:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8019872:	f7ff fe91 	bl	8019598 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 8019876:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->polltmr = 0;
 8019878:	2100      	movs	r1, #0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801987a:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801987c:	fab2 f382 	clz	r3, r2
      pcb->polltmr = 0;
 8019880:	7721      	strb	r1, [r4, #28]
      if (pcb->unacked == NULL) {
 8019882:	095b      	lsrs	r3, r3, #5
 8019884:	425b      	negs	r3, r3
 8019886:	8623      	strh	r3, [r4, #48]	; 0x30
      if (pcb->unsent == NULL) {
 8019888:	2800      	cmp	r0, #0
 801988a:	f000 81a2 	beq.w	8019bd2 <tcp_receive+0x562>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801988e:	4945      	ldr	r1, [pc, #276]	; (80199a4 <tcp_receive+0x334>)
 8019890:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8019894:	880f      	ldrh	r7, [r1, #0]
      if (pcb->flags & TF_RTO) {
 8019896:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8019898:	443b      	add	r3, r7
 801989a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801989e:	050b      	lsls	r3, r1, #20
 80198a0:	f140 80f9 	bpl.w	8019a96 <tcp_receive+0x426>
        if (pcb->unacked == NULL) {
 80198a4:	2a00      	cmp	r2, #0
 80198a6:	f000 81ac 	beq.w	8019c02 <tcp_receive+0x592>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80198aa:	68d3      	ldr	r3, [r2, #12]
 80198ac:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 80198ae:	6858      	ldr	r0, [r3, #4]
 80198b0:	f7fc f830 	bl	8015914 <lwip_htonl>
 80198b4:	1a38      	subs	r0, r7, r0
 80198b6:	2800      	cmp	r0, #0
 80198b8:	f300 80ed 	bgt.w	8019a96 <tcp_receive+0x426>
          tcp_clear_flags(pcb, TF_RTO);
 80198bc:	8b62      	ldrh	r2, [r4, #26]
 80198be:	4f35      	ldr	r7, [pc, #212]	; (8019994 <tcp_receive+0x324>)
 80198c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80198c4:	6833      	ldr	r3, [r6, #0]
 80198c6:	8839      	ldrh	r1, [r7, #0]
 80198c8:	8362      	strh	r2, [r4, #26]
 80198ca:	e01d      	b.n	8019908 <tcp_receive+0x298>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80198cc:	4b36      	ldr	r3, [pc, #216]	; (80199a8 <tcp_receive+0x338>)
 80198ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80198d2:	4936      	ldr	r1, [pc, #216]	; (80199ac <tcp_receive+0x33c>)
 80198d4:	4836      	ldr	r0, [pc, #216]	; (80199b0 <tcp_receive+0x340>)
 80198d6:	f007 ff85 	bl	80217e4 <iprintf>
 80198da:	e6d3      	b.n	8019684 <tcp_receive+0x14>
 80198dc:	4a35      	ldr	r2, [pc, #212]	; (80199b4 <tcp_receive+0x344>)
 80198de:	4d30      	ldr	r5, [pc, #192]	; (80199a0 <tcp_receive+0x330>)
 80198e0:	6811      	ldr	r1, [r2, #0]
 80198e2:	682a      	ldr	r2, [r5, #0]
 80198e4:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80198e6:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80198ea:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80198ee:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 80198f0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 80198f4:	bf38      	it	cc
 80198f6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 80198fa:	e776      	b.n	80197ea <tcp_receive+0x17a>
      tcp_send_empty_ack(pcb);
 80198fc:	4f25      	ldr	r7, [pc, #148]	; (8019994 <tcp_receive+0x324>)
 80198fe:	4620      	mov	r0, r4
 8019900:	f002 f9ac 	bl	801bc5c <tcp_send_empty_ack>
 8019904:	6833      	ldr	r3, [r6, #0]
 8019906:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8019908:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801990a:	2800      	cmp	r0, #0
 801990c:	f43f aec3 	beq.w	8019696 <tcp_receive+0x26>
 8019910:	682a      	ldr	r2, [r5, #0]
 8019912:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8019914:	1aaa      	subs	r2, r5, r2
 8019916:	2a00      	cmp	r2, #0
 8019918:	f6bf aebd 	bge.w	8019696 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801991c:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019920:	b280      	uxth	r0, r0
 8019922:	4a25      	ldr	r2, [pc, #148]	; (80199b8 <tcp_receive+0x348>)
      m = (s16_t)(m - (pcb->sa >> 3));
 8019924:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8019928:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801992c:	ebae 020c 	sub.w	r2, lr, ip
 8019930:	1a12      	subs	r2, r2, r0
 8019932:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 8019934:	4415      	add	r5, r2
      if (m < 0) {
 8019936:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801993a:	b22d      	sxth	r5, r5
 801993c:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801993e:	d003      	beq.n	8019948 <tcp_receive+0x2d8>
        m = (s16_t) - m;
 8019940:	ebac 0c0e 	sub.w	ip, ip, lr
 8019944:	4460      	add	r0, ip
 8019946:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 8019948:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 801994c:	f04f 0c00 	mov.w	ip, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 8019950:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
      pcb->rttest = 0;
 8019954:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
      pcb->sv = (s16_t)(pcb->sv + m);
 8019958:	4410      	add	r0, r2
 801995a:	b280      	uxth	r0, r0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801995c:	eb00 02e5 	add.w	r2, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 8019960:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019962:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8019966:	e696      	b.n	8019696 <tcp_receive+0x26>
        pcb->dupacks = 0;
 8019968:	2200      	movs	r2, #0
 801996a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801996e:	e7cb      	b.n	8019908 <tcp_receive+0x298>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8019970:	ebac 0102 	sub.w	r1, ip, r2
 8019974:	2900      	cmp	r1, #0
 8019976:	f6bf af35 	bge.w	80197e4 <tcp_receive+0x174>
 801997a:	490e      	ldr	r1, [pc, #56]	; (80199b4 <tcp_receive+0x344>)
 801997c:	6809      	ldr	r1, [r1, #0]
 801997e:	89c9      	ldrh	r1, [r1, #14]
 8019980:	e7b1      	b.n	80198e6 <tcp_receive+0x276>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8019982:	490c      	ldr	r1, [pc, #48]	; (80199b4 <tcp_receive+0x344>)
 8019984:	6809      	ldr	r1, [r1, #0]
 8019986:	89c9      	ldrh	r1, [r1, #14]
 8019988:	458e      	cmp	lr, r1
 801998a:	f4bf af2e 	bcs.w	80197ea <tcp_receive+0x17a>
 801998e:	e7aa      	b.n	80198e6 <tcp_receive+0x276>
 8019990:	200229c4 	.word	0x200229c4
 8019994:	200229fa 	.word	0x200229fa
 8019998:	200229e4 	.word	0x200229e4
 801999c:	200229c8 	.word	0x200229c8
 80199a0:	200229c0 	.word	0x200229c0
 80199a4:	200229d8 	.word	0x200229d8
 80199a8:	0803f74c 	.word	0x0803f74c
 80199ac:	0803f850 	.word	0x0803f850
 80199b0:	08027fec 	.word	0x08027fec
 80199b4:	200229ec 	.word	0x200229ec
 80199b8:	200368a4 	.word	0x200368a4
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80199bc:	1a99      	subs	r1, r3, r2
 80199be:	2900      	cmp	r1, #0
 80199c0:	f6bf aea7 	bge.w	8019712 <tcp_receive+0xa2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80199c4:	48a1      	ldr	r0, [pc, #644]	; (8019c4c <tcp_receive+0x5dc>)
 80199c6:	f7fe fc47 	bl	8018258 <tcp_seg_copy>
                  if (cseg != NULL) {
 80199ca:	2800      	cmp	r0, #0
 80199cc:	f43f aebe 	beq.w	801974c <tcp_receive+0xdc>
                    pcb->ooseq = cseg;
 80199d0:	6760      	str	r0, [r4, #116]	; 0x74
 80199d2:	e6b8      	b.n	8019746 <tcp_receive+0xd6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80199d4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	f77f aeb8 	ble.w	801974c <tcp_receive+0xdc>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80199dc:	8980      	ldrh	r0, [r0, #12]
 80199de:	f7fb ff95 	bl	801590c <lwip_htons>
 80199e2:	07c2      	lsls	r2, r0, #31
 80199e4:	f53f aeb2 	bmi.w	801974c <tcp_receive+0xdc>
                next->next = tcp_seg_copy(&inseg);
 80199e8:	4898      	ldr	r0, [pc, #608]	; (8019c4c <tcp_receive+0x5dc>)
 80199ea:	f7fe fc35 	bl	8018258 <tcp_seg_copy>
 80199ee:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80199f0:	2800      	cmp	r0, #0
 80199f2:	f43f aeab 	beq.w	801974c <tcp_receive+0xdc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80199f6:	68eb      	ldr	r3, [r5, #12]
 80199f8:	892a      	ldrh	r2, [r5, #8]
 80199fa:	6859      	ldr	r1, [r3, #4]
 80199fc:	6833      	ldr	r3, [r6, #0]
 80199fe:	440a      	add	r2, r1
 8019a00:	1ad2      	subs	r2, r2, r3
 8019a02:	2a00      	cmp	r2, #0
 8019a04:	dd05      	ble.n	8019a12 <tcp_receive+0x3a2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019a06:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 8019a08:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019a0a:	b299      	uxth	r1, r3
 8019a0c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8019a0e:	f7fd fedd 	bl	80177cc <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019a12:	6832      	ldr	r2, [r6, #0]
 8019a14:	883b      	ldrh	r3, [r7, #0]
 8019a16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019a18:	4413      	add	r3, r2
 8019a1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8019a1c:	1a5b      	subs	r3, r3, r1
 8019a1e:	1a9b      	subs	r3, r3, r2
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	f77f ae93 	ble.w	801974c <tcp_receive+0xdc>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019a26:	682b      	ldr	r3, [r5, #0]
 8019a28:	68db      	ldr	r3, [r3, #12]
 8019a2a:	8998      	ldrh	r0, [r3, #12]
 8019a2c:	f7fb ff6e 	bl	801590c <lwip_htons>
 8019a30:	07c3      	lsls	r3, r0, #31
 8019a32:	f100 82b3 	bmi.w	8019f9c <tcp_receive+0x92c>
 8019a36:	682a      	ldr	r2, [r5, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019a38:	6830      	ldr	r0, [r6, #0]
 8019a3a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8019a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a3e:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 8019a40:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019a42:	4419      	add	r1, r3
 8019a44:	b289      	uxth	r1, r1
 8019a46:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8019a48:	f7fd fec0 	bl	80177cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019a4c:	682b      	ldr	r3, [r5, #0]
 8019a4e:	68da      	ldr	r2, [r3, #12]
 8019a50:	891d      	ldrh	r5, [r3, #8]
 8019a52:	8990      	ldrh	r0, [r2, #12]
 8019a54:	f7fb ff5a 	bl	801590c <lwip_htons>
 8019a58:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a5c:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8019a5e:	bf18      	it	ne
 8019a60:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a62:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8019a64:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8019a66:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a68:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 8019a6a:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a6c:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 8019a6e:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019a70:	4291      	cmp	r1, r2
 8019a72:	f43f ae6b 	beq.w	801974c <tcp_receive+0xdc>
 8019a76:	4b76      	ldr	r3, [pc, #472]	; (8019c50 <tcp_receive+0x5e0>)
 8019a78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8019a7c:	4975      	ldr	r1, [pc, #468]	; (8019c54 <tcp_receive+0x5e4>)
 8019a7e:	4876      	ldr	r0, [pc, #472]	; (8019c58 <tcp_receive+0x5e8>)
 8019a80:	f007 feb0 	bl	80217e4 <iprintf>
 8019a84:	e662      	b.n	801974c <tcp_receive+0xdc>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8019a86:	4b72      	ldr	r3, [pc, #456]	; (8019c50 <tcp_receive+0x5e0>)
 8019a88:	f240 427b 	movw	r2, #1147	; 0x47b
 8019a8c:	4973      	ldr	r1, [pc, #460]	; (8019c5c <tcp_receive+0x5ec>)
 8019a8e:	4872      	ldr	r0, [pc, #456]	; (8019c58 <tcp_receive+0x5e8>)
 8019a90:	f007 fea8 	bl	80217e4 <iprintf>
 8019a94:	e5f2      	b.n	801967c <tcp_receive+0xc>
 8019a96:	4f72      	ldr	r7, [pc, #456]	; (8019c60 <tcp_receive+0x5f0>)
 8019a98:	6833      	ldr	r3, [r6, #0]
 8019a9a:	8839      	ldrh	r1, [r7, #0]
 8019a9c:	e734      	b.n	8019908 <tcp_receive+0x298>
        tcp_ack_now(pcb);
 8019a9e:	8b63      	ldrh	r3, [r4, #26]
 8019aa0:	f043 0302 	orr.w	r3, r3, #2
 8019aa4:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019aa6:	e651      	b.n	801974c <tcp_receive+0xdc>
      struct pbuf *p = inseg.p;
 8019aa8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8019c4c <tcp_receive+0x5dc>
 8019aac:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019ab0:	2d00      	cmp	r5, #0
 8019ab2:	f000 816b 	beq.w	8019d8c <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019ab6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8019aba:	4598      	cmp	r8, r3
 8019abc:	f200 80be 	bhi.w	8019c3c <tcp_receive+0x5cc>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019ac0:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 8019ac4:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019ac8:	891b      	ldrh	r3, [r3, #8]
 8019aca:	4543      	cmp	r3, r8
 8019acc:	f0c0 80ab 	bcc.w	8019c26 <tcp_receive+0x5b6>
      inseg.len -= off;
 8019ad0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019ad4:	eba3 0308 	sub.w	r3, r3, r8
      while (p->len < off) {
 8019ad8:	8969      	ldrh	r1, [r5, #10]
      inseg.len -= off;
 8019ada:	eba2 0208 	sub.w	r2, r2, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8019ade:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8019ae0:	4541      	cmp	r1, r8
      inseg.len -= off;
 8019ae2:	f8a9 2008 	strh.w	r2, [r9, #8]
      while (p->len < off) {
 8019ae6:	d20a      	bcs.n	8019afe <tcp_receive+0x48e>
        p->len = 0;
 8019ae8:	2200      	movs	r2, #0
        off -= p->len;
 8019aea:	eba8 0101 	sub.w	r1, r8, r1
        p->len = 0;
 8019aee:	816a      	strh	r2, [r5, #10]
        p->tot_len = new_tot_len;
 8019af0:	812b      	strh	r3, [r5, #8]
        p = p->next;
 8019af2:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 8019af4:	fa1f f881 	uxth.w	r8, r1
      while (p->len < off) {
 8019af8:	8969      	ldrh	r1, [r5, #10]
 8019afa:	4541      	cmp	r1, r8
 8019afc:	d3f5      	bcc.n	8019aea <tcp_receive+0x47a>
      pbuf_remove_header(p, off);
 8019afe:	4641      	mov	r1, r8
 8019b00:	4628      	mov	r0, r5
 8019b02:	f7fd fd1b 	bl	801753c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019b08:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8019b0e:	6033      	str	r3, [r6, #0]
 8019b10:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019b12:	2a00      	cmp	r2, #0
 8019b14:	f43f ae1a 	beq.w	801974c <tcp_receive+0xdc>
        tcplen = TCP_TCPLEN(&inseg);
 8019b18:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019b1c:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8019b20:	8998      	ldrh	r0, [r3, #12]
 8019b22:	f7fb fef3 	bl	801590c <lwip_htons>
 8019b26:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8019b2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8019b2c:	bf18      	it	ne
 8019b2e:	2301      	movne	r3, #1
 8019b30:	442b      	add	r3, r5
 8019b32:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 8019b34:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 8019b36:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8019b38:	f0c0 8180 	bcc.w	8019e3c <tcp_receive+0x7cc>
        if (pcb->ooseq != NULL) {
 8019b3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8019b3e:	2b00      	cmp	r3, #0
 8019b40:	f000 809b 	beq.w	8019c7a <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019b44:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019b48:	8998      	ldrh	r0, [r3, #12]
 8019b4a:	f7fb fedf 	bl	801590c <lwip_htons>
 8019b4e:	07c0      	lsls	r0, r0, #31
 8019b50:	f100 8090 	bmi.w	8019c74 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 8019b54:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8019b56:	b955      	cbnz	r5, 8019b6e <tcp_receive+0x4fe>
 8019b58:	e1f3      	b.n	8019f42 <tcp_receive+0x8d2>
              next = next->next;
 8019b5a:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 8019b5e:	4628      	mov	r0, r5
 8019b60:	f7fe fb50 	bl	8018204 <tcp_seg_free>
            while (next &&
 8019b64:	4645      	mov	r5, r8
 8019b66:	f1b8 0f00 	cmp.w	r8, #0
 8019b6a:	f000 81ea 	beq.w	8019f42 <tcp_receive+0x8d2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8019b6e:	68e8      	ldr	r0, [r5, #12]
 8019b70:	892b      	ldrh	r3, [r5, #8]
 8019b72:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8019b76:	883a      	ldrh	r2, [r7, #0]
 8019b78:	f8d6 e000 	ldr.w	lr, [r6]
 8019b7c:	4463      	add	r3, ip
 8019b7e:	eb02 010e 	add.w	r1, r2, lr
 8019b82:	1acb      	subs	r3, r1, r3
            while (next &&
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	f2c0 81a4 	blt.w	8019ed2 <tcp_receive+0x862>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019b8a:	8980      	ldrh	r0, [r0, #12]
 8019b8c:	f7fb febe 	bl	801590c <lwip_htons>
 8019b90:	07c1      	lsls	r1, r0, #31
 8019b92:	d5e2      	bpl.n	8019b5a <tcp_receive+0x4ea>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8019b94:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019b98:	8998      	ldrh	r0, [r3, #12]
 8019b9a:	f7fb feb7 	bl	801590c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019b9e:	0782      	lsls	r2, r0, #30
 8019ba0:	d4db      	bmi.n	8019b5a <tcp_receive+0x4ea>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019ba2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019ba6:	2001      	movs	r0, #1
 8019ba8:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8019bac:	f7fb feae 	bl	801590c <lwip_htons>
 8019bb0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019bb4:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 8019bb8:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019bbc:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019bbe:	b280      	uxth	r0, r0
 8019bc0:	f7fb fea4 	bl	801590c <lwip_htons>
 8019bc4:	f010 0003 	ands.w	r0, r0, #3
 8019bc8:	bf18      	it	ne
 8019bca:	2001      	movne	r0, #1
 8019bcc:	4440      	add	r0, r8
 8019bce:	8038      	strh	r0, [r7, #0]
 8019bd0:	e7c3      	b.n	8019b5a <tcp_receive+0x4ea>
        pcb->unsent_oversize = 0;
 8019bd2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 8019bd6:	e65a      	b.n	801988e <tcp_receive+0x21e>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019bd8:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019bda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8019bdc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8019be0:	bf14      	ite	ne
 8019be2:	2001      	movne	r0, #1
 8019be4:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8019be6:	fb13 f300 	smulbb	r3, r3, r0
 8019bea:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 8019bec:	428b      	cmp	r3, r1
 8019bee:	bf94      	ite	ls
 8019bf0:	18d1      	addls	r1, r2, r3
 8019bf2:	1851      	addhi	r1, r2, r1
 8019bf4:	b289      	uxth	r1, r1
 8019bf6:	428a      	cmp	r2, r1
 8019bf8:	f200 80d0 	bhi.w	8019d9c <tcp_receive+0x72c>
 8019bfc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 8019c00:	e62c      	b.n	801985c <tcp_receive+0x1ec>
          if ((pcb->unsent == NULL) ||
 8019c02:	b148      	cbz	r0, 8019c18 <tcp_receive+0x5a8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8019c04:	68c3      	ldr	r3, [r0, #12]
 8019c06:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8019c08:	6858      	ldr	r0, [r3, #4]
 8019c0a:	f7fb fe83 	bl	8015914 <lwip_htonl>
 8019c0e:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 8019c10:	2800      	cmp	r0, #0
 8019c12:	f73f af40 	bgt.w	8019a96 <tcp_receive+0x426>
 8019c16:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 8019c18:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8019c1c:	4f10      	ldr	r7, [pc, #64]	; (8019c60 <tcp_receive+0x5f0>)
 8019c1e:	6833      	ldr	r3, [r6, #0]
 8019c20:	8361      	strh	r1, [r4, #26]
 8019c22:	8839      	ldrh	r1, [r7, #0]
 8019c24:	e670      	b.n	8019908 <tcp_receive+0x298>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8019c26:	4b0a      	ldr	r3, [pc, #40]	; (8019c50 <tcp_receive+0x5e0>)
 8019c28:	f240 5297 	movw	r2, #1431	; 0x597
 8019c2c:	490d      	ldr	r1, [pc, #52]	; (8019c64 <tcp_receive+0x5f4>)
 8019c2e:	480a      	ldr	r0, [pc, #40]	; (8019c58 <tcp_receive+0x5e8>)
 8019c30:	f007 fdd8 	bl	80217e4 <iprintf>
 8019c34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019c38:	891b      	ldrh	r3, [r3, #8]
 8019c3a:	e749      	b.n	8019ad0 <tcp_receive+0x460>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019c3c:	4b04      	ldr	r3, [pc, #16]	; (8019c50 <tcp_receive+0x5e0>)
 8019c3e:	f240 5295 	movw	r2, #1429	; 0x595
 8019c42:	4909      	ldr	r1, [pc, #36]	; (8019c68 <tcp_receive+0x5f8>)
 8019c44:	4804      	ldr	r0, [pc, #16]	; (8019c58 <tcp_receive+0x5e8>)
 8019c46:	f007 fdcd 	bl	80217e4 <iprintf>
 8019c4a:	e739      	b.n	8019ac0 <tcp_receive+0x450>
 8019c4c:	200229c8 	.word	0x200229c8
 8019c50:	0803f74c 	.word	0x0803f74c
 8019c54:	0803f89c 	.word	0x0803f89c
 8019c58:	08027fec 	.word	0x08027fec
 8019c5c:	0803f834 	.word	0x0803f834
 8019c60:	200229fa 	.word	0x200229fa
 8019c64:	0803f88c 	.word	0x0803f88c
 8019c68:	0803f87c 	.word	0x0803f87c
              pcb->ooseq = pcb->ooseq->next;
 8019c6c:	6803      	ldr	r3, [r0, #0]
 8019c6e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8019c70:	f7fe fac8 	bl	8018204 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019c74:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8019c76:	2800      	cmp	r0, #0
 8019c78:	d1f8      	bne.n	8019c6c <tcp_receive+0x5fc>
 8019c7a:	883a      	ldrh	r2, [r7, #0]
 8019c7c:	6831      	ldr	r1, [r6, #0]
 8019c7e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019c80:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 8019c82:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019c84:	4293      	cmp	r3, r2
 8019c86:	f0c0 80cf 	bcc.w	8019e28 <tcp_receive+0x7b8>
        pcb->rcv_wnd -= tcplen;
 8019c8a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 8019c8c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8019c8e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8019c90:	f7fe fa46 	bl	8018120 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8019c94:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019c98:	891a      	ldrh	r2, [r3, #8]
 8019c9a:	b122      	cbz	r2, 8019ca6 <tcp_receive+0x636>
          recv_data = inseg.p;
 8019c9c:	49b5      	ldr	r1, [pc, #724]	; (8019f74 <tcp_receive+0x904>)
          inseg.p = NULL;
 8019c9e:	2200      	movs	r2, #0
          recv_data = inseg.p;
 8019ca0:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 8019ca2:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019ca6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019caa:	8998      	ldrh	r0, [r3, #12]
 8019cac:	f7fb fe2e 	bl	801590c <lwip_htons>
 8019cb0:	07c5      	lsls	r5, r0, #31
 8019cb2:	d504      	bpl.n	8019cbe <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 8019cb4:	4ab0      	ldr	r2, [pc, #704]	; (8019f78 <tcp_receive+0x908>)
 8019cb6:	7813      	ldrb	r3, [r2, #0]
 8019cb8:	f043 0320 	orr.w	r3, r3, #32
 8019cbc:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8019cbe:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8019cc0:	2d00      	cmp	r5, #0
 8019cc2:	d07f      	beq.n	8019dc4 <tcp_receive+0x754>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019cc4:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8019f80 <tcp_receive+0x910>
 8019cc8:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8019f98 <tcp_receive+0x928>
 8019ccc:	4fab      	ldr	r7, [pc, #684]	; (8019f7c <tcp_receive+0x90c>)
 8019cce:	e033      	b.n	8019d38 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019cd0:	68eb      	ldr	r3, [r5, #12]
 8019cd2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8019cd6:	8998      	ldrh	r0, [r3, #12]
 8019cd8:	f7fb fe18 	bl	801590c <lwip_htons>
 8019cdc:	f010 0303 	ands.w	r3, r0, #3
 8019ce0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8019ce2:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8019ce4:	bf18      	it	ne
 8019ce6:	2301      	movne	r3, #1
 8019ce8:	4453      	add	r3, sl
 8019cea:	1ad3      	subs	r3, r2, r3
 8019cec:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8019cee:	f7fe fa17 	bl	8018120 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8019cf2:	6869      	ldr	r1, [r5, #4]
 8019cf4:	890b      	ldrh	r3, [r1, #8]
 8019cf6:	b13b      	cbz	r3, 8019d08 <tcp_receive+0x698>
            if (recv_data) {
 8019cf8:	4b9e      	ldr	r3, [pc, #632]	; (8019f74 <tcp_receive+0x904>)
 8019cfa:	6818      	ldr	r0, [r3, #0]
 8019cfc:	2800      	cmp	r0, #0
 8019cfe:	d052      	beq.n	8019da6 <tcp_receive+0x736>
              pbuf_cat(recv_data, cseg->p);
 8019d00:	f7fd fdda 	bl	80178b8 <pbuf_cat>
            cseg->p = NULL;
 8019d04:	2300      	movs	r3, #0
 8019d06:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8019d08:	68eb      	ldr	r3, [r5, #12]
 8019d0a:	8998      	ldrh	r0, [r3, #12]
 8019d0c:	f7fb fdfe 	bl	801590c <lwip_htons>
 8019d10:	07c0      	lsls	r0, r0, #31
 8019d12:	d509      	bpl.n	8019d28 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 8019d14:	4a98      	ldr	r2, [pc, #608]	; (8019f78 <tcp_receive+0x908>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d16:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 8019d18:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d1a:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 8019d1c:	f043 0320 	orr.w	r3, r3, #32
 8019d20:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019d22:	d101      	bne.n	8019d28 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 8019d24:	2307      	movs	r3, #7
 8019d26:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8019d28:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8019d2a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8019d2c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8019d2e:	f7fe fa69 	bl	8018204 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019d32:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8019d34:	2d00      	cmp	r5, #0
 8019d36:	d045      	beq.n	8019dc4 <tcp_receive+0x754>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d38:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8019d3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8019d3c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8019d3e:	428b      	cmp	r3, r1
 8019d40:	d140      	bne.n	8019dc4 <tcp_receive+0x754>
          seqno = pcb->ooseq->tcphdr->seqno;
 8019d42:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019d44:	8990      	ldrh	r0, [r2, #12]
 8019d46:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8019d4a:	f7fb fddf 	bl	801590c <lwip_htons>
 8019d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d50:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019d54:	68ea      	ldr	r2, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019d56:	4453      	add	r3, sl
 8019d58:	bf18      	it	ne
 8019d5a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019d5c:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019d60:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019d62:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019d66:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019d68:	8990      	ldrh	r0, [r2, #12]
 8019d6a:	f7fb fdcf 	bl	801590c <lwip_htons>
 8019d6e:	f010 0003 	ands.w	r0, r0, #3
 8019d72:	bf18      	it	ne
 8019d74:	2001      	movne	r0, #1
 8019d76:	4458      	add	r0, fp
 8019d78:	4582      	cmp	sl, r0
 8019d7a:	d2a9      	bcs.n	8019cd0 <tcp_receive+0x660>
 8019d7c:	464b      	mov	r3, r9
 8019d7e:	f240 622b 	movw	r2, #1579	; 0x62b
 8019d82:	4641      	mov	r1, r8
 8019d84:	4638      	mov	r0, r7
 8019d86:	f007 fd2d 	bl	80217e4 <iprintf>
 8019d8a:	e7a1      	b.n	8019cd0 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8019d8c:	4b7c      	ldr	r3, [pc, #496]	; (8019f80 <tcp_receive+0x910>)
 8019d8e:	f240 5294 	movw	r2, #1428	; 0x594
 8019d92:	497c      	ldr	r1, [pc, #496]	; (8019f84 <tcp_receive+0x914>)
 8019d94:	4879      	ldr	r0, [pc, #484]	; (8019f7c <tcp_receive+0x90c>)
 8019d96:	f007 fd25 	bl	80217e4 <iprintf>
 8019d9a:	e68c      	b.n	8019ab6 <tcp_receive+0x446>
          TCP_WND_INC(pcb->cwnd, increase);
 8019d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019da0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8019da4:	e55a      	b.n	801985c <tcp_receive+0x1ec>
              recv_data = cseg->p;
 8019da6:	6019      	str	r1, [r3, #0]
 8019da8:	e7ac      	b.n	8019d04 <tcp_receive+0x694>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8019daa:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019dae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019db0:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019db2:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8019db4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	429a      	cmp	r2, r3
 8019dbc:	d8ee      	bhi.n	8019d9c <tcp_receive+0x72c>
 8019dbe:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8019dc2:	e54b      	b.n	801985c <tcp_receive+0x1ec>
        tcp_ack(pcb);
 8019dc4:	8b63      	ldrh	r3, [r4, #26]
 8019dc6:	07d9      	lsls	r1, r3, #31
 8019dc8:	d50a      	bpl.n	8019de0 <tcp_receive+0x770>
 8019dca:	f023 0301 	bic.w	r3, r3, #1
 8019dce:	f043 0302 	orr.w	r3, r3, #2
 8019dd2:	8363      	strh	r3, [r4, #26]
 8019dd4:	e4f4      	b.n	80197c0 <tcp_receive+0x150>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8019dd6:	486c      	ldr	r0, [pc, #432]	; (8019f88 <tcp_receive+0x918>)
 8019dd8:	f7fe fa3e 	bl	8018258 <tcp_seg_copy>
 8019ddc:	6760      	str	r0, [r4, #116]	; 0x74
 8019dde:	e4b5      	b.n	801974c <tcp_receive+0xdc>
        tcp_ack(pcb);
 8019de0:	f043 0301 	orr.w	r3, r3, #1
 8019de4:	8363      	strh	r3, [r4, #26]
 8019de6:	e4eb      	b.n	80197c0 <tcp_receive+0x150>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019de8:	4867      	ldr	r0, [pc, #412]	; (8019f88 <tcp_receive+0x918>)
 8019dea:	f7fe fa35 	bl	8018258 <tcp_seg_copy>
                  if (cseg != NULL) {
 8019dee:	4607      	mov	r7, r0
 8019df0:	2800      	cmp	r0, #0
 8019df2:	f43f acab 	beq.w	801974c <tcp_receive+0xdc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8019df6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8019dfa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8019dfe:	6851      	ldr	r1, [r2, #4]
 8019e00:	6832      	ldr	r2, [r6, #0]
 8019e02:	440b      	add	r3, r1
 8019e04:	1a9b      	subs	r3, r3, r2
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	dd07      	ble.n	8019e1a <tcp_receive+0x7aa>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e0a:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 8019e0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019e10:	b291      	uxth	r1, r2
 8019e12:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019e16:	f7fd fcd9 	bl	80177cc <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 8019e1a:	4629      	mov	r1, r5
 8019e1c:	4638      	mov	r0, r7
                    prev->next = cseg;
 8019e1e:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8019e22:	f7ff fb35 	bl	8019490 <tcp_oos_insert_segment>
 8019e26:	e491      	b.n	801974c <tcp_receive+0xdc>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8019e28:	4b55      	ldr	r3, [pc, #340]	; (8019f80 <tcp_receive+0x910>)
 8019e2a:	f240 6207 	movw	r2, #1543	; 0x607
 8019e2e:	4957      	ldr	r1, [pc, #348]	; (8019f8c <tcp_receive+0x91c>)
 8019e30:	4852      	ldr	r0, [pc, #328]	; (8019f7c <tcp_receive+0x90c>)
 8019e32:	f007 fcd7 	bl	80217e4 <iprintf>
 8019e36:	883a      	ldrh	r2, [r7, #0]
 8019e38:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019e3a:	e726      	b.n	8019c8a <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e3c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019e40:	8998      	ldrh	r0, [r3, #12]
 8019e42:	f7fb fd63 	bl	801590c <lwip_htons>
 8019e46:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019e48:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019e4c:	d47d      	bmi.n	8019f4a <tcp_receive+0x8da>
 8019e4e:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019e50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8019e52:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e56:	f7fb fd59 	bl	801590c <lwip_htons>
 8019e5a:	0785      	lsls	r5, r0, #30
            inseg.len -= 1;
 8019e5c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019e60:	d503      	bpl.n	8019e6a <tcp_receive+0x7fa>
            inseg.len -= 1;
 8019e62:	3901      	subs	r1, #1
 8019e64:	b289      	uxth	r1, r1
 8019e66:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8019e6a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019e6e:	f7fd fcad 	bl	80177cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019e72:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019e76:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 8019e7a:	8998      	ldrh	r0, [r3, #12]
 8019e7c:	f7fb fd46 	bl	801590c <lwip_htons>
 8019e80:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e84:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8019e86:	bf18      	it	ne
 8019e88:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e8a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8019e8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8019e8e:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e90:	4401      	add	r1, r0
          tcplen = TCP_TCPLEN(&inseg);
 8019e92:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e94:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 8019e96:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019e98:	428a      	cmp	r2, r1
 8019e9a:	f43f ae4f 	beq.w	8019b3c <tcp_receive+0x4cc>
 8019e9e:	4b38      	ldr	r3, [pc, #224]	; (8019f80 <tcp_receive+0x910>)
 8019ea0:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8019ea4:	493a      	ldr	r1, [pc, #232]	; (8019f90 <tcp_receive+0x920>)
 8019ea6:	4835      	ldr	r0, [pc, #212]	; (8019f7c <tcp_receive+0x90c>)
 8019ea8:	f007 fc9c 	bl	80217e4 <iprintf>
 8019eac:	e646      	b.n	8019b3c <tcp_receive+0x4cc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8019eae:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8019eb2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019eb6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8019eb8:	4413      	add	r3, r2
 8019eba:	b29b      	uxth	r3, r3
 8019ebc:	429a      	cmp	r2, r3
 8019ebe:	bf88      	it	hi
 8019ec0:	460b      	movhi	r3, r1
 8019ec2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	f001 fe42 	bl	801bb50 <tcp_rexmit_fast>
      if (!found_dupack) {
 8019ecc:	8839      	ldrh	r1, [r7, #0]
 8019ece:	6833      	ldr	r3, [r6, #0]
 8019ed0:	e51a      	b.n	8019908 <tcp_receive+0x298>
                TCP_SEQ_GT(seqno + tcplen,
 8019ed2:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	dc01      	bgt.n	8019ede <tcp_receive+0x86e>
            pcb->ooseq = next;
 8019eda:	6765      	str	r5, [r4, #116]	; 0x74
 8019edc:	e6d0      	b.n	8019c80 <tcp_receive+0x610>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019ede:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019ee2:	ebac 0c0e 	sub.w	ip, ip, lr
 8019ee6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8019eea:	8998      	ldrh	r0, [r3, #12]
 8019eec:	f7fb fd0e 	bl	801590c <lwip_htons>
 8019ef0:	0783      	lsls	r3, r0, #30
 8019ef2:	d504      	bpl.n	8019efe <tcp_receive+0x88e>
                inseg.len -= 1;
 8019ef4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 8019ef8:	3b01      	subs	r3, #1
 8019efa:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8019efe:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 8019f02:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8019f06:	f7fd fc61 	bl	80177cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019f0a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8019f0e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 8019f12:	8998      	ldrh	r0, [r3, #12]
 8019f14:	f7fb fcfa 	bl	801590c <lwip_htons>
 8019f18:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f1c:	6831      	ldr	r1, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 8019f1e:	bf18      	it	ne
 8019f20:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f22:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 8019f24:	eb08 0200 	add.w	r2, r8, r0
 8019f28:	b292      	uxth	r2, r2
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f2a:	1850      	adds	r0, r2, r1
              tcplen = TCP_TCPLEN(&inseg);
 8019f2c:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019f2e:	6859      	ldr	r1, [r3, #4]
 8019f30:	4288      	cmp	r0, r1
 8019f32:	d0d2      	beq.n	8019eda <tcp_receive+0x86a>
 8019f34:	4b12      	ldr	r3, [pc, #72]	; (8019f80 <tcp_receive+0x910>)
 8019f36:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8019f3a:	4916      	ldr	r1, [pc, #88]	; (8019f94 <tcp_receive+0x924>)
 8019f3c:	480f      	ldr	r0, [pc, #60]	; (8019f7c <tcp_receive+0x90c>)
 8019f3e:	f007 fc51 	bl	80217e4 <iprintf>
 8019f42:	883a      	ldrh	r2, [r7, #0]
 8019f44:	6831      	ldr	r1, [r6, #0]
 8019f46:	4411      	add	r1, r2
 8019f48:	e7c7      	b.n	8019eda <tcp_receive+0x86a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019f4a:	899d      	ldrh	r5, [r3, #12]
 8019f4c:	4628      	mov	r0, r5
 8019f4e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8019f52:	f7fb fcdb 	bl	801590c <lwip_htons>
 8019f56:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8019f5a:	f7fb fcd7 	bl	801590c <lwip_htons>
 8019f5e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019f62:	ea45 0300 	orr.w	r3, r5, r0
 8019f66:	b298      	uxth	r0, r3
 8019f68:	8193      	strh	r3, [r2, #12]
 8019f6a:	e771      	b.n	8019e50 <tcp_receive+0x7e0>
                    pcb->ooseq = cseg;
 8019f6c:	6760      	str	r0, [r4, #116]	; 0x74
                  tcp_oos_insert_segment(cseg, next);
 8019f6e:	f7ff bbea 	b.w	8019746 <tcp_receive+0xd6>
 8019f72:	bf00      	nop
 8019f74:	200229dc 	.word	0x200229dc
 8019f78:	200229e0 	.word	0x200229e0
 8019f7c:	08027fec 	.word	0x08027fec
 8019f80:	0803f74c 	.word	0x0803f74c
 8019f84:	0803f86c 	.word	0x0803f86c
 8019f88:	200229c8 	.word	0x200229c8
 8019f8c:	0803f910 	.word	0x0803f910
 8019f90:	0803f89c 	.word	0x0803f89c
 8019f94:	0803f8d4 	.word	0x0803f8d4
 8019f98:	0803f930 	.word	0x0803f930
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019f9c:	682b      	ldr	r3, [r5, #0]
 8019f9e:	68db      	ldr	r3, [r3, #12]
 8019fa0:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8019fa4:	4640      	mov	r0, r8
 8019fa6:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8019faa:	f7fb fcaf 	bl	801590c <lwip_htons>
 8019fae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8019fb2:	f7fb fcab 	bl	801590c <lwip_htons>
 8019fb6:	682a      	ldr	r2, [r5, #0]
 8019fb8:	ea48 0800 	orr.w	r8, r8, r0
 8019fbc:	68d3      	ldr	r3, [r2, #12]
 8019fbe:	f8a3 800c 	strh.w	r8, [r3, #12]
 8019fc2:	e539      	b.n	8019a38 <tcp_receive+0x3c8>
 8019fc4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8019fcc <tcp_receive+0x95c>
 8019fc8:	e5a6      	b.n	8019b18 <tcp_receive+0x4a8>
 8019fca:	bf00      	nop
 8019fcc:	200229c8 	.word	0x200229c8

08019fd0 <tcp_input>:
{
 8019fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019fd4:	4604      	mov	r4, r0
{
 8019fd6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019fd8:	2800      	cmp	r0, #0
 8019fda:	f000 80fd 	beq.w	801a1d8 <tcp_input+0x208>
  TCP_STATS_INC(tcp.recv);
 8019fde:	4d82      	ldr	r5, [pc, #520]	; (801a1e8 <tcp_input+0x218>)
  if (p->len < TCP_HLEN) {
 8019fe0:	8962      	ldrh	r2, [r4, #10]
  TCP_STATS_INC(tcp.recv);
 8019fe2:	f8b5 3092 	ldrh.w	r3, [r5, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 8019fe6:	6861      	ldr	r1, [r4, #4]
  if (p->len < TCP_HLEN) {
 8019fe8:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 8019fea:	4f80      	ldr	r7, [pc, #512]	; (801a1ec <tcp_input+0x21c>)
  TCP_STATS_INC(tcp.recv);
 8019fec:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 8019ff0:	6039      	str	r1, [r7, #0]
  TCP_STATS_INC(tcp.recv);
 8019ff2:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 8019ff6:	d80f      	bhi.n	801a018 <tcp_input+0x48>
      TCP_STATS_INC(tcp.lenerr);
 8019ff8:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
 8019ffc:	3301      	adds	r3, #1
 8019ffe:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 801a002:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
  pbuf_free(p);
 801a006:	4620      	mov	r0, r4
  TCP_STATS_INC(tcp.drop);
 801a008:	3301      	adds	r3, #1
 801a00a:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
}
 801a00e:	b007      	add	sp, #28
 801a010:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801a014:	f7fd bace 	b.w	80175b4 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a018:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 801a218 <tcp_input+0x248>
 801a01c:	f8d8 1000 	ldr.w	r1, [r8]
 801a020:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801a024:	f005 f9b8 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801a028:	b9b8      	cbnz	r0, 801a05a <tcp_input+0x8a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801a02a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801a032:	2be0      	cmp	r3, #224	; 0xe0
 801a034:	d011      	beq.n	801a05a <tcp_input+0x8a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801a036:	f108 0014 	add.w	r0, r8, #20
 801a03a:	8922      	ldrh	r2, [r4, #8]
 801a03c:	2106      	movs	r1, #6
 801a03e:	f108 0310 	add.w	r3, r8, #16
 801a042:	9000      	str	r0, [sp, #0]
 801a044:	4620      	mov	r0, r4
 801a046:	f7fc fa13 	bl	8016470 <ip_chksum_pseudo>
    if (chksum != 0) {
 801a04a:	4606      	mov	r6, r0
 801a04c:	b158      	cbz	r0, 801a066 <tcp_input+0x96>
      TCP_STATS_INC(tcp.chkerr);
 801a04e:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 801a052:	3301      	adds	r3, #1
 801a054:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
      goto dropped;
 801a058:	e7d3      	b.n	801a002 <tcp_input+0x32>
    TCP_STATS_INC(tcp.proterr);
 801a05a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801a05e:	3301      	adds	r3, #1
 801a060:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
    goto dropped;
 801a064:	e7cd      	b.n	801a002 <tcp_input+0x32>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	8998      	ldrh	r0, [r3, #12]
 801a06a:	f7fb fc4f 	bl	801590c <lwip_htons>
 801a06e:	0a80      	lsrs	r0, r0, #10
 801a070:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801a074:	2913      	cmp	r1, #19
 801a076:	d9bf      	bls.n	8019ff8 <tcp_input+0x28>
 801a078:	8923      	ldrh	r3, [r4, #8]
 801a07a:	b28a      	uxth	r2, r1
 801a07c:	428b      	cmp	r3, r1
 801a07e:	d3bb      	bcc.n	8019ff8 <tcp_input+0x28>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a080:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 801a084:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a086:	f8df 9194 	ldr.w	r9, [pc, #404]	; 801a21c <tcp_input+0x24c>
  tcphdr_opt2 = NULL;
 801a08a:	f8df a194 	ldr.w	sl, [pc, #404]	; 801a220 <tcp_input+0x250>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a08e:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 801a090:	4290      	cmp	r0, r2
  tcphdr_opt2 = NULL;
 801a092:	f8ca 6000 	str.w	r6, [sl]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801a096:	f8a9 3000 	strh.w	r3, [r9]
  if (p->len >= hdrlen_bytes) {
 801a09a:	f080 81b6 	bcs.w	801a40a <tcp_input+0x43a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a09e:	6823      	ldr	r3, [r4, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	f000 838f 	beq.w	801a7c4 <tcp_input+0x7f4>
    pbuf_remove_header(p, TCP_HLEN);
 801a0a6:	2114      	movs	r1, #20
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	f7fd fa47 	bl	801753c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 801a0ae:	8966      	ldrh	r6, [r4, #10]
 801a0b0:	4b4f      	ldr	r3, [pc, #316]	; (801a1f0 <tcp_input+0x220>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801a0b2:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a0b4:	f8b9 9000 	ldrh.w	r9, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 801a0b8:	4631      	mov	r1, r6
    tcphdr_opt1len = p->len;
 801a0ba:	801e      	strh	r6, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801a0bc:	f7fd fa3e 	bl	801753c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a0c0:	eba9 0b06 	sub.w	fp, r9, r6
    if (opt2len > p->next->len) {
 801a0c4:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801a0c6:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801a0ca:	8943      	ldrh	r3, [r0, #10]
 801a0cc:	455b      	cmp	r3, fp
 801a0ce:	d393      	bcc.n	8019ff8 <tcp_input+0x28>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a0d0:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801a0d2:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801a0d4:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 801a0d8:	f7fd fa30 	bl	801753c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a0dc:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a0de:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801a0e0:	4433      	add	r3, r6
 801a0e2:	eba3 0309 	sub.w	r3, r3, r9
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a0ea:	2a00      	cmp	r2, #0
 801a0ec:	f040 8371 	bne.w	801a7d2 <tcp_input+0x802>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801a0f0:	6822      	ldr	r2, [r4, #0]
 801a0f2:	8912      	ldrh	r2, [r2, #8]
 801a0f4:	429a      	cmp	r2, r3
 801a0f6:	d005      	beq.n	801a104 <tcp_input+0x134>
 801a0f8:	4b3e      	ldr	r3, [pc, #248]	; (801a1f4 <tcp_input+0x224>)
 801a0fa:	22e0      	movs	r2, #224	; 0xe0
 801a0fc:	493e      	ldr	r1, [pc, #248]	; (801a1f8 <tcp_input+0x228>)
 801a0fe:	483f      	ldr	r0, [pc, #252]	; (801a1fc <tcp_input+0x22c>)
 801a100:	f007 fb70 	bl	80217e4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a104:	683e      	ldr	r6, [r7, #0]
 801a106:	8830      	ldrh	r0, [r6, #0]
 801a108:	f7fb fc00 	bl	801590c <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a10c:	f8d7 9000 	ldr.w	r9, [r7]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801a110:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a112:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801a116:	f7fb fbf9 	bl	801590c <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a11a:	683e      	ldr	r6, [r7, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801a11c:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a120:	6870      	ldr	r0, [r6, #4]
 801a122:	f7fb fbf7 	bl	8015914 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a126:	f8d7 9000 	ldr.w	r9, [r7]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801a12a:	4b35      	ldr	r3, [pc, #212]	; (801a200 <tcp_input+0x230>)
 801a12c:	6070      	str	r0, [r6, #4]
 801a12e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a130:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801a134:	f7fb fbee 	bl	8015914 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a138:	683e      	ldr	r6, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801a13a:	4b32      	ldr	r3, [pc, #200]	; (801a204 <tcp_input+0x234>)
 801a13c:	f8c9 0008 	str.w	r0, [r9, #8]
 801a140:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a142:	89f0      	ldrh	r0, [r6, #14]
 801a144:	f7fb fbe2 	bl	801590c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801a148:	683b      	ldr	r3, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801a14a:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801a14c:	8998      	ldrh	r0, [r3, #12]
 801a14e:	f7fb fbdd 	bl	801590c <lwip_htons>
 801a152:	492d      	ldr	r1, [pc, #180]	; (801a208 <tcp_input+0x238>)
 801a154:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a158:	0786      	lsls	r6, r0, #30
  tcplen = p->tot_len;
 801a15a:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801a15c:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801a15e:	f000 8150 	beq.w	801a402 <tcp_input+0x432>
    tcplen++;
 801a162:	1c5a      	adds	r2, r3, #1
 801a164:	4929      	ldr	r1, [pc, #164]	; (801a20c <tcp_input+0x23c>)
 801a166:	b292      	uxth	r2, r2
 801a168:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801a16a:	4293      	cmp	r3, r2
    tcplen++;
 801a16c:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801a16e:	f63f af43 	bhi.w	8019ff8 <tcp_input+0x28>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a172:	4b27      	ldr	r3, [pc, #156]	; (801a210 <tcp_input+0x240>)
 801a174:	681e      	ldr	r6, [r3, #0]
 801a176:	2e00      	cmp	r6, #0
 801a178:	f000 80f6 	beq.w	801a368 <tcp_input+0x398>
  prev = NULL;
 801a17c:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a180:	4b1c      	ldr	r3, [pc, #112]	; (801a1f4 <tcp_input+0x224>)
 801a182:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 801a224 <tcp_input+0x254>
 801a186:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a1fc <tcp_input+0x22c>
 801a18a:	e01a      	b.n	801a1c2 <tcp_input+0x1f2>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a18c:	2a0a      	cmp	r2, #10
 801a18e:	f000 80e3 	beq.w	801a358 <tcp_input+0x388>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a192:	2a01      	cmp	r2, #1
 801a194:	f000 80d9 	beq.w	801a34a <tcp_input+0x37a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a198:	7a31      	ldrb	r1, [r6, #8]
 801a19a:	b139      	cbz	r1, 801a1ac <tcp_input+0x1dc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a19c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801a1a0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801a1a4:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a1a6:	b2d2      	uxtb	r2, r2
 801a1a8:	4291      	cmp	r1, r2
 801a1aa:	d104      	bne.n	801a1b6 <tcp_input+0x1e6>
    if (pcb->remote_port == tcphdr->src &&
 801a1ac:	683a      	ldr	r2, [r7, #0]
 801a1ae:	8b30      	ldrh	r0, [r6, #24]
 801a1b0:	8811      	ldrh	r1, [r2, #0]
 801a1b2:	4288      	cmp	r0, r1
 801a1b4:	d038      	beq.n	801a228 <tcp_input+0x258>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a1b6:	68f2      	ldr	r2, [r6, #12]
 801a1b8:	46b1      	mov	r9, r6
 801a1ba:	2a00      	cmp	r2, #0
 801a1bc:	f000 80d4 	beq.w	801a368 <tcp_input+0x398>
 801a1c0:	4616      	mov	r6, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801a1c2:	7d32      	ldrb	r2, [r6, #20]
 801a1c4:	2a00      	cmp	r2, #0
 801a1c6:	d1e1      	bne.n	801a18c <tcp_input+0x1bc>
 801a1c8:	22fb      	movs	r2, #251	; 0xfb
 801a1ca:	4659      	mov	r1, fp
 801a1cc:	4650      	mov	r0, sl
 801a1ce:	f007 fb09 	bl	80217e4 <iprintf>
 801a1d2:	7d32      	ldrb	r2, [r6, #20]
 801a1d4:	4b07      	ldr	r3, [pc, #28]	; (801a1f4 <tcp_input+0x224>)
 801a1d6:	e7d9      	b.n	801a18c <tcp_input+0x1bc>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801a1d8:	4b06      	ldr	r3, [pc, #24]	; (801a1f4 <tcp_input+0x224>)
 801a1da:	2283      	movs	r2, #131	; 0x83
 801a1dc:	490d      	ldr	r1, [pc, #52]	; (801a214 <tcp_input+0x244>)
 801a1de:	4807      	ldr	r0, [pc, #28]	; (801a1fc <tcp_input+0x22c>)
 801a1e0:	f007 fb00 	bl	80217e4 <iprintf>
 801a1e4:	e6fb      	b.n	8019fde <tcp_input+0xe>
 801a1e6:	bf00      	nop
 801a1e8:	20036794 	.word	0x20036794
 801a1ec:	200229ec 	.word	0x200229ec
 801a1f0:	200229f0 	.word	0x200229f0
 801a1f4:	0803f74c 	.word	0x0803f74c
 801a1f8:	0803f98c 	.word	0x0803f98c
 801a1fc:	08027fec 	.word	0x08027fec
 801a200:	200229e4 	.word	0x200229e4
 801a204:	200229c0 	.word	0x200229c0
 801a208:	200229c4 	.word	0x200229c4
 801a20c:	200229fa 	.word	0x200229fa
 801a210:	200368a0 	.word	0x200368a0
 801a214:	0803f958 	.word	0x0803f958
 801a218:	2002709c 	.word	0x2002709c
 801a21c:	200229f8 	.word	0x200229f8
 801a220:	200229f4 	.word	0x200229f4
 801a224:	0803f9ac 	.word	0x0803f9ac
    if (pcb->remote_port == tcphdr->src &&
 801a228:	8852      	ldrh	r2, [r2, #2]
 801a22a:	8af1      	ldrh	r1, [r6, #22]
 801a22c:	4291      	cmp	r1, r2
 801a22e:	d1c2      	bne.n	801a1b6 <tcp_input+0x1e6>
        pcb->local_port == tcphdr->dest &&
 801a230:	6871      	ldr	r1, [r6, #4]
 801a232:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a236:	4291      	cmp	r1, r2
 801a238:	d1bd      	bne.n	801a1b6 <tcp_input+0x1e6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a23a:	6831      	ldr	r1, [r6, #0]
 801a23c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a240:	4291      	cmp	r1, r2
 801a242:	d1b8      	bne.n	801a1b6 <tcp_input+0x1e6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a244:	68f3      	ldr	r3, [r6, #12]
 801a246:	42b3      	cmp	r3, r6
 801a248:	d076      	beq.n	801a338 <tcp_input+0x368>
      if (prev != NULL) {
 801a24a:	f1b9 0f00 	cmp.w	r9, #0
 801a24e:	f000 8442 	beq.w	801aad6 <tcp_input+0xb06>
        pcb->next = tcp_active_pcbs;
 801a252:	4979      	ldr	r1, [pc, #484]	; (801a438 <tcp_input+0x468>)
        prev->next = pcb->next;
 801a254:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 801a258:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 801a25a:	600e      	str	r6, [r1, #0]
 801a25c:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 801a25e:	60f2      	str	r2, [r6, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801a260:	42b3      	cmp	r3, r6
 801a262:	f000 843f 	beq.w	801aae4 <tcp_input+0xb14>
    inseg.next = NULL;
 801a266:	f8df 8200 	ldr.w	r8, [pc, #512]	; 801a468 <tcp_input+0x498>
 801a26a:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 801a26c:	683a      	ldr	r2, [r7, #0]
    inseg.len = p->tot_len;
 801a26e:	8921      	ldrh	r1, [r4, #8]
    inseg.tcphdr = tcphdr;
 801a270:	f8c8 200c 	str.w	r2, [r8, #12]
    if (flags & TCP_PSH) {
 801a274:	4a71      	ldr	r2, [pc, #452]	; (801a43c <tcp_input+0x46c>)
    recv_data = NULL;
 801a276:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 801a46c <tcp_input+0x49c>
    recv_flags = 0;
 801a27a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 801a470 <tcp_input+0x4a0>
    recv_acked = 0;
 801a27e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 801a474 <tcp_input+0x4a4>
    if (flags & TCP_PSH) {
 801a282:	7812      	ldrb	r2, [r2, #0]
    inseg.next = NULL;
 801a284:	f8c8 3000 	str.w	r3, [r8]
    recv_data = NULL;
 801a288:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 801a28c:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801a290:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801a294:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 801a296:	f8c8 4004 	str.w	r4, [r8, #4]
    inseg.len = p->tot_len;
 801a29a:	f8a8 1008 	strh.w	r1, [r8, #8]
    if (flags & TCP_PSH) {
 801a29e:	d503      	bpl.n	801a2a8 <tcp_input+0x2d8>
      p->flags |= PBUF_FLAG_PUSH;
 801a2a0:	7b63      	ldrb	r3, [r4, #13]
 801a2a2:	f043 0301 	orr.w	r3, r3, #1
 801a2a6:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801a2a8:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801a2aa:	b173      	cbz	r3, 801a2ca <tcp_input+0x2fa>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801a2ac:	4630      	mov	r0, r6
 801a2ae:	f7fe fe8d 	bl	8018fcc <tcp_process_refused_data>
 801a2b2:	300d      	adds	r0, #13
 801a2b4:	f000 8295 	beq.w	801a7e2 <tcp_input+0x812>
 801a2b8:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801a2ba:	b123      	cbz	r3, 801a2c6 <tcp_input+0x2f6>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801a2bc:	9b05      	ldr	r3, [sp, #20]
 801a2be:	881b      	ldrh	r3, [r3, #0]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	f040 828e 	bne.w	801a7e2 <tcp_input+0x812>
 801a2c6:	4b5d      	ldr	r3, [pc, #372]	; (801a43c <tcp_input+0x46c>)
 801a2c8:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 801a2ca:	4c5d      	ldr	r4, [pc, #372]	; (801a440 <tcp_input+0x470>)
  if (flags & TCP_RST) {
 801a2cc:	0753      	lsls	r3, r2, #29
    tcp_input_pcb = pcb;
 801a2ce:	6026      	str	r6, [r4, #0]
  if (flags & TCP_RST) {
 801a2d0:	f140 8166 	bpl.w	801a5a0 <tcp_input+0x5d0>
    if (pcb->state == SYN_SENT) {
 801a2d4:	7d31      	ldrb	r1, [r6, #20]
 801a2d6:	2902      	cmp	r1, #2
 801a2d8:	f000 8362 	beq.w	801a9a0 <tcp_input+0x9d0>
      if (seqno == pcb->rcv_nxt) {
 801a2dc:	4b59      	ldr	r3, [pc, #356]	; (801a444 <tcp_input+0x474>)
 801a2de:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	429a      	cmp	r2, r3
 801a2e4:	f000 845f 	beq.w	801aba6 <tcp_input+0xbd6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a2e8:	1a9b      	subs	r3, r3, r2
 801a2ea:	d404      	bmi.n	801a2f6 <tcp_input+0x326>
 801a2ec:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 801a2ee:	1a9b      	subs	r3, r3, r2
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f340 8350 	ble.w	801a996 <tcp_input+0x9c6>
      if (recv_flags & TF_RESET) {
 801a2f6:	f89a 3000 	ldrb.w	r3, [sl]
 801a2fa:	0719      	lsls	r1, r3, #28
 801a2fc:	f140 827c 	bpl.w	801a7f8 <tcp_input+0x828>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801a300:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 801a304:	b11b      	cbz	r3, 801a30e <tcp_input+0x33e>
 801a306:	f06f 010d 	mvn.w	r1, #13
 801a30a:	6930      	ldr	r0, [r6, #16]
 801a30c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a30e:	484a      	ldr	r0, [pc, #296]	; (801a438 <tcp_input+0x468>)
 801a310:	4631      	mov	r1, r6
 801a312:	f7fe fb03 	bl	801891c <tcp_pcb_remove>
        tcp_free(pcb);
 801a316:	4630      	mov	r0, r6
 801a318:	f7fd fe10 	bl	8017f3c <tcp_free>
    tcp_input_pcb = NULL;
 801a31c:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801a31e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    tcp_input_pcb = NULL;
 801a322:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801a324:	f8c9 5000 	str.w	r5, [r9]
    if (inseg.p != NULL) {
 801a328:	b118      	cbz	r0, 801a332 <tcp_input+0x362>
      pbuf_free(inseg.p);
 801a32a:	f7fd f943 	bl	80175b4 <pbuf_free>
      inseg.p = NULL;
 801a32e:	f8c8 5004 	str.w	r5, [r8, #4]
}
 801a332:	b007      	add	sp, #28
 801a334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801a338:	4b43      	ldr	r3, [pc, #268]	; (801a448 <tcp_input+0x478>)
 801a33a:	f240 120d 	movw	r2, #269	; 0x10d
 801a33e:	4943      	ldr	r1, [pc, #268]	; (801a44c <tcp_input+0x47c>)
 801a340:	4843      	ldr	r0, [pc, #268]	; (801a450 <tcp_input+0x480>)
 801a342:	f007 fa4f 	bl	80217e4 <iprintf>
 801a346:	68f3      	ldr	r3, [r6, #12]
 801a348:	e77f      	b.n	801a24a <tcp_input+0x27a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801a34a:	22fd      	movs	r2, #253	; 0xfd
 801a34c:	4941      	ldr	r1, [pc, #260]	; (801a454 <tcp_input+0x484>)
 801a34e:	4650      	mov	r0, sl
 801a350:	f007 fa48 	bl	80217e4 <iprintf>
 801a354:	4b3c      	ldr	r3, [pc, #240]	; (801a448 <tcp_input+0x478>)
 801a356:	e71f      	b.n	801a198 <tcp_input+0x1c8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801a358:	22fc      	movs	r2, #252	; 0xfc
 801a35a:	493f      	ldr	r1, [pc, #252]	; (801a458 <tcp_input+0x488>)
 801a35c:	4650      	mov	r0, sl
 801a35e:	f007 fa41 	bl	80217e4 <iprintf>
 801a362:	7d32      	ldrb	r2, [r6, #20]
 801a364:	4b38      	ldr	r3, [pc, #224]	; (801a448 <tcp_input+0x478>)
 801a366:	e714      	b.n	801a192 <tcp_input+0x1c2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a368:	4b3c      	ldr	r3, [pc, #240]	; (801a45c <tcp_input+0x48c>)
 801a36a:	681e      	ldr	r6, [r3, #0]
 801a36c:	2e00      	cmp	r6, #0
 801a36e:	d052      	beq.n	801a416 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a370:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801a448 <tcp_input+0x478>
 801a374:	f8df a100 	ldr.w	sl, [pc, #256]	; 801a478 <tcp_input+0x4a8>
 801a378:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801a450 <tcp_input+0x480>
 801a37c:	e002      	b.n	801a384 <tcp_input+0x3b4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a37e:	68f6      	ldr	r6, [r6, #12]
 801a380:	2e00      	cmp	r6, #0
 801a382:	d048      	beq.n	801a416 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a384:	7d30      	ldrb	r0, [r6, #20]
 801a386:	465b      	mov	r3, fp
 801a388:	f240 121f 	movw	r2, #287	; 0x11f
 801a38c:	4651      	mov	r1, sl
 801a38e:	280a      	cmp	r0, #10
 801a390:	4648      	mov	r0, r9
 801a392:	d001      	beq.n	801a398 <tcp_input+0x3c8>
 801a394:	f007 fa26 	bl	80217e4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a398:	7a32      	ldrb	r2, [r6, #8]
 801a39a:	b13a      	cbz	r2, 801a3ac <tcp_input+0x3dc>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a39c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a3a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801a3a4:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801a3a6:	b2db      	uxtb	r3, r3
 801a3a8:	429a      	cmp	r2, r3
 801a3aa:	d1e8      	bne.n	801a37e <tcp_input+0x3ae>
      if (pcb->remote_port == tcphdr->src &&
 801a3ac:	683b      	ldr	r3, [r7, #0]
 801a3ae:	8b31      	ldrh	r1, [r6, #24]
 801a3b0:	881a      	ldrh	r2, [r3, #0]
 801a3b2:	4291      	cmp	r1, r2
 801a3b4:	d1e3      	bne.n	801a37e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801a3b6:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801a3b8:	8af3      	ldrh	r3, [r6, #22]
 801a3ba:	4293      	cmp	r3, r2
 801a3bc:	d1df      	bne.n	801a37e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801a3be:	6870      	ldr	r0, [r6, #4]
 801a3c0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a3c4:	4290      	cmp	r0, r2
 801a3c6:	d1da      	bne.n	801a37e <tcp_input+0x3ae>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801a3c8:	6830      	ldr	r0, [r6, #0]
 801a3ca:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a3ce:	4290      	cmp	r0, r2
 801a3d0:	d1d5      	bne.n	801a37e <tcp_input+0x3ae>
  if (flags & TCP_RST) {
 801a3d2:	4a1a      	ldr	r2, [pc, #104]	; (801a43c <tcp_input+0x46c>)
 801a3d4:	7812      	ldrb	r2, [r2, #0]
 801a3d6:	0750      	lsls	r0, r2, #29
 801a3d8:	d411      	bmi.n	801a3fe <tcp_input+0x42e>
  if (flags & TCP_SYN) {
 801a3da:	0797      	lsls	r7, r2, #30
 801a3dc:	f140 838e 	bpl.w	801aafc <tcp_input+0xb2c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a3e0:	4a18      	ldr	r2, [pc, #96]	; (801a444 <tcp_input+0x474>)
 801a3e2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801a3e4:	6812      	ldr	r2, [r2, #0]
 801a3e6:	1a10      	subs	r0, r2, r0
 801a3e8:	d404      	bmi.n	801a3f4 <tcp_input+0x424>
 801a3ea:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 801a3ec:	1b40      	subs	r0, r0, r5
 801a3ee:	2800      	cmp	r0, #0
 801a3f0:	f340 83e4 	ble.w	801abbc <tcp_input+0xbec>
  if ((tcplen > 0)) {
 801a3f4:	9b05      	ldr	r3, [sp, #20]
 801a3f6:	881b      	ldrh	r3, [r3, #0]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	f040 83e6 	bne.w	801abca <tcp_input+0xbfa>
        pbuf_free(p);
 801a3fe:	4620      	mov	r0, r4
 801a400:	e605      	b.n	801a00e <tcp_input+0x3e>
  tcplen = p->tot_len;
 801a402:	4a17      	ldr	r2, [pc, #92]	; (801a460 <tcp_input+0x490>)
 801a404:	9205      	str	r2, [sp, #20]
 801a406:	8013      	strh	r3, [r2, #0]
 801a408:	e6b3      	b.n	801a172 <tcp_input+0x1a2>
    tcphdr_opt1len = tcphdr_optlen;
 801a40a:	4a16      	ldr	r2, [pc, #88]	; (801a464 <tcp_input+0x494>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a40c:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801a40e:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801a410:	f7fd f894 	bl	801753c <pbuf_remove_header>
 801a414:	e676      	b.n	801a104 <tcp_input+0x134>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a416:	f8df a064 	ldr.w	sl, [pc, #100]	; 801a47c <tcp_input+0x4ac>
 801a41a:	f8da e000 	ldr.w	lr, [sl]
 801a41e:	f1be 0f00 	cmp.w	lr, #0
 801a422:	f000 8239 	beq.w	801a898 <tcp_input+0x8c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a426:	f8d8 0004 	ldr.w	r0, [r8, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a42a:	4676      	mov	r6, lr
      if (lpcb->local_port == tcphdr->dest) {
 801a42c:	6839      	ldr	r1, [r7, #0]
    prev = NULL;
 801a42e:	2200      	movs	r2, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a430:	f8d8 c014 	ldr.w	ip, [r8, #20]
 801a434:	4681      	mov	r9, r0
 801a436:	e029      	b.n	801a48c <tcp_input+0x4bc>
 801a438:	200368a0 	.word	0x200368a0
 801a43c:	200229c4 	.word	0x200229c4
 801a440:	200368b4 	.word	0x200368b4
 801a444:	200229e4 	.word	0x200229e4
 801a448:	0803f74c 	.word	0x0803f74c
 801a44c:	0803fa28 	.word	0x0803fa28
 801a450:	08027fec 	.word	0x08027fec
 801a454:	0803fa00 	.word	0x0803fa00
 801a458:	0803f9d4 	.word	0x0803f9d4
 801a45c:	200368b0 	.word	0x200368b0
 801a460:	200229fa 	.word	0x200229fa
 801a464:	200229f0 	.word	0x200229f0
 801a468:	200229c8 	.word	0x200229c8
 801a46c:	200229dc 	.word	0x200229dc
 801a470:	200229e0 	.word	0x200229e0
 801a474:	200229d8 	.word	0x200229d8
 801a478:	0803fa80 	.word	0x0803fa80
 801a47c:	200368a8 	.word	0x200368a8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801a480:	68f3      	ldr	r3, [r6, #12]
 801a482:	4632      	mov	r2, r6
 801a484:	461e      	mov	r6, r3
 801a486:	2b00      	cmp	r3, #0
 801a488:	f000 8207 	beq.w	801a89a <tcp_input+0x8ca>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a48c:	7a30      	ldrb	r0, [r6, #8]
 801a48e:	b128      	cbz	r0, 801a49c <tcp_input+0x4cc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801a490:	f899 3038 	ldrb.w	r3, [r9, #56]	; 0x38
 801a494:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801a496:	b2db      	uxtb	r3, r3
 801a498:	4298      	cmp	r0, r3
 801a49a:	d1f1      	bne.n	801a480 <tcp_input+0x4b0>
      if (lpcb->local_port == tcphdr->dest) {
 801a49c:	884b      	ldrh	r3, [r1, #2]
 801a49e:	8af0      	ldrh	r0, [r6, #22]
 801a4a0:	4298      	cmp	r0, r3
 801a4a2:	d1ed      	bne.n	801a480 <tcp_input+0x4b0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801a4a4:	6830      	ldr	r0, [r6, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801a4a6:	b108      	cbz	r0, 801a4ac <tcp_input+0x4dc>
 801a4a8:	4560      	cmp	r0, ip
 801a4aa:	d1e9      	bne.n	801a480 <tcp_input+0x4b0>
      if (prev != NULL) {
 801a4ac:	2a00      	cmp	r2, #0
 801a4ae:	f000 828c 	beq.w	801a9ca <tcp_input+0x9fa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a4b2:	68f0      	ldr	r0, [r6, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801a4b4:	f8ca 6000 	str.w	r6, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801a4b8:	60d0      	str	r0, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801a4ba:	f8c6 e00c 	str.w	lr, [r6, #12]
  if (flags & TCP_RST) {
 801a4be:	4aab      	ldr	r2, [pc, #684]	; (801a76c <tcp_input+0x79c>)
 801a4c0:	7812      	ldrb	r2, [r2, #0]
 801a4c2:	0750      	lsls	r0, r2, #29
 801a4c4:	d49b      	bmi.n	801a3fe <tcp_input+0x42e>
  if (flags & TCP_ACK) {
 801a4c6:	f012 0910 	ands.w	r9, r2, #16
 801a4ca:	f040 8284 	bne.w	801a9d6 <tcp_input+0xa06>
  } else if (flags & TCP_SYN) {
 801a4ce:	0792      	lsls	r2, r2, #30
 801a4d0:	d595      	bpl.n	801a3fe <tcp_input+0x42e>
    npcb = tcp_alloc(pcb->prio);
 801a4d2:	7d70      	ldrb	r0, [r6, #21]
 801a4d4:	f7fe fb9a 	bl	8018c0c <tcp_alloc>
    if (npcb == NULL) {
 801a4d8:	4682      	mov	sl, r0
 801a4da:	2800      	cmp	r0, #0
 801a4dc:	f000 82ea 	beq.w	801aab4 <tcp_input+0xae4>
    npcb->remote_port = tcphdr->src;
 801a4e0:	683d      	ldr	r5, [r7, #0]
    npcb->state = SYN_RCVD;
 801a4e2:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 801a4e6:	4ba2      	ldr	r3, [pc, #648]	; (801a770 <tcp_input+0x7a0>)
    npcb->remote_port = tcphdr->src;
 801a4e8:	782a      	ldrb	r2, [r5, #0]
 801a4ea:	786d      	ldrb	r5, [r5, #1]
    npcb->rcv_nxt = seqno + 1;
 801a4ec:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801a4ee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    npcb->local_port = pcb->local_port;
 801a4f2:	8af5      	ldrh	r5, [r6, #22]
    npcb->rcv_nxt = seqno + 1;
 801a4f4:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801a4f6:	8302      	strh	r2, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 801a4f8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a4fa:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a4fc:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    npcb->state = SYN_RCVD;
 801a500:	f880 c014 	strb.w	ip, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a504:	6041      	str	r1, [r0, #4]
    npcb->local_port = pcb->local_port;
 801a506:	82c5      	strh	r5, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a508:	1d05      	adds	r5, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a50a:	6002      	str	r2, [r0, #0]
    iss = tcp_next_iss(npcb);
 801a50c:	f7fe fdfc 	bl	8019108 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a510:	4b97      	ldr	r3, [pc, #604]	; (801a770 <tcp_input+0x7a0>)
    TCP_REG_ACTIVE(npcb);
 801a512:	4998      	ldr	r1, [pc, #608]	; (801a774 <tcp_input+0x7a4>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a514:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 801a516:	6933      	ldr	r3, [r6, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a518:	3a01      	subs	r2, #1
    npcb->listener = pcb;
 801a51a:	f8ca 607c 	str.w	r6, [sl, #124]	; 0x7c
    npcb->snd_wl2 = iss;
 801a51e:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a522:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 801a526:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a52a:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a52e:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a532:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a536:	7a73      	ldrb	r3, [r6, #9]
    TCP_REG_ACTIVE(npcb);
 801a538:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a53a:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 801a53e:	f8c1 a000 	str.w	sl, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a542:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a546:	7a33      	ldrb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 801a548:	f8ca 200c 	str.w	r2, [sl, #12]
    npcb->netif_idx = pcb->netif_idx;
 801a54c:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801a550:	f001 feec 	bl	801c32c <tcp_timer_needed>
 801a554:	2201      	movs	r2, #1
 801a556:	4b88      	ldr	r3, [pc, #544]	; (801a778 <tcp_input+0x7a8>)
    tcp_parseopt(npcb);
 801a558:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 801a55a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a55c:	f7fe feea 	bl	8019334 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a560:	683b      	ldr	r3, [r7, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a562:	4628      	mov	r0, r5
 801a564:	9505      	str	r5, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801a566:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a568:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801a56c:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a570:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a574:	f004 fce4 	bl	801ef40 <ip4_route>
 801a578:	9a05      	ldr	r2, [sp, #20]
 801a57a:	4601      	mov	r1, r0
 801a57c:	4630      	mov	r0, r6
 801a57e:	f7fe fddf 	bl	8019140 <tcp_eff_send_mss_netif>
 801a582:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a584:	2112      	movs	r1, #18
 801a586:	4650      	mov	r0, sl
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a588:	f8aa 3032 	strh.w	r3, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a58c:	f001 f974 	bl	801b878 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801a590:	2800      	cmp	r0, #0
 801a592:	f040 82ba 	bne.w	801ab0a <tcp_input+0xb3a>
    tcp_output(npcb);
 801a596:	4650      	mov	r0, sl
 801a598:	f001 fb94 	bl	801bcc4 <tcp_output>
        pbuf_free(p);
 801a59c:	4620      	mov	r0, r4
 801a59e:	e536      	b.n	801a00e <tcp_input+0x3e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a5a0:	0795      	lsls	r5, r2, #30
 801a5a2:	d504      	bpl.n	801a5ae <tcp_input+0x5de>
 801a5a4:	7d33      	ldrb	r3, [r6, #20]
 801a5a6:	3b02      	subs	r3, #2
 801a5a8:	2b01      	cmp	r3, #1
 801a5aa:	f200 81f4 	bhi.w	801a996 <tcp_input+0x9c6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a5ae:	8b73      	ldrh	r3, [r6, #26]
 801a5b0:	06d8      	lsls	r0, r3, #27
 801a5b2:	d402      	bmi.n	801a5ba <tcp_input+0x5ea>
    pcb->tmr = tcp_ticks;
 801a5b4:	4b71      	ldr	r3, [pc, #452]	; (801a77c <tcp_input+0x7ac>)
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	6233      	str	r3, [r6, #32]
  pcb->persist_probe = 0;
 801a5ba:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 801a5bc:	4630      	mov	r0, r6
  pcb->persist_probe = 0;
 801a5be:	f8a6 309a 	strh.w	r3, [r6, #154]	; 0x9a
  tcp_parseopt(pcb);
 801a5c2:	f7fe feb7 	bl	8019334 <tcp_parseopt>
  switch (pcb->state) {
 801a5c6:	7d33      	ldrb	r3, [r6, #20]
 801a5c8:	3b02      	subs	r3, #2
 801a5ca:	2b07      	cmp	r3, #7
 801a5cc:	f63f ae93 	bhi.w	801a2f6 <tcp_input+0x326>
 801a5d0:	e8df f003 	tbb	[pc, r3]
 801a5d4:	8b0413a4 	.word	0x8b0413a4
 801a5d8:	344d0470 	.word	0x344d0470
      tcp_receive(pcb);
 801a5dc:	4630      	mov	r0, r6
 801a5de:	f7ff f847 	bl	8019670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a5e2:	f89a 3000 	ldrb.w	r3, [sl]
 801a5e6:	0699      	lsls	r1, r3, #26
 801a5e8:	f57f ae85 	bpl.w	801a2f6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801a5ec:	8b73      	ldrh	r3, [r6, #26]
        pcb->state = CLOSE_WAIT;
 801a5ee:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 801a5f0:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 801a5f4:	7532      	strb	r2, [r6, #20]
        tcp_ack_now(pcb);
 801a5f6:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801a5f8:	e67d      	b.n	801a2f6 <tcp_input+0x326>
      if (flags & TCP_ACK) {
 801a5fa:	4b5c      	ldr	r3, [pc, #368]	; (801a76c <tcp_input+0x79c>)
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	06da      	lsls	r2, r3, #27
 801a600:	f140 8228 	bpl.w	801aa54 <tcp_input+0xa84>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a604:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801a606:	4a5e      	ldr	r2, [pc, #376]	; (801a780 <tcp_input+0x7b0>)
 801a608:	43db      	mvns	r3, r3
 801a60a:	6811      	ldr	r1, [r2, #0]
 801a60c:	42cb      	cmn	r3, r1
 801a60e:	d404      	bmi.n	801a61a <tcp_input+0x64a>
 801a610:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801a612:	1acb      	subs	r3, r1, r3
 801a614:	2b00      	cmp	r3, #0
 801a616:	f340 8287 	ble.w	801ab28 <tcp_input+0xb58>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a61a:	9a05      	ldr	r2, [sp, #20]
 801a61c:	4630      	mov	r0, r6
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a61e:	683b      	ldr	r3, [r7, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a620:	8815      	ldrh	r5, [r2, #0]
 801a622:	4a53      	ldr	r2, [pc, #332]	; (801a770 <tcp_input+0x7a0>)
 801a624:	881f      	ldrh	r7, [r3, #0]
 801a626:	6812      	ldr	r2, [r2, #0]
 801a628:	9702      	str	r7, [sp, #8]
 801a62a:	442a      	add	r2, r5
 801a62c:	885b      	ldrh	r3, [r3, #2]
 801a62e:	4d55      	ldr	r5, [pc, #340]	; (801a784 <tcp_input+0x7b4>)
 801a630:	e9cd 5300 	strd	r5, r3, [sp]
 801a634:	1d2b      	adds	r3, r5, #4
 801a636:	f001 fac5 	bl	801bbc4 <tcp_rst>
    if (err != ERR_ABRT) {
 801a63a:	e65c      	b.n	801a2f6 <tcp_input+0x326>
      tcp_receive(pcb);
 801a63c:	4630      	mov	r0, r6
 801a63e:	f7ff f817 	bl	8019670 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a642:	4b4a      	ldr	r3, [pc, #296]	; (801a76c <tcp_input+0x79c>)
 801a644:	781b      	ldrb	r3, [r3, #0]
 801a646:	06d8      	lsls	r0, r3, #27
 801a648:	f57f ae55 	bpl.w	801a2f6 <tcp_input+0x326>
 801a64c:	4b4c      	ldr	r3, [pc, #304]	; (801a780 <tcp_input+0x7b0>)
 801a64e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	429a      	cmp	r2, r3
 801a654:	f47f ae4f 	bne.w	801a2f6 <tcp_input+0x326>
 801a658:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	f47f ae4b 	bne.w	801a2f6 <tcp_input+0x326>
        recv_flags |= TF_CLOSED;
 801a660:	f89a 3000 	ldrb.w	r3, [sl]
 801a664:	f043 0310 	orr.w	r3, r3, #16
 801a668:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801a66c:	e643      	b.n	801a2f6 <tcp_input+0x326>
      tcp_receive(pcb);
 801a66e:	4630      	mov	r0, r6
 801a670:	f7fe fffe 	bl	8019670 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801a674:	4b3d      	ldr	r3, [pc, #244]	; (801a76c <tcp_input+0x79c>)
 801a676:	781b      	ldrb	r3, [r3, #0]
 801a678:	06dd      	lsls	r5, r3, #27
 801a67a:	f57f ae3c 	bpl.w	801a2f6 <tcp_input+0x326>
 801a67e:	4b40      	ldr	r3, [pc, #256]	; (801a780 <tcp_input+0x7b0>)
 801a680:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	429a      	cmp	r2, r3
 801a686:	f47f ae36 	bne.w	801a2f6 <tcp_input+0x326>
 801a68a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	f47f ae32 	bne.w	801a2f6 <tcp_input+0x326>
        tcp_pcb_purge(pcb);
 801a692:	4630      	mov	r0, r6
 801a694:	f7fd fe8a 	bl	80183ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a698:	4b36      	ldr	r3, [pc, #216]	; (801a774 <tcp_input+0x7a4>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	42b3      	cmp	r3, r6
 801a69e:	f000 8082 	beq.w	801a7a6 <tcp_input+0x7d6>
 801a6a2:	2b00      	cmp	r3, #0
 801a6a4:	f000 8082 	beq.w	801a7ac <tcp_input+0x7dc>
 801a6a8:	68da      	ldr	r2, [r3, #12]
 801a6aa:	42b2      	cmp	r2, r6
 801a6ac:	f000 8223 	beq.w	801aaf6 <tcp_input+0xb26>
 801a6b0:	4613      	mov	r3, r2
 801a6b2:	e7f6      	b.n	801a6a2 <tcp_input+0x6d2>
      tcp_receive(pcb);
 801a6b4:	4630      	mov	r0, r6
 801a6b6:	f7fe ffdb 	bl	8019670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a6ba:	f89a 3000 	ldrb.w	r3, [sl]
 801a6be:	069f      	lsls	r7, r3, #26
 801a6c0:	f57f ae19 	bpl.w	801a2f6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801a6c4:	8b73      	ldrh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801a6c6:	4630      	mov	r0, r6
        tcp_ack_now(pcb);
 801a6c8:	f043 0302 	orr.w	r3, r3, #2
 801a6cc:	8373      	strh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801a6ce:	f7fd fe6d 	bl	80183ac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801a6d2:	4b28      	ldr	r3, [pc, #160]	; (801a774 <tcp_input+0x7a4>)
 801a6d4:	681b      	ldr	r3, [r3, #0]
 801a6d6:	42b3      	cmp	r3, r6
 801a6d8:	d065      	beq.n	801a7a6 <tcp_input+0x7d6>
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d066      	beq.n	801a7ac <tcp_input+0x7dc>
 801a6de:	68da      	ldr	r2, [r3, #12]
 801a6e0:	42b2      	cmp	r2, r6
 801a6e2:	f000 8208 	beq.w	801aaf6 <tcp_input+0xb26>
 801a6e6:	4613      	mov	r3, r2
 801a6e8:	e7f7      	b.n	801a6da <tcp_input+0x70a>
      tcp_receive(pcb);
 801a6ea:	4630      	mov	r0, r6
 801a6ec:	f7fe ffc0 	bl	8019670 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a6f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a6f4:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a6f8:	4b1c      	ldr	r3, [pc, #112]	; (801a76c <tcp_input+0x79c>)
 801a6fa:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801a6fc:	f000 819a 	beq.w	801aa34 <tcp_input+0xa64>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a700:	06da      	lsls	r2, r3, #27
 801a702:	d504      	bpl.n	801a70e <tcp_input+0x73e>
 801a704:	4b1e      	ldr	r3, [pc, #120]	; (801a780 <tcp_input+0x7b0>)
 801a706:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	429a      	cmp	r2, r3
 801a70c:	d03c      	beq.n	801a788 <tcp_input+0x7b8>
          tcp_ack_now(pcb);
 801a70e:	8b73      	ldrh	r3, [r6, #26]
          pcb->state = CLOSING;
 801a710:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 801a712:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 801a716:	7532      	strb	r2, [r6, #20]
          tcp_ack_now(pcb);
 801a718:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801a71a:	e5ec      	b.n	801a2f6 <tcp_input+0x326>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a71c:	4b13      	ldr	r3, [pc, #76]	; (801a76c <tcp_input+0x79c>)
 801a71e:	781b      	ldrb	r3, [r3, #0]
 801a720:	f003 0212 	and.w	r2, r3, #18
 801a724:	2a12      	cmp	r2, #18
 801a726:	f000 80dd 	beq.w	801a8e4 <tcp_input+0x914>
      else if (flags & TCP_ACK) {
 801a72a:	06d9      	lsls	r1, r3, #27
 801a72c:	f57f ade3 	bpl.w	801a2f6 <tcp_input+0x326>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a730:	9a05      	ldr	r2, [sp, #20]
 801a732:	4630      	mov	r0, r6
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a734:	683b      	ldr	r3, [r7, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a736:	8811      	ldrh	r1, [r2, #0]
 801a738:	4a0d      	ldr	r2, [pc, #52]	; (801a770 <tcp_input+0x7a0>)
 801a73a:	881d      	ldrh	r5, [r3, #0]
 801a73c:	6812      	ldr	r2, [r2, #0]
 801a73e:	9502      	str	r5, [sp, #8]
 801a740:	440a      	add	r2, r1
 801a742:	885b      	ldrh	r3, [r3, #2]
 801a744:	490e      	ldr	r1, [pc, #56]	; (801a780 <tcp_input+0x7b0>)
 801a746:	6809      	ldr	r1, [r1, #0]
 801a748:	9301      	str	r3, [sp, #4]
 801a74a:	4b0e      	ldr	r3, [pc, #56]	; (801a784 <tcp_input+0x7b4>)
 801a74c:	9300      	str	r3, [sp, #0]
 801a74e:	3304      	adds	r3, #4
 801a750:	f001 fa38 	bl	801bbc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a754:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 801a758:	2b05      	cmp	r3, #5
 801a75a:	f63f adcc 	bhi.w	801a2f6 <tcp_input+0x326>
          pcb->rtime = 0;
 801a75e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801a760:	4630      	mov	r0, r6
          pcb->rtime = 0;
 801a762:	8633      	strh	r3, [r6, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801a764:	f001 fcca 	bl	801c0fc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801a768:	e5c5      	b.n	801a2f6 <tcp_input+0x326>
 801a76a:	bf00      	nop
 801a76c:	200229c4 	.word	0x200229c4
 801a770:	200229e4 	.word	0x200229e4
 801a774:	200368a0 	.word	0x200368a0
 801a778:	2003689c 	.word	0x2003689c
 801a77c:	200368a4 	.word	0x200368a4
 801a780:	200229c0 	.word	0x200229c0
 801a784:	200270ac 	.word	0x200270ac
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a788:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d1bf      	bne.n	801a70e <tcp_input+0x73e>
          tcp_ack_now(pcb);
 801a78e:	8b73      	ldrh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801a790:	4630      	mov	r0, r6
          tcp_ack_now(pcb);
 801a792:	f043 0302 	orr.w	r3, r3, #2
 801a796:	8373      	strh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801a798:	f7fd fe08 	bl	80183ac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a79c:	4bb4      	ldr	r3, [pc, #720]	; (801aa70 <tcp_input+0xaa0>)
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	42b3      	cmp	r3, r6
 801a7a2:	f040 81b9 	bne.w	801ab18 <tcp_input+0xb48>
        TCP_RMV_ACTIVE(pcb);
 801a7a6:	68f3      	ldr	r3, [r6, #12]
 801a7a8:	4ab1      	ldr	r2, [pc, #708]	; (801aa70 <tcp_input+0xaa0>)
 801a7aa:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a7ac:	4bb1      	ldr	r3, [pc, #708]	; (801aa74 <tcp_input+0xaa4>)
        pcb->state = TIME_WAIT;
 801a7ae:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 801a7b0:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a7b2:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801a7b4:	7530      	strb	r0, [r6, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a7b6:	60f2      	str	r2, [r6, #12]
        TCP_RMV_ACTIVE(pcb);
 801a7b8:	4aaf      	ldr	r2, [pc, #700]	; (801aa78 <tcp_input+0xaa8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a7ba:	601e      	str	r6, [r3, #0]
        TCP_RMV_ACTIVE(pcb);
 801a7bc:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801a7be:	f001 fdb5 	bl	801c32c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801a7c2:	e598      	b.n	801a2f6 <tcp_input+0x326>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801a7c4:	4bad      	ldr	r3, [pc, #692]	; (801aa7c <tcp_input+0xaac>)
 801a7c6:	22c2      	movs	r2, #194	; 0xc2
 801a7c8:	49ad      	ldr	r1, [pc, #692]	; (801aa80 <tcp_input+0xab0>)
 801a7ca:	48ae      	ldr	r0, [pc, #696]	; (801aa84 <tcp_input+0xab4>)
 801a7cc:	f007 f80a 	bl	80217e4 <iprintf>
 801a7d0:	e469      	b.n	801a0a6 <tcp_input+0xd6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801a7d2:	4baa      	ldr	r3, [pc, #680]	; (801aa7c <tcp_input+0xaac>)
 801a7d4:	22df      	movs	r2, #223	; 0xdf
 801a7d6:	49ac      	ldr	r1, [pc, #688]	; (801aa88 <tcp_input+0xab8>)
 801a7d8:	48aa      	ldr	r0, [pc, #680]	; (801aa84 <tcp_input+0xab4>)
 801a7da:	f007 f803 	bl	80217e4 <iprintf>
 801a7de:	8923      	ldrh	r3, [r4, #8]
 801a7e0:	e486      	b.n	801a0f0 <tcp_input+0x120>
        if (pcb->rcv_ann_wnd == 0) {
 801a7e2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 801a7e4:	2b00      	cmp	r3, #0
 801a7e6:	f000 80ec 	beq.w	801a9c2 <tcp_input+0x9f2>
        TCP_STATS_INC(tcp.drop);
 801a7ea:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 801a7ee:	4ca7      	ldr	r4, [pc, #668]	; (801aa8c <tcp_input+0xabc>)
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
        goto aborted;
 801a7f6:	e591      	b.n	801a31c <tcp_input+0x34c>
        if (recv_acked > 0) {
 801a7f8:	f8bb 2000 	ldrh.w	r2, [fp]
 801a7fc:	b15a      	cbz	r2, 801a816 <tcp_input+0x846>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801a7fe:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801a802:	b12b      	cbz	r3, 801a810 <tcp_input+0x840>
 801a804:	4631      	mov	r1, r6
 801a806:	6930      	ldr	r0, [r6, #16]
 801a808:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801a80a:	300d      	adds	r0, #13
 801a80c:	f43f ad86 	beq.w	801a31c <tcp_input+0x34c>
          recv_acked = 0;
 801a810:	2300      	movs	r3, #0
 801a812:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801a816:	4630      	mov	r0, r6
 801a818:	f7fe fe8e 	bl	8019538 <tcp_input_delayed_close>
 801a81c:	2800      	cmp	r0, #0
 801a81e:	f47f ad7d 	bne.w	801a31c <tcp_input+0x34c>
        if (recv_data != NULL) {
 801a822:	f8d9 3000 	ldr.w	r3, [r9]
 801a826:	b1fb      	cbz	r3, 801a868 <tcp_input+0x898>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801a828:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801a82a:	b133      	cbz	r3, 801a83a <tcp_input+0x86a>
 801a82c:	4b93      	ldr	r3, [pc, #588]	; (801aa7c <tcp_input+0xaac>)
 801a82e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801a832:	4997      	ldr	r1, [pc, #604]	; (801aa90 <tcp_input+0xac0>)
 801a834:	4893      	ldr	r0, [pc, #588]	; (801aa84 <tcp_input+0xab4>)
 801a836:	f006 ffd5 	bl	80217e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801a83a:	8b73      	ldrh	r3, [r6, #26]
 801a83c:	f013 0310 	ands.w	r3, r3, #16
 801a840:	f040 80f0 	bne.w	801aa24 <tcp_input+0xa54>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801a844:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801a848:	2d00      	cmp	r5, #0
 801a84a:	f000 812b 	beq.w	801aaa4 <tcp_input+0xad4>
 801a84e:	f8d9 2000 	ldr.w	r2, [r9]
 801a852:	4631      	mov	r1, r6
 801a854:	6930      	ldr	r0, [r6, #16]
 801a856:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 801a858:	f110 0f0d 	cmn.w	r0, #13
 801a85c:	f43f ad5e 	beq.w	801a31c <tcp_input+0x34c>
          if (err != ERR_OK) {
 801a860:	b110      	cbz	r0, 801a868 <tcp_input+0x898>
            pcb->refused_data = recv_data;
 801a862:	f8d9 3000 	ldr.w	r3, [r9]
 801a866:	67b3      	str	r3, [r6, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801a868:	f89a 3000 	ldrb.w	r3, [sl]
 801a86c:	069a      	lsls	r2, r3, #26
 801a86e:	d507      	bpl.n	801a880 <tcp_input+0x8b0>
          if (pcb->refused_data != NULL) {
 801a870:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801a872:	2b00      	cmp	r3, #0
 801a874:	f000 80c2 	beq.w	801a9fc <tcp_input+0xa2c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801a878:	7b5a      	ldrb	r2, [r3, #13]
 801a87a:	f042 0220 	orr.w	r2, r2, #32
 801a87e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801a880:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801a882:	4630      	mov	r0, r6
        tcp_input_pcb = NULL;
 801a884:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801a886:	f7fe fe57 	bl	8019538 <tcp_input_delayed_close>
 801a88a:	2800      	cmp	r0, #0
 801a88c:	f47f ad46 	bne.w	801a31c <tcp_input+0x34c>
        tcp_output(pcb);
 801a890:	4630      	mov	r0, r6
 801a892:	f001 fa17 	bl	801bcc4 <tcp_output>
 801a896:	e541      	b.n	801a31c <tcp_input+0x34c>
 801a898:	6839      	ldr	r1, [r7, #0]
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801a89a:	8988      	ldrh	r0, [r1, #12]
 801a89c:	f7fb f836 	bl	801590c <lwip_htons>
 801a8a0:	f010 0004 	ands.w	r0, r0, #4
 801a8a4:	f47f adab 	bne.w	801a3fe <tcp_input+0x42e>
      TCP_STATS_INC(tcp.proterr);
 801a8a8:	f8b5 10a0 	ldrh.w	r1, [r5, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801a8ac:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a8b0:	683e      	ldr	r6, [r7, #0]
      TCP_STATS_INC(tcp.proterr);
 801a8b2:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a8b4:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 801a8b6:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 801a8b8:	f8a5 10a0 	strh.w	r1, [r5, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a8bc:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 801a8be:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a8c2:	4a74      	ldr	r2, [pc, #464]	; (801aa94 <tcp_input+0xac4>)
 801a8c4:	8833      	ldrh	r3, [r6, #0]
 801a8c6:	4974      	ldr	r1, [pc, #464]	; (801aa98 <tcp_input+0xac8>)
 801a8c8:	6812      	ldr	r2, [r2, #0]
 801a8ca:	6809      	ldr	r1, [r1, #0]
 801a8cc:	9302      	str	r3, [sp, #8]
 801a8ce:	443a      	add	r2, r7
 801a8d0:	8875      	ldrh	r5, [r6, #2]
 801a8d2:	4b72      	ldr	r3, [pc, #456]	; (801aa9c <tcp_input+0xacc>)
 801a8d4:	9501      	str	r5, [sp, #4]
 801a8d6:	1f1d      	subs	r5, r3, #4
 801a8d8:	9500      	str	r5, [sp, #0]
 801a8da:	f001 f973 	bl	801bbc4 <tcp_rst>
        pbuf_free(p);
 801a8de:	4620      	mov	r0, r4
 801a8e0:	f7ff bb95 	b.w	801a00e <tcp_input+0x3e>
          && (ackno == pcb->lastack + 1)) {
 801a8e4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801a8e6:	4a6c      	ldr	r2, [pc, #432]	; (801aa98 <tcp_input+0xac8>)
 801a8e8:	3101      	adds	r1, #1
 801a8ea:	6812      	ldr	r2, [r2, #0]
 801a8ec:	4291      	cmp	r1, r2
 801a8ee:	f47f af1c 	bne.w	801a72a <tcp_input+0x75a>
        pcb->rcv_nxt = seqno + 1;
 801a8f2:	4b68      	ldr	r3, [pc, #416]	; (801aa94 <tcp_input+0xac4>)
        pcb->state = ESTABLISHED;
 801a8f4:	2504      	movs	r5, #4
        pcb->snd_wnd = tcphdr->wnd;
 801a8f6:	f8d7 c000 	ldr.w	ip, [r7]
        pcb->rcv_nxt = seqno + 1;
 801a8fa:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a8fc:	1972      	adds	r2, r6, r5
        pcb->lastack = ackno;
 801a8fe:	6471      	str	r1, [r6, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 801a900:	1c5f      	adds	r7, r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a902:	9205      	str	r2, [sp, #20]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a904:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a906:	4610      	mov	r0, r2
        pcb->rcv_nxt = seqno + 1;
 801a908:	6277      	str	r7, [r6, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a90a:	62f7      	str	r7, [r6, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801a90c:	f8bc 100e 	ldrh.w	r1, [ip, #14]
        pcb->state = ESTABLISHED;
 801a910:	7535      	strb	r5, [r6, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a912:	8e75      	ldrh	r5, [r6, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a914:	6573      	str	r3, [r6, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 801a916:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a91a:	f8a6 1062 	strh.w	r1, [r6, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a91e:	f004 fb0f 	bl	801ef40 <ip4_route>
 801a922:	9a05      	ldr	r2, [sp, #20]
 801a924:	4601      	mov	r1, r0
 801a926:	4628      	mov	r0, r5
 801a928:	f7fe fc0a 	bl	8019140 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a92c:	f241 131c 	movw	r3, #4380	; 0x111c
 801a930:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a932:	8670      	strh	r0, [r6, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a934:	0081      	lsls	r1, r0, #2
 801a936:	429a      	cmp	r2, r3
 801a938:	4615      	mov	r5, r2
 801a93a:	bf38      	it	cc
 801a93c:	461d      	movcc	r5, r3
 801a93e:	ebb5 0f80 	cmp.w	r5, r0, lsl #2
 801a942:	f240 815d 	bls.w	801ac00 <tcp_input+0xc30>
 801a946:	b28b      	uxth	r3, r1
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a948:	f8b6 2066 	ldrh.w	r2, [r6, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a94c:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a950:	2a00      	cmp	r2, #0
 801a952:	f000 814d 	beq.w	801abf0 <tcp_input+0xc20>
        --pcb->snd_queuelen;
 801a956:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        rseg = pcb->unacked;
 801a95a:	6f35      	ldr	r5, [r6, #112]	; 0x70
        --pcb->snd_queuelen;
 801a95c:	3b01      	subs	r3, #1
 801a95e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
        if (rseg == NULL) {
 801a962:	2d00      	cmp	r5, #0
 801a964:	f000 813f 	beq.w	801abe6 <tcp_input+0xc16>
          pcb->unacked = rseg->next;
 801a968:	682b      	ldr	r3, [r5, #0]
 801a96a:	6733      	str	r3, [r6, #112]	; 0x70
        tcp_seg_free(rseg);
 801a96c:	4628      	mov	r0, r5
 801a96e:	f7fd fc49 	bl	8018204 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801a972:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801a974:	2b00      	cmp	r3, #0
 801a976:	f000 8132 	beq.w	801abde <tcp_input+0xc0e>
          pcb->rtime = 0;
 801a97a:	2300      	movs	r3, #0
 801a97c:	8633      	strh	r3, [r6, #48]	; 0x30
          pcb->nrtx = 0;
 801a97e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a982:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801a986:	b133      	cbz	r3, 801a996 <tcp_input+0x9c6>
 801a988:	2200      	movs	r2, #0
 801a98a:	4631      	mov	r1, r6
 801a98c:	6930      	ldr	r0, [r6, #16]
 801a98e:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801a990:	300d      	adds	r0, #13
 801a992:	f43f acc3 	beq.w	801a31c <tcp_input+0x34c>
        tcp_ack_now(pcb);
 801a996:	8b73      	ldrh	r3, [r6, #26]
 801a998:	f043 0302 	orr.w	r3, r3, #2
 801a99c:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801a99e:	e4aa      	b.n	801a2f6 <tcp_input+0x326>
      if (ackno == pcb->snd_nxt) {
 801a9a0:	4b3d      	ldr	r3, [pc, #244]	; (801aa98 <tcp_input+0xac8>)
 801a9a2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	429a      	cmp	r2, r3
 801a9a8:	f47f aca5 	bne.w	801a2f6 <tcp_input+0x326>
      recv_flags |= TF_RESET;
 801a9ac:	f89a 2000 	ldrb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a9b0:	8b73      	ldrh	r3, [r6, #26]
      recv_flags |= TF_RESET;
 801a9b2:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a9b6:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 801a9ba:	f88a 2000 	strb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a9be:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801a9c0:	e499      	b.n	801a2f6 <tcp_input+0x326>
          tcp_send_empty_ack(pcb);
 801a9c2:	4630      	mov	r0, r6
 801a9c4:	f001 f94a 	bl	801bc5c <tcp_send_empty_ack>
 801a9c8:	e70f      	b.n	801a7ea <tcp_input+0x81a>
        TCP_STATS_INC(tcp.cachehit);
 801a9ca:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801a9ce:	3201      	adds	r2, #1
 801a9d0:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801a9d4:	e573      	b.n	801a4be <tcp_input+0x4ee>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a9d6:	9a05      	ldr	r2, [sp, #20]
 801a9d8:	4630      	mov	r0, r6
 801a9da:	8809      	ldrh	r1, [r1, #0]
 801a9dc:	8815      	ldrh	r5, [r2, #0]
 801a9de:	4a2d      	ldr	r2, [pc, #180]	; (801aa94 <tcp_input+0xac4>)
 801a9e0:	6812      	ldr	r2, [r2, #0]
 801a9e2:	442a      	add	r2, r5
 801a9e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801a9e8:	4b2d      	ldr	r3, [pc, #180]	; (801aaa0 <tcp_input+0xad0>)
 801a9ea:	9300      	str	r3, [sp, #0]
 801a9ec:	4b2a      	ldr	r3, [pc, #168]	; (801aa98 <tcp_input+0xac8>)
 801a9ee:	6819      	ldr	r1, [r3, #0]
 801a9f0:	4b2a      	ldr	r3, [pc, #168]	; (801aa9c <tcp_input+0xacc>)
 801a9f2:	f001 f8e7 	bl	801bbc4 <tcp_rst>
        pbuf_free(p);
 801a9f6:	4620      	mov	r0, r4
 801a9f8:	f7ff bb09 	b.w	801a00e <tcp_input+0x3e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a9fc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801a9fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801aa02:	d001      	beq.n	801aa08 <tcp_input+0xa38>
              pcb->rcv_wnd++;
 801aa04:	3301      	adds	r3, #1
 801aa06:	8533      	strh	r3, [r6, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801aa08:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801aa0c:	2d00      	cmp	r5, #0
 801aa0e:	f43f af37 	beq.w	801a880 <tcp_input+0x8b0>
 801aa12:	2300      	movs	r3, #0
 801aa14:	4631      	mov	r1, r6
 801aa16:	6930      	ldr	r0, [r6, #16]
 801aa18:	461a      	mov	r2, r3
 801aa1a:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 801aa1c:	300d      	adds	r0, #13
 801aa1e:	f47f af2f 	bne.w	801a880 <tcp_input+0x8b0>
 801aa22:	e47b      	b.n	801a31c <tcp_input+0x34c>
            pbuf_free(recv_data);
 801aa24:	f8d9 0000 	ldr.w	r0, [r9]
 801aa28:	f7fc fdc4 	bl	80175b4 <pbuf_free>
            tcp_abort(pcb);
 801aa2c:	4630      	mov	r0, r6
 801aa2e:	f7fe f885 	bl	8018b3c <tcp_abort>
            goto aborted;
 801aa32:	e473      	b.n	801a31c <tcp_input+0x34c>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801aa34:	06db      	lsls	r3, r3, #27
 801aa36:	f57f ac5e 	bpl.w	801a2f6 <tcp_input+0x326>
 801aa3a:	4b17      	ldr	r3, [pc, #92]	; (801aa98 <tcp_input+0xac8>)
 801aa3c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	f47f ac58 	bne.w	801a2f6 <tcp_input+0x326>
 801aa46:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	f47f ac54 	bne.w	801a2f6 <tcp_input+0x326>
        pcb->state = FIN_WAIT_2;
 801aa4e:	2306      	movs	r3, #6
 801aa50:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801aa52:	e450      	b.n	801a2f6 <tcp_input+0x326>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801aa54:	0798      	lsls	r0, r3, #30
 801aa56:	f57f ac4e 	bpl.w	801a2f6 <tcp_input+0x326>
 801aa5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801aa5c:	4a0d      	ldr	r2, [pc, #52]	; (801aa94 <tcp_input+0xac4>)
 801aa5e:	3b01      	subs	r3, #1
 801aa60:	6812      	ldr	r2, [r2, #0]
 801aa62:	4293      	cmp	r3, r2
 801aa64:	f47f ac47 	bne.w	801a2f6 <tcp_input+0x326>
        tcp_rexmit(pcb);
 801aa68:	4630      	mov	r0, r6
 801aa6a:	f001 f82d 	bl	801bac8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801aa6e:	e442      	b.n	801a2f6 <tcp_input+0x326>
 801aa70:	200368a0 	.word	0x200368a0
 801aa74:	200368b0 	.word	0x200368b0
 801aa78:	2003689c 	.word	0x2003689c
 801aa7c:	0803f74c 	.word	0x0803f74c
 801aa80:	0803f970 	.word	0x0803f970
 801aa84:	08027fec 	.word	0x08027fec
 801aa88:	0803f980 	.word	0x0803f980
 801aa8c:	200368b4 	.word	0x200368b4
 801aa90:	0803fb1c 	.word	0x0803fb1c
 801aa94:	200229e4 	.word	0x200229e4
 801aa98:	200229c0 	.word	0x200229c0
 801aa9c:	200270b0 	.word	0x200270b0
 801aaa0:	200270ac 	.word	0x200270ac
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801aaa4:	462b      	mov	r3, r5
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f8d9 2000 	ldr.w	r2, [r9]
 801aaac:	4631      	mov	r1, r6
 801aaae:	f7fe fa69 	bl	8018f84 <tcp_recv_null>
 801aab2:	e6d1      	b.n	801a858 <tcp_input+0x888>
      TCP_STATS_INC(tcp.memerr);
 801aab4:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801aab8:	69b7      	ldr	r7, [r6, #24]
      TCP_STATS_INC(tcp.memerr);
 801aaba:	3301      	adds	r3, #1
 801aabc:	f8a5 309c 	strh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801aac0:	2f00      	cmp	r7, #0
 801aac2:	f43f ac9c 	beq.w	801a3fe <tcp_input+0x42e>
 801aac6:	4601      	mov	r1, r0
 801aac8:	f04f 32ff 	mov.w	r2, #4294967295
 801aacc:	6930      	ldr	r0, [r6, #16]
 801aace:	47b8      	blx	r7
        pbuf_free(p);
 801aad0:	4620      	mov	r0, r4
 801aad2:	f7ff ba9c 	b.w	801a00e <tcp_input+0x3e>
        TCP_STATS_INC(tcp.cachehit);
 801aad6:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801aada:	3201      	adds	r2, #1
 801aadc:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801aae0:	f7ff bbbe 	b.w	801a260 <tcp_input+0x290>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801aae4:	4b4c      	ldr	r3, [pc, #304]	; (801ac18 <tcp_input+0xc48>)
 801aae6:	f240 1215 	movw	r2, #277	; 0x115
 801aaea:	494c      	ldr	r1, [pc, #304]	; (801ac1c <tcp_input+0xc4c>)
 801aaec:	484c      	ldr	r0, [pc, #304]	; (801ac20 <tcp_input+0xc50>)
 801aaee:	f006 fe79 	bl	80217e4 <iprintf>
 801aaf2:	f7ff bbb8 	b.w	801a266 <tcp_input+0x296>
        TCP_RMV_ACTIVE(pcb);
 801aaf6:	68f2      	ldr	r2, [r6, #12]
 801aaf8:	60da      	str	r2, [r3, #12]
 801aafa:	e657      	b.n	801a7ac <tcp_input+0x7dc>
  } else if (flags & TCP_FIN) {
 801aafc:	07d5      	lsls	r5, r2, #31
 801aafe:	f57f ac79 	bpl.w	801a3f4 <tcp_input+0x424>
    pcb->tmr = tcp_ticks;
 801ab02:	4b48      	ldr	r3, [pc, #288]	; (801ac24 <tcp_input+0xc54>)
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	6233      	str	r3, [r6, #32]
 801ab08:	e474      	b.n	801a3f4 <tcp_input+0x424>
      tcp_abandon(npcb, 0);
 801ab0a:	4650      	mov	r0, sl
 801ab0c:	4649      	mov	r1, r9
 801ab0e:	f7fd ff75 	bl	80189fc <tcp_abandon>
        pbuf_free(p);
 801ab12:	4620      	mov	r0, r4
 801ab14:	f7ff ba7b 	b.w	801a00e <tcp_input+0x3e>
          TCP_RMV_ACTIVE(pcb);
 801ab18:	2b00      	cmp	r3, #0
 801ab1a:	f43f ae47 	beq.w	801a7ac <tcp_input+0x7dc>
 801ab1e:	68da      	ldr	r2, [r3, #12]
 801ab20:	42b2      	cmp	r2, r6
 801ab22:	d0e8      	beq.n	801aaf6 <tcp_input+0xb26>
 801ab24:	4613      	mov	r3, r2
 801ab26:	e7f7      	b.n	801ab18 <tcp_input+0xb48>
          pcb->state = ESTABLISHED;
 801ab28:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 801ab2a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 801ab2c:	7532      	strb	r2, [r6, #20]
          if (pcb->listener == NULL) {
 801ab2e:	2b00      	cmp	r3, #0
 801ab30:	f43f af7c 	beq.w	801aa2c <tcp_input+0xa5c>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801ab34:	699b      	ldr	r3, [r3, #24]
 801ab36:	b353      	cbz	r3, 801ab8e <tcp_input+0xbbe>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801ab38:	2200      	movs	r2, #0
 801ab3a:	4631      	mov	r1, r6
 801ab3c:	6930      	ldr	r0, [r6, #16]
 801ab3e:	4798      	blx	r3
          if (err != ERR_OK) {
 801ab40:	b9e8      	cbnz	r0, 801ab7e <tcp_input+0xbae>
          tcp_receive(pcb);
 801ab42:	4630      	mov	r0, r6
 801ab44:	f7fe fd94 	bl	8019670 <tcp_receive>
          if (recv_acked != 0) {
 801ab48:	f8bb 3000 	ldrh.w	r3, [fp]
 801ab4c:	b113      	cbz	r3, 801ab54 <tcp_input+0xb84>
            recv_acked--;
 801ab4e:	3b01      	subs	r3, #1
 801ab50:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ab54:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 801ab56:	f241 131c 	movw	r3, #4380	; 0x111c
 801ab5a:	004a      	lsls	r2, r1, #1
 801ab5c:	0088      	lsls	r0, r1, #2
 801ab5e:	429a      	cmp	r2, r3
 801ab60:	4615      	mov	r5, r2
 801ab62:	bf38      	it	cc
 801ab64:	461d      	movcc	r5, r3
 801ab66:	ebb5 0f81 	cmp.w	r5, r1, lsl #2
 801ab6a:	d90c      	bls.n	801ab86 <tcp_input+0xbb6>
 801ab6c:	b283      	uxth	r3, r0
          if (recv_flags & TF_GOT_FIN) {
 801ab6e:	f89a 2000 	ldrb.w	r2, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ab72:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801ab76:	0695      	lsls	r5, r2, #26
 801ab78:	f57f abbd 	bpl.w	801a2f6 <tcp_input+0x326>
 801ab7c:	e536      	b.n	801a5ec <tcp_input+0x61c>
            if (err != ERR_ABRT) {
 801ab7e:	300d      	adds	r0, #13
 801ab80:	f43f abcc 	beq.w	801a31c <tcp_input+0x34c>
 801ab84:	e752      	b.n	801aa2c <tcp_input+0xa5c>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ab86:	429a      	cmp	r2, r3
 801ab88:	bf88      	it	hi
 801ab8a:	b293      	uxthhi	r3, r2
 801ab8c:	e7ef      	b.n	801ab6e <tcp_input+0xb9e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801ab8e:	4b22      	ldr	r3, [pc, #136]	; (801ac18 <tcp_input+0xc48>)
 801ab90:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801ab94:	4924      	ldr	r1, [pc, #144]	; (801ac28 <tcp_input+0xc58>)
 801ab96:	4822      	ldr	r0, [pc, #136]	; (801ac20 <tcp_input+0xc50>)
 801ab98:	f006 fe24 	bl	80217e4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801ab9c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 801ab9e:	699b      	ldr	r3, [r3, #24]
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	d1c9      	bne.n	801ab38 <tcp_input+0xb68>
 801aba4:	e742      	b.n	801aa2c <tcp_input+0xa5c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801aba6:	2900      	cmp	r1, #0
 801aba8:	f47f af00 	bne.w	801a9ac <tcp_input+0x9dc>
 801abac:	4b1a      	ldr	r3, [pc, #104]	; (801ac18 <tcp_input+0xc48>)
 801abae:	f44f 724e 	mov.w	r2, #824	; 0x338
 801abb2:	491e      	ldr	r1, [pc, #120]	; (801ac2c <tcp_input+0xc5c>)
 801abb4:	481a      	ldr	r0, [pc, #104]	; (801ac20 <tcp_input+0xc50>)
 801abb6:	f006 fe15 	bl	80217e4 <iprintf>
 801abba:	e6f7      	b.n	801a9ac <tcp_input+0x9dc>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801abbc:	9805      	ldr	r0, [sp, #20]
 801abbe:	8805      	ldrh	r5, [r0, #0]
 801abc0:	4630      	mov	r0, r6
 801abc2:	9102      	str	r1, [sp, #8]
 801abc4:	442a      	add	r2, r5
 801abc6:	9301      	str	r3, [sp, #4]
 801abc8:	e70e      	b.n	801a9e8 <tcp_input+0xa18>
    tcp_ack_now(pcb);
 801abca:	8b73      	ldrh	r3, [r6, #26]
    tcp_output(pcb);
 801abcc:	4630      	mov	r0, r6
    tcp_ack_now(pcb);
 801abce:	f043 0302 	orr.w	r3, r3, #2
 801abd2:	8373      	strh	r3, [r6, #26]
    tcp_output(pcb);
 801abd4:	f001 f876 	bl	801bcc4 <tcp_output>
        pbuf_free(p);
 801abd8:	4620      	mov	r0, r4
 801abda:	f7ff ba18 	b.w	801a00e <tcp_input+0x3e>
          pcb->rtime = -1;
 801abde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801abe2:	8633      	strh	r3, [r6, #48]	; 0x30
 801abe4:	e6cd      	b.n	801a982 <tcp_input+0x9b2>
          rseg = pcb->unsent;
 801abe6:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801abe8:	b175      	cbz	r5, 801ac08 <tcp_input+0xc38>
          pcb->unsent = rseg->next;
 801abea:	682b      	ldr	r3, [r5, #0]
 801abec:	66f3      	str	r3, [r6, #108]	; 0x6c
 801abee:	e6bd      	b.n	801a96c <tcp_input+0x99c>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801abf0:	4b09      	ldr	r3, [pc, #36]	; (801ac18 <tcp_input+0xc48>)
 801abf2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801abf6:	490e      	ldr	r1, [pc, #56]	; (801ac30 <tcp_input+0xc60>)
 801abf8:	4809      	ldr	r0, [pc, #36]	; (801ac20 <tcp_input+0xc50>)
 801abfa:	f006 fdf3 	bl	80217e4 <iprintf>
 801abfe:	e6aa      	b.n	801a956 <tcp_input+0x986>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ac00:	429a      	cmp	r2, r3
 801ac02:	bf88      	it	hi
 801ac04:	b293      	uxthhi	r3, r2
 801ac06:	e69f      	b.n	801a948 <tcp_input+0x978>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801ac08:	4b03      	ldr	r3, [pc, #12]	; (801ac18 <tcp_input+0xc48>)
 801ac0a:	f44f 725d 	mov.w	r2, #884	; 0x374
 801ac0e:	4909      	ldr	r1, [pc, #36]	; (801ac34 <tcp_input+0xc64>)
 801ac10:	4803      	ldr	r0, [pc, #12]	; (801ac20 <tcp_input+0xc50>)
 801ac12:	f006 fde7 	bl	80217e4 <iprintf>
 801ac16:	e7e8      	b.n	801abea <tcp_input+0xc1a>
 801ac18:	0803f74c 	.word	0x0803f74c
 801ac1c:	0803fa54 	.word	0x0803fa54
 801ac20:	08027fec 	.word	0x08027fec
 801ac24:	200368a4 	.word	0x200368a4
 801ac28:	0803fafc 	.word	0x0803fafc
 801ac2c:	0803fab0 	.word	0x0803fab0
 801ac30:	0803fad0 	.word	0x0803fad0
 801ac34:	0803fae8 	.word	0x0803fae8

0801ac38 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801ac38:	4a02      	ldr	r2, [pc, #8]	; (801ac44 <tcp_trigger_input_pcb_close+0xc>)
 801ac3a:	7813      	ldrb	r3, [r2, #0]
 801ac3c:	f043 0310 	orr.w	r3, r3, #16
 801ac40:	7013      	strb	r3, [r2, #0]
}
 801ac42:	4770      	bx	lr
 801ac44:	200229e0 	.word	0x200229e0

0801ac48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ac48:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ac4a:	4604      	mov	r4, r0
 801ac4c:	b128      	cbz	r0, 801ac5a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ac4e:	6863      	ldr	r3, [r4, #4]
 801ac50:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 801ac52:	3801      	subs	r0, #1
 801ac54:	bf18      	it	ne
 801ac56:	2001      	movne	r0, #1
 801ac58:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ac5a:	4b04      	ldr	r3, [pc, #16]	; (801ac6c <tcp_output_segment_busy+0x24>)
 801ac5c:	f240 529a 	movw	r2, #1434	; 0x59a
 801ac60:	4903      	ldr	r1, [pc, #12]	; (801ac70 <tcp_output_segment_busy+0x28>)
 801ac62:	4804      	ldr	r0, [pc, #16]	; (801ac74 <tcp_output_segment_busy+0x2c>)
 801ac64:	f006 fdbe 	bl	80217e4 <iprintf>
 801ac68:	e7f1      	b.n	801ac4e <tcp_output_segment_busy+0x6>
 801ac6a:	bf00      	nop
 801ac6c:	0803fb38 	.word	0x0803fb38
 801ac70:	0803fb6c 	.word	0x0803fb6c
 801ac74:	08027fec 	.word	0x08027fec

0801ac78 <tcp_pbuf_prealloc>:
{
 801ac78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac7c:	9f08      	ldr	r7, [sp, #32]
 801ac7e:	4680      	mov	r8, r0
 801ac80:	460d      	mov	r5, r1
 801ac82:	4614      	mov	r4, r2
 801ac84:	461e      	mov	r6, r3
 801ac86:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801ac8a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801ac8e:	2f00      	cmp	r7, #0
 801ac90:	d033      	beq.n	801acfa <tcp_pbuf_prealloc+0x82>
  if (length < max_length) {
 801ac92:	42a5      	cmp	r5, r4
 801ac94:	d20e      	bcs.n	801acb4 <tcp_pbuf_prealloc+0x3c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801ac96:	f019 0f02 	tst.w	r9, #2
 801ac9a:	d008      	beq.n	801acae <tcp_pbuf_prealloc+0x36>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801ac9c:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801aca0:	f021 0103 	bic.w	r1, r1, #3
 801aca4:	428c      	cmp	r4, r1
 801aca6:	bf28      	it	cs
 801aca8:	460c      	movcs	r4, r1
 801acaa:	b2a1      	uxth	r1, r4
 801acac:	e003      	b.n	801acb6 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801acae:	8b7b      	ldrh	r3, [r7, #26]
 801acb0:	065b      	lsls	r3, r3, #25
 801acb2:	d518      	bpl.n	801ace6 <tcp_pbuf_prealloc+0x6e>
 801acb4:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801acb6:	4640      	mov	r0, r8
 801acb8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801acbc:	f7fc fce8 	bl	8017690 <pbuf_alloc>
  if (p == NULL) {
 801acc0:	4604      	mov	r4, r0
 801acc2:	b168      	cbz	r0, 801ace0 <tcp_pbuf_prealloc+0x68>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801acc4:	6803      	ldr	r3, [r0, #0]
 801acc6:	b133      	cbz	r3, 801acd6 <tcp_pbuf_prealloc+0x5e>
 801acc8:	4b0f      	ldr	r3, [pc, #60]	; (801ad08 <tcp_pbuf_prealloc+0x90>)
 801acca:	f240 120b 	movw	r2, #267	; 0x10b
 801acce:	490f      	ldr	r1, [pc, #60]	; (801ad0c <tcp_pbuf_prealloc+0x94>)
 801acd0:	480f      	ldr	r0, [pc, #60]	; (801ad10 <tcp_pbuf_prealloc+0x98>)
 801acd2:	f006 fd87 	bl	80217e4 <iprintf>
  *oversize = p->len - length;
 801acd6:	8963      	ldrh	r3, [r4, #10]
 801acd8:	1b5b      	subs	r3, r3, r5
 801acda:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801acdc:	8125      	strh	r5, [r4, #8]
 801acde:	8165      	strh	r5, [r4, #10]
}
 801ace0:	4620      	mov	r0, r4
 801ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801ace6:	f1ba 0f00 	cmp.w	sl, #0
 801acea:	d0d7      	beq.n	801ac9c <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801acec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d1d4      	bne.n	801ac9c <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801acf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d1d1      	bne.n	801ac9c <tcp_pbuf_prealloc+0x24>
 801acf8:	e7dc      	b.n	801acb4 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801acfa:	4b03      	ldr	r3, [pc, #12]	; (801ad08 <tcp_pbuf_prealloc+0x90>)
 801acfc:	22e9      	movs	r2, #233	; 0xe9
 801acfe:	4905      	ldr	r1, [pc, #20]	; (801ad14 <tcp_pbuf_prealloc+0x9c>)
 801ad00:	4803      	ldr	r0, [pc, #12]	; (801ad10 <tcp_pbuf_prealloc+0x98>)
 801ad02:	f006 fd6f 	bl	80217e4 <iprintf>
 801ad06:	e7c4      	b.n	801ac92 <tcp_pbuf_prealloc+0x1a>
 801ad08:	0803fb38 	.word	0x0803fb38
 801ad0c:	0803fbb4 	.word	0x0803fbb4
 801ad10:	08027fec 	.word	0x08027fec
 801ad14:	0803fb94 	.word	0x0803fb94

0801ad18 <tcp_create_segment>:
{
 801ad18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad1c:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ad1e:	4607      	mov	r7, r0
{
 801ad20:	4690      	mov	r8, r2
 801ad22:	4699      	mov	r9, r3
 801ad24:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801ad28:	2800      	cmp	r0, #0
 801ad2a:	d04e      	beq.n	801adca <tcp_create_segment+0xb2>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801ad2c:	2e00      	cmp	r6, #0
 801ad2e:	d054      	beq.n	801adda <tcp_create_segment+0xc2>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ad30:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ad32:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ad36:	22a8      	movs	r2, #168	; 0xa8
 801ad38:	4934      	ldr	r1, [pc, #208]	; (801ae0c <tcp_create_segment+0xf4>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ad3a:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801ad3c:	f7fc f946 	bl	8016fcc <memp_malloc_fn>
 801ad40:	4604      	mov	r4, r0
 801ad42:	2800      	cmp	r0, #0
 801ad44:	d05d      	beq.n	801ae02 <tcp_create_segment+0xea>
  seg->flags = optflags;
 801ad46:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801ad4a:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ad4c:	8932      	ldrh	r2, [r6, #8]
 801ad4e:	fa1f fa85 	uxth.w	sl, r5
 801ad52:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801ad54:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801ad58:	d32f      	bcc.n	801adba <tcp_create_segment+0xa2>
  seg->len = p->tot_len - optlen;
 801ad5a:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ad5e:	4630      	mov	r0, r6
 801ad60:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801ad62:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801ad64:	f7fc fbe6 	bl	8017534 <pbuf_add_header>
 801ad68:	4606      	mov	r6, r0
 801ad6a:	2800      	cmp	r0, #0
 801ad6c:	d13c      	bne.n	801ade8 <tcp_create_segment+0xd0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ad6e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ad70:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ad72:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ad74:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ad78:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801ad7a:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ad7e:	f7fa fdc5 	bl	801590c <lwip_htons>
 801ad82:	4603      	mov	r3, r0
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ad84:	8b38      	ldrh	r0, [r7, #24]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801ad86:	f8aa 3000 	strh.w	r3, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ad8a:	68e7      	ldr	r7, [r4, #12]
 801ad8c:	f7fa fdbe 	bl	801590c <lwip_htons>
 801ad90:	4603      	mov	r3, r0
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ad92:	4648      	mov	r0, r9
 801ad94:	f8d4 900c 	ldr.w	r9, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801ad98:	807b      	strh	r3, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ad9a:	f7fa fdbb 	bl	8015914 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ad9e:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801ada0:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801ada4:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 801ada8:	f7fa fdb0 	bl	801590c <lwip_htons>
  seg->tcphdr->urgp = 0;
 801adac:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801adae:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801adb0:	749e      	strb	r6, [r3, #18]
 801adb2:	74de      	strb	r6, [r3, #19]
}
 801adb4:	4620      	mov	r0, r4
 801adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801adba:	22b0      	movs	r2, #176	; 0xb0
 801adbc:	4b13      	ldr	r3, [pc, #76]	; (801ae0c <tcp_create_segment+0xf4>)
 801adbe:	4914      	ldr	r1, [pc, #80]	; (801ae10 <tcp_create_segment+0xf8>)
 801adc0:	4814      	ldr	r0, [pc, #80]	; (801ae14 <tcp_create_segment+0xfc>)
 801adc2:	f006 fd0f 	bl	80217e4 <iprintf>
 801adc6:	8932      	ldrh	r2, [r6, #8]
 801adc8:	e7c7      	b.n	801ad5a <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801adca:	4b10      	ldr	r3, [pc, #64]	; (801ae0c <tcp_create_segment+0xf4>)
 801adcc:	22a3      	movs	r2, #163	; 0xa3
 801adce:	4912      	ldr	r1, [pc, #72]	; (801ae18 <tcp_create_segment+0x100>)
 801add0:	4810      	ldr	r0, [pc, #64]	; (801ae14 <tcp_create_segment+0xfc>)
 801add2:	f006 fd07 	bl	80217e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801add6:	2e00      	cmp	r6, #0
 801add8:	d1aa      	bne.n	801ad30 <tcp_create_segment+0x18>
 801adda:	4b0c      	ldr	r3, [pc, #48]	; (801ae0c <tcp_create_segment+0xf4>)
 801addc:	22a4      	movs	r2, #164	; 0xa4
 801adde:	490f      	ldr	r1, [pc, #60]	; (801ae1c <tcp_create_segment+0x104>)
 801ade0:	480c      	ldr	r0, [pc, #48]	; (801ae14 <tcp_create_segment+0xfc>)
 801ade2:	f006 fcff 	bl	80217e4 <iprintf>
 801ade6:	e7a3      	b.n	801ad30 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801ade8:	4a0d      	ldr	r2, [pc, #52]	; (801ae20 <tcp_create_segment+0x108>)
    tcp_seg_free(seg);
 801adea:	4620      	mov	r0, r4
    return NULL;
 801adec:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801adee:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801adf2:	3301      	adds	r3, #1
 801adf4:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801adf8:	f7fd fa04 	bl	8018204 <tcp_seg_free>
}
 801adfc:	4620      	mov	r0, r4
 801adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801ae02:	4630      	mov	r0, r6
 801ae04:	f7fc fbd6 	bl	80175b4 <pbuf_free>
    return NULL;
 801ae08:	e7d4      	b.n	801adb4 <tcp_create_segment+0x9c>
 801ae0a:	bf00      	nop
 801ae0c:	0803fb38 	.word	0x0803fb38
 801ae10:	0803fc0c 	.word	0x0803fc0c
 801ae14:	08027fec 	.word	0x08027fec
 801ae18:	0803fbc8 	.word	0x0803fbc8
 801ae1c:	0803fbe8 	.word	0x0803fbe8
 801ae20:	20036794 	.word	0x20036794

0801ae24 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ae24:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801ae26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ae2a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801ae2c:	4606      	mov	r6, r0
 801ae2e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ae30:	2022      	movs	r0, #34	; 0x22
 801ae32:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801ae36:	461c      	mov	r4, r3
 801ae38:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801ae3c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801ae40:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ae44:	f7fc fc24 	bl	8017690 <pbuf_alloc>
  if (p != NULL) {
 801ae48:	4605      	mov	r5, r0
 801ae4a:	b310      	cbz	r0, 801ae92 <tcp_output_alloc_header_common.constprop.0+0x6e>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ae4c:	8943      	ldrh	r3, [r0, #10]
 801ae4e:	2b13      	cmp	r3, #19
 801ae50:	d922      	bls.n	801ae98 <tcp_output_alloc_header_common.constprop.0+0x74>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801ae52:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801ae54:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801ae56:	f7fa fd59 	bl	801590c <lwip_htons>
 801ae5a:	4603      	mov	r3, r0
    tcphdr->dest = lwip_htons(dst_port);
 801ae5c:	4650      	mov	r0, sl
    tcphdr->src = lwip_htons(src_port);
 801ae5e:	8023      	strh	r3, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ae60:	f7fa fd54 	bl	801590c <lwip_htons>
 801ae64:	4603      	mov	r3, r0
    tcphdr->seqno = seqno_be;
 801ae66:	6067      	str	r7, [r4, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ae68:	4630      	mov	r0, r6
    tcphdr->dest = lwip_htons(dst_port);
 801ae6a:	8063      	strh	r3, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801ae6c:	f7fa fd52 	bl	8015914 <lwip_htonl>
 801ae70:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae72:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801ae76:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae78:	f7fa fd48 	bl	801590c <lwip_htons>
 801ae7c:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801ae7e:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae80:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ae82:	f7fa fd43 	bl	801590c <lwip_htons>
    tcphdr->chksum = 0;
 801ae86:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801ae88:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801ae8a:	7423      	strb	r3, [r4, #16]
 801ae8c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801ae8e:	74a3      	strb	r3, [r4, #18]
 801ae90:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801ae92:	4628      	mov	r0, r5
 801ae94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ae98:	4b03      	ldr	r3, [pc, #12]	; (801aea8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801ae9a:	f240 7223 	movw	r2, #1827	; 0x723
 801ae9e:	4903      	ldr	r1, [pc, #12]	; (801aeac <tcp_output_alloc_header_common.constprop.0+0x88>)
 801aea0:	4803      	ldr	r0, [pc, #12]	; (801aeb0 <tcp_output_alloc_header_common.constprop.0+0x8c>)
 801aea2:	f006 fc9f 	bl	80217e4 <iprintf>
 801aea6:	e7d4      	b.n	801ae52 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801aea8:	0803fb38 	.word	0x0803fb38
 801aeac:	0803fc24 	.word	0x0803fc24
 801aeb0:	08027fec 	.word	0x08027fec

0801aeb4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801aeb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801aeb6:	460d      	mov	r5, r1
 801aeb8:	b085      	sub	sp, #20
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801aeba:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801aebc:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801aebe:	b190      	cbz	r0, 801aee6 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801aec0:	8b23      	ldrh	r3, [r4, #24]
 801aec2:	2010      	movs	r0, #16
 801aec4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 801aec6:	4632      	mov	r2, r6
 801aec8:	9300      	str	r3, [sp, #0]
 801aeca:	4629      	mov	r1, r5
 801aecc:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801aed0:	8ae3      	ldrh	r3, [r4, #22]
 801aed2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801aed4:	f7ff ffa6 	bl	801ae24 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801aed8:	b118      	cbz	r0, 801aee2 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801aeda:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801aedc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aede:	4413      	add	r3, r2
 801aee0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801aee2:	b005      	add	sp, #20
 801aee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801aee6:	4b04      	ldr	r3, [pc, #16]	; (801aef8 <tcp_output_alloc_header.constprop.0+0x44>)
 801aee8:	f240 7242 	movw	r2, #1858	; 0x742
 801aeec:	4903      	ldr	r1, [pc, #12]	; (801aefc <tcp_output_alloc_header.constprop.0+0x48>)
 801aeee:	4804      	ldr	r0, [pc, #16]	; (801af00 <tcp_output_alloc_header.constprop.0+0x4c>)
 801aef0:	f006 fc78 	bl	80217e4 <iprintf>
 801aef4:	e7e4      	b.n	801aec0 <tcp_output_alloc_header.constprop.0+0xc>
 801aef6:	bf00      	nop
 801aef8:	0803fb38 	.word	0x0803fb38
 801aefc:	0803fc54 	.word	0x0803fc54
 801af00:	08027fec 	.word	0x08027fec

0801af04 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801af04:	b100      	cbz	r0, 801af08 <tcp_output_fill_options.isra.0.constprop.0+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801af06:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801af08:	4b03      	ldr	r3, [pc, #12]	; (801af18 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 801af0a:	f240 7256 	movw	r2, #1878	; 0x756
 801af0e:	4903      	ldr	r1, [pc, #12]	; (801af1c <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 801af10:	4803      	ldr	r0, [pc, #12]	; (801af20 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 801af12:	f006 bc67 	b.w	80217e4 <iprintf>
 801af16:	bf00      	nop
 801af18:	0803fb38 	.word	0x0803fb38
 801af1c:	0803fc7c 	.word	0x0803fc7c
 801af20:	08027fec 	.word	0x08027fec

0801af24 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801af24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801af28:	4605      	mov	r5, r0
 801af2a:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801af2c:	460c      	mov	r4, r1
{
 801af2e:	4690      	mov	r8, r2
 801af30:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801af32:	2900      	cmp	r1, #0
 801af34:	d03b      	beq.n	801afae <tcp_output_control_segment+0x8a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801af36:	2d00      	cmp	r5, #0
 801af38:	d041      	beq.n	801afbe <tcp_output_control_segment+0x9a>
 801af3a:	7a28      	ldrb	r0, [r5, #8]
 801af3c:	bb48      	cbnz	r0, 801af92 <tcp_output_control_segment+0x6e>
    return ip_route(src, dst);
 801af3e:	4630      	mov	r0, r6
 801af40:	f003 fffe 	bl	801ef40 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801af44:	4607      	mov	r7, r0
 801af46:	b348      	cbz	r0, 801af9c <tcp_output_control_segment+0x78>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801af48:	9600      	str	r6, [sp, #0]
 801af4a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801af4c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801af50:	2106      	movs	r1, #6
 801af52:	8922      	ldrh	r2, [r4, #8]
 801af54:	4620      	mov	r0, r4
 801af56:	f7fb fa8b 	bl	8016470 <ip_chksum_pseudo>
 801af5a:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801af5e:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801af60:	7aa9      	ldrb	r1, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 801af62:	f8df c090 	ldr.w	ip, [pc, #144]	; 801aff4 <tcp_output_control_segment+0xd0>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801af66:	2006      	movs	r0, #6
 801af68:	4632      	mov	r2, r6
 801af6a:	9100      	str	r1, [sp, #0]
    TCP_STATS_INC(tcp.xmit);
 801af6c:	f8bc 5090 	ldrh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801af70:	4641      	mov	r1, r8
 801af72:	9001      	str	r0, [sp, #4]
 801af74:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801af76:	3501      	adds	r5, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801af78:	9702      	str	r7, [sp, #8]
    TCP_STATS_INC(tcp.xmit);
 801af7a:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801af7e:	f004 f9f9 	bl	801f374 <ip4_output_if>
 801af82:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801af84:	4620      	mov	r0, r4
 801af86:	f7fc fb15 	bl	80175b4 <pbuf_free>
  return err;
}
 801af8a:	4628      	mov	r0, r5
 801af8c:	b005      	add	sp, #20
 801af8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801af92:	f7fc fa31 	bl	80173f8 <netif_get_by_index>
  if (netif == NULL) {
 801af96:	4607      	mov	r7, r0
 801af98:	2800      	cmp	r0, #0
 801af9a:	d1d5      	bne.n	801af48 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801af9c:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801afa0:	4620      	mov	r0, r4
 801afa2:	f7fc fb07 	bl	80175b4 <pbuf_free>
}
 801afa6:	4628      	mov	r0, r5
 801afa8:	b005      	add	sp, #20
 801afaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801afae:	4b0e      	ldr	r3, [pc, #56]	; (801afe8 <tcp_output_control_segment+0xc4>)
 801afb0:	f240 7287 	movw	r2, #1927	; 0x787
 801afb4:	490d      	ldr	r1, [pc, #52]	; (801afec <tcp_output_control_segment+0xc8>)
 801afb6:	480e      	ldr	r0, [pc, #56]	; (801aff0 <tcp_output_control_segment+0xcc>)
 801afb8:	f006 fc14 	bl	80217e4 <iprintf>
 801afbc:	e7bb      	b.n	801af36 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801afbe:	4630      	mov	r0, r6
 801afc0:	f003 ffbe 	bl	801ef40 <ip4_route>
  if (netif == NULL) {
 801afc4:	4607      	mov	r7, r0
 801afc6:	2800      	cmp	r0, #0
 801afc8:	d0e8      	beq.n	801af9c <tcp_output_control_segment+0x78>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801afca:	9600      	str	r6, [sp, #0]
 801afcc:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801afce:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801afd2:	2106      	movs	r1, #6
 801afd4:	8922      	ldrh	r2, [r4, #8]
 801afd6:	4620      	mov	r0, r4
 801afd8:	f7fb fa4a 	bl	8016470 <ip_chksum_pseudo>
      tos = 0;
 801afdc:	4629      	mov	r1, r5
      ttl = TCP_TTL;
 801afde:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801afe0:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801afe4:	e7bd      	b.n	801af62 <tcp_output_control_segment+0x3e>
 801afe6:	bf00      	nop
 801afe8:	0803fb38 	.word	0x0803fb38
 801afec:	0803fca4 	.word	0x0803fca4
 801aff0:	08027fec 	.word	0x08027fec
 801aff4:	20036794 	.word	0x20036794

0801aff8 <tcp_write>:
{
 801aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801affc:	2400      	movs	r4, #0
{
 801affe:	b091      	sub	sp, #68	; 0x44
 801b000:	9107      	str	r1, [sp, #28]
 801b002:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801b004:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b008:	2800      	cmp	r0, #0
 801b00a:	f000 8321 	beq.w	801b650 <tcp_write+0x658>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801b00e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801b012:	4692      	mov	sl, r2
 801b014:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801b016:	4681      	mov	r9, r0
 801b018:	085b      	lsrs	r3, r3, #1
 801b01a:	4293      	cmp	r3, r2
 801b01c:	bf28      	it	cs
 801b01e:	4613      	movcs	r3, r2
 801b020:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801b022:	2b00      	cmp	r3, #0
 801b024:	bf08      	it	eq
 801b026:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b028:	9b07      	ldr	r3, [sp, #28]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	f000 8306 	beq.w	801b63c <tcp_write+0x644>
  if ((pcb->state != ESTABLISHED) &&
 801b030:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801b032:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801b034:	2a02      	cmp	r2, #2
 801b036:	d902      	bls.n	801b03e <tcp_write+0x46>
 801b038:	2b07      	cmp	r3, #7
 801b03a:	f040 82ae 	bne.w	801b59a <tcp_write+0x5a2>
  } else if (len == 0) {
 801b03e:	f1ba 0f00 	cmp.w	sl, #0
 801b042:	f000 80f0 	beq.w	801b226 <tcp_write+0x22e>
  if (len > pcb->snd_buf) {
 801b046:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801b04a:	4553      	cmp	r3, sl
 801b04c:	f0c0 82ce 	bcc.w	801b5ec <tcp_write+0x5f4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801b050:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801b054:	2e08      	cmp	r6, #8
 801b056:	f200 82d2 	bhi.w	801b5fe <tcp_write+0x606>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b05a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801b05e:	2e00      	cmp	r6, #0
 801b060:	f000 80d4 	beq.w	801b20c <tcp_write+0x214>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b064:	2b00      	cmp	r3, #0
 801b066:	f040 80e0 	bne.w	801b22a <tcp_write+0x232>
 801b06a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801b06e:	f1b8 0f00 	cmp.w	r8, #0
 801b072:	f000 8274 	beq.w	801b55e <tcp_write+0x566>
 801b076:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b078:	461a      	mov	r2, r3
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d1fb      	bne.n	801b078 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b080:	7a94      	ldrb	r4, [r2, #10]
 801b082:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b084:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801b086:	00a4      	lsls	r4, r4, #2
 801b088:	920b      	str	r2, [sp, #44]	; 0x2c
 801b08a:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b08e:	191a      	adds	r2, r3, r4
 801b090:	4593      	cmp	fp, r2
 801b092:	f2c0 81af 	blt.w	801b3f4 <tcp_write+0x3fc>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b096:	ebab 0404 	sub.w	r4, fp, r4
    oversize = pcb->unsent_oversize;
 801b09a:	f8b9 2068 	ldrh.w	r2, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b09e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801b0a0:	920a      	str	r2, [sp, #40]	; 0x28
 801b0a2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 801b0a6:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 801b0a8:	2a00      	cmp	r2, #0
 801b0aa:	f000 80d3 	beq.w	801b254 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b0ae:	42a2      	cmp	r2, r4
 801b0b0:	f200 8172 	bhi.w	801b398 <tcp_write+0x3a0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b0b4:	45a2      	cmp	sl, r4
 801b0b6:	4650      	mov	r0, sl
 801b0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0ba:	bf28      	it	cs
 801b0bc:	4620      	movcs	r0, r4
 801b0be:	4298      	cmp	r0, r3
 801b0c0:	bf28      	it	cs
 801b0c2:	4618      	movcs	r0, r3
      oversize -= oversize_used;
 801b0c4:	1a1b      	subs	r3, r3, r0
      space -= oversize_used;
 801b0c6:	1a24      	subs	r4, r4, r0
      oversize -= oversize_used;
 801b0c8:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801b0ca:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801b0cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	f000 818c 	beq.w	801b3ee <tcp_write+0x3f6>
 801b0d6:	4582      	cmp	sl, r0
 801b0d8:	f000 8189 	beq.w	801b3ee <tcp_write+0x3f6>
 801b0dc:	4bb4      	ldr	r3, [pc, #720]	; (801b3b0 <tcp_write+0x3b8>)
 801b0de:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b0e2:	900a      	str	r0, [sp, #40]	; 0x28
 801b0e4:	49b3      	ldr	r1, [pc, #716]	; (801b3b4 <tcp_write+0x3bc>)
 801b0e6:	48b4      	ldr	r0, [pc, #720]	; (801b3b8 <tcp_write+0x3c0>)
 801b0e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b0ea:	f006 fb7b 	bl	80217e4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b0ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0f0:	459a      	cmp	sl, r3
 801b0f2:	f200 80b4 	bhi.w	801b25e <tcp_write+0x266>
  struct pbuf *concat_p = NULL;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b0fa:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801b0fc:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801b0fe:	45a2      	cmp	sl, r4
 801b100:	f240 80f2 	bls.w	801b2e8 <tcp_write+0x2f0>
 801b104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b106:	f04f 0800 	mov.w	r8, #0
 801b10a:	f003 0301 	and.w	r3, r3, #1
 801b10e:	f8cd 8014 	str.w	r8, [sp, #20]
 801b112:	9308      	str	r3, [sp, #32]
 801b114:	4643      	mov	r3, r8
 801b116:	46d8      	mov	r8, fp
 801b118:	469b      	mov	fp, r3
 801b11a:	e043      	b.n	801b1a4 <tcp_write+0x1ac>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b11c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b120:	2b00      	cmp	r3, #0
 801b122:	f040 80f4 	bne.w	801b30e <tcp_write+0x316>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801b126:	2201      	movs	r2, #1
 801b128:	4629      	mov	r1, r5
 801b12a:	2036      	movs	r0, #54	; 0x36
 801b12c:	f7fc fab0 	bl	8017690 <pbuf_alloc>
 801b130:	4603      	mov	r3, r0
 801b132:	2800      	cmp	r0, #0
 801b134:	f000 8103 	beq.w	801b33e <tcp_write+0x346>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b138:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b13a:	2100      	movs	r1, #0
 801b13c:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b13e:	9306      	str	r3, [sp, #24]
 801b140:	1917      	adds	r7, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b142:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801b146:	605f      	str	r7, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b148:	f7fc faa2 	bl	8017690 <pbuf_alloc>
 801b14c:	9b06      	ldr	r3, [sp, #24]
 801b14e:	4607      	mov	r7, r0
 801b150:	2800      	cmp	r0, #0
 801b152:	f000 819d 	beq.w	801b490 <tcp_write+0x498>
      pbuf_cat(p/*header*/, p2/*data*/);
 801b156:	4619      	mov	r1, r3
 801b158:	f7fc fbae 	bl	80178b8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801b15c:	4638      	mov	r0, r7
 801b15e:	f7fc fb8d 	bl	801787c <pbuf_clen>
 801b162:	4430      	add	r0, r6
 801b164:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801b166:	2e09      	cmp	r6, #9
 801b168:	d84a      	bhi.n	801b200 <tcp_write+0x208>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801b16a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801b16e:	2200      	movs	r2, #0
 801b170:	4639      	mov	r1, r7
 801b172:	4648      	mov	r0, r9
 801b174:	4423      	add	r3, r4
 801b176:	9200      	str	r2, [sp, #0]
 801b178:	f7ff fdce 	bl	801ad18 <tcp_create_segment>
 801b17c:	4607      	mov	r7, r0
 801b17e:	2800      	cmp	r0, #0
 801b180:	f000 80dd 	beq.w	801b33e <tcp_write+0x346>
    if (queue == NULL) {
 801b184:	9b05      	ldr	r3, [sp, #20]
 801b186:	2b00      	cmp	r3, #0
 801b188:	f000 80a6 	beq.w	801b2d8 <tcp_write+0x2e0>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b18c:	f1bb 0f00 	cmp.w	fp, #0
 801b190:	f000 80c5 	beq.w	801b31e <tcp_write+0x326>
    pos += seglen;
 801b194:	442c      	add	r4, r5
      prev_seg->next = seg;
 801b196:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801b19a:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801b19c:	45a2      	cmp	sl, r4
 801b19e:	f240 80a1 	bls.w	801b2e4 <tcp_write+0x2ec>
 801b1a2:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801b1a4:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b1a8:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801b1aa:	b2ad      	uxth	r5, r5
 801b1ac:	4545      	cmp	r5, r8
 801b1ae:	bf28      	it	cs
 801b1b0:	4645      	movcs	r5, r8
 801b1b2:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d0b1      	beq.n	801b11c <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801b1b8:	9b05      	ldr	r3, [sp, #20]
 801b1ba:	4642      	mov	r2, r8
 801b1bc:	4629      	mov	r1, r5
 801b1be:	2036      	movs	r0, #54	; 0x36
 801b1c0:	fab3 f783 	clz	r7, r3
 801b1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1c6:	097f      	lsrs	r7, r7, #5
 801b1c8:	e9cd 9300 	strd	r9, r3, [sp]
 801b1cc:	9702      	str	r7, [sp, #8]
 801b1ce:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b1d2:	f7ff fd51 	bl	801ac78 <tcp_pbuf_prealloc>
 801b1d6:	4607      	mov	r7, r0
 801b1d8:	2800      	cmp	r0, #0
 801b1da:	f000 80b0 	beq.w	801b33e <tcp_write+0x346>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b1de:	8943      	ldrh	r3, [r0, #10]
 801b1e0:	42ab      	cmp	r3, r5
 801b1e2:	f0c0 80a4 	bcc.w	801b32e <tcp_write+0x336>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801b1e6:	9b07      	ldr	r3, [sp, #28]
 801b1e8:	462a      	mov	r2, r5
 801b1ea:	6878      	ldr	r0, [r7, #4]
 801b1ec:	1919      	adds	r1, r3, r4
 801b1ee:	f005 fb5f 	bl	80208b0 <memcpy>
    queuelen += pbuf_clen(p);
 801b1f2:	4638      	mov	r0, r7
 801b1f4:	f7fc fb42 	bl	801787c <pbuf_clen>
 801b1f8:	4430      	add	r0, r6
 801b1fa:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801b1fc:	2e09      	cmp	r6, #9
 801b1fe:	d9b4      	bls.n	801b16a <tcp_write+0x172>
      pbuf_free(p);
 801b200:	4638      	mov	r0, r7
 801b202:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b206:	f7fc f9d5 	bl	80175b4 <pbuf_free>
      goto memerr;
 801b20a:	e09a      	b.n	801b342 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801b20c:	b923      	cbnz	r3, 801b218 <tcp_write+0x220>
 801b20e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b212:	2b00      	cmp	r3, #0
 801b214:	f000 80de 	beq.w	801b3d4 <tcp_write+0x3dc>
 801b218:	4b65      	ldr	r3, [pc, #404]	; (801b3b0 <tcp_write+0x3b8>)
 801b21a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801b21e:	4967      	ldr	r1, [pc, #412]	; (801b3bc <tcp_write+0x3c4>)
 801b220:	4865      	ldr	r0, [pc, #404]	; (801b3b8 <tcp_write+0x3c0>)
 801b222:	f006 fadf 	bl	80217e4 <iprintf>
  if (err != ERR_OK) {
 801b226:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801b22a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801b22e:	f1b8 0f00 	cmp.w	r8, #0
 801b232:	f47f af20 	bne.w	801b076 <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b236:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	f040 80cf 	bne.w	801b3de <tcp_write+0x3e6>
  while (pos < len) {
 801b240:	f1ba 0f00 	cmp.w	sl, #0
 801b244:	f000 81ea 	beq.w	801b61c <tcp_write+0x624>
          extendlen = seglen;
 801b248:	2400      	movs	r4, #0
 801b24a:	940d      	str	r4, [sp, #52]	; 0x34
 801b24c:	940c      	str	r4, [sp, #48]	; 0x30
 801b24e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801b252:	e757      	b.n	801b104 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801b254:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801b256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b258:	459a      	cmp	sl, r3
 801b25a:	f67f af4c 	bls.w	801b0f6 <tcp_write+0xfe>
 801b25e:	2c00      	cmp	r4, #0
 801b260:	f43f af49 	beq.w	801b0f6 <tcp_write+0xfe>
 801b264:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b266:	8912      	ldrh	r2, [r2, #8]
 801b268:	920d      	str	r2, [sp, #52]	; 0x34
 801b26a:	2a00      	cmp	r2, #0
 801b26c:	f000 8090 	beq.w	801b390 <tcp_write+0x398>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b270:	ebaa 0503 	sub.w	r5, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b276:	42a5      	cmp	r5, r4
 801b278:	bfa8      	it	ge
 801b27a:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b27c:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801b27e:	b2af      	uxth	r7, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801b280:	f100 8195 	bmi.w	801b5ae <tcp_write+0x5b6>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801b284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b286:	685a      	ldr	r2, [r3, #4]
 801b288:	4613      	mov	r3, r2
 801b28a:	6812      	ldr	r2, [r2, #0]
 801b28c:	2a00      	cmp	r2, #0
 801b28e:	d1fb      	bne.n	801b288 <tcp_write+0x290>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b290:	920c      	str	r2, [sp, #48]	; 0x30
 801b292:	7b1a      	ldrb	r2, [r3, #12]
 801b294:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801b298:	d106      	bne.n	801b2a8 <tcp_write+0x2b0>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801b29a:	895a      	ldrh	r2, [r3, #10]
 801b29c:	685b      	ldr	r3, [r3, #4]
 801b29e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801b2a0:	9a07      	ldr	r2, [sp, #28]
 801b2a2:	429a      	cmp	r2, r3
 801b2a4:	f000 8174 	beq.w	801b590 <tcp_write+0x598>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801b2a8:	2201      	movs	r2, #1
 801b2aa:	4639      	mov	r1, r7
 801b2ac:	2000      	movs	r0, #0
 801b2ae:	f7fc f9ef 	bl	8017690 <pbuf_alloc>
 801b2b2:	900c      	str	r0, [sp, #48]	; 0x30
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	f000 8145 	beq.w	801b544 <tcp_write+0x54c>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b2ba:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b2bc:	9b07      	ldr	r3, [sp, #28]
 801b2be:	440b      	add	r3, r1
  u16_t extendlen = 0;
 801b2c0:	2100      	movs	r1, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801b2c2:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801b2c4:	910d      	str	r1, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 801b2c6:	f7fc fad9 	bl	801787c <pbuf_clen>
 801b2ca:	4406      	add	r6, r0
 801b2cc:	b2b6      	uxth	r6, r6
      pos += seglen;
 801b2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2d0:	18fc      	adds	r4, r7, r3
 801b2d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801b2d4:	b2a4      	uxth	r4, r4
 801b2d6:	e712      	b.n	801b0fe <tcp_write+0x106>
    pos += seglen;
 801b2d8:	442c      	add	r4, r5
 801b2da:	9005      	str	r0, [sp, #20]
 801b2dc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801b2de:	45a2      	cmp	sl, r4
 801b2e0:	f63f af5f 	bhi.w	801b1a2 <tcp_write+0x1aa>
 801b2e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801b2e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	f000 80e0 	beq.w	801b4b0 <tcp_write+0x4b8>
    for (p = last_unsent->p; p; p = p->next) {
 801b2f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b2f2:	6854      	ldr	r4, [r2, #4]
 801b2f4:	2c00      	cmp	r4, #0
 801b2f6:	f000 8095 	beq.w	801b424 <tcp_write+0x42c>
 801b2fa:	469b      	mov	fp, r3
 801b2fc:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801b2fe:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801b300:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801b302:	445b      	add	r3, fp
 801b304:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801b306:	2a00      	cmp	r2, #0
 801b308:	d07e      	beq.n	801b408 <tcp_write+0x410>
  u16_t extendlen = 0;
 801b30a:	4614      	mov	r4, r2
 801b30c:	e7f7      	b.n	801b2fe <tcp_write+0x306>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801b30e:	4b28      	ldr	r3, [pc, #160]	; (801b3b0 <tcp_write+0x3b8>)
 801b310:	f240 2271 	movw	r2, #625	; 0x271
 801b314:	492a      	ldr	r1, [pc, #168]	; (801b3c0 <tcp_write+0x3c8>)
 801b316:	4828      	ldr	r0, [pc, #160]	; (801b3b8 <tcp_write+0x3c0>)
 801b318:	f006 fa64 	bl	80217e4 <iprintf>
 801b31c:	e703      	b.n	801b126 <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801b31e:	4b24      	ldr	r3, [pc, #144]	; (801b3b0 <tcp_write+0x3b8>)
 801b320:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b324:	4927      	ldr	r1, [pc, #156]	; (801b3c4 <tcp_write+0x3cc>)
 801b326:	4824      	ldr	r0, [pc, #144]	; (801b3b8 <tcp_write+0x3c0>)
 801b328:	f006 fa5c 	bl	80217e4 <iprintf>
 801b32c:	e732      	b.n	801b194 <tcp_write+0x19c>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801b32e:	4b20      	ldr	r3, [pc, #128]	; (801b3b0 <tcp_write+0x3b8>)
 801b330:	f240 2266 	movw	r2, #614	; 0x266
 801b334:	4924      	ldr	r1, [pc, #144]	; (801b3c8 <tcp_write+0x3d0>)
 801b336:	4820      	ldr	r0, [pc, #128]	; (801b3b8 <tcp_write+0x3c0>)
 801b338:	f006 fa54 	bl	80217e4 <iprintf>
 801b33c:	e753      	b.n	801b1e6 <tcp_write+0x1ee>
 801b33e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  TCP_STATS_INC(tcp.memerr);
 801b342:	4922      	ldr	r1, [pc, #136]	; (801b3cc <tcp_write+0x3d4>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b344:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801b348:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b34c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801b350:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b352:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801b356:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801b35a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b35c:	b113      	cbz	r3, 801b364 <tcp_write+0x36c>
    pbuf_free(concat_p);
 801b35e:	4618      	mov	r0, r3
 801b360:	f7fc f928 	bl	80175b4 <pbuf_free>
  if (queue != NULL) {
 801b364:	f1b8 0f00 	cmp.w	r8, #0
 801b368:	d002      	beq.n	801b370 <tcp_write+0x378>
    tcp_segs_free(queue);
 801b36a:	4640      	mov	r0, r8
 801b36c:	f7fc ff58 	bl	8018220 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801b370:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801b374:	b13b      	cbz	r3, 801b386 <tcp_write+0x38e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b376:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801b37a:	b923      	cbnz	r3, 801b386 <tcp_write+0x38e>
 801b37c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b380:	2b00      	cmp	r3, #0
 801b382:	f000 808b 	beq.w	801b49c <tcp_write+0x4a4>
  return ERR_MEM;
 801b386:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b38a:	b011      	add	sp, #68	; 0x44
 801b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct pbuf *concat_p = NULL;
 801b390:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b392:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b394:	930c      	str	r3, [sp, #48]	; 0x30
 801b396:	e6b5      	b.n	801b104 <tcp_write+0x10c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801b398:	4b05      	ldr	r3, [pc, #20]	; (801b3b0 <tcp_write+0x3b8>)
 801b39a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801b39e:	490c      	ldr	r1, [pc, #48]	; (801b3d0 <tcp_write+0x3d8>)
 801b3a0:	4805      	ldr	r0, [pc, #20]	; (801b3b8 <tcp_write+0x3c0>)
 801b3a2:	f006 fa1f 	bl	80217e4 <iprintf>
 801b3a6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b3aa:	930a      	str	r3, [sp, #40]	; 0x28
 801b3ac:	e682      	b.n	801b0b4 <tcp_write+0xbc>
 801b3ae:	bf00      	nop
 801b3b0:	0803fb38 	.word	0x0803fb38
 801b3b4:	0803fdc4 	.word	0x0803fdc4
 801b3b8:	08027fec 	.word	0x08027fec
 801b3bc:	0803fd58 	.word	0x0803fd58
 801b3c0:	0803fe80 	.word	0x0803fe80
 801b3c4:	0803fe90 	.word	0x0803fe90
 801b3c8:	0803fe40 	.word	0x0803fe40
 801b3cc:	20036794 	.word	0x20036794
 801b3d0:	0803fda4 	.word	0x0803fda4
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801b3d4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	f43f af35 	beq.w	801b248 <tcp_write+0x250>
 801b3de:	4ba2      	ldr	r3, [pc, #648]	; (801b668 <tcp_write+0x670>)
 801b3e0:	f240 224a 	movw	r2, #586	; 0x24a
 801b3e4:	49a1      	ldr	r1, [pc, #644]	; (801b66c <tcp_write+0x674>)
 801b3e6:	48a2      	ldr	r0, [pc, #648]	; (801b670 <tcp_write+0x678>)
 801b3e8:	f006 f9fc 	bl	80217e4 <iprintf>
 801b3ec:	e728      	b.n	801b240 <tcp_write+0x248>
 801b3ee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801b3f0:	900a      	str	r0, [sp, #40]	; 0x28
 801b3f2:	e730      	b.n	801b256 <tcp_write+0x25e>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801b3f4:	4b9c      	ldr	r3, [pc, #624]	; (801b668 <tcp_write+0x670>)
 801b3f6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b3fa:	499e      	ldr	r1, [pc, #632]	; (801b674 <tcp_write+0x67c>)
 801b3fc:	489c      	ldr	r0, [pc, #624]	; (801b670 <tcp_write+0x678>)
 801b3fe:	f006 f9f1 	bl	80217e4 <iprintf>
 801b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b404:	891b      	ldrh	r3, [r3, #8]
 801b406:	e646      	b.n	801b096 <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801b408:	6863      	ldr	r3, [r4, #4]
 801b40a:	465a      	mov	r2, fp
 801b40c:	8960      	ldrh	r0, [r4, #10]
 801b40e:	4629      	mov	r1, r5
 801b410:	4418      	add	r0, r3
 801b412:	f005 fa4d 	bl	80208b0 <memcpy>
        p->len += oversize_used;
 801b416:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b418:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801b41a:	445b      	add	r3, fp
 801b41c:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801b41e:	2a00      	cmp	r2, #0
 801b420:	f47f af73 	bne.w	801b30a <tcp_write+0x312>
    last_unsent->len += oversize_used;
 801b424:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b426:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b428:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 801b42a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801b42e:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801b430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 801b432:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 801b434:	f8a9 2068 	strh.w	r2, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d061      	beq.n	801b500 <tcp_write+0x508>
    pbuf_cat(last_unsent->p, concat_p);
 801b43c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b43e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b440:	6860      	ldr	r0, [r4, #4]
 801b442:	4629      	mov	r1, r5
 801b444:	f7fc fa38 	bl	80178b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801b448:	892a      	ldrh	r2, [r5, #8]
 801b44a:	8923      	ldrh	r3, [r4, #8]
 801b44c:	4413      	add	r3, r2
 801b44e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801b450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b452:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801b456:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b45a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  pcb->snd_lbb += len;
 801b45e:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801b460:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_buf -= len;
 801b464:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 801b468:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801b46c:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801b470:	b11e      	cbz	r6, 801b47a <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b472:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801b476:	2b00      	cmp	r3, #0
 801b478:	d036      	beq.n	801b4e8 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801b47a:	b12f      	cbz	r7, 801b488 <tcp_write+0x490>
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	b11b      	cbz	r3, 801b488 <tcp_write+0x490>
 801b480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b482:	f012 0502 	ands.w	r5, r2, #2
 801b486:	d025      	beq.n	801b4d4 <tcp_write+0x4dc>
  return ERR_OK;
 801b488:	2000      	movs	r0, #0
}
 801b48a:	b011      	add	sp, #68	; 0x44
 801b48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801b490:	4618      	mov	r0, r3
 801b492:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b496:	f7fc f88d 	bl	80175b4 <pbuf_free>
        goto memerr;
 801b49a:	e752      	b.n	801b342 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801b49c:	4b72      	ldr	r3, [pc, #456]	; (801b668 <tcp_write+0x670>)
 801b49e:	f240 3227 	movw	r2, #807	; 0x327
 801b4a2:	4975      	ldr	r1, [pc, #468]	; (801b678 <tcp_write+0x680>)
 801b4a4:	4872      	ldr	r0, [pc, #456]	; (801b670 <tcp_write+0x678>)
 801b4a6:	f006 f99d 	bl	80217e4 <iprintf>
  return ERR_MEM;
 801b4aa:	f04f 30ff 	mov.w	r0, #4294967295
 801b4ae:	e76c      	b.n	801b38a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801b4b0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b4b4:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801b4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d059      	beq.n	801b572 <tcp_write+0x57a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801b4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d1bb      	bne.n	801b43c <tcp_write+0x444>
 801b4c4:	4b68      	ldr	r3, [pc, #416]	; (801b668 <tcp_write+0x670>)
 801b4c6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801b4ca:	496c      	ldr	r1, [pc, #432]	; (801b67c <tcp_write+0x684>)
 801b4cc:	4868      	ldr	r0, [pc, #416]	; (801b670 <tcp_write+0x678>)
 801b4ce:	f006 f989 	bl	80217e4 <iprintf>
 801b4d2:	e7b3      	b.n	801b43c <tcp_write+0x444>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b4d4:	2008      	movs	r0, #8
 801b4d6:	899c      	ldrh	r4, [r3, #12]
 801b4d8:	f7fa fa18 	bl	801590c <lwip_htons>
 801b4dc:	4602      	mov	r2, r0
 801b4de:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801b4e0:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801b4e2:	4314      	orrs	r4, r2
 801b4e4:	819c      	strh	r4, [r3, #12]
 801b4e6:	e750      	b.n	801b38a <tcp_write+0x392>
    LWIP_ASSERT("tcp_write: valid queue length",
 801b4e8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801b4ec:	2b00      	cmp	r3, #0
 801b4ee:	d1c4      	bne.n	801b47a <tcp_write+0x482>
 801b4f0:	4b5d      	ldr	r3, [pc, #372]	; (801b668 <tcp_write+0x670>)
 801b4f2:	f240 3212 	movw	r2, #786	; 0x312
 801b4f6:	4960      	ldr	r1, [pc, #384]	; (801b678 <tcp_write+0x680>)
 801b4f8:	485d      	ldr	r0, [pc, #372]	; (801b670 <tcp_write+0x678>)
 801b4fa:	f006 f973 	bl	80217e4 <iprintf>
 801b4fe:	e7bc      	b.n	801b47a <tcp_write+0x482>
  } else if (extendlen > 0) {
 801b500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b502:	2b00      	cmp	r3, #0
 801b504:	d0a4      	beq.n	801b450 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b508:	6859      	ldr	r1, [r3, #4]
 801b50a:	2900      	cmp	r1, #0
 801b50c:	d036      	beq.n	801b57c <tcp_write+0x584>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b50e:	680a      	ldr	r2, [r1, #0]
 801b510:	2a00      	cmp	r2, #0
 801b512:	f000 80a7 	beq.w	801b664 <tcp_write+0x66c>
 801b516:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b518:	e000      	b.n	801b51c <tcp_write+0x524>
 801b51a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801b51c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b51e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801b520:	4423      	add	r3, r4
 801b522:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b524:	4611      	mov	r1, r2
 801b526:	2800      	cmp	r0, #0
 801b528:	d1f7      	bne.n	801b51a <tcp_write+0x522>
    p->tot_len += extendlen;
 801b52a:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801b52c:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801b52e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801b530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    p->tot_len += extendlen;
 801b532:	4420      	add	r0, r4
    p->len += extendlen;
 801b534:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801b536:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801b538:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801b53a:	4423      	add	r3, r4
    p->len += extendlen;
 801b53c:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801b53e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b540:	8113      	strh	r3, [r2, #8]
 801b542:	e785      	b.n	801b450 <tcp_write+0x458>
  TCP_STATS_INC(tcp.memerr);
 801b544:	494e      	ldr	r1, [pc, #312]	; (801b680 <tcp_write+0x688>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b546:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801b54a:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b54e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801b552:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b554:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801b558:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801b55c:	e708      	b.n	801b370 <tcp_write+0x378>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801b55e:	4b42      	ldr	r3, [pc, #264]	; (801b668 <tcp_write+0x670>)
 801b560:	f240 1255 	movw	r2, #341	; 0x155
 801b564:	4947      	ldr	r1, [pc, #284]	; (801b684 <tcp_write+0x68c>)
 801b566:	4842      	ldr	r0, [pc, #264]	; (801b670 <tcp_write+0x678>)
 801b568:	f006 f93c 	bl	80217e4 <iprintf>
  if (err != ERR_OK) {
 801b56c:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801b570:	e65b      	b.n	801b22a <tcp_write+0x232>
  } else if (extendlen > 0) {
 801b572:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b574:	b1a3      	cbz	r3, 801b5a0 <tcp_write+0x5a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801b576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d1c4      	bne.n	801b506 <tcp_write+0x50e>
 801b57c:	4b3a      	ldr	r3, [pc, #232]	; (801b668 <tcp_write+0x670>)
 801b57e:	f240 22e6 	movw	r2, #742	; 0x2e6
 801b582:	4941      	ldr	r1, [pc, #260]	; (801b688 <tcp_write+0x690>)
 801b584:	483a      	ldr	r0, [pc, #232]	; (801b670 <tcp_write+0x678>)
 801b586:	f006 f92d 	bl	80217e4 <iprintf>
 801b58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b58c:	6859      	ldr	r1, [r3, #4]
 801b58e:	e7be      	b.n	801b50e <tcp_write+0x516>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b592:	2b00      	cmp	r3, #0
 801b594:	d149      	bne.n	801b62a <tcp_write+0x632>
          extendlen = seglen;
 801b596:	970d      	str	r7, [sp, #52]	; 0x34
 801b598:	e699      	b.n	801b2ce <tcp_write+0x2d6>
    return ERR_CONN;
 801b59a:	f06f 000a 	mvn.w	r0, #10
 801b59e:	e6f4      	b.n	801b38a <tcp_write+0x392>
  if (last_unsent == NULL) {
 801b5a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	f47f af54 	bne.w	801b450 <tcp_write+0x458>
    pcb->unsent = queue;
 801b5a8:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801b5ac:	e753      	b.n	801b456 <tcp_write+0x45e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801b5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5b0:	2301      	movs	r3, #1
 801b5b2:	4639      	mov	r1, r7
 801b5b4:	2000      	movs	r0, #0
 801b5b6:	9302      	str	r3, [sp, #8]
 801b5b8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801b5bc:	e9cd 9200 	strd	r9, r2, [sp]
 801b5c0:	4622      	mov	r2, r4
 801b5c2:	f7ff fb59 	bl	801ac78 <tcp_pbuf_prealloc>
 801b5c6:	4604      	mov	r4, r0
 801b5c8:	900c      	str	r0, [sp, #48]	; 0x30
 801b5ca:	2800      	cmp	r0, #0
 801b5cc:	d0ba      	beq.n	801b544 <tcp_write+0x54c>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b5ce:	9b07      	ldr	r3, [sp, #28]
 801b5d0:	463a      	mov	r2, r7
 801b5d2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b5d4:	6840      	ldr	r0, [r0, #4]
 801b5d6:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801b5d8:	2300      	movs	r3, #0
 801b5da:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801b5dc:	f005 f968 	bl	80208b0 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801b5e0:	4620      	mov	r0, r4
 801b5e2:	f7fc f94b 	bl	801787c <pbuf_clen>
 801b5e6:	4406      	add	r6, r0
 801b5e8:	b2b6      	uxth	r6, r6
 801b5ea:	e670      	b.n	801b2ce <tcp_write+0x2d6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5ec:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801b5f0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b5f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5f8:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801b5fc:	e6c5      	b.n	801b38a <tcp_write+0x392>
    TCP_STATS_INC(tcp.memerr);
 801b5fe:	4920      	ldr	r1, [pc, #128]	; (801b680 <tcp_write+0x688>)
    return ERR_MEM;
 801b600:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b604:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    TCP_STATS_INC(tcp.memerr);
 801b608:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801b610:	3201      	adds	r2, #1
 801b612:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b616:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801b61a:	e6b6      	b.n	801b38a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801b61c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801b620:	46d0      	mov	r8, sl
 801b622:	4657      	mov	r7, sl
 801b624:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801b628:	e7be      	b.n	801b5a8 <tcp_write+0x5b0>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b62a:	4b0f      	ldr	r3, [pc, #60]	; (801b668 <tcp_write+0x670>)
 801b62c:	f240 2231 	movw	r2, #561	; 0x231
 801b630:	4916      	ldr	r1, [pc, #88]	; (801b68c <tcp_write+0x694>)
 801b632:	480f      	ldr	r0, [pc, #60]	; (801b670 <tcp_write+0x678>)
          extendlen = seglen;
 801b634:	970d      	str	r7, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801b636:	f006 f8d5 	bl	80217e4 <iprintf>
 801b63a:	e648      	b.n	801b2ce <tcp_write+0x2d6>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801b63c:	4b0a      	ldr	r3, [pc, #40]	; (801b668 <tcp_write+0x670>)
 801b63e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801b642:	4913      	ldr	r1, [pc, #76]	; (801b690 <tcp_write+0x698>)
 801b644:	480a      	ldr	r0, [pc, #40]	; (801b670 <tcp_write+0x678>)
 801b646:	f006 f8cd 	bl	80217e4 <iprintf>
 801b64a:	f06f 000f 	mvn.w	r0, #15
 801b64e:	e69c      	b.n	801b38a <tcp_write+0x392>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801b650:	4b05      	ldr	r3, [pc, #20]	; (801b668 <tcp_write+0x670>)
 801b652:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801b656:	490f      	ldr	r1, [pc, #60]	; (801b694 <tcp_write+0x69c>)
 801b658:	4805      	ldr	r0, [pc, #20]	; (801b670 <tcp_write+0x678>)
 801b65a:	f006 f8c3 	bl	80217e4 <iprintf>
 801b65e:	f06f 000f 	mvn.w	r0, #15
 801b662:	e692      	b.n	801b38a <tcp_write+0x392>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801b664:	460a      	mov	r2, r1
 801b666:	e760      	b.n	801b52a <tcp_write+0x532>
 801b668:	0803fb38 	.word	0x0803fb38
 801b66c:	0803fe10 	.word	0x0803fe10
 801b670:	08027fec 	.word	0x08027fec
 801b674:	0803fd8c 	.word	0x0803fd8c
 801b678:	0803ff14 	.word	0x0803ff14
 801b67c:	0803fea4 	.word	0x0803fea4
 801b680:	20036794 	.word	0x20036794
 801b684:	0803fd1c 	.word	0x0803fd1c
 801b688:	0803fedc 	.word	0x0803fedc
 801b68c:	0803fde4 	.word	0x0803fde4
 801b690:	0803fce8 	.word	0x0803fce8
 801b694:	0803fcd0 	.word	0x0803fcd0

0801b698 <tcp_split_unsent_seg>:
{
 801b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b69c:	4605      	mov	r5, r0
{
 801b69e:	b083      	sub	sp, #12
 801b6a0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b6a2:	2800      	cmp	r0, #0
 801b6a4:	f000 80bf 	beq.w	801b826 <tcp_split_unsent_seg+0x18e>
  useg = pcb->unsent;
 801b6a8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801b6aa:	2e00      	cmp	r6, #0
 801b6ac:	d037      	beq.n	801b71e <tcp_split_unsent_seg+0x86>
  if (split == 0) {
 801b6ae:	2c00      	cmp	r4, #0
 801b6b0:	f000 80c9 	beq.w	801b846 <tcp_split_unsent_seg+0x1ae>
  if (useg->len <= split) {
 801b6b4:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801b6b8:	45a0      	cmp	r8, r4
 801b6ba:	f240 80b0 	bls.w	801b81e <tcp_split_unsent_seg+0x186>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b6be:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801b6c0:	42a3      	cmp	r3, r4
 801b6c2:	d33b      	bcc.n	801b73c <tcp_split_unsent_seg+0xa4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b6c4:	f1b8 0f00 	cmp.w	r8, #0
 801b6c8:	d02e      	beq.n	801b728 <tcp_split_unsent_seg+0x90>
  optflags = useg->flags;
 801b6ca:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801b6ce:	eba8 0704 	sub.w	r7, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b6d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b6d6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b6d8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801b6dc:	b2bf      	uxth	r7, r7
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801b6de:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801b6e2:	eb07 010b 	add.w	r1, r7, fp
 801b6e6:	b289      	uxth	r1, r1
 801b6e8:	f7fb ffd2 	bl	8017690 <pbuf_alloc>
  if (p == NULL) {
 801b6ec:	4681      	mov	r9, r0
 801b6ee:	b390      	cbz	r0, 801b756 <tcp_split_unsent_seg+0xbe>
  offset = useg->p->tot_len - useg->len + split;
 801b6f0:	6870      	ldr	r0, [r6, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b6f2:	463a      	mov	r2, r7
  offset = useg->p->tot_len - useg->len + split;
 801b6f4:	8931      	ldrh	r1, [r6, #8]
 801b6f6:	8903      	ldrh	r3, [r0, #8]
 801b6f8:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b6fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 801b6fe:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801b700:	4459      	add	r1, fp
 801b702:	b29b      	uxth	r3, r3
 801b704:	f7fc f9ee 	bl	8017ae4 <pbuf_copy_partial>
 801b708:	42b8      	cmp	r0, r7
 801b70a:	d02f      	beq.n	801b76c <tcp_split_unsent_seg+0xd4>
  TCP_STATS_INC(tcp.memerr);
 801b70c:	4a53      	ldr	r2, [pc, #332]	; (801b85c <tcp_split_unsent_seg+0x1c4>)
    pbuf_free(p);
 801b70e:	4648      	mov	r0, r9
  TCP_STATS_INC(tcp.memerr);
 801b710:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801b714:	3301      	adds	r3, #1
 801b716:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801b71a:	f7fb ff4b 	bl	80175b4 <pbuf_free>
  return ERR_MEM;
 801b71e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b722:	b003      	add	sp, #12
 801b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b728:	4b4d      	ldr	r3, [pc, #308]	; (801b860 <tcp_split_unsent_seg+0x1c8>)
 801b72a:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801b72e:	494d      	ldr	r1, [pc, #308]	; (801b864 <tcp_split_unsent_seg+0x1cc>)
 801b730:	484d      	ldr	r0, [pc, #308]	; (801b868 <tcp_split_unsent_seg+0x1d0>)
 801b732:	f006 f857 	bl	80217e4 <iprintf>
 801b736:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801b73a:	e7c6      	b.n	801b6ca <tcp_split_unsent_seg+0x32>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801b73c:	4b48      	ldr	r3, [pc, #288]	; (801b860 <tcp_split_unsent_seg+0x1c8>)
 801b73e:	f240 325b 	movw	r2, #859	; 0x35b
 801b742:	494a      	ldr	r1, [pc, #296]	; (801b86c <tcp_split_unsent_seg+0x1d4>)
 801b744:	4848      	ldr	r0, [pc, #288]	; (801b868 <tcp_split_unsent_seg+0x1d0>)
 801b746:	f006 f84d 	bl	80217e4 <iprintf>
 801b74a:	f8b6 8008 	ldrh.w	r8, [r6, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801b74e:	f1b8 0f00 	cmp.w	r8, #0
 801b752:	d1ba      	bne.n	801b6ca <tcp_split_unsent_seg+0x32>
 801b754:	e7e8      	b.n	801b728 <tcp_split_unsent_seg+0x90>
  TCP_STATS_INC(tcp.memerr);
 801b756:	4a41      	ldr	r2, [pc, #260]	; (801b85c <tcp_split_unsent_seg+0x1c4>)
  return ERR_MEM;
 801b758:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801b75c:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801b760:	3301      	adds	r3, #1
 801b762:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801b766:	b003      	add	sp, #12
 801b768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b76c:	68f3      	ldr	r3, [r6, #12]
 801b76e:	8998      	ldrh	r0, [r3, #12]
 801b770:	f7fa f8cc 	bl	801590c <lwip_htons>
  if (split_flags & TCP_PSH) {
 801b774:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b778:	b2c7      	uxtb	r7, r0
  if (split_flags & TCP_PSH) {
 801b77a:	d15c      	bne.n	801b836 <tcp_split_unsent_seg+0x19e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801b77c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801b780:	07fb      	lsls	r3, r7, #31
 801b782:	d503      	bpl.n	801b78c <tcp_split_unsent_seg+0xf4>
    split_flags &= ~TCP_FIN;
 801b784:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801b788:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801b78c:	68f3      	ldr	r3, [r6, #12]
 801b78e:	6858      	ldr	r0, [r3, #4]
 801b790:	f7fa f8c0 	bl	8015914 <lwip_htonl>
 801b794:	f8cd a000 	str.w	sl, [sp]
 801b798:	1823      	adds	r3, r4, r0
 801b79a:	465a      	mov	r2, fp
 801b79c:	4649      	mov	r1, r9
 801b79e:	4628      	mov	r0, r5
 801b7a0:	f7ff faba 	bl	801ad18 <tcp_create_segment>
  if (seg == NULL) {
 801b7a4:	4682      	mov	sl, r0
 801b7a6:	2800      	cmp	r0, #0
 801b7a8:	d0b0      	beq.n	801b70c <tcp_split_unsent_seg+0x74>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b7aa:	6870      	ldr	r0, [r6, #4]
 801b7ac:	eba4 0408 	sub.w	r4, r4, r8
 801b7b0:	f7fc f864 	bl	801787c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b7b4:	f8d6 c004 	ldr.w	ip, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b7b8:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801b7bc:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b7be:	f8bc 1008 	ldrh.w	r1, [ip, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b7c2:	1a13      	subs	r3, r2, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b7c4:	4660      	mov	r0, ip
 801b7c6:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801b7c8:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801b7cc:	b289      	uxth	r1, r1
 801b7ce:	f7fb fffd 	bl	80177cc <pbuf_realloc>
  useg->len -= remainder;
 801b7d2:	8932      	ldrh	r2, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b7d4:	68f3      	ldr	r3, [r6, #12]
 801b7d6:	4638      	mov	r0, r7
  useg->len -= remainder;
 801b7d8:	4414      	add	r4, r2
 801b7da:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b7dc:	899c      	ldrh	r4, [r3, #12]
 801b7de:	f7fa f895 	bl	801590c <lwip_htons>
 801b7e2:	4602      	mov	r2, r0
 801b7e4:	68f3      	ldr	r3, [r6, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b7e6:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801b7e8:	4314      	orrs	r4, r2
 801b7ea:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b7ec:	f7fc f846 	bl	801787c <pbuf_clen>
 801b7f0:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801b7f4:	4603      	mov	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b7f6:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801b7fa:	4413      	add	r3, r2
 801b7fc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b800:	f7fc f83c 	bl	801787c <pbuf_clen>
 801b804:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  seg->next = useg->next;
 801b808:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b80a:	4410      	add	r0, r2
 801b80c:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801b810:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801b814:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801b818:	f8da 0000 	ldr.w	r0, [sl]
 801b81c:	b180      	cbz	r0, 801b840 <tcp_split_unsent_seg+0x1a8>
    return ERR_OK;
 801b81e:	2000      	movs	r0, #0
}
 801b820:	b003      	add	sp, #12
 801b822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801b826:	4b0e      	ldr	r3, [pc, #56]	; (801b860 <tcp_split_unsent_seg+0x1c8>)
 801b828:	f240 324b 	movw	r2, #843	; 0x34b
 801b82c:	4910      	ldr	r1, [pc, #64]	; (801b870 <tcp_split_unsent_seg+0x1d8>)
 801b82e:	480e      	ldr	r0, [pc, #56]	; (801b868 <tcp_split_unsent_seg+0x1d0>)
 801b830:	f005 ffd8 	bl	80217e4 <iprintf>
 801b834:	e738      	b.n	801b6a8 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801b836:	f007 0737 	and.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801b83a:	f04f 0b08 	mov.w	fp, #8
 801b83e:	e79f      	b.n	801b780 <tcp_split_unsent_seg+0xe8>
    pcb->unsent_oversize = 0;
 801b840:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 801b844:	e76d      	b.n	801b722 <tcp_split_unsent_seg+0x8a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801b846:	4b06      	ldr	r3, [pc, #24]	; (801b860 <tcp_split_unsent_seg+0x1c8>)
 801b848:	f240 3253 	movw	r2, #851	; 0x353
 801b84c:	4909      	ldr	r1, [pc, #36]	; (801b874 <tcp_split_unsent_seg+0x1dc>)
 801b84e:	4806      	ldr	r0, [pc, #24]	; (801b868 <tcp_split_unsent_seg+0x1d0>)
 801b850:	f005 ffc8 	bl	80217e4 <iprintf>
    return ERR_VAL;
 801b854:	f06f 0005 	mvn.w	r0, #5
 801b858:	e763      	b.n	801b722 <tcp_split_unsent_seg+0x8a>
 801b85a:	bf00      	nop
 801b85c:	20036794 	.word	0x20036794
 801b860:	0803fb38 	.word	0x0803fb38
 801b864:	0803ff8c 	.word	0x0803ff8c
 801b868:	08027fec 	.word	0x08027fec
 801b86c:	0803ff7c 	.word	0x0803ff7c
 801b870:	0803ff34 	.word	0x0803ff34
 801b874:	0803ff58 	.word	0x0803ff58

0801b878 <tcp_enqueue_flags>:
{
 801b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b87c:	f011 0703 	ands.w	r7, r1, #3
{
 801b880:	b082      	sub	sp, #8
 801b882:	460d      	mov	r5, r1
 801b884:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b886:	d064      	beq.n	801b952 <tcp_enqueue_flags+0xda>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b888:	2c00      	cmp	r4, #0
 801b88a:	d06b      	beq.n	801b964 <tcp_enqueue_flags+0xec>
  if (flags & TCP_SYN) {
 801b88c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b890:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801b894:	d049      	beq.n	801b92a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b896:	2104      	movs	r1, #4
 801b898:	2036      	movs	r0, #54	; 0x36
 801b89a:	f7fb fef9 	bl	8017690 <pbuf_alloc>
 801b89e:	4606      	mov	r6, r0
 801b8a0:	2800      	cmp	r0, #0
 801b8a2:	d049      	beq.n	801b938 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b8a4:	8943      	ldrh	r3, [r0, #10]
 801b8a6:	2b03      	cmp	r3, #3
 801b8a8:	d878      	bhi.n	801b99c <tcp_enqueue_flags+0x124>
 801b8aa:	4b44      	ldr	r3, [pc, #272]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b8ac:	f240 4239 	movw	r2, #1081	; 0x439
 801b8b0:	4943      	ldr	r1, [pc, #268]	; (801b9c0 <tcp_enqueue_flags+0x148>)
    optflags = TF_SEG_OPTS_MSS;
 801b8b2:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801b8b6:	4843      	ldr	r0, [pc, #268]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b8b8:	f005 ff94 	bl	80217e4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801b8bc:	4631      	mov	r1, r6
 801b8be:	f8cd 8000 	str.w	r8, [sp]
 801b8c2:	462a      	mov	r2, r5
 801b8c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	f7ff fa26 	bl	801ad18 <tcp_create_segment>
 801b8cc:	4606      	mov	r6, r0
 801b8ce:	2800      	cmp	r0, #0
 801b8d0:	d032      	beq.n	801b938 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b8d2:	68c3      	ldr	r3, [r0, #12]
 801b8d4:	079a      	lsls	r2, r3, #30
 801b8d6:	d159      	bne.n	801b98c <tcp_enqueue_flags+0x114>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b8d8:	8933      	ldrh	r3, [r6, #8]
 801b8da:	2b00      	cmp	r3, #0
 801b8dc:	d14a      	bne.n	801b974 <tcp_enqueue_flags+0xfc>
  if (pcb->unsent == NULL) {
 801b8de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d051      	beq.n	801b988 <tcp_enqueue_flags+0x110>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801b8e4:	461a      	mov	r2, r3
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d1fb      	bne.n	801b8e4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801b8ec:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801b8ee:	2300      	movs	r3, #0
 801b8f0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801b8f4:	b117      	cbz	r7, 801b8fc <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801b8f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801b8f8:	3301      	adds	r3, #1
 801b8fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801b8fc:	07eb      	lsls	r3, r5, #31
 801b8fe:	d503      	bpl.n	801b908 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801b900:	8b63      	ldrh	r3, [r4, #26]
 801b902:	f043 0320 	orr.w	r3, r3, #32
 801b906:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801b908:	6870      	ldr	r0, [r6, #4]
 801b90a:	f7fb ffb7 	bl	801787c <pbuf_clen>
 801b90e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801b912:	4418      	add	r0, r3
 801b914:	b280      	uxth	r0, r0
 801b916:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801b91a:	b118      	cbz	r0, 801b924 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b91c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801b91e:	2800      	cmp	r0, #0
 801b920:	d03f      	beq.n	801b9a2 <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 801b922:	2000      	movs	r0, #0
}
 801b924:	b002      	add	sp, #8
 801b926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801b92a:	4641      	mov	r1, r8
 801b92c:	2036      	movs	r0, #54	; 0x36
 801b92e:	f7fb feaf 	bl	8017690 <pbuf_alloc>
 801b932:	4606      	mov	r6, r0
 801b934:	2800      	cmp	r0, #0
 801b936:	d1c1      	bne.n	801b8bc <tcp_enqueue_flags+0x44>
    TCP_STATS_INC(tcp.memerr);
 801b938:	4923      	ldr	r1, [pc, #140]	; (801b9c8 <tcp_enqueue_flags+0x150>)
    return ERR_MEM;
 801b93a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b93e:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801b940:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b944:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801b948:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801b94a:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801b94c:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801b950:	e7e8      	b.n	801b924 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801b952:	4b1a      	ldr	r3, [pc, #104]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b954:	f240 4211 	movw	r2, #1041	; 0x411
 801b958:	491c      	ldr	r1, [pc, #112]	; (801b9cc <tcp_enqueue_flags+0x154>)
 801b95a:	481a      	ldr	r0, [pc, #104]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b95c:	f005 ff42 	bl	80217e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801b960:	2c00      	cmp	r4, #0
 801b962:	d193      	bne.n	801b88c <tcp_enqueue_flags+0x14>
 801b964:	4b15      	ldr	r3, [pc, #84]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b966:	f240 4213 	movw	r2, #1043	; 0x413
 801b96a:	4919      	ldr	r1, [pc, #100]	; (801b9d0 <tcp_enqueue_flags+0x158>)
 801b96c:	4815      	ldr	r0, [pc, #84]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b96e:	f005 ff39 	bl	80217e4 <iprintf>
 801b972:	e78b      	b.n	801b88c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801b974:	4b11      	ldr	r3, [pc, #68]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b976:	f240 4243 	movw	r2, #1091	; 0x443
 801b97a:	4916      	ldr	r1, [pc, #88]	; (801b9d4 <tcp_enqueue_flags+0x15c>)
 801b97c:	4811      	ldr	r0, [pc, #68]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b97e:	f005 ff31 	bl	80217e4 <iprintf>
  if (pcb->unsent == NULL) {
 801b982:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801b984:	2b00      	cmp	r3, #0
 801b986:	d1ad      	bne.n	801b8e4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801b988:	66e6      	str	r6, [r4, #108]	; 0x6c
 801b98a:	e7b0      	b.n	801b8ee <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801b98c:	4b0b      	ldr	r3, [pc, #44]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b98e:	f240 4242 	movw	r2, #1090	; 0x442
 801b992:	4911      	ldr	r1, [pc, #68]	; (801b9d8 <tcp_enqueue_flags+0x160>)
 801b994:	480b      	ldr	r0, [pc, #44]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b996:	f005 ff25 	bl	80217e4 <iprintf>
 801b99a:	e79d      	b.n	801b8d8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801b99c:	f04f 0801 	mov.w	r8, #1
 801b9a0:	e78c      	b.n	801b8bc <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801b9a2:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801b9a4:	2c00      	cmp	r4, #0
 801b9a6:	d1bd      	bne.n	801b924 <tcp_enqueue_flags+0xac>
 801b9a8:	4b04      	ldr	r3, [pc, #16]	; (801b9bc <tcp_enqueue_flags+0x144>)
 801b9aa:	f240 4265 	movw	r2, #1125	; 0x465
 801b9ae:	490b      	ldr	r1, [pc, #44]	; (801b9dc <tcp_enqueue_flags+0x164>)
 801b9b0:	4804      	ldr	r0, [pc, #16]	; (801b9c4 <tcp_enqueue_flags+0x14c>)
 801b9b2:	f005 ff17 	bl	80217e4 <iprintf>
  return ERR_OK;
 801b9b6:	4620      	mov	r0, r4
 801b9b8:	e7b4      	b.n	801b924 <tcp_enqueue_flags+0xac>
 801b9ba:	bf00      	nop
 801b9bc:	0803fb38 	.word	0x0803fb38
 801b9c0:	08040014 	.word	0x08040014
 801b9c4:	08027fec 	.word	0x08027fec
 801b9c8:	20036794 	.word	0x20036794
 801b9cc:	0803ff9c 	.word	0x0803ff9c
 801b9d0:	0803fff4 	.word	0x0803fff4
 801b9d4:	08040068 	.word	0x08040068
 801b9d8:	08040050 	.word	0x08040050
 801b9dc:	08040094 	.word	0x08040094

0801b9e0 <tcp_send_fin>:
{
 801b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801b9e2:	4606      	mov	r6, r0
 801b9e4:	b188      	cbz	r0, 801ba0a <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801b9e6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801b9e8:	b14c      	cbz	r4, 801b9fe <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801b9ea:	4625      	mov	r5, r4
 801b9ec:	6824      	ldr	r4, [r4, #0]
 801b9ee:	2c00      	cmp	r4, #0
 801b9f0:	d1fb      	bne.n	801b9ea <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801b9f2:	68eb      	ldr	r3, [r5, #12]
 801b9f4:	8998      	ldrh	r0, [r3, #12]
 801b9f6:	f7f9 ff89 	bl	801590c <lwip_htons>
 801b9fa:	0743      	lsls	r3, r0, #29
 801b9fc:	d00d      	beq.n	801ba1a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801b9fe:	4630      	mov	r0, r6
 801ba00:	2101      	movs	r1, #1
}
 801ba02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ba06:	f7ff bf37 	b.w	801b878 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ba0a:	4b0b      	ldr	r3, [pc, #44]	; (801ba38 <tcp_send_fin+0x58>)
 801ba0c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ba10:	490a      	ldr	r1, [pc, #40]	; (801ba3c <tcp_send_fin+0x5c>)
 801ba12:	480b      	ldr	r0, [pc, #44]	; (801ba40 <tcp_send_fin+0x60>)
 801ba14:	f005 fee6 	bl	80217e4 <iprintf>
 801ba18:	e7e5      	b.n	801b9e6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ba1a:	68eb      	ldr	r3, [r5, #12]
 801ba1c:	2001      	movs	r0, #1
 801ba1e:	899f      	ldrh	r7, [r3, #12]
 801ba20:	f7f9 ff74 	bl	801590c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ba24:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ba26:	68ea      	ldr	r2, [r5, #12]
 801ba28:	4338      	orrs	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 801ba2a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ba2e:	8190      	strh	r0, [r2, #12]
}
 801ba30:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801ba32:	8373      	strh	r3, [r6, #26]
}
 801ba34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ba36:	bf00      	nop
 801ba38:	0803fb38 	.word	0x0803fb38
 801ba3c:	080400bc 	.word	0x080400bc
 801ba40:	08027fec 	.word	0x08027fec

0801ba44 <tcp_rexmit_rto_prepare>:
{
 801ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ba46:	4605      	mov	r5, r0
 801ba48:	b378      	cbz	r0, 801baaa <tcp_rexmit_rto_prepare+0x66>
  if (pcb->unacked == NULL) {
 801ba4a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801ba4c:	b924      	cbnz	r4, 801ba58 <tcp_rexmit_rto_prepare+0x14>
 801ba4e:	e029      	b.n	801baa4 <tcp_rexmit_rto_prepare+0x60>
    if (tcp_output_segment_busy(seg)) {
 801ba50:	f7ff f8fa 	bl	801ac48 <tcp_output_segment_busy>
 801ba54:	bb30      	cbnz	r0, 801baa4 <tcp_rexmit_rto_prepare+0x60>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ba56:	6824      	ldr	r4, [r4, #0]
 801ba58:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801ba5a:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d1f7      	bne.n	801ba50 <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 801ba60:	f7ff f8f2 	bl	801ac48 <tcp_output_segment_busy>
 801ba64:	4606      	mov	r6, r0
 801ba66:	b9e8      	cbnz	r0, 801baa4 <tcp_rexmit_rto_prepare+0x60>
  tcp_set_flags(pcb, TF_RTO);
 801ba68:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 801ba6a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 801ba6c:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801ba6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801ba72:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ba74:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 801ba76:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 801ba78:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ba7c:	6850      	ldr	r0, [r2, #4]
 801ba7e:	f7f9 ff49 	bl	8015914 <lwip_htonl>
 801ba82:	68e3      	ldr	r3, [r4, #12]
 801ba84:	4607      	mov	r7, r0
 801ba86:	8924      	ldrh	r4, [r4, #8]
 801ba88:	8998      	ldrh	r0, [r3, #12]
 801ba8a:	f7f9 ff3f 	bl	801590c <lwip_htons>
 801ba8e:	4603      	mov	r3, r0
 801ba90:	4427      	add	r7, r4
  return ERR_OK;
 801ba92:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ba94:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 801ba98:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ba9a:	bf18      	it	ne
 801ba9c:	2301      	movne	r3, #1
 801ba9e:	443b      	add	r3, r7
 801baa0:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801baa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801baa4:	f06f 0005 	mvn.w	r0, #5
}
 801baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801baaa:	4b04      	ldr	r3, [pc, #16]	; (801babc <tcp_rexmit_rto_prepare+0x78>)
 801baac:	f240 6263 	movw	r2, #1635	; 0x663
 801bab0:	4903      	ldr	r1, [pc, #12]	; (801bac0 <tcp_rexmit_rto_prepare+0x7c>)
 801bab2:	4804      	ldr	r0, [pc, #16]	; (801bac4 <tcp_rexmit_rto_prepare+0x80>)
 801bab4:	f005 fe96 	bl	80217e4 <iprintf>
 801bab8:	e7c7      	b.n	801ba4a <tcp_rexmit_rto_prepare+0x6>
 801baba:	bf00      	nop
 801babc:	0803fb38 	.word	0x0803fb38
 801bac0:	080400d8 	.word	0x080400d8
 801bac4:	08027fec 	.word	0x08027fec

0801bac8 <tcp_rexmit>:
{
 801bac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801baca:	4607      	mov	r7, r0
 801bacc:	b378      	cbz	r0, 801bb2e <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801bace:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801bad0:	2e00      	cmp	r6, #0
 801bad2:	d034      	beq.n	801bb3e <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801bad4:	4630      	mov	r0, r6
 801bad6:	f7ff f8b7 	bl	801ac48 <tcp_output_segment_busy>
 801bada:	bb80      	cbnz	r0, 801bb3e <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801badc:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801bade:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801bae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801bae4:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801bae6:	b91b      	cbnz	r3, 801baf0 <tcp_rexmit+0x28>
 801bae8:	e00f      	b.n	801bb0a <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801baea:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801baec:	682b      	ldr	r3, [r5, #0]
 801baee:	b163      	cbz	r3, 801bb0a <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801baf0:	68db      	ldr	r3, [r3, #12]
 801baf2:	6858      	ldr	r0, [r3, #4]
 801baf4:	f7f9 ff0e 	bl	8015914 <lwip_htonl>
 801baf8:	68f3      	ldr	r3, [r6, #12]
 801bafa:	4604      	mov	r4, r0
 801bafc:	6858      	ldr	r0, [r3, #4]
 801bafe:	f7f9 ff09 	bl	8015914 <lwip_htonl>
 801bb02:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801bb04:	2c00      	cmp	r4, #0
 801bb06:	dbf0      	blt.n	801baea <tcp_rexmit+0x22>
 801bb08:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801bb0a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801bb0c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801bb0e:	6833      	ldr	r3, [r6, #0]
 801bb10:	b153      	cbz	r3, 801bb28 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801bb12:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801bb16:	2bff      	cmp	r3, #255	; 0xff
 801bb18:	d002      	beq.n	801bb20 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801bb1a:	3301      	adds	r3, #1
 801bb1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801bb20:	2300      	movs	r3, #0
  return ERR_OK;
 801bb22:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801bb24:	637b      	str	r3, [r7, #52]	; 0x34
}
 801bb26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801bb28:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801bb2c:	e7f1      	b.n	801bb12 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801bb2e:	4b05      	ldr	r3, [pc, #20]	; (801bb44 <tcp_rexmit+0x7c>)
 801bb30:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801bb34:	4904      	ldr	r1, [pc, #16]	; (801bb48 <tcp_rexmit+0x80>)
 801bb36:	4805      	ldr	r0, [pc, #20]	; (801bb4c <tcp_rexmit+0x84>)
 801bb38:	f005 fe54 	bl	80217e4 <iprintf>
 801bb3c:	e7c7      	b.n	801bace <tcp_rexmit+0x6>
    return ERR_VAL;
 801bb3e:	f06f 0005 	mvn.w	r0, #5
}
 801bb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb44:	0803fb38 	.word	0x0803fb38
 801bb48:	080400fc 	.word	0x080400fc
 801bb4c:	08027fec 	.word	0x08027fec

0801bb50 <tcp_rexmit_fast>:
{
 801bb50:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bb52:	4604      	mov	r4, r0
 801bb54:	b340      	cbz	r0, 801bba8 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801bb56:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bb58:	b113      	cbz	r3, 801bb60 <tcp_rexmit_fast+0x10>
 801bb5a:	8b63      	ldrh	r3, [r4, #26]
 801bb5c:	075b      	lsls	r3, r3, #29
 801bb5e:	d500      	bpl.n	801bb62 <tcp_rexmit_fast+0x12>
}
 801bb60:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801bb62:	4620      	mov	r0, r4
 801bb64:	f7ff ffb0 	bl	801bac8 <tcp_rexmit>
 801bb68:	2800      	cmp	r0, #0
 801bb6a:	d1f9      	bne.n	801bb60 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bb6c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801bb70:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bb74:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bb76:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bb78:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bb7c:	bf28      	it	cs
 801bb7e:	4619      	movcs	r1, r3
 801bb80:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bb82:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801bb86:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801bb8a:	d902      	bls.n	801bb92 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801bb8c:	b283      	uxth	r3, r0
 801bb8e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bb92:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801bb94:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801bb96:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bb98:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801bb9a:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801bb9e:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801bba0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801bba4:	8362      	strh	r2, [r4, #26]
}
 801bba6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801bba8:	4b03      	ldr	r3, [pc, #12]	; (801bbb8 <tcp_rexmit_fast+0x68>)
 801bbaa:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801bbae:	4903      	ldr	r1, [pc, #12]	; (801bbbc <tcp_rexmit_fast+0x6c>)
 801bbb0:	4803      	ldr	r0, [pc, #12]	; (801bbc0 <tcp_rexmit_fast+0x70>)
 801bbb2:	f005 fe17 	bl	80217e4 <iprintf>
 801bbb6:	e7ce      	b.n	801bb56 <tcp_rexmit_fast+0x6>
 801bbb8:	0803fb38 	.word	0x0803fb38
 801bbbc:	08040114 	.word	0x08040114
 801bbc0:	08027fec 	.word	0x08027fec

0801bbc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bbc8:	b084      	sub	sp, #16
 801bbca:	4607      	mov	r7, r0
 801bbcc:	460e      	mov	r6, r1
 801bbce:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bbd0:	461d      	mov	r5, r3
{
 801bbd2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801bbd6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801bbda:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bbde:	b313      	cbz	r3, 801bc26 <tcp_rst+0x62>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bbe0:	f1b8 0f00 	cmp.w	r8, #0
 801bbe4:	d029      	beq.n	801bc3a <tcp_rst+0x76>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801bbe6:	4630      	mov	r0, r6
 801bbe8:	2614      	movs	r6, #20
 801bbea:	f7f9 fe93 	bl	8015914 <lwip_htonl>
 801bbee:	f246 0108 	movw	r1, #24584	; 0x6008
 801bbf2:	4602      	mov	r2, r0
 801bbf4:	464b      	mov	r3, r9
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	9102      	str	r1, [sp, #8]
 801bbfa:	f8cd a000 	str.w	sl, [sp]
 801bbfe:	2100      	movs	r1, #0
 801bc00:	9601      	str	r6, [sp, #4]
 801bc02:	f7ff f90f 	bl	801ae24 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801bc06:	4604      	mov	r4, r0
 801bc08:	b150      	cbz	r0, 801bc20 <tcp_rst+0x5c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bc0a:	f7ff f97b 	bl	801af04 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bc0e:	4643      	mov	r3, r8
 801bc10:	462a      	mov	r2, r5
 801bc12:	4621      	mov	r1, r4
 801bc14:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801bc16:	b004      	add	sp, #16
 801bc18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801bc1c:	f7ff b982 	b.w	801af24 <tcp_output_control_segment>
}
 801bc20:	b004      	add	sp, #16
 801bc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801bc26:	4b09      	ldr	r3, [pc, #36]	; (801bc4c <tcp_rst+0x88>)
 801bc28:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801bc2c:	4908      	ldr	r1, [pc, #32]	; (801bc50 <tcp_rst+0x8c>)
 801bc2e:	4809      	ldr	r0, [pc, #36]	; (801bc54 <tcp_rst+0x90>)
 801bc30:	f005 fdd8 	bl	80217e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801bc34:	f1b8 0f00 	cmp.w	r8, #0
 801bc38:	d1d5      	bne.n	801bbe6 <tcp_rst+0x22>
 801bc3a:	4b04      	ldr	r3, [pc, #16]	; (801bc4c <tcp_rst+0x88>)
 801bc3c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801bc40:	4905      	ldr	r1, [pc, #20]	; (801bc58 <tcp_rst+0x94>)
 801bc42:	4804      	ldr	r0, [pc, #16]	; (801bc54 <tcp_rst+0x90>)
 801bc44:	f005 fdce 	bl	80217e4 <iprintf>
 801bc48:	e7cd      	b.n	801bbe6 <tcp_rst+0x22>
 801bc4a:	bf00      	nop
 801bc4c:	0803fb38 	.word	0x0803fb38
 801bc50:	08040134 	.word	0x08040134
 801bc54:	08027fec 	.word	0x08027fec
 801bc58:	08040150 	.word	0x08040150

0801bc5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801bc5c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bc5e:	4604      	mov	r4, r0
 801bc60:	b1d8      	cbz	r0, 801bc9a <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801bc62:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801bc64:	f7f9 fe56 	bl	8015914 <lwip_htonl>
 801bc68:	2100      	movs	r1, #0
 801bc6a:	4602      	mov	r2, r0
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	f7ff f921 	bl	801aeb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801bc72:	4605      	mov	r5, r0
 801bc74:	b1c8      	cbz	r0, 801bcaa <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801bc76:	f7ff f945 	bl	801af04 <tcp_output_fill_options.isra.0.constprop.0>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bc7a:	1d23      	adds	r3, r4, #4
 801bc7c:	4629      	mov	r1, r5
 801bc7e:	4622      	mov	r2, r4
 801bc80:	4620      	mov	r0, r4
 801bc82:	f7ff f94f 	bl	801af24 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc86:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801bc88:	b118      	cbz	r0, 801bc92 <tcp_send_empty_ack+0x36>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc8a:	f043 0303 	orr.w	r3, r3, #3
 801bc8e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801bc90:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bc92:	f023 0303 	bic.w	r3, r3, #3
 801bc96:	8363      	strh	r3, [r4, #26]
}
 801bc98:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801bc9a:	4b07      	ldr	r3, [pc, #28]	; (801bcb8 <tcp_send_empty_ack+0x5c>)
 801bc9c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801bca0:	4906      	ldr	r1, [pc, #24]	; (801bcbc <tcp_send_empty_ack+0x60>)
 801bca2:	4807      	ldr	r0, [pc, #28]	; (801bcc0 <tcp_send_empty_ack+0x64>)
 801bca4:	f005 fd9e 	bl	80217e4 <iprintf>
 801bca8:	e7db      	b.n	801bc62 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bcaa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801bcac:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801bcb0:	f043 0303 	orr.w	r3, r3, #3
 801bcb4:	8363      	strh	r3, [r4, #26]
}
 801bcb6:	bd38      	pop	{r3, r4, r5, pc}
 801bcb8:	0803fb38 	.word	0x0803fb38
 801bcbc:	0804016c 	.word	0x0804016c
 801bcc0:	08027fec 	.word	0x08027fec

0801bcc4 <tcp_output>:
{
 801bcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801bcc8:	4604      	mov	r4, r0
{
 801bcca:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801bccc:	2800      	cmp	r0, #0
 801bcce:	f000 81d0 	beq.w	801c072 <tcp_output+0x3ae>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bcd2:	7d23      	ldrb	r3, [r4, #20]
 801bcd4:	2b01      	cmp	r3, #1
 801bcd6:	f000 8187 	beq.w	801bfe8 <tcp_output+0x324>
  if (tcp_input_pcb == pcb) {
 801bcda:	4bbc      	ldr	r3, [pc, #752]	; (801bfcc <tcp_output+0x308>)
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	42a3      	cmp	r3, r4
 801bce0:	f000 818e 	beq.w	801c000 <tcp_output+0x33c>
  seg = pcb->unsent;
 801bce4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801bce6:	b33d      	cbz	r5, 801bd38 <tcp_output+0x74>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801bce8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801bcea:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bcee:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801bcf2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801bcf6:	2800      	cmp	r0, #0
 801bcf8:	f040 81c3 	bne.w	801c082 <tcp_output+0x3be>
    return ip_route(src, dst);
 801bcfc:	4648      	mov	r0, r9
 801bcfe:	f003 f91f 	bl	801ef40 <ip4_route>
 801bd02:	9005      	str	r0, [sp, #20]
  if (netif == NULL) {
 801bd04:	9a05      	ldr	r2, [sp, #20]
 801bd06:	2a00      	cmp	r2, #0
 801bd08:	f000 81cd 	beq.w	801c0a6 <tcp_output+0x3e2>
  if (ip_addr_isany(&pcb->local_ip)) {
 801bd0c:	6823      	ldr	r3, [r4, #0]
 801bd0e:	b90b      	cbnz	r3, 801bd14 <tcp_output+0x50>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bd10:	6853      	ldr	r3, [r2, #4]
 801bd12:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801bd14:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bd16:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801bd18:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801bd1a:	bf28      	it	cs
 801bd1c:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801bd1e:	f7f9 fdf9 	bl	8015914 <lwip_htonl>
 801bd22:	892b      	ldrh	r3, [r5, #8]
 801bd24:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801bd26:	1a9b      	subs	r3, r3, r2
 801bd28:	4418      	add	r0, r3
 801bd2a:	42b8      	cmp	r0, r7
 801bd2c:	d90f      	bls.n	801bd4e <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801bd2e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801bd32:	42bb      	cmp	r3, r7
 801bd34:	f000 816e 	beq.w	801c014 <tcp_output+0x350>
    if (pcb->flags & TF_ACK_NOW) {
 801bd38:	8b62      	ldrh	r2, [r4, #26]
 801bd3a:	0791      	lsls	r1, r2, #30
 801bd3c:	f100 8164 	bmi.w	801c008 <tcp_output+0x344>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801bd40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801bd44:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801bd46:	8362      	strh	r2, [r4, #26]
}
 801bd48:	b007      	add	sp, #28
 801bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801bd4e:	2200      	movs	r2, #0
  useg = pcb->unacked;
 801bd50:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801bd52:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
  if (useg != NULL) {
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	f000 816c 	beq.w	801c034 <tcp_output+0x370>
    for (; useg->next != NULL; useg = useg->next);
 801bd5c:	4698      	mov	r8, r3
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d1fb      	bne.n	801bd5c <tcp_output+0x98>
    LWIP_ASSERT("RST not expected here!",
 801bd64:	f8df b278 	ldr.w	fp, [pc, #632]	; 801bfe0 <tcp_output+0x31c>
 801bd68:	464e      	mov	r6, r9
 801bd6a:	e0d5      	b.n	801bf18 <tcp_output+0x254>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bd6c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd6e:	b163      	cbz	r3, 801bd8a <tcp_output+0xc6>
 801bd70:	8b63      	ldrh	r3, [r4, #26]
 801bd72:	f013 0f44 	tst.w	r3, #68	; 0x44
 801bd76:	461a      	mov	r2, r3
 801bd78:	d107      	bne.n	801bd8a <tcp_output+0xc6>
 801bd7a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801bd7c:	2900      	cmp	r1, #0
 801bd7e:	f000 810e 	beq.w	801bf9e <tcp_output+0x2da>
 801bd82:	6808      	ldr	r0, [r1, #0]
 801bd84:	2800      	cmp	r0, #0
 801bd86:	f000 8104 	beq.w	801bf92 <tcp_output+0x2ce>
    if (pcb->state != SYN_SENT) {
 801bd8a:	7d23      	ldrb	r3, [r4, #20]
 801bd8c:	2b02      	cmp	r3, #2
 801bd8e:	d009      	beq.n	801bda4 <tcp_output+0xe0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801bd90:	68eb      	ldr	r3, [r5, #12]
 801bd92:	2010      	movs	r0, #16
 801bd94:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 801bd98:	f7f9 fdb8 	bl	801590c <lwip_htons>
 801bd9c:	68eb      	ldr	r3, [r5, #12]
 801bd9e:	ea4a 0000 	orr.w	r0, sl, r0
 801bda2:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801bda4:	4628      	mov	r0, r5
 801bda6:	f7fe ff4f 	bl	801ac48 <tcp_output_segment_busy>
 801bdaa:	2800      	cmp	r0, #0
 801bdac:	d16e      	bne.n	801be8c <tcp_output+0x1c8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bdae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdb0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801bdb4:	f7f9 fdae 	bl	8015914 <lwip_htonl>
 801bdb8:	4603      	mov	r3, r0
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bdba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801bdbc:	f8ca 3008 	str.w	r3, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bdc0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801bdc4:	f7f9 fda2 	bl	801590c <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bdc8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801bdca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801bdcc:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bdd0:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bdd2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801bdd6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801bdd8:	7aab      	ldrb	r3, [r5, #10]
 801bdda:	07db      	lsls	r3, r3, #31
 801bddc:	f100 80c8 	bmi.w	801bf70 <tcp_output+0x2ac>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801bde0:	f10a 0914 	add.w	r9, sl, #20
  if (pcb->rtime < 0) {
 801bde4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801bde8:	2a00      	cmp	r2, #0
 801bdea:	da01      	bge.n	801bdf0 <tcp_output+0x12c>
    pcb->rtime = 0;
 801bdec:	2200      	movs	r2, #0
 801bdee:	8622      	strh	r2, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801bdf0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801bdf2:	2a00      	cmp	r2, #0
 801bdf4:	f000 80b1 	beq.w	801bf5a <tcp_output+0x296>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bdf8:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801bdfa:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801bdfe:	6841      	ldr	r1, [r0, #4]
  seg->p->tot_len -= len;
 801be00:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801be02:	ebaa 0101 	sub.w	r1, sl, r1
  seg->p->len -= len;
 801be06:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801be0a:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801be0e:	b289      	uxth	r1, r1
  seg->p->tot_len -= len;
 801be10:	1a52      	subs	r2, r2, r1
  seg->p->len -= len;
 801be12:	ebae 0101 	sub.w	r1, lr, r1
  seg->p->tot_len -= len;
 801be16:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801be18:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801be1a:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801be1c:	f88a c010 	strb.w	ip, [sl, #16]
 801be20:	f88a c011 	strb.w	ip, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801be24:	7aa9      	ldrb	r1, [r5, #10]
 801be26:	0089      	lsls	r1, r1, #2
 801be28:	f001 0104 	and.w	r1, r1, #4
 801be2c:	3114      	adds	r1, #20
 801be2e:	4451      	add	r1, sl
 801be30:	4589      	cmp	r9, r1
 801be32:	d00a      	beq.n	801be4a <tcp_output+0x186>
 801be34:	f240 621c 	movw	r2, #1564	; 0x61c
 801be38:	465b      	mov	r3, fp
 801be3a:	4965      	ldr	r1, [pc, #404]	; (801bfd0 <tcp_output+0x30c>)
 801be3c:	4865      	ldr	r0, [pc, #404]	; (801bfd4 <tcp_output+0x310>)
 801be3e:	f005 fcd1 	bl	80217e4 <iprintf>
 801be42:	6868      	ldr	r0, [r5, #4]
 801be44:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801be48:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801be4a:	4623      	mov	r3, r4
 801be4c:	2106      	movs	r1, #6
 801be4e:	9600      	str	r6, [sp, #0]
 801be50:	f7fa fb0e 	bl	8016470 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801be54:	f8df c18c 	ldr.w	ip, [pc, #396]	; 801bfe4 <tcp_output+0x320>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801be58:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801be5c:	f8aa 0010 	strh.w	r0, [sl, #16]
  TCP_STATS_INC(tcp.xmit);
 801be60:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801be64:	4632      	mov	r2, r6
 801be66:	6868      	ldr	r0, [r5, #4]
 801be68:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801be6a:	f103 0901 	add.w	r9, r3, #1
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801be6e:	9b05      	ldr	r3, [sp, #20]
 801be70:	e9cd e301 	strd	lr, r3, [sp, #4]
  TCP_STATS_INC(tcp.xmit);
 801be74:	f8ac 9090 	strh.w	r9, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801be78:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801be7c:	7ae3      	ldrb	r3, [r4, #11]
 801be7e:	f8cd c000 	str.w	ip, [sp]
 801be82:	f003 fa77 	bl	801f374 <ip4_output_if>
    if (err != ERR_OK) {
 801be86:	2800      	cmp	r0, #0
 801be88:	f040 8108 	bne.w	801c09c <tcp_output+0x3d8>
    if (pcb->state != SYN_SENT) {
 801be8c:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 801be8e:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801be90:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 801be92:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801be94:	d003      	beq.n	801be9e <tcp_output+0x1da>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801be96:	8b63      	ldrh	r3, [r4, #26]
 801be98:	f023 0303 	bic.w	r3, r3, #3
 801be9c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801be9e:	68eb      	ldr	r3, [r5, #12]
 801bea0:	6858      	ldr	r0, [r3, #4]
 801bea2:	f7f9 fd37 	bl	8015914 <lwip_htonl>
 801bea6:	68ea      	ldr	r2, [r5, #12]
 801bea8:	4682      	mov	sl, r0
 801beaa:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801beae:	8990      	ldrh	r0, [r2, #12]
 801beb0:	f7f9 fd2c 	bl	801590c <lwip_htons>
 801beb4:	f010 0303 	ands.w	r3, r0, #3
 801beb8:	44ca      	add	sl, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801beba:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801bebc:	bf18      	it	ne
 801bebe:	2301      	movne	r3, #1
 801bec0:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 801bec2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bec6:	1ad2      	subs	r2, r2, r3
 801bec8:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 801beca:	bfb8      	it	lt
 801becc:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801bece:	68eb      	ldr	r3, [r5, #12]
 801bed0:	8998      	ldrh	r0, [r3, #12]
 801bed2:	f7f9 fd1b 	bl	801590c <lwip_htons>
 801bed6:	f010 0003 	ands.w	r0, r0, #3
 801beda:	bf18      	it	ne
 801bedc:	2001      	movne	r0, #1
 801bede:	eb10 0f0a 	cmn.w	r0, sl
 801bee2:	d033      	beq.n	801bf4c <tcp_output+0x288>
      seg->next = NULL;
 801bee4:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801bee6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801bee8:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801beea:	b39b      	cbz	r3, 801bf54 <tcp_output+0x290>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801beec:	68eb      	ldr	r3, [r5, #12]
 801beee:	6858      	ldr	r0, [r3, #4]
 801bef0:	f7f9 fd10 	bl	8015914 <lwip_htonl>
 801bef4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bef8:	4682      	mov	sl, r0
 801befa:	6858      	ldr	r0, [r3, #4]
 801befc:	f7f9 fd0a 	bl	8015914 <lwip_htonl>
 801bf00:	ebaa 0000 	sub.w	r0, sl, r0
 801bf04:	2800      	cmp	r0, #0
 801bf06:	f2c0 8097 	blt.w	801c038 <tcp_output+0x374>
          useg->next = seg;
 801bf0a:	f8c8 5000 	str.w	r5, [r8]
 801bf0e:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801bf10:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801bf12:	2d00      	cmp	r5, #0
 801bf14:	f000 80b9 	beq.w	801c08a <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801bf18:	68eb      	ldr	r3, [r5, #12]
 801bf1a:	6858      	ldr	r0, [r3, #4]
 801bf1c:	f7f9 fcfa 	bl	8015914 <lwip_htonl>
 801bf20:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801bf22:	892b      	ldrh	r3, [r5, #8]
 801bf24:	1a80      	subs	r0, r0, r2
 801bf26:	4418      	add	r0, r3
  while (seg != NULL &&
 801bf28:	42b8      	cmp	r0, r7
 801bf2a:	f200 80b0 	bhi.w	801c08e <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801bf2e:	68eb      	ldr	r3, [r5, #12]
 801bf30:	8998      	ldrh	r0, [r3, #12]
 801bf32:	f7f9 fceb 	bl	801590c <lwip_htons>
 801bf36:	0742      	lsls	r2, r0, #29
 801bf38:	f57f af18 	bpl.w	801bd6c <tcp_output+0xa8>
 801bf3c:	465b      	mov	r3, fp
 801bf3e:	f240 5236 	movw	r2, #1334	; 0x536
 801bf42:	4925      	ldr	r1, [pc, #148]	; (801bfd8 <tcp_output+0x314>)
 801bf44:	4823      	ldr	r0, [pc, #140]	; (801bfd4 <tcp_output+0x310>)
 801bf46:	f005 fc4d 	bl	80217e4 <iprintf>
 801bf4a:	e70f      	b.n	801bd6c <tcp_output+0xa8>
      tcp_seg_free(seg);
 801bf4c:	4628      	mov	r0, r5
 801bf4e:	f7fc f959 	bl	8018204 <tcp_seg_free>
 801bf52:	e7dd      	b.n	801bf10 <tcp_output+0x24c>
        pcb->unacked = seg;
 801bf54:	46a8      	mov	r8, r5
 801bf56:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801bf58:	e7da      	b.n	801bf10 <tcp_output+0x24c>
    pcb->rttest = tcp_ticks;
 801bf5a:	4a20      	ldr	r2, [pc, #128]	; (801bfdc <tcp_output+0x318>)
 801bf5c:	6812      	ldr	r2, [r2, #0]
 801bf5e:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801bf60:	f8da 0004 	ldr.w	r0, [sl, #4]
 801bf64:	f7f9 fcd6 	bl	8015914 <lwip_htonl>
 801bf68:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801bf6c:	63a0      	str	r0, [r4, #56]	; 0x38
 801bf6e:	e743      	b.n	801bdf8 <tcp_output+0x134>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bf70:	4632      	mov	r2, r6
 801bf72:	9905      	ldr	r1, [sp, #20]
 801bf74:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801bf78:	f10a 0918 	add.w	r9, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801bf7c:	f7fd f8e0 	bl	8019140 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801bf80:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801bf84:	f7f9 fcc6 	bl	8015914 <lwip_htonl>
 801bf88:	f8ca 0014 	str.w	r0, [sl, #20]
    opts += 1;
 801bf8c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801bf90:	e728      	b.n	801bde4 <tcp_output+0x120>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801bf92:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801bf96:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801bf98:	4584      	cmp	ip, r0
 801bf9a:	f4bf aef6 	bcs.w	801bd8a <tcp_output+0xc6>
 801bf9e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	f43f aef1 	beq.w	801bd8a <tcp_output+0xc6>
 801bfa8:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801bfac:	2808      	cmp	r0, #8
 801bfae:	f63f aeec 	bhi.w	801bd8a <tcp_output+0xc6>
 801bfb2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801bfb6:	f47f aee8 	bne.w	801bd8a <tcp_output+0xc6>
  if (pcb->unsent == NULL) {
 801bfba:	2900      	cmp	r1, #0
 801bfbc:	f47f aec0 	bne.w	801bd40 <tcp_output+0x7c>
    pcb->unsent_oversize = 0;
 801bfc0:	2100      	movs	r1, #0
 801bfc2:	461a      	mov	r2, r3
 801bfc4:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801bfc8:	e6ba      	b.n	801bd40 <tcp_output+0x7c>
 801bfca:	bf00      	nop
 801bfcc:	200368b4 	.word	0x200368b4
 801bfd0:	080401e4 	.word	0x080401e4
 801bfd4:	08027fec 	.word	0x08027fec
 801bfd8:	080401cc 	.word	0x080401cc
 801bfdc:	200368a4 	.word	0x200368a4
 801bfe0:	0803fb38 	.word	0x0803fb38
 801bfe4:	20036794 	.word	0x20036794
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801bfe8:	4b30      	ldr	r3, [pc, #192]	; (801c0ac <tcp_output+0x3e8>)
 801bfea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801bfee:	4930      	ldr	r1, [pc, #192]	; (801c0b0 <tcp_output+0x3ec>)
 801bff0:	4830      	ldr	r0, [pc, #192]	; (801c0b4 <tcp_output+0x3f0>)
 801bff2:	f005 fbf7 	bl	80217e4 <iprintf>
  if (tcp_input_pcb == pcb) {
 801bff6:	4b30      	ldr	r3, [pc, #192]	; (801c0b8 <tcp_output+0x3f4>)
 801bff8:	681b      	ldr	r3, [r3, #0]
 801bffa:	42a3      	cmp	r3, r4
 801bffc:	f47f ae72 	bne.w	801bce4 <tcp_output+0x20>
    return ERR_OK;
 801c000:	2000      	movs	r0, #0
}
 801c002:	b007      	add	sp, #28
 801c004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801c008:	4620      	mov	r0, r4
}
 801c00a:	b007      	add	sp, #28
 801c00c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801c010:	f7ff be24 	b.w	801bc5c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801c014:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c016:	2b00      	cmp	r3, #0
 801c018:	f47f ae8e 	bne.w	801bd38 <tcp_output+0x74>
 801c01c:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801c020:	2b00      	cmp	r3, #0
 801c022:	f47f ae89 	bne.w	801bd38 <tcp_output+0x74>
      pcb->persist_cnt = 0;
 801c026:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801c02a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801c02e:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801c032:	e681      	b.n	801bd38 <tcp_output+0x74>
 801c034:	4698      	mov	r8, r3
 801c036:	e695      	b.n	801bd64 <tcp_output+0xa0>
          while (*cur_seg &&
 801c038:	6f22      	ldr	r2, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801c03a:	f104 0970 	add.w	r9, r4, #112	; 0x70
          while (*cur_seg &&
 801c03e:	b92a      	cbnz	r2, 801c04c <tcp_output+0x388>
 801c040:	e013      	b.n	801c06a <tcp_output+0x3a6>
            cur_seg = &((*cur_seg)->next );
 801c042:	f8d9 9000 	ldr.w	r9, [r9]
          while (*cur_seg &&
 801c046:	f8d9 2000 	ldr.w	r2, [r9]
 801c04a:	b172      	cbz	r2, 801c06a <tcp_output+0x3a6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801c04c:	68d3      	ldr	r3, [r2, #12]
 801c04e:	6858      	ldr	r0, [r3, #4]
 801c050:	f7f9 fc60 	bl	8015914 <lwip_htonl>
 801c054:	68eb      	ldr	r3, [r5, #12]
 801c056:	4682      	mov	sl, r0
 801c058:	6858      	ldr	r0, [r3, #4]
 801c05a:	f7f9 fc5b 	bl	8015914 <lwip_htonl>
 801c05e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 801c062:	2800      	cmp	r0, #0
 801c064:	dbed      	blt.n	801c042 <tcp_output+0x37e>
 801c066:	f8d9 2000 	ldr.w	r2, [r9]
          seg->next = (*cur_seg);
 801c06a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801c06c:	f8c9 5000 	str.w	r5, [r9]
 801c070:	e74e      	b.n	801bf10 <tcp_output+0x24c>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801c072:	4b0e      	ldr	r3, [pc, #56]	; (801c0ac <tcp_output+0x3e8>)
 801c074:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801c078:	4910      	ldr	r1, [pc, #64]	; (801c0bc <tcp_output+0x3f8>)
 801c07a:	480e      	ldr	r0, [pc, #56]	; (801c0b4 <tcp_output+0x3f0>)
 801c07c:	f005 fbb2 	bl	80217e4 <iprintf>
 801c080:	e627      	b.n	801bcd2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801c082:	f7fb f9b9 	bl	80173f8 <netif_get_by_index>
 801c086:	9005      	str	r0, [sp, #20]
 801c088:	e63c      	b.n	801bd04 <tcp_output+0x40>
 801c08a:	8b63      	ldrh	r3, [r4, #26]
 801c08c:	e798      	b.n	801bfc0 <tcp_output+0x2fc>
 801c08e:	8b63      	ldrh	r3, [r4, #26]
 801c090:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801c092:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801c094:	2900      	cmp	r1, #0
 801c096:	f47f ae53 	bne.w	801bd40 <tcp_output+0x7c>
 801c09a:	e791      	b.n	801bfc0 <tcp_output+0x2fc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c09c:	8b63      	ldrh	r3, [r4, #26]
 801c09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0a2:	8363      	strh	r3, [r4, #26]
      return err;
 801c0a4:	e650      	b.n	801bd48 <tcp_output+0x84>
    return ERR_RTE;
 801c0a6:	f06f 0003 	mvn.w	r0, #3
 801c0aa:	e64d      	b.n	801bd48 <tcp_output+0x84>
 801c0ac:	0803fb38 	.word	0x0803fb38
 801c0b0:	080401a4 	.word	0x080401a4
 801c0b4:	08027fec 	.word	0x08027fec
 801c0b8:	200368b4 	.word	0x200368b4
 801c0bc:	0804018c 	.word	0x0804018c

0801c0c0 <tcp_rexmit_rto_commit>:
{
 801c0c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c0c2:	4604      	mov	r4, r0
 801c0c4:	b158      	cbz	r0, 801c0de <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801c0c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801c0ca:	2bff      	cmp	r3, #255	; 0xff
 801c0cc:	d002      	beq.n	801c0d4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801c0ce:	3301      	adds	r3, #1
 801c0d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801c0d4:	4620      	mov	r0, r4
}
 801c0d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801c0da:	f7ff bdf3 	b.w	801bcc4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801c0de:	4b04      	ldr	r3, [pc, #16]	; (801c0f0 <tcp_rexmit_rto_commit+0x30>)
 801c0e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c0e4:	4903      	ldr	r1, [pc, #12]	; (801c0f4 <tcp_rexmit_rto_commit+0x34>)
 801c0e6:	4804      	ldr	r0, [pc, #16]	; (801c0f8 <tcp_rexmit_rto_commit+0x38>)
 801c0e8:	f005 fb7c 	bl	80217e4 <iprintf>
 801c0ec:	e7eb      	b.n	801c0c6 <tcp_rexmit_rto_commit+0x6>
 801c0ee:	bf00      	nop
 801c0f0:	0803fb38 	.word	0x0803fb38
 801c0f4:	080401f8 	.word	0x080401f8
 801c0f8:	08027fec 	.word	0x08027fec

0801c0fc <tcp_rexmit_rto>:
{
 801c0fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c0fe:	4604      	mov	r4, r0
 801c100:	b148      	cbz	r0, 801c116 <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801c102:	4620      	mov	r0, r4
 801c104:	f7ff fc9e 	bl	801ba44 <tcp_rexmit_rto_prepare>
 801c108:	b100      	cbz	r0, 801c10c <tcp_rexmit_rto+0x10>
}
 801c10a:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801c10c:	4620      	mov	r0, r4
}
 801c10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801c112:	f7ff bfd5 	b.w	801c0c0 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801c116:	4b04      	ldr	r3, [pc, #16]	; (801c128 <tcp_rexmit_rto+0x2c>)
 801c118:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801c11c:	4903      	ldr	r1, [pc, #12]	; (801c12c <tcp_rexmit_rto+0x30>)
 801c11e:	4804      	ldr	r0, [pc, #16]	; (801c130 <tcp_rexmit_rto+0x34>)
 801c120:	f005 fb60 	bl	80217e4 <iprintf>
 801c124:	e7ed      	b.n	801c102 <tcp_rexmit_rto+0x6>
 801c126:	bf00      	nop
 801c128:	0803fb38 	.word	0x0803fb38
 801c12c:	0804021c 	.word	0x0804021c
 801c130:	08027fec 	.word	0x08027fec

0801c134 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801c134:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c136:	4604      	mov	r4, r0
 801c138:	b1a0      	cbz	r0, 801c164 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801c13a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801c13c:	3801      	subs	r0, #1
 801c13e:	f7f9 fbe9 	bl	8015914 <lwip_htonl>
 801c142:	2100      	movs	r1, #0
 801c144:	4602      	mov	r2, r0
 801c146:	4620      	mov	r0, r4
 801c148:	f7fe feb4 	bl	801aeb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801c14c:	4605      	mov	r5, r0
 801c14e:	b188      	cbz	r0, 801c174 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c150:	f7fe fed8 	bl	801af04 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c154:	4629      	mov	r1, r5
 801c156:	1d23      	adds	r3, r4, #4
 801c158:	4622      	mov	r2, r4
 801c15a:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c15c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c160:	f7fe bee0 	b.w	801af24 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801c164:	4b05      	ldr	r3, [pc, #20]	; (801c17c <tcp_keepalive+0x48>)
 801c166:	f640 0224 	movw	r2, #2084	; 0x824
 801c16a:	4905      	ldr	r1, [pc, #20]	; (801c180 <tcp_keepalive+0x4c>)
 801c16c:	4805      	ldr	r0, [pc, #20]	; (801c184 <tcp_keepalive+0x50>)
 801c16e:	f005 fb39 	bl	80217e4 <iprintf>
 801c172:	e7e2      	b.n	801c13a <tcp_keepalive+0x6>
}
 801c174:	f04f 30ff 	mov.w	r0, #4294967295
 801c178:	bd70      	pop	{r4, r5, r6, pc}
 801c17a:	bf00      	nop
 801c17c:	0803fb38 	.word	0x0803fb38
 801c180:	08040238 	.word	0x08040238
 801c184:	08027fec 	.word	0x08027fec

0801c188 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801c188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c18c:	4604      	mov	r4, r0
 801c18e:	2800      	cmp	r0, #0
 801c190:	d053      	beq.n	801c23a <tcp_zero_window_probe+0xb2>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801c192:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801c194:	2d00      	cmp	r5, #0
 801c196:	d04d      	beq.n	801c234 <tcp_zero_window_probe+0xac>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801c198:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801c19c:	2bff      	cmp	r3, #255	; 0xff
 801c19e:	d002      	beq.n	801c1a6 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801c1a0:	3301      	adds	r3, #1
 801c1a2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801c1a6:	68eb      	ldr	r3, [r5, #12]
 801c1a8:	8998      	ldrh	r0, [r3, #12]
 801c1aa:	f7f9 fbaf 	bl	801590c <lwip_htons>
 801c1ae:	07c3      	lsls	r3, r0, #31
 801c1b0:	d529      	bpl.n	801c206 <tcp_zero_window_probe+0x7e>
 801c1b2:	8929      	ldrh	r1, [r5, #8]
 801c1b4:	bb39      	cbnz	r1, 801c206 <tcp_zero_window_probe+0x7e>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c1b6:	68eb      	ldr	r3, [r5, #12]
 801c1b8:	4620      	mov	r0, r4
 801c1ba:	685a      	ldr	r2, [r3, #4]
 801c1bc:	f7fe fe7a 	bl	801aeb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801c1c0:	4606      	mov	r6, r0
 801c1c2:	b398      	cbz	r0, 801c22c <tcp_zero_window_probe+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801c1c4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801c1c8:	2011      	movs	r0, #17
 801c1ca:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801c1ce:	f7f9 fb9d 	bl	801590c <lwip_htons>
 801c1d2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801c1d6:	4338      	orrs	r0, r7
 801c1d8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c1dc:	68eb      	ldr	r3, [r5, #12]
 801c1de:	6858      	ldr	r0, [r3, #4]
 801c1e0:	f7f9 fb98 	bl	8015914 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c1e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801c1e6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801c1e8:	1a1b      	subs	r3, r3, r0
 801c1ea:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801c1ec:	bfb8      	it	lt
 801c1ee:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801c1f0:	4630      	mov	r0, r6
 801c1f2:	f7fe fe87 	bl	801af04 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c1f6:	4631      	mov	r1, r6
 801c1f8:	1d23      	adds	r3, r4, #4
 801c1fa:	4622      	mov	r2, r4
 801c1fc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801c1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801c202:	f7fe be8f 	b.w	801af24 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801c206:	68eb      	ldr	r3, [r5, #12]
 801c208:	2101      	movs	r1, #1
 801c20a:	4620      	mov	r0, r4
 801c20c:	685a      	ldr	r2, [r3, #4]
 801c20e:	f7fe fe51 	bl	801aeb4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801c212:	4606      	mov	r6, r0
 801c214:	b150      	cbz	r0, 801c22c <tcp_zero_window_probe+0xa4>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c216:	6868      	ldr	r0, [r5, #4]
 801c218:	2201      	movs	r2, #1
 801c21a:	892f      	ldrh	r7, [r5, #8]
 801c21c:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801c21e:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801c220:	1bdb      	subs	r3, r3, r7
 801c222:	3114      	adds	r1, #20
 801c224:	b29b      	uxth	r3, r3
 801c226:	f7fb fc5d 	bl	8017ae4 <pbuf_copy_partial>
 801c22a:	e7d7      	b.n	801c1dc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801c22c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801c234:	4628      	mov	r0, r5
}
 801c236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801c23a:	4b04      	ldr	r3, [pc, #16]	; (801c24c <tcp_zero_window_probe+0xc4>)
 801c23c:	f640 024f 	movw	r2, #2127	; 0x84f
 801c240:	4903      	ldr	r1, [pc, #12]	; (801c250 <tcp_zero_window_probe+0xc8>)
 801c242:	4804      	ldr	r0, [pc, #16]	; (801c254 <tcp_zero_window_probe+0xcc>)
 801c244:	f005 face 	bl	80217e4 <iprintf>
 801c248:	e7a3      	b.n	801c192 <tcp_zero_window_probe+0xa>
 801c24a:	bf00      	nop
 801c24c:	0803fb38 	.word	0x0803fb38
 801c250:	08040254 	.word	0x08040254
 801c254:	08027fec 	.word	0x08027fec

0801c258 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801c258:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c25a:	22bc      	movs	r2, #188	; 0xbc
{
 801c25c:	b570      	push	{r4, r5, r6, lr}
 801c25e:	4604      	mov	r4, r0
 801c260:	460e      	mov	r6, r1
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c262:	200c      	movs	r0, #12
 801c264:	490f      	ldr	r1, [pc, #60]	; (801c2a4 <sys_timeout_abs+0x4c>)
{
 801c266:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801c268:	f7fa feb0 	bl	8016fcc <memp_malloc_fn>
  if (timeout == NULL) {
 801c26c:	b190      	cbz	r0, 801c294 <sys_timeout_abs+0x3c>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801c26e:	490e      	ldr	r1, [pc, #56]	; (801c2a8 <sys_timeout_abs+0x50>)
  timeout->next = NULL;
 801c270:	2200      	movs	r2, #0
  timeout->h = handler;
 801c272:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801c274:	680b      	ldr	r3, [r1, #0]
  timeout->arg = arg;
 801c276:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801c278:	e9c0 2400 	strd	r2, r4, [r0]
  if (next_timeout == NULL) {
 801c27c:	b91b      	cbnz	r3, 801c286 <sys_timeout_abs+0x2e>
 801c27e:	e007      	b.n	801c290 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801c280:	4619      	mov	r1, r3
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	b11b      	cbz	r3, 801c28e <sys_timeout_abs+0x36>
 801c286:	685a      	ldr	r2, [r3, #4]
 801c288:	1aa2      	subs	r2, r4, r2
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	daf8      	bge.n	801c280 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801c28e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801c290:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801c292:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c294:	4b03      	ldr	r3, [pc, #12]	; (801c2a4 <sys_timeout_abs+0x4c>)
 801c296:	22be      	movs	r2, #190	; 0xbe
 801c298:	4904      	ldr	r1, [pc, #16]	; (801c2ac <sys_timeout_abs+0x54>)
 801c29a:	4805      	ldr	r0, [pc, #20]	; (801c2b0 <sys_timeout_abs+0x58>)
}
 801c29c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801c2a0:	f005 baa0 	b.w	80217e4 <iprintf>
 801c2a4:	08040278 	.word	0x08040278
 801c2a8:	20022a00 	.word	0x20022a00
 801c2ac:	080402ac 	.word	0x080402ac
 801c2b0:	08027fec 	.word	0x08027fec

0801c2b4 <lwip_cyclic_timer>:
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801c2b4:	6843      	ldr	r3, [r0, #4]
{
 801c2b6:	b510      	push	{r4, lr}
 801c2b8:	4604      	mov	r4, r0
  cyclic->handler();
 801c2ba:	4798      	blx	r3

  now = sys_now();
 801c2bc:	f7f4 fe20 	bl	8010f00 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801c2c0:	4b09      	ldr	r3, [pc, #36]	; (801c2e8 <lwip_cyclic_timer+0x34>)
 801c2c2:	6821      	ldr	r1, [r4, #0]
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c2c8:	1a1a      	subs	r2, r3, r0
 801c2ca:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c2cc:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801c2ce:	da05      	bge.n	801c2dc <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c2d0:	4408      	add	r0, r1
 801c2d2:	4906      	ldr	r1, [pc, #24]	; (801c2ec <lwip_cyclic_timer+0x38>)
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801c2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801c2d8:	f7ff bfbe 	b.w	801c258 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c2dc:	4618      	mov	r0, r3
 801c2de:	4903      	ldr	r1, [pc, #12]	; (801c2ec <lwip_cyclic_timer+0x38>)
}
 801c2e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801c2e4:	f7ff bfb8 	b.w	801c258 <sys_timeout_abs>
 801c2e8:	200229fc 	.word	0x200229fc
 801c2ec:	0801c2b5 	.word	0x0801c2b5

0801c2f0 <tcpip_tcp_timer>:
{
 801c2f0:	b508      	push	{r3, lr}
  tcp_tmr();
 801c2f2:	f7fc fef7 	bl	80190e4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c2f6:	4b09      	ldr	r3, [pc, #36]	; (801c31c <tcpip_tcp_timer+0x2c>)
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	b143      	cbz	r3, 801c30e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c2fc:	f7f4 fe00 	bl	8010f00 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c300:	2200      	movs	r2, #0
 801c302:	4907      	ldr	r1, [pc, #28]	; (801c320 <tcpip_tcp_timer+0x30>)
 801c304:	30fa      	adds	r0, #250	; 0xfa
}
 801c306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c30a:	f7ff bfa5 	b.w	801c258 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801c30e:	4b05      	ldr	r3, [pc, #20]	; (801c324 <tcpip_tcp_timer+0x34>)
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	2b00      	cmp	r3, #0
 801c314:	d1f2      	bne.n	801c2fc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801c316:	4a04      	ldr	r2, [pc, #16]	; (801c328 <tcpip_tcp_timer+0x38>)
 801c318:	6013      	str	r3, [r2, #0]
}
 801c31a:	bd08      	pop	{r3, pc}
 801c31c:	200368a0 	.word	0x200368a0
 801c320:	0801c2f1 	.word	0x0801c2f1
 801c324:	200368b0 	.word	0x200368b0
 801c328:	20022a04 	.word	0x20022a04

0801c32c <tcp_timer_needed>:
{
 801c32c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c32e:	4b0b      	ldr	r3, [pc, #44]	; (801c35c <tcp_timer_needed+0x30>)
 801c330:	681a      	ldr	r2, [r3, #0]
 801c332:	b98a      	cbnz	r2, 801c358 <tcp_timer_needed+0x2c>
 801c334:	4a0a      	ldr	r2, [pc, #40]	; (801c360 <tcp_timer_needed+0x34>)
 801c336:	6812      	ldr	r2, [r2, #0]
 801c338:	b152      	cbz	r2, 801c350 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801c33a:	2201      	movs	r2, #1
 801c33c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c33e:	f7f4 fddf 	bl	8010f00 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c342:	2200      	movs	r2, #0
 801c344:	4907      	ldr	r1, [pc, #28]	; (801c364 <tcp_timer_needed+0x38>)
 801c346:	30fa      	adds	r0, #250	; 0xfa
}
 801c348:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c34c:	f7ff bf84 	b.w	801c258 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801c350:	4a05      	ldr	r2, [pc, #20]	; (801c368 <tcp_timer_needed+0x3c>)
 801c352:	6812      	ldr	r2, [r2, #0]
 801c354:	2a00      	cmp	r2, #0
 801c356:	d1f0      	bne.n	801c33a <tcp_timer_needed+0xe>
}
 801c358:	bd08      	pop	{r3, pc}
 801c35a:	bf00      	nop
 801c35c:	20022a04 	.word	0x20022a04
 801c360:	200368a0 	.word	0x200368a0
 801c364:	0801c2f1 	.word	0x0801c2f1
 801c368:	200368b0 	.word	0x200368b0

0801c36c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c36c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801c370:	b570      	push	{r4, r5, r6, lr}
 801c372:	4604      	mov	r4, r0
 801c374:	460d      	mov	r5, r1
 801c376:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c378:	d208      	bcs.n	801c38c <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801c37a:	f7f4 fdc1 	bl	8010f00 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c37e:	4632      	mov	r2, r6
 801c380:	4629      	mov	r1, r5
 801c382:	4420      	add	r0, r4
#endif
}
 801c384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801c388:	f7ff bf66 	b.w	801c258 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801c38c:	4b03      	ldr	r3, [pc, #12]	; (801c39c <sys_timeout+0x30>)
 801c38e:	f240 1229 	movw	r2, #297	; 0x129
 801c392:	4903      	ldr	r1, [pc, #12]	; (801c3a0 <sys_timeout+0x34>)
 801c394:	4803      	ldr	r0, [pc, #12]	; (801c3a4 <sys_timeout+0x38>)
 801c396:	f005 fa25 	bl	80217e4 <iprintf>
 801c39a:	e7ee      	b.n	801c37a <sys_timeout+0xe>
 801c39c:	08040278 	.word	0x08040278
 801c3a0:	080402ec 	.word	0x080402ec
 801c3a4:	08027fec 	.word	0x08027fec

0801c3a8 <sys_timeouts_init>:
{
 801c3a8:	b570      	push	{r4, r5, r6, lr}
 801c3aa:	4c0a      	ldr	r4, [pc, #40]	; (801c3d4 <sys_timeouts_init+0x2c>)
 801c3ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c3b0:	4e09      	ldr	r6, [pc, #36]	; (801c3d8 <sys_timeouts_init+0x30>)
 801c3b2:	f104 0520 	add.w	r5, r4, #32
 801c3b6:	4622      	mov	r2, r4
 801c3b8:	4631      	mov	r1, r6
 801c3ba:	f7ff ffd7 	bl	801c36c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c3be:	42ac      	cmp	r4, r5
 801c3c0:	d007      	beq.n	801c3d2 <sys_timeouts_init+0x2a>
 801c3c2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801c3c6:	4631      	mov	r1, r6
 801c3c8:	4622      	mov	r2, r4
 801c3ca:	f7ff ffcf 	bl	801c36c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801c3ce:	42ac      	cmp	r4, r5
 801c3d0:	d1f7      	bne.n	801c3c2 <sys_timeouts_init+0x1a>
}
 801c3d2:	bd70      	pop	{r4, r5, r6, pc}
 801c3d4:	0804032c 	.word	0x0804032c
 801c3d8:	0801c2b5 	.word	0x0801c2b5

0801c3dc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801c3dc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c3de:	4d0d      	ldr	r5, [pc, #52]	; (801c414 <sys_untimeout+0x38>)
 801c3e0:	682b      	ldr	r3, [r5, #0]
 801c3e2:	b19b      	cbz	r3, 801c40c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801c3e4:	2400      	movs	r4, #0
 801c3e6:	e003      	b.n	801c3f0 <sys_untimeout+0x14>
 801c3e8:	681a      	ldr	r2, [r3, #0]
 801c3ea:	461c      	mov	r4, r3
 801c3ec:	4613      	mov	r3, r2
 801c3ee:	b16a      	cbz	r2, 801c40c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801c3f0:	689a      	ldr	r2, [r3, #8]
 801c3f2:	4282      	cmp	r2, r0
 801c3f4:	d1f8      	bne.n	801c3e8 <sys_untimeout+0xc>
 801c3f6:	68da      	ldr	r2, [r3, #12]
 801c3f8:	428a      	cmp	r2, r1
 801c3fa:	d1f5      	bne.n	801c3e8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801c3fc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801c3fe:	b13c      	cbz	r4, 801c410 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801c400:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801c402:	4619      	mov	r1, r3
 801c404:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801c406:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801c408:	f7fa be04 	b.w	8017014 <memp_free>
}
 801c40c:	bc30      	pop	{r4, r5}
 801c40e:	4770      	bx	lr
        next_timeout = t->next;
 801c410:	602a      	str	r2, [r5, #0]
 801c412:	e7f6      	b.n	801c402 <sys_untimeout+0x26>
 801c414:	20022a00 	.word	0x20022a00

0801c418 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801c418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801c41c:	f7f4 fd70 	bl	8010f00 <sys_now>
 801c420:	4c0d      	ldr	r4, [pc, #52]	; (801c458 <sys_check_timeouts+0x40>)
 801c422:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801c424:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801c45c <sys_check_timeouts+0x44>
 801c428:	e00c      	b.n	801c444 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801c42a:	685a      	ldr	r2, [r3, #4]
 801c42c:	1abd      	subs	r5, r7, r2
 801c42e:	2d00      	cmp	r5, #0
 801c430:	db0d      	blt.n	801c44e <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801c432:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801c434:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801c436:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801c438:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801c43c:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c43e:	f7fa fde9 	bl	8017014 <memp_free>
    if (handler != NULL) {
 801c442:	b935      	cbnz	r5, 801c452 <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801c444:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801c446:	200c      	movs	r0, #12
 801c448:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	d1ed      	bne.n	801c42a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801c44e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801c452:	4630      	mov	r0, r6
 801c454:	47a8      	blx	r5
 801c456:	e7f5      	b.n	801c444 <sys_check_timeouts+0x2c>
 801c458:	20022a00 	.word	0x20022a00
 801c45c:	200229fc 	.word	0x200229fc

0801c460 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801c460:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801c462:	4c07      	ldr	r4, [pc, #28]	; (801c480 <sys_timeouts_sleeptime+0x20>)
 801c464:	6823      	ldr	r3, [r4, #0]
 801c466:	b13b      	cbz	r3, 801c478 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801c468:	f7f4 fd4a 	bl	8010f00 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801c46c:	6823      	ldr	r3, [r4, #0]
 801c46e:	685b      	ldr	r3, [r3, #4]
 801c470:	1a18      	subs	r0, r3, r0
    return 0;
 801c472:	bf48      	it	mi
 801c474:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801c476:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801c478:	f04f 30ff 	mov.w	r0, #4294967295
}
 801c47c:	bd10      	pop	{r4, pc}
 801c47e:	bf00      	nop
 801c480:	20022a00 	.word	0x20022a00

0801c484 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801c484:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801c486:	f005 fa51 	bl	802192c <rand>
 801c48a:	4b02      	ldr	r3, [pc, #8]	; (801c494 <udp_init+0x10>)
 801c48c:	4a02      	ldr	r2, [pc, #8]	; (801c498 <udp_init+0x14>)
 801c48e:	4303      	orrs	r3, r0
 801c490:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801c492:	bd08      	pop	{r3, pc}
 801c494:	ffffc000 	.word	0xffffc000
 801c498:	200003e6 	.word	0x200003e6

0801c49c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c4a0:	4680      	mov	r8, r0
{
 801c4a2:	b085      	sub	sp, #20
 801c4a4:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	f000 80ce 	beq.w	801c648 <udp_input+0x1ac>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c4ac:	2f00      	cmp	r7, #0
 801c4ae:	f000 80d4 	beq.w	801c65a <udp_input+0x1be>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801c4b2:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801c6f0 <udp_input+0x254>

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801c4b6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801c4ba:	f8bb 307a 	ldrh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801c4be:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801c4c0:	f103 0301 	add.w	r3, r3, #1
 801c4c4:	f8ab 307a 	strh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801c4c8:	f240 80a7 	bls.w	801c61a <udp_input+0x17e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c4cc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801c6f4 <udp_input+0x258>
  udphdr = (struct udp_hdr *)p->payload;
 801c4d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c4d4:	f8d9 1000 	ldr.w	r1, [r9]
 801c4d8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801c4dc:	f002 ff5c 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801c4e0:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c4e2:	8820      	ldrh	r0, [r4, #0]
 801c4e4:	f7f9 fa12 	bl	801590c <lwip_htons>
 801c4e8:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801c4ea:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801c4ec:	9302      	str	r3, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 801c4ee:	f7f9 fa0d 	bl	801590c <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4f2:	4b77      	ldr	r3, [pc, #476]	; (801c6d0 <udp_input+0x234>)
  dest = lwip_ntohs(udphdr->dest);
 801c4f4:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c4f6:	681c      	ldr	r4, [r3, #0]
 801c4f8:	2c00      	cmp	r4, #0
 801c4fa:	d069      	beq.n	801c5d0 <udp_input+0x134>
  uncon_pcb = NULL;
 801c4fc:	2300      	movs	r3, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c4fe:	4975      	ldr	r1, [pc, #468]	; (801c6d4 <udp_input+0x238>)
  uncon_pcb = NULL;
 801c500:	461e      	mov	r6, r3
 801c502:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c504:	4b74      	ldr	r3, [pc, #464]	; (801c6d8 <udp_input+0x23c>)
 801c506:	e004      	b.n	801c512 <udp_input+0x76>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c508:	68e2      	ldr	r2, [r4, #12]
 801c50a:	4626      	mov	r6, r4
 801c50c:	2a00      	cmp	r2, #0
 801c50e:	d05c      	beq.n	801c5ca <udp_input+0x12e>
 801c510:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c512:	8a62      	ldrh	r2, [r4, #18]
 801c514:	42aa      	cmp	r2, r5
 801c516:	d1f7      	bne.n	801c508 <udp_input+0x6c>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c518:	2f00      	cmp	r7, #0
 801c51a:	d077      	beq.n	801c60c <udp_input+0x170>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c51c:	7a20      	ldrb	r0, [r4, #8]
 801c51e:	b138      	cbz	r0, 801c530 <udp_input+0x94>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801c520:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801c524:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801c528:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801c52a:	b2d2      	uxtb	r2, r2
 801c52c:	4290      	cmp	r0, r2
 801c52e:	d1eb      	bne.n	801c508 <udp_input+0x6c>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c530:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801c532:	f1ba 0f00 	cmp.w	sl, #0
 801c536:	d03e      	beq.n	801c5b6 <udp_input+0x11a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c538:	b152      	cbz	r2, 801c550 <udp_input+0xb4>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c53a:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c53e:	f1b0 3fff 	cmp.w	r0, #4294967295
 801c542:	d005      	beq.n	801c550 <udp_input+0xb4>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801c544:	ea80 0c02 	eor.w	ip, r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801c548:	68b8      	ldr	r0, [r7, #8]
 801c54a:	ea1c 0f00 	tst.w	ip, r0
 801c54e:	d1db      	bne.n	801c508 <udp_input+0x6c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c550:	7c20      	ldrb	r0, [r4, #16]
 801c552:	0740      	lsls	r0, r0, #29
 801c554:	d409      	bmi.n	801c56a <udp_input+0xce>
        if (uncon_pcb == NULL) {
 801c556:	9803      	ldr	r0, [sp, #12]
 801c558:	2800      	cmp	r0, #0
 801c55a:	d06e      	beq.n	801c63a <udp_input+0x19e>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c55c:	f1ba 0f00 	cmp.w	sl, #0
 801c560:	d003      	beq.n	801c56a <udp_input+0xce>
 801c562:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801c566:	3001      	adds	r0, #1
 801c568:	d07e      	beq.n	801c668 <udp_input+0x1cc>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c56a:	8aa2      	ldrh	r2, [r4, #20]
 801c56c:	9802      	ldr	r0, [sp, #8]
 801c56e:	4282      	cmp	r2, r0
 801c570:	d1ca      	bne.n	801c508 <udp_input+0x6c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c572:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801c574:	b11a      	cbz	r2, 801c57e <udp_input+0xe2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c576:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801c57a:	4282      	cmp	r2, r0
 801c57c:	d1c4      	bne.n	801c508 <udp_input+0x6c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c57e:	2e00      	cmp	r6, #0
 801c580:	f000 809d 	beq.w	801c6be <udp_input+0x222>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801c584:	4952      	ldr	r1, [pc, #328]	; (801c6d0 <udp_input+0x234>)
          prev->next = pcb->next;
 801c586:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801c588:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801c58a:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801c58c:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801c58e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c590:	2108      	movs	r1, #8
 801c592:	4640      	mov	r0, r8
 801c594:	f7fa ffd2 	bl	801753c <pbuf_remove_header>
 801c598:	2800      	cmp	r0, #0
 801c59a:	d172      	bne.n	801c682 <udp_input+0x1e6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c59c:	69a5      	ldr	r5, [r4, #24]
 801c59e:	2d00      	cmp	r5, #0
 801c5a0:	d07b      	beq.n	801c69a <udp_input+0x1fe>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c5a2:	9b02      	ldr	r3, [sp, #8]
 801c5a4:	4642      	mov	r2, r8
 801c5a6:	69e0      	ldr	r0, [r4, #28]
 801c5a8:	4621      	mov	r1, r4
 801c5aa:	9300      	str	r3, [sp, #0]
 801c5ac:	4b4b      	ldr	r3, [pc, #300]	; (801c6dc <udp_input+0x240>)
 801c5ae:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c5b0:	b005      	add	sp, #20
 801c5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801c5b6:	2a00      	cmp	r2, #0
 801c5b8:	d0ca      	beq.n	801c550 <udp_input+0xb4>
 801c5ba:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801c5be:	4282      	cmp	r2, r0
 801c5c0:	d0c6      	beq.n	801c550 <udp_input+0xb4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c5c2:	68e2      	ldr	r2, [r4, #12]
 801c5c4:	4626      	mov	r6, r4
 801c5c6:	2a00      	cmp	r2, #0
 801c5c8:	d1a2      	bne.n	801c510 <udp_input+0x74>
  if (pcb != NULL) {
 801c5ca:	9b03      	ldr	r3, [sp, #12]
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d17c      	bne.n	801c6ca <udp_input+0x22e>
  if (for_us) {
 801c5d0:	687a      	ldr	r2, [r7, #4]
 801c5d2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801c5d6:	429a      	cmp	r2, r3
 801c5d8:	d15f      	bne.n	801c69a <udp_input+0x1fe>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c5da:	2108      	movs	r1, #8
 801c5dc:	4640      	mov	r0, r8
 801c5de:	f7fa ffad 	bl	801753c <pbuf_remove_header>
 801c5e2:	2800      	cmp	r0, #0
 801c5e4:	d14d      	bne.n	801c682 <udp_input+0x1e6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c5e6:	f1ba 0f00 	cmp.w	sl, #0
 801c5ea:	d105      	bne.n	801c5f8 <udp_input+0x15c>
 801c5ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801c5f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c5f4:	2be0      	cmp	r3, #224	; 0xe0
 801c5f6:	d156      	bne.n	801c6a6 <udp_input+0x20a>
      UDP_STATS_INC(udp.proterr);
 801c5f8:	f8bb 2088 	ldrh.w	r2, [fp, #136]	; 0x88
      pbuf_free(p);
 801c5fc:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801c5fe:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801c602:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801c604:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801c606:	f8ab 2088 	strh.w	r2, [fp, #136]	; 0x88
 801c60a:	e00f      	b.n	801c62c <udp_input+0x190>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801c60c:	2288      	movs	r2, #136	; 0x88
 801c60e:	4834      	ldr	r0, [pc, #208]	; (801c6e0 <udp_input+0x244>)
 801c610:	f005 f8e8 	bl	80217e4 <iprintf>
 801c614:	4b30      	ldr	r3, [pc, #192]	; (801c6d8 <udp_input+0x23c>)
 801c616:	492f      	ldr	r1, [pc, #188]	; (801c6d4 <udp_input+0x238>)
 801c618:	e780      	b.n	801c51c <udp_input+0x80>
    UDP_STATS_INC(udp.lenerr);
 801c61a:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    pbuf_free(p);
 801c61e:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801c620:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801c624:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801c626:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801c628:	f8ab 2082 	strh.w	r2, [fp, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801c62c:	f8ab 307e 	strh.w	r3, [fp, #126]	; 0x7e
}
 801c630:	b005      	add	sp, #20
 801c632:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801c636:	f7fa bfbd 	b.w	80175b4 <pbuf_free>
      if ((pcb->remote_port == src) &&
 801c63a:	8aa2      	ldrh	r2, [r4, #20]
 801c63c:	9802      	ldr	r0, [sp, #8]
 801c63e:	9403      	str	r4, [sp, #12]
 801c640:	4282      	cmp	r2, r0
 801c642:	f47f af61 	bne.w	801c508 <udp_input+0x6c>
 801c646:	e794      	b.n	801c572 <udp_input+0xd6>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801c648:	4b23      	ldr	r3, [pc, #140]	; (801c6d8 <udp_input+0x23c>)
 801c64a:	22cf      	movs	r2, #207	; 0xcf
 801c64c:	4925      	ldr	r1, [pc, #148]	; (801c6e4 <udp_input+0x248>)
 801c64e:	4824      	ldr	r0, [pc, #144]	; (801c6e0 <udp_input+0x244>)
 801c650:	f005 f8c8 	bl	80217e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801c654:	2f00      	cmp	r7, #0
 801c656:	f47f af2c 	bne.w	801c4b2 <udp_input+0x16>
 801c65a:	4b1f      	ldr	r3, [pc, #124]	; (801c6d8 <udp_input+0x23c>)
 801c65c:	22d0      	movs	r2, #208	; 0xd0
 801c65e:	4922      	ldr	r1, [pc, #136]	; (801c6e8 <udp_input+0x24c>)
 801c660:	481f      	ldr	r0, [pc, #124]	; (801c6e0 <udp_input+0x244>)
 801c662:	f005 f8bf 	bl	80217e4 <iprintf>
 801c666:	e724      	b.n	801c4b2 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c668:	9803      	ldr	r0, [sp, #12]
 801c66a:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801c66e:	6800      	ldr	r0, [r0, #0]
 801c670:	4570      	cmp	r0, lr
 801c672:	f43f af7a 	beq.w	801c56a <udp_input+0xce>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c676:	9803      	ldr	r0, [sp, #12]
 801c678:	4596      	cmp	lr, r2
 801c67a:	bf08      	it	eq
 801c67c:	4620      	moveq	r0, r4
 801c67e:	9003      	str	r0, [sp, #12]
 801c680:	e773      	b.n	801c56a <udp_input+0xce>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c682:	4b15      	ldr	r3, [pc, #84]	; (801c6d8 <udp_input+0x23c>)
 801c684:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801c688:	4918      	ldr	r1, [pc, #96]	; (801c6ec <udp_input+0x250>)
 801c68a:	4815      	ldr	r0, [pc, #84]	; (801c6e0 <udp_input+0x244>)
 801c68c:	f005 f8aa 	bl	80217e4 <iprintf>
      UDP_STATS_INC(udp.drop);
 801c690:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      pbuf_free(p);
 801c694:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801c696:	3301      	adds	r3, #1
 801c698:	e7c8      	b.n	801c62c <udp_input+0x190>
        pbuf_free(p);
 801c69a:	4640      	mov	r0, r8
}
 801c69c:	b005      	add	sp, #20
 801c69e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801c6a2:	f7fa bf87 	b.w	80175b4 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c6a6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	3108      	adds	r1, #8
 801c6ae:	b209      	sxth	r1, r1
 801c6b0:	f7fa ff78 	bl	80175a4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c6b4:	2103      	movs	r1, #3
 801c6b6:	4640      	mov	r0, r8
 801c6b8:	f002 fc20 	bl	801eefc <icmp_dest_unreach>
 801c6bc:	e79c      	b.n	801c5f8 <udp_input+0x15c>
          UDP_STATS_INC(udp.cachehit);
 801c6be:	f8bb 308e 	ldrh.w	r3, [fp, #142]	; 0x8e
 801c6c2:	3301      	adds	r3, #1
 801c6c4:	f8ab 308e 	strh.w	r3, [fp, #142]	; 0x8e
 801c6c8:	e762      	b.n	801c590 <udp_input+0xf4>
 801c6ca:	9c03      	ldr	r4, [sp, #12]
 801c6cc:	e760      	b.n	801c590 <udp_input+0xf4>
 801c6ce:	bf00      	nop
 801c6d0:	200368b8 	.word	0x200368b8
 801c6d4:	080403b8 	.word	0x080403b8
 801c6d8:	08040354 	.word	0x08040354
 801c6dc:	200270ac 	.word	0x200270ac
 801c6e0:	08027fec 	.word	0x08027fec
 801c6e4:	08040384 	.word	0x08040384
 801c6e8:	0804039c 	.word	0x0804039c
 801c6ec:	080403e0 	.word	0x080403e0
 801c6f0:	20036794 	.word	0x20036794
 801c6f4:	2002709c 	.word	0x2002709c

0801c6f8 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801c6f8:	4b39      	ldr	r3, [pc, #228]	; (801c7e0 <udp_bind+0xe8>)
{
 801c6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801c6fe:	2900      	cmp	r1, #0
 801c700:	bf08      	it	eq
 801c702:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c704:	2800      	cmp	r0, #0
 801c706:	d060      	beq.n	801c7ca <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c708:	4f36      	ldr	r7, [pc, #216]	; (801c7e4 <udp_bind+0xec>)
 801c70a:	683e      	ldr	r6, [r7, #0]
 801c70c:	b34e      	cbz	r6, 801c762 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c70e:	42b0      	cmp	r0, r6
 801c710:	d031      	beq.n	801c776 <udp_bind+0x7e>
 801c712:	4634      	mov	r4, r6
 801c714:	e001      	b.n	801c71a <udp_bind+0x22>
 801c716:	42a0      	cmp	r0, r4
 801c718:	d02d      	beq.n	801c776 <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c71a:	68e4      	ldr	r4, [r4, #12]
 801c71c:	2c00      	cmp	r4, #0
 801c71e:	d1fa      	bne.n	801c716 <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c720:	b362      	cbz	r2, 801c77c <udp_bind+0x84>
 801c722:	680d      	ldr	r5, [r1, #0]
 801c724:	4633      	mov	r3, r6
 801c726:	e001      	b.n	801c72c <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c728:	68db      	ldr	r3, [r3, #12]
 801c72a:	b19b      	cbz	r3, 801c754 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801c72c:	4298      	cmp	r0, r3
 801c72e:	d0fb      	beq.n	801c728 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c730:	8a59      	ldrh	r1, [r3, #18]
 801c732:	4291      	cmp	r1, r2
 801c734:	d1f8      	bne.n	801c728 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c736:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801c738:	2900      	cmp	r1, #0
 801c73a:	bf18      	it	ne
 801c73c:	42a9      	cmpne	r1, r5
 801c73e:	d001      	beq.n	801c744 <udp_bind+0x4c>
 801c740:	2d00      	cmp	r5, #0
 801c742:	d1f1      	bne.n	801c728 <udp_bind+0x30>
      return ERR_USE;
 801c744:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801c748:	4618      	mov	r0, r3
 801c74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c74e:	680d      	ldr	r5, [r1, #0]
 801c750:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c754:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801c756:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801c758:	b13c      	cbz	r4, 801c76a <udp_bind+0x72>
  return ERR_OK;
 801c75a:	2300      	movs	r3, #0
}
 801c75c:	4618      	mov	r0, r3
 801c75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801c762:	b382      	cbz	r2, 801c7c6 <udp_bind+0xce>
 801c764:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801c766:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c768:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801c76a:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801c76c:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801c76e:	6038      	str	r0, [r7, #0]
}
 801c770:	4618      	mov	r0, r3
 801c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801c776:	2401      	movs	r4, #1
  if (port == 0) {
 801c778:	2a00      	cmp	r2, #0
 801c77a:	d1d2      	bne.n	801c722 <udp_bind+0x2a>
 801c77c:	f8df e074 	ldr.w	lr, [pc, #116]	; 801c7f4 <udp_bind+0xfc>
  rebind = 0;
 801c780:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801c784:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801c788:	f8be 2000 	ldrh.w	r2, [lr]
 801c78c:	4542      	cmp	r2, r8
 801c78e:	d017      	beq.n	801c7c0 <udp_bind+0xc8>
 801c790:	3201      	adds	r2, #1
 801c792:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c794:	2e00      	cmp	r6, #0
 801c796:	d0da      	beq.n	801c74e <udp_bind+0x56>
 801c798:	4633      	mov	r3, r6
 801c79a:	e002      	b.n	801c7a2 <udp_bind+0xaa>
 801c79c:	68db      	ldr	r3, [r3, #12]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d0d5      	beq.n	801c74e <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801c7a2:	8a5d      	ldrh	r5, [r3, #18]
 801c7a4:	4295      	cmp	r5, r2
 801c7a6:	d1f9      	bne.n	801c79c <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801c7a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c7ac:	fa1f fc8c 	uxth.w	ip, ip
 801c7b0:	f1bc 0f00 	cmp.w	ip, #0
 801c7b4:	d1ea      	bne.n	801c78c <udp_bind+0x94>
      return ERR_USE;
 801c7b6:	f06f 0307 	mvn.w	r3, #7
 801c7ba:	f8ae 2000 	strh.w	r2, [lr]
 801c7be:	e7cd      	b.n	801c75c <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801c7c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801c7c4:	e7e6      	b.n	801c794 <udp_bind+0x9c>
  rebind = 0;
 801c7c6:	4634      	mov	r4, r6
 801c7c8:	e7d8      	b.n	801c77c <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c7ca:	4b07      	ldr	r3, [pc, #28]	; (801c7e8 <udp_bind+0xf0>)
 801c7cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 801c7d0:	4906      	ldr	r1, [pc, #24]	; (801c7ec <udp_bind+0xf4>)
 801c7d2:	4807      	ldr	r0, [pc, #28]	; (801c7f0 <udp_bind+0xf8>)
 801c7d4:	f005 f806 	bl	80217e4 <iprintf>
 801c7d8:	f06f 030f 	mvn.w	r3, #15
 801c7dc:	e7be      	b.n	801c75c <udp_bind+0x64>
 801c7de:	bf00      	nop
 801c7e0:	08040cd4 	.word	0x08040cd4
 801c7e4:	200368b8 	.word	0x200368b8
 801c7e8:	08040354 	.word	0x08040354
 801c7ec:	080403fc 	.word	0x080403fc
 801c7f0:	08027fec 	.word	0x08027fec
 801c7f4:	200003e6 	.word	0x200003e6

0801c7f8 <udp_sendto_if_src>:
{
 801c7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7fc:	b085      	sub	sp, #20
 801c7fe:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c802:	2800      	cmp	r0, #0
 801c804:	f000 8094 	beq.w	801c930 <udp_sendto_if_src+0x138>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c808:	460d      	mov	r5, r1
 801c80a:	2900      	cmp	r1, #0
 801c80c:	f000 8086 	beq.w	801c91c <udp_sendto_if_src+0x124>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c810:	4690      	mov	r8, r2
 801c812:	2a00      	cmp	r2, #0
 801c814:	d078      	beq.n	801c908 <udp_sendto_if_src+0x110>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c816:	f1ba 0f00 	cmp.w	sl, #0
 801c81a:	d06b      	beq.n	801c8f4 <udp_sendto_if_src+0xfc>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c81c:	f1bb 0f00 	cmp.w	fp, #0
 801c820:	f000 8090 	beq.w	801c944 <udp_sendto_if_src+0x14c>
  if (pcb->local_port == 0) {
 801c824:	8a42      	ldrh	r2, [r0, #18]
 801c826:	4699      	mov	r9, r3
 801c828:	4604      	mov	r4, r0
 801c82a:	2a00      	cmp	r2, #0
 801c82c:	d03e      	beq.n	801c8ac <udp_sendto_if_src+0xb4>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c82e:	892a      	ldrh	r2, [r5, #8]
 801c830:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801c834:	429a      	cmp	r2, r3
 801c836:	d85a      	bhi.n	801c8ee <udp_sendto_if_src+0xf6>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c838:	2108      	movs	r1, #8
 801c83a:	4628      	mov	r0, r5
 801c83c:	f7fa fe7a 	bl	8017534 <pbuf_add_header>
 801c840:	2800      	cmp	r0, #0
 801c842:	d13d      	bne.n	801c8c0 <udp_sendto_if_src+0xc8>
 801c844:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c846:	8973      	ldrh	r3, [r6, #10]
 801c848:	2b07      	cmp	r3, #7
 801c84a:	d948      	bls.n	801c8de <udp_sendto_if_src+0xe6>
  udphdr->src = lwip_htons(pcb->local_port);
 801c84c:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
 801c84e:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801c850:	f7f9 f85c 	bl	801590c <lwip_htons>
 801c854:	4603      	mov	r3, r0
  udphdr->dest = lwip_htons(dst_port);
 801c856:	4648      	mov	r0, r9
  udphdr->src = lwip_htons(pcb->local_port);
 801c858:	803b      	strh	r3, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c85a:	f7f9 f857 	bl	801590c <lwip_htons>
  udphdr->chksum = 0x0000;
 801c85e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801c860:	4602      	mov	r2, r0
    udphdr->len = lwip_htons(q->tot_len);
 801c862:	8930      	ldrh	r0, [r6, #8]
  udphdr->chksum = 0x0000;
 801c864:	71bb      	strb	r3, [r7, #6]
  udphdr->dest = lwip_htons(dst_port);
 801c866:	807a      	strh	r2, [r7, #2]
  udphdr->chksum = 0x0000;
 801c868:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801c86a:	f7f9 f84f 	bl	801590c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c86e:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801c872:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c874:	4642      	mov	r2, r8
 801c876:	7aa3      	ldrb	r3, [r4, #10]
 801c878:	4651      	mov	r1, sl
 801c87a:	f8cd b008 	str.w	fp, [sp, #8]
 801c87e:	4630      	mov	r0, r6
 801c880:	9300      	str	r3, [sp, #0]
 801c882:	7ae3      	ldrb	r3, [r4, #11]
 801c884:	f8cd c004 	str.w	ip, [sp, #4]
 801c888:	f002 fcca 	bl	801f220 <ip4_output_if_src>
  if (q != p) {
 801c88c:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c88e:	4607      	mov	r7, r0
  if (q != p) {
 801c890:	d002      	beq.n	801c898 <udp_sendto_if_src+0xa0>
    pbuf_free(q);
 801c892:	4630      	mov	r0, r6
 801c894:	f7fa fe8e 	bl	80175b4 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801c898:	4a2f      	ldr	r2, [pc, #188]	; (801c958 <udp_sendto_if_src+0x160>)
 801c89a:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801c89e:	3301      	adds	r3, #1
 801c8a0:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801c8a4:	4638      	mov	r0, r7
 801c8a6:	b005      	add	sp, #20
 801c8a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c8ac:	4601      	mov	r1, r0
 801c8ae:	f7ff ff23 	bl	801c6f8 <udp_bind>
    if (err != ERR_OK) {
 801c8b2:	4607      	mov	r7, r0
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	d0ba      	beq.n	801c82e <udp_sendto_if_src+0x36>
}
 801c8b8:	4638      	mov	r0, r7
 801c8ba:	b005      	add	sp, #20
 801c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c8c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c8c4:	2108      	movs	r1, #8
 801c8c6:	2022      	movs	r0, #34	; 0x22
 801c8c8:	f7fa fee2 	bl	8017690 <pbuf_alloc>
    if (q == NULL) {
 801c8cc:	4606      	mov	r6, r0
 801c8ce:	b170      	cbz	r0, 801c8ee <udp_sendto_if_src+0xf6>
    if (p->tot_len != 0) {
 801c8d0:	892b      	ldrh	r3, [r5, #8]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d0b7      	beq.n	801c846 <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801c8d6:	4629      	mov	r1, r5
 801c8d8:	f7fb f82e 	bl	8017938 <pbuf_chain>
 801c8dc:	e7b3      	b.n	801c846 <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c8de:	4b1f      	ldr	r3, [pc, #124]	; (801c95c <udp_sendto_if_src+0x164>)
 801c8e0:	f240 320d 	movw	r2, #781	; 0x30d
 801c8e4:	491e      	ldr	r1, [pc, #120]	; (801c960 <udp_sendto_if_src+0x168>)
 801c8e6:	481f      	ldr	r0, [pc, #124]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c8e8:	f004 ff7c 	bl	80217e4 <iprintf>
 801c8ec:	e7ae      	b.n	801c84c <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801c8ee:	f04f 37ff 	mov.w	r7, #4294967295
 801c8f2:	e7d7      	b.n	801c8a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c8f4:	4b19      	ldr	r3, [pc, #100]	; (801c95c <udp_sendto_if_src+0x164>)
 801c8f6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801c8fa:	491b      	ldr	r1, [pc, #108]	; (801c968 <udp_sendto_if_src+0x170>)
 801c8fc:	f06f 070f 	mvn.w	r7, #15
 801c900:	4818      	ldr	r0, [pc, #96]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c902:	f004 ff6f 	bl	80217e4 <iprintf>
 801c906:	e7cd      	b.n	801c8a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c908:	4b14      	ldr	r3, [pc, #80]	; (801c95c <udp_sendto_if_src+0x164>)
 801c90a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801c90e:	4917      	ldr	r1, [pc, #92]	; (801c96c <udp_sendto_if_src+0x174>)
 801c910:	f06f 070f 	mvn.w	r7, #15
 801c914:	4813      	ldr	r0, [pc, #76]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c916:	f004 ff65 	bl	80217e4 <iprintf>
 801c91a:	e7c3      	b.n	801c8a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c91c:	4b0f      	ldr	r3, [pc, #60]	; (801c95c <udp_sendto_if_src+0x164>)
 801c91e:	f240 22d2 	movw	r2, #722	; 0x2d2
 801c922:	4913      	ldr	r1, [pc, #76]	; (801c970 <udp_sendto_if_src+0x178>)
 801c924:	f06f 070f 	mvn.w	r7, #15
 801c928:	480e      	ldr	r0, [pc, #56]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c92a:	f004 ff5b 	bl	80217e4 <iprintf>
 801c92e:	e7b9      	b.n	801c8a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c930:	4b0a      	ldr	r3, [pc, #40]	; (801c95c <udp_sendto_if_src+0x164>)
 801c932:	f240 22d1 	movw	r2, #721	; 0x2d1
 801c936:	490f      	ldr	r1, [pc, #60]	; (801c974 <udp_sendto_if_src+0x17c>)
 801c938:	f06f 070f 	mvn.w	r7, #15
 801c93c:	4809      	ldr	r0, [pc, #36]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c93e:	f004 ff51 	bl	80217e4 <iprintf>
 801c942:	e7af      	b.n	801c8a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c944:	4b05      	ldr	r3, [pc, #20]	; (801c95c <udp_sendto_if_src+0x164>)
 801c946:	f240 22d5 	movw	r2, #725	; 0x2d5
 801c94a:	490b      	ldr	r1, [pc, #44]	; (801c978 <udp_sendto_if_src+0x180>)
 801c94c:	f06f 070f 	mvn.w	r7, #15
 801c950:	4804      	ldr	r0, [pc, #16]	; (801c964 <udp_sendto_if_src+0x16c>)
 801c952:	f004 ff47 	bl	80217e4 <iprintf>
 801c956:	e7a5      	b.n	801c8a4 <udp_sendto_if_src+0xac>
 801c958:	20036794 	.word	0x20036794
 801c95c:	08040354 	.word	0x08040354
 801c960:	080404c0 	.word	0x080404c0
 801c964:	08027fec 	.word	0x08027fec
 801c968:	08040478 	.word	0x08040478
 801c96c:	08040454 	.word	0x08040454
 801c970:	08040434 	.word	0x08040434
 801c974:	08040414 	.word	0x08040414
 801c978:	0804049c 	.word	0x0804049c

0801c97c <udp_sendto_if>:
{
 801c97c:	b570      	push	{r4, r5, r6, lr}
 801c97e:	b082      	sub	sp, #8
 801c980:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c982:	2800      	cmp	r0, #0
 801c984:	d035      	beq.n	801c9f2 <udp_sendto_if+0x76>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c986:	b351      	cbz	r1, 801c9de <udp_sendto_if+0x62>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c988:	b1fa      	cbz	r2, 801c9ca <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c98a:	b1a4      	cbz	r4, 801c9b6 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c98c:	6805      	ldr	r5, [r0, #0]
 801c98e:	b935      	cbnz	r5, 801c99e <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801c990:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c992:	e9cd 4500 	strd	r4, r5, [sp]
 801c996:	f7ff ff2f 	bl	801c7f8 <udp_sendto_if_src>
}
 801c99a:	b002      	add	sp, #8
 801c99c:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c99e:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c9a2:	2ee0      	cmp	r6, #224	; 0xe0
 801c9a4:	d0f4      	beq.n	801c990 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c9a6:	6866      	ldr	r6, [r4, #4]
 801c9a8:	42b5      	cmp	r5, r6
 801c9aa:	d101      	bne.n	801c9b0 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c9ac:	4605      	mov	r5, r0
 801c9ae:	e7f0      	b.n	801c992 <udp_sendto_if+0x16>
        return ERR_RTE;
 801c9b0:	f06f 0003 	mvn.w	r0, #3
 801c9b4:	e7f1      	b.n	801c99a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c9b6:	4b14      	ldr	r3, [pc, #80]	; (801ca08 <udp_sendto_if+0x8c>)
 801c9b8:	f240 2283 	movw	r2, #643	; 0x283
 801c9bc:	4913      	ldr	r1, [pc, #76]	; (801ca0c <udp_sendto_if+0x90>)
 801c9be:	4814      	ldr	r0, [pc, #80]	; (801ca10 <udp_sendto_if+0x94>)
 801c9c0:	f004 ff10 	bl	80217e4 <iprintf>
 801c9c4:	f06f 000f 	mvn.w	r0, #15
 801c9c8:	e7e7      	b.n	801c99a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c9ca:	4b0f      	ldr	r3, [pc, #60]	; (801ca08 <udp_sendto_if+0x8c>)
 801c9cc:	f240 2282 	movw	r2, #642	; 0x282
 801c9d0:	4910      	ldr	r1, [pc, #64]	; (801ca14 <udp_sendto_if+0x98>)
 801c9d2:	480f      	ldr	r0, [pc, #60]	; (801ca10 <udp_sendto_if+0x94>)
 801c9d4:	f004 ff06 	bl	80217e4 <iprintf>
 801c9d8:	f06f 000f 	mvn.w	r0, #15
 801c9dc:	e7dd      	b.n	801c99a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c9de:	4b0a      	ldr	r3, [pc, #40]	; (801ca08 <udp_sendto_if+0x8c>)
 801c9e0:	f240 2281 	movw	r2, #641	; 0x281
 801c9e4:	490c      	ldr	r1, [pc, #48]	; (801ca18 <udp_sendto_if+0x9c>)
 801c9e6:	480a      	ldr	r0, [pc, #40]	; (801ca10 <udp_sendto_if+0x94>)
 801c9e8:	f004 fefc 	bl	80217e4 <iprintf>
 801c9ec:	f06f 000f 	mvn.w	r0, #15
 801c9f0:	e7d3      	b.n	801c99a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c9f2:	4b05      	ldr	r3, [pc, #20]	; (801ca08 <udp_sendto_if+0x8c>)
 801c9f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c9f8:	4908      	ldr	r1, [pc, #32]	; (801ca1c <udp_sendto_if+0xa0>)
 801c9fa:	4805      	ldr	r0, [pc, #20]	; (801ca10 <udp_sendto_if+0x94>)
 801c9fc:	f004 fef2 	bl	80217e4 <iprintf>
 801ca00:	f06f 000f 	mvn.w	r0, #15
 801ca04:	e7c9      	b.n	801c99a <udp_sendto_if+0x1e>
 801ca06:	bf00      	nop
 801ca08:	08040354 	.word	0x08040354
 801ca0c:	08040548 	.word	0x08040548
 801ca10:	08027fec 	.word	0x08027fec
 801ca14:	08040528 	.word	0x08040528
 801ca18:	0804050c 	.word	0x0804050c
 801ca1c:	080404f0 	.word	0x080404f0

0801ca20 <udp_sendto>:
{
 801ca20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca22:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca24:	b3a0      	cbz	r0, 801ca90 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801ca26:	460e      	mov	r6, r1
 801ca28:	b341      	cbz	r1, 801ca7c <udp_sendto+0x5c>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ca2a:	4615      	mov	r5, r2
 801ca2c:	b1e2      	cbz	r2, 801ca68 <udp_sendto+0x48>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801ca2e:	4604      	mov	r4, r0
 801ca30:	7a00      	ldrb	r0, [r0, #8]
 801ca32:	461f      	mov	r7, r3
 801ca34:	b158      	cbz	r0, 801ca4e <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801ca36:	f7fa fcdf 	bl	80173f8 <netif_get_by_index>
  if (netif == NULL) {
 801ca3a:	b160      	cbz	r0, 801ca56 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801ca3c:	9000      	str	r0, [sp, #0]
 801ca3e:	463b      	mov	r3, r7
 801ca40:	462a      	mov	r2, r5
 801ca42:	4631      	mov	r1, r6
 801ca44:	4620      	mov	r0, r4
 801ca46:	f7ff ff99 	bl	801c97c <udp_sendto_if>
}
 801ca4a:	b003      	add	sp, #12
 801ca4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801ca4e:	4610      	mov	r0, r2
 801ca50:	f002 fa76 	bl	801ef40 <ip4_route>
 801ca54:	e7f1      	b.n	801ca3a <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801ca56:	4a13      	ldr	r2, [pc, #76]	; (801caa4 <udp_sendto+0x84>)
    return ERR_RTE;
 801ca58:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801ca5c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801ca60:	3301      	adds	r3, #1
 801ca62:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801ca66:	e7f0      	b.n	801ca4a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ca68:	4b0f      	ldr	r3, [pc, #60]	; (801caa8 <udp_sendto+0x88>)
 801ca6a:	f240 221a 	movw	r2, #538	; 0x21a
 801ca6e:	490f      	ldr	r1, [pc, #60]	; (801caac <udp_sendto+0x8c>)
 801ca70:	480f      	ldr	r0, [pc, #60]	; (801cab0 <udp_sendto+0x90>)
 801ca72:	f004 feb7 	bl	80217e4 <iprintf>
 801ca76:	f06f 000f 	mvn.w	r0, #15
 801ca7a:	e7e6      	b.n	801ca4a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801ca7c:	4b0a      	ldr	r3, [pc, #40]	; (801caa8 <udp_sendto+0x88>)
 801ca7e:	f240 2219 	movw	r2, #537	; 0x219
 801ca82:	490c      	ldr	r1, [pc, #48]	; (801cab4 <udp_sendto+0x94>)
 801ca84:	480a      	ldr	r0, [pc, #40]	; (801cab0 <udp_sendto+0x90>)
 801ca86:	f004 fead 	bl	80217e4 <iprintf>
 801ca8a:	f06f 000f 	mvn.w	r0, #15
 801ca8e:	e7dc      	b.n	801ca4a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca90:	4b05      	ldr	r3, [pc, #20]	; (801caa8 <udp_sendto+0x88>)
 801ca92:	f44f 7206 	mov.w	r2, #536	; 0x218
 801ca96:	4908      	ldr	r1, [pc, #32]	; (801cab8 <udp_sendto+0x98>)
 801ca98:	4805      	ldr	r0, [pc, #20]	; (801cab0 <udp_sendto+0x90>)
 801ca9a:	f004 fea3 	bl	80217e4 <iprintf>
 801ca9e:	f06f 000f 	mvn.w	r0, #15
 801caa2:	e7d2      	b.n	801ca4a <udp_sendto+0x2a>
 801caa4:	20036794 	.word	0x20036794
 801caa8:	08040354 	.word	0x08040354
 801caac:	0804059c 	.word	0x0804059c
 801cab0:	08027fec 	.word	0x08027fec
 801cab4:	08040580 	.word	0x08040580
 801cab8:	08040568 	.word	0x08040568

0801cabc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801cabc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cabe:	b320      	cbz	r0, 801cb0a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cac0:	460d      	mov	r5, r1
 801cac2:	b361      	cbz	r1, 801cb1e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801cac4:	4616      	mov	r6, r2
 801cac6:	8a42      	ldrh	r2, [r0, #18]
 801cac8:	4604      	mov	r4, r0
 801caca:	b1c2      	cbz	r2, 801cafe <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cacc:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cace:	4919      	ldr	r1, [pc, #100]	; (801cb34 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cad0:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cad2:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cad6:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801cad8:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801cada:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cadc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cade:	b142      	cbz	r2, 801caf2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801cae0:	4294      	cmp	r4, r2
 801cae2:	d00a      	beq.n	801cafa <udp_connect+0x3e>
 801cae4:	4613      	mov	r3, r2
 801cae6:	e001      	b.n	801caec <udp_connect+0x30>
 801cae8:	429c      	cmp	r4, r3
 801caea:	d006      	beq.n	801cafa <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801caec:	68db      	ldr	r3, [r3, #12]
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d1fa      	bne.n	801cae8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801caf2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801caf4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801caf6:	600c      	str	r4, [r1, #0]
}
 801caf8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801cafa:	2000      	movs	r0, #0
}
 801cafc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801cafe:	4601      	mov	r1, r0
 801cb00:	f7ff fdfa 	bl	801c6f8 <udp_bind>
    if (err != ERR_OK) {
 801cb04:	2800      	cmp	r0, #0
 801cb06:	d0e1      	beq.n	801cacc <udp_connect+0x10>
}
 801cb08:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb0a:	4b0b      	ldr	r3, [pc, #44]	; (801cb38 <udp_connect+0x7c>)
 801cb0c:	f240 4235 	movw	r2, #1077	; 0x435
 801cb10:	490a      	ldr	r1, [pc, #40]	; (801cb3c <udp_connect+0x80>)
 801cb12:	480b      	ldr	r0, [pc, #44]	; (801cb40 <udp_connect+0x84>)
 801cb14:	f004 fe66 	bl	80217e4 <iprintf>
 801cb18:	f06f 000f 	mvn.w	r0, #15
}
 801cb1c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801cb1e:	4b06      	ldr	r3, [pc, #24]	; (801cb38 <udp_connect+0x7c>)
 801cb20:	f240 4236 	movw	r2, #1078	; 0x436
 801cb24:	4907      	ldr	r1, [pc, #28]	; (801cb44 <udp_connect+0x88>)
 801cb26:	4806      	ldr	r0, [pc, #24]	; (801cb40 <udp_connect+0x84>)
 801cb28:	f004 fe5c 	bl	80217e4 <iprintf>
 801cb2c:	f06f 000f 	mvn.w	r0, #15
}
 801cb30:	bd70      	pop	{r4, r5, r6, pc}
 801cb32:	bf00      	nop
 801cb34:	200368b8 	.word	0x200368b8
 801cb38:	08040354 	.word	0x08040354
 801cb3c:	080405b8 	.word	0x080405b8
 801cb40:	08027fec 	.word	0x08027fec
 801cb44:	080405d4 	.word	0x080405d4

0801cb48 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cb48:	b110      	cbz	r0, 801cb50 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801cb4a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801cb4e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cb50:	4b03      	ldr	r3, [pc, #12]	; (801cb60 <udp_recv+0x18>)
 801cb52:	f240 428a 	movw	r2, #1162	; 0x48a
 801cb56:	4903      	ldr	r1, [pc, #12]	; (801cb64 <udp_recv+0x1c>)
 801cb58:	4803      	ldr	r0, [pc, #12]	; (801cb68 <udp_recv+0x20>)
 801cb5a:	f004 be43 	b.w	80217e4 <iprintf>
 801cb5e:	bf00      	nop
 801cb60:	08040354 	.word	0x08040354
 801cb64:	080405f0 	.word	0x080405f0
 801cb68:	08027fec 	.word	0x08027fec

0801cb6c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cb6c:	4601      	mov	r1, r0
 801cb6e:	b1a0      	cbz	r0, 801cb9a <udp_remove+0x2e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801cb70:	4b0d      	ldr	r3, [pc, #52]	; (801cba8 <udp_remove+0x3c>)
 801cb72:	681a      	ldr	r2, [r3, #0]
 801cb74:	4282      	cmp	r2, r0
 801cb76:	d006      	beq.n	801cb86 <udp_remove+0x1a>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cb78:	b13a      	cbz	r2, 801cb8a <udp_remove+0x1e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801cb7a:	68d3      	ldr	r3, [r2, #12]
 801cb7c:	b12b      	cbz	r3, 801cb8a <udp_remove+0x1e>
 801cb7e:	428b      	cmp	r3, r1
 801cb80:	d006      	beq.n	801cb90 <udp_remove+0x24>
 801cb82:	461a      	mov	r2, r3
 801cb84:	e7f8      	b.n	801cb78 <udp_remove+0xc>
    udp_pcbs = udp_pcbs->next;
 801cb86:	68c2      	ldr	r2, [r0, #12]
 801cb88:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801cb8a:	2001      	movs	r0, #1
 801cb8c:	f7fa ba42 	b.w	8017014 <memp_free>
        pcb2->next = pcb->next;
 801cb90:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801cb92:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801cb94:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801cb96:	f7fa ba3d 	b.w	8017014 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cb9a:	4b04      	ldr	r3, [pc, #16]	; (801cbac <udp_remove+0x40>)
 801cb9c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801cba0:	4903      	ldr	r1, [pc, #12]	; (801cbb0 <udp_remove+0x44>)
 801cba2:	4804      	ldr	r0, [pc, #16]	; (801cbb4 <udp_remove+0x48>)
 801cba4:	f004 be1e 	b.w	80217e4 <iprintf>
 801cba8:	200368b8 	.word	0x200368b8
 801cbac:	08040354 	.word	0x08040354
 801cbb0:	08040608 	.word	0x08040608
 801cbb4:	08027fec 	.word	0x08027fec

0801cbb8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cbb8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cbba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801cbbe:	4907      	ldr	r1, [pc, #28]	; (801cbdc <udp_new+0x24>)
 801cbc0:	2001      	movs	r0, #1
 801cbc2:	f7fa fa03 	bl	8016fcc <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801cbc6:	4604      	mov	r4, r0
 801cbc8:	b128      	cbz	r0, 801cbd6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801cbca:	2220      	movs	r2, #32
 801cbcc:	2100      	movs	r1, #0
 801cbce:	f003 fe97 	bl	8020900 <memset>
    pcb->ttl = UDP_TTL;
 801cbd2:	23ff      	movs	r3, #255	; 0xff
 801cbd4:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	bd10      	pop	{r4, pc}
 801cbda:	bf00      	nop
 801cbdc:	08040354 	.word	0x08040354

0801cbe0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801cbe0:	f7ff bfea 	b.w	801cbb8 <udp_new>

0801cbe4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801cbe4:	b110      	cbz	r0, 801cbec <udp_netif_ip_addr_changed+0x8>
 801cbe6:	6802      	ldr	r2, [r0, #0]
 801cbe8:	b101      	cbz	r1, 801cbec <udp_netif_ip_addr_changed+0x8>
 801cbea:	b902      	cbnz	r2, 801cbee <udp_netif_ip_addr_changed+0xa>
 801cbec:	4770      	bx	lr
 801cbee:	680b      	ldr	r3, [r1, #0]
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d0fb      	beq.n	801cbec <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cbf4:	4b08      	ldr	r3, [pc, #32]	; (801cc18 <udp_netif_ip_addr_changed+0x34>)
 801cbf6:	681b      	ldr	r3, [r3, #0]
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d0f7      	beq.n	801cbec <udp_netif_ip_addr_changed+0x8>
{
 801cbfc:	b410      	push	{r4}
 801cbfe:	e000      	b.n	801cc02 <udp_netif_ip_addr_changed+0x1e>
 801cc00:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cc02:	681c      	ldr	r4, [r3, #0]
 801cc04:	4294      	cmp	r4, r2
 801cc06:	d101      	bne.n	801cc0c <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cc08:	680a      	ldr	r2, [r1, #0]
 801cc0a:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cc0c:	68db      	ldr	r3, [r3, #12]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d1f6      	bne.n	801cc00 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801cc12:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cc16:	4770      	bx	lr
 801cc18:	200368b8 	.word	0x200368b8

0801cc1c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801cc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801cc1e:	1c87      	adds	r7, r0, #2
{
 801cc20:	4604      	mov	r4, r0
 801cc22:	460d      	mov	r5, r1
 801cc24:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801cc26:	2f44      	cmp	r7, #68	; 0x44
 801cc28:	d806      	bhi.n	801cc38 <dhcp_option_short+0x1c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801cc2a:	1c63      	adds	r3, r4, #1
 801cc2c:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801cc2e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801cc30:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801cc32:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801cc34:	54ee      	strb	r6, [r5, r3]
}
 801cc36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801cc38:	4b03      	ldr	r3, [pc, #12]	; (801cc48 <dhcp_option_short+0x2c>)
 801cc3a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801cc3e:	4903      	ldr	r1, [pc, #12]	; (801cc4c <dhcp_option_short+0x30>)
 801cc40:	4803      	ldr	r0, [pc, #12]	; (801cc50 <dhcp_option_short+0x34>)
 801cc42:	f004 fdcf 	bl	80217e4 <iprintf>
 801cc46:	e7f0      	b.n	801cc2a <dhcp_option_short+0xe>
 801cc48:	08040620 	.word	0x08040620
 801cc4c:	08040658 	.word	0x08040658
 801cc50:	08027fec 	.word	0x08027fec

0801cc54 <dhcp_option>:
{
 801cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cc56:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801cc58:	3302      	adds	r3, #2
{
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801cc5e:	4403      	add	r3, r0
{
 801cc60:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801cc62:	2b44      	cmp	r3, #68	; 0x44
 801cc64:	d806      	bhi.n	801cc74 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 801cc66:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801cc68:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801cc6a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801cc6c:	b29b      	uxth	r3, r3
}
 801cc6e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801cc70:	54ee      	strb	r6, [r5, r3]
}
 801cc72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801cc74:	4b03      	ldr	r3, [pc, #12]	; (801cc84 <dhcp_option+0x30>)
 801cc76:	f240 529a 	movw	r2, #1434	; 0x59a
 801cc7a:	4903      	ldr	r1, [pc, #12]	; (801cc88 <dhcp_option+0x34>)
 801cc7c:	4803      	ldr	r0, [pc, #12]	; (801cc8c <dhcp_option+0x38>)
 801cc7e:	f004 fdb1 	bl	80217e4 <iprintf>
 801cc82:	e7f0      	b.n	801cc66 <dhcp_option+0x12>
 801cc84:	08040620 	.word	0x08040620
 801cc88:	08040694 	.word	0x08040694
 801cc8c:	08027fec 	.word	0x08027fec

0801cc90 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801cc90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801cc92:	1d07      	adds	r7, r0, #4
{
 801cc94:	4604      	mov	r4, r0
 801cc96:	460d      	mov	r5, r1
 801cc98:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801cc9a:	2f44      	cmp	r7, #68	; 0x44
 801cc9c:	d80e      	bhi.n	801ccbc <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801cc9e:	0e30      	lsrs	r0, r6, #24
 801cca0:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801cca2:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801cca4:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801cca6:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801cca8:	b289      	uxth	r1, r1
 801ccaa:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ccac:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ccae:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ccb0:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ccb2:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801ccb4:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ccb6:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ccb8:	54ee      	strb	r6, [r5, r3]
}
 801ccba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ccbc:	4b03      	ldr	r3, [pc, #12]	; (801cccc <dhcp_option_long+0x3c>)
 801ccbe:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801ccc2:	4903      	ldr	r1, [pc, #12]	; (801ccd0 <dhcp_option_long+0x40>)
 801ccc4:	4803      	ldr	r0, [pc, #12]	; (801ccd4 <dhcp_option_long+0x44>)
 801ccc6:	f004 fd8d 	bl	80217e4 <iprintf>
 801ccca:	e7e8      	b.n	801cc9e <dhcp_option_long+0xe>
 801cccc:	08040620 	.word	0x08040620
 801ccd0:	080406d8 	.word	0x080406d8
 801ccd4:	08027fec 	.word	0x08027fec

0801ccd8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801ccd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801ccdc:	4606      	mov	r6, r0
 801ccde:	2800      	cmp	r0, #0
 801cce0:	f000 809a 	beq.w	801ce18 <dhcp_create_msg+0x140>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801cce4:	460c      	mov	r4, r1
 801cce6:	2900      	cmp	r1, #0
 801cce8:	f000 808d 	beq.w	801ce06 <dhcp_create_msg+0x12e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801ccec:	4690      	mov	r8, r2
 801ccee:	f44f 719a 	mov.w	r1, #308	; 0x134
 801ccf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ccf6:	2036      	movs	r0, #54	; 0x36
 801ccf8:	4699      	mov	r9, r3
 801ccfa:	f7fa fcc9 	bl	8017690 <pbuf_alloc>
  if (p_out == NULL) {
 801ccfe:	4607      	mov	r7, r0
 801cd00:	2800      	cmp	r0, #0
 801cd02:	d04a      	beq.n	801cd9a <dhcp_create_msg+0xc2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801cd04:	8943      	ldrh	r3, [r0, #10]
 801cd06:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801cd0a:	d374      	bcc.n	801cdf6 <dhcp_create_msg+0x11e>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801cd0c:	f1b8 0f03 	cmp.w	r8, #3
 801cd10:	d053      	beq.n	801cdba <dhcp_create_msg+0xe2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801cd12:	79a3      	ldrb	r3, [r4, #6]
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d043      	beq.n	801cda0 <dhcp_create_msg+0xc8>
 801cd18:	4b44      	ldr	r3, [pc, #272]	; (801ce2c <dhcp_create_msg+0x154>)
 801cd1a:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801cd1c:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801cd20:	f44f 729a 	mov.w	r2, #308	; 0x134
 801cd24:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801cd26:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801cd28:	4650      	mov	r0, sl
 801cd2a:	f003 fde9 	bl	8020900 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801cd2e:	2301      	movs	r3, #1
 801cd30:	f88a 3000 	strb.w	r3, [sl]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801cd34:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801cd38:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801cd3c:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801cd40:	6820      	ldr	r0, [r4, #0]
 801cd42:	f7f8 fde7 	bl	8015914 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801cd46:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801cd4a:	f8ca 0004 	str.w	r0, [sl, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801cd4e:	d12c      	bne.n	801cdaa <dhcp_create_msg+0xd2>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801cd50:	6873      	ldr	r3, [r6, #4]
 801cd52:	f8ca 300c 	str.w	r3, [sl, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801cd56:	f106 012e 	add.w	r1, r6, #46	; 0x2e
 801cd5a:	f10a 041c 	add.w	r4, sl, #28
 801cd5e:	3634      	adds	r6, #52	; 0x34
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801cd60:	f811 5b01 	ldrb.w	r5, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801cd64:	428e      	cmp	r6, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801cd66:	f804 5b01 	strb.w	r5, [r4], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801cd6a:	d1f9      	bne.n	801cd60 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801cd6c:	2363      	movs	r3, #99	; 0x63
 801cd6e:	f06f 047d 	mvn.w	r4, #125	; 0x7d
 801cd72:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801cd74:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801cd76:	f88a 30ec 	strb.w	r3, [sl, #236]	; 0xec
  options[options_out_len++] = option_len;
 801cd7a:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801cd7c:	f88a 30ef 	strb.w	r3, [sl, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801cd80:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801cd82:	f88a 80f2 	strb.w	r8, [sl, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801cd86:	f88a 40ed 	strb.w	r4, [sl, #237]	; 0xed
 801cd8a:	f88a 00ee 	strb.w	r0, [sl, #238]	; 0xee
  options[options_out_len++] = option_type;
 801cd8e:	f88a 10f0 	strb.w	r1, [sl, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801cd92:	f88a 20f1 	strb.w	r2, [sl, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801cd96:	f8a9 3000 	strh.w	r3, [r9]
  }
  return p_out;
}
 801cd9a:	4638      	mov	r0, r7
 801cd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      xid = LWIP_RAND();
 801cda0:	f004 fdc4 	bl	802192c <rand>
 801cda4:	4b21      	ldr	r3, [pc, #132]	; (801ce2c <dhcp_create_msg+0x154>)
 801cda6:	6018      	str	r0, [r3, #0]
 801cda8:	e7b8      	b.n	801cd1c <dhcp_create_msg+0x44>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801cdaa:	f1a8 0307 	sub.w	r3, r8, #7
 801cdae:	2b01      	cmp	r3, #1
 801cdb0:	d9ce      	bls.n	801cd50 <dhcp_create_msg+0x78>
 801cdb2:	f1b8 0f03 	cmp.w	r8, #3
 801cdb6:	d1ce      	bne.n	801cd56 <dhcp_create_msg+0x7e>
 801cdb8:	e018      	b.n	801cdec <dhcp_create_msg+0x114>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801cdba:	7963      	ldrb	r3, [r4, #5]
 801cdbc:	2b03      	cmp	r3, #3
 801cdbe:	d0a8      	beq.n	801cd12 <dhcp_create_msg+0x3a>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801cdc0:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801cdc4:	f44f 729a 	mov.w	r2, #308	; 0x134
 801cdc8:	2100      	movs	r1, #0
 801cdca:	4650      	mov	r0, sl
 801cdcc:	f003 fd98 	bl	8020900 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801cdd0:	2301      	movs	r3, #1
 801cdd2:	f88a 3000 	strb.w	r3, [sl]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801cdd6:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801cdda:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801cdde:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801cde2:	6820      	ldr	r0, [r4, #0]
 801cde4:	f7f8 fd96 	bl	8015914 <lwip_htonl>
 801cde8:	f8ca 0004 	str.w	r0, [sl, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801cdec:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801cdee:	3b04      	subs	r3, #4
 801cdf0:	2b01      	cmp	r3, #1
 801cdf2:	d8b0      	bhi.n	801cd56 <dhcp_create_msg+0x7e>
 801cdf4:	e7ac      	b.n	801cd50 <dhcp_create_msg+0x78>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801cdf6:	4b0e      	ldr	r3, [pc, #56]	; (801ce30 <dhcp_create_msg+0x158>)
 801cdf8:	f240 7271 	movw	r2, #1905	; 0x771
 801cdfc:	490d      	ldr	r1, [pc, #52]	; (801ce34 <dhcp_create_msg+0x15c>)
 801cdfe:	480e      	ldr	r0, [pc, #56]	; (801ce38 <dhcp_create_msg+0x160>)
 801ce00:	f004 fcf0 	bl	80217e4 <iprintf>
 801ce04:	e782      	b.n	801cd0c <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801ce06:	4b0a      	ldr	r3, [pc, #40]	; (801ce30 <dhcp_create_msg+0x158>)
 801ce08:	f240 726a 	movw	r2, #1898	; 0x76a
 801ce0c:	490b      	ldr	r1, [pc, #44]	; (801ce3c <dhcp_create_msg+0x164>)
 801ce0e:	4627      	mov	r7, r4
 801ce10:	4809      	ldr	r0, [pc, #36]	; (801ce38 <dhcp_create_msg+0x160>)
 801ce12:	f004 fce7 	bl	80217e4 <iprintf>
 801ce16:	e7c0      	b.n	801cd9a <dhcp_create_msg+0xc2>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801ce18:	4607      	mov	r7, r0
 801ce1a:	4b05      	ldr	r3, [pc, #20]	; (801ce30 <dhcp_create_msg+0x158>)
 801ce1c:	f240 7269 	movw	r2, #1897	; 0x769
 801ce20:	4907      	ldr	r1, [pc, #28]	; (801ce40 <dhcp_create_msg+0x168>)
 801ce22:	4805      	ldr	r0, [pc, #20]	; (801ce38 <dhcp_create_msg+0x160>)
 801ce24:	f004 fcde 	bl	80217e4 <iprintf>
 801ce28:	e7b7      	b.n	801cd9a <dhcp_create_msg+0xc2>
 801ce2a:	bf00      	nop
 801ce2c:	20022a10 	.word	0x20022a10
 801ce30:	08040620 	.word	0x08040620
 801ce34:	08040754 	.word	0x08040754
 801ce38:	08027fec 	.word	0x08027fec
 801ce3c:	08040734 	.word	0x08040734
 801ce40:	08040714 	.word	0x08040714

0801ce44 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801ce44:	4603      	mov	r3, r0
 801ce46:	4610      	mov	r0, r2
 801ce48:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801ce4a:	1c5c      	adds	r4, r3, #1
 801ce4c:	25ff      	movs	r5, #255	; 0xff
 801ce4e:	b2a4      	uxth	r4, r4
 801ce50:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801ce52:	2c43      	cmp	r4, #67	; 0x43
 801ce54:	d80c      	bhi.n	801ce70 <dhcp_option_trailer+0x2c>
 801ce56:	f1c3 0642 	rsb	r6, r3, #66	; 0x42
 801ce5a:	1e63      	subs	r3, r4, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801ce5c:	2500      	movs	r5, #0
 801ce5e:	fa14 f486 	uxtah	r4, r4, r6
 801ce62:	440b      	add	r3, r1
 801ce64:	440c      	add	r4, r1
 801ce66:	f803 5f01 	strb.w	r5, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801ce6a:	42a3      	cmp	r3, r4
 801ce6c:	d1fb      	bne.n	801ce66 <dhcp_option_trailer+0x22>
    options[options_out_len++] = 0;
 801ce6e:	2444      	movs	r4, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801ce70:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
}
 801ce74:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801ce76:	b289      	uxth	r1, r1
 801ce78:	f7fa bca8 	b.w	80177cc <pbuf_realloc>

0801ce7c <dhcp_reboot>:
{
 801ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce80:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801ce82:	b087      	sub	sp, #28
 801ce84:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 801ce86:	797b      	ldrb	r3, [r7, #5]
 801ce88:	2b03      	cmp	r3, #3
 801ce8a:	d004      	beq.n	801ce96 <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801ce8c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801ce8e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801ce90:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801ce92:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801ce94:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801ce96:	f10d 0316 	add.w	r3, sp, #22
 801ce9a:	2203      	movs	r2, #3
 801ce9c:	4639      	mov	r1, r7
 801ce9e:	4648      	mov	r0, r9
 801cea0:	f7ff ff1a 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801cea4:	4680      	mov	r8, r0
 801cea6:	2800      	cmp	r0, #0
 801cea8:	d07a      	beq.n	801cfa0 <dhcp_reboot+0x124>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ceaa:	6845      	ldr	r5, [r0, #4]
 801ceac:	2302      	movs	r3, #2
 801ceae:	2239      	movs	r2, #57	; 0x39
 801ceb0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801ceb4:	35f0      	adds	r5, #240	; 0xf0
 801ceb6:	4e3c      	ldr	r6, [pc, #240]	; (801cfa8 <dhcp_reboot+0x12c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ceb8:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cebc:	4629      	mov	r1, r5
 801cebe:	f106 0b03 	add.w	fp, r6, #3
 801cec2:	f7ff fec7 	bl	801cc54 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801cec6:	4629      	mov	r1, r5
 801cec8:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801cecc:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801ced0:	f7ff fea4 	bl	801cc1c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801ced4:	2304      	movs	r3, #4
 801ced6:	4629      	mov	r1, r5
 801ced8:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801ceda:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cede:	f7ff feb9 	bl	801cc54 <dhcp_option>
 801cee2:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cee4:	69f8      	ldr	r0, [r7, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801cee6:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801ceea:	f7f8 fd13 	bl	8015914 <lwip_htonl>
 801ceee:	4629      	mov	r1, r5
 801cef0:	4602      	mov	r2, r0
 801cef2:	4620      	mov	r0, r4
 801cef4:	f7ff fecc 	bl	801cc90 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cef8:	4629      	mov	r1, r5
 801cefa:	2304      	movs	r3, #4
 801cefc:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801cefe:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801cf02:	f7ff fea7 	bl	801cc54 <dhcp_option>
 801cf06:	4604      	mov	r4, r0
 801cf08:	9003      	str	r0, [sp, #12]
 801cf0a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cf0e:	2c43      	cmp	r4, #67	; 0x43
 801cf10:	d80b      	bhi.n	801cf2a <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801cf12:	1c63      	adds	r3, r4, #1
 801cf14:	f805 a004 	strb.w	sl, [r5, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cf18:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801cf1a:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801cf1c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801cf20:	d00b      	beq.n	801cf3a <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801cf22:	2c43      	cmp	r4, #67	; 0x43
 801cf24:	f816 ab01 	ldrb.w	sl, [r6], #1
 801cf28:	d9f3      	bls.n	801cf12 <dhcp_reboot+0x96>
 801cf2a:	4b20      	ldr	r3, [pc, #128]	; (801cfac <dhcp_reboot+0x130>)
 801cf2c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801cf30:	491f      	ldr	r1, [pc, #124]	; (801cfb0 <dhcp_reboot+0x134>)
 801cf32:	4820      	ldr	r0, [pc, #128]	; (801cfb4 <dhcp_reboot+0x138>)
 801cf34:	f004 fc56 	bl	80217e4 <iprintf>
 801cf38:	e7eb      	b.n	801cf12 <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801cf3a:	9803      	ldr	r0, [sp, #12]
 801cf3c:	4629      	mov	r1, r5
 801cf3e:	4642      	mov	r2, r8
 801cf40:	3004      	adds	r0, #4
 801cf42:	b280      	uxth	r0, r0
 801cf44:	f7ff ff7e 	bl	801ce44 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801cf48:	4a1b      	ldr	r2, [pc, #108]	; (801cfb8 <dhcp_reboot+0x13c>)
 801cf4a:	f8cd 9000 	str.w	r9, [sp]
 801cf4e:	2343      	movs	r3, #67	; 0x43
 801cf50:	6810      	ldr	r0, [r2, #0]
 801cf52:	4641      	mov	r1, r8
 801cf54:	4a19      	ldr	r2, [pc, #100]	; (801cfbc <dhcp_reboot+0x140>)
 801cf56:	f7ff fd11 	bl	801c97c <udp_sendto_if>
 801cf5a:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801cf5c:	4640      	mov	r0, r8
 801cf5e:	f7fa fb29 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801cf62:	79bb      	ldrb	r3, [r7, #6]
 801cf64:	2bff      	cmp	r3, #255	; 0xff
 801cf66:	d015      	beq.n	801cf94 <dhcp_reboot+0x118>
    dhcp->tries++;
 801cf68:	3301      	adds	r3, #1
 801cf6a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cf6c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801cf6e:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cf70:	d810      	bhi.n	801cf94 <dhcp_reboot+0x118>
 801cf72:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801cf76:	4a12      	ldr	r2, [pc, #72]	; (801cfc0 <dhcp_reboot+0x144>)
}
 801cf78:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801cf7a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801cf7e:	00db      	lsls	r3, r3, #3
 801cf80:	b29b      	uxth	r3, r3
 801cf82:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801cf86:	fba2 2303 	umull	r2, r3, r2, r3
 801cf8a:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf8c:	813b      	strh	r3, [r7, #8]
}
 801cf8e:	b007      	add	sp, #28
 801cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801cf94:	2314      	movs	r3, #20
}
 801cf96:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801cf98:	813b      	strh	r3, [r7, #8]
}
 801cf9a:	b007      	add	sp, #28
 801cf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801cfa0:	f04f 34ff 	mov.w	r4, #4294967295
 801cfa4:	e7dd      	b.n	801cf62 <dhcp_reboot+0xe6>
 801cfa6:	bf00      	nop
 801cfa8:	08040999 	.word	0x08040999
 801cfac:	08040620 	.word	0x08040620
 801cfb0:	08040794 	.word	0x08040794
 801cfb4:	08027fec 	.word	0x08027fec
 801cfb8:	20022a08 	.word	0x20022a08
 801cfbc:	08040cd8 	.word	0x08040cd8
 801cfc0:	10624dd3 	.word	0x10624dd3

0801cfc4 <dhcp_select>:
{
 801cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc8:	b087      	sub	sp, #28
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801cfca:	2800      	cmp	r0, #0
 801cfcc:	f000 80ad 	beq.w	801d12a <dhcp_select+0x166>
  dhcp = netif_dhcp_data(netif);
 801cfd0:	6a85      	ldr	r5, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801cfd2:	4607      	mov	r7, r0
 801cfd4:	2d00      	cmp	r5, #0
 801cfd6:	f000 809e 	beq.w	801d116 <dhcp_select+0x152>
  if (new_state != dhcp->state) {
 801cfda:	796b      	ldrb	r3, [r5, #5]
 801cfdc:	2b01      	cmp	r3, #1
 801cfde:	d004      	beq.n	801cfea <dhcp_select+0x26>
    dhcp->tries = 0;
 801cfe0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801cfe2:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801cfe4:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801cfe6:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801cfe8:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801cfea:	f10d 0316 	add.w	r3, sp, #22
 801cfee:	2203      	movs	r2, #3
 801cff0:	4629      	mov	r1, r5
 801cff2:	4638      	mov	r0, r7
 801cff4:	f7ff fe70 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801cff8:	4681      	mov	r9, r0
 801cffa:	2800      	cmp	r0, #0
 801cffc:	f000 8088 	beq.w	801d110 <dhcp_select+0x14c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d000:	6846      	ldr	r6, [r0, #4]
 801d002:	2302      	movs	r3, #2
 801d004:	2239      	movs	r2, #57	; 0x39
 801d006:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801d00a:	36f0      	adds	r6, #240	; 0xf0
 801d00c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 801d164 <dhcp_select+0x1a0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d010:	f04f 0b01 	mov.w	fp, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d014:	4631      	mov	r1, r6
 801d016:	f108 0a03 	add.w	sl, r8, #3
 801d01a:	f7ff fe1b 	bl	801cc54 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d01e:	4631      	mov	r1, r6
 801d020:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d022:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d026:	f7ff fdf9 	bl	801cc1c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d02a:	2304      	movs	r3, #4
 801d02c:	4631      	mov	r1, r6
 801d02e:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d030:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d034:	f7ff fe0e 	bl	801cc54 <dhcp_option>
 801d038:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d03a:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801d03c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d040:	f7f8 fc68 	bl	8015914 <lwip_htonl>
 801d044:	4631      	mov	r1, r6
 801d046:	4602      	mov	r2, r0
 801d048:	4620      	mov	r0, r4
 801d04a:	f7ff fe21 	bl	801cc90 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d04e:	2304      	movs	r3, #4
 801d050:	4631      	mov	r1, r6
 801d052:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801d054:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d058:	f7ff fdfc 	bl	801cc54 <dhcp_option>
 801d05c:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801d05e:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801d060:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801d064:	f7f8 fc56 	bl	8015914 <lwip_htonl>
 801d068:	4631      	mov	r1, r6
 801d06a:	4602      	mov	r2, r0
 801d06c:	4620      	mov	r0, r4
 801d06e:	f7ff fe0f 	bl	801cc90 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d072:	4631      	mov	r1, r6
 801d074:	2304      	movs	r3, #4
 801d076:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801d078:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d07c:	f7ff fdea 	bl	801cc54 <dhcp_option>
 801d080:	4604      	mov	r4, r0
 801d082:	9003      	str	r0, [sp, #12]
 801d084:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d088:	2c43      	cmp	r4, #67	; 0x43
 801d08a:	d80b      	bhi.n	801d0a4 <dhcp_select+0xe0>
  options[options_out_len++] = value;
 801d08c:	1c63      	adds	r3, r4, #1
 801d08e:	f806 b004 	strb.w	fp, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d092:	45d0      	cmp	r8, sl
  options[options_out_len++] = value;
 801d094:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d096:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d09a:	d00b      	beq.n	801d0b4 <dhcp_select+0xf0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d09c:	2c43      	cmp	r4, #67	; 0x43
 801d09e:	f818 bb01 	ldrb.w	fp, [r8], #1
 801d0a2:	d9f3      	bls.n	801d08c <dhcp_select+0xc8>
 801d0a4:	4b26      	ldr	r3, [pc, #152]	; (801d140 <dhcp_select+0x17c>)
 801d0a6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d0aa:	4926      	ldr	r1, [pc, #152]	; (801d144 <dhcp_select+0x180>)
 801d0ac:	4826      	ldr	r0, [pc, #152]	; (801d148 <dhcp_select+0x184>)
 801d0ae:	f004 fb99 	bl	80217e4 <iprintf>
 801d0b2:	e7eb      	b.n	801d08c <dhcp_select+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d0b4:	9803      	ldr	r0, [sp, #12]
 801d0b6:	4631      	mov	r1, r6
 801d0b8:	464a      	mov	r2, r9
 801d0ba:	3004      	adds	r0, #4
 801d0bc:	b280      	uxth	r0, r0
 801d0be:	f7ff fec1 	bl	801ce44 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d0c2:	4a22      	ldr	r2, [pc, #136]	; (801d14c <dhcp_select+0x188>)
 801d0c4:	4822      	ldr	r0, [pc, #136]	; (801d150 <dhcp_select+0x18c>)
 801d0c6:	2343      	movs	r3, #67	; 0x43
 801d0c8:	9700      	str	r7, [sp, #0]
 801d0ca:	4649      	mov	r1, r9
 801d0cc:	6800      	ldr	r0, [r0, #0]
 801d0ce:	9201      	str	r2, [sp, #4]
 801d0d0:	4a20      	ldr	r2, [pc, #128]	; (801d154 <dhcp_select+0x190>)
 801d0d2:	f7ff fb91 	bl	801c7f8 <udp_sendto_if_src>
 801d0d6:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801d0d8:	4648      	mov	r0, r9
 801d0da:	f7fa fa6b 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801d0de:	79ab      	ldrb	r3, [r5, #6]
 801d0e0:	2bff      	cmp	r3, #255	; 0xff
 801d0e2:	d013      	beq.n	801d10c <dhcp_select+0x148>
    dhcp->tries++;
 801d0e4:	3301      	adds	r3, #1
 801d0e6:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d0e8:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801d0ea:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d0ec:	d80e      	bhi.n	801d10c <dhcp_select+0x148>
 801d0ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d0f2:	4919      	ldr	r1, [pc, #100]	; (801d158 <dhcp_select+0x194>)
 801d0f4:	4093      	lsls	r3, r2
 801d0f6:	b29b      	uxth	r3, r3
 801d0f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d0fc:	fba1 2303 	umull	r2, r3, r1, r3
 801d100:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d102:	812b      	strh	r3, [r5, #8]
}
 801d104:	4620      	mov	r0, r4
 801d106:	b007      	add	sp, #28
 801d108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801d10c:	2378      	movs	r3, #120	; 0x78
 801d10e:	e7f8      	b.n	801d102 <dhcp_select+0x13e>
 801d110:	f04f 34ff 	mov.w	r4, #4294967295
 801d114:	e7e3      	b.n	801d0de <dhcp_select+0x11a>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801d116:	4b0a      	ldr	r3, [pc, #40]	; (801d140 <dhcp_select+0x17c>)
 801d118:	f240 1279 	movw	r2, #377	; 0x179
 801d11c:	490f      	ldr	r1, [pc, #60]	; (801d15c <dhcp_select+0x198>)
 801d11e:	f06f 0405 	mvn.w	r4, #5
 801d122:	4809      	ldr	r0, [pc, #36]	; (801d148 <dhcp_select+0x184>)
 801d124:	f004 fb5e 	bl	80217e4 <iprintf>
 801d128:	e7ec      	b.n	801d104 <dhcp_select+0x140>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801d12a:	4b05      	ldr	r3, [pc, #20]	; (801d140 <dhcp_select+0x17c>)
 801d12c:	f240 1277 	movw	r2, #375	; 0x177
 801d130:	490b      	ldr	r1, [pc, #44]	; (801d160 <dhcp_select+0x19c>)
 801d132:	f06f 040f 	mvn.w	r4, #15
 801d136:	4804      	ldr	r0, [pc, #16]	; (801d148 <dhcp_select+0x184>)
 801d138:	f004 fb54 	bl	80217e4 <iprintf>
 801d13c:	e7e2      	b.n	801d104 <dhcp_select+0x140>
 801d13e:	bf00      	nop
 801d140:	08040620 	.word	0x08040620
 801d144:	08040794 	.word	0x08040794
 801d148:	08027fec 	.word	0x08027fec
 801d14c:	08040cd4 	.word	0x08040cd4
 801d150:	20022a08 	.word	0x20022a08
 801d154:	08040cd8 	.word	0x08040cd8
 801d158:	10624dd3 	.word	0x10624dd3
 801d15c:	080407e8 	.word	0x080407e8
 801d160:	080407cc 	.word	0x080407cc
 801d164:	08040999 	.word	0x08040999

0801d168 <dhcp_discover>:
{
 801d168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d16c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801d16e:	2300      	movs	r3, #0
{
 801d170:	b087      	sub	sp, #28
 801d172:	4680      	mov	r8, r0
  if (new_state != dhcp->state) {
 801d174:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801d176:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801d178:	2a06      	cmp	r2, #6
 801d17a:	d003      	beq.n	801d184 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801d17c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801d17e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801d180:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801d182:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801d184:	f10d 0316 	add.w	r3, sp, #22
 801d188:	2201      	movs	r2, #1
 801d18a:	4629      	mov	r1, r5
 801d18c:	4640      	mov	r0, r8
 801d18e:	f7ff fda3 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801d192:	4607      	mov	r7, r0
 801d194:	2800      	cmp	r0, #0
 801d196:	d04c      	beq.n	801d232 <dhcp_discover+0xca>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d198:	6841      	ldr	r1, [r0, #4]
 801d19a:	2302      	movs	r3, #2
 801d19c:	2239      	movs	r2, #57	; 0x39
 801d19e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801d1a2:	f101 09f0 	add.w	r9, r1, #240	; 0xf0
 801d1a6:	4e31      	ldr	r6, [pc, #196]	; (801d26c <dhcp_discover+0x104>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1a8:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d1ac:	4649      	mov	r1, r9
 801d1ae:	f106 0b03 	add.w	fp, r6, #3
 801d1b2:	f7ff fd4f 	bl	801cc54 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d1b6:	4649      	mov	r1, r9
 801d1b8:	f8b8 202c 	ldrh.w	r2, [r8, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801d1bc:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d1c0:	f7ff fd2c 	bl	801cc1c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1c4:	4649      	mov	r1, r9
 801d1c6:	2304      	movs	r3, #4
 801d1c8:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801d1ca:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1ce:	f7ff fd41 	bl	801cc54 <dhcp_option>
 801d1d2:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d1d4:	4926      	ldr	r1, [pc, #152]	; (801d270 <dhcp_discover+0x108>)
 801d1d6:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801d1d8:	9003      	str	r0, [sp, #12]
 801d1da:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d1de:	d80b      	bhi.n	801d1f8 <dhcp_discover+0x90>
  options[options_out_len++] = value;
 801d1e0:	1c63      	adds	r3, r4, #1
 801d1e2:	f809 a004 	strb.w	sl, [r9, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1e6:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801d1e8:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801d1ea:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801d1ee:	d00b      	beq.n	801d208 <dhcp_discover+0xa0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801d1f0:	2c43      	cmp	r4, #67	; 0x43
 801d1f2:	f816 ab01 	ldrb.w	sl, [r6], #1
 801d1f6:	d9f3      	bls.n	801d1e0 <dhcp_discover+0x78>
 801d1f8:	4b1e      	ldr	r3, [pc, #120]	; (801d274 <dhcp_discover+0x10c>)
 801d1fa:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801d1fe:	481e      	ldr	r0, [pc, #120]	; (801d278 <dhcp_discover+0x110>)
 801d200:	f004 faf0 	bl	80217e4 <iprintf>
 801d204:	491a      	ldr	r1, [pc, #104]	; (801d270 <dhcp_discover+0x108>)
 801d206:	e7eb      	b.n	801d1e0 <dhcp_discover+0x78>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801d208:	9803      	ldr	r0, [sp, #12]
 801d20a:	4649      	mov	r1, r9
 801d20c:	463a      	mov	r2, r7
 801d20e:	3004      	adds	r0, #4
 801d210:	b280      	uxth	r0, r0
 801d212:	f7ff fe17 	bl	801ce44 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801d216:	4a19      	ldr	r2, [pc, #100]	; (801d27c <dhcp_discover+0x114>)
 801d218:	4819      	ldr	r0, [pc, #100]	; (801d280 <dhcp_discover+0x118>)
 801d21a:	2343      	movs	r3, #67	; 0x43
 801d21c:	f8cd 8000 	str.w	r8, [sp]
 801d220:	4639      	mov	r1, r7
 801d222:	6800      	ldr	r0, [r0, #0]
 801d224:	9201      	str	r2, [sp, #4]
 801d226:	4a17      	ldr	r2, [pc, #92]	; (801d284 <dhcp_discover+0x11c>)
 801d228:	f7ff fae6 	bl	801c7f8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801d22c:	4638      	mov	r0, r7
 801d22e:	f7fa f9c1 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801d232:	79ab      	ldrb	r3, [r5, #6]
 801d234:	2bff      	cmp	r3, #255	; 0xff
 801d236:	d013      	beq.n	801d260 <dhcp_discover+0xf8>
    dhcp->tries++;
 801d238:	3301      	adds	r3, #1
 801d23a:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d23c:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801d23e:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d240:	d80e      	bhi.n	801d260 <dhcp_discover+0xf8>
 801d242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d246:	4910      	ldr	r1, [pc, #64]	; (801d288 <dhcp_discover+0x120>)
}
 801d248:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801d24a:	4093      	lsls	r3, r2
 801d24c:	b29b      	uxth	r3, r3
 801d24e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801d252:	fba1 2303 	umull	r2, r3, r1, r3
 801d256:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d258:	812b      	strh	r3, [r5, #8]
}
 801d25a:	b007      	add	sp, #28
 801d25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options[options_out_len++] = value;
 801d260:	2378      	movs	r3, #120	; 0x78
}
 801d262:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d264:	812b      	strh	r3, [r5, #8]
}
 801d266:	b007      	add	sp, #28
 801d268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d26c:	08040999 	.word	0x08040999
 801d270:	08040794 	.word	0x08040794
 801d274:	08040620 	.word	0x08040620
 801d278:	08027fec 	.word	0x08027fec
 801d27c:	08040cd4 	.word	0x08040cd4
 801d280:	20022a08 	.word	0x20022a08
 801d284:	08040cd8 	.word	0x08040cd8
 801d288:	10624dd3 	.word	0x10624dd3

0801d28c <dhcp_check>:
{
 801d28c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d28e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801d290:	7963      	ldrb	r3, [r4, #5]
 801d292:	2b08      	cmp	r3, #8
 801d294:	d004      	beq.n	801d2a0 <dhcp_check+0x14>
    dhcp->tries = 0;
 801d296:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801d298:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801d29a:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801d29c:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801d29e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801d2a0:	2200      	movs	r2, #0
 801d2a2:	f104 011c 	add.w	r1, r4, #28
 801d2a6:	f001 fadb 	bl	801e860 <etharp_query>
  if (dhcp->tries < 255) {
 801d2aa:	79a3      	ldrb	r3, [r4, #6]
 801d2ac:	2bff      	cmp	r3, #255	; 0xff
 801d2ae:	d001      	beq.n	801d2b4 <dhcp_check+0x28>
    dhcp->tries++;
 801d2b0:	3301      	adds	r3, #1
 801d2b2:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801d2b4:	2301      	movs	r3, #1
 801d2b6:	8123      	strh	r3, [r4, #8]
}
 801d2b8:	bd10      	pop	{r4, pc}
 801d2ba:	bf00      	nop

0801d2bc <dhcp_bind>:
{
 801d2bc:	b510      	push	{r4, lr}
 801d2be:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d2c0:	2800      	cmp	r0, #0
 801d2c2:	f000 8085 	beq.w	801d3d0 <dhcp_bind+0x114>
  dhcp = netif_dhcp_data(netif);
 801d2c6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d2c8:	2900      	cmp	r1, #0
 801d2ca:	f000 8089 	beq.w	801d3e0 <dhcp_bind+0x124>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d2ce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801d2d0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d2d2:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801d2d4:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801d2d6:	d00d      	beq.n	801d2f4 <dhcp_bind+0x38>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d2d8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801d2da:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801d2de:	d254      	bcs.n	801d38a <dhcp_bind+0xce>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d2e0:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801d2e4:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d2e6:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801d2ea:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801d2ee:	d87f      	bhi.n	801d3f0 <dhcp_bind+0x134>
      dhcp->t0_timeout = 1;
 801d2f0:	2301      	movs	r3, #1
 801d2f2:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d2f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801d2f6:	1c5a      	adds	r2, r3, #1
 801d2f8:	d04d      	beq.n	801d396 <dhcp_bind+0xda>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d2fa:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801d2fc:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801d300:	d23f      	bcs.n	801d382 <dhcp_bind+0xc6>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d302:	4a3c      	ldr	r2, [pc, #240]	; (801d3f4 <dhcp_bind+0x138>)
    if (dhcp->t1_timeout == 0) {
 801d304:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d306:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801d30a:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t1_timeout == 0) {
 801d30e:	d83a      	bhi.n	801d386 <dhcp_bind+0xca>
      dhcp->t1_timeout = 1;
 801d310:	2301      	movs	r3, #1
 801d312:	461a      	mov	r2, r3
 801d314:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d316:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801d318:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d31a:	1c63      	adds	r3, r4, #1
 801d31c:	d03f      	beq.n	801d39e <dhcp_bind+0xe2>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d31e:	341e      	adds	r4, #30
    if (timeout > 0xffff) {
 801d320:	f5b4 1f70 	cmp.w	r4, #3932160	; 0x3c0000
 801d324:	d248      	bcs.n	801d3b8 <dhcp_bind+0xfc>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d326:	4b33      	ldr	r3, [pc, #204]	; (801d3f4 <dhcp_bind+0x138>)
    if (dhcp->t2_timeout == 0) {
 801d328:	2c3b      	cmp	r4, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801d32a:	fba3 c304 	umull	ip, r3, r3, r4
    dhcp->t2_timeout = (u16_t)timeout;
 801d32e:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801d332:	d843      	bhi.n	801d3bc <dhcp_bind+0x100>
      dhcp->t2_timeout = 1;
 801d334:	2401      	movs	r4, #1
 801d336:	4623      	mov	r3, r4
 801d338:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801d33a:	2401      	movs	r4, #1
 801d33c:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801d33e:	4293      	cmp	r3, r2
 801d340:	d802      	bhi.n	801d348 <dhcp_bind+0x8c>
 801d342:	b10c      	cbz	r4, 801d348 <dhcp_bind+0x8c>
    dhcp->t1_timeout = 0;
 801d344:	2300      	movs	r3, #0
 801d346:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801d348:	79cb      	ldrb	r3, [r1, #7]
 801d34a:	2b00      	cmp	r3, #0
 801d34c:	d02c      	beq.n	801d3a8 <dhcp_bind+0xec>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801d34e:	6a0b      	ldr	r3, [r1, #32]
 801d350:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801d352:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801d354:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801d356:	b92b      	cbnz	r3, 801d364 <dhcp_bind+0xa8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801d358:	69cb      	ldr	r3, [r1, #28]
 801d35a:	9a00      	ldr	r2, [sp, #0]
 801d35c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801d35e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d362:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801d364:	794b      	ldrb	r3, [r1, #5]
 801d366:	2b0a      	cmp	r3, #10
 801d368:	d004      	beq.n	801d374 <dhcp_bind+0xb8>
    dhcp->tries = 0;
 801d36a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801d36c:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801d36e:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801d370:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801d372:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801d374:	311c      	adds	r1, #28
 801d376:	ab01      	add	r3, sp, #4
 801d378:	466a      	mov	r2, sp
 801d37a:	f7f9 fed1 	bl	8017120 <netif_set_addr>
}
 801d37e:	b002      	add	sp, #8
 801d380:	bd10      	pop	{r4, pc}
    dhcp->t1_timeout = (u16_t)timeout;
 801d382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d386:	814a      	strh	r2, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801d388:	e7c5      	b.n	801d316 <dhcp_bind+0x5a>
    dhcp->t0_timeout = (u16_t)timeout;
 801d38a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d38e:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801d390:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801d392:	1c5a      	adds	r2, r3, #1
 801d394:	d1b1      	bne.n	801d2fa <dhcp_bind+0x3e>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801d396:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 801d398:	894a      	ldrh	r2, [r1, #10]
 801d39a:	1c63      	adds	r3, r4, #1
 801d39c:	d1bf      	bne.n	801d31e <dhcp_bind+0x62>
 801d39e:	898b      	ldrh	r3, [r1, #12]
 801d3a0:	1e1c      	subs	r4, r3, #0
 801d3a2:	bf18      	it	ne
 801d3a4:	2401      	movne	r4, #1
 801d3a6:	e7ca      	b.n	801d33e <dhcp_bind+0x82>
    if (first_octet <= 127) {
 801d3a8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801d3ac:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	db06      	blt.n	801d3c0 <dhcp_bind+0x104>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801d3b2:	23ff      	movs	r3, #255	; 0xff
 801d3b4:	9300      	str	r3, [sp, #0]
 801d3b6:	e7cc      	b.n	801d352 <dhcp_bind+0x96>
    dhcp->t2_timeout = (u16_t)timeout;
 801d3b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d3bc:	818b      	strh	r3, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801d3be:	e7bc      	b.n	801d33a <dhcp_bind+0x7e>
    } else if (first_octet >= 192) {
 801d3c0:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801d3c2:	bf8c      	ite	hi
 801d3c4:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801d3c8:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801d3cc:	9300      	str	r3, [sp, #0]
 801d3ce:	e7c0      	b.n	801d352 <dhcp_bind+0x96>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801d3d0:	4b09      	ldr	r3, [pc, #36]	; (801d3f8 <dhcp_bind+0x13c>)
 801d3d2:	f240 4215 	movw	r2, #1045	; 0x415
 801d3d6:	4909      	ldr	r1, [pc, #36]	; (801d3fc <dhcp_bind+0x140>)
 801d3d8:	4809      	ldr	r0, [pc, #36]	; (801d400 <dhcp_bind+0x144>)
 801d3da:	f004 fa03 	bl	80217e4 <iprintf>
 801d3de:	e7ce      	b.n	801d37e <dhcp_bind+0xc2>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801d3e0:	4b05      	ldr	r3, [pc, #20]	; (801d3f8 <dhcp_bind+0x13c>)
 801d3e2:	f240 4217 	movw	r2, #1047	; 0x417
 801d3e6:	4907      	ldr	r1, [pc, #28]	; (801d404 <dhcp_bind+0x148>)
 801d3e8:	4805      	ldr	r0, [pc, #20]	; (801d400 <dhcp_bind+0x144>)
 801d3ea:	f004 f9fb 	bl	80217e4 <iprintf>
 801d3ee:	e7c6      	b.n	801d37e <dhcp_bind+0xc2>
    dhcp->t0_timeout = (u16_t)timeout;
 801d3f0:	828a      	strh	r2, [r1, #20]
 801d3f2:	e77f      	b.n	801d2f4 <dhcp_bind+0x38>
 801d3f4:	88888889 	.word	0x88888889
 801d3f8:	08040620 	.word	0x08040620
 801d3fc:	08040804 	.word	0x08040804
 801d400:	08027fec 	.word	0x08027fec
 801d404:	08040820 	.word	0x08040820

0801d408 <dhcp_inc_pcb_refcount>:
{
 801d408:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801d40a:	4c15      	ldr	r4, [pc, #84]	; (801d460 <dhcp_inc_pcb_refcount+0x58>)
 801d40c:	7823      	ldrb	r3, [r4, #0]
 801d40e:	b9fb      	cbnz	r3, 801d450 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801d410:	4d14      	ldr	r5, [pc, #80]	; (801d464 <dhcp_inc_pcb_refcount+0x5c>)
 801d412:	682b      	ldr	r3, [r5, #0]
 801d414:	b12b      	cbz	r3, 801d422 <dhcp_inc_pcb_refcount+0x1a>
 801d416:	4b14      	ldr	r3, [pc, #80]	; (801d468 <dhcp_inc_pcb_refcount+0x60>)
 801d418:	22e5      	movs	r2, #229	; 0xe5
 801d41a:	4914      	ldr	r1, [pc, #80]	; (801d46c <dhcp_inc_pcb_refcount+0x64>)
 801d41c:	4814      	ldr	r0, [pc, #80]	; (801d470 <dhcp_inc_pcb_refcount+0x68>)
 801d41e:	f004 f9e1 	bl	80217e4 <iprintf>
    dhcp_pcb = udp_new();
 801d422:	f7ff fbc9 	bl	801cbb8 <udp_new>
 801d426:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801d428:	b1b0      	cbz	r0, 801d458 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801d42a:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801d42c:	2244      	movs	r2, #68	; 0x44
 801d42e:	4911      	ldr	r1, [pc, #68]	; (801d474 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801d430:	f046 0620 	orr.w	r6, r6, #32
 801d434:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801d436:	f7ff f95f 	bl	801c6f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801d43a:	2243      	movs	r2, #67	; 0x43
 801d43c:	490d      	ldr	r1, [pc, #52]	; (801d474 <dhcp_inc_pcb_refcount+0x6c>)
 801d43e:	6828      	ldr	r0, [r5, #0]
 801d440:	f7ff fb3c 	bl	801cabc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801d444:	6828      	ldr	r0, [r5, #0]
 801d446:	2200      	movs	r2, #0
 801d448:	490b      	ldr	r1, [pc, #44]	; (801d478 <dhcp_inc_pcb_refcount+0x70>)
 801d44a:	f7ff fb7d 	bl	801cb48 <udp_recv>
 801d44e:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801d450:	3301      	adds	r3, #1
  return ERR_OK;
 801d452:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801d454:	7023      	strb	r3, [r4, #0]
}
 801d456:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801d458:	f04f 30ff 	mov.w	r0, #4294967295
}
 801d45c:	bd70      	pop	{r4, r5, r6, pc}
 801d45e:	bf00      	nop
 801d460:	20022a0c 	.word	0x20022a0c
 801d464:	20022a08 	.word	0x20022a08
 801d468:	08040620 	.word	0x08040620
 801d46c:	08040838 	.word	0x08040838
 801d470:	08027fec 	.word	0x08027fec
 801d474:	08040cd4 	.word	0x08040cd4
 801d478:	0801d575 	.word	0x0801d575

0801d47c <dhcp_dec_pcb_refcount>:
{
 801d47c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801d47e:	4d0b      	ldr	r5, [pc, #44]	; (801d4ac <dhcp_dec_pcb_refcount+0x30>)
 801d480:	782c      	ldrb	r4, [r5, #0]
 801d482:	b154      	cbz	r4, 801d49a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801d484:	3c01      	subs	r4, #1
 801d486:	b2e4      	uxtb	r4, r4
 801d488:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801d48a:	b104      	cbz	r4, 801d48e <dhcp_dec_pcb_refcount+0x12>
}
 801d48c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801d48e:	4d08      	ldr	r5, [pc, #32]	; (801d4b0 <dhcp_dec_pcb_refcount+0x34>)
 801d490:	6828      	ldr	r0, [r5, #0]
 801d492:	f7ff fb6b 	bl	801cb6c <udp_remove>
    dhcp_pcb = NULL;
 801d496:	602c      	str	r4, [r5, #0]
}
 801d498:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801d49a:	4b06      	ldr	r3, [pc, #24]	; (801d4b4 <dhcp_dec_pcb_refcount+0x38>)
 801d49c:	22ff      	movs	r2, #255	; 0xff
 801d49e:	4906      	ldr	r1, [pc, #24]	; (801d4b8 <dhcp_dec_pcb_refcount+0x3c>)
 801d4a0:	4806      	ldr	r0, [pc, #24]	; (801d4bc <dhcp_dec_pcb_refcount+0x40>)
 801d4a2:	f004 f99f 	bl	80217e4 <iprintf>
 801d4a6:	782c      	ldrb	r4, [r5, #0]
 801d4a8:	e7ec      	b.n	801d484 <dhcp_dec_pcb_refcount+0x8>
 801d4aa:	bf00      	nop
 801d4ac:	20022a0c 	.word	0x20022a0c
 801d4b0:	20022a08 	.word	0x20022a08
 801d4b4:	08040620 	.word	0x08040620
 801d4b8:	08040860 	.word	0x08040860
 801d4bc:	08027fec 	.word	0x08027fec

0801d4c0 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801d4c0:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801d4c2:	4d2a      	ldr	r5, [pc, #168]	; (801d56c <dhcp_handle_ack.isra.0+0xac>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801d4c4:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801d4c6:	b083      	sub	sp, #12
 801d4c8:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801d4ca:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801d4cc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801d4d0:	b112      	cbz	r2, 801d4d8 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801d4d2:	4b27      	ldr	r3, [pc, #156]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d4d4:	68db      	ldr	r3, [r3, #12]
 801d4d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801d4d8:	792b      	ldrb	r3, [r5, #4]
 801d4da:	2b00      	cmp	r3, #0
 801d4dc:	d042      	beq.n	801d564 <dhcp_handle_ack.isra.0+0xa4>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801d4de:	4b24      	ldr	r3, [pc, #144]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d4e0:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801d4e2:	796a      	ldrb	r2, [r5, #5]
 801d4e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d4e6:	b31a      	cbz	r2, 801d530 <dhcp_handle_ack.isra.0+0x70>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801d4e8:	4b21      	ldr	r3, [pc, #132]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d4ea:	695b      	ldr	r3, [r3, #20]
 801d4ec:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d4ee:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801d4f0:	690a      	ldr	r2, [r1, #16]
 801d4f2:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d4f4:	bb33      	cbnz	r3, 801d544 <dhcp_handle_ack.isra.0+0x84>
    dhcp->subnet_mask_given = 0;
 801d4f6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801d4f8:	79eb      	ldrb	r3, [r5, #7]
 801d4fa:	2b00      	cmp	r3, #0
 801d4fc:	d12c      	bne.n	801d558 <dhcp_handle_ack.isra.0+0x98>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801d4fe:	7a2b      	ldrb	r3, [r5, #8]
 801d500:	b1a3      	cbz	r3, 801d52c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801d502:	4c1b      	ldr	r4, [pc, #108]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d504:	6a20      	ldr	r0, [r4, #32]
 801d506:	f7f8 fa05 	bl	8015914 <lwip_htonl>
 801d50a:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801d50c:	a901      	add	r1, sp, #4
 801d50e:	2000      	movs	r0, #0
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801d510:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801d512:	f7f8 fdb7 	bl	8016084 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801d516:	7a6b      	ldrb	r3, [r5, #9]
 801d518:	b143      	cbz	r3, 801d52c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801d51a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d51c:	f7f8 f9fa 	bl	8015914 <lwip_htonl>
 801d520:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801d522:	a901      	add	r1, sp, #4
 801d524:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801d526:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801d528:	f7f8 fdac 	bl	8016084 <dns_setserver>
}
 801d52c:	b003      	add	sp, #12
 801d52e:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801d530:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d532:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801d536:	08db      	lsrs	r3, r3, #3
 801d538:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d53a:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801d53c:	690a      	ldr	r2, [r1, #16]
 801d53e:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801d540:	2b00      	cmp	r3, #0
 801d542:	d0d8      	beq.n	801d4f6 <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801d544:	4b0a      	ldr	r3, [pc, #40]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d546:	6998      	ldr	r0, [r3, #24]
 801d548:	f7f8 f9e4 	bl	8015914 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801d54c:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801d54e:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801d550:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801d552:	79eb      	ldrb	r3, [r5, #7]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d0d2      	beq.n	801d4fe <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801d558:	4b05      	ldr	r3, [pc, #20]	; (801d570 <dhcp_handle_ack.isra.0+0xb0>)
 801d55a:	69d8      	ldr	r0, [r3, #28]
 801d55c:	f7f8 f9da 	bl	8015914 <lwip_htonl>
 801d560:	6260      	str	r0, [r4, #36]	; 0x24
 801d562:	e7cc      	b.n	801d4fe <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801d564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d566:	085b      	lsrs	r3, r3, #1
 801d568:	e7bb      	b.n	801d4e2 <dhcp_handle_ack.isra.0+0x22>
 801d56a:	bf00      	nop
 801d56c:	200368bc 	.word	0x200368bc
 801d570:	200368c8 	.word	0x200368c8

0801d574 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801d574:	4bb0      	ldr	r3, [pc, #704]	; (801d838 <dhcp_recv+0x2c4>)
{
 801d576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801d57a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801d57e:	b08b      	sub	sp, #44	; 0x2c
 801d580:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801d582:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801d586:	f1b9 0f00 	cmp.w	r9, #0
 801d58a:	d047      	beq.n	801d61c <dhcp_recv+0xa8>
 801d58c:	f899 3004 	ldrb.w	r3, [r9, #4]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d043      	beq.n	801d61c <dhcp_recv+0xa8>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801d594:	8953      	ldrh	r3, [r2, #10]
 801d596:	2b2b      	cmp	r3, #43	; 0x2b
 801d598:	d940      	bls.n	801d61c <dhcp_recv+0xa8>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801d59a:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801d59c:	782b      	ldrb	r3, [r5, #0]
 801d59e:	2b02      	cmp	r3, #2
 801d5a0:	d13c      	bne.n	801d61c <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d5a2:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801d5a6:	b186      	cbz	r6, 801d5ca <dhcp_recv+0x56>
 801d5a8:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 801d5ac:	f105 021c 	add.w	r2, r5, #28
 801d5b0:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d5b2:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d5b6:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d5b8:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d5bc:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801d5be:	4284      	cmp	r4, r0
 801d5c0:	d12c      	bne.n	801d61c <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d5c2:	2b06      	cmp	r3, #6
 801d5c4:	d001      	beq.n	801d5ca <dhcp_recv+0x56>
 801d5c6:	42b3      	cmp	r3, r6
 801d5c8:	d3f3      	bcc.n	801d5b2 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801d5ca:	6868      	ldr	r0, [r5, #4]
 801d5cc:	f7f8 f9a2 	bl	8015914 <lwip_htonl>
 801d5d0:	f8d9 3000 	ldr.w	r3, [r9]
 801d5d4:	4298      	cmp	r0, r3
 801d5d6:	d121      	bne.n	801d61c <dhcp_recv+0xa8>
  dhcp_clear_all_options(dhcp);
 801d5d8:	2200      	movs	r2, #0
 801d5da:	4998      	ldr	r1, [pc, #608]	; (801d83c <dhcp_recv+0x2c8>)
 801d5dc:	604a      	str	r2, [r1, #4]
 801d5de:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801d5e0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801d5e4:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801d5e6:	2b2b      	cmp	r3, #43	; 0x2b
 801d5e8:	d918      	bls.n	801d61c <dhcp_recv+0xa8>
  int parse_sname_as_options = 0;
 801d5ea:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 801d5ec:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801d5f0:	9202      	str	r2, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801d5f2:	22f0      	movs	r2, #240	; 0xf0
 801d5f4:	e9cd a906 	strd	sl, r9, [sp, #24]
 801d5f8:	9203      	str	r2, [sp, #12]
 801d5fa:	465d      	mov	r5, fp
 801d5fc:	e9dd 2a02 	ldrd	r2, sl, [sp, #8]
 801d600:	e000      	b.n	801d604 <dhcp_recv+0x90>
 801d602:	896b      	ldrh	r3, [r5, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801d604:	459a      	cmp	sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 801d606:	ebaa 0103 	sub.w	r1, sl, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d60a:	eba2 0303 	sub.w	r3, r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801d60e:	d30b      	bcc.n	801d628 <dhcp_recv+0xb4>
    q = q->next;
 801d610:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801d612:	fa1f fa81 	uxth.w	sl, r1
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801d616:	b29a      	uxth	r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801d618:	2d00      	cmp	r5, #0
 801d61a:	d1f2      	bne.n	801d602 <dhcp_recv+0x8e>
  pbuf_free(p);
 801d61c:	4658      	mov	r0, fp
 801d61e:	f7f9 ffc9 	bl	80175b4 <pbuf_free>
}
 801d622:	b00b      	add	sp, #44	; 0x2c
 801d624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options = (u8_t *)q->payload;
 801d628:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d62a:	4592      	cmp	sl, r2
 801d62c:	e9cd 2a02 	strd	r2, sl, [sp, #8]
  options = (u8_t *)q->payload;
 801d630:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d632:	f080 81ff 	bcs.w	801da34 <dhcp_recv+0x4c0>
 801d636:	9e03      	ldr	r6, [sp, #12]
 801d638:	9b01      	ldr	r3, [sp, #4]
 801d63a:	5d9b      	ldrb	r3, [r3, r6]
 801d63c:	2bff      	cmp	r3, #255	; 0xff
 801d63e:	f000 81f9 	beq.w	801da34 <dhcp_recv+0x4c0>
    u16_t val_offset = (u16_t)(offset + 2);
 801d642:	1cb7      	adds	r7, r6, #2
 801d644:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 801d646:	42b7      	cmp	r7, r6
 801d648:	d3e8      	bcc.n	801d61c <dhcp_recv+0xa8>
    if ((offset + 1) < q->len) {
 801d64a:	1c71      	adds	r1, r6, #1
 801d64c:	896a      	ldrh	r2, [r5, #10]
 801d64e:	4291      	cmp	r1, r2
 801d650:	f280 8128 	bge.w	801d8a4 <dhcp_recv+0x330>
      len = options[offset + 1];
 801d654:	9801      	ldr	r0, [sp, #4]
 801d656:	4430      	add	r0, r6
 801d658:	7844      	ldrb	r4, [r0, #1]
    switch (op) {
 801d65a:	2b3b      	cmp	r3, #59	; 0x3b
 801d65c:	d83e      	bhi.n	801d6dc <dhcp_recv+0x168>
 801d65e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801d662:	0040      	.short	0x0040
 801d664:	003d0066 	.word	0x003d0066
 801d668:	003d0112 	.word	0x003d0112
 801d66c:	0053003d 	.word	0x0053003d
 801d670:	003d003d 	.word	0x003d003d
 801d674:	003d003d 	.word	0x003d003d
 801d678:	003d003d 	.word	0x003d003d
 801d67c:	003d003d 	.word	0x003d003d
 801d680:	003d003d 	.word	0x003d003d
 801d684:	003d003d 	.word	0x003d003d
 801d688:	003d003d 	.word	0x003d003d
 801d68c:	003d003d 	.word	0x003d003d
 801d690:	003d003d 	.word	0x003d003d
 801d694:	003d003d 	.word	0x003d003d
 801d698:	003d003d 	.word	0x003d003d
 801d69c:	003d003d 	.word	0x003d003d
 801d6a0:	003d003d 	.word	0x003d003d
 801d6a4:	003d003d 	.word	0x003d003d
 801d6a8:	003d003d 	.word	0x003d003d
 801d6ac:	003d003d 	.word	0x003d003d
 801d6b0:	003d003d 	.word	0x003d003d
 801d6b4:	003d003d 	.word	0x003d003d
 801d6b8:	003d003d 	.word	0x003d003d
 801d6bc:	003d003d 	.word	0x003d003d
 801d6c0:	003d003d 	.word	0x003d003d
 801d6c4:	003d003d 	.word	0x003d003d
 801d6c8:	00cc0105 	.word	0x00cc0105
 801d6cc:	00b300c0 	.word	0x00b300c0
 801d6d0:	003d003d 	.word	0x003d003d
 801d6d4:	00f9003d 	.word	0x00f9003d
 801d6d8:	00dd      	.short	0x00dd
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d6da:	2400      	movs	r4, #0
    if (op == DHCP_OPTION_PAD) {
 801d6dc:	2b00      	cmp	r3, #0
 801d6de:	f040 827c 	bne.w	801dbda <dhcp_recv+0x666>
      offset++;
 801d6e2:	b28e      	uxth	r6, r1
    if (offset >= q->len) {
 801d6e4:	4296      	cmp	r6, r2
 801d6e6:	f0c0 81a1 	bcc.w	801da2c <dhcp_recv+0x4b8>
      offset_max = (u16_t)(offset_max - q->len);
 801d6ea:	9b02      	ldr	r3, [sp, #8]
      offset = (u16_t)(offset - q->len);
 801d6ec:	1ab6      	subs	r6, r6, r2
      offset_max = (u16_t)(offset_max - q->len);
 801d6ee:	1a9a      	subs	r2, r3, r2
      offset = (u16_t)(offset - q->len);
 801d6f0:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 801d6f2:	b293      	uxth	r3, r2
      if (offset < offset_max) {
 801d6f4:	429e      	cmp	r6, r3
      offset_max = (u16_t)(offset_max - q->len);
 801d6f6:	9302      	str	r3, [sp, #8]
      if (offset < offset_max) {
 801d6f8:	d290      	bcs.n	801d61c <dhcp_recv+0xa8>
        q = q->next;
 801d6fa:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801d6fc:	2d00      	cmp	r5, #0
 801d6fe:	f000 81cd 	beq.w	801da9c <dhcp_recv+0x528>
        options = (u8_t *)q->payload;
 801d702:	686b      	ldr	r3, [r5, #4]
 801d704:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801d706:	e797      	b.n	801d638 <dhcp_recv+0xc4>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801d708:	07a3      	lsls	r3, r4, #30
 801d70a:	f040 81da 	bne.w	801dac2 <dhcp_recv+0x54e>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801d70e:	2c08      	cmp	r4, #8
 801d710:	4623      	mov	r3, r4
 801d712:	bf28      	it	cs
 801d714:	2308      	movcs	r3, #8
 801d716:	b2db      	uxtb	r3, r3
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d718:	429c      	cmp	r4, r3
 801d71a:	f080 824f 	bcs.w	801dbbc <dhcp_recv+0x648>
 801d71e:	4b48      	ldr	r3, [pc, #288]	; (801d840 <dhcp_recv+0x2cc>)
 801d720:	f240 623c 	movw	r2, #1596	; 0x63c
 801d724:	4947      	ldr	r1, [pc, #284]	; (801d844 <dhcp_recv+0x2d0>)
 801d726:	4848      	ldr	r0, [pc, #288]	; (801d848 <dhcp_recv+0x2d4>)
 801d728:	f004 f85c 	bl	80217e4 <iprintf>
 801d72c:	e776      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d72e:	2c04      	cmp	r4, #4
 801d730:	f040 8174 	bne.w	801da1c <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 801d734:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801d738:	429e      	cmp	r6, r3
 801d73a:	f73f af6f 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d73e:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801d740:	f04f 0906 	mov.w	r9, #6
      offset = (u16_t)(offset + len + 2);
 801d744:	b2b6      	uxth	r6, r6
        u32_t value = 0;
 801d746:	2300      	movs	r3, #0
 801d748:	4a3c      	ldr	r2, [pc, #240]	; (801d83c <dhcp_recv+0x2c8>)
 801d74a:	9605      	str	r6, [sp, #20]
 801d74c:	eb02 0a09 	add.w	sl, r2, r9
 801d750:	9309      	str	r3, [sp, #36]	; 0x24
 801d752:	e02e      	b.n	801d7b2 <dhcp_recv+0x23e>
          copy_len = LWIP_MIN(decode_len, 4);
 801d754:	2c04      	cmp	r4, #4
 801d756:	46a0      	mov	r8, r4
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801d758:	f89a 6000 	ldrb.w	r6, [sl]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d75c:	463b      	mov	r3, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801d75e:	bf28      	it	cs
 801d760:	f04f 0804 	movcs.w	r8, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d764:	a909      	add	r1, sp, #36	; 0x24
 801d766:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 801d768:	fa5f f888 	uxtb.w	r8, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d76c:	4642      	mov	r2, r8
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801d76e:	2e00      	cmp	r6, #0
 801d770:	f040 817a 	bne.w	801da68 <dhcp_recv+0x4f4>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d774:	f7fa f9b6 	bl	8017ae4 <pbuf_copy_partial>
 801d778:	4580      	cmp	r8, r0
            dhcp_got_option(dhcp, decode_idx);
 801d77a:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801d77e:	f47f af4d 	bne.w	801d61c <dhcp_recv+0xa8>
          if (decode_len > 4) {
 801d782:	2c04      	cmp	r4, #4
 801d784:	f240 8173 	bls.w	801da6e <dhcp_recv+0x4fa>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801d788:	07a6      	lsls	r6, r4, #30
 801d78a:	f040 817f 	bne.w	801da8c <dhcp_recv+0x518>
            dhcp_got_option(dhcp, decode_idx);
 801d78e:	f80a 3b01 	strb.w	r3, [sl], #1
            decode_len = (u8_t)(decode_len - 4);
 801d792:	3c04      	subs	r4, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801d794:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d796:	f7f8 f8bd 	bl	8015914 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801d79a:	1d3b      	adds	r3, r7, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801d79c:	4a2b      	ldr	r2, [pc, #172]	; (801d84c <dhcp_recv+0x2d8>)
            decode_len = (u8_t)(decode_len - 4);
 801d79e:	b2e4      	uxtb	r4, r4
            next_val_offset = (u16_t)(val_offset + 4);
 801d7a0:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801d7a2:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
            decode_idx++;
 801d7a6:	f109 0901 	add.w	r9, r9, #1
            if (next_val_offset < val_offset) {
 801d7aa:	429f      	cmp	r7, r3
            goto decode_next;
 801d7ac:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 801d7ae:	f63f af35 	bhi.w	801d61c <dhcp_recv+0xa8>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801d7b2:	f1b9 0f09 	cmp.w	r9, #9
 801d7b6:	d9cd      	bls.n	801d754 <dhcp_recv+0x1e0>
 801d7b8:	4b21      	ldr	r3, [pc, #132]	; (801d840 <dhcp_recv+0x2cc>)
 801d7ba:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801d7be:	4924      	ldr	r1, [pc, #144]	; (801d850 <dhcp_recv+0x2dc>)
 801d7c0:	4821      	ldr	r0, [pc, #132]	; (801d848 <dhcp_recv+0x2d4>)
 801d7c2:	f004 f80f 	bl	80217e4 <iprintf>
 801d7c6:	e7c5      	b.n	801d754 <dhcp_recv+0x1e0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d7c8:	2c04      	cmp	r4, #4
 801d7ca:	f040 80ef 	bne.w	801d9ac <dhcp_recv+0x438>
      if (offset + len + 2 > 0xFFFF) {
 801d7ce:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801d7d2:	429e      	cmp	r6, r3
 801d7d4:	f73f af22 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d7d8:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801d7da:	f04f 0902 	mov.w	r9, #2
      offset = (u16_t)(offset + len + 2);
 801d7de:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d7e0:	e7b1      	b.n	801d746 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d7e2:	2c01      	cmp	r4, #1
 801d7e4:	f040 80f2 	bne.w	801d9cc <dhcp_recv+0x458>
      if (offset + len + 2 > 0xFFFF) {
 801d7e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d7ec:	4299      	cmp	r1, r3
 801d7ee:	f43f af15 	beq.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d7f2:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801d7f4:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801d7f6:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d7f8:	e7a5      	b.n	801d746 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d7fa:	2c01      	cmp	r4, #1
 801d7fc:	f040 80ee 	bne.w	801d9dc <dhcp_recv+0x468>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801d800:	9b03      	ldr	r3, [sp, #12]
 801d802:	2bf0      	cmp	r3, #240	; 0xf0
 801d804:	f040 8165 	bne.w	801dad2 <dhcp_recv+0x55e>
      if (offset + len + 2 > 0xFFFF) {
 801d808:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d80c:	4299      	cmp	r1, r3
 801d80e:	f43f af05 	beq.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d812:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801d814:	f04f 0900 	mov.w	r9, #0
      offset = (u16_t)(offset + len + 2);
 801d818:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d81a:	e794      	b.n	801d746 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d81c:	2c04      	cmp	r4, #4
 801d81e:	f040 80e5 	bne.w	801d9ec <dhcp_recv+0x478>
      if (offset + len + 2 > 0xFFFF) {
 801d822:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801d826:	429e      	cmp	r6, r3
 801d828:	f73f aef8 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d82c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801d82e:	f04f 0905 	mov.w	r9, #5
      offset = (u16_t)(offset + len + 2);
 801d832:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d834:	e787      	b.n	801d746 <dhcp_recv+0x1d2>
 801d836:	bf00      	nop
 801d838:	2002709c 	.word	0x2002709c
 801d83c:	200368bc 	.word	0x200368bc
 801d840:	08040620 	.word	0x08040620
 801d844:	08040890 	.word	0x08040890
 801d848:	08027fec 	.word	0x08027fec
 801d84c:	200368c8 	.word	0x200368c8
 801d850:	080408d8 	.word	0x080408d8
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d854:	2c04      	cmp	r4, #4
 801d856:	f040 80b1 	bne.w	801d9bc <dhcp_recv+0x448>
      if (offset + len + 2 > 0xFFFF) {
 801d85a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801d85e:	429e      	cmp	r6, r3
 801d860:	f73f aedc 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d864:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801d866:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801d868:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d86a:	e76c      	b.n	801d746 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d86c:	2c04      	cmp	r4, #4
 801d86e:	f040 80c5 	bne.w	801d9fc <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801d872:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801d876:	429e      	cmp	r6, r3
 801d878:	f73f aed0 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d87c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801d87e:	f04f 0903 	mov.w	r9, #3
      offset = (u16_t)(offset + len + 2);
 801d882:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d884:	e75f      	b.n	801d746 <dhcp_recv+0x1d2>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801d886:	2c03      	cmp	r4, #3
 801d888:	f240 80c0 	bls.w	801da0c <dhcp_recv+0x498>
      if (offset + len + 2 > 0xFFFF) {
 801d88c:	4426      	add	r6, r4
 801d88e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801d892:	429e      	cmp	r6, r3
 801d894:	f73f aec2 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801d898:	193e      	adds	r6, r7, r4
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801d89a:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 801d89e:	2404      	movs	r4, #4
      offset = (u16_t)(offset + len + 2);
 801d8a0:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801d8a2:	e750      	b.n	801d746 <dhcp_recv+0x1d2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801d8a4:	6828      	ldr	r0, [r5, #0]
 801d8a6:	b110      	cbz	r0, 801d8ae <dhcp_recv+0x33a>
 801d8a8:	6840      	ldr	r0, [r0, #4]
 801d8aa:	7804      	ldrb	r4, [r0, #0]
 801d8ac:	e6d5      	b.n	801d65a <dhcp_recv+0xe6>
    switch (op) {
 801d8ae:	2b3b      	cmp	r3, #59	; 0x3b
 801d8b0:	f63f af13 	bhi.w	801d6da <dhcp_recv+0x166>
 801d8b4:	a001      	add	r0, pc, #4	; (adr r0, 801d8bc <dhcp_recv+0x348>)
 801d8b6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801d8ba:	bf00      	nop
 801d8bc:	0801d6e3 	.word	0x0801d6e3
 801d8c0:	0801da1d 	.word	0x0801da1d
 801d8c4:	0801d6db 	.word	0x0801d6db
 801d8c8:	0801da0d 	.word	0x0801da0d
 801d8cc:	0801d6db 	.word	0x0801d6db
 801d8d0:	0801d6db 	.word	0x0801d6db
 801d8d4:	0801d6db 	.word	0x0801d6db
 801d8d8:	0801d6db 	.word	0x0801d6db
 801d8dc:	0801d6db 	.word	0x0801d6db
 801d8e0:	0801d6db 	.word	0x0801d6db
 801d8e4:	0801d6db 	.word	0x0801d6db
 801d8e8:	0801d6db 	.word	0x0801d6db
 801d8ec:	0801d6db 	.word	0x0801d6db
 801d8f0:	0801d6db 	.word	0x0801d6db
 801d8f4:	0801d6db 	.word	0x0801d6db
 801d8f8:	0801d6db 	.word	0x0801d6db
 801d8fc:	0801d6db 	.word	0x0801d6db
 801d900:	0801d6db 	.word	0x0801d6db
 801d904:	0801d6db 	.word	0x0801d6db
 801d908:	0801d6db 	.word	0x0801d6db
 801d90c:	0801d6db 	.word	0x0801d6db
 801d910:	0801d6db 	.word	0x0801d6db
 801d914:	0801d6db 	.word	0x0801d6db
 801d918:	0801d6db 	.word	0x0801d6db
 801d91c:	0801d6db 	.word	0x0801d6db
 801d920:	0801d6db 	.word	0x0801d6db
 801d924:	0801d6db 	.word	0x0801d6db
 801d928:	0801d6db 	.word	0x0801d6db
 801d92c:	0801d6db 	.word	0x0801d6db
 801d930:	0801d6db 	.word	0x0801d6db
 801d934:	0801d6db 	.word	0x0801d6db
 801d938:	0801d6db 	.word	0x0801d6db
 801d93c:	0801d6db 	.word	0x0801d6db
 801d940:	0801d6db 	.word	0x0801d6db
 801d944:	0801d6db 	.word	0x0801d6db
 801d948:	0801d6db 	.word	0x0801d6db
 801d94c:	0801d6db 	.word	0x0801d6db
 801d950:	0801d6db 	.word	0x0801d6db
 801d954:	0801d6db 	.word	0x0801d6db
 801d958:	0801d6db 	.word	0x0801d6db
 801d95c:	0801d6db 	.word	0x0801d6db
 801d960:	0801d6db 	.word	0x0801d6db
 801d964:	0801d6db 	.word	0x0801d6db
 801d968:	0801d6db 	.word	0x0801d6db
 801d96c:	0801d6db 	.word	0x0801d6db
 801d970:	0801d6db 	.word	0x0801d6db
 801d974:	0801d6db 	.word	0x0801d6db
 801d978:	0801d6db 	.word	0x0801d6db
 801d97c:	0801d6db 	.word	0x0801d6db
 801d980:	0801d6db 	.word	0x0801d6db
 801d984:	0801d6db 	.word	0x0801d6db
 801d988:	0801d9fd 	.word	0x0801d9fd
 801d98c:	0801d9dd 	.word	0x0801d9dd
 801d990:	0801d9cd 	.word	0x0801d9cd
 801d994:	0801d9ad 	.word	0x0801d9ad
 801d998:	0801d6db 	.word	0x0801d6db
 801d99c:	0801d6db 	.word	0x0801d6db
 801d9a0:	0801d6db 	.word	0x0801d6db
 801d9a4:	0801d9bd 	.word	0x0801d9bd
 801d9a8:	0801d9ed 	.word	0x0801d9ed
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9ac:	4b8f      	ldr	r3, [pc, #572]	; (801dbec <dhcp_recv+0x678>)
 801d9ae:	f240 6259 	movw	r2, #1625	; 0x659
 801d9b2:	498f      	ldr	r1, [pc, #572]	; (801dbf0 <dhcp_recv+0x67c>)
 801d9b4:	488f      	ldr	r0, [pc, #572]	; (801dbf4 <dhcp_recv+0x680>)
 801d9b6:	f003 ff15 	bl	80217e4 <iprintf>
 801d9ba:	e62f      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9bc:	4b8b      	ldr	r3, [pc, #556]	; (801dbec <dhcp_recv+0x678>)
 801d9be:	f240 625d 	movw	r2, #1629	; 0x65d
 801d9c2:	498b      	ldr	r1, [pc, #556]	; (801dbf0 <dhcp_recv+0x67c>)
 801d9c4:	488b      	ldr	r0, [pc, #556]	; (801dbf4 <dhcp_recv+0x680>)
 801d9c6:	f003 ff0d 	bl	80217e4 <iprintf>
 801d9ca:	e627      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d9cc:	4b87      	ldr	r3, [pc, #540]	; (801dbec <dhcp_recv+0x678>)
 801d9ce:	f240 6255 	movw	r2, #1621	; 0x655
 801d9d2:	4989      	ldr	r1, [pc, #548]	; (801dbf8 <dhcp_recv+0x684>)
 801d9d4:	4887      	ldr	r0, [pc, #540]	; (801dbf4 <dhcp_recv+0x680>)
 801d9d6:	f003 ff05 	bl	80217e4 <iprintf>
 801d9da:	e61f      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801d9dc:	4b83      	ldr	r3, [pc, #524]	; (801dbec <dhcp_recv+0x678>)
 801d9de:	f240 624f 	movw	r2, #1615	; 0x64f
 801d9e2:	4985      	ldr	r1, [pc, #532]	; (801dbf8 <dhcp_recv+0x684>)
 801d9e4:	4883      	ldr	r0, [pc, #524]	; (801dbf4 <dhcp_recv+0x680>)
 801d9e6:	f003 fefd 	bl	80217e4 <iprintf>
 801d9ea:	e617      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9ec:	4b7f      	ldr	r3, [pc, #508]	; (801dbec <dhcp_recv+0x678>)
 801d9ee:	f240 6261 	movw	r2, #1633	; 0x661
 801d9f2:	497f      	ldr	r1, [pc, #508]	; (801dbf0 <dhcp_recv+0x67c>)
 801d9f4:	487f      	ldr	r0, [pc, #508]	; (801dbf4 <dhcp_recv+0x680>)
 801d9f6:	f003 fef5 	bl	80217e4 <iprintf>
 801d9fa:	e60f      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801d9fc:	4b7b      	ldr	r3, [pc, #492]	; (801dbec <dhcp_recv+0x678>)
 801d9fe:	f240 6241 	movw	r2, #1601	; 0x641
 801da02:	497b      	ldr	r1, [pc, #492]	; (801dbf0 <dhcp_recv+0x67c>)
 801da04:	487b      	ldr	r0, [pc, #492]	; (801dbf4 <dhcp_recv+0x680>)
 801da06:	f003 feed 	bl	80217e4 <iprintf>
 801da0a:	e607      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801da0c:	4b77      	ldr	r3, [pc, #476]	; (801dbec <dhcp_recv+0x678>)
 801da0e:	f240 6233 	movw	r2, #1587	; 0x633
 801da12:	497a      	ldr	r1, [pc, #488]	; (801dbfc <dhcp_recv+0x688>)
 801da14:	4877      	ldr	r0, [pc, #476]	; (801dbf4 <dhcp_recv+0x680>)
 801da16:	f003 fee5 	bl	80217e4 <iprintf>
 801da1a:	e5ff      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801da1c:	4b73      	ldr	r3, [pc, #460]	; (801dbec <dhcp_recv+0x678>)
 801da1e:	f240 622e 	movw	r2, #1582	; 0x62e
 801da22:	4973      	ldr	r1, [pc, #460]	; (801dbf0 <dhcp_recv+0x67c>)
 801da24:	4873      	ldr	r0, [pc, #460]	; (801dbf4 <dhcp_recv+0x680>)
 801da26:	f003 fedd 	bl	80217e4 <iprintf>
 801da2a:	e5f7      	b.n	801d61c <dhcp_recv+0xa8>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801da2c:	9b02      	ldr	r3, [sp, #8]
 801da2e:	429e      	cmp	r6, r3
 801da30:	f4ff ae02 	bcc.w	801d638 <dhcp_recv+0xc4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801da34:	4b72      	ldr	r3, [pc, #456]	; (801dc00 <dhcp_recv+0x68c>)
 801da36:	781b      	ldrb	r3, [r3, #0]
 801da38:	b153      	cbz	r3, 801da50 <dhcp_recv+0x4dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801da3a:	4b72      	ldr	r3, [pc, #456]	; (801dc04 <dhcp_recv+0x690>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801da3c:	2200      	movs	r2, #0
 801da3e:	4970      	ldr	r1, [pc, #448]	; (801dc00 <dhcp_recv+0x68c>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801da40:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801da42:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801da44:	2b01      	cmp	r3, #1
 801da46:	d033      	beq.n	801dab0 <dhcp_recv+0x53c>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801da48:	2b02      	cmp	r3, #2
 801da4a:	d004      	beq.n	801da56 <dhcp_recv+0x4e2>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801da4c:	2b03      	cmp	r3, #3
 801da4e:	d02d      	beq.n	801daac <dhcp_recv+0x538>
  } else if (parse_sname_as_options) {
 801da50:	9b04      	ldr	r3, [sp, #16]
 801da52:	2b00      	cmp	r3, #0
 801da54:	d045      	beq.n	801dae2 <dhcp_recv+0x56e>
    parse_sname_as_options = 0;
 801da56:	2300      	movs	r3, #0
    options_idx = DHCP_SNAME_OFS;
 801da58:	206c      	movs	r0, #108	; 0x6c
    parse_sname_as_options = 0;
 801da5a:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801da5c:	232c      	movs	r3, #44	; 0x2c
 801da5e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801da62:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801da66:	e5c8      	b.n	801d5fa <dhcp_recv+0x86>
 801da68:	9e05      	ldr	r6, [sp, #20]
 801da6a:	896a      	ldrh	r2, [r5, #10]
 801da6c:	e63a      	b.n	801d6e4 <dhcp_recv+0x170>
 801da6e:	9e05      	ldr	r6, [sp, #20]
          } else if (decode_len == 4) {
 801da70:	d023      	beq.n	801daba <dhcp_recv+0x546>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801da72:	2c01      	cmp	r4, #1
 801da74:	f040 809a 	bne.w	801dbac <dhcp_recv+0x638>
            value = ((u8_t *)&value)[0];
 801da78:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801da7c:	4a61      	ldr	r2, [pc, #388]	; (801dc04 <dhcp_recv+0x690>)
          dhcp_got_option(dhcp, decode_idx);
 801da7e:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801da80:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801da84:	4a5e      	ldr	r2, [pc, #376]	; (801dc00 <dhcp_recv+0x68c>)
 801da86:	f802 3009 	strb.w	r3, [r2, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801da8a:	e7ee      	b.n	801da6a <dhcp_recv+0x4f6>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801da8c:	4b57      	ldr	r3, [pc, #348]	; (801dbec <dhcp_recv+0x678>)
 801da8e:	f240 6281 	movw	r2, #1665	; 0x681
 801da92:	495d      	ldr	r1, [pc, #372]	; (801dc08 <dhcp_recv+0x694>)
 801da94:	4857      	ldr	r0, [pc, #348]	; (801dbf4 <dhcp_recv+0x680>)
 801da96:	f003 fea5 	bl	80217e4 <iprintf>
 801da9a:	e5bf      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801da9c:	4b53      	ldr	r3, [pc, #332]	; (801dbec <dhcp_recv+0x678>)
 801da9e:	f240 629d 	movw	r2, #1693	; 0x69d
 801daa2:	495a      	ldr	r1, [pc, #360]	; (801dc0c <dhcp_recv+0x698>)
 801daa4:	4853      	ldr	r0, [pc, #332]	; (801dbf4 <dhcp_recv+0x680>)
 801daa6:	f003 fe9d 	bl	80217e4 <iprintf>
 801daaa:	e5b7      	b.n	801d61c <dhcp_recv+0xa8>
      parse_sname_as_options = 1;
 801daac:	2301      	movs	r3, #1
 801daae:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801dab0:	27ec      	movs	r7, #236	; 0xec
 801dab2:	236c      	movs	r3, #108	; 0x6c
 801dab4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801dab8:	e7d3      	b.n	801da62 <dhcp_recv+0x4ee>
            value = lwip_ntohl(value);
 801daba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dabc:	f7f7 ff2a 	bl	8015914 <lwip_htonl>
 801dac0:	e7dc      	b.n	801da7c <dhcp_recv+0x508>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801dac2:	4b4a      	ldr	r3, [pc, #296]	; (801dbec <dhcp_recv+0x678>)
 801dac4:	f240 6239 	movw	r2, #1593	; 0x639
 801dac8:	4951      	ldr	r1, [pc, #324]	; (801dc10 <dhcp_recv+0x69c>)
 801daca:	484a      	ldr	r0, [pc, #296]	; (801dbf4 <dhcp_recv+0x680>)
 801dacc:	f003 fe8a 	bl	80217e4 <iprintf>
 801dad0:	e5a4      	b.n	801d61c <dhcp_recv+0xa8>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801dad2:	4b46      	ldr	r3, [pc, #280]	; (801dbec <dhcp_recv+0x678>)
 801dad4:	f240 6251 	movw	r2, #1617	; 0x651
 801dad8:	494e      	ldr	r1, [pc, #312]	; (801dc14 <dhcp_recv+0x6a0>)
 801dada:	4846      	ldr	r0, [pc, #280]	; (801dbf4 <dhcp_recv+0x680>)
 801dadc:	f003 fe82 	bl	80217e4 <iprintf>
 801dae0:	e59c      	b.n	801d61c <dhcp_recv+0xa8>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801dae2:	4b47      	ldr	r3, [pc, #284]	; (801dc00 <dhcp_recv+0x68c>)
 801dae4:	785b      	ldrb	r3, [r3, #1]
 801dae6:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801daea:	2b00      	cmp	r3, #0
 801daec:	f43f ad96 	beq.w	801d61c <dhcp_recv+0xa8>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801daf0:	4a44      	ldr	r2, [pc, #272]	; (801dc04 <dhcp_recv+0x690>)
  msg_in = (struct dhcp_msg *)p->payload;
 801daf2:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801daf6:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801daf8:	2b05      	cmp	r3, #5
 801dafa:	d01d      	beq.n	801db38 <dhcp_recv+0x5c4>
  else if ((msg_type == DHCP_NAK) &&
 801dafc:	2b06      	cmp	r3, #6
 801dafe:	d02c      	beq.n	801db5a <dhcp_recv+0x5e6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801db00:	2b02      	cmp	r3, #2
 801db02:	f47f ad8b 	bne.w	801d61c <dhcp_recv+0xa8>
 801db06:	f899 3005 	ldrb.w	r3, [r9, #5]
 801db0a:	2b06      	cmp	r3, #6
 801db0c:	f47f ad86 	bne.w	801d61c <dhcp_recv+0xa8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801db10:	4b3b      	ldr	r3, [pc, #236]	; (801dc00 <dhcp_recv+0x68c>)
 801db12:	789b      	ldrb	r3, [r3, #2]
 801db14:	2b00      	cmp	r3, #0
 801db16:	f43f ad81 	beq.w	801d61c <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801db1a:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801db1e:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801db20:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801db22:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801db24:	f7f7 fef6 	bl	8015914 <lwip_htonl>
 801db28:	4603      	mov	r3, r0
    dhcp_select(netif);
 801db2a:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801db2c:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801db2e:	6923      	ldr	r3, [r4, #16]
 801db30:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801db32:	f7ff fa47 	bl	801cfc4 <dhcp_select>
 801db36:	e571      	b.n	801d61c <dhcp_recv+0xa8>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801db38:	f899 3005 	ldrb.w	r3, [r9, #5]
 801db3c:	2b01      	cmp	r3, #1
 801db3e:	d028      	beq.n	801db92 <dhcp_recv+0x61e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801db40:	3b03      	subs	r3, #3
 801db42:	2b02      	cmp	r3, #2
 801db44:	f63f ad6a 	bhi.w	801d61c <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801db48:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801db4c:	4621      	mov	r1, r4
 801db4e:	f7ff fcb7 	bl	801d4c0 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 801db52:	4650      	mov	r0, sl
 801db54:	f7ff fbb2 	bl	801d2bc <dhcp_bind>
 801db58:	e560      	b.n	801d61c <dhcp_recv+0xa8>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801db5a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801db5e:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801db60:	2a02      	cmp	r2, #2
 801db62:	d902      	bls.n	801db6a <dhcp_recv+0x5f6>
 801db64:	2b01      	cmp	r3, #1
 801db66:	f47f ad59 	bne.w	801d61c <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801db6a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801db6e:	795a      	ldrb	r2, [r3, #5]
 801db70:	2a0c      	cmp	r2, #12
 801db72:	d004      	beq.n	801db7e <dhcp_recv+0x60a>
    dhcp->tries = 0;
 801db74:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801db76:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801db78:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801db7a:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801db7c:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801db7e:	4b26      	ldr	r3, [pc, #152]	; (801dc18 <dhcp_recv+0x6a4>)
 801db80:	4650      	mov	r0, sl
 801db82:	461a      	mov	r2, r3
 801db84:	4619      	mov	r1, r3
 801db86:	f7f9 facb 	bl	8017120 <netif_set_addr>
  dhcp_discover(netif);
 801db8a:	4650      	mov	r0, sl
 801db8c:	f7ff faec 	bl	801d168 <dhcp_discover>
}
 801db90:	e544      	b.n	801d61c <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801db92:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801db96:	4621      	mov	r1, r4
 801db98:	f7ff fc92 	bl	801d4c0 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801db9c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801dba0:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801dba2:	071a      	lsls	r2, r3, #28
 801dba4:	d5d6      	bpl.n	801db54 <dhcp_recv+0x5e0>
        dhcp_check(netif);
 801dba6:	f7ff fb71 	bl	801d28c <dhcp_check>
 801dbaa:	e537      	b.n	801d61c <dhcp_recv+0xa8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801dbac:	4b0f      	ldr	r3, [pc, #60]	; (801dbec <dhcp_recv+0x678>)
 801dbae:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801dbb2:	491a      	ldr	r1, [pc, #104]	; (801dc1c <dhcp_recv+0x6a8>)
 801dbb4:	480f      	ldr	r0, [pc, #60]	; (801dbf4 <dhcp_recv+0x680>)
 801dbb6:	f003 fe15 	bl	80217e4 <iprintf>
 801dbba:	e52f      	b.n	801d61c <dhcp_recv+0xa8>
      if (offset + len + 2 > 0xFFFF) {
 801dbbc:	4426      	add	r6, r4
 801dbbe:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801dbc2:	428e      	cmp	r6, r1
 801dbc4:	f73f ad2a 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801dbc8:	193e      	adds	r6, r7, r4
 801dbca:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801dbcc:	2c00      	cmp	r4, #0
 801dbce:	f43f ad89 	beq.w	801d6e4 <dhcp_recv+0x170>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801dbd2:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801dbd4:	f04f 0908 	mov.w	r9, #8
 801dbd8:	e5b5      	b.n	801d746 <dhcp_recv+0x1d2>
      if (offset + len + 2 > 0xFFFF) {
 801dbda:	4426      	add	r6, r4
 801dbdc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801dbe0:	429e      	cmp	r6, r3
 801dbe2:	f73f ad1b 	bgt.w	801d61c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801dbe6:	443c      	add	r4, r7
 801dbe8:	b2a6      	uxth	r6, r4
      if (decode_len > 0) {
 801dbea:	e57b      	b.n	801d6e4 <dhcp_recv+0x170>
 801dbec:	08040620 	.word	0x08040620
 801dbf0:	08040884 	.word	0x08040884
 801dbf4:	08027fec 	.word	0x08027fec
 801dbf8:	080408b4 	.word	0x080408b4
 801dbfc:	08040890 	.word	0x08040890
 801dc00:	200368bc 	.word	0x200368bc
 801dc04:	200368c8 	.word	0x200368c8
 801dc08:	080408ec 	.word	0x080408ec
 801dc0c:	08040918 	.word	0x08040918
 801dc10:	080408a4 	.word	0x080408a4
 801dc14:	080408c0 	.word	0x080408c0
 801dc18:	08040cd4 	.word	0x08040cd4
 801dc1c:	08040904 	.word	0x08040904

0801dc20 <dhcp_network_changed>:
{
 801dc20:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dc22:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 801dc24:	b135      	cbz	r5, 801dc34 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 801dc26:	796b      	ldrb	r3, [r5, #5]
 801dc28:	4604      	mov	r4, r0
 801dc2a:	2b05      	cmp	r3, #5
 801dc2c:	d803      	bhi.n	801dc36 <dhcp_network_changed+0x16>
 801dc2e:	2b02      	cmp	r3, #2
 801dc30:	d813      	bhi.n	801dc5a <dhcp_network_changed+0x3a>
 801dc32:	b95b      	cbnz	r3, 801dc4c <dhcp_network_changed+0x2c>
}
 801dc34:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 801dc36:	2b0a      	cmp	r3, #10
 801dc38:	d00f      	beq.n	801dc5a <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801dc3a:	2b0c      	cmp	r3, #12
 801dc3c:	d906      	bls.n	801dc4c <dhcp_network_changed+0x2c>
 801dc3e:	4b0a      	ldr	r3, [pc, #40]	; (801dc68 <dhcp_network_changed+0x48>)
 801dc40:	f240 326d 	movw	r2, #877	; 0x36d
 801dc44:	4909      	ldr	r1, [pc, #36]	; (801dc6c <dhcp_network_changed+0x4c>)
 801dc46:	480a      	ldr	r0, [pc, #40]	; (801dc70 <dhcp_network_changed+0x50>)
 801dc48:	f003 fdcc 	bl	80217e4 <iprintf>
      dhcp->tries = 0;
 801dc4c:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801dc4e:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801dc50:	71ab      	strb	r3, [r5, #6]
}
 801dc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801dc56:	f7ff ba87 	b.w	801d168 <dhcp_discover>
      dhcp->tries = 0;
 801dc5a:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 801dc5c:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801dc5e:	71ab      	strb	r3, [r5, #6]
}
 801dc60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801dc64:	f7ff b90a 	b.w	801ce7c <dhcp_reboot>
 801dc68:	08040620 	.word	0x08040620
 801dc6c:	08040960 	.word	0x08040960
 801dc70:	08027fec 	.word	0x08027fec

0801dc74 <dhcp_arp_reply>:
{
 801dc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 801dc76:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	d047      	beq.n	801dd0c <dhcp_arp_reply+0x98>
  dhcp = netif_dhcp_data(netif);
 801dc7c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801dc7e:	4604      	mov	r4, r0
 801dc80:	b115      	cbz	r5, 801dc88 <dhcp_arp_reply+0x14>
 801dc82:	796b      	ldrb	r3, [r5, #5]
 801dc84:	2b08      	cmp	r3, #8
 801dc86:	d001      	beq.n	801dc8c <dhcp_arp_reply+0x18>
}
 801dc88:	b007      	add	sp, #28
 801dc8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801dc8c:	680a      	ldr	r2, [r1, #0]
 801dc8e:	69eb      	ldr	r3, [r5, #28]
 801dc90:	429a      	cmp	r2, r3
 801dc92:	d1f9      	bne.n	801dc88 <dhcp_arp_reply+0x14>
    dhcp->tries = 0;
 801dc94:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801dc96:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801dc98:	f10d 0316 	add.w	r3, sp, #22
 801dc9c:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801dc9e:	7169      	strb	r1, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801dca0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 801dca2:	71ae      	strb	r6, [r5, #6]
    dhcp->request_timeout = 0;
 801dca4:	812e      	strh	r6, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801dca6:	f7ff f817 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801dcaa:	4606      	mov	r6, r0
 801dcac:	b330      	cbz	r0, 801dcfc <dhcp_arp_reply+0x88>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dcae:	6841      	ldr	r1, [r0, #4]
 801dcb0:	2304      	movs	r3, #4
 801dcb2:	2232      	movs	r2, #50	; 0x32
 801dcb4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801dcb8:	31f0      	adds	r1, #240	; 0xf0
 801dcba:	9103      	str	r1, [sp, #12]
 801dcbc:	f7fe ffca 	bl	801cc54 <dhcp_option>
 801dcc0:	4607      	mov	r7, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dcc2:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801dcc4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dcc8:	f7f7 fe24 	bl	8015914 <lwip_htonl>
 801dccc:	9903      	ldr	r1, [sp, #12]
 801dcce:	4602      	mov	r2, r0
 801dcd0:	4638      	mov	r0, r7
 801dcd2:	f7fe ffdd 	bl	801cc90 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dcd6:	9903      	ldr	r1, [sp, #12]
 801dcd8:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801dcda:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dcde:	f7ff f8b1 	bl	801ce44 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801dce2:	4a0e      	ldr	r2, [pc, #56]	; (801dd1c <dhcp_arp_reply+0xa8>)
 801dce4:	480e      	ldr	r0, [pc, #56]	; (801dd20 <dhcp_arp_reply+0xac>)
 801dce6:	2343      	movs	r3, #67	; 0x43
 801dce8:	9400      	str	r4, [sp, #0]
 801dcea:	4631      	mov	r1, r6
 801dcec:	6800      	ldr	r0, [r0, #0]
 801dcee:	9201      	str	r2, [sp, #4]
 801dcf0:	4a0c      	ldr	r2, [pc, #48]	; (801dd24 <dhcp_arp_reply+0xb0>)
 801dcf2:	f7fe fd81 	bl	801c7f8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801dcf6:	4630      	mov	r0, r6
 801dcf8:	f7f9 fc5c 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801dcfc:	79ab      	ldrb	r3, [r5, #6]
 801dcfe:	2bff      	cmp	r3, #255	; 0xff
 801dd00:	d001      	beq.n	801dd06 <dhcp_arp_reply+0x92>
    dhcp->tries++;
 801dd02:	3301      	adds	r3, #1
 801dd04:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801dd06:	2314      	movs	r3, #20
 801dd08:	812b      	strh	r3, [r5, #8]
  return result;
 801dd0a:	e7bd      	b.n	801dc88 <dhcp_arp_reply+0x14>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801dd0c:	4b06      	ldr	r3, [pc, #24]	; (801dd28 <dhcp_arp_reply+0xb4>)
 801dd0e:	f240 328b 	movw	r2, #907	; 0x38b
 801dd12:	4906      	ldr	r1, [pc, #24]	; (801dd2c <dhcp_arp_reply+0xb8>)
 801dd14:	4806      	ldr	r0, [pc, #24]	; (801dd30 <dhcp_arp_reply+0xbc>)
 801dd16:	f003 fd65 	bl	80217e4 <iprintf>
 801dd1a:	e7b5      	b.n	801dc88 <dhcp_arp_reply+0x14>
 801dd1c:	08040cd4 	.word	0x08040cd4
 801dd20:	20022a08 	.word	0x20022a08
 801dd24:	08040cd8 	.word	0x08040cd8
 801dd28:	08040620 	.word	0x08040620
 801dd2c:	08027fdc 	.word	0x08027fdc
 801dd30:	08027fec 	.word	0x08027fec

0801dd34 <dhcp_renew>:
{
 801dd34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801dd38:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801dd3a:	b087      	sub	sp, #28
 801dd3c:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801dd3e:	797b      	ldrb	r3, [r7, #5]
 801dd40:	2b05      	cmp	r3, #5
 801dd42:	d004      	beq.n	801dd4e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801dd44:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801dd46:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801dd48:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801dd4a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801dd4c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801dd4e:	f10d 0316 	add.w	r3, sp, #22
 801dd52:	2203      	movs	r2, #3
 801dd54:	4639      	mov	r1, r7
 801dd56:	4650      	mov	r0, sl
 801dd58:	f7fe ffbe 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801dd5c:	4680      	mov	r8, r0
 801dd5e:	2800      	cmp	r0, #0
 801dd60:	d06a      	beq.n	801de38 <dhcp_renew+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dd62:	6846      	ldr	r6, [r0, #4]
 801dd64:	2302      	movs	r3, #2
 801dd66:	2239      	movs	r2, #57	; 0x39
 801dd68:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801dd6c:	36f0      	adds	r6, #240	; 0xf0
 801dd6e:	4d34      	ldr	r5, [pc, #208]	; (801de40 <dhcp_renew+0x10c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dd70:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dd74:	4631      	mov	r1, r6
 801dd76:	f105 0b03 	add.w	fp, r5, #3
 801dd7a:	f7fe ff6b 	bl	801cc54 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dd7e:	4631      	mov	r1, r6
 801dd80:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801dd84:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dd88:	f7fe ff48 	bl	801cc1c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dd8c:	4631      	mov	r1, r6
 801dd8e:	2304      	movs	r3, #4
 801dd90:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801dd92:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dd96:	f7fe ff5d 	bl	801cc54 <dhcp_option>
 801dd9a:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dd9c:	4929      	ldr	r1, [pc, #164]	; (801de44 <dhcp_renew+0x110>)
 801dd9e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801dda0:	9003      	str	r0, [sp, #12]
 801dda2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dda6:	d80b      	bhi.n	801ddc0 <dhcp_renew+0x8c>
  options[options_out_len++] = value;
 801dda8:	1c63      	adds	r3, r4, #1
 801ddaa:	f806 9004 	strb.w	r9, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ddae:	455d      	cmp	r5, fp
  options[options_out_len++] = value;
 801ddb0:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801ddb2:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801ddb6:	d00b      	beq.n	801ddd0 <dhcp_renew+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ddb8:	2c43      	cmp	r4, #67	; 0x43
 801ddba:	f815 9b01 	ldrb.w	r9, [r5], #1
 801ddbe:	d9f3      	bls.n	801dda8 <dhcp_renew+0x74>
 801ddc0:	4b21      	ldr	r3, [pc, #132]	; (801de48 <dhcp_renew+0x114>)
 801ddc2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801ddc6:	4821      	ldr	r0, [pc, #132]	; (801de4c <dhcp_renew+0x118>)
 801ddc8:	f003 fd0c 	bl	80217e4 <iprintf>
 801ddcc:	491d      	ldr	r1, [pc, #116]	; (801de44 <dhcp_renew+0x110>)
 801ddce:	e7eb      	b.n	801dda8 <dhcp_renew+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ddd0:	9803      	ldr	r0, [sp, #12]
 801ddd2:	4631      	mov	r1, r6
 801ddd4:	4642      	mov	r2, r8
 801ddd6:	3004      	adds	r0, #4
 801ddd8:	b280      	uxth	r0, r0
 801ddda:	f7ff f833 	bl	801ce44 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ddde:	4a1c      	ldr	r2, [pc, #112]	; (801de50 <dhcp_renew+0x11c>)
 801dde0:	f8cd a000 	str.w	sl, [sp]
 801dde4:	2343      	movs	r3, #67	; 0x43
 801dde6:	6810      	ldr	r0, [r2, #0]
 801dde8:	4641      	mov	r1, r8
 801ddea:	f107 0218 	add.w	r2, r7, #24
 801ddee:	f7fe fdc5 	bl	801c97c <udp_sendto_if>
 801ddf2:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801ddf4:	4640      	mov	r0, r8
 801ddf6:	f7f9 fbdd 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801ddfa:	79bb      	ldrb	r3, [r7, #6]
 801ddfc:	2bff      	cmp	r3, #255	; 0xff
 801ddfe:	d015      	beq.n	801de2c <dhcp_renew+0xf8>
    dhcp->tries++;
 801de00:	3301      	adds	r3, #1
 801de02:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801de04:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801de06:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801de08:	d810      	bhi.n	801de2c <dhcp_renew+0xf8>
 801de0a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801de0e:	4a11      	ldr	r2, [pc, #68]	; (801de54 <dhcp_renew+0x120>)
}
 801de10:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801de12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801de16:	011b      	lsls	r3, r3, #4
 801de18:	b29b      	uxth	r3, r3
 801de1a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801de1e:	fba2 2303 	umull	r2, r3, r2, r3
 801de22:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801de24:	813b      	strh	r3, [r7, #8]
}
 801de26:	b007      	add	sp, #28
 801de28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801de2c:	2328      	movs	r3, #40	; 0x28
}
 801de2e:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801de30:	813b      	strh	r3, [r7, #8]
}
 801de32:	b007      	add	sp, #28
 801de34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801de38:	f04f 34ff 	mov.w	r4, #4294967295
 801de3c:	e7dd      	b.n	801ddfa <dhcp_renew+0xc6>
 801de3e:	bf00      	nop
 801de40:	08040999 	.word	0x08040999
 801de44:	08040794 	.word	0x08040794
 801de48:	08040620 	.word	0x08040620
 801de4c:	08027fec 	.word	0x08027fec
 801de50:	20022a08 	.word	0x20022a08
 801de54:	10624dd3 	.word	0x10624dd3

0801de58 <dhcp_release_and_stop>:
{
 801de58:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801de5a:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801de5c:	b087      	sub	sp, #28
  if (dhcp == NULL) {
 801de5e:	2c00      	cmp	r4, #0
 801de60:	d051      	beq.n	801df06 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 801de62:	7962      	ldrb	r2, [r4, #5]
 801de64:	2a00      	cmp	r2, #0
 801de66:	d04e      	beq.n	801df06 <dhcp_release_and_stop+0xae>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801de68:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801de6a:	2300      	movs	r3, #0
 801de6c:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801de6e:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801de70:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801de72:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801de74:	9005      	str	r0, [sp, #20]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801de76:	81e3      	strh	r3, [r4, #14]
 801de78:	6123      	str	r3, [r4, #16]
 801de7a:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801de7c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801de80:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801de84:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801de88:	d901      	bls.n	801de8e <dhcp_release_and_stop+0x36>
 801de8a:	2a0a      	cmp	r2, #10
 801de8c:	d12d      	bne.n	801deea <dhcp_release_and_stop+0x92>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801de8e:	f10d 0312 	add.w	r3, sp, #18
 801de92:	2207      	movs	r2, #7
 801de94:	4621      	mov	r1, r4
 801de96:	4628      	mov	r0, r5
 801de98:	f7fe ff1e 	bl	801ccd8 <dhcp_create_msg>
    if (p_out != NULL) {
 801de9c:	4606      	mov	r6, r0
 801de9e:	b320      	cbz	r0, 801deea <dhcp_release_and_stop+0x92>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801dea0:	6871      	ldr	r1, [r6, #4]
 801dea2:	2304      	movs	r3, #4
 801dea4:	2236      	movs	r2, #54	; 0x36
 801dea6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 801deaa:	31f0      	adds	r1, #240	; 0xf0
 801deac:	9103      	str	r1, [sp, #12]
 801deae:	f7fe fed1 	bl	801cc54 <dhcp_option>
 801deb2:	4607      	mov	r7, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801deb4:	9805      	ldr	r0, [sp, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801deb6:	f8ad 7012 	strh.w	r7, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801deba:	f7f7 fd2b 	bl	8015914 <lwip_htonl>
 801debe:	9903      	ldr	r1, [sp, #12]
 801dec0:	4602      	mov	r2, r0
 801dec2:	4638      	mov	r0, r7
 801dec4:	f7fe fee4 	bl	801cc90 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801dec8:	9903      	ldr	r1, [sp, #12]
 801deca:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801decc:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801ded0:	f7fe ffb8 	bl	801ce44 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801ded4:	4910      	ldr	r1, [pc, #64]	; (801df18 <dhcp_release_and_stop+0xc0>)
 801ded6:	9500      	str	r5, [sp, #0]
 801ded8:	2343      	movs	r3, #67	; 0x43
 801deda:	6808      	ldr	r0, [r1, #0]
 801dedc:	aa05      	add	r2, sp, #20
 801dede:	4631      	mov	r1, r6
 801dee0:	f7fe fd4c 	bl	801c97c <udp_sendto_if>
      pbuf_free(p_out);
 801dee4:	4630      	mov	r0, r6
 801dee6:	f7f9 fb65 	bl	80175b4 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801deea:	4b0c      	ldr	r3, [pc, #48]	; (801df1c <dhcp_release_and_stop+0xc4>)
 801deec:	4628      	mov	r0, r5
 801deee:	461a      	mov	r2, r3
 801def0:	4619      	mov	r1, r3
 801def2:	f7f9 f915 	bl	8017120 <netif_set_addr>
  if (new_state != dhcp->state) {
 801def6:	7963      	ldrb	r3, [r4, #5]
 801def8:	b11b      	cbz	r3, 801df02 <dhcp_release_and_stop+0xaa>
    dhcp->state = new_state;
 801defa:	2300      	movs	r3, #0
 801defc:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801defe:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801df00:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801df02:	7923      	ldrb	r3, [r4, #4]
 801df04:	b90b      	cbnz	r3, 801df0a <dhcp_release_and_stop+0xb2>
}
 801df06:	b007      	add	sp, #28
 801df08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801df0a:	f7ff fab7 	bl	801d47c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801df0e:	2300      	movs	r3, #0
 801df10:	7123      	strb	r3, [r4, #4]
}
 801df12:	b007      	add	sp, #28
 801df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801df16:	bf00      	nop
 801df18:	20022a08 	.word	0x20022a08
 801df1c:	08040cd4 	.word	0x08040cd4

0801df20 <dhcp_start>:
{
 801df20:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801df22:	2800      	cmp	r0, #0
 801df24:	d046      	beq.n	801dfb4 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801df26:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801df2a:	4604      	mov	r4, r0
 801df2c:	07da      	lsls	r2, r3, #31
 801df2e:	d537      	bpl.n	801dfa0 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801df30:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801df32:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801df34:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801df38:	d32f      	bcc.n	801df9a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801df3a:	b33d      	cbz	r5, 801df8c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801df3c:	792b      	ldrb	r3, [r5, #4]
 801df3e:	bb13      	cbnz	r3, 801df86 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801df40:	2234      	movs	r2, #52	; 0x34
 801df42:	2100      	movs	r1, #0
 801df44:	4628      	mov	r0, r5
 801df46:	f002 fcdb 	bl	8020900 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801df4a:	f7ff fa5d 	bl	801d408 <dhcp_inc_pcb_refcount>
 801df4e:	4606      	mov	r6, r0
 801df50:	bb18      	cbnz	r0, 801df9a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801df52:	2301      	movs	r3, #1
 801df54:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 801df56:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801df5a:	075b      	lsls	r3, r3, #29
 801df5c:	d408      	bmi.n	801df70 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801df5e:	796b      	ldrb	r3, [r5, #5]
 801df60:	2b02      	cmp	r3, #2
 801df62:	d003      	beq.n	801df6c <dhcp_start+0x4c>
    dhcp->state = new_state;
 801df64:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801df66:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 801df68:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 801df6a:	716b      	strb	r3, [r5, #5]
}
 801df6c:	4630      	mov	r0, r6
 801df6e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801df70:	4620      	mov	r0, r4
 801df72:	f7ff f8f9 	bl	801d168 <dhcp_discover>
  if (result != ERR_OK) {
 801df76:	2800      	cmp	r0, #0
 801df78:	d0f8      	beq.n	801df6c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801df7a:	4620      	mov	r0, r4
    return ERR_MEM;
 801df7c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801df80:	f7ff ff6a 	bl	801de58 <dhcp_release_and_stop>
    return ERR_MEM;
 801df84:	e7f2      	b.n	801df6c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801df86:	f7ff fa79 	bl	801d47c <dhcp_dec_pcb_refcount>
 801df8a:	e7d9      	b.n	801df40 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801df8c:	2034      	movs	r0, #52	; 0x34
 801df8e:	f7f8 fe2f 	bl	8016bf0 <mem_malloc>
    if (dhcp == NULL) {
 801df92:	4605      	mov	r5, r0
 801df94:	b108      	cbz	r0, 801df9a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801df96:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801df98:	e7d2      	b.n	801df40 <dhcp_start+0x20>
    return ERR_MEM;
 801df9a:	f04f 36ff 	mov.w	r6, #4294967295
 801df9e:	e7e5      	b.n	801df6c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801dfa0:	4b09      	ldr	r3, [pc, #36]	; (801dfc8 <dhcp_start+0xa8>)
 801dfa2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801dfa6:	4909      	ldr	r1, [pc, #36]	; (801dfcc <dhcp_start+0xac>)
 801dfa8:	f06f 060f 	mvn.w	r6, #15
 801dfac:	4808      	ldr	r0, [pc, #32]	; (801dfd0 <dhcp_start+0xb0>)
 801dfae:	f003 fc19 	bl	80217e4 <iprintf>
 801dfb2:	e7db      	b.n	801df6c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801dfb4:	4b04      	ldr	r3, [pc, #16]	; (801dfc8 <dhcp_start+0xa8>)
 801dfb6:	f240 22e7 	movw	r2, #743	; 0x2e7
 801dfba:	4906      	ldr	r1, [pc, #24]	; (801dfd4 <dhcp_start+0xb4>)
 801dfbc:	f06f 060f 	mvn.w	r6, #15
 801dfc0:	4803      	ldr	r0, [pc, #12]	; (801dfd0 <dhcp_start+0xb0>)
 801dfc2:	f003 fc0f 	bl	80217e4 <iprintf>
 801dfc6:	e7d1      	b.n	801df6c <dhcp_start+0x4c>
 801dfc8:	08040620 	.word	0x08040620
 801dfcc:	08040974 	.word	0x08040974
 801dfd0:	08027fec 	.word	0x08027fec
 801dfd4:	08027fdc 	.word	0x08027fdc

0801dfd8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801dfd8:	4b5f      	ldr	r3, [pc, #380]	; (801e158 <dhcp_coarse_tmr+0x180>)
{
 801dfda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801dfde:	681d      	ldr	r5, [r3, #0]
{
 801dfe0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 801dfe2:	b1e5      	cbz	r5, 801e01e <dhcp_coarse_tmr+0x46>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801dfe4:	f8df b190 	ldr.w	fp, [pc, #400]	; 801e178 <dhcp_coarse_tmr+0x1a0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801dfe8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801dfea:	b1ac      	cbz	r4, 801e018 <dhcp_coarse_tmr+0x40>
 801dfec:	7963      	ldrb	r3, [r4, #5]
 801dfee:	b19b      	cbz	r3, 801e018 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801dff0:	8aa1      	ldrh	r1, [r4, #20]
 801dff2:	b129      	cbz	r1, 801e000 <dhcp_coarse_tmr+0x28>
 801dff4:	8a62      	ldrh	r2, [r4, #18]
 801dff6:	3201      	adds	r2, #1
 801dff8:	b292      	uxth	r2, r2
 801dffa:	4291      	cmp	r1, r2
 801dffc:	8262      	strh	r2, [r4, #18]
 801dffe:	d011      	beq.n	801e024 <dhcp_coarse_tmr+0x4c>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801e000:	8a22      	ldrh	r2, [r4, #16]
 801e002:	b11a      	cbz	r2, 801e00c <dhcp_coarse_tmr+0x34>
 801e004:	1e51      	subs	r1, r2, #1
 801e006:	2a01      	cmp	r2, #1
 801e008:	8221      	strh	r1, [r4, #16]
 801e00a:	d012      	beq.n	801e032 <dhcp_coarse_tmr+0x5a>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801e00c:	89e2      	ldrh	r2, [r4, #14]
 801e00e:	b11a      	cbz	r2, 801e018 <dhcp_coarse_tmr+0x40>
 801e010:	1e51      	subs	r1, r2, #1
 801e012:	2a01      	cmp	r2, #1
 801e014:	81e1      	strh	r1, [r4, #14]
 801e016:	d05c      	beq.n	801e0d2 <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801e018:	682d      	ldr	r5, [r5, #0]
 801e01a:	2d00      	cmp	r5, #0
 801e01c:	d1e4      	bne.n	801dfe8 <dhcp_coarse_tmr+0x10>
}
 801e01e:	b007      	add	sp, #28
 801e020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801e024:	4628      	mov	r0, r5
 801e026:	f7ff ff17 	bl	801de58 <dhcp_release_and_stop>
        dhcp_start(netif);
 801e02a:	4628      	mov	r0, r5
 801e02c:	f7ff ff78 	bl	801df20 <dhcp_start>
 801e030:	e7f2      	b.n	801e018 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801e032:	1e5a      	subs	r2, r3, #1
 801e034:	b2d1      	uxtb	r1, r2
 801e036:	2909      	cmp	r1, #9
 801e038:	d8ee      	bhi.n	801e018 <dhcp_coarse_tmr+0x40>
 801e03a:	f240 2219 	movw	r2, #537	; 0x219
 801e03e:	40ca      	lsrs	r2, r1
 801e040:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801e042:	f012 0201 	ands.w	r2, r2, #1
 801e046:	d1e7      	bne.n	801e018 <dhcp_coarse_tmr+0x40>
  if (new_state != dhcp->state) {
 801e048:	2b04      	cmp	r3, #4
 801e04a:	d003      	beq.n	801e054 <dhcp_coarse_tmr+0x7c>
    dhcp->state = new_state;
 801e04c:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801e04e:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801e050:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801e052:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e054:	f10d 0316 	add.w	r3, sp, #22
 801e058:	2203      	movs	r2, #3
 801e05a:	4621      	mov	r1, r4
 801e05c:	4628      	mov	r0, r5
 801e05e:	f7fe fe3b 	bl	801ccd8 <dhcp_create_msg>
  if (p_out != NULL) {
 801e062:	4681      	mov	r9, r0
 801e064:	2800      	cmp	r0, #0
 801e066:	d057      	beq.n	801e118 <dhcp_coarse_tmr+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e068:	6841      	ldr	r1, [r0, #4]
 801e06a:	2302      	movs	r3, #2
 801e06c:	2239      	movs	r2, #57	; 0x39
 801e06e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801e072:	f101 08f0 	add.w	r8, r1, #240	; 0xf0
 801e076:	4f39      	ldr	r7, [pc, #228]	; (801e15c <dhcp_coarse_tmr+0x184>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e078:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e07c:	4641      	mov	r1, r8
 801e07e:	f7fe fde9 	bl	801cc54 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e082:	4641      	mov	r1, r8
 801e084:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e086:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e08a:	f7fe fdc7 	bl	801cc1c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e08e:	4641      	mov	r1, r8
 801e090:	2304      	movs	r3, #4
 801e092:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e094:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e098:	f7fe fddc 	bl	801cc54 <dhcp_option>
 801e09c:	4606      	mov	r6, r0
 801e09e:	9003      	str	r0, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e0a0:	2e43      	cmp	r6, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e0a2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e0a6:	d80c      	bhi.n	801e0c2 <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801e0a8:	1c73      	adds	r3, r6, #1
 801e0aa:	f808 a006 	strb.w	sl, [r8, r6]
 801e0ae:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e0b0:	4b2b      	ldr	r3, [pc, #172]	; (801e160 <dhcp_coarse_tmr+0x188>)
 801e0b2:	429f      	cmp	r7, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e0b4:	f8ad 6016 	strh.w	r6, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e0b8:	d01c      	beq.n	801e0f4 <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e0ba:	2e43      	cmp	r6, #67	; 0x43
 801e0bc:	f817 ab01 	ldrb.w	sl, [r7], #1
 801e0c0:	d9f2      	bls.n	801e0a8 <dhcp_coarse_tmr+0xd0>
 801e0c2:	4b28      	ldr	r3, [pc, #160]	; (801e164 <dhcp_coarse_tmr+0x18c>)
 801e0c4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801e0c8:	4659      	mov	r1, fp
 801e0ca:	4827      	ldr	r0, [pc, #156]	; (801e168 <dhcp_coarse_tmr+0x190>)
 801e0cc:	f003 fb8a 	bl	80217e4 <iprintf>
 801e0d0:	e7ea      	b.n	801e0a8 <dhcp_coarse_tmr+0xd0>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801e0d2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801e0d6:	2a01      	cmp	r2, #1
 801e0d8:	d001      	beq.n	801e0de <dhcp_coarse_tmr+0x106>
 801e0da:	2b0a      	cmp	r3, #10
 801e0dc:	d19c      	bne.n	801e018 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 801e0de:	4628      	mov	r0, r5
 801e0e0:	f7ff fe28 	bl	801dd34 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801e0e4:	89a3      	ldrh	r3, [r4, #12]
 801e0e6:	8a62      	ldrh	r2, [r4, #18]
 801e0e8:	1a9b      	subs	r3, r3, r2
 801e0ea:	2b01      	cmp	r3, #1
 801e0ec:	dd94      	ble.n	801e018 <dhcp_coarse_tmr+0x40>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801e0ee:	105b      	asrs	r3, r3, #1
 801e0f0:	81e3      	strh	r3, [r4, #14]
 801e0f2:	e791      	b.n	801e018 <dhcp_coarse_tmr+0x40>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e0f4:	9803      	ldr	r0, [sp, #12]
 801e0f6:	4641      	mov	r1, r8
 801e0f8:	464a      	mov	r2, r9
 801e0fa:	3004      	adds	r0, #4
 801e0fc:	b280      	uxth	r0, r0
 801e0fe:	f7fe fea1 	bl	801ce44 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e102:	4a1a      	ldr	r2, [pc, #104]	; (801e16c <dhcp_coarse_tmr+0x194>)
 801e104:	9500      	str	r5, [sp, #0]
 801e106:	2343      	movs	r3, #67	; 0x43
 801e108:	6810      	ldr	r0, [r2, #0]
 801e10a:	4649      	mov	r1, r9
 801e10c:	4a18      	ldr	r2, [pc, #96]	; (801e170 <dhcp_coarse_tmr+0x198>)
 801e10e:	f7fe fc35 	bl	801c97c <udp_sendto_if>
    pbuf_free(p_out);
 801e112:	4648      	mov	r0, r9
 801e114:	f7f9 fa4e 	bl	80175b4 <pbuf_free>
  if (dhcp->tries < 255) {
 801e118:	79a3      	ldrb	r3, [r4, #6]
 801e11a:	2bff      	cmp	r3, #255	; 0xff
 801e11c:	d01a      	beq.n	801e154 <dhcp_coarse_tmr+0x17c>
    dhcp->tries++;
 801e11e:	3301      	adds	r3, #1
 801e120:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e122:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801e124:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e126:	d815      	bhi.n	801e154 <dhcp_coarse_tmr+0x17c>
 801e128:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801e12c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e130:	4a10      	ldr	r2, [pc, #64]	; (801e174 <dhcp_coarse_tmr+0x19c>)
 801e132:	00db      	lsls	r3, r3, #3
 801e134:	b29b      	uxth	r3, r3
 801e136:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e13a:	fba2 2303 	umull	r2, r3, r2, r3
 801e13e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801e140:	8aa2      	ldrh	r2, [r4, #20]
 801e142:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e144:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801e146:	1a53      	subs	r3, r2, r1
 801e148:	2b01      	cmp	r3, #1
 801e14a:	f77f af65 	ble.w	801e018 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801e14e:	105b      	asrs	r3, r3, #1
 801e150:	8223      	strh	r3, [r4, #16]
 801e152:	e761      	b.n	801e018 <dhcp_coarse_tmr+0x40>
  options[options_out_len++] = value;
 801e154:	2314      	movs	r3, #20
 801e156:	e7f3      	b.n	801e140 <dhcp_coarse_tmr+0x168>
 801e158:	20036788 	.word	0x20036788
 801e15c:	08040999 	.word	0x08040999
 801e160:	0804099c 	.word	0x0804099c
 801e164:	08040620 	.word	0x08040620
 801e168:	08027fec 	.word	0x08027fec
 801e16c:	20022a08 	.word	0x20022a08
 801e170:	08040cd8 	.word	0x08040cd8
 801e174:	10624dd3 	.word	0x10624dd3
 801e178:	08040794 	.word	0x08040794

0801e17c <dhcp_fine_tmr>:
{
 801e17c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801e17e:	4b21      	ldr	r3, [pc, #132]	; (801e204 <dhcp_fine_tmr+0x88>)
 801e180:	681c      	ldr	r4, [r3, #0]
 801e182:	b1fc      	cbz	r4, 801e1c4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801e184:	2500      	movs	r5, #0
 801e186:	e003      	b.n	801e190 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801e188:	3a01      	subs	r2, #1
 801e18a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801e18c:	6824      	ldr	r4, [r4, #0]
 801e18e:	b1cc      	cbz	r4, 801e1c4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801e190:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801e192:	2b00      	cmp	r3, #0
 801e194:	d0fa      	beq.n	801e18c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801e196:	891a      	ldrh	r2, [r3, #8]
 801e198:	2a01      	cmp	r2, #1
 801e19a:	d8f5      	bhi.n	801e188 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801e19c:	d1f6      	bne.n	801e18c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801e19e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801e1a0:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801e1a2:	2a0c      	cmp	r2, #12
 801e1a4:	d016      	beq.n	801e1d4 <dhcp_fine_tmr+0x58>
 801e1a6:	2a06      	cmp	r2, #6
 801e1a8:	d014      	beq.n	801e1d4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801e1aa:	2a01      	cmp	r2, #1
 801e1ac:	d016      	beq.n	801e1dc <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801e1ae:	2a08      	cmp	r2, #8
 801e1b0:	d009      	beq.n	801e1c6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801e1b2:	2a03      	cmp	r2, #3
 801e1b4:	d1ea      	bne.n	801e18c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801e1b6:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801e1b8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801e1ba:	2b01      	cmp	r3, #1
 801e1bc:	d91e      	bls.n	801e1fc <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801e1be:	f7fe ffd3 	bl	801d168 <dhcp_discover>
 801e1c2:	e7e3      	b.n	801e18c <dhcp_fine_tmr+0x10>
}
 801e1c4:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 801e1c6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801e1c8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801e1ca:	2b01      	cmp	r3, #1
 801e1cc:	d913      	bls.n	801e1f6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801e1ce:	f7ff f875 	bl	801d2bc <dhcp_bind>
 801e1d2:	e7db      	b.n	801e18c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801e1d4:	4620      	mov	r0, r4
 801e1d6:	f7fe ffc7 	bl	801d168 <dhcp_discover>
 801e1da:	e7d7      	b.n	801e18c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 801e1dc:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801e1de:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801e1e0:	2b05      	cmp	r3, #5
 801e1e2:	d802      	bhi.n	801e1ea <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 801e1e4:	f7fe feee 	bl	801cfc4 <dhcp_select>
 801e1e8:	e7d0      	b.n	801e18c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801e1ea:	f7ff fe35 	bl	801de58 <dhcp_release_and_stop>
      dhcp_start(netif);
 801e1ee:	4620      	mov	r0, r4
 801e1f0:	f7ff fe96 	bl	801df20 <dhcp_start>
 801e1f4:	e7ca      	b.n	801e18c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801e1f6:	f7ff f849 	bl	801d28c <dhcp_check>
 801e1fa:	e7c7      	b.n	801e18c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801e1fc:	f7fe fe3e 	bl	801ce7c <dhcp_reboot>
 801e200:	e7c4      	b.n	801e18c <dhcp_fine_tmr+0x10>
 801e202:	bf00      	nop
 801e204:	20036788 	.word	0x20036788

0801e208 <free_etharp_q>:
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801e208:	b320      	cbz	r0, 801e254 <free_etharp_q+0x4c>
{
 801e20a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e20e:	4604      	mov	r4, r0
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801e210:	f8df 8054 	ldr.w	r8, [pc, #84]	; 801e268 <free_etharp_q+0x60>
 801e214:	4f12      	ldr	r7, [pc, #72]	; (801e260 <free_etharp_q+0x58>)
 801e216:	4e13      	ldr	r6, [pc, #76]	; (801e264 <free_etharp_q+0x5c>)
 801e218:	e006      	b.n	801e228 <free_etharp_q+0x20>
    pbuf_free(r->p);
 801e21a:	f7f9 f9cb 	bl	80175b4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801e21e:	4629      	mov	r1, r5
 801e220:	200b      	movs	r0, #11
 801e222:	f7f8 fef7 	bl	8017014 <memp_free>
  while (q) {
 801e226:	b19c      	cbz	r4, 801e250 <free_etharp_q+0x48>
    q = q->next;
 801e228:	4625      	mov	r5, r4
 801e22a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801e22c:	6868      	ldr	r0, [r5, #4]
 801e22e:	2800      	cmp	r0, #0
 801e230:	d1f3      	bne.n	801e21a <free_etharp_q+0x12>
 801e232:	4639      	mov	r1, r7
 801e234:	4643      	mov	r3, r8
 801e236:	229a      	movs	r2, #154	; 0x9a
 801e238:	4630      	mov	r0, r6
 801e23a:	f003 fad3 	bl	80217e4 <iprintf>
 801e23e:	6868      	ldr	r0, [r5, #4]
    pbuf_free(r->p);
 801e240:	f7f9 f9b8 	bl	80175b4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801e244:	4629      	mov	r1, r5
 801e246:	200b      	movs	r0, #11
 801e248:	f7f8 fee4 	bl	8017014 <memp_free>
  while (q) {
 801e24c:	2c00      	cmp	r4, #0
 801e24e:	d1eb      	bne.n	801e228 <free_etharp_q+0x20>
  }
}
 801e250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801e254:	4b04      	ldr	r3, [pc, #16]	; (801e268 <free_etharp_q+0x60>)
 801e256:	2296      	movs	r2, #150	; 0x96
 801e258:	4904      	ldr	r1, [pc, #16]	; (801e26c <free_etharp_q+0x64>)
 801e25a:	4802      	ldr	r0, [pc, #8]	; (801e264 <free_etharp_q+0x5c>)
 801e25c:	f003 bac2 	b.w	80217e4 <iprintf>
 801e260:	080409e0 	.word	0x080409e0
 801e264:	08027fec 	.word	0x08027fec
 801e268:	0804099c 	.word	0x0804099c
 801e26c:	080409d4 	.word	0x080409d4

0801e270 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e274:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e276:	f04f 0920 	mov.w	r9, #32
{
 801e27a:	b085      	sub	sp, #20
 801e27c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 801e3d8 <etharp_find_entry+0x168>
 801e280:	4605      	mov	r5, r0
 801e282:	4617      	mov	r7, r2
 801e284:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e286:	469e      	mov	lr, r3
 801e288:	4641      	mov	r1, r8
 801e28a:	469b      	mov	fp, r3
  s16_t empty = ARP_TABLE_SIZE;
 801e28c:	464c      	mov	r4, r9
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e28e:	46cc      	mov	ip, r9
 801e290:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801e294:	e004      	b.n	801e2a0 <etharp_find_entry+0x30>
 801e296:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e298:	3301      	adds	r3, #1
 801e29a:	3118      	adds	r1, #24
 801e29c:	2b20      	cmp	r3, #32
 801e29e:	d016      	beq.n	801e2ce <etharp_find_entry+0x5e>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e2a0:	2c20      	cmp	r4, #32
 801e2a2:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 801e2a4:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e2a6:	d13b      	bne.n	801e320 <etharp_find_entry+0xb0>
 801e2a8:	2800      	cmp	r0, #0
 801e2aa:	d0f4      	beq.n	801e296 <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e2ac:	b125      	cbz	r5, 801e2b8 <etharp_find_entry+0x48>
 801e2ae:	682e      	ldr	r6, [r5, #0]
 801e2b0:	46b2      	mov	sl, r6
 801e2b2:	684e      	ldr	r6, [r1, #4]
 801e2b4:	45b2      	cmp	sl, r6
 801e2b6:	d03e      	beq.n	801e336 <etharp_find_entry+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e2b8:	2801      	cmp	r0, #1
 801e2ba:	d034      	beq.n	801e326 <etharp_find_entry+0xb6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e2bc:	8a48      	ldrh	r0, [r1, #18]
 801e2be:	4570      	cmp	r0, lr
 801e2c0:	d3ea      	bcc.n	801e298 <etharp_find_entry+0x28>
 801e2c2:	3301      	adds	r3, #1
 801e2c4:	4686      	mov	lr, r0
 801e2c6:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e2c8:	3118      	adds	r1, #24
 801e2ca:	2b20      	cmp	r3, #32
 801e2cc:	d1e8      	bne.n	801e2a0 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e2ce:	9b03      	ldr	r3, [sp, #12]
 801e2d0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801e2d4:	2b01      	cmp	r3, #1
 801e2d6:	d173      	bne.n	801e3c0 <etharp_find_entry+0x150>
 801e2d8:	2c20      	cmp	r4, #32
 801e2da:	d03c      	beq.n	801e356 <etharp_find_entry+0xe6>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e2dc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801e2e0:	46a1      	mov	r9, r4
 801e2e2:	0066      	lsls	r6, r4, #1
 801e2e4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801e2e8:	7d1b      	ldrb	r3, [r3, #20]
 801e2ea:	b133      	cbz	r3, 801e2fa <etharp_find_entry+0x8a>
 801e2ec:	4b36      	ldr	r3, [pc, #216]	; (801e3c8 <etharp_find_entry+0x158>)
 801e2ee:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e2f2:	4936      	ldr	r1, [pc, #216]	; (801e3cc <etharp_find_entry+0x15c>)
 801e2f4:	4836      	ldr	r0, [pc, #216]	; (801e3d0 <etharp_find_entry+0x160>)
 801e2f6:	f003 fa75 	bl	80217e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e2fa:	b12d      	cbz	r5, 801e308 <etharp_find_entry+0x98>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e2fc:	eb06 0309 	add.w	r3, r6, r9
 801e300:	682a      	ldr	r2, [r5, #0]
 801e302:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801e306:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801e308:	444e      	add	r6, r9
 801e30a:	2300      	movs	r3, #0
 801e30c:	eb08 08c6 	add.w	r8, r8, r6, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e310:	f8c8 7008 	str.w	r7, [r8, #8]
  arp_table[i].ctime = 0;
 801e314:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801e318:	4620      	mov	r0, r4
 801e31a:	b005      	add	sp, #20
 801e31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 801e320:	2800      	cmp	r0, #0
 801e322:	d0b9      	beq.n	801e298 <etharp_find_entry+0x28>
 801e324:	e7c2      	b.n	801e2ac <etharp_find_entry+0x3c>
        if (arp_table[i].q != NULL) {
 801e326:	6808      	ldr	r0, [r1, #0]
 801e328:	b170      	cbz	r0, 801e348 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 801e32a:	8a48      	ldrh	r0, [r1, #18]
 801e32c:	4558      	cmp	r0, fp
 801e32e:	d3b3      	bcc.n	801e298 <etharp_find_entry+0x28>
 801e330:	4683      	mov	fp, r0
 801e332:	4691      	mov	r9, r2
 801e334:	e7b0      	b.n	801e298 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e336:	b117      	cbz	r7, 801e33e <etharp_find_entry+0xce>
 801e338:	688e      	ldr	r6, [r1, #8]
 801e33a:	42be      	cmp	r6, r7
 801e33c:	d1bc      	bne.n	801e2b8 <etharp_find_entry+0x48>
 801e33e:	4614      	mov	r4, r2
}
 801e340:	4620      	mov	r0, r4
 801e342:	b005      	add	sp, #20
 801e344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801e348:	8a48      	ldrh	r0, [r1, #18]
 801e34a:	9e02      	ldr	r6, [sp, #8]
 801e34c:	42b0      	cmp	r0, r6
 801e34e:	d3a3      	bcc.n	801e298 <etharp_find_entry+0x28>
 801e350:	e9cd 2001 	strd	r2, r0, [sp, #4]
 801e354:	e7a0      	b.n	801e298 <etharp_find_entry+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801e356:	f1bc 0f20 	cmp.w	ip, #32
 801e35a:	d024      	beq.n	801e3a6 <etharp_find_entry+0x136>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e35c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 801e360:	46e1      	mov	r9, ip
 801e362:	ea4f 064c 	mov.w	r6, ip, lsl #1
 801e366:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801e36a:	b33b      	cbz	r3, 801e3bc <etharp_find_entry+0x14c>
 801e36c:	4b16      	ldr	r3, [pc, #88]	; (801e3c8 <etharp_find_entry+0x158>)
 801e36e:	f240 126d 	movw	r2, #365	; 0x16d
 801e372:	4918      	ldr	r1, [pc, #96]	; (801e3d4 <etharp_find_entry+0x164>)
 801e374:	4664      	mov	r4, ip
 801e376:	4816      	ldr	r0, [pc, #88]	; (801e3d0 <etharp_find_entry+0x160>)
 801e378:	f003 fa34 	bl	80217e4 <iprintf>
  if (arp_table[i].q != NULL) {
 801e37c:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 801e380:	ea4f 0649 	mov.w	r6, r9, lsl #1
 801e384:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801e388:	f858 000a 	ldr.w	r0, [r8, sl]
 801e38c:	b120      	cbz	r0, 801e398 <etharp_find_entry+0x128>
    free_etharp_q(arp_table[i].q);
 801e38e:	f7ff ff3b 	bl	801e208 <free_etharp_q>
    arp_table[i].q = NULL;
 801e392:	2300      	movs	r3, #0
 801e394:	f848 300a 	str.w	r3, [r8, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e398:	eb06 0309 	add.w	r3, r6, r9
 801e39c:	2200      	movs	r2, #0
 801e39e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801e3a2:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e3a4:	e7a9      	b.n	801e2fa <etharp_find_entry+0x8a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e3a6:	f1ba 0f20 	cmp.w	sl, #32
 801e3aa:	d104      	bne.n	801e3b6 <etharp_find_entry+0x146>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e3ac:	f1b9 0f20 	cmp.w	r9, #32
 801e3b0:	d006      	beq.n	801e3c0 <etharp_find_entry+0x150>
 801e3b2:	464c      	mov	r4, r9
 801e3b4:	e7e2      	b.n	801e37c <etharp_find_entry+0x10c>
 801e3b6:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e3b8:	46d1      	mov	r9, sl
 801e3ba:	e7df      	b.n	801e37c <etharp_find_entry+0x10c>
 801e3bc:	4664      	mov	r4, ip
 801e3be:	e7eb      	b.n	801e398 <etharp_find_entry+0x128>
    return (s16_t)ERR_MEM;
 801e3c0:	f04f 34ff 	mov.w	r4, #4294967295
 801e3c4:	e7a8      	b.n	801e318 <etharp_find_entry+0xa8>
 801e3c6:	bf00      	nop
 801e3c8:	0804099c 	.word	0x0804099c
 801e3cc:	08040a08 	.word	0x08040a08
 801e3d0:	08027fec 	.word	0x08027fec
 801e3d4:	080409f0 	.word	0x080409f0
 801e3d8:	20022a14 	.word	0x20022a14

0801e3dc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e3e0:	b082      	sub	sp, #8
 801e3e2:	4688      	mov	r8, r1
 801e3e4:	4691      	mov	r9, r2
 801e3e6:	461f      	mov	r7, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e3e8:	4606      	mov	r6, r0
{
 801e3ea:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801e3ee:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e3f2:	2800      	cmp	r0, #0
 801e3f4:	d05a      	beq.n	801e4ac <etharp_raw+0xd0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801e3f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e3fa:	211c      	movs	r1, #28
 801e3fc:	200e      	movs	r0, #14
 801e3fe:	f7f9 f947 	bl	8017690 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801e402:	4605      	mov	r5, r0
 801e404:	2800      	cmp	r0, #0
 801e406:	d059      	beq.n	801e4bc <etharp_raw+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e408:	8943      	ldrh	r3, [r0, #10]
 801e40a:	2b1b      	cmp	r3, #27
 801e40c:	d946      	bls.n	801e49c <etharp_raw+0xc0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801e40e:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 801e410:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 801e412:	f7f7 fa7b 	bl	801590c <lwip_htons>
 801e416:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801e418:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801e41c:	2b06      	cmp	r3, #6
 801e41e:	d006      	beq.n	801e42e <etharp_raw+0x52>
 801e420:	4b2a      	ldr	r3, [pc, #168]	; (801e4cc <etharp_raw+0xf0>)
 801e422:	f240 4269 	movw	r2, #1129	; 0x469
 801e426:	492a      	ldr	r1, [pc, #168]	; (801e4d0 <etharp_raw+0xf4>)
 801e428:	482a      	ldr	r0, [pc, #168]	; (801e4d4 <etharp_raw+0xf8>)
 801e42a:	f003 f9db 	bl	80217e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e42e:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e430:	4642      	mov	r2, r8
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e432:	f04f 0e08 	mov.w	lr, #8
  hdr->protolen = sizeof(ip4_addr_t);
 801e436:	f04f 0c04 	mov.w	ip, #4
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e43a:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e43c:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e43e:	88b9      	ldrh	r1, [r7, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e440:	2600      	movs	r6, #0
 801e442:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e446:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801e448:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e44a:	f8da 1000 	ldr.w	r1, [sl]
 801e44e:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801e452:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801e454:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 801e458:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801e45a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e45c:	683f      	ldr	r7, [r7, #0]
 801e45e:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e462:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801e464:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e466:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801e46a:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e46c:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801e470:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e472:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801e474:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e478:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801e47a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801e47c:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e480:	9700      	str	r7, [sp, #0]
 801e482:	f001 fd3d 	bl	801ff00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801e486:	4a14      	ldr	r2, [pc, #80]	; (801e4d8 <etharp_raw+0xfc>)
  /* free ARP query packet */
  pbuf_free(p);
 801e488:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801e48a:	8b13      	ldrh	r3, [r2, #24]
 801e48c:	4443      	add	r3, r8
 801e48e:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801e490:	f7f9 f890 	bl	80175b4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801e494:	4630      	mov	r0, r6
}
 801e496:	b002      	add	sp, #8
 801e498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801e49c:	4b0b      	ldr	r3, [pc, #44]	; (801e4cc <etharp_raw+0xf0>)
 801e49e:	f240 4262 	movw	r2, #1122	; 0x462
 801e4a2:	490e      	ldr	r1, [pc, #56]	; (801e4dc <etharp_raw+0x100>)
 801e4a4:	480b      	ldr	r0, [pc, #44]	; (801e4d4 <etharp_raw+0xf8>)
 801e4a6:	f003 f99d 	bl	80217e4 <iprintf>
 801e4aa:	e7b0      	b.n	801e40e <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801e4ac:	4b07      	ldr	r3, [pc, #28]	; (801e4cc <etharp_raw+0xf0>)
 801e4ae:	f240 4257 	movw	r2, #1111	; 0x457
 801e4b2:	490b      	ldr	r1, [pc, #44]	; (801e4e0 <etharp_raw+0x104>)
 801e4b4:	4807      	ldr	r0, [pc, #28]	; (801e4d4 <etharp_raw+0xf8>)
 801e4b6:	f003 f995 	bl	80217e4 <iprintf>
 801e4ba:	e79c      	b.n	801e3f6 <etharp_raw+0x1a>
    ETHARP_STATS_INC(etharp.memerr);
 801e4bc:	4a06      	ldr	r2, [pc, #24]	; (801e4d8 <etharp_raw+0xfc>)
    return ERR_MEM;
 801e4be:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801e4c2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801e4c4:	3301      	adds	r3, #1
 801e4c6:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801e4c8:	e7e5      	b.n	801e496 <etharp_raw+0xba>
 801e4ca:	bf00      	nop
 801e4cc:	0804099c 	.word	0x0804099c
 801e4d0:	08040a68 	.word	0x08040a68
 801e4d4:	08027fec 	.word	0x08027fec
 801e4d8:	20036794 	.word	0x20036794
 801e4dc:	08040a34 	.word	0x08040a34
 801e4e0:	08027fdc 	.word	0x08027fdc

0801e4e4 <etharp_output_to_arp_index>:
{
 801e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e4e8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801e5e0 <etharp_output_to_arp_index+0xfc>
 801e4ec:	eb02 0542 	add.w	r5, r2, r2, lsl #1
{
 801e4f0:	b084      	sub	sp, #16
 801e4f2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e4f4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
{
 801e4f8:	4606      	mov	r6, r0
 801e4fa:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e4fc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801e500:	7d2b      	ldrb	r3, [r5, #20]
 801e502:	2b01      	cmp	r3, #1
 801e504:	d93b      	bls.n	801e57e <etharp_output_to_arp_index+0x9a>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801e506:	2b02      	cmp	r3, #2
 801e508:	d011      	beq.n	801e52e <etharp_output_to_arp_index+0x4a>
 801e50a:	2218      	movs	r2, #24
 801e50c:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801e510:	fb02 8404 	mla	r4, r2, r4, r8
 801e514:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801e516:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801e51a:	4623      	mov	r3, r4
 801e51c:	4652      	mov	r2, sl
 801e51e:	4639      	mov	r1, r7
 801e520:	4630      	mov	r0, r6
 801e522:	9500      	str	r5, [sp, #0]
 801e524:	f001 fcec 	bl	801ff00 <ethernet_output>
}
 801e528:	b004      	add	sp, #16
 801e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801e52e:	44a1      	add	r9, r4
 801e530:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 801e534:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 801e538:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801e53c:	d828      	bhi.n	801e590 <etharp_output_to_arp_index+0xac>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801e53e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801e542:	d3e2      	bcc.n	801e50a <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e544:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e548:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801e54c:	2101      	movs	r1, #1
 801e54e:	4a1f      	ldr	r2, [pc, #124]	; (801e5cc <etharp_output_to_arp_index+0xe8>)
 801e550:	00e5      	lsls	r5, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e552:	1d30      	adds	r0, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e554:	9103      	str	r1, [sp, #12]
 801e556:	4653      	mov	r3, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e558:	f105 040c 	add.w	r4, r5, #12
 801e55c:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e55e:	9201      	str	r2, [sp, #4]
 801e560:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e562:	4444      	add	r4, r8
 801e564:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e566:	9000      	str	r0, [sp, #0]
 801e568:	4630      	mov	r0, r6
 801e56a:	4622      	mov	r2, r4
 801e56c:	9502      	str	r5, [sp, #8]
 801e56e:	f7ff ff35 	bl	801e3dc <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801e572:	2800      	cmp	r0, #0
 801e574:	d1cf      	bne.n	801e516 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e576:	2303      	movs	r3, #3
 801e578:	f889 3014 	strb.w	r3, [r9, #20]
 801e57c:	e7cb      	b.n	801e516 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801e57e:	4b14      	ldr	r3, [pc, #80]	; (801e5d0 <etharp_output_to_arp_index+0xec>)
 801e580:	f240 22ee 	movw	r2, #750	; 0x2ee
 801e584:	4913      	ldr	r1, [pc, #76]	; (801e5d4 <etharp_output_to_arp_index+0xf0>)
 801e586:	4814      	ldr	r0, [pc, #80]	; (801e5d8 <etharp_output_to_arp_index+0xf4>)
 801e588:	f003 f92c 	bl	80217e4 <iprintf>
 801e58c:	7d2b      	ldrb	r3, [r5, #20]
 801e58e:	e7ba      	b.n	801e506 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e590:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e594:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801e598:	2001      	movs	r0, #1
 801e59a:	490c      	ldr	r1, [pc, #48]	; (801e5cc <etharp_output_to_arp_index+0xe8>)
 801e59c:	00e4      	lsls	r4, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e59e:	1d32      	adds	r2, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e5a0:	9003      	str	r0, [sp, #12]
 801e5a2:	4653      	mov	r3, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e5a4:	1d25      	adds	r5, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e5a6:	9101      	str	r1, [sp, #4]
 801e5a8:	9200      	str	r2, [sp, #0]
 801e5aa:	4651      	mov	r1, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e5ac:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e5ae:	4a0b      	ldr	r2, [pc, #44]	; (801e5dc <etharp_output_to_arp_index+0xf8>)
 801e5b0:	4630      	mov	r0, r6
 801e5b2:	340c      	adds	r4, #12
 801e5b4:	9502      	str	r5, [sp, #8]
 801e5b6:	f7ff ff11 	bl	801e3dc <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801e5ba:	b108      	cbz	r0, 801e5c0 <etharp_output_to_arp_index+0xdc>
 801e5bc:	4444      	add	r4, r8
 801e5be:	e7aa      	b.n	801e516 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801e5c0:	2303      	movs	r3, #3
 801e5c2:	4444      	add	r4, r8
 801e5c4:	f889 3014 	strb.w	r3, [r9, #20]
 801e5c8:	e7a5      	b.n	801e516 <etharp_output_to_arp_index+0x32>
 801e5ca:	bf00      	nop
 801e5cc:	08040ed4 	.word	0x08040ed4
 801e5d0:	0804099c 	.word	0x0804099c
 801e5d4:	08040aac 	.word	0x08040aac
 801e5d8:	08027fec 	.word	0x08027fec
 801e5dc:	08040ecc 	.word	0x08040ecc
 801e5e0:	20022a14 	.word	0x20022a14

0801e5e4 <etharp_tmr>:
{
 801e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5e8:	4c21      	ldr	r4, [pc, #132]	; (801e670 <etharp_tmr+0x8c>)
 801e5ea:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e5ec:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e5ee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801e678 <etharp_tmr+0x94>
 801e5f2:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801e5f6:	4f1f      	ldr	r7, [pc, #124]	; (801e674 <etharp_tmr+0x90>)
 801e5f8:	e00c      	b.n	801e614 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e5fa:	2901      	cmp	r1, #1
 801e5fc:	d101      	bne.n	801e602 <etharp_tmr+0x1e>
 801e5fe:	2b04      	cmp	r3, #4
 801e600:	d812      	bhi.n	801e628 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e602:	2903      	cmp	r1, #3
 801e604:	d01e      	beq.n	801e644 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e606:	2904      	cmp	r1, #4
 801e608:	d01f      	beq.n	801e64a <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e60a:	2901      	cmp	r1, #1
 801e60c:	d020      	beq.n	801e650 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e60e:	3418      	adds	r4, #24
 801e610:	42ac      	cmp	r4, r5
 801e612:	d014      	beq.n	801e63e <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 801e614:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801e616:	2900      	cmp	r1, #0
 801e618:	d0f9      	beq.n	801e60e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 801e61a:	89e3      	ldrh	r3, [r4, #14]
 801e61c:	3301      	adds	r3, #1
 801e61e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e620:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801e624:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e626:	d3e8      	bcc.n	801e5fa <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801e628:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801e62c:	b118      	cbz	r0, 801e636 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 801e62e:	f7ff fdeb 	bl	801e208 <free_etharp_q>
    arp_table[i].q = NULL;
 801e632:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e636:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e638:	3418      	adds	r4, #24
 801e63a:	42ac      	cmp	r4, r5
 801e63c:	d1ea      	bne.n	801e614 <etharp_tmr+0x30>
}
 801e63e:	b004      	add	sp, #16
 801e640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e644:	2304      	movs	r3, #4
 801e646:	7423      	strb	r3, [r4, #16]
 801e648:	e7e1      	b.n	801e60e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e64a:	2302      	movs	r3, #2
 801e64c:	7423      	strb	r3, [r4, #16]
 801e64e:	e7de      	b.n	801e60e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e650:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e652:	463a      	mov	r2, r7
 801e654:	9103      	str	r1, [sp, #12]
 801e656:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e65a:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e65e:	4619      	mov	r1, r3
 801e660:	f8cd c000 	str.w	ip, [sp]
 801e664:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801e668:	f7ff feb8 	bl	801e3dc <etharp_raw>
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e66c:	e7cf      	b.n	801e60e <etharp_tmr+0x2a>
 801e66e:	bf00      	nop
 801e670:	20022a18 	.word	0x20022a18
 801e674:	08040ecc 	.word	0x08040ecc
 801e678:	08040ed4 	.word	0x08040ed4

0801e67c <etharp_cleanup_netif>:
{
 801e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e67e:	4c0c      	ldr	r4, [pc, #48]	; (801e6b0 <etharp_cleanup_netif+0x34>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e680:	2700      	movs	r7, #0
{
 801e682:	4606      	mov	r6, r0
 801e684:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801e688:	e002      	b.n	801e690 <etharp_cleanup_netif+0x14>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e68a:	3418      	adds	r4, #24
 801e68c:	42ac      	cmp	r4, r5
 801e68e:	d00e      	beq.n	801e6ae <etharp_cleanup_netif+0x32>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e690:	7d23      	ldrb	r3, [r4, #20]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d0f9      	beq.n	801e68a <etharp_cleanup_netif+0xe>
 801e696:	68a3      	ldr	r3, [r4, #8]
 801e698:	42b3      	cmp	r3, r6
 801e69a:	d1f6      	bne.n	801e68a <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801e69c:	6820      	ldr	r0, [r4, #0]
 801e69e:	b110      	cbz	r0, 801e6a6 <etharp_cleanup_netif+0x2a>
    free_etharp_q(arp_table[i].q);
 801e6a0:	f7ff fdb2 	bl	801e208 <free_etharp_q>
    arp_table[i].q = NULL;
 801e6a4:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e6a6:	7527      	strb	r7, [r4, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e6a8:	3418      	adds	r4, #24
 801e6aa:	42ac      	cmp	r4, r5
 801e6ac:	d1f0      	bne.n	801e690 <etharp_cleanup_netif+0x14>
}
 801e6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e6b0:	20022a14 	.word	0x20022a14

0801e6b4 <etharp_input>:
{
 801e6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e6b8:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e6ba:	2900      	cmp	r1, #0
 801e6bc:	f000 809d 	beq.w	801e7fa <etharp_input+0x146>
  hdr = (struct etharp_hdr *)p->payload;
 801e6c0:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e6c2:	4604      	mov	r4, r0
 801e6c4:	8833      	ldrh	r3, [r6, #0]
 801e6c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e6ca:	d102      	bne.n	801e6d2 <etharp_input+0x1e>
 801e6cc:	7933      	ldrb	r3, [r6, #4]
 801e6ce:	2b06      	cmp	r3, #6
 801e6d0:	d00c      	beq.n	801e6ec <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801e6d2:	4b5d      	ldr	r3, [pc, #372]	; (801e848 <etharp_input+0x194>)
    pbuf_free(p);
 801e6d4:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801e6d6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e6d8:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801e6da:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801e6dc:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801e6de:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e6e0:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801e6e2:	f7f8 ff67 	bl	80175b4 <pbuf_free>
}
 801e6e6:	b009      	add	sp, #36	; 0x24
 801e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e6ec:	7973      	ldrb	r3, [r6, #5]
 801e6ee:	2b04      	cmp	r3, #4
 801e6f0:	d1ef      	bne.n	801e6d2 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e6f2:	8873      	ldrh	r3, [r6, #2]
 801e6f4:	2b08      	cmp	r3, #8
 801e6f6:	d1ec      	bne.n	801e6d2 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801e6f8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 801e848 <etharp_input+0x194>
 801e6fc:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e6fe:	684a      	ldr	r2, [r1, #4]
  ETHARP_STATS_INC(etharp.recv);
 801e700:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 801e704:	3301      	adds	r3, #1
 801e706:	f8ab 301a 	strh.w	r3, [fp, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e70a:	f8d6 000e 	ldr.w	r0, [r6, #14]
 801e70e:	69b3      	ldr	r3, [r6, #24]
 801e710:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e712:	2a00      	cmp	r2, #0
 801e714:	d079      	beq.n	801e80a <etharp_input+0x156>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e716:	1ad3      	subs	r3, r2, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e718:	f106 0908 	add.w	r9, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e71c:	fab3 f383 	clz	r3, r3
 801e720:	095b      	lsrs	r3, r3, #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e722:	f1c3 0802 	rsb	r8, r3, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e726:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e728:	fa5f f888 	uxtb.w	r8, r8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e72c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801e730:	2b06      	cmp	r3, #6
 801e732:	d007      	beq.n	801e744 <etharp_input+0x90>
 801e734:	4b45      	ldr	r3, [pc, #276]	; (801e84c <etharp_input+0x198>)
 801e736:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e73a:	4945      	ldr	r1, [pc, #276]	; (801e850 <etharp_input+0x19c>)
 801e73c:	4845      	ldr	r0, [pc, #276]	; (801e854 <etharp_input+0x1a0>)
 801e73e:	f003 f851 	bl	80217e4 <iprintf>
 801e742:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 801e744:	2800      	cmp	r0, #0
 801e746:	d048      	beq.n	801e7da <etharp_input+0x126>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e748:	4629      	mov	r1, r5
 801e74a:	f000 fe25 	bl	801f398 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 801e74e:	4607      	mov	r7, r0
 801e750:	2800      	cmp	r0, #0
 801e752:	d142      	bne.n	801e7da <etharp_input+0x126>
      ip4_addr_ismulticast(ipaddr)) {
 801e754:	9b07      	ldr	r3, [sp, #28]
 801e756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e75a:	2be0      	cmp	r3, #224	; 0xe0
 801e75c:	d03d      	beq.n	801e7da <etharp_input+0x126>
  i = etharp_find_entry(ipaddr, flags, netif);
 801e75e:	4641      	mov	r1, r8
 801e760:	462a      	mov	r2, r5
 801e762:	a807      	add	r0, sp, #28
 801e764:	f7ff fd84 	bl	801e270 <etharp_find_entry>
  if (i < 0) {
 801e768:	2800      	cmp	r0, #0
 801e76a:	db36      	blt.n	801e7da <etharp_input+0x126>
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e76c:	4a3a      	ldr	r2, [pc, #232]	; (801e858 <etharp_input+0x1a4>)
 801e76e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 801e772:	f04f 0c02 	mov.w	ip, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e776:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e77a:	eb02 08c1 	add.w	r8, r2, r1, lsl #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e77e:	230c      	movs	r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e780:	f888 c014 	strb.w	ip, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e784:	fb10 330e 	smlabb	r3, r0, lr, r3
  arp_table[i].netif = netif;
 801e788:	f8c8 5008 	str.w	r5, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e78c:	f8d9 0000 	ldr.w	r0, [r9]
 801e790:	eb02 0c03 	add.w	ip, r2, r3
 801e794:	50d0      	str	r0, [r2, r3]
 801e796:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 801e79a:	f8ac 3004 	strh.w	r3, [ip, #4]
  while (arp_table[i].q != NULL) {
 801e79e:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 801e7a2:	f8a8 7012 	strh.w	r7, [r8, #18]
  while (arp_table[i].q != NULL) {
 801e7a6:	b1c1      	cbz	r1, 801e7da <etharp_input+0x126>
 801e7a8:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 801e7ac:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 801e7ae:	200b      	movs	r0, #11
    p = q->p;
 801e7b0:	684f      	ldr	r7, [r1, #4]
    arp_table[i].q = q->next;
 801e7b2:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 801e7b6:	f7f8 fc2d 	bl	8017014 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e7ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801e7be:	4639      	mov	r1, r7
 801e7c0:	464b      	mov	r3, r9
 801e7c2:	4652      	mov	r2, sl
 801e7c4:	9000      	str	r0, [sp, #0]
 801e7c6:	4628      	mov	r0, r5
 801e7c8:	f001 fb9a 	bl	801ff00 <ethernet_output>
    pbuf_free(p);
 801e7cc:	4638      	mov	r0, r7
 801e7ce:	f7f8 fef1 	bl	80175b4 <pbuf_free>
  while (arp_table[i].q != NULL) {
 801e7d2:	f8d8 1000 	ldr.w	r1, [r8]
 801e7d6:	2900      	cmp	r1, #0
 801e7d8:	d1e8      	bne.n	801e7ac <etharp_input+0xf8>
  switch (hdr->opcode) {
 801e7da:	88f3      	ldrh	r3, [r6, #6]
 801e7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e7e0:	d019      	beq.n	801e816 <etharp_input+0x162>
 801e7e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e7e6:	d029      	beq.n	801e83c <etharp_input+0x188>
      ETHARP_STATS_INC(etharp.err);
 801e7e8:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 801e7ec:	3301      	adds	r3, #1
 801e7ee:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
  pbuf_free(p);
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f7f8 fede 	bl	80175b4 <pbuf_free>
 801e7f8:	e775      	b.n	801e6e6 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e7fa:	4b14      	ldr	r3, [pc, #80]	; (801e84c <etharp_input+0x198>)
 801e7fc:	f240 228a 	movw	r2, #650	; 0x28a
 801e800:	4916      	ldr	r1, [pc, #88]	; (801e85c <etharp_input+0x1a8>)
 801e802:	4814      	ldr	r0, [pc, #80]	; (801e854 <etharp_input+0x1a0>)
 801e804:	f002 ffee 	bl	80217e4 <iprintf>
 801e808:	e76d      	b.n	801e6e6 <etharp_input+0x32>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e80a:	f106 0908 	add.w	r9, r6, #8
 801e80e:	f04f 0802 	mov.w	r8, #2
    for_us = 0;
 801e812:	9205      	str	r2, [sp, #20]
 801e814:	e78a      	b.n	801e72c <etharp_input+0x78>
      if (for_us) {
 801e816:	9b05      	ldr	r3, [sp, #20]
 801e818:	2b00      	cmp	r3, #0
 801e81a:	d0ea      	beq.n	801e7f2 <etharp_input+0x13e>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e81c:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 801e820:	2002      	movs	r0, #2
 801e822:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e824:	1d2e      	adds	r6, r5, #4
        etharp_raw(netif,
 801e826:	9003      	str	r0, [sp, #12]
 801e828:	464a      	mov	r2, r9
 801e82a:	4619      	mov	r1, r3
 801e82c:	4628      	mov	r0, r5
 801e82e:	f8cd 9004 	str.w	r9, [sp, #4]
 801e832:	9702      	str	r7, [sp, #8]
 801e834:	9600      	str	r6, [sp, #0]
 801e836:	f7ff fdd1 	bl	801e3dc <etharp_raw>
 801e83a:	e7da      	b.n	801e7f2 <etharp_input+0x13e>
      dhcp_arp_reply(netif, &sipaddr);
 801e83c:	4628      	mov	r0, r5
 801e83e:	a907      	add	r1, sp, #28
 801e840:	f7ff fa18 	bl	801dc74 <dhcp_arp_reply>
      break;
 801e844:	e7d5      	b.n	801e7f2 <etharp_input+0x13e>
 801e846:	bf00      	nop
 801e848:	20036794 	.word	0x20036794
 801e84c:	0804099c 	.word	0x0804099c
 801e850:	08040afc 	.word	0x08040afc
 801e854:	08027fec 	.word	0x08027fec
 801e858:	20022a14 	.word	0x20022a14
 801e85c:	08027fdc 	.word	0x08027fdc

0801e860 <etharp_query>:
{
 801e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e864:	460c      	mov	r4, r1
 801e866:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e868:	4601      	mov	r1, r0
{
 801e86a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e86c:	6820      	ldr	r0, [r4, #0]
{
 801e86e:	ed2d 8b02 	vpush	{d8}
 801e872:	b085      	sub	sp, #20
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801e874:	f000 fd90 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801e878:	2800      	cmp	r0, #0
 801e87a:	f040 80df 	bne.w	801ea3c <etharp_query+0x1dc>
      ip4_addr_ismulticast(ipaddr) ||
 801e87e:	6823      	ldr	r3, [r4, #0]
 801e880:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 801e884:	2ae0      	cmp	r2, #224	; 0xe0
 801e886:	f000 80d9 	beq.w	801ea3c <etharp_query+0x1dc>
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	f000 80d6 	beq.w	801ea3c <etharp_query+0x1dc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801e890:	463a      	mov	r2, r7
 801e892:	2101      	movs	r1, #1
 801e894:	4620      	mov	r0, r4
 801e896:	f7ff fceb 	bl	801e270 <etharp_find_entry>
  if (i_err < 0) {
 801e89a:	1e06      	subs	r6, r0, #0
 801e89c:	db59      	blt.n	801e952 <etharp_query+0xf2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e89e:	2e7e      	cmp	r6, #126	; 0x7e
 801e8a0:	dc4f      	bgt.n	801e942 <etharp_query+0xe2>
  i = (netif_addr_idx_t)i_err;
 801e8a2:	b2f6      	uxtb	r6, r6
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801e8a4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 801ea80 <etharp_query+0x220>
 801e8a8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 801e8ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801e8b0:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 801e8b4:	7d13      	ldrb	r3, [r2, #20]
 801e8b6:	b19b      	cbz	r3, 801e8e0 <etharp_query+0x80>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e8b8:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 801e8bc:	2d00      	cmp	r5, #0
 801e8be:	f000 80af 	beq.w	801ea20 <etharp_query+0x1c0>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e8c2:	eb09 0306 	add.w	r3, r9, r6
  err_t result = ERR_MEM;
 801e8c6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e8ca:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801e8ce:	7d1b      	ldrb	r3, [r3, #20]
 801e8d0:	2b01      	cmp	r3, #1
 801e8d2:	d822      	bhi.n	801e91a <etharp_query+0xba>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e8d4:	d048      	beq.n	801e968 <etharp_query+0x108>
}
 801e8d6:	b005      	add	sp, #20
 801e8d8:	ecbd 8b02 	vpop	{d8}
 801e8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e8e0:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801e8e4:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e8e8:	495e      	ldr	r1, [pc, #376]	; (801ea64 <etharp_query+0x204>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e8ea:	1d38      	adds	r0, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e8ec:	9402      	str	r4, [sp, #8]
 801e8ee:	4653      	mov	r3, sl
 801e8f0:	9101      	str	r1, [sp, #4]
 801e8f2:	4651      	mov	r1, sl
 801e8f4:	9000      	str	r0, [sp, #0]
 801e8f6:	4638      	mov	r0, r7
 801e8f8:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 801e8fc:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801e8fe:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e902:	4a59      	ldr	r2, [pc, #356]	; (801ea68 <etharp_query+0x208>)
 801e904:	f7ff fd6a 	bl	801e3dc <etharp_raw>
    if (q == NULL) {
 801e908:	2d00      	cmp	r5, #0
 801e90a:	d0e4      	beq.n	801e8d6 <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801e90c:	eb09 0306 	add.w	r3, r9, r6
 801e910:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801e914:	7d1b      	ldrb	r3, [r3, #20]
 801e916:	2b01      	cmp	r3, #1
 801e918:	d9dc      	bls.n	801e8d4 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e91a:	2318      	movs	r3, #24
 801e91c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 801e920:	4c52      	ldr	r4, [pc, #328]	; (801ea6c <etharp_query+0x20c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e922:	4652      	mov	r2, sl
 801e924:	fb03 8306 	mla	r3, r3, r6, r8
 801e928:	4629      	mov	r1, r5
 801e92a:	f8cd c000 	str.w	ip, [sp]
 801e92e:	4638      	mov	r0, r7
 801e930:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 801e932:	7026      	strb	r6, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801e934:	f001 fae4 	bl	801ff00 <ethernet_output>
}
 801e938:	b005      	add	sp, #20
 801e93a:	ecbd 8b02 	vpop	{d8}
 801e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801e942:	4b4b      	ldr	r3, [pc, #300]	; (801ea70 <etharp_query+0x210>)
 801e944:	f240 32c1 	movw	r2, #961	; 0x3c1
 801e948:	494a      	ldr	r1, [pc, #296]	; (801ea74 <etharp_query+0x214>)
 801e94a:	484b      	ldr	r0, [pc, #300]	; (801ea78 <etharp_query+0x218>)
 801e94c:	f002 ff4a 	bl	80217e4 <iprintf>
 801e950:	e7a7      	b.n	801e8a2 <etharp_query+0x42>
    if (q) {
 801e952:	b11d      	cbz	r5, 801e95c <etharp_query+0xfc>
      ETHARP_STATS_INC(etharp.memerr);
 801e954:	4a49      	ldr	r2, [pc, #292]	; (801ea7c <etharp_query+0x21c>)
 801e956:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801e958:	3301      	adds	r3, #1
 801e95a:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 801e95c:	b270      	sxtb	r0, r6
}
 801e95e:	b005      	add	sp, #20
 801e960:	ecbd 8b02 	vpop	{d8}
 801e964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e968:	462c      	mov	r4, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e96a:	f8df b104 	ldr.w	fp, [pc, #260]	; 801ea70 <etharp_query+0x210>
 801e96e:	f8df a114 	ldr.w	sl, [pc, #276]	; 801ea84 <etharp_query+0x224>
 801e972:	ed9f 8a41 	vldr	s16, [pc, #260]	; 801ea78 <etharp_query+0x218>
 801e976:	e005      	b.n	801e984 <etharp_query+0x124>
      if (PBUF_NEEDS_COPY(p)) {
 801e978:	7b23      	ldrb	r3, [r4, #12]
 801e97a:	065a      	lsls	r2, r3, #25
 801e97c:	d414      	bmi.n	801e9a8 <etharp_query+0x148>
      p = p->next;
 801e97e:	6824      	ldr	r4, [r4, #0]
    while (p) {
 801e980:	2c00      	cmp	r4, #0
 801e982:	d038      	beq.n	801e9f6 <etharp_query+0x196>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801e984:	8962      	ldrh	r2, [r4, #10]
 801e986:	8923      	ldrh	r3, [r4, #8]
 801e988:	429a      	cmp	r2, r3
 801e98a:	d1f5      	bne.n	801e978 <etharp_query+0x118>
 801e98c:	6827      	ldr	r7, [r4, #0]
 801e98e:	465b      	mov	r3, fp
 801e990:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801e994:	4651      	mov	r1, sl
 801e996:	ee18 0a10 	vmov	r0, s16
 801e99a:	b117      	cbz	r7, 801e9a2 <etharp_query+0x142>
 801e99c:	f002 ff22 	bl	80217e4 <iprintf>
 801e9a0:	e7ea      	b.n	801e978 <etharp_query+0x118>
      if (PBUF_NEEDS_COPY(p)) {
 801e9a2:	7b23      	ldrb	r3, [r4, #12]
 801e9a4:	065b      	lsls	r3, r3, #25
 801e9a6:	d526      	bpl.n	801e9f6 <etharp_query+0x196>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801e9a8:	462a      	mov	r2, r5
 801e9aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 801e9ae:	200e      	movs	r0, #14
 801e9b0:	f7f9 f982 	bl	8017cb8 <pbuf_clone>
    if (p != NULL) {
 801e9b4:	4605      	mov	r5, r0
 801e9b6:	2800      	cmp	r0, #0
 801e9b8:	d046      	beq.n	801ea48 <etharp_query+0x1e8>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 801e9ba:	f240 4206 	movw	r2, #1030	; 0x406
 801e9be:	492c      	ldr	r1, [pc, #176]	; (801ea70 <etharp_query+0x210>)
 801e9c0:	200b      	movs	r0, #11
 801e9c2:	f7f8 fb03 	bl	8016fcc <memp_malloc_fn>
      if (new_entry != NULL) {
 801e9c6:	2800      	cmp	r0, #0
 801e9c8:	d045      	beq.n	801ea56 <etharp_query+0x1f6>
        if (arp_table[i].q != NULL) {
 801e9ca:	eb09 0306 	add.w	r3, r9, r6
        new_entry->next = 0;
 801e9ce:	2200      	movs	r2, #0
        new_entry->p = p;
 801e9d0:	6045      	str	r5, [r0, #4]
        if (arp_table[i].q != NULL) {
 801e9d2:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 801e9d4:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 801e9d6:	f858 5003 	ldr.w	r5, [r8, r3]
 801e9da:	b1ed      	cbz	r5, 801ea18 <etharp_query+0x1b8>
          while (r->next != NULL) {
 801e9dc:	682c      	ldr	r4, [r5, #0]
 801e9de:	b384      	cbz	r4, 801ea42 <etharp_query+0x1e2>
          qlen++;
 801e9e0:	2301      	movs	r3, #1
            qlen++;
 801e9e2:	4622      	mov	r2, r4
          while (r->next != NULL) {
 801e9e4:	6824      	ldr	r4, [r4, #0]
            qlen++;
 801e9e6:	3301      	adds	r3, #1
          while (r->next != NULL) {
 801e9e8:	2c00      	cmp	r4, #0
 801e9ea:	d1fa      	bne.n	801e9e2 <etharp_query+0x182>
        if (qlen >= ARP_QUEUE_LEN) {
 801e9ec:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 801e9ee:	6010      	str	r0, [r2, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 801e9f0:	d805      	bhi.n	801e9fe <etharp_query+0x19e>
        result = ERR_OK;
 801e9f2:	4620      	mov	r0, r4
 801e9f4:	e76f      	b.n	801e8d6 <etharp_query+0x76>
      pbuf_ref(p);
 801e9f6:	4628      	mov	r0, r5
 801e9f8:	f7f8 ff4a 	bl	8017890 <pbuf_ref>
    if (p != NULL) {
 801e9fc:	e7dd      	b.n	801e9ba <etharp_query+0x15a>
          pbuf_free(old->p);
 801e9fe:	e9d5 3000 	ldrd	r3, r0, [r5]
          arp_table[i].q = arp_table[i].q->next;
 801ea02:	444e      	add	r6, r9
 801ea04:	f848 3036 	str.w	r3, [r8, r6, lsl #3]
          pbuf_free(old->p);
 801ea08:	f7f8 fdd4 	bl	80175b4 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 801ea0c:	200b      	movs	r0, #11
 801ea0e:	4629      	mov	r1, r5
 801ea10:	f7f8 fb00 	bl	8017014 <memp_free>
        result = ERR_OK;
 801ea14:	4620      	mov	r0, r4
 801ea16:	e75e      	b.n	801e8d6 <etharp_query+0x76>
          arp_table[i].q = new_entry;
 801ea18:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 801ea1c:	4628      	mov	r0, r5
 801ea1e:	e75a      	b.n	801e8d6 <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ea20:	1d3a      	adds	r2, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ea22:	2101      	movs	r1, #1
 801ea24:	4b0f      	ldr	r3, [pc, #60]	; (801ea64 <etharp_query+0x204>)
 801ea26:	4638      	mov	r0, r7
 801ea28:	9200      	str	r2, [sp, #0]
 801ea2a:	9301      	str	r3, [sp, #4]
 801ea2c:	4653      	mov	r3, sl
 801ea2e:	4a0e      	ldr	r2, [pc, #56]	; (801ea68 <etharp_query+0x208>)
 801ea30:	e9cd 4102 	strd	r4, r1, [sp, #8]
 801ea34:	4651      	mov	r1, sl
 801ea36:	f7ff fcd1 	bl	801e3dc <etharp_raw>
    if (q == NULL) {
 801ea3a:	e74c      	b.n	801e8d6 <etharp_query+0x76>
    return ERR_ARG;
 801ea3c:	f06f 000f 	mvn.w	r0, #15
 801ea40:	e749      	b.n	801e8d6 <etharp_query+0x76>
          r->next = new_entry;
 801ea42:	6028      	str	r0, [r5, #0]
        result = ERR_OK;
 801ea44:	4620      	mov	r0, r4
 801ea46:	e746      	b.n	801e8d6 <etharp_query+0x76>
      ETHARP_STATS_INC(etharp.memerr);
 801ea48:	4a0c      	ldr	r2, [pc, #48]	; (801ea7c <etharp_query+0x21c>)
      result = ERR_MEM;
 801ea4a:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 801ea4e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801ea50:	3301      	adds	r3, #1
 801ea52:	8493      	strh	r3, [r2, #36]	; 0x24
      result = ERR_MEM;
 801ea54:	e73f      	b.n	801e8d6 <etharp_query+0x76>
        pbuf_free(p);
 801ea56:	4628      	mov	r0, r5
 801ea58:	f7f8 fdac 	bl	80175b4 <pbuf_free>
        result = ERR_MEM;
 801ea5c:	f04f 30ff 	mov.w	r0, #4294967295
 801ea60:	e739      	b.n	801e8d6 <etharp_query+0x76>
 801ea62:	bf00      	nop
 801ea64:	08040ed4 	.word	0x08040ed4
 801ea68:	08040ecc 	.word	0x08040ecc
 801ea6c:	20022d14 	.word	0x20022d14
 801ea70:	0804099c 	.word	0x0804099c
 801ea74:	08040b20 	.word	0x08040b20
 801ea78:	08027fec 	.word	0x08027fec
 801ea7c:	20036794 	.word	0x20036794
 801ea80:	20022a14 	.word	0x20022a14
 801ea84:	08040b30 	.word	0x08040b30

0801ea88 <etharp_output>:
{
 801ea88:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801ea8c:	4689      	mov	r9, r1
 801ea8e:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ea90:	4606      	mov	r6, r0
{
 801ea92:	4690      	mov	r8, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ea94:	2800      	cmp	r0, #0
 801ea96:	f000 808c 	beq.w	801ebb2 <etharp_output+0x12a>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ea9a:	f1b9 0f00 	cmp.w	r9, #0
 801ea9e:	d076      	beq.n	801eb8e <etharp_output+0x106>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801eaa0:	f1b8 0f00 	cmp.w	r8, #0
 801eaa4:	d07d      	beq.n	801eba2 <etharp_output+0x11a>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801eaa6:	4631      	mov	r1, r6
 801eaa8:	f8d8 0000 	ldr.w	r0, [r8]
 801eaac:	f000 fc74 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801eab0:	2800      	cmp	r0, #0
 801eab2:	d162      	bne.n	801eb7a <etharp_output+0xf2>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801eab4:	f8d8 3000 	ldr.w	r3, [r8]
 801eab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801eabc:	2ae0      	cmp	r2, #224	; 0xe0
 801eabe:	d03b      	beq.n	801eb38 <etharp_output+0xb0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801eac0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801eac4:	405a      	eors	r2, r3
 801eac6:	420a      	tst	r2, r1
 801eac8:	d00a      	beq.n	801eae0 <etharp_output+0x58>
        !ip4_addr_islinklocal(ipaddr)) {
 801eaca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801eacc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ead0:	4293      	cmp	r3, r2
 801ead2:	d005      	beq.n	801eae0 <etharp_output+0x58>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ead4:	68f3      	ldr	r3, [r6, #12]
 801ead6:	2b00      	cmp	r3, #0
 801ead8:	f000 8085 	beq.w	801ebe6 <etharp_output+0x15e>
            dst_addr = netif_ip4_gw(netif);
 801eadc:	f106 080c 	add.w	r8, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801eae0:	f8df c128 	ldr.w	ip, [pc, #296]	; 801ec0c <etharp_output+0x184>
 801eae4:	4b41      	ldr	r3, [pc, #260]	; (801ebec <etharp_output+0x164>)
 801eae6:	f89c 2000 	ldrb.w	r2, [ip]
 801eaea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 801eaee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801eaf2:	7d19      	ldrb	r1, [r3, #20]
 801eaf4:	2901      	cmp	r1, #1
 801eaf6:	d902      	bls.n	801eafe <etharp_output+0x76>
 801eaf8:	6899      	ldr	r1, [r3, #8]
 801eafa:	42b1      	cmp	r1, r6
 801eafc:	d065      	beq.n	801ebca <etharp_output+0x142>
 801eafe:	4c3b      	ldr	r4, [pc, #236]	; (801ebec <etharp_output+0x164>)
{
 801eb00:	2300      	movs	r3, #0
 801eb02:	e003      	b.n	801eb0c <etharp_output+0x84>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801eb04:	2b20      	cmp	r3, #32
 801eb06:	f104 0418 	add.w	r4, r4, #24
 801eb0a:	d038      	beq.n	801eb7e <etharp_output+0xf6>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801eb0c:	7d25      	ldrb	r5, [r4, #20]
 801eb0e:	b2da      	uxtb	r2, r3
 801eb10:	3301      	adds	r3, #1
 801eb12:	2d01      	cmp	r5, #1
 801eb14:	d9f6      	bls.n	801eb04 <etharp_output+0x7c>
 801eb16:	68a0      	ldr	r0, [r4, #8]
 801eb18:	42b0      	cmp	r0, r6
 801eb1a:	d1f3      	bne.n	801eb04 <etharp_output+0x7c>
          (arp_table[i].netif == netif) &&
 801eb1c:	f8d8 1000 	ldr.w	r1, [r8]
 801eb20:	6860      	ldr	r0, [r4, #4]
 801eb22:	4281      	cmp	r1, r0
 801eb24:	d1ee      	bne.n	801eb04 <etharp_output+0x7c>
        return etharp_output_to_arp_index(netif, q, i);
 801eb26:	4649      	mov	r1, r9
 801eb28:	4630      	mov	r0, r6
        ETHARP_SET_ADDRHINT(netif, i);
 801eb2a:	f88c 2000 	strb.w	r2, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 801eb2e:	f7ff fcd9 	bl	801e4e4 <etharp_output_to_arp_index>
}
 801eb32:	b004      	add	sp, #16
 801eb34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801eb38:	f898 3001 	ldrb.w	r3, [r8, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801eb3c:	2401      	movs	r4, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801eb3e:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801eb40:	f898 1002 	ldrb.w	r1, [r8, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801eb44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801eb48:	f898 2003 	ldrb.w	r2, [r8, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801eb4c:	f8ad 4008 	strh.w	r4, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801eb50:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 801eb54:	ab02      	add	r3, sp, #8
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801eb56:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801eb5a:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801eb5e:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801eb62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801eb66:	4649      	mov	r1, r9
 801eb68:	f106 022e 	add.w	r2, r6, #46	; 0x2e
 801eb6c:	9000      	str	r0, [sp, #0]
 801eb6e:	4630      	mov	r0, r6
 801eb70:	f001 f9c6 	bl	801ff00 <ethernet_output>
}
 801eb74:	b004      	add	sp, #16
 801eb76:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 801eb7a:	4b1d      	ldr	r3, [pc, #116]	; (801ebf0 <etharp_output+0x168>)
 801eb7c:	e7f1      	b.n	801eb62 <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 801eb7e:	464a      	mov	r2, r9
 801eb80:	4641      	mov	r1, r8
 801eb82:	4630      	mov	r0, r6
 801eb84:	f7ff fe6c 	bl	801e860 <etharp_query>
}
 801eb88:	b004      	add	sp, #16
 801eb8a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801eb8e:	4b19      	ldr	r3, [pc, #100]	; (801ebf4 <etharp_output+0x16c>)
 801eb90:	f240 321f 	movw	r2, #799	; 0x31f
 801eb94:	4918      	ldr	r1, [pc, #96]	; (801ebf8 <etharp_output+0x170>)
 801eb96:	4819      	ldr	r0, [pc, #100]	; (801ebfc <etharp_output+0x174>)
 801eb98:	f002 fe24 	bl	80217e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801eb9c:	f1b8 0f00 	cmp.w	r8, #0
 801eba0:	d181      	bne.n	801eaa6 <etharp_output+0x1e>
 801eba2:	4b14      	ldr	r3, [pc, #80]	; (801ebf4 <etharp_output+0x16c>)
 801eba4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801eba8:	4915      	ldr	r1, [pc, #84]	; (801ec00 <etharp_output+0x178>)
 801ebaa:	4814      	ldr	r0, [pc, #80]	; (801ebfc <etharp_output+0x174>)
 801ebac:	f002 fe1a 	bl	80217e4 <iprintf>
 801ebb0:	e779      	b.n	801eaa6 <etharp_output+0x1e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ebb2:	4b10      	ldr	r3, [pc, #64]	; (801ebf4 <etharp_output+0x16c>)
 801ebb4:	f240 321e 	movw	r2, #798	; 0x31e
 801ebb8:	4912      	ldr	r1, [pc, #72]	; (801ec04 <etharp_output+0x17c>)
 801ebba:	4810      	ldr	r0, [pc, #64]	; (801ebfc <etharp_output+0x174>)
 801ebbc:	f002 fe12 	bl	80217e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ebc0:	f1b9 0f00 	cmp.w	r9, #0
 801ebc4:	f47f af6c 	bne.w	801eaa0 <etharp_output+0x18>
 801ebc8:	e7e1      	b.n	801eb8e <etharp_output+0x106>
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ebca:	685b      	ldr	r3, [r3, #4]
 801ebcc:	f8d8 1000 	ldr.w	r1, [r8]
 801ebd0:	4299      	cmp	r1, r3
 801ebd2:	d194      	bne.n	801eafe <etharp_output+0x76>
          ETHARP_STATS_INC(etharp.cachehit);
 801ebd4:	4c0c      	ldr	r4, [pc, #48]	; (801ec08 <etharp_output+0x180>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ebd6:	4649      	mov	r1, r9
 801ebd8:	4630      	mov	r0, r6
          ETHARP_STATS_INC(etharp.cachehit);
 801ebda:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 801ebdc:	3301      	adds	r3, #1
 801ebde:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ebe0:	f7ff fc80 	bl	801e4e4 <etharp_output_to_arp_index>
 801ebe4:	e7c6      	b.n	801eb74 <etharp_output+0xec>
            return ERR_RTE;
 801ebe6:	f06f 0003 	mvn.w	r0, #3
 801ebea:	e7c3      	b.n	801eb74 <etharp_output+0xec>
 801ebec:	20022a14 	.word	0x20022a14
 801ebf0:	08040ecc 	.word	0x08040ecc
 801ebf4:	0804099c 	.word	0x0804099c
 801ebf8:	080409d4 	.word	0x080409d4
 801ebfc:	08027fec 	.word	0x08027fec
 801ec00:	08040adc 	.word	0x08040adc
 801ec04:	08027fdc 	.word	0x08027fdc
 801ec08:	20036794 	.word	0x20036794
 801ec0c:	20022d14 	.word	0x20022d14

0801ec10 <etharp_request>:
{
 801ec10:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec12:	2301      	movs	r3, #1
{
 801ec14:	b084      	sub	sp, #16
 801ec16:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec18:	4c06      	ldr	r4, [pc, #24]	; (801ec34 <etharp_request+0x24>)
 801ec1a:	e9cd 1302 	strd	r1, r3, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ec1e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ec20:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 801ec24:	e9cd 2400 	strd	r2, r4, [sp]
 801ec28:	4619      	mov	r1, r3
 801ec2a:	4a03      	ldr	r2, [pc, #12]	; (801ec38 <etharp_request+0x28>)
 801ec2c:	f7ff fbd6 	bl	801e3dc <etharp_raw>
}
 801ec30:	b004      	add	sp, #16
 801ec32:	bd10      	pop	{r4, pc}
 801ec34:	08040ed4 	.word	0x08040ed4
 801ec38:	08040ecc 	.word	0x08040ecc

0801ec3c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 801ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec40:	4604      	mov	r4, r0
 801ec42:	b086      	sub	sp, #24
 801ec44:	460f      	mov	r7, r1
 801ec46:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801ec48:	2124      	movs	r1, #36	; 0x24
 801ec4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ec4e:	2022      	movs	r0, #34	; 0x22
 801ec50:	f7f8 fd1e 	bl	8017690 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 801ec54:	2800      	cmp	r0, #0
 801ec56:	d040      	beq.n	801ecda <icmp_send_response.isra.0+0x9e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ec58:	8943      	ldrh	r3, [r0, #10]
 801ec5a:	4605      	mov	r5, r0
 801ec5c:	2b23      	cmp	r3, #35	; 0x23
 801ec5e:	d93f      	bls.n	801ece0 <icmp_send_response.isra.0+0xa4>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801ec60:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 801ec62:	2600      	movs	r6, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801ec64:	686c      	ldr	r4, [r5, #4]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801ec66:	a805      	add	r0, sp, #20
  icmphdr->type = type;
 801ec68:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 801ec6a:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->id = 0;
 801ec6e:	7126      	strb	r6, [r4, #4]
 801ec70:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 801ec72:	71a6      	strb	r6, [r4, #6]
 801ec74:	71e6      	strb	r6, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801ec76:	681f      	ldr	r7, [r3, #0]
 801ec78:	6859      	ldr	r1, [r3, #4]
 801ec7a:	689a      	ldr	r2, [r3, #8]
 801ec7c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801ec80:	60a7      	str	r7, [r4, #8]
 801ec82:	60e1      	str	r1, [r4, #12]
 801ec84:	6122      	str	r2, [r4, #16]
 801ec86:	f8c4 c014 	str.w	ip, [r4, #20]
 801ec8a:	691f      	ldr	r7, [r3, #16]
 801ec8c:	6959      	ldr	r1, [r3, #20]
 801ec8e:	699a      	ldr	r2, [r3, #24]
 801ec90:	61a7      	str	r7, [r4, #24]
 801ec92:	61e1      	str	r1, [r4, #28]
 801ec94:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 801ec96:	68db      	ldr	r3, [r3, #12]
 801ec98:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 801ec9a:	f000 f951 	bl	801ef40 <ip4_route>
#endif
  if (netif != NULL) {
 801ec9e:	4607      	mov	r7, r0
 801eca0:	b1c0      	cbz	r0, 801ecd4 <icmp_send_response.isra.0+0x98>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801eca2:	4620      	mov	r0, r4
 801eca4:	8969      	ldrh	r1, [r5, #10]
    icmphdr->chksum = 0;
 801eca6:	70a6      	strb	r6, [r4, #2]
 801eca8:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801ecaa:	f7f7 fbe3 	bl	8016474 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801ecae:	f8df c04c 	ldr.w	ip, [pc, #76]	; 801ecfc <icmp_send_response.isra.0+0xc0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801ecb2:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ecb4:	f04f 0e01 	mov.w	lr, #1
    ICMP_STATS_INC(icmp.xmit);
 801ecb8:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ecbc:	aa05      	add	r2, sp, #20
 801ecbe:	9702      	str	r7, [sp, #8]
 801ecc0:	4631      	mov	r1, r6
    ICMP_STATS_INC(icmp.xmit);
 801ecc2:	4474      	add	r4, lr
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ecc4:	23ff      	movs	r3, #255	; 0xff
 801ecc6:	4628      	mov	r0, r5
 801ecc8:	e9cd 6e00 	strd	r6, lr, [sp]
    ICMP_STATS_INC(icmp.xmit);
 801eccc:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801ecd0:	f000 fb50 	bl	801f374 <ip4_output_if>
  }
  pbuf_free(q);
 801ecd4:	4628      	mov	r0, r5
 801ecd6:	f7f8 fc6d 	bl	80175b4 <pbuf_free>
}
 801ecda:	b006      	add	sp, #24
 801ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801ece0:	4b03      	ldr	r3, [pc, #12]	; (801ecf0 <icmp_send_response.isra.0+0xb4>)
 801ece2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801ece6:	4903      	ldr	r1, [pc, #12]	; (801ecf4 <icmp_send_response.isra.0+0xb8>)
 801ece8:	4803      	ldr	r0, [pc, #12]	; (801ecf8 <icmp_send_response.isra.0+0xbc>)
 801ecea:	f002 fd7b 	bl	80217e4 <iprintf>
 801ecee:	e7b7      	b.n	801ec60 <icmp_send_response.isra.0+0x24>
 801ecf0:	08040b4c 	.word	0x08040b4c
 801ecf4:	08040b84 	.word	0x08040b84
 801ecf8:	08027fec 	.word	0x08027fec
 801ecfc:	20036794 	.word	0x20036794

0801ed00 <icmp_input>:
{
 801ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 801ed04:	4e76      	ldr	r6, [pc, #472]	; (801eee0 <icmp_input+0x1e0>)
{
 801ed06:	b087      	sub	sp, #28
  iphdr_in = ip4_current_header();
 801ed08:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 801eef8 <icmp_input+0x1f8>
{
 801ed0c:	4605      	mov	r5, r0
  ICMP_STATS_INC(icmp.recv);
 801ed0e:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
  iphdr_in = ip4_current_header();
 801ed12:	f8d8 9008 	ldr.w	r9, [r8, #8]
  ICMP_STATS_INC(icmp.recv);
 801ed16:	3301      	adds	r3, #1
 801ed18:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 801ed1c:	f899 4000 	ldrb.w	r4, [r9]
 801ed20:	f004 040f 	and.w	r4, r4, #15
 801ed24:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 801ed26:	2c13      	cmp	r4, #19
 801ed28:	d91c      	bls.n	801ed64 <icmp_input+0x64>
  if (p->len < sizeof(u16_t) * 2) {
 801ed2a:	8943      	ldrh	r3, [r0, #10]
 801ed2c:	2b03      	cmp	r3, #3
 801ed2e:	d919      	bls.n	801ed64 <icmp_input+0x64>
  type = *((u8_t *)p->payload);
 801ed30:	6843      	ldr	r3, [r0, #4]
 801ed32:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 801ed34:	2b00      	cmp	r3, #0
 801ed36:	f000 8092 	beq.w	801ee5e <icmp_input+0x15e>
 801ed3a:	2b08      	cmp	r3, #8
 801ed3c:	f040 80a9 	bne.w	801ee92 <icmp_input+0x192>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ed40:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801ed44:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 801ed48:	2be0      	cmp	r3, #224	; 0xe0
 801ed4a:	f000 8099 	beq.w	801ee80 <icmp_input+0x180>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ed4e:	460f      	mov	r7, r1
 801ed50:	f8d8 1000 	ldr.w	r1, [r8]
 801ed54:	f000 fb20 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801ed58:	2800      	cmp	r0, #0
 801ed5a:	f040 8091 	bne.w	801ee80 <icmp_input+0x180>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ed5e:	892b      	ldrh	r3, [r5, #8]
 801ed60:	2b07      	cmp	r3, #7
 801ed62:	d80a      	bhi.n	801ed7a <icmp_input+0x7a>
  pbuf_free(p);
 801ed64:	4628      	mov	r0, r5
 801ed66:	f7f8 fc25 	bl	80175b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801ed6a:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 801ed6e:	3301      	adds	r3, #1
 801ed70:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
}
 801ed74:	b007      	add	sp, #28
 801ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (inet_chksum_pbuf(p) != 0) {
 801ed7a:	4628      	mov	r0, r5
 801ed7c:	f7f7 fb80 	bl	8016480 <inet_chksum_pbuf>
 801ed80:	2800      	cmp	r0, #0
 801ed82:	f040 8096 	bne.w	801eeb2 <icmp_input+0x1b2>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ed86:	f104 010e 	add.w	r1, r4, #14
 801ed8a:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 801ed8c:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ed90:	9105      	str	r1, [sp, #20]
 801ed92:	f7f8 fbcf 	bl	8017534 <pbuf_add_header>
 801ed96:	9905      	ldr	r1, [sp, #20]
 801ed98:	2800      	cmp	r0, #0
 801ed9a:	d066      	beq.n	801ee6a <icmp_input+0x16a>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801ed9c:	892b      	ldrh	r3, [r5, #8]
 801ed9e:	eb03 010a 	add.w	r1, r3, sl
 801eda2:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 801eda4:	428b      	cmp	r3, r1
 801eda6:	d86b      	bhi.n	801ee80 <icmp_input+0x180>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801eda8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801edac:	200e      	movs	r0, #14
 801edae:	f7f8 fc6f 	bl	8017690 <pbuf_alloc>
        if (r == NULL) {
 801edb2:	4683      	mov	fp, r0
 801edb4:	2800      	cmp	r0, #0
 801edb6:	d063      	beq.n	801ee80 <icmp_input+0x180>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801edb8:	8942      	ldrh	r2, [r0, #10]
 801edba:	f104 0308 	add.w	r3, r4, #8
 801edbe:	429a      	cmp	r2, r3
 801edc0:	f0c0 8081 	bcc.w	801eec6 <icmp_input+0x1c6>
        MEMCPY(r->payload, iphdr_in, hlen);
 801edc4:	4649      	mov	r1, r9
 801edc6:	4622      	mov	r2, r4
 801edc8:	6840      	ldr	r0, [r0, #4]
 801edca:	f001 fd71 	bl	80208b0 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 801edce:	4621      	mov	r1, r4
 801edd0:	4658      	mov	r0, fp
 801edd2:	f7f8 fbb3 	bl	801753c <pbuf_remove_header>
 801edd6:	2800      	cmp	r0, #0
 801edd8:	d178      	bne.n	801eecc <icmp_input+0x1cc>
        if (pbuf_copy(r, p) != ERR_OK) {
 801edda:	4629      	mov	r1, r5
 801eddc:	4658      	mov	r0, fp
 801edde:	f7f8 fdc5 	bl	801796c <pbuf_copy>
 801ede2:	2800      	cmp	r0, #0
 801ede4:	d16e      	bne.n	801eec4 <icmp_input+0x1c4>
        pbuf_free(p);
 801ede6:	4628      	mov	r0, r5
 801ede8:	465d      	mov	r5, fp
 801edea:	f7f8 fbe3 	bl	80175b4 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 801edee:	4621      	mov	r1, r4
 801edf0:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 801edf2:	f8d5 9004 	ldr.w	r9, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 801edf6:	f7f8 fb9d 	bl	8017534 <pbuf_add_header>
 801edfa:	bb80      	cbnz	r0, 801ee5e <icmp_input+0x15e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801edfc:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801edfe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ee02:	f04f 0bff 	mov.w	fp, #255	; 0xff
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ee06:	e9d8 3104 	ldrd	r3, r1, [r8, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 801ee0a:	f04f 0800 	mov.w	r8, #0
        ip4_addr_copy(iphdr->src, *src);
 801ee0e:	60e1      	str	r1, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801ee10:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801ee12:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801ee16:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801ee1a:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801ee1c:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801ee1e:	bf8c      	ite	hi
 801ee20:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801ee22:	3308      	addls	r3, #8
 801ee24:	b299      	uxth	r1, r3
 801ee26:	f8a9 1002 	strh.w	r1, [r9, #2]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801ee2a:	4651      	mov	r1, sl
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801ee2c:	f884 b008 	strb.w	fp, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801ee30:	f884 800a 	strb.w	r8, [r4, #10]
 801ee34:	f884 800b 	strb.w	r8, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801ee38:	f7f7 fb1c 	bl	8016474 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 801ee3c:	f8b6 2060 	ldrh.w	r2, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ee40:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801ee42:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ee44:	465b      	mov	r3, fp
 801ee46:	4628      	mov	r0, r5
        ICMP_STATS_INC(icmp.xmit);
 801ee48:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ee4a:	f8cd 8000 	str.w	r8, [sp]
 801ee4e:	4642      	mov	r2, r8
        ICMP_STATS_INC(icmp.xmit);
 801ee50:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801ee54:	e9cd 1701 	strd	r1, r7, [sp, #4]
 801ee58:	4922      	ldr	r1, [pc, #136]	; (801eee4 <icmp_input+0x1e4>)
 801ee5a:	f000 fa8b 	bl	801f374 <ip4_output_if>
  pbuf_free(p);
 801ee5e:	4628      	mov	r0, r5
}
 801ee60:	b007      	add	sp, #28
 801ee62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801ee66:	f7f8 bba5 	b.w	80175b4 <pbuf_free>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801ee6a:	4628      	mov	r0, r5
 801ee6c:	f7f8 fb66 	bl	801753c <pbuf_remove_header>
 801ee70:	2800      	cmp	r0, #0
 801ee72:	d0bc      	beq.n	801edee <icmp_input+0xee>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801ee74:	4b1c      	ldr	r3, [pc, #112]	; (801eee8 <icmp_input+0x1e8>)
 801ee76:	22c7      	movs	r2, #199	; 0xc7
 801ee78:	491c      	ldr	r1, [pc, #112]	; (801eeec <icmp_input+0x1ec>)
 801ee7a:	481d      	ldr	r0, [pc, #116]	; (801eef0 <icmp_input+0x1f0>)
 801ee7c:	f002 fcb2 	bl	80217e4 <iprintf>
  pbuf_free(p);
 801ee80:	4628      	mov	r0, r5
 801ee82:	f7f8 fb97 	bl	80175b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801ee86:	f8b6 3074 	ldrh.w	r3, [r6, #116]	; 0x74
 801ee8a:	3301      	adds	r3, #1
 801ee8c:	f8a6 3074 	strh.w	r3, [r6, #116]	; 0x74
  return;
 801ee90:	e770      	b.n	801ed74 <icmp_input+0x74>
      ICMP_STATS_INC(icmp.proterr);
 801ee92:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
  pbuf_free(p);
 801ee96:	4628      	mov	r0, r5
      ICMP_STATS_INC(icmp.drop);
 801ee98:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 801ee9c:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 801ee9e:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 801eea0:	f8a6 2070 	strh.w	r2, [r6, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 801eea4:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
}
 801eea8:	b007      	add	sp, #28
 801eeaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801eeae:	f7f8 bb81 	b.w	80175b4 <pbuf_free>
          pbuf_free(p);
 801eeb2:	4628      	mov	r0, r5
 801eeb4:	f7f8 fb7e 	bl	80175b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 801eeb8:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 801eebc:	3301      	adds	r3, #1
 801eebe:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          return;
 801eec2:	e757      	b.n	801ed74 <icmp_input+0x74>
          pbuf_free(r);
 801eec4:	4658      	mov	r0, fp
 801eec6:	f7f8 fb75 	bl	80175b4 <pbuf_free>
          goto icmperr;
 801eeca:	e7d9      	b.n	801ee80 <icmp_input+0x180>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801eecc:	4b06      	ldr	r3, [pc, #24]	; (801eee8 <icmp_input+0x1e8>)
 801eece:	22b6      	movs	r2, #182	; 0xb6
 801eed0:	4908      	ldr	r1, [pc, #32]	; (801eef4 <icmp_input+0x1f4>)
 801eed2:	4807      	ldr	r0, [pc, #28]	; (801eef0 <icmp_input+0x1f0>)
 801eed4:	f002 fc86 	bl	80217e4 <iprintf>
          pbuf_free(r);
 801eed8:	4658      	mov	r0, fp
 801eeda:	f7f8 fb6b 	bl	80175b4 <pbuf_free>
          goto icmperr;
 801eede:	e7cf      	b.n	801ee80 <icmp_input+0x180>
 801eee0:	20036794 	.word	0x20036794
 801eee4:	200270b0 	.word	0x200270b0
 801eee8:	08040b4c 	.word	0x08040b4c
 801eeec:	08040be8 	.word	0x08040be8
 801eef0:	08027fec 	.word	0x08027fec
 801eef4:	08040bb0 	.word	0x08040bb0
 801eef8:	2002709c 	.word	0x2002709c

0801eefc <icmp_dest_unreach>:
{
 801eefc:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 801eefe:	3004      	adds	r0, #4
 801ef00:	2103      	movs	r1, #3
 801ef02:	f7ff be9b 	b.w	801ec3c <icmp_send_response.isra.0>
 801ef06:	bf00      	nop

0801ef08 <icmp_time_exceeded>:
{
 801ef08:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 801ef0a:	3004      	adds	r0, #4
 801ef0c:	210b      	movs	r1, #11
 801ef0e:	f7ff be95 	b.w	801ec3c <icmp_send_response.isra.0>
 801ef12:	bf00      	nop

0801ef14 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 801ef14:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801ef16:	6843      	ldr	r3, [r0, #4]
 801ef18:	b15b      	cbz	r3, 801ef32 <ip4_input_accept.part.0+0x1e>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ef1a:	4a08      	ldr	r2, [pc, #32]	; (801ef3c <ip4_input_accept.part.0+0x28>)
 801ef1c:	6952      	ldr	r2, [r2, #20]
 801ef1e:	4293      	cmp	r3, r2
 801ef20:	d009      	beq.n	801ef36 <ip4_input_accept.part.0+0x22>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ef22:	4601      	mov	r1, r0
 801ef24:	4610      	mov	r0, r2
 801ef26:	f000 fa37 	bl	801f398 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ef2a:	3800      	subs	r0, #0
 801ef2c:	bf18      	it	ne
 801ef2e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 801ef30:	bd08      	pop	{r3, pc}
  return 0;
 801ef32:	4618      	mov	r0, r3
}
 801ef34:	bd08      	pop	{r3, pc}
      return 1;
 801ef36:	2001      	movs	r0, #1
}
 801ef38:	bd08      	pop	{r3, pc}
 801ef3a:	bf00      	nop
 801ef3c:	2002709c 	.word	0x2002709c

0801ef40 <ip4_route>:
  NETIF_FOREACH(netif) {
 801ef40:	4b18      	ldr	r3, [pc, #96]	; (801efa4 <ip4_route+0x64>)
{
 801ef42:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 801ef44:	681b      	ldr	r3, [r3, #0]
 801ef46:	b1ab      	cbz	r3, 801ef74 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801ef48:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801ef4c:	07d4      	lsls	r4, r2, #31
 801ef4e:	d5f9      	bpl.n	801ef44 <ip4_route+0x4>
 801ef50:	0751      	lsls	r1, r2, #29
 801ef52:	d5f7      	bpl.n	801ef44 <ip4_route+0x4>
 801ef54:	6859      	ldr	r1, [r3, #4]
 801ef56:	2900      	cmp	r1, #0
 801ef58:	d0f4      	beq.n	801ef44 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ef5a:	6804      	ldr	r4, [r0, #0]
 801ef5c:	689d      	ldr	r5, [r3, #8]
 801ef5e:	4061      	eors	r1, r4
 801ef60:	4229      	tst	r1, r5
 801ef62:	d004      	beq.n	801ef6e <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ef64:	0792      	lsls	r2, r2, #30
 801ef66:	d4ed      	bmi.n	801ef44 <ip4_route+0x4>
 801ef68:	68da      	ldr	r2, [r3, #12]
 801ef6a:	4294      	cmp	r4, r2
 801ef6c:	d1ea      	bne.n	801ef44 <ip4_route+0x4>
}
 801ef6e:	4618      	mov	r0, r3
 801ef70:	bc30      	pop	{r4, r5}
 801ef72:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ef74:	4b0c      	ldr	r3, [pc, #48]	; (801efa8 <ip4_route+0x68>)
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	b153      	cbz	r3, 801ef90 <ip4_route+0x50>
 801ef7a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801ef7e:	f002 0205 	and.w	r2, r2, #5
 801ef82:	2a05      	cmp	r2, #5
 801ef84:	d104      	bne.n	801ef90 <ip4_route+0x50>
 801ef86:	685a      	ldr	r2, [r3, #4]
 801ef88:	b112      	cbz	r2, 801ef90 <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ef8a:	7802      	ldrb	r2, [r0, #0]
 801ef8c:	2a7f      	cmp	r2, #127	; 0x7f
 801ef8e:	d1ee      	bne.n	801ef6e <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 801ef90:	4906      	ldr	r1, [pc, #24]	; (801efac <ip4_route+0x6c>)
    return NULL;
 801ef92:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 801ef94:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 801ef98:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 801ef9a:	3201      	adds	r2, #1
}
 801ef9c:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 801ef9e:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 801efa2:	4770      	bx	lr
 801efa4:	20036788 	.word	0x20036788
 801efa8:	2003678c 	.word	0x2003678c
 801efac:	20036794 	.word	0x20036794

0801efb0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801efb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801efb4:	4d97      	ldr	r5, [pc, #604]	; (801f214 <ip4_input+0x264>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801efb6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 801efba:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 801efbe:	3301      	adds	r3, #1
 801efc0:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 801efc4:	f898 3000 	ldrb.w	r3, [r8]
 801efc8:	091a      	lsrs	r2, r3, #4
 801efca:	2a04      	cmp	r2, #4
 801efcc:	d00e      	beq.n	801efec <ip4_input+0x3c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801efce:	f7f8 faf1 	bl	80175b4 <pbuf_free>
    IP_STATS_INC(ip.err);
 801efd2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801efd6:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 801efda:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801efdc:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 801efde:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 801efe2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 801efe6:	2000      	movs	r0, #0
 801efe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801efec:	f003 030f 	and.w	r3, r3, #15
 801eff0:	4604      	mov	r4, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801eff2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801eff6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801eff8:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801effc:	f7f6 fc86 	bl	801590c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 801f000:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f002:	464e      	mov	r6, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f004:	4682      	mov	sl, r0
  if (iphdr_len < p->tot_len) {
 801f006:	4283      	cmp	r3, r0
 801f008:	d834      	bhi.n	801f074 <ip4_input+0xc4>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f00a:	8963      	ldrh	r3, [r4, #10]
 801f00c:	42b3      	cmp	r3, r6
 801f00e:	d321      	bcc.n	801f054 <ip4_input+0xa4>
 801f010:	8923      	ldrh	r3, [r4, #8]
 801f012:	4553      	cmp	r3, sl
 801f014:	d31e      	bcc.n	801f054 <ip4_input+0xa4>
 801f016:	2e13      	cmp	r6, #19
 801f018:	d91c      	bls.n	801f054 <ip4_input+0xa4>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f01a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801f01e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 801f21c <ip4_input+0x26c>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f022:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f026:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f02a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f02c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 801f030:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f034:	f000 80b4 	beq.w	801f1a0 <ip4_input+0x1f0>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f038:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 801f03c:	07d2      	lsls	r2, r2, #31
 801f03e:	d523      	bpl.n	801f088 <ip4_input+0xd8>
 801f040:	4638      	mov	r0, r7
 801f042:	f7ff ff67 	bl	801ef14 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 801f046:	b1e8      	cbz	r0, 801f084 <ip4_input+0xd4>
 801f048:	f8da 0010 	ldr.w	r0, [sl, #16]
 801f04c:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f04e:	2800      	cmp	r0, #0
 801f050:	d048      	beq.n	801f0e4 <ip4_input+0x134>
 801f052:	e039      	b.n	801f0c8 <ip4_input+0x118>
    pbuf_free(p);
 801f054:	4620      	mov	r0, r4
 801f056:	f7f8 faad 	bl	80175b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801f05a:	f8b5 2052 	ldrh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801f05e:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
}
 801f062:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 801f064:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 801f066:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 801f068:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 801f06c:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
}
 801f070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 801f074:	4601      	mov	r1, r0
 801f076:	4620      	mov	r0, r4
 801f078:	f7f8 fba8 	bl	80177cc <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f07c:	8963      	ldrh	r3, [r4, #10]
 801f07e:	42b3      	cmp	r3, r6
 801f080:	d2c6      	bcs.n	801f010 <ip4_input+0x60>
 801f082:	e7e7      	b.n	801f054 <ip4_input+0xa4>
 801f084:	f8da 3014 	ldr.w	r3, [sl, #20]
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f088:	b2db      	uxtb	r3, r3
 801f08a:	2b7f      	cmp	r3, #127	; 0x7f
 801f08c:	d011      	beq.n	801f0b2 <ip4_input+0x102>
        NETIF_FOREACH(netif) {
 801f08e:	4b62      	ldr	r3, [pc, #392]	; (801f218 <ip4_input+0x268>)
 801f090:	681e      	ldr	r6, [r3, #0]
 801f092:	b176      	cbz	r6, 801f0b2 <ip4_input+0x102>
          if (netif == inp) {
 801f094:	42b7      	cmp	r7, r6
 801f096:	4630      	mov	r0, r6
 801f098:	d008      	beq.n	801f0ac <ip4_input+0xfc>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f09a:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 801f09e:	07db      	lsls	r3, r3, #31
 801f0a0:	d504      	bpl.n	801f0ac <ip4_input+0xfc>
 801f0a2:	f7ff ff37 	bl	801ef14 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 801f0a6:	2800      	cmp	r0, #0
 801f0a8:	f040 8097 	bne.w	801f1da <ip4_input+0x22a>
        NETIF_FOREACH(netif) {
 801f0ac:	6836      	ldr	r6, [r6, #0]
 801f0ae:	2e00      	cmp	r6, #0
 801f0b0:	d1f0      	bne.n	801f094 <ip4_input+0xe4>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801f0b2:	f898 3009 	ldrb.w	r3, [r8, #9]
 801f0b6:	2b11      	cmp	r3, #17
 801f0b8:	f000 8086 	beq.w	801f1c8 <ip4_input+0x218>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f0bc:	f8da 0010 	ldr.w	r0, [sl, #16]
 801f0c0:	2800      	cmp	r0, #0
 801f0c2:	f000 809e 	beq.w	801f202 <ip4_input+0x252>
 801f0c6:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f0c8:	4639      	mov	r1, r7
 801f0ca:	f000 f965 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801f0ce:	2800      	cmp	r0, #0
 801f0d0:	d171      	bne.n	801f1b6 <ip4_input+0x206>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f0d2:	f8da 3010 	ldr.w	r3, [sl, #16]
 801f0d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f0da:	2be0      	cmp	r3, #224	; 0xe0
 801f0dc:	d06b      	beq.n	801f1b6 <ip4_input+0x206>
  if (netif == NULL) {
 801f0de:	2e00      	cmp	r6, #0
 801f0e0:	f000 808f 	beq.w	801f202 <ip4_input+0x252>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f0e4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801f0e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801f0ec:	b143      	cbz	r3, 801f100 <ip4_input+0x150>
    p = ip4_reass(p);
 801f0ee:	4620      	mov	r0, r4
 801f0f0:	f000 fb56 	bl	801f7a0 <ip4_reass>
    if (p == NULL) {
 801f0f4:	4604      	mov	r4, r0
 801f0f6:	2800      	cmp	r0, #0
 801f0f8:	f43f af75 	beq.w	801efe6 <ip4_input+0x36>
    iphdr = (const struct ip_hdr *)p->payload;
 801f0fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 801f100:	f8ca 6000 	str.w	r6, [sl]
  raw_status = raw_input(p, inp);
 801f104:	4639      	mov	r1, r7
  ip_data.current_input_netif = inp;
 801f106:	f8ca 7004 	str.w	r7, [sl, #4]
  raw_status = raw_input(p, inp);
 801f10a:	4620      	mov	r0, r4
  ip_data.current_ip4_header = iphdr;
 801f10c:	f8ca 8008 	str.w	r8, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f110:	f898 3000 	ldrb.w	r3, [r8]
 801f114:	f003 030f 	and.w	r3, r3, #15
 801f118:	009b      	lsls	r3, r3, #2
 801f11a:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 801f11e:	f7f8 fe07 	bl	8017d30 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 801f122:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 801f124:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 801f126:	d02f      	beq.n	801f188 <ip4_input+0x1d8>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f128:	4649      	mov	r1, r9
 801f12a:	4620      	mov	r0, r4
 801f12c:	f7f8 fa06 	bl	801753c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 801f130:	f898 3009 	ldrb.w	r3, [r8, #9]
 801f134:	2b06      	cmp	r3, #6
 801f136:	d05f      	beq.n	801f1f8 <ip4_input+0x248>
 801f138:	2b11      	cmp	r3, #17
 801f13a:	d058      	beq.n	801f1ee <ip4_input+0x23e>
 801f13c:	2b01      	cmp	r3, #1
 801f13e:	d051      	beq.n	801f1e4 <ip4_input+0x234>
        if (raw_status == RAW_INPUT_DELIVERED) {
 801f140:	f1bb 0f02 	cmp.w	fp, #2
 801f144:	d01d      	beq.n	801f182 <ip4_input+0x1d2>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f146:	4631      	mov	r1, r6
 801f148:	f8da 0014 	ldr.w	r0, [sl, #20]
 801f14c:	f000 f924 	bl	801f398 <ip4_addr_isbroadcast_u32>
 801f150:	b968      	cbnz	r0, 801f16e <ip4_input+0x1be>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f152:	f8da 3014 	ldr.w	r3, [sl, #20]
 801f156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f15a:	2be0      	cmp	r3, #224	; 0xe0
 801f15c:	d007      	beq.n	801f16e <ip4_input+0x1be>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f15e:	4649      	mov	r1, r9
 801f160:	4620      	mov	r0, r4
 801f162:	f7f8 fa1f 	bl	80175a4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f166:	2102      	movs	r1, #2
 801f168:	4620      	mov	r0, r4
 801f16a:	f7ff fec7 	bl	801eefc <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 801f16e:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801f172:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 801f176:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 801f178:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 801f17a:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 801f17e:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
        pbuf_free(p);
 801f182:	4620      	mov	r0, r4
 801f184:	f7f8 fa16 	bl	80175b4 <pbuf_free>
  ip_data.current_netif = NULL;
 801f188:	2300      	movs	r3, #0
}
 801f18a:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 801f18c:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 801f190:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f194:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f198:	e9ca 3304 	strd	r3, r3, [sl, #16]
}
 801f19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f1a0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 801f1a4:	07d9      	lsls	r1, r3, #31
 801f1a6:	d584      	bpl.n	801f0b2 <ip4_input+0x102>
 801f1a8:	687b      	ldr	r3, [r7, #4]
 801f1aa:	2b00      	cmp	r3, #0
 801f1ac:	d081      	beq.n	801f0b2 <ip4_input+0x102>
 801f1ae:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f1b0:	2800      	cmp	r0, #0
 801f1b2:	d097      	beq.n	801f0e4 <ip4_input+0x134>
 801f1b4:	e788      	b.n	801f0c8 <ip4_input+0x118>
      pbuf_free(p);
 801f1b6:	4620      	mov	r0, r4
 801f1b8:	f7f8 f9fc 	bl	80175b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801f1bc:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 801f1c0:	3301      	adds	r3, #1
 801f1c2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      return ERR_OK;
 801f1c6:	e70e      	b.n	801efe6 <ip4_input+0x36>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801f1c8:	eb08 0309 	add.w	r3, r8, r9
 801f1cc:	885b      	ldrh	r3, [r3, #2]
 801f1ce:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801f1d2:	f47f af73 	bne.w	801f0bc <ip4_input+0x10c>
 801f1d6:	463e      	mov	r6, r7
 801f1d8:	e781      	b.n	801f0de <ip4_input+0x12e>
 801f1da:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801f1de:	2800      	cmp	r0, #0
 801f1e0:	d080      	beq.n	801f0e4 <ip4_input+0x134>
 801f1e2:	e771      	b.n	801f0c8 <ip4_input+0x118>
        icmp_input(p, inp);
 801f1e4:	4639      	mov	r1, r7
 801f1e6:	4620      	mov	r0, r4
 801f1e8:	f7ff fd8a 	bl	801ed00 <icmp_input>
        break;
 801f1ec:	e7cc      	b.n	801f188 <ip4_input+0x1d8>
        udp_input(p, inp);
 801f1ee:	4639      	mov	r1, r7
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	f7fd f953 	bl	801c49c <udp_input>
        break;
 801f1f6:	e7c7      	b.n	801f188 <ip4_input+0x1d8>
        tcp_input(p, inp);
 801f1f8:	4639      	mov	r1, r7
 801f1fa:	4620      	mov	r0, r4
 801f1fc:	f7fa fee8 	bl	8019fd0 <tcp_input>
        break;
 801f200:	e7c2      	b.n	801f188 <ip4_input+0x1d8>
      IP_STATS_INC(ip.drop);
 801f202:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 801f206:	4620      	mov	r0, r4
      IP_STATS_INC(ip.drop);
 801f208:	3301      	adds	r3, #1
 801f20a:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 801f20e:	f7f8 f9d1 	bl	80175b4 <pbuf_free>
    return ERR_OK;
 801f212:	e6e8      	b.n	801efe6 <ip4_input+0x36>
 801f214:	20036794 	.word	0x20036794
 801f218:	20036788 	.word	0x20036788
 801f21c:	2002709c 	.word	0x2002709c

0801f220 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f224:	461d      	mov	r5, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f226:	7b83      	ldrb	r3, [r0, #14]
{
 801f228:	b083      	sub	sp, #12
 801f22a:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f22c:	2b01      	cmp	r3, #1
{
 801f22e:	4689      	mov	r9, r1
 801f230:	4617      	mov	r7, r2
 801f232:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 801f236:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 801f23a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f23e:	d15f      	bne.n	801f300 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f240:	2f00      	cmp	r7, #0
 801f242:	d066      	beq.n	801f312 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f244:	2114      	movs	r1, #20
 801f246:	4620      	mov	r0, r4
 801f248:	f7f8 f974 	bl	8017534 <pbuf_add_header>
 801f24c:	2800      	cmp	r0, #0
 801f24e:	d17a      	bne.n	801f346 <ip4_output_if_src+0x126>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f250:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 801f252:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f254:	2b13      	cmp	r3, #19
 801f256:	d964      	bls.n	801f322 <ip4_output_if_src+0x102>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f258:	7235      	strb	r5, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801f25a:	ea4b 2505 	orr.w	r5, fp, r5, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 801f25e:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801f262:	ea4f 210a 	mov.w	r1, sl, lsl #8
    ip4_addr_copy(iphdr->dest, *dest);
 801f266:	683a      	ldr	r2, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801f268:	122b      	asrs	r3, r5, #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801f26a:	f041 0145 	orr.w	r1, r1, #69	; 0x45
    IPH_TOS_SET(iphdr, tos);
 801f26e:	f886 a001 	strb.w	sl, [r6, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 801f272:	0c10      	lsrs	r0, r2, #16
    ip4_addr_copy(iphdr->dest, *dest);
 801f274:	6132      	str	r2, [r6, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 801f276:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f27a:	2345      	movs	r3, #69	; 0x45
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801f27c:	fa10 f282 	uxtah	r2, r0, r2
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f280:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 801f370 <ip4_output_if_src+0x150>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f284:	7033      	strb	r3, [r6, #0]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801f286:	440a      	add	r2, r1
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f288:	8920      	ldrh	r0, [r4, #8]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 801f28a:	fa12 f585 	uxtah	r5, r2, r5
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f28e:	f7f6 fb3d 	bl	801590c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 801f292:	2200      	movs	r2, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f294:	4603      	mov	r3, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f296:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 801f29a:	71b2      	strb	r2, [r6, #6]
    chk_sum += iphdr->_len;
 801f29c:	441d      	add	r5, r3
    IPH_OFFSET_SET(iphdr, 0);
 801f29e:	71f2      	strb	r2, [r6, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f2a0:	8073      	strh	r3, [r6, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f2a2:	f7f6 fb33 	bl	801590c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f2a6:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f2aa:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 801f2ac:	1c5a      	adds	r2, r3, #1
    chk_sum += iphdr->_id;
 801f2ae:	1943      	adds	r3, r0, r5
    ++ip_id;
 801f2b0:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 801f2b4:	f1b9 0f00 	cmp.w	r9, #0
 801f2b8:	d03b      	beq.n	801f332 <ip4_output_if_src+0x112>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f2ba:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 801f2be:	fa13 f382 	uxtah	r3, r3, r2
 801f2c2:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 801f2c4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 801f2c8:	b29a      	uxth	r2, r3
 801f2ca:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 801f2ce:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 801f2d2:	43db      	mvns	r3, r3
 801f2d4:	8173      	strh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 801f2d6:	4a20      	ldr	r2, [pc, #128]	; (801f358 <ip4_output_if_src+0x138>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f2d8:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 801f2dc:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 801f2e0:	3301      	adds	r3, #1
 801f2e2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 801f2e6:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f2e8:	b111      	cbz	r1, 801f2f0 <ip4_output_if_src+0xd0>
 801f2ea:	8923      	ldrh	r3, [r4, #8]
 801f2ec:	428b      	cmp	r3, r1
 801f2ee:	d823      	bhi.n	801f338 <ip4_output_if_src+0x118>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f2f0:	4621      	mov	r1, r4
 801f2f2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801f2f6:	4640      	mov	r0, r8
 801f2f8:	4798      	blx	r3
}
 801f2fa:	b003      	add	sp, #12
 801f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f300:	4b16      	ldr	r3, [pc, #88]	; (801f35c <ip4_output_if_src+0x13c>)
 801f302:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f306:	4916      	ldr	r1, [pc, #88]	; (801f360 <ip4_output_if_src+0x140>)
 801f308:	4816      	ldr	r0, [pc, #88]	; (801f364 <ip4_output_if_src+0x144>)
 801f30a:	f002 fa6b 	bl	80217e4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 801f30e:	2f00      	cmp	r7, #0
 801f310:	d198      	bne.n	801f244 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 801f312:	8963      	ldrh	r3, [r4, #10]
 801f314:	2b13      	cmp	r3, #19
 801f316:	d916      	bls.n	801f346 <ip4_output_if_src+0x126>
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f318:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 801f31a:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f31c:	691b      	ldr	r3, [r3, #16]
 801f31e:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 801f320:	e7d9      	b.n	801f2d6 <ip4_output_if_src+0xb6>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f322:	4b0e      	ldr	r3, [pc, #56]	; (801f35c <ip4_output_if_src+0x13c>)
 801f324:	f44f 7262 	mov.w	r2, #904	; 0x388
 801f328:	490f      	ldr	r1, [pc, #60]	; (801f368 <ip4_output_if_src+0x148>)
 801f32a:	480e      	ldr	r0, [pc, #56]	; (801f364 <ip4_output_if_src+0x144>)
 801f32c:	f002 fa5a 	bl	80217e4 <iprintf>
 801f330:	e792      	b.n	801f258 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f332:	4a0e      	ldr	r2, [pc, #56]	; (801f36c <ip4_output_if_src+0x14c>)
 801f334:	6812      	ldr	r2, [r2, #0]
 801f336:	e7c2      	b.n	801f2be <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 801f338:	4641      	mov	r1, r8
 801f33a:	4620      	mov	r0, r4
 801f33c:	f000 fc70 	bl	801fc20 <ip4_frag>
}
 801f340:	b003      	add	sp, #12
 801f342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      IP_STATS_INC(ip.err);
 801f346:	4a04      	ldr	r2, [pc, #16]	; (801f358 <ip4_output_if_src+0x138>)
      return ERR_BUF;
 801f348:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 801f34c:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 801f350:	3301      	adds	r3, #1
 801f352:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 801f356:	e7d0      	b.n	801f2fa <ip4_output_if_src+0xda>
 801f358:	20036794 	.word	0x20036794
 801f35c:	08040c1c 	.word	0x08040c1c
 801f360:	08040c50 	.word	0x08040c50
 801f364:	08027fec 	.word	0x08027fec
 801f368:	08040c5c 	.word	0x08040c5c
 801f36c:	08040cd4 	.word	0x08040cd4
 801f370:	20022d16 	.word	0x20022d16

0801f374 <ip4_output_if>:
{
 801f374:	b4f0      	push	{r4, r5, r6, r7}
 801f376:	9c06      	ldr	r4, [sp, #24]
 801f378:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801f37c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f380:	b11a      	cbz	r2, 801f38a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 801f382:	b109      	cbz	r1, 801f388 <ip4_output_if+0x14>
 801f384:	680f      	ldr	r7, [r1, #0]
 801f386:	b907      	cbnz	r7, 801f38a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 801f388:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f38a:	9504      	str	r5, [sp, #16]
 801f38c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 801f390:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f392:	f7ff bf45 	b.w	801f220 <ip4_output_if_src>
 801f396:	bf00      	nop

0801f398 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f398:	1e43      	subs	r3, r0, #1
{
 801f39a:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 801f39c:	3303      	adds	r3, #3
 801f39e:	d815      	bhi.n	801f3cc <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f3a0:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 801f3a4:	f013 0002 	ands.w	r0, r3, #2
 801f3a8:	d00f      	beq.n	801f3ca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f3aa:	6848      	ldr	r0, [r1, #4]
 801f3ac:	4290      	cmp	r0, r2
 801f3ae:	d00b      	beq.n	801f3c8 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f3b0:	688b      	ldr	r3, [r1, #8]
 801f3b2:	4050      	eors	r0, r2
 801f3b4:	4218      	tst	r0, r3
 801f3b6:	d107      	bne.n	801f3c8 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f3b8:	ea22 0203 	bic.w	r2, r2, r3
 801f3bc:	43d8      	mvns	r0, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 801f3be:	1a10      	subs	r0, r2, r0
 801f3c0:	fab0 f080 	clz	r0, r0
 801f3c4:	0940      	lsrs	r0, r0, #5
 801f3c6:	4770      	bx	lr
 801f3c8:	2000      	movs	r0, #0
  }
}
 801f3ca:	4770      	bx	lr
    return 1;
 801f3cc:	2001      	movs	r0, #1
 801f3ce:	4770      	bx	lr

0801f3d0 <ip4addr_aton>:
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801f3d0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 801f520 <ip4addr_aton+0x150>
  c = *cp;
 801f3d4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 801f3d6:	f81c 2003 	ldrb.w	r2, [ip, r3]
 801f3da:	0752      	lsls	r2, r2, #29
 801f3dc:	f140 808e 	bpl.w	801f4fc <ip4addr_aton+0x12c>
{
 801f3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e4:	b084      	sub	sp, #16
 801f3e6:	460e      	mov	r6, r1
  u32_t *pp = parts;
 801f3e8:	46e9      	mov	r9, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801f3ea:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 801f3ee:	46ce      	mov	lr, r9
    if (c == '0') {
 801f3f0:	2b30      	cmp	r3, #48	; 0x30
 801f3f2:	d030      	beq.n	801f456 <ip4addr_aton+0x86>
    base = 10;
 801f3f4:	210a      	movs	r1, #10
 801f3f6:	2400      	movs	r4, #0
 801f3f8:	e003      	b.n	801f402 <ip4addr_aton+0x32>
        val = (val * base) + (u32_t)(c - '0');
 801f3fa:	f1a7 0430 	sub.w	r4, r7, #48	; 0x30
        c = *++cp;
 801f3fe:	7843      	ldrb	r3, [r0, #1]
 801f400:	3001      	adds	r0, #1
      if (lwip_isdigit(c)) {
 801f402:	f81c 2003 	ldrb.w	r2, [ip, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801f406:	f103 050a 	add.w	r5, r3, #10
        val = (val * base) + (u32_t)(c - '0');
 801f40a:	fb04 3701 	mla	r7, r4, r1, r3
      if (lwip_isdigit(c)) {
 801f40e:	f012 0f04 	tst.w	r2, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801f412:	f002 0a03 	and.w	sl, r2, #3
      if (lwip_isdigit(c)) {
 801f416:	d1f0      	bne.n	801f3fa <ip4addr_aton+0x2a>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801f418:	2910      	cmp	r1, #16
 801f41a:	d10c      	bne.n	801f436 <ip4addr_aton+0x66>
 801f41c:	f012 0f44 	tst.w	r2, #68	; 0x44
 801f420:	d009      	beq.n	801f436 <ip4addr_aton+0x66>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801f422:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 801f426:	7843      	ldrb	r3, [r0, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801f428:	bf0c      	ite	eq
 801f42a:	2261      	moveq	r2, #97	; 0x61
 801f42c:	2241      	movne	r2, #65	; 0x41
 801f42e:	1aad      	subs	r5, r5, r2
 801f430:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
        c = *++cp;
 801f434:	e7e4      	b.n	801f400 <ip4addr_aton+0x30>
    if (c == '.') {
 801f436:	2b2e      	cmp	r3, #46	; 0x2e
 801f438:	d119      	bne.n	801f46e <ip4addr_aton+0x9e>
      if (pp >= parts + 3) {
 801f43a:	45c6      	cmp	lr, r8
 801f43c:	d007      	beq.n	801f44e <ip4addr_aton+0x7e>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 801f43e:	7843      	ldrb	r3, [r0, #1]
 801f440:	3001      	adds	r0, #1
      *pp++ = val;
 801f442:	f84e 4b04 	str.w	r4, [lr], #4
    if (!lwip_isdigit(c)) {
 801f446:	f81c 2003 	ldrb.w	r2, [ip, r3]
 801f44a:	0752      	lsls	r2, r2, #29
 801f44c:	d4d0      	bmi.n	801f3f0 <ip4addr_aton+0x20>
      return 0;
 801f44e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 801f450:	b004      	add	sp, #16
 801f452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 801f456:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 801f458:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 801f45c:	2a58      	cmp	r2, #88	; 0x58
 801f45e:	d002      	beq.n	801f466 <ip4addr_aton+0x96>
      c = *++cp;
 801f460:	3001      	adds	r0, #1
        base = 8;
 801f462:	2108      	movs	r1, #8
 801f464:	e7c7      	b.n	801f3f6 <ip4addr_aton+0x26>
        c = *++cp;
 801f466:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 801f468:	2110      	movs	r1, #16
        c = *++cp;
 801f46a:	3002      	adds	r0, #2
 801f46c:	e7c3      	b.n	801f3f6 <ip4addr_aton+0x26>
  if (c != '\0' && !lwip_isspace(c)) {
 801f46e:	b10b      	cbz	r3, 801f474 <ip4addr_aton+0xa4>
 801f470:	0713      	lsls	r3, r2, #28
 801f472:	d5ec      	bpl.n	801f44e <ip4addr_aton+0x7e>
  switch (pp - parts + 1) {
 801f474:	ebae 0009 	sub.w	r0, lr, r9
 801f478:	1080      	asrs	r0, r0, #2
 801f47a:	3001      	adds	r0, #1
 801f47c:	2804      	cmp	r0, #4
 801f47e:	d841      	bhi.n	801f504 <ip4addr_aton+0x134>
 801f480:	a301      	add	r3, pc, #4	; (adr r3, 801f488 <ip4addr_aton+0xb8>)
 801f482:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 801f486:	bf00      	nop
 801f488:	0801f451 	.word	0x0801f451
 801f48c:	0801f4bf 	.word	0x0801f4bf
 801f490:	0801f4eb 	.word	0x0801f4eb
 801f494:	0801f4cf 	.word	0x0801f4cf
 801f498:	0801f49d 	.word	0x0801f49d
      if (val > 0xff) {
 801f49c:	2cff      	cmp	r4, #255	; 0xff
 801f49e:	d8d6      	bhi.n	801f44e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801f4a0:	9900      	ldr	r1, [sp, #0]
 801f4a2:	29ff      	cmp	r1, #255	; 0xff
 801f4a4:	d8d3      	bhi.n	801f44e <ip4addr_aton+0x7e>
 801f4a6:	9b01      	ldr	r3, [sp, #4]
 801f4a8:	2bff      	cmp	r3, #255	; 0xff
 801f4aa:	d8d0      	bhi.n	801f44e <ip4addr_aton+0x7e>
 801f4ac:	9a02      	ldr	r2, [sp, #8]
 801f4ae:	2aff      	cmp	r2, #255	; 0xff
 801f4b0:	d8cd      	bhi.n	801f44e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801f4b2:	041b      	lsls	r3, r3, #16
 801f4b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801f4b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801f4bc:	431c      	orrs	r4, r3
  if (addr) {
 801f4be:	b1fe      	cbz	r6, 801f500 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801f4c0:	4620      	mov	r0, r4
 801f4c2:	f7f6 fa27 	bl	8015914 <lwip_htonl>
 801f4c6:	4603      	mov	r3, r0
  return 1;
 801f4c8:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801f4ca:	6033      	str	r3, [r6, #0]
 801f4cc:	e7c0      	b.n	801f450 <ip4addr_aton+0x80>
      if (val > 0xffff) {
 801f4ce:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 801f4d2:	d2bc      	bcs.n	801f44e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801f4d4:	9a00      	ldr	r2, [sp, #0]
 801f4d6:	2aff      	cmp	r2, #255	; 0xff
 801f4d8:	d8b9      	bhi.n	801f44e <ip4addr_aton+0x7e>
 801f4da:	9b01      	ldr	r3, [sp, #4]
 801f4dc:	2bff      	cmp	r3, #255	; 0xff
 801f4de:	d8b6      	bhi.n	801f44e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16);
 801f4e0:	041b      	lsls	r3, r3, #16
 801f4e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801f4e6:	431c      	orrs	r4, r3
      break;
 801f4e8:	e7e9      	b.n	801f4be <ip4addr_aton+0xee>
      if (val > 0xffffffUL) {
 801f4ea:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 801f4ee:	d2ae      	bcs.n	801f44e <ip4addr_aton+0x7e>
      if (parts[0] > 0xff) {
 801f4f0:	9b00      	ldr	r3, [sp, #0]
 801f4f2:	2bff      	cmp	r3, #255	; 0xff
 801f4f4:	d8ab      	bhi.n	801f44e <ip4addr_aton+0x7e>
      val |= parts[0] << 24;
 801f4f6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 801f4fa:	e7e0      	b.n	801f4be <ip4addr_aton+0xee>
      return 0;
 801f4fc:	2000      	movs	r0, #0
}
 801f4fe:	4770      	bx	lr
  return 1;
 801f500:	2001      	movs	r0, #1
 801f502:	e7a5      	b.n	801f450 <ip4addr_aton+0x80>
      LWIP_ASSERT("unhandled", 0);
 801f504:	4b03      	ldr	r3, [pc, #12]	; (801f514 <ip4addr_aton+0x144>)
 801f506:	22f9      	movs	r2, #249	; 0xf9
 801f508:	4903      	ldr	r1, [pc, #12]	; (801f518 <ip4addr_aton+0x148>)
 801f50a:	4804      	ldr	r0, [pc, #16]	; (801f51c <ip4addr_aton+0x14c>)
 801f50c:	f002 f96a 	bl	80217e4 <iprintf>
      break;
 801f510:	e7d5      	b.n	801f4be <ip4addr_aton+0xee>
 801f512:	bf00      	nop
 801f514:	08040c8c 	.word	0x08040c8c
 801f518:	08040cc8 	.word	0x08040cc8
 801f51c:	08027fec 	.word	0x08027fec
 801f520:	08040f31 	.word	0x08040f31

0801f524 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801f524:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801f526:	4b0f      	ldr	r3, [pc, #60]	; (801f564 <ip_reass_dequeue_datagram+0x40>)
{
 801f528:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 801f52a:	681a      	ldr	r2, [r3, #0]
 801f52c:	4282      	cmp	r2, r0
 801f52e:	d009      	beq.n	801f544 <ip_reass_dequeue_datagram+0x20>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f530:	460d      	mov	r5, r1
 801f532:	b179      	cbz	r1, 801f554 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 801f534:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801f536:	4621      	mov	r1, r4
 801f538:	2005      	movs	r0, #5
    prev->next = ipr->next;
 801f53a:	602b      	str	r3, [r5, #0]
}
 801f53c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801f540:	f7f7 bd68 	b.w	8017014 <memp_free>
    reassdatagrams = ipr->next;
 801f544:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 801f546:	4621      	mov	r1, r4
 801f548:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 801f54a:	601a      	str	r2, [r3, #0]
}
 801f54c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 801f550:	f7f7 bd60 	b.w	8017014 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801f554:	4b04      	ldr	r3, [pc, #16]	; (801f568 <ip_reass_dequeue_datagram+0x44>)
 801f556:	f240 1245 	movw	r2, #325	; 0x145
 801f55a:	4904      	ldr	r1, [pc, #16]	; (801f56c <ip_reass_dequeue_datagram+0x48>)
 801f55c:	4804      	ldr	r0, [pc, #16]	; (801f570 <ip_reass_dequeue_datagram+0x4c>)
 801f55e:	f002 f941 	bl	80217e4 <iprintf>
 801f562:	e7e7      	b.n	801f534 <ip_reass_dequeue_datagram+0x10>
 801f564:	20022d1c 	.word	0x20022d1c
 801f568:	08040cdc 	.word	0x08040cdc
 801f56c:	08040d18 	.word	0x08040d18
 801f570:	08027fec 	.word	0x08027fec

0801f574 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f574:	4281      	cmp	r1, r0
{
 801f576:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f57a:	4606      	mov	r6, r0
 801f57c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f57e:	d072      	beq.n	801f666 <ip_reass_free_complete_datagram+0xf2>
  if (prev != NULL) {
 801f580:	b147      	cbz	r7, 801f594 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801f582:	683b      	ldr	r3, [r7, #0]
 801f584:	42b3      	cmp	r3, r6
 801f586:	d005      	beq.n	801f594 <ip_reass_free_complete_datagram+0x20>
 801f588:	4b3a      	ldr	r3, [pc, #232]	; (801f674 <ip_reass_free_complete_datagram+0x100>)
 801f58a:	22ad      	movs	r2, #173	; 0xad
 801f58c:	493a      	ldr	r1, [pc, #232]	; (801f678 <ip_reass_free_complete_datagram+0x104>)
 801f58e:	483b      	ldr	r0, [pc, #236]	; (801f67c <ip_reass_free_complete_datagram+0x108>)
 801f590:	f002 f928 	bl	80217e4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801f594:	6875      	ldr	r5, [r6, #4]
 801f596:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 801f598:	889a      	ldrh	r2, [r3, #4]
 801f59a:	2a00      	cmp	r2, #0
 801f59c:	d03f      	beq.n	801f61e <ip_reass_free_complete_datagram+0xaa>
  u16_t pbufs_freed = 0;
 801f59e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f5a2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 801f674 <ip_reass_free_complete_datagram+0x100>
 801f5a6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 801f68c <ip_reass_free_complete_datagram+0x118>
 801f5aa:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801f67c <ip_reass_free_complete_datagram+0x108>
 801f5ae:	e005      	b.n	801f5bc <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 801f5b0:	4628      	mov	r0, r5
  while (p != NULL) {
 801f5b2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 801f5b4:	f7f7 fffe 	bl	80175b4 <pbuf_free>
  while (p != NULL) {
 801f5b8:	b1b4      	cbz	r4, 801f5e8 <ip_reass_free_complete_datagram+0x74>
 801f5ba:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 801f5bc:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 801f5be:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 801f5c0:	f7f8 f95c 	bl	801787c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f5c4:	4458      	add	r0, fp
 801f5c6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801f5ca:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801f5ce:	dbef      	blt.n	801f5b0 <ip_reass_free_complete_datagram+0x3c>
 801f5d0:	4653      	mov	r3, sl
 801f5d2:	22cc      	movs	r2, #204	; 0xcc
 801f5d4:	4649      	mov	r1, r9
 801f5d6:	4640      	mov	r0, r8
 801f5d8:	f002 f904 	bl	80217e4 <iprintf>
    pbuf_free(pcur);
 801f5dc:	4628      	mov	r0, r5
  while (p != NULL) {
 801f5de:	4625      	mov	r5, r4
    pbuf_free(pcur);
 801f5e0:	f7f7 ffe8 	bl	80175b4 <pbuf_free>
  while (p != NULL) {
 801f5e4:	2c00      	cmp	r4, #0
 801f5e6:	d1e8      	bne.n	801f5ba <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f5e8:	4c25      	ldr	r4, [pc, #148]	; (801f680 <ip_reass_free_complete_datagram+0x10c>)
  ip_reass_dequeue_datagram(ipr, prev);
 801f5ea:	4639      	mov	r1, r7
 801f5ec:	4630      	mov	r0, r6
 801f5ee:	f7ff ff99 	bl	801f524 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f5f2:	8823      	ldrh	r3, [r4, #0]
 801f5f4:	455b      	cmp	r3, fp
 801f5f6:	d305      	bcc.n	801f604 <ip_reass_free_complete_datagram+0x90>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f5f8:	eba3 030b 	sub.w	r3, r3, fp
}
 801f5fc:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f5fe:	8023      	strh	r3, [r4, #0]
}
 801f600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801f604:	4b1b      	ldr	r3, [pc, #108]	; (801f674 <ip_reass_free_complete_datagram+0x100>)
 801f606:	22d2      	movs	r2, #210	; 0xd2
 801f608:	491e      	ldr	r1, [pc, #120]	; (801f684 <ip_reass_free_complete_datagram+0x110>)
 801f60a:	481c      	ldr	r0, [pc, #112]	; (801f67c <ip_reass_free_complete_datagram+0x108>)
 801f60c:	f002 f8ea 	bl	80217e4 <iprintf>
 801f610:	8823      	ldrh	r3, [r4, #0]
}
 801f612:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801f614:	eba3 030b 	sub.w	r3, r3, fp
 801f618:	8023      	strh	r3, [r4, #0]
}
 801f61a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f61e:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 801f620:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f622:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 801f624:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f626:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801f628:	f852 4f08 	ldr.w	r4, [r2, #8]!
 801f62c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801f630:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801f634:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 801f638:	601c      	str	r4, [r3, #0]
 801f63a:	f8c3 8004 	str.w	r8, [r3, #4]
 801f63e:	f8c3 e008 	str.w	lr, [r3, #8]
 801f642:	f8c3 c00c 	str.w	ip, [r3, #12]
 801f646:	6914      	ldr	r4, [r2, #16]
 801f648:	611c      	str	r4, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801f64a:	f7ff fc5d 	bl	801ef08 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801f64e:	4628      	mov	r0, r5
 801f650:	f7f8 f914 	bl	801787c <pbuf_clen>
 801f654:	4683      	mov	fp, r0
    pbuf_free(p);
 801f656:	4628      	mov	r0, r5
 801f658:	f7f7 ffac 	bl	80175b4 <pbuf_free>
  p = ipr->p;
 801f65c:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 801f65e:	2d00      	cmp	r5, #0
 801f660:	d0c2      	beq.n	801f5e8 <ip_reass_free_complete_datagram+0x74>
 801f662:	686b      	ldr	r3, [r5, #4]
 801f664:	e79d      	b.n	801f5a2 <ip_reass_free_complete_datagram+0x2e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 801f666:	4b03      	ldr	r3, [pc, #12]	; (801f674 <ip_reass_free_complete_datagram+0x100>)
 801f668:	22ab      	movs	r2, #171	; 0xab
 801f66a:	4907      	ldr	r1, [pc, #28]	; (801f688 <ip_reass_free_complete_datagram+0x114>)
 801f66c:	4803      	ldr	r0, [pc, #12]	; (801f67c <ip_reass_free_complete_datagram+0x108>)
 801f66e:	f002 f8b9 	bl	80217e4 <iprintf>
 801f672:	e785      	b.n	801f580 <ip_reass_free_complete_datagram+0xc>
 801f674:	08040cdc 	.word	0x08040cdc
 801f678:	08040d40 	.word	0x08040d40
 801f67c:	08027fec 	.word	0x08027fec
 801f680:	20022d18 	.word	0x20022d18
 801f684:	08040d74 	.word	0x08040d74
 801f688:	08040d34 	.word	0x08040d34
 801f68c:	08040d54 	.word	0x08040d54

0801f690 <ip_reass_remove_oldest_datagram>:
{
 801f690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 801f694:	2700      	movs	r7, #0
 801f696:	f8df 8068 	ldr.w	r8, [pc, #104]	; 801f700 <ip_reass_remove_oldest_datagram+0x70>
{
 801f69a:	4605      	mov	r5, r0
 801f69c:	460e      	mov	r6, r1
    r = reassdatagrams;
 801f69e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 801f6a2:	b1f3      	cbz	r3, 801f6e2 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 801f6a4:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f6a6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 801f6aa:	4621      	mov	r1, r4
    prev = NULL;
 801f6ac:	46a4      	mov	ip, r4
    oldest = NULL;
 801f6ae:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f6b0:	695a      	ldr	r2, [r3, #20]
 801f6b2:	4572      	cmp	r2, lr
 801f6b4:	d018      	beq.n	801f6e8 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 801f6b6:	3401      	adds	r4, #1
        if (oldest == NULL) {
 801f6b8:	b120      	cbz	r0, 801f6c4 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 801f6ba:	f893 901f 	ldrb.w	r9, [r3, #31]
 801f6be:	7fc2      	ldrb	r2, [r0, #31]
 801f6c0:	4591      	cmp	r9, r2
 801f6c2:	d801      	bhi.n	801f6c8 <ip_reass_remove_oldest_datagram+0x38>
 801f6c4:	4661      	mov	r1, ip
 801f6c6:	4618      	mov	r0, r3
      if (r->next != NULL) {
 801f6c8:	681a      	ldr	r2, [r3, #0]
 801f6ca:	469c      	mov	ip, r3
 801f6cc:	4613      	mov	r3, r2
 801f6ce:	2a00      	cmp	r2, #0
 801f6d0:	d1ee      	bne.n	801f6b0 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 801f6d2:	b110      	cbz	r0, 801f6da <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801f6d4:	f7ff ff4e 	bl	801f574 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 801f6d8:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801f6da:	42b7      	cmp	r7, r6
 801f6dc:	da01      	bge.n	801f6e2 <ip_reass_remove_oldest_datagram+0x52>
 801f6de:	2c01      	cmp	r4, #1
 801f6e0:	dcdd      	bgt.n	801f69e <ip_reass_remove_oldest_datagram+0xe>
}
 801f6e2:	4638      	mov	r0, r7
 801f6e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801f6e8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801f6ec:	699a      	ldr	r2, [r3, #24]
 801f6ee:	454a      	cmp	r2, r9
 801f6f0:	d1e1      	bne.n	801f6b6 <ip_reass_remove_oldest_datagram+0x26>
 801f6f2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801f6f6:	88aa      	ldrh	r2, [r5, #4]
 801f6f8:	4591      	cmp	r9, r2
 801f6fa:	d1dc      	bne.n	801f6b6 <ip_reass_remove_oldest_datagram+0x26>
 801f6fc:	e7e4      	b.n	801f6c8 <ip_reass_remove_oldest_datagram+0x38>
 801f6fe:	bf00      	nop
 801f700:	20022d1c 	.word	0x20022d1c

0801f704 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f704:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801f706:	4604      	mov	r4, r0
 801f708:	b128      	cbz	r0, 801f716 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 801f70a:	4621      	mov	r1, r4
 801f70c:	2006      	movs	r0, #6
}
 801f70e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801f712:	f7f7 bc7f 	b.w	8017014 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 801f716:	4906      	ldr	r1, [pc, #24]	; (801f730 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f718:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801f71c:	4b05      	ldr	r3, [pc, #20]	; (801f734 <ip_frag_free_pbuf_custom_ref+0x30>)
 801f71e:	4806      	ldr	r0, [pc, #24]	; (801f738 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f720:	f002 f860 	bl	80217e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f724:	4621      	mov	r1, r4
 801f726:	2006      	movs	r0, #6
}
 801f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 801f72c:	f7f7 bc72 	b.w	8017014 <memp_free>
 801f730:	08040748 	.word	0x08040748
 801f734:	08040cdc 	.word	0x08040cdc
 801f738:	08027fec 	.word	0x08027fec

0801f73c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f73c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f73e:	4604      	mov	r4, r0
 801f740:	b140      	cbz	r0, 801f754 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 801f742:	6960      	ldr	r0, [r4, #20]
 801f744:	b108      	cbz	r0, 801f74a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 801f746:	f7f7 ff35 	bl	80175b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f74a:	4620      	mov	r0, r4
}
 801f74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 801f750:	f7ff bfd8 	b.w	801f704 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f754:	4b03      	ldr	r3, [pc, #12]	; (801f764 <ipfrag_free_pbuf_custom+0x28>)
 801f756:	f240 22ce 	movw	r2, #718	; 0x2ce
 801f75a:	4903      	ldr	r1, [pc, #12]	; (801f768 <ipfrag_free_pbuf_custom+0x2c>)
 801f75c:	4803      	ldr	r0, [pc, #12]	; (801f76c <ipfrag_free_pbuf_custom+0x30>)
 801f75e:	f002 f841 	bl	80217e4 <iprintf>
 801f762:	e7ee      	b.n	801f742 <ipfrag_free_pbuf_custom+0x6>
 801f764:	08040cdc 	.word	0x08040cdc
 801f768:	08040d98 	.word	0x08040d98
 801f76c:	08027fec 	.word	0x08027fec

0801f770 <ip_reass_tmr>:
{
 801f770:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 801f772:	4b0a      	ldr	r3, [pc, #40]	; (801f79c <ip_reass_tmr+0x2c>)
 801f774:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 801f776:	b140      	cbz	r0, 801f78a <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 801f778:	2400      	movs	r4, #0
    if (r->timer > 0) {
 801f77a:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 801f77c:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 801f77e:	b12b      	cbz	r3, 801f78c <ip_reass_tmr+0x1c>
 801f780:	4604      	mov	r4, r0
      r->timer--;
 801f782:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 801f784:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 801f786:	2800      	cmp	r0, #0
 801f788:	d1f7      	bne.n	801f77a <ip_reass_tmr+0xa>
}
 801f78a:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 801f78c:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 801f78e:	4621      	mov	r1, r4
 801f790:	f7ff fef0 	bl	801f574 <ip_reass_free_complete_datagram>
      r = r->next;
 801f794:	4628      	mov	r0, r5
  while (r != NULL) {
 801f796:	2800      	cmp	r0, #0
 801f798:	d1ef      	bne.n	801f77a <ip_reass_tmr+0xa>
 801f79a:	e7f6      	b.n	801f78a <ip_reass_tmr+0x1a>
 801f79c:	20022d1c 	.word	0x20022d1c

0801f7a0 <ip4_reass>:
{
 801f7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 801f7a4:	4dc1      	ldr	r5, [pc, #772]	; (801faac <ip4_reass+0x30c>)
{
 801f7a6:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 801f7a8:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
 801f7ac:	4606      	mov	r6, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 801f7ae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801f7b0:	3301      	adds	r3, #1
 801f7b2:	866b      	strh	r3, [r5, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f7b4:	f89b 3000 	ldrb.w	r3, [fp]
 801f7b8:	f003 030f 	and.w	r3, r3, #15
 801f7bc:	2b05      	cmp	r3, #5
 801f7be:	f040 8089 	bne.w	801f8d4 <ip4_reass+0x134>
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f7c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801f7c6:	f7f6 f8a1 	bl	801590c <lwip_htons>
 801f7ca:	4680      	mov	r8, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f7cc:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 801f7d0:	f7f6 f89c 	bl	801590c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801f7d4:	f89b 2000 	ldrb.w	r2, [fp]
 801f7d8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 801f7dc:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 801f7e0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 801f7e4:	d36b      	bcc.n	801f8be <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 801f7e6:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f7e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801fabc <ip4_reass+0x31c>
  clen = pbuf_clen(p);
 801f7ec:	4630      	mov	r0, r6
  len = (u16_t)(len - hlen);
 801f7ee:	b29b      	uxth	r3, r3
 801f7f0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 801f7f2:	f7f8 f843 	bl	801787c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f7f6:	f8b9 3000 	ldrh.w	r3, [r9]
  clen = pbuf_clen(p);
 801f7fa:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f7fc:	4403      	add	r3, r0
 801f7fe:	2b0a      	cmp	r3, #10
 801f800:	f300 80df 	bgt.w	801f9c2 <ip4_reass+0x222>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f804:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 801fac0 <ip4_reass+0x320>
 801f808:	f8da 4000 	ldr.w	r4, [sl]
 801f80c:	2c00      	cmp	r4, #0
 801f80e:	f000 80e7 	beq.w	801f9e0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f812:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f816:	e003      	b.n	801f820 <ip4_reass+0x80>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f818:	6824      	ldr	r4, [r4, #0]
 801f81a:	2c00      	cmp	r4, #0
 801f81c:	f000 80e0 	beq.w	801f9e0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f820:	6963      	ldr	r3, [r4, #20]
 801f822:	4293      	cmp	r3, r2
 801f824:	d1f8      	bne.n	801f818 <ip4_reass+0x78>
 801f826:	f8db 3010 	ldr.w	r3, [fp, #16]
 801f82a:	69a1      	ldr	r1, [r4, #24]
 801f82c:	4299      	cmp	r1, r3
 801f82e:	d1f3      	bne.n	801f818 <ip4_reass+0x78>
 801f830:	89a1      	ldrh	r1, [r4, #12]
 801f832:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 801f836:	4299      	cmp	r1, r3
 801f838:	d1ee      	bne.n	801f818 <ip4_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801f83a:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 801f83e:	3301      	adds	r3, #1
 801f840:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f844:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801f848:	f7f6 f860 	bl	801590c <lwip_htons>
 801f84c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f850:	2800      	cmp	r0, #0
 801f852:	f000 809e 	beq.w	801f992 <ip4_reass+0x1f2>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f856:	f8bb 3006 	ldrh.w	r3, [fp, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f85a:	f3c8 080c 	ubfx	r8, r8, #0, #13
  if (is_last) {
 801f85e:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f862:	ea4f 02c8 	mov.w	r2, r8, lsl #3
  if (is_last) {
 801f866:	9301      	str	r3, [sp, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f868:	9202      	str	r2, [sp, #8]
  if (is_last) {
 801f86a:	d108      	bne.n	801f87e <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 801f86c:	9b00      	ldr	r3, [sp, #0]
 801f86e:	18d3      	adds	r3, r2, r3
 801f870:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f872:	429a      	cmp	r2, r3
 801f874:	d812      	bhi.n	801f89c <ip4_reass+0xfc>
 801f876:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f87a:	4293      	cmp	r3, r2
 801f87c:	d80e      	bhi.n	801f89c <ip4_reass+0xfc>
  fraghdr = (struct ip_hdr *)new_p->payload;
 801f87e:	f8d6 8004 	ldr.w	r8, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f882:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 801f886:	f7f6 f841 	bl	801590c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 801f88a:	f898 2000 	ldrb.w	r2, [r8]
 801f88e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 801f892:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 801f896:	ea4f 0382 	mov.w	r3, r2, lsl #2
 801f89a:	d221      	bcs.n	801f8e0 <ip4_reass+0x140>
  if (ipr->p == NULL) {
 801f89c:	6863      	ldr	r3, [r4, #4]
 801f89e:	b973      	cbnz	r3, 801f8be <ip4_reass+0x11e>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f8a0:	f8da 3000 	ldr.w	r3, [sl]
 801f8a4:	42a3      	cmp	r3, r4
 801f8a6:	d006      	beq.n	801f8b6 <ip4_reass+0x116>
 801f8a8:	4b81      	ldr	r3, [pc, #516]	; (801fab0 <ip4_reass+0x310>)
 801f8aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f8ae:	4981      	ldr	r1, [pc, #516]	; (801fab4 <ip4_reass+0x314>)
 801f8b0:	4881      	ldr	r0, [pc, #516]	; (801fab8 <ip4_reass+0x318>)
 801f8b2:	f001 ff97 	bl	80217e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f8b6:	4620      	mov	r0, r4
 801f8b8:	2100      	movs	r1, #0
 801f8ba:	f7ff fe33 	bl	801f524 <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 801f8be:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 801f8c0:	4630      	mov	r0, r6
  return NULL;
 801f8c2:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 801f8c4:	3301      	adds	r3, #1
 801f8c6:	86eb      	strh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 801f8c8:	f7f7 fe74 	bl	80175b4 <pbuf_free>
}
 801f8cc:	4630      	mov	r0, r6
 801f8ce:	b005      	add	sp, #20
 801f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 801f8d4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 801f8d8:	3301      	adds	r3, #1
 801f8da:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    goto nullreturn;
 801f8de:	e7ee      	b.n	801f8be <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 801f8e0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f8e2:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  len = (u16_t)(len - hlen);
 801f8e6:	fa1f fb83 	uxth.w	fp, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f8ea:	f7f6 f80f 	bl	801590c <lwip_htons>
 801f8ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 801f8f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
  iprh->next_pbuf = NULL;
 801f8f6:	2300      	movs	r3, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 801f8f8:	00c2      	lsls	r2, r0, #3
  iprh->next_pbuf = NULL;
 801f8fa:	f888 3000 	strb.w	r3, [r8]
  iprh->end = (u16_t)(offset + len);
 801f8fe:	eb0b 0002 	add.w	r0, fp, r2
  iprh->next_pbuf = NULL;
 801f902:	f888 3001 	strb.w	r3, [r8, #1]
 801f906:	f888 3002 	strb.w	r3, [r8, #2]
  iprh->end = (u16_t)(offset + len);
 801f90a:	b281      	uxth	r1, r0
  iprh->start = offset;
 801f90c:	f8a8 2004 	strh.w	r2, [r8, #4]
  iprh->next_pbuf = NULL;
 801f910:	f888 3003 	strb.w	r3, [r8, #3]
  if (iprh->end < offset) {
 801f914:	428a      	cmp	r2, r1
  iprh->end = (u16_t)(offset + len);
 801f916:	9103      	str	r1, [sp, #12]
 801f918:	f8a8 0006 	strh.w	r0, [r8, #6]
  if (iprh->end < offset) {
 801f91c:	d8be      	bhi.n	801f89c <ip4_reass+0xfc>
  for (q = ipr->p; q != NULL;) {
 801f91e:	6861      	ldr	r1, [r4, #4]
 801f920:	2900      	cmp	r1, #0
 801f922:	f000 80e0 	beq.w	801fae6 <ip4_reass+0x346>
  int valid = 1;
 801f926:	f04f 0b01 	mov.w	fp, #1
 801f92a:	4694      	mov	ip, r2
 801f92c:	e00e      	b.n	801f94c <ip4_reass+0x1ac>
    } else if (iprh->start == iprh_tmp->start) {
 801f92e:	d0c6      	beq.n	801f8be <ip4_reass+0x11e>
    } else if (iprh->start < iprh_tmp->end) {
 801f930:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 801f934:	45f4      	cmp	ip, lr
 801f936:	d3c2      	bcc.n	801f8be <ip4_reass+0x11e>
      if (iprh_prev != NULL) {
 801f938:	b122      	cbz	r2, 801f944 <ip4_reass+0x1a4>
        if (iprh_prev->end != iprh_tmp->start) {
 801f93a:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 801f93c:	4282      	cmp	r2, r0
 801f93e:	bf18      	it	ne
 801f940:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 801f944:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 801f946:	2900      	cmp	r1, #0
 801f948:	f000 8098 	beq.w	801fa7c <ip4_reass+0x2dc>
        if (iprh_prev->end != iprh_tmp->start) {
 801f94c:	461a      	mov	r2, r3
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801f94e:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 801f950:	8898      	ldrh	r0, [r3, #4]
 801f952:	4584      	cmp	ip, r0
 801f954:	d2eb      	bcs.n	801f92e <ip4_reass+0x18e>
      iprh->next_pbuf = q;
 801f956:	4613      	mov	r3, r2
 801f958:	f8c8 1000 	str.w	r1, [r8]
      if (iprh_prev != NULL) {
 801f95c:	4662      	mov	r2, ip
 801f95e:	469c      	mov	ip, r3
 801f960:	2b00      	cmp	r3, #0
 801f962:	d074      	beq.n	801fa4e <ip4_reass+0x2ae>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801f964:	9903      	ldr	r1, [sp, #12]
 801f966:	88db      	ldrh	r3, [r3, #6]
 801f968:	4281      	cmp	r1, r0
 801f96a:	d8a8      	bhi.n	801f8be <ip4_reass+0x11e>
 801f96c:	429a      	cmp	r2, r3
 801f96e:	d3a6      	bcc.n	801f8be <ip4_reass+0x11e>
        iprh_prev->next_pbuf = new_p;
 801f970:	f8cc 6000 	str.w	r6, [ip]
        if (iprh_prev->end != iprh->start) {
 801f974:	d070      	beq.n	801fa58 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801f976:	9b01      	ldr	r3, [sp, #4]
 801f978:	2b00      	cmp	r3, #0
 801f97a:	f000 80a6 	beq.w	801faca <ip4_reass+0x32a>
 801f97e:	7fa3      	ldrb	r3, [r4, #30]
 801f980:	07db      	lsls	r3, r3, #31
 801f982:	d471      	bmi.n	801fa68 <ip4_reass+0x2c8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f984:	f8b9 3000 	ldrh.w	r3, [r9]
  return NULL;
 801f988:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f98a:	441f      	add	r7, r3
 801f98c:	f8a9 7000 	strh.w	r7, [r9]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f990:	e79c      	b.n	801f8cc <ip4_reass+0x12c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f992:	89e0      	ldrh	r0, [r4, #14]
 801f994:	f7f5 ffba 	bl	801590c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f998:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801f99c:	2800      	cmp	r0, #0
 801f99e:	f43f af5a 	beq.w	801f856 <ip4_reass+0xb6>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f9a2:	f8db 3000 	ldr.w	r3, [fp]
 801f9a6:	f8db 0004 	ldr.w	r0, [fp, #4]
 801f9aa:	f8db 1008 	ldr.w	r1, [fp, #8]
 801f9ae:	f8db 200c 	ldr.w	r2, [fp, #12]
 801f9b2:	60a3      	str	r3, [r4, #8]
 801f9b4:	60e0      	str	r0, [r4, #12]
 801f9b6:	6121      	str	r1, [r4, #16]
 801f9b8:	6162      	str	r2, [r4, #20]
 801f9ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 801f9be:	61a3      	str	r3, [r4, #24]
 801f9c0:	e749      	b.n	801f856 <ip4_reass+0xb6>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f9c2:	4601      	mov	r1, r0
 801f9c4:	4658      	mov	r0, fp
 801f9c6:	f7ff fe63 	bl	801f690 <ip_reass_remove_oldest_datagram>
 801f9ca:	b128      	cbz	r0, 801f9d8 <ip4_reass+0x238>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f9cc:	f8b9 3000 	ldrh.w	r3, [r9]
 801f9d0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f9d2:	2b0a      	cmp	r3, #10
 801f9d4:	f77f af16 	ble.w	801f804 <ip4_reass+0x64>
      IPFRAG_STATS_INC(ip_frag.memerr);
 801f9d8:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 801f9da:	3301      	adds	r3, #1
 801f9dc:	87ab      	strh	r3, [r5, #60]	; 0x3c
    if (ipr == NULL) {
 801f9de:	e76e      	b.n	801f8be <ip4_reass+0x11e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801f9e0:	f44f 728f 	mov.w	r2, #286	; 0x11e
 801f9e4:	4932      	ldr	r1, [pc, #200]	; (801fab0 <ip4_reass+0x310>)
 801f9e6:	2005      	movs	r0, #5
 801f9e8:	f7f7 faf0 	bl	8016fcc <memp_malloc_fn>
  if (ipr == NULL) {
 801f9ec:	4604      	mov	r4, r0
 801f9ee:	b1f0      	cbz	r0, 801fa2e <ip4_reass+0x28e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f9f0:	2300      	movs	r3, #0
  ipr->next = reassdatagrams;
 801f9f2:	f8da 2000 	ldr.w	r2, [sl]
  ipr->timer = IP_REASS_MAXAGE;
 801f9f6:	210f      	movs	r1, #15
  reassdatagrams = ipr;
 801f9f8:	f8ca 4000 	str.w	r4, [sl]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801f9fc:	61e3      	str	r3, [r4, #28]
 801f9fe:	60a3      	str	r3, [r4, #8]
 801fa00:	60e3      	str	r3, [r4, #12]
 801fa02:	6123      	str	r3, [r4, #16]
 801fa04:	6163      	str	r3, [r4, #20]
 801fa06:	61a3      	str	r3, [r4, #24]
 801fa08:	6063      	str	r3, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 801fa0a:	77e1      	strb	r1, [r4, #31]
  ipr->next = reassdatagrams;
 801fa0c:	6022      	str	r2, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801fa0e:	f8db 3000 	ldr.w	r3, [fp]
 801fa12:	f8db 0004 	ldr.w	r0, [fp, #4]
 801fa16:	f8db 1008 	ldr.w	r1, [fp, #8]
 801fa1a:	f8db 200c 	ldr.w	r2, [fp, #12]
 801fa1e:	60a3      	str	r3, [r4, #8]
 801fa20:	60e0      	str	r0, [r4, #12]
 801fa22:	6121      	str	r1, [r4, #16]
 801fa24:	6162      	str	r2, [r4, #20]
 801fa26:	f8db 3010 	ldr.w	r3, [fp, #16]
 801fa2a:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 801fa2c:	e713      	b.n	801f856 <ip4_reass+0xb6>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801fa2e:	4639      	mov	r1, r7
 801fa30:	4658      	mov	r0, fp
 801fa32:	f7ff fe2d 	bl	801f690 <ip_reass_remove_oldest_datagram>
 801fa36:	4287      	cmp	r7, r0
 801fa38:	dcce      	bgt.n	801f9d8 <ip4_reass+0x238>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fa3a:	f44f 7291 	mov.w	r2, #290	; 0x122
 801fa3e:	491c      	ldr	r1, [pc, #112]	; (801fab0 <ip4_reass+0x310>)
 801fa40:	2005      	movs	r0, #5
 801fa42:	f7f7 fac3 	bl	8016fcc <memp_malloc_fn>
    if (ipr == NULL)
 801fa46:	4604      	mov	r4, r0
 801fa48:	2800      	cmp	r0, #0
 801fa4a:	d1d1      	bne.n	801f9f0 <ip4_reass+0x250>
 801fa4c:	e7c4      	b.n	801f9d8 <ip4_reass+0x238>
        if (iprh->end > iprh_tmp->start) {
 801fa4e:	9b03      	ldr	r3, [sp, #12]
 801fa50:	4283      	cmp	r3, r0
 801fa52:	f63f af34 	bhi.w	801f8be <ip4_reass+0x11e>
        ipr->p = new_p;
 801fa56:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801fa58:	9b01      	ldr	r3, [sp, #4]
 801fa5a:	b1a3      	cbz	r3, 801fa86 <ip4_reass+0x2e6>
 801fa5c:	7fa3      	ldrb	r3, [r4, #30]
 801fa5e:	07d9      	lsls	r1, r3, #31
 801fa60:	d590      	bpl.n	801f984 <ip4_reass+0x1e4>
    if (valid) {
 801fa62:	f1bb 0f00 	cmp.w	fp, #0
 801fa66:	d146      	bne.n	801faf6 <ip4_reass+0x356>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fa68:	f8b9 3000 	ldrh.w	r3, [r9]
 801fa6c:	441f      	add	r7, r3
 801fa6e:	f8a9 7000 	strh.w	r7, [r9]
  return NULL;
 801fa72:	2600      	movs	r6, #0
}
 801fa74:	4630      	mov	r0, r6
 801fa76:	b005      	add	sp, #20
 801fa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 801fa7c:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 801fa7e:	601e      	str	r6, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801fa80:	f47f af79 	bne.w	801f976 <ip4_reass+0x1d6>
 801fa84:	e7e8      	b.n	801fa58 <ip4_reass+0x2b8>
    if (valid) {
 801fa86:	f1bb 0f00 	cmp.w	fp, #0
 801fa8a:	d01e      	beq.n	801faca <ip4_reass+0x32a>
 801fa8c:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801fa8e:	b1e3      	cbz	r3, 801faca <ip4_reass+0x32a>
 801fa90:	685a      	ldr	r2, [r3, #4]
 801fa92:	8893      	ldrh	r3, [r2, #4]
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	d032      	beq.n	801fafe <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fa98:	f8b9 3000 	ldrh.w	r3, [r9]
 801fa9c:	441f      	add	r7, r3
  if (is_last) {
 801fa9e:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801faa0:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d1e4      	bne.n	801fa72 <ip4_reass+0x2d2>
 801faa8:	e014      	b.n	801fad4 <ip4_reass+0x334>
 801faaa:	bf00      	nop
 801faac:	20036794 	.word	0x20036794
 801fab0:	08040cdc 	.word	0x08040cdc
 801fab4:	08040df4 	.word	0x08040df4
 801fab8:	08027fec 	.word	0x08027fec
 801fabc:	20022d18 	.word	0x20022d18
 801fac0:	20022d1c 	.word	0x20022d1c
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801fac4:	6872      	ldr	r2, [r6, #4]
 801fac6:	8893      	ldrh	r3, [r2, #4]
 801fac8:	b1cb      	cbz	r3, 801fafe <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801faca:	f8b9 3000 	ldrh.w	r3, [r9]
 801face:	441f      	add	r7, r3
 801fad0:	f8a9 7000 	strh.w	r7, [r9]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fad4:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801fad6:	9a02      	ldr	r2, [sp, #8]
 801fad8:	9900      	ldr	r1, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fada:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 801fade:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fae0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 801fae2:	83a2      	strh	r2, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801fae4:	e7c5      	b.n	801fa72 <ip4_reass+0x2d2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801fae6:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 801fae8:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801faea:	2b00      	cmp	r3, #0
 801faec:	d0ea      	beq.n	801fac4 <ip4_reass+0x324>
 801faee:	7fa3      	ldrb	r3, [r4, #30]
 801faf0:	07da      	lsls	r2, r3, #31
 801faf2:	f57f af47 	bpl.w	801f984 <ip4_reass+0x1e4>
 801faf6:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801faf8:	2b00      	cmp	r3, #0
 801fafa:	d0b5      	beq.n	801fa68 <ip4_reass+0x2c8>
 801fafc:	e7c8      	b.n	801fa90 <ip4_reass+0x2f0>
        q = iprh->next_pbuf;
 801fafe:	f8d8 3000 	ldr.w	r3, [r8]
        while (q != NULL) {
 801fb02:	b153      	cbz	r3, 801fb1a <ip4_reass+0x37a>
 801fb04:	9803      	ldr	r0, [sp, #12]
 801fb06:	e000      	b.n	801fb0a <ip4_reass+0x36a>
 801fb08:	88c8      	ldrh	r0, [r1, #6]
          iprh = (struct ip_reass_helper *)q->payload;
 801fb0a:	6859      	ldr	r1, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 801fb0c:	888b      	ldrh	r3, [r1, #4]
 801fb0e:	4283      	cmp	r3, r0
 801fb10:	d1c2      	bne.n	801fa98 <ip4_reass+0x2f8>
          q = iprh->next_pbuf;
 801fb12:	680b      	ldr	r3, [r1, #0]
        while (q != NULL) {
 801fb14:	2b00      	cmp	r3, #0
 801fb16:	d1f7      	bne.n	801fb08 <ip4_reass+0x368>
 801fb18:	4688      	mov	r8, r1
          LWIP_ASSERT("sanity check",
 801fb1a:	4590      	cmp	r8, r2
 801fb1c:	d110      	bne.n	801fb40 <ip4_reass+0x3a0>
 801fb1e:	4b3b      	ldr	r3, [pc, #236]	; (801fc0c <ip4_reass+0x46c>)
 801fb20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801fb24:	493a      	ldr	r1, [pc, #232]	; (801fc10 <ip4_reass+0x470>)
 801fb26:	483b      	ldr	r0, [pc, #236]	; (801fc14 <ip4_reass+0x474>)
 801fb28:	f001 fe5c 	bl	80217e4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801fb2c:	f8d8 3000 	ldr.w	r3, [r8]
 801fb30:	b133      	cbz	r3, 801fb40 <ip4_reass+0x3a0>
 801fb32:	4b36      	ldr	r3, [pc, #216]	; (801fc0c <ip4_reass+0x46c>)
 801fb34:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801fb38:	4937      	ldr	r1, [pc, #220]	; (801fc18 <ip4_reass+0x478>)
 801fb3a:	4836      	ldr	r0, [pc, #216]	; (801fc14 <ip4_reass+0x474>)
 801fb3c:	f001 fe52 	bl	80217e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fb40:	f8b9 3000 	ldrh.w	r3, [r9]
 801fb44:	441f      	add	r7, r3
  if (is_last) {
 801fb46:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801fb48:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 801fb4c:	2b00      	cmp	r3, #0
 801fb4e:	d15a      	bne.n	801fc06 <ip4_reass+0x466>
    u16_t datagram_len = (u16_t)(offset + len);
 801fb50:	9b02      	ldr	r3, [sp, #8]
 801fb52:	9a00      	ldr	r2, [sp, #0]
 801fb54:	4413      	add	r3, r2
 801fb56:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fb58:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 801fb5a:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fb5c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 801fb60:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801fb62:	77a3      	strb	r3, [r4, #30]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fb64:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801fb66:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801fb68:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fb6a:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801fb6e:	684f      	ldr	r7, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fb70:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fb72:	685e      	ldr	r6, [r3, #4]
 801fb74:	689d      	ldr	r5, [r3, #8]
 801fb76:	68d9      	ldr	r1, [r3, #12]
 801fb78:	607e      	str	r6, [r7, #4]
 801fb7a:	60bd      	str	r5, [r7, #8]
 801fb7c:	60f9      	str	r1, [r7, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801fb7e:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801fb80:	603a      	str	r2, [r7, #0]
 801fb82:	691a      	ldr	r2, [r3, #16]
 801fb84:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fb86:	f7f5 fec1 	bl	801590c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 801fb8a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fb8c:	4602      	mov	r2, r0
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801fb8e:	2114      	movs	r1, #20
 801fb90:	4638      	mov	r0, r7
    IPH_OFFSET_SET(fraghdr, 0);
 801fb92:	71bb      	strb	r3, [r7, #6]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801fb94:	807a      	strh	r2, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801fb96:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801fb98:	72bb      	strb	r3, [r7, #10]
 801fb9a:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801fb9c:	f7f6 fc6a 	bl	8016474 <inet_chksum>
    p = ipr->p;
 801fba0:	6866      	ldr	r6, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 801fba2:	8178      	strh	r0, [r7, #10]
    while (r != NULL) {
 801fba4:	b15d      	cbz	r5, 801fbbe <ip4_reass+0x41e>
      iprh = (struct ip_reass_helper *)r->payload;
 801fba6:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 801fba8:	2114      	movs	r1, #20
 801fbaa:	4628      	mov	r0, r5
 801fbac:	f7f7 fcc6 	bl	801753c <pbuf_remove_header>
      pbuf_cat(p, r);
 801fbb0:	4629      	mov	r1, r5
 801fbb2:	4630      	mov	r0, r6
 801fbb4:	f7f7 fe80 	bl	80178b8 <pbuf_cat>
      r = iprh->next_pbuf;
 801fbb8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 801fbba:	2d00      	cmp	r5, #0
 801fbbc:	d1f3      	bne.n	801fba6 <ip4_reass+0x406>
    if (ipr == reassdatagrams) {
 801fbbe:	f8da 1000 	ldr.w	r1, [sl]
 801fbc2:	42a1      	cmp	r1, r4
 801fbc4:	d005      	beq.n	801fbd2 <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801fbc6:	b129      	cbz	r1, 801fbd4 <ip4_reass+0x434>
        if (ipr_prev->next == ipr) {
 801fbc8:	680b      	ldr	r3, [r1, #0]
 801fbca:	42a3      	cmp	r3, r4
 801fbcc:	d002      	beq.n	801fbd4 <ip4_reass+0x434>
 801fbce:	4619      	mov	r1, r3
 801fbd0:	e7f9      	b.n	801fbc6 <ip4_reass+0x426>
      ipr_prev = NULL;
 801fbd2:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801fbd4:	4620      	mov	r0, r4
 801fbd6:	f7ff fca5 	bl	801f524 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 801fbda:	4630      	mov	r0, r6
 801fbdc:	f7f7 fe4e 	bl	801787c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801fbe0:	f8b9 3000 	ldrh.w	r3, [r9]
    clen = pbuf_clen(p);
 801fbe4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801fbe6:	4283      	cmp	r3, r0
 801fbe8:	d303      	bcc.n	801fbf2 <ip4_reass+0x452>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801fbea:	1b1b      	subs	r3, r3, r4
 801fbec:	f8a9 3000 	strh.w	r3, [r9]
    return p;
 801fbf0:	e66c      	b.n	801f8cc <ip4_reass+0x12c>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801fbf2:	4b06      	ldr	r3, [pc, #24]	; (801fc0c <ip4_reass+0x46c>)
 801fbf4:	f240 229b 	movw	r2, #667	; 0x29b
 801fbf8:	4908      	ldr	r1, [pc, #32]	; (801fc1c <ip4_reass+0x47c>)
 801fbfa:	4806      	ldr	r0, [pc, #24]	; (801fc14 <ip4_reass+0x474>)
 801fbfc:	f001 fdf2 	bl	80217e4 <iprintf>
 801fc00:	f8b9 3000 	ldrh.w	r3, [r9]
 801fc04:	e7f1      	b.n	801fbea <ip4_reass+0x44a>
 801fc06:	8ba0      	ldrh	r0, [r4, #28]
 801fc08:	e7ac      	b.n	801fb64 <ip4_reass+0x3c4>
 801fc0a:	bf00      	nop
 801fc0c:	08040cdc 	.word	0x08040cdc
 801fc10:	08040da4 	.word	0x08040da4
 801fc14:	08027fec 	.word	0x08027fec
 801fc18:	08040db4 	.word	0x08040db4
 801fc1c:	08040dd8 	.word	0x08040dd8

0801fc20 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801fc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fc24:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 801fc26:	b08d      	sub	sp, #52	; 0x34
 801fc28:	4605      	mov	r5, r0
 801fc2a:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fc2c:	f1b3 0214 	subs.w	r2, r3, #20
{
 801fc30:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fc32:	bf48      	it	mi
 801fc34:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801fc38:	6843      	ldr	r3, [r0, #4]
 801fc3a:	9302      	str	r3, [sp, #8]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fc3c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801fc40:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801fc42:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801fc44:	f003 030f 	and.w	r3, r3, #15
 801fc48:	2b05      	cmp	r3, #5
 801fc4a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 801fc4e:	f040 80da 	bne.w	801fe06 <ip4_frag+0x1e6>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801fc52:	8943      	ldrh	r3, [r0, #10]
 801fc54:	2b13      	cmp	r3, #19
 801fc56:	f240 80d9 	bls.w	801fe0c <ip4_frag+0x1ec>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801fc5a:	9b02      	ldr	r3, [sp, #8]
 801fc5c:	88d8      	ldrh	r0, [r3, #6]
 801fc5e:	f7f5 fe55 	bl	801590c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 801fc62:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 801fc64:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 801fc68:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 801fc6a:	9206      	str	r2, [sp, #24]
  mf_set = tmp & IP_MF;
 801fc6c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 801fc70:	b29b      	uxth	r3, r3
 801fc72:	920b      	str	r2, [sp, #44]	; 0x2c
 801fc74:	9303      	str	r3, [sp, #12]

  while (left) {
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	f000 809e 	beq.w	801fdb8 <ip4_frag+0x198>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801fc7c:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 801fc7e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fc80:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 801fe34 <ip4_frag+0x214>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801fc84:	00db      	lsls	r3, r3, #3
 801fc86:	b29b      	uxth	r3, r3
 801fc88:	9308      	str	r3, [sp, #32]
 801fc8a:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fc8c:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801fc90:	9f03      	ldr	r7, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fc92:	2114      	movs	r1, #20
 801fc94:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801fc96:	42bb      	cmp	r3, r7
 801fc98:	bf28      	it	cs
 801fc9a:	463b      	movcs	r3, r7
 801fc9c:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801fc9e:	f7f7 fcf7 	bl	8017690 <pbuf_alloc>
    if (rambuf == NULL) {
 801fca2:	4682      	mov	sl, r0
 801fca4:	2800      	cmp	r0, #0
 801fca6:	f000 809e 	beq.w	801fde6 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fcaa:	8943      	ldrh	r3, [r0, #10]
 801fcac:	2b13      	cmp	r3, #19
 801fcae:	f240 809f 	bls.w	801fdf0 <ip4_frag+0x1d0>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801fcb2:	9902      	ldr	r1, [sp, #8]
 801fcb4:	f8da 3004 	ldr.w	r3, [sl, #4]
 801fcb8:	680a      	ldr	r2, [r1, #0]
 801fcba:	684f      	ldr	r7, [r1, #4]
 801fcbc:	6888      	ldr	r0, [r1, #8]
 801fcbe:	68c9      	ldr	r1, [r1, #12]
 801fcc0:	601a      	str	r2, [r3, #0]
 801fcc2:	60d9      	str	r1, [r3, #12]
 801fcc4:	9902      	ldr	r1, [sp, #8]
 801fcc6:	605f      	str	r7, [r3, #4]
 801fcc8:	6098      	str	r0, [r3, #8]
 801fcca:	690a      	ldr	r2, [r1, #16]
 801fccc:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 801fcce:	f8da 3004 	ldr.w	r3, [sl, #4]
 801fcd2:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 801fcd4:	9b04      	ldr	r3, [sp, #16]
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d034      	beq.n	801fd44 <ip4_frag+0x124>
 801fcda:	4698      	mov	r8, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801fcdc:	896b      	ldrh	r3, [r5, #10]
 801fcde:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fce0:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 801fce2:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fce4:	d371      	bcc.n	801fdca <ip4_frag+0x1aa>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801fce6:	4544      	cmp	r4, r8
 801fce8:	bf28      	it	cs
 801fcea:	4644      	movcs	r4, r8
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801fcec:	2c00      	cmp	r4, #0
 801fcee:	d065      	beq.n	801fdbc <ip4_frag+0x19c>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801fcf0:	f240 22bd 	movw	r2, #701	; 0x2bd
 801fcf4:	4649      	mov	r1, r9
 801fcf6:	2006      	movs	r0, #6
 801fcf8:	f7f7 f968 	bl	8016fcc <memp_malloc_fn>
 801fcfc:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801fcfe:	2241      	movs	r2, #65	; 0x41
 801fd00:	4621      	mov	r1, r4
 801fd02:	2000      	movs	r0, #0
      if (pcr == NULL) {
 801fd04:	f1bb 0f00 	cmp.w	fp, #0
 801fd08:	d06a      	beq.n	801fde0 <ip4_frag+0x1c0>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801fd0a:	9401      	str	r4, [sp, #4]
 801fd0c:	465b      	mov	r3, fp
 801fd0e:	686f      	ldr	r7, [r5, #4]
 801fd10:	4437      	add	r7, r6
 801fd12:	9700      	str	r7, [sp, #0]
 801fd14:	f7f7 fbf2 	bl	80174fc <pbuf_alloced_custom>
 801fd18:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 801fd1a:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 801fd1c:	2f00      	cmp	r7, #0
 801fd1e:	d05c      	beq.n	801fdda <ip4_frag+0x1ba>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801fd20:	eba8 0804 	sub.w	r8, r8, r4
      pbuf_ref(p);
 801fd24:	f7f7 fdb4 	bl	8017890 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801fd28:	4b3d      	ldr	r3, [pc, #244]	; (801fe20 <ip4_frag+0x200>)
      pbuf_cat(rambuf, newpbuf);
 801fd2a:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801fd2c:	fa1f f888 	uxth.w	r8, r8
      pbuf_cat(rambuf, newpbuf);
 801fd30:	4650      	mov	r0, sl
      pcr->original = p;
 801fd32:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801fd36:	f8cb 3010 	str.w	r3, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 801fd3a:	f7f7 fdbd 	bl	80178b8 <pbuf_cat>
      if (left_to_copy) {
 801fd3e:	f1b8 0f00 	cmp.w	r8, #0
 801fd42:	d13b      	bne.n	801fdbc <ip4_frag+0x19c>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801fd44:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 801fd46:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801fd48:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 801fd4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 801fd4c:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 801fd4e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 801fd52:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 801fd54:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 801fd56:	4293      	cmp	r3, r2
 801fd58:	dd52      	ble.n	801fe00 <ip4_frag+0x1e0>
 801fd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fd5c:	2b00      	cmp	r3, #0
 801fd5e:	d14f      	bne.n	801fe00 <ip4_frag+0x1e0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fd60:	f7f5 fdd4 	bl	801590c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fd64:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fd66:	9f09      	ldr	r7, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fd68:	3314      	adds	r3, #20
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801fd6a:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fd6c:	b298      	uxth	r0, r3
 801fd6e:	f7f5 fdcd 	bl	801590c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 801fd72:	2300      	movs	r3, #0
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801fd74:	2114      	movs	r1, #20
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801fd76:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801fd78:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801fd7a:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 801fd7c:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801fd7e:	f7f6 fb79 	bl	8016474 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801fd82:	9a05      	ldr	r2, [sp, #20]
 801fd84:	4651      	mov	r1, sl
 801fd86:	6953      	ldr	r3, [r2, #20]
 801fd88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 801fd8a:	8178      	strh	r0, [r7, #10]
    netif->output(netif, rambuf, dest);
 801fd8c:	9805      	ldr	r0, [sp, #20]
 801fd8e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801fd90:	4a24      	ldr	r2, [pc, #144]	; (801fe24 <ip4_frag+0x204>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801fd92:	4650      	mov	r0, sl
    IPFRAG_STATS_INC(ip_frag.xmit);
 801fd94:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 801fd96:	3301      	adds	r3, #1
 801fd98:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 801fd9a:	f7f7 fc0b 	bl	80175b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801fd9e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 801fda2:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 801fda4:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 801fda8:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 801fdaa:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 801fdac:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 801fdae:	b292      	uxth	r2, r2
 801fdb0:	9206      	str	r2, [sp, #24]
  while (left) {
 801fdb2:	2b00      	cmp	r3, #0
 801fdb4:	f47f af69 	bne.w	801fc8a <ip4_frag+0x6a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801fdb8:	2000      	movs	r0, #0
 801fdba:	e016      	b.n	801fdea <ip4_frag+0x1ca>
        p = p->next;
 801fdbc:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 801fdbe:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 801fdc0:	896b      	ldrh	r3, [r5, #10]
 801fdc2:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fdc4:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 801fdc6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801fdc8:	d28d      	bcs.n	801fce6 <ip4_frag+0xc6>
 801fdca:	464b      	mov	r3, r9
 801fdcc:	f240 322d 	movw	r2, #813	; 0x32d
 801fdd0:	4915      	ldr	r1, [pc, #84]	; (801fe28 <ip4_frag+0x208>)
 801fdd2:	4816      	ldr	r0, [pc, #88]	; (801fe2c <ip4_frag+0x20c>)
 801fdd4:	f001 fd06 	bl	80217e4 <iprintf>
 801fdd8:	e785      	b.n	801fce6 <ip4_frag+0xc6>
        ip_frag_free_pbuf_custom_ref(pcr);
 801fdda:	4658      	mov	r0, fp
 801fddc:	f7ff fc92 	bl	801f704 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801fde0:	4650      	mov	r0, sl
 801fde2:	f7f7 fbe7 	bl	80175b4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801fde6:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fdea:	b00d      	add	sp, #52	; 0x34
 801fdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801fdf0:	464b      	mov	r3, r9
 801fdf2:	f44f 7249 	mov.w	r2, #804	; 0x324
 801fdf6:	490e      	ldr	r1, [pc, #56]	; (801fe30 <ip4_frag+0x210>)
 801fdf8:	480c      	ldr	r0, [pc, #48]	; (801fe2c <ip4_frag+0x20c>)
 801fdfa:	f001 fcf3 	bl	80217e4 <iprintf>
 801fdfe:	e758      	b.n	801fcb2 <ip4_frag+0x92>
      tmp = tmp | IP_MF;
 801fe00:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 801fe04:	e7ac      	b.n	801fd60 <ip4_frag+0x140>
    return ERR_VAL;
 801fe06:	f06f 0005 	mvn.w	r0, #5
 801fe0a:	e7ee      	b.n	801fdea <ip4_frag+0x1ca>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801fe0c:	4b09      	ldr	r3, [pc, #36]	; (801fe34 <ip4_frag+0x214>)
 801fe0e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801fe12:	4909      	ldr	r1, [pc, #36]	; (801fe38 <ip4_frag+0x218>)
 801fe14:	4805      	ldr	r0, [pc, #20]	; (801fe2c <ip4_frag+0x20c>)
 801fe16:	f001 fce5 	bl	80217e4 <iprintf>
 801fe1a:	f06f 0005 	mvn.w	r0, #5
 801fe1e:	e7e4      	b.n	801fdea <ip4_frag+0x1ca>
 801fe20:	0801f73d 	.word	0x0801f73d
 801fe24:	20036794 	.word	0x20036794
 801fe28:	08040e50 	.word	0x08040e50
 801fe2c:	08027fec 	.word	0x08027fec
 801fe30:	08040e30 	.word	0x08040e30
 801fe34:	08040cdc 	.word	0x08040cdc
 801fe38:	08040e14 	.word	0x08040e14

0801fe3c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801fe3c:	8943      	ldrh	r3, [r0, #10]
 801fe3e:	2b0e      	cmp	r3, #14
{
 801fe40:	b570      	push	{r4, r5, r6, lr}
 801fe42:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 801fe44:	d91b      	bls.n	801fe7e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801fe46:	7bc3      	ldrb	r3, [r0, #15]
 801fe48:	460d      	mov	r5, r1
 801fe4a:	b91b      	cbnz	r3, 801fe54 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 801fe4c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 801fe50:	3301      	adds	r3, #1
 801fe52:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801fe54:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801fe56:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 801fe58:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 801fe5a:	07d9      	lsls	r1, r3, #31
 801fe5c:	d50a      	bpl.n	801fe74 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801fe5e:	2b01      	cmp	r3, #1
 801fe60:	d039      	beq.n	801fed6 <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801fe62:	2206      	movs	r2, #6
 801fe64:	4924      	ldr	r1, [pc, #144]	; (801fef8 <ethernet_input+0xbc>)
 801fe66:	f000 fd15 	bl	8020894 <memcmp>
 801fe6a:	b918      	cbnz	r0, 801fe74 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801fe6c:	7b63      	ldrb	r3, [r4, #13]
 801fe6e:	f043 0308 	orr.w	r3, r3, #8
 801fe72:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 801fe74:	2e08      	cmp	r6, #8
 801fe76:	d01f      	beq.n	801feb8 <ethernet_input+0x7c>
 801fe78:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 801fe7c:	d00b      	beq.n	801fe96 <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801fe7e:	4b1f      	ldr	r3, [pc, #124]	; (801fefc <ethernet_input+0xc0>)
 801fe80:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801fe82:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 801fe84:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 801fe86:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 801fe88:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 801fe8a:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 801fe8c:	4620      	mov	r0, r4
 801fe8e:	f7f7 fb91 	bl	80175b4 <pbuf_free>
  return ERR_OK;
}
 801fe92:	2000      	movs	r0, #0
 801fe94:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801fe96:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801fe9a:	071b      	lsls	r3, r3, #28
 801fe9c:	d5f6      	bpl.n	801fe8c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fe9e:	210e      	movs	r1, #14
 801fea0:	4620      	mov	r0, r4
 801fea2:	f7f7 fb4b 	bl	801753c <pbuf_remove_header>
 801fea6:	b308      	cbz	r0, 801feec <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 801fea8:	4b14      	ldr	r3, [pc, #80]	; (801fefc <ethernet_input+0xc0>)
 801feaa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801feac:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 801feae:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 801feb0:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 801feb2:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 801feb4:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801feb6:	e7e9      	b.n	801fe8c <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801feb8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 801febc:	071a      	lsls	r2, r3, #28
 801febe:	d5e5      	bpl.n	801fe8c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801fec0:	210e      	movs	r1, #14
 801fec2:	4620      	mov	r0, r4
 801fec4:	f7f7 fb3a 	bl	801753c <pbuf_remove_header>
 801fec8:	2800      	cmp	r0, #0
 801feca:	d1df      	bne.n	801fe8c <ethernet_input+0x50>
        ip4_input(p, netif);
 801fecc:	4629      	mov	r1, r5
 801fece:	4620      	mov	r0, r4
 801fed0:	f7ff f86e 	bl	801efb0 <ip4_input>
      break;
 801fed4:	e7dd      	b.n	801fe92 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801fed6:	7843      	ldrb	r3, [r0, #1]
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d1cb      	bne.n	801fe74 <ethernet_input+0x38>
 801fedc:	7883      	ldrb	r3, [r0, #2]
 801fede:	2b5e      	cmp	r3, #94	; 0x5e
 801fee0:	d1c8      	bne.n	801fe74 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 801fee2:	7b63      	ldrb	r3, [r4, #13]
 801fee4:	f043 0310 	orr.w	r3, r3, #16
 801fee8:	7363      	strb	r3, [r4, #13]
 801feea:	e7c3      	b.n	801fe74 <ethernet_input+0x38>
        etharp_input(p, netif);
 801feec:	4629      	mov	r1, r5
 801feee:	4620      	mov	r0, r4
 801fef0:	f7fe fbe0 	bl	801e6b4 <etharp_input>
      break;
 801fef4:	e7cd      	b.n	801fe92 <ethernet_input+0x56>
 801fef6:	bf00      	nop
 801fef8:	08040ecc 	.word	0x08040ecc
 801fefc:	20036794 	.word	0x20036794

0801ff00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ff04:	460c      	mov	r4, r1
 801ff06:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801ff08:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 801ff0c:	4616      	mov	r6, r2
 801ff0e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 801ff10:	f7f5 fcfc 	bl	801590c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ff14:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 801ff16:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801ff18:	4620      	mov	r0, r4
 801ff1a:	f7f7 fb0b 	bl	8017534 <pbuf_add_header>
 801ff1e:	b9e0      	cbnz	r0, 801ff5a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801ff20:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 801ff22:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801ff26:	683b      	ldr	r3, [r7, #0]
 801ff28:	600b      	str	r3, [r1, #0]
 801ff2a:	88bb      	ldrh	r3, [r7, #4]
 801ff2c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ff2e:	6833      	ldr	r3, [r6, #0]
 801ff30:	f8c1 3006 	str.w	r3, [r1, #6]
 801ff34:	88b3      	ldrh	r3, [r6, #4]
 801ff36:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ff38:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 801ff3c:	2b06      	cmp	r3, #6
 801ff3e:	d006      	beq.n	801ff4e <ethernet_output+0x4e>
 801ff40:	4b0a      	ldr	r3, [pc, #40]	; (801ff6c <ethernet_output+0x6c>)
 801ff42:	f44f 7299 	mov.w	r2, #306	; 0x132
 801ff46:	490a      	ldr	r1, [pc, #40]	; (801ff70 <ethernet_output+0x70>)
 801ff48:	480a      	ldr	r0, [pc, #40]	; (801ff74 <ethernet_output+0x74>)
 801ff4a:	f001 fc4b 	bl	80217e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ff4e:	4621      	mov	r1, r4
 801ff50:	69ab      	ldr	r3, [r5, #24]
 801ff52:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 801ff54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 801ff58:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 801ff5a:	4a07      	ldr	r2, [pc, #28]	; (801ff78 <ethernet_output+0x78>)
}
 801ff5c:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 801ff60:	8953      	ldrh	r3, [r2, #10]
 801ff62:	3301      	adds	r3, #1
 801ff64:	8153      	strh	r3, [r2, #10]
}
 801ff66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff6a:	bf00      	nop
 801ff6c:	08040e60 	.word	0x08040e60
 801ff70:	08040e98 	.word	0x08040e98
 801ff74:	08027fec 	.word	0x08027fec
 801ff78:	20036794 	.word	0x20036794

0801ff7c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ff7c:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801ff7e:	2300      	movs	r3, #0
{
 801ff80:	b085      	sub	sp, #20
 801ff82:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 801ff84:	2204      	movs	r2, #4
{
 801ff86:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ff88:	4619      	mov	r1, r3
 801ff8a:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 801ff8c:	9201      	str	r2, [sp, #4]
 801ff8e:	9500      	str	r5, [sp, #0]
 801ff90:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ff94:	f7f1 ffa0 	bl	8011ed8 <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801ff98:	4a0a      	ldr	r2, [pc, #40]	; (801ffc4 <sys_mbox_new+0x48>)
 801ff9a:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801ff9e:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  ++lwip_stats.sys.mbox.used;
 801ffa2:	3301      	adds	r3, #1
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801ffa4:	6020      	str	r0, [r4, #0]
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ffa6:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 801ffaa:	b29b      	uxth	r3, r3
  if(*mbox == NULL)
 801ffac:	0940      	lsrs	r0, r0, #5
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801ffae:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 801ffb0:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    return ERR_MEM;

  return ERR_OK;
}
 801ffb4:	f1c0 0000 	rsb	r0, r0, #0
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801ffb8:	bf38      	it	cc
 801ffba:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 801ffbe:	b005      	add	sp, #20
 801ffc0:	bd30      	pop	{r4, r5, pc}
 801ffc2:	bf00      	nop
 801ffc4:	20036794 	.word	0x20036794

0801ffc8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ffc8:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801ffca:	2200      	movs	r2, #0
 801ffcc:	6800      	ldr	r0, [r0, #0]
 801ffce:	f7f1 ff97 	bl	8011f00 <osMessagePut>
 801ffd2:	b900      	cbnz	r0, 801ffd6 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 801ffd4:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 801ffd6:	4a04      	ldr	r2, [pc, #16]	; (801ffe8 <sys_mbox_trypost+0x20>)
 801ffd8:	f04f 30ff 	mov.w	r0, #4294967295
 801ffdc:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 801ffe0:	3301      	adds	r3, #1
 801ffe2:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 801ffe6:	bd08      	pop	{r3, pc}
 801ffe8:	20036794 	.word	0x20036794

0801ffec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ffec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ffee:	4614      	mov	r4, r2
 801fff0:	b085      	sub	sp, #20
 801fff2:	4605      	mov	r5, r0
 801fff4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801fff6:	f7f1 fe5f 	bl	8011cb8 <osKernelSysTick>
 801fffa:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801fffc:	b15c      	cbz	r4, 8020016 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801fffe:	4622      	mov	r2, r4
 8020000:	6829      	ldr	r1, [r5, #0]
 8020002:	a801      	add	r0, sp, #4
 8020004:	f7f1 ffa8 	bl	8011f58 <osMessageGet>

    if(event.status == osEventMessage)
 8020008:	9b01      	ldr	r3, [sp, #4]
 802000a:	2b10      	cmp	r3, #16
 802000c:	d009      	beq.n	8020022 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802000e:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8020012:	b005      	add	sp, #20
 8020014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8020016:	6829      	ldr	r1, [r5, #0]
 8020018:	f04f 32ff 	mov.w	r2, #4294967295
 802001c:	a801      	add	r0, sp, #4
 802001e:	f7f1 ff9b 	bl	8011f58 <osMessageGet>
    *msg = (void *)event.value.v;
 8020022:	9b02      	ldr	r3, [sp, #8]
 8020024:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8020026:	f7f1 fe47 	bl	8011cb8 <osKernelSysTick>
 802002a:	1b80      	subs	r0, r0, r6
}
 802002c:	b005      	add	sp, #20
 802002e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08020030 <sys_mbox_valid>:
 8020030:	6800      	ldr	r0, [r0, #0]
 8020032:	3800      	subs	r0, #0
 8020034:	bf18      	it	ne
 8020036:	2001      	movne	r0, #1
 8020038:	4770      	bx	lr
 802003a:	bf00      	nop

0802003c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 802003c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802003e:	4803      	ldr	r0, [pc, #12]	; (802004c <sys_init+0x10>)
 8020040:	f7f1 fe9a 	bl	8011d78 <osMutexCreate>
 8020044:	4b02      	ldr	r3, [pc, #8]	; (8020050 <sys_init+0x14>)
 8020046:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020048:	bd08      	pop	{r3, pc}
 802004a:	bf00      	nop
 802004c:	08040edc 	.word	0x08040edc
 8020050:	200368f4 	.word	0x200368f4

08020054 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020054:	b530      	push	{r4, r5, lr}
 8020056:	b083      	sub	sp, #12
 8020058:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802005a:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802005c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 802005e:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020062:	f7f1 fe89 	bl	8011d78 <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8020066:	4a0d      	ldr	r2, [pc, #52]	; (802009c <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020068:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 802006a:	b170      	cbz	r0, 802008a <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 802006c:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020070:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8020072:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 8020076:	3301      	adds	r3, #1
 8020078:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 802007a:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 802007c:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8020080:	bf38      	it	cc
 8020082:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 8020086:	b003      	add	sp, #12
 8020088:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 802008a:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 802008e:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 8020092:	3301      	adds	r3, #1
 8020094:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8020098:	e7f5      	b.n	8020086 <sys_mutex_new+0x32>
 802009a:	bf00      	nop
 802009c:	20036794 	.word	0x20036794

080200a0 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80200a0:	f04f 31ff 	mov.w	r1, #4294967295
 80200a4:	6800      	ldr	r0, [r0, #0]
 80200a6:	f7f1 be6f 	b.w	8011d88 <osMutexWait>
 80200aa:	bf00      	nop

080200ac <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80200ac:	6800      	ldr	r0, [r0, #0]
 80200ae:	f7f1 be97 	b.w	8011de0 <osMutexRelease>
 80200b2:	bf00      	nop

080200b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80200b4:	b530      	push	{r4, r5, lr}
 80200b6:	b089      	sub	sp, #36	; 0x24
 80200b8:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80200ba:	2400      	movs	r4, #0
  return osThreadCreate(&os_thread_def, arg);
 80200bc:	4611      	mov	r1, r2
{
 80200be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80200c0:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 80200c2:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80200c4:	9502      	str	r5, [sp, #8]
 80200c6:	9305      	str	r3, [sp, #20]
 80200c8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80200cc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80200d0:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 80200d4:	f7f1 fdf8 	bl	8011cc8 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80200d8:	b009      	add	sp, #36	; 0x24
 80200da:	bd30      	pop	{r4, r5, pc}

080200dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80200dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80200de:	2200      	movs	r2, #0
 80200e0:	4917      	ldr	r1, [pc, #92]	; (8020140 <MX_USB_DEVICE_Init+0x64>)
 80200e2:	4818      	ldr	r0, [pc, #96]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 80200e4:	f7f1 f956 	bl	8011394 <USBD_Init>
 80200e8:	b970      	cbnz	r0, 8020108 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80200ea:	4917      	ldr	r1, [pc, #92]	; (8020148 <MX_USB_DEVICE_Init+0x6c>)
 80200ec:	4815      	ldr	r0, [pc, #84]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 80200ee:	f7f1 f969 	bl	80113c4 <USBD_RegisterClass>
 80200f2:	b988      	cbnz	r0, 8020118 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80200f4:	4915      	ldr	r1, [pc, #84]	; (802014c <MX_USB_DEVICE_Init+0x70>)
 80200f6:	4813      	ldr	r0, [pc, #76]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 80200f8:	f7f1 f918 	bl	801132c <USBD_CDC_RegisterInterface>
 80200fc:	b9a0      	cbnz	r0, 8020128 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80200fe:	4811      	ldr	r0, [pc, #68]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 8020100:	f7f1 f976 	bl	80113f0 <USBD_Start>
 8020104:	b9b8      	cbnz	r0, 8020136 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8020106:	bd08      	pop	{r3, pc}
    Error_Handler();
 8020108:	f7e2 fd3c 	bl	8002b84 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 802010c:	490e      	ldr	r1, [pc, #56]	; (8020148 <MX_USB_DEVICE_Init+0x6c>)
 802010e:	480d      	ldr	r0, [pc, #52]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 8020110:	f7f1 f958 	bl	80113c4 <USBD_RegisterClass>
 8020114:	2800      	cmp	r0, #0
 8020116:	d0ed      	beq.n	80200f4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8020118:	f7e2 fd34 	bl	8002b84 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802011c:	490b      	ldr	r1, [pc, #44]	; (802014c <MX_USB_DEVICE_Init+0x70>)
 802011e:	4809      	ldr	r0, [pc, #36]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 8020120:	f7f1 f904 	bl	801132c <USBD_CDC_RegisterInterface>
 8020124:	2800      	cmp	r0, #0
 8020126:	d0ea      	beq.n	80200fe <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8020128:	f7e2 fd2c 	bl	8002b84 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 802012c:	4805      	ldr	r0, [pc, #20]	; (8020144 <MX_USB_DEVICE_Init+0x68>)
 802012e:	f7f1 f95f 	bl	80113f0 <USBD_Start>
 8020132:	2800      	cmp	r0, #0
 8020134:	d0e7      	beq.n	8020106 <MX_USB_DEVICE_Init+0x2a>
}
 8020136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 802013a:	f7e2 bd23 	b.w	8002b84 <Error_Handler>
 802013e:	bf00      	nop
 8020140:	200003fc 	.word	0x200003fc
 8020144:	200368f8 	.word	0x200368f8
 8020148:	200002cc 	.word	0x200002cc
 802014c:	200003e8 	.word	0x200003e8

08020150 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8020150:	2000      	movs	r0, #0
 8020152:	4770      	bx	lr

08020154 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8020154:	2000      	movs	r0, #0
 8020156:	4770      	bx	lr

08020158 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8020158:	2000      	movs	r0, #0
 802015a:	4770      	bx	lr

0802015c <CDC_Receive_FS>:
{
 802015c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802015e:	4c05      	ldr	r4, [pc, #20]	; (8020174 <CDC_Receive_FS+0x18>)
{
 8020160:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8020162:	4620      	mov	r0, r4
 8020164:	f7f1 f8f4 	bl	8011350 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8020168:	4620      	mov	r0, r4
 802016a:	f7f1 f8f9 	bl	8011360 <USBD_CDC_ReceivePacket>
}
 802016e:	2000      	movs	r0, #0
 8020170:	bd10      	pop	{r4, pc}
 8020172:	bf00      	nop
 8020174:	200368f8 	.word	0x200368f8

08020178 <CDC_Init_FS>:
{
 8020178:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 802017a:	4c06      	ldr	r4, [pc, #24]	; (8020194 <CDC_Init_FS+0x1c>)
 802017c:	2200      	movs	r2, #0
 802017e:	4906      	ldr	r1, [pc, #24]	; (8020198 <CDC_Init_FS+0x20>)
 8020180:	4620      	mov	r0, r4
 8020182:	f7f1 f8db 	bl	801133c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8020186:	4620      	mov	r0, r4
 8020188:	4904      	ldr	r1, [pc, #16]	; (802019c <CDC_Init_FS+0x24>)
 802018a:	f7f1 f8e1 	bl	8011350 <USBD_CDC_SetRxBuffer>
}
 802018e:	2000      	movs	r0, #0
 8020190:	bd10      	pop	{r4, pc}
 8020192:	bf00      	nop
 8020194:	200368f8 	.word	0x200368f8
 8020198:	200373c8 	.word	0x200373c8
 802019c:	20036bc8 	.word	0x20036bc8

080201a0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80201a0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80201a2:	4801      	ldr	r0, [pc, #4]	; (80201a8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80201a4:	800b      	strh	r3, [r1, #0]
}
 80201a6:	4770      	bx	lr
 80201a8:	20000428 	.word	0x20000428

080201ac <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80201ac:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80201ae:	4801      	ldr	r0, [pc, #4]	; (80201b4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80201b0:	800b      	strh	r3, [r1, #0]
}
 80201b2:	4770      	bx	lr
 80201b4:	2000043c 	.word	0x2000043c

080201b8 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80201b8:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80201ba:	4801      	ldr	r0, [pc, #4]	; (80201c0 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 80201bc:	800b      	strh	r3, [r1, #0]
}
 80201be:	4770      	bx	lr
 80201c0:	2000041c 	.word	0x2000041c

080201c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80201c4:	b4f0      	push	{r4, r5, r6, r7}
 80201c6:	2400      	movs	r4, #0
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80201c8:	0052      	lsls	r2, r2, #1
 80201ca:	1c4e      	adds	r6, r1, #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80201cc:	4627      	mov	r7, r4
    if (((value >> 28)) < 0xA)
 80201ce:	0f03      	lsrs	r3, r0, #28
 80201d0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 80201d4:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 80201d8:	f103 0530 	add.w	r5, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80201dc:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80201e0:	bf34      	ite	cc
 80201e2:	550d      	strbcc	r5, [r1, r4]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80201e4:	550b      	strbcs	r3, [r1, r4]
    pbuf[2 * idx + 1] = 0;
 80201e6:	5537      	strb	r7, [r6, r4]
 80201e8:	3402      	adds	r4, #2
  for (idx = 0; idx < len; idx++)
 80201ea:	42a2      	cmp	r2, r4
 80201ec:	d1ef      	bne.n	80201ce <IntToUnicode+0xa>
  }
}
 80201ee:	bcf0      	pop	{r4, r5, r6, r7}
 80201f0:	4770      	bx	lr
 80201f2:	bf00      	nop

080201f4 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80201f4:	480b      	ldr	r0, [pc, #44]	; (8020224 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 80201f6:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80201f8:	4b0b      	ldr	r3, [pc, #44]	; (8020228 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80201fa:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 80201fc:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 80201fe:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8020200:	18c0      	adds	r0, r0, r3
 8020202:	d101      	bne.n	8020208 <USBD_FS_SerialStrDescriptor+0x14>
}
 8020204:	4809      	ldr	r0, [pc, #36]	; (802022c <USBD_FS_SerialStrDescriptor+0x38>)
 8020206:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020208:	4b09      	ldr	r3, [pc, #36]	; (8020230 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802020a:	2208      	movs	r2, #8
 802020c:	4909      	ldr	r1, [pc, #36]	; (8020234 <USBD_FS_SerialStrDescriptor+0x40>)
{
 802020e:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8020210:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8020212:	f7ff ffd7 	bl	80201c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8020216:	2204      	movs	r2, #4
 8020218:	4907      	ldr	r1, [pc, #28]	; (8020238 <USBD_FS_SerialStrDescriptor+0x44>)
 802021a:	4620      	mov	r0, r4
 802021c:	f7ff ffd2 	bl	80201c4 <IntToUnicode>
}
 8020220:	4802      	ldr	r0, [pc, #8]	; (802022c <USBD_FS_SerialStrDescriptor+0x38>)
 8020222:	bd10      	pop	{r4, pc}
 8020224:	1ff0f420 	.word	0x1ff0f420
 8020228:	1ff0f428 	.word	0x1ff0f428
 802022c:	20000440 	.word	0x20000440
 8020230:	1ff0f424 	.word	0x1ff0f424
 8020234:	20000442 	.word	0x20000442
 8020238:	20000452 	.word	0x20000452

0802023c <USBD_FS_ManufacturerStrDescriptor>:
{
 802023c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802023e:	4c04      	ldr	r4, [pc, #16]	; (8020250 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8020240:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8020242:	4804      	ldr	r0, [pc, #16]	; (8020254 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8020244:	4621      	mov	r1, r4
 8020246:	f7f1 fc9f 	bl	8011b88 <USBD_GetString>
}
 802024a:	4620      	mov	r0, r4
 802024c:	bd10      	pop	{r4, pc}
 802024e:	bf00      	nop
 8020250:	20037bc8 	.word	0x20037bc8
 8020254:	08040ee4 	.word	0x08040ee4

08020258 <USBD_FS_ProductStrDescriptor>:
{
 8020258:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802025a:	4c04      	ldr	r4, [pc, #16]	; (802026c <USBD_FS_ProductStrDescriptor+0x14>)
{
 802025c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 802025e:	4804      	ldr	r0, [pc, #16]	; (8020270 <USBD_FS_ProductStrDescriptor+0x18>)
 8020260:	4621      	mov	r1, r4
 8020262:	f7f1 fc91 	bl	8011b88 <USBD_GetString>
}
 8020266:	4620      	mov	r0, r4
 8020268:	bd10      	pop	{r4, pc}
 802026a:	bf00      	nop
 802026c:	20037bc8 	.word	0x20037bc8
 8020270:	08040ef8 	.word	0x08040ef8

08020274 <USBD_FS_ConfigStrDescriptor>:
{
 8020274:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8020276:	4c04      	ldr	r4, [pc, #16]	; (8020288 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8020278:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802027a:	4804      	ldr	r0, [pc, #16]	; (802028c <USBD_FS_ConfigStrDescriptor+0x18>)
 802027c:	4621      	mov	r1, r4
 802027e:	f7f1 fc83 	bl	8011b88 <USBD_GetString>
}
 8020282:	4620      	mov	r0, r4
 8020284:	bd10      	pop	{r4, pc}
 8020286:	bf00      	nop
 8020288:	20037bc8 	.word	0x20037bc8
 802028c:	08040f10 	.word	0x08040f10

08020290 <USBD_FS_InterfaceStrDescriptor>:
{
 8020290:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020292:	4c04      	ldr	r4, [pc, #16]	; (80202a4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8020294:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8020296:	4804      	ldr	r0, [pc, #16]	; (80202a8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8020298:	4621      	mov	r1, r4
 802029a:	f7f1 fc75 	bl	8011b88 <USBD_GetString>
}
 802029e:	4620      	mov	r0, r4
 80202a0:	bd10      	pop	{r4, pc}
 80202a2:	bf00      	nop
 80202a4:	20037bc8 	.word	0x20037bc8
 80202a8:	08040f1c 	.word	0x08040f1c

080202ac <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80202ac:	6803      	ldr	r3, [r0, #0]
{
 80202ae:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 80202b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80202b4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80202b6:	f04f 0400 	mov.w	r4, #0
 80202ba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80202be:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80202c2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80202c4:	d001      	beq.n	80202ca <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80202c6:	b009      	add	sp, #36	; 0x24
 80202c8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80202ca:	4d1e      	ldr	r5, [pc, #120]	; (8020344 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80202cc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80202d0:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80202d2:	2003      	movs	r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80202d4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80202d6:	f043 0301 	orr.w	r3, r3, #1
 80202da:	632b      	str	r3, [r5, #48]	; 0x30
 80202dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80202de:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80202e0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80202e4:	4818      	ldr	r0, [pc, #96]	; (8020348 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80202e6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80202e8:	9300      	str	r3, [sp, #0]
 80202ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80202ec:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80202f0:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80202f2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80202f4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80202f6:	f7e8 feef 	bl	80090d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80202fa:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80202fe:	a903      	add	r1, sp, #12
 8020300:	4811      	ldr	r0, [pc, #68]	; (8020348 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8020302:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020304:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020308:	f7e8 fee6 	bl	80090d8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802030c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 802030e:	4622      	mov	r2, r4
 8020310:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8020316:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020318:	636b      	str	r3, [r5, #52]	; 0x34
 802031a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802031c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020320:	9301      	str	r3, [sp, #4]
 8020322:	9b01      	ldr	r3, [sp, #4]
 8020324:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8020326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802032a:	646b      	str	r3, [r5, #68]	; 0x44
 802032c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802032e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020332:	9302      	str	r3, [sp, #8]
 8020334:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8020336:	f7e6 fc21 	bl	8006b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802033a:	2043      	movs	r0, #67	; 0x43
 802033c:	f7e6 fc68 	bl	8006c10 <HAL_NVIC_EnableIRQ>
}
 8020340:	b009      	add	sp, #36	; 0x24
 8020342:	bd30      	pop	{r4, r5, pc}
 8020344:	40023800 	.word	0x40023800
 8020348:	40020000 	.word	0x40020000

0802034c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802034c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8020350:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020354:	f7f1 b85e 	b.w	8011414 <USBD_LL_SetupStage>

08020358 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8020358:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802035c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8020360:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8020368:	f7f1 b882 	b.w	8011470 <USBD_LL_DataOutStage>

0802036c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802036c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8020370:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8020374:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020378:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802037a:	f7f1 b8af 	b.w	80114dc <USBD_LL_DataInStage>
 802037e:	bf00      	nop

08020380 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8020380:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020384:	f7f1 b940 	b.w	8011608 <USBD_LL_SOF>

08020388 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8020388:	68c1      	ldr	r1, [r0, #12]
{
 802038a:	b510      	push	{r4, lr}
 802038c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802038e:	b111      	cbz	r1, 8020396 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8020390:	2902      	cmp	r1, #2
 8020392:	d10a      	bne.n	80203aa <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8020394:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8020396:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 802039a:	f7f1 f91d 	bl	80115d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802039e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 80203a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80203a6:	f7f1 b8ef 	b.w	8011588 <USBD_LL_Reset>
    Error_Handler();
 80203aa:	f7e2 fbeb 	bl	8002b84 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80203ae:	2101      	movs	r1, #1
 80203b0:	e7f1      	b.n	8020396 <HAL_PCD_ResetCallback+0xe>
 80203b2:	bf00      	nop

080203b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80203b4:	b510      	push	{r4, lr}
 80203b6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80203b8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80203bc:	f7f1 f910 	bl	80115e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80203c0:	6822      	ldr	r2, [r4, #0]
 80203c2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80203c6:	f043 0301 	orr.w	r3, r3, #1
 80203ca:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80203ce:	6a23      	ldr	r3, [r4, #32]
 80203d0:	b123      	cbz	r3, 80203dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80203d2:	4a03      	ldr	r2, [pc, #12]	; (80203e0 <HAL_PCD_SuspendCallback+0x2c>)
 80203d4:	6913      	ldr	r3, [r2, #16]
 80203d6:	f043 0306 	orr.w	r3, r3, #6
 80203da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80203dc:	bd10      	pop	{r4, pc}
 80203de:	bf00      	nop
 80203e0:	e000ed00 	.word	0xe000ed00

080203e4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80203e4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80203e8:	f7f1 b904 	b.w	80115f4 <USBD_LL_Resume>

080203ec <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80203ec:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80203f0:	f7f1 b91a 	b.w	8011628 <USBD_LL_IsoOUTIncomplete>

080203f4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80203f4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80203f8:	f7f1 b914 	b.w	8011624 <USBD_LL_IsoINIncomplete>

080203fc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80203fc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020400:	f7f1 b914 	b.w	801162c <USBD_LL_DevConnected>

08020404 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8020404:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8020408:	f7f1 b912 	b.w	8011630 <USBD_LL_DevDisconnected>

0802040c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802040c:	7802      	ldrb	r2, [r0, #0]
 802040e:	b10a      	cbz	r2, 8020414 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8020410:	2000      	movs	r0, #0
 8020412:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 8020414:	4b15      	ldr	r3, [pc, #84]	; (802046c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8020416:	2101      	movs	r1, #1
{
 8020418:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802041a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802041c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020420:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8020422:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8020426:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802042a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 802042c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 802042e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8020430:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8020432:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8020434:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8020438:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 802043c:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8020440:	f7e9 fe4e 	bl	800a0e0 <HAL_PCD_Init>
 8020444:	b978      	cbnz	r0, 8020466 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8020446:	2180      	movs	r1, #128	; 0x80
 8020448:	4808      	ldr	r0, [pc, #32]	; (802046c <USBD_LL_Init+0x60>)
 802044a:	f7ea fbb5 	bl	800abb8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802044e:	2240      	movs	r2, #64	; 0x40
 8020450:	2100      	movs	r1, #0
 8020452:	4806      	ldr	r0, [pc, #24]	; (802046c <USBD_LL_Init+0x60>)
 8020454:	f7ea fb8c 	bl	800ab70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8020458:	2280      	movs	r2, #128	; 0x80
 802045a:	2101      	movs	r1, #1
 802045c:	4803      	ldr	r0, [pc, #12]	; (802046c <USBD_LL_Init+0x60>)
 802045e:	f7ea fb87 	bl	800ab70 <HAL_PCDEx_SetTxFiFo>
}
 8020462:	2000      	movs	r0, #0
 8020464:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8020466:	f7e2 fb8d 	bl	8002b84 <Error_Handler>
 802046a:	e7ec      	b.n	8020446 <USBD_LL_Init+0x3a>
 802046c:	20037dc8 	.word	0x20037dc8

08020470 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8020470:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8020474:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8020476:	f7e9 fee1 	bl	800a23c <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 802047a:	2803      	cmp	r0, #3
 802047c:	d802      	bhi.n	8020484 <USBD_LL_Start+0x14>
 802047e:	4b02      	ldr	r3, [pc, #8]	; (8020488 <USBD_LL_Start+0x18>)
 8020480:	5c18      	ldrb	r0, [r3, r0]
}
 8020482:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8020484:	2003      	movs	r0, #3
}
 8020486:	bd08      	pop	{r3, pc}
 8020488:	08040f2c 	.word	0x08040f2c

0802048c <USBD_LL_OpenEP>:
{
 802048c:	b510      	push	{r4, lr}
 802048e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020490:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8020494:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8020496:	4623      	mov	r3, r4
 8020498:	f7ea fa26 	bl	800a8e8 <HAL_PCD_EP_Open>
  switch (hal_status)
 802049c:	2803      	cmp	r0, #3
 802049e:	d802      	bhi.n	80204a6 <USBD_LL_OpenEP+0x1a>
 80204a0:	4b02      	ldr	r3, [pc, #8]	; (80204ac <USBD_LL_OpenEP+0x20>)
 80204a2:	5c18      	ldrb	r0, [r3, r0]
}
 80204a4:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80204a6:	2003      	movs	r0, #3
}
 80204a8:	bd10      	pop	{r4, pc}
 80204aa:	bf00      	nop
 80204ac:	08040f2c 	.word	0x08040f2c

080204b0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80204b0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80204b4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80204b6:	f7ea fa51 	bl	800a95c <HAL_PCD_EP_Close>
  switch (hal_status)
 80204ba:	2803      	cmp	r0, #3
 80204bc:	d802      	bhi.n	80204c4 <USBD_LL_CloseEP+0x14>
 80204be:	4b02      	ldr	r3, [pc, #8]	; (80204c8 <USBD_LL_CloseEP+0x18>)
 80204c0:	5c18      	ldrb	r0, [r3, r0]
}
 80204c2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80204c4:	2003      	movs	r0, #3
}
 80204c6:	bd08      	pop	{r3, pc}
 80204c8:	08040f2c 	.word	0x08040f2c

080204cc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80204cc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80204d0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80204d2:	f7ea facd 	bl	800aa70 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 80204d6:	2803      	cmp	r0, #3
 80204d8:	d802      	bhi.n	80204e0 <USBD_LL_StallEP+0x14>
 80204da:	4b02      	ldr	r3, [pc, #8]	; (80204e4 <USBD_LL_StallEP+0x18>)
 80204dc:	5c18      	ldrb	r0, [r3, r0]
}
 80204de:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80204e0:	2003      	movs	r0, #3
}
 80204e2:	bd08      	pop	{r3, pc}
 80204e4:	08040f2c 	.word	0x08040f2c

080204e8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80204e8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80204ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80204ee:	f7ea fb03 	bl	800aaf8 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 80204f2:	2803      	cmp	r0, #3
 80204f4:	d802      	bhi.n	80204fc <USBD_LL_ClearStallEP+0x14>
 80204f6:	4b02      	ldr	r3, [pc, #8]	; (8020500 <USBD_LL_ClearStallEP+0x18>)
 80204f8:	5c18      	ldrb	r0, [r3, r0]
}
 80204fa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80204fc:	2003      	movs	r0, #3
}
 80204fe:	bd08      	pop	{r3, pc}
 8020500:	08040f2c 	.word	0x08040f2c

08020504 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8020504:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8020506:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 802050a:	d406      	bmi.n	802051a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802050c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8020510:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020514:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8020518:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802051a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802051e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8020522:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020526:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 802052a:	4770      	bx	lr

0802052c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802052c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8020530:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020532:	f7ea f9c5 	bl	800a8c0 <HAL_PCD_SetAddress>
  switch (hal_status)
 8020536:	2803      	cmp	r0, #3
 8020538:	d802      	bhi.n	8020540 <USBD_LL_SetUSBAddress+0x14>
 802053a:	4b02      	ldr	r3, [pc, #8]	; (8020544 <USBD_LL_SetUSBAddress+0x18>)
 802053c:	5c18      	ldrb	r0, [r3, r0]
}
 802053e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8020540:	2003      	movs	r0, #3
}
 8020542:	bd08      	pop	{r3, pc}
 8020544:	08040f2c 	.word	0x08040f2c

08020548 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020548:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802054c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802054e:	f7ea fa6b 	bl	800aa28 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8020552:	2803      	cmp	r0, #3
 8020554:	d802      	bhi.n	802055c <USBD_LL_Transmit+0x14>
 8020556:	4b02      	ldr	r3, [pc, #8]	; (8020560 <USBD_LL_Transmit+0x18>)
 8020558:	5c18      	ldrb	r0, [r3, r0]
}
 802055a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802055c:	2003      	movs	r0, #3
}
 802055e:	bd08      	pop	{r3, pc}
 8020560:	08040f2c 	.word	0x08040f2c

08020564 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020564:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8020568:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802056a:	f7ea fa2b 	bl	800a9c4 <HAL_PCD_EP_Receive>
  switch (hal_status)
 802056e:	2803      	cmp	r0, #3
 8020570:	d802      	bhi.n	8020578 <USBD_LL_PrepareReceive+0x14>
 8020572:	4b02      	ldr	r3, [pc, #8]	; (802057c <USBD_LL_PrepareReceive+0x18>)
 8020574:	5c18      	ldrb	r0, [r3, r0]
}
 8020576:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020578:	2003      	movs	r0, #3
}
 802057a:	bd08      	pop	{r3, pc}
 802057c:	08040f2c 	.word	0x08040f2c

08020580 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8020580:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8020584:	f7ea ba46 	b.w	800aa14 <HAL_PCD_EP_GetRxCount>

08020588 <HAL_PCDEx_LPM_Callback>:
{
 8020588:	b510      	push	{r4, lr}
 802058a:	4604      	mov	r4, r0
  switch (msg)
 802058c:	b1a1      	cbz	r1, 80205b8 <HAL_PCDEx_LPM_Callback+0x30>
 802058e:	2901      	cmp	r1, #1
 8020590:	d111      	bne.n	80205b6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020592:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8020594:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8020598:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 802059c:	f043 0301 	orr.w	r3, r3, #1
 80205a0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80205a4:	f7f1 f81c 	bl	80115e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80205a8:	6a23      	ldr	r3, [r4, #32]
 80205aa:	b123      	cbz	r3, 80205b6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80205ac:	4a0e      	ldr	r2, [pc, #56]	; (80205e8 <HAL_PCDEx_LPM_Callback+0x60>)
 80205ae:	6913      	ldr	r3, [r2, #16]
 80205b0:	f043 0306 	orr.w	r3, r3, #6
 80205b4:	6113      	str	r3, [r2, #16]
}
 80205b6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80205b8:	6a03      	ldr	r3, [r0, #32]
 80205ba:	b963      	cbnz	r3, 80205d6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80205bc:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80205be:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80205c2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80205c6:	f023 0301 	bic.w	r3, r3, #1
}
 80205ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80205ce:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 80205d2:	f7f1 b80f 	b.w	80115f4 <USBD_LL_Resume>
  SystemClock_Config();
 80205d6:	f7e2 fadd 	bl	8002b94 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80205da:	4a03      	ldr	r2, [pc, #12]	; (80205e8 <HAL_PCDEx_LPM_Callback+0x60>)
 80205dc:	6913      	ldr	r3, [r2, #16]
 80205de:	f023 0306 	bic.w	r3, r3, #6
 80205e2:	6113      	str	r3, [r2, #16]
 80205e4:	e7ea      	b.n	80205bc <HAL_PCDEx_LPM_Callback+0x34>
 80205e6:	bf00      	nop
 80205e8:	e000ed00 	.word	0xe000ed00

080205ec <atoi>:
 80205ec:	220a      	movs	r2, #10
 80205ee:	2100      	movs	r1, #0
 80205f0:	f002 b928 	b.w	8022844 <strtol>

080205f4 <ctime>:
 80205f4:	b508      	push	{r3, lr}
 80205f6:	f000 f829 	bl	802064c <localtime>
 80205fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80205fe:	f002 bcbf 	b.w	8022f80 <asctime>
	...

08020604 <__libc_init_array>:
 8020604:	b570      	push	{r4, r5, r6, lr}
 8020606:	4d0d      	ldr	r5, [pc, #52]	; (802063c <__libc_init_array+0x38>)
 8020608:	4c0d      	ldr	r4, [pc, #52]	; (8020640 <__libc_init_array+0x3c>)
 802060a:	1b64      	subs	r4, r4, r5
 802060c:	10a4      	asrs	r4, r4, #2
 802060e:	2600      	movs	r6, #0
 8020610:	42a6      	cmp	r6, r4
 8020612:	d109      	bne.n	8020628 <__libc_init_array+0x24>
 8020614:	4d0b      	ldr	r5, [pc, #44]	; (8020644 <__libc_init_array+0x40>)
 8020616:	4c0c      	ldr	r4, [pc, #48]	; (8020648 <__libc_init_array+0x44>)
 8020618:	f005 f996 	bl	8025948 <_init>
 802061c:	1b64      	subs	r4, r4, r5
 802061e:	10a4      	asrs	r4, r4, #2
 8020620:	2600      	movs	r6, #0
 8020622:	42a6      	cmp	r6, r4
 8020624:	d105      	bne.n	8020632 <__libc_init_array+0x2e>
 8020626:	bd70      	pop	{r4, r5, r6, pc}
 8020628:	f855 3b04 	ldr.w	r3, [r5], #4
 802062c:	4798      	blx	r3
 802062e:	3601      	adds	r6, #1
 8020630:	e7ee      	b.n	8020610 <__libc_init_array+0xc>
 8020632:	f855 3b04 	ldr.w	r3, [r5], #4
 8020636:	4798      	blx	r3
 8020638:	3601      	adds	r6, #1
 802063a:	e7f2      	b.n	8020622 <__libc_init_array+0x1e>
 802063c:	08041830 	.word	0x08041830
 8020640:	08041830 	.word	0x08041830
 8020644:	08041830 	.word	0x08041830
 8020648:	08041834 	.word	0x08041834

0802064c <localtime>:
 802064c:	b538      	push	{r3, r4, r5, lr}
 802064e:	4b0b      	ldr	r3, [pc, #44]	; (802067c <localtime+0x30>)
 8020650:	681d      	ldr	r5, [r3, #0]
 8020652:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8020654:	4604      	mov	r4, r0
 8020656:	b953      	cbnz	r3, 802066e <localtime+0x22>
 8020658:	2024      	movs	r0, #36	; 0x24
 802065a:	f000 f90b 	bl	8020874 <malloc>
 802065e:	4602      	mov	r2, r0
 8020660:	63e8      	str	r0, [r5, #60]	; 0x3c
 8020662:	b920      	cbnz	r0, 802066e <localtime+0x22>
 8020664:	4b06      	ldr	r3, [pc, #24]	; (8020680 <localtime+0x34>)
 8020666:	4807      	ldr	r0, [pc, #28]	; (8020684 <localtime+0x38>)
 8020668:	2132      	movs	r1, #50	; 0x32
 802066a:	f002 fcd1 	bl	8023010 <__assert_func>
 802066e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8020670:	4620      	mov	r0, r4
 8020672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020676:	f000 b807 	b.w	8020688 <localtime_r>
 802067a:	bf00      	nop
 802067c:	2000045c 	.word	0x2000045c
 8020680:	08041038 	.word	0x08041038
 8020684:	0804104f 	.word	0x0804104f

08020688 <localtime_r>:
 8020688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802068c:	4607      	mov	r7, r0
 802068e:	9101      	str	r1, [sp, #4]
 8020690:	f003 fd22 	bl	80240d8 <__gettzinfo>
 8020694:	9901      	ldr	r1, [sp, #4]
 8020696:	4680      	mov	r8, r0
 8020698:	4638      	mov	r0, r7
 802069a:	f003 fd21 	bl	80240e0 <gmtime_r>
 802069e:	6943      	ldr	r3, [r0, #20]
 80206a0:	079a      	lsls	r2, r3, #30
 80206a2:	4604      	mov	r4, r0
 80206a4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80206a8:	d105      	bne.n	80206b6 <localtime_r+0x2e>
 80206aa:	2264      	movs	r2, #100	; 0x64
 80206ac:	fb96 f3f2 	sdiv	r3, r6, r2
 80206b0:	fb02 6313 	mls	r3, r2, r3, r6
 80206b4:	bb7b      	cbnz	r3, 8020716 <localtime_r+0x8e>
 80206b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80206ba:	fb96 f5f3 	sdiv	r5, r6, r3
 80206be:	fb03 6515 	mls	r5, r3, r5, r6
 80206c2:	fab5 f585 	clz	r5, r5
 80206c6:	096d      	lsrs	r5, r5, #5
 80206c8:	4b68      	ldr	r3, [pc, #416]	; (802086c <localtime_r+0x1e4>)
 80206ca:	2230      	movs	r2, #48	; 0x30
 80206cc:	fb02 3505 	mla	r5, r2, r5, r3
 80206d0:	f002 f9f2 	bl	8022ab8 <__tz_lock>
 80206d4:	f002 f9fc 	bl	8022ad0 <_tzset_unlocked>
 80206d8:	4b65      	ldr	r3, [pc, #404]	; (8020870 <localtime_r+0x1e8>)
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	b353      	cbz	r3, 8020734 <localtime_r+0xac>
 80206de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80206e2:	42b3      	cmp	r3, r6
 80206e4:	d119      	bne.n	802071a <localtime_r+0x92>
 80206e6:	f8d8 1000 	ldr.w	r1, [r8]
 80206ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 80206ee:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80206f2:	b9d1      	cbnz	r1, 802072a <localtime_r+0xa2>
 80206f4:	4296      	cmp	r6, r2
 80206f6:	eb77 0303 	sbcs.w	r3, r7, r3
 80206fa:	da23      	bge.n	8020744 <localtime_r+0xbc>
 80206fc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8020700:	4296      	cmp	r6, r2
 8020702:	eb77 0303 	sbcs.w	r3, r7, r3
 8020706:	bfb4      	ite	lt
 8020708:	2301      	movlt	r3, #1
 802070a:	2300      	movge	r3, #0
 802070c:	6223      	str	r3, [r4, #32]
 802070e:	db1b      	blt.n	8020748 <localtime_r+0xc0>
 8020710:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8020714:	e01a      	b.n	802074c <localtime_r+0xc4>
 8020716:	2501      	movs	r5, #1
 8020718:	e7d6      	b.n	80206c8 <localtime_r+0x40>
 802071a:	4630      	mov	r0, r6
 802071c:	f002 f924 	bl	8022968 <__tzcalc_limits>
 8020720:	2800      	cmp	r0, #0
 8020722:	d1e0      	bne.n	80206e6 <localtime_r+0x5e>
 8020724:	f04f 33ff 	mov.w	r3, #4294967295
 8020728:	e004      	b.n	8020734 <localtime_r+0xac>
 802072a:	4296      	cmp	r6, r2
 802072c:	eb77 0303 	sbcs.w	r3, r7, r3
 8020730:	da02      	bge.n	8020738 <localtime_r+0xb0>
 8020732:	2300      	movs	r3, #0
 8020734:	6223      	str	r3, [r4, #32]
 8020736:	e7eb      	b.n	8020710 <localtime_r+0x88>
 8020738:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802073c:	4296      	cmp	r6, r2
 802073e:	eb77 0303 	sbcs.w	r3, r7, r3
 8020742:	daf6      	bge.n	8020732 <localtime_r+0xaa>
 8020744:	2301      	movs	r3, #1
 8020746:	6223      	str	r3, [r4, #32]
 8020748:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 802074c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8020750:	203c      	movs	r0, #60	; 0x3c
 8020752:	fb91 f6f3 	sdiv	r6, r1, r3
 8020756:	fb03 1316 	mls	r3, r3, r6, r1
 802075a:	6861      	ldr	r1, [r4, #4]
 802075c:	fb93 f2f0 	sdiv	r2, r3, r0
 8020760:	fb00 3012 	mls	r0, r0, r2, r3
 8020764:	6823      	ldr	r3, [r4, #0]
 8020766:	1a89      	subs	r1, r1, r2
 8020768:	68a2      	ldr	r2, [r4, #8]
 802076a:	6061      	str	r1, [r4, #4]
 802076c:	1a1b      	subs	r3, r3, r0
 802076e:	1b92      	subs	r2, r2, r6
 8020770:	2b3b      	cmp	r3, #59	; 0x3b
 8020772:	6023      	str	r3, [r4, #0]
 8020774:	60a2      	str	r2, [r4, #8]
 8020776:	dd35      	ble.n	80207e4 <localtime_r+0x15c>
 8020778:	3101      	adds	r1, #1
 802077a:	6061      	str	r1, [r4, #4]
 802077c:	3b3c      	subs	r3, #60	; 0x3c
 802077e:	6023      	str	r3, [r4, #0]
 8020780:	6863      	ldr	r3, [r4, #4]
 8020782:	2b3b      	cmp	r3, #59	; 0x3b
 8020784:	dd34      	ble.n	80207f0 <localtime_r+0x168>
 8020786:	3201      	adds	r2, #1
 8020788:	60a2      	str	r2, [r4, #8]
 802078a:	3b3c      	subs	r3, #60	; 0x3c
 802078c:	6063      	str	r3, [r4, #4]
 802078e:	68a3      	ldr	r3, [r4, #8]
 8020790:	2b17      	cmp	r3, #23
 8020792:	dd33      	ble.n	80207fc <localtime_r+0x174>
 8020794:	69e2      	ldr	r2, [r4, #28]
 8020796:	3201      	adds	r2, #1
 8020798:	61e2      	str	r2, [r4, #28]
 802079a:	69a2      	ldr	r2, [r4, #24]
 802079c:	3201      	adds	r2, #1
 802079e:	2a06      	cmp	r2, #6
 80207a0:	bfc8      	it	gt
 80207a2:	2200      	movgt	r2, #0
 80207a4:	61a2      	str	r2, [r4, #24]
 80207a6:	68e2      	ldr	r2, [r4, #12]
 80207a8:	3b18      	subs	r3, #24
 80207aa:	3201      	adds	r2, #1
 80207ac:	60a3      	str	r3, [r4, #8]
 80207ae:	6923      	ldr	r3, [r4, #16]
 80207b0:	60e2      	str	r2, [r4, #12]
 80207b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80207b6:	428a      	cmp	r2, r1
 80207b8:	dd0e      	ble.n	80207d8 <localtime_r+0x150>
 80207ba:	2b0b      	cmp	r3, #11
 80207bc:	eba2 0201 	sub.w	r2, r2, r1
 80207c0:	60e2      	str	r2, [r4, #12]
 80207c2:	f103 0201 	add.w	r2, r3, #1
 80207c6:	bf09      	itett	eq
 80207c8:	6963      	ldreq	r3, [r4, #20]
 80207ca:	6122      	strne	r2, [r4, #16]
 80207cc:	2200      	moveq	r2, #0
 80207ce:	3301      	addeq	r3, #1
 80207d0:	bf02      	ittt	eq
 80207d2:	6122      	streq	r2, [r4, #16]
 80207d4:	6163      	streq	r3, [r4, #20]
 80207d6:	61e2      	streq	r2, [r4, #28]
 80207d8:	f002 f974 	bl	8022ac4 <__tz_unlock>
 80207dc:	4620      	mov	r0, r4
 80207de:	b002      	add	sp, #8
 80207e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80207e4:	2b00      	cmp	r3, #0
 80207e6:	dacb      	bge.n	8020780 <localtime_r+0xf8>
 80207e8:	3901      	subs	r1, #1
 80207ea:	6061      	str	r1, [r4, #4]
 80207ec:	333c      	adds	r3, #60	; 0x3c
 80207ee:	e7c6      	b.n	802077e <localtime_r+0xf6>
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	dacc      	bge.n	802078e <localtime_r+0x106>
 80207f4:	3a01      	subs	r2, #1
 80207f6:	60a2      	str	r2, [r4, #8]
 80207f8:	333c      	adds	r3, #60	; 0x3c
 80207fa:	e7c7      	b.n	802078c <localtime_r+0x104>
 80207fc:	2b00      	cmp	r3, #0
 80207fe:	daeb      	bge.n	80207d8 <localtime_r+0x150>
 8020800:	69e2      	ldr	r2, [r4, #28]
 8020802:	3a01      	subs	r2, #1
 8020804:	61e2      	str	r2, [r4, #28]
 8020806:	69a2      	ldr	r2, [r4, #24]
 8020808:	3a01      	subs	r2, #1
 802080a:	bf48      	it	mi
 802080c:	2206      	movmi	r2, #6
 802080e:	61a2      	str	r2, [r4, #24]
 8020810:	68e2      	ldr	r2, [r4, #12]
 8020812:	3318      	adds	r3, #24
 8020814:	3a01      	subs	r2, #1
 8020816:	60e2      	str	r2, [r4, #12]
 8020818:	60a3      	str	r3, [r4, #8]
 802081a:	2a00      	cmp	r2, #0
 802081c:	d1dc      	bne.n	80207d8 <localtime_r+0x150>
 802081e:	6923      	ldr	r3, [r4, #16]
 8020820:	3b01      	subs	r3, #1
 8020822:	d405      	bmi.n	8020830 <localtime_r+0x1a8>
 8020824:	6123      	str	r3, [r4, #16]
 8020826:	6923      	ldr	r3, [r4, #16]
 8020828:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802082c:	60e3      	str	r3, [r4, #12]
 802082e:	e7d3      	b.n	80207d8 <localtime_r+0x150>
 8020830:	230b      	movs	r3, #11
 8020832:	6123      	str	r3, [r4, #16]
 8020834:	6963      	ldr	r3, [r4, #20]
 8020836:	1e5a      	subs	r2, r3, #1
 8020838:	6162      	str	r2, [r4, #20]
 802083a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802083e:	0793      	lsls	r3, r2, #30
 8020840:	d105      	bne.n	802084e <localtime_r+0x1c6>
 8020842:	2164      	movs	r1, #100	; 0x64
 8020844:	fb92 f3f1 	sdiv	r3, r2, r1
 8020848:	fb01 2313 	mls	r3, r1, r3, r2
 802084c:	b963      	cbnz	r3, 8020868 <localtime_r+0x1e0>
 802084e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020852:	fb92 f3f1 	sdiv	r3, r2, r1
 8020856:	fb01 2313 	mls	r3, r1, r3, r2
 802085a:	fab3 f383 	clz	r3, r3
 802085e:	095b      	lsrs	r3, r3, #5
 8020860:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8020864:	61e3      	str	r3, [r4, #28]
 8020866:	e7de      	b.n	8020826 <localtime_r+0x19e>
 8020868:	2301      	movs	r3, #1
 802086a:	e7f9      	b.n	8020860 <localtime_r+0x1d8>
 802086c:	08041110 	.word	0x08041110
 8020870:	20022d44 	.word	0x20022d44

08020874 <malloc>:
 8020874:	4b02      	ldr	r3, [pc, #8]	; (8020880 <malloc+0xc>)
 8020876:	4601      	mov	r1, r0
 8020878:	6818      	ldr	r0, [r3, #0]
 802087a:	f000 bb17 	b.w	8020eac <_malloc_r>
 802087e:	bf00      	nop
 8020880:	2000045c 	.word	0x2000045c

08020884 <free>:
 8020884:	4b02      	ldr	r3, [pc, #8]	; (8020890 <free+0xc>)
 8020886:	4601      	mov	r1, r0
 8020888:	6818      	ldr	r0, [r3, #0]
 802088a:	f000 babf 	b.w	8020e0c <_free_r>
 802088e:	bf00      	nop
 8020890:	2000045c 	.word	0x2000045c

08020894 <memcmp>:
 8020894:	b530      	push	{r4, r5, lr}
 8020896:	3901      	subs	r1, #1
 8020898:	2400      	movs	r4, #0
 802089a:	42a2      	cmp	r2, r4
 802089c:	d101      	bne.n	80208a2 <memcmp+0xe>
 802089e:	2000      	movs	r0, #0
 80208a0:	e005      	b.n	80208ae <memcmp+0x1a>
 80208a2:	5d03      	ldrb	r3, [r0, r4]
 80208a4:	3401      	adds	r4, #1
 80208a6:	5d0d      	ldrb	r5, [r1, r4]
 80208a8:	42ab      	cmp	r3, r5
 80208aa:	d0f6      	beq.n	802089a <memcmp+0x6>
 80208ac:	1b58      	subs	r0, r3, r5
 80208ae:	bd30      	pop	{r4, r5, pc}

080208b0 <memcpy>:
 80208b0:	440a      	add	r2, r1
 80208b2:	4291      	cmp	r1, r2
 80208b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80208b8:	d100      	bne.n	80208bc <memcpy+0xc>
 80208ba:	4770      	bx	lr
 80208bc:	b510      	push	{r4, lr}
 80208be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80208c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80208c6:	4291      	cmp	r1, r2
 80208c8:	d1f9      	bne.n	80208be <memcpy+0xe>
 80208ca:	bd10      	pop	{r4, pc}

080208cc <memmove>:
 80208cc:	4288      	cmp	r0, r1
 80208ce:	b510      	push	{r4, lr}
 80208d0:	eb01 0402 	add.w	r4, r1, r2
 80208d4:	d902      	bls.n	80208dc <memmove+0x10>
 80208d6:	4284      	cmp	r4, r0
 80208d8:	4623      	mov	r3, r4
 80208da:	d807      	bhi.n	80208ec <memmove+0x20>
 80208dc:	1e43      	subs	r3, r0, #1
 80208de:	42a1      	cmp	r1, r4
 80208e0:	d008      	beq.n	80208f4 <memmove+0x28>
 80208e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80208e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80208ea:	e7f8      	b.n	80208de <memmove+0x12>
 80208ec:	4402      	add	r2, r0
 80208ee:	4601      	mov	r1, r0
 80208f0:	428a      	cmp	r2, r1
 80208f2:	d100      	bne.n	80208f6 <memmove+0x2a>
 80208f4:	bd10      	pop	{r4, pc}
 80208f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80208fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80208fe:	e7f7      	b.n	80208f0 <memmove+0x24>

08020900 <memset>:
 8020900:	4402      	add	r2, r0
 8020902:	4603      	mov	r3, r0
 8020904:	4293      	cmp	r3, r2
 8020906:	d100      	bne.n	802090a <memset+0xa>
 8020908:	4770      	bx	lr
 802090a:	f803 1b01 	strb.w	r1, [r3], #1
 802090e:	e7f9      	b.n	8020904 <memset+0x4>

08020910 <validate_structure>:
 8020910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020912:	6801      	ldr	r1, [r0, #0]
 8020914:	293b      	cmp	r1, #59	; 0x3b
 8020916:	4604      	mov	r4, r0
 8020918:	d911      	bls.n	802093e <validate_structure+0x2e>
 802091a:	223c      	movs	r2, #60	; 0x3c
 802091c:	4668      	mov	r0, sp
 802091e:	f002 fba5 	bl	802306c <div>
 8020922:	9a01      	ldr	r2, [sp, #4]
 8020924:	6863      	ldr	r3, [r4, #4]
 8020926:	9900      	ldr	r1, [sp, #0]
 8020928:	2a00      	cmp	r2, #0
 802092a:	440b      	add	r3, r1
 802092c:	6063      	str	r3, [r4, #4]
 802092e:	bfbb      	ittet	lt
 8020930:	323c      	addlt	r2, #60	; 0x3c
 8020932:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8020936:	6022      	strge	r2, [r4, #0]
 8020938:	6022      	strlt	r2, [r4, #0]
 802093a:	bfb8      	it	lt
 802093c:	6063      	strlt	r3, [r4, #4]
 802093e:	6861      	ldr	r1, [r4, #4]
 8020940:	293b      	cmp	r1, #59	; 0x3b
 8020942:	d911      	bls.n	8020968 <validate_structure+0x58>
 8020944:	223c      	movs	r2, #60	; 0x3c
 8020946:	4668      	mov	r0, sp
 8020948:	f002 fb90 	bl	802306c <div>
 802094c:	9a01      	ldr	r2, [sp, #4]
 802094e:	68a3      	ldr	r3, [r4, #8]
 8020950:	9900      	ldr	r1, [sp, #0]
 8020952:	2a00      	cmp	r2, #0
 8020954:	440b      	add	r3, r1
 8020956:	60a3      	str	r3, [r4, #8]
 8020958:	bfbb      	ittet	lt
 802095a:	323c      	addlt	r2, #60	; 0x3c
 802095c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8020960:	6062      	strge	r2, [r4, #4]
 8020962:	6062      	strlt	r2, [r4, #4]
 8020964:	bfb8      	it	lt
 8020966:	60a3      	strlt	r3, [r4, #8]
 8020968:	68a1      	ldr	r1, [r4, #8]
 802096a:	2917      	cmp	r1, #23
 802096c:	d911      	bls.n	8020992 <validate_structure+0x82>
 802096e:	2218      	movs	r2, #24
 8020970:	4668      	mov	r0, sp
 8020972:	f002 fb7b 	bl	802306c <div>
 8020976:	9a01      	ldr	r2, [sp, #4]
 8020978:	68e3      	ldr	r3, [r4, #12]
 802097a:	9900      	ldr	r1, [sp, #0]
 802097c:	2a00      	cmp	r2, #0
 802097e:	440b      	add	r3, r1
 8020980:	60e3      	str	r3, [r4, #12]
 8020982:	bfbb      	ittet	lt
 8020984:	3218      	addlt	r2, #24
 8020986:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802098a:	60a2      	strge	r2, [r4, #8]
 802098c:	60a2      	strlt	r2, [r4, #8]
 802098e:	bfb8      	it	lt
 8020990:	60e3      	strlt	r3, [r4, #12]
 8020992:	6921      	ldr	r1, [r4, #16]
 8020994:	290b      	cmp	r1, #11
 8020996:	d911      	bls.n	80209bc <validate_structure+0xac>
 8020998:	220c      	movs	r2, #12
 802099a:	4668      	mov	r0, sp
 802099c:	f002 fb66 	bl	802306c <div>
 80209a0:	9a01      	ldr	r2, [sp, #4]
 80209a2:	6963      	ldr	r3, [r4, #20]
 80209a4:	9900      	ldr	r1, [sp, #0]
 80209a6:	2a00      	cmp	r2, #0
 80209a8:	440b      	add	r3, r1
 80209aa:	6163      	str	r3, [r4, #20]
 80209ac:	bfbb      	ittet	lt
 80209ae:	320c      	addlt	r2, #12
 80209b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80209b4:	6122      	strge	r2, [r4, #16]
 80209b6:	6122      	strlt	r2, [r4, #16]
 80209b8:	bfb8      	it	lt
 80209ba:	6163      	strlt	r3, [r4, #20]
 80209bc:	6963      	ldr	r3, [r4, #20]
 80209be:	0799      	lsls	r1, r3, #30
 80209c0:	d120      	bne.n	8020a04 <validate_structure+0xf4>
 80209c2:	2164      	movs	r1, #100	; 0x64
 80209c4:	fb93 f2f1 	sdiv	r2, r3, r1
 80209c8:	fb01 3212 	mls	r2, r1, r2, r3
 80209cc:	b9e2      	cbnz	r2, 8020a08 <validate_structure+0xf8>
 80209ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80209d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80209d6:	fb93 f2f1 	sdiv	r2, r3, r1
 80209da:	fb01 3312 	mls	r3, r1, r2, r3
 80209de:	2b00      	cmp	r3, #0
 80209e0:	bf14      	ite	ne
 80209e2:	231c      	movne	r3, #28
 80209e4:	231d      	moveq	r3, #29
 80209e6:	68e2      	ldr	r2, [r4, #12]
 80209e8:	2a00      	cmp	r2, #0
 80209ea:	dc0f      	bgt.n	8020a0c <validate_structure+0xfc>
 80209ec:	4f33      	ldr	r7, [pc, #204]	; (8020abc <validate_structure+0x1ac>)
 80209ee:	260b      	movs	r6, #11
 80209f0:	2064      	movs	r0, #100	; 0x64
 80209f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80209f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80209fa:	f1bc 0f00 	cmp.w	ip, #0
 80209fe:	dd31      	ble.n	8020a64 <validate_structure+0x154>
 8020a00:	b003      	add	sp, #12
 8020a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a04:	231c      	movs	r3, #28
 8020a06:	e7ee      	b.n	80209e6 <validate_structure+0xd6>
 8020a08:	231d      	movs	r3, #29
 8020a0a:	e7ec      	b.n	80209e6 <validate_structure+0xd6>
 8020a0c:	4f2b      	ldr	r7, [pc, #172]	; (8020abc <validate_structure+0x1ac>)
 8020a0e:	f04f 0c00 	mov.w	ip, #0
 8020a12:	2564      	movs	r5, #100	; 0x64
 8020a14:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020a18:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8020a1c:	2a01      	cmp	r2, #1
 8020a1e:	bf14      	ite	ne
 8020a20:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8020a24:	4618      	moveq	r0, r3
 8020a26:	4281      	cmp	r1, r0
 8020a28:	ddea      	ble.n	8020a00 <validate_structure+0xf0>
 8020a2a:	3201      	adds	r2, #1
 8020a2c:	1a09      	subs	r1, r1, r0
 8020a2e:	2a0c      	cmp	r2, #12
 8020a30:	60e1      	str	r1, [r4, #12]
 8020a32:	6122      	str	r2, [r4, #16]
 8020a34:	d1f0      	bne.n	8020a18 <validate_structure+0x108>
 8020a36:	6963      	ldr	r3, [r4, #20]
 8020a38:	1c5a      	adds	r2, r3, #1
 8020a3a:	0791      	lsls	r1, r2, #30
 8020a3c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8020a40:	d137      	bne.n	8020ab2 <validate_structure+0x1a2>
 8020a42:	fb92 f1f5 	sdiv	r1, r2, r5
 8020a46:	fb05 2211 	mls	r2, r5, r1, r2
 8020a4a:	2a00      	cmp	r2, #0
 8020a4c:	d133      	bne.n	8020ab6 <validate_structure+0x1a6>
 8020a4e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8020a52:	fb93 f2f6 	sdiv	r2, r3, r6
 8020a56:	fb06 3312 	mls	r3, r6, r2, r3
 8020a5a:	2b00      	cmp	r3, #0
 8020a5c:	bf14      	ite	ne
 8020a5e:	231c      	movne	r3, #28
 8020a60:	231d      	moveq	r3, #29
 8020a62:	e7d9      	b.n	8020a18 <validate_structure+0x108>
 8020a64:	6921      	ldr	r1, [r4, #16]
 8020a66:	3901      	subs	r1, #1
 8020a68:	6121      	str	r1, [r4, #16]
 8020a6a:	3101      	adds	r1, #1
 8020a6c:	d114      	bne.n	8020a98 <validate_structure+0x188>
 8020a6e:	6963      	ldr	r3, [r4, #20]
 8020a70:	1e59      	subs	r1, r3, #1
 8020a72:	078a      	lsls	r2, r1, #30
 8020a74:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8020a78:	d117      	bne.n	8020aaa <validate_structure+0x19a>
 8020a7a:	fb91 f2f0 	sdiv	r2, r1, r0
 8020a7e:	fb00 1112 	mls	r1, r0, r2, r1
 8020a82:	b9a1      	cbnz	r1, 8020aae <validate_structure+0x19e>
 8020a84:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8020a88:	fb93 f2f5 	sdiv	r2, r3, r5
 8020a8c:	fb05 3312 	mls	r3, r5, r2, r3
 8020a90:	2b00      	cmp	r3, #0
 8020a92:	bf14      	ite	ne
 8020a94:	231c      	movne	r3, #28
 8020a96:	231d      	moveq	r3, #29
 8020a98:	6922      	ldr	r2, [r4, #16]
 8020a9a:	2a01      	cmp	r2, #1
 8020a9c:	bf14      	ite	ne
 8020a9e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8020aa2:	461a      	moveq	r2, r3
 8020aa4:	4462      	add	r2, ip
 8020aa6:	60e2      	str	r2, [r4, #12]
 8020aa8:	e7a5      	b.n	80209f6 <validate_structure+0xe6>
 8020aaa:	231c      	movs	r3, #28
 8020aac:	e7f4      	b.n	8020a98 <validate_structure+0x188>
 8020aae:	231d      	movs	r3, #29
 8020ab0:	e7f2      	b.n	8020a98 <validate_structure+0x188>
 8020ab2:	231c      	movs	r3, #28
 8020ab4:	e7b0      	b.n	8020a18 <validate_structure+0x108>
 8020ab6:	231d      	movs	r3, #29
 8020ab8:	e7ae      	b.n	8020a18 <validate_structure+0x108>
 8020aba:	bf00      	nop
 8020abc:	080410b0 	.word	0x080410b0

08020ac0 <mktime>:
 8020ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ac4:	b08b      	sub	sp, #44	; 0x2c
 8020ac6:	4605      	mov	r5, r0
 8020ac8:	f003 fb06 	bl	80240d8 <__gettzinfo>
 8020acc:	4607      	mov	r7, r0
 8020ace:	4628      	mov	r0, r5
 8020ad0:	f7ff ff1e 	bl	8020910 <validate_structure>
 8020ad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8020ad8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8020adc:	68a8      	ldr	r0, [r5, #8]
 8020ade:	696e      	ldr	r6, [r5, #20]
 8020ae0:	fb0a 2303 	mla	r3, sl, r3, r2
 8020ae4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8020ae8:	fb0a 3a00 	mla	sl, sl, r0, r3
 8020aec:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8020af0:	4ac3      	ldr	r2, [pc, #780]	; (8020e00 <mktime+0x340>)
 8020af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8020af6:	3c01      	subs	r4, #1
 8020af8:	2b01      	cmp	r3, #1
 8020afa:	4414      	add	r4, r2
 8020afc:	dd11      	ble.n	8020b22 <mktime+0x62>
 8020afe:	07b1      	lsls	r1, r6, #30
 8020b00:	d10f      	bne.n	8020b22 <mktime+0x62>
 8020b02:	2264      	movs	r2, #100	; 0x64
 8020b04:	fb96 f3f2 	sdiv	r3, r6, r2
 8020b08:	fb02 6313 	mls	r3, r2, r3, r6
 8020b0c:	b943      	cbnz	r3, 8020b20 <mktime+0x60>
 8020b0e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8020b12:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8020b16:	fb91 f3f2 	sdiv	r3, r1, r2
 8020b1a:	fb02 1313 	mls	r3, r2, r3, r1
 8020b1e:	b903      	cbnz	r3, 8020b22 <mktime+0x62>
 8020b20:	3401      	adds	r4, #1
 8020b22:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8020b26:	3310      	adds	r3, #16
 8020b28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8020b2c:	4293      	cmp	r3, r2
 8020b2e:	61ec      	str	r4, [r5, #28]
 8020b30:	f200 8161 	bhi.w	8020df6 <mktime+0x336>
 8020b34:	2e46      	cmp	r6, #70	; 0x46
 8020b36:	dd77      	ble.n	8020c28 <mktime+0x168>
 8020b38:	2346      	movs	r3, #70	; 0x46
 8020b3a:	f240 1e6d 	movw	lr, #365	; 0x16d
 8020b3e:	2164      	movs	r1, #100	; 0x64
 8020b40:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8020b44:	079a      	lsls	r2, r3, #30
 8020b46:	d169      	bne.n	8020c1c <mktime+0x15c>
 8020b48:	fb93 f2f1 	sdiv	r2, r3, r1
 8020b4c:	fb01 3212 	mls	r2, r1, r2, r3
 8020b50:	2a00      	cmp	r2, #0
 8020b52:	d166      	bne.n	8020c22 <mktime+0x162>
 8020b54:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8020b58:	fb9c f2f0 	sdiv	r2, ip, r0
 8020b5c:	fb00 c212 	mls	r2, r0, r2, ip
 8020b60:	2a00      	cmp	r2, #0
 8020b62:	bf14      	ite	ne
 8020b64:	4672      	movne	r2, lr
 8020b66:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8020b6a:	3301      	adds	r3, #1
 8020b6c:	429e      	cmp	r6, r3
 8020b6e:	4414      	add	r4, r2
 8020b70:	d1e8      	bne.n	8020b44 <mktime+0x84>
 8020b72:	4ba4      	ldr	r3, [pc, #656]	; (8020e04 <mktime+0x344>)
 8020b74:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8020b78:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8020b7c:	f001 ff9c 	bl	8022ab8 <__tz_lock>
 8020b80:	f001 ffa6 	bl	8022ad0 <_tzset_unlocked>
 8020b84:	4ba0      	ldr	r3, [pc, #640]	; (8020e08 <mktime+0x348>)
 8020b86:	f8d3 9000 	ldr.w	r9, [r3]
 8020b8a:	f1b9 0f00 	cmp.w	r9, #0
 8020b8e:	d03f      	beq.n	8020c10 <mktime+0x150>
 8020b90:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8020b94:	6968      	ldr	r0, [r5, #20]
 8020b96:	687b      	ldr	r3, [r7, #4]
 8020b98:	f1b9 0f01 	cmp.w	r9, #1
 8020b9c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8020ba0:	46c8      	mov	r8, r9
 8020ba2:	bfa8      	it	ge
 8020ba4:	f04f 0801 	movge.w	r8, #1
 8020ba8:	4283      	cmp	r3, r0
 8020baa:	d17f      	bne.n	8020cac <mktime+0x1ec>
 8020bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020bae:	4619      	mov	r1, r3
 8020bb0:	17da      	asrs	r2, r3, #31
 8020bb2:	e9cd 1200 	strd	r1, r2, [sp]
 8020bb6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8020bba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8020bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8020bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020bc4:	1a80      	subs	r0, r0, r2
 8020bc6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8020bca:	4582      	cmp	sl, r0
 8020bcc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8020bd0:	eb7b 0101 	sbcs.w	r1, fp, r1
 8020bd4:	da71      	bge.n	8020cba <mktime+0x1fa>
 8020bd6:	9800      	ldr	r0, [sp, #0]
 8020bd8:	6a39      	ldr	r1, [r7, #32]
 8020bda:	1a09      	subs	r1, r1, r0
 8020bdc:	9104      	str	r1, [sp, #16]
 8020bde:	9801      	ldr	r0, [sp, #4]
 8020be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020be2:	eb61 0100 	sbc.w	r1, r1, r0
 8020be6:	9105      	str	r1, [sp, #20]
 8020be8:	6839      	ldr	r1, [r7, #0]
 8020bea:	2900      	cmp	r1, #0
 8020bec:	d075      	beq.n	8020cda <mktime+0x21a>
 8020bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020bf2:	4582      	cmp	sl, r0
 8020bf4:	eb7b 0101 	sbcs.w	r1, fp, r1
 8020bf8:	db05      	blt.n	8020c06 <mktime+0x146>
 8020bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020bfe:	4582      	cmp	sl, r0
 8020c00:	eb7b 0101 	sbcs.w	r1, fp, r1
 8020c04:	db6f      	blt.n	8020ce6 <mktime+0x226>
 8020c06:	f1b9 0f00 	cmp.w	r9, #0
 8020c0a:	f04f 0900 	mov.w	r9, #0
 8020c0e:	da6f      	bge.n	8020cf0 <mktime+0x230>
 8020c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020c12:	eb1a 0a03 	adds.w	sl, sl, r3
 8020c16:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8020c1a:	e0ae      	b.n	8020d7a <mktime+0x2ba>
 8020c1c:	f240 126d 	movw	r2, #365	; 0x16d
 8020c20:	e7a3      	b.n	8020b6a <mktime+0xaa>
 8020c22:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8020c26:	e7a0      	b.n	8020b6a <mktime+0xaa>
 8020c28:	d0a3      	beq.n	8020b72 <mktime+0xb2>
 8020c2a:	2345      	movs	r3, #69	; 0x45
 8020c2c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8020c30:	2164      	movs	r1, #100	; 0x64
 8020c32:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8020c36:	e012      	b.n	8020c5e <mktime+0x19e>
 8020c38:	bb62      	cbnz	r2, 8020c94 <mktime+0x1d4>
 8020c3a:	fb93 f2f1 	sdiv	r2, r3, r1
 8020c3e:	fb01 3212 	mls	r2, r1, r2, r3
 8020c42:	bb52      	cbnz	r2, 8020c9a <mktime+0x1da>
 8020c44:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8020c48:	fb9c f2f0 	sdiv	r2, ip, r0
 8020c4c:	fb00 c212 	mls	r2, r0, r2, ip
 8020c50:	2a00      	cmp	r2, #0
 8020c52:	bf14      	ite	ne
 8020c54:	4672      	movne	r2, lr
 8020c56:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8020c5a:	1aa4      	subs	r4, r4, r2
 8020c5c:	3b01      	subs	r3, #1
 8020c5e:	429e      	cmp	r6, r3
 8020c60:	f003 0203 	and.w	r2, r3, #3
 8020c64:	dbe8      	blt.n	8020c38 <mktime+0x178>
 8020c66:	b9da      	cbnz	r2, 8020ca0 <mktime+0x1e0>
 8020c68:	2264      	movs	r2, #100	; 0x64
 8020c6a:	fb96 f3f2 	sdiv	r3, r6, r2
 8020c6e:	fb02 6313 	mls	r3, r2, r3, r6
 8020c72:	b9c3      	cbnz	r3, 8020ca6 <mktime+0x1e6>
 8020c74:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8020c78:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8020c7c:	fb91 f3f2 	sdiv	r3, r1, r2
 8020c80:	fb02 1313 	mls	r3, r2, r3, r1
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	f240 136d 	movw	r3, #365	; 0x16d
 8020c8a:	bf08      	it	eq
 8020c8c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8020c90:	1ae4      	subs	r4, r4, r3
 8020c92:	e76e      	b.n	8020b72 <mktime+0xb2>
 8020c94:	f240 126d 	movw	r2, #365	; 0x16d
 8020c98:	e7df      	b.n	8020c5a <mktime+0x19a>
 8020c9a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8020c9e:	e7dc      	b.n	8020c5a <mktime+0x19a>
 8020ca0:	f240 136d 	movw	r3, #365	; 0x16d
 8020ca4:	e7f4      	b.n	8020c90 <mktime+0x1d0>
 8020ca6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8020caa:	e7f1      	b.n	8020c90 <mktime+0x1d0>
 8020cac:	f001 fe5c 	bl	8022968 <__tzcalc_limits>
 8020cb0:	2800      	cmp	r0, #0
 8020cb2:	f47f af7b 	bne.w	8020bac <mktime+0xec>
 8020cb6:	46c1      	mov	r9, r8
 8020cb8:	e054      	b.n	8020d64 <mktime+0x2a4>
 8020cba:	9800      	ldr	r0, [sp, #0]
 8020cbc:	9902      	ldr	r1, [sp, #8]
 8020cbe:	1a09      	subs	r1, r1, r0
 8020cc0:	9108      	str	r1, [sp, #32]
 8020cc2:	9801      	ldr	r0, [sp, #4]
 8020cc4:	9903      	ldr	r1, [sp, #12]
 8020cc6:	eb61 0100 	sbc.w	r1, r1, r0
 8020cca:	9109      	str	r1, [sp, #36]	; 0x24
 8020ccc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8020cd0:	4582      	cmp	sl, r0
 8020cd2:	eb7b 0101 	sbcs.w	r1, fp, r1
 8020cd6:	dbee      	blt.n	8020cb6 <mktime+0x1f6>
 8020cd8:	e77d      	b.n	8020bd6 <mktime+0x116>
 8020cda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8020cde:	4582      	cmp	sl, r0
 8020ce0:	eb7b 0101 	sbcs.w	r1, fp, r1
 8020ce4:	db89      	blt.n	8020bfa <mktime+0x13a>
 8020ce6:	f1b9 0f00 	cmp.w	r9, #0
 8020cea:	db3f      	blt.n	8020d6c <mktime+0x2ac>
 8020cec:	f04f 0901 	mov.w	r9, #1
 8020cf0:	ea88 0809 	eor.w	r8, r8, r9
 8020cf4:	f1b8 0f01 	cmp.w	r8, #1
 8020cf8:	d134      	bne.n	8020d64 <mktime+0x2a4>
 8020cfa:	f1b9 0f00 	cmp.w	r9, #0
 8020cfe:	d04f      	beq.n	8020da0 <mktime+0x2e0>
 8020d00:	1ad3      	subs	r3, r2, r3
 8020d02:	682a      	ldr	r2, [r5, #0]
 8020d04:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8020d08:	441a      	add	r2, r3
 8020d0a:	eb1a 0a03 	adds.w	sl, sl, r3
 8020d0e:	602a      	str	r2, [r5, #0]
 8020d10:	4628      	mov	r0, r5
 8020d12:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8020d16:	f7ff fdfb 	bl	8020910 <validate_structure>
 8020d1a:	68ea      	ldr	r2, [r5, #12]
 8020d1c:	ebb2 0208 	subs.w	r2, r2, r8
 8020d20:	d020      	beq.n	8020d64 <mktime+0x2a4>
 8020d22:	2a01      	cmp	r2, #1
 8020d24:	dc3e      	bgt.n	8020da4 <mktime+0x2e4>
 8020d26:	1c90      	adds	r0, r2, #2
 8020d28:	bfd8      	it	le
 8020d2a:	2201      	movle	r2, #1
 8020d2c:	69eb      	ldr	r3, [r5, #28]
 8020d2e:	18d3      	adds	r3, r2, r3
 8020d30:	4414      	add	r4, r2
 8020d32:	d540      	bpl.n	8020db6 <mktime+0x2f6>
 8020d34:	1e72      	subs	r2, r6, #1
 8020d36:	0791      	lsls	r1, r2, #30
 8020d38:	d137      	bne.n	8020daa <mktime+0x2ea>
 8020d3a:	2164      	movs	r1, #100	; 0x64
 8020d3c:	fb92 f3f1 	sdiv	r3, r2, r1
 8020d40:	fb01 2313 	mls	r3, r1, r3, r2
 8020d44:	bba3      	cbnz	r3, 8020db0 <mktime+0x2f0>
 8020d46:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8020d4a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8020d4e:	fb96 f3f2 	sdiv	r3, r6, r2
 8020d52:	fb02 6613 	mls	r6, r2, r3, r6
 8020d56:	2e00      	cmp	r6, #0
 8020d58:	f240 136d 	movw	r3, #365	; 0x16d
 8020d5c:	bf18      	it	ne
 8020d5e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8020d62:	61eb      	str	r3, [r5, #28]
 8020d64:	f1b9 0f01 	cmp.w	r9, #1
 8020d68:	f47f af52 	bne.w	8020c10 <mktime+0x150>
 8020d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020d6e:	eb1a 0a03 	adds.w	sl, sl, r3
 8020d72:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8020d76:	f04f 0901 	mov.w	r9, #1
 8020d7a:	f001 fea3 	bl	8022ac4 <__tz_unlock>
 8020d7e:	3404      	adds	r4, #4
 8020d80:	2307      	movs	r3, #7
 8020d82:	fb94 f3f3 	sdiv	r3, r4, r3
 8020d86:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8020d8a:	1ae4      	subs	r4, r4, r3
 8020d8c:	bf48      	it	mi
 8020d8e:	3407      	addmi	r4, #7
 8020d90:	f8c5 9020 	str.w	r9, [r5, #32]
 8020d94:	61ac      	str	r4, [r5, #24]
 8020d96:	4650      	mov	r0, sl
 8020d98:	4659      	mov	r1, fp
 8020d9a:	b00b      	add	sp, #44	; 0x2c
 8020d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020da0:	1a9b      	subs	r3, r3, r2
 8020da2:	e7ae      	b.n	8020d02 <mktime+0x242>
 8020da4:	f04f 32ff 	mov.w	r2, #4294967295
 8020da8:	e7c0      	b.n	8020d2c <mktime+0x26c>
 8020daa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8020dae:	e7d8      	b.n	8020d62 <mktime+0x2a2>
 8020db0:	f240 136d 	movw	r3, #365	; 0x16d
 8020db4:	e7d5      	b.n	8020d62 <mktime+0x2a2>
 8020db6:	07b2      	lsls	r2, r6, #30
 8020db8:	d117      	bne.n	8020dea <mktime+0x32a>
 8020dba:	2164      	movs	r1, #100	; 0x64
 8020dbc:	fb96 f2f1 	sdiv	r2, r6, r1
 8020dc0:	fb01 6212 	mls	r2, r1, r2, r6
 8020dc4:	b9a2      	cbnz	r2, 8020df0 <mktime+0x330>
 8020dc6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8020dca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8020dce:	fb96 f2f1 	sdiv	r2, r6, r1
 8020dd2:	fb01 6612 	mls	r6, r1, r2, r6
 8020dd6:	2e00      	cmp	r6, #0
 8020dd8:	f240 126d 	movw	r2, #365	; 0x16d
 8020ddc:	bf08      	it	eq
 8020dde:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8020de2:	4293      	cmp	r3, r2
 8020de4:	bfa8      	it	ge
 8020de6:	1a9b      	subge	r3, r3, r2
 8020de8:	e7bb      	b.n	8020d62 <mktime+0x2a2>
 8020dea:	f240 126d 	movw	r2, #365	; 0x16d
 8020dee:	e7f8      	b.n	8020de2 <mktime+0x322>
 8020df0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8020df4:	e7f5      	b.n	8020de2 <mktime+0x322>
 8020df6:	f04f 3aff 	mov.w	sl, #4294967295
 8020dfa:	f04f 3bff 	mov.w	fp, #4294967295
 8020dfe:	e7ca      	b.n	8020d96 <mktime+0x2d6>
 8020e00:	080410e0 	.word	0x080410e0
 8020e04:	00015180 	.word	0x00015180
 8020e08:	20022d44 	.word	0x20022d44

08020e0c <_free_r>:
 8020e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020e0e:	2900      	cmp	r1, #0
 8020e10:	d048      	beq.n	8020ea4 <_free_r+0x98>
 8020e12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020e16:	9001      	str	r0, [sp, #4]
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	f1a1 0404 	sub.w	r4, r1, #4
 8020e1e:	bfb8      	it	lt
 8020e20:	18e4      	addlt	r4, r4, r3
 8020e22:	f003 faa3 	bl	802436c <__malloc_lock>
 8020e26:	4a20      	ldr	r2, [pc, #128]	; (8020ea8 <_free_r+0x9c>)
 8020e28:	9801      	ldr	r0, [sp, #4]
 8020e2a:	6813      	ldr	r3, [r2, #0]
 8020e2c:	4615      	mov	r5, r2
 8020e2e:	b933      	cbnz	r3, 8020e3e <_free_r+0x32>
 8020e30:	6063      	str	r3, [r4, #4]
 8020e32:	6014      	str	r4, [r2, #0]
 8020e34:	b003      	add	sp, #12
 8020e36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020e3a:	f003 ba9d 	b.w	8024378 <__malloc_unlock>
 8020e3e:	42a3      	cmp	r3, r4
 8020e40:	d90b      	bls.n	8020e5a <_free_r+0x4e>
 8020e42:	6821      	ldr	r1, [r4, #0]
 8020e44:	1862      	adds	r2, r4, r1
 8020e46:	4293      	cmp	r3, r2
 8020e48:	bf04      	itt	eq
 8020e4a:	681a      	ldreq	r2, [r3, #0]
 8020e4c:	685b      	ldreq	r3, [r3, #4]
 8020e4e:	6063      	str	r3, [r4, #4]
 8020e50:	bf04      	itt	eq
 8020e52:	1852      	addeq	r2, r2, r1
 8020e54:	6022      	streq	r2, [r4, #0]
 8020e56:	602c      	str	r4, [r5, #0]
 8020e58:	e7ec      	b.n	8020e34 <_free_r+0x28>
 8020e5a:	461a      	mov	r2, r3
 8020e5c:	685b      	ldr	r3, [r3, #4]
 8020e5e:	b10b      	cbz	r3, 8020e64 <_free_r+0x58>
 8020e60:	42a3      	cmp	r3, r4
 8020e62:	d9fa      	bls.n	8020e5a <_free_r+0x4e>
 8020e64:	6811      	ldr	r1, [r2, #0]
 8020e66:	1855      	adds	r5, r2, r1
 8020e68:	42a5      	cmp	r5, r4
 8020e6a:	d10b      	bne.n	8020e84 <_free_r+0x78>
 8020e6c:	6824      	ldr	r4, [r4, #0]
 8020e6e:	4421      	add	r1, r4
 8020e70:	1854      	adds	r4, r2, r1
 8020e72:	42a3      	cmp	r3, r4
 8020e74:	6011      	str	r1, [r2, #0]
 8020e76:	d1dd      	bne.n	8020e34 <_free_r+0x28>
 8020e78:	681c      	ldr	r4, [r3, #0]
 8020e7a:	685b      	ldr	r3, [r3, #4]
 8020e7c:	6053      	str	r3, [r2, #4]
 8020e7e:	4421      	add	r1, r4
 8020e80:	6011      	str	r1, [r2, #0]
 8020e82:	e7d7      	b.n	8020e34 <_free_r+0x28>
 8020e84:	d902      	bls.n	8020e8c <_free_r+0x80>
 8020e86:	230c      	movs	r3, #12
 8020e88:	6003      	str	r3, [r0, #0]
 8020e8a:	e7d3      	b.n	8020e34 <_free_r+0x28>
 8020e8c:	6825      	ldr	r5, [r4, #0]
 8020e8e:	1961      	adds	r1, r4, r5
 8020e90:	428b      	cmp	r3, r1
 8020e92:	bf04      	itt	eq
 8020e94:	6819      	ldreq	r1, [r3, #0]
 8020e96:	685b      	ldreq	r3, [r3, #4]
 8020e98:	6063      	str	r3, [r4, #4]
 8020e9a:	bf04      	itt	eq
 8020e9c:	1949      	addeq	r1, r1, r5
 8020e9e:	6021      	streq	r1, [r4, #0]
 8020ea0:	6054      	str	r4, [r2, #4]
 8020ea2:	e7c7      	b.n	8020e34 <_free_r+0x28>
 8020ea4:	b003      	add	sp, #12
 8020ea6:	bd30      	pop	{r4, r5, pc}
 8020ea8:	20022d20 	.word	0x20022d20

08020eac <_malloc_r>:
 8020eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eae:	1ccd      	adds	r5, r1, #3
 8020eb0:	f025 0503 	bic.w	r5, r5, #3
 8020eb4:	3508      	adds	r5, #8
 8020eb6:	2d0c      	cmp	r5, #12
 8020eb8:	bf38      	it	cc
 8020eba:	250c      	movcc	r5, #12
 8020ebc:	2d00      	cmp	r5, #0
 8020ebe:	4606      	mov	r6, r0
 8020ec0:	db01      	blt.n	8020ec6 <_malloc_r+0x1a>
 8020ec2:	42a9      	cmp	r1, r5
 8020ec4:	d903      	bls.n	8020ece <_malloc_r+0x22>
 8020ec6:	230c      	movs	r3, #12
 8020ec8:	6033      	str	r3, [r6, #0]
 8020eca:	2000      	movs	r0, #0
 8020ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020ece:	f003 fa4d 	bl	802436c <__malloc_lock>
 8020ed2:	4921      	ldr	r1, [pc, #132]	; (8020f58 <_malloc_r+0xac>)
 8020ed4:	680a      	ldr	r2, [r1, #0]
 8020ed6:	4614      	mov	r4, r2
 8020ed8:	b99c      	cbnz	r4, 8020f02 <_malloc_r+0x56>
 8020eda:	4f20      	ldr	r7, [pc, #128]	; (8020f5c <_malloc_r+0xb0>)
 8020edc:	683b      	ldr	r3, [r7, #0]
 8020ede:	b923      	cbnz	r3, 8020eea <_malloc_r+0x3e>
 8020ee0:	4621      	mov	r1, r4
 8020ee2:	4630      	mov	r0, r6
 8020ee4:	f000 fdb2 	bl	8021a4c <_sbrk_r>
 8020ee8:	6038      	str	r0, [r7, #0]
 8020eea:	4629      	mov	r1, r5
 8020eec:	4630      	mov	r0, r6
 8020eee:	f000 fdad 	bl	8021a4c <_sbrk_r>
 8020ef2:	1c43      	adds	r3, r0, #1
 8020ef4:	d123      	bne.n	8020f3e <_malloc_r+0x92>
 8020ef6:	230c      	movs	r3, #12
 8020ef8:	6033      	str	r3, [r6, #0]
 8020efa:	4630      	mov	r0, r6
 8020efc:	f003 fa3c 	bl	8024378 <__malloc_unlock>
 8020f00:	e7e3      	b.n	8020eca <_malloc_r+0x1e>
 8020f02:	6823      	ldr	r3, [r4, #0]
 8020f04:	1b5b      	subs	r3, r3, r5
 8020f06:	d417      	bmi.n	8020f38 <_malloc_r+0x8c>
 8020f08:	2b0b      	cmp	r3, #11
 8020f0a:	d903      	bls.n	8020f14 <_malloc_r+0x68>
 8020f0c:	6023      	str	r3, [r4, #0]
 8020f0e:	441c      	add	r4, r3
 8020f10:	6025      	str	r5, [r4, #0]
 8020f12:	e004      	b.n	8020f1e <_malloc_r+0x72>
 8020f14:	6863      	ldr	r3, [r4, #4]
 8020f16:	42a2      	cmp	r2, r4
 8020f18:	bf0c      	ite	eq
 8020f1a:	600b      	streq	r3, [r1, #0]
 8020f1c:	6053      	strne	r3, [r2, #4]
 8020f1e:	4630      	mov	r0, r6
 8020f20:	f003 fa2a 	bl	8024378 <__malloc_unlock>
 8020f24:	f104 000b 	add.w	r0, r4, #11
 8020f28:	1d23      	adds	r3, r4, #4
 8020f2a:	f020 0007 	bic.w	r0, r0, #7
 8020f2e:	1ac2      	subs	r2, r0, r3
 8020f30:	d0cc      	beq.n	8020ecc <_malloc_r+0x20>
 8020f32:	1a1b      	subs	r3, r3, r0
 8020f34:	50a3      	str	r3, [r4, r2]
 8020f36:	e7c9      	b.n	8020ecc <_malloc_r+0x20>
 8020f38:	4622      	mov	r2, r4
 8020f3a:	6864      	ldr	r4, [r4, #4]
 8020f3c:	e7cc      	b.n	8020ed8 <_malloc_r+0x2c>
 8020f3e:	1cc4      	adds	r4, r0, #3
 8020f40:	f024 0403 	bic.w	r4, r4, #3
 8020f44:	42a0      	cmp	r0, r4
 8020f46:	d0e3      	beq.n	8020f10 <_malloc_r+0x64>
 8020f48:	1a21      	subs	r1, r4, r0
 8020f4a:	4630      	mov	r0, r6
 8020f4c:	f000 fd7e 	bl	8021a4c <_sbrk_r>
 8020f50:	3001      	adds	r0, #1
 8020f52:	d1dd      	bne.n	8020f10 <_malloc_r+0x64>
 8020f54:	e7cf      	b.n	8020ef6 <_malloc_r+0x4a>
 8020f56:	bf00      	nop
 8020f58:	20022d20 	.word	0x20022d20
 8020f5c:	20022d24 	.word	0x20022d24

08020f60 <__cvt>:
 8020f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f62:	ed2d 8b02 	vpush	{d8}
 8020f66:	eeb0 8b40 	vmov.f64	d8, d0
 8020f6a:	b085      	sub	sp, #20
 8020f6c:	4617      	mov	r7, r2
 8020f6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8020f70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020f72:	ee18 2a90 	vmov	r2, s17
 8020f76:	f025 0520 	bic.w	r5, r5, #32
 8020f7a:	2a00      	cmp	r2, #0
 8020f7c:	bfb6      	itet	lt
 8020f7e:	222d      	movlt	r2, #45	; 0x2d
 8020f80:	2200      	movge	r2, #0
 8020f82:	eeb1 8b40 	vneglt.f64	d8, d0
 8020f86:	2d46      	cmp	r5, #70	; 0x46
 8020f88:	460c      	mov	r4, r1
 8020f8a:	701a      	strb	r2, [r3, #0]
 8020f8c:	d004      	beq.n	8020f98 <__cvt+0x38>
 8020f8e:	2d45      	cmp	r5, #69	; 0x45
 8020f90:	d100      	bne.n	8020f94 <__cvt+0x34>
 8020f92:	3401      	adds	r4, #1
 8020f94:	2102      	movs	r1, #2
 8020f96:	e000      	b.n	8020f9a <__cvt+0x3a>
 8020f98:	2103      	movs	r1, #3
 8020f9a:	ab03      	add	r3, sp, #12
 8020f9c:	9301      	str	r3, [sp, #4]
 8020f9e:	ab02      	add	r3, sp, #8
 8020fa0:	9300      	str	r3, [sp, #0]
 8020fa2:	4622      	mov	r2, r4
 8020fa4:	4633      	mov	r3, r6
 8020fa6:	eeb0 0b48 	vmov.f64	d0, d8
 8020faa:	f002 f901 	bl	80231b0 <_dtoa_r>
 8020fae:	2d47      	cmp	r5, #71	; 0x47
 8020fb0:	d109      	bne.n	8020fc6 <__cvt+0x66>
 8020fb2:	07fb      	lsls	r3, r7, #31
 8020fb4:	d407      	bmi.n	8020fc6 <__cvt+0x66>
 8020fb6:	9b03      	ldr	r3, [sp, #12]
 8020fb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020fba:	1a1b      	subs	r3, r3, r0
 8020fbc:	6013      	str	r3, [r2, #0]
 8020fbe:	b005      	add	sp, #20
 8020fc0:	ecbd 8b02 	vpop	{d8}
 8020fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fc6:	2d46      	cmp	r5, #70	; 0x46
 8020fc8:	eb00 0204 	add.w	r2, r0, r4
 8020fcc:	d10c      	bne.n	8020fe8 <__cvt+0x88>
 8020fce:	7803      	ldrb	r3, [r0, #0]
 8020fd0:	2b30      	cmp	r3, #48	; 0x30
 8020fd2:	d107      	bne.n	8020fe4 <__cvt+0x84>
 8020fd4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020fdc:	bf1c      	itt	ne
 8020fde:	f1c4 0401 	rsbne	r4, r4, #1
 8020fe2:	6034      	strne	r4, [r6, #0]
 8020fe4:	6833      	ldr	r3, [r6, #0]
 8020fe6:	441a      	add	r2, r3
 8020fe8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8020fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ff0:	bf08      	it	eq
 8020ff2:	9203      	streq	r2, [sp, #12]
 8020ff4:	2130      	movs	r1, #48	; 0x30
 8020ff6:	9b03      	ldr	r3, [sp, #12]
 8020ff8:	4293      	cmp	r3, r2
 8020ffa:	d2dc      	bcs.n	8020fb6 <__cvt+0x56>
 8020ffc:	1c5c      	adds	r4, r3, #1
 8020ffe:	9403      	str	r4, [sp, #12]
 8021000:	7019      	strb	r1, [r3, #0]
 8021002:	e7f8      	b.n	8020ff6 <__cvt+0x96>

08021004 <__exponent>:
 8021004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021006:	4603      	mov	r3, r0
 8021008:	2900      	cmp	r1, #0
 802100a:	bfb8      	it	lt
 802100c:	4249      	neglt	r1, r1
 802100e:	f803 2b02 	strb.w	r2, [r3], #2
 8021012:	bfb4      	ite	lt
 8021014:	222d      	movlt	r2, #45	; 0x2d
 8021016:	222b      	movge	r2, #43	; 0x2b
 8021018:	2909      	cmp	r1, #9
 802101a:	7042      	strb	r2, [r0, #1]
 802101c:	dd2a      	ble.n	8021074 <__exponent+0x70>
 802101e:	f10d 0407 	add.w	r4, sp, #7
 8021022:	46a4      	mov	ip, r4
 8021024:	270a      	movs	r7, #10
 8021026:	46a6      	mov	lr, r4
 8021028:	460a      	mov	r2, r1
 802102a:	fb91 f6f7 	sdiv	r6, r1, r7
 802102e:	fb07 1516 	mls	r5, r7, r6, r1
 8021032:	3530      	adds	r5, #48	; 0x30
 8021034:	2a63      	cmp	r2, #99	; 0x63
 8021036:	f104 34ff 	add.w	r4, r4, #4294967295
 802103a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802103e:	4631      	mov	r1, r6
 8021040:	dcf1      	bgt.n	8021026 <__exponent+0x22>
 8021042:	3130      	adds	r1, #48	; 0x30
 8021044:	f1ae 0502 	sub.w	r5, lr, #2
 8021048:	f804 1c01 	strb.w	r1, [r4, #-1]
 802104c:	1c44      	adds	r4, r0, #1
 802104e:	4629      	mov	r1, r5
 8021050:	4561      	cmp	r1, ip
 8021052:	d30a      	bcc.n	802106a <__exponent+0x66>
 8021054:	f10d 0209 	add.w	r2, sp, #9
 8021058:	eba2 020e 	sub.w	r2, r2, lr
 802105c:	4565      	cmp	r5, ip
 802105e:	bf88      	it	hi
 8021060:	2200      	movhi	r2, #0
 8021062:	4413      	add	r3, r2
 8021064:	1a18      	subs	r0, r3, r0
 8021066:	b003      	add	sp, #12
 8021068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802106a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802106e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8021072:	e7ed      	b.n	8021050 <__exponent+0x4c>
 8021074:	2330      	movs	r3, #48	; 0x30
 8021076:	3130      	adds	r1, #48	; 0x30
 8021078:	7083      	strb	r3, [r0, #2]
 802107a:	70c1      	strb	r1, [r0, #3]
 802107c:	1d03      	adds	r3, r0, #4
 802107e:	e7f1      	b.n	8021064 <__exponent+0x60>

08021080 <_printf_float>:
 8021080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021084:	b08b      	sub	sp, #44	; 0x2c
 8021086:	460c      	mov	r4, r1
 8021088:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802108c:	4616      	mov	r6, r2
 802108e:	461f      	mov	r7, r3
 8021090:	4605      	mov	r5, r0
 8021092:	f003 f8d9 	bl	8024248 <_localeconv_r>
 8021096:	f8d0 b000 	ldr.w	fp, [r0]
 802109a:	4658      	mov	r0, fp
 802109c:	f7df f8da 	bl	8000254 <strlen>
 80210a0:	2300      	movs	r3, #0
 80210a2:	9308      	str	r3, [sp, #32]
 80210a4:	f8d8 3000 	ldr.w	r3, [r8]
 80210a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80210ac:	6822      	ldr	r2, [r4, #0]
 80210ae:	3307      	adds	r3, #7
 80210b0:	f023 0307 	bic.w	r3, r3, #7
 80210b4:	f103 0108 	add.w	r1, r3, #8
 80210b8:	f8c8 1000 	str.w	r1, [r8]
 80210bc:	4682      	mov	sl, r0
 80210be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80210c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80210c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8021328 <_printf_float+0x2a8>
 80210ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80210ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80210d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80210d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210da:	dd24      	ble.n	8021126 <_printf_float+0xa6>
 80210dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80210e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210e4:	d502      	bpl.n	80210ec <_printf_float+0x6c>
 80210e6:	232d      	movs	r3, #45	; 0x2d
 80210e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80210ec:	4b90      	ldr	r3, [pc, #576]	; (8021330 <_printf_float+0x2b0>)
 80210ee:	4891      	ldr	r0, [pc, #580]	; (8021334 <_printf_float+0x2b4>)
 80210f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80210f4:	bf94      	ite	ls
 80210f6:	4698      	movls	r8, r3
 80210f8:	4680      	movhi	r8, r0
 80210fa:	2303      	movs	r3, #3
 80210fc:	6123      	str	r3, [r4, #16]
 80210fe:	f022 0204 	bic.w	r2, r2, #4
 8021102:	2300      	movs	r3, #0
 8021104:	6022      	str	r2, [r4, #0]
 8021106:	9304      	str	r3, [sp, #16]
 8021108:	9700      	str	r7, [sp, #0]
 802110a:	4633      	mov	r3, r6
 802110c:	aa09      	add	r2, sp, #36	; 0x24
 802110e:	4621      	mov	r1, r4
 8021110:	4628      	mov	r0, r5
 8021112:	f000 f9d3 	bl	80214bc <_printf_common>
 8021116:	3001      	adds	r0, #1
 8021118:	f040 808a 	bne.w	8021230 <_printf_float+0x1b0>
 802111c:	f04f 30ff 	mov.w	r0, #4294967295
 8021120:	b00b      	add	sp, #44	; 0x2c
 8021122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021126:	eeb4 0b40 	vcmp.f64	d0, d0
 802112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802112e:	d709      	bvc.n	8021144 <_printf_float+0xc4>
 8021130:	ee10 3a90 	vmov	r3, s1
 8021134:	2b00      	cmp	r3, #0
 8021136:	bfbc      	itt	lt
 8021138:	232d      	movlt	r3, #45	; 0x2d
 802113a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802113e:	487e      	ldr	r0, [pc, #504]	; (8021338 <_printf_float+0x2b8>)
 8021140:	4b7e      	ldr	r3, [pc, #504]	; (802133c <_printf_float+0x2bc>)
 8021142:	e7d5      	b.n	80210f0 <_printf_float+0x70>
 8021144:	6863      	ldr	r3, [r4, #4]
 8021146:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 802114a:	9104      	str	r1, [sp, #16]
 802114c:	1c59      	adds	r1, r3, #1
 802114e:	d13c      	bne.n	80211ca <_printf_float+0x14a>
 8021150:	2306      	movs	r3, #6
 8021152:	6063      	str	r3, [r4, #4]
 8021154:	2300      	movs	r3, #0
 8021156:	9303      	str	r3, [sp, #12]
 8021158:	ab08      	add	r3, sp, #32
 802115a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802115e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8021162:	ab07      	add	r3, sp, #28
 8021164:	6861      	ldr	r1, [r4, #4]
 8021166:	9300      	str	r3, [sp, #0]
 8021168:	6022      	str	r2, [r4, #0]
 802116a:	f10d 031b 	add.w	r3, sp, #27
 802116e:	4628      	mov	r0, r5
 8021170:	f7ff fef6 	bl	8020f60 <__cvt>
 8021174:	9b04      	ldr	r3, [sp, #16]
 8021176:	9907      	ldr	r1, [sp, #28]
 8021178:	2b47      	cmp	r3, #71	; 0x47
 802117a:	4680      	mov	r8, r0
 802117c:	d108      	bne.n	8021190 <_printf_float+0x110>
 802117e:	1cc8      	adds	r0, r1, #3
 8021180:	db02      	blt.n	8021188 <_printf_float+0x108>
 8021182:	6863      	ldr	r3, [r4, #4]
 8021184:	4299      	cmp	r1, r3
 8021186:	dd41      	ble.n	802120c <_printf_float+0x18c>
 8021188:	f1a9 0902 	sub.w	r9, r9, #2
 802118c:	fa5f f989 	uxtb.w	r9, r9
 8021190:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8021194:	d820      	bhi.n	80211d8 <_printf_float+0x158>
 8021196:	3901      	subs	r1, #1
 8021198:	464a      	mov	r2, r9
 802119a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802119e:	9107      	str	r1, [sp, #28]
 80211a0:	f7ff ff30 	bl	8021004 <__exponent>
 80211a4:	9a08      	ldr	r2, [sp, #32]
 80211a6:	9004      	str	r0, [sp, #16]
 80211a8:	1813      	adds	r3, r2, r0
 80211aa:	2a01      	cmp	r2, #1
 80211ac:	6123      	str	r3, [r4, #16]
 80211ae:	dc02      	bgt.n	80211b6 <_printf_float+0x136>
 80211b0:	6822      	ldr	r2, [r4, #0]
 80211b2:	07d2      	lsls	r2, r2, #31
 80211b4:	d501      	bpl.n	80211ba <_printf_float+0x13a>
 80211b6:	3301      	adds	r3, #1
 80211b8:	6123      	str	r3, [r4, #16]
 80211ba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d0a2      	beq.n	8021108 <_printf_float+0x88>
 80211c2:	232d      	movs	r3, #45	; 0x2d
 80211c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80211c8:	e79e      	b.n	8021108 <_printf_float+0x88>
 80211ca:	9904      	ldr	r1, [sp, #16]
 80211cc:	2947      	cmp	r1, #71	; 0x47
 80211ce:	d1c1      	bne.n	8021154 <_printf_float+0xd4>
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d1bf      	bne.n	8021154 <_printf_float+0xd4>
 80211d4:	2301      	movs	r3, #1
 80211d6:	e7bc      	b.n	8021152 <_printf_float+0xd2>
 80211d8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80211dc:	d118      	bne.n	8021210 <_printf_float+0x190>
 80211de:	2900      	cmp	r1, #0
 80211e0:	6863      	ldr	r3, [r4, #4]
 80211e2:	dd0b      	ble.n	80211fc <_printf_float+0x17c>
 80211e4:	6121      	str	r1, [r4, #16]
 80211e6:	b913      	cbnz	r3, 80211ee <_printf_float+0x16e>
 80211e8:	6822      	ldr	r2, [r4, #0]
 80211ea:	07d0      	lsls	r0, r2, #31
 80211ec:	d502      	bpl.n	80211f4 <_printf_float+0x174>
 80211ee:	3301      	adds	r3, #1
 80211f0:	440b      	add	r3, r1
 80211f2:	6123      	str	r3, [r4, #16]
 80211f4:	2300      	movs	r3, #0
 80211f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80211f8:	9304      	str	r3, [sp, #16]
 80211fa:	e7de      	b.n	80211ba <_printf_float+0x13a>
 80211fc:	b913      	cbnz	r3, 8021204 <_printf_float+0x184>
 80211fe:	6822      	ldr	r2, [r4, #0]
 8021200:	07d2      	lsls	r2, r2, #31
 8021202:	d501      	bpl.n	8021208 <_printf_float+0x188>
 8021204:	3302      	adds	r3, #2
 8021206:	e7f4      	b.n	80211f2 <_printf_float+0x172>
 8021208:	2301      	movs	r3, #1
 802120a:	e7f2      	b.n	80211f2 <_printf_float+0x172>
 802120c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8021210:	9b08      	ldr	r3, [sp, #32]
 8021212:	4299      	cmp	r1, r3
 8021214:	db05      	blt.n	8021222 <_printf_float+0x1a2>
 8021216:	6823      	ldr	r3, [r4, #0]
 8021218:	6121      	str	r1, [r4, #16]
 802121a:	07d8      	lsls	r0, r3, #31
 802121c:	d5ea      	bpl.n	80211f4 <_printf_float+0x174>
 802121e:	1c4b      	adds	r3, r1, #1
 8021220:	e7e7      	b.n	80211f2 <_printf_float+0x172>
 8021222:	2900      	cmp	r1, #0
 8021224:	bfd4      	ite	le
 8021226:	f1c1 0202 	rsble	r2, r1, #2
 802122a:	2201      	movgt	r2, #1
 802122c:	4413      	add	r3, r2
 802122e:	e7e0      	b.n	80211f2 <_printf_float+0x172>
 8021230:	6823      	ldr	r3, [r4, #0]
 8021232:	055a      	lsls	r2, r3, #21
 8021234:	d407      	bmi.n	8021246 <_printf_float+0x1c6>
 8021236:	6923      	ldr	r3, [r4, #16]
 8021238:	4642      	mov	r2, r8
 802123a:	4631      	mov	r1, r6
 802123c:	4628      	mov	r0, r5
 802123e:	47b8      	blx	r7
 8021240:	3001      	adds	r0, #1
 8021242:	d12a      	bne.n	802129a <_printf_float+0x21a>
 8021244:	e76a      	b.n	802111c <_printf_float+0x9c>
 8021246:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 802124a:	f240 80e2 	bls.w	8021412 <_printf_float+0x392>
 802124e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021252:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802125a:	d133      	bne.n	80212c4 <_printf_float+0x244>
 802125c:	4a38      	ldr	r2, [pc, #224]	; (8021340 <_printf_float+0x2c0>)
 802125e:	2301      	movs	r3, #1
 8021260:	4631      	mov	r1, r6
 8021262:	4628      	mov	r0, r5
 8021264:	47b8      	blx	r7
 8021266:	3001      	adds	r0, #1
 8021268:	f43f af58 	beq.w	802111c <_printf_float+0x9c>
 802126c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021270:	429a      	cmp	r2, r3
 8021272:	db02      	blt.n	802127a <_printf_float+0x1fa>
 8021274:	6823      	ldr	r3, [r4, #0]
 8021276:	07d8      	lsls	r0, r3, #31
 8021278:	d50f      	bpl.n	802129a <_printf_float+0x21a>
 802127a:	4653      	mov	r3, sl
 802127c:	465a      	mov	r2, fp
 802127e:	4631      	mov	r1, r6
 8021280:	4628      	mov	r0, r5
 8021282:	47b8      	blx	r7
 8021284:	3001      	adds	r0, #1
 8021286:	f43f af49 	beq.w	802111c <_printf_float+0x9c>
 802128a:	f04f 0800 	mov.w	r8, #0
 802128e:	f104 091a 	add.w	r9, r4, #26
 8021292:	9b08      	ldr	r3, [sp, #32]
 8021294:	3b01      	subs	r3, #1
 8021296:	4543      	cmp	r3, r8
 8021298:	dc09      	bgt.n	80212ae <_printf_float+0x22e>
 802129a:	6823      	ldr	r3, [r4, #0]
 802129c:	079b      	lsls	r3, r3, #30
 802129e:	f100 8108 	bmi.w	80214b2 <_printf_float+0x432>
 80212a2:	68e0      	ldr	r0, [r4, #12]
 80212a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212a6:	4298      	cmp	r0, r3
 80212a8:	bfb8      	it	lt
 80212aa:	4618      	movlt	r0, r3
 80212ac:	e738      	b.n	8021120 <_printf_float+0xa0>
 80212ae:	2301      	movs	r3, #1
 80212b0:	464a      	mov	r2, r9
 80212b2:	4631      	mov	r1, r6
 80212b4:	4628      	mov	r0, r5
 80212b6:	47b8      	blx	r7
 80212b8:	3001      	adds	r0, #1
 80212ba:	f43f af2f 	beq.w	802111c <_printf_float+0x9c>
 80212be:	f108 0801 	add.w	r8, r8, #1
 80212c2:	e7e6      	b.n	8021292 <_printf_float+0x212>
 80212c4:	9b07      	ldr	r3, [sp, #28]
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	dc3c      	bgt.n	8021344 <_printf_float+0x2c4>
 80212ca:	4a1d      	ldr	r2, [pc, #116]	; (8021340 <_printf_float+0x2c0>)
 80212cc:	2301      	movs	r3, #1
 80212ce:	4631      	mov	r1, r6
 80212d0:	4628      	mov	r0, r5
 80212d2:	47b8      	blx	r7
 80212d4:	3001      	adds	r0, #1
 80212d6:	f43f af21 	beq.w	802111c <_printf_float+0x9c>
 80212da:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80212de:	4313      	orrs	r3, r2
 80212e0:	d102      	bne.n	80212e8 <_printf_float+0x268>
 80212e2:	6823      	ldr	r3, [r4, #0]
 80212e4:	07d9      	lsls	r1, r3, #31
 80212e6:	d5d8      	bpl.n	802129a <_printf_float+0x21a>
 80212e8:	4653      	mov	r3, sl
 80212ea:	465a      	mov	r2, fp
 80212ec:	4631      	mov	r1, r6
 80212ee:	4628      	mov	r0, r5
 80212f0:	47b8      	blx	r7
 80212f2:	3001      	adds	r0, #1
 80212f4:	f43f af12 	beq.w	802111c <_printf_float+0x9c>
 80212f8:	f04f 0900 	mov.w	r9, #0
 80212fc:	f104 0a1a 	add.w	sl, r4, #26
 8021300:	9b07      	ldr	r3, [sp, #28]
 8021302:	425b      	negs	r3, r3
 8021304:	454b      	cmp	r3, r9
 8021306:	dc01      	bgt.n	802130c <_printf_float+0x28c>
 8021308:	9b08      	ldr	r3, [sp, #32]
 802130a:	e795      	b.n	8021238 <_printf_float+0x1b8>
 802130c:	2301      	movs	r3, #1
 802130e:	4652      	mov	r2, sl
 8021310:	4631      	mov	r1, r6
 8021312:	4628      	mov	r0, r5
 8021314:	47b8      	blx	r7
 8021316:	3001      	adds	r0, #1
 8021318:	f43f af00 	beq.w	802111c <_printf_float+0x9c>
 802131c:	f109 0901 	add.w	r9, r9, #1
 8021320:	e7ee      	b.n	8021300 <_printf_float+0x280>
 8021322:	bf00      	nop
 8021324:	f3af 8000 	nop.w
 8021328:	ffffffff 	.word	0xffffffff
 802132c:	7fefffff 	.word	0x7fefffff
 8021330:	08041170 	.word	0x08041170
 8021334:	08041174 	.word	0x08041174
 8021338:	0804117c 	.word	0x0804117c
 802133c:	08041178 	.word	0x08041178
 8021340:	08041811 	.word	0x08041811
 8021344:	9a08      	ldr	r2, [sp, #32]
 8021346:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021348:	429a      	cmp	r2, r3
 802134a:	bfa8      	it	ge
 802134c:	461a      	movge	r2, r3
 802134e:	2a00      	cmp	r2, #0
 8021350:	4691      	mov	r9, r2
 8021352:	dc38      	bgt.n	80213c6 <_printf_float+0x346>
 8021354:	2300      	movs	r3, #0
 8021356:	9305      	str	r3, [sp, #20]
 8021358:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802135c:	f104 021a 	add.w	r2, r4, #26
 8021360:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021362:	9905      	ldr	r1, [sp, #20]
 8021364:	9304      	str	r3, [sp, #16]
 8021366:	eba3 0309 	sub.w	r3, r3, r9
 802136a:	428b      	cmp	r3, r1
 802136c:	dc33      	bgt.n	80213d6 <_printf_float+0x356>
 802136e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8021372:	429a      	cmp	r2, r3
 8021374:	db3c      	blt.n	80213f0 <_printf_float+0x370>
 8021376:	6823      	ldr	r3, [r4, #0]
 8021378:	07da      	lsls	r2, r3, #31
 802137a:	d439      	bmi.n	80213f0 <_printf_float+0x370>
 802137c:	9a08      	ldr	r2, [sp, #32]
 802137e:	9b04      	ldr	r3, [sp, #16]
 8021380:	9907      	ldr	r1, [sp, #28]
 8021382:	1ad3      	subs	r3, r2, r3
 8021384:	eba2 0901 	sub.w	r9, r2, r1
 8021388:	4599      	cmp	r9, r3
 802138a:	bfa8      	it	ge
 802138c:	4699      	movge	r9, r3
 802138e:	f1b9 0f00 	cmp.w	r9, #0
 8021392:	dc35      	bgt.n	8021400 <_printf_float+0x380>
 8021394:	f04f 0800 	mov.w	r8, #0
 8021398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802139c:	f104 0a1a 	add.w	sl, r4, #26
 80213a0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80213a4:	1a9b      	subs	r3, r3, r2
 80213a6:	eba3 0309 	sub.w	r3, r3, r9
 80213aa:	4543      	cmp	r3, r8
 80213ac:	f77f af75 	ble.w	802129a <_printf_float+0x21a>
 80213b0:	2301      	movs	r3, #1
 80213b2:	4652      	mov	r2, sl
 80213b4:	4631      	mov	r1, r6
 80213b6:	4628      	mov	r0, r5
 80213b8:	47b8      	blx	r7
 80213ba:	3001      	adds	r0, #1
 80213bc:	f43f aeae 	beq.w	802111c <_printf_float+0x9c>
 80213c0:	f108 0801 	add.w	r8, r8, #1
 80213c4:	e7ec      	b.n	80213a0 <_printf_float+0x320>
 80213c6:	4613      	mov	r3, r2
 80213c8:	4631      	mov	r1, r6
 80213ca:	4642      	mov	r2, r8
 80213cc:	4628      	mov	r0, r5
 80213ce:	47b8      	blx	r7
 80213d0:	3001      	adds	r0, #1
 80213d2:	d1bf      	bne.n	8021354 <_printf_float+0x2d4>
 80213d4:	e6a2      	b.n	802111c <_printf_float+0x9c>
 80213d6:	2301      	movs	r3, #1
 80213d8:	4631      	mov	r1, r6
 80213da:	4628      	mov	r0, r5
 80213dc:	9204      	str	r2, [sp, #16]
 80213de:	47b8      	blx	r7
 80213e0:	3001      	adds	r0, #1
 80213e2:	f43f ae9b 	beq.w	802111c <_printf_float+0x9c>
 80213e6:	9b05      	ldr	r3, [sp, #20]
 80213e8:	9a04      	ldr	r2, [sp, #16]
 80213ea:	3301      	adds	r3, #1
 80213ec:	9305      	str	r3, [sp, #20]
 80213ee:	e7b7      	b.n	8021360 <_printf_float+0x2e0>
 80213f0:	4653      	mov	r3, sl
 80213f2:	465a      	mov	r2, fp
 80213f4:	4631      	mov	r1, r6
 80213f6:	4628      	mov	r0, r5
 80213f8:	47b8      	blx	r7
 80213fa:	3001      	adds	r0, #1
 80213fc:	d1be      	bne.n	802137c <_printf_float+0x2fc>
 80213fe:	e68d      	b.n	802111c <_printf_float+0x9c>
 8021400:	9a04      	ldr	r2, [sp, #16]
 8021402:	464b      	mov	r3, r9
 8021404:	4442      	add	r2, r8
 8021406:	4631      	mov	r1, r6
 8021408:	4628      	mov	r0, r5
 802140a:	47b8      	blx	r7
 802140c:	3001      	adds	r0, #1
 802140e:	d1c1      	bne.n	8021394 <_printf_float+0x314>
 8021410:	e684      	b.n	802111c <_printf_float+0x9c>
 8021412:	9a08      	ldr	r2, [sp, #32]
 8021414:	2a01      	cmp	r2, #1
 8021416:	dc01      	bgt.n	802141c <_printf_float+0x39c>
 8021418:	07db      	lsls	r3, r3, #31
 802141a:	d537      	bpl.n	802148c <_printf_float+0x40c>
 802141c:	2301      	movs	r3, #1
 802141e:	4642      	mov	r2, r8
 8021420:	4631      	mov	r1, r6
 8021422:	4628      	mov	r0, r5
 8021424:	47b8      	blx	r7
 8021426:	3001      	adds	r0, #1
 8021428:	f43f ae78 	beq.w	802111c <_printf_float+0x9c>
 802142c:	4653      	mov	r3, sl
 802142e:	465a      	mov	r2, fp
 8021430:	4631      	mov	r1, r6
 8021432:	4628      	mov	r0, r5
 8021434:	47b8      	blx	r7
 8021436:	3001      	adds	r0, #1
 8021438:	f43f ae70 	beq.w	802111c <_printf_float+0x9c>
 802143c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8021440:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021448:	d01b      	beq.n	8021482 <_printf_float+0x402>
 802144a:	9b08      	ldr	r3, [sp, #32]
 802144c:	f108 0201 	add.w	r2, r8, #1
 8021450:	3b01      	subs	r3, #1
 8021452:	4631      	mov	r1, r6
 8021454:	4628      	mov	r0, r5
 8021456:	47b8      	blx	r7
 8021458:	3001      	adds	r0, #1
 802145a:	d10e      	bne.n	802147a <_printf_float+0x3fa>
 802145c:	e65e      	b.n	802111c <_printf_float+0x9c>
 802145e:	2301      	movs	r3, #1
 8021460:	464a      	mov	r2, r9
 8021462:	4631      	mov	r1, r6
 8021464:	4628      	mov	r0, r5
 8021466:	47b8      	blx	r7
 8021468:	3001      	adds	r0, #1
 802146a:	f43f ae57 	beq.w	802111c <_printf_float+0x9c>
 802146e:	f108 0801 	add.w	r8, r8, #1
 8021472:	9b08      	ldr	r3, [sp, #32]
 8021474:	3b01      	subs	r3, #1
 8021476:	4543      	cmp	r3, r8
 8021478:	dcf1      	bgt.n	802145e <_printf_float+0x3de>
 802147a:	9b04      	ldr	r3, [sp, #16]
 802147c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8021480:	e6db      	b.n	802123a <_printf_float+0x1ba>
 8021482:	f04f 0800 	mov.w	r8, #0
 8021486:	f104 091a 	add.w	r9, r4, #26
 802148a:	e7f2      	b.n	8021472 <_printf_float+0x3f2>
 802148c:	2301      	movs	r3, #1
 802148e:	4642      	mov	r2, r8
 8021490:	e7df      	b.n	8021452 <_printf_float+0x3d2>
 8021492:	2301      	movs	r3, #1
 8021494:	464a      	mov	r2, r9
 8021496:	4631      	mov	r1, r6
 8021498:	4628      	mov	r0, r5
 802149a:	47b8      	blx	r7
 802149c:	3001      	adds	r0, #1
 802149e:	f43f ae3d 	beq.w	802111c <_printf_float+0x9c>
 80214a2:	f108 0801 	add.w	r8, r8, #1
 80214a6:	68e3      	ldr	r3, [r4, #12]
 80214a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80214aa:	1a5b      	subs	r3, r3, r1
 80214ac:	4543      	cmp	r3, r8
 80214ae:	dcf0      	bgt.n	8021492 <_printf_float+0x412>
 80214b0:	e6f7      	b.n	80212a2 <_printf_float+0x222>
 80214b2:	f04f 0800 	mov.w	r8, #0
 80214b6:	f104 0919 	add.w	r9, r4, #25
 80214ba:	e7f4      	b.n	80214a6 <_printf_float+0x426>

080214bc <_printf_common>:
 80214bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80214c0:	4616      	mov	r6, r2
 80214c2:	4699      	mov	r9, r3
 80214c4:	688a      	ldr	r2, [r1, #8]
 80214c6:	690b      	ldr	r3, [r1, #16]
 80214c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80214cc:	4293      	cmp	r3, r2
 80214ce:	bfb8      	it	lt
 80214d0:	4613      	movlt	r3, r2
 80214d2:	6033      	str	r3, [r6, #0]
 80214d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80214d8:	4607      	mov	r7, r0
 80214da:	460c      	mov	r4, r1
 80214dc:	b10a      	cbz	r2, 80214e2 <_printf_common+0x26>
 80214de:	3301      	adds	r3, #1
 80214e0:	6033      	str	r3, [r6, #0]
 80214e2:	6823      	ldr	r3, [r4, #0]
 80214e4:	0699      	lsls	r1, r3, #26
 80214e6:	bf42      	ittt	mi
 80214e8:	6833      	ldrmi	r3, [r6, #0]
 80214ea:	3302      	addmi	r3, #2
 80214ec:	6033      	strmi	r3, [r6, #0]
 80214ee:	6825      	ldr	r5, [r4, #0]
 80214f0:	f015 0506 	ands.w	r5, r5, #6
 80214f4:	d106      	bne.n	8021504 <_printf_common+0x48>
 80214f6:	f104 0a19 	add.w	sl, r4, #25
 80214fa:	68e3      	ldr	r3, [r4, #12]
 80214fc:	6832      	ldr	r2, [r6, #0]
 80214fe:	1a9b      	subs	r3, r3, r2
 8021500:	42ab      	cmp	r3, r5
 8021502:	dc26      	bgt.n	8021552 <_printf_common+0x96>
 8021504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021508:	1e13      	subs	r3, r2, #0
 802150a:	6822      	ldr	r2, [r4, #0]
 802150c:	bf18      	it	ne
 802150e:	2301      	movne	r3, #1
 8021510:	0692      	lsls	r2, r2, #26
 8021512:	d42b      	bmi.n	802156c <_printf_common+0xb0>
 8021514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021518:	4649      	mov	r1, r9
 802151a:	4638      	mov	r0, r7
 802151c:	47c0      	blx	r8
 802151e:	3001      	adds	r0, #1
 8021520:	d01e      	beq.n	8021560 <_printf_common+0xa4>
 8021522:	6823      	ldr	r3, [r4, #0]
 8021524:	68e5      	ldr	r5, [r4, #12]
 8021526:	6832      	ldr	r2, [r6, #0]
 8021528:	f003 0306 	and.w	r3, r3, #6
 802152c:	2b04      	cmp	r3, #4
 802152e:	bf08      	it	eq
 8021530:	1aad      	subeq	r5, r5, r2
 8021532:	68a3      	ldr	r3, [r4, #8]
 8021534:	6922      	ldr	r2, [r4, #16]
 8021536:	bf0c      	ite	eq
 8021538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802153c:	2500      	movne	r5, #0
 802153e:	4293      	cmp	r3, r2
 8021540:	bfc4      	itt	gt
 8021542:	1a9b      	subgt	r3, r3, r2
 8021544:	18ed      	addgt	r5, r5, r3
 8021546:	2600      	movs	r6, #0
 8021548:	341a      	adds	r4, #26
 802154a:	42b5      	cmp	r5, r6
 802154c:	d11a      	bne.n	8021584 <_printf_common+0xc8>
 802154e:	2000      	movs	r0, #0
 8021550:	e008      	b.n	8021564 <_printf_common+0xa8>
 8021552:	2301      	movs	r3, #1
 8021554:	4652      	mov	r2, sl
 8021556:	4649      	mov	r1, r9
 8021558:	4638      	mov	r0, r7
 802155a:	47c0      	blx	r8
 802155c:	3001      	adds	r0, #1
 802155e:	d103      	bne.n	8021568 <_printf_common+0xac>
 8021560:	f04f 30ff 	mov.w	r0, #4294967295
 8021564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021568:	3501      	adds	r5, #1
 802156a:	e7c6      	b.n	80214fa <_printf_common+0x3e>
 802156c:	18e1      	adds	r1, r4, r3
 802156e:	1c5a      	adds	r2, r3, #1
 8021570:	2030      	movs	r0, #48	; 0x30
 8021572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8021576:	4422      	add	r2, r4
 8021578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802157c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8021580:	3302      	adds	r3, #2
 8021582:	e7c7      	b.n	8021514 <_printf_common+0x58>
 8021584:	2301      	movs	r3, #1
 8021586:	4622      	mov	r2, r4
 8021588:	4649      	mov	r1, r9
 802158a:	4638      	mov	r0, r7
 802158c:	47c0      	blx	r8
 802158e:	3001      	adds	r0, #1
 8021590:	d0e6      	beq.n	8021560 <_printf_common+0xa4>
 8021592:	3601      	adds	r6, #1
 8021594:	e7d9      	b.n	802154a <_printf_common+0x8e>
	...

08021598 <_printf_i>:
 8021598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802159c:	460c      	mov	r4, r1
 802159e:	4691      	mov	r9, r2
 80215a0:	7e27      	ldrb	r7, [r4, #24]
 80215a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80215a4:	2f78      	cmp	r7, #120	; 0x78
 80215a6:	4680      	mov	r8, r0
 80215a8:	469a      	mov	sl, r3
 80215aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80215ae:	d807      	bhi.n	80215c0 <_printf_i+0x28>
 80215b0:	2f62      	cmp	r7, #98	; 0x62
 80215b2:	d80a      	bhi.n	80215ca <_printf_i+0x32>
 80215b4:	2f00      	cmp	r7, #0
 80215b6:	f000 80d8 	beq.w	802176a <_printf_i+0x1d2>
 80215ba:	2f58      	cmp	r7, #88	; 0x58
 80215bc:	f000 80a3 	beq.w	8021706 <_printf_i+0x16e>
 80215c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80215c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80215c8:	e03a      	b.n	8021640 <_printf_i+0xa8>
 80215ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80215ce:	2b15      	cmp	r3, #21
 80215d0:	d8f6      	bhi.n	80215c0 <_printf_i+0x28>
 80215d2:	a001      	add	r0, pc, #4	; (adr r0, 80215d8 <_printf_i+0x40>)
 80215d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80215d8:	08021631 	.word	0x08021631
 80215dc:	08021645 	.word	0x08021645
 80215e0:	080215c1 	.word	0x080215c1
 80215e4:	080215c1 	.word	0x080215c1
 80215e8:	080215c1 	.word	0x080215c1
 80215ec:	080215c1 	.word	0x080215c1
 80215f0:	08021645 	.word	0x08021645
 80215f4:	080215c1 	.word	0x080215c1
 80215f8:	080215c1 	.word	0x080215c1
 80215fc:	080215c1 	.word	0x080215c1
 8021600:	080215c1 	.word	0x080215c1
 8021604:	08021751 	.word	0x08021751
 8021608:	08021675 	.word	0x08021675
 802160c:	08021733 	.word	0x08021733
 8021610:	080215c1 	.word	0x080215c1
 8021614:	080215c1 	.word	0x080215c1
 8021618:	08021773 	.word	0x08021773
 802161c:	080215c1 	.word	0x080215c1
 8021620:	08021675 	.word	0x08021675
 8021624:	080215c1 	.word	0x080215c1
 8021628:	080215c1 	.word	0x080215c1
 802162c:	0802173b 	.word	0x0802173b
 8021630:	680b      	ldr	r3, [r1, #0]
 8021632:	1d1a      	adds	r2, r3, #4
 8021634:	681b      	ldr	r3, [r3, #0]
 8021636:	600a      	str	r2, [r1, #0]
 8021638:	f104 0642 	add.w	r6, r4, #66	; 0x42
 802163c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021640:	2301      	movs	r3, #1
 8021642:	e0a3      	b.n	802178c <_printf_i+0x1f4>
 8021644:	6825      	ldr	r5, [r4, #0]
 8021646:	6808      	ldr	r0, [r1, #0]
 8021648:	062e      	lsls	r6, r5, #24
 802164a:	f100 0304 	add.w	r3, r0, #4
 802164e:	d50a      	bpl.n	8021666 <_printf_i+0xce>
 8021650:	6805      	ldr	r5, [r0, #0]
 8021652:	600b      	str	r3, [r1, #0]
 8021654:	2d00      	cmp	r5, #0
 8021656:	da03      	bge.n	8021660 <_printf_i+0xc8>
 8021658:	232d      	movs	r3, #45	; 0x2d
 802165a:	426d      	negs	r5, r5
 802165c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021660:	485e      	ldr	r0, [pc, #376]	; (80217dc <_printf_i+0x244>)
 8021662:	230a      	movs	r3, #10
 8021664:	e019      	b.n	802169a <_printf_i+0x102>
 8021666:	f015 0f40 	tst.w	r5, #64	; 0x40
 802166a:	6805      	ldr	r5, [r0, #0]
 802166c:	600b      	str	r3, [r1, #0]
 802166e:	bf18      	it	ne
 8021670:	b22d      	sxthne	r5, r5
 8021672:	e7ef      	b.n	8021654 <_printf_i+0xbc>
 8021674:	680b      	ldr	r3, [r1, #0]
 8021676:	6825      	ldr	r5, [r4, #0]
 8021678:	1d18      	adds	r0, r3, #4
 802167a:	6008      	str	r0, [r1, #0]
 802167c:	0628      	lsls	r0, r5, #24
 802167e:	d501      	bpl.n	8021684 <_printf_i+0xec>
 8021680:	681d      	ldr	r5, [r3, #0]
 8021682:	e002      	b.n	802168a <_printf_i+0xf2>
 8021684:	0669      	lsls	r1, r5, #25
 8021686:	d5fb      	bpl.n	8021680 <_printf_i+0xe8>
 8021688:	881d      	ldrh	r5, [r3, #0]
 802168a:	4854      	ldr	r0, [pc, #336]	; (80217dc <_printf_i+0x244>)
 802168c:	2f6f      	cmp	r7, #111	; 0x6f
 802168e:	bf0c      	ite	eq
 8021690:	2308      	moveq	r3, #8
 8021692:	230a      	movne	r3, #10
 8021694:	2100      	movs	r1, #0
 8021696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802169a:	6866      	ldr	r6, [r4, #4]
 802169c:	60a6      	str	r6, [r4, #8]
 802169e:	2e00      	cmp	r6, #0
 80216a0:	bfa2      	ittt	ge
 80216a2:	6821      	ldrge	r1, [r4, #0]
 80216a4:	f021 0104 	bicge.w	r1, r1, #4
 80216a8:	6021      	strge	r1, [r4, #0]
 80216aa:	b90d      	cbnz	r5, 80216b0 <_printf_i+0x118>
 80216ac:	2e00      	cmp	r6, #0
 80216ae:	d04d      	beq.n	802174c <_printf_i+0x1b4>
 80216b0:	4616      	mov	r6, r2
 80216b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80216b6:	fb03 5711 	mls	r7, r3, r1, r5
 80216ba:	5dc7      	ldrb	r7, [r0, r7]
 80216bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80216c0:	462f      	mov	r7, r5
 80216c2:	42bb      	cmp	r3, r7
 80216c4:	460d      	mov	r5, r1
 80216c6:	d9f4      	bls.n	80216b2 <_printf_i+0x11a>
 80216c8:	2b08      	cmp	r3, #8
 80216ca:	d10b      	bne.n	80216e4 <_printf_i+0x14c>
 80216cc:	6823      	ldr	r3, [r4, #0]
 80216ce:	07df      	lsls	r7, r3, #31
 80216d0:	d508      	bpl.n	80216e4 <_printf_i+0x14c>
 80216d2:	6923      	ldr	r3, [r4, #16]
 80216d4:	6861      	ldr	r1, [r4, #4]
 80216d6:	4299      	cmp	r1, r3
 80216d8:	bfde      	ittt	le
 80216da:	2330      	movle	r3, #48	; 0x30
 80216dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80216e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80216e4:	1b92      	subs	r2, r2, r6
 80216e6:	6122      	str	r2, [r4, #16]
 80216e8:	f8cd a000 	str.w	sl, [sp]
 80216ec:	464b      	mov	r3, r9
 80216ee:	aa03      	add	r2, sp, #12
 80216f0:	4621      	mov	r1, r4
 80216f2:	4640      	mov	r0, r8
 80216f4:	f7ff fee2 	bl	80214bc <_printf_common>
 80216f8:	3001      	adds	r0, #1
 80216fa:	d14c      	bne.n	8021796 <_printf_i+0x1fe>
 80216fc:	f04f 30ff 	mov.w	r0, #4294967295
 8021700:	b004      	add	sp, #16
 8021702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021706:	4835      	ldr	r0, [pc, #212]	; (80217dc <_printf_i+0x244>)
 8021708:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802170c:	6823      	ldr	r3, [r4, #0]
 802170e:	680e      	ldr	r6, [r1, #0]
 8021710:	061f      	lsls	r7, r3, #24
 8021712:	f856 5b04 	ldr.w	r5, [r6], #4
 8021716:	600e      	str	r6, [r1, #0]
 8021718:	d514      	bpl.n	8021744 <_printf_i+0x1ac>
 802171a:	07d9      	lsls	r1, r3, #31
 802171c:	bf44      	itt	mi
 802171e:	f043 0320 	orrmi.w	r3, r3, #32
 8021722:	6023      	strmi	r3, [r4, #0]
 8021724:	b91d      	cbnz	r5, 802172e <_printf_i+0x196>
 8021726:	6823      	ldr	r3, [r4, #0]
 8021728:	f023 0320 	bic.w	r3, r3, #32
 802172c:	6023      	str	r3, [r4, #0]
 802172e:	2310      	movs	r3, #16
 8021730:	e7b0      	b.n	8021694 <_printf_i+0xfc>
 8021732:	6823      	ldr	r3, [r4, #0]
 8021734:	f043 0320 	orr.w	r3, r3, #32
 8021738:	6023      	str	r3, [r4, #0]
 802173a:	2378      	movs	r3, #120	; 0x78
 802173c:	4828      	ldr	r0, [pc, #160]	; (80217e0 <_printf_i+0x248>)
 802173e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021742:	e7e3      	b.n	802170c <_printf_i+0x174>
 8021744:	065e      	lsls	r6, r3, #25
 8021746:	bf48      	it	mi
 8021748:	b2ad      	uxthmi	r5, r5
 802174a:	e7e6      	b.n	802171a <_printf_i+0x182>
 802174c:	4616      	mov	r6, r2
 802174e:	e7bb      	b.n	80216c8 <_printf_i+0x130>
 8021750:	680b      	ldr	r3, [r1, #0]
 8021752:	6826      	ldr	r6, [r4, #0]
 8021754:	6960      	ldr	r0, [r4, #20]
 8021756:	1d1d      	adds	r5, r3, #4
 8021758:	600d      	str	r5, [r1, #0]
 802175a:	0635      	lsls	r5, r6, #24
 802175c:	681b      	ldr	r3, [r3, #0]
 802175e:	d501      	bpl.n	8021764 <_printf_i+0x1cc>
 8021760:	6018      	str	r0, [r3, #0]
 8021762:	e002      	b.n	802176a <_printf_i+0x1d2>
 8021764:	0671      	lsls	r1, r6, #25
 8021766:	d5fb      	bpl.n	8021760 <_printf_i+0x1c8>
 8021768:	8018      	strh	r0, [r3, #0]
 802176a:	2300      	movs	r3, #0
 802176c:	6123      	str	r3, [r4, #16]
 802176e:	4616      	mov	r6, r2
 8021770:	e7ba      	b.n	80216e8 <_printf_i+0x150>
 8021772:	680b      	ldr	r3, [r1, #0]
 8021774:	1d1a      	adds	r2, r3, #4
 8021776:	600a      	str	r2, [r1, #0]
 8021778:	681e      	ldr	r6, [r3, #0]
 802177a:	6862      	ldr	r2, [r4, #4]
 802177c:	2100      	movs	r1, #0
 802177e:	4630      	mov	r0, r6
 8021780:	f7de fd76 	bl	8000270 <memchr>
 8021784:	b108      	cbz	r0, 802178a <_printf_i+0x1f2>
 8021786:	1b80      	subs	r0, r0, r6
 8021788:	6060      	str	r0, [r4, #4]
 802178a:	6863      	ldr	r3, [r4, #4]
 802178c:	6123      	str	r3, [r4, #16]
 802178e:	2300      	movs	r3, #0
 8021790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021794:	e7a8      	b.n	80216e8 <_printf_i+0x150>
 8021796:	6923      	ldr	r3, [r4, #16]
 8021798:	4632      	mov	r2, r6
 802179a:	4649      	mov	r1, r9
 802179c:	4640      	mov	r0, r8
 802179e:	47d0      	blx	sl
 80217a0:	3001      	adds	r0, #1
 80217a2:	d0ab      	beq.n	80216fc <_printf_i+0x164>
 80217a4:	6823      	ldr	r3, [r4, #0]
 80217a6:	079b      	lsls	r3, r3, #30
 80217a8:	d413      	bmi.n	80217d2 <_printf_i+0x23a>
 80217aa:	68e0      	ldr	r0, [r4, #12]
 80217ac:	9b03      	ldr	r3, [sp, #12]
 80217ae:	4298      	cmp	r0, r3
 80217b0:	bfb8      	it	lt
 80217b2:	4618      	movlt	r0, r3
 80217b4:	e7a4      	b.n	8021700 <_printf_i+0x168>
 80217b6:	2301      	movs	r3, #1
 80217b8:	4632      	mov	r2, r6
 80217ba:	4649      	mov	r1, r9
 80217bc:	4640      	mov	r0, r8
 80217be:	47d0      	blx	sl
 80217c0:	3001      	adds	r0, #1
 80217c2:	d09b      	beq.n	80216fc <_printf_i+0x164>
 80217c4:	3501      	adds	r5, #1
 80217c6:	68e3      	ldr	r3, [r4, #12]
 80217c8:	9903      	ldr	r1, [sp, #12]
 80217ca:	1a5b      	subs	r3, r3, r1
 80217cc:	42ab      	cmp	r3, r5
 80217ce:	dcf2      	bgt.n	80217b6 <_printf_i+0x21e>
 80217d0:	e7eb      	b.n	80217aa <_printf_i+0x212>
 80217d2:	2500      	movs	r5, #0
 80217d4:	f104 0619 	add.w	r6, r4, #25
 80217d8:	e7f5      	b.n	80217c6 <_printf_i+0x22e>
 80217da:	bf00      	nop
 80217dc:	08041180 	.word	0x08041180
 80217e0:	08041191 	.word	0x08041191

080217e4 <iprintf>:
 80217e4:	b40f      	push	{r0, r1, r2, r3}
 80217e6:	4b0a      	ldr	r3, [pc, #40]	; (8021810 <iprintf+0x2c>)
 80217e8:	b513      	push	{r0, r1, r4, lr}
 80217ea:	681c      	ldr	r4, [r3, #0]
 80217ec:	b124      	cbz	r4, 80217f8 <iprintf+0x14>
 80217ee:	69a3      	ldr	r3, [r4, #24]
 80217f0:	b913      	cbnz	r3, 80217f8 <iprintf+0x14>
 80217f2:	4620      	mov	r0, r4
 80217f4:	f002 fb7e 	bl	8023ef4 <__sinit>
 80217f8:	ab05      	add	r3, sp, #20
 80217fa:	9a04      	ldr	r2, [sp, #16]
 80217fc:	68a1      	ldr	r1, [r4, #8]
 80217fe:	9301      	str	r3, [sp, #4]
 8021800:	4620      	mov	r0, r4
 8021802:	f003 fcc9 	bl	8025198 <_vfiprintf_r>
 8021806:	b002      	add	sp, #8
 8021808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802180c:	b004      	add	sp, #16
 802180e:	4770      	bx	lr
 8021810:	2000045c 	.word	0x2000045c

08021814 <putchar>:
 8021814:	4b09      	ldr	r3, [pc, #36]	; (802183c <putchar+0x28>)
 8021816:	b513      	push	{r0, r1, r4, lr}
 8021818:	681c      	ldr	r4, [r3, #0]
 802181a:	4601      	mov	r1, r0
 802181c:	b134      	cbz	r4, 802182c <putchar+0x18>
 802181e:	69a3      	ldr	r3, [r4, #24]
 8021820:	b923      	cbnz	r3, 802182c <putchar+0x18>
 8021822:	9001      	str	r0, [sp, #4]
 8021824:	4620      	mov	r0, r4
 8021826:	f002 fb65 	bl	8023ef4 <__sinit>
 802182a:	9901      	ldr	r1, [sp, #4]
 802182c:	68a2      	ldr	r2, [r4, #8]
 802182e:	4620      	mov	r0, r4
 8021830:	b002      	add	sp, #8
 8021832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021836:	f003 bf2b 	b.w	8025690 <_putc_r>
 802183a:	bf00      	nop
 802183c:	2000045c 	.word	0x2000045c

08021840 <_puts_r>:
 8021840:	b570      	push	{r4, r5, r6, lr}
 8021842:	460e      	mov	r6, r1
 8021844:	4605      	mov	r5, r0
 8021846:	b118      	cbz	r0, 8021850 <_puts_r+0x10>
 8021848:	6983      	ldr	r3, [r0, #24]
 802184a:	b90b      	cbnz	r3, 8021850 <_puts_r+0x10>
 802184c:	f002 fb52 	bl	8023ef4 <__sinit>
 8021850:	69ab      	ldr	r3, [r5, #24]
 8021852:	68ac      	ldr	r4, [r5, #8]
 8021854:	b913      	cbnz	r3, 802185c <_puts_r+0x1c>
 8021856:	4628      	mov	r0, r5
 8021858:	f002 fb4c 	bl	8023ef4 <__sinit>
 802185c:	4b2c      	ldr	r3, [pc, #176]	; (8021910 <_puts_r+0xd0>)
 802185e:	429c      	cmp	r4, r3
 8021860:	d120      	bne.n	80218a4 <_puts_r+0x64>
 8021862:	686c      	ldr	r4, [r5, #4]
 8021864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021866:	07db      	lsls	r3, r3, #31
 8021868:	d405      	bmi.n	8021876 <_puts_r+0x36>
 802186a:	89a3      	ldrh	r3, [r4, #12]
 802186c:	0598      	lsls	r0, r3, #22
 802186e:	d402      	bmi.n	8021876 <_puts_r+0x36>
 8021870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021872:	f002 fcef 	bl	8024254 <__retarget_lock_acquire_recursive>
 8021876:	89a3      	ldrh	r3, [r4, #12]
 8021878:	0719      	lsls	r1, r3, #28
 802187a:	d51d      	bpl.n	80218b8 <_puts_r+0x78>
 802187c:	6923      	ldr	r3, [r4, #16]
 802187e:	b1db      	cbz	r3, 80218b8 <_puts_r+0x78>
 8021880:	3e01      	subs	r6, #1
 8021882:	68a3      	ldr	r3, [r4, #8]
 8021884:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021888:	3b01      	subs	r3, #1
 802188a:	60a3      	str	r3, [r4, #8]
 802188c:	bb39      	cbnz	r1, 80218de <_puts_r+0x9e>
 802188e:	2b00      	cmp	r3, #0
 8021890:	da38      	bge.n	8021904 <_puts_r+0xc4>
 8021892:	4622      	mov	r2, r4
 8021894:	210a      	movs	r1, #10
 8021896:	4628      	mov	r0, r5
 8021898:	f001 fa9c 	bl	8022dd4 <__swbuf_r>
 802189c:	3001      	adds	r0, #1
 802189e:	d011      	beq.n	80218c4 <_puts_r+0x84>
 80218a0:	250a      	movs	r5, #10
 80218a2:	e011      	b.n	80218c8 <_puts_r+0x88>
 80218a4:	4b1b      	ldr	r3, [pc, #108]	; (8021914 <_puts_r+0xd4>)
 80218a6:	429c      	cmp	r4, r3
 80218a8:	d101      	bne.n	80218ae <_puts_r+0x6e>
 80218aa:	68ac      	ldr	r4, [r5, #8]
 80218ac:	e7da      	b.n	8021864 <_puts_r+0x24>
 80218ae:	4b1a      	ldr	r3, [pc, #104]	; (8021918 <_puts_r+0xd8>)
 80218b0:	429c      	cmp	r4, r3
 80218b2:	bf08      	it	eq
 80218b4:	68ec      	ldreq	r4, [r5, #12]
 80218b6:	e7d5      	b.n	8021864 <_puts_r+0x24>
 80218b8:	4621      	mov	r1, r4
 80218ba:	4628      	mov	r0, r5
 80218bc:	f001 faee 	bl	8022e9c <__swsetup_r>
 80218c0:	2800      	cmp	r0, #0
 80218c2:	d0dd      	beq.n	8021880 <_puts_r+0x40>
 80218c4:	f04f 35ff 	mov.w	r5, #4294967295
 80218c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80218ca:	07da      	lsls	r2, r3, #31
 80218cc:	d405      	bmi.n	80218da <_puts_r+0x9a>
 80218ce:	89a3      	ldrh	r3, [r4, #12]
 80218d0:	059b      	lsls	r3, r3, #22
 80218d2:	d402      	bmi.n	80218da <_puts_r+0x9a>
 80218d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80218d6:	f002 fcbf 	bl	8024258 <__retarget_lock_release_recursive>
 80218da:	4628      	mov	r0, r5
 80218dc:	bd70      	pop	{r4, r5, r6, pc}
 80218de:	2b00      	cmp	r3, #0
 80218e0:	da04      	bge.n	80218ec <_puts_r+0xac>
 80218e2:	69a2      	ldr	r2, [r4, #24]
 80218e4:	429a      	cmp	r2, r3
 80218e6:	dc06      	bgt.n	80218f6 <_puts_r+0xb6>
 80218e8:	290a      	cmp	r1, #10
 80218ea:	d004      	beq.n	80218f6 <_puts_r+0xb6>
 80218ec:	6823      	ldr	r3, [r4, #0]
 80218ee:	1c5a      	adds	r2, r3, #1
 80218f0:	6022      	str	r2, [r4, #0]
 80218f2:	7019      	strb	r1, [r3, #0]
 80218f4:	e7c5      	b.n	8021882 <_puts_r+0x42>
 80218f6:	4622      	mov	r2, r4
 80218f8:	4628      	mov	r0, r5
 80218fa:	f001 fa6b 	bl	8022dd4 <__swbuf_r>
 80218fe:	3001      	adds	r0, #1
 8021900:	d1bf      	bne.n	8021882 <_puts_r+0x42>
 8021902:	e7df      	b.n	80218c4 <_puts_r+0x84>
 8021904:	6823      	ldr	r3, [r4, #0]
 8021906:	250a      	movs	r5, #10
 8021908:	1c5a      	adds	r2, r3, #1
 802190a:	6022      	str	r2, [r4, #0]
 802190c:	701d      	strb	r5, [r3, #0]
 802190e:	e7db      	b.n	80218c8 <_puts_r+0x88>
 8021910:	08041654 	.word	0x08041654
 8021914:	08041674 	.word	0x08041674
 8021918:	08041634 	.word	0x08041634

0802191c <puts>:
 802191c:	4b02      	ldr	r3, [pc, #8]	; (8021928 <puts+0xc>)
 802191e:	4601      	mov	r1, r0
 8021920:	6818      	ldr	r0, [r3, #0]
 8021922:	f7ff bf8d 	b.w	8021840 <_puts_r>
 8021926:	bf00      	nop
 8021928:	2000045c 	.word	0x2000045c

0802192c <rand>:
 802192c:	4b17      	ldr	r3, [pc, #92]	; (802198c <rand+0x60>)
 802192e:	b510      	push	{r4, lr}
 8021930:	681c      	ldr	r4, [r3, #0]
 8021932:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021934:	b9b3      	cbnz	r3, 8021964 <rand+0x38>
 8021936:	2018      	movs	r0, #24
 8021938:	f7fe ff9c 	bl	8020874 <malloc>
 802193c:	63a0      	str	r0, [r4, #56]	; 0x38
 802193e:	b928      	cbnz	r0, 802194c <rand+0x20>
 8021940:	4602      	mov	r2, r0
 8021942:	4b13      	ldr	r3, [pc, #76]	; (8021990 <rand+0x64>)
 8021944:	4813      	ldr	r0, [pc, #76]	; (8021994 <rand+0x68>)
 8021946:	214e      	movs	r1, #78	; 0x4e
 8021948:	f001 fb62 	bl	8023010 <__assert_func>
 802194c:	4a12      	ldr	r2, [pc, #72]	; (8021998 <rand+0x6c>)
 802194e:	4b13      	ldr	r3, [pc, #76]	; (802199c <rand+0x70>)
 8021950:	e9c0 2300 	strd	r2, r3, [r0]
 8021954:	4b12      	ldr	r3, [pc, #72]	; (80219a0 <rand+0x74>)
 8021956:	6083      	str	r3, [r0, #8]
 8021958:	230b      	movs	r3, #11
 802195a:	8183      	strh	r3, [r0, #12]
 802195c:	2201      	movs	r2, #1
 802195e:	2300      	movs	r3, #0
 8021960:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021964:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021966:	480f      	ldr	r0, [pc, #60]	; (80219a4 <rand+0x78>)
 8021968:	690a      	ldr	r2, [r1, #16]
 802196a:	694b      	ldr	r3, [r1, #20]
 802196c:	4c0e      	ldr	r4, [pc, #56]	; (80219a8 <rand+0x7c>)
 802196e:	4350      	muls	r0, r2
 8021970:	fb04 0003 	mla	r0, r4, r3, r0
 8021974:	fba2 3404 	umull	r3, r4, r2, r4
 8021978:	1c5a      	adds	r2, r3, #1
 802197a:	4404      	add	r4, r0
 802197c:	f144 0000 	adc.w	r0, r4, #0
 8021980:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021984:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8021988:	bd10      	pop	{r4, pc}
 802198a:	bf00      	nop
 802198c:	2000045c 	.word	0x2000045c
 8021990:	08041038 	.word	0x08041038
 8021994:	080411a2 	.word	0x080411a2
 8021998:	abcd330e 	.word	0xabcd330e
 802199c:	e66d1234 	.word	0xe66d1234
 80219a0:	0005deec 	.word	0x0005deec
 80219a4:	5851f42d 	.word	0x5851f42d
 80219a8:	4c957f2d 	.word	0x4c957f2d

080219ac <realloc>:
 80219ac:	4b02      	ldr	r3, [pc, #8]	; (80219b8 <realloc+0xc>)
 80219ae:	460a      	mov	r2, r1
 80219b0:	4601      	mov	r1, r0
 80219b2:	6818      	ldr	r0, [r3, #0]
 80219b4:	f003 b873 	b.w	8024a9e <_realloc_r>
 80219b8:	2000045c 	.word	0x2000045c

080219bc <modf>:
 80219bc:	ee10 1a90 	vmov	r1, s1
 80219c0:	b570      	push	{r4, r5, r6, lr}
 80219c2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80219c6:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 80219ca:	2b13      	cmp	r3, #19
 80219cc:	ee10 4a10 	vmov	r4, s0
 80219d0:	dc1f      	bgt.n	8021a12 <modf+0x56>
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	da05      	bge.n	80219e2 <modf+0x26>
 80219d6:	2200      	movs	r2, #0
 80219d8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80219dc:	e9c0 2300 	strd	r2, r3, [r0]
 80219e0:	bd70      	pop	{r4, r5, r6, pc}
 80219e2:	4d19      	ldr	r5, [pc, #100]	; (8021a48 <modf+0x8c>)
 80219e4:	411d      	asrs	r5, r3
 80219e6:	ea01 0305 	and.w	r3, r1, r5
 80219ea:	431c      	orrs	r4, r3
 80219ec:	d107      	bne.n	80219fe <modf+0x42>
 80219ee:	ed80 0b00 	vstr	d0, [r0]
 80219f2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80219f6:	4622      	mov	r2, r4
 80219f8:	ec43 2b10 	vmov	d0, r2, r3
 80219fc:	e7f0      	b.n	80219e0 <modf+0x24>
 80219fe:	2200      	movs	r2, #0
 8021a00:	ea21 0305 	bic.w	r3, r1, r5
 8021a04:	ec43 2b17 	vmov	d7, r2, r3
 8021a08:	e9c0 2300 	strd	r2, r3, [r0]
 8021a0c:	ee30 0b47 	vsub.f64	d0, d0, d7
 8021a10:	e7e6      	b.n	80219e0 <modf+0x24>
 8021a12:	2b33      	cmp	r3, #51	; 0x33
 8021a14:	dd05      	ble.n	8021a22 <modf+0x66>
 8021a16:	ed80 0b00 	vstr	d0, [r0]
 8021a1a:	2200      	movs	r2, #0
 8021a1c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8021a20:	e7ea      	b.n	80219f8 <modf+0x3c>
 8021a22:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 8021a26:	f04f 35ff 	mov.w	r5, #4294967295
 8021a2a:	40dd      	lsrs	r5, r3
 8021a2c:	ea15 0604 	ands.w	r6, r5, r4
 8021a30:	d105      	bne.n	8021a3e <modf+0x82>
 8021a32:	ed80 0b00 	vstr	d0, [r0]
 8021a36:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8021a3a:	4632      	mov	r2, r6
 8021a3c:	e7dc      	b.n	80219f8 <modf+0x3c>
 8021a3e:	ee10 3a90 	vmov	r3, s1
 8021a42:	ea24 0205 	bic.w	r2, r4, r5
 8021a46:	e7dd      	b.n	8021a04 <modf+0x48>
 8021a48:	000fffff 	.word	0x000fffff

08021a4c <_sbrk_r>:
 8021a4c:	b538      	push	{r3, r4, r5, lr}
 8021a4e:	4d06      	ldr	r5, [pc, #24]	; (8021a68 <_sbrk_r+0x1c>)
 8021a50:	2300      	movs	r3, #0
 8021a52:	4604      	mov	r4, r0
 8021a54:	4608      	mov	r0, r1
 8021a56:	602b      	str	r3, [r5, #0]
 8021a58:	f7e3 fe3e 	bl	80056d8 <_sbrk>
 8021a5c:	1c43      	adds	r3, r0, #1
 8021a5e:	d102      	bne.n	8021a66 <_sbrk_r+0x1a>
 8021a60:	682b      	ldr	r3, [r5, #0]
 8021a62:	b103      	cbz	r3, 8021a66 <_sbrk_r+0x1a>
 8021a64:	6023      	str	r3, [r4, #0]
 8021a66:	bd38      	pop	{r3, r4, r5, pc}
 8021a68:	200368f0 	.word	0x200368f0

08021a6c <sniprintf>:
 8021a6c:	b40c      	push	{r2, r3}
 8021a6e:	b530      	push	{r4, r5, lr}
 8021a70:	4b17      	ldr	r3, [pc, #92]	; (8021ad0 <sniprintf+0x64>)
 8021a72:	1e0c      	subs	r4, r1, #0
 8021a74:	681d      	ldr	r5, [r3, #0]
 8021a76:	b09d      	sub	sp, #116	; 0x74
 8021a78:	da08      	bge.n	8021a8c <sniprintf+0x20>
 8021a7a:	238b      	movs	r3, #139	; 0x8b
 8021a7c:	602b      	str	r3, [r5, #0]
 8021a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8021a82:	b01d      	add	sp, #116	; 0x74
 8021a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021a88:	b002      	add	sp, #8
 8021a8a:	4770      	bx	lr
 8021a8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021a90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8021a94:	bf14      	ite	ne
 8021a96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021a9a:	4623      	moveq	r3, r4
 8021a9c:	9304      	str	r3, [sp, #16]
 8021a9e:	9307      	str	r3, [sp, #28]
 8021aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021aa4:	9002      	str	r0, [sp, #8]
 8021aa6:	9006      	str	r0, [sp, #24]
 8021aa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021aac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021aae:	ab21      	add	r3, sp, #132	; 0x84
 8021ab0:	a902      	add	r1, sp, #8
 8021ab2:	4628      	mov	r0, r5
 8021ab4:	9301      	str	r3, [sp, #4]
 8021ab6:	f003 f873 	bl	8024ba0 <_svfiprintf_r>
 8021aba:	1c43      	adds	r3, r0, #1
 8021abc:	bfbc      	itt	lt
 8021abe:	238b      	movlt	r3, #139	; 0x8b
 8021ac0:	602b      	strlt	r3, [r5, #0]
 8021ac2:	2c00      	cmp	r4, #0
 8021ac4:	d0dd      	beq.n	8021a82 <sniprintf+0x16>
 8021ac6:	9b02      	ldr	r3, [sp, #8]
 8021ac8:	2200      	movs	r2, #0
 8021aca:	701a      	strb	r2, [r3, #0]
 8021acc:	e7d9      	b.n	8021a82 <sniprintf+0x16>
 8021ace:	bf00      	nop
 8021ad0:	2000045c 	.word	0x2000045c

08021ad4 <siprintf>:
 8021ad4:	b40e      	push	{r1, r2, r3}
 8021ad6:	b500      	push	{lr}
 8021ad8:	b09c      	sub	sp, #112	; 0x70
 8021ada:	ab1d      	add	r3, sp, #116	; 0x74
 8021adc:	9002      	str	r0, [sp, #8]
 8021ade:	9006      	str	r0, [sp, #24]
 8021ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021ae4:	4809      	ldr	r0, [pc, #36]	; (8021b0c <siprintf+0x38>)
 8021ae6:	9107      	str	r1, [sp, #28]
 8021ae8:	9104      	str	r1, [sp, #16]
 8021aea:	4909      	ldr	r1, [pc, #36]	; (8021b10 <siprintf+0x3c>)
 8021aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8021af0:	9105      	str	r1, [sp, #20]
 8021af2:	6800      	ldr	r0, [r0, #0]
 8021af4:	9301      	str	r3, [sp, #4]
 8021af6:	a902      	add	r1, sp, #8
 8021af8:	f003 f852 	bl	8024ba0 <_svfiprintf_r>
 8021afc:	9b02      	ldr	r3, [sp, #8]
 8021afe:	2200      	movs	r2, #0
 8021b00:	701a      	strb	r2, [r3, #0]
 8021b02:	b01c      	add	sp, #112	; 0x70
 8021b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8021b08:	b003      	add	sp, #12
 8021b0a:	4770      	bx	lr
 8021b0c:	2000045c 	.word	0x2000045c
 8021b10:	ffff0208 	.word	0xffff0208

08021b14 <siscanf>:
 8021b14:	b40e      	push	{r1, r2, r3}
 8021b16:	b510      	push	{r4, lr}
 8021b18:	b09f      	sub	sp, #124	; 0x7c
 8021b1a:	ac21      	add	r4, sp, #132	; 0x84
 8021b1c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021b20:	f854 2b04 	ldr.w	r2, [r4], #4
 8021b24:	9201      	str	r2, [sp, #4]
 8021b26:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021b2a:	9004      	str	r0, [sp, #16]
 8021b2c:	9008      	str	r0, [sp, #32]
 8021b2e:	f7de fb91 	bl	8000254 <strlen>
 8021b32:	4b0c      	ldr	r3, [pc, #48]	; (8021b64 <siscanf+0x50>)
 8021b34:	9005      	str	r0, [sp, #20]
 8021b36:	9009      	str	r0, [sp, #36]	; 0x24
 8021b38:	930d      	str	r3, [sp, #52]	; 0x34
 8021b3a:	480b      	ldr	r0, [pc, #44]	; (8021b68 <siscanf+0x54>)
 8021b3c:	9a01      	ldr	r2, [sp, #4]
 8021b3e:	6800      	ldr	r0, [r0, #0]
 8021b40:	9403      	str	r4, [sp, #12]
 8021b42:	2300      	movs	r3, #0
 8021b44:	9311      	str	r3, [sp, #68]	; 0x44
 8021b46:	9316      	str	r3, [sp, #88]	; 0x58
 8021b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8021b4c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021b50:	a904      	add	r1, sp, #16
 8021b52:	4623      	mov	r3, r4
 8021b54:	f003 f97e 	bl	8024e54 <__ssvfiscanf_r>
 8021b58:	b01f      	add	sp, #124	; 0x7c
 8021b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021b5e:	b003      	add	sp, #12
 8021b60:	4770      	bx	lr
 8021b62:	bf00      	nop
 8021b64:	08021b8f 	.word	0x08021b8f
 8021b68:	2000045c 	.word	0x2000045c

08021b6c <__sread>:
 8021b6c:	b510      	push	{r4, lr}
 8021b6e:	460c      	mov	r4, r1
 8021b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b74:	f003 fdd4 	bl	8025720 <_read_r>
 8021b78:	2800      	cmp	r0, #0
 8021b7a:	bfab      	itete	ge
 8021b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8021b80:	181b      	addge	r3, r3, r0
 8021b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8021b86:	bfac      	ite	ge
 8021b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8021b8a:	81a3      	strhlt	r3, [r4, #12]
 8021b8c:	bd10      	pop	{r4, pc}

08021b8e <__seofread>:
 8021b8e:	2000      	movs	r0, #0
 8021b90:	4770      	bx	lr

08021b92 <__swrite>:
 8021b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b96:	461f      	mov	r7, r3
 8021b98:	898b      	ldrh	r3, [r1, #12]
 8021b9a:	05db      	lsls	r3, r3, #23
 8021b9c:	4605      	mov	r5, r0
 8021b9e:	460c      	mov	r4, r1
 8021ba0:	4616      	mov	r6, r2
 8021ba2:	d505      	bpl.n	8021bb0 <__swrite+0x1e>
 8021ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021ba8:	2302      	movs	r3, #2
 8021baa:	2200      	movs	r2, #0
 8021bac:	f002 fb56 	bl	802425c <_lseek_r>
 8021bb0:	89a3      	ldrh	r3, [r4, #12]
 8021bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021bb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021bba:	81a3      	strh	r3, [r4, #12]
 8021bbc:	4632      	mov	r2, r6
 8021bbe:	463b      	mov	r3, r7
 8021bc0:	4628      	mov	r0, r5
 8021bc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bc6:	f001 b957 	b.w	8022e78 <_write_r>

08021bca <__sseek>:
 8021bca:	b510      	push	{r4, lr}
 8021bcc:	460c      	mov	r4, r1
 8021bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bd2:	f002 fb43 	bl	802425c <_lseek_r>
 8021bd6:	1c43      	adds	r3, r0, #1
 8021bd8:	89a3      	ldrh	r3, [r4, #12]
 8021bda:	bf15      	itete	ne
 8021bdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8021bde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021be2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021be6:	81a3      	strheq	r3, [r4, #12]
 8021be8:	bf18      	it	ne
 8021bea:	81a3      	strhne	r3, [r4, #12]
 8021bec:	bd10      	pop	{r4, pc}

08021bee <__sclose>:
 8021bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021bf2:	f001 ba2b 	b.w	802304c <_close_r>

08021bf6 <stpcpy>:
 8021bf6:	4603      	mov	r3, r0
 8021bf8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021bfc:	4618      	mov	r0, r3
 8021bfe:	f803 2b01 	strb.w	r2, [r3], #1
 8021c02:	2a00      	cmp	r2, #0
 8021c04:	d1f8      	bne.n	8021bf8 <stpcpy+0x2>
 8021c06:	4770      	bx	lr

08021c08 <strchr>:
 8021c08:	b2c9      	uxtb	r1, r1
 8021c0a:	4603      	mov	r3, r0
 8021c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021c10:	b11a      	cbz	r2, 8021c1a <strchr+0x12>
 8021c12:	428a      	cmp	r2, r1
 8021c14:	d1f9      	bne.n	8021c0a <strchr+0x2>
 8021c16:	4618      	mov	r0, r3
 8021c18:	4770      	bx	lr
 8021c1a:	2900      	cmp	r1, #0
 8021c1c:	bf18      	it	ne
 8021c1e:	2300      	movne	r3, #0
 8021c20:	e7f9      	b.n	8021c16 <strchr+0xe>

08021c22 <strcpy>:
 8021c22:	4603      	mov	r3, r0
 8021c24:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021c28:	f803 2b01 	strb.w	r2, [r3], #1
 8021c2c:	2a00      	cmp	r2, #0
 8021c2e:	d1f9      	bne.n	8021c24 <strcpy+0x2>
 8021c30:	4770      	bx	lr
	...

08021c34 <iso_year_adjust>:
 8021c34:	6941      	ldr	r1, [r0, #20]
 8021c36:	2900      	cmp	r1, #0
 8021c38:	f240 736c 	movw	r3, #1900	; 0x76c
 8021c3c:	bfa8      	it	ge
 8021c3e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8021c42:	18ca      	adds	r2, r1, r3
 8021c44:	078b      	lsls	r3, r1, #30
 8021c46:	d105      	bne.n	8021c54 <iso_year_adjust+0x20>
 8021c48:	2164      	movs	r1, #100	; 0x64
 8021c4a:	fb92 f3f1 	sdiv	r3, r2, r1
 8021c4e:	fb01 2313 	mls	r3, r1, r3, r2
 8021c52:	b9db      	cbnz	r3, 8021c8c <iso_year_adjust+0x58>
 8021c54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8021c58:	fb92 f3f1 	sdiv	r3, r2, r1
 8021c5c:	fb01 2313 	mls	r3, r1, r3, r2
 8021c60:	fab3 f383 	clz	r3, r3
 8021c64:	095b      	lsrs	r3, r3, #5
 8021c66:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8021c6a:	0040      	lsls	r0, r0, #1
 8021c6c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8021c70:	4418      	add	r0, r3
 8021c72:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8021c76:	4298      	cmp	r0, r3
 8021c78:	d03a      	beq.n	8021cf0 <iso_year_adjust+0xbc>
 8021c7a:	dc21      	bgt.n	8021cc0 <iso_year_adjust+0x8c>
 8021c7c:	2801      	cmp	r0, #1
 8021c7e:	dc1a      	bgt.n	8021cb6 <iso_year_adjust+0x82>
 8021c80:	2800      	cmp	r0, #0
 8021c82:	bfb4      	ite	lt
 8021c84:	2000      	movlt	r0, #0
 8021c86:	f04f 30ff 	movge.w	r0, #4294967295
 8021c8a:	4770      	bx	lr
 8021c8c:	2301      	movs	r3, #1
 8021c8e:	e7ea      	b.n	8021c66 <iso_year_adjust+0x32>
 8021c90:	2817      	cmp	r0, #23
 8021c92:	d813      	bhi.n	8021cbc <iso_year_adjust+0x88>
 8021c94:	e8df f000 	tbb	[pc, r0]
 8021c98:	0c0c0c0c 	.word	0x0c0c0c0c
 8021c9c:	0c0c1212 	.word	0x0c0c1212
 8021ca0:	12121212 	.word	0x12121212
 8021ca4:	12121212 	.word	0x12121212
 8021ca8:	0c0c1212 	.word	0x0c0c1212
 8021cac:	0c0c1212 	.word	0x0c0c1212
 8021cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8021cb4:	4770      	bx	lr
 8021cb6:	380a      	subs	r0, #10
 8021cb8:	2817      	cmp	r0, #23
 8021cba:	d9e9      	bls.n	8021c90 <iso_year_adjust+0x5c>
 8021cbc:	2000      	movs	r0, #0
 8021cbe:	4770      	bx	lr
 8021cc0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8021cc4:	4298      	cmp	r0, r3
 8021cc6:	dc06      	bgt.n	8021cd6 <iso_year_adjust+0xa2>
 8021cc8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8021ccc:	4298      	cmp	r0, r3
 8021cce:	bfd4      	ite	le
 8021cd0:	2000      	movle	r0, #0
 8021cd2:	2001      	movgt	r0, #1
 8021cd4:	4770      	bx	lr
 8021cd6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8021cda:	3802      	subs	r0, #2
 8021cdc:	2815      	cmp	r0, #21
 8021cde:	d8ed      	bhi.n	8021cbc <iso_year_adjust+0x88>
 8021ce0:	2301      	movs	r3, #1
 8021ce2:	4083      	lsls	r3, r0
 8021ce4:	4803      	ldr	r0, [pc, #12]	; (8021cf4 <iso_year_adjust+0xc0>)
 8021ce6:	4018      	ands	r0, r3
 8021ce8:	3800      	subs	r0, #0
 8021cea:	bf18      	it	ne
 8021cec:	2001      	movne	r0, #1
 8021cee:	4770      	bx	lr
 8021cf0:	2001      	movs	r0, #1
 8021cf2:	4770      	bx	lr
 8021cf4:	002a001f 	.word	0x002a001f

08021cf8 <__strftime>:
 8021cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cfc:	b091      	sub	sp, #68	; 0x44
 8021cfe:	461d      	mov	r5, r3
 8021d00:	2300      	movs	r3, #0
 8021d02:	4681      	mov	r9, r0
 8021d04:	4688      	mov	r8, r1
 8021d06:	9304      	str	r3, [sp, #16]
 8021d08:	461c      	mov	r4, r3
 8021d0a:	7813      	ldrb	r3, [r2, #0]
 8021d0c:	2b00      	cmp	r3, #0
 8021d0e:	f000 84d1 	beq.w	80226b4 <__strftime+0x9bc>
 8021d12:	2b25      	cmp	r3, #37	; 0x25
 8021d14:	d11b      	bne.n	8021d4e <__strftime+0x56>
 8021d16:	7857      	ldrb	r7, [r2, #1]
 8021d18:	2f30      	cmp	r7, #48	; 0x30
 8021d1a:	d024      	beq.n	8021d66 <__strftime+0x6e>
 8021d1c:	2f2b      	cmp	r7, #43	; 0x2b
 8021d1e:	d022      	beq.n	8021d66 <__strftime+0x6e>
 8021d20:	f102 0b01 	add.w	fp, r2, #1
 8021d24:	2700      	movs	r7, #0
 8021d26:	f89b 3000 	ldrb.w	r3, [fp]
 8021d2a:	3b31      	subs	r3, #49	; 0x31
 8021d2c:	2b08      	cmp	r3, #8
 8021d2e:	d81d      	bhi.n	8021d6c <__strftime+0x74>
 8021d30:	4658      	mov	r0, fp
 8021d32:	220a      	movs	r2, #10
 8021d34:	a908      	add	r1, sp, #32
 8021d36:	f000 fe0d 	bl	8022954 <strtoul>
 8021d3a:	f8dd b020 	ldr.w	fp, [sp, #32]
 8021d3e:	4606      	mov	r6, r0
 8021d40:	f89b 3000 	ldrb.w	r3, [fp]
 8021d44:	2b45      	cmp	r3, #69	; 0x45
 8021d46:	d113      	bne.n	8021d70 <__strftime+0x78>
 8021d48:	f10b 0b01 	add.w	fp, fp, #1
 8021d4c:	e012      	b.n	8021d74 <__strftime+0x7c>
 8021d4e:	f108 31ff 	add.w	r1, r8, #4294967295
 8021d52:	42a1      	cmp	r1, r4
 8021d54:	d802      	bhi.n	8021d5c <__strftime+0x64>
 8021d56:	2400      	movs	r4, #0
 8021d58:	f000 bcb2 	b.w	80226c0 <__strftime+0x9c8>
 8021d5c:	f809 3004 	strb.w	r3, [r9, r4]
 8021d60:	3201      	adds	r2, #1
 8021d62:	3401      	adds	r4, #1
 8021d64:	e7d1      	b.n	8021d0a <__strftime+0x12>
 8021d66:	f102 0b02 	add.w	fp, r2, #2
 8021d6a:	e7dc      	b.n	8021d26 <__strftime+0x2e>
 8021d6c:	2600      	movs	r6, #0
 8021d6e:	e7e7      	b.n	8021d40 <__strftime+0x48>
 8021d70:	2b4f      	cmp	r3, #79	; 0x4f
 8021d72:	d0e9      	beq.n	8021d48 <__strftime+0x50>
 8021d74:	f89b 0000 	ldrb.w	r0, [fp]
 8021d78:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8021d7c:	2b55      	cmp	r3, #85	; 0x55
 8021d7e:	d8ea      	bhi.n	8021d56 <__strftime+0x5e>
 8021d80:	a201      	add	r2, pc, #4	; (adr r2, 8021d88 <__strftime+0x90>)
 8021d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d86:	bf00      	nop
 8021d88:	080226a7 	.word	0x080226a7
 8021d8c:	08021d57 	.word	0x08021d57
 8021d90:	08021d57 	.word	0x08021d57
 8021d94:	08021d57 	.word	0x08021d57
 8021d98:	08021d57 	.word	0x08021d57
 8021d9c:	08021d57 	.word	0x08021d57
 8021da0:	08021d57 	.word	0x08021d57
 8021da4:	08021d57 	.word	0x08021d57
 8021da8:	08021d57 	.word	0x08021d57
 8021dac:	08021d57 	.word	0x08021d57
 8021db0:	08021d57 	.word	0x08021d57
 8021db4:	08021d57 	.word	0x08021d57
 8021db8:	08021d57 	.word	0x08021d57
 8021dbc:	08021d57 	.word	0x08021d57
 8021dc0:	08021d57 	.word	0x08021d57
 8021dc4:	08021d57 	.word	0x08021d57
 8021dc8:	08021d57 	.word	0x08021d57
 8021dcc:	08021d57 	.word	0x08021d57
 8021dd0:	08021d57 	.word	0x08021d57
 8021dd4:	08021d57 	.word	0x08021d57
 8021dd8:	08021d57 	.word	0x08021d57
 8021ddc:	08021d57 	.word	0x08021d57
 8021de0:	08021d57 	.word	0x08021d57
 8021de4:	08021d57 	.word	0x08021d57
 8021de8:	08021d57 	.word	0x08021d57
 8021dec:	08021d57 	.word	0x08021d57
 8021df0:	08021d57 	.word	0x08021d57
 8021df4:	08021d57 	.word	0x08021d57
 8021df8:	08021f1f 	.word	0x08021f1f
 8021dfc:	08021f79 	.word	0x08021f79
 8021e00:	08021fef 	.word	0x08021fef
 8021e04:	08022089 	.word	0x08022089
 8021e08:	08021d57 	.word	0x08021d57
 8021e0c:	080220d5 	.word	0x080220d5
 8021e10:	080221b5 	.word	0x080221b5
 8021e14:	080222b7 	.word	0x080222b7
 8021e18:	080222c5 	.word	0x080222c5
 8021e1c:	08021d57 	.word	0x08021d57
 8021e20:	08021d57 	.word	0x08021d57
 8021e24:	08021d57 	.word	0x08021d57
 8021e28:	080222f5 	.word	0x080222f5
 8021e2c:	08021d57 	.word	0x08021d57
 8021e30:	08021d57 	.word	0x08021d57
 8021e34:	0802230d 	.word	0x0802230d
 8021e38:	08021d57 	.word	0x08021d57
 8021e3c:	0802235b 	.word	0x0802235b
 8021e40:	08022471 	.word	0x08022471
 8021e44:	08022483 	.word	0x08022483
 8021e48:	080224db 	.word	0x080224db
 8021e4c:	080224eb 	.word	0x080224eb
 8021e50:	08022561 	.word	0x08022561
 8021e54:	08021fe7 	.word	0x08021fe7
 8021e58:	08022595 	.word	0x08022595
 8021e5c:	08022653 	.word	0x08022653
 8021e60:	08021d57 	.word	0x08021d57
 8021e64:	08021d57 	.word	0x08021d57
 8021e68:	08021d57 	.word	0x08021d57
 8021e6c:	08021d57 	.word	0x08021d57
 8021e70:	08021d57 	.word	0x08021d57
 8021e74:	08021d57 	.word	0x08021d57
 8021e78:	08021ee1 	.word	0x08021ee1
 8021e7c:	08021f4d 	.word	0x08021f4d
 8021e80:	08021fa7 	.word	0x08021fa7
 8021e84:	08022061 	.word	0x08022061
 8021e88:	08022061 	.word	0x08022061
 8021e8c:	08021d57 	.word	0x08021d57
 8021e90:	0802211d 	.word	0x0802211d
 8021e94:	08021f4d 	.word	0x08021f4d
 8021e98:	08021d57 	.word	0x08021d57
 8021e9c:	080222e7 	.word	0x080222e7
 8021ea0:	080222b7 	.word	0x080222b7
 8021ea4:	080222c5 	.word	0x080222c5
 8021ea8:	080222ef 	.word	0x080222ef
 8021eac:	080222f9 	.word	0x080222f9
 8021eb0:	08021d57 	.word	0x08021d57
 8021eb4:	0802230d 	.word	0x0802230d
 8021eb8:	08021d57 	.word	0x08021d57
 8021ebc:	08021fd7 	.word	0x08021fd7
 8021ec0:	08022371 	.word	0x08022371
 8021ec4:	08022475 	.word	0x08022475
 8021ec8:	080224bd 	.word	0x080224bd
 8021ecc:	08021d57 	.word	0x08021d57
 8021ed0:	08022551 	.word	0x08022551
 8021ed4:	08021fdf 	.word	0x08021fdf
 8021ed8:	08022579 	.word	0x08022579
 8021edc:	080225e5 	.word	0x080225e5
 8021ee0:	69ab      	ldr	r3, [r5, #24]
 8021ee2:	4aa7      	ldr	r2, [pc, #668]	; (8022180 <__strftime+0x488>)
 8021ee4:	3318      	adds	r3, #24
 8021ee6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021eea:	4630      	mov	r0, r6
 8021eec:	f7de f9b2 	bl	8000254 <strlen>
 8021ef0:	3e01      	subs	r6, #1
 8021ef2:	4420      	add	r0, r4
 8021ef4:	f108 33ff 	add.w	r3, r8, #4294967295
 8021ef8:	42a0      	cmp	r0, r4
 8021efa:	d107      	bne.n	8021f0c <__strftime+0x214>
 8021efc:	f89b 3000 	ldrb.w	r3, [fp]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	f000 83d7 	beq.w	80226b4 <__strftime+0x9bc>
 8021f06:	f10b 0201 	add.w	r2, fp, #1
 8021f0a:	e6fe      	b.n	8021d0a <__strftime+0x12>
 8021f0c:	42a3      	cmp	r3, r4
 8021f0e:	f67f af22 	bls.w	8021d56 <__strftime+0x5e>
 8021f12:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021f16:	f809 2004 	strb.w	r2, [r9, r4]
 8021f1a:	3401      	adds	r4, #1
 8021f1c:	e7ec      	b.n	8021ef8 <__strftime+0x200>
 8021f1e:	69aa      	ldr	r2, [r5, #24]
 8021f20:	4b97      	ldr	r3, [pc, #604]	; (8022180 <__strftime+0x488>)
 8021f22:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8021f26:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8021f28:	4630      	mov	r0, r6
 8021f2a:	f7de f993 	bl	8000254 <strlen>
 8021f2e:	3e01      	subs	r6, #1
 8021f30:	4420      	add	r0, r4
 8021f32:	f108 33ff 	add.w	r3, r8, #4294967295
 8021f36:	42a0      	cmp	r0, r4
 8021f38:	d0e0      	beq.n	8021efc <__strftime+0x204>
 8021f3a:	42a3      	cmp	r3, r4
 8021f3c:	f67f af0b 	bls.w	8021d56 <__strftime+0x5e>
 8021f40:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021f44:	f809 2004 	strb.w	r2, [r9, r4]
 8021f48:	3401      	adds	r4, #1
 8021f4a:	e7f4      	b.n	8021f36 <__strftime+0x23e>
 8021f4c:	4b8c      	ldr	r3, [pc, #560]	; (8022180 <__strftime+0x488>)
 8021f4e:	692a      	ldr	r2, [r5, #16]
 8021f50:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8021f54:	4630      	mov	r0, r6
 8021f56:	f7de f97d 	bl	8000254 <strlen>
 8021f5a:	3e01      	subs	r6, #1
 8021f5c:	4420      	add	r0, r4
 8021f5e:	f108 33ff 	add.w	r3, r8, #4294967295
 8021f62:	42a0      	cmp	r0, r4
 8021f64:	d0ca      	beq.n	8021efc <__strftime+0x204>
 8021f66:	42a3      	cmp	r3, r4
 8021f68:	f67f aef5 	bls.w	8021d56 <__strftime+0x5e>
 8021f6c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021f70:	f809 2004 	strb.w	r2, [r9, r4]
 8021f74:	3401      	adds	r4, #1
 8021f76:	e7f4      	b.n	8021f62 <__strftime+0x26a>
 8021f78:	692b      	ldr	r3, [r5, #16]
 8021f7a:	4a81      	ldr	r2, [pc, #516]	; (8022180 <__strftime+0x488>)
 8021f7c:	330c      	adds	r3, #12
 8021f7e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021f82:	4630      	mov	r0, r6
 8021f84:	f7de f966 	bl	8000254 <strlen>
 8021f88:	3e01      	subs	r6, #1
 8021f8a:	4420      	add	r0, r4
 8021f8c:	f108 33ff 	add.w	r3, r8, #4294967295
 8021f90:	42a0      	cmp	r0, r4
 8021f92:	d0b3      	beq.n	8021efc <__strftime+0x204>
 8021f94:	42a3      	cmp	r3, r4
 8021f96:	f67f aede 	bls.w	8021d56 <__strftime+0x5e>
 8021f9a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8021f9e:	f809 2004 	strb.w	r2, [r9, r4]
 8021fa2:	3401      	adds	r4, #1
 8021fa4:	e7f4      	b.n	8021f90 <__strftime+0x298>
 8021fa6:	4b76      	ldr	r3, [pc, #472]	; (8022180 <__strftime+0x488>)
 8021fa8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8021fac:	4630      	mov	r0, r6
 8021fae:	f7de f951 	bl	8000254 <strlen>
 8021fb2:	7833      	ldrb	r3, [r6, #0]
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	d0a1      	beq.n	8021efc <__strftime+0x204>
 8021fb8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021fba:	9300      	str	r3, [sp, #0]
 8021fbc:	4632      	mov	r2, r6
 8021fbe:	462b      	mov	r3, r5
 8021fc0:	eba8 0104 	sub.w	r1, r8, r4
 8021fc4:	eb09 0004 	add.w	r0, r9, r4
 8021fc8:	f7ff fe96 	bl	8021cf8 <__strftime>
 8021fcc:	2800      	cmp	r0, #0
 8021fce:	f77f aec2 	ble.w	8021d56 <__strftime+0x5e>
 8021fd2:	4404      	add	r4, r0
 8021fd4:	e792      	b.n	8021efc <__strftime+0x204>
 8021fd6:	4b6a      	ldr	r3, [pc, #424]	; (8022180 <__strftime+0x488>)
 8021fd8:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8021fdc:	e7e6      	b.n	8021fac <__strftime+0x2b4>
 8021fde:	4b68      	ldr	r3, [pc, #416]	; (8022180 <__strftime+0x488>)
 8021fe0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8021fe4:	e7e2      	b.n	8021fac <__strftime+0x2b4>
 8021fe6:	4b66      	ldr	r3, [pc, #408]	; (8022180 <__strftime+0x488>)
 8021fe8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8021fec:	e7de      	b.n	8021fac <__strftime+0x2b4>
 8021fee:	4965      	ldr	r1, [pc, #404]	; (8022184 <__strftime+0x48c>)
 8021ff0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8021ff4:	458a      	cmp	sl, r1
 8021ff6:	bfac      	ite	ge
 8021ff8:	2100      	movge	r1, #0
 8021ffa:	2101      	movlt	r1, #1
 8021ffc:	f1ba 0f00 	cmp.w	sl, #0
 8022000:	db0e      	blt.n	8022020 <__strftime+0x328>
 8022002:	2064      	movs	r0, #100	; 0x64
 8022004:	fb9a f0f0 	sdiv	r0, sl, r0
 8022008:	3013      	adds	r0, #19
 802200a:	b19f      	cbz	r7, 8022034 <__strftime+0x33c>
 802200c:	2863      	cmp	r0, #99	; 0x63
 802200e:	dd25      	ble.n	802205c <__strftime+0x364>
 8022010:	4a5d      	ldr	r2, [pc, #372]	; (8022188 <__strftime+0x490>)
 8022012:	4b5e      	ldr	r3, [pc, #376]	; (802218c <__strftime+0x494>)
 8022014:	2f2b      	cmp	r7, #43	; 0x2b
 8022016:	bf14      	ite	ne
 8022018:	4617      	movne	r7, r2
 802201a:	461f      	moveq	r7, r3
 802201c:	4a5c      	ldr	r2, [pc, #368]	; (8022190 <__strftime+0x498>)
 802201e:	e00b      	b.n	8022038 <__strftime+0x340>
 8022020:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8022024:	9105      	str	r1, [sp, #20]
 8022026:	f000 ffa7 	bl	8022f78 <abs>
 802202a:	2364      	movs	r3, #100	; 0x64
 802202c:	9905      	ldr	r1, [sp, #20]
 802202e:	fb90 f0f3 	sdiv	r0, r0, r3
 8022032:	e7ea      	b.n	802200a <__strftime+0x312>
 8022034:	4f54      	ldr	r7, [pc, #336]	; (8022188 <__strftime+0x490>)
 8022036:	4a57      	ldr	r2, [pc, #348]	; (8022194 <__strftime+0x49c>)
 8022038:	4b57      	ldr	r3, [pc, #348]	; (8022198 <__strftime+0x4a0>)
 802203a:	9001      	str	r0, [sp, #4]
 802203c:	2e02      	cmp	r6, #2
 802203e:	bf2c      	ite	cs
 8022040:	ebc1 0606 	rsbcs	r6, r1, r6
 8022044:	f1c1 0602 	rsbcc	r6, r1, #2
 8022048:	494e      	ldr	r1, [pc, #312]	; (8022184 <__strftime+0x48c>)
 802204a:	9600      	str	r6, [sp, #0]
 802204c:	458a      	cmp	sl, r1
 802204e:	bfa8      	it	ge
 8022050:	463b      	movge	r3, r7
 8022052:	eba8 0104 	sub.w	r1, r8, r4
 8022056:	eb09 0004 	add.w	r0, r9, r4
 802205a:	e02a      	b.n	80220b2 <__strftime+0x3ba>
 802205c:	4f4a      	ldr	r7, [pc, #296]	; (8022188 <__strftime+0x490>)
 802205e:	e7dd      	b.n	802201c <__strftime+0x324>
 8022060:	494e      	ldr	r1, [pc, #312]	; (802219c <__strftime+0x4a4>)
 8022062:	4a4f      	ldr	r2, [pc, #316]	; (80221a0 <__strftime+0x4a8>)
 8022064:	68eb      	ldr	r3, [r5, #12]
 8022066:	2864      	cmp	r0, #100	; 0x64
 8022068:	bf08      	it	eq
 802206a:	460a      	moveq	r2, r1
 802206c:	eba8 0104 	sub.w	r1, r8, r4
 8022070:	eb09 0004 	add.w	r0, r9, r4
 8022074:	f7ff fcfa 	bl	8021a6c <sniprintf>
 8022078:	2800      	cmp	r0, #0
 802207a:	f6ff ae6c 	blt.w	8021d56 <__strftime+0x5e>
 802207e:	4404      	add	r4, r0
 8022080:	45a0      	cmp	r8, r4
 8022082:	f63f af3b 	bhi.w	8021efc <__strftime+0x204>
 8022086:	e666      	b.n	8021d56 <__strftime+0x5e>
 8022088:	6968      	ldr	r0, [r5, #20]
 802208a:	692b      	ldr	r3, [r5, #16]
 802208c:	68ef      	ldr	r7, [r5, #12]
 802208e:	2800      	cmp	r0, #0
 8022090:	eb09 0604 	add.w	r6, r9, r4
 8022094:	eba8 0104 	sub.w	r1, r8, r4
 8022098:	f103 0301 	add.w	r3, r3, #1
 802209c:	db0c      	blt.n	80220b8 <__strftime+0x3c0>
 802209e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80220a2:	fb90 f2fc 	sdiv	r2, r0, ip
 80220a6:	fb0c 0212 	mls	r2, ip, r2, r0
 80220aa:	e9cd 7200 	strd	r7, r2, [sp]
 80220ae:	4a3d      	ldr	r2, [pc, #244]	; (80221a4 <__strftime+0x4ac>)
 80220b0:	4630      	mov	r0, r6
 80220b2:	f7ff fcdb 	bl	8021a6c <sniprintf>
 80220b6:	e7df      	b.n	8022078 <__strftime+0x380>
 80220b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80220bc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80220c0:	f000 ff5a 	bl	8022f78 <abs>
 80220c4:	2264      	movs	r2, #100	; 0x64
 80220c6:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80220ca:	fb90 fcf2 	sdiv	ip, r0, r2
 80220ce:	fb0c 0212 	mls	r2, ip, r2, r0
 80220d2:	e7ea      	b.n	80220aa <__strftime+0x3b2>
 80220d4:	2325      	movs	r3, #37	; 0x25
 80220d6:	f88d 3020 	strb.w	r3, [sp, #32]
 80220da:	b187      	cbz	r7, 80220fe <__strftime+0x406>
 80220dc:	2e06      	cmp	r6, #6
 80220de:	bf38      	it	cc
 80220e0:	2606      	movcc	r6, #6
 80220e2:	1fb3      	subs	r3, r6, #6
 80220e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80220e8:	d10c      	bne.n	8022104 <__strftime+0x40c>
 80220ea:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80220ee:	492e      	ldr	r1, [pc, #184]	; (80221a8 <__strftime+0x4b0>)
 80220f0:	f7ff fd97 	bl	8021c22 <strcpy>
 80220f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80220f6:	9300      	str	r3, [sp, #0]
 80220f8:	aa08      	add	r2, sp, #32
 80220fa:	462b      	mov	r3, r5
 80220fc:	e760      	b.n	8021fc0 <__strftime+0x2c8>
 80220fe:	272b      	movs	r7, #43	; 0x2b
 8022100:	260a      	movs	r6, #10
 8022102:	e7ee      	b.n	80220e2 <__strftime+0x3ea>
 8022104:	4a29      	ldr	r2, [pc, #164]	; (80221ac <__strftime+0x4b4>)
 8022106:	211e      	movs	r1, #30
 8022108:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 802210c:	f7ff fcae 	bl	8021a6c <sniprintf>
 8022110:	2800      	cmp	r0, #0
 8022112:	ddea      	ble.n	80220ea <__strftime+0x3f2>
 8022114:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8022118:	4418      	add	r0, r3
 802211a:	e7e8      	b.n	80220ee <__strftime+0x3f6>
 802211c:	4628      	mov	r0, r5
 802211e:	f7ff fd89 	bl	8021c34 <iso_year_adjust>
 8022122:	4606      	mov	r6, r0
 8022124:	6968      	ldr	r0, [r5, #20]
 8022126:	2800      	cmp	r0, #0
 8022128:	db11      	blt.n	802214e <__strftime+0x456>
 802212a:	2264      	movs	r2, #100	; 0x64
 802212c:	fb90 f3f2 	sdiv	r3, r0, r2
 8022130:	fb02 0313 	mls	r3, r2, r3, r0
 8022134:	441e      	add	r6, r3
 8022136:	2364      	movs	r3, #100	; 0x64
 8022138:	fb96 f0f3 	sdiv	r0, r6, r3
 802213c:	fb03 6610 	mls	r6, r3, r0, r6
 8022140:	441e      	add	r6, r3
 8022142:	fbb6 f2f3 	udiv	r2, r6, r3
 8022146:	fb03 6312 	mls	r3, r3, r2, r6
 802214a:	4a14      	ldr	r2, [pc, #80]	; (802219c <__strftime+0x4a4>)
 802214c:	e78e      	b.n	802206c <__strftime+0x374>
 802214e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8022152:	f000 ff11 	bl	8022f78 <abs>
 8022156:	2364      	movs	r3, #100	; 0x64
 8022158:	2e00      	cmp	r6, #0
 802215a:	fb90 f2f3 	sdiv	r2, r0, r3
 802215e:	fb02 0313 	mls	r3, r2, r3, r0
 8022162:	da05      	bge.n	8022170 <__strftime+0x478>
 8022164:	6969      	ldr	r1, [r5, #20]
 8022166:	4a12      	ldr	r2, [pc, #72]	; (80221b0 <__strftime+0x4b8>)
 8022168:	4291      	cmp	r1, r2
 802216a:	bfb8      	it	lt
 802216c:	2601      	movlt	r6, #1
 802216e:	e7e1      	b.n	8022134 <__strftime+0x43c>
 8022170:	d0e0      	beq.n	8022134 <__strftime+0x43c>
 8022172:	6969      	ldr	r1, [r5, #20]
 8022174:	4a03      	ldr	r2, [pc, #12]	; (8022184 <__strftime+0x48c>)
 8022176:	4291      	cmp	r1, r2
 8022178:	bfb8      	it	lt
 802217a:	f04f 36ff 	movlt.w	r6, #4294967295
 802217e:	e7d9      	b.n	8022134 <__strftime+0x43c>
 8022180:	08041388 	.word	0x08041388
 8022184:	fffff894 	.word	0xfffff894
 8022188:	0804153f 	.word	0x0804153f
 802218c:	08041210 	.word	0x08041210
 8022190:	08041208 	.word	0x08041208
 8022194:	08041201 	.word	0x08041201
 8022198:	0804180e 	.word	0x0804180e
 802219c:	08041220 	.word	0x08041220
 80221a0:	08041212 	.word	0x08041212
 80221a4:	08041216 	.word	0x08041216
 80221a8:	08041229 	.word	0x08041229
 80221ac:	08041225 	.word	0x08041225
 80221b0:	fffff895 	.word	0xfffff895
 80221b4:	4bb6      	ldr	r3, [pc, #728]	; (8022490 <__strftime+0x798>)
 80221b6:	6969      	ldr	r1, [r5, #20]
 80221b8:	4299      	cmp	r1, r3
 80221ba:	bfac      	ite	ge
 80221bc:	2300      	movge	r3, #0
 80221be:	2301      	movlt	r3, #1
 80221c0:	4628      	mov	r0, r5
 80221c2:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80221c6:	f7ff fd35 	bl	8021c34 <iso_year_adjust>
 80221ca:	9906      	ldr	r1, [sp, #24]
 80221cc:	2900      	cmp	r1, #0
 80221ce:	4682      	mov	sl, r0
 80221d0:	db27      	blt.n	8022222 <__strftime+0x52a>
 80221d2:	2264      	movs	r2, #100	; 0x64
 80221d4:	fb91 f2f2 	sdiv	r2, r1, r2
 80221d8:	3213      	adds	r2, #19
 80221da:	6968      	ldr	r0, [r5, #20]
 80221dc:	2800      	cmp	r0, #0
 80221de:	db2b      	blt.n	8022238 <__strftime+0x540>
 80221e0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80221e4:	fb90 fefc 	sdiv	lr, r0, ip
 80221e8:	fb0c 001e 	mls	r0, ip, lr, r0
 80221ec:	f1ba 0f00 	cmp.w	sl, #0
 80221f0:	da31      	bge.n	8022256 <__strftime+0x55e>
 80221f2:	6969      	ldr	r1, [r5, #20]
 80221f4:	4ba7      	ldr	r3, [pc, #668]	; (8022494 <__strftime+0x79c>)
 80221f6:	4299      	cmp	r1, r3
 80221f8:	db38      	blt.n	802226c <__strftime+0x574>
 80221fa:	eb0a 0300 	add.w	r3, sl, r0
 80221fe:	1c59      	adds	r1, r3, #1
 8022200:	d139      	bne.n	8022276 <__strftime+0x57e>
 8022202:	3a01      	subs	r2, #1
 8022204:	2363      	movs	r3, #99	; 0x63
 8022206:	2064      	movs	r0, #100	; 0x64
 8022208:	fb00 3202 	mla	r2, r0, r2, r3
 802220c:	9b05      	ldr	r3, [sp, #20]
 802220e:	2b00      	cmp	r3, #0
 8022210:	d036      	beq.n	8022280 <__strftime+0x588>
 8022212:	232d      	movs	r3, #45	; 0x2d
 8022214:	f88d 3020 	strb.w	r3, [sp, #32]
 8022218:	b106      	cbz	r6, 802221c <__strftime+0x524>
 802221a:	3e01      	subs	r6, #1
 802221c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8022220:	e038      	b.n	8022294 <__strftime+0x59c>
 8022222:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8022226:	9106      	str	r1, [sp, #24]
 8022228:	f000 fea6 	bl	8022f78 <abs>
 802222c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022230:	9906      	ldr	r1, [sp, #24]
 8022232:	fb90 f2fc 	sdiv	r2, r0, ip
 8022236:	e7d0      	b.n	80221da <__strftime+0x4e2>
 8022238:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802223c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8022240:	f000 fe9a 	bl	8022f78 <abs>
 8022244:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8022248:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802224c:	fb90 fefc 	sdiv	lr, r0, ip
 8022250:	fb0e 001c 	mls	r0, lr, ip, r0
 8022254:	e7ca      	b.n	80221ec <__strftime+0x4f4>
 8022256:	d0d0      	beq.n	80221fa <__strftime+0x502>
 8022258:	4b8d      	ldr	r3, [pc, #564]	; (8022490 <__strftime+0x798>)
 802225a:	4299      	cmp	r1, r3
 802225c:	bfb4      	ite	lt
 802225e:	2301      	movlt	r3, #1
 8022260:	2300      	movge	r3, #0
 8022262:	9305      	str	r3, [sp, #20]
 8022264:	bfb8      	it	lt
 8022266:	f04f 3aff 	movlt.w	sl, #4294967295
 802226a:	e7c6      	b.n	80221fa <__strftime+0x502>
 802226c:	f04f 0a01 	mov.w	sl, #1
 8022270:	f8cd a014 	str.w	sl, [sp, #20]
 8022274:	e7c1      	b.n	80221fa <__strftime+0x502>
 8022276:	2b64      	cmp	r3, #100	; 0x64
 8022278:	bf04      	itt	eq
 802227a:	3201      	addeq	r2, #1
 802227c:	2300      	moveq	r3, #0
 802227e:	e7c2      	b.n	8022206 <__strftime+0x50e>
 8022280:	2f2b      	cmp	r7, #43	; 0x2b
 8022282:	d106      	bne.n	8022292 <__strftime+0x59a>
 8022284:	f242 730f 	movw	r3, #9999	; 0x270f
 8022288:	429a      	cmp	r2, r3
 802228a:	d902      	bls.n	8022292 <__strftime+0x59a>
 802228c:	f88d 7020 	strb.w	r7, [sp, #32]
 8022290:	e7c2      	b.n	8022218 <__strftime+0x520>
 8022292:	ab08      	add	r3, sp, #32
 8022294:	2125      	movs	r1, #37	; 0x25
 8022296:	7019      	strb	r1, [r3, #0]
 8022298:	b94f      	cbnz	r7, 80222ae <__strftime+0x5b6>
 802229a:	1c58      	adds	r0, r3, #1
 802229c:	497e      	ldr	r1, [pc, #504]	; (8022498 <__strftime+0x7a0>)
 802229e:	9205      	str	r2, [sp, #20]
 80222a0:	f7ff fcbf 	bl	8021c22 <strcpy>
 80222a4:	9a05      	ldr	r2, [sp, #20]
 80222a6:	9200      	str	r2, [sp, #0]
 80222a8:	4633      	mov	r3, r6
 80222aa:	aa08      	add	r2, sp, #32
 80222ac:	e059      	b.n	8022362 <__strftime+0x66a>
 80222ae:	2130      	movs	r1, #48	; 0x30
 80222b0:	1c98      	adds	r0, r3, #2
 80222b2:	7059      	strb	r1, [r3, #1]
 80222b4:	e7f2      	b.n	802229c <__strftime+0x5a4>
 80222b6:	4979      	ldr	r1, [pc, #484]	; (802249c <__strftime+0x7a4>)
 80222b8:	4a79      	ldr	r2, [pc, #484]	; (80224a0 <__strftime+0x7a8>)
 80222ba:	68ab      	ldr	r3, [r5, #8]
 80222bc:	286b      	cmp	r0, #107	; 0x6b
 80222be:	bf08      	it	eq
 80222c0:	460a      	moveq	r2, r1
 80222c2:	e6d3      	b.n	802206c <__strftime+0x374>
 80222c4:	68ab      	ldr	r3, [r5, #8]
 80222c6:	b163      	cbz	r3, 80222e2 <__strftime+0x5ea>
 80222c8:	2b0c      	cmp	r3, #12
 80222ca:	d004      	beq.n	80222d6 <__strftime+0x5de>
 80222cc:	210c      	movs	r1, #12
 80222ce:	fb93 f2f1 	sdiv	r2, r3, r1
 80222d2:	fb01 3312 	mls	r3, r1, r2, r3
 80222d6:	4972      	ldr	r1, [pc, #456]	; (80224a0 <__strftime+0x7a8>)
 80222d8:	4a70      	ldr	r2, [pc, #448]	; (802249c <__strftime+0x7a4>)
 80222da:	2849      	cmp	r0, #73	; 0x49
 80222dc:	bf08      	it	eq
 80222de:	460a      	moveq	r2, r1
 80222e0:	e6c4      	b.n	802206c <__strftime+0x374>
 80222e2:	230c      	movs	r3, #12
 80222e4:	e7f7      	b.n	80222d6 <__strftime+0x5de>
 80222e6:	69eb      	ldr	r3, [r5, #28]
 80222e8:	4a6e      	ldr	r2, [pc, #440]	; (80224a4 <__strftime+0x7ac>)
 80222ea:	3301      	adds	r3, #1
 80222ec:	e6be      	b.n	802206c <__strftime+0x374>
 80222ee:	692b      	ldr	r3, [r5, #16]
 80222f0:	3301      	adds	r3, #1
 80222f2:	e72a      	b.n	802214a <__strftime+0x452>
 80222f4:	686b      	ldr	r3, [r5, #4]
 80222f6:	e728      	b.n	802214a <__strftime+0x452>
 80222f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80222fc:	42a3      	cmp	r3, r4
 80222fe:	f67f ad2a 	bls.w	8021d56 <__strftime+0x5e>
 8022302:	230a      	movs	r3, #10
 8022304:	f809 3004 	strb.w	r3, [r9, r4]
 8022308:	3401      	adds	r4, #1
 802230a:	e5f7      	b.n	8021efc <__strftime+0x204>
 802230c:	68ab      	ldr	r3, [r5, #8]
 802230e:	2b0b      	cmp	r3, #11
 8022310:	bfcc      	ite	gt
 8022312:	22a4      	movgt	r2, #164	; 0xa4
 8022314:	22a0      	movle	r2, #160	; 0xa0
 8022316:	4b64      	ldr	r3, [pc, #400]	; (80224a8 <__strftime+0x7b0>)
 8022318:	4413      	add	r3, r2
 802231a:	685e      	ldr	r6, [r3, #4]
 802231c:	4630      	mov	r0, r6
 802231e:	f7dd ff99 	bl	8000254 <strlen>
 8022322:	1e72      	subs	r2, r6, #1
 8022324:	4420      	add	r0, r4
 8022326:	f108 36ff 	add.w	r6, r8, #4294967295
 802232a:	42a0      	cmp	r0, r4
 802232c:	f43f ade6 	beq.w	8021efc <__strftime+0x204>
 8022330:	42a6      	cmp	r6, r4
 8022332:	f67f ad10 	bls.w	8021d56 <__strftime+0x5e>
 8022336:	f89b 1000 	ldrb.w	r1, [fp]
 802233a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 802233e:	2950      	cmp	r1, #80	; 0x50
 8022340:	d107      	bne.n	8022352 <__strftime+0x65a>
 8022342:	495a      	ldr	r1, [pc, #360]	; (80224ac <__strftime+0x7b4>)
 8022344:	5cc9      	ldrb	r1, [r1, r3]
 8022346:	f001 0103 	and.w	r1, r1, #3
 802234a:	2901      	cmp	r1, #1
 802234c:	bf08      	it	eq
 802234e:	3320      	addeq	r3, #32
 8022350:	b2db      	uxtb	r3, r3
 8022352:	f809 3004 	strb.w	r3, [r9, r4]
 8022356:	3401      	adds	r4, #1
 8022358:	e7e7      	b.n	802232a <__strftime+0x632>
 802235a:	686b      	ldr	r3, [r5, #4]
 802235c:	9300      	str	r3, [sp, #0]
 802235e:	4a54      	ldr	r2, [pc, #336]	; (80224b0 <__strftime+0x7b8>)
 8022360:	68ab      	ldr	r3, [r5, #8]
 8022362:	eba8 0104 	sub.w	r1, r8, r4
 8022366:	eb09 0004 	add.w	r0, r9, r4
 802236a:	f7ff fb7f 	bl	8021a6c <sniprintf>
 802236e:	e683      	b.n	8022078 <__strftime+0x380>
 8022370:	6a2b      	ldr	r3, [r5, #32]
 8022372:	2b00      	cmp	r3, #0
 8022374:	db79      	blt.n	802246a <__strftime+0x772>
 8022376:	f000 fb9f 	bl	8022ab8 <__tz_lock>
 802237a:	9b04      	ldr	r3, [sp, #16]
 802237c:	b90b      	cbnz	r3, 8022382 <__strftime+0x68a>
 802237e:	f000 fba7 	bl	8022ad0 <_tzset_unlocked>
 8022382:	f001 fea9 	bl	80240d8 <__gettzinfo>
 8022386:	6a2b      	ldr	r3, [r5, #32]
 8022388:	2b00      	cmp	r3, #0
 802238a:	bfcc      	ite	gt
 802238c:	2350      	movgt	r3, #80	; 0x50
 802238e:	2328      	movle	r3, #40	; 0x28
 8022390:	58c3      	ldr	r3, [r0, r3]
 8022392:	f1c3 0a00 	rsb	sl, r3, #0
 8022396:	f000 fb95 	bl	8022ac4 <__tz_unlock>
 802239a:	2301      	movs	r3, #1
 802239c:	9304      	str	r3, [sp, #16]
 802239e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80223a2:	4662      	mov	r2, ip
 80223a4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80223a8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80223ac:	9602      	str	r6, [sp, #8]
 80223ae:	f143 36ff 	adc.w	r6, r3, #4294967295
 80223b2:	9603      	str	r6, [sp, #12]
 80223b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80223b8:	2e00      	cmp	r6, #0
 80223ba:	f177 0600 	sbcs.w	r6, r7, #0
 80223be:	eba8 0104 	sub.w	r1, r8, r4
 80223c2:	eb09 0004 	add.w	r0, r9, r4
 80223c6:	da05      	bge.n	80223d4 <__strftime+0x6dc>
 80223c8:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80223cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80223d0:	9602      	str	r6, [sp, #8]
 80223d2:	9303      	str	r3, [sp, #12]
 80223d4:	9b02      	ldr	r3, [sp, #8]
 80223d6:	089e      	lsrs	r6, r3, #2
 80223d8:	9b03      	ldr	r3, [sp, #12]
 80223da:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80223de:	f10c 32ff 	add.w	r2, ip, #4294967295
 80223e2:	109f      	asrs	r7, r3, #2
 80223e4:	2364      	movs	r3, #100	; 0x64
 80223e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80223ea:	1af6      	subs	r6, r6, r3
 80223ec:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80223f0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80223f4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80223f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80223fc:	18f6      	adds	r6, r6, r3
 80223fe:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022402:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8022406:	f240 136d 	movw	r3, #365	; 0x16d
 802240a:	fb03 fc0c 	mul.w	ip, r3, ip
 802240e:	69eb      	ldr	r3, [r5, #28]
 8022410:	eb16 060c 	adds.w	r6, r6, ip
 8022414:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8022418:	18f6      	adds	r6, r6, r3
 802241a:	f04f 0c18 	mov.w	ip, #24
 802241e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022422:	fba6 230c 	umull	r2, r3, r6, ip
 8022426:	68ae      	ldr	r6, [r5, #8]
 8022428:	fb0c 3307 	mla	r3, ip, r7, r3
 802242c:	1992      	adds	r2, r2, r6
 802242e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8022432:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8022436:	fba2 670c 	umull	r6, r7, r2, ip
 802243a:	fb0c 7703 	mla	r7, ip, r3, r7
 802243e:	686b      	ldr	r3, [r5, #4]
 8022440:	18f6      	adds	r6, r6, r3
 8022442:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8022446:	fba6 230c 	umull	r2, r3, r6, ip
 802244a:	682e      	ldr	r6, [r5, #0]
 802244c:	fb0c 3307 	mla	r3, ip, r7, r3
 8022450:	1992      	adds	r2, r2, r6
 8022452:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8022456:	ebb2 020a 	subs.w	r2, r2, sl
 802245a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 802245e:	e9cd 2300 	strd	r2, r3, [sp]
 8022462:	4a14      	ldr	r2, [pc, #80]	; (80224b4 <__strftime+0x7bc>)
 8022464:	f7ff fb02 	bl	8021a6c <sniprintf>
 8022468:	e606      	b.n	8022078 <__strftime+0x380>
 802246a:	f04f 0a00 	mov.w	sl, #0
 802246e:	e796      	b.n	802239e <__strftime+0x6a6>
 8022470:	682b      	ldr	r3, [r5, #0]
 8022472:	e66a      	b.n	802214a <__strftime+0x452>
 8022474:	f108 33ff 	add.w	r3, r8, #4294967295
 8022478:	42a3      	cmp	r3, r4
 802247a:	f67f ac6c 	bls.w	8021d56 <__strftime+0x5e>
 802247e:	2309      	movs	r3, #9
 8022480:	e740      	b.n	8022304 <__strftime+0x60c>
 8022482:	682b      	ldr	r3, [r5, #0]
 8022484:	9301      	str	r3, [sp, #4]
 8022486:	686b      	ldr	r3, [r5, #4]
 8022488:	9300      	str	r3, [sp, #0]
 802248a:	4a0b      	ldr	r2, [pc, #44]	; (80224b8 <__strftime+0x7c0>)
 802248c:	68ab      	ldr	r3, [r5, #8]
 802248e:	e5e0      	b.n	8022052 <__strftime+0x35a>
 8022490:	fffff894 	.word	0xfffff894
 8022494:	fffff895 	.word	0xfffff895
 8022498:	08041231 	.word	0x08041231
 802249c:	08041212 	.word	0x08041212
 80224a0:	08041220 	.word	0x08041220
 80224a4:	08041235 	.word	0x08041235
 80224a8:	08041388 	.word	0x08041388
 80224ac:	08040f31 	.word	0x08040f31
 80224b0:	08041244 	.word	0x08041244
 80224b4:	0804123a 	.word	0x0804123a
 80224b8:	0804123f 	.word	0x0804123f
 80224bc:	f108 33ff 	add.w	r3, r8, #4294967295
 80224c0:	42a3      	cmp	r3, r4
 80224c2:	f67f ac48 	bls.w	8021d56 <__strftime+0x5e>
 80224c6:	69ab      	ldr	r3, [r5, #24]
 80224c8:	eb09 0204 	add.w	r2, r9, r4
 80224cc:	3401      	adds	r4, #1
 80224ce:	b913      	cbnz	r3, 80224d6 <__strftime+0x7de>
 80224d0:	2337      	movs	r3, #55	; 0x37
 80224d2:	7013      	strb	r3, [r2, #0]
 80224d4:	e512      	b.n	8021efc <__strftime+0x204>
 80224d6:	3330      	adds	r3, #48	; 0x30
 80224d8:	e7fb      	b.n	80224d2 <__strftime+0x7da>
 80224da:	69eb      	ldr	r3, [r5, #28]
 80224dc:	69aa      	ldr	r2, [r5, #24]
 80224de:	3307      	adds	r3, #7
 80224e0:	1a9b      	subs	r3, r3, r2
 80224e2:	2207      	movs	r2, #7
 80224e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80224e8:	e62f      	b.n	802214a <__strftime+0x452>
 80224ea:	4628      	mov	r0, r5
 80224ec:	f7ff fba2 	bl	8021c34 <iso_year_adjust>
 80224f0:	69aa      	ldr	r2, [r5, #24]
 80224f2:	b132      	cbz	r2, 8022502 <__strftime+0x80a>
 80224f4:	3a01      	subs	r2, #1
 80224f6:	2800      	cmp	r0, #0
 80224f8:	dc28      	bgt.n	802254c <__strftime+0x854>
 80224fa:	69eb      	ldr	r3, [r5, #28]
 80224fc:	d103      	bne.n	8022506 <__strftime+0x80e>
 80224fe:	330a      	adds	r3, #10
 8022500:	e7ee      	b.n	80224e0 <__strftime+0x7e8>
 8022502:	2206      	movs	r2, #6
 8022504:	e7f7      	b.n	80224f6 <__strftime+0x7fe>
 8022506:	6968      	ldr	r0, [r5, #20]
 8022508:	2800      	cmp	r0, #0
 802250a:	eba2 0303 	sub.w	r3, r2, r3
 802250e:	f240 726b 	movw	r2, #1899	; 0x76b
 8022512:	bfa8      	it	ge
 8022514:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8022518:	4410      	add	r0, r2
 802251a:	0782      	lsls	r2, r0, #30
 802251c:	d105      	bne.n	802252a <__strftime+0x832>
 802251e:	2264      	movs	r2, #100	; 0x64
 8022520:	fb90 f1f2 	sdiv	r1, r0, r2
 8022524:	fb02 0111 	mls	r1, r2, r1, r0
 8022528:	b971      	cbnz	r1, 8022548 <__strftime+0x850>
 802252a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 802252e:	fb90 f2f1 	sdiv	r2, r0, r1
 8022532:	fb01 0212 	mls	r2, r1, r2, r0
 8022536:	fab2 f282 	clz	r2, r2
 802253a:	0952      	lsrs	r2, r2, #5
 802253c:	1a9a      	subs	r2, r3, r2
 802253e:	2a05      	cmp	r2, #5
 8022540:	bfb4      	ite	lt
 8022542:	2335      	movlt	r3, #53	; 0x35
 8022544:	2334      	movge	r3, #52	; 0x34
 8022546:	e600      	b.n	802214a <__strftime+0x452>
 8022548:	2201      	movs	r2, #1
 802254a:	e7f7      	b.n	802253c <__strftime+0x844>
 802254c:	2301      	movs	r3, #1
 802254e:	e5fc      	b.n	802214a <__strftime+0x452>
 8022550:	f108 33ff 	add.w	r3, r8, #4294967295
 8022554:	42a3      	cmp	r3, r4
 8022556:	f67f abfe 	bls.w	8021d56 <__strftime+0x5e>
 802255a:	69ab      	ldr	r3, [r5, #24]
 802255c:	3330      	adds	r3, #48	; 0x30
 802255e:	e6d1      	b.n	8022304 <__strftime+0x60c>
 8022560:	69ab      	ldr	r3, [r5, #24]
 8022562:	b13b      	cbz	r3, 8022574 <__strftime+0x87c>
 8022564:	3b01      	subs	r3, #1
 8022566:	69ea      	ldr	r2, [r5, #28]
 8022568:	3207      	adds	r2, #7
 802256a:	1ad2      	subs	r2, r2, r3
 802256c:	2307      	movs	r3, #7
 802256e:	fb92 f3f3 	sdiv	r3, r2, r3
 8022572:	e5ea      	b.n	802214a <__strftime+0x452>
 8022574:	2306      	movs	r3, #6
 8022576:	e7f6      	b.n	8022566 <__strftime+0x86e>
 8022578:	6968      	ldr	r0, [r5, #20]
 802257a:	2800      	cmp	r0, #0
 802257c:	db05      	blt.n	802258a <__strftime+0x892>
 802257e:	2264      	movs	r2, #100	; 0x64
 8022580:	fb90 f3f2 	sdiv	r3, r0, r2
 8022584:	fb03 0312 	mls	r3, r3, r2, r0
 8022588:	e5df      	b.n	802214a <__strftime+0x452>
 802258a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802258e:	f000 fcf3 	bl	8022f78 <abs>
 8022592:	e7f4      	b.n	802257e <__strftime+0x886>
 8022594:	696b      	ldr	r3, [r5, #20]
 8022596:	4a4c      	ldr	r2, [pc, #304]	; (80226c8 <__strftime+0x9d0>)
 8022598:	4293      	cmp	r3, r2
 802259a:	da09      	bge.n	80225b0 <__strftime+0x8b8>
 802259c:	212d      	movs	r1, #45	; 0x2d
 802259e:	f88d 1020 	strb.w	r1, [sp, #32]
 80225a2:	eba2 0a03 	sub.w	sl, r2, r3
 80225a6:	b106      	cbz	r6, 80225aa <__strftime+0x8b2>
 80225a8:	3e01      	subs	r6, #1
 80225aa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80225ae:	e00b      	b.n	80225c8 <__strftime+0x8d0>
 80225b0:	2f2b      	cmp	r7, #43	; 0x2b
 80225b2:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 80225b6:	d106      	bne.n	80225c6 <__strftime+0x8ce>
 80225b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80225bc:	459a      	cmp	sl, r3
 80225be:	d902      	bls.n	80225c6 <__strftime+0x8ce>
 80225c0:	f88d 7020 	strb.w	r7, [sp, #32]
 80225c4:	e7ef      	b.n	80225a6 <__strftime+0x8ae>
 80225c6:	ab08      	add	r3, sp, #32
 80225c8:	2225      	movs	r2, #37	; 0x25
 80225ca:	701a      	strb	r2, [r3, #0]
 80225cc:	b937      	cbnz	r7, 80225dc <__strftime+0x8e4>
 80225ce:	1c58      	adds	r0, r3, #1
 80225d0:	493e      	ldr	r1, [pc, #248]	; (80226cc <__strftime+0x9d4>)
 80225d2:	f7ff fb26 	bl	8021c22 <strcpy>
 80225d6:	f8cd a000 	str.w	sl, [sp]
 80225da:	e665      	b.n	80222a8 <__strftime+0x5b0>
 80225dc:	2230      	movs	r2, #48	; 0x30
 80225de:	1c98      	adds	r0, r3, #2
 80225e0:	705a      	strb	r2, [r3, #1]
 80225e2:	e7f5      	b.n	80225d0 <__strftime+0x8d8>
 80225e4:	6a2b      	ldr	r3, [r5, #32]
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	f6ff ac88 	blt.w	8021efc <__strftime+0x204>
 80225ec:	f000 fa64 	bl	8022ab8 <__tz_lock>
 80225f0:	9b04      	ldr	r3, [sp, #16]
 80225f2:	b90b      	cbnz	r3, 80225f8 <__strftime+0x900>
 80225f4:	f000 fa6c 	bl	8022ad0 <_tzset_unlocked>
 80225f8:	f001 fd6e 	bl	80240d8 <__gettzinfo>
 80225fc:	6a2b      	ldr	r3, [r5, #32]
 80225fe:	2b00      	cmp	r3, #0
 8022600:	bfcc      	ite	gt
 8022602:	2350      	movgt	r3, #80	; 0x50
 8022604:	2328      	movle	r3, #40	; 0x28
 8022606:	eb09 0704 	add.w	r7, r9, r4
 802260a:	58c6      	ldr	r6, [r0, r3]
 802260c:	f000 fa5a 	bl	8022ac4 <__tz_unlock>
 8022610:	4276      	negs	r6, r6
 8022612:	233c      	movs	r3, #60	; 0x3c
 8022614:	fb96 f0f3 	sdiv	r0, r6, r3
 8022618:	f001 fe12 	bl	8024240 <labs>
 802261c:	233c      	movs	r3, #60	; 0x3c
 802261e:	eba8 0a04 	sub.w	sl, r8, r4
 8022622:	fb90 f2f3 	sdiv	r2, r0, r3
 8022626:	fb02 0013 	mls	r0, r2, r3, r0
 802262a:	9000      	str	r0, [sp, #0]
 802262c:	4a28      	ldr	r2, [pc, #160]	; (80226d0 <__strftime+0x9d8>)
 802262e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8022632:	4651      	mov	r1, sl
 8022634:	4638      	mov	r0, r7
 8022636:	fb96 f3f3 	sdiv	r3, r6, r3
 802263a:	f7ff fa17 	bl	8021a6c <sniprintf>
 802263e:	2800      	cmp	r0, #0
 8022640:	f6ff ab89 	blt.w	8021d56 <__strftime+0x5e>
 8022644:	4404      	add	r4, r0
 8022646:	45a0      	cmp	r8, r4
 8022648:	f67f ab85 	bls.w	8021d56 <__strftime+0x5e>
 802264c:	2301      	movs	r3, #1
 802264e:	9304      	str	r3, [sp, #16]
 8022650:	e454      	b.n	8021efc <__strftime+0x204>
 8022652:	6a2b      	ldr	r3, [r5, #32]
 8022654:	2b00      	cmp	r3, #0
 8022656:	f6ff ac51 	blt.w	8021efc <__strftime+0x204>
 802265a:	f000 fa2d 	bl	8022ab8 <__tz_lock>
 802265e:	9b04      	ldr	r3, [sp, #16]
 8022660:	b90b      	cbnz	r3, 8022666 <__strftime+0x96e>
 8022662:	f000 fa35 	bl	8022ad0 <_tzset_unlocked>
 8022666:	6a2b      	ldr	r3, [r5, #32]
 8022668:	4a1a      	ldr	r2, [pc, #104]	; (80226d4 <__strftime+0x9dc>)
 802266a:	2b00      	cmp	r3, #0
 802266c:	bfd4      	ite	le
 802266e:	2300      	movle	r3, #0
 8022670:	2301      	movgt	r3, #1
 8022672:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8022676:	4630      	mov	r0, r6
 8022678:	f7dd fdec 	bl	8000254 <strlen>
 802267c:	3e01      	subs	r6, #1
 802267e:	4420      	add	r0, r4
 8022680:	f108 33ff 	add.w	r3, r8, #4294967295
 8022684:	42a0      	cmp	r0, r4
 8022686:	d102      	bne.n	802268e <__strftime+0x996>
 8022688:	f000 fa1c 	bl	8022ac4 <__tz_unlock>
 802268c:	e7de      	b.n	802264c <__strftime+0x954>
 802268e:	42a3      	cmp	r3, r4
 8022690:	d905      	bls.n	802269e <__strftime+0x9a6>
 8022692:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8022696:	f809 2004 	strb.w	r2, [r9, r4]
 802269a:	3401      	adds	r4, #1
 802269c:	e7f2      	b.n	8022684 <__strftime+0x98c>
 802269e:	f000 fa11 	bl	8022ac4 <__tz_unlock>
 80226a2:	f7ff bb58 	b.w	8021d56 <__strftime+0x5e>
 80226a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80226aa:	42a3      	cmp	r3, r4
 80226ac:	f67f ab53 	bls.w	8021d56 <__strftime+0x5e>
 80226b0:	2325      	movs	r3, #37	; 0x25
 80226b2:	e627      	b.n	8022304 <__strftime+0x60c>
 80226b4:	f1b8 0f00 	cmp.w	r8, #0
 80226b8:	d002      	beq.n	80226c0 <__strftime+0x9c8>
 80226ba:	2300      	movs	r3, #0
 80226bc:	f809 3004 	strb.w	r3, [r9, r4]
 80226c0:	4620      	mov	r0, r4
 80226c2:	b011      	add	sp, #68	; 0x44
 80226c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226c8:	fffff894 	.word	0xfffff894
 80226cc:	08041231 	.word	0x08041231
 80226d0:	0804124e 	.word	0x0804124e
 80226d4:	200004c0 	.word	0x200004c0

080226d8 <strftime>:
 80226d8:	b513      	push	{r0, r1, r4, lr}
 80226da:	4c03      	ldr	r4, [pc, #12]	; (80226e8 <strftime+0x10>)
 80226dc:	9400      	str	r4, [sp, #0]
 80226de:	f7ff fb0b 	bl	8021cf8 <__strftime>
 80226e2:	b002      	add	sp, #8
 80226e4:	bd10      	pop	{r4, pc}
 80226e6:	bf00      	nop
 80226e8:	20000520 	.word	0x20000520

080226ec <strncmp>:
 80226ec:	b510      	push	{r4, lr}
 80226ee:	b16a      	cbz	r2, 802270c <strncmp+0x20>
 80226f0:	3901      	subs	r1, #1
 80226f2:	1884      	adds	r4, r0, r2
 80226f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80226f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80226fc:	4293      	cmp	r3, r2
 80226fe:	d103      	bne.n	8022708 <strncmp+0x1c>
 8022700:	42a0      	cmp	r0, r4
 8022702:	d001      	beq.n	8022708 <strncmp+0x1c>
 8022704:	2b00      	cmp	r3, #0
 8022706:	d1f5      	bne.n	80226f4 <strncmp+0x8>
 8022708:	1a98      	subs	r0, r3, r2
 802270a:	bd10      	pop	{r4, pc}
 802270c:	4610      	mov	r0, r2
 802270e:	e7fc      	b.n	802270a <strncmp+0x1e>

08022710 <strncpy>:
 8022710:	b510      	push	{r4, lr}
 8022712:	3901      	subs	r1, #1
 8022714:	4603      	mov	r3, r0
 8022716:	b132      	cbz	r2, 8022726 <strncpy+0x16>
 8022718:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802271c:	f803 4b01 	strb.w	r4, [r3], #1
 8022720:	3a01      	subs	r2, #1
 8022722:	2c00      	cmp	r4, #0
 8022724:	d1f7      	bne.n	8022716 <strncpy+0x6>
 8022726:	441a      	add	r2, r3
 8022728:	2100      	movs	r1, #0
 802272a:	4293      	cmp	r3, r2
 802272c:	d100      	bne.n	8022730 <strncpy+0x20>
 802272e:	bd10      	pop	{r4, pc}
 8022730:	f803 1b01 	strb.w	r1, [r3], #1
 8022734:	e7f9      	b.n	802272a <strncpy+0x1a>
	...

08022738 <_strtol_l.isra.0>:
 8022738:	2b01      	cmp	r3, #1
 802273a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802273e:	d001      	beq.n	8022744 <_strtol_l.isra.0+0xc>
 8022740:	2b24      	cmp	r3, #36	; 0x24
 8022742:	d906      	bls.n	8022752 <_strtol_l.isra.0+0x1a>
 8022744:	f001 fab6 	bl	8023cb4 <__errno>
 8022748:	2316      	movs	r3, #22
 802274a:	6003      	str	r3, [r0, #0]
 802274c:	2000      	movs	r0, #0
 802274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022752:	4f3a      	ldr	r7, [pc, #232]	; (802283c <_strtol_l.isra.0+0x104>)
 8022754:	468e      	mov	lr, r1
 8022756:	4676      	mov	r6, lr
 8022758:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802275c:	5de5      	ldrb	r5, [r4, r7]
 802275e:	f015 0508 	ands.w	r5, r5, #8
 8022762:	d1f8      	bne.n	8022756 <_strtol_l.isra.0+0x1e>
 8022764:	2c2d      	cmp	r4, #45	; 0x2d
 8022766:	d134      	bne.n	80227d2 <_strtol_l.isra.0+0x9a>
 8022768:	f89e 4000 	ldrb.w	r4, [lr]
 802276c:	f04f 0801 	mov.w	r8, #1
 8022770:	f106 0e02 	add.w	lr, r6, #2
 8022774:	2b00      	cmp	r3, #0
 8022776:	d05c      	beq.n	8022832 <_strtol_l.isra.0+0xfa>
 8022778:	2b10      	cmp	r3, #16
 802277a:	d10c      	bne.n	8022796 <_strtol_l.isra.0+0x5e>
 802277c:	2c30      	cmp	r4, #48	; 0x30
 802277e:	d10a      	bne.n	8022796 <_strtol_l.isra.0+0x5e>
 8022780:	f89e 4000 	ldrb.w	r4, [lr]
 8022784:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8022788:	2c58      	cmp	r4, #88	; 0x58
 802278a:	d14d      	bne.n	8022828 <_strtol_l.isra.0+0xf0>
 802278c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8022790:	2310      	movs	r3, #16
 8022792:	f10e 0e02 	add.w	lr, lr, #2
 8022796:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802279a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802279e:	2600      	movs	r6, #0
 80227a0:	fbbc f9f3 	udiv	r9, ip, r3
 80227a4:	4635      	mov	r5, r6
 80227a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80227aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80227ae:	2f09      	cmp	r7, #9
 80227b0:	d818      	bhi.n	80227e4 <_strtol_l.isra.0+0xac>
 80227b2:	463c      	mov	r4, r7
 80227b4:	42a3      	cmp	r3, r4
 80227b6:	dd24      	ble.n	8022802 <_strtol_l.isra.0+0xca>
 80227b8:	2e00      	cmp	r6, #0
 80227ba:	db1f      	blt.n	80227fc <_strtol_l.isra.0+0xc4>
 80227bc:	45a9      	cmp	r9, r5
 80227be:	d31d      	bcc.n	80227fc <_strtol_l.isra.0+0xc4>
 80227c0:	d101      	bne.n	80227c6 <_strtol_l.isra.0+0x8e>
 80227c2:	45a2      	cmp	sl, r4
 80227c4:	db1a      	blt.n	80227fc <_strtol_l.isra.0+0xc4>
 80227c6:	fb05 4503 	mla	r5, r5, r3, r4
 80227ca:	2601      	movs	r6, #1
 80227cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80227d0:	e7eb      	b.n	80227aa <_strtol_l.isra.0+0x72>
 80227d2:	2c2b      	cmp	r4, #43	; 0x2b
 80227d4:	bf08      	it	eq
 80227d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80227da:	46a8      	mov	r8, r5
 80227dc:	bf08      	it	eq
 80227de:	f106 0e02 	addeq.w	lr, r6, #2
 80227e2:	e7c7      	b.n	8022774 <_strtol_l.isra.0+0x3c>
 80227e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80227e8:	2f19      	cmp	r7, #25
 80227ea:	d801      	bhi.n	80227f0 <_strtol_l.isra.0+0xb8>
 80227ec:	3c37      	subs	r4, #55	; 0x37
 80227ee:	e7e1      	b.n	80227b4 <_strtol_l.isra.0+0x7c>
 80227f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80227f4:	2f19      	cmp	r7, #25
 80227f6:	d804      	bhi.n	8022802 <_strtol_l.isra.0+0xca>
 80227f8:	3c57      	subs	r4, #87	; 0x57
 80227fa:	e7db      	b.n	80227b4 <_strtol_l.isra.0+0x7c>
 80227fc:	f04f 36ff 	mov.w	r6, #4294967295
 8022800:	e7e4      	b.n	80227cc <_strtol_l.isra.0+0x94>
 8022802:	2e00      	cmp	r6, #0
 8022804:	da05      	bge.n	8022812 <_strtol_l.isra.0+0xda>
 8022806:	2322      	movs	r3, #34	; 0x22
 8022808:	6003      	str	r3, [r0, #0]
 802280a:	4665      	mov	r5, ip
 802280c:	b942      	cbnz	r2, 8022820 <_strtol_l.isra.0+0xe8>
 802280e:	4628      	mov	r0, r5
 8022810:	e79d      	b.n	802274e <_strtol_l.isra.0+0x16>
 8022812:	f1b8 0f00 	cmp.w	r8, #0
 8022816:	d000      	beq.n	802281a <_strtol_l.isra.0+0xe2>
 8022818:	426d      	negs	r5, r5
 802281a:	2a00      	cmp	r2, #0
 802281c:	d0f7      	beq.n	802280e <_strtol_l.isra.0+0xd6>
 802281e:	b10e      	cbz	r6, 8022824 <_strtol_l.isra.0+0xec>
 8022820:	f10e 31ff 	add.w	r1, lr, #4294967295
 8022824:	6011      	str	r1, [r2, #0]
 8022826:	e7f2      	b.n	802280e <_strtol_l.isra.0+0xd6>
 8022828:	2430      	movs	r4, #48	; 0x30
 802282a:	2b00      	cmp	r3, #0
 802282c:	d1b3      	bne.n	8022796 <_strtol_l.isra.0+0x5e>
 802282e:	2308      	movs	r3, #8
 8022830:	e7b1      	b.n	8022796 <_strtol_l.isra.0+0x5e>
 8022832:	2c30      	cmp	r4, #48	; 0x30
 8022834:	d0a4      	beq.n	8022780 <_strtol_l.isra.0+0x48>
 8022836:	230a      	movs	r3, #10
 8022838:	e7ad      	b.n	8022796 <_strtol_l.isra.0+0x5e>
 802283a:	bf00      	nop
 802283c:	08040f31 	.word	0x08040f31

08022840 <_strtol_r>:
 8022840:	f7ff bf7a 	b.w	8022738 <_strtol_l.isra.0>

08022844 <strtol>:
 8022844:	4613      	mov	r3, r2
 8022846:	460a      	mov	r2, r1
 8022848:	4601      	mov	r1, r0
 802284a:	4802      	ldr	r0, [pc, #8]	; (8022854 <strtol+0x10>)
 802284c:	6800      	ldr	r0, [r0, #0]
 802284e:	f7ff bf73 	b.w	8022738 <_strtol_l.isra.0>
 8022852:	bf00      	nop
 8022854:	2000045c 	.word	0x2000045c

08022858 <_strtoul_l.isra.0>:
 8022858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802285c:	4e3b      	ldr	r6, [pc, #236]	; (802294c <_strtoul_l.isra.0+0xf4>)
 802285e:	4686      	mov	lr, r0
 8022860:	468c      	mov	ip, r1
 8022862:	4660      	mov	r0, ip
 8022864:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022868:	5da5      	ldrb	r5, [r4, r6]
 802286a:	f015 0508 	ands.w	r5, r5, #8
 802286e:	d1f8      	bne.n	8022862 <_strtoul_l.isra.0+0xa>
 8022870:	2c2d      	cmp	r4, #45	; 0x2d
 8022872:	d134      	bne.n	80228de <_strtoul_l.isra.0+0x86>
 8022874:	f89c 4000 	ldrb.w	r4, [ip]
 8022878:	f04f 0801 	mov.w	r8, #1
 802287c:	f100 0c02 	add.w	ip, r0, #2
 8022880:	2b00      	cmp	r3, #0
 8022882:	d05e      	beq.n	8022942 <_strtoul_l.isra.0+0xea>
 8022884:	2b10      	cmp	r3, #16
 8022886:	d10c      	bne.n	80228a2 <_strtoul_l.isra.0+0x4a>
 8022888:	2c30      	cmp	r4, #48	; 0x30
 802288a:	d10a      	bne.n	80228a2 <_strtoul_l.isra.0+0x4a>
 802288c:	f89c 0000 	ldrb.w	r0, [ip]
 8022890:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022894:	2858      	cmp	r0, #88	; 0x58
 8022896:	d14f      	bne.n	8022938 <_strtoul_l.isra.0+0xe0>
 8022898:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802289c:	2310      	movs	r3, #16
 802289e:	f10c 0c02 	add.w	ip, ip, #2
 80228a2:	f04f 37ff 	mov.w	r7, #4294967295
 80228a6:	2500      	movs	r5, #0
 80228a8:	fbb7 f7f3 	udiv	r7, r7, r3
 80228ac:	fb03 f907 	mul.w	r9, r3, r7
 80228b0:	ea6f 0909 	mvn.w	r9, r9
 80228b4:	4628      	mov	r0, r5
 80228b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80228ba:	2e09      	cmp	r6, #9
 80228bc:	d818      	bhi.n	80228f0 <_strtoul_l.isra.0+0x98>
 80228be:	4634      	mov	r4, r6
 80228c0:	42a3      	cmp	r3, r4
 80228c2:	dd24      	ble.n	802290e <_strtoul_l.isra.0+0xb6>
 80228c4:	2d00      	cmp	r5, #0
 80228c6:	db1f      	blt.n	8022908 <_strtoul_l.isra.0+0xb0>
 80228c8:	4287      	cmp	r7, r0
 80228ca:	d31d      	bcc.n	8022908 <_strtoul_l.isra.0+0xb0>
 80228cc:	d101      	bne.n	80228d2 <_strtoul_l.isra.0+0x7a>
 80228ce:	45a1      	cmp	r9, r4
 80228d0:	db1a      	blt.n	8022908 <_strtoul_l.isra.0+0xb0>
 80228d2:	fb00 4003 	mla	r0, r0, r3, r4
 80228d6:	2501      	movs	r5, #1
 80228d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80228dc:	e7eb      	b.n	80228b6 <_strtoul_l.isra.0+0x5e>
 80228de:	2c2b      	cmp	r4, #43	; 0x2b
 80228e0:	bf08      	it	eq
 80228e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80228e6:	46a8      	mov	r8, r5
 80228e8:	bf08      	it	eq
 80228ea:	f100 0c02 	addeq.w	ip, r0, #2
 80228ee:	e7c7      	b.n	8022880 <_strtoul_l.isra.0+0x28>
 80228f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80228f4:	2e19      	cmp	r6, #25
 80228f6:	d801      	bhi.n	80228fc <_strtoul_l.isra.0+0xa4>
 80228f8:	3c37      	subs	r4, #55	; 0x37
 80228fa:	e7e1      	b.n	80228c0 <_strtoul_l.isra.0+0x68>
 80228fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022900:	2e19      	cmp	r6, #25
 8022902:	d804      	bhi.n	802290e <_strtoul_l.isra.0+0xb6>
 8022904:	3c57      	subs	r4, #87	; 0x57
 8022906:	e7db      	b.n	80228c0 <_strtoul_l.isra.0+0x68>
 8022908:	f04f 35ff 	mov.w	r5, #4294967295
 802290c:	e7e4      	b.n	80228d8 <_strtoul_l.isra.0+0x80>
 802290e:	2d00      	cmp	r5, #0
 8022910:	da07      	bge.n	8022922 <_strtoul_l.isra.0+0xca>
 8022912:	2322      	movs	r3, #34	; 0x22
 8022914:	f8ce 3000 	str.w	r3, [lr]
 8022918:	f04f 30ff 	mov.w	r0, #4294967295
 802291c:	b942      	cbnz	r2, 8022930 <_strtoul_l.isra.0+0xd8>
 802291e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022922:	f1b8 0f00 	cmp.w	r8, #0
 8022926:	d000      	beq.n	802292a <_strtoul_l.isra.0+0xd2>
 8022928:	4240      	negs	r0, r0
 802292a:	2a00      	cmp	r2, #0
 802292c:	d0f7      	beq.n	802291e <_strtoul_l.isra.0+0xc6>
 802292e:	b10d      	cbz	r5, 8022934 <_strtoul_l.isra.0+0xdc>
 8022930:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022934:	6011      	str	r1, [r2, #0]
 8022936:	e7f2      	b.n	802291e <_strtoul_l.isra.0+0xc6>
 8022938:	2430      	movs	r4, #48	; 0x30
 802293a:	2b00      	cmp	r3, #0
 802293c:	d1b1      	bne.n	80228a2 <_strtoul_l.isra.0+0x4a>
 802293e:	2308      	movs	r3, #8
 8022940:	e7af      	b.n	80228a2 <_strtoul_l.isra.0+0x4a>
 8022942:	2c30      	cmp	r4, #48	; 0x30
 8022944:	d0a2      	beq.n	802288c <_strtoul_l.isra.0+0x34>
 8022946:	230a      	movs	r3, #10
 8022948:	e7ab      	b.n	80228a2 <_strtoul_l.isra.0+0x4a>
 802294a:	bf00      	nop
 802294c:	08040f31 	.word	0x08040f31

08022950 <_strtoul_r>:
 8022950:	f7ff bf82 	b.w	8022858 <_strtoul_l.isra.0>

08022954 <strtoul>:
 8022954:	4613      	mov	r3, r2
 8022956:	460a      	mov	r2, r1
 8022958:	4601      	mov	r1, r0
 802295a:	4802      	ldr	r0, [pc, #8]	; (8022964 <strtoul+0x10>)
 802295c:	6800      	ldr	r0, [r0, #0]
 802295e:	f7ff bf7b 	b.w	8022858 <_strtoul_l.isra.0>
 8022962:	bf00      	nop
 8022964:	2000045c 	.word	0x2000045c

08022968 <__tzcalc_limits>:
 8022968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802296c:	4680      	mov	r8, r0
 802296e:	f001 fbb3 	bl	80240d8 <__gettzinfo>
 8022972:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8022976:	4598      	cmp	r8, r3
 8022978:	f340 8098 	ble.w	8022aac <__tzcalc_limits+0x144>
 802297c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8022980:	4443      	add	r3, r8
 8022982:	109b      	asrs	r3, r3, #2
 8022984:	f240 126d 	movw	r2, #365	; 0x16d
 8022988:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 802298c:	fb02 3505 	mla	r5, r2, r5, r3
 8022990:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8022994:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8022998:	fb93 f3f2 	sdiv	r3, r3, r2
 802299c:	441d      	add	r5, r3
 802299e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80229a2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80229a6:	fb98 f7f3 	sdiv	r7, r8, r3
 80229aa:	fb03 8717 	mls	r7, r3, r7, r8
 80229ae:	4442      	add	r2, r8
 80229b0:	fab7 fc87 	clz	ip, r7
 80229b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80229b8:	f008 0303 	and.w	r3, r8, #3
 80229bc:	4415      	add	r5, r2
 80229be:	2264      	movs	r2, #100	; 0x64
 80229c0:	f8c0 8004 	str.w	r8, [r0, #4]
 80229c4:	fb98 f6f2 	sdiv	r6, r8, r2
 80229c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80229cc:	fb02 8616 	mls	r6, r2, r6, r8
 80229d0:	4604      	mov	r4, r0
 80229d2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80229d6:	9300      	str	r3, [sp, #0]
 80229d8:	f04f 0e07 	mov.w	lr, #7
 80229dc:	7a22      	ldrb	r2, [r4, #8]
 80229de:	6963      	ldr	r3, [r4, #20]
 80229e0:	2a4a      	cmp	r2, #74	; 0x4a
 80229e2:	d128      	bne.n	8022a36 <__tzcalc_limits+0xce>
 80229e4:	9900      	ldr	r1, [sp, #0]
 80229e6:	18ea      	adds	r2, r5, r3
 80229e8:	b901      	cbnz	r1, 80229ec <__tzcalc_limits+0x84>
 80229ea:	b906      	cbnz	r6, 80229ee <__tzcalc_limits+0x86>
 80229ec:	bb0f      	cbnz	r7, 8022a32 <__tzcalc_limits+0xca>
 80229ee:	2b3b      	cmp	r3, #59	; 0x3b
 80229f0:	bfd4      	ite	le
 80229f2:	2300      	movle	r3, #0
 80229f4:	2301      	movgt	r3, #1
 80229f6:	4413      	add	r3, r2
 80229f8:	1e5a      	subs	r2, r3, #1
 80229fa:	69a3      	ldr	r3, [r4, #24]
 80229fc:	492c      	ldr	r1, [pc, #176]	; (8022ab0 <__tzcalc_limits+0x148>)
 80229fe:	fb01 3202 	mla	r2, r1, r2, r3
 8022a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8022a04:	4413      	add	r3, r2
 8022a06:	461a      	mov	r2, r3
 8022a08:	17db      	asrs	r3, r3, #31
 8022a0a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8022a0e:	3428      	adds	r4, #40	; 0x28
 8022a10:	45a3      	cmp	fp, r4
 8022a12:	d1e3      	bne.n	80229dc <__tzcalc_limits+0x74>
 8022a14:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8022a18:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8022a1c:	4294      	cmp	r4, r2
 8022a1e:	eb75 0303 	sbcs.w	r3, r5, r3
 8022a22:	bfb4      	ite	lt
 8022a24:	2301      	movlt	r3, #1
 8022a26:	2300      	movge	r3, #0
 8022a28:	6003      	str	r3, [r0, #0]
 8022a2a:	2001      	movs	r0, #1
 8022a2c:	b003      	add	sp, #12
 8022a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a32:	2300      	movs	r3, #0
 8022a34:	e7df      	b.n	80229f6 <__tzcalc_limits+0x8e>
 8022a36:	2a44      	cmp	r2, #68	; 0x44
 8022a38:	d101      	bne.n	8022a3e <__tzcalc_limits+0xd6>
 8022a3a:	18ea      	adds	r2, r5, r3
 8022a3c:	e7dd      	b.n	80229fa <__tzcalc_limits+0x92>
 8022a3e:	9a00      	ldr	r2, [sp, #0]
 8022a40:	bb72      	cbnz	r2, 8022aa0 <__tzcalc_limits+0x138>
 8022a42:	2e00      	cmp	r6, #0
 8022a44:	bf0c      	ite	eq
 8022a46:	46e0      	moveq	r8, ip
 8022a48:	f04f 0801 	movne.w	r8, #1
 8022a4c:	4919      	ldr	r1, [pc, #100]	; (8022ab4 <__tzcalc_limits+0x14c>)
 8022a4e:	68e2      	ldr	r2, [r4, #12]
 8022a50:	9201      	str	r2, [sp, #4]
 8022a52:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8022a56:	fb0a 1808 	mla	r8, sl, r8, r1
 8022a5a:	462a      	mov	r2, r5
 8022a5c:	f04f 0900 	mov.w	r9, #0
 8022a60:	f1a8 0804 	sub.w	r8, r8, #4
 8022a64:	9901      	ldr	r1, [sp, #4]
 8022a66:	f109 0901 	add.w	r9, r9, #1
 8022a6a:	4549      	cmp	r1, r9
 8022a6c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8022a70:	dc18      	bgt.n	8022aa4 <__tzcalc_limits+0x13c>
 8022a72:	f102 0804 	add.w	r8, r2, #4
 8022a76:	fb98 f9fe 	sdiv	r9, r8, lr
 8022a7a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8022a7e:	eba8 0909 	sub.w	r9, r8, r9
 8022a82:	ebb3 0909 	subs.w	r9, r3, r9
 8022a86:	6923      	ldr	r3, [r4, #16]
 8022a88:	f103 33ff 	add.w	r3, r3, #4294967295
 8022a8c:	bf48      	it	mi
 8022a8e:	f109 0907 	addmi.w	r9, r9, #7
 8022a92:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8022a96:	444b      	add	r3, r9
 8022a98:	4553      	cmp	r3, sl
 8022a9a:	da05      	bge.n	8022aa8 <__tzcalc_limits+0x140>
 8022a9c:	441a      	add	r2, r3
 8022a9e:	e7ac      	b.n	80229fa <__tzcalc_limits+0x92>
 8022aa0:	46e0      	mov	r8, ip
 8022aa2:	e7d3      	b.n	8022a4c <__tzcalc_limits+0xe4>
 8022aa4:	4452      	add	r2, sl
 8022aa6:	e7dd      	b.n	8022a64 <__tzcalc_limits+0xfc>
 8022aa8:	3b07      	subs	r3, #7
 8022aaa:	e7f5      	b.n	8022a98 <__tzcalc_limits+0x130>
 8022aac:	2000      	movs	r0, #0
 8022aae:	e7bd      	b.n	8022a2c <__tzcalc_limits+0xc4>
 8022ab0:	00015180 	.word	0x00015180
 8022ab4:	08041110 	.word	0x08041110

08022ab8 <__tz_lock>:
 8022ab8:	4801      	ldr	r0, [pc, #4]	; (8022ac0 <__tz_lock+0x8>)
 8022aba:	f001 bbca 	b.w	8024252 <__retarget_lock_acquire>
 8022abe:	bf00      	nop
 8022ac0:	200381d3 	.word	0x200381d3

08022ac4 <__tz_unlock>:
 8022ac4:	4801      	ldr	r0, [pc, #4]	; (8022acc <__tz_unlock+0x8>)
 8022ac6:	f001 bbc6 	b.w	8024256 <__retarget_lock_release>
 8022aca:	bf00      	nop
 8022acc:	200381d3 	.word	0x200381d3

08022ad0 <_tzset_unlocked>:
 8022ad0:	4b01      	ldr	r3, [pc, #4]	; (8022ad8 <_tzset_unlocked+0x8>)
 8022ad2:	6818      	ldr	r0, [r3, #0]
 8022ad4:	f000 b802 	b.w	8022adc <_tzset_unlocked_r>
 8022ad8:	2000045c 	.word	0x2000045c

08022adc <_tzset_unlocked_r>:
 8022adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ae0:	b08d      	sub	sp, #52	; 0x34
 8022ae2:	4607      	mov	r7, r0
 8022ae4:	f001 faf8 	bl	80240d8 <__gettzinfo>
 8022ae8:	49ae      	ldr	r1, [pc, #696]	; (8022da4 <_tzset_unlocked_r+0x2c8>)
 8022aea:	4eaf      	ldr	r6, [pc, #700]	; (8022da8 <_tzset_unlocked_r+0x2cc>)
 8022aec:	4605      	mov	r5, r0
 8022aee:	4638      	mov	r0, r7
 8022af0:	f001 faea 	bl	80240c8 <_getenv_r>
 8022af4:	4604      	mov	r4, r0
 8022af6:	b970      	cbnz	r0, 8022b16 <_tzset_unlocked_r+0x3a>
 8022af8:	4bac      	ldr	r3, [pc, #688]	; (8022dac <_tzset_unlocked_r+0x2d0>)
 8022afa:	4aad      	ldr	r2, [pc, #692]	; (8022db0 <_tzset_unlocked_r+0x2d4>)
 8022afc:	6018      	str	r0, [r3, #0]
 8022afe:	4bad      	ldr	r3, [pc, #692]	; (8022db4 <_tzset_unlocked_r+0x2d8>)
 8022b00:	6018      	str	r0, [r3, #0]
 8022b02:	4bad      	ldr	r3, [pc, #692]	; (8022db8 <_tzset_unlocked_r+0x2dc>)
 8022b04:	6830      	ldr	r0, [r6, #0]
 8022b06:	e9c3 2200 	strd	r2, r2, [r3]
 8022b0a:	f7fd febb 	bl	8020884 <free>
 8022b0e:	6034      	str	r4, [r6, #0]
 8022b10:	b00d      	add	sp, #52	; 0x34
 8022b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b16:	6831      	ldr	r1, [r6, #0]
 8022b18:	2900      	cmp	r1, #0
 8022b1a:	d15f      	bne.n	8022bdc <_tzset_unlocked_r+0x100>
 8022b1c:	6830      	ldr	r0, [r6, #0]
 8022b1e:	f7fd feb1 	bl	8020884 <free>
 8022b22:	4620      	mov	r0, r4
 8022b24:	f7dd fb96 	bl	8000254 <strlen>
 8022b28:	1c41      	adds	r1, r0, #1
 8022b2a:	4638      	mov	r0, r7
 8022b2c:	f7fe f9be 	bl	8020eac <_malloc_r>
 8022b30:	6030      	str	r0, [r6, #0]
 8022b32:	2800      	cmp	r0, #0
 8022b34:	d157      	bne.n	8022be6 <_tzset_unlocked_r+0x10a>
 8022b36:	7823      	ldrb	r3, [r4, #0]
 8022b38:	4aa0      	ldr	r2, [pc, #640]	; (8022dbc <_tzset_unlocked_r+0x2e0>)
 8022b3a:	49a1      	ldr	r1, [pc, #644]	; (8022dc0 <_tzset_unlocked_r+0x2e4>)
 8022b3c:	2b3a      	cmp	r3, #58	; 0x3a
 8022b3e:	bf08      	it	eq
 8022b40:	3401      	addeq	r4, #1
 8022b42:	ae0a      	add	r6, sp, #40	; 0x28
 8022b44:	4633      	mov	r3, r6
 8022b46:	4620      	mov	r0, r4
 8022b48:	f7fe ffe4 	bl	8021b14 <siscanf>
 8022b4c:	2800      	cmp	r0, #0
 8022b4e:	dddf      	ble.n	8022b10 <_tzset_unlocked_r+0x34>
 8022b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b52:	18e7      	adds	r7, r4, r3
 8022b54:	5ce3      	ldrb	r3, [r4, r3]
 8022b56:	2b2d      	cmp	r3, #45	; 0x2d
 8022b58:	d149      	bne.n	8022bee <_tzset_unlocked_r+0x112>
 8022b5a:	3701      	adds	r7, #1
 8022b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8022b60:	f10d 0a20 	add.w	sl, sp, #32
 8022b64:	f10d 0b1e 	add.w	fp, sp, #30
 8022b68:	f04f 0800 	mov.w	r8, #0
 8022b6c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8022b70:	4994      	ldr	r1, [pc, #592]	; (8022dc4 <_tzset_unlocked_r+0x2e8>)
 8022b72:	9603      	str	r6, [sp, #12]
 8022b74:	f8cd b000 	str.w	fp, [sp]
 8022b78:	4633      	mov	r3, r6
 8022b7a:	aa07      	add	r2, sp, #28
 8022b7c:	4638      	mov	r0, r7
 8022b7e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8022b82:	f8ad 8020 	strh.w	r8, [sp, #32]
 8022b86:	f7fe ffc5 	bl	8021b14 <siscanf>
 8022b8a:	4540      	cmp	r0, r8
 8022b8c:	ddc0      	ble.n	8022b10 <_tzset_unlocked_r+0x34>
 8022b8e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022b92:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022b96:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8022dd0 <_tzset_unlocked_r+0x2f4>
 8022b9a:	213c      	movs	r1, #60	; 0x3c
 8022b9c:	fb01 2203 	mla	r2, r1, r3, r2
 8022ba0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022ba4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022ba8:	fb01 2303 	mla	r3, r1, r3, r2
 8022bac:	435c      	muls	r4, r3
 8022bae:	62ac      	str	r4, [r5, #40]	; 0x28
 8022bb0:	4c81      	ldr	r4, [pc, #516]	; (8022db8 <_tzset_unlocked_r+0x2dc>)
 8022bb2:	4b82      	ldr	r3, [pc, #520]	; (8022dbc <_tzset_unlocked_r+0x2e0>)
 8022bb4:	6023      	str	r3, [r4, #0]
 8022bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bb8:	4981      	ldr	r1, [pc, #516]	; (8022dc0 <_tzset_unlocked_r+0x2e4>)
 8022bba:	441f      	add	r7, r3
 8022bbc:	464a      	mov	r2, r9
 8022bbe:	4633      	mov	r3, r6
 8022bc0:	4638      	mov	r0, r7
 8022bc2:	f7fe ffa7 	bl	8021b14 <siscanf>
 8022bc6:	4540      	cmp	r0, r8
 8022bc8:	dc16      	bgt.n	8022bf8 <_tzset_unlocked_r+0x11c>
 8022bca:	6823      	ldr	r3, [r4, #0]
 8022bcc:	6063      	str	r3, [r4, #4]
 8022bce:	4b77      	ldr	r3, [pc, #476]	; (8022dac <_tzset_unlocked_r+0x2d0>)
 8022bd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022bd2:	601a      	str	r2, [r3, #0]
 8022bd4:	4b77      	ldr	r3, [pc, #476]	; (8022db4 <_tzset_unlocked_r+0x2d8>)
 8022bd6:	f8c3 8000 	str.w	r8, [r3]
 8022bda:	e799      	b.n	8022b10 <_tzset_unlocked_r+0x34>
 8022bdc:	f7dd fb30 	bl	8000240 <strcmp>
 8022be0:	2800      	cmp	r0, #0
 8022be2:	d19b      	bne.n	8022b1c <_tzset_unlocked_r+0x40>
 8022be4:	e794      	b.n	8022b10 <_tzset_unlocked_r+0x34>
 8022be6:	4621      	mov	r1, r4
 8022be8:	f7ff f81b 	bl	8021c22 <strcpy>
 8022bec:	e7a3      	b.n	8022b36 <_tzset_unlocked_r+0x5a>
 8022bee:	2b2b      	cmp	r3, #43	; 0x2b
 8022bf0:	bf08      	it	eq
 8022bf2:	3701      	addeq	r7, #1
 8022bf4:	2401      	movs	r4, #1
 8022bf6:	e7b3      	b.n	8022b60 <_tzset_unlocked_r+0x84>
 8022bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022bfa:	f8c4 9004 	str.w	r9, [r4, #4]
 8022bfe:	18fc      	adds	r4, r7, r3
 8022c00:	5cfb      	ldrb	r3, [r7, r3]
 8022c02:	2b2d      	cmp	r3, #45	; 0x2d
 8022c04:	f040 808b 	bne.w	8022d1e <_tzset_unlocked_r+0x242>
 8022c08:	3401      	adds	r4, #1
 8022c0a:	f04f 37ff 	mov.w	r7, #4294967295
 8022c0e:	2300      	movs	r3, #0
 8022c10:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022c14:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022c18:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022c1c:	930a      	str	r3, [sp, #40]	; 0x28
 8022c1e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022c22:	e9cd b600 	strd	fp, r6, [sp]
 8022c26:	4967      	ldr	r1, [pc, #412]	; (8022dc4 <_tzset_unlocked_r+0x2e8>)
 8022c28:	4633      	mov	r3, r6
 8022c2a:	aa07      	add	r2, sp, #28
 8022c2c:	4620      	mov	r0, r4
 8022c2e:	f7fe ff71 	bl	8021b14 <siscanf>
 8022c32:	2800      	cmp	r0, #0
 8022c34:	dc78      	bgt.n	8022d28 <_tzset_unlocked_r+0x24c>
 8022c36:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8022c38:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8022c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022c3e:	652f      	str	r7, [r5, #80]	; 0x50
 8022c40:	441c      	add	r4, r3
 8022c42:	462f      	mov	r7, r5
 8022c44:	f04f 0900 	mov.w	r9, #0
 8022c48:	7823      	ldrb	r3, [r4, #0]
 8022c4a:	2b2c      	cmp	r3, #44	; 0x2c
 8022c4c:	bf08      	it	eq
 8022c4e:	3401      	addeq	r4, #1
 8022c50:	f894 8000 	ldrb.w	r8, [r4]
 8022c54:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8022c58:	d178      	bne.n	8022d4c <_tzset_unlocked_r+0x270>
 8022c5a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8022c5e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8022c62:	ab09      	add	r3, sp, #36	; 0x24
 8022c64:	9300      	str	r3, [sp, #0]
 8022c66:	4958      	ldr	r1, [pc, #352]	; (8022dc8 <_tzset_unlocked_r+0x2ec>)
 8022c68:	9603      	str	r6, [sp, #12]
 8022c6a:	4633      	mov	r3, r6
 8022c6c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8022c70:	4620      	mov	r0, r4
 8022c72:	f7fe ff4f 	bl	8021b14 <siscanf>
 8022c76:	2803      	cmp	r0, #3
 8022c78:	f47f af4a 	bne.w	8022b10 <_tzset_unlocked_r+0x34>
 8022c7c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8022c80:	1e4b      	subs	r3, r1, #1
 8022c82:	2b0b      	cmp	r3, #11
 8022c84:	f63f af44 	bhi.w	8022b10 <_tzset_unlocked_r+0x34>
 8022c88:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8022c8c:	1e53      	subs	r3, r2, #1
 8022c8e:	2b04      	cmp	r3, #4
 8022c90:	f63f af3e 	bhi.w	8022b10 <_tzset_unlocked_r+0x34>
 8022c94:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8022c98:	2b06      	cmp	r3, #6
 8022c9a:	f63f af39 	bhi.w	8022b10 <_tzset_unlocked_r+0x34>
 8022c9e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8022ca2:	f887 8008 	strb.w	r8, [r7, #8]
 8022ca6:	617b      	str	r3, [r7, #20]
 8022ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022caa:	eb04 0803 	add.w	r8, r4, r3
 8022cae:	2302      	movs	r3, #2
 8022cb0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022cba:	f8ad 3020 	strh.w	r3, [sp, #32]
 8022cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8022cc0:	f898 3000 	ldrb.w	r3, [r8]
 8022cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8022cc6:	d109      	bne.n	8022cdc <_tzset_unlocked_r+0x200>
 8022cc8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8022ccc:	e9cd b600 	strd	fp, r6, [sp]
 8022cd0:	493e      	ldr	r1, [pc, #248]	; (8022dcc <_tzset_unlocked_r+0x2f0>)
 8022cd2:	4633      	mov	r3, r6
 8022cd4:	aa07      	add	r2, sp, #28
 8022cd6:	4640      	mov	r0, r8
 8022cd8:	f7fe ff1c 	bl	8021b14 <siscanf>
 8022cdc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022ce0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022ce4:	213c      	movs	r1, #60	; 0x3c
 8022ce6:	fb01 2203 	mla	r2, r1, r3, r2
 8022cea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022cee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022cf2:	fb01 2303 	mla	r3, r1, r3, r2
 8022cf6:	61bb      	str	r3, [r7, #24]
 8022cf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8022cfa:	3728      	adds	r7, #40	; 0x28
 8022cfc:	4444      	add	r4, r8
 8022cfe:	f1b9 0f00 	cmp.w	r9, #0
 8022d02:	d020      	beq.n	8022d46 <_tzset_unlocked_r+0x26a>
 8022d04:	6868      	ldr	r0, [r5, #4]
 8022d06:	f7ff fe2f 	bl	8022968 <__tzcalc_limits>
 8022d0a:	4b28      	ldr	r3, [pc, #160]	; (8022dac <_tzset_unlocked_r+0x2d0>)
 8022d0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8022d0e:	601a      	str	r2, [r3, #0]
 8022d10:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8022d12:	1a9b      	subs	r3, r3, r2
 8022d14:	4a27      	ldr	r2, [pc, #156]	; (8022db4 <_tzset_unlocked_r+0x2d8>)
 8022d16:	bf18      	it	ne
 8022d18:	2301      	movne	r3, #1
 8022d1a:	6013      	str	r3, [r2, #0]
 8022d1c:	e6f8      	b.n	8022b10 <_tzset_unlocked_r+0x34>
 8022d1e:	2b2b      	cmp	r3, #43	; 0x2b
 8022d20:	bf08      	it	eq
 8022d22:	3401      	addeq	r4, #1
 8022d24:	2701      	movs	r7, #1
 8022d26:	e772      	b.n	8022c0e <_tzset_unlocked_r+0x132>
 8022d28:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8022d2c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d30:	213c      	movs	r1, #60	; 0x3c
 8022d32:	fb01 2203 	mla	r2, r1, r3, r2
 8022d36:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8022d3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8022d3e:	fb01 2303 	mla	r3, r1, r3, r2
 8022d42:	435f      	muls	r7, r3
 8022d44:	e77a      	b.n	8022c3c <_tzset_unlocked_r+0x160>
 8022d46:	f04f 0901 	mov.w	r9, #1
 8022d4a:	e77d      	b.n	8022c48 <_tzset_unlocked_r+0x16c>
 8022d4c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8022d50:	bf06      	itte	eq
 8022d52:	3401      	addeq	r4, #1
 8022d54:	4643      	moveq	r3, r8
 8022d56:	2344      	movne	r3, #68	; 0x44
 8022d58:	220a      	movs	r2, #10
 8022d5a:	a90b      	add	r1, sp, #44	; 0x2c
 8022d5c:	4620      	mov	r0, r4
 8022d5e:	9305      	str	r3, [sp, #20]
 8022d60:	f7ff fdf8 	bl	8022954 <strtoul>
 8022d64:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8022d68:	9b05      	ldr	r3, [sp, #20]
 8022d6a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8022d6e:	45a0      	cmp	r8, r4
 8022d70:	d114      	bne.n	8022d9c <_tzset_unlocked_r+0x2c0>
 8022d72:	234d      	movs	r3, #77	; 0x4d
 8022d74:	f1b9 0f00 	cmp.w	r9, #0
 8022d78:	d107      	bne.n	8022d8a <_tzset_unlocked_r+0x2ae>
 8022d7a:	722b      	strb	r3, [r5, #8]
 8022d7c:	2103      	movs	r1, #3
 8022d7e:	2302      	movs	r3, #2
 8022d80:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8022d84:	f8c5 9014 	str.w	r9, [r5, #20]
 8022d88:	e791      	b.n	8022cae <_tzset_unlocked_r+0x1d2>
 8022d8a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8022d8e:	220b      	movs	r2, #11
 8022d90:	2301      	movs	r3, #1
 8022d92:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8022d96:	2300      	movs	r3, #0
 8022d98:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022d9a:	e788      	b.n	8022cae <_tzset_unlocked_r+0x1d2>
 8022d9c:	b280      	uxth	r0, r0
 8022d9e:	723b      	strb	r3, [r7, #8]
 8022da0:	6178      	str	r0, [r7, #20]
 8022da2:	e784      	b.n	8022cae <_tzset_unlocked_r+0x1d2>
 8022da4:	08041484 	.word	0x08041484
 8022da8:	20022d40 	.word	0x20022d40
 8022dac:	20022d48 	.word	0x20022d48
 8022db0:	08041487 	.word	0x08041487
 8022db4:	20022d44 	.word	0x20022d44
 8022db8:	200004c0 	.word	0x200004c0
 8022dbc:	20022d33 	.word	0x20022d33
 8022dc0:	0804148b 	.word	0x0804148b
 8022dc4:	080414ae 	.word	0x080414ae
 8022dc8:	0804149a 	.word	0x0804149a
 8022dcc:	080414ad 	.word	0x080414ad
 8022dd0:	20022d28 	.word	0x20022d28

08022dd4 <__swbuf_r>:
 8022dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dd6:	460e      	mov	r6, r1
 8022dd8:	4614      	mov	r4, r2
 8022dda:	4605      	mov	r5, r0
 8022ddc:	b118      	cbz	r0, 8022de6 <__swbuf_r+0x12>
 8022dde:	6983      	ldr	r3, [r0, #24]
 8022de0:	b90b      	cbnz	r3, 8022de6 <__swbuf_r+0x12>
 8022de2:	f001 f887 	bl	8023ef4 <__sinit>
 8022de6:	4b21      	ldr	r3, [pc, #132]	; (8022e6c <__swbuf_r+0x98>)
 8022de8:	429c      	cmp	r4, r3
 8022dea:	d12b      	bne.n	8022e44 <__swbuf_r+0x70>
 8022dec:	686c      	ldr	r4, [r5, #4]
 8022dee:	69a3      	ldr	r3, [r4, #24]
 8022df0:	60a3      	str	r3, [r4, #8]
 8022df2:	89a3      	ldrh	r3, [r4, #12]
 8022df4:	071a      	lsls	r2, r3, #28
 8022df6:	d52f      	bpl.n	8022e58 <__swbuf_r+0x84>
 8022df8:	6923      	ldr	r3, [r4, #16]
 8022dfa:	b36b      	cbz	r3, 8022e58 <__swbuf_r+0x84>
 8022dfc:	6923      	ldr	r3, [r4, #16]
 8022dfe:	6820      	ldr	r0, [r4, #0]
 8022e00:	1ac0      	subs	r0, r0, r3
 8022e02:	6963      	ldr	r3, [r4, #20]
 8022e04:	b2f6      	uxtb	r6, r6
 8022e06:	4283      	cmp	r3, r0
 8022e08:	4637      	mov	r7, r6
 8022e0a:	dc04      	bgt.n	8022e16 <__swbuf_r+0x42>
 8022e0c:	4621      	mov	r1, r4
 8022e0e:	4628      	mov	r0, r5
 8022e10:	f000 ffdc 	bl	8023dcc <_fflush_r>
 8022e14:	bb30      	cbnz	r0, 8022e64 <__swbuf_r+0x90>
 8022e16:	68a3      	ldr	r3, [r4, #8]
 8022e18:	3b01      	subs	r3, #1
 8022e1a:	60a3      	str	r3, [r4, #8]
 8022e1c:	6823      	ldr	r3, [r4, #0]
 8022e1e:	1c5a      	adds	r2, r3, #1
 8022e20:	6022      	str	r2, [r4, #0]
 8022e22:	701e      	strb	r6, [r3, #0]
 8022e24:	6963      	ldr	r3, [r4, #20]
 8022e26:	3001      	adds	r0, #1
 8022e28:	4283      	cmp	r3, r0
 8022e2a:	d004      	beq.n	8022e36 <__swbuf_r+0x62>
 8022e2c:	89a3      	ldrh	r3, [r4, #12]
 8022e2e:	07db      	lsls	r3, r3, #31
 8022e30:	d506      	bpl.n	8022e40 <__swbuf_r+0x6c>
 8022e32:	2e0a      	cmp	r6, #10
 8022e34:	d104      	bne.n	8022e40 <__swbuf_r+0x6c>
 8022e36:	4621      	mov	r1, r4
 8022e38:	4628      	mov	r0, r5
 8022e3a:	f000 ffc7 	bl	8023dcc <_fflush_r>
 8022e3e:	b988      	cbnz	r0, 8022e64 <__swbuf_r+0x90>
 8022e40:	4638      	mov	r0, r7
 8022e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022e44:	4b0a      	ldr	r3, [pc, #40]	; (8022e70 <__swbuf_r+0x9c>)
 8022e46:	429c      	cmp	r4, r3
 8022e48:	d101      	bne.n	8022e4e <__swbuf_r+0x7a>
 8022e4a:	68ac      	ldr	r4, [r5, #8]
 8022e4c:	e7cf      	b.n	8022dee <__swbuf_r+0x1a>
 8022e4e:	4b09      	ldr	r3, [pc, #36]	; (8022e74 <__swbuf_r+0xa0>)
 8022e50:	429c      	cmp	r4, r3
 8022e52:	bf08      	it	eq
 8022e54:	68ec      	ldreq	r4, [r5, #12]
 8022e56:	e7ca      	b.n	8022dee <__swbuf_r+0x1a>
 8022e58:	4621      	mov	r1, r4
 8022e5a:	4628      	mov	r0, r5
 8022e5c:	f000 f81e 	bl	8022e9c <__swsetup_r>
 8022e60:	2800      	cmp	r0, #0
 8022e62:	d0cb      	beq.n	8022dfc <__swbuf_r+0x28>
 8022e64:	f04f 37ff 	mov.w	r7, #4294967295
 8022e68:	e7ea      	b.n	8022e40 <__swbuf_r+0x6c>
 8022e6a:	bf00      	nop
 8022e6c:	08041654 	.word	0x08041654
 8022e70:	08041674 	.word	0x08041674
 8022e74:	08041634 	.word	0x08041634

08022e78 <_write_r>:
 8022e78:	b538      	push	{r3, r4, r5, lr}
 8022e7a:	4d07      	ldr	r5, [pc, #28]	; (8022e98 <_write_r+0x20>)
 8022e7c:	4604      	mov	r4, r0
 8022e7e:	4608      	mov	r0, r1
 8022e80:	4611      	mov	r1, r2
 8022e82:	2200      	movs	r2, #0
 8022e84:	602a      	str	r2, [r5, #0]
 8022e86:	461a      	mov	r2, r3
 8022e88:	f7df fd6a 	bl	8002960 <_write>
 8022e8c:	1c43      	adds	r3, r0, #1
 8022e8e:	d102      	bne.n	8022e96 <_write_r+0x1e>
 8022e90:	682b      	ldr	r3, [r5, #0]
 8022e92:	b103      	cbz	r3, 8022e96 <_write_r+0x1e>
 8022e94:	6023      	str	r3, [r4, #0]
 8022e96:	bd38      	pop	{r3, r4, r5, pc}
 8022e98:	200368f0 	.word	0x200368f0

08022e9c <__swsetup_r>:
 8022e9c:	4b32      	ldr	r3, [pc, #200]	; (8022f68 <__swsetup_r+0xcc>)
 8022e9e:	b570      	push	{r4, r5, r6, lr}
 8022ea0:	681d      	ldr	r5, [r3, #0]
 8022ea2:	4606      	mov	r6, r0
 8022ea4:	460c      	mov	r4, r1
 8022ea6:	b125      	cbz	r5, 8022eb2 <__swsetup_r+0x16>
 8022ea8:	69ab      	ldr	r3, [r5, #24]
 8022eaa:	b913      	cbnz	r3, 8022eb2 <__swsetup_r+0x16>
 8022eac:	4628      	mov	r0, r5
 8022eae:	f001 f821 	bl	8023ef4 <__sinit>
 8022eb2:	4b2e      	ldr	r3, [pc, #184]	; (8022f6c <__swsetup_r+0xd0>)
 8022eb4:	429c      	cmp	r4, r3
 8022eb6:	d10f      	bne.n	8022ed8 <__swsetup_r+0x3c>
 8022eb8:	686c      	ldr	r4, [r5, #4]
 8022eba:	89a3      	ldrh	r3, [r4, #12]
 8022ebc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022ec0:	0719      	lsls	r1, r3, #28
 8022ec2:	d42c      	bmi.n	8022f1e <__swsetup_r+0x82>
 8022ec4:	06dd      	lsls	r5, r3, #27
 8022ec6:	d411      	bmi.n	8022eec <__swsetup_r+0x50>
 8022ec8:	2309      	movs	r3, #9
 8022eca:	6033      	str	r3, [r6, #0]
 8022ecc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022ed0:	81a3      	strh	r3, [r4, #12]
 8022ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed6:	e03e      	b.n	8022f56 <__swsetup_r+0xba>
 8022ed8:	4b25      	ldr	r3, [pc, #148]	; (8022f70 <__swsetup_r+0xd4>)
 8022eda:	429c      	cmp	r4, r3
 8022edc:	d101      	bne.n	8022ee2 <__swsetup_r+0x46>
 8022ede:	68ac      	ldr	r4, [r5, #8]
 8022ee0:	e7eb      	b.n	8022eba <__swsetup_r+0x1e>
 8022ee2:	4b24      	ldr	r3, [pc, #144]	; (8022f74 <__swsetup_r+0xd8>)
 8022ee4:	429c      	cmp	r4, r3
 8022ee6:	bf08      	it	eq
 8022ee8:	68ec      	ldreq	r4, [r5, #12]
 8022eea:	e7e6      	b.n	8022eba <__swsetup_r+0x1e>
 8022eec:	0758      	lsls	r0, r3, #29
 8022eee:	d512      	bpl.n	8022f16 <__swsetup_r+0x7a>
 8022ef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ef2:	b141      	cbz	r1, 8022f06 <__swsetup_r+0x6a>
 8022ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ef8:	4299      	cmp	r1, r3
 8022efa:	d002      	beq.n	8022f02 <__swsetup_r+0x66>
 8022efc:	4630      	mov	r0, r6
 8022efe:	f7fd ff85 	bl	8020e0c <_free_r>
 8022f02:	2300      	movs	r3, #0
 8022f04:	6363      	str	r3, [r4, #52]	; 0x34
 8022f06:	89a3      	ldrh	r3, [r4, #12]
 8022f08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022f0c:	81a3      	strh	r3, [r4, #12]
 8022f0e:	2300      	movs	r3, #0
 8022f10:	6063      	str	r3, [r4, #4]
 8022f12:	6923      	ldr	r3, [r4, #16]
 8022f14:	6023      	str	r3, [r4, #0]
 8022f16:	89a3      	ldrh	r3, [r4, #12]
 8022f18:	f043 0308 	orr.w	r3, r3, #8
 8022f1c:	81a3      	strh	r3, [r4, #12]
 8022f1e:	6923      	ldr	r3, [r4, #16]
 8022f20:	b94b      	cbnz	r3, 8022f36 <__swsetup_r+0x9a>
 8022f22:	89a3      	ldrh	r3, [r4, #12]
 8022f24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022f2c:	d003      	beq.n	8022f36 <__swsetup_r+0x9a>
 8022f2e:	4621      	mov	r1, r4
 8022f30:	4630      	mov	r0, r6
 8022f32:	f001 f9c9 	bl	80242c8 <__smakebuf_r>
 8022f36:	89a0      	ldrh	r0, [r4, #12]
 8022f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022f3c:	f010 0301 	ands.w	r3, r0, #1
 8022f40:	d00a      	beq.n	8022f58 <__swsetup_r+0xbc>
 8022f42:	2300      	movs	r3, #0
 8022f44:	60a3      	str	r3, [r4, #8]
 8022f46:	6963      	ldr	r3, [r4, #20]
 8022f48:	425b      	negs	r3, r3
 8022f4a:	61a3      	str	r3, [r4, #24]
 8022f4c:	6923      	ldr	r3, [r4, #16]
 8022f4e:	b943      	cbnz	r3, 8022f62 <__swsetup_r+0xc6>
 8022f50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022f54:	d1ba      	bne.n	8022ecc <__swsetup_r+0x30>
 8022f56:	bd70      	pop	{r4, r5, r6, pc}
 8022f58:	0781      	lsls	r1, r0, #30
 8022f5a:	bf58      	it	pl
 8022f5c:	6963      	ldrpl	r3, [r4, #20]
 8022f5e:	60a3      	str	r3, [r4, #8]
 8022f60:	e7f4      	b.n	8022f4c <__swsetup_r+0xb0>
 8022f62:	2000      	movs	r0, #0
 8022f64:	e7f7      	b.n	8022f56 <__swsetup_r+0xba>
 8022f66:	bf00      	nop
 8022f68:	2000045c 	.word	0x2000045c
 8022f6c:	08041654 	.word	0x08041654
 8022f70:	08041674 	.word	0x08041674
 8022f74:	08041634 	.word	0x08041634

08022f78 <abs>:
 8022f78:	2800      	cmp	r0, #0
 8022f7a:	bfb8      	it	lt
 8022f7c:	4240      	neglt	r0, r0
 8022f7e:	4770      	bx	lr

08022f80 <asctime>:
 8022f80:	4b0d      	ldr	r3, [pc, #52]	; (8022fb8 <asctime+0x38>)
 8022f82:	b570      	push	{r4, r5, r6, lr}
 8022f84:	681d      	ldr	r5, [r3, #0]
 8022f86:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8022f88:	4604      	mov	r4, r0
 8022f8a:	b976      	cbnz	r6, 8022faa <asctime+0x2a>
 8022f8c:	201a      	movs	r0, #26
 8022f8e:	f7fd fc71 	bl	8020874 <malloc>
 8022f92:	4602      	mov	r2, r0
 8022f94:	6428      	str	r0, [r5, #64]	; 0x40
 8022f96:	b920      	cbnz	r0, 8022fa2 <asctime+0x22>
 8022f98:	4b08      	ldr	r3, [pc, #32]	; (8022fbc <asctime+0x3c>)
 8022f9a:	4809      	ldr	r0, [pc, #36]	; (8022fc0 <asctime+0x40>)
 8022f9c:	2137      	movs	r1, #55	; 0x37
 8022f9e:	f000 f837 	bl	8023010 <__assert_func>
 8022fa2:	221a      	movs	r2, #26
 8022fa4:	4631      	mov	r1, r6
 8022fa6:	f7fd fcab 	bl	8020900 <memset>
 8022faa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8022fac:	4620      	mov	r0, r4
 8022fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022fb2:	f000 b807 	b.w	8022fc4 <asctime_r>
 8022fb6:	bf00      	nop
 8022fb8:	2000045c 	.word	0x2000045c
 8022fbc:	08041038 	.word	0x08041038
 8022fc0:	080414c0 	.word	0x080414c0

08022fc4 <asctime_r>:
 8022fc4:	b510      	push	{r4, lr}
 8022fc6:	460c      	mov	r4, r1
 8022fc8:	6941      	ldr	r1, [r0, #20]
 8022fca:	6903      	ldr	r3, [r0, #16]
 8022fcc:	6982      	ldr	r2, [r0, #24]
 8022fce:	b086      	sub	sp, #24
 8022fd0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8022fd4:	9104      	str	r1, [sp, #16]
 8022fd6:	6801      	ldr	r1, [r0, #0]
 8022fd8:	9103      	str	r1, [sp, #12]
 8022fda:	6841      	ldr	r1, [r0, #4]
 8022fdc:	9102      	str	r1, [sp, #8]
 8022fde:	6881      	ldr	r1, [r0, #8]
 8022fe0:	9101      	str	r1, [sp, #4]
 8022fe2:	68c1      	ldr	r1, [r0, #12]
 8022fe4:	9100      	str	r1, [sp, #0]
 8022fe6:	4907      	ldr	r1, [pc, #28]	; (8023004 <asctime_r+0x40>)
 8022fe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022fec:	440b      	add	r3, r1
 8022fee:	4906      	ldr	r1, [pc, #24]	; (8023008 <asctime_r+0x44>)
 8022ff0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ff4:	440a      	add	r2, r1
 8022ff6:	4620      	mov	r0, r4
 8022ff8:	4904      	ldr	r1, [pc, #16]	; (802300c <asctime_r+0x48>)
 8022ffa:	f7fe fd6b 	bl	8021ad4 <siprintf>
 8022ffe:	4620      	mov	r0, r4
 8023000:	b006      	add	sp, #24
 8023002:	bd10      	pop	{r4, pc}
 8023004:	08041555 	.word	0x08041555
 8023008:	08041540 	.word	0x08041540
 802300c:	08041520 	.word	0x08041520

08023010 <__assert_func>:
 8023010:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023012:	4614      	mov	r4, r2
 8023014:	461a      	mov	r2, r3
 8023016:	4b09      	ldr	r3, [pc, #36]	; (802303c <__assert_func+0x2c>)
 8023018:	681b      	ldr	r3, [r3, #0]
 802301a:	4605      	mov	r5, r0
 802301c:	68d8      	ldr	r0, [r3, #12]
 802301e:	b14c      	cbz	r4, 8023034 <__assert_func+0x24>
 8023020:	4b07      	ldr	r3, [pc, #28]	; (8023040 <__assert_func+0x30>)
 8023022:	9100      	str	r1, [sp, #0]
 8023024:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023028:	4906      	ldr	r1, [pc, #24]	; (8023044 <__assert_func+0x34>)
 802302a:	462b      	mov	r3, r5
 802302c:	f000 ffe0 	bl	8023ff0 <fiprintf>
 8023030:	f002 fc09 	bl	8025846 <abort>
 8023034:	4b04      	ldr	r3, [pc, #16]	; (8023048 <__assert_func+0x38>)
 8023036:	461c      	mov	r4, r3
 8023038:	e7f3      	b.n	8023022 <__assert_func+0x12>
 802303a:	bf00      	nop
 802303c:	2000045c 	.word	0x2000045c
 8023040:	08041579 	.word	0x08041579
 8023044:	08041586 	.word	0x08041586
 8023048:	0804153f 	.word	0x0804153f

0802304c <_close_r>:
 802304c:	b538      	push	{r3, r4, r5, lr}
 802304e:	4d06      	ldr	r5, [pc, #24]	; (8023068 <_close_r+0x1c>)
 8023050:	2300      	movs	r3, #0
 8023052:	4604      	mov	r4, r0
 8023054:	4608      	mov	r0, r1
 8023056:	602b      	str	r3, [r5, #0]
 8023058:	f7e2 fb30 	bl	80056bc <_close>
 802305c:	1c43      	adds	r3, r0, #1
 802305e:	d102      	bne.n	8023066 <_close_r+0x1a>
 8023060:	682b      	ldr	r3, [r5, #0]
 8023062:	b103      	cbz	r3, 8023066 <_close_r+0x1a>
 8023064:	6023      	str	r3, [r4, #0]
 8023066:	bd38      	pop	{r3, r4, r5, pc}
 8023068:	200368f0 	.word	0x200368f0

0802306c <div>:
 802306c:	2900      	cmp	r1, #0
 802306e:	b510      	push	{r4, lr}
 8023070:	fb91 f4f2 	sdiv	r4, r1, r2
 8023074:	fb02 1314 	mls	r3, r2, r4, r1
 8023078:	db06      	blt.n	8023088 <div+0x1c>
 802307a:	2b00      	cmp	r3, #0
 802307c:	da01      	bge.n	8023082 <div+0x16>
 802307e:	3401      	adds	r4, #1
 8023080:	1a9b      	subs	r3, r3, r2
 8023082:	e9c0 4300 	strd	r4, r3, [r0]
 8023086:	bd10      	pop	{r4, pc}
 8023088:	2b00      	cmp	r3, #0
 802308a:	bfc4      	itt	gt
 802308c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8023090:	189b      	addgt	r3, r3, r2
 8023092:	e7f6      	b.n	8023082 <div+0x16>

08023094 <quorem>:
 8023094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023098:	6903      	ldr	r3, [r0, #16]
 802309a:	690c      	ldr	r4, [r1, #16]
 802309c:	42a3      	cmp	r3, r4
 802309e:	4607      	mov	r7, r0
 80230a0:	f2c0 8081 	blt.w	80231a6 <quorem+0x112>
 80230a4:	3c01      	subs	r4, #1
 80230a6:	f101 0814 	add.w	r8, r1, #20
 80230aa:	f100 0514 	add.w	r5, r0, #20
 80230ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80230b2:	9301      	str	r3, [sp, #4]
 80230b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80230b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80230bc:	3301      	adds	r3, #1
 80230be:	429a      	cmp	r2, r3
 80230c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80230c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80230c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80230cc:	d331      	bcc.n	8023132 <quorem+0x9e>
 80230ce:	f04f 0e00 	mov.w	lr, #0
 80230d2:	4640      	mov	r0, r8
 80230d4:	46ac      	mov	ip, r5
 80230d6:	46f2      	mov	sl, lr
 80230d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80230dc:	b293      	uxth	r3, r2
 80230de:	fb06 e303 	mla	r3, r6, r3, lr
 80230e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80230e6:	b29b      	uxth	r3, r3
 80230e8:	ebaa 0303 	sub.w	r3, sl, r3
 80230ec:	0c12      	lsrs	r2, r2, #16
 80230ee:	f8dc a000 	ldr.w	sl, [ip]
 80230f2:	fb06 e202 	mla	r2, r6, r2, lr
 80230f6:	fa13 f38a 	uxtah	r3, r3, sl
 80230fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80230fe:	fa1f fa82 	uxth.w	sl, r2
 8023102:	f8dc 2000 	ldr.w	r2, [ip]
 8023106:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 802310a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802310e:	b29b      	uxth	r3, r3
 8023110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023114:	4581      	cmp	r9, r0
 8023116:	f84c 3b04 	str.w	r3, [ip], #4
 802311a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802311e:	d2db      	bcs.n	80230d8 <quorem+0x44>
 8023120:	f855 300b 	ldr.w	r3, [r5, fp]
 8023124:	b92b      	cbnz	r3, 8023132 <quorem+0x9e>
 8023126:	9b01      	ldr	r3, [sp, #4]
 8023128:	3b04      	subs	r3, #4
 802312a:	429d      	cmp	r5, r3
 802312c:	461a      	mov	r2, r3
 802312e:	d32e      	bcc.n	802318e <quorem+0xfa>
 8023130:	613c      	str	r4, [r7, #16]
 8023132:	4638      	mov	r0, r7
 8023134:	f001 fba4 	bl	8024880 <__mcmp>
 8023138:	2800      	cmp	r0, #0
 802313a:	db24      	blt.n	8023186 <quorem+0xf2>
 802313c:	3601      	adds	r6, #1
 802313e:	4628      	mov	r0, r5
 8023140:	f04f 0c00 	mov.w	ip, #0
 8023144:	f858 2b04 	ldr.w	r2, [r8], #4
 8023148:	f8d0 e000 	ldr.w	lr, [r0]
 802314c:	b293      	uxth	r3, r2
 802314e:	ebac 0303 	sub.w	r3, ip, r3
 8023152:	0c12      	lsrs	r2, r2, #16
 8023154:	fa13 f38e 	uxtah	r3, r3, lr
 8023158:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 802315c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023160:	b29b      	uxth	r3, r3
 8023162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8023166:	45c1      	cmp	r9, r8
 8023168:	f840 3b04 	str.w	r3, [r0], #4
 802316c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8023170:	d2e8      	bcs.n	8023144 <quorem+0xb0>
 8023172:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023176:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802317a:	b922      	cbnz	r2, 8023186 <quorem+0xf2>
 802317c:	3b04      	subs	r3, #4
 802317e:	429d      	cmp	r5, r3
 8023180:	461a      	mov	r2, r3
 8023182:	d30a      	bcc.n	802319a <quorem+0x106>
 8023184:	613c      	str	r4, [r7, #16]
 8023186:	4630      	mov	r0, r6
 8023188:	b003      	add	sp, #12
 802318a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802318e:	6812      	ldr	r2, [r2, #0]
 8023190:	3b04      	subs	r3, #4
 8023192:	2a00      	cmp	r2, #0
 8023194:	d1cc      	bne.n	8023130 <quorem+0x9c>
 8023196:	3c01      	subs	r4, #1
 8023198:	e7c7      	b.n	802312a <quorem+0x96>
 802319a:	6812      	ldr	r2, [r2, #0]
 802319c:	3b04      	subs	r3, #4
 802319e:	2a00      	cmp	r2, #0
 80231a0:	d1f0      	bne.n	8023184 <quorem+0xf0>
 80231a2:	3c01      	subs	r4, #1
 80231a4:	e7eb      	b.n	802317e <quorem+0xea>
 80231a6:	2000      	movs	r0, #0
 80231a8:	e7ee      	b.n	8023188 <quorem+0xf4>
 80231aa:	0000      	movs	r0, r0
 80231ac:	0000      	movs	r0, r0
	...

080231b0 <_dtoa_r>:
 80231b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231b4:	ec59 8b10 	vmov	r8, r9, d0
 80231b8:	b095      	sub	sp, #84	; 0x54
 80231ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80231bc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80231be:	9107      	str	r1, [sp, #28]
 80231c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80231c4:	4606      	mov	r6, r0
 80231c6:	9209      	str	r2, [sp, #36]	; 0x24
 80231c8:	9310      	str	r3, [sp, #64]	; 0x40
 80231ca:	b975      	cbnz	r5, 80231ea <_dtoa_r+0x3a>
 80231cc:	2010      	movs	r0, #16
 80231ce:	f7fd fb51 	bl	8020874 <malloc>
 80231d2:	4602      	mov	r2, r0
 80231d4:	6270      	str	r0, [r6, #36]	; 0x24
 80231d6:	b920      	cbnz	r0, 80231e2 <_dtoa_r+0x32>
 80231d8:	4bab      	ldr	r3, [pc, #684]	; (8023488 <_dtoa_r+0x2d8>)
 80231da:	21ea      	movs	r1, #234	; 0xea
 80231dc:	48ab      	ldr	r0, [pc, #684]	; (802348c <_dtoa_r+0x2dc>)
 80231de:	f7ff ff17 	bl	8023010 <__assert_func>
 80231e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80231e6:	6005      	str	r5, [r0, #0]
 80231e8:	60c5      	str	r5, [r0, #12]
 80231ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80231ec:	6819      	ldr	r1, [r3, #0]
 80231ee:	b151      	cbz	r1, 8023206 <_dtoa_r+0x56>
 80231f0:	685a      	ldr	r2, [r3, #4]
 80231f2:	604a      	str	r2, [r1, #4]
 80231f4:	2301      	movs	r3, #1
 80231f6:	4093      	lsls	r3, r2
 80231f8:	608b      	str	r3, [r1, #8]
 80231fa:	4630      	mov	r0, r6
 80231fc:	f001 f902 	bl	8024404 <_Bfree>
 8023200:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023202:	2200      	movs	r2, #0
 8023204:	601a      	str	r2, [r3, #0]
 8023206:	f1b9 0300 	subs.w	r3, r9, #0
 802320a:	bfbb      	ittet	lt
 802320c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023210:	9303      	strlt	r3, [sp, #12]
 8023212:	2300      	movge	r3, #0
 8023214:	2201      	movlt	r2, #1
 8023216:	bfac      	ite	ge
 8023218:	6023      	strge	r3, [r4, #0]
 802321a:	6022      	strlt	r2, [r4, #0]
 802321c:	4b9c      	ldr	r3, [pc, #624]	; (8023490 <_dtoa_r+0x2e0>)
 802321e:	9c03      	ldr	r4, [sp, #12]
 8023220:	43a3      	bics	r3, r4
 8023222:	d11a      	bne.n	802325a <_dtoa_r+0xaa>
 8023224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023226:	f242 730f 	movw	r3, #9999	; 0x270f
 802322a:	6013      	str	r3, [r2, #0]
 802322c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8023230:	ea53 0308 	orrs.w	r3, r3, r8
 8023234:	f000 8512 	beq.w	8023c5c <_dtoa_r+0xaac>
 8023238:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802323a:	b953      	cbnz	r3, 8023252 <_dtoa_r+0xa2>
 802323c:	4b95      	ldr	r3, [pc, #596]	; (8023494 <_dtoa_r+0x2e4>)
 802323e:	e01f      	b.n	8023280 <_dtoa_r+0xd0>
 8023240:	4b95      	ldr	r3, [pc, #596]	; (8023498 <_dtoa_r+0x2e8>)
 8023242:	9300      	str	r3, [sp, #0]
 8023244:	3308      	adds	r3, #8
 8023246:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8023248:	6013      	str	r3, [r2, #0]
 802324a:	9800      	ldr	r0, [sp, #0]
 802324c:	b015      	add	sp, #84	; 0x54
 802324e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023252:	4b90      	ldr	r3, [pc, #576]	; (8023494 <_dtoa_r+0x2e4>)
 8023254:	9300      	str	r3, [sp, #0]
 8023256:	3303      	adds	r3, #3
 8023258:	e7f5      	b.n	8023246 <_dtoa_r+0x96>
 802325a:	ed9d 7b02 	vldr	d7, [sp, #8]
 802325e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023266:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 802326a:	d10b      	bne.n	8023284 <_dtoa_r+0xd4>
 802326c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802326e:	2301      	movs	r3, #1
 8023270:	6013      	str	r3, [r2, #0]
 8023272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023274:	2b00      	cmp	r3, #0
 8023276:	f000 84ee 	beq.w	8023c56 <_dtoa_r+0xaa6>
 802327a:	4888      	ldr	r0, [pc, #544]	; (802349c <_dtoa_r+0x2ec>)
 802327c:	6018      	str	r0, [r3, #0]
 802327e:	1e43      	subs	r3, r0, #1
 8023280:	9300      	str	r3, [sp, #0]
 8023282:	e7e2      	b.n	802324a <_dtoa_r+0x9a>
 8023284:	a913      	add	r1, sp, #76	; 0x4c
 8023286:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 802328a:	aa12      	add	r2, sp, #72	; 0x48
 802328c:	4630      	mov	r0, r6
 802328e:	f001 fb9b 	bl	80249c8 <__d2b>
 8023292:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8023296:	4605      	mov	r5, r0
 8023298:	9812      	ldr	r0, [sp, #72]	; 0x48
 802329a:	2900      	cmp	r1, #0
 802329c:	d047      	beq.n	802332e <_dtoa_r+0x17e>
 802329e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80232a0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80232a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80232a8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80232ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80232b0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80232b4:	2400      	movs	r4, #0
 80232b6:	ec43 2b16 	vmov	d6, r2, r3
 80232ba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80232be:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8023470 <_dtoa_r+0x2c0>
 80232c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80232c6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8023478 <_dtoa_r+0x2c8>
 80232ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80232ce:	eeb0 7b46 	vmov.f64	d7, d6
 80232d2:	ee06 1a90 	vmov	s13, r1
 80232d6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80232da:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8023480 <_dtoa_r+0x2d0>
 80232de:	eea5 7b06 	vfma.f64	d7, d5, d6
 80232e2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80232e6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80232ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80232ee:	ee16 ba90 	vmov	fp, s13
 80232f2:	9411      	str	r4, [sp, #68]	; 0x44
 80232f4:	d508      	bpl.n	8023308 <_dtoa_r+0x158>
 80232f6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80232fa:	eeb4 6b47 	vcmp.f64	d6, d7
 80232fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023302:	bf18      	it	ne
 8023304:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8023308:	f1bb 0f16 	cmp.w	fp, #22
 802330c:	d832      	bhi.n	8023374 <_dtoa_r+0x1c4>
 802330e:	4b64      	ldr	r3, [pc, #400]	; (80234a0 <_dtoa_r+0x2f0>)
 8023310:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023314:	ed93 7b00 	vldr	d7, [r3]
 8023318:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 802331c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023324:	d501      	bpl.n	802332a <_dtoa_r+0x17a>
 8023326:	f10b 3bff 	add.w	fp, fp, #4294967295
 802332a:	2300      	movs	r3, #0
 802332c:	e023      	b.n	8023376 <_dtoa_r+0x1c6>
 802332e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8023330:	4401      	add	r1, r0
 8023332:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8023336:	2b20      	cmp	r3, #32
 8023338:	bfc3      	ittte	gt
 802333a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802333e:	fa04 f303 	lslgt.w	r3, r4, r3
 8023342:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8023346:	f1c3 0320 	rsble	r3, r3, #32
 802334a:	bfc6      	itte	gt
 802334c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8023350:	ea43 0308 	orrgt.w	r3, r3, r8
 8023354:	fa08 f303 	lslle.w	r3, r8, r3
 8023358:	ee07 3a90 	vmov	s15, r3
 802335c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8023360:	3901      	subs	r1, #1
 8023362:	ed8d 7b00 	vstr	d7, [sp]
 8023366:	9c01      	ldr	r4, [sp, #4]
 8023368:	e9dd 2300 	ldrd	r2, r3, [sp]
 802336c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8023370:	2401      	movs	r4, #1
 8023372:	e7a0      	b.n	80232b6 <_dtoa_r+0x106>
 8023374:	2301      	movs	r3, #1
 8023376:	930f      	str	r3, [sp, #60]	; 0x3c
 8023378:	1a43      	subs	r3, r0, r1
 802337a:	1e5a      	subs	r2, r3, #1
 802337c:	bf45      	ittet	mi
 802337e:	f1c3 0301 	rsbmi	r3, r3, #1
 8023382:	9305      	strmi	r3, [sp, #20]
 8023384:	2300      	movpl	r3, #0
 8023386:	2300      	movmi	r3, #0
 8023388:	9206      	str	r2, [sp, #24]
 802338a:	bf54      	ite	pl
 802338c:	9305      	strpl	r3, [sp, #20]
 802338e:	9306      	strmi	r3, [sp, #24]
 8023390:	f1bb 0f00 	cmp.w	fp, #0
 8023394:	db18      	blt.n	80233c8 <_dtoa_r+0x218>
 8023396:	9b06      	ldr	r3, [sp, #24]
 8023398:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 802339c:	445b      	add	r3, fp
 802339e:	9306      	str	r3, [sp, #24]
 80233a0:	2300      	movs	r3, #0
 80233a2:	9a07      	ldr	r2, [sp, #28]
 80233a4:	2a09      	cmp	r2, #9
 80233a6:	d849      	bhi.n	802343c <_dtoa_r+0x28c>
 80233a8:	2a05      	cmp	r2, #5
 80233aa:	bfc4      	itt	gt
 80233ac:	3a04      	subgt	r2, #4
 80233ae:	9207      	strgt	r2, [sp, #28]
 80233b0:	9a07      	ldr	r2, [sp, #28]
 80233b2:	f1a2 0202 	sub.w	r2, r2, #2
 80233b6:	bfcc      	ite	gt
 80233b8:	2400      	movgt	r4, #0
 80233ba:	2401      	movle	r4, #1
 80233bc:	2a03      	cmp	r2, #3
 80233be:	d848      	bhi.n	8023452 <_dtoa_r+0x2a2>
 80233c0:	e8df f002 	tbb	[pc, r2]
 80233c4:	3a2c2e0b 	.word	0x3a2c2e0b
 80233c8:	9b05      	ldr	r3, [sp, #20]
 80233ca:	2200      	movs	r2, #0
 80233cc:	eba3 030b 	sub.w	r3, r3, fp
 80233d0:	9305      	str	r3, [sp, #20]
 80233d2:	920e      	str	r2, [sp, #56]	; 0x38
 80233d4:	f1cb 0300 	rsb	r3, fp, #0
 80233d8:	e7e3      	b.n	80233a2 <_dtoa_r+0x1f2>
 80233da:	2200      	movs	r2, #0
 80233dc:	9208      	str	r2, [sp, #32]
 80233de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233e0:	2a00      	cmp	r2, #0
 80233e2:	dc39      	bgt.n	8023458 <_dtoa_r+0x2a8>
 80233e4:	f04f 0a01 	mov.w	sl, #1
 80233e8:	46d1      	mov	r9, sl
 80233ea:	4652      	mov	r2, sl
 80233ec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80233f0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80233f2:	2100      	movs	r1, #0
 80233f4:	6079      	str	r1, [r7, #4]
 80233f6:	2004      	movs	r0, #4
 80233f8:	f100 0c14 	add.w	ip, r0, #20
 80233fc:	4594      	cmp	ip, r2
 80233fe:	6879      	ldr	r1, [r7, #4]
 8023400:	d92f      	bls.n	8023462 <_dtoa_r+0x2b2>
 8023402:	4630      	mov	r0, r6
 8023404:	930c      	str	r3, [sp, #48]	; 0x30
 8023406:	f000 ffbd 	bl	8024384 <_Balloc>
 802340a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802340c:	9000      	str	r0, [sp, #0]
 802340e:	4602      	mov	r2, r0
 8023410:	2800      	cmp	r0, #0
 8023412:	d149      	bne.n	80234a8 <_dtoa_r+0x2f8>
 8023414:	4b23      	ldr	r3, [pc, #140]	; (80234a4 <_dtoa_r+0x2f4>)
 8023416:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802341a:	e6df      	b.n	80231dc <_dtoa_r+0x2c>
 802341c:	2201      	movs	r2, #1
 802341e:	e7dd      	b.n	80233dc <_dtoa_r+0x22c>
 8023420:	2200      	movs	r2, #0
 8023422:	9208      	str	r2, [sp, #32]
 8023424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023426:	eb0b 0a02 	add.w	sl, fp, r2
 802342a:	f10a 0901 	add.w	r9, sl, #1
 802342e:	464a      	mov	r2, r9
 8023430:	2a01      	cmp	r2, #1
 8023432:	bfb8      	it	lt
 8023434:	2201      	movlt	r2, #1
 8023436:	e7db      	b.n	80233f0 <_dtoa_r+0x240>
 8023438:	2201      	movs	r2, #1
 802343a:	e7f2      	b.n	8023422 <_dtoa_r+0x272>
 802343c:	2401      	movs	r4, #1
 802343e:	2200      	movs	r2, #0
 8023440:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8023444:	f04f 3aff 	mov.w	sl, #4294967295
 8023448:	2100      	movs	r1, #0
 802344a:	46d1      	mov	r9, sl
 802344c:	2212      	movs	r2, #18
 802344e:	9109      	str	r1, [sp, #36]	; 0x24
 8023450:	e7ce      	b.n	80233f0 <_dtoa_r+0x240>
 8023452:	2201      	movs	r2, #1
 8023454:	9208      	str	r2, [sp, #32]
 8023456:	e7f5      	b.n	8023444 <_dtoa_r+0x294>
 8023458:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 802345c:	46d1      	mov	r9, sl
 802345e:	4652      	mov	r2, sl
 8023460:	e7c6      	b.n	80233f0 <_dtoa_r+0x240>
 8023462:	3101      	adds	r1, #1
 8023464:	6079      	str	r1, [r7, #4]
 8023466:	0040      	lsls	r0, r0, #1
 8023468:	e7c6      	b.n	80233f8 <_dtoa_r+0x248>
 802346a:	bf00      	nop
 802346c:	f3af 8000 	nop.w
 8023470:	636f4361 	.word	0x636f4361
 8023474:	3fd287a7 	.word	0x3fd287a7
 8023478:	8b60c8b3 	.word	0x8b60c8b3
 802347c:	3fc68a28 	.word	0x3fc68a28
 8023480:	509f79fb 	.word	0x509f79fb
 8023484:	3fd34413 	.word	0x3fd34413
 8023488:	08041038 	.word	0x08041038
 802348c:	080415c2 	.word	0x080415c2
 8023490:	7ff00000 	.word	0x7ff00000
 8023494:	080415be 	.word	0x080415be
 8023498:	080415b5 	.word	0x080415b5
 802349c:	08041812 	.word	0x08041812
 80234a0:	08041728 	.word	0x08041728
 80234a4:	08041621 	.word	0x08041621
 80234a8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80234aa:	9900      	ldr	r1, [sp, #0]
 80234ac:	6011      	str	r1, [r2, #0]
 80234ae:	f1b9 0f0e 	cmp.w	r9, #14
 80234b2:	d872      	bhi.n	802359a <_dtoa_r+0x3ea>
 80234b4:	2c00      	cmp	r4, #0
 80234b6:	d070      	beq.n	802359a <_dtoa_r+0x3ea>
 80234b8:	f1bb 0f00 	cmp.w	fp, #0
 80234bc:	f340 80a6 	ble.w	802360c <_dtoa_r+0x45c>
 80234c0:	49ca      	ldr	r1, [pc, #808]	; (80237ec <_dtoa_r+0x63c>)
 80234c2:	f00b 020f 	and.w	r2, fp, #15
 80234c6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80234ca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80234ce:	ed92 7b00 	vldr	d7, [r2]
 80234d2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80234d6:	f000 808d 	beq.w	80235f4 <_dtoa_r+0x444>
 80234da:	4ac5      	ldr	r2, [pc, #788]	; (80237f0 <_dtoa_r+0x640>)
 80234dc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80234e0:	ed92 6b08 	vldr	d6, [r2, #32]
 80234e4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80234e8:	ed8d 6b02 	vstr	d6, [sp, #8]
 80234ec:	f001 010f 	and.w	r1, r1, #15
 80234f0:	2203      	movs	r2, #3
 80234f2:	48bf      	ldr	r0, [pc, #764]	; (80237f0 <_dtoa_r+0x640>)
 80234f4:	2900      	cmp	r1, #0
 80234f6:	d17f      	bne.n	80235f8 <_dtoa_r+0x448>
 80234f8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80234fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8023500:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023504:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8023506:	2900      	cmp	r1, #0
 8023508:	f000 80b2 	beq.w	8023670 <_dtoa_r+0x4c0>
 802350c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023510:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023514:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802351c:	f140 80a8 	bpl.w	8023670 <_dtoa_r+0x4c0>
 8023520:	f1b9 0f00 	cmp.w	r9, #0
 8023524:	f000 80a4 	beq.w	8023670 <_dtoa_r+0x4c0>
 8023528:	f1ba 0f00 	cmp.w	sl, #0
 802352c:	dd31      	ble.n	8023592 <_dtoa_r+0x3e2>
 802352e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8023532:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023536:	ed8d 7b02 	vstr	d7, [sp, #8]
 802353a:	f10b 37ff 	add.w	r7, fp, #4294967295
 802353e:	3201      	adds	r2, #1
 8023540:	4650      	mov	r0, sl
 8023542:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023546:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 802354a:	ee07 2a90 	vmov	s15, r2
 802354e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8023552:	eea7 5b06 	vfma.f64	d5, d7, d6
 8023556:	ed8d 5b02 	vstr	d5, [sp, #8]
 802355a:	9c03      	ldr	r4, [sp, #12]
 802355c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8023560:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8023564:	2800      	cmp	r0, #0
 8023566:	f040 8086 	bne.w	8023676 <_dtoa_r+0x4c6>
 802356a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 802356e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8023572:	ec42 1b17 	vmov	d7, r1, r2
 8023576:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802357e:	f300 8272 	bgt.w	8023a66 <_dtoa_r+0x8b6>
 8023582:	eeb1 7b47 	vneg.f64	d7, d7
 8023586:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802358e:	f100 8267 	bmi.w	8023a60 <_dtoa_r+0x8b0>
 8023592:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8023596:	e9cd 1202 	strd	r1, r2, [sp, #8]
 802359a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802359c:	2a00      	cmp	r2, #0
 802359e:	f2c0 8129 	blt.w	80237f4 <_dtoa_r+0x644>
 80235a2:	f1bb 0f0e 	cmp.w	fp, #14
 80235a6:	f300 8125 	bgt.w	80237f4 <_dtoa_r+0x644>
 80235aa:	4b90      	ldr	r3, [pc, #576]	; (80237ec <_dtoa_r+0x63c>)
 80235ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80235b0:	ed93 6b00 	vldr	d6, [r3]
 80235b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80235b6:	2b00      	cmp	r3, #0
 80235b8:	f280 80c3 	bge.w	8023742 <_dtoa_r+0x592>
 80235bc:	f1b9 0f00 	cmp.w	r9, #0
 80235c0:	f300 80bf 	bgt.w	8023742 <_dtoa_r+0x592>
 80235c4:	f040 824c 	bne.w	8023a60 <_dtoa_r+0x8b0>
 80235c8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80235cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80235d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80235d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80235d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235dc:	464c      	mov	r4, r9
 80235de:	464f      	mov	r7, r9
 80235e0:	f280 8222 	bge.w	8023a28 <_dtoa_r+0x878>
 80235e4:	f8dd 8000 	ldr.w	r8, [sp]
 80235e8:	2331      	movs	r3, #49	; 0x31
 80235ea:	f808 3b01 	strb.w	r3, [r8], #1
 80235ee:	f10b 0b01 	add.w	fp, fp, #1
 80235f2:	e21e      	b.n	8023a32 <_dtoa_r+0x882>
 80235f4:	2202      	movs	r2, #2
 80235f6:	e77c      	b.n	80234f2 <_dtoa_r+0x342>
 80235f8:	07cc      	lsls	r4, r1, #31
 80235fa:	d504      	bpl.n	8023606 <_dtoa_r+0x456>
 80235fc:	ed90 6b00 	vldr	d6, [r0]
 8023600:	3201      	adds	r2, #1
 8023602:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023606:	1049      	asrs	r1, r1, #1
 8023608:	3008      	adds	r0, #8
 802360a:	e773      	b.n	80234f4 <_dtoa_r+0x344>
 802360c:	d02e      	beq.n	802366c <_dtoa_r+0x4bc>
 802360e:	f1cb 0100 	rsb	r1, fp, #0
 8023612:	4a76      	ldr	r2, [pc, #472]	; (80237ec <_dtoa_r+0x63c>)
 8023614:	f001 000f 	and.w	r0, r1, #15
 8023618:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802361c:	ed92 7b00 	vldr	d7, [r2]
 8023620:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8023624:	ee26 7b07 	vmul.f64	d7, d6, d7
 8023628:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 802362c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8023630:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8023634:	486e      	ldr	r0, [pc, #440]	; (80237f0 <_dtoa_r+0x640>)
 8023636:	1109      	asrs	r1, r1, #4
 8023638:	2400      	movs	r4, #0
 802363a:	2202      	movs	r2, #2
 802363c:	b939      	cbnz	r1, 802364e <_dtoa_r+0x49e>
 802363e:	2c00      	cmp	r4, #0
 8023640:	f43f af60 	beq.w	8023504 <_dtoa_r+0x354>
 8023644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8023648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802364c:	e75a      	b.n	8023504 <_dtoa_r+0x354>
 802364e:	07cf      	lsls	r7, r1, #31
 8023650:	d509      	bpl.n	8023666 <_dtoa_r+0x4b6>
 8023652:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8023656:	ed90 7b00 	vldr	d7, [r0]
 802365a:	ee26 7b07 	vmul.f64	d7, d6, d7
 802365e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8023662:	3201      	adds	r2, #1
 8023664:	2401      	movs	r4, #1
 8023666:	1049      	asrs	r1, r1, #1
 8023668:	3008      	adds	r0, #8
 802366a:	e7e7      	b.n	802363c <_dtoa_r+0x48c>
 802366c:	2202      	movs	r2, #2
 802366e:	e749      	b.n	8023504 <_dtoa_r+0x354>
 8023670:	465f      	mov	r7, fp
 8023672:	4648      	mov	r0, r9
 8023674:	e765      	b.n	8023542 <_dtoa_r+0x392>
 8023676:	ec42 1b17 	vmov	d7, r1, r2
 802367a:	4a5c      	ldr	r2, [pc, #368]	; (80237ec <_dtoa_r+0x63c>)
 802367c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8023680:	ed12 4b02 	vldr	d4, [r2, #-8]
 8023684:	9a00      	ldr	r2, [sp, #0]
 8023686:	1814      	adds	r4, r2, r0
 8023688:	9a08      	ldr	r2, [sp, #32]
 802368a:	b352      	cbz	r2, 80236e2 <_dtoa_r+0x532>
 802368c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8023690:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8023694:	f8dd 8000 	ldr.w	r8, [sp]
 8023698:	ee83 5b04 	vdiv.f64	d5, d3, d4
 802369c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80236a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80236a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80236a8:	ee14 2a90 	vmov	r2, s9
 80236ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80236b0:	3230      	adds	r2, #48	; 0x30
 80236b2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80236b6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80236ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236be:	f808 2b01 	strb.w	r2, [r8], #1
 80236c2:	d439      	bmi.n	8023738 <_dtoa_r+0x588>
 80236c4:	ee32 5b46 	vsub.f64	d5, d2, d6
 80236c8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80236cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80236d0:	d472      	bmi.n	80237b8 <_dtoa_r+0x608>
 80236d2:	45a0      	cmp	r8, r4
 80236d4:	f43f af5d 	beq.w	8023592 <_dtoa_r+0x3e2>
 80236d8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80236dc:	ee26 6b03 	vmul.f64	d6, d6, d3
 80236e0:	e7e0      	b.n	80236a4 <_dtoa_r+0x4f4>
 80236e2:	f8dd 8000 	ldr.w	r8, [sp]
 80236e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80236ea:	4621      	mov	r1, r4
 80236ec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80236f0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80236f4:	ee14 2a90 	vmov	r2, s9
 80236f8:	3230      	adds	r2, #48	; 0x30
 80236fa:	f808 2b01 	strb.w	r2, [r8], #1
 80236fe:	45a0      	cmp	r8, r4
 8023700:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023704:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023708:	d118      	bne.n	802373c <_dtoa_r+0x58c>
 802370a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802370e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023712:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8023716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802371a:	dc4d      	bgt.n	80237b8 <_dtoa_r+0x608>
 802371c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8023720:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8023724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023728:	f57f af33 	bpl.w	8023592 <_dtoa_r+0x3e2>
 802372c:	4688      	mov	r8, r1
 802372e:	3901      	subs	r1, #1
 8023730:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023734:	2b30      	cmp	r3, #48	; 0x30
 8023736:	d0f9      	beq.n	802372c <_dtoa_r+0x57c>
 8023738:	46bb      	mov	fp, r7
 802373a:	e02a      	b.n	8023792 <_dtoa_r+0x5e2>
 802373c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023740:	e7d6      	b.n	80236f0 <_dtoa_r+0x540>
 8023742:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023746:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802374a:	f8dd 8000 	ldr.w	r8, [sp]
 802374e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8023752:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8023756:	ee15 3a10 	vmov	r3, s10
 802375a:	3330      	adds	r3, #48	; 0x30
 802375c:	f808 3b01 	strb.w	r3, [r8], #1
 8023760:	9b00      	ldr	r3, [sp, #0]
 8023762:	eba8 0303 	sub.w	r3, r8, r3
 8023766:	4599      	cmp	r9, r3
 8023768:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802376c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8023770:	d133      	bne.n	80237da <_dtoa_r+0x62a>
 8023772:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023776:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802377a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802377e:	dc1a      	bgt.n	80237b6 <_dtoa_r+0x606>
 8023780:	eeb4 7b46 	vcmp.f64	d7, d6
 8023784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023788:	d103      	bne.n	8023792 <_dtoa_r+0x5e2>
 802378a:	ee15 3a10 	vmov	r3, s10
 802378e:	07d9      	lsls	r1, r3, #31
 8023790:	d411      	bmi.n	80237b6 <_dtoa_r+0x606>
 8023792:	4629      	mov	r1, r5
 8023794:	4630      	mov	r0, r6
 8023796:	f000 fe35 	bl	8024404 <_Bfree>
 802379a:	2300      	movs	r3, #0
 802379c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802379e:	f888 3000 	strb.w	r3, [r8]
 80237a2:	f10b 0301 	add.w	r3, fp, #1
 80237a6:	6013      	str	r3, [r2, #0]
 80237a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80237aa:	2b00      	cmp	r3, #0
 80237ac:	f43f ad4d 	beq.w	802324a <_dtoa_r+0x9a>
 80237b0:	f8c3 8000 	str.w	r8, [r3]
 80237b4:	e549      	b.n	802324a <_dtoa_r+0x9a>
 80237b6:	465f      	mov	r7, fp
 80237b8:	4643      	mov	r3, r8
 80237ba:	4698      	mov	r8, r3
 80237bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80237c0:	2a39      	cmp	r2, #57	; 0x39
 80237c2:	d106      	bne.n	80237d2 <_dtoa_r+0x622>
 80237c4:	9a00      	ldr	r2, [sp, #0]
 80237c6:	429a      	cmp	r2, r3
 80237c8:	d1f7      	bne.n	80237ba <_dtoa_r+0x60a>
 80237ca:	9900      	ldr	r1, [sp, #0]
 80237cc:	2230      	movs	r2, #48	; 0x30
 80237ce:	3701      	adds	r7, #1
 80237d0:	700a      	strb	r2, [r1, #0]
 80237d2:	781a      	ldrb	r2, [r3, #0]
 80237d4:	3201      	adds	r2, #1
 80237d6:	701a      	strb	r2, [r3, #0]
 80237d8:	e7ae      	b.n	8023738 <_dtoa_r+0x588>
 80237da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80237de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80237e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80237e6:	d1b2      	bne.n	802374e <_dtoa_r+0x59e>
 80237e8:	e7d3      	b.n	8023792 <_dtoa_r+0x5e2>
 80237ea:	bf00      	nop
 80237ec:	08041728 	.word	0x08041728
 80237f0:	08041700 	.word	0x08041700
 80237f4:	9908      	ldr	r1, [sp, #32]
 80237f6:	2900      	cmp	r1, #0
 80237f8:	f000 80d1 	beq.w	802399e <_dtoa_r+0x7ee>
 80237fc:	9907      	ldr	r1, [sp, #28]
 80237fe:	2901      	cmp	r1, #1
 8023800:	f300 80b4 	bgt.w	802396c <_dtoa_r+0x7bc>
 8023804:	9911      	ldr	r1, [sp, #68]	; 0x44
 8023806:	2900      	cmp	r1, #0
 8023808:	f000 80ac 	beq.w	8023964 <_dtoa_r+0x7b4>
 802380c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023810:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023814:	461c      	mov	r4, r3
 8023816:	930a      	str	r3, [sp, #40]	; 0x28
 8023818:	9b05      	ldr	r3, [sp, #20]
 802381a:	4413      	add	r3, r2
 802381c:	9305      	str	r3, [sp, #20]
 802381e:	9b06      	ldr	r3, [sp, #24]
 8023820:	2101      	movs	r1, #1
 8023822:	4413      	add	r3, r2
 8023824:	4630      	mov	r0, r6
 8023826:	9306      	str	r3, [sp, #24]
 8023828:	f000 fea8 	bl	802457c <__i2b>
 802382c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802382e:	4607      	mov	r7, r0
 8023830:	f1b8 0f00 	cmp.w	r8, #0
 8023834:	dd0d      	ble.n	8023852 <_dtoa_r+0x6a2>
 8023836:	9a06      	ldr	r2, [sp, #24]
 8023838:	2a00      	cmp	r2, #0
 802383a:	dd0a      	ble.n	8023852 <_dtoa_r+0x6a2>
 802383c:	4542      	cmp	r2, r8
 802383e:	9905      	ldr	r1, [sp, #20]
 8023840:	bfa8      	it	ge
 8023842:	4642      	movge	r2, r8
 8023844:	1a89      	subs	r1, r1, r2
 8023846:	9105      	str	r1, [sp, #20]
 8023848:	9906      	ldr	r1, [sp, #24]
 802384a:	eba8 0802 	sub.w	r8, r8, r2
 802384e:	1a8a      	subs	r2, r1, r2
 8023850:	9206      	str	r2, [sp, #24]
 8023852:	b303      	cbz	r3, 8023896 <_dtoa_r+0x6e6>
 8023854:	9a08      	ldr	r2, [sp, #32]
 8023856:	2a00      	cmp	r2, #0
 8023858:	f000 80a6 	beq.w	80239a8 <_dtoa_r+0x7f8>
 802385c:	2c00      	cmp	r4, #0
 802385e:	dd13      	ble.n	8023888 <_dtoa_r+0x6d8>
 8023860:	4639      	mov	r1, r7
 8023862:	4622      	mov	r2, r4
 8023864:	4630      	mov	r0, r6
 8023866:	930c      	str	r3, [sp, #48]	; 0x30
 8023868:	f000 ff44 	bl	80246f4 <__pow5mult>
 802386c:	462a      	mov	r2, r5
 802386e:	4601      	mov	r1, r0
 8023870:	4607      	mov	r7, r0
 8023872:	4630      	mov	r0, r6
 8023874:	f000 fe98 	bl	80245a8 <__multiply>
 8023878:	4629      	mov	r1, r5
 802387a:	900a      	str	r0, [sp, #40]	; 0x28
 802387c:	4630      	mov	r0, r6
 802387e:	f000 fdc1 	bl	8024404 <_Bfree>
 8023882:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023886:	4615      	mov	r5, r2
 8023888:	1b1a      	subs	r2, r3, r4
 802388a:	d004      	beq.n	8023896 <_dtoa_r+0x6e6>
 802388c:	4629      	mov	r1, r5
 802388e:	4630      	mov	r0, r6
 8023890:	f000 ff30 	bl	80246f4 <__pow5mult>
 8023894:	4605      	mov	r5, r0
 8023896:	2101      	movs	r1, #1
 8023898:	4630      	mov	r0, r6
 802389a:	f000 fe6f 	bl	802457c <__i2b>
 802389e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238a0:	2b00      	cmp	r3, #0
 80238a2:	4604      	mov	r4, r0
 80238a4:	f340 8082 	ble.w	80239ac <_dtoa_r+0x7fc>
 80238a8:	461a      	mov	r2, r3
 80238aa:	4601      	mov	r1, r0
 80238ac:	4630      	mov	r0, r6
 80238ae:	f000 ff21 	bl	80246f4 <__pow5mult>
 80238b2:	9b07      	ldr	r3, [sp, #28]
 80238b4:	2b01      	cmp	r3, #1
 80238b6:	4604      	mov	r4, r0
 80238b8:	dd7b      	ble.n	80239b2 <_dtoa_r+0x802>
 80238ba:	2300      	movs	r3, #0
 80238bc:	930a      	str	r3, [sp, #40]	; 0x28
 80238be:	6922      	ldr	r2, [r4, #16]
 80238c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80238c4:	6910      	ldr	r0, [r2, #16]
 80238c6:	f000 fe09 	bl	80244dc <__hi0bits>
 80238ca:	f1c0 0020 	rsb	r0, r0, #32
 80238ce:	9b06      	ldr	r3, [sp, #24]
 80238d0:	4418      	add	r0, r3
 80238d2:	f010 001f 	ands.w	r0, r0, #31
 80238d6:	f000 808d 	beq.w	80239f4 <_dtoa_r+0x844>
 80238da:	f1c0 0220 	rsb	r2, r0, #32
 80238de:	2a04      	cmp	r2, #4
 80238e0:	f340 8086 	ble.w	80239f0 <_dtoa_r+0x840>
 80238e4:	f1c0 001c 	rsb	r0, r0, #28
 80238e8:	9b05      	ldr	r3, [sp, #20]
 80238ea:	4403      	add	r3, r0
 80238ec:	9305      	str	r3, [sp, #20]
 80238ee:	9b06      	ldr	r3, [sp, #24]
 80238f0:	4403      	add	r3, r0
 80238f2:	4480      	add	r8, r0
 80238f4:	9306      	str	r3, [sp, #24]
 80238f6:	9b05      	ldr	r3, [sp, #20]
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	dd05      	ble.n	8023908 <_dtoa_r+0x758>
 80238fc:	4629      	mov	r1, r5
 80238fe:	461a      	mov	r2, r3
 8023900:	4630      	mov	r0, r6
 8023902:	f000 ff51 	bl	80247a8 <__lshift>
 8023906:	4605      	mov	r5, r0
 8023908:	9b06      	ldr	r3, [sp, #24]
 802390a:	2b00      	cmp	r3, #0
 802390c:	dd05      	ble.n	802391a <_dtoa_r+0x76a>
 802390e:	4621      	mov	r1, r4
 8023910:	461a      	mov	r2, r3
 8023912:	4630      	mov	r0, r6
 8023914:	f000 ff48 	bl	80247a8 <__lshift>
 8023918:	4604      	mov	r4, r0
 802391a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802391c:	2b00      	cmp	r3, #0
 802391e:	d06b      	beq.n	80239f8 <_dtoa_r+0x848>
 8023920:	4621      	mov	r1, r4
 8023922:	4628      	mov	r0, r5
 8023924:	f000 ffac 	bl	8024880 <__mcmp>
 8023928:	2800      	cmp	r0, #0
 802392a:	da65      	bge.n	80239f8 <_dtoa_r+0x848>
 802392c:	2300      	movs	r3, #0
 802392e:	4629      	mov	r1, r5
 8023930:	220a      	movs	r2, #10
 8023932:	4630      	mov	r0, r6
 8023934:	f000 fd88 	bl	8024448 <__multadd>
 8023938:	9b08      	ldr	r3, [sp, #32]
 802393a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802393e:	4605      	mov	r5, r0
 8023940:	2b00      	cmp	r3, #0
 8023942:	f000 8192 	beq.w	8023c6a <_dtoa_r+0xaba>
 8023946:	4639      	mov	r1, r7
 8023948:	2300      	movs	r3, #0
 802394a:	220a      	movs	r2, #10
 802394c:	4630      	mov	r0, r6
 802394e:	f000 fd7b 	bl	8024448 <__multadd>
 8023952:	f1ba 0f00 	cmp.w	sl, #0
 8023956:	4607      	mov	r7, r0
 8023958:	f300 808e 	bgt.w	8023a78 <_dtoa_r+0x8c8>
 802395c:	9b07      	ldr	r3, [sp, #28]
 802395e:	2b02      	cmp	r3, #2
 8023960:	dc51      	bgt.n	8023a06 <_dtoa_r+0x856>
 8023962:	e089      	b.n	8023a78 <_dtoa_r+0x8c8>
 8023964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8023966:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802396a:	e751      	b.n	8023810 <_dtoa_r+0x660>
 802396c:	f109 34ff 	add.w	r4, r9, #4294967295
 8023970:	42a3      	cmp	r3, r4
 8023972:	bfbf      	itttt	lt
 8023974:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8023976:	1ae3      	sublt	r3, r4, r3
 8023978:	18d2      	addlt	r2, r2, r3
 802397a:	4613      	movlt	r3, r2
 802397c:	bfb7      	itett	lt
 802397e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8023980:	1b1c      	subge	r4, r3, r4
 8023982:	4623      	movlt	r3, r4
 8023984:	2400      	movlt	r4, #0
 8023986:	f1b9 0f00 	cmp.w	r9, #0
 802398a:	bfb5      	itete	lt
 802398c:	9a05      	ldrlt	r2, [sp, #20]
 802398e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8023992:	eba2 0809 	sublt.w	r8, r2, r9
 8023996:	464a      	movge	r2, r9
 8023998:	bfb8      	it	lt
 802399a:	2200      	movlt	r2, #0
 802399c:	e73b      	b.n	8023816 <_dtoa_r+0x666>
 802399e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80239a2:	9f08      	ldr	r7, [sp, #32]
 80239a4:	461c      	mov	r4, r3
 80239a6:	e743      	b.n	8023830 <_dtoa_r+0x680>
 80239a8:	461a      	mov	r2, r3
 80239aa:	e76f      	b.n	802388c <_dtoa_r+0x6dc>
 80239ac:	9b07      	ldr	r3, [sp, #28]
 80239ae:	2b01      	cmp	r3, #1
 80239b0:	dc18      	bgt.n	80239e4 <_dtoa_r+0x834>
 80239b2:	9b02      	ldr	r3, [sp, #8]
 80239b4:	b9b3      	cbnz	r3, 80239e4 <_dtoa_r+0x834>
 80239b6:	9b03      	ldr	r3, [sp, #12]
 80239b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80239bc:	b9a2      	cbnz	r2, 80239e8 <_dtoa_r+0x838>
 80239be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80239c2:	0d12      	lsrs	r2, r2, #20
 80239c4:	0512      	lsls	r2, r2, #20
 80239c6:	b18a      	cbz	r2, 80239ec <_dtoa_r+0x83c>
 80239c8:	9b05      	ldr	r3, [sp, #20]
 80239ca:	3301      	adds	r3, #1
 80239cc:	9305      	str	r3, [sp, #20]
 80239ce:	9b06      	ldr	r3, [sp, #24]
 80239d0:	3301      	adds	r3, #1
 80239d2:	9306      	str	r3, [sp, #24]
 80239d4:	2301      	movs	r3, #1
 80239d6:	930a      	str	r3, [sp, #40]	; 0x28
 80239d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80239da:	2b00      	cmp	r3, #0
 80239dc:	f47f af6f 	bne.w	80238be <_dtoa_r+0x70e>
 80239e0:	2001      	movs	r0, #1
 80239e2:	e774      	b.n	80238ce <_dtoa_r+0x71e>
 80239e4:	2300      	movs	r3, #0
 80239e6:	e7f6      	b.n	80239d6 <_dtoa_r+0x826>
 80239e8:	9b02      	ldr	r3, [sp, #8]
 80239ea:	e7f4      	b.n	80239d6 <_dtoa_r+0x826>
 80239ec:	920a      	str	r2, [sp, #40]	; 0x28
 80239ee:	e7f3      	b.n	80239d8 <_dtoa_r+0x828>
 80239f0:	d081      	beq.n	80238f6 <_dtoa_r+0x746>
 80239f2:	4610      	mov	r0, r2
 80239f4:	301c      	adds	r0, #28
 80239f6:	e777      	b.n	80238e8 <_dtoa_r+0x738>
 80239f8:	f1b9 0f00 	cmp.w	r9, #0
 80239fc:	dc37      	bgt.n	8023a6e <_dtoa_r+0x8be>
 80239fe:	9b07      	ldr	r3, [sp, #28]
 8023a00:	2b02      	cmp	r3, #2
 8023a02:	dd34      	ble.n	8023a6e <_dtoa_r+0x8be>
 8023a04:	46ca      	mov	sl, r9
 8023a06:	f1ba 0f00 	cmp.w	sl, #0
 8023a0a:	d10d      	bne.n	8023a28 <_dtoa_r+0x878>
 8023a0c:	4621      	mov	r1, r4
 8023a0e:	4653      	mov	r3, sl
 8023a10:	2205      	movs	r2, #5
 8023a12:	4630      	mov	r0, r6
 8023a14:	f000 fd18 	bl	8024448 <__multadd>
 8023a18:	4601      	mov	r1, r0
 8023a1a:	4604      	mov	r4, r0
 8023a1c:	4628      	mov	r0, r5
 8023a1e:	f000 ff2f 	bl	8024880 <__mcmp>
 8023a22:	2800      	cmp	r0, #0
 8023a24:	f73f adde 	bgt.w	80235e4 <_dtoa_r+0x434>
 8023a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a2a:	f8dd 8000 	ldr.w	r8, [sp]
 8023a2e:	ea6f 0b03 	mvn.w	fp, r3
 8023a32:	f04f 0900 	mov.w	r9, #0
 8023a36:	4621      	mov	r1, r4
 8023a38:	4630      	mov	r0, r6
 8023a3a:	f000 fce3 	bl	8024404 <_Bfree>
 8023a3e:	2f00      	cmp	r7, #0
 8023a40:	f43f aea7 	beq.w	8023792 <_dtoa_r+0x5e2>
 8023a44:	f1b9 0f00 	cmp.w	r9, #0
 8023a48:	d005      	beq.n	8023a56 <_dtoa_r+0x8a6>
 8023a4a:	45b9      	cmp	r9, r7
 8023a4c:	d003      	beq.n	8023a56 <_dtoa_r+0x8a6>
 8023a4e:	4649      	mov	r1, r9
 8023a50:	4630      	mov	r0, r6
 8023a52:	f000 fcd7 	bl	8024404 <_Bfree>
 8023a56:	4639      	mov	r1, r7
 8023a58:	4630      	mov	r0, r6
 8023a5a:	f000 fcd3 	bl	8024404 <_Bfree>
 8023a5e:	e698      	b.n	8023792 <_dtoa_r+0x5e2>
 8023a60:	2400      	movs	r4, #0
 8023a62:	4627      	mov	r7, r4
 8023a64:	e7e0      	b.n	8023a28 <_dtoa_r+0x878>
 8023a66:	46bb      	mov	fp, r7
 8023a68:	4604      	mov	r4, r0
 8023a6a:	4607      	mov	r7, r0
 8023a6c:	e5ba      	b.n	80235e4 <_dtoa_r+0x434>
 8023a6e:	9b08      	ldr	r3, [sp, #32]
 8023a70:	46ca      	mov	sl, r9
 8023a72:	2b00      	cmp	r3, #0
 8023a74:	f000 8100 	beq.w	8023c78 <_dtoa_r+0xac8>
 8023a78:	f1b8 0f00 	cmp.w	r8, #0
 8023a7c:	dd05      	ble.n	8023a8a <_dtoa_r+0x8da>
 8023a7e:	4639      	mov	r1, r7
 8023a80:	4642      	mov	r2, r8
 8023a82:	4630      	mov	r0, r6
 8023a84:	f000 fe90 	bl	80247a8 <__lshift>
 8023a88:	4607      	mov	r7, r0
 8023a8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a8c:	2b00      	cmp	r3, #0
 8023a8e:	d05d      	beq.n	8023b4c <_dtoa_r+0x99c>
 8023a90:	6879      	ldr	r1, [r7, #4]
 8023a92:	4630      	mov	r0, r6
 8023a94:	f000 fc76 	bl	8024384 <_Balloc>
 8023a98:	4680      	mov	r8, r0
 8023a9a:	b928      	cbnz	r0, 8023aa8 <_dtoa_r+0x8f8>
 8023a9c:	4b82      	ldr	r3, [pc, #520]	; (8023ca8 <_dtoa_r+0xaf8>)
 8023a9e:	4602      	mov	r2, r0
 8023aa0:	f240 21ea 	movw	r1, #746	; 0x2ea
 8023aa4:	f7ff bb9a 	b.w	80231dc <_dtoa_r+0x2c>
 8023aa8:	693a      	ldr	r2, [r7, #16]
 8023aaa:	3202      	adds	r2, #2
 8023aac:	0092      	lsls	r2, r2, #2
 8023aae:	f107 010c 	add.w	r1, r7, #12
 8023ab2:	300c      	adds	r0, #12
 8023ab4:	f7fc fefc 	bl	80208b0 <memcpy>
 8023ab8:	2201      	movs	r2, #1
 8023aba:	4641      	mov	r1, r8
 8023abc:	4630      	mov	r0, r6
 8023abe:	f000 fe73 	bl	80247a8 <__lshift>
 8023ac2:	9b00      	ldr	r3, [sp, #0]
 8023ac4:	3301      	adds	r3, #1
 8023ac6:	9305      	str	r3, [sp, #20]
 8023ac8:	9b00      	ldr	r3, [sp, #0]
 8023aca:	4453      	add	r3, sl
 8023acc:	9309      	str	r3, [sp, #36]	; 0x24
 8023ace:	9b02      	ldr	r3, [sp, #8]
 8023ad0:	f003 0301 	and.w	r3, r3, #1
 8023ad4:	46b9      	mov	r9, r7
 8023ad6:	9308      	str	r3, [sp, #32]
 8023ad8:	4607      	mov	r7, r0
 8023ada:	9b05      	ldr	r3, [sp, #20]
 8023adc:	4621      	mov	r1, r4
 8023ade:	3b01      	subs	r3, #1
 8023ae0:	4628      	mov	r0, r5
 8023ae2:	9302      	str	r3, [sp, #8]
 8023ae4:	f7ff fad6 	bl	8023094 <quorem>
 8023ae8:	4603      	mov	r3, r0
 8023aea:	3330      	adds	r3, #48	; 0x30
 8023aec:	9006      	str	r0, [sp, #24]
 8023aee:	4649      	mov	r1, r9
 8023af0:	4628      	mov	r0, r5
 8023af2:	930a      	str	r3, [sp, #40]	; 0x28
 8023af4:	f000 fec4 	bl	8024880 <__mcmp>
 8023af8:	463a      	mov	r2, r7
 8023afa:	4682      	mov	sl, r0
 8023afc:	4621      	mov	r1, r4
 8023afe:	4630      	mov	r0, r6
 8023b00:	f000 feda 	bl	80248b8 <__mdiff>
 8023b04:	68c2      	ldr	r2, [r0, #12]
 8023b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b08:	4680      	mov	r8, r0
 8023b0a:	bb0a      	cbnz	r2, 8023b50 <_dtoa_r+0x9a0>
 8023b0c:	4601      	mov	r1, r0
 8023b0e:	4628      	mov	r0, r5
 8023b10:	f000 feb6 	bl	8024880 <__mcmp>
 8023b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b16:	4602      	mov	r2, r0
 8023b18:	4641      	mov	r1, r8
 8023b1a:	4630      	mov	r0, r6
 8023b1c:	920e      	str	r2, [sp, #56]	; 0x38
 8023b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8023b20:	f000 fc70 	bl	8024404 <_Bfree>
 8023b24:	9b07      	ldr	r3, [sp, #28]
 8023b26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b28:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8023b2c:	ea43 0102 	orr.w	r1, r3, r2
 8023b30:	9b08      	ldr	r3, [sp, #32]
 8023b32:	430b      	orrs	r3, r1
 8023b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023b36:	d10d      	bne.n	8023b54 <_dtoa_r+0x9a4>
 8023b38:	2b39      	cmp	r3, #57	; 0x39
 8023b3a:	d029      	beq.n	8023b90 <_dtoa_r+0x9e0>
 8023b3c:	f1ba 0f00 	cmp.w	sl, #0
 8023b40:	dd01      	ble.n	8023b46 <_dtoa_r+0x996>
 8023b42:	9b06      	ldr	r3, [sp, #24]
 8023b44:	3331      	adds	r3, #49	; 0x31
 8023b46:	9a02      	ldr	r2, [sp, #8]
 8023b48:	7013      	strb	r3, [r2, #0]
 8023b4a:	e774      	b.n	8023a36 <_dtoa_r+0x886>
 8023b4c:	4638      	mov	r0, r7
 8023b4e:	e7b8      	b.n	8023ac2 <_dtoa_r+0x912>
 8023b50:	2201      	movs	r2, #1
 8023b52:	e7e1      	b.n	8023b18 <_dtoa_r+0x968>
 8023b54:	f1ba 0f00 	cmp.w	sl, #0
 8023b58:	db06      	blt.n	8023b68 <_dtoa_r+0x9b8>
 8023b5a:	9907      	ldr	r1, [sp, #28]
 8023b5c:	ea41 0a0a 	orr.w	sl, r1, sl
 8023b60:	9908      	ldr	r1, [sp, #32]
 8023b62:	ea5a 0101 	orrs.w	r1, sl, r1
 8023b66:	d120      	bne.n	8023baa <_dtoa_r+0x9fa>
 8023b68:	2a00      	cmp	r2, #0
 8023b6a:	ddec      	ble.n	8023b46 <_dtoa_r+0x996>
 8023b6c:	4629      	mov	r1, r5
 8023b6e:	2201      	movs	r2, #1
 8023b70:	4630      	mov	r0, r6
 8023b72:	9305      	str	r3, [sp, #20]
 8023b74:	f000 fe18 	bl	80247a8 <__lshift>
 8023b78:	4621      	mov	r1, r4
 8023b7a:	4605      	mov	r5, r0
 8023b7c:	f000 fe80 	bl	8024880 <__mcmp>
 8023b80:	2800      	cmp	r0, #0
 8023b82:	9b05      	ldr	r3, [sp, #20]
 8023b84:	dc02      	bgt.n	8023b8c <_dtoa_r+0x9dc>
 8023b86:	d1de      	bne.n	8023b46 <_dtoa_r+0x996>
 8023b88:	07da      	lsls	r2, r3, #31
 8023b8a:	d5dc      	bpl.n	8023b46 <_dtoa_r+0x996>
 8023b8c:	2b39      	cmp	r3, #57	; 0x39
 8023b8e:	d1d8      	bne.n	8023b42 <_dtoa_r+0x992>
 8023b90:	9a02      	ldr	r2, [sp, #8]
 8023b92:	2339      	movs	r3, #57	; 0x39
 8023b94:	7013      	strb	r3, [r2, #0]
 8023b96:	4643      	mov	r3, r8
 8023b98:	4698      	mov	r8, r3
 8023b9a:	3b01      	subs	r3, #1
 8023b9c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023ba0:	2a39      	cmp	r2, #57	; 0x39
 8023ba2:	d051      	beq.n	8023c48 <_dtoa_r+0xa98>
 8023ba4:	3201      	adds	r2, #1
 8023ba6:	701a      	strb	r2, [r3, #0]
 8023ba8:	e745      	b.n	8023a36 <_dtoa_r+0x886>
 8023baa:	2a00      	cmp	r2, #0
 8023bac:	dd03      	ble.n	8023bb6 <_dtoa_r+0xa06>
 8023bae:	2b39      	cmp	r3, #57	; 0x39
 8023bb0:	d0ee      	beq.n	8023b90 <_dtoa_r+0x9e0>
 8023bb2:	3301      	adds	r3, #1
 8023bb4:	e7c7      	b.n	8023b46 <_dtoa_r+0x996>
 8023bb6:	9a05      	ldr	r2, [sp, #20]
 8023bb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023bba:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023bbe:	428a      	cmp	r2, r1
 8023bc0:	d02b      	beq.n	8023c1a <_dtoa_r+0xa6a>
 8023bc2:	4629      	mov	r1, r5
 8023bc4:	2300      	movs	r3, #0
 8023bc6:	220a      	movs	r2, #10
 8023bc8:	4630      	mov	r0, r6
 8023bca:	f000 fc3d 	bl	8024448 <__multadd>
 8023bce:	45b9      	cmp	r9, r7
 8023bd0:	4605      	mov	r5, r0
 8023bd2:	f04f 0300 	mov.w	r3, #0
 8023bd6:	f04f 020a 	mov.w	r2, #10
 8023bda:	4649      	mov	r1, r9
 8023bdc:	4630      	mov	r0, r6
 8023bde:	d107      	bne.n	8023bf0 <_dtoa_r+0xa40>
 8023be0:	f000 fc32 	bl	8024448 <__multadd>
 8023be4:	4681      	mov	r9, r0
 8023be6:	4607      	mov	r7, r0
 8023be8:	9b05      	ldr	r3, [sp, #20]
 8023bea:	3301      	adds	r3, #1
 8023bec:	9305      	str	r3, [sp, #20]
 8023bee:	e774      	b.n	8023ada <_dtoa_r+0x92a>
 8023bf0:	f000 fc2a 	bl	8024448 <__multadd>
 8023bf4:	4639      	mov	r1, r7
 8023bf6:	4681      	mov	r9, r0
 8023bf8:	2300      	movs	r3, #0
 8023bfa:	220a      	movs	r2, #10
 8023bfc:	4630      	mov	r0, r6
 8023bfe:	f000 fc23 	bl	8024448 <__multadd>
 8023c02:	4607      	mov	r7, r0
 8023c04:	e7f0      	b.n	8023be8 <_dtoa_r+0xa38>
 8023c06:	f1ba 0f00 	cmp.w	sl, #0
 8023c0a:	9a00      	ldr	r2, [sp, #0]
 8023c0c:	bfcc      	ite	gt
 8023c0e:	46d0      	movgt	r8, sl
 8023c10:	f04f 0801 	movle.w	r8, #1
 8023c14:	4490      	add	r8, r2
 8023c16:	f04f 0900 	mov.w	r9, #0
 8023c1a:	4629      	mov	r1, r5
 8023c1c:	2201      	movs	r2, #1
 8023c1e:	4630      	mov	r0, r6
 8023c20:	9302      	str	r3, [sp, #8]
 8023c22:	f000 fdc1 	bl	80247a8 <__lshift>
 8023c26:	4621      	mov	r1, r4
 8023c28:	4605      	mov	r5, r0
 8023c2a:	f000 fe29 	bl	8024880 <__mcmp>
 8023c2e:	2800      	cmp	r0, #0
 8023c30:	dcb1      	bgt.n	8023b96 <_dtoa_r+0x9e6>
 8023c32:	d102      	bne.n	8023c3a <_dtoa_r+0xa8a>
 8023c34:	9b02      	ldr	r3, [sp, #8]
 8023c36:	07db      	lsls	r3, r3, #31
 8023c38:	d4ad      	bmi.n	8023b96 <_dtoa_r+0x9e6>
 8023c3a:	4643      	mov	r3, r8
 8023c3c:	4698      	mov	r8, r3
 8023c3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023c42:	2a30      	cmp	r2, #48	; 0x30
 8023c44:	d0fa      	beq.n	8023c3c <_dtoa_r+0xa8c>
 8023c46:	e6f6      	b.n	8023a36 <_dtoa_r+0x886>
 8023c48:	9a00      	ldr	r2, [sp, #0]
 8023c4a:	429a      	cmp	r2, r3
 8023c4c:	d1a4      	bne.n	8023b98 <_dtoa_r+0x9e8>
 8023c4e:	f10b 0b01 	add.w	fp, fp, #1
 8023c52:	2331      	movs	r3, #49	; 0x31
 8023c54:	e778      	b.n	8023b48 <_dtoa_r+0x998>
 8023c56:	4b15      	ldr	r3, [pc, #84]	; (8023cac <_dtoa_r+0xafc>)
 8023c58:	f7ff bb12 	b.w	8023280 <_dtoa_r+0xd0>
 8023c5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023c5e:	2b00      	cmp	r3, #0
 8023c60:	f47f aaee 	bne.w	8023240 <_dtoa_r+0x90>
 8023c64:	4b12      	ldr	r3, [pc, #72]	; (8023cb0 <_dtoa_r+0xb00>)
 8023c66:	f7ff bb0b 	b.w	8023280 <_dtoa_r+0xd0>
 8023c6a:	f1ba 0f00 	cmp.w	sl, #0
 8023c6e:	dc03      	bgt.n	8023c78 <_dtoa_r+0xac8>
 8023c70:	9b07      	ldr	r3, [sp, #28]
 8023c72:	2b02      	cmp	r3, #2
 8023c74:	f73f aec7 	bgt.w	8023a06 <_dtoa_r+0x856>
 8023c78:	f8dd 8000 	ldr.w	r8, [sp]
 8023c7c:	4621      	mov	r1, r4
 8023c7e:	4628      	mov	r0, r5
 8023c80:	f7ff fa08 	bl	8023094 <quorem>
 8023c84:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8023c88:	f808 3b01 	strb.w	r3, [r8], #1
 8023c8c:	9a00      	ldr	r2, [sp, #0]
 8023c8e:	eba8 0202 	sub.w	r2, r8, r2
 8023c92:	4592      	cmp	sl, r2
 8023c94:	ddb7      	ble.n	8023c06 <_dtoa_r+0xa56>
 8023c96:	4629      	mov	r1, r5
 8023c98:	2300      	movs	r3, #0
 8023c9a:	220a      	movs	r2, #10
 8023c9c:	4630      	mov	r0, r6
 8023c9e:	f000 fbd3 	bl	8024448 <__multadd>
 8023ca2:	4605      	mov	r5, r0
 8023ca4:	e7ea      	b.n	8023c7c <_dtoa_r+0xacc>
 8023ca6:	bf00      	nop
 8023ca8:	08041621 	.word	0x08041621
 8023cac:	08041811 	.word	0x08041811
 8023cb0:	080415b5 	.word	0x080415b5

08023cb4 <__errno>:
 8023cb4:	4b01      	ldr	r3, [pc, #4]	; (8023cbc <__errno+0x8>)
 8023cb6:	6818      	ldr	r0, [r3, #0]
 8023cb8:	4770      	bx	lr
 8023cba:	bf00      	nop
 8023cbc:	2000045c 	.word	0x2000045c

08023cc0 <__sflush_r>:
 8023cc0:	898a      	ldrh	r2, [r1, #12]
 8023cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023cc6:	4605      	mov	r5, r0
 8023cc8:	0710      	lsls	r0, r2, #28
 8023cca:	460c      	mov	r4, r1
 8023ccc:	d458      	bmi.n	8023d80 <__sflush_r+0xc0>
 8023cce:	684b      	ldr	r3, [r1, #4]
 8023cd0:	2b00      	cmp	r3, #0
 8023cd2:	dc05      	bgt.n	8023ce0 <__sflush_r+0x20>
 8023cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023cd6:	2b00      	cmp	r3, #0
 8023cd8:	dc02      	bgt.n	8023ce0 <__sflush_r+0x20>
 8023cda:	2000      	movs	r0, #0
 8023cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023ce2:	2e00      	cmp	r6, #0
 8023ce4:	d0f9      	beq.n	8023cda <__sflush_r+0x1a>
 8023ce6:	2300      	movs	r3, #0
 8023ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023cec:	682f      	ldr	r7, [r5, #0]
 8023cee:	602b      	str	r3, [r5, #0]
 8023cf0:	d032      	beq.n	8023d58 <__sflush_r+0x98>
 8023cf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023cf4:	89a3      	ldrh	r3, [r4, #12]
 8023cf6:	075a      	lsls	r2, r3, #29
 8023cf8:	d505      	bpl.n	8023d06 <__sflush_r+0x46>
 8023cfa:	6863      	ldr	r3, [r4, #4]
 8023cfc:	1ac0      	subs	r0, r0, r3
 8023cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023d00:	b10b      	cbz	r3, 8023d06 <__sflush_r+0x46>
 8023d02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023d04:	1ac0      	subs	r0, r0, r3
 8023d06:	2300      	movs	r3, #0
 8023d08:	4602      	mov	r2, r0
 8023d0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023d0c:	6a21      	ldr	r1, [r4, #32]
 8023d0e:	4628      	mov	r0, r5
 8023d10:	47b0      	blx	r6
 8023d12:	1c43      	adds	r3, r0, #1
 8023d14:	89a3      	ldrh	r3, [r4, #12]
 8023d16:	d106      	bne.n	8023d26 <__sflush_r+0x66>
 8023d18:	6829      	ldr	r1, [r5, #0]
 8023d1a:	291d      	cmp	r1, #29
 8023d1c:	d82c      	bhi.n	8023d78 <__sflush_r+0xb8>
 8023d1e:	4a2a      	ldr	r2, [pc, #168]	; (8023dc8 <__sflush_r+0x108>)
 8023d20:	40ca      	lsrs	r2, r1
 8023d22:	07d6      	lsls	r6, r2, #31
 8023d24:	d528      	bpl.n	8023d78 <__sflush_r+0xb8>
 8023d26:	2200      	movs	r2, #0
 8023d28:	6062      	str	r2, [r4, #4]
 8023d2a:	04d9      	lsls	r1, r3, #19
 8023d2c:	6922      	ldr	r2, [r4, #16]
 8023d2e:	6022      	str	r2, [r4, #0]
 8023d30:	d504      	bpl.n	8023d3c <__sflush_r+0x7c>
 8023d32:	1c42      	adds	r2, r0, #1
 8023d34:	d101      	bne.n	8023d3a <__sflush_r+0x7a>
 8023d36:	682b      	ldr	r3, [r5, #0]
 8023d38:	b903      	cbnz	r3, 8023d3c <__sflush_r+0x7c>
 8023d3a:	6560      	str	r0, [r4, #84]	; 0x54
 8023d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023d3e:	602f      	str	r7, [r5, #0]
 8023d40:	2900      	cmp	r1, #0
 8023d42:	d0ca      	beq.n	8023cda <__sflush_r+0x1a>
 8023d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023d48:	4299      	cmp	r1, r3
 8023d4a:	d002      	beq.n	8023d52 <__sflush_r+0x92>
 8023d4c:	4628      	mov	r0, r5
 8023d4e:	f7fd f85d 	bl	8020e0c <_free_r>
 8023d52:	2000      	movs	r0, #0
 8023d54:	6360      	str	r0, [r4, #52]	; 0x34
 8023d56:	e7c1      	b.n	8023cdc <__sflush_r+0x1c>
 8023d58:	6a21      	ldr	r1, [r4, #32]
 8023d5a:	2301      	movs	r3, #1
 8023d5c:	4628      	mov	r0, r5
 8023d5e:	47b0      	blx	r6
 8023d60:	1c41      	adds	r1, r0, #1
 8023d62:	d1c7      	bne.n	8023cf4 <__sflush_r+0x34>
 8023d64:	682b      	ldr	r3, [r5, #0]
 8023d66:	2b00      	cmp	r3, #0
 8023d68:	d0c4      	beq.n	8023cf4 <__sflush_r+0x34>
 8023d6a:	2b1d      	cmp	r3, #29
 8023d6c:	d001      	beq.n	8023d72 <__sflush_r+0xb2>
 8023d6e:	2b16      	cmp	r3, #22
 8023d70:	d101      	bne.n	8023d76 <__sflush_r+0xb6>
 8023d72:	602f      	str	r7, [r5, #0]
 8023d74:	e7b1      	b.n	8023cda <__sflush_r+0x1a>
 8023d76:	89a3      	ldrh	r3, [r4, #12]
 8023d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023d7c:	81a3      	strh	r3, [r4, #12]
 8023d7e:	e7ad      	b.n	8023cdc <__sflush_r+0x1c>
 8023d80:	690f      	ldr	r7, [r1, #16]
 8023d82:	2f00      	cmp	r7, #0
 8023d84:	d0a9      	beq.n	8023cda <__sflush_r+0x1a>
 8023d86:	0793      	lsls	r3, r2, #30
 8023d88:	680e      	ldr	r6, [r1, #0]
 8023d8a:	bf08      	it	eq
 8023d8c:	694b      	ldreq	r3, [r1, #20]
 8023d8e:	600f      	str	r7, [r1, #0]
 8023d90:	bf18      	it	ne
 8023d92:	2300      	movne	r3, #0
 8023d94:	eba6 0807 	sub.w	r8, r6, r7
 8023d98:	608b      	str	r3, [r1, #8]
 8023d9a:	f1b8 0f00 	cmp.w	r8, #0
 8023d9e:	dd9c      	ble.n	8023cda <__sflush_r+0x1a>
 8023da0:	6a21      	ldr	r1, [r4, #32]
 8023da2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023da4:	4643      	mov	r3, r8
 8023da6:	463a      	mov	r2, r7
 8023da8:	4628      	mov	r0, r5
 8023daa:	47b0      	blx	r6
 8023dac:	2800      	cmp	r0, #0
 8023dae:	dc06      	bgt.n	8023dbe <__sflush_r+0xfe>
 8023db0:	89a3      	ldrh	r3, [r4, #12]
 8023db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023db6:	81a3      	strh	r3, [r4, #12]
 8023db8:	f04f 30ff 	mov.w	r0, #4294967295
 8023dbc:	e78e      	b.n	8023cdc <__sflush_r+0x1c>
 8023dbe:	4407      	add	r7, r0
 8023dc0:	eba8 0800 	sub.w	r8, r8, r0
 8023dc4:	e7e9      	b.n	8023d9a <__sflush_r+0xda>
 8023dc6:	bf00      	nop
 8023dc8:	20400001 	.word	0x20400001

08023dcc <_fflush_r>:
 8023dcc:	b538      	push	{r3, r4, r5, lr}
 8023dce:	690b      	ldr	r3, [r1, #16]
 8023dd0:	4605      	mov	r5, r0
 8023dd2:	460c      	mov	r4, r1
 8023dd4:	b913      	cbnz	r3, 8023ddc <_fflush_r+0x10>
 8023dd6:	2500      	movs	r5, #0
 8023dd8:	4628      	mov	r0, r5
 8023dda:	bd38      	pop	{r3, r4, r5, pc}
 8023ddc:	b118      	cbz	r0, 8023de6 <_fflush_r+0x1a>
 8023dde:	6983      	ldr	r3, [r0, #24]
 8023de0:	b90b      	cbnz	r3, 8023de6 <_fflush_r+0x1a>
 8023de2:	f000 f887 	bl	8023ef4 <__sinit>
 8023de6:	4b14      	ldr	r3, [pc, #80]	; (8023e38 <_fflush_r+0x6c>)
 8023de8:	429c      	cmp	r4, r3
 8023dea:	d11b      	bne.n	8023e24 <_fflush_r+0x58>
 8023dec:	686c      	ldr	r4, [r5, #4]
 8023dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023df2:	2b00      	cmp	r3, #0
 8023df4:	d0ef      	beq.n	8023dd6 <_fflush_r+0xa>
 8023df6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023df8:	07d0      	lsls	r0, r2, #31
 8023dfa:	d404      	bmi.n	8023e06 <_fflush_r+0x3a>
 8023dfc:	0599      	lsls	r1, r3, #22
 8023dfe:	d402      	bmi.n	8023e06 <_fflush_r+0x3a>
 8023e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023e02:	f000 fa27 	bl	8024254 <__retarget_lock_acquire_recursive>
 8023e06:	4628      	mov	r0, r5
 8023e08:	4621      	mov	r1, r4
 8023e0a:	f7ff ff59 	bl	8023cc0 <__sflush_r>
 8023e0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023e10:	07da      	lsls	r2, r3, #31
 8023e12:	4605      	mov	r5, r0
 8023e14:	d4e0      	bmi.n	8023dd8 <_fflush_r+0xc>
 8023e16:	89a3      	ldrh	r3, [r4, #12]
 8023e18:	059b      	lsls	r3, r3, #22
 8023e1a:	d4dd      	bmi.n	8023dd8 <_fflush_r+0xc>
 8023e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023e1e:	f000 fa1b 	bl	8024258 <__retarget_lock_release_recursive>
 8023e22:	e7d9      	b.n	8023dd8 <_fflush_r+0xc>
 8023e24:	4b05      	ldr	r3, [pc, #20]	; (8023e3c <_fflush_r+0x70>)
 8023e26:	429c      	cmp	r4, r3
 8023e28:	d101      	bne.n	8023e2e <_fflush_r+0x62>
 8023e2a:	68ac      	ldr	r4, [r5, #8]
 8023e2c:	e7df      	b.n	8023dee <_fflush_r+0x22>
 8023e2e:	4b04      	ldr	r3, [pc, #16]	; (8023e40 <_fflush_r+0x74>)
 8023e30:	429c      	cmp	r4, r3
 8023e32:	bf08      	it	eq
 8023e34:	68ec      	ldreq	r4, [r5, #12]
 8023e36:	e7da      	b.n	8023dee <_fflush_r+0x22>
 8023e38:	08041654 	.word	0x08041654
 8023e3c:	08041674 	.word	0x08041674
 8023e40:	08041634 	.word	0x08041634

08023e44 <std>:
 8023e44:	2300      	movs	r3, #0
 8023e46:	b510      	push	{r4, lr}
 8023e48:	4604      	mov	r4, r0
 8023e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8023e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023e52:	6083      	str	r3, [r0, #8]
 8023e54:	8181      	strh	r1, [r0, #12]
 8023e56:	6643      	str	r3, [r0, #100]	; 0x64
 8023e58:	81c2      	strh	r2, [r0, #14]
 8023e5a:	6183      	str	r3, [r0, #24]
 8023e5c:	4619      	mov	r1, r3
 8023e5e:	2208      	movs	r2, #8
 8023e60:	305c      	adds	r0, #92	; 0x5c
 8023e62:	f7fc fd4d 	bl	8020900 <memset>
 8023e66:	4b05      	ldr	r3, [pc, #20]	; (8023e7c <std+0x38>)
 8023e68:	6263      	str	r3, [r4, #36]	; 0x24
 8023e6a:	4b05      	ldr	r3, [pc, #20]	; (8023e80 <std+0x3c>)
 8023e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8023e6e:	4b05      	ldr	r3, [pc, #20]	; (8023e84 <std+0x40>)
 8023e70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023e72:	4b05      	ldr	r3, [pc, #20]	; (8023e88 <std+0x44>)
 8023e74:	6224      	str	r4, [r4, #32]
 8023e76:	6323      	str	r3, [r4, #48]	; 0x30
 8023e78:	bd10      	pop	{r4, pc}
 8023e7a:	bf00      	nop
 8023e7c:	08021b6d 	.word	0x08021b6d
 8023e80:	08021b93 	.word	0x08021b93
 8023e84:	08021bcb 	.word	0x08021bcb
 8023e88:	08021bef 	.word	0x08021bef

08023e8c <_cleanup_r>:
 8023e8c:	4901      	ldr	r1, [pc, #4]	; (8023e94 <_cleanup_r+0x8>)
 8023e8e:	f000 b8c1 	b.w	8024014 <_fwalk_reent>
 8023e92:	bf00      	nop
 8023e94:	08023dcd 	.word	0x08023dcd

08023e98 <__sfmoreglue>:
 8023e98:	b570      	push	{r4, r5, r6, lr}
 8023e9a:	1e4a      	subs	r2, r1, #1
 8023e9c:	2568      	movs	r5, #104	; 0x68
 8023e9e:	4355      	muls	r5, r2
 8023ea0:	460e      	mov	r6, r1
 8023ea2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023ea6:	f7fd f801 	bl	8020eac <_malloc_r>
 8023eaa:	4604      	mov	r4, r0
 8023eac:	b140      	cbz	r0, 8023ec0 <__sfmoreglue+0x28>
 8023eae:	2100      	movs	r1, #0
 8023eb0:	e9c0 1600 	strd	r1, r6, [r0]
 8023eb4:	300c      	adds	r0, #12
 8023eb6:	60a0      	str	r0, [r4, #8]
 8023eb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023ebc:	f7fc fd20 	bl	8020900 <memset>
 8023ec0:	4620      	mov	r0, r4
 8023ec2:	bd70      	pop	{r4, r5, r6, pc}

08023ec4 <__sfp_lock_acquire>:
 8023ec4:	4801      	ldr	r0, [pc, #4]	; (8023ecc <__sfp_lock_acquire+0x8>)
 8023ec6:	f000 b9c5 	b.w	8024254 <__retarget_lock_acquire_recursive>
 8023eca:	bf00      	nop
 8023ecc:	200381d4 	.word	0x200381d4

08023ed0 <__sfp_lock_release>:
 8023ed0:	4801      	ldr	r0, [pc, #4]	; (8023ed8 <__sfp_lock_release+0x8>)
 8023ed2:	f000 b9c1 	b.w	8024258 <__retarget_lock_release_recursive>
 8023ed6:	bf00      	nop
 8023ed8:	200381d4 	.word	0x200381d4

08023edc <__sinit_lock_acquire>:
 8023edc:	4801      	ldr	r0, [pc, #4]	; (8023ee4 <__sinit_lock_acquire+0x8>)
 8023ede:	f000 b9b9 	b.w	8024254 <__retarget_lock_acquire_recursive>
 8023ee2:	bf00      	nop
 8023ee4:	200381cf 	.word	0x200381cf

08023ee8 <__sinit_lock_release>:
 8023ee8:	4801      	ldr	r0, [pc, #4]	; (8023ef0 <__sinit_lock_release+0x8>)
 8023eea:	f000 b9b5 	b.w	8024258 <__retarget_lock_release_recursive>
 8023eee:	bf00      	nop
 8023ef0:	200381cf 	.word	0x200381cf

08023ef4 <__sinit>:
 8023ef4:	b510      	push	{r4, lr}
 8023ef6:	4604      	mov	r4, r0
 8023ef8:	f7ff fff0 	bl	8023edc <__sinit_lock_acquire>
 8023efc:	69a3      	ldr	r3, [r4, #24]
 8023efe:	b11b      	cbz	r3, 8023f08 <__sinit+0x14>
 8023f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023f04:	f7ff bff0 	b.w	8023ee8 <__sinit_lock_release>
 8023f08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023f0c:	6523      	str	r3, [r4, #80]	; 0x50
 8023f0e:	4b13      	ldr	r3, [pc, #76]	; (8023f5c <__sinit+0x68>)
 8023f10:	4a13      	ldr	r2, [pc, #76]	; (8023f60 <__sinit+0x6c>)
 8023f12:	681b      	ldr	r3, [r3, #0]
 8023f14:	62a2      	str	r2, [r4, #40]	; 0x28
 8023f16:	42a3      	cmp	r3, r4
 8023f18:	bf04      	itt	eq
 8023f1a:	2301      	moveq	r3, #1
 8023f1c:	61a3      	streq	r3, [r4, #24]
 8023f1e:	4620      	mov	r0, r4
 8023f20:	f000 f820 	bl	8023f64 <__sfp>
 8023f24:	6060      	str	r0, [r4, #4]
 8023f26:	4620      	mov	r0, r4
 8023f28:	f000 f81c 	bl	8023f64 <__sfp>
 8023f2c:	60a0      	str	r0, [r4, #8]
 8023f2e:	4620      	mov	r0, r4
 8023f30:	f000 f818 	bl	8023f64 <__sfp>
 8023f34:	2200      	movs	r2, #0
 8023f36:	60e0      	str	r0, [r4, #12]
 8023f38:	2104      	movs	r1, #4
 8023f3a:	6860      	ldr	r0, [r4, #4]
 8023f3c:	f7ff ff82 	bl	8023e44 <std>
 8023f40:	68a0      	ldr	r0, [r4, #8]
 8023f42:	2201      	movs	r2, #1
 8023f44:	2109      	movs	r1, #9
 8023f46:	f7ff ff7d 	bl	8023e44 <std>
 8023f4a:	68e0      	ldr	r0, [r4, #12]
 8023f4c:	2202      	movs	r2, #2
 8023f4e:	2112      	movs	r1, #18
 8023f50:	f7ff ff78 	bl	8023e44 <std>
 8023f54:	2301      	movs	r3, #1
 8023f56:	61a3      	str	r3, [r4, #24]
 8023f58:	e7d2      	b.n	8023f00 <__sinit+0xc>
 8023f5a:	bf00      	nop
 8023f5c:	08041034 	.word	0x08041034
 8023f60:	08023e8d 	.word	0x08023e8d

08023f64 <__sfp>:
 8023f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f66:	4607      	mov	r7, r0
 8023f68:	f7ff ffac 	bl	8023ec4 <__sfp_lock_acquire>
 8023f6c:	4b1e      	ldr	r3, [pc, #120]	; (8023fe8 <__sfp+0x84>)
 8023f6e:	681e      	ldr	r6, [r3, #0]
 8023f70:	69b3      	ldr	r3, [r6, #24]
 8023f72:	b913      	cbnz	r3, 8023f7a <__sfp+0x16>
 8023f74:	4630      	mov	r0, r6
 8023f76:	f7ff ffbd 	bl	8023ef4 <__sinit>
 8023f7a:	3648      	adds	r6, #72	; 0x48
 8023f7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023f80:	3b01      	subs	r3, #1
 8023f82:	d503      	bpl.n	8023f8c <__sfp+0x28>
 8023f84:	6833      	ldr	r3, [r6, #0]
 8023f86:	b30b      	cbz	r3, 8023fcc <__sfp+0x68>
 8023f88:	6836      	ldr	r6, [r6, #0]
 8023f8a:	e7f7      	b.n	8023f7c <__sfp+0x18>
 8023f8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023f90:	b9d5      	cbnz	r5, 8023fc8 <__sfp+0x64>
 8023f92:	4b16      	ldr	r3, [pc, #88]	; (8023fec <__sfp+0x88>)
 8023f94:	60e3      	str	r3, [r4, #12]
 8023f96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023f9a:	6665      	str	r5, [r4, #100]	; 0x64
 8023f9c:	f000 f958 	bl	8024250 <__retarget_lock_init_recursive>
 8023fa0:	f7ff ff96 	bl	8023ed0 <__sfp_lock_release>
 8023fa4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023fa8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023fac:	6025      	str	r5, [r4, #0]
 8023fae:	61a5      	str	r5, [r4, #24]
 8023fb0:	2208      	movs	r2, #8
 8023fb2:	4629      	mov	r1, r5
 8023fb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023fb8:	f7fc fca2 	bl	8020900 <memset>
 8023fbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023fc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023fc4:	4620      	mov	r0, r4
 8023fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fc8:	3468      	adds	r4, #104	; 0x68
 8023fca:	e7d9      	b.n	8023f80 <__sfp+0x1c>
 8023fcc:	2104      	movs	r1, #4
 8023fce:	4638      	mov	r0, r7
 8023fd0:	f7ff ff62 	bl	8023e98 <__sfmoreglue>
 8023fd4:	4604      	mov	r4, r0
 8023fd6:	6030      	str	r0, [r6, #0]
 8023fd8:	2800      	cmp	r0, #0
 8023fda:	d1d5      	bne.n	8023f88 <__sfp+0x24>
 8023fdc:	f7ff ff78 	bl	8023ed0 <__sfp_lock_release>
 8023fe0:	230c      	movs	r3, #12
 8023fe2:	603b      	str	r3, [r7, #0]
 8023fe4:	e7ee      	b.n	8023fc4 <__sfp+0x60>
 8023fe6:	bf00      	nop
 8023fe8:	08041034 	.word	0x08041034
 8023fec:	ffff0001 	.word	0xffff0001

08023ff0 <fiprintf>:
 8023ff0:	b40e      	push	{r1, r2, r3}
 8023ff2:	b503      	push	{r0, r1, lr}
 8023ff4:	4601      	mov	r1, r0
 8023ff6:	ab03      	add	r3, sp, #12
 8023ff8:	4805      	ldr	r0, [pc, #20]	; (8024010 <fiprintf+0x20>)
 8023ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8023ffe:	6800      	ldr	r0, [r0, #0]
 8024000:	9301      	str	r3, [sp, #4]
 8024002:	f001 f8c9 	bl	8025198 <_vfiprintf_r>
 8024006:	b002      	add	sp, #8
 8024008:	f85d eb04 	ldr.w	lr, [sp], #4
 802400c:	b003      	add	sp, #12
 802400e:	4770      	bx	lr
 8024010:	2000045c 	.word	0x2000045c

08024014 <_fwalk_reent>:
 8024014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024018:	4606      	mov	r6, r0
 802401a:	4688      	mov	r8, r1
 802401c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8024020:	2700      	movs	r7, #0
 8024022:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024026:	f1b9 0901 	subs.w	r9, r9, #1
 802402a:	d505      	bpl.n	8024038 <_fwalk_reent+0x24>
 802402c:	6824      	ldr	r4, [r4, #0]
 802402e:	2c00      	cmp	r4, #0
 8024030:	d1f7      	bne.n	8024022 <_fwalk_reent+0xe>
 8024032:	4638      	mov	r0, r7
 8024034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024038:	89ab      	ldrh	r3, [r5, #12]
 802403a:	2b01      	cmp	r3, #1
 802403c:	d907      	bls.n	802404e <_fwalk_reent+0x3a>
 802403e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024042:	3301      	adds	r3, #1
 8024044:	d003      	beq.n	802404e <_fwalk_reent+0x3a>
 8024046:	4629      	mov	r1, r5
 8024048:	4630      	mov	r0, r6
 802404a:	47c0      	blx	r8
 802404c:	4307      	orrs	r7, r0
 802404e:	3568      	adds	r5, #104	; 0x68
 8024050:	e7e9      	b.n	8024026 <_fwalk_reent+0x12>
	...

08024054 <_findenv_r>:
 8024054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024058:	4607      	mov	r7, r0
 802405a:	4689      	mov	r9, r1
 802405c:	4616      	mov	r6, r2
 802405e:	f001 fbf9 	bl	8025854 <__env_lock>
 8024062:	4b18      	ldr	r3, [pc, #96]	; (80240c4 <_findenv_r+0x70>)
 8024064:	681c      	ldr	r4, [r3, #0]
 8024066:	469a      	mov	sl, r3
 8024068:	b134      	cbz	r4, 8024078 <_findenv_r+0x24>
 802406a:	464b      	mov	r3, r9
 802406c:	4698      	mov	r8, r3
 802406e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8024072:	b139      	cbz	r1, 8024084 <_findenv_r+0x30>
 8024074:	293d      	cmp	r1, #61	; 0x3d
 8024076:	d1f9      	bne.n	802406c <_findenv_r+0x18>
 8024078:	4638      	mov	r0, r7
 802407a:	f001 fbf1 	bl	8025860 <__env_unlock>
 802407e:	2000      	movs	r0, #0
 8024080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024084:	eba8 0809 	sub.w	r8, r8, r9
 8024088:	46a3      	mov	fp, r4
 802408a:	f854 0b04 	ldr.w	r0, [r4], #4
 802408e:	2800      	cmp	r0, #0
 8024090:	d0f2      	beq.n	8024078 <_findenv_r+0x24>
 8024092:	4642      	mov	r2, r8
 8024094:	4649      	mov	r1, r9
 8024096:	f7fe fb29 	bl	80226ec <strncmp>
 802409a:	2800      	cmp	r0, #0
 802409c:	d1f4      	bne.n	8024088 <_findenv_r+0x34>
 802409e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80240a2:	eb03 0508 	add.w	r5, r3, r8
 80240a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80240aa:	2b3d      	cmp	r3, #61	; 0x3d
 80240ac:	d1ec      	bne.n	8024088 <_findenv_r+0x34>
 80240ae:	f8da 3000 	ldr.w	r3, [sl]
 80240b2:	ebab 0303 	sub.w	r3, fp, r3
 80240b6:	109b      	asrs	r3, r3, #2
 80240b8:	4638      	mov	r0, r7
 80240ba:	6033      	str	r3, [r6, #0]
 80240bc:	f001 fbd0 	bl	8025860 <__env_unlock>
 80240c0:	1c68      	adds	r0, r5, #1
 80240c2:	e7dd      	b.n	8024080 <_findenv_r+0x2c>
 80240c4:	2000024c 	.word	0x2000024c

080240c8 <_getenv_r>:
 80240c8:	b507      	push	{r0, r1, r2, lr}
 80240ca:	aa01      	add	r2, sp, #4
 80240cc:	f7ff ffc2 	bl	8024054 <_findenv_r>
 80240d0:	b003      	add	sp, #12
 80240d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080240d8 <__gettzinfo>:
 80240d8:	4800      	ldr	r0, [pc, #0]	; (80240dc <__gettzinfo+0x4>)
 80240da:	4770      	bx	lr
 80240dc:	200004c8 	.word	0x200004c8

080240e0 <gmtime_r>:
 80240e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80240e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80240e8:	460c      	mov	r4, r1
 80240ea:	4a51      	ldr	r2, [pc, #324]	; (8024230 <gmtime_r+0x150>)
 80240ec:	2300      	movs	r3, #0
 80240ee:	4630      	mov	r0, r6
 80240f0:	4639      	mov	r1, r7
 80240f2:	f7dc f90d 	bl	8000310 <__aeabi_ldivmod>
 80240f6:	4639      	mov	r1, r7
 80240f8:	4605      	mov	r5, r0
 80240fa:	4a4d      	ldr	r2, [pc, #308]	; (8024230 <gmtime_r+0x150>)
 80240fc:	4630      	mov	r0, r6
 80240fe:	2300      	movs	r3, #0
 8024100:	f7dc f906 	bl	8000310 <__aeabi_ldivmod>
 8024104:	2a00      	cmp	r2, #0
 8024106:	bfbc      	itt	lt
 8024108:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802410c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8024110:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8024114:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8024118:	fbb2 f3f1 	udiv	r3, r2, r1
 802411c:	fb01 2213 	mls	r2, r1, r3, r2
 8024120:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8024124:	bfac      	ite	ge
 8024126:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 802412a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802412e:	60a3      	str	r3, [r4, #8]
 8024130:	fbb2 f3f1 	udiv	r3, r2, r1
 8024134:	fb01 2213 	mls	r2, r1, r3, r2
 8024138:	6063      	str	r3, [r4, #4]
 802413a:	6022      	str	r2, [r4, #0]
 802413c:	1cc3      	adds	r3, r0, #3
 802413e:	2207      	movs	r2, #7
 8024140:	fb93 f2f2 	sdiv	r2, r3, r2
 8024144:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8024148:	1a9b      	subs	r3, r3, r2
 802414a:	bf48      	it	mi
 802414c:	3307      	addmi	r3, #7
 802414e:	2800      	cmp	r0, #0
 8024150:	61a3      	str	r3, [r4, #24]
 8024152:	bfb8      	it	lt
 8024154:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8024158:	4936      	ldr	r1, [pc, #216]	; (8024234 <gmtime_r+0x154>)
 802415a:	bfae      	itee	ge
 802415c:	fb90 f1f1 	sdivge	r1, r0, r1
 8024160:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8024164:	fb93 f1f1 	sdivlt	r1, r3, r1
 8024168:	4b33      	ldr	r3, [pc, #204]	; (8024238 <gmtime_r+0x158>)
 802416a:	fb03 0001 	mla	r0, r3, r1, r0
 802416e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8024172:	fbb0 f2f2 	udiv	r2, r0, r2
 8024176:	4402      	add	r2, r0
 8024178:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 802417c:	fbb0 f3fc 	udiv	r3, r0, ip
 8024180:	1ad2      	subs	r2, r2, r3
 8024182:	f240 176d 	movw	r7, #365	; 0x16d
 8024186:	4b2d      	ldr	r3, [pc, #180]	; (802423c <gmtime_r+0x15c>)
 8024188:	fbb0 f3f3 	udiv	r3, r0, r3
 802418c:	2664      	movs	r6, #100	; 0x64
 802418e:	1ad3      	subs	r3, r2, r3
 8024190:	fbb3 f5f7 	udiv	r5, r3, r7
 8024194:	fbb3 f3fc 	udiv	r3, r3, ip
 8024198:	fbb5 f2f6 	udiv	r2, r5, r6
 802419c:	1ad3      	subs	r3, r2, r3
 802419e:	4403      	add	r3, r0
 80241a0:	fb07 3315 	mls	r3, r7, r5, r3
 80241a4:	2099      	movs	r0, #153	; 0x99
 80241a6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80241aa:	f10c 0c02 	add.w	ip, ip, #2
 80241ae:	f103 0e01 	add.w	lr, r3, #1
 80241b2:	fbbc f7f0 	udiv	r7, ip, r0
 80241b6:	4378      	muls	r0, r7
 80241b8:	3002      	adds	r0, #2
 80241ba:	f04f 0805 	mov.w	r8, #5
 80241be:	fbb0 f0f8 	udiv	r0, r0, r8
 80241c2:	ebae 0000 	sub.w	r0, lr, r0
 80241c6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80241ca:	45f4      	cmp	ip, lr
 80241cc:	bf94      	ite	ls
 80241ce:	f04f 0c02 	movls.w	ip, #2
 80241d2:	f06f 0c09 	mvnhi.w	ip, #9
 80241d6:	4467      	add	r7, ip
 80241d8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80241dc:	fb0c 5101 	mla	r1, ip, r1, r5
 80241e0:	2f01      	cmp	r7, #1
 80241e2:	bf98      	it	ls
 80241e4:	3101      	addls	r1, #1
 80241e6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80241ea:	d30c      	bcc.n	8024206 <gmtime_r+0x126>
 80241ec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80241f0:	61e3      	str	r3, [r4, #28]
 80241f2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80241f6:	2300      	movs	r3, #0
 80241f8:	60e0      	str	r0, [r4, #12]
 80241fa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80241fe:	6223      	str	r3, [r4, #32]
 8024200:	4620      	mov	r0, r4
 8024202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024206:	f015 0f03 	tst.w	r5, #3
 802420a:	d102      	bne.n	8024212 <gmtime_r+0x132>
 802420c:	fb06 5212 	mls	r2, r6, r2, r5
 8024210:	b95a      	cbnz	r2, 802422a <gmtime_r+0x14a>
 8024212:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8024216:	fbb5 f2f6 	udiv	r2, r5, r6
 802421a:	fb06 5212 	mls	r2, r6, r2, r5
 802421e:	fab2 f282 	clz	r2, r2
 8024222:	0952      	lsrs	r2, r2, #5
 8024224:	333b      	adds	r3, #59	; 0x3b
 8024226:	4413      	add	r3, r2
 8024228:	e7e2      	b.n	80241f0 <gmtime_r+0x110>
 802422a:	2201      	movs	r2, #1
 802422c:	e7fa      	b.n	8024224 <gmtime_r+0x144>
 802422e:	bf00      	nop
 8024230:	00015180 	.word	0x00015180
 8024234:	00023ab1 	.word	0x00023ab1
 8024238:	fffdc54f 	.word	0xfffdc54f
 802423c:	00023ab0 	.word	0x00023ab0

08024240 <labs>:
 8024240:	2800      	cmp	r0, #0
 8024242:	bfb8      	it	lt
 8024244:	4240      	neglt	r0, r0
 8024246:	4770      	bx	lr

08024248 <_localeconv_r>:
 8024248:	4800      	ldr	r0, [pc, #0]	; (802424c <_localeconv_r+0x4>)
 802424a:	4770      	bx	lr
 802424c:	20000610 	.word	0x20000610

08024250 <__retarget_lock_init_recursive>:
 8024250:	4770      	bx	lr

08024252 <__retarget_lock_acquire>:
 8024252:	4770      	bx	lr

08024254 <__retarget_lock_acquire_recursive>:
 8024254:	4770      	bx	lr

08024256 <__retarget_lock_release>:
 8024256:	4770      	bx	lr

08024258 <__retarget_lock_release_recursive>:
 8024258:	4770      	bx	lr
	...

0802425c <_lseek_r>:
 802425c:	b538      	push	{r3, r4, r5, lr}
 802425e:	4d07      	ldr	r5, [pc, #28]	; (802427c <_lseek_r+0x20>)
 8024260:	4604      	mov	r4, r0
 8024262:	4608      	mov	r0, r1
 8024264:	4611      	mov	r1, r2
 8024266:	2200      	movs	r2, #0
 8024268:	602a      	str	r2, [r5, #0]
 802426a:	461a      	mov	r2, r3
 802426c:	f7e1 fa32 	bl	80056d4 <_lseek>
 8024270:	1c43      	adds	r3, r0, #1
 8024272:	d102      	bne.n	802427a <_lseek_r+0x1e>
 8024274:	682b      	ldr	r3, [r5, #0]
 8024276:	b103      	cbz	r3, 802427a <_lseek_r+0x1e>
 8024278:	6023      	str	r3, [r4, #0]
 802427a:	bd38      	pop	{r3, r4, r5, pc}
 802427c:	200368f0 	.word	0x200368f0

08024280 <__swhatbuf_r>:
 8024280:	b570      	push	{r4, r5, r6, lr}
 8024282:	460e      	mov	r6, r1
 8024284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024288:	2900      	cmp	r1, #0
 802428a:	b096      	sub	sp, #88	; 0x58
 802428c:	4614      	mov	r4, r2
 802428e:	461d      	mov	r5, r3
 8024290:	da07      	bge.n	80242a2 <__swhatbuf_r+0x22>
 8024292:	2300      	movs	r3, #0
 8024294:	602b      	str	r3, [r5, #0]
 8024296:	89b3      	ldrh	r3, [r6, #12]
 8024298:	061a      	lsls	r2, r3, #24
 802429a:	d410      	bmi.n	80242be <__swhatbuf_r+0x3e>
 802429c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80242a0:	e00e      	b.n	80242c0 <__swhatbuf_r+0x40>
 80242a2:	466a      	mov	r2, sp
 80242a4:	f001 fae2 	bl	802586c <_fstat_r>
 80242a8:	2800      	cmp	r0, #0
 80242aa:	dbf2      	blt.n	8024292 <__swhatbuf_r+0x12>
 80242ac:	9a01      	ldr	r2, [sp, #4]
 80242ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80242b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80242b6:	425a      	negs	r2, r3
 80242b8:	415a      	adcs	r2, r3
 80242ba:	602a      	str	r2, [r5, #0]
 80242bc:	e7ee      	b.n	802429c <__swhatbuf_r+0x1c>
 80242be:	2340      	movs	r3, #64	; 0x40
 80242c0:	2000      	movs	r0, #0
 80242c2:	6023      	str	r3, [r4, #0]
 80242c4:	b016      	add	sp, #88	; 0x58
 80242c6:	bd70      	pop	{r4, r5, r6, pc}

080242c8 <__smakebuf_r>:
 80242c8:	898b      	ldrh	r3, [r1, #12]
 80242ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80242cc:	079d      	lsls	r5, r3, #30
 80242ce:	4606      	mov	r6, r0
 80242d0:	460c      	mov	r4, r1
 80242d2:	d507      	bpl.n	80242e4 <__smakebuf_r+0x1c>
 80242d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80242d8:	6023      	str	r3, [r4, #0]
 80242da:	6123      	str	r3, [r4, #16]
 80242dc:	2301      	movs	r3, #1
 80242de:	6163      	str	r3, [r4, #20]
 80242e0:	b002      	add	sp, #8
 80242e2:	bd70      	pop	{r4, r5, r6, pc}
 80242e4:	ab01      	add	r3, sp, #4
 80242e6:	466a      	mov	r2, sp
 80242e8:	f7ff ffca 	bl	8024280 <__swhatbuf_r>
 80242ec:	9900      	ldr	r1, [sp, #0]
 80242ee:	4605      	mov	r5, r0
 80242f0:	4630      	mov	r0, r6
 80242f2:	f7fc fddb 	bl	8020eac <_malloc_r>
 80242f6:	b948      	cbnz	r0, 802430c <__smakebuf_r+0x44>
 80242f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242fc:	059a      	lsls	r2, r3, #22
 80242fe:	d4ef      	bmi.n	80242e0 <__smakebuf_r+0x18>
 8024300:	f023 0303 	bic.w	r3, r3, #3
 8024304:	f043 0302 	orr.w	r3, r3, #2
 8024308:	81a3      	strh	r3, [r4, #12]
 802430a:	e7e3      	b.n	80242d4 <__smakebuf_r+0xc>
 802430c:	4b0d      	ldr	r3, [pc, #52]	; (8024344 <__smakebuf_r+0x7c>)
 802430e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024310:	89a3      	ldrh	r3, [r4, #12]
 8024312:	6020      	str	r0, [r4, #0]
 8024314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024318:	81a3      	strh	r3, [r4, #12]
 802431a:	9b00      	ldr	r3, [sp, #0]
 802431c:	6163      	str	r3, [r4, #20]
 802431e:	9b01      	ldr	r3, [sp, #4]
 8024320:	6120      	str	r0, [r4, #16]
 8024322:	b15b      	cbz	r3, 802433c <__smakebuf_r+0x74>
 8024324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024328:	4630      	mov	r0, r6
 802432a:	f001 fab1 	bl	8025890 <_isatty_r>
 802432e:	b128      	cbz	r0, 802433c <__smakebuf_r+0x74>
 8024330:	89a3      	ldrh	r3, [r4, #12]
 8024332:	f023 0303 	bic.w	r3, r3, #3
 8024336:	f043 0301 	orr.w	r3, r3, #1
 802433a:	81a3      	strh	r3, [r4, #12]
 802433c:	89a0      	ldrh	r0, [r4, #12]
 802433e:	4305      	orrs	r5, r0
 8024340:	81a5      	strh	r5, [r4, #12]
 8024342:	e7cd      	b.n	80242e0 <__smakebuf_r+0x18>
 8024344:	08023e8d 	.word	0x08023e8d

08024348 <__ascii_mbtowc>:
 8024348:	b082      	sub	sp, #8
 802434a:	b901      	cbnz	r1, 802434e <__ascii_mbtowc+0x6>
 802434c:	a901      	add	r1, sp, #4
 802434e:	b142      	cbz	r2, 8024362 <__ascii_mbtowc+0x1a>
 8024350:	b14b      	cbz	r3, 8024366 <__ascii_mbtowc+0x1e>
 8024352:	7813      	ldrb	r3, [r2, #0]
 8024354:	600b      	str	r3, [r1, #0]
 8024356:	7812      	ldrb	r2, [r2, #0]
 8024358:	1e10      	subs	r0, r2, #0
 802435a:	bf18      	it	ne
 802435c:	2001      	movne	r0, #1
 802435e:	b002      	add	sp, #8
 8024360:	4770      	bx	lr
 8024362:	4610      	mov	r0, r2
 8024364:	e7fb      	b.n	802435e <__ascii_mbtowc+0x16>
 8024366:	f06f 0001 	mvn.w	r0, #1
 802436a:	e7f8      	b.n	802435e <__ascii_mbtowc+0x16>

0802436c <__malloc_lock>:
 802436c:	4801      	ldr	r0, [pc, #4]	; (8024374 <__malloc_lock+0x8>)
 802436e:	f7ff bf71 	b.w	8024254 <__retarget_lock_acquire_recursive>
 8024372:	bf00      	nop
 8024374:	200381d0 	.word	0x200381d0

08024378 <__malloc_unlock>:
 8024378:	4801      	ldr	r0, [pc, #4]	; (8024380 <__malloc_unlock+0x8>)
 802437a:	f7ff bf6d 	b.w	8024258 <__retarget_lock_release_recursive>
 802437e:	bf00      	nop
 8024380:	200381d0 	.word	0x200381d0

08024384 <_Balloc>:
 8024384:	b570      	push	{r4, r5, r6, lr}
 8024386:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024388:	4604      	mov	r4, r0
 802438a:	460d      	mov	r5, r1
 802438c:	b976      	cbnz	r6, 80243ac <_Balloc+0x28>
 802438e:	2010      	movs	r0, #16
 8024390:	f7fc fa70 	bl	8020874 <malloc>
 8024394:	4602      	mov	r2, r0
 8024396:	6260      	str	r0, [r4, #36]	; 0x24
 8024398:	b920      	cbnz	r0, 80243a4 <_Balloc+0x20>
 802439a:	4b18      	ldr	r3, [pc, #96]	; (80243fc <_Balloc+0x78>)
 802439c:	4818      	ldr	r0, [pc, #96]	; (8024400 <_Balloc+0x7c>)
 802439e:	2166      	movs	r1, #102	; 0x66
 80243a0:	f7fe fe36 	bl	8023010 <__assert_func>
 80243a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80243a8:	6006      	str	r6, [r0, #0]
 80243aa:	60c6      	str	r6, [r0, #12]
 80243ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80243ae:	68f3      	ldr	r3, [r6, #12]
 80243b0:	b183      	cbz	r3, 80243d4 <_Balloc+0x50>
 80243b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80243b4:	68db      	ldr	r3, [r3, #12]
 80243b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80243ba:	b9b8      	cbnz	r0, 80243ec <_Balloc+0x68>
 80243bc:	2101      	movs	r1, #1
 80243be:	fa01 f605 	lsl.w	r6, r1, r5
 80243c2:	1d72      	adds	r2, r6, #5
 80243c4:	0092      	lsls	r2, r2, #2
 80243c6:	4620      	mov	r0, r4
 80243c8:	f000 fb5a 	bl	8024a80 <_calloc_r>
 80243cc:	b160      	cbz	r0, 80243e8 <_Balloc+0x64>
 80243ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80243d2:	e00e      	b.n	80243f2 <_Balloc+0x6e>
 80243d4:	2221      	movs	r2, #33	; 0x21
 80243d6:	2104      	movs	r1, #4
 80243d8:	4620      	mov	r0, r4
 80243da:	f000 fb51 	bl	8024a80 <_calloc_r>
 80243de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80243e0:	60f0      	str	r0, [r6, #12]
 80243e2:	68db      	ldr	r3, [r3, #12]
 80243e4:	2b00      	cmp	r3, #0
 80243e6:	d1e4      	bne.n	80243b2 <_Balloc+0x2e>
 80243e8:	2000      	movs	r0, #0
 80243ea:	bd70      	pop	{r4, r5, r6, pc}
 80243ec:	6802      	ldr	r2, [r0, #0]
 80243ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80243f2:	2300      	movs	r3, #0
 80243f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80243f8:	e7f7      	b.n	80243ea <_Balloc+0x66>
 80243fa:	bf00      	nop
 80243fc:	08041038 	.word	0x08041038
 8024400:	0804169e 	.word	0x0804169e

08024404 <_Bfree>:
 8024404:	b570      	push	{r4, r5, r6, lr}
 8024406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8024408:	4605      	mov	r5, r0
 802440a:	460c      	mov	r4, r1
 802440c:	b976      	cbnz	r6, 802442c <_Bfree+0x28>
 802440e:	2010      	movs	r0, #16
 8024410:	f7fc fa30 	bl	8020874 <malloc>
 8024414:	4602      	mov	r2, r0
 8024416:	6268      	str	r0, [r5, #36]	; 0x24
 8024418:	b920      	cbnz	r0, 8024424 <_Bfree+0x20>
 802441a:	4b09      	ldr	r3, [pc, #36]	; (8024440 <_Bfree+0x3c>)
 802441c:	4809      	ldr	r0, [pc, #36]	; (8024444 <_Bfree+0x40>)
 802441e:	218a      	movs	r1, #138	; 0x8a
 8024420:	f7fe fdf6 	bl	8023010 <__assert_func>
 8024424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8024428:	6006      	str	r6, [r0, #0]
 802442a:	60c6      	str	r6, [r0, #12]
 802442c:	b13c      	cbz	r4, 802443e <_Bfree+0x3a>
 802442e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024430:	6862      	ldr	r2, [r4, #4]
 8024432:	68db      	ldr	r3, [r3, #12]
 8024434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8024438:	6021      	str	r1, [r4, #0]
 802443a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802443e:	bd70      	pop	{r4, r5, r6, pc}
 8024440:	08041038 	.word	0x08041038
 8024444:	0804169e 	.word	0x0804169e

08024448 <__multadd>:
 8024448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802444c:	690e      	ldr	r6, [r1, #16]
 802444e:	4607      	mov	r7, r0
 8024450:	4698      	mov	r8, r3
 8024452:	460c      	mov	r4, r1
 8024454:	f101 0014 	add.w	r0, r1, #20
 8024458:	2300      	movs	r3, #0
 802445a:	6805      	ldr	r5, [r0, #0]
 802445c:	b2a9      	uxth	r1, r5
 802445e:	fb02 8101 	mla	r1, r2, r1, r8
 8024462:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8024466:	0c2d      	lsrs	r5, r5, #16
 8024468:	fb02 c505 	mla	r5, r2, r5, ip
 802446c:	b289      	uxth	r1, r1
 802446e:	3301      	adds	r3, #1
 8024470:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8024474:	429e      	cmp	r6, r3
 8024476:	f840 1b04 	str.w	r1, [r0], #4
 802447a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 802447e:	dcec      	bgt.n	802445a <__multadd+0x12>
 8024480:	f1b8 0f00 	cmp.w	r8, #0
 8024484:	d022      	beq.n	80244cc <__multadd+0x84>
 8024486:	68a3      	ldr	r3, [r4, #8]
 8024488:	42b3      	cmp	r3, r6
 802448a:	dc19      	bgt.n	80244c0 <__multadd+0x78>
 802448c:	6861      	ldr	r1, [r4, #4]
 802448e:	4638      	mov	r0, r7
 8024490:	3101      	adds	r1, #1
 8024492:	f7ff ff77 	bl	8024384 <_Balloc>
 8024496:	4605      	mov	r5, r0
 8024498:	b928      	cbnz	r0, 80244a6 <__multadd+0x5e>
 802449a:	4602      	mov	r2, r0
 802449c:	4b0d      	ldr	r3, [pc, #52]	; (80244d4 <__multadd+0x8c>)
 802449e:	480e      	ldr	r0, [pc, #56]	; (80244d8 <__multadd+0x90>)
 80244a0:	21b5      	movs	r1, #181	; 0xb5
 80244a2:	f7fe fdb5 	bl	8023010 <__assert_func>
 80244a6:	6922      	ldr	r2, [r4, #16]
 80244a8:	3202      	adds	r2, #2
 80244aa:	f104 010c 	add.w	r1, r4, #12
 80244ae:	0092      	lsls	r2, r2, #2
 80244b0:	300c      	adds	r0, #12
 80244b2:	f7fc f9fd 	bl	80208b0 <memcpy>
 80244b6:	4621      	mov	r1, r4
 80244b8:	4638      	mov	r0, r7
 80244ba:	f7ff ffa3 	bl	8024404 <_Bfree>
 80244be:	462c      	mov	r4, r5
 80244c0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80244c4:	3601      	adds	r6, #1
 80244c6:	f8c3 8014 	str.w	r8, [r3, #20]
 80244ca:	6126      	str	r6, [r4, #16]
 80244cc:	4620      	mov	r0, r4
 80244ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80244d2:	bf00      	nop
 80244d4:	08041621 	.word	0x08041621
 80244d8:	0804169e 	.word	0x0804169e

080244dc <__hi0bits>:
 80244dc:	0c03      	lsrs	r3, r0, #16
 80244de:	041b      	lsls	r3, r3, #16
 80244e0:	b9d3      	cbnz	r3, 8024518 <__hi0bits+0x3c>
 80244e2:	0400      	lsls	r0, r0, #16
 80244e4:	2310      	movs	r3, #16
 80244e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80244ea:	bf04      	itt	eq
 80244ec:	0200      	lsleq	r0, r0, #8
 80244ee:	3308      	addeq	r3, #8
 80244f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80244f4:	bf04      	itt	eq
 80244f6:	0100      	lsleq	r0, r0, #4
 80244f8:	3304      	addeq	r3, #4
 80244fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80244fe:	bf04      	itt	eq
 8024500:	0080      	lsleq	r0, r0, #2
 8024502:	3302      	addeq	r3, #2
 8024504:	2800      	cmp	r0, #0
 8024506:	db05      	blt.n	8024514 <__hi0bits+0x38>
 8024508:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802450c:	f103 0301 	add.w	r3, r3, #1
 8024510:	bf08      	it	eq
 8024512:	2320      	moveq	r3, #32
 8024514:	4618      	mov	r0, r3
 8024516:	4770      	bx	lr
 8024518:	2300      	movs	r3, #0
 802451a:	e7e4      	b.n	80244e6 <__hi0bits+0xa>

0802451c <__lo0bits>:
 802451c:	6803      	ldr	r3, [r0, #0]
 802451e:	f013 0207 	ands.w	r2, r3, #7
 8024522:	4601      	mov	r1, r0
 8024524:	d00b      	beq.n	802453e <__lo0bits+0x22>
 8024526:	07da      	lsls	r2, r3, #31
 8024528:	d424      	bmi.n	8024574 <__lo0bits+0x58>
 802452a:	0798      	lsls	r0, r3, #30
 802452c:	bf49      	itett	mi
 802452e:	085b      	lsrmi	r3, r3, #1
 8024530:	089b      	lsrpl	r3, r3, #2
 8024532:	2001      	movmi	r0, #1
 8024534:	600b      	strmi	r3, [r1, #0]
 8024536:	bf5c      	itt	pl
 8024538:	600b      	strpl	r3, [r1, #0]
 802453a:	2002      	movpl	r0, #2
 802453c:	4770      	bx	lr
 802453e:	b298      	uxth	r0, r3
 8024540:	b9b0      	cbnz	r0, 8024570 <__lo0bits+0x54>
 8024542:	0c1b      	lsrs	r3, r3, #16
 8024544:	2010      	movs	r0, #16
 8024546:	f013 0fff 	tst.w	r3, #255	; 0xff
 802454a:	bf04      	itt	eq
 802454c:	0a1b      	lsreq	r3, r3, #8
 802454e:	3008      	addeq	r0, #8
 8024550:	071a      	lsls	r2, r3, #28
 8024552:	bf04      	itt	eq
 8024554:	091b      	lsreq	r3, r3, #4
 8024556:	3004      	addeq	r0, #4
 8024558:	079a      	lsls	r2, r3, #30
 802455a:	bf04      	itt	eq
 802455c:	089b      	lsreq	r3, r3, #2
 802455e:	3002      	addeq	r0, #2
 8024560:	07da      	lsls	r2, r3, #31
 8024562:	d403      	bmi.n	802456c <__lo0bits+0x50>
 8024564:	085b      	lsrs	r3, r3, #1
 8024566:	f100 0001 	add.w	r0, r0, #1
 802456a:	d005      	beq.n	8024578 <__lo0bits+0x5c>
 802456c:	600b      	str	r3, [r1, #0]
 802456e:	4770      	bx	lr
 8024570:	4610      	mov	r0, r2
 8024572:	e7e8      	b.n	8024546 <__lo0bits+0x2a>
 8024574:	2000      	movs	r0, #0
 8024576:	4770      	bx	lr
 8024578:	2020      	movs	r0, #32
 802457a:	4770      	bx	lr

0802457c <__i2b>:
 802457c:	b510      	push	{r4, lr}
 802457e:	460c      	mov	r4, r1
 8024580:	2101      	movs	r1, #1
 8024582:	f7ff feff 	bl	8024384 <_Balloc>
 8024586:	4602      	mov	r2, r0
 8024588:	b928      	cbnz	r0, 8024596 <__i2b+0x1a>
 802458a:	4b05      	ldr	r3, [pc, #20]	; (80245a0 <__i2b+0x24>)
 802458c:	4805      	ldr	r0, [pc, #20]	; (80245a4 <__i2b+0x28>)
 802458e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8024592:	f7fe fd3d 	bl	8023010 <__assert_func>
 8024596:	2301      	movs	r3, #1
 8024598:	6144      	str	r4, [r0, #20]
 802459a:	6103      	str	r3, [r0, #16]
 802459c:	bd10      	pop	{r4, pc}
 802459e:	bf00      	nop
 80245a0:	08041621 	.word	0x08041621
 80245a4:	0804169e 	.word	0x0804169e

080245a8 <__multiply>:
 80245a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245ac:	4614      	mov	r4, r2
 80245ae:	690a      	ldr	r2, [r1, #16]
 80245b0:	6923      	ldr	r3, [r4, #16]
 80245b2:	429a      	cmp	r2, r3
 80245b4:	bfb8      	it	lt
 80245b6:	460b      	movlt	r3, r1
 80245b8:	460d      	mov	r5, r1
 80245ba:	bfbc      	itt	lt
 80245bc:	4625      	movlt	r5, r4
 80245be:	461c      	movlt	r4, r3
 80245c0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80245c4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80245c8:	68ab      	ldr	r3, [r5, #8]
 80245ca:	6869      	ldr	r1, [r5, #4]
 80245cc:	eb0a 0709 	add.w	r7, sl, r9
 80245d0:	42bb      	cmp	r3, r7
 80245d2:	b085      	sub	sp, #20
 80245d4:	bfb8      	it	lt
 80245d6:	3101      	addlt	r1, #1
 80245d8:	f7ff fed4 	bl	8024384 <_Balloc>
 80245dc:	b930      	cbnz	r0, 80245ec <__multiply+0x44>
 80245de:	4602      	mov	r2, r0
 80245e0:	4b42      	ldr	r3, [pc, #264]	; (80246ec <__multiply+0x144>)
 80245e2:	4843      	ldr	r0, [pc, #268]	; (80246f0 <__multiply+0x148>)
 80245e4:	f240 115d 	movw	r1, #349	; 0x15d
 80245e8:	f7fe fd12 	bl	8023010 <__assert_func>
 80245ec:	f100 0614 	add.w	r6, r0, #20
 80245f0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80245f4:	4633      	mov	r3, r6
 80245f6:	2200      	movs	r2, #0
 80245f8:	4543      	cmp	r3, r8
 80245fa:	d31e      	bcc.n	802463a <__multiply+0x92>
 80245fc:	f105 0c14 	add.w	ip, r5, #20
 8024600:	f104 0314 	add.w	r3, r4, #20
 8024604:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8024608:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 802460c:	9202      	str	r2, [sp, #8]
 802460e:	ebac 0205 	sub.w	r2, ip, r5
 8024612:	3a15      	subs	r2, #21
 8024614:	f022 0203 	bic.w	r2, r2, #3
 8024618:	3204      	adds	r2, #4
 802461a:	f105 0115 	add.w	r1, r5, #21
 802461e:	458c      	cmp	ip, r1
 8024620:	bf38      	it	cc
 8024622:	2204      	movcc	r2, #4
 8024624:	9201      	str	r2, [sp, #4]
 8024626:	9a02      	ldr	r2, [sp, #8]
 8024628:	9303      	str	r3, [sp, #12]
 802462a:	429a      	cmp	r2, r3
 802462c:	d808      	bhi.n	8024640 <__multiply+0x98>
 802462e:	2f00      	cmp	r7, #0
 8024630:	dc55      	bgt.n	80246de <__multiply+0x136>
 8024632:	6107      	str	r7, [r0, #16]
 8024634:	b005      	add	sp, #20
 8024636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802463a:	f843 2b04 	str.w	r2, [r3], #4
 802463e:	e7db      	b.n	80245f8 <__multiply+0x50>
 8024640:	f8b3 a000 	ldrh.w	sl, [r3]
 8024644:	f1ba 0f00 	cmp.w	sl, #0
 8024648:	d020      	beq.n	802468c <__multiply+0xe4>
 802464a:	f105 0e14 	add.w	lr, r5, #20
 802464e:	46b1      	mov	r9, r6
 8024650:	2200      	movs	r2, #0
 8024652:	f85e 4b04 	ldr.w	r4, [lr], #4
 8024656:	f8d9 b000 	ldr.w	fp, [r9]
 802465a:	b2a1      	uxth	r1, r4
 802465c:	fa1f fb8b 	uxth.w	fp, fp
 8024660:	fb0a b101 	mla	r1, sl, r1, fp
 8024664:	4411      	add	r1, r2
 8024666:	f8d9 2000 	ldr.w	r2, [r9]
 802466a:	0c24      	lsrs	r4, r4, #16
 802466c:	0c12      	lsrs	r2, r2, #16
 802466e:	fb0a 2404 	mla	r4, sl, r4, r2
 8024672:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8024676:	b289      	uxth	r1, r1
 8024678:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 802467c:	45f4      	cmp	ip, lr
 802467e:	f849 1b04 	str.w	r1, [r9], #4
 8024682:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8024686:	d8e4      	bhi.n	8024652 <__multiply+0xaa>
 8024688:	9901      	ldr	r1, [sp, #4]
 802468a:	5072      	str	r2, [r6, r1]
 802468c:	9a03      	ldr	r2, [sp, #12]
 802468e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8024692:	3304      	adds	r3, #4
 8024694:	f1b9 0f00 	cmp.w	r9, #0
 8024698:	d01f      	beq.n	80246da <__multiply+0x132>
 802469a:	6834      	ldr	r4, [r6, #0]
 802469c:	f105 0114 	add.w	r1, r5, #20
 80246a0:	46b6      	mov	lr, r6
 80246a2:	f04f 0a00 	mov.w	sl, #0
 80246a6:	880a      	ldrh	r2, [r1, #0]
 80246a8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80246ac:	fb09 b202 	mla	r2, r9, r2, fp
 80246b0:	4492      	add	sl, r2
 80246b2:	b2a4      	uxth	r4, r4
 80246b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80246b8:	f84e 4b04 	str.w	r4, [lr], #4
 80246bc:	f851 4b04 	ldr.w	r4, [r1], #4
 80246c0:	f8be 2000 	ldrh.w	r2, [lr]
 80246c4:	0c24      	lsrs	r4, r4, #16
 80246c6:	fb09 2404 	mla	r4, r9, r4, r2
 80246ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80246ce:	458c      	cmp	ip, r1
 80246d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80246d4:	d8e7      	bhi.n	80246a6 <__multiply+0xfe>
 80246d6:	9a01      	ldr	r2, [sp, #4]
 80246d8:	50b4      	str	r4, [r6, r2]
 80246da:	3604      	adds	r6, #4
 80246dc:	e7a3      	b.n	8024626 <__multiply+0x7e>
 80246de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80246e2:	2b00      	cmp	r3, #0
 80246e4:	d1a5      	bne.n	8024632 <__multiply+0x8a>
 80246e6:	3f01      	subs	r7, #1
 80246e8:	e7a1      	b.n	802462e <__multiply+0x86>
 80246ea:	bf00      	nop
 80246ec:	08041621 	.word	0x08041621
 80246f0:	0804169e 	.word	0x0804169e

080246f4 <__pow5mult>:
 80246f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80246f8:	4615      	mov	r5, r2
 80246fa:	f012 0203 	ands.w	r2, r2, #3
 80246fe:	4606      	mov	r6, r0
 8024700:	460f      	mov	r7, r1
 8024702:	d007      	beq.n	8024714 <__pow5mult+0x20>
 8024704:	4c25      	ldr	r4, [pc, #148]	; (802479c <__pow5mult+0xa8>)
 8024706:	3a01      	subs	r2, #1
 8024708:	2300      	movs	r3, #0
 802470a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802470e:	f7ff fe9b 	bl	8024448 <__multadd>
 8024712:	4607      	mov	r7, r0
 8024714:	10ad      	asrs	r5, r5, #2
 8024716:	d03d      	beq.n	8024794 <__pow5mult+0xa0>
 8024718:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802471a:	b97c      	cbnz	r4, 802473c <__pow5mult+0x48>
 802471c:	2010      	movs	r0, #16
 802471e:	f7fc f8a9 	bl	8020874 <malloc>
 8024722:	4602      	mov	r2, r0
 8024724:	6270      	str	r0, [r6, #36]	; 0x24
 8024726:	b928      	cbnz	r0, 8024734 <__pow5mult+0x40>
 8024728:	4b1d      	ldr	r3, [pc, #116]	; (80247a0 <__pow5mult+0xac>)
 802472a:	481e      	ldr	r0, [pc, #120]	; (80247a4 <__pow5mult+0xb0>)
 802472c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8024730:	f7fe fc6e 	bl	8023010 <__assert_func>
 8024734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024738:	6004      	str	r4, [r0, #0]
 802473a:	60c4      	str	r4, [r0, #12]
 802473c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8024740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024744:	b94c      	cbnz	r4, 802475a <__pow5mult+0x66>
 8024746:	f240 2171 	movw	r1, #625	; 0x271
 802474a:	4630      	mov	r0, r6
 802474c:	f7ff ff16 	bl	802457c <__i2b>
 8024750:	2300      	movs	r3, #0
 8024752:	f8c8 0008 	str.w	r0, [r8, #8]
 8024756:	4604      	mov	r4, r0
 8024758:	6003      	str	r3, [r0, #0]
 802475a:	f04f 0900 	mov.w	r9, #0
 802475e:	07eb      	lsls	r3, r5, #31
 8024760:	d50a      	bpl.n	8024778 <__pow5mult+0x84>
 8024762:	4639      	mov	r1, r7
 8024764:	4622      	mov	r2, r4
 8024766:	4630      	mov	r0, r6
 8024768:	f7ff ff1e 	bl	80245a8 <__multiply>
 802476c:	4639      	mov	r1, r7
 802476e:	4680      	mov	r8, r0
 8024770:	4630      	mov	r0, r6
 8024772:	f7ff fe47 	bl	8024404 <_Bfree>
 8024776:	4647      	mov	r7, r8
 8024778:	106d      	asrs	r5, r5, #1
 802477a:	d00b      	beq.n	8024794 <__pow5mult+0xa0>
 802477c:	6820      	ldr	r0, [r4, #0]
 802477e:	b938      	cbnz	r0, 8024790 <__pow5mult+0x9c>
 8024780:	4622      	mov	r2, r4
 8024782:	4621      	mov	r1, r4
 8024784:	4630      	mov	r0, r6
 8024786:	f7ff ff0f 	bl	80245a8 <__multiply>
 802478a:	6020      	str	r0, [r4, #0]
 802478c:	f8c0 9000 	str.w	r9, [r0]
 8024790:	4604      	mov	r4, r0
 8024792:	e7e4      	b.n	802475e <__pow5mult+0x6a>
 8024794:	4638      	mov	r0, r7
 8024796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802479a:	bf00      	nop
 802479c:	080417f0 	.word	0x080417f0
 80247a0:	08041038 	.word	0x08041038
 80247a4:	0804169e 	.word	0x0804169e

080247a8 <__lshift>:
 80247a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80247ac:	460c      	mov	r4, r1
 80247ae:	6849      	ldr	r1, [r1, #4]
 80247b0:	6923      	ldr	r3, [r4, #16]
 80247b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80247b6:	68a3      	ldr	r3, [r4, #8]
 80247b8:	4607      	mov	r7, r0
 80247ba:	4691      	mov	r9, r2
 80247bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80247c0:	f108 0601 	add.w	r6, r8, #1
 80247c4:	42b3      	cmp	r3, r6
 80247c6:	db0b      	blt.n	80247e0 <__lshift+0x38>
 80247c8:	4638      	mov	r0, r7
 80247ca:	f7ff fddb 	bl	8024384 <_Balloc>
 80247ce:	4605      	mov	r5, r0
 80247d0:	b948      	cbnz	r0, 80247e6 <__lshift+0x3e>
 80247d2:	4602      	mov	r2, r0
 80247d4:	4b28      	ldr	r3, [pc, #160]	; (8024878 <__lshift+0xd0>)
 80247d6:	4829      	ldr	r0, [pc, #164]	; (802487c <__lshift+0xd4>)
 80247d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80247dc:	f7fe fc18 	bl	8023010 <__assert_func>
 80247e0:	3101      	adds	r1, #1
 80247e2:	005b      	lsls	r3, r3, #1
 80247e4:	e7ee      	b.n	80247c4 <__lshift+0x1c>
 80247e6:	2300      	movs	r3, #0
 80247e8:	f100 0114 	add.w	r1, r0, #20
 80247ec:	f100 0210 	add.w	r2, r0, #16
 80247f0:	4618      	mov	r0, r3
 80247f2:	4553      	cmp	r3, sl
 80247f4:	db33      	blt.n	802485e <__lshift+0xb6>
 80247f6:	6920      	ldr	r0, [r4, #16]
 80247f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80247fc:	f104 0314 	add.w	r3, r4, #20
 8024800:	f019 091f 	ands.w	r9, r9, #31
 8024804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802480c:	d02b      	beq.n	8024866 <__lshift+0xbe>
 802480e:	f1c9 0e20 	rsb	lr, r9, #32
 8024812:	468a      	mov	sl, r1
 8024814:	2200      	movs	r2, #0
 8024816:	6818      	ldr	r0, [r3, #0]
 8024818:	fa00 f009 	lsl.w	r0, r0, r9
 802481c:	4302      	orrs	r2, r0
 802481e:	f84a 2b04 	str.w	r2, [sl], #4
 8024822:	f853 2b04 	ldr.w	r2, [r3], #4
 8024826:	459c      	cmp	ip, r3
 8024828:	fa22 f20e 	lsr.w	r2, r2, lr
 802482c:	d8f3      	bhi.n	8024816 <__lshift+0x6e>
 802482e:	ebac 0304 	sub.w	r3, ip, r4
 8024832:	3b15      	subs	r3, #21
 8024834:	f023 0303 	bic.w	r3, r3, #3
 8024838:	3304      	adds	r3, #4
 802483a:	f104 0015 	add.w	r0, r4, #21
 802483e:	4584      	cmp	ip, r0
 8024840:	bf38      	it	cc
 8024842:	2304      	movcc	r3, #4
 8024844:	50ca      	str	r2, [r1, r3]
 8024846:	b10a      	cbz	r2, 802484c <__lshift+0xa4>
 8024848:	f108 0602 	add.w	r6, r8, #2
 802484c:	3e01      	subs	r6, #1
 802484e:	4638      	mov	r0, r7
 8024850:	612e      	str	r6, [r5, #16]
 8024852:	4621      	mov	r1, r4
 8024854:	f7ff fdd6 	bl	8024404 <_Bfree>
 8024858:	4628      	mov	r0, r5
 802485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802485e:	f842 0f04 	str.w	r0, [r2, #4]!
 8024862:	3301      	adds	r3, #1
 8024864:	e7c5      	b.n	80247f2 <__lshift+0x4a>
 8024866:	3904      	subs	r1, #4
 8024868:	f853 2b04 	ldr.w	r2, [r3], #4
 802486c:	f841 2f04 	str.w	r2, [r1, #4]!
 8024870:	459c      	cmp	ip, r3
 8024872:	d8f9      	bhi.n	8024868 <__lshift+0xc0>
 8024874:	e7ea      	b.n	802484c <__lshift+0xa4>
 8024876:	bf00      	nop
 8024878:	08041621 	.word	0x08041621
 802487c:	0804169e 	.word	0x0804169e

08024880 <__mcmp>:
 8024880:	b530      	push	{r4, r5, lr}
 8024882:	6902      	ldr	r2, [r0, #16]
 8024884:	690c      	ldr	r4, [r1, #16]
 8024886:	1b12      	subs	r2, r2, r4
 8024888:	d10e      	bne.n	80248a8 <__mcmp+0x28>
 802488a:	f100 0314 	add.w	r3, r0, #20
 802488e:	3114      	adds	r1, #20
 8024890:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8024894:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8024898:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802489c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80248a0:	42a5      	cmp	r5, r4
 80248a2:	d003      	beq.n	80248ac <__mcmp+0x2c>
 80248a4:	d305      	bcc.n	80248b2 <__mcmp+0x32>
 80248a6:	2201      	movs	r2, #1
 80248a8:	4610      	mov	r0, r2
 80248aa:	bd30      	pop	{r4, r5, pc}
 80248ac:	4283      	cmp	r3, r0
 80248ae:	d3f3      	bcc.n	8024898 <__mcmp+0x18>
 80248b0:	e7fa      	b.n	80248a8 <__mcmp+0x28>
 80248b2:	f04f 32ff 	mov.w	r2, #4294967295
 80248b6:	e7f7      	b.n	80248a8 <__mcmp+0x28>

080248b8 <__mdiff>:
 80248b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248bc:	460c      	mov	r4, r1
 80248be:	4606      	mov	r6, r0
 80248c0:	4611      	mov	r1, r2
 80248c2:	4620      	mov	r0, r4
 80248c4:	4617      	mov	r7, r2
 80248c6:	f7ff ffdb 	bl	8024880 <__mcmp>
 80248ca:	1e05      	subs	r5, r0, #0
 80248cc:	d110      	bne.n	80248f0 <__mdiff+0x38>
 80248ce:	4629      	mov	r1, r5
 80248d0:	4630      	mov	r0, r6
 80248d2:	f7ff fd57 	bl	8024384 <_Balloc>
 80248d6:	b930      	cbnz	r0, 80248e6 <__mdiff+0x2e>
 80248d8:	4b39      	ldr	r3, [pc, #228]	; (80249c0 <__mdiff+0x108>)
 80248da:	4602      	mov	r2, r0
 80248dc:	f240 2132 	movw	r1, #562	; 0x232
 80248e0:	4838      	ldr	r0, [pc, #224]	; (80249c4 <__mdiff+0x10c>)
 80248e2:	f7fe fb95 	bl	8023010 <__assert_func>
 80248e6:	2301      	movs	r3, #1
 80248e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80248ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248f0:	bfa4      	itt	ge
 80248f2:	463b      	movge	r3, r7
 80248f4:	4627      	movge	r7, r4
 80248f6:	4630      	mov	r0, r6
 80248f8:	6879      	ldr	r1, [r7, #4]
 80248fa:	bfa6      	itte	ge
 80248fc:	461c      	movge	r4, r3
 80248fe:	2500      	movge	r5, #0
 8024900:	2501      	movlt	r5, #1
 8024902:	f7ff fd3f 	bl	8024384 <_Balloc>
 8024906:	b920      	cbnz	r0, 8024912 <__mdiff+0x5a>
 8024908:	4b2d      	ldr	r3, [pc, #180]	; (80249c0 <__mdiff+0x108>)
 802490a:	4602      	mov	r2, r0
 802490c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8024910:	e7e6      	b.n	80248e0 <__mdiff+0x28>
 8024912:	693e      	ldr	r6, [r7, #16]
 8024914:	60c5      	str	r5, [r0, #12]
 8024916:	6925      	ldr	r5, [r4, #16]
 8024918:	f107 0114 	add.w	r1, r7, #20
 802491c:	f104 0914 	add.w	r9, r4, #20
 8024920:	f100 0e14 	add.w	lr, r0, #20
 8024924:	f107 0210 	add.w	r2, r7, #16
 8024928:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802492c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8024930:	46f2      	mov	sl, lr
 8024932:	2700      	movs	r7, #0
 8024934:	f859 3b04 	ldr.w	r3, [r9], #4
 8024938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802493c:	fa1f f883 	uxth.w	r8, r3
 8024940:	fa17 f78b 	uxtah	r7, r7, fp
 8024944:	0c1b      	lsrs	r3, r3, #16
 8024946:	eba7 0808 	sub.w	r8, r7, r8
 802494a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802494e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8024952:	fa1f f888 	uxth.w	r8, r8
 8024956:	141f      	asrs	r7, r3, #16
 8024958:	454d      	cmp	r5, r9
 802495a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802495e:	f84a 3b04 	str.w	r3, [sl], #4
 8024962:	d8e7      	bhi.n	8024934 <__mdiff+0x7c>
 8024964:	1b2b      	subs	r3, r5, r4
 8024966:	3b15      	subs	r3, #21
 8024968:	f023 0303 	bic.w	r3, r3, #3
 802496c:	3304      	adds	r3, #4
 802496e:	3415      	adds	r4, #21
 8024970:	42a5      	cmp	r5, r4
 8024972:	bf38      	it	cc
 8024974:	2304      	movcc	r3, #4
 8024976:	4419      	add	r1, r3
 8024978:	4473      	add	r3, lr
 802497a:	469e      	mov	lr, r3
 802497c:	460d      	mov	r5, r1
 802497e:	4565      	cmp	r5, ip
 8024980:	d30e      	bcc.n	80249a0 <__mdiff+0xe8>
 8024982:	f10c 0203 	add.w	r2, ip, #3
 8024986:	1a52      	subs	r2, r2, r1
 8024988:	f022 0203 	bic.w	r2, r2, #3
 802498c:	3903      	subs	r1, #3
 802498e:	458c      	cmp	ip, r1
 8024990:	bf38      	it	cc
 8024992:	2200      	movcc	r2, #0
 8024994:	441a      	add	r2, r3
 8024996:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802499a:	b17b      	cbz	r3, 80249bc <__mdiff+0x104>
 802499c:	6106      	str	r6, [r0, #16]
 802499e:	e7a5      	b.n	80248ec <__mdiff+0x34>
 80249a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80249a4:	fa17 f488 	uxtah	r4, r7, r8
 80249a8:	1422      	asrs	r2, r4, #16
 80249aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80249ae:	b2a4      	uxth	r4, r4
 80249b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80249b4:	f84e 4b04 	str.w	r4, [lr], #4
 80249b8:	1417      	asrs	r7, r2, #16
 80249ba:	e7e0      	b.n	802497e <__mdiff+0xc6>
 80249bc:	3e01      	subs	r6, #1
 80249be:	e7ea      	b.n	8024996 <__mdiff+0xde>
 80249c0:	08041621 	.word	0x08041621
 80249c4:	0804169e 	.word	0x0804169e

080249c8 <__d2b>:
 80249c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80249cc:	4689      	mov	r9, r1
 80249ce:	2101      	movs	r1, #1
 80249d0:	ec57 6b10 	vmov	r6, r7, d0
 80249d4:	4690      	mov	r8, r2
 80249d6:	f7ff fcd5 	bl	8024384 <_Balloc>
 80249da:	4604      	mov	r4, r0
 80249dc:	b930      	cbnz	r0, 80249ec <__d2b+0x24>
 80249de:	4602      	mov	r2, r0
 80249e0:	4b25      	ldr	r3, [pc, #148]	; (8024a78 <__d2b+0xb0>)
 80249e2:	4826      	ldr	r0, [pc, #152]	; (8024a7c <__d2b+0xb4>)
 80249e4:	f240 310a 	movw	r1, #778	; 0x30a
 80249e8:	f7fe fb12 	bl	8023010 <__assert_func>
 80249ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80249f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80249f4:	bb35      	cbnz	r5, 8024a44 <__d2b+0x7c>
 80249f6:	2e00      	cmp	r6, #0
 80249f8:	9301      	str	r3, [sp, #4]
 80249fa:	d028      	beq.n	8024a4e <__d2b+0x86>
 80249fc:	4668      	mov	r0, sp
 80249fe:	9600      	str	r6, [sp, #0]
 8024a00:	f7ff fd8c 	bl	802451c <__lo0bits>
 8024a04:	9900      	ldr	r1, [sp, #0]
 8024a06:	b300      	cbz	r0, 8024a4a <__d2b+0x82>
 8024a08:	9a01      	ldr	r2, [sp, #4]
 8024a0a:	f1c0 0320 	rsb	r3, r0, #32
 8024a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8024a12:	430b      	orrs	r3, r1
 8024a14:	40c2      	lsrs	r2, r0
 8024a16:	6163      	str	r3, [r4, #20]
 8024a18:	9201      	str	r2, [sp, #4]
 8024a1a:	9b01      	ldr	r3, [sp, #4]
 8024a1c:	61a3      	str	r3, [r4, #24]
 8024a1e:	2b00      	cmp	r3, #0
 8024a20:	bf14      	ite	ne
 8024a22:	2202      	movne	r2, #2
 8024a24:	2201      	moveq	r2, #1
 8024a26:	6122      	str	r2, [r4, #16]
 8024a28:	b1d5      	cbz	r5, 8024a60 <__d2b+0x98>
 8024a2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8024a2e:	4405      	add	r5, r0
 8024a30:	f8c9 5000 	str.w	r5, [r9]
 8024a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024a38:	f8c8 0000 	str.w	r0, [r8]
 8024a3c:	4620      	mov	r0, r4
 8024a3e:	b003      	add	sp, #12
 8024a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024a44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024a48:	e7d5      	b.n	80249f6 <__d2b+0x2e>
 8024a4a:	6161      	str	r1, [r4, #20]
 8024a4c:	e7e5      	b.n	8024a1a <__d2b+0x52>
 8024a4e:	a801      	add	r0, sp, #4
 8024a50:	f7ff fd64 	bl	802451c <__lo0bits>
 8024a54:	9b01      	ldr	r3, [sp, #4]
 8024a56:	6163      	str	r3, [r4, #20]
 8024a58:	2201      	movs	r2, #1
 8024a5a:	6122      	str	r2, [r4, #16]
 8024a5c:	3020      	adds	r0, #32
 8024a5e:	e7e3      	b.n	8024a28 <__d2b+0x60>
 8024a60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8024a64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024a68:	f8c9 0000 	str.w	r0, [r9]
 8024a6c:	6918      	ldr	r0, [r3, #16]
 8024a6e:	f7ff fd35 	bl	80244dc <__hi0bits>
 8024a72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8024a76:	e7df      	b.n	8024a38 <__d2b+0x70>
 8024a78:	08041621 	.word	0x08041621
 8024a7c:	0804169e 	.word	0x0804169e

08024a80 <_calloc_r>:
 8024a80:	b513      	push	{r0, r1, r4, lr}
 8024a82:	434a      	muls	r2, r1
 8024a84:	4611      	mov	r1, r2
 8024a86:	9201      	str	r2, [sp, #4]
 8024a88:	f7fc fa10 	bl	8020eac <_malloc_r>
 8024a8c:	4604      	mov	r4, r0
 8024a8e:	b118      	cbz	r0, 8024a98 <_calloc_r+0x18>
 8024a90:	9a01      	ldr	r2, [sp, #4]
 8024a92:	2100      	movs	r1, #0
 8024a94:	f7fb ff34 	bl	8020900 <memset>
 8024a98:	4620      	mov	r0, r4
 8024a9a:	b002      	add	sp, #8
 8024a9c:	bd10      	pop	{r4, pc}

08024a9e <_realloc_r>:
 8024a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024aa0:	4607      	mov	r7, r0
 8024aa2:	4614      	mov	r4, r2
 8024aa4:	460e      	mov	r6, r1
 8024aa6:	b921      	cbnz	r1, 8024ab2 <_realloc_r+0x14>
 8024aa8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8024aac:	4611      	mov	r1, r2
 8024aae:	f7fc b9fd 	b.w	8020eac <_malloc_r>
 8024ab2:	b922      	cbnz	r2, 8024abe <_realloc_r+0x20>
 8024ab4:	f7fc f9aa 	bl	8020e0c <_free_r>
 8024ab8:	4625      	mov	r5, r4
 8024aba:	4628      	mov	r0, r5
 8024abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024abe:	f000 fef7 	bl	80258b0 <_malloc_usable_size_r>
 8024ac2:	42a0      	cmp	r0, r4
 8024ac4:	d20f      	bcs.n	8024ae6 <_realloc_r+0x48>
 8024ac6:	4621      	mov	r1, r4
 8024ac8:	4638      	mov	r0, r7
 8024aca:	f7fc f9ef 	bl	8020eac <_malloc_r>
 8024ace:	4605      	mov	r5, r0
 8024ad0:	2800      	cmp	r0, #0
 8024ad2:	d0f2      	beq.n	8024aba <_realloc_r+0x1c>
 8024ad4:	4631      	mov	r1, r6
 8024ad6:	4622      	mov	r2, r4
 8024ad8:	f7fb feea 	bl	80208b0 <memcpy>
 8024adc:	4631      	mov	r1, r6
 8024ade:	4638      	mov	r0, r7
 8024ae0:	f7fc f994 	bl	8020e0c <_free_r>
 8024ae4:	e7e9      	b.n	8024aba <_realloc_r+0x1c>
 8024ae6:	4635      	mov	r5, r6
 8024ae8:	e7e7      	b.n	8024aba <_realloc_r+0x1c>

08024aea <__ssputs_r>:
 8024aea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024aee:	688e      	ldr	r6, [r1, #8]
 8024af0:	429e      	cmp	r6, r3
 8024af2:	4682      	mov	sl, r0
 8024af4:	460c      	mov	r4, r1
 8024af6:	4690      	mov	r8, r2
 8024af8:	461f      	mov	r7, r3
 8024afa:	d838      	bhi.n	8024b6e <__ssputs_r+0x84>
 8024afc:	898a      	ldrh	r2, [r1, #12]
 8024afe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8024b02:	d032      	beq.n	8024b6a <__ssputs_r+0x80>
 8024b04:	6825      	ldr	r5, [r4, #0]
 8024b06:	6909      	ldr	r1, [r1, #16]
 8024b08:	eba5 0901 	sub.w	r9, r5, r1
 8024b0c:	6965      	ldr	r5, [r4, #20]
 8024b0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8024b12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024b16:	3301      	adds	r3, #1
 8024b18:	444b      	add	r3, r9
 8024b1a:	106d      	asrs	r5, r5, #1
 8024b1c:	429d      	cmp	r5, r3
 8024b1e:	bf38      	it	cc
 8024b20:	461d      	movcc	r5, r3
 8024b22:	0553      	lsls	r3, r2, #21
 8024b24:	d531      	bpl.n	8024b8a <__ssputs_r+0xa0>
 8024b26:	4629      	mov	r1, r5
 8024b28:	f7fc f9c0 	bl	8020eac <_malloc_r>
 8024b2c:	4606      	mov	r6, r0
 8024b2e:	b950      	cbnz	r0, 8024b46 <__ssputs_r+0x5c>
 8024b30:	230c      	movs	r3, #12
 8024b32:	f8ca 3000 	str.w	r3, [sl]
 8024b36:	89a3      	ldrh	r3, [r4, #12]
 8024b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024b3c:	81a3      	strh	r3, [r4, #12]
 8024b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8024b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b46:	6921      	ldr	r1, [r4, #16]
 8024b48:	464a      	mov	r2, r9
 8024b4a:	f7fb feb1 	bl	80208b0 <memcpy>
 8024b4e:	89a3      	ldrh	r3, [r4, #12]
 8024b50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8024b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024b58:	81a3      	strh	r3, [r4, #12]
 8024b5a:	6126      	str	r6, [r4, #16]
 8024b5c:	6165      	str	r5, [r4, #20]
 8024b5e:	444e      	add	r6, r9
 8024b60:	eba5 0509 	sub.w	r5, r5, r9
 8024b64:	6026      	str	r6, [r4, #0]
 8024b66:	60a5      	str	r5, [r4, #8]
 8024b68:	463e      	mov	r6, r7
 8024b6a:	42be      	cmp	r6, r7
 8024b6c:	d900      	bls.n	8024b70 <__ssputs_r+0x86>
 8024b6e:	463e      	mov	r6, r7
 8024b70:	4632      	mov	r2, r6
 8024b72:	6820      	ldr	r0, [r4, #0]
 8024b74:	4641      	mov	r1, r8
 8024b76:	f7fb fea9 	bl	80208cc <memmove>
 8024b7a:	68a3      	ldr	r3, [r4, #8]
 8024b7c:	6822      	ldr	r2, [r4, #0]
 8024b7e:	1b9b      	subs	r3, r3, r6
 8024b80:	4432      	add	r2, r6
 8024b82:	60a3      	str	r3, [r4, #8]
 8024b84:	6022      	str	r2, [r4, #0]
 8024b86:	2000      	movs	r0, #0
 8024b88:	e7db      	b.n	8024b42 <__ssputs_r+0x58>
 8024b8a:	462a      	mov	r2, r5
 8024b8c:	f7ff ff87 	bl	8024a9e <_realloc_r>
 8024b90:	4606      	mov	r6, r0
 8024b92:	2800      	cmp	r0, #0
 8024b94:	d1e1      	bne.n	8024b5a <__ssputs_r+0x70>
 8024b96:	6921      	ldr	r1, [r4, #16]
 8024b98:	4650      	mov	r0, sl
 8024b9a:	f7fc f937 	bl	8020e0c <_free_r>
 8024b9e:	e7c7      	b.n	8024b30 <__ssputs_r+0x46>

08024ba0 <_svfiprintf_r>:
 8024ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ba4:	4698      	mov	r8, r3
 8024ba6:	898b      	ldrh	r3, [r1, #12]
 8024ba8:	061b      	lsls	r3, r3, #24
 8024baa:	b09d      	sub	sp, #116	; 0x74
 8024bac:	4607      	mov	r7, r0
 8024bae:	460d      	mov	r5, r1
 8024bb0:	4614      	mov	r4, r2
 8024bb2:	d50e      	bpl.n	8024bd2 <_svfiprintf_r+0x32>
 8024bb4:	690b      	ldr	r3, [r1, #16]
 8024bb6:	b963      	cbnz	r3, 8024bd2 <_svfiprintf_r+0x32>
 8024bb8:	2140      	movs	r1, #64	; 0x40
 8024bba:	f7fc f977 	bl	8020eac <_malloc_r>
 8024bbe:	6028      	str	r0, [r5, #0]
 8024bc0:	6128      	str	r0, [r5, #16]
 8024bc2:	b920      	cbnz	r0, 8024bce <_svfiprintf_r+0x2e>
 8024bc4:	230c      	movs	r3, #12
 8024bc6:	603b      	str	r3, [r7, #0]
 8024bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8024bcc:	e0d1      	b.n	8024d72 <_svfiprintf_r+0x1d2>
 8024bce:	2340      	movs	r3, #64	; 0x40
 8024bd0:	616b      	str	r3, [r5, #20]
 8024bd2:	2300      	movs	r3, #0
 8024bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8024bd6:	2320      	movs	r3, #32
 8024bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8024be0:	2330      	movs	r3, #48	; 0x30
 8024be2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024d8c <_svfiprintf_r+0x1ec>
 8024be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024bea:	f04f 0901 	mov.w	r9, #1
 8024bee:	4623      	mov	r3, r4
 8024bf0:	469a      	mov	sl, r3
 8024bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024bf6:	b10a      	cbz	r2, 8024bfc <_svfiprintf_r+0x5c>
 8024bf8:	2a25      	cmp	r2, #37	; 0x25
 8024bfa:	d1f9      	bne.n	8024bf0 <_svfiprintf_r+0x50>
 8024bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8024c00:	d00b      	beq.n	8024c1a <_svfiprintf_r+0x7a>
 8024c02:	465b      	mov	r3, fp
 8024c04:	4622      	mov	r2, r4
 8024c06:	4629      	mov	r1, r5
 8024c08:	4638      	mov	r0, r7
 8024c0a:	f7ff ff6e 	bl	8024aea <__ssputs_r>
 8024c0e:	3001      	adds	r0, #1
 8024c10:	f000 80aa 	beq.w	8024d68 <_svfiprintf_r+0x1c8>
 8024c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c16:	445a      	add	r2, fp
 8024c18:	9209      	str	r2, [sp, #36]	; 0x24
 8024c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8024c1e:	2b00      	cmp	r3, #0
 8024c20:	f000 80a2 	beq.w	8024d68 <_svfiprintf_r+0x1c8>
 8024c24:	2300      	movs	r3, #0
 8024c26:	f04f 32ff 	mov.w	r2, #4294967295
 8024c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024c2e:	f10a 0a01 	add.w	sl, sl, #1
 8024c32:	9304      	str	r3, [sp, #16]
 8024c34:	9307      	str	r3, [sp, #28]
 8024c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8024c3c:	4654      	mov	r4, sl
 8024c3e:	2205      	movs	r2, #5
 8024c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024c44:	4851      	ldr	r0, [pc, #324]	; (8024d8c <_svfiprintf_r+0x1ec>)
 8024c46:	f7db fb13 	bl	8000270 <memchr>
 8024c4a:	9a04      	ldr	r2, [sp, #16]
 8024c4c:	b9d8      	cbnz	r0, 8024c86 <_svfiprintf_r+0xe6>
 8024c4e:	06d0      	lsls	r0, r2, #27
 8024c50:	bf44      	itt	mi
 8024c52:	2320      	movmi	r3, #32
 8024c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c58:	0711      	lsls	r1, r2, #28
 8024c5a:	bf44      	itt	mi
 8024c5c:	232b      	movmi	r3, #43	; 0x2b
 8024c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024c62:	f89a 3000 	ldrb.w	r3, [sl]
 8024c66:	2b2a      	cmp	r3, #42	; 0x2a
 8024c68:	d015      	beq.n	8024c96 <_svfiprintf_r+0xf6>
 8024c6a:	9a07      	ldr	r2, [sp, #28]
 8024c6c:	4654      	mov	r4, sl
 8024c6e:	2000      	movs	r0, #0
 8024c70:	f04f 0c0a 	mov.w	ip, #10
 8024c74:	4621      	mov	r1, r4
 8024c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024c7a:	3b30      	subs	r3, #48	; 0x30
 8024c7c:	2b09      	cmp	r3, #9
 8024c7e:	d94e      	bls.n	8024d1e <_svfiprintf_r+0x17e>
 8024c80:	b1b0      	cbz	r0, 8024cb0 <_svfiprintf_r+0x110>
 8024c82:	9207      	str	r2, [sp, #28]
 8024c84:	e014      	b.n	8024cb0 <_svfiprintf_r+0x110>
 8024c86:	eba0 0308 	sub.w	r3, r0, r8
 8024c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8024c8e:	4313      	orrs	r3, r2
 8024c90:	9304      	str	r3, [sp, #16]
 8024c92:	46a2      	mov	sl, r4
 8024c94:	e7d2      	b.n	8024c3c <_svfiprintf_r+0x9c>
 8024c96:	9b03      	ldr	r3, [sp, #12]
 8024c98:	1d19      	adds	r1, r3, #4
 8024c9a:	681b      	ldr	r3, [r3, #0]
 8024c9c:	9103      	str	r1, [sp, #12]
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	bfbb      	ittet	lt
 8024ca2:	425b      	neglt	r3, r3
 8024ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8024ca8:	9307      	strge	r3, [sp, #28]
 8024caa:	9307      	strlt	r3, [sp, #28]
 8024cac:	bfb8      	it	lt
 8024cae:	9204      	strlt	r2, [sp, #16]
 8024cb0:	7823      	ldrb	r3, [r4, #0]
 8024cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8024cb4:	d10c      	bne.n	8024cd0 <_svfiprintf_r+0x130>
 8024cb6:	7863      	ldrb	r3, [r4, #1]
 8024cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8024cba:	d135      	bne.n	8024d28 <_svfiprintf_r+0x188>
 8024cbc:	9b03      	ldr	r3, [sp, #12]
 8024cbe:	1d1a      	adds	r2, r3, #4
 8024cc0:	681b      	ldr	r3, [r3, #0]
 8024cc2:	9203      	str	r2, [sp, #12]
 8024cc4:	2b00      	cmp	r3, #0
 8024cc6:	bfb8      	it	lt
 8024cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8024ccc:	3402      	adds	r4, #2
 8024cce:	9305      	str	r3, [sp, #20]
 8024cd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024d9c <_svfiprintf_r+0x1fc>
 8024cd4:	7821      	ldrb	r1, [r4, #0]
 8024cd6:	2203      	movs	r2, #3
 8024cd8:	4650      	mov	r0, sl
 8024cda:	f7db fac9 	bl	8000270 <memchr>
 8024cde:	b140      	cbz	r0, 8024cf2 <_svfiprintf_r+0x152>
 8024ce0:	2340      	movs	r3, #64	; 0x40
 8024ce2:	eba0 000a 	sub.w	r0, r0, sl
 8024ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8024cea:	9b04      	ldr	r3, [sp, #16]
 8024cec:	4303      	orrs	r3, r0
 8024cee:	3401      	adds	r4, #1
 8024cf0:	9304      	str	r3, [sp, #16]
 8024cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024cf6:	4826      	ldr	r0, [pc, #152]	; (8024d90 <_svfiprintf_r+0x1f0>)
 8024cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024cfc:	2206      	movs	r2, #6
 8024cfe:	f7db fab7 	bl	8000270 <memchr>
 8024d02:	2800      	cmp	r0, #0
 8024d04:	d038      	beq.n	8024d78 <_svfiprintf_r+0x1d8>
 8024d06:	4b23      	ldr	r3, [pc, #140]	; (8024d94 <_svfiprintf_r+0x1f4>)
 8024d08:	bb1b      	cbnz	r3, 8024d52 <_svfiprintf_r+0x1b2>
 8024d0a:	9b03      	ldr	r3, [sp, #12]
 8024d0c:	3307      	adds	r3, #7
 8024d0e:	f023 0307 	bic.w	r3, r3, #7
 8024d12:	3308      	adds	r3, #8
 8024d14:	9303      	str	r3, [sp, #12]
 8024d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d18:	4433      	add	r3, r6
 8024d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8024d1c:	e767      	b.n	8024bee <_svfiprintf_r+0x4e>
 8024d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024d22:	460c      	mov	r4, r1
 8024d24:	2001      	movs	r0, #1
 8024d26:	e7a5      	b.n	8024c74 <_svfiprintf_r+0xd4>
 8024d28:	2300      	movs	r3, #0
 8024d2a:	3401      	adds	r4, #1
 8024d2c:	9305      	str	r3, [sp, #20]
 8024d2e:	4619      	mov	r1, r3
 8024d30:	f04f 0c0a 	mov.w	ip, #10
 8024d34:	4620      	mov	r0, r4
 8024d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024d3a:	3a30      	subs	r2, #48	; 0x30
 8024d3c:	2a09      	cmp	r2, #9
 8024d3e:	d903      	bls.n	8024d48 <_svfiprintf_r+0x1a8>
 8024d40:	2b00      	cmp	r3, #0
 8024d42:	d0c5      	beq.n	8024cd0 <_svfiprintf_r+0x130>
 8024d44:	9105      	str	r1, [sp, #20]
 8024d46:	e7c3      	b.n	8024cd0 <_svfiprintf_r+0x130>
 8024d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8024d4c:	4604      	mov	r4, r0
 8024d4e:	2301      	movs	r3, #1
 8024d50:	e7f0      	b.n	8024d34 <_svfiprintf_r+0x194>
 8024d52:	ab03      	add	r3, sp, #12
 8024d54:	9300      	str	r3, [sp, #0]
 8024d56:	462a      	mov	r2, r5
 8024d58:	4b0f      	ldr	r3, [pc, #60]	; (8024d98 <_svfiprintf_r+0x1f8>)
 8024d5a:	a904      	add	r1, sp, #16
 8024d5c:	4638      	mov	r0, r7
 8024d5e:	f7fc f98f 	bl	8021080 <_printf_float>
 8024d62:	1c42      	adds	r2, r0, #1
 8024d64:	4606      	mov	r6, r0
 8024d66:	d1d6      	bne.n	8024d16 <_svfiprintf_r+0x176>
 8024d68:	89ab      	ldrh	r3, [r5, #12]
 8024d6a:	065b      	lsls	r3, r3, #25
 8024d6c:	f53f af2c 	bmi.w	8024bc8 <_svfiprintf_r+0x28>
 8024d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024d72:	b01d      	add	sp, #116	; 0x74
 8024d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024d78:	ab03      	add	r3, sp, #12
 8024d7a:	9300      	str	r3, [sp, #0]
 8024d7c:	462a      	mov	r2, r5
 8024d7e:	4b06      	ldr	r3, [pc, #24]	; (8024d98 <_svfiprintf_r+0x1f8>)
 8024d80:	a904      	add	r1, sp, #16
 8024d82:	4638      	mov	r0, r7
 8024d84:	f7fc fc08 	bl	8021598 <_printf_i>
 8024d88:	e7eb      	b.n	8024d62 <_svfiprintf_r+0x1c2>
 8024d8a:	bf00      	nop
 8024d8c:	080417fc 	.word	0x080417fc
 8024d90:	08041806 	.word	0x08041806
 8024d94:	08021081 	.word	0x08021081
 8024d98:	08024aeb 	.word	0x08024aeb
 8024d9c:	08041802 	.word	0x08041802

08024da0 <_sungetc_r>:
 8024da0:	b538      	push	{r3, r4, r5, lr}
 8024da2:	1c4b      	adds	r3, r1, #1
 8024da4:	4614      	mov	r4, r2
 8024da6:	d103      	bne.n	8024db0 <_sungetc_r+0x10>
 8024da8:	f04f 35ff 	mov.w	r5, #4294967295
 8024dac:	4628      	mov	r0, r5
 8024dae:	bd38      	pop	{r3, r4, r5, pc}
 8024db0:	8993      	ldrh	r3, [r2, #12]
 8024db2:	f023 0320 	bic.w	r3, r3, #32
 8024db6:	8193      	strh	r3, [r2, #12]
 8024db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024dba:	6852      	ldr	r2, [r2, #4]
 8024dbc:	b2cd      	uxtb	r5, r1
 8024dbe:	b18b      	cbz	r3, 8024de4 <_sungetc_r+0x44>
 8024dc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024dc2:	4293      	cmp	r3, r2
 8024dc4:	dd08      	ble.n	8024dd8 <_sungetc_r+0x38>
 8024dc6:	6823      	ldr	r3, [r4, #0]
 8024dc8:	1e5a      	subs	r2, r3, #1
 8024dca:	6022      	str	r2, [r4, #0]
 8024dcc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8024dd0:	6863      	ldr	r3, [r4, #4]
 8024dd2:	3301      	adds	r3, #1
 8024dd4:	6063      	str	r3, [r4, #4]
 8024dd6:	e7e9      	b.n	8024dac <_sungetc_r+0xc>
 8024dd8:	4621      	mov	r1, r4
 8024dda:	f000 fced 	bl	80257b8 <__submore>
 8024dde:	2800      	cmp	r0, #0
 8024de0:	d0f1      	beq.n	8024dc6 <_sungetc_r+0x26>
 8024de2:	e7e1      	b.n	8024da8 <_sungetc_r+0x8>
 8024de4:	6921      	ldr	r1, [r4, #16]
 8024de6:	6823      	ldr	r3, [r4, #0]
 8024de8:	b151      	cbz	r1, 8024e00 <_sungetc_r+0x60>
 8024dea:	4299      	cmp	r1, r3
 8024dec:	d208      	bcs.n	8024e00 <_sungetc_r+0x60>
 8024dee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8024df2:	42a9      	cmp	r1, r5
 8024df4:	d104      	bne.n	8024e00 <_sungetc_r+0x60>
 8024df6:	3b01      	subs	r3, #1
 8024df8:	3201      	adds	r2, #1
 8024dfa:	6023      	str	r3, [r4, #0]
 8024dfc:	6062      	str	r2, [r4, #4]
 8024dfe:	e7d5      	b.n	8024dac <_sungetc_r+0xc>
 8024e00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8024e04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024e08:	6363      	str	r3, [r4, #52]	; 0x34
 8024e0a:	2303      	movs	r3, #3
 8024e0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8024e0e:	4623      	mov	r3, r4
 8024e10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8024e14:	6023      	str	r3, [r4, #0]
 8024e16:	2301      	movs	r3, #1
 8024e18:	e7dc      	b.n	8024dd4 <_sungetc_r+0x34>

08024e1a <__ssrefill_r>:
 8024e1a:	b510      	push	{r4, lr}
 8024e1c:	460c      	mov	r4, r1
 8024e1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8024e20:	b169      	cbz	r1, 8024e3e <__ssrefill_r+0x24>
 8024e22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024e26:	4299      	cmp	r1, r3
 8024e28:	d001      	beq.n	8024e2e <__ssrefill_r+0x14>
 8024e2a:	f7fb ffef 	bl	8020e0c <_free_r>
 8024e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024e30:	6063      	str	r3, [r4, #4]
 8024e32:	2000      	movs	r0, #0
 8024e34:	6360      	str	r0, [r4, #52]	; 0x34
 8024e36:	b113      	cbz	r3, 8024e3e <__ssrefill_r+0x24>
 8024e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8024e3a:	6023      	str	r3, [r4, #0]
 8024e3c:	bd10      	pop	{r4, pc}
 8024e3e:	6923      	ldr	r3, [r4, #16]
 8024e40:	6023      	str	r3, [r4, #0]
 8024e42:	2300      	movs	r3, #0
 8024e44:	6063      	str	r3, [r4, #4]
 8024e46:	89a3      	ldrh	r3, [r4, #12]
 8024e48:	f043 0320 	orr.w	r3, r3, #32
 8024e4c:	81a3      	strh	r3, [r4, #12]
 8024e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8024e52:	e7f3      	b.n	8024e3c <__ssrefill_r+0x22>

08024e54 <__ssvfiscanf_r>:
 8024e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024e58:	460c      	mov	r4, r1
 8024e5a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8024e5e:	2100      	movs	r1, #0
 8024e60:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8024e64:	49b2      	ldr	r1, [pc, #712]	; (8025130 <__ssvfiscanf_r+0x2dc>)
 8024e66:	91a0      	str	r1, [sp, #640]	; 0x280
 8024e68:	f10d 0804 	add.w	r8, sp, #4
 8024e6c:	49b1      	ldr	r1, [pc, #708]	; (8025134 <__ssvfiscanf_r+0x2e0>)
 8024e6e:	4fb2      	ldr	r7, [pc, #712]	; (8025138 <__ssvfiscanf_r+0x2e4>)
 8024e70:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 802513c <__ssvfiscanf_r+0x2e8>
 8024e74:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8024e78:	4606      	mov	r6, r0
 8024e7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8024e7c:	9300      	str	r3, [sp, #0]
 8024e7e:	f892 a000 	ldrb.w	sl, [r2]
 8024e82:	f1ba 0f00 	cmp.w	sl, #0
 8024e86:	f000 8151 	beq.w	802512c <__ssvfiscanf_r+0x2d8>
 8024e8a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8024e8e:	f013 0308 	ands.w	r3, r3, #8
 8024e92:	f102 0501 	add.w	r5, r2, #1
 8024e96:	d019      	beq.n	8024ecc <__ssvfiscanf_r+0x78>
 8024e98:	6863      	ldr	r3, [r4, #4]
 8024e9a:	2b00      	cmp	r3, #0
 8024e9c:	dd0f      	ble.n	8024ebe <__ssvfiscanf_r+0x6a>
 8024e9e:	6823      	ldr	r3, [r4, #0]
 8024ea0:	781a      	ldrb	r2, [r3, #0]
 8024ea2:	5cba      	ldrb	r2, [r7, r2]
 8024ea4:	0712      	lsls	r2, r2, #28
 8024ea6:	d401      	bmi.n	8024eac <__ssvfiscanf_r+0x58>
 8024ea8:	462a      	mov	r2, r5
 8024eaa:	e7e8      	b.n	8024e7e <__ssvfiscanf_r+0x2a>
 8024eac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8024eae:	3201      	adds	r2, #1
 8024eb0:	9245      	str	r2, [sp, #276]	; 0x114
 8024eb2:	6862      	ldr	r2, [r4, #4]
 8024eb4:	3301      	adds	r3, #1
 8024eb6:	3a01      	subs	r2, #1
 8024eb8:	6062      	str	r2, [r4, #4]
 8024eba:	6023      	str	r3, [r4, #0]
 8024ebc:	e7ec      	b.n	8024e98 <__ssvfiscanf_r+0x44>
 8024ebe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024ec0:	4621      	mov	r1, r4
 8024ec2:	4630      	mov	r0, r6
 8024ec4:	4798      	blx	r3
 8024ec6:	2800      	cmp	r0, #0
 8024ec8:	d0e9      	beq.n	8024e9e <__ssvfiscanf_r+0x4a>
 8024eca:	e7ed      	b.n	8024ea8 <__ssvfiscanf_r+0x54>
 8024ecc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8024ed0:	f040 8083 	bne.w	8024fda <__ssvfiscanf_r+0x186>
 8024ed4:	9341      	str	r3, [sp, #260]	; 0x104
 8024ed6:	9343      	str	r3, [sp, #268]	; 0x10c
 8024ed8:	7853      	ldrb	r3, [r2, #1]
 8024eda:	2b2a      	cmp	r3, #42	; 0x2a
 8024edc:	bf02      	ittt	eq
 8024ede:	2310      	moveq	r3, #16
 8024ee0:	1c95      	addeq	r5, r2, #2
 8024ee2:	9341      	streq	r3, [sp, #260]	; 0x104
 8024ee4:	220a      	movs	r2, #10
 8024ee6:	46ab      	mov	fp, r5
 8024ee8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8024eec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8024ef0:	2b09      	cmp	r3, #9
 8024ef2:	d91d      	bls.n	8024f30 <__ssvfiscanf_r+0xdc>
 8024ef4:	4891      	ldr	r0, [pc, #580]	; (802513c <__ssvfiscanf_r+0x2e8>)
 8024ef6:	2203      	movs	r2, #3
 8024ef8:	f7db f9ba 	bl	8000270 <memchr>
 8024efc:	b140      	cbz	r0, 8024f10 <__ssvfiscanf_r+0xbc>
 8024efe:	2301      	movs	r3, #1
 8024f00:	eba0 0009 	sub.w	r0, r0, r9
 8024f04:	fa03 f000 	lsl.w	r0, r3, r0
 8024f08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8024f0a:	4318      	orrs	r0, r3
 8024f0c:	9041      	str	r0, [sp, #260]	; 0x104
 8024f0e:	465d      	mov	r5, fp
 8024f10:	f815 3b01 	ldrb.w	r3, [r5], #1
 8024f14:	2b78      	cmp	r3, #120	; 0x78
 8024f16:	d806      	bhi.n	8024f26 <__ssvfiscanf_r+0xd2>
 8024f18:	2b57      	cmp	r3, #87	; 0x57
 8024f1a:	d810      	bhi.n	8024f3e <__ssvfiscanf_r+0xea>
 8024f1c:	2b25      	cmp	r3, #37	; 0x25
 8024f1e:	d05c      	beq.n	8024fda <__ssvfiscanf_r+0x186>
 8024f20:	d856      	bhi.n	8024fd0 <__ssvfiscanf_r+0x17c>
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	d074      	beq.n	8025010 <__ssvfiscanf_r+0x1bc>
 8024f26:	2303      	movs	r3, #3
 8024f28:	9347      	str	r3, [sp, #284]	; 0x11c
 8024f2a:	230a      	movs	r3, #10
 8024f2c:	9342      	str	r3, [sp, #264]	; 0x108
 8024f2e:	e081      	b.n	8025034 <__ssvfiscanf_r+0x1e0>
 8024f30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8024f32:	fb02 1303 	mla	r3, r2, r3, r1
 8024f36:	3b30      	subs	r3, #48	; 0x30
 8024f38:	9343      	str	r3, [sp, #268]	; 0x10c
 8024f3a:	465d      	mov	r5, fp
 8024f3c:	e7d3      	b.n	8024ee6 <__ssvfiscanf_r+0x92>
 8024f3e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8024f42:	2a20      	cmp	r2, #32
 8024f44:	d8ef      	bhi.n	8024f26 <__ssvfiscanf_r+0xd2>
 8024f46:	a101      	add	r1, pc, #4	; (adr r1, 8024f4c <__ssvfiscanf_r+0xf8>)
 8024f48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8024f4c:	0802501f 	.word	0x0802501f
 8024f50:	08024f27 	.word	0x08024f27
 8024f54:	08024f27 	.word	0x08024f27
 8024f58:	0802507d 	.word	0x0802507d
 8024f5c:	08024f27 	.word	0x08024f27
 8024f60:	08024f27 	.word	0x08024f27
 8024f64:	08024f27 	.word	0x08024f27
 8024f68:	08024f27 	.word	0x08024f27
 8024f6c:	08024f27 	.word	0x08024f27
 8024f70:	08024f27 	.word	0x08024f27
 8024f74:	08024f27 	.word	0x08024f27
 8024f78:	08025093 	.word	0x08025093
 8024f7c:	08025069 	.word	0x08025069
 8024f80:	08024fd7 	.word	0x08024fd7
 8024f84:	08024fd7 	.word	0x08024fd7
 8024f88:	08024fd7 	.word	0x08024fd7
 8024f8c:	08024f27 	.word	0x08024f27
 8024f90:	0802506d 	.word	0x0802506d
 8024f94:	08024f27 	.word	0x08024f27
 8024f98:	08024f27 	.word	0x08024f27
 8024f9c:	08024f27 	.word	0x08024f27
 8024fa0:	08024f27 	.word	0x08024f27
 8024fa4:	080250a3 	.word	0x080250a3
 8024fa8:	08025075 	.word	0x08025075
 8024fac:	08025017 	.word	0x08025017
 8024fb0:	08024f27 	.word	0x08024f27
 8024fb4:	08024f27 	.word	0x08024f27
 8024fb8:	0802509f 	.word	0x0802509f
 8024fbc:	08024f27 	.word	0x08024f27
 8024fc0:	08025069 	.word	0x08025069
 8024fc4:	08024f27 	.word	0x08024f27
 8024fc8:	08024f27 	.word	0x08024f27
 8024fcc:	0802501f 	.word	0x0802501f
 8024fd0:	3b45      	subs	r3, #69	; 0x45
 8024fd2:	2b02      	cmp	r3, #2
 8024fd4:	d8a7      	bhi.n	8024f26 <__ssvfiscanf_r+0xd2>
 8024fd6:	2305      	movs	r3, #5
 8024fd8:	e02b      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 8024fda:	6863      	ldr	r3, [r4, #4]
 8024fdc:	2b00      	cmp	r3, #0
 8024fde:	dd0d      	ble.n	8024ffc <__ssvfiscanf_r+0x1a8>
 8024fe0:	6823      	ldr	r3, [r4, #0]
 8024fe2:	781a      	ldrb	r2, [r3, #0]
 8024fe4:	4552      	cmp	r2, sl
 8024fe6:	f040 80a1 	bne.w	802512c <__ssvfiscanf_r+0x2d8>
 8024fea:	3301      	adds	r3, #1
 8024fec:	6862      	ldr	r2, [r4, #4]
 8024fee:	6023      	str	r3, [r4, #0]
 8024ff0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8024ff2:	3a01      	subs	r2, #1
 8024ff4:	3301      	adds	r3, #1
 8024ff6:	6062      	str	r2, [r4, #4]
 8024ff8:	9345      	str	r3, [sp, #276]	; 0x114
 8024ffa:	e755      	b.n	8024ea8 <__ssvfiscanf_r+0x54>
 8024ffc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8024ffe:	4621      	mov	r1, r4
 8025000:	4630      	mov	r0, r6
 8025002:	4798      	blx	r3
 8025004:	2800      	cmp	r0, #0
 8025006:	d0eb      	beq.n	8024fe0 <__ssvfiscanf_r+0x18c>
 8025008:	9844      	ldr	r0, [sp, #272]	; 0x110
 802500a:	2800      	cmp	r0, #0
 802500c:	f040 8084 	bne.w	8025118 <__ssvfiscanf_r+0x2c4>
 8025010:	f04f 30ff 	mov.w	r0, #4294967295
 8025014:	e086      	b.n	8025124 <__ssvfiscanf_r+0x2d0>
 8025016:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025018:	f042 0220 	orr.w	r2, r2, #32
 802501c:	9241      	str	r2, [sp, #260]	; 0x104
 802501e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8025020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025024:	9241      	str	r2, [sp, #260]	; 0x104
 8025026:	2210      	movs	r2, #16
 8025028:	2b6f      	cmp	r3, #111	; 0x6f
 802502a:	9242      	str	r2, [sp, #264]	; 0x108
 802502c:	bf34      	ite	cc
 802502e:	2303      	movcc	r3, #3
 8025030:	2304      	movcs	r3, #4
 8025032:	9347      	str	r3, [sp, #284]	; 0x11c
 8025034:	6863      	ldr	r3, [r4, #4]
 8025036:	2b00      	cmp	r3, #0
 8025038:	dd41      	ble.n	80250be <__ssvfiscanf_r+0x26a>
 802503a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802503c:	0659      	lsls	r1, r3, #25
 802503e:	d404      	bmi.n	802504a <__ssvfiscanf_r+0x1f6>
 8025040:	6823      	ldr	r3, [r4, #0]
 8025042:	781a      	ldrb	r2, [r3, #0]
 8025044:	5cba      	ldrb	r2, [r7, r2]
 8025046:	0712      	lsls	r2, r2, #28
 8025048:	d440      	bmi.n	80250cc <__ssvfiscanf_r+0x278>
 802504a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802504c:	2b02      	cmp	r3, #2
 802504e:	dc4f      	bgt.n	80250f0 <__ssvfiscanf_r+0x29c>
 8025050:	466b      	mov	r3, sp
 8025052:	4622      	mov	r2, r4
 8025054:	a941      	add	r1, sp, #260	; 0x104
 8025056:	4630      	mov	r0, r6
 8025058:	f000 f9ce 	bl	80253f8 <_scanf_chars>
 802505c:	2801      	cmp	r0, #1
 802505e:	d065      	beq.n	802512c <__ssvfiscanf_r+0x2d8>
 8025060:	2802      	cmp	r0, #2
 8025062:	f47f af21 	bne.w	8024ea8 <__ssvfiscanf_r+0x54>
 8025066:	e7cf      	b.n	8025008 <__ssvfiscanf_r+0x1b4>
 8025068:	220a      	movs	r2, #10
 802506a:	e7dd      	b.n	8025028 <__ssvfiscanf_r+0x1d4>
 802506c:	2300      	movs	r3, #0
 802506e:	9342      	str	r3, [sp, #264]	; 0x108
 8025070:	2303      	movs	r3, #3
 8025072:	e7de      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 8025074:	2308      	movs	r3, #8
 8025076:	9342      	str	r3, [sp, #264]	; 0x108
 8025078:	2304      	movs	r3, #4
 802507a:	e7da      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 802507c:	4629      	mov	r1, r5
 802507e:	4640      	mov	r0, r8
 8025080:	f000 fb60 	bl	8025744 <__sccl>
 8025084:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802508a:	9341      	str	r3, [sp, #260]	; 0x104
 802508c:	4605      	mov	r5, r0
 802508e:	2301      	movs	r3, #1
 8025090:	e7cf      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 8025092:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8025094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8025098:	9341      	str	r3, [sp, #260]	; 0x104
 802509a:	2300      	movs	r3, #0
 802509c:	e7c9      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 802509e:	2302      	movs	r3, #2
 80250a0:	e7c7      	b.n	8025032 <__ssvfiscanf_r+0x1de>
 80250a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80250a4:	06c3      	lsls	r3, r0, #27
 80250a6:	f53f aeff 	bmi.w	8024ea8 <__ssvfiscanf_r+0x54>
 80250aa:	9b00      	ldr	r3, [sp, #0]
 80250ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80250ae:	1d19      	adds	r1, r3, #4
 80250b0:	9100      	str	r1, [sp, #0]
 80250b2:	681b      	ldr	r3, [r3, #0]
 80250b4:	07c0      	lsls	r0, r0, #31
 80250b6:	bf4c      	ite	mi
 80250b8:	801a      	strhmi	r2, [r3, #0]
 80250ba:	601a      	strpl	r2, [r3, #0]
 80250bc:	e6f4      	b.n	8024ea8 <__ssvfiscanf_r+0x54>
 80250be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80250c0:	4621      	mov	r1, r4
 80250c2:	4630      	mov	r0, r6
 80250c4:	4798      	blx	r3
 80250c6:	2800      	cmp	r0, #0
 80250c8:	d0b7      	beq.n	802503a <__ssvfiscanf_r+0x1e6>
 80250ca:	e79d      	b.n	8025008 <__ssvfiscanf_r+0x1b4>
 80250cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80250ce:	3201      	adds	r2, #1
 80250d0:	9245      	str	r2, [sp, #276]	; 0x114
 80250d2:	6862      	ldr	r2, [r4, #4]
 80250d4:	3a01      	subs	r2, #1
 80250d6:	2a00      	cmp	r2, #0
 80250d8:	6062      	str	r2, [r4, #4]
 80250da:	dd02      	ble.n	80250e2 <__ssvfiscanf_r+0x28e>
 80250dc:	3301      	adds	r3, #1
 80250de:	6023      	str	r3, [r4, #0]
 80250e0:	e7ae      	b.n	8025040 <__ssvfiscanf_r+0x1ec>
 80250e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80250e4:	4621      	mov	r1, r4
 80250e6:	4630      	mov	r0, r6
 80250e8:	4798      	blx	r3
 80250ea:	2800      	cmp	r0, #0
 80250ec:	d0a8      	beq.n	8025040 <__ssvfiscanf_r+0x1ec>
 80250ee:	e78b      	b.n	8025008 <__ssvfiscanf_r+0x1b4>
 80250f0:	2b04      	cmp	r3, #4
 80250f2:	dc06      	bgt.n	8025102 <__ssvfiscanf_r+0x2ae>
 80250f4:	466b      	mov	r3, sp
 80250f6:	4622      	mov	r2, r4
 80250f8:	a941      	add	r1, sp, #260	; 0x104
 80250fa:	4630      	mov	r0, r6
 80250fc:	f000 f9d4 	bl	80254a8 <_scanf_i>
 8025100:	e7ac      	b.n	802505c <__ssvfiscanf_r+0x208>
 8025102:	4b0f      	ldr	r3, [pc, #60]	; (8025140 <__ssvfiscanf_r+0x2ec>)
 8025104:	2b00      	cmp	r3, #0
 8025106:	f43f aecf 	beq.w	8024ea8 <__ssvfiscanf_r+0x54>
 802510a:	466b      	mov	r3, sp
 802510c:	4622      	mov	r2, r4
 802510e:	a941      	add	r1, sp, #260	; 0x104
 8025110:	4630      	mov	r0, r6
 8025112:	f3af 8000 	nop.w
 8025116:	e7a1      	b.n	802505c <__ssvfiscanf_r+0x208>
 8025118:	89a3      	ldrh	r3, [r4, #12]
 802511a:	f013 0f40 	tst.w	r3, #64	; 0x40
 802511e:	bf18      	it	ne
 8025120:	f04f 30ff 	movne.w	r0, #4294967295
 8025124:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8025128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802512c:	9844      	ldr	r0, [sp, #272]	; 0x110
 802512e:	e7f9      	b.n	8025124 <__ssvfiscanf_r+0x2d0>
 8025130:	08024da1 	.word	0x08024da1
 8025134:	08024e1b 	.word	0x08024e1b
 8025138:	08040f31 	.word	0x08040f31
 802513c:	08041802 	.word	0x08041802
 8025140:	00000000 	.word	0x00000000

08025144 <__sfputc_r>:
 8025144:	6893      	ldr	r3, [r2, #8]
 8025146:	3b01      	subs	r3, #1
 8025148:	2b00      	cmp	r3, #0
 802514a:	b410      	push	{r4}
 802514c:	6093      	str	r3, [r2, #8]
 802514e:	da08      	bge.n	8025162 <__sfputc_r+0x1e>
 8025150:	6994      	ldr	r4, [r2, #24]
 8025152:	42a3      	cmp	r3, r4
 8025154:	db01      	blt.n	802515a <__sfputc_r+0x16>
 8025156:	290a      	cmp	r1, #10
 8025158:	d103      	bne.n	8025162 <__sfputc_r+0x1e>
 802515a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802515e:	f7fd be39 	b.w	8022dd4 <__swbuf_r>
 8025162:	6813      	ldr	r3, [r2, #0]
 8025164:	1c58      	adds	r0, r3, #1
 8025166:	6010      	str	r0, [r2, #0]
 8025168:	7019      	strb	r1, [r3, #0]
 802516a:	4608      	mov	r0, r1
 802516c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025170:	4770      	bx	lr

08025172 <__sfputs_r>:
 8025172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025174:	4606      	mov	r6, r0
 8025176:	460f      	mov	r7, r1
 8025178:	4614      	mov	r4, r2
 802517a:	18d5      	adds	r5, r2, r3
 802517c:	42ac      	cmp	r4, r5
 802517e:	d101      	bne.n	8025184 <__sfputs_r+0x12>
 8025180:	2000      	movs	r0, #0
 8025182:	e007      	b.n	8025194 <__sfputs_r+0x22>
 8025184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025188:	463a      	mov	r2, r7
 802518a:	4630      	mov	r0, r6
 802518c:	f7ff ffda 	bl	8025144 <__sfputc_r>
 8025190:	1c43      	adds	r3, r0, #1
 8025192:	d1f3      	bne.n	802517c <__sfputs_r+0xa>
 8025194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025198 <_vfiprintf_r>:
 8025198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802519c:	460d      	mov	r5, r1
 802519e:	b09d      	sub	sp, #116	; 0x74
 80251a0:	4614      	mov	r4, r2
 80251a2:	4698      	mov	r8, r3
 80251a4:	4606      	mov	r6, r0
 80251a6:	b118      	cbz	r0, 80251b0 <_vfiprintf_r+0x18>
 80251a8:	6983      	ldr	r3, [r0, #24]
 80251aa:	b90b      	cbnz	r3, 80251b0 <_vfiprintf_r+0x18>
 80251ac:	f7fe fea2 	bl	8023ef4 <__sinit>
 80251b0:	4b89      	ldr	r3, [pc, #548]	; (80253d8 <_vfiprintf_r+0x240>)
 80251b2:	429d      	cmp	r5, r3
 80251b4:	d11b      	bne.n	80251ee <_vfiprintf_r+0x56>
 80251b6:	6875      	ldr	r5, [r6, #4]
 80251b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251ba:	07d9      	lsls	r1, r3, #31
 80251bc:	d405      	bmi.n	80251ca <_vfiprintf_r+0x32>
 80251be:	89ab      	ldrh	r3, [r5, #12]
 80251c0:	059a      	lsls	r2, r3, #22
 80251c2:	d402      	bmi.n	80251ca <_vfiprintf_r+0x32>
 80251c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80251c6:	f7ff f845 	bl	8024254 <__retarget_lock_acquire_recursive>
 80251ca:	89ab      	ldrh	r3, [r5, #12]
 80251cc:	071b      	lsls	r3, r3, #28
 80251ce:	d501      	bpl.n	80251d4 <_vfiprintf_r+0x3c>
 80251d0:	692b      	ldr	r3, [r5, #16]
 80251d2:	b9eb      	cbnz	r3, 8025210 <_vfiprintf_r+0x78>
 80251d4:	4629      	mov	r1, r5
 80251d6:	4630      	mov	r0, r6
 80251d8:	f7fd fe60 	bl	8022e9c <__swsetup_r>
 80251dc:	b1c0      	cbz	r0, 8025210 <_vfiprintf_r+0x78>
 80251de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80251e0:	07dc      	lsls	r4, r3, #31
 80251e2:	d50e      	bpl.n	8025202 <_vfiprintf_r+0x6a>
 80251e4:	f04f 30ff 	mov.w	r0, #4294967295
 80251e8:	b01d      	add	sp, #116	; 0x74
 80251ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80251ee:	4b7b      	ldr	r3, [pc, #492]	; (80253dc <_vfiprintf_r+0x244>)
 80251f0:	429d      	cmp	r5, r3
 80251f2:	d101      	bne.n	80251f8 <_vfiprintf_r+0x60>
 80251f4:	68b5      	ldr	r5, [r6, #8]
 80251f6:	e7df      	b.n	80251b8 <_vfiprintf_r+0x20>
 80251f8:	4b79      	ldr	r3, [pc, #484]	; (80253e0 <_vfiprintf_r+0x248>)
 80251fa:	429d      	cmp	r5, r3
 80251fc:	bf08      	it	eq
 80251fe:	68f5      	ldreq	r5, [r6, #12]
 8025200:	e7da      	b.n	80251b8 <_vfiprintf_r+0x20>
 8025202:	89ab      	ldrh	r3, [r5, #12]
 8025204:	0598      	lsls	r0, r3, #22
 8025206:	d4ed      	bmi.n	80251e4 <_vfiprintf_r+0x4c>
 8025208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802520a:	f7ff f825 	bl	8024258 <__retarget_lock_release_recursive>
 802520e:	e7e9      	b.n	80251e4 <_vfiprintf_r+0x4c>
 8025210:	2300      	movs	r3, #0
 8025212:	9309      	str	r3, [sp, #36]	; 0x24
 8025214:	2320      	movs	r3, #32
 8025216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802521a:	f8cd 800c 	str.w	r8, [sp, #12]
 802521e:	2330      	movs	r3, #48	; 0x30
 8025220:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80253e4 <_vfiprintf_r+0x24c>
 8025224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8025228:	f04f 0901 	mov.w	r9, #1
 802522c:	4623      	mov	r3, r4
 802522e:	469a      	mov	sl, r3
 8025230:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025234:	b10a      	cbz	r2, 802523a <_vfiprintf_r+0xa2>
 8025236:	2a25      	cmp	r2, #37	; 0x25
 8025238:	d1f9      	bne.n	802522e <_vfiprintf_r+0x96>
 802523a:	ebba 0b04 	subs.w	fp, sl, r4
 802523e:	d00b      	beq.n	8025258 <_vfiprintf_r+0xc0>
 8025240:	465b      	mov	r3, fp
 8025242:	4622      	mov	r2, r4
 8025244:	4629      	mov	r1, r5
 8025246:	4630      	mov	r0, r6
 8025248:	f7ff ff93 	bl	8025172 <__sfputs_r>
 802524c:	3001      	adds	r0, #1
 802524e:	f000 80aa 	beq.w	80253a6 <_vfiprintf_r+0x20e>
 8025252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025254:	445a      	add	r2, fp
 8025256:	9209      	str	r2, [sp, #36]	; 0x24
 8025258:	f89a 3000 	ldrb.w	r3, [sl]
 802525c:	2b00      	cmp	r3, #0
 802525e:	f000 80a2 	beq.w	80253a6 <_vfiprintf_r+0x20e>
 8025262:	2300      	movs	r3, #0
 8025264:	f04f 32ff 	mov.w	r2, #4294967295
 8025268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802526c:	f10a 0a01 	add.w	sl, sl, #1
 8025270:	9304      	str	r3, [sp, #16]
 8025272:	9307      	str	r3, [sp, #28]
 8025274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8025278:	931a      	str	r3, [sp, #104]	; 0x68
 802527a:	4654      	mov	r4, sl
 802527c:	2205      	movs	r2, #5
 802527e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025282:	4858      	ldr	r0, [pc, #352]	; (80253e4 <_vfiprintf_r+0x24c>)
 8025284:	f7da fff4 	bl	8000270 <memchr>
 8025288:	9a04      	ldr	r2, [sp, #16]
 802528a:	b9d8      	cbnz	r0, 80252c4 <_vfiprintf_r+0x12c>
 802528c:	06d1      	lsls	r1, r2, #27
 802528e:	bf44      	itt	mi
 8025290:	2320      	movmi	r3, #32
 8025292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8025296:	0713      	lsls	r3, r2, #28
 8025298:	bf44      	itt	mi
 802529a:	232b      	movmi	r3, #43	; 0x2b
 802529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80252a0:	f89a 3000 	ldrb.w	r3, [sl]
 80252a4:	2b2a      	cmp	r3, #42	; 0x2a
 80252a6:	d015      	beq.n	80252d4 <_vfiprintf_r+0x13c>
 80252a8:	9a07      	ldr	r2, [sp, #28]
 80252aa:	4654      	mov	r4, sl
 80252ac:	2000      	movs	r0, #0
 80252ae:	f04f 0c0a 	mov.w	ip, #10
 80252b2:	4621      	mov	r1, r4
 80252b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80252b8:	3b30      	subs	r3, #48	; 0x30
 80252ba:	2b09      	cmp	r3, #9
 80252bc:	d94e      	bls.n	802535c <_vfiprintf_r+0x1c4>
 80252be:	b1b0      	cbz	r0, 80252ee <_vfiprintf_r+0x156>
 80252c0:	9207      	str	r2, [sp, #28]
 80252c2:	e014      	b.n	80252ee <_vfiprintf_r+0x156>
 80252c4:	eba0 0308 	sub.w	r3, r0, r8
 80252c8:	fa09 f303 	lsl.w	r3, r9, r3
 80252cc:	4313      	orrs	r3, r2
 80252ce:	9304      	str	r3, [sp, #16]
 80252d0:	46a2      	mov	sl, r4
 80252d2:	e7d2      	b.n	802527a <_vfiprintf_r+0xe2>
 80252d4:	9b03      	ldr	r3, [sp, #12]
 80252d6:	1d19      	adds	r1, r3, #4
 80252d8:	681b      	ldr	r3, [r3, #0]
 80252da:	9103      	str	r1, [sp, #12]
 80252dc:	2b00      	cmp	r3, #0
 80252de:	bfbb      	ittet	lt
 80252e0:	425b      	neglt	r3, r3
 80252e2:	f042 0202 	orrlt.w	r2, r2, #2
 80252e6:	9307      	strge	r3, [sp, #28]
 80252e8:	9307      	strlt	r3, [sp, #28]
 80252ea:	bfb8      	it	lt
 80252ec:	9204      	strlt	r2, [sp, #16]
 80252ee:	7823      	ldrb	r3, [r4, #0]
 80252f0:	2b2e      	cmp	r3, #46	; 0x2e
 80252f2:	d10c      	bne.n	802530e <_vfiprintf_r+0x176>
 80252f4:	7863      	ldrb	r3, [r4, #1]
 80252f6:	2b2a      	cmp	r3, #42	; 0x2a
 80252f8:	d135      	bne.n	8025366 <_vfiprintf_r+0x1ce>
 80252fa:	9b03      	ldr	r3, [sp, #12]
 80252fc:	1d1a      	adds	r2, r3, #4
 80252fe:	681b      	ldr	r3, [r3, #0]
 8025300:	9203      	str	r2, [sp, #12]
 8025302:	2b00      	cmp	r3, #0
 8025304:	bfb8      	it	lt
 8025306:	f04f 33ff 	movlt.w	r3, #4294967295
 802530a:	3402      	adds	r4, #2
 802530c:	9305      	str	r3, [sp, #20]
 802530e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80253f4 <_vfiprintf_r+0x25c>
 8025312:	7821      	ldrb	r1, [r4, #0]
 8025314:	2203      	movs	r2, #3
 8025316:	4650      	mov	r0, sl
 8025318:	f7da ffaa 	bl	8000270 <memchr>
 802531c:	b140      	cbz	r0, 8025330 <_vfiprintf_r+0x198>
 802531e:	2340      	movs	r3, #64	; 0x40
 8025320:	eba0 000a 	sub.w	r0, r0, sl
 8025324:	fa03 f000 	lsl.w	r0, r3, r0
 8025328:	9b04      	ldr	r3, [sp, #16]
 802532a:	4303      	orrs	r3, r0
 802532c:	3401      	adds	r4, #1
 802532e:	9304      	str	r3, [sp, #16]
 8025330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025334:	482c      	ldr	r0, [pc, #176]	; (80253e8 <_vfiprintf_r+0x250>)
 8025336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802533a:	2206      	movs	r2, #6
 802533c:	f7da ff98 	bl	8000270 <memchr>
 8025340:	2800      	cmp	r0, #0
 8025342:	d03f      	beq.n	80253c4 <_vfiprintf_r+0x22c>
 8025344:	4b29      	ldr	r3, [pc, #164]	; (80253ec <_vfiprintf_r+0x254>)
 8025346:	bb1b      	cbnz	r3, 8025390 <_vfiprintf_r+0x1f8>
 8025348:	9b03      	ldr	r3, [sp, #12]
 802534a:	3307      	adds	r3, #7
 802534c:	f023 0307 	bic.w	r3, r3, #7
 8025350:	3308      	adds	r3, #8
 8025352:	9303      	str	r3, [sp, #12]
 8025354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025356:	443b      	add	r3, r7
 8025358:	9309      	str	r3, [sp, #36]	; 0x24
 802535a:	e767      	b.n	802522c <_vfiprintf_r+0x94>
 802535c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025360:	460c      	mov	r4, r1
 8025362:	2001      	movs	r0, #1
 8025364:	e7a5      	b.n	80252b2 <_vfiprintf_r+0x11a>
 8025366:	2300      	movs	r3, #0
 8025368:	3401      	adds	r4, #1
 802536a:	9305      	str	r3, [sp, #20]
 802536c:	4619      	mov	r1, r3
 802536e:	f04f 0c0a 	mov.w	ip, #10
 8025372:	4620      	mov	r0, r4
 8025374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025378:	3a30      	subs	r2, #48	; 0x30
 802537a:	2a09      	cmp	r2, #9
 802537c:	d903      	bls.n	8025386 <_vfiprintf_r+0x1ee>
 802537e:	2b00      	cmp	r3, #0
 8025380:	d0c5      	beq.n	802530e <_vfiprintf_r+0x176>
 8025382:	9105      	str	r1, [sp, #20]
 8025384:	e7c3      	b.n	802530e <_vfiprintf_r+0x176>
 8025386:	fb0c 2101 	mla	r1, ip, r1, r2
 802538a:	4604      	mov	r4, r0
 802538c:	2301      	movs	r3, #1
 802538e:	e7f0      	b.n	8025372 <_vfiprintf_r+0x1da>
 8025390:	ab03      	add	r3, sp, #12
 8025392:	9300      	str	r3, [sp, #0]
 8025394:	462a      	mov	r2, r5
 8025396:	4b16      	ldr	r3, [pc, #88]	; (80253f0 <_vfiprintf_r+0x258>)
 8025398:	a904      	add	r1, sp, #16
 802539a:	4630      	mov	r0, r6
 802539c:	f7fb fe70 	bl	8021080 <_printf_float>
 80253a0:	4607      	mov	r7, r0
 80253a2:	1c78      	adds	r0, r7, #1
 80253a4:	d1d6      	bne.n	8025354 <_vfiprintf_r+0x1bc>
 80253a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80253a8:	07d9      	lsls	r1, r3, #31
 80253aa:	d405      	bmi.n	80253b8 <_vfiprintf_r+0x220>
 80253ac:	89ab      	ldrh	r3, [r5, #12]
 80253ae:	059a      	lsls	r2, r3, #22
 80253b0:	d402      	bmi.n	80253b8 <_vfiprintf_r+0x220>
 80253b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80253b4:	f7fe ff50 	bl	8024258 <__retarget_lock_release_recursive>
 80253b8:	89ab      	ldrh	r3, [r5, #12]
 80253ba:	065b      	lsls	r3, r3, #25
 80253bc:	f53f af12 	bmi.w	80251e4 <_vfiprintf_r+0x4c>
 80253c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80253c2:	e711      	b.n	80251e8 <_vfiprintf_r+0x50>
 80253c4:	ab03      	add	r3, sp, #12
 80253c6:	9300      	str	r3, [sp, #0]
 80253c8:	462a      	mov	r2, r5
 80253ca:	4b09      	ldr	r3, [pc, #36]	; (80253f0 <_vfiprintf_r+0x258>)
 80253cc:	a904      	add	r1, sp, #16
 80253ce:	4630      	mov	r0, r6
 80253d0:	f7fc f8e2 	bl	8021598 <_printf_i>
 80253d4:	e7e4      	b.n	80253a0 <_vfiprintf_r+0x208>
 80253d6:	bf00      	nop
 80253d8:	08041654 	.word	0x08041654
 80253dc:	08041674 	.word	0x08041674
 80253e0:	08041634 	.word	0x08041634
 80253e4:	080417fc 	.word	0x080417fc
 80253e8:	08041806 	.word	0x08041806
 80253ec:	08021081 	.word	0x08021081
 80253f0:	08025173 	.word	0x08025173
 80253f4:	08041802 	.word	0x08041802

080253f8 <_scanf_chars>:
 80253f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253fc:	4615      	mov	r5, r2
 80253fe:	688a      	ldr	r2, [r1, #8]
 8025400:	4680      	mov	r8, r0
 8025402:	460c      	mov	r4, r1
 8025404:	b932      	cbnz	r2, 8025414 <_scanf_chars+0x1c>
 8025406:	698a      	ldr	r2, [r1, #24]
 8025408:	2a00      	cmp	r2, #0
 802540a:	bf0c      	ite	eq
 802540c:	2201      	moveq	r2, #1
 802540e:	f04f 32ff 	movne.w	r2, #4294967295
 8025412:	608a      	str	r2, [r1, #8]
 8025414:	6822      	ldr	r2, [r4, #0]
 8025416:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80254a4 <_scanf_chars+0xac>
 802541a:	06d1      	lsls	r1, r2, #27
 802541c:	bf5f      	itttt	pl
 802541e:	681a      	ldrpl	r2, [r3, #0]
 8025420:	1d11      	addpl	r1, r2, #4
 8025422:	6019      	strpl	r1, [r3, #0]
 8025424:	6816      	ldrpl	r6, [r2, #0]
 8025426:	2700      	movs	r7, #0
 8025428:	69a0      	ldr	r0, [r4, #24]
 802542a:	b188      	cbz	r0, 8025450 <_scanf_chars+0x58>
 802542c:	2801      	cmp	r0, #1
 802542e:	d107      	bne.n	8025440 <_scanf_chars+0x48>
 8025430:	682b      	ldr	r3, [r5, #0]
 8025432:	781a      	ldrb	r2, [r3, #0]
 8025434:	6963      	ldr	r3, [r4, #20]
 8025436:	5c9b      	ldrb	r3, [r3, r2]
 8025438:	b953      	cbnz	r3, 8025450 <_scanf_chars+0x58>
 802543a:	bb27      	cbnz	r7, 8025486 <_scanf_chars+0x8e>
 802543c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025440:	2802      	cmp	r0, #2
 8025442:	d120      	bne.n	8025486 <_scanf_chars+0x8e>
 8025444:	682b      	ldr	r3, [r5, #0]
 8025446:	781b      	ldrb	r3, [r3, #0]
 8025448:	f813 3009 	ldrb.w	r3, [r3, r9]
 802544c:	071b      	lsls	r3, r3, #28
 802544e:	d41a      	bmi.n	8025486 <_scanf_chars+0x8e>
 8025450:	6823      	ldr	r3, [r4, #0]
 8025452:	06da      	lsls	r2, r3, #27
 8025454:	bf5e      	ittt	pl
 8025456:	682b      	ldrpl	r3, [r5, #0]
 8025458:	781b      	ldrbpl	r3, [r3, #0]
 802545a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802545e:	682a      	ldr	r2, [r5, #0]
 8025460:	686b      	ldr	r3, [r5, #4]
 8025462:	3201      	adds	r2, #1
 8025464:	602a      	str	r2, [r5, #0]
 8025466:	68a2      	ldr	r2, [r4, #8]
 8025468:	3b01      	subs	r3, #1
 802546a:	3a01      	subs	r2, #1
 802546c:	606b      	str	r3, [r5, #4]
 802546e:	3701      	adds	r7, #1
 8025470:	60a2      	str	r2, [r4, #8]
 8025472:	b142      	cbz	r2, 8025486 <_scanf_chars+0x8e>
 8025474:	2b00      	cmp	r3, #0
 8025476:	dcd7      	bgt.n	8025428 <_scanf_chars+0x30>
 8025478:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802547c:	4629      	mov	r1, r5
 802547e:	4640      	mov	r0, r8
 8025480:	4798      	blx	r3
 8025482:	2800      	cmp	r0, #0
 8025484:	d0d0      	beq.n	8025428 <_scanf_chars+0x30>
 8025486:	6823      	ldr	r3, [r4, #0]
 8025488:	f013 0310 	ands.w	r3, r3, #16
 802548c:	d105      	bne.n	802549a <_scanf_chars+0xa2>
 802548e:	68e2      	ldr	r2, [r4, #12]
 8025490:	3201      	adds	r2, #1
 8025492:	60e2      	str	r2, [r4, #12]
 8025494:	69a2      	ldr	r2, [r4, #24]
 8025496:	b102      	cbz	r2, 802549a <_scanf_chars+0xa2>
 8025498:	7033      	strb	r3, [r6, #0]
 802549a:	6923      	ldr	r3, [r4, #16]
 802549c:	441f      	add	r7, r3
 802549e:	6127      	str	r7, [r4, #16]
 80254a0:	2000      	movs	r0, #0
 80254a2:	e7cb      	b.n	802543c <_scanf_chars+0x44>
 80254a4:	08040f31 	.word	0x08040f31

080254a8 <_scanf_i>:
 80254a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80254ac:	4698      	mov	r8, r3
 80254ae:	4b74      	ldr	r3, [pc, #464]	; (8025680 <_scanf_i+0x1d8>)
 80254b0:	460c      	mov	r4, r1
 80254b2:	4682      	mov	sl, r0
 80254b4:	4616      	mov	r6, r2
 80254b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80254ba:	b087      	sub	sp, #28
 80254bc:	ab03      	add	r3, sp, #12
 80254be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80254c2:	4b70      	ldr	r3, [pc, #448]	; (8025684 <_scanf_i+0x1dc>)
 80254c4:	69a1      	ldr	r1, [r4, #24]
 80254c6:	4a70      	ldr	r2, [pc, #448]	; (8025688 <_scanf_i+0x1e0>)
 80254c8:	2903      	cmp	r1, #3
 80254ca:	bf18      	it	ne
 80254cc:	461a      	movne	r2, r3
 80254ce:	68a3      	ldr	r3, [r4, #8]
 80254d0:	9201      	str	r2, [sp, #4]
 80254d2:	1e5a      	subs	r2, r3, #1
 80254d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80254d8:	bf88      	it	hi
 80254da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80254de:	4627      	mov	r7, r4
 80254e0:	bf82      	ittt	hi
 80254e2:	eb03 0905 	addhi.w	r9, r3, r5
 80254e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80254ea:	60a3      	strhi	r3, [r4, #8]
 80254ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80254f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80254f4:	bf98      	it	ls
 80254f6:	f04f 0900 	movls.w	r9, #0
 80254fa:	6023      	str	r3, [r4, #0]
 80254fc:	463d      	mov	r5, r7
 80254fe:	f04f 0b00 	mov.w	fp, #0
 8025502:	6831      	ldr	r1, [r6, #0]
 8025504:	ab03      	add	r3, sp, #12
 8025506:	7809      	ldrb	r1, [r1, #0]
 8025508:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802550c:	2202      	movs	r2, #2
 802550e:	f7da feaf 	bl	8000270 <memchr>
 8025512:	b328      	cbz	r0, 8025560 <_scanf_i+0xb8>
 8025514:	f1bb 0f01 	cmp.w	fp, #1
 8025518:	d159      	bne.n	80255ce <_scanf_i+0x126>
 802551a:	6862      	ldr	r2, [r4, #4]
 802551c:	b92a      	cbnz	r2, 802552a <_scanf_i+0x82>
 802551e:	6822      	ldr	r2, [r4, #0]
 8025520:	2308      	movs	r3, #8
 8025522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8025526:	6063      	str	r3, [r4, #4]
 8025528:	6022      	str	r2, [r4, #0]
 802552a:	6822      	ldr	r2, [r4, #0]
 802552c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8025530:	6022      	str	r2, [r4, #0]
 8025532:	68a2      	ldr	r2, [r4, #8]
 8025534:	1e51      	subs	r1, r2, #1
 8025536:	60a1      	str	r1, [r4, #8]
 8025538:	b192      	cbz	r2, 8025560 <_scanf_i+0xb8>
 802553a:	6832      	ldr	r2, [r6, #0]
 802553c:	1c51      	adds	r1, r2, #1
 802553e:	6031      	str	r1, [r6, #0]
 8025540:	7812      	ldrb	r2, [r2, #0]
 8025542:	f805 2b01 	strb.w	r2, [r5], #1
 8025546:	6872      	ldr	r2, [r6, #4]
 8025548:	3a01      	subs	r2, #1
 802554a:	2a00      	cmp	r2, #0
 802554c:	6072      	str	r2, [r6, #4]
 802554e:	dc07      	bgt.n	8025560 <_scanf_i+0xb8>
 8025550:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8025554:	4631      	mov	r1, r6
 8025556:	4650      	mov	r0, sl
 8025558:	4790      	blx	r2
 802555a:	2800      	cmp	r0, #0
 802555c:	f040 8085 	bne.w	802566a <_scanf_i+0x1c2>
 8025560:	f10b 0b01 	add.w	fp, fp, #1
 8025564:	f1bb 0f03 	cmp.w	fp, #3
 8025568:	d1cb      	bne.n	8025502 <_scanf_i+0x5a>
 802556a:	6863      	ldr	r3, [r4, #4]
 802556c:	b90b      	cbnz	r3, 8025572 <_scanf_i+0xca>
 802556e:	230a      	movs	r3, #10
 8025570:	6063      	str	r3, [r4, #4]
 8025572:	6863      	ldr	r3, [r4, #4]
 8025574:	4945      	ldr	r1, [pc, #276]	; (802568c <_scanf_i+0x1e4>)
 8025576:	6960      	ldr	r0, [r4, #20]
 8025578:	1ac9      	subs	r1, r1, r3
 802557a:	f000 f8e3 	bl	8025744 <__sccl>
 802557e:	f04f 0b00 	mov.w	fp, #0
 8025582:	68a3      	ldr	r3, [r4, #8]
 8025584:	6822      	ldr	r2, [r4, #0]
 8025586:	2b00      	cmp	r3, #0
 8025588:	d03d      	beq.n	8025606 <_scanf_i+0x15e>
 802558a:	6831      	ldr	r1, [r6, #0]
 802558c:	6960      	ldr	r0, [r4, #20]
 802558e:	f891 c000 	ldrb.w	ip, [r1]
 8025592:	f810 000c 	ldrb.w	r0, [r0, ip]
 8025596:	2800      	cmp	r0, #0
 8025598:	d035      	beq.n	8025606 <_scanf_i+0x15e>
 802559a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802559e:	d124      	bne.n	80255ea <_scanf_i+0x142>
 80255a0:	0510      	lsls	r0, r2, #20
 80255a2:	d522      	bpl.n	80255ea <_scanf_i+0x142>
 80255a4:	f10b 0b01 	add.w	fp, fp, #1
 80255a8:	f1b9 0f00 	cmp.w	r9, #0
 80255ac:	d003      	beq.n	80255b6 <_scanf_i+0x10e>
 80255ae:	3301      	adds	r3, #1
 80255b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80255b4:	60a3      	str	r3, [r4, #8]
 80255b6:	6873      	ldr	r3, [r6, #4]
 80255b8:	3b01      	subs	r3, #1
 80255ba:	2b00      	cmp	r3, #0
 80255bc:	6073      	str	r3, [r6, #4]
 80255be:	dd1b      	ble.n	80255f8 <_scanf_i+0x150>
 80255c0:	6833      	ldr	r3, [r6, #0]
 80255c2:	3301      	adds	r3, #1
 80255c4:	6033      	str	r3, [r6, #0]
 80255c6:	68a3      	ldr	r3, [r4, #8]
 80255c8:	3b01      	subs	r3, #1
 80255ca:	60a3      	str	r3, [r4, #8]
 80255cc:	e7d9      	b.n	8025582 <_scanf_i+0xda>
 80255ce:	f1bb 0f02 	cmp.w	fp, #2
 80255d2:	d1ae      	bne.n	8025532 <_scanf_i+0x8a>
 80255d4:	6822      	ldr	r2, [r4, #0]
 80255d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80255da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80255de:	d1bf      	bne.n	8025560 <_scanf_i+0xb8>
 80255e0:	2310      	movs	r3, #16
 80255e2:	6063      	str	r3, [r4, #4]
 80255e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80255e8:	e7a2      	b.n	8025530 <_scanf_i+0x88>
 80255ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80255ee:	6022      	str	r2, [r4, #0]
 80255f0:	780b      	ldrb	r3, [r1, #0]
 80255f2:	f805 3b01 	strb.w	r3, [r5], #1
 80255f6:	e7de      	b.n	80255b6 <_scanf_i+0x10e>
 80255f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80255fc:	4631      	mov	r1, r6
 80255fe:	4650      	mov	r0, sl
 8025600:	4798      	blx	r3
 8025602:	2800      	cmp	r0, #0
 8025604:	d0df      	beq.n	80255c6 <_scanf_i+0x11e>
 8025606:	6823      	ldr	r3, [r4, #0]
 8025608:	05d9      	lsls	r1, r3, #23
 802560a:	d50d      	bpl.n	8025628 <_scanf_i+0x180>
 802560c:	42bd      	cmp	r5, r7
 802560e:	d909      	bls.n	8025624 <_scanf_i+0x17c>
 8025610:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8025614:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8025618:	4632      	mov	r2, r6
 802561a:	4650      	mov	r0, sl
 802561c:	4798      	blx	r3
 802561e:	f105 39ff 	add.w	r9, r5, #4294967295
 8025622:	464d      	mov	r5, r9
 8025624:	42bd      	cmp	r5, r7
 8025626:	d028      	beq.n	802567a <_scanf_i+0x1d2>
 8025628:	6822      	ldr	r2, [r4, #0]
 802562a:	f012 0210 	ands.w	r2, r2, #16
 802562e:	d113      	bne.n	8025658 <_scanf_i+0x1b0>
 8025630:	702a      	strb	r2, [r5, #0]
 8025632:	6863      	ldr	r3, [r4, #4]
 8025634:	9e01      	ldr	r6, [sp, #4]
 8025636:	4639      	mov	r1, r7
 8025638:	4650      	mov	r0, sl
 802563a:	47b0      	blx	r6
 802563c:	f8d8 3000 	ldr.w	r3, [r8]
 8025640:	6821      	ldr	r1, [r4, #0]
 8025642:	1d1a      	adds	r2, r3, #4
 8025644:	f8c8 2000 	str.w	r2, [r8]
 8025648:	f011 0f20 	tst.w	r1, #32
 802564c:	681b      	ldr	r3, [r3, #0]
 802564e:	d00f      	beq.n	8025670 <_scanf_i+0x1c8>
 8025650:	6018      	str	r0, [r3, #0]
 8025652:	68e3      	ldr	r3, [r4, #12]
 8025654:	3301      	adds	r3, #1
 8025656:	60e3      	str	r3, [r4, #12]
 8025658:	1bed      	subs	r5, r5, r7
 802565a:	44ab      	add	fp, r5
 802565c:	6925      	ldr	r5, [r4, #16]
 802565e:	445d      	add	r5, fp
 8025660:	6125      	str	r5, [r4, #16]
 8025662:	2000      	movs	r0, #0
 8025664:	b007      	add	sp, #28
 8025666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802566a:	f04f 0b00 	mov.w	fp, #0
 802566e:	e7ca      	b.n	8025606 <_scanf_i+0x15e>
 8025670:	07ca      	lsls	r2, r1, #31
 8025672:	bf4c      	ite	mi
 8025674:	8018      	strhmi	r0, [r3, #0]
 8025676:	6018      	strpl	r0, [r3, #0]
 8025678:	e7eb      	b.n	8025652 <_scanf_i+0x1aa>
 802567a:	2001      	movs	r0, #1
 802567c:	e7f2      	b.n	8025664 <_scanf_i+0x1bc>
 802567e:	bf00      	nop
 8025680:	08025b34 	.word	0x08025b34
 8025684:	08022951 	.word	0x08022951
 8025688:	08022841 	.word	0x08022841
 802568c:	08041826 	.word	0x08041826

08025690 <_putc_r>:
 8025690:	b570      	push	{r4, r5, r6, lr}
 8025692:	460d      	mov	r5, r1
 8025694:	4614      	mov	r4, r2
 8025696:	4606      	mov	r6, r0
 8025698:	b118      	cbz	r0, 80256a2 <_putc_r+0x12>
 802569a:	6983      	ldr	r3, [r0, #24]
 802569c:	b90b      	cbnz	r3, 80256a2 <_putc_r+0x12>
 802569e:	f7fe fc29 	bl	8023ef4 <__sinit>
 80256a2:	4b1c      	ldr	r3, [pc, #112]	; (8025714 <_putc_r+0x84>)
 80256a4:	429c      	cmp	r4, r3
 80256a6:	d124      	bne.n	80256f2 <_putc_r+0x62>
 80256a8:	6874      	ldr	r4, [r6, #4]
 80256aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80256ac:	07d8      	lsls	r0, r3, #31
 80256ae:	d405      	bmi.n	80256bc <_putc_r+0x2c>
 80256b0:	89a3      	ldrh	r3, [r4, #12]
 80256b2:	0599      	lsls	r1, r3, #22
 80256b4:	d402      	bmi.n	80256bc <_putc_r+0x2c>
 80256b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80256b8:	f7fe fdcc 	bl	8024254 <__retarget_lock_acquire_recursive>
 80256bc:	68a3      	ldr	r3, [r4, #8]
 80256be:	3b01      	subs	r3, #1
 80256c0:	2b00      	cmp	r3, #0
 80256c2:	60a3      	str	r3, [r4, #8]
 80256c4:	da05      	bge.n	80256d2 <_putc_r+0x42>
 80256c6:	69a2      	ldr	r2, [r4, #24]
 80256c8:	4293      	cmp	r3, r2
 80256ca:	db1c      	blt.n	8025706 <_putc_r+0x76>
 80256cc:	b2eb      	uxtb	r3, r5
 80256ce:	2b0a      	cmp	r3, #10
 80256d0:	d019      	beq.n	8025706 <_putc_r+0x76>
 80256d2:	6823      	ldr	r3, [r4, #0]
 80256d4:	1c5a      	adds	r2, r3, #1
 80256d6:	6022      	str	r2, [r4, #0]
 80256d8:	701d      	strb	r5, [r3, #0]
 80256da:	b2ed      	uxtb	r5, r5
 80256dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80256de:	07da      	lsls	r2, r3, #31
 80256e0:	d405      	bmi.n	80256ee <_putc_r+0x5e>
 80256e2:	89a3      	ldrh	r3, [r4, #12]
 80256e4:	059b      	lsls	r3, r3, #22
 80256e6:	d402      	bmi.n	80256ee <_putc_r+0x5e>
 80256e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80256ea:	f7fe fdb5 	bl	8024258 <__retarget_lock_release_recursive>
 80256ee:	4628      	mov	r0, r5
 80256f0:	bd70      	pop	{r4, r5, r6, pc}
 80256f2:	4b09      	ldr	r3, [pc, #36]	; (8025718 <_putc_r+0x88>)
 80256f4:	429c      	cmp	r4, r3
 80256f6:	d101      	bne.n	80256fc <_putc_r+0x6c>
 80256f8:	68b4      	ldr	r4, [r6, #8]
 80256fa:	e7d6      	b.n	80256aa <_putc_r+0x1a>
 80256fc:	4b07      	ldr	r3, [pc, #28]	; (802571c <_putc_r+0x8c>)
 80256fe:	429c      	cmp	r4, r3
 8025700:	bf08      	it	eq
 8025702:	68f4      	ldreq	r4, [r6, #12]
 8025704:	e7d1      	b.n	80256aa <_putc_r+0x1a>
 8025706:	4629      	mov	r1, r5
 8025708:	4622      	mov	r2, r4
 802570a:	4630      	mov	r0, r6
 802570c:	f7fd fb62 	bl	8022dd4 <__swbuf_r>
 8025710:	4605      	mov	r5, r0
 8025712:	e7e3      	b.n	80256dc <_putc_r+0x4c>
 8025714:	08041654 	.word	0x08041654
 8025718:	08041674 	.word	0x08041674
 802571c:	08041634 	.word	0x08041634

08025720 <_read_r>:
 8025720:	b538      	push	{r3, r4, r5, lr}
 8025722:	4d07      	ldr	r5, [pc, #28]	; (8025740 <_read_r+0x20>)
 8025724:	4604      	mov	r4, r0
 8025726:	4608      	mov	r0, r1
 8025728:	4611      	mov	r1, r2
 802572a:	2200      	movs	r2, #0
 802572c:	602a      	str	r2, [r5, #0]
 802572e:	461a      	mov	r2, r3
 8025730:	f7df ffb6 	bl	80056a0 <_read>
 8025734:	1c43      	adds	r3, r0, #1
 8025736:	d102      	bne.n	802573e <_read_r+0x1e>
 8025738:	682b      	ldr	r3, [r5, #0]
 802573a:	b103      	cbz	r3, 802573e <_read_r+0x1e>
 802573c:	6023      	str	r3, [r4, #0]
 802573e:	bd38      	pop	{r3, r4, r5, pc}
 8025740:	200368f0 	.word	0x200368f0

08025744 <__sccl>:
 8025744:	b570      	push	{r4, r5, r6, lr}
 8025746:	780b      	ldrb	r3, [r1, #0]
 8025748:	4604      	mov	r4, r0
 802574a:	2b5e      	cmp	r3, #94	; 0x5e
 802574c:	bf0b      	itete	eq
 802574e:	784b      	ldrbeq	r3, [r1, #1]
 8025750:	1c48      	addne	r0, r1, #1
 8025752:	1c88      	addeq	r0, r1, #2
 8025754:	2200      	movne	r2, #0
 8025756:	bf08      	it	eq
 8025758:	2201      	moveq	r2, #1
 802575a:	1e61      	subs	r1, r4, #1
 802575c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8025760:	f801 2f01 	strb.w	r2, [r1, #1]!
 8025764:	42a9      	cmp	r1, r5
 8025766:	d1fb      	bne.n	8025760 <__sccl+0x1c>
 8025768:	b90b      	cbnz	r3, 802576e <__sccl+0x2a>
 802576a:	3801      	subs	r0, #1
 802576c:	bd70      	pop	{r4, r5, r6, pc}
 802576e:	f082 0101 	eor.w	r1, r2, #1
 8025772:	54e1      	strb	r1, [r4, r3]
 8025774:	1c42      	adds	r2, r0, #1
 8025776:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802577a:	2d2d      	cmp	r5, #45	; 0x2d
 802577c:	f102 36ff 	add.w	r6, r2, #4294967295
 8025780:	4610      	mov	r0, r2
 8025782:	d006      	beq.n	8025792 <__sccl+0x4e>
 8025784:	2d5d      	cmp	r5, #93	; 0x5d
 8025786:	d0f1      	beq.n	802576c <__sccl+0x28>
 8025788:	b90d      	cbnz	r5, 802578e <__sccl+0x4a>
 802578a:	4630      	mov	r0, r6
 802578c:	e7ee      	b.n	802576c <__sccl+0x28>
 802578e:	462b      	mov	r3, r5
 8025790:	e7ef      	b.n	8025772 <__sccl+0x2e>
 8025792:	7816      	ldrb	r6, [r2, #0]
 8025794:	2e5d      	cmp	r6, #93	; 0x5d
 8025796:	d0fa      	beq.n	802578e <__sccl+0x4a>
 8025798:	42b3      	cmp	r3, r6
 802579a:	dcf8      	bgt.n	802578e <__sccl+0x4a>
 802579c:	4618      	mov	r0, r3
 802579e:	3001      	adds	r0, #1
 80257a0:	4286      	cmp	r6, r0
 80257a2:	5421      	strb	r1, [r4, r0]
 80257a4:	dcfb      	bgt.n	802579e <__sccl+0x5a>
 80257a6:	43d8      	mvns	r0, r3
 80257a8:	4430      	add	r0, r6
 80257aa:	1c5d      	adds	r5, r3, #1
 80257ac:	42b3      	cmp	r3, r6
 80257ae:	bfa8      	it	ge
 80257b0:	2000      	movge	r0, #0
 80257b2:	182b      	adds	r3, r5, r0
 80257b4:	3202      	adds	r2, #2
 80257b6:	e7de      	b.n	8025776 <__sccl+0x32>

080257b8 <__submore>:
 80257b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80257bc:	460c      	mov	r4, r1
 80257be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80257c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80257c4:	4299      	cmp	r1, r3
 80257c6:	d11d      	bne.n	8025804 <__submore+0x4c>
 80257c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80257cc:	f7fb fb6e 	bl	8020eac <_malloc_r>
 80257d0:	b918      	cbnz	r0, 80257da <__submore+0x22>
 80257d2:	f04f 30ff 	mov.w	r0, #4294967295
 80257d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80257de:	63a3      	str	r3, [r4, #56]	; 0x38
 80257e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80257e4:	6360      	str	r0, [r4, #52]	; 0x34
 80257e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80257ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80257ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80257f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80257f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80257fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80257fe:	6020      	str	r0, [r4, #0]
 8025800:	2000      	movs	r0, #0
 8025802:	e7e8      	b.n	80257d6 <__submore+0x1e>
 8025804:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8025806:	0077      	lsls	r7, r6, #1
 8025808:	463a      	mov	r2, r7
 802580a:	f7ff f948 	bl	8024a9e <_realloc_r>
 802580e:	4605      	mov	r5, r0
 8025810:	2800      	cmp	r0, #0
 8025812:	d0de      	beq.n	80257d2 <__submore+0x1a>
 8025814:	eb00 0806 	add.w	r8, r0, r6
 8025818:	4601      	mov	r1, r0
 802581a:	4632      	mov	r2, r6
 802581c:	4640      	mov	r0, r8
 802581e:	f7fb f847 	bl	80208b0 <memcpy>
 8025822:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8025826:	f8c4 8000 	str.w	r8, [r4]
 802582a:	e7e9      	b.n	8025800 <__submore+0x48>

0802582c <__ascii_wctomb>:
 802582c:	b149      	cbz	r1, 8025842 <__ascii_wctomb+0x16>
 802582e:	2aff      	cmp	r2, #255	; 0xff
 8025830:	bf85      	ittet	hi
 8025832:	238a      	movhi	r3, #138	; 0x8a
 8025834:	6003      	strhi	r3, [r0, #0]
 8025836:	700a      	strbls	r2, [r1, #0]
 8025838:	f04f 30ff 	movhi.w	r0, #4294967295
 802583c:	bf98      	it	ls
 802583e:	2001      	movls	r0, #1
 8025840:	4770      	bx	lr
 8025842:	4608      	mov	r0, r1
 8025844:	4770      	bx	lr

08025846 <abort>:
 8025846:	b508      	push	{r3, lr}
 8025848:	2006      	movs	r0, #6
 802584a:	f000 f861 	bl	8025910 <raise>
 802584e:	2001      	movs	r0, #1
 8025850:	f7df ff20 	bl	8005694 <_exit>

08025854 <__env_lock>:
 8025854:	4801      	ldr	r0, [pc, #4]	; (802585c <__env_lock+0x8>)
 8025856:	f7fe bcfd 	b.w	8024254 <__retarget_lock_acquire_recursive>
 802585a:	bf00      	nop
 802585c:	200381ce 	.word	0x200381ce

08025860 <__env_unlock>:
 8025860:	4801      	ldr	r0, [pc, #4]	; (8025868 <__env_unlock+0x8>)
 8025862:	f7fe bcf9 	b.w	8024258 <__retarget_lock_release_recursive>
 8025866:	bf00      	nop
 8025868:	200381ce 	.word	0x200381ce

0802586c <_fstat_r>:
 802586c:	b538      	push	{r3, r4, r5, lr}
 802586e:	4d07      	ldr	r5, [pc, #28]	; (802588c <_fstat_r+0x20>)
 8025870:	2300      	movs	r3, #0
 8025872:	4604      	mov	r4, r0
 8025874:	4608      	mov	r0, r1
 8025876:	4611      	mov	r1, r2
 8025878:	602b      	str	r3, [r5, #0]
 802587a:	f7df ff23 	bl	80056c4 <_fstat>
 802587e:	1c43      	adds	r3, r0, #1
 8025880:	d102      	bne.n	8025888 <_fstat_r+0x1c>
 8025882:	682b      	ldr	r3, [r5, #0]
 8025884:	b103      	cbz	r3, 8025888 <_fstat_r+0x1c>
 8025886:	6023      	str	r3, [r4, #0]
 8025888:	bd38      	pop	{r3, r4, r5, pc}
 802588a:	bf00      	nop
 802588c:	200368f0 	.word	0x200368f0

08025890 <_isatty_r>:
 8025890:	b538      	push	{r3, r4, r5, lr}
 8025892:	4d06      	ldr	r5, [pc, #24]	; (80258ac <_isatty_r+0x1c>)
 8025894:	2300      	movs	r3, #0
 8025896:	4604      	mov	r4, r0
 8025898:	4608      	mov	r0, r1
 802589a:	602b      	str	r3, [r5, #0]
 802589c:	f7df ff18 	bl	80056d0 <_isatty>
 80258a0:	1c43      	adds	r3, r0, #1
 80258a2:	d102      	bne.n	80258aa <_isatty_r+0x1a>
 80258a4:	682b      	ldr	r3, [r5, #0]
 80258a6:	b103      	cbz	r3, 80258aa <_isatty_r+0x1a>
 80258a8:	6023      	str	r3, [r4, #0]
 80258aa:	bd38      	pop	{r3, r4, r5, pc}
 80258ac:	200368f0 	.word	0x200368f0

080258b0 <_malloc_usable_size_r>:
 80258b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80258b4:	1f18      	subs	r0, r3, #4
 80258b6:	2b00      	cmp	r3, #0
 80258b8:	bfbc      	itt	lt
 80258ba:	580b      	ldrlt	r3, [r1, r0]
 80258bc:	18c0      	addlt	r0, r0, r3
 80258be:	4770      	bx	lr

080258c0 <_raise_r>:
 80258c0:	291f      	cmp	r1, #31
 80258c2:	b538      	push	{r3, r4, r5, lr}
 80258c4:	4604      	mov	r4, r0
 80258c6:	460d      	mov	r5, r1
 80258c8:	d904      	bls.n	80258d4 <_raise_r+0x14>
 80258ca:	2316      	movs	r3, #22
 80258cc:	6003      	str	r3, [r0, #0]
 80258ce:	f04f 30ff 	mov.w	r0, #4294967295
 80258d2:	bd38      	pop	{r3, r4, r5, pc}
 80258d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80258d6:	b112      	cbz	r2, 80258de <_raise_r+0x1e>
 80258d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80258dc:	b94b      	cbnz	r3, 80258f2 <_raise_r+0x32>
 80258de:	4620      	mov	r0, r4
 80258e0:	f000 f830 	bl	8025944 <_getpid_r>
 80258e4:	462a      	mov	r2, r5
 80258e6:	4601      	mov	r1, r0
 80258e8:	4620      	mov	r0, r4
 80258ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80258ee:	f000 b817 	b.w	8025920 <_kill_r>
 80258f2:	2b01      	cmp	r3, #1
 80258f4:	d00a      	beq.n	802590c <_raise_r+0x4c>
 80258f6:	1c59      	adds	r1, r3, #1
 80258f8:	d103      	bne.n	8025902 <_raise_r+0x42>
 80258fa:	2316      	movs	r3, #22
 80258fc:	6003      	str	r3, [r0, #0]
 80258fe:	2001      	movs	r0, #1
 8025900:	e7e7      	b.n	80258d2 <_raise_r+0x12>
 8025902:	2400      	movs	r4, #0
 8025904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8025908:	4628      	mov	r0, r5
 802590a:	4798      	blx	r3
 802590c:	2000      	movs	r0, #0
 802590e:	e7e0      	b.n	80258d2 <_raise_r+0x12>

08025910 <raise>:
 8025910:	4b02      	ldr	r3, [pc, #8]	; (802591c <raise+0xc>)
 8025912:	4601      	mov	r1, r0
 8025914:	6818      	ldr	r0, [r3, #0]
 8025916:	f7ff bfd3 	b.w	80258c0 <_raise_r>
 802591a:	bf00      	nop
 802591c:	2000045c 	.word	0x2000045c

08025920 <_kill_r>:
 8025920:	b538      	push	{r3, r4, r5, lr}
 8025922:	4d07      	ldr	r5, [pc, #28]	; (8025940 <_kill_r+0x20>)
 8025924:	2300      	movs	r3, #0
 8025926:	4604      	mov	r4, r0
 8025928:	4608      	mov	r0, r1
 802592a:	4611      	mov	r1, r2
 802592c:	602b      	str	r3, [r5, #0]
 802592e:	f7df fea9 	bl	8005684 <_kill>
 8025932:	1c43      	adds	r3, r0, #1
 8025934:	d102      	bne.n	802593c <_kill_r+0x1c>
 8025936:	682b      	ldr	r3, [r5, #0]
 8025938:	b103      	cbz	r3, 802593c <_kill_r+0x1c>
 802593a:	6023      	str	r3, [r4, #0]
 802593c:	bd38      	pop	{r3, r4, r5, pc}
 802593e:	bf00      	nop
 8025940:	200368f0 	.word	0x200368f0

08025944 <_getpid_r>:
 8025944:	f7df be9c 	b.w	8005680 <_getpid>

08025948 <_init>:
 8025948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802594a:	bf00      	nop
 802594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802594e:	bc08      	pop	{r3}
 8025950:	469e      	mov	lr, r3
 8025952:	4770      	bx	lr

08025954 <_fini>:
 8025954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025956:	bf00      	nop
 8025958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802595a:	bc08      	pop	{r3}
 802595c:	469e      	mov	lr, r3
 802595e:	4770      	bx	lr

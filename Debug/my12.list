
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000291f0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d0a4  080293f0  080293f0  000393f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046494  08046494  000606c4  2**0
                  CONTENTS
  4 .ARM          00000008  08046494  08046494  00056494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804649c  0804649c  000606c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804649c  0804649c  0005649c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080464a0  080464a0  000564a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c4  20000000  080464a4  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f6bc  200006c8  08046b68  000606c8  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  2002fd84  08046b68  0006fd84  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008e1d6  00000000  00000000  000606f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0001320f  00000000  00000000  000ee8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000527dc  00000000  00000000  00101ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003700  00000000  00000000  001542b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000095b8  00000000  00000000  001579b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000485f6  00000000  00000000  00160f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0008f01d  00000000  00000000  001a9566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a42c  00000000  00000000  00238583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003729af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d518  00000000  00000000  00372a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c8 	.word	0x200006c8
 800021c:	00000000 	.word	0x00000000
 8000220:	080293d8 	.word	0x080293d8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006cc 	.word	0x200006cc
 800023c:	080293d8 	.word	0x080293d8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006f8 	.word	0x200006f8
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	20000774 	.word	0x20000774

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006f8 	.word	0x200006f8
 8000708:	40000c00 	.word	0x40000c00
 800070c:	20000774 	.word	0x20000774

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f024 fed2 	bl	80254cc <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 bf5d 	b.w	80085ec <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	080295dc 	.word	0x080295dc

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219a      	movs	r1, #154	; 0x9a
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f004 fc2e 	bl	8004fb4 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219c      	movs	r1, #156	; 0x9c
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f004 fc22 	bl	8004fb4 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f009 f825 	bl	8009870 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219b      	movs	r1, #155	; 0x9b
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f004 fbac 	bl	8004fb4 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	080295f4 	.word	0x080295f4
 800086c:	20000284 	.word	0x20000284
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b76      	ldr	r3, [pc, #472]	; (8000a68 <ADC_Conv_complete+0x1dc>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a77      	ldr	r2, [pc, #476]	; (8000a6c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4977      	ldr	r1, [pc, #476]	; (8000a70 <ADC_Conv_complete+0x1e4>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b77      	ldr	r3, [pc, #476]	; (8000a74 <ADC_Conv_complete+0x1e8>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4877      	ldr	r0, [pc, #476]	; (8000a78 <ADC_Conv_complete+0x1ec>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681d      	ldr	r5, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b76      	ldr	r3, [pc, #472]	; (8000a7c <ADC_Conv_complete+0x1f0>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7814      	ldrb	r4, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f505 65b8 	addeq.w	r5, r5, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60eb      	str	r3, [r5, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	0223      	lsls	r3, r4, #8
 80008b6:	9405      	str	r4, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460c      	mov	r4, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a70      	ldr	r2, [pc, #448]	; (8000a80 <ADC_Conv_complete+0x1f4>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a9      	str	r1, [r5, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8000ac8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	606b      	str	r3, [r5, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8da 3000 	ldr.w	r3, [sl]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67a3      	str	r3, [r4, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8ca 3000 	str.w	r3, [sl]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008f0:	4b64      	ldr	r3, [pc, #400]	; (8000a84 <ADC_Conv_complete+0x1f8>)
 80008f2:	f04f 0e00 	mov.w	lr, #0
 80008f6:	350e      	adds	r5, #14
 80008f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8000acc <ADC_Conv_complete+0x240>
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8000ad0 <ADC_Conv_complete+0x244>
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <ADC_Conv_complete+0x1fc>)
 8000906:	f8cd e010 	str.w	lr, [sp, #16]
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	9303      	str	r3, [sp, #12]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <ADC_Conv_complete+0x200>)
 8000910:	681e      	ldr	r6, [r3, #0]
 8000912:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <ADC_Conv_complete+0x208>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b5f      	ldr	r3, [pc, #380]	; (8000a98 <ADC_Conv_complete+0x20c>)
 800091c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000920:	4b5e      	ldr	r3, [pc, #376]	; (8000a9c <ADC_Conv_complete+0x210>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	9301      	str	r3, [sp, #4]
		lastmeanwindiff = abs(meanwindiff);
 8000926:	2900      	cmp	r1, #0
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000928:	f00e 041f 	and.w	r4, lr, #31
		thissamp = (*adcbuf16)[i];
 800092c:	f835 3f02 	ldrh.w	r3, [r5, #2]!
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000930:	f10e 0e01 	add.w	lr, lr, #1
		lastmeanwindiff = abs(meanwindiff);
 8000934:	bfb8      	it	lt
 8000936:	4249      	neglt	r1, r1
		if (sigsend)
 8000938:	f8da b000 	ldr.w	fp, [sl]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800093c:	4418      	add	r0, r3
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 800093e:	441e      	add	r6, r3
		lastmeanwindiff = abs(meanwindiff);
 8000940:	b28f      	uxth	r7, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000942:	9903      	ldr	r1, [sp, #12]
 8000944:	eb07 0c01 	add.w	ip, r7, r1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000948:	f839 1014 	ldrh.w	r1, [r9, r4, lsl #1]
		lastsamp[j] = thissamp;			// save last samples
 800094c:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000950:	1a40      	subs	r0, r0, r1
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000952:	f858 1024 	ldr.w	r1, [r8, r4, lsl #2]
 8000956:	1a52      	subs	r2, r2, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000958:	f340 114f 	sbfx	r1, r0, #5, #16
 800095c:	1a5b      	subs	r3, r3, r1
 800095e:	2b00      	cmp	r3, #0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000964:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000966:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800096a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800096e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	9c02      	ldr	r4, [sp, #8]
 8000974:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000978:	b29b      	uxth	r3, r3
 800097a:	191c      	adds	r4, r3, r4
 800097c:	4564      	cmp	r4, ip
 800097e:	dd04      	ble.n	800098a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000980:	9c01      	ldr	r4, [sp, #4]
 8000982:	3401      	adds	r4, #1
 8000984:	9401      	str	r4, [sp, #4]
 8000986:	2401      	movs	r4, #1
 8000988:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800098a:	f1bb 0f00 	cmp.w	fp, #0
 800098e:	d104      	bne.n	800099a <ADC_Conv_complete+0x10e>
 8000990:	4563      	cmp	r3, ip
 8000992:	dd02      	ble.n	800099a <ADC_Conv_complete+0x10e>
			sigsend = 1; // the real trigger
 8000994:	2301      	movs	r3, #1
 8000996:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 800099a:	f5be 7f36 	cmp.w	lr, #728	; 0x2d8
 800099e:	d1c2      	bne.n	8000926 <ADC_Conv_complete+0x9a>
 80009a0:	4b3b      	ldr	r3, [pc, #236]	; (8000a90 <ADC_Conv_complete+0x204>)
 80009a2:	6018      	str	r0, [r3, #0]
 80009a4:	4b3b      	ldr	r3, [pc, #236]	; (8000a94 <ADC_Conv_complete+0x208>)
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <ADC_Conv_complete+0x20c>)
 80009aa:	8019      	strh	r1, [r3, #0]
 80009ac:	4b37      	ldr	r3, [pc, #220]	; (8000a8c <ADC_Conv_complete+0x200>)
 80009ae:	601e      	str	r6, [r3, #0]
 80009b0:	4b3b      	ldr	r3, [pc, #236]	; (8000aa0 <ADC_Conv_complete+0x214>)
 80009b2:	801f      	strh	r7, [r3, #0]
 80009b4:	9b04      	ldr	r3, [sp, #16]
 80009b6:	b113      	cbz	r3, 80009be <ADC_Conv_complete+0x132>
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <ADC_Conv_complete+0x210>)
 80009ba:	9a01      	ldr	r2, [sp, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009be:	f8da 3000 	ldr.w	r3, [sl]
 80009c2:	b33b      	cbz	r3, 8000a14 <ADC_Conv_complete+0x188>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <ADC_Conv_complete+0x218>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2a00      	cmp	r2, #0
 80009ca:	d02c      	beq.n	8000a26 <ADC_Conv_complete+0x19a>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	4928      	ldr	r1, [pc, #160]	; (8000a70 <ADC_Conv_complete+0x1e4>)
 80009ce:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80009d0:	3201      	adds	r2, #1
 80009d2:	67ca      	str	r2, [r1, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009d4:	2201      	movs	r2, #1
 80009d6:	601a      	str	r2, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009d8:	220f      	movs	r2, #15
 80009da:	4b33      	ldr	r3, [pc, #204]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80009dc:	601a      	str	r2, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <ADC_Conv_complete+0x220>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	3301      	adds	r3, #1
 80009e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	d10a      	bne.n	8000a02 <ADC_Conv_complete+0x176>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	08f3      	lsrs	r3, r6, #3
 80009ee:	4830      	ldr	r0, [pc, #192]	; (8000ab0 <ADC_Conv_complete+0x224>)
 80009f0:	4930      	ldr	r1, [pc, #192]	; (8000ab4 <ADC_Conv_complete+0x228>)
 80009f2:	fba0 0303 	umull	r0, r3, r0, r3
 80009f6:	0b9b      	lsrs	r3, r3, #14
 80009f8:	600b      	str	r3, [r1, #0]
		adcbgbaseacc = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	4923      	ldr	r1, [pc, #140]	; (8000a8c <ADC_Conv_complete+0x200>)
		samplecnt = 0;
 80009fe:	6013      	str	r3, [r2, #0]
		adcbgbaseacc = 0;
 8000a00:	600b      	str	r3, [r1, #0]
	if (xTaskToNotify == NULL) {
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	b342      	cbz	r2, 8000a5a <ADC_Conv_complete+0x1ce>
	} else if (sigsend) {
 8000a08:	f8da 2000 	ldr.w	r2, [sl]
 8000a0c:	b982      	cbnz	r2, 8000a30 <ADC_Conv_complete+0x1a4>
}
 8000a0e:	b007      	add	sp, #28
 8000a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a14:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <ADC_Conv_complete+0x218>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	b112      	cbz	r2, 8000a20 <ADC_Conv_complete+0x194>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <ADC_Conv_complete+0x230>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e7db      	b.n	80009de <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a26:	9a05      	ldr	r2, [sp, #20]
 8000a28:	4910      	ldr	r1, [pc, #64]	; (8000a6c <ADC_Conv_complete+0x1e0>)
 8000a2a:	3201      	adds	r2, #1
 8000a2c:	700a      	strb	r2, [r1, #0]
 8000a2e:	e7cd      	b.n	80009cc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a30:	4c23      	ldr	r4, [pc, #140]	; (8000ac0 <ADC_Conv_complete+0x234>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4621      	mov	r1, r4
 8000a36:	f016 fb05 	bl	8017044 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a3a:	6823      	ldr	r3, [r4, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0e6      	beq.n	8000a0e <ADC_Conv_complete+0x182>
 8000a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a48:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a4c:	f3bf 8f4f 	dsb	sy
 8000a50:	f3bf 8f6f 	isb	sy
}
 8000a54:	b007      	add	sp, #28
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <ADC_Conv_complete+0x238>)
}
 8000a5c:	b007      	add	sp, #28
 8000a5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a62:	f024 bd33 	b.w	80254cc <puts>
 8000a66:	bf00      	nop
 8000a68:	200006f8 	.word	0x200006f8
 8000a6c:	200006e4 	.word	0x200006e4
 8000a70:	20002f3c 	.word	0x20002f3c
 8000a74:	20000754 	.word	0x20000754
 8000a78:	200006f4 	.word	0x200006f4
 8000a7c:	20000774 	.word	0x20000774
 8000a80:	2000075c 	.word	0x2000075c
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000002 	.word	0x20000002
 8000a8c:	200006e8 	.word	0x200006e8
 8000a90:	200007fc 	.word	0x200007fc
 8000a94:	20000778 	.word	0x20000778
 8000a98:	20000750 	.word	0x20000750
 8000a9c:	20000758 	.word	0x20000758
 8000aa0:	20000708 	.word	0x20000708
 8000aa4:	20000768 	.word	0x20000768
 8000aa8:	2000074c 	.word	0x2000074c
 8000aac:	20000760 	.word	0x20000760
 8000ab0:	16816817 	.word	0x16816817
 8000ab4:	200006fc 	.word	0x200006fc
 8000ab8:	20000804 	.word	0x20000804
 8000abc:	20000764 	.word	0x20000764
 8000ac0:	20000800 	.word	0x20000800
 8000ac4:	0802960c 	.word	0x0802960c
 8000ac8:	2000076c 	.word	0x2000076c
 8000acc:	2000070c 	.word	0x2000070c
 8000ad0:	2000077c 	.word	0x2000077c

08000ad4 <startadc>:

void startadc() {
 8000ad4:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ad6:	492b      	ldr	r1, [pc, #172]	; (8000b84 <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000ad8:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ada:	4b2b      	ldr	r3, [pc, #172]	; (8000b88 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000adc:	482b      	ldr	r0, [pc, #172]	; (8000b8c <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000ade:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	4d2b      	ldr	r5, [pc, #172]	; (8000b90 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000ae2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ae6:	f024 fcf1 	bl	80254cc <puts>
	osDelay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f014 fcb4 	bl	8015458 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000af0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000af4:	f016 ff98 	bl	8017a28 <pvPortMalloc>
 8000af8:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000afa:	2800      	cmp	r0, #0
 8000afc:	d03d      	beq.n	8000b7a <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000afe:	0783      	lsls	r3, r0, #30
 8000b00:	4604      	mov	r4, r0
 8000b02:	d128      	bne.n	8000b56 <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b04:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b08:	2155      	movs	r1, #85	; 0x55
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f023 fca4 	bl	8024458 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b10:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b14:	21aa      	movs	r1, #170	; 0xaa
 8000b16:	18a0      	adds	r0, r4, r2
 8000b18:	f023 fc9e 	bl	8024458 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b1c:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b20:	481c      	ldr	r0, [pc, #112]	; (8000b94 <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b22:	f104 0110 	add.w	r1, r4, #16
 8000b26:	4c1c      	ldr	r4, [pc, #112]	; (8000b98 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b28:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b2c:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2e:	481b      	ldr	r0, [pc, #108]	; (8000b9c <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b30:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b32:	f7ff fe01 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <startadc+0xcc>)
 8000b38:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3a:	481a      	ldr	r0, [pc, #104]	; (8000ba4 <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b3c:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b3e:	f007 fca7 	bl	8008490 <HAL_ADC_Start>
 8000b42:	b9b0      	cbnz	r0, 8000b72 <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <startadc+0xd4>)
 8000b46:	f007 fca3 	bl	8008490 <HAL_ADC_Start>
 8000b4a:	b970      	cbnz	r0, 8000b6a <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b4c:	4813      	ldr	r0, [pc, #76]	; (8000b9c <startadc+0xc8>)
 8000b4e:	f007 fc9f 	bl	8008490 <HAL_ADC_Start>
 8000b52:	b928      	cbnz	r0, 8000b60 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b54:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b56:	4815      	ldr	r0, [pc, #84]	; (8000bac <startadc+0xd8>)
 8000b58:	f024 fcb8 	bl	80254cc <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b5c:	682c      	ldr	r4, [r5, #0]
 8000b5e:	e7d1      	b.n	8000b04 <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <startadc+0xdc>)
}
 8000b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b66:	f024 bcb1 	b.w	80254cc <puts>
		printf("ADC2 failed start\r\n");
 8000b6a:	4812      	ldr	r0, [pc, #72]	; (8000bb4 <startadc+0xe0>)
 8000b6c:	f024 fcae 	bl	80254cc <puts>
 8000b70:	e7ec      	b.n	8000b4c <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <startadc+0xe4>)
 8000b74:	f024 fcaa 	bl	80254cc <puts>
 8000b78:	e7e4      	b.n	8000b44 <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b7a:	4810      	ldr	r0, [pc, #64]	; (8000bbc <startadc+0xe8>)
 8000b7c:	f024 fca6 	bl	80254cc <puts>
		for (;;)
 8000b80:	e7fe      	b.n	8000b80 <startadc+0xac>
 8000b82:	bf00      	nop
 8000b84:	066ff300 	.word	0x066ff300
 8000b88:	20002f3c 	.word	0x20002f3c
 8000b8c:	08029620 	.word	0x08029620
 8000b90:	20000754 	.word	0x20000754
 8000b94:	200006f0 	.word	0x200006f0
 8000b98:	200006ec 	.word	0x200006ec
 8000b9c:	200020e0 	.word	0x200020e0
 8000ba0:	200006f5 	.word	0x200006f5
 8000ba4:	20002170 	.word	0x20002170
 8000ba8:	20002128 	.word	0x20002128
 8000bac:	0802965c 	.word	0x0802965c
 8000bb0:	080296bc 	.word	0x080296bc
 8000bb4:	080296a8 	.word	0x080296a8
 8000bb8:	08029694 	.word	0x08029694
 8000bbc:	08029634 	.word	0x08029634

08000bc0 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000bc0:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bc2:	b169      	cbz	r1, 8000be0 <xcrc32+0x20>
 8000bc4:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bc6:	4610      	mov	r0, r2
 8000bc8:	4a06      	ldr	r2, [pc, #24]	; (8000be4 <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bca:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bce:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bd2:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000bdc:	d1f5      	bne.n	8000bca <xcrc32+0xa>
 8000bde:	4770      	bx	lr
  unsigned int crc = init;
 8000be0:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000be2:	4770      	bx	lr
 8000be4:	080296d0 	.word	0x080296d0

08000be8 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000be8:	b500      	push	{lr}
 8000bea:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000bec:	4668      	mov	r0, sp
 8000bee:	f00a fccb 	bl	800b588 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <stampboot+0x7c>)
 8000bf4:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000bfc:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000bfe:	d01b      	beq.n	8000c38 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c00:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c04:	d015      	beq.n	8000c32 <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c06:	f00a fadb 	bl	800b1c0 <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c0a:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c12:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c14:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c16:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c18:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c1a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c1e:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c20:	f00a fbda 	bl	800b3d8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c24:	b9c0      	cbnz	r0, 8000c58 <stampboot+0x70>
			printf("swapboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c26:	f00a fae7 	bl	800b1f8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c2a:	b980      	cbnz	r0, 8000c4e <stampboot+0x66>
			printf("swapboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c2c:	480e      	ldr	r0, [pc, #56]	; (8000c68 <stampboot+0x80>)
 8000c2e:	f024 fc4d 	bl	80254cc <puts>
	}
}
 8000c32:	b009      	add	sp, #36	; 0x24
 8000c34:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c3c:	d0f9      	beq.n	8000c32 <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c3e:	f00a fabf 	bl	800b1c0 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c46:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c4a:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c4c:	e7e2      	b.n	8000c14 <stampboot+0x2c>
			printf("swapboot: failed to OBLaunch %d\n", res);
 8000c4e:	4601      	mov	r1, r0
 8000c50:	4806      	ldr	r0, [pc, #24]	; (8000c6c <stampboot+0x84>)
 8000c52:	f024 fb9f 	bl	8025394 <iprintf>
 8000c56:	e7e9      	b.n	8000c2c <stampboot+0x44>
			printf("swapboot: failed to OBProgram %d\n", res);
 8000c58:	4601      	mov	r1, r0
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <stampboot+0x88>)
 8000c5c:	f024 fb9a 	bl	8025394 <iprintf>
 8000c60:	e7e1      	b.n	8000c26 <stampboot+0x3e>
 8000c62:	bf00      	nop
 8000c64:	08000be9 	.word	0x08000be9
 8000c68:	08029b18 	.word	0x08029b18
 8000c6c:	08029af4 	.word	0x08029af4
 8000c70:	08029ad0 	.word	0x08029ad0

08000c74 <printflasherr>:
void printflasherr() {
 8000c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c76:	4d1e      	ldr	r5, [pc, #120]	; (8000cf0 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000c78:	4f1e      	ldr	r7, [pc, #120]	; (8000cf4 <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000c7a:	4e1f      	ldr	r6, [pc, #124]	; (8000cf8 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000c7c:	f00a faea 	bl	800b254 <HAL_FLASH_GetError>
	switch (err) {
 8000c80:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000c82:	4604      	mov	r4, r0
	switch (err) {
 8000c84:	2b1e      	cmp	r3, #30
 8000c86:	d811      	bhi.n	8000cac <printflasherr+0x38>
 8000c88:	e8df f003 	tbb	[pc, r3]
 8000c8c:	102f102b 	.word	0x102f102b
 8000c90:	102d1010 	.word	0x102d1010
 8000c94:	10101010 	.word	0x10101010
 8000c98:	10291010 	.word	0x10291010
 8000c9c:	10101010 	.word	0x10101010
 8000ca0:	10101010 	.word	0x10101010
 8000ca4:	10101010 	.word	0x10101010
 8000ca8:	1010      	.short	0x1010
 8000caa:	1d          	.byte	0x1d
 8000cab:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cac:	4602      	mov	r2, r0
 8000cae:	4913      	ldr	r1, [pc, #76]	; (8000cfc <printflasherr+0x88>)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f024 fd59 	bl	8025768 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <printflasherr+0x8c>)
 8000cba:	f024 fb6b 	bl	8025394 <iprintf>
	res = HAL_FLASH_Lock();
 8000cbe:	f00a fa75 	bl	800b1ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cc2:	b940      	cbnz	r0, 8000cd6 <printflasherr+0x62>
}
 8000cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cc6:	490f      	ldr	r1, [pc, #60]	; (8000d04 <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f024 fb63 	bl	8025394 <iprintf>
	res = HAL_FLASH_Lock();
 8000cce:	f00a fa6d 	bl	800b1ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d0f6      	beq.n	8000cc4 <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cd6:	480c      	ldr	r0, [pc, #48]	; (8000d08 <printflasherr+0x94>)
 8000cd8:	f024 fbf8 	bl	80254cc <puts>
		printflasherr();
 8000cdc:	e7ce      	b.n	8000c7c <printflasherr+0x8>
		msg = "Write Protected";
 8000cde:	490b      	ldr	r1, [pc, #44]	; (8000d0c <printflasherr+0x98>)
		break;
 8000ce0:	e7f2      	b.n	8000cc8 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e7f0      	b.n	8000cc8 <printflasherr+0x54>
		msg = "Programming alignment";
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	e7ee      	b.n	8000cc8 <printflasherr+0x54>
	switch (err) {
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <printflasherr+0x9c>)
 8000cec:	e7ec      	b.n	8000cc8 <printflasherr+0x54>
 8000cee:	bf00      	nop
 8000cf0:	08029bd4 	.word	0x08029bd4
 8000cf4:	08029b60 	.word	0x08029b60
 8000cf8:	08029b4c 	.word	0x08029b4c
 8000cfc:	08029ba0 	.word	0x08029ba0
 8000d00:	08029bb4 	.word	0x08029bb4
 8000d04:	08029b40 	.word	0x08029b40
 8000d08:	08029bf8 	.word	0x08029bf8
 8000d0c:	08029b78 	.word	0x08029b78
 8000d10:	08029b88 	.word	0x08029b88

08000d14 <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d14:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d16:	4c1a      	ldr	r4, [pc, #104]	; (8000d80 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d18:	4605      	mov	r5, r0
 8000d1a:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d1c:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d24:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d26:	460a      	mov	r2, r1
 8000d28:	4601      	mov	r1, r0
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f00a fac4 	bl	800b2b8 <HAL_FLASH_Program>
 8000d30:	b990      	cbnz	r0, 8000d58 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d38:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d40:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d42:	682b      	ldr	r3, [r5, #0]
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d100      	bne.n	8000d4a <WriteFlashWord.part.0+0x36>
}
 8000d48:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d4a:	4632      	mov	r2, r6
 8000d4c:	4629      	mov	r1, r5
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <WriteFlashWord.part.0+0x70>)
 8000d50:	f024 fb20 	bl	8025394 <iprintf>
		return (HAL_ERROR);
 8000d54:	2001      	movs	r0, #1
}
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d58:	f7ff ff8c 	bl	8000c74 <printflasherr>
			printflasherr();
 8000d5c:	f7ff ff8a 	bl	8000c74 <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d60:	2201      	movs	r2, #1
 8000d62:	4629      	mov	r1, r5
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <WriteFlashWord.part.0+0x74>)
 8000d66:	f024 fb15 	bl	8025394 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d6a:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d6c:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d72:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d74:	6823      	ldr	r3, [r4, #0]
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6023      	str	r3, [r4, #0]
}
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}
 8000d7e:	bf00      	nop
 8000d80:	40023c00 	.word	0x40023c00
 8000d84:	08029c68 	.word	0x08029c68
 8000d88:	08029c38 	.word	0x08029c38

08000d8c <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000d92:	f00a f9f7 	bl	800b184 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000d96:	2800      	cmp	r0, #0
 8000d98:	d14f      	bne.n	8000e3a <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000d9a:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000d9e:	4d34      	ldr	r5, [pc, #208]	; (8000e70 <EraseFlash+0xe4>)
 8000da0:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000da2:	4626      	mov	r6, r4
 8000da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000da8:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000daa:	d041      	beq.n	8000e30 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000db2:	4930      	ldr	r1, [pc, #192]	; (8000e74 <EraseFlash+0xe8>)
 8000db4:	1f23      	subs	r3, r4, #4
 8000db6:	4421      	add	r1, r4
 8000db8:	e001      	b.n	8000dbe <EraseFlash+0x32>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d006      	beq.n	8000dcc <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000dbe:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dc2:	3201      	adds	r2, #1
 8000dc4:	d0f9      	beq.n	8000dba <EraseFlash+0x2e>
	if ((dirty) && (notflashed)) {
 8000dc6:	4f2c      	ldr	r7, [pc, #176]	; (8000e78 <EraseFlash+0xec>)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b92b      	cbnz	r3, 8000dd8 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000dcc:	482b      	ldr	r0, [pc, #172]	; (8000e7c <EraseFlash+0xf0>)
 8000dce:	f024 fb7d 	bl	80254cc <puts>
}
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	b003      	add	sp, #12
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ddc:	f014 fb3c 	bl	8015458 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000de0:	4827      	ldr	r0, [pc, #156]	; (8000e80 <EraseFlash+0xf4>)
 8000de2:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000de6:	f024 fad5 	bl	8025394 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000dea:	2200      	movs	r2, #0
 8000dec:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000dee:	a901      	add	r1, sp, #4
 8000df0:	481f      	ldr	r0, [pc, #124]	; (8000e70 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000df2:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000df6:	2302      	movs	r3, #2
 8000df8:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000dfa:	f00a fc31 	bl	800b660 <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000dfe:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e00:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e02:	1c48      	adds	r0, r1, #1
 8000e04:	d12d      	bne.n	8000e62 <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e06:	bb25      	cbnz	r5, 8000e52 <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e08:	481e      	ldr	r0, [pc, #120]	; (8000e84 <EraseFlash+0xf8>)
 8000e0a:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e0e:	f024 fb5d 	bl	80254cc <puts>
			notflashed = 0;
 8000e12:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e14:	e001      	b.n	8000e1a <EraseFlash+0x8e>
 8000e16:	42b4      	cmp	r4, r6
 8000e18:	d0db      	beq.n	8000dd2 <EraseFlash+0x46>
 8000e1a:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e1c:	3604      	adds	r6, #4
 8000e1e:	680b      	ldr	r3, [r1, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	d0f8      	beq.n	8000e16 <EraseFlash+0x8a>
				notflashed = 1;
 8000e24:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <EraseFlash+0xfc>)
				notflashed = 1;
 8000e28:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e2a:	f024 fab3 	bl	8025394 <iprintf>
 8000e2e:	e7d0      	b.n	8000dd2 <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e30:	2200      	movs	r2, #0
 8000e32:	2306      	movs	r3, #6
 8000e34:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e38:	e7bb      	b.n	8000db2 <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	4813      	ldr	r0, [pc, #76]	; (8000e8c <EraseFlash+0x100>)
 8000e3e:	f024 faa9 	bl	8025394 <iprintf>
		printflasherr();
 8000e42:	f7ff ff17 	bl	8000c74 <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e46:	4812      	ldr	r0, [pc, #72]	; (8000e90 <EraseFlash+0x104>)
 8000e48:	f024 fb40 	bl	80254cc <puts>
		printflasherr();
 8000e4c:	f7ff ff12 	bl	8000c74 <printflasherr>
 8000e50:	e7a3      	b.n	8000d9a <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e52:	4810      	ldr	r0, [pc, #64]	; (8000e94 <EraseFlash+0x108>)
 8000e54:	f024 fb3a 	bl	80254cc <puts>
			printflasherr();
 8000e58:	f7ff ff0c 	bl	8000c74 <printflasherr>
}
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	b003      	add	sp, #12
 8000e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e62:	480d      	ldr	r0, [pc, #52]	; (8000e98 <EraseFlash+0x10c>)
 8000e64:	f024 fa96 	bl	8025394 <iprintf>
		if (res != HAL_OK) {
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0cd      	beq.n	8000e08 <EraseFlash+0x7c>
 8000e6c:	e7f1      	b.n	8000e52 <EraseFlash+0xc6>
 8000e6e:	bf00      	nop
 8000e70:	20000808 	.word	0x20000808
 8000e74:	0007fffc 	.word	0x0007fffc
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	08029d44 	.word	0x08029d44
 8000e80:	08029cc4 	.word	0x08029cc4
 8000e84:	08029d28 	.word	0x08029d28
 8000e88:	08029d5c 	.word	0x08029d5c
 8000e8c:	08029c14 	.word	0x08029c14
 8000e90:	08029ca8 	.word	0x08029ca8
 8000e94:	08029d14 	.word	0x08029d14
 8000e98:	08029cec 	.word	0x08029cec

08000e9c <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000e9c:	b500      	push	{lr}
 8000e9e:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ea0:	4668      	mov	r0, sp
 8000ea2:	f00a fb71 	bl	800b588 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ea6:	f00a f98b 	bl	800b1c0 <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000eaa:	9b06      	ldr	r3, [sp, #24]
 8000eac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb0:	d008      	beq.n	8000ec4 <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	3201      	adds	r2, #1
 8000eba:	d009      	beq.n	8000ed0 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ebc:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ebe:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000ec2:	e007      	b.n	8000ed4 <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	d0f9      	beq.n	8000ebe <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000eca:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ece:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ed0:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000ed4:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000ed6:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ed8:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000eda:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000ede:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000ee0:	f00a fa7a 	bl	800b3d8 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000ee4:	b990      	cbnz	r0, 8000f0c <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000ee6:	f00a f987 	bl	800b1f8 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000eea:	b950      	cbnz	r0, 8000f02 <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("fixing boot....\n");
 8000eec:	480a      	ldr	r0, [pc, #40]	; (8000f18 <swapboot+0x7c>)
 8000eee:	f024 faed 	bl	80254cc <puts>
	HAL_FLASH_OB_Lock();
 8000ef2:	f00a f977 	bl	800b1e4 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000ef6:	4809      	ldr	r0, [pc, #36]	; (8000f1c <swapboot+0x80>)
 8000ef8:	f024 fae8 	bl	80254cc <puts>
}
 8000efc:	b009      	add	sp, #36	; 0x24
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f02:	4601      	mov	r1, r0
 8000f04:	4806      	ldr	r0, [pc, #24]	; (8000f20 <swapboot+0x84>)
 8000f06:	f024 fa45 	bl	8025394 <iprintf>
 8000f0a:	e7ef      	b.n	8000eec <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f0c:	4601      	mov	r1, r0
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <swapboot+0x88>)
 8000f10:	f024 fa40 	bl	8025394 <iprintf>
 8000f14:	e7e7      	b.n	8000ee6 <swapboot+0x4a>
 8000f16:	bf00      	nop
 8000f18:	08029dbc 	.word	0x08029dbc
 8000f1c:	08029dcc 	.word	0x08029dcc
 8000f20:	08029af4 	.word	0x08029af4
 8000f24:	08029ad0 	.word	0x08029ad0

08000f28 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f28:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f2a:	4d10      	ldr	r5, [pc, #64]	; (8000f6c <flash_writeword+0x44>)
 8000f2c:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f2e:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f32:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f36:	d20a      	bcs.n	8000f4e <flash_writeword+0x26>
 8000f38:	4604      	mov	r4, r0
 8000f3a:	4601      	mov	r1, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fee9 	bl	8000d14 <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f42:	b938      	cbnz	r0, 8000f54 <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f44:	6829      	ldr	r1, [r5, #0]
 8000f46:	680b      	ldr	r3, [r1, #0]
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d109      	bne.n	8000f60 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f4c:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f4e:	4808      	ldr	r0, [pc, #32]	; (8000f70 <flash_writeword+0x48>)
 8000f50:	f024 fabc 	bl	80254cc <puts>
		printf("memwrite: WriteFlash error\n");
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <flash_writeword+0x4c>)
 8000f56:	f024 fab9 	bl	80254cc <puts>
		return (-1);
 8000f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <flash_writeword+0x50>)
 8000f62:	f024 fa17 	bl	8025394 <iprintf>
		return (-1);
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f6a:	bd38      	pop	{r3, r4, r5, pc}
 8000f6c:	20000848 	.word	0x20000848
 8000f70:	08029d98 	.word	0x08029d98
 8000f74:	08029ddc 	.word	0x08029ddc
 8000f78:	08029df8 	.word	0x08029df8

08000f7c <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000f80:	4e49      	ldr	r6, [pc, #292]	; (80010a8 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f82:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (notflashed)) {
 8000f84:	4949      	ldr	r1, [pc, #292]	; (80010ac <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f86:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000f88:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000f8a:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (notflashed)) {
 8000f8c:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000f8e:	4413      	add	r3, r2
 8000f90:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (notflashed)) {
 8000f92:	b92f      	cbnz	r7, 8000fa0 <flash_memwrite+0x24>
 8000f94:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010bc <flash_memwrite+0x140>
 8000f98:	f8d8 3000 	ldr.w	r3, [r8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d179      	bne.n	8001094 <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fa0:	2d00      	cmp	r5, #0
 8000fa2:	d071      	beq.n	8001088 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fa4:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fa8:	4f41      	ldr	r7, [pc, #260]	; (80010b0 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000faa:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010c0 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fae:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fb0:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fb2:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fb4:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fb6:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fba:	dd1a      	ble.n	8000ff2 <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	9b00      	ldr	r3, [sp, #0]
 8000fc0:	4299      	cmp	r1, r3
 8000fc2:	dd16      	ble.n	8000ff2 <flash_memwrite+0x76>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	4e3b      	ldr	r6, [pc, #236]	; (80010b4 <flash_memwrite+0x138>)
			data >>= 8;
 8000fc8:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000fca:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000fcc:	3201      	adds	r2, #1
			data >>= 8;
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000fd2:	9b00      	ldr	r3, [sp, #0]
 8000fd4:	f103 0e01 	add.w	lr, r3, #1
 8000fd8:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8000fdc:	f8cd e000 	str.w	lr, [sp]
 8000fe0:	9b03      	ldr	r3, [sp, #12]
 8000fe2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8000fe6:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8000fe8:	9b00      	ldr	r3, [sp, #0]
 8000fea:	4299      	cmp	r1, r3
 8000fec:	dcec      	bgt.n	8000fc8 <flash_memwrite+0x4c>
 8000fee:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 8000ff2:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8000ff6:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8000ff8:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8000ffa:	9600      	str	r6, [sp, #0]
 8000ffc:	9b00      	ldr	r3, [sp, #0]
 8000ffe:	4419      	add	r1, r3
 8001000:	9b02      	ldr	r3, [sp, #8]
 8001002:	1aeb      	subs	r3, r5, r3
 8001004:	4299      	cmp	r1, r3
 8001006:	d229      	bcs.n	800105c <flash_memwrite+0xe0>
 8001008:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010c4 <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 800100c:	f8d8 3000 	ldr.w	r3, [r8]
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	9b01      	ldr	r3, [sp, #4]
 8001014:	2b03      	cmp	r3, #3
 8001016:	dc10      	bgt.n	800103a <flash_memwrite+0xbe>
			data >>= 8;
 8001018:	9b03      	ldr	r3, [sp, #12]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	1c59      	adds	r1, r3, #1
 8001022:	5ce2      	ldrb	r2, [r4, r3]
 8001024:	9100      	str	r1, [sp, #0]
 8001026:	9b03      	ldr	r3, [sp, #12]
 8001028:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800102c:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 800102e:	9b01      	ldr	r3, [sp, #4]
 8001030:	3301      	adds	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	9b01      	ldr	r3, [sp, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	ddee      	ble.n	8001018 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 800103a:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 800103c:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001040:	f7ff ff72 	bl	8000f28 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001044:	9800      	ldr	r0, [sp, #0]
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 800104a:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800104e:	4402      	add	r2, r0
 8001050:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 8001052:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001054:	429a      	cmp	r2, r3
		flash_memptr += 4;
 8001056:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800105a:	d3d7      	bcc.n	800100c <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 800105c:	9b00      	ldr	r3, [sp, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	429d      	cmp	r5, r3
 8001062:	603a      	str	r2, [r7, #0]
 8001064:	d90c      	bls.n	8001080 <flash_memwrite+0x104>
 8001066:	4913      	ldr	r1, [pc, #76]	; (80010b4 <flash_memwrite+0x138>)
 8001068:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800106a:	9a00      	ldr	r2, [sp, #0]
 800106c:	1c50      	adds	r0, r2, #1
 800106e:	5ca2      	ldrb	r2, [r4, r2]
 8001070:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 8001072:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001074:	9000      	str	r0, [sp, #0]
 8001076:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 800107a:	9a00      	ldr	r2, [sp, #0]
 800107c:	42aa      	cmp	r2, r5
 800107e:	d3f4      	bcc.n	800106a <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 8001080:	4628      	mov	r0, r5
 8001082:	b005      	add	sp, #20
 8001084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 8001088:	6832      	ldr	r2, [r6, #0]
 800108a:	4629      	mov	r1, r5
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <flash_memwrite+0x13c>)
 800108e:	f024 f981 	bl	8025394 <iprintf>
 8001092:	e787      	b.n	8000fa4 <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 8001094:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010c4 <flash_memwrite+0x148>
 8001098:	f8d9 0000 	ldr.w	r0, [r9]
 800109c:	f7ff fe76 	bl	8000d8c <EraseFlash>
		notflashed = 0;
 80010a0:	f8c8 7000 	str.w	r7, [r8]
 80010a4:	e77c      	b.n	8000fa0 <flash_memwrite+0x24>
 80010a6:	bf00      	nop
 80010a8:	20000844 	.word	0x20000844
 80010ac:	20000840 	.word	0x20000840
 80010b0:	20000860 	.word	0x20000860
 80010b4:	20000850 	.word	0x20000850
 80010b8:	08029e1c 	.word	0x08029e1c
 80010bc:	20000008 	.word	0x20000008
 80010c0:	2000084c 	.word	0x2000084c
 80010c4:	20000848 	.word	0x20000848

080010c8 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	notflashed = 1;		// now assumed dirty
	if (flash_abort) {
 80010c8:	4b47      	ldr	r3, [pc, #284]	; (80011e8 <memclose+0x120>)
	notflashed = 1;		// now assumed dirty
 80010ca:	2101      	movs	r1, #1
 80010cc:	4a47      	ldr	r2, [pc, #284]	; (80011ec <memclose+0x124>)
	if (flash_abort) {
 80010ce:	6818      	ldr	r0, [r3, #0]
	notflashed = 1;		// now assumed dirty
 80010d0:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d16e      	bne.n	80011b4 <memclose+0xec>
		flash_abort = 0;
		http_downloading = 0;
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010d6:	4b46      	ldr	r3, [pc, #280]	; (80011f0 <memclose+0x128>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
void* memclose() {
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	b085      	sub	sp, #20
	if (q_index > 0) {			// unfinished residual write still needed
 80010e0:	dd0b      	ble.n	80010fa <memclose+0x32>
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <memclose+0x12c>)
 80010e4:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 80010e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80010ec:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 80010ee:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 80010f0:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 80010f4:	d1f8      	bne.n	80010e8 <memclose+0x20>
		}
		flash_writeword(residual);
 80010f6:	f7ff ff17 	bl	8000f28 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 80010fa:	4e3f      	ldr	r6, [pc, #252]	; (80011f8 <memclose+0x130>)
 80010fc:	4b3f      	ldr	r3, [pc, #252]	; (80011fc <memclose+0x134>)
 80010fe:	6832      	ldr	r2, [r6, #0]
 8001100:	4c3f      	ldr	r4, [pc, #252]	; (8001200 <memclose+0x138>)
 8001102:	4d40      	ldr	r5, [pc, #256]	; (8001204 <memclose+0x13c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6829      	ldr	r1, [r5, #0]
 8001108:	9200      	str	r2, [sp, #0]
 800110a:	483f      	ldr	r0, [pc, #252]	; (8001208 <memclose+0x140>)
 800110c:	6822      	ldr	r2, [r4, #0]
 800110e:	f024 f941 	bl	8025394 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 8001112:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001116:	f014 f99f 	bl	8015458 <osDelay>
	res = HAL_FLASH_Lock();
 800111a:	f00a f847 	bl	800b1ac <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 800111e:	2800      	cmp	r0, #0
 8001120:	d14d      	bne.n	80011be <memclose+0xf6>
	if (LockFlash() != HAL_OK) {
		printf("eeprom: flash2 failed\n");
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001122:	6823      	ldr	r3, [r4, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001128:	682f      	ldr	r7, [r5, #0]
	crc = xcrc32(base, length, xinit);
 800112a:	4619      	mov	r1, r3
 800112c:	9303      	str	r3, [sp, #12]
 800112e:	4638      	mov	r0, r7
 8001130:	f7ff fd46 	bl	8000bc0 <xcrc32>
 8001134:	4604      	mov	r4, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 8001136:	9b03      	ldr	r3, [sp, #12]
 8001138:	463a      	mov	r2, r7
 800113a:	4834      	ldr	r0, [pc, #208]	; (800120c <memclose+0x144>)
 800113c:	4621      	mov	r1, r4
 800113e:	f024 f929 	bl	8025394 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <memclose+0x148>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	1c53      	adds	r3, r2, #1
 8001148:	d007      	beq.n	800115a <memclose+0x92>
 800114a:	42a2      	cmp	r2, r4
 800114c:	d005      	beq.n	800115a <memclose+0x92>
		printf(
 800114e:	6833      	ldr	r3, [r6, #0]
 8001150:	4621      	mov	r1, r4
 8001152:	4830      	ldr	r0, [pc, #192]	; (8001214 <memclose+0x14c>)
 8001154:	f024 f91e 	bl	8025394 <iprintf>
 8001158:	e027      	b.n	80011aa <memclose+0xe2>
		osDelay(5);
 800115a:	2005      	movs	r0, #5
 800115c:	f014 f97c 	bl	8015458 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001160:	482d      	ldr	r0, [pc, #180]	; (8001218 <memclose+0x150>)
 8001162:	f00a fa11 	bl	800b588 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 8001166:	f00a f82b 	bl	800b1c0 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 800116a:	682b      	ldr	r3, [r5, #0]
 800116c:	482a      	ldr	r0, [pc, #168]	; (8001218 <memclose+0x150>)
 800116e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001172:	bf0b      	itete	eq
 8001174:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 8001178:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 800117c:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 8001180:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 8001184:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8001188:	f00a f926 	bl	800b3d8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 800118c:	bb38      	cbnz	r0, 80011de <memclose+0x116>
		res = HAL_FLASH_OB_Launch();
 800118e:	f00a f833 	bl	800b1f8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8001192:	b9f8      	cbnz	r0, 80011d4 <memclose+0x10c>
		HAL_FLASH_OB_Lock();
 8001194:	f00a f826 	bl	800b1e4 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 8001198:	4820      	ldr	r0, [pc, #128]	; (800121c <memclose+0x154>)
 800119a:	f024 f997 	bl	80254cc <puts>
		osDelay(50);
 800119e:	2032      	movs	r0, #50	; 0x32
 80011a0:	f014 f95a 	bl	8015458 <osDelay>
		rebootme(0);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f002 f8b5 	bl	8003314 <rebootme>
	http_downloading = 0;
 80011aa:	4b1d      	ldr	r3, [pc, #116]	; (8001220 <memclose+0x158>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	b005      	add	sp, #20
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flash_abort = 0;
 80011b4:	2200      	movs	r2, #0
		http_downloading = 0;
 80011b6:	491a      	ldr	r1, [pc, #104]	; (8001220 <memclose+0x158>)
		flash_abort = 0;
 80011b8:	601a      	str	r2, [r3, #0]
		http_downloading = 0;
 80011ba:	600a      	str	r2, [r1, #0]
}
 80011bc:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011be:	4819      	ldr	r0, [pc, #100]	; (8001224 <memclose+0x15c>)
 80011c0:	f024 f984 	bl	80254cc <puts>
		printflasherr();
 80011c4:	f7ff fd56 	bl	8000c74 <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <memclose+0x160>)
 80011ca:	f024 f97f 	bl	80254cc <puts>
		return ((void*) 0);
 80011ce:	2000      	movs	r0, #0
}
 80011d0:	b005      	add	sp, #20
 80011d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 80011d4:	4601      	mov	r1, r0
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <memclose+0x164>)
 80011d8:	f024 f8dc 	bl	8025394 <iprintf>
 80011dc:	e7da      	b.n	8001194 <memclose+0xcc>
			printf("memclose: failed to OBProgram %d\n", res);
 80011de:	4601      	mov	r1, r0
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <memclose+0x168>)
 80011e2:	f024 f8d7 	bl	8025394 <iprintf>
 80011e6:	e7d2      	b.n	800118e <memclose+0xc6>
 80011e8:	20000840 	.word	0x20000840
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000860 	.word	0x20000860
 80011f4:	20000850 	.word	0x20000850
 80011f8:	2000165c 	.word	0x2000165c
 80011fc:	20000848 	.word	0x20000848
 8001200:	20000844 	.word	0x20000844
 8001204:	20000004 	.word	0x20000004
 8001208:	08029e34 	.word	0x08029e34
 800120c:	08029f94 	.word	0x08029f94
 8001210:	2000083c 	.word	0x2000083c
 8001214:	08029ea4 	.word	0x08029ea4
 8001218:	2000081c 	.word	0x2000081c
 800121c:	08029f58 	.word	0x08029f58
 8001220:	200018a8 	.word	0x200018a8
 8001224:	08029bf8 	.word	0x08029bf8
 8001228:	08029e8c 	.word	0x08029e8c
 800122c:	08029f34 	.word	0x08029f34
 8001230:	08029f10 	.word	0x08029f10

08001234 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <vApplicationMallocFailedHook>:
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <vApplicationGetIdleTaskMemory+0x18>)
{
 8001242:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001244:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001246:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800124a:	4c04      	ldr	r4, [pc, #16]	; (800125c <vApplicationGetIdleTaskMemory+0x1c>)
 800124c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800124e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000c64 	.word	0x20000c64
 800125c:	20000864 	.word	0x20000864

08001260 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <vApplicationGetTimerTaskMemory+0x18>)
{
 8001262:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001264:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001266:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800126a:	4c04      	ldr	r4, [pc, #16]	; (800127c <vApplicationGetTimerTaskMemory+0x1c>)
 800126c:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 800126e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20001518 	.word	0x20001518
 800127c:	20000d18 	.word	0x20000d18

08001280 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 8001280:	2000      	movs	r0, #0
 8001282:	4770      	bx	lr

08001284 <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 8001284:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 8001286:	2000      	movs	r0, #0
	http_content_len = content_len;
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <RecvHttpHeaderCallback+0xc>)
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20001660 	.word	0x20001660

08001294 <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8001294:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 8001296:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 8001298:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 800129a:	b158      	cbz	r0, 80012b4 <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 800129c:	1d21      	adds	r1, r4, #4
 800129e:	42a9      	cmp	r1, r5
 80012a0:	d001      	beq.n	80012a6 <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012a2:	682b      	ldr	r3, [r5, #0]
 80012a4:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012a6:	8922      	ldrh	r2, [r4, #8]
 80012a8:	6820      	ldr	r0, [r4, #0]
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <httpc_get_internal_addr+0x30>)
}
 80012ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012b0:	f01a bc60 	b.w	801bb74 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <httpc_get_internal_addr+0x34>)
 80012b6:	f240 1297 	movw	r2, #407	; 0x197
 80012ba:	4904      	ldr	r1, [pc, #16]	; (80012cc <httpc_get_internal_addr+0x38>)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <httpc_get_internal_addr+0x3c>)
 80012be:	f024 f869 	bl	8025394 <iprintf>
 80012c2:	e7eb      	b.n	800129c <httpc_get_internal_addr+0x8>
 80012c4:	080016c9 	.word	0x080016c9
 80012c8:	08029fc0 	.word	0x08029fc0
 80012cc:	08029fdc 	.word	0x08029fdc
 80012d0:	08029fe8 	.word	0x08029fe8

080012d4 <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 80012d4:	b538      	push	{r3, r4, r5, lr}
 80012d6:	4604      	mov	r4, r0
	if (req->request != NULL) {
 80012d8:	6900      	ldr	r0, [r0, #16]
 80012da:	b118      	cbz	r0, 80012e4 <httpc_free_state+0x10>
		pbuf_free(req->request);
 80012dc:	f019 ff90 	bl	801b200 <pbuf_free>
		req->request = NULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 80012e4:	6960      	ldr	r0, [r4, #20]
 80012e6:	b118      	cbz	r0, 80012f0 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 80012e8:	f019 ff8a 	bl	801b200 <pbuf_free>
		req->rx_hdrs = NULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 80012f0:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 80012f2:	4620      	mov	r0, r4
 80012f4:	f018 fed8 	bl	801a0a8 <mem_free>
	if (tpcb != NULL) {
 80012f8:	b1c5      	cbz	r5, 800132c <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4628      	mov	r0, r5
 80012fe:	f01a fd3f 	bl	801bd80 <tcp_arg>
		altcp_recv(tpcb, NULL);
 8001302:	2100      	movs	r1, #0
 8001304:	4628      	mov	r0, r5
 8001306:	f01a fd3f 	bl	801bd88 <tcp_recv>
		altcp_err(tpcb, NULL);
 800130a:	2100      	movs	r1, #0
 800130c:	4628      	mov	r0, r5
 800130e:	f01a fd73 	bl	801bdf8 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	4628      	mov	r0, r5
 8001316:	4611      	mov	r1, r2
 8001318:	f01a fd90 	bl	801be3c <tcp_poll>
		altcp_sent(tpcb, NULL);
 800131c:	4628      	mov	r0, r5
 800131e:	2100      	movs	r1, #0
 8001320:	f01a fd4e 	bl	801bdc0 <tcp_sent>
		r = altcp_close(tpcb);
 8001324:	4628      	mov	r0, r5
 8001326:	f01b fbe7 	bl	801caf8 <tcp_close>
		if (r != ERR_OK) {
 800132a:	b908      	cbnz	r0, 8001330 <httpc_free_state+0x5c>
	return ERR_OK;
 800132c:	2000      	movs	r0, #0
}
 800132e:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001330:	4628      	mov	r0, r5
 8001332:	f01b f9e9 	bl	801c708 <tcp_abort>
			return ERR_ABRT;
 8001336:	f06f 000c 	mvn.w	r0, #12
}
 800133a:	bd38      	pop	{r3, r4, r5, pc}

0800133c <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 800133c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	460c      	mov	r4, r1
 8001344:	461d      	mov	r5, r3
 8001346:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 800134a:	b968      	cbnz	r0, 8001368 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 800134c:	2900      	cmp	r1, #0
 800134e:	d032      	beq.n	80013b6 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8001352:	462b      	mov	r3, r5
 8001354:	4641      	mov	r1, r8
 8001356:	4638      	mov	r0, r7
 8001358:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 800135e:	b004      	add	sp, #16
 8001360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 8001364:	f024 b9cc 	b.w	8025700 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001368:	4616      	mov	r6, r2
 800136a:	b1e1      	cbz	r1, 80013a6 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 800136c:	2e50      	cmp	r6, #80	; 0x50
 800136e:	d00d      	beq.n	800138c <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 8001370:	4623      	mov	r3, r4
 8001372:	9403      	str	r4, [sp, #12]
 8001374:	4c14      	ldr	r4, [pc, #80]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 8001376:	4641      	mov	r1, r8
 8001378:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <httpc_create_request_string.constprop.0.isra.0+0x94>)
 800137a:	4638      	mov	r0, r7
 800137c:	9501      	str	r5, [sp, #4]
 800137e:	9600      	str	r6, [sp, #0]
 8001380:	9402      	str	r4, [sp, #8]
 8001382:	f024 f9bd 	bl	8025700 <sniprintf>
}
 8001386:	b004      	add	sp, #16
 8001388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 800138e:	4641      	mov	r1, r8
 8001390:	4623      	mov	r3, r4
 8001392:	4638      	mov	r0, r7
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	4a0f      	ldr	r2, [pc, #60]	; (80013d4 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 8001398:	9402      	str	r4, [sp, #8]
 800139a:	9500      	str	r5, [sp, #0]
 800139c:	f024 f9b0 	bl	8025700 <sniprintf>
}
 80013a0:	b004      	add	sp, #16
 80013a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013a6:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013a8:	f240 12d9 	movw	r2, #473	; 0x1d9
 80013ac:	490b      	ldr	r1, [pc, #44]	; (80013dc <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 80013b0:	f023 fff0 	bl	8025394 <iprintf>
 80013b4:	e7da      	b.n	800136c <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013b8:	f240 12e1 	movw	r2, #481	; 0x1e1
 80013bc:	4907      	ldr	r1, [pc, #28]	; (80013dc <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 80013c0:	f023 ffe8 	bl	8025394 <iprintf>
 80013c4:	e7c4      	b.n	8001350 <httpc_create_request_string.constprop.0.isra.0+0x14>
 80013c6:	bf00      	nop
 80013c8:	0802a080 	.word	0x0802a080
 80013cc:	0802a110 	.word	0x0802a110
 80013d0:	0802a024 	.word	0x0802a024
 80013d4:	0802a0b8 	.word	0x0802a0b8
 80013d8:	08029fc0 	.word	0x08029fc0
 80013dc:	0802a010 	.word	0x0802a010
 80013e0:	08029fe8 	.word	0x08029fe8

080013e4 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 80013e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e8:	b085      	sub	sp, #20
 80013ea:	460d      	mov	r5, r1
 80013ec:	4690      	mov	r8, r2
 80013ee:	461e      	mov	r6, r3
 80013f0:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80013f4:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 80013f6:	f1ba 0f00 	cmp.w	sl, #0
 80013fa:	d063      	beq.n	80014c4 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 80013fc:	f04f 0900 	mov.w	r9, #0
 8001400:	4653      	mov	r3, sl
 8001402:	4632      	mov	r2, r6
 8001404:	4641      	mov	r1, r8
 8001406:	46b3      	mov	fp, r6
 8001408:	e9cd 9900 	strd	r9, r9, [sp]
 800140c:	79a8      	ldrb	r0, [r5, #6]
 800140e:	f7ff ff95 	bl	800133c <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001412:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001416:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001418:	4298      	cmp	r0, r3
 800141a:	d861      	bhi.n	80014e0 <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 800141c:	2034      	movs	r0, #52	; 0x34
 800141e:	f018 ffff 	bl	801a420 <mem_malloc>
	if (req == NULL) {
 8001422:	4604      	mov	r4, r0
 8001424:	2800      	cmp	r0, #0
 8001426:	d064      	beq.n	80014f2 <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001428:	4649      	mov	r1, r9
 800142a:	2234      	movs	r2, #52	; 0x34
 800142c:	f023 f814 	bl	8024458 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001430:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001432:	231e      	movs	r3, #30
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001434:	f107 0901 	add.w	r9, r7, #1
 8001438:	f44f 7220 	mov.w	r2, #640	; 0x280
 800143c:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001440:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001442:	f019 fd0b 	bl	801ae5c <pbuf_alloc>
 8001446:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 8001448:	2800      	cmp	r0, #0
 800144a:	d043      	beq.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 800144c:	6803      	ldr	r3, [r0, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d140      	bne.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 8001458:	f01b fa76 	bl	801c948 <tcp_new>
 800145c:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 800145e:	2800      	cmp	r0, #0
 8001460:	d038      	beq.n	80014d4 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001462:	79ab      	ldrb	r3, [r5, #6]
 8001464:	bb63      	cbnz	r3, 80014c0 <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 8001466:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001468:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 800146a:	f01a fc89 	bl	801bd80 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 800146e:	4922      	ldr	r1, [pc, #136]	; (80014f8 <httpc_init_connection_common.constprop.0+0x114>)
 8001470:	6820      	ldr	r0, [r4, #0]
 8001472:	f01a fc89 	bl	801bd88 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 8001476:	4921      	ldr	r1, [pc, #132]	; (80014fc <httpc_init_connection_common.constprop.0+0x118>)
 8001478:	6820      	ldr	r0, [r4, #0]
 800147a:	f01a fcbd 	bl	801bdf8 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 800147e:	2201      	movs	r2, #1
 8001480:	491f      	ldr	r1, [pc, #124]	; (8001500 <httpc_init_connection_common.constprop.0+0x11c>)
 8001482:	6820      	ldr	r0, [r4, #0]
 8001484:	f01a fcda 	bl	801be3c <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 8001488:	491e      	ldr	r1, [pc, #120]	; (8001504 <httpc_init_connection_common.constprop.0+0x120>)
 800148a:	6820      	ldr	r0, [r4, #0]
 800148c:	f01a fc98 	bl	801bdc0 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001490:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 8001494:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 8001496:	4653      	mov	r3, sl
 8001498:	465a      	mov	r2, fp
 800149a:	4641      	mov	r1, r8
 800149c:	6840      	ldr	r0, [r0, #4]
 800149e:	9000      	str	r0, [sp, #0]
 80014a0:	79a8      	ldrb	r0, [r5, #6]
 80014a2:	f7ff ff4b 	bl	800133c <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 80014a6:	4287      	cmp	r7, r0
 80014a8:	d11d      	bne.n	80014e6 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 80014aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 80014ac:	2000      	movs	r0, #0
	req->conn_settings = settings;
 80014ae:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 80014b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80014b4:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 80014b6:	9b03      	ldr	r3, [sp, #12]
 80014b8:	601c      	str	r4, [r3, #0]
}
 80014ba:	b005      	add	sp, #20
 80014bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014c0:	88ae      	ldrh	r6, [r5, #4]
 80014c2:	e7d0      	b.n	8001466 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <httpc_init_connection_common.constprop.0+0x124>)
 80014c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80014ca:	4910      	ldr	r1, [pc, #64]	; (800150c <httpc_init_connection_common.constprop.0+0x128>)
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <httpc_init_connection_common.constprop.0+0x12c>)
 80014ce:	f023 ff61 	bl	8025394 <iprintf>
 80014d2:	e793      	b.n	80013fc <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fefd 	bl	80012d4 <httpc_free_state>
		return ERR_MEM;
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	e7ec      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 80014e0:	f06f 0005 	mvn.w	r0, #5
 80014e4:	e7e9      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff fef4 	bl	80012d4 <httpc_free_state>
		return ERR_VAL;
 80014ec:	f06f 0005 	mvn.w	r0, #5
 80014f0:	e7e3      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	e7e0      	b.n	80014ba <httpc_init_connection_common.constprop.0+0xd6>
 80014f8:	08001961 	.word	0x08001961
 80014fc:	08001515 	.word	0x08001515
 8001500:	08001719 	.word	0x08001719
 8001504:	08001281 	.word	0x08001281
 8001508:	08029fc0 	.word	0x08029fc0
 800150c:	0802a160 	.word	0x0802a160
 8001510:	08029fe8 	.word	0x08029fe8

08001514 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 8001514:	b570      	push	{r4, r5, r6, lr}
 8001516:	4604      	mov	r4, r0
 8001518:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 800151c:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 800151e:	f023 ff39 	bl	8025394 <iprintf>
	if (req != NULL) {
 8001522:	b184      	cbz	r4, 8001546 <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001524:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 8001526:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 8001528:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800152a:	b132      	cbz	r2, 800153a <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800152c:	6896      	ldr	r6, [r2, #8]
 800152e:	b126      	cbz	r6, 800153a <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001530:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001532:	2104      	movs	r1, #4
 8001534:	9500      	str	r5, [sp, #0]
 8001536:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001538:	47b0      	blx	r6
		return httpc_free_state(req);
 800153a:	4620      	mov	r0, r4
}
 800153c:	b002      	add	sp, #8
 800153e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001542:	f7ff bec7 	b.w	80012d4 <httpc_free_state>
}
 8001546:	b002      	add	sp, #8
 8001548:	bd70      	pop	{r4, r5, r6, pc}
 800154a:	bf00      	nop
 800154c:	0802a16c 	.word	0x0802a16c

08001550 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 8001550:	b530      	push	{r4, r5, lr}
 8001552:	4614      	mov	r4, r2
 8001554:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 8001556:	b1b1      	cbz	r1, 8001586 <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 8001558:	4610      	mov	r0, r2
 800155a:	f7ff fe9b 	bl	8001294 <httpc_get_internal_addr>
		if (err == ERR_OK) {
 800155e:	b180      	cbz	r0, 8001582 <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001560:	2102      	movs	r1, #2
	if (req != NULL) {
 8001562:	b174      	cbz	r4, 8001582 <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 8001564:	6a23      	ldr	r3, [r4, #32]
 8001566:	b133      	cbz	r3, 8001576 <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001568:	689d      	ldr	r5, [r3, #8]
 800156a:	b125      	cbz	r5, 8001576 <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 800156c:	9000      	str	r0, [sp, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001574:	47a8      	blx	r5
		return httpc_free_state(req);
 8001576:	4620      	mov	r0, r4
}
 8001578:	b003      	add	sp, #12
 800157a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800157e:	f7ff bea9 	b.w	80012d4 <httpc_free_state>
}
 8001582:	b003      	add	sp, #12
 8001584:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 8001586:	2103      	movs	r1, #3
		err = ERR_ARG;
 8001588:	f06f 000f 	mvn.w	r0, #15
 800158c:	e7e9      	b.n	8001562 <httpc_dns_found+0x12>
 800158e:	bf00      	nop

08001590 <HttpClientPageResultCallback>:
}

//
// receive page has finished
void HttpClientPageResultCallback(void *arg, httpc_result_t httpc_result, u32_t rx_content_len, u32_t srv_res,
		err_t err) {
 8001590:	b530      	push	{r4, r5, lr}
 8001592:	b083      	sub	sp, #12
 8001594:	f99d 5018 	ldrsb.w	r5, [sp, #24]
//	printf("HttpClientPageResultCallback: total=%u\n", mytot);
	if (httpc_result != HTTPC_RESULT_OK) {
 8001598:	b949      	cbnz	r1, 80015ae <HttpClientPageResultCallback+0x1e>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
	}
	if (err != ERR_OK) {
 800159a:	b9d5      	cbnz	r5, 80015d2 <HttpClientPageResultCallback+0x42>
 800159c:	4c18      	ldr	r4, [pc, #96]	; (8001600 <HttpClientPageResultCallback+0x70>)
		printlwiperr(err);
	}

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
 800159e:	462a      	mov	r2, r5
 80015a0:	6821      	ldr	r1, [r4, #0]
 80015a2:	4818      	ldr	r0, [pc, #96]	; (8001604 <HttpClientPageResultCallback+0x74>)
}
 80015a4:	b003      	add	sp, #12
 80015a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 80015aa:	f006 bbf9 	b.w	8007da0 <returnpage>
 80015ae:	2909      	cmp	r1, #9
 80015b0:	460c      	mov	r4, r1
	switch (err) {
 80015b2:	d823      	bhi.n	80015fc <HttpClientPageResultCallback+0x6c>
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HttpClientPageResultCallback+0x78>)
 80015b6:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 80015ba:	4611      	mov	r1, r2
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <HttpClientPageResultCallback+0x7c>)
 80015be:	9201      	str	r2, [sp, #4]
 80015c0:	f023 fee8 	bl	8025394 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015c4:	9a01      	ldr	r2, [sp, #4]
 80015c6:	4621      	mov	r1, r4
 80015c8:	4811      	ldr	r0, [pc, #68]	; (8001610 <HttpClientPageResultCallback+0x80>)
 80015ca:	f023 fee3 	bl	8025394 <iprintf>
	if (err != ERR_OK) {
 80015ce:	2d00      	cmp	r5, #0
 80015d0:	d0e4      	beq.n	800159c <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015d2:	f105 0310 	add.w	r3, r5, #16
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d905      	bls.n	80015e8 <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80015dc:	4c08      	ldr	r4, [pc, #32]	; (8001600 <HttpClientPageResultCallback+0x70>)
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <HttpClientPageResultCallback+0x84>)
 80015e0:	6821      	ldr	r1, [r4, #0]
 80015e2:	f023 fed7 	bl	8025394 <iprintf>
 80015e6:	e7da      	b.n	800159e <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015e8:	4269      	negs	r1, r5
 80015ea:	4c05      	ldr	r4, [pc, #20]	; (8001600 <HttpClientPageResultCallback+0x70>)
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HttpClientPageResultCallback+0x88>)
 80015ee:	6822      	ldr	r2, [r4, #0]
 80015f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <HttpClientPageResultCallback+0x8c>)
 80015f6:	f023 fecd 	bl	8025394 <iprintf>
}
 80015fa:	e7d0      	b.n	800159e <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HttpClientPageResultCallback+0x90>)
 80015fe:	e7dc      	b.n	80015ba <HttpClientPageResultCallback+0x2a>
 8001600:	2000165c 	.word	0x2000165c
 8001604:	20001664 	.word	0x20001664
 8001608:	0802a514 	.word	0x0802a514
 800160c:	0802a19c 	.word	0x0802a19c
 8001610:	0802a1b0 	.word	0x0802a1b0
 8001614:	0802a1d8 	.word	0x0802a1d8
 8001618:	0802a53c 	.word	0x0802a53c
 800161c:	0802a1f8 	.word	0x0802a1f8
 8001620:	0802a180 	.word	0x0802a180

08001624 <HttpClientFileResultCallback>:
		err_t err) {
 8001624:	b530      	push	{r4, r5, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 800162c:	b949      	cbnz	r1, 8001642 <HttpClientFileResultCallback+0x1e>
	if (err != ERR_OK) {
 800162e:	2d00      	cmp	r5, #0
 8001630:	d135      	bne.n	800169e <HttpClientFileResultCallback+0x7a>
	if (flash_memptr != 0) {
 8001632:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b323      	cbz	r3, 8001682 <HttpClientFileResultCallback+0x5e>
}
 8001638:	b003      	add	sp, #12
 800163a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		memclose();
 800163e:	f7ff bd43 	b.w	80010c8 <memclose>
 8001642:	2909      	cmp	r1, #9
 8001644:	460c      	mov	r4, r1
	switch (err) {
 8001646:	d81e      	bhi.n	8001686 <HttpClientFileResultCallback+0x62>
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HttpClientFileResultCallback+0x84>)
 800164a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 800164e:	4611      	mov	r1, r2
 8001650:	4816      	ldr	r0, [pc, #88]	; (80016ac <HttpClientFileResultCallback+0x88>)
 8001652:	9201      	str	r2, [sp, #4]
 8001654:	f023 fe9e 	bl	8025394 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001658:	4621      	mov	r1, r4
 800165a:	9a01      	ldr	r2, [sp, #4]
 800165c:	4814      	ldr	r0, [pc, #80]	; (80016b0 <HttpClientFileResultCallback+0x8c>)
 800165e:	f023 fe99 	bl	8025394 <iprintf>
		flash_memptr = 0;
 8001662:	4c10      	ldr	r4, [pc, #64]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 8001664:	2300      	movs	r3, #0
 8001666:	6023      	str	r3, [r4, #0]
	if (err != ERR_OK) {
 8001668:	b15d      	cbz	r5, 8001682 <HttpClientFileResultCallback+0x5e>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800166a:	f105 0310 	add.w	r3, r5, #16
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b10      	cmp	r3, #16
 8001672:	d90a      	bls.n	800168a <HttpClientFileResultCallback+0x66>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HttpClientFileResultCallback+0x90>)
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <HttpClientFileResultCallback+0x94>)
 8001678:	6819      	ldr	r1, [r3, #0]
 800167a:	f023 fe8b 	bl	8025394 <iprintf>
		flash_memptr = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	6023      	str	r3, [r4, #0]
}
 8001682:	b003      	add	sp, #12
 8001684:	bd30      	pop	{r4, r5, pc}
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001686:	4a0d      	ldr	r2, [pc, #52]	; (80016bc <HttpClientFileResultCallback+0x98>)
 8001688:	e7e1      	b.n	800164e <HttpClientFileResultCallback+0x2a>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800168a:	4269      	negs	r1, r5
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <HttpClientFileResultCallback+0x9c>)
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HttpClientFileResultCallback+0x90>)
 8001690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HttpClientFileResultCallback+0xa0>)
 8001698:	f023 fe7c 	bl	8025394 <iprintf>
}
 800169c:	e7ef      	b.n	800167e <HttpClientFileResultCallback+0x5a>
 800169e:	4c01      	ldr	r4, [pc, #4]	; (80016a4 <HttpClientFileResultCallback+0x80>)
 80016a0:	e7e3      	b.n	800166a <HttpClientFileResultCallback+0x46>
 80016a2:	bf00      	nop
 80016a4:	20000848 	.word	0x20000848
 80016a8:	0802a514 	.word	0x0802a514
 80016ac:	0802a19c 	.word	0x0802a19c
 80016b0:	0802a218 	.word	0x0802a218
 80016b4:	2000165c 	.word	0x2000165c
 80016b8:	0802a1d8 	.word	0x0802a1d8
 80016bc:	0802a180 	.word	0x0802a180
 80016c0:	0802a53c 	.word	0x0802a53c
 80016c4:	0802a1f8 	.word	0x0802a1f8

080016c8 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016c8:	6901      	ldr	r1, [r0, #16]
 80016ca:	2301      	movs	r3, #1
 80016cc:	894a      	ldrh	r2, [r1, #10]
 80016ce:	6849      	ldr	r1, [r1, #4]
 80016d0:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 80016d2:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016d4:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 80016d6:	b082      	sub	sp, #8
 80016d8:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	f01d f928 	bl	801e930 <tcp_write>
	if (r != ERR_OK) {
 80016e0:	4605      	mov	r5, r0
 80016e2:	b948      	cbnz	r0, 80016f8 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 80016e4:	6920      	ldr	r0, [r4, #16]
 80016e6:	f019 fd8b 	bl	801b200 <pbuf_free>
	altcp_output(req->pcb);
 80016ea:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 80016ec:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 80016ee:	f01d ff39 	bl	801f564 <tcp_output>
}
 80016f2:	4628      	mov	r0, r5
 80016f4:	b002      	add	sp, #8
 80016f6:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 80016f8:	6a23      	ldr	r3, [r4, #32]
 80016fa:	b13b      	cbz	r3, 800170c <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 80016fc:	689e      	ldr	r6, [r3, #8]
 80016fe:	b12e      	cbz	r6, 800170c <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001702:	2300      	movs	r3, #0
 8001704:	9000      	str	r0, [sp, #0]
 8001706:	2107      	movs	r1, #7
 8001708:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800170a:	47b0      	blx	r6
		return httpc_free_state(req);
 800170c:	4620      	mov	r0, r4
}
 800170e:	b002      	add	sp, #8
 8001710:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001714:	f7ff bdde 	b.w	80012d4 <httpc_free_state>

08001718 <httpc_tcp_poll>:
	if (req != NULL) {
 8001718:	b1d0      	cbz	r0, 8001750 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800171a:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 800171c:	b530      	push	{r4, r5, lr}
 800171e:	4604      	mov	r4, r0
 8001720:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 8001722:	b12b      	cbz	r3, 8001730 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 8001724:	3b01      	subs	r3, #1
 8001726:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 8001728:	b113      	cbz	r3, 8001730 <httpc_tcp_poll+0x18>
}
 800172a:	2000      	movs	r0, #0
 800172c:	b003      	add	sp, #12
 800172e:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 8001730:	6a23      	ldr	r3, [r4, #32]
 8001732:	b13b      	cbz	r3, 8001744 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 8001734:	689d      	ldr	r5, [r3, #8]
 8001736:	b12d      	cbz	r5, 8001744 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001738:	2300      	movs	r3, #0
 800173a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800173c:	2105      	movs	r1, #5
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001742:	47a8      	blx	r5
		return httpc_free_state(req);
 8001744:	4620      	mov	r0, r4
}
 8001746:	b003      	add	sp, #12
 8001748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 800174c:	f7ff bdc2 	b.w	80012d4 <httpc_free_state>
}
 8001750:	2000      	movs	r0, #0
 8001752:	4770      	bx	lr

08001754 <HttpClientFileReceiveCallback>:

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001758:	461c      	mov	r4, r3
 800175a:	b081      	sub	sp, #4
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientFileReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800175c:	b36a      	cbz	r2, 80017ba <HttpClientFileReceiveCallback+0x66>
	if (err != ERR_OK) {
 800175e:	2b00      	cmp	r3, #0
 8001760:	d134      	bne.n	80017cc <HttpClientFileReceiveCallback+0x78>
 8001762:	460f      	mov	r7, r1
 8001764:	4615      	mov	r5, r2
 8001766:	4614      	mov	r4, r2
 8001768:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8001840 <HttpClientFileReceiveCallback+0xec>
		tlen = q->tot_len;
		len = q->len;
#if 0
		putchar('.');
#endif
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 800176c:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8001844 <HttpClientFileReceiveCallback+0xf0>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001770:	4e2b      	ldr	r6, [pc, #172]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001772:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001776:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 800177a:	f1bb 0f00 	cmp.w	fp, #0
 800177e:	d10b      	bne.n	8001798 <HttpClientFileReceiveCallback+0x44>
 8001780:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001784:	4652      	mov	r2, sl
 8001786:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001788:	b133      	cbz	r3, 8001798 <HttpClientFileReceiveCallback+0x44>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 800178a:	6860      	ldr	r0, [r4, #4]
 800178c:	f7ff fbf6 	bl	8000f7c <flash_memwrite>
 8001790:	4582      	cmp	sl, r0
 8001792:	d12b      	bne.n	80017ec <HttpClientFileReceiveCallback+0x98>
		down_total += q->len;
 8001794:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001798:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 800179a:	4638      	mov	r0, r7
 800179c:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 800179e:	4453      	add	r3, sl
 80017a0:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 80017a2:	f01a f9ad 	bl	801bb00 <tcp_recved>
		pbuf_free(p);
 80017a6:	4628      	mov	r0, r5
 80017a8:	f019 fd2a 	bl	801b200 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 80017ac:	6824      	ldr	r4, [r4, #0]
 80017ae:	2c00      	cmp	r4, #0
 80017b0:	d1df      	bne.n	8001772 <HttpClientFileReceiveCallback+0x1e>

//		p = p->next;
//		printf("HttpClientFileReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, mytot);
	}
	return (0);
 80017b2:	2000      	movs	r0, #0
}
 80017b4:	b001      	add	sp, #4
 80017b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HttpClientFileReceiveCallback+0xd0>)
 80017bc:	f240 4205 	movw	r2, #1029	; 0x405
 80017c0:	4919      	ldr	r1, [pc, #100]	; (8001828 <HttpClientFileReceiveCallback+0xd4>)
 80017c2:	481a      	ldr	r0, [pc, #104]	; (800182c <HttpClientFileReceiveCallback+0xd8>)
 80017c4:	f023 fde6 	bl	8025394 <iprintf>
	if (err != ERR_OK) {
 80017c8:	2c00      	cmp	r4, #0
 80017ca:	d0f2      	beq.n	80017b2 <HttpClientFileReceiveCallback+0x5e>
		putchar('#');
 80017cc:	2023      	movs	r0, #35	; 0x23
 80017ce:	f023 fdf9 	bl	80253c4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80017d2:	f104 0310 	add.w	r3, r4, #16
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b10      	cmp	r3, #16
 80017da:	d914      	bls.n	8001806 <HttpClientFileReceiveCallback+0xb2>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <HttpClientFileReceiveCallback+0xdc>)
 80017e0:	6819      	ldr	r1, [r3, #0]
}
 80017e2:	b001      	add	sp, #4
 80017e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80017e8:	f023 bdd4 	b.w	8025394 <iprintf>
				flash_abort = 1;
 80017ec:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 80017ee:	4811      	ldr	r0, [pc, #68]	; (8001834 <HttpClientFileReceiveCallback+0xe0>)
				flash_memptr = 0;
 80017f0:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 80017f4:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 80017f8:	f023 fe68 	bl	80254cc <puts>
				return (-1);
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001800:	b001      	add	sp, #4
 8001802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001806:	4261      	negs	r1, r4
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HttpClientFileReceiveCallback+0xe4>)
 800180a:	4a05      	ldr	r2, [pc, #20]	; (8001820 <HttpClientFileReceiveCallback+0xcc>)
 800180c:	480b      	ldr	r0, [pc, #44]	; (800183c <HttpClientFileReceiveCallback+0xe8>)
 800180e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001812:	6812      	ldr	r2, [r2, #0]
}
 8001814:	b001      	add	sp, #4
 8001816:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800181a:	f023 bdbb 	b.w	8025394 <iprintf>
 800181e:	bf00      	nop
 8001820:	2000165c 	.word	0x2000165c
 8001824:	08029fc0 	.word	0x08029fc0
 8001828:	080453c8 	.word	0x080453c8
 800182c:	08029fe8 	.word	0x08029fe8
 8001830:	0802a1d8 	.word	0x0802a1d8
 8001834:	0802a240 	.word	0x0802a240
 8001838:	0802a53c 	.word	0x0802a53c
 800183c:	0802a1f8 	.word	0x0802a1f8
 8001840:	20000840 	.word	0x20000840
 8001844:	20000848 	.word	0x20000848

08001848 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800184c:	461c      	mov	r4, r3
 800184e:	b081      	sub	sp, #4
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001850:	2a00      	cmp	r2, #0
 8001852:	d04f      	beq.n	80018f4 <HttpClientPageReceiveCallback+0xac>
	if (err != ERR_OK) {
 8001854:	2b00      	cmp	r3, #0
 8001856:	d156      	bne.n	8001906 <HttpClientPageReceiveCallback+0xbe>
 8001858:	4688      	mov	r8, r1
 800185a:	4617      	mov	r7, r2
 800185c:	4614      	mov	r4, r2
 800185e:	4d38      	ldr	r5, [pc, #224]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 8001860:	4e38      	ldr	r6, [pc, #224]	; (8001944 <HttpClientPageReceiveCallback+0xfc>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001862:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800195c <HttpClientPageReceiveCallback+0x114>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 8001866:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 8001868:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 800186c:	b1bb      	cbz	r3, 800189e <HttpClientPageReceiveCallback+0x56>
 800186e:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001870:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 8001874:	469e      	mov	lr, r3
 8001876:	e007      	b.n	8001888 <HttpClientPageReceiveCallback+0x40>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 8001878:	602a      	str	r2, [r5, #0]
 800187a:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 800187e:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 8001880:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 8001882:	8962      	ldrh	r2, [r4, #10]
 8001884:	4293      	cmp	r3, r2
 8001886:	da0a      	bge.n	800189e <HttpClientPageReceiveCallback+0x56>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001888:	6828      	ldr	r0, [r5, #0]
 800188a:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 800188c:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 8001890:	d9f2      	bls.n	8001878 <HttpClientPageReceiveCallback+0x30>
		for (i = 0; i < q->len; i++) {
 8001892:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 8001894:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 8001898:	8962      	ldrh	r2, [r4, #10]
 800189a:	4293      	cmp	r3, r2
 800189c:	dbf4      	blt.n	8001888 <HttpClientPageReceiveCallback+0x40>
			}
		}

		altcp_recved(pcb, p->tot_len);
 800189e:	8939      	ldrh	r1, [r7, #8]
 80018a0:	4640      	mov	r0, r8
 80018a2:	f01a f92d 	bl	801bb00 <tcp_recved>
		err = pbuf_free_callback(p);
 80018a6:	4638      	mov	r0, r7
 80018a8:	f016 fada 	bl	8017e60 <pbuf_free_callback>
 80018ac:	4682      	mov	sl, r0
 80018ae:	fa4f fb80 	sxtb.w	fp, r0
		if (err != ERR_OK) {
 80018b2:	f1bb 0f00 	cmp.w	fp, #0
 80018b6:	d105      	bne.n	80018c4 <HttpClientPageReceiveCallback+0x7c>
	for (q = p; q != NULL; q = q->next) {
 80018b8:	6824      	ldr	r4, [r4, #0]
 80018ba:	2c00      	cmp	r4, #0
 80018bc:	d1d3      	bne.n	8001866 <HttpClientPageReceiveCallback+0x1e>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, mytot);
	}
}
 80018be:	b001      	add	sp, #4
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80018c4:	f10a 0a10 	add.w	sl, sl, #16
			putchar('!');
 80018c8:	2021      	movs	r0, #33	; 0x21
 80018ca:	f023 fd7b 	bl	80253c4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80018ce:	fa5f fa8a 	uxtb.w	sl, sl
 80018d2:	f1ba 0f10 	cmp.w	sl, #16
 80018d6:	d904      	bls.n	80018e2 <HttpClientPageReceiveCallback+0x9a>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 80018d8:	6829      	ldr	r1, [r5, #0]
 80018da:	481b      	ldr	r0, [pc, #108]	; (8001948 <HttpClientPageReceiveCallback+0x100>)
 80018dc:	f023 fd5a 	bl	8025394 <iprintf>
 80018e0:	e7ea      	b.n	80018b8 <HttpClientPageReceiveCallback+0x70>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80018e2:	f1cb 0100 	rsb	r1, fp, #0
 80018e6:	682a      	ldr	r2, [r5, #0]
 80018e8:	4818      	ldr	r0, [pc, #96]	; (800194c <HttpClientPageReceiveCallback+0x104>)
 80018ea:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 80018ee:	f023 fd51 	bl	8025394 <iprintf>
}
 80018f2:	e7e1      	b.n	80018b8 <HttpClientPageReceiveCallback+0x70>
	LWIP_ASSERT("p != NULL", p != NULL);
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <HttpClientPageReceiveCallback+0x108>)
 80018f6:	f240 422f 	movw	r2, #1071	; 0x42f
 80018fa:	4916      	ldr	r1, [pc, #88]	; (8001954 <HttpClientPageReceiveCallback+0x10c>)
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <HttpClientPageReceiveCallback+0x110>)
 80018fe:	f023 fd49 	bl	8025394 <iprintf>
	if (err != ERR_OK) {
 8001902:	2c00      	cmp	r4, #0
 8001904:	d0db      	beq.n	80018be <HttpClientPageReceiveCallback+0x76>
		putchar('#');
 8001906:	2023      	movs	r0, #35	; 0x23
 8001908:	f023 fd5c 	bl	80253c4 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 800190c:	f104 0310 	add.w	r3, r4, #16
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b10      	cmp	r3, #16
 8001914:	d907      	bls.n	8001926 <HttpClientPageReceiveCallback+0xde>
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <HttpClientPageReceiveCallback+0x100>)
 800191a:	6819      	ldr	r1, [r3, #0]
}
 800191c:	b001      	add	sp, #4
 800191e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP: Unknown error: total=%d\n",down_total);
 8001922:	f023 bd37 	b.w	8025394 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001926:	4261      	negs	r1, r4
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HttpClientPageReceiveCallback+0x114>)
 800192a:	4a05      	ldr	r2, [pc, #20]	; (8001940 <HttpClientPageReceiveCallback+0xf8>)
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <HttpClientPageReceiveCallback+0x104>)
 800192e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001932:	6812      	ldr	r2, [r2, #0]
}
 8001934:	b001      	add	sp, #4
 8001936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800193a:	f023 bd2b 	b.w	8025394 <iprintf>
 800193e:	bf00      	nop
 8001940:	2000165c 	.word	0x2000165c
 8001944:	20001664 	.word	0x20001664
 8001948:	0802a1d8 	.word	0x0802a1d8
 800194c:	0802a1f8 	.word	0x0802a1f8
 8001950:	08029fc0 	.word	0x08029fc0
 8001954:	080453c8 	.word	0x080453c8
 8001958:	08029fe8 	.word	0x08029fe8
 800195c:	0802a53c 	.word	0x0802a53c

08001960 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 8001960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001964:	4604      	mov	r4, r0
 8001966:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 8001968:	4615      	mov	r5, r2
 800196a:	2a00      	cmp	r2, #0
 800196c:	f000 80e2 	beq.w	8001b34 <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001970:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 8001974:	460e      	mov	r6, r1
 8001976:	461f      	mov	r7, r3
 8001978:	f1ba 0f02 	cmp.w	sl, #2
 800197c:	f000 80c8 	beq.w	8001b10 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 8001980:	6940      	ldr	r0, [r0, #20]
 8001982:	b190      	cbz	r0, 80019aa <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 8001984:	4611      	mov	r1, r2
 8001986:	f019 fc6d 	bl	801b264 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 800198a:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 800198e:	f1ba 0f00 	cmp.w	sl, #0
 8001992:	d00e      	beq.n	80019b2 <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001994:	f1ba 0f01 	cmp.w	sl, #1
 8001998:	d06e      	beq.n	8001a78 <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 800199a:	f1ba 0f02 	cmp.w	sl, #2
 800199e:	f000 80b7 	beq.w	8001b10 <httpc_tcp_recv+0x1b0>
}
 80019a2:	2000      	movs	r0, #0
 80019a4:	b009      	add	sp, #36	; 0x24
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 80019aa:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 80019ac:	f1ba 0f00 	cmp.w	sl, #0
 80019b0:	d1f0      	bne.n	8001994 <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 80019b2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 80019b6:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 80019ba:	4653      	mov	r3, sl
 80019bc:	2202      	movs	r2, #2
 80019be:	4989      	ldr	r1, [pc, #548]	; (8001be4 <httpc_tcp_recv+0x284>)
 80019c0:	4640      	mov	r0, r8
 80019c2:	f019 fe3d 	bl	801b640 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 80019c6:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 80019c8:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 80019ca:	f000 8105 	beq.w	8001bd8 <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 80019ce:	4653      	mov	r3, sl
 80019d0:	2201      	movs	r2, #1
 80019d2:	4985      	ldr	r1, [pc, #532]	; (8001be8 <httpc_tcp_recv+0x288>)
 80019d4:	4640      	mov	r0, r8
 80019d6:	f019 fe33 	bl	801b640 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 80019da:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 80019dc:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 80019de:	f000 80fb 	beq.w	8001bd8 <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 80019e2:	4651      	mov	r1, sl
 80019e4:	2305      	movs	r3, #5
 80019e6:	4a81      	ldr	r2, [pc, #516]	; (8001bec <httpc_tcp_recv+0x28c>)
 80019e8:	4640      	mov	r0, r8
 80019ea:	f019 fdf1 	bl	801b5d0 <pbuf_memcmp>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f040 80f2 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
 80019f4:	2106      	movs	r1, #6
 80019f6:	4640      	mov	r0, r8
 80019f8:	f019 fdbe 	bl	801b578 <pbuf_get_at>
 80019fc:	282e      	cmp	r0, #46	; 0x2e
 80019fe:	f040 80eb 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001a02:	2105      	movs	r1, #5
 8001a04:	4640      	mov	r0, r8
 8001a06:	f019 fdb7 	bl	801b578 <pbuf_get_at>
 8001a0a:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001a0c:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001a0e:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 8001a12:	4640      	mov	r0, r8
 8001a14:	f019 fdb0 	bl	801b578 <pbuf_get_at>
 8001a18:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a1a:	f109 0301 	add.w	r3, r9, #1
 8001a1e:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001a20:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a24:	4970      	ldr	r1, [pc, #448]	; (8001be8 <httpc_tcp_recv+0x288>)
 8001a26:	b29b      	uxth	r3, r3
				*http_version = version;
 8001a28:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001a2a:	4640      	mov	r0, r8
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	f019 fe07 	bl	801b640 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 8001a32:	4558      	cmp	r0, fp
 8001a34:	9b02      	ldr	r3, [sp, #8]
 8001a36:	f000 80a2 	beq.w	8001b7e <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 8001a3a:	eba0 0909 	sub.w	r9, r0, r9
 8001a3e:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 8001a42:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 8001a44:	4640      	mov	r0, r8
 8001a46:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 8001a48:	f8ad 2018 	strh.w	r2, [sp, #24]
 8001a4c:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 8001a50:	fa1f f289 	uxth.w	r2, r9
 8001a54:	f019 fc78 	bl	801b348 <pbuf_copy_partial>
 8001a58:	4581      	cmp	r9, r0
 8001a5a:	f040 80bd 	bne.w	8001bd8 <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 8001a5e:	a804      	add	r0, sp, #16
 8001a60:	f022 fa74 	bl	8023f4c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 8001a64:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001a68:	1e42      	subs	r2, r0, #1
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	f200 80b4 	bhi.w	8001bd8 <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001a70:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 8001a72:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 8001a74:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 8001a78:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2204      	movs	r2, #4
 8001a80:	495b      	ldr	r1, [pc, #364]	; (8001bf0 <httpc_tcp_recv+0x290>)
 8001a82:	4648      	mov	r0, r9
 8001a84:	f019 fddc 	bl	801b640 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 8001a88:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 8001a8c:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 8001a8e:	4298      	cmp	r0, r3
 8001a90:	f200 80a5 	bhi.w	8001bde <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 8001a98:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	4955      	ldr	r1, [pc, #340]	; (8001bf4 <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001aa0:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001aa2:	4648      	mov	r0, r9
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f019 fdcb 	bl	801b640 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001aaa:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001aac:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001aae:	d16e      	bne.n	8001b8e <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001ab0:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001ab4:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001ab6:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001ab8:	4629      	mov	r1, r5
 8001aba:	f01a f821 	bl	801bb00 <tcp_recved>
				if (req->conn_settings) {
 8001abe:	6a23      	ldr	r3, [r4, #32]
 8001ac0:	b1cb      	cbz	r3, 8001af6 <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001ac2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001ac6:	f1b8 0f00 	cmp.w	r8, #0
 8001aca:	d014      	beq.n	8001af6 <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001acc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ace:	4620      	mov	r0, r4
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	462b      	mov	r3, r5
 8001ad4:	6962      	ldr	r2, [r4, #20]
 8001ad6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001ad8:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001ada:	b160      	cbz	r0, 8001af6 <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001adc:	6a23      	ldr	r3, [r4, #32]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d037      	beq.n	8001b52 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001ae2:	689d      	ldr	r5, [r3, #8]
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	d034      	beq.n	8001b52 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001ae8:	8b63      	ldrh	r3, [r4, #26]
 8001aea:	2108      	movs	r1, #8
 8001aec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aee:	9000      	str	r0, [sp, #0]
 8001af0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001af2:	47a8      	blx	r5
 8001af4:	e02d      	b.n	8001b52 <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001af6:	4629      	mov	r1, r5
 8001af8:	6960      	ldr	r0, [r4, #20]
 8001afa:	f019 fb65 	bl	801b1c8 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001afe:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b00:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001b02:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	f43f af49 	beq.w	80019a2 <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001b10:	8929      	ldrh	r1, [r5, #8]
 8001b12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001b14:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001b18:	440b      	add	r3, r1
 8001b1a:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001b1c:	f1be 0f00 	cmp.w	lr, #0
 8001b20:	d026      	beq.n	8001b70 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001b22:	463b      	mov	r3, r7
 8001b24:	462a      	mov	r2, r5
 8001b26:	4631      	mov	r1, r6
 8001b28:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001b2a:	46f4      	mov	ip, lr
}
 8001b2c:	b009      	add	sp, #36	; 0x24
 8001b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001b32:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001b34:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d010      	beq.n	8001b5e <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001b3c:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001b3e:	6a23      	ldr	r3, [r4, #32]
 8001b40:	b13b      	cbz	r3, 8001b52 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001b42:	689d      	ldr	r5, [r3, #8]
 8001b44:	b12d      	cbz	r5, 8001b52 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001b46:	2200      	movs	r2, #0
 8001b48:	8b63      	ldrh	r3, [r4, #26]
 8001b4a:	9200      	str	r2, [sp, #0]
 8001b4c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001b50:	47a8      	blx	r5
		return httpc_free_state(req);
 8001b52:	4620      	mov	r0, r4
}
 8001b54:	b009      	add	sp, #36	; 0x24
 8001b56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001b5a:	f7ff bbbb 	b.w	80012d4 <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001b5e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001b60:	1c4b      	adds	r3, r1, #1
 8001b62:	d012      	beq.n	8001b8a <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001b64:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001b66:	42a9      	cmp	r1, r5
 8001b68:	bf14      	ite	ne
 8001b6a:	2109      	movne	r1, #9
 8001b6c:	2100      	moveq	r1, #0
 8001b6e:	e7e6      	b.n	8001b3e <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001b70:	4630      	mov	r0, r6
 8001b72:	f019 ffc5 	bl	801bb00 <tcp_recved>
			pbuf_free(p);
 8001b76:	4628      	mov	r0, r5
 8001b78:	f019 fb42 	bl	801b200 <pbuf_free>
 8001b7c:	e711      	b.n	80019a2 <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001b7e:	9a03      	ldr	r2, [sp, #12]
 8001b80:	eba2 0909 	sub.w	r9, r2, r9
 8001b84:	f109 39ff 	add.w	r9, r9, #4294967295
 8001b88:	e75b      	b.n	8001a42 <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	e7d7      	b.n	8001b3e <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2202      	movs	r2, #2
 8001b92:	4914      	ldr	r1, [pc, #80]	; (8001be4 <httpc_tcp_recv+0x284>)
 8001b94:	4648      	mov	r0, r9
 8001b96:	f019 fd53 	bl	801b640 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001b9a:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b9c:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b9e:	d087      	beq.n	8001ab0 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001ba0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001ba4:	4648      	mov	r0, r9
 8001ba6:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001ba8:	1b52      	subs	r2, r2, r5
 8001baa:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bac:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001bb0:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001bb2:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bb4:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001bb6:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001bba:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001bbe:	462a      	mov	r2, r5
 8001bc0:	f019 fbc2 	bl	801b348 <pbuf_copy_partial>
 8001bc4:	4285      	cmp	r5, r0
 8001bc6:	f47f af73 	bne.w	8001ab0 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001bca:	a804      	add	r0, sp, #16
 8001bcc:	f022 f9be 	bl	8023f4c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001bd0:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001bd2:	bfa8      	it	ge
 8001bd4:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001bd6:	e76b      	b.n	8001ab0 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001bd8:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001bdc:	e6da      	b.n	8001994 <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001bde:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001be2:	e6da      	b.n	800199a <httpc_tcp_recv+0x3a>
 8001be4:	0802a10c 	.word	0x0802a10c
 8001be8:	0802c51c 	.word	0x0802c51c
 8001bec:	0802a264 	.word	0x0802a264
 8001bf0:	0802a26c 	.word	0x0802a26c
 8001bf4:	0802a274 	.word	0x0802a274

08001bf8 <httpc_get_file_dns>:
err_t httpc_get_file_dns(const char *server_name, u16_t port, const char *uri, const httpc_connection_t *settings, altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001bfe:	2d00      	cmp	r5, #0
 8001c00:	bf18      	it	ne
 8001c02:	2a00      	cmpne	r2, #0
 8001c04:	d044      	beq.n	8001c90 <httpc_get_file_dns+0x98>
 8001c06:	4604      	mov	r4, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d041      	beq.n	8001c90 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001c10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c12:	460b      	mov	r3, r1
 8001c14:	9000      	str	r0, [sp, #0]
 8001c16:	4631      	mov	r1, r6
 8001c18:	a807      	add	r0, sp, #28
 8001c1a:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001c1e:	4622      	mov	r2, r4
 8001c20:	f7ff fbe0 	bl	80013e4 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001c24:	4605      	mov	r5, r0
 8001c26:	b998      	cbnz	r0, 8001c50 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001c28:	79b3      	ldrb	r3, [r6, #6]
 8001c2a:	b9a3      	cbnz	r3, 8001c56 <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001c2c:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001c2e:	b33e      	cbz	r6, 8001c80 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001c30:	1d31      	adds	r1, r6, #4
 8001c32:	4633      	mov	r3, r6
 8001c34:	4620      	mov	r0, r4
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <httpc_get_file_dns+0xac>)
 8001c38:	9105      	str	r1, [sp, #20]
 8001c3a:	f017 ffb9 	bl	8019bb0 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001c3e:	9905      	ldr	r1, [sp, #20]
 8001c40:	4603      	mov	r3, r0
 8001c42:	b1c0      	cbz	r0, 8001c76 <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001c44:	1d42      	adds	r2, r0, #5
 8001c46:	d00d      	beq.n	8001c64 <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001c48:	9807      	ldr	r0, [sp, #28]
		return err;
 8001c4a:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001c4c:	f7ff fb42 	bl	80012d4 <httpc_free_state>
}
 8001c50:	4628      	mov	r0, r5
 8001c52:	b008      	add	sp, #32
 8001c54:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001c56:	4631      	mov	r1, r6
 8001c58:	9807      	ldr	r0, [sp, #28]
 8001c5a:	f7ff fb1b 	bl	8001294 <httpc_get_internal_addr>
 8001c5e:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001c64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d0f2      	beq.n	8001c50 <httpc_get_file_dns+0x58>
		*connection = req;
 8001c6a:	9b07      	ldr	r3, [sp, #28]
}
 8001c6c:	4628      	mov	r0, r5
		*connection = req;
 8001c6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c70:	6013      	str	r3, [r2, #0]
}
 8001c72:	b008      	add	sp, #32
 8001c74:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff fb0c 	bl	8001294 <httpc_get_internal_addr>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	e7ef      	b.n	8001c60 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <httpc_get_file_dns+0xb0>)
 8001c82:	f240 12c5 	movw	r2, #453	; 0x1c5
 8001c86:	4909      	ldr	r1, [pc, #36]	; (8001cac <httpc_get_file_dns+0xb4>)
 8001c88:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <httpc_get_file_dns+0xb8>)
 8001c8a:	f023 fb83 	bl	8025394 <iprintf>
 8001c8e:	e7cf      	b.n	8001c30 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <httpc_get_file_dns+0xb0>)
 8001c92:	f240 228f 	movw	r2, #655	; 0x28f
 8001c96:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <httpc_get_file_dns+0xbc>)
 8001c98:	f06f 050f 	mvn.w	r5, #15
 8001c9c:	4804      	ldr	r0, [pc, #16]	; (8001cb0 <httpc_get_file_dns+0xb8>)
 8001c9e:	f023 fb79 	bl	8025394 <iprintf>
 8001ca2:	e7d5      	b.n	8001c50 <httpc_get_file_dns+0x58>
 8001ca4:	08001551 	.word	0x08001551
 8001ca8:	08029fc0 	.word	0x08029fc0
 8001cac:	08029fdc 	.word	0x08029fdc
 8001cb0:	08029fe8 	.word	0x08029fe8
 8001cb4:	0802a288 	.word	0x0802a288

08001cb8 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection1 = &conn1;	// point to static
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <http_dlclient+0x7c>)
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001cbe:	2500      	movs	r5, #0
	settings1 = &set1;		// point to static
 8001cc0:	4c1d      	ldr	r4, [pc, #116]	; (8001d38 <http_dlclient+0x80>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cc2:	b084      	sub	sp, #16
	settings1 = &set1;		// point to static
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <http_dlclient+0x84>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001cc6:	460f      	mov	r7, r1
	connection1 = &conn1;	// point to static
 8001cc8:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8001d60 <http_dlclient+0xa8>
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001ccc:	4606      	mov	r6, r0
	memset(connection1, 0, sizeof(conn1));
 8001cce:	4629      	mov	r1, r5
 8001cd0:	4618      	mov	r0, r3
	settings1 = &set1;		// point to static
 8001cd2:	6014      	str	r4, [r2, #0]
	memset(connection1, 0, sizeof(conn1));
 8001cd4:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001cd6:	f8c8 3000 	str.w	r3, [r8]
	memset(settings1, 0, sizeof(set1));
 8001cda:	6025      	str	r5, [r4, #0]
 8001cdc:	6065      	str	r5, [r4, #4]
	memset(connection1, 0, sizeof(conn1));
 8001cde:	f022 fbbb 	bl	8024458 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001ce2:	4a17      	ldr	r2, [pc, #92]	; (8001d40 <http_dlclient+0x88>)
	connection1->timeout_ticks = 1;

//	strcpy(domain_name, "xen.local");
//	strcpy(rxbuffer, "/firmware/my12.bin");

	strcpy(domain_name, host);
 8001ce4:	4639      	mov	r1, r7
	settings1->result_fn = HttpClientFileResultCallback;
 8001ce6:	4f17      	ldr	r7, [pc, #92]	; (8001d44 <http_dlclient+0x8c>)
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001ce8:	60e2      	str	r2, [r4, #12]
	connection1->timeout_ticks = 1;
 8001cea:	2201      	movs	r2, #1
	settings1->result_fn = HttpClientFileResultCallback;
 8001cec:	60a7      	str	r7, [r4, #8]
	connection1->timeout_ticks = 1;
 8001cee:	60c2      	str	r2, [r0, #12]
	strcpy(domain_name, host);
 8001cf0:	4815      	ldr	r0, [pc, #84]	; (8001d48 <http_dlclient+0x90>)
 8001cf2:	f023 fde0 	bl	80258b6 <strcpy>
	strcpy(rxbuffer, filename);
 8001cf6:	4631      	mov	r1, r6
 8001cf8:	4814      	ldr	r0, [pc, #80]	; (8001d4c <http_dlclient+0x94>)
 8001cfa:	f023 fddc 	bl	80258b6 <strcpy>

//	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);

	down_total = 0;
 8001cfe:	4914      	ldr	r1, [pc, #80]	; (8001d50 <http_dlclient+0x98>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <http_dlclient+0x9c>)
 8001d02:	4623      	mov	r3, r4
	expectedapage = 0;
 8001d04:	4814      	ldr	r0, [pc, #80]	; (8001d58 <http_dlclient+0xa0>)
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d06:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d0a:	9701      	str	r7, [sp, #4]
	down_total = 0;
 8001d0c:	600d      	str	r5, [r1, #0]
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d0e:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001d12:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001d14:	6005      	str	r5, [r0, #0]
	error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001d16:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <http_dlclient+0x94>)
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <http_dlclient+0x90>)
 8001d1a:	f7ff ff6d 	bl	8001bf8 <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001d1e:	b910      	cbnz	r0, 8001d26 <http_dlclient+0x6e>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001d20:	b004      	add	sp, #16
 8001d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001d26:	4601      	mov	r1, r0
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <http_dlclient+0xa4>)
}
 8001d2a:	b004      	add	sp, #16
 8001d2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001d30:	f023 bb30 	b.w	8025394 <iprintf>
 8001d34:	200015cc 	.word	0x200015cc
 8001d38:	20001880 	.word	0x20001880
 8001d3c:	200018a0 	.word	0x200018a0
 8001d40:	08001285 	.word	0x08001285
 8001d44:	08001625 	.word	0x08001625
 8001d48:	2000163c 	.word	0x2000163c
 8001d4c:	20001664 	.word	0x20001664
 8001d50:	2000165c 	.word	0x2000165c
 8001d54:	08001755 	.word	0x08001755
 8001d58:	20003108 	.word	0x20003108
 8001d5c:	0802a29c 	.word	0x0802a29c
 8001d60:	20001634 	.word	0x20001634

08001d64 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d68:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d6a:	4c28      	ldr	r4, [pc, #160]	; (8001e0c <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d6c:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d6e:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d70:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d72:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d74:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d76:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d78:	4a26      	ldr	r2, [pc, #152]	; (8001e14 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d7a:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d7c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001e38 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d80:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d82:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d84:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d86:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d8a:	f022 fb65 	bl	8024458 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d8e:	4a22      	ldr	r2, [pc, #136]	; (8001e18 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d90:	4f22      	ldr	r7, [pc, #136]	; (8001e1c <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d92:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d94:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d96:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d98:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d9a:	4c21      	ldr	r4, [pc, #132]	; (8001e20 <hc_open+0xbc>)
 8001d9c:	7833      	ldrb	r3, [r6, #0]
 8001d9e:	5ce2      	ldrb	r2, [r4, r3]
 8001da0:	0751      	lsls	r1, r2, #29
 8001da2:	d101      	bne.n	8001da8 <hc_open+0x44>
 8001da4:	2b2f      	cmp	r3, #47	; 0x2f
 8001da6:	d126      	bne.n	8001df6 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001da8:	4631      	mov	r1, r6
 8001daa:	481e      	ldr	r0, [pc, #120]	; (8001e24 <hc_open+0xc0>)
 8001dac:	f023 fd83 	bl	80258b6 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001db0:	782b      	ldrb	r3, [r5, #0]
 8001db2:	5ce2      	ldrb	r2, [r4, r3]
 8001db4:	0752      	lsls	r2, r2, #29
 8001db6:	d101      	bne.n	8001dbc <hc_open+0x58>
 8001db8:	2b2f      	cmp	r3, #47	; 0x2f
 8001dba:	d118      	bne.n	8001dee <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001dbc:	4629      	mov	r1, r5
 8001dbe:	481a      	ldr	r0, [pc, #104]	; (8001e28 <hc_open+0xc4>)
 8001dc0:	f023 fd79 	bl	80258b6 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
    expectedapage = 1;
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <hc_open+0xc8>)
	down_total = 0;
 8001dc6:	2400      	movs	r4, #0
 8001dc8:	4819      	ldr	r0, [pc, #100]	; (8001e30 <hc_open+0xcc>)
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dca:	f641 7192 	movw	r1, #8082	; 0x1f92
 8001dce:	f8cd 8008 	str.w	r8, [sp, #8]
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <hc_open+0xa8>)
 8001dd4:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001dd8:	6004      	str	r4, [r0, #0]
    expectedapage = 1;
 8001dda:	2401      	movs	r4, #1
 8001ddc:	4815      	ldr	r0, [pc, #84]	; (8001e34 <hc_open+0xd0>)
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <hc_open+0xc4>)
    expectedapage = 1;
 8001de0:	6004      	str	r4, [r0, #0]
     error = httpc_get_file_dns(domain_name, 8082, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <hc_open+0xc0>)
 8001de4:	f7ff ff08 	bl	8001bf8 <httpc_get_file_dns>
    			HttpClientPageResultCallback, &connection2);
}
 8001de8:	b004      	add	sp, #16
 8001dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <hc_open+0xc4>)
 8001df0:	222f      	movs	r2, #47	; 0x2f
 8001df2:	801a      	strh	r2, [r3, #0]
 8001df4:	e7e6      	b.n	8001dc4 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001df6:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001e3c <hc_open+0xd8>
 8001dfa:	4e0a      	ldr	r6, [pc, #40]	; (8001e24 <hc_open+0xc0>)
 8001dfc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001e00:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001e02:	f8dc 3000 	ldr.w	r3, [ip]
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	e7d2      	b.n	8001db0 <hc_open+0x4c>
 8001e0a:	bf00      	nop
 8001e0c:	20001890 	.word	0x20001890
 8001e10:	20001600 	.word	0x20001600
 8001e14:	200018a4 	.word	0x200018a4
 8001e18:	08001285 	.word	0x08001285
 8001e1c:	08001591 	.word	0x08001591
 8001e20:	08045bb1 	.word	0x08045bb1
 8001e24:	2000163c 	.word	0x2000163c
 8001e28:	20001664 	.word	0x20001664
 8001e2c:	08001849 	.word	0x08001849
 8001e30:	2000165c 	.word	0x2000165c
 8001e34:	20003108 	.word	0x20003108
 8001e38:	20001638 	.word	0x20001638
 8001e3c:	0802a2c4 	.word	0x0802a2c4

08001e40 <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = 0;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e44:	460c      	mov	r4, r1
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e46:	4924      	ldr	r1, [pc, #144]	; (8001ed8 <httploader+0x98>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e48:	b084      	sub	sp, #16
	dl_filecrc = 0;
 8001e4a:	4e24      	ldr	r6, [pc, #144]	; (8001edc <httploader+0x9c>)
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e4c:	f001 6101 	and.w	r1, r1, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e50:	4605      	mov	r5, r0
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e52:	9103      	str	r1, [sp, #12]
	dl_filecrc = 0;
 8001e54:	2100      	movs	r1, #0
 8001e56:	6031      	str	r1, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e58:	9903      	ldr	r1, [sp, #12]
 8001e5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e5e:	d033      	beq.n	8001ec8 <httploader+0x88>
 8001e60:	4f1f      	ldr	r7, [pc, #124]	; (8001ee0 <httploader+0xa0>)
 8001e62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e66:	f04f 0841 	mov.w	r8, #65	; 0x41
		dl_filecrc = crc1;
 8001e6a:	6032      	str	r2, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e6c:	6039      	str	r1, [r7, #0]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e6e:	4629      	mov	r1, r5
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <httploader+0xa4>)
 8001e74:	4613      	mov	r3, r2
 8001e76:	4622      	mov	r2, r4

	flash_memptr = flash_load_address;
 8001e78:	4e1b      	ldr	r6, [pc, #108]	; (8001ee8 <httploader+0xa8>)
	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e7a:	f023 fa8b 	bl	8025394 <iprintf>
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e7e:	481b      	ldr	r0, [pc, #108]	; (8001eec <httploader+0xac>)
	flash_memptr = flash_load_address;
 8001e80:	6839      	ldr	r1, [r7, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e82:	462a      	mov	r2, r5
 8001e84:	6800      	ldr	r0, [r0, #0]
 8001e86:	4643      	mov	r3, r8
	flash_memptr = flash_load_address;
 8001e88:	6031      	str	r1, [r6, #0]
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);

	http_downloading = 1;
 8001e8a:	2501      	movs	r5, #1
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e8c:	9001      	str	r0, [sp, #4]
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <httploader+0xb0>)
	flash_filelength = 0;
 8001e90:	4918      	ldr	r1, [pc, #96]	; (8001ef4 <httploader+0xb4>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e92:	6800      	ldr	r0, [r0, #0]
 8001e94:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e96:	2000      	movs	r0, #0
 8001e98:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e9a:	4917      	ldr	r1, [pc, #92]	; (8001ef8 <httploader+0xb8>)
 8001e9c:	4817      	ldr	r0, [pc, #92]	; (8001efc <httploader+0xbc>)
 8001e9e:	f023 fc63 	bl	8025768 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);
 8001ea2:	4623      	mov	r3, r4
 8001ea4:	6832      	ldr	r2, [r6, #0]
 8001ea6:	4915      	ldr	r1, [pc, #84]	; (8001efc <httploader+0xbc>)
 8001ea8:	4815      	ldr	r0, [pc, #84]	; (8001f00 <httploader+0xc0>)
 8001eaa:	f023 fa73 	bl	8025394 <iprintf>
	http_downloading = 1;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <httploader+0xc4>)
	http_dlclient(newfilename, host, flash_memptr);
 8001eb0:	6832      	ldr	r2, [r6, #0]
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	4811      	ldr	r0, [pc, #68]	; (8001efc <httploader+0xbc>)
	http_downloading = 1;
 8001eb6:	601d      	str	r5, [r3, #0]
	http_dlclient(newfilename, host, flash_memptr);
 8001eb8:	f7ff fefe 	bl	8001cb8 <http_dlclient>
	osDelay(5);
 8001ebc:	2005      	movs	r0, #5
}
 8001ebe:	b004      	add	sp, #16
 8001ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(5);
 8001ec4:	f013 bac8 	b.w	8015458 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001ec8:	4f05      	ldr	r7, [pc, #20]	; (8001ee0 <httploader+0xa0>)
 8001eca:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
		break;
 8001ece:	f04f 0849 	mov.w	r8, #73	; 0x49
		dl_filecrc = crc2;
 8001ed2:	6033      	str	r3, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001ed4:	6039      	str	r1, [r7, #0]
		break;
 8001ed6:	e7ca      	b.n	8001e6e <httploader+0x2e>
 8001ed8:	08001e41 	.word	0x08001e41
 8001edc:	2000083c 	.word	0x2000083c
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	0802a580 	.word	0x0802a580
 8001ee8:	20000848 	.word	0x20000848
 8001eec:	20002d44 	.word	0x20002d44
 8001ef0:	2000208c 	.word	0x2000208c
 8001ef4:	20000844 	.word	0x20000844
 8001ef8:	0802a5b4 	.word	0x0802a5b4
 8001efc:	200018ac 	.word	0x200018ac
 8001f00:	0802a5d4 	.word	0x0802a5d4
 8001f04:	200018a8 	.word	0x200018a8

08001f08 <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001f08:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001f0e:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001f10:	9b01      	ldr	r3, [sp, #4]
 8001f12:	2b95      	cmp	r3, #149	; 0x95
 8001f14:	dc0d      	bgt.n	8001f32 <wait_armtx+0x2a>
 8001f16:	4c0e      	ldr	r4, [pc, #56]	; (8001f50 <wait_armtx+0x48>)
 8001f18:	e007      	b.n	8001f2a <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001f1a:	9b01      	ldr	r3, [sp, #4]
 8001f1c:	4403      	add	r3, r0
 8001f1e:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001f20:	f013 fa9a 	bl	8015458 <osDelay>
	while (timeoutcnt < 150) {
 8001f24:	9b01      	ldr	r3, [sp, #4]
 8001f26:	2b95      	cmp	r3, #149	; 0x95
 8001f28:	dc03      	bgt.n	8001f32 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001f2a:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	4283      	cmp	r3, r0
 8001f30:	d1f3      	bne.n	8001f1a <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	2bf9      	cmp	r3, #249	; 0xf9
 8001f36:	dc02      	bgt.n	8001f3e <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001f38:	2000      	movs	r0, #0
}
 8001f3a:	b002      	add	sp, #8
 8001f3c:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <wait_armtx+0x4c>)
 8001f40:	f023 fac4 	bl	80254cc <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001f44:	4b02      	ldr	r3, [pc, #8]	; (8001f50 <wait_armtx+0x48>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	601a      	str	r2, [r3, #0]
		return (-1);
 8001f4e:	e7f4      	b.n	8001f3a <wait_armtx+0x32>
 8001f50:	20002084 	.word	0x20002084
 8001f54:	0802a630 	.word	0x0802a630

08001f58 <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop

08001f5c <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <HAL_UART_TxCpltCallback+0x14>)
 8001f5e:	6802      	ldr	r2, [r0, #0]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d000      	beq.n	8001f66 <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001f64:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8001f66:	4b03      	ldr	r3, [pc, #12]	; (8001f74 <HAL_UART_TxCpltCallback+0x18>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40005000 	.word	0x40005000
 8001f74:	20002084 	.word	0x20002084

08001f78 <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001f7c:	4c1b      	ldr	r4, [pc, #108]	; (8001fec <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001f7e:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001f80:	481b      	ldr	r0, [pc, #108]	; (8001ff0 <lcd_uart_init+0x78>)
 8001f82:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001f84:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001f86:	f023 fa05 	bl	8025394 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001f8c:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001f8e:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001f90:	f010 f81c 	bl	8011fcc <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001f94:	4620      	mov	r0, r4
 8001f96:	f00f ff67 	bl	8011e68 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 8001f9a:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001f9c:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001f9e:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001fa0:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001fa8:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001fb4:	f011 f804 	bl	8012fc0 <HAL_UART_Init>
 8001fb8:	b958      	cbnz	r0, 8001fd2 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8001fba:	2280      	movs	r2, #128	; 0x80
 8001fbc:	490f      	ldr	r1, [pc, #60]	; (8001ffc <lcd_uart_init+0x84>)
 8001fbe:	480b      	ldr	r0, [pc, #44]	; (8001fec <lcd_uart_init+0x74>)
 8001fc0:	f011 f9ee 	bl	80133a0 <HAL_UART_Receive_DMA>
 8001fc4:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fcc:	b933      	cbnz	r3, 8001fdc <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 8001fd2:	4631      	mov	r1, r6
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <lcd_uart_init+0x88>)
 8001fd6:	f023 f9dd 	bl	8025394 <iprintf>
 8001fda:	e7ee      	b.n	8001fba <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001fdc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001fe0:	4808      	ldr	r0, [pc, #32]	; (8002004 <lcd_uart_init+0x8c>)
}
 8001fe2:	b002      	add	sp, #8
 8001fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8001fe8:	f023 b9d4 	b.w	8025394 <iprintf>
 8001fec:	20002b0c 	.word	0x20002b0c
 8001ff0:	0802a644 	.word	0x0802a644
 8001ff4:	20001a8c 	.word	0x20001a8c
 8001ff8:	40005000 	.word	0x40005000
 8001ffc:	2000194c 	.word	0x2000194c
 8002000:	0802a660 	.word	0x0802a660
 8002004:	0802a690 	.word	0x0802a690

08002008 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 8002008:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <lcd_init+0xec>)
void lcd_init(int baud) {
 800200c:	b08d      	sub	sp, #52	; 0x34
 800200e:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002010:	4b39      	ldr	r3, [pc, #228]	; (80020f8 <lcd_init+0xf0>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8002012:	af02      	add	r7, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002014:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002016:	4e39      	ldr	r6, [pc, #228]	; (80020fc <lcd_init+0xf4>)
 8002018:	f10d 0c10 	add.w	ip, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800201c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002020:	e887 0003 	stmia.w	r7, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002024:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002026:	c407      	stmia	r4!, {r0, r1, r2}
 8002028:	f824 3b02 	strh.w	r3, [r4], #2
 800202c:	0c1b      	lsrs	r3, r3, #16
 800202e:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002030:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002034:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 8002038:	4629      	mov	r1, r5
 800203a:	4831      	ldr	r0, [pc, #196]	; (8002100 <lcd_init+0xf8>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 800203c:	f88c 3000 	strb.w	r3, [ip]
	printf("lcd_init: baud=%d\n", baud);
 8002040:	f023 f9a8 	bl	8025394 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8002044:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8002048:	d008      	beq.n	800205c <lcd_init+0x54>
 800204a:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 800204e:	d005      	beq.n	800205c <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8002050:	4629      	mov	r1, r5
 8002052:	482c      	ldr	r0, [pc, #176]	; (8002104 <lcd_init+0xfc>)
 8002054:	f023 f99e 	bl	8025394 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 8002058:	b00d      	add	sp, #52	; 0x34
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	txdmadone = 0;	// TX is NOT free
 800205c:	2300      	movs	r3, #0
 800205e:	4c2a      	ldr	r4, [pc, #168]	; (8002108 <lcd_init+0x100>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8002060:	4639      	mov	r1, r7
 8002062:	2207      	movs	r2, #7
 8002064:	4829      	ldr	r0, [pc, #164]	; (800210c <lcd_init+0x104>)
	txdmadone = 0;	// TX is NOT free
 8002066:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8002068:	f00f ff5a 	bl	8011f20 <HAL_UART_Transmit_DMA>
 800206c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8002070:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002074:	b14b      	cbz	r3, 800208a <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002076:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800207a:	4825      	ldr	r0, [pc, #148]	; (8002110 <lcd_init+0x108>)
 800207c:	f023 f98a 	bl	8025394 <iprintf>
	while (!(txdmadone)) {
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	b92b      	cbnz	r3, 8002090 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8002084:	2001      	movs	r0, #1
 8002086:	f013 f9e7 	bl	8015458 <osDelay>
	while (!(txdmadone)) {
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f9      	beq.n	8002084 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8002090:	2300      	movs	r3, #0
	osDelay(800);
 8002092:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 8002096:	6023      	str	r3, [r4, #0]
	osDelay(800);
 8002098:	f013 f9de 	bl	8015458 <osDelay>
	if (baud == 9600)
 800209c:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 80020a0:	d017      	beq.n	80020d2 <lcd_init+0xca>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 80020a2:	220e      	movs	r2, #14
 80020a4:	a908      	add	r1, sp, #32
 80020a6:	4819      	ldr	r0, [pc, #100]	; (800210c <lcd_init+0x104>)
 80020a8:	f00f ff3a 	bl	8011f20 <HAL_UART_Transmit_DMA>
 80020ac:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80020b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020b4:	b11b      	cbz	r3, 80020be <lcd_init+0xb6>
 80020b6:	e017      	b.n	80020e8 <lcd_init+0xe0>
		osDelay(1);		// wait for comms to complete
 80020b8:	2001      	movs	r0, #1
 80020ba:	f013 f9cd 	bl	8015458 <osDelay>
	while (!(txdmadone)) {
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0f9      	beq.n	80020b8 <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80020c4:	2300      	movs	r3, #0
	osDelay(120);
 80020c6:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80020c8:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80020ca:	f013 f9c5 	bl	8015458 <osDelay>
}
 80020ce:	b00d      	add	sp, #52	; 0x34
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80020d2:	220c      	movs	r2, #12
 80020d4:	a904      	add	r1, sp, #16
 80020d6:	480d      	ldr	r0, [pc, #52]	; (800210c <lcd_init+0x104>)
 80020d8:	f00f ff22 	bl	8011f20 <HAL_UART_Transmit_DMA>
 80020dc:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80020e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0ea      	beq.n	80020be <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <lcd_init+0x108>)
 80020ee:	f023 f951 	bl	8025394 <iprintf>
 80020f2:	e7e4      	b.n	80020be <lcd_init+0xb6>
 80020f4:	0802a738 	.word	0x0802a738
 80020f8:	0802a740 	.word	0x0802a740
 80020fc:	0802a750 	.word	0x0802a750
 8002100:	0802a6c0 	.word	0x0802a6c0
 8002104:	0802a6d4 	.word	0x0802a6d4
 8002108:	20002084 	.word	0x20002084
 800210c:	20002b0c 	.word	0x20002b0c
 8002110:	0802a708 	.word	0x0802a708

08002114 <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 8002114:	b530      	push	{r4, r5, lr}
 8002116:	b083      	sub	sp, #12
 8002118:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 800211a:	f7ff fef5 	bl	8001f08 <wait_armtx>
 800211e:	4605      	mov	r5, r0
 8002120:	3001      	adds	r0, #1
 8002122:	d01d      	beq.n	8002160 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	4813      	ldr	r0, [pc, #76]	; (8002174 <lcd_puts+0x60>)
 8002128:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800212a:	9b01      	ldr	r3, [sp, #4]
 800212c:	5ce3      	ldrb	r3, [r4, r3]
 800212e:	b153      	cbz	r3, 8002146 <lcd_puts+0x32>
		buffer[i] = str[i];
 8002130:	9901      	ldr	r1, [sp, #4]
 8002132:	9a01      	ldr	r2, [sp, #4]
		i++;
 8002134:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 8002136:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8002138:	3301      	adds	r3, #1
		buffer[i] = str[i];
 800213a:	5481      	strb	r1, [r0, r2]
		i++;
 800213c:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 800213e:	9b01      	ldr	r3, [sp, #4]
 8002140:	5ce3      	ldrb	r3, [r4, r3]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f4      	bne.n	8002130 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 8002146:	9901      	ldr	r1, [sp, #4]
 8002148:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 800214a:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 800214c:	4c0a      	ldr	r4, [pc, #40]	; (8002178 <lcd_puts+0x64>)
	buffer[i] = '\0';
 800214e:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8002150:	b292      	uxth	r2, r2
 8002152:	4908      	ldr	r1, [pc, #32]	; (8002174 <lcd_puts+0x60>)
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 8002156:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8002158:	f00f fee2 	bl	8011f20 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800215c:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 800215e:	b910      	cbnz	r0, 8002166 <lcd_puts+0x52>
	}
	return (stat);
}
 8002160:	4628      	mov	r0, r5
 8002162:	b003      	add	sp, #12
 8002164:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002166:	4629      	mov	r1, r5
 8002168:	4805      	ldr	r0, [pc, #20]	; (8002180 <lcd_puts+0x6c>)
 800216a:	f023 f913 	bl	8025394 <iprintf>
}
 800216e:	4628      	mov	r0, r5
 8002170:	b003      	add	sp, #12
 8002172:	bd30      	pop	{r4, r5, pc}
 8002174:	200018ec 	.word	0x200018ec
 8002178:	20002084 	.word	0x20002084
 800217c:	20002b0c 	.word	0x20002b0c
 8002180:	0802a760 	.word	0x0802a760

08002184 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8002184:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 8002186:	2300      	movs	r3, #0
int lcd_rxdma() {
 8002188:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <lcd_rxdma+0x64>)
	volatile int count = 0;
 800218c:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 800218e:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8002190:	6953      	ldr	r3, [r2, #20]
 8002192:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002196:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8002198:	9a01      	ldr	r2, [sp, #4]
 800219a:	2a80      	cmp	r2, #128	; 0x80
 800219c:	d016      	beq.n	80021cc <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800219e:	4d13      	ldr	r5, [pc, #76]	; (80021ec <lcd_rxdma+0x68>)
 80021a0:	9a01      	ldr	r2, [sp, #4]
 80021a2:	682b      	ldr	r3, [r5, #0]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00e      	beq.n	80021c6 <lcd_rxdma+0x42>
 80021a8:	4c11      	ldr	r4, [pc, #68]	; (80021f0 <lcd_rxdma+0x6c>)
 80021aa:	4812      	ldr	r0, [pc, #72]	; (80021f4 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80021ac:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 80021ae:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 80021b0:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 80021b2:	3301      	adds	r3, #1
		count++;
 80021b4:	3201      	adds	r2, #1
		return (0);
 80021b6:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80021b8:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80021ba:	9a01      	ldr	r2, [sp, #4]
		return (0);
 80021bc:	bfa8      	it	ge
 80021be:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1f3      	bne.n	80021ac <lcd_rxdma+0x28>
 80021c4:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80021c6:	9800      	ldr	r0, [sp, #0]
}
 80021c8:	b003      	add	sp, #12
 80021ca:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80021cc:	4909      	ldr	r1, [pc, #36]	; (80021f4 <lcd_rxdma+0x70>)
 80021ce:	480a      	ldr	r0, [pc, #40]	; (80021f8 <lcd_rxdma+0x74>)
 80021d0:	f011 f8e6 	bl	80133a0 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80021d4:	b910      	cbnz	r0, 80021dc <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80021d6:	2300      	movs	r3, #0
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	e7e0      	b.n	800219e <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80021dc:	4601      	mov	r1, r0
 80021de:	4807      	ldr	r0, [pc, #28]	; (80021fc <lcd_rxdma+0x78>)
 80021e0:	f023 f8d8 	bl	8025394 <iprintf>
 80021e4:	e7f7      	b.n	80021d6 <lcd_rxdma+0x52>
 80021e6:	bf00      	nop
 80021e8:	40026000 	.word	0x40026000
 80021ec:	20001a8c 	.word	0x20001a8c
 80021f0:	20001a0c 	.word	0x20001a0c
 80021f4:	2000194c 	.word	0x2000194c
 80021f8:	20002b0c 	.word	0x20002b0c
 80021fc:	0802a790 	.word	0x0802a790

08002200 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 8002200:	b500      	push	{lr}
 8002202:	b099      	sub	sp, #100	; 0x64
 8002204:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8002206:	4668      	mov	r0, sp
 8002208:	f023 fb3f 	bl	802588a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800220c:	4907      	ldr	r1, [pc, #28]	; (800222c <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 8002210:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002212:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002214:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002216:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002218:	b92b      	cbnz	r3, 8002226 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 800221a:	4668      	mov	r0, sp
 800221c:	f7ff ff7a 	bl	8002114 <lcd_puts>
	else
		return (-1);
}
 8002220:	b019      	add	sp, #100	; 0x64
 8002222:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 8002226:	f04f 30ff 	mov.w	r0, #4294967295
 800222a:	e7f9      	b.n	8002220 <writelcdcmd+0x20>
 800222c:	0802a73c 	.word	0x0802a73c
 8002230:	20001a08 	.word	0x20001a08

08002234 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8002234:	b510      	push	{r4, lr}
 8002236:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 8002238:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800223e:	a802      	add	r0, sp, #8
 8002240:	490c      	ldr	r1, [pc, #48]	; (8002274 <setlcdtext+0x40>)
	volatile int result = 0;
 8002242:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002244:	f023 fa90 	bl	8025768 <siprintf>
	strcpy(pkt, str);
 8002248:	a902      	add	r1, sp, #8
 800224a:	a81a      	add	r0, sp, #104	; 0x68
 800224c:	f023 fb1d 	bl	802588a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002250:	4909      	ldr	r1, [pc, #36]	; (8002278 <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <setlcdtext+0x48>)
	strcpy(pkt, str);
 8002254:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002256:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002258:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800225a:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800225c:	b933      	cbnz	r3, 800226c <setlcdtext+0x38>
		return (lcd_puts(pkt));
 800225e:	a81a      	add	r0, sp, #104	; 0x68
 8002260:	f7ff ff58 	bl	8002114 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8002264:	9001      	str	r0, [sp, #4]
	return (result);
 8002266:	9801      	ldr	r0, [sp, #4]
}
 8002268:	b032      	add	sp, #200	; 0xc8
 800226a:	bd10      	pop	{r4, pc}
		return (-1);
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	e7f8      	b.n	8002264 <setlcdtext+0x30>
 8002272:	bf00      	nop
 8002274:	0802a7c0 	.word	0x0802a7c0
 8002278:	0802a73c 	.word	0x0802a73c
 800227c:	20001a08 	.word	0x20001a08

08002280 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8002280:	b500      	push	{lr}
 8002282:	b0a1      	sub	sp, #132	; 0x84
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8002288:	4911      	ldr	r1, [pc, #68]	; (80022d0 <setlcdbin+0x50>)
 800228a:	4668      	mov	r0, sp
 800228c:	f023 fa6c 	bl	8025768 <siprintf>
	strcpy(pkt, str);
 8002290:	4669      	mov	r1, sp
 8002292:	a808      	add	r0, sp, #32
 8002294:	f023 faf9 	bl	802588a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002298:	490e      	ldr	r1, [pc, #56]	; (80022d4 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <setlcdbin+0x58>)
	strcpy(pkt, str);
 800229c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800229e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80022a0:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80022a2:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022a4:	b98b      	cbnz	r3, 80022ca <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 80022a6:	a808      	add	r0, sp, #32
 80022a8:	f7ff ff34 	bl	8002114 <lcd_puts>
	result = writelcdcmd(buffer);
 80022ac:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 80022ae:	9b08      	ldr	r3, [sp, #32]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d003      	beq.n	80022bc <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 80022b4:	9808      	ldr	r0, [sp, #32]
}
 80022b6:	b021      	add	sp, #132	; 0x84
 80022b8:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80022bc:	4807      	ldr	r0, [pc, #28]	; (80022dc <setlcdbin+0x5c>)
 80022be:	f023 f869 	bl	8025394 <iprintf>
	return (result);
 80022c2:	9808      	ldr	r0, [sp, #32]
}
 80022c4:	b021      	add	sp, #132	; 0x84
 80022c6:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80022ca:	f04f 30ff 	mov.w	r0, #4294967295
 80022ce:	e7ed      	b.n	80022ac <setlcdbin+0x2c>
 80022d0:	0802a7c8 	.word	0x0802a7c8
 80022d4:	0802a73c 	.word	0x0802a73c
 80022d8:	20001a08 	.word	0x20001a08
 80022dc:	0802a7d0 	.word	0x0802a7d0

080022e0 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80022e0:	b570      	push	{r4, r5, r6, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80022e2:	4b2c      	ldr	r3, [pc, #176]	; (8002394 <isnexpkt+0xb4>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80022e4:	b082      	sub	sp, #8
	if (lastidx != lcdrxoutidx) {		// something there
 80022e6:	4c2c      	ldr	r4, [pc, #176]	; (8002398 <isnexpkt+0xb8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d04f      	beq.n	8002390 <isnexpkt+0xb0>
	if (++index >= limit)
 80022f0:	1c53      	adds	r3, r2, #1
		rxtimeout = 100;
 80022f2:	4d2a      	ldr	r5, [pc, #168]	; (800239c <isnexpkt+0xbc>)
		return (0);
 80022f4:	2b80      	cmp	r3, #128	; 0x80
 80022f6:	bfa8      	it	ge
 80022f8:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80022fa:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 80022fc:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80022fe:	4c28      	ldr	r4, [pc, #160]	; (80023a0 <isnexpkt+0xc0>)
		rxtimeout = 100;
 8002300:	602b      	str	r3, [r5, #0]
		ch = lcdrxbuffer[lastidx];
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <isnexpkt+0xc4>)
 8002304:	5c9b      	ldrb	r3, [r3, r2]
		ch = rawchar & 0xff;
 8002306:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800230a:	7823      	ldrb	r3, [r4, #0]
 800230c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002310:	54c2      	strb	r2, [r0, r3]
 8002312:	3301      	adds	r3, #1
		if (ch == 0xff) {
 8002314:	f89d 2007 	ldrb.w	r2, [sp, #7]
		buffer[i++] = ch;
 8002318:	b2db      	uxtb	r3, r3
		if (ch == 0xff) {
 800231a:	2aff      	cmp	r2, #255	; 0xff
		buffer[i++] = ch;
 800231c:	7023      	strb	r3, [r4, #0]
		if (ch == 0xff) {
 800231e:	d021      	beq.n	8002364 <isnexpkt+0x84>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 8002320:	f89d 6007 	ldrb.w	r6, [sp, #7]
 8002324:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <isnexpkt+0xc8>)
 8002326:	7016      	strb	r6, [r2, #0]
			termcnt = 0;
 8002328:	2200      	movs	r2, #0
 800232a:	4e20      	ldr	r6, [pc, #128]	; (80023ac <isnexpkt+0xcc>)
 800232c:	7032      	strb	r2, [r6, #0]
		}

		if (i == size) { // overrun
 800232e:	428b      	cmp	r3, r1
 8002330:	d027      	beq.n	8002382 <isnexpkt+0xa2>
			i = 0;
			termcnt = 0;
		}
	}
	if (rxtimeout > 0)
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	b133      	cbz	r3, 8002344 <isnexpkt+0x64>
		rxtimeout--;
 8002336:	3b01      	subs	r3, #1
 8002338:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800233a:	b11b      	cbz	r3, 8002344 <isnexpkt+0x64>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 800233c:	f06f 0001 	mvn.w	r0, #1
}
 8002340:	b002      	add	sp, #8
 8002342:	bd70      	pop	{r4, r5, r6, pc}
		termcnt = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	4a19      	ldr	r2, [pc, #100]	; (80023ac <isnexpkt+0xcc>)
		for (i = 0; i < size; buffer[i++] = 0)
 8002348:	4c15      	ldr	r4, [pc, #84]	; (80023a0 <isnexpkt+0xc0>)
		termcnt = 0;
 800234a:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800234c:	7023      	strb	r3, [r4, #0]
 800234e:	b119      	cbz	r1, 8002358 <isnexpkt+0x78>
 8002350:	460a      	mov	r2, r1
 8002352:	4619      	mov	r1, r3
 8002354:	f022 f880 	bl	8024458 <memset>
		i = 0;
 8002358:	2300      	movs	r3, #0
		return (-1);
 800235a:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 800235e:	7023      	strb	r3, [r4, #0]
}
 8002360:	b002      	add	sp, #8
 8002362:	bd70      	pop	{r4, r5, r6, pc}
			termcnt++;
 8002364:	4e11      	ldr	r6, [pc, #68]	; (80023ac <isnexpkt+0xcc>)
 8002366:	7832      	ldrb	r2, [r6, #0]
 8002368:	3201      	adds	r2, #1
 800236a:	b2d2      	uxtb	r2, r2
			if (termcnt == 3) {
 800236c:	2a03      	cmp	r2, #3
			termcnt++;
 800236e:	7032      	strb	r2, [r6, #0]
			if (termcnt == 3) {
 8002370:	d1dd      	bne.n	800232e <isnexpkt+0x4e>
				printf(" # ");		// found terminator
 8002372:	480f      	ldr	r0, [pc, #60]	; (80023b0 <isnexpkt+0xd0>)
 8002374:	f023 f80e 	bl	8025394 <iprintf>
				i = 0;
 8002378:	2300      	movs	r3, #0
				index = i;
 800237a:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 800237c:	7033      	strb	r3, [r6, #0]
				i = 0;
 800237e:	7023      	strb	r3, [r4, #0]
				return (index);
 8002380:	e7de      	b.n	8002340 <isnexpkt+0x60>
			i = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8002386:	7033      	strb	r3, [r6, #0]
	if (rxtimeout > 0)
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d3      	bne.n	8002336 <isnexpkt+0x56>
 800238e:	e7d9      	b.n	8002344 <isnexpkt+0x64>
 8002390:	4d02      	ldr	r5, [pc, #8]	; (800239c <isnexpkt+0xbc>)
 8002392:	e7ce      	b.n	8002332 <isnexpkt+0x52>
 8002394:	20001a8c 	.word	0x20001a8c
 8002398:	200019f8 	.word	0x200019f8
 800239c:	20001e6c 	.word	0x20001e6c
 80023a0:	200019f0 	.word	0x200019f0
 80023a4:	20001a0c 	.word	0x20001a0c
 80023a8:	20001e68 	.word	0x20001e68
 80023ac:	20001e70 	.word	0x20001e70
 80023b0:	0802a7ec 	.word	0x0802a7ec

080023b4 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023b4:	4a1e      	ldr	r2, [pc, #120]	; (8002430 <lcd_time+0x7c>)
 80023b6:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80023ba:	481e      	ldr	r0, [pc, #120]	; (8002434 <lcd_time+0x80>)
 80023bc:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 80023c0:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023c2:	185b      	adds	r3, r3, r1
void lcd_time() {
 80023c4:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 80023c6:	4c1c      	ldr	r4, [pc, #112]	; (8002438 <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80023c8:	f142 0200 	adc.w	r2, r2, #0
 80023cc:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80023d0:	f021 fee2 	bl	8024198 <localtime>
 80023d4:	4684      	mov	ip, r0
 80023d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80023da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80023e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e2:	4623      	mov	r3, r4
 80023e4:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <lcd_time+0x88>)
 80023ea:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80023ec:	f843 4920 	str.w	r4, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80023f0:	4813      	ldr	r0, [pc, #76]	; (8002440 <lcd_time+0x8c>)
 80023f2:	f023 ffa1 	bl	8026338 <strftime>
	setlcdtext("t0.txt", buffer);
 80023f6:	4912      	ldr	r1, [pc, #72]	; (8002440 <lcd_time+0x8c>)
 80023f8:	4812      	ldr	r0, [pc, #72]	; (8002444 <lcd_time+0x90>)
 80023fa:	f7ff ff1b 	bl	8002234 <setlcdtext>

	if (gpslocked) {
 80023fe:	4b12      	ldr	r3, [pc, #72]	; (8002448 <lcd_time+0x94>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b12b      	cbz	r3, 8002410 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 8002404:	4811      	ldr	r0, [pc, #68]	; (800244c <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 8002406:	b004      	add	sp, #16
 8002408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 800240c:	f7ff bef8 	b.w	8002200 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <lcd_time+0x9c>)
 8002412:	4668      	mov	r0, sp
 8002414:	490f      	ldr	r1, [pc, #60]	; (8002454 <lcd_time+0xa0>)
 8002416:	7eda      	ldrb	r2, [r3, #27]
 8002418:	f023 f9a6 	bl	8025768 <siprintf>
		setlcdtext("t3.txt", str);
 800241c:	4669      	mov	r1, sp
 800241e:	480e      	ldr	r0, [pc, #56]	; (8002458 <lcd_time+0xa4>)
 8002420:	f7ff ff08 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <lcd_time+0xa8>)
 8002426:	f7ff feeb 	bl	8002200 <writelcdcmd>
}
 800242a:	b004      	add	sp, #16
 800242c:	bd10      	pop	{r4, pc}
 800242e:	bf00      	nop
 8002430:	20002df0 	.word	0x20002df0
 8002434:	20001a98 	.word	0x20001a98
 8002438:	20001e74 	.word	0x20001e74
 800243c:	0802a7f0 	.word	0x0802a7f0
 8002440:	200018c4 	.word	0x200018c4
 8002444:	0802a7fc 	.word	0x0802a7fc
 8002448:	200030e8 	.word	0x200030e8
 800244c:	0802a804 	.word	0x0802a804
 8002450:	20002f3c 	.word	0x20002f3c
 8002454:	0802a810 	.word	0x0802a810
 8002458:	0802a820 	.word	0x0802a820
 800245c:	0802a828 	.word	0x0802a828

08002460 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8002460:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <lcd_date+0x50>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002462:	2128      	movs	r1, #40	; 0x28
	lastday = timeinfo.tm_yday;
 8002464:	4813      	ldr	r0, [pc, #76]	; (80024b4 <lcd_date+0x54>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002466:	4a14      	ldr	r2, [pc, #80]	; (80024b8 <lcd_date+0x58>)
void lcd_date() {
 8002468:	b510      	push	{r4, lr}
	lastday = timeinfo.tm_yday;
 800246a:	69dc      	ldr	r4, [r3, #28]
void lcd_date() {
 800246c:	b0b2      	sub	sp, #200	; 0xc8
	lastday = timeinfo.tm_yday;
 800246e:	6004      	str	r4, [r0, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002470:	4812      	ldr	r0, [pc, #72]	; (80024bc <lcd_date+0x5c>)
 8002472:	f023 ff61 	bl	8026338 <strftime>
	volatile int result = 0;
 8002476:	2000      	movs	r0, #0
	sprintf(str, "%s=\"%s\"", id, string);
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <lcd_date+0x5c>)
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <lcd_date+0x60>)
 800247c:	4911      	ldr	r1, [pc, #68]	; (80024c4 <lcd_date+0x64>)
	volatile int result = 0;
 800247e:	9001      	str	r0, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002480:	a802      	add	r0, sp, #8
 8002482:	f023 f971 	bl	8025768 <siprintf>
	strcpy(pkt, str);
 8002486:	a902      	add	r1, sp, #8
 8002488:	a81a      	add	r0, sp, #104	; 0x68
 800248a:	f023 f9fe 	bl	802588a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <lcd_date+0x68>)
	if (!(lcd_txblocked))
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <lcd_date+0x6c>)
	strcpy(pkt, str);
 8002492:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002494:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002496:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002498:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 800249a:	b933      	cbnz	r3, 80024aa <lcd_date+0x4a>
		return (lcd_puts(pkt));
 800249c:	a81a      	add	r0, sp, #104	; 0x68
 800249e:	f7ff fe39 	bl	8002114 <lcd_puts>
	result = writelcdcmd(str);
 80024a2:	9001      	str	r0, [sp, #4]
	return (result);
 80024a4:	9b01      	ldr	r3, [sp, #4]
	setlcdtext("t1.txt", buffer);
}
 80024a6:	b032      	add	sp, #200	; 0xc8
 80024a8:	bd10      	pop	{r4, pc}
		return (-1);
 80024aa:	f04f 30ff 	mov.w	r0, #4294967295
 80024ae:	e7f8      	b.n	80024a2 <lcd_date+0x42>
 80024b0:	20001e74 	.word	0x20001e74
 80024b4:	200019f4 	.word	0x200019f4
 80024b8:	0802a834 	.word	0x0802a834
 80024bc:	200018c4 	.word	0x200018c4
 80024c0:	0802a844 	.word	0x0802a844
 80024c4:	0802a7c0 	.word	0x0802a7c0
 80024c8:	0802a73c 	.word	0x0802a73c
 80024cc:	20001a08 	.word	0x20001a08

080024d0 <lcd_showvars>:

// populate the page2 vars
void lcd_showvars() {
 80024d0:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 80024d2:	4c62      	ldr	r4, [pc, #392]	; (800265c <lcd_showvars+0x18c>)
void lcd_showvars() {
 80024d4:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 80024d6:	8823      	ldrh	r3, [r4, #0]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d81f      	bhi.n	800251c <lcd_showvars+0x4c>
 80024dc:	e8df f003 	tbb	[pc, r3]
 80024e0:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 80024e4:	4b5e      	ldr	r3, [pc, #376]	; (8002660 <lcd_showvars+0x190>)
 80024e6:	495f      	ldr	r1, [pc, #380]	; (8002664 <lcd_showvars+0x194>)
 80024e8:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 80024ec:	6808      	ldr	r0, [r1, #0]
 80024ee:	9204      	str	r2, [sp, #16]
 80024f0:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 80024f4:	9203      	str	r2, [sp, #12]
 80024f6:	f242 722c 	movw	r2, #10028	; 0x272c
 80024fa:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 80024fe:	2310      	movs	r3, #16
 8002500:	e9cd 2000 	strd	r2, r0, [sp]
 8002504:	9102      	str	r1, [sp, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	4957      	ldr	r1, [pc, #348]	; (8002668 <lcd_showvars+0x198>)
 800250a:	a806      	add	r0, sp, #24
 800250c:	f023 f92c 	bl	8025768 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 8002510:	a906      	add	r1, sp, #24
 8002512:	4856      	ldr	r0, [pc, #344]	; (800266c <lcd_showvars+0x19c>)
 8002514:	f7ff fe8e 	bl	8002234 <setlcdtext>
		toggle = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 800251c:	b01f      	add	sp, #124	; 0x7c
 800251e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002520:	4d53      	ldr	r5, [pc, #332]	; (8002670 <lcd_showvars+0x1a0>)
 8002522:	a806      	add	r0, sp, #24
 8002524:	4953      	ldr	r1, [pc, #332]	; (8002674 <lcd_showvars+0x1a4>)
 8002526:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002528:	f023 f91e 	bl	8025768 <siprintf>
		setlcdtext("t4.txt", str);
 800252c:	a906      	add	r1, sp, #24
 800252e:	4852      	ldr	r0, [pc, #328]	; (8002678 <lcd_showvars+0x1a8>)
 8002530:	f7ff fe80 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 8002534:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002536:	494f      	ldr	r1, [pc, #316]	; (8002674 <lcd_showvars+0x1a4>)
 8002538:	a806      	add	r0, sp, #24
 800253a:	f023 f915 	bl	8025768 <siprintf>
		setlcdtext("t5.txt", str);
 800253e:	a906      	add	r1, sp, #24
 8002540:	484e      	ldr	r0, [pc, #312]	; (800267c <lcd_showvars+0x1ac>)
 8002542:	f7ff fe77 	bl	8002234 <setlcdtext>
		toggle = 3;
 8002546:	2303      	movs	r3, #3
 8002548:	8023      	strh	r3, [r4, #0]
}
 800254a:	b01f      	add	sp, #124	; 0x7c
 800254c:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 800254e:	4d48      	ldr	r5, [pc, #288]	; (8002670 <lcd_showvars+0x1a0>)
 8002550:	a806      	add	r0, sp, #24
 8002552:	4948      	ldr	r1, [pc, #288]	; (8002674 <lcd_showvars+0x1a4>)
 8002554:	7eea      	ldrb	r2, [r5, #27]
 8002556:	f023 f907 	bl	8025768 <siprintf>
		setlcdtext("t0.txt", str);
 800255a:	a906      	add	r1, sp, #24
 800255c:	4848      	ldr	r0, [pc, #288]	; (8002680 <lcd_showvars+0x1b0>)
 800255e:	f7ff fe69 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8002562:	6a2a      	ldr	r2, [r5, #32]
 8002564:	4943      	ldr	r1, [pc, #268]	; (8002674 <lcd_showvars+0x1a4>)
 8002566:	a806      	add	r0, sp, #24
 8002568:	f023 f8fe 	bl	8025768 <siprintf>
		setlcdtext("t1.txt", str);
 800256c:	a906      	add	r1, sp, #24
 800256e:	4845      	ldr	r0, [pc, #276]	; (8002684 <lcd_showvars+0x1b4>)
 8002570:	f7ff fe60 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 8002574:	69ea      	ldr	r2, [r5, #28]
 8002576:	493f      	ldr	r1, [pc, #252]	; (8002674 <lcd_showvars+0x1a4>)
 8002578:	a806      	add	r0, sp, #24
 800257a:	f023 f8f5 	bl	8025768 <siprintf>
		setlcdtext("t2.txt", str);
 800257e:	a906      	add	r1, sp, #24
 8002580:	4841      	ldr	r0, [pc, #260]	; (8002688 <lcd_showvars+0x1b8>)
 8002582:	f7ff fe57 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 8002586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002588:	493a      	ldr	r1, [pc, #232]	; (8002674 <lcd_showvars+0x1a4>)
 800258a:	a806      	add	r0, sp, #24
 800258c:	f023 f8ec 	bl	8025768 <siprintf>
		setlcdtext("t3.txt", str);
 8002590:	a906      	add	r1, sp, #24
 8002592:	483e      	ldr	r0, [pc, #248]	; (800268c <lcd_showvars+0x1bc>)
 8002594:	f7ff fe4e 	bl	8002234 <setlcdtext>
		toggle = 2;
 8002598:	2302      	movs	r3, #2
 800259a:	8023      	strh	r3, [r4, #0]
}
 800259c:	b01f      	add	sp, #124	; 0x7c
 800259e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <lcd_showvars+0x1c0>)
 80025a2:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 80025a4:	4d32      	ldr	r5, [pc, #200]	; (8002670 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	0e11      	lsrs	r1, r2, #24
 80025aa:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80025ae:	e9cd 3100 	strd	r3, r1, [sp]
 80025b2:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <lcd_showvars+0x1c4>)
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	f023 f8d5 	bl	8025768 <siprintf>
		setlcdtext("t11.txt", str);
 80025be:	a906      	add	r1, sp, #24
 80025c0:	4835      	ldr	r0, [pc, #212]	; (8002698 <lcd_showvars+0x1c8>)
 80025c2:	f7ff fe37 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 80025c6:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 80025ca:	492a      	ldr	r1, [pc, #168]	; (8002674 <lcd_showvars+0x1a4>)
 80025cc:	a806      	add	r0, sp, #24
 80025ce:	b292      	uxth	r2, r2
 80025d0:	f023 f8ca 	bl	8025768 <siprintf>
		setlcdtext("t10.txt", str);
 80025d4:	a906      	add	r1, sp, #24
 80025d6:	4831      	ldr	r0, [pc, #196]	; (800269c <lcd_showvars+0x1cc>)
 80025d8:	f7ff fe2c 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 80025dc:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80025e0:	4924      	ldr	r1, [pc, #144]	; (8002674 <lcd_showvars+0x1a4>)
 80025e2:	a806      	add	r0, sp, #24
 80025e4:	b292      	uxth	r2, r2
 80025e6:	f023 f8bf 	bl	8025768 <siprintf>
		setlcdtext("t9.txt", str);
 80025ea:	a906      	add	r1, sp, #24
 80025ec:	482c      	ldr	r0, [pc, #176]	; (80026a0 <lcd_showvars+0x1d0>)
 80025ee:	f7ff fe21 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80025f2:	4b2c      	ldr	r3, [pc, #176]	; (80026a4 <lcd_showvars+0x1d4>)
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <lcd_showvars+0x1a4>)
 80025f6:	a806      	add	r0, sp, #24
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025fe:	f023 f8b3 	bl	8025768 <siprintf>
		setlcdtext("t8.txt", str);
 8002602:	a906      	add	r1, sp, #24
 8002604:	4828      	ldr	r0, [pc, #160]	; (80026a8 <lcd_showvars+0x1d8>)
 8002606:	f7ff fe15 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800260a:	4b28      	ldr	r3, [pc, #160]	; (80026ac <lcd_showvars+0x1dc>)
 800260c:	4919      	ldr	r1, [pc, #100]	; (8002674 <lcd_showvars+0x1a4>)
 800260e:	a806      	add	r0, sp, #24
 8002610:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002614:	2a00      	cmp	r2, #0
 8002616:	bfb8      	it	lt
 8002618:	4252      	neglt	r2, r2
 800261a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800261e:	f023 f8a3 	bl	8025768 <siprintf>
		setlcdtext("t7.txt", str);
 8002622:	a906      	add	r1, sp, #24
 8002624:	4822      	ldr	r0, [pc, #136]	; (80026b0 <lcd_showvars+0x1e0>)
 8002626:	f7ff fe05 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 800262a:	4b22      	ldr	r3, [pc, #136]	; (80026b4 <lcd_showvars+0x1e4>)
 800262c:	4911      	ldr	r1, [pc, #68]	; (8002674 <lcd_showvars+0x1a4>)
 800262e:	a806      	add	r0, sp, #24
 8002630:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002634:	f023 f898 	bl	8025768 <siprintf>
		setlcdtext("t6.txt", str);
 8002638:	a906      	add	r1, sp, #24
 800263a:	481f      	ldr	r0, [pc, #124]	; (80026b8 <lcd_showvars+0x1e8>)
 800263c:	f7ff fdfa 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 8002640:	6faa      	ldr	r2, [r5, #120]	; 0x78
 8002642:	490c      	ldr	r1, [pc, #48]	; (8002674 <lcd_showvars+0x1a4>)
 8002644:	a806      	add	r0, sp, #24
 8002646:	f023 f88f 	bl	8025768 <siprintf>
		setlcdtext("t24.txt", str);
 800264a:	a906      	add	r1, sp, #24
 800264c:	481b      	ldr	r0, [pc, #108]	; (80026bc <lcd_showvars+0x1ec>)
 800264e:	f7ff fdf1 	bl	8002234 <setlcdtext>
		toggle = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	8023      	strh	r3, [r4, #0]
}
 8002656:	b01f      	add	sp, #124	; 0x7c
 8002658:	bd30      	pop	{r4, r5, pc}
 800265a:	bf00      	nop
 800265c:	20001e98 	.word	0x20001e98
 8002660:	1ff0f000 	.word	0x1ff0f000
 8002664:	2000208c 	.word	0x2000208c
 8002668:	0802a8ac 	.word	0x0802a8ac
 800266c:	0802a8d8 	.word	0x0802a8d8
 8002670:	20002f3c 	.word	0x20002f3c
 8002674:	0802a910 	.word	0x0802a910
 8002678:	0802a89c 	.word	0x0802a89c
 800267c:	0802a8a4 	.word	0x0802a8a4
 8002680:	0802a7fc 	.word	0x0802a7fc
 8002684:	0802a844 	.word	0x0802a844
 8002688:	0802a894 	.word	0x0802a894
 800268c:	0802a820 	.word	0x0802a820
 8002690:	20002d3c 	.word	0x20002d3c
 8002694:	0802a84c 	.word	0x0802a84c
 8002698:	0802a85c 	.word	0x0802a85c
 800269c:	0802a864 	.word	0x0802a864
 80026a0:	0802a86c 	.word	0x0802a86c
 80026a4:	200006fc 	.word	0x200006fc
 80026a8:	0802a874 	.word	0x0802a874
 80026ac:	20000750 	.word	0x20000750
 80026b0:	0802a87c 	.word	0x0802a87c
 80026b4:	20003070 	.word	0x20003070
 80026b8:	0802a884 	.word	0x0802a884
 80026bc:	0802a88c 	.word	0x0802a88c

080026c0 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 80026c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 80026c4:	4931      	ldr	r1, [pc, #196]	; (800278c <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 80026c6:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 80026c8:	4831      	ldr	r0, [pc, #196]	; (8002790 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 80026ca:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 80026ce:	f7ff fdb1 	bl	8002234 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 80026d2:	492e      	ldr	r1, [pc, #184]	; (800278c <lcd_trigcharts+0xcc>)
 80026d4:	482f      	ldr	r0, [pc, #188]	; (8002794 <lcd_trigcharts+0xd4>)
 80026d6:	f7ff fdad 	bl	8002234 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 80026da:	492f      	ldr	r1, [pc, #188]	; (8002798 <lcd_trigcharts+0xd8>)
 80026dc:	482f      	ldr	r0, [pc, #188]	; (800279c <lcd_trigcharts+0xdc>)
 80026de:	f7ff fda9 	bl	8002234 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 80026e2:	492d      	ldr	r1, [pc, #180]	; (8002798 <lcd_trigcharts+0xd8>)
 80026e4:	482e      	ldr	r0, [pc, #184]	; (80027a0 <lcd_trigcharts+0xe0>)
 80026e6:	f7ff fda5 	bl	8002234 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80026ea:	4b2e      	ldr	r3, [pc, #184]	; (80027a4 <lcd_trigcharts+0xe4>)
 80026ec:	492e      	ldr	r1, [pc, #184]	; (80027a8 <lcd_trigcharts+0xe8>)
 80026ee:	4668      	mov	r0, sp
 80026f0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026f2:	f023 f839 	bl	8025768 <siprintf>
	setlcdtext("t0.txt", str);
 80026f6:	4669      	mov	r1, sp
 80026f8:	482c      	ldr	r0, [pc, #176]	; (80027ac <lcd_trigcharts+0xec>)
 80026fa:	f7ff fd9b 	bl	8002234 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <lcd_trigcharts+0xf0>)
 8002700:	4929      	ldr	r1, [pc, #164]	; (80027a8 <lcd_trigcharts+0xe8>)
 8002702:	4668      	mov	r0, sp
 8002704:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002708:	4f2a      	ldr	r7, [pc, #168]	; (80027b4 <lcd_trigcharts+0xf4>)
 800270a:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800270c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 80027d0 <lcd_trigcharts+0x110>
 8002710:	4e29      	ldr	r6, [pc, #164]	; (80027b8 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002712:	bfb8      	it	lt
 8002714:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002716:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80027d4 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800271a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800271e:	f023 f823 	bl	8025768 <siprintf>
	setlcdtext("t2.txt", str);
 8002722:	4669      	mov	r1, sp
 8002724:	4825      	ldr	r0, [pc, #148]	; (80027bc <lcd_trigcharts+0xfc>)
 8002726:	f7ff fd85 	bl	8002234 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 800272a:	4825      	ldr	r0, [pc, #148]	; (80027c0 <lcd_trigcharts+0x100>)
 800272c:	f7ff fd68 	bl	8002200 <writelcdcmd>
	buffi = trigindex;
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <lcd_trigcharts+0x104>)
 8002732:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 8002734:	e01c      	b.n	8002770 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002736:	f819 2004 	ldrb.w	r2, [r9, r4]
 800273a:	f023 f815 	bl	8025768 <siprintf>
		writelcdcmd(str);
 800273e:	4668      	mov	r0, sp
 8002740:	f7ff fd5e 	bl	8002200 <writelcdcmd>
		osDelay(15);
 8002744:	200f      	movs	r0, #15
 8002746:	f012 fe87 	bl	8015458 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 800274a:	f818 2004 	ldrb.w	r2, [r8, r4]
 800274e:	491e      	ldr	r1, [pc, #120]	; (80027c8 <lcd_trigcharts+0x108>)
 8002750:	4668      	mov	r0, sp
 8002752:	f023 f809 	bl	8025768 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002756:	3401      	adds	r4, #1
		writelcdcmd(str);
 8002758:	4668      	mov	r0, sp
 800275a:	f7ff fd51 	bl	8002200 <writelcdcmd>
		osDelay(15);
 800275e:	200f      	movs	r0, #15
 8002760:	f012 fe7a 	bl	8015458 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002764:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8002768:	bfc8      	it	gt
 800276a:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 800276c:	3d01      	subs	r5, #1
 800276e:	d007      	beq.n	8002780 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8002770:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8002772:	4631      	mov	r1, r6
 8002774:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8002776:	2b02      	cmp	r3, #2
 8002778:	d0dd      	beq.n	8002736 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800277a:	b009      	add	sp, #36	; 0x24
 800277c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002780:	4812      	ldr	r0, [pc, #72]	; (80027cc <lcd_trigcharts+0x10c>)
 8002782:	f7ff fd3d 	bl	8002200 <writelcdcmd>
}
 8002786:	b009      	add	sp, #36	; 0x24
 8002788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800278c:	0802a8e0 	.word	0x0802a8e0
 8002790:	0802a820 	.word	0x0802a820
 8002794:	0802a8ec 	.word	0x0802a8ec
 8002798:	0802a8f4 	.word	0x0802a8f4
 800279c:	0802a89c 	.word	0x0802a89c
 80027a0:	0802a844 	.word	0x0802a844
 80027a4:	20002f3c 	.word	0x20002f3c
 80027a8:	0802a910 	.word	0x0802a910
 80027ac:	0802a7fc 	.word	0x0802a7fc
 80027b0:	20000750 	.word	0x20000750
 80027b4:	20001c80 	.word	0x20001c80
 80027b8:	0802a908 	.word	0x0802a908
 80027bc:	0802a894 	.word	0x0802a894
 80027c0:	0802a8fc 	.word	0x0802a8fc
 80027c4:	20001e9c 	.word	0x20001e9c
 80027c8:	0802a914 	.word	0x0802a914
 80027cc:	0802a920 	.word	0x0802a920
 80027d0:	20001ea0 	.word	0x20001ea0
 80027d4:	20001aa0 	.word	0x20001aa0

080027d8 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
void lcd_trigplot() {
 80027d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027dc:	493a      	ldr	r1, [pc, #232]	; (80028c8 <lcd_trigplot+0xf0>)
void lcd_trigplot() {
 80027de:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027e0:	4d3a      	ldr	r5, [pc, #232]	; (80028cc <lcd_trigplot+0xf4>)
 80027e2:	680b      	ldr	r3, [r1, #0]
 80027e4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 80027e6:	4e3a      	ldr	r6, [pc, #232]	; (80028d0 <lcd_trigplot+0xf8>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 80027e8:	1ad2      	subs	r2, r2, r3

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 80027ea:	483a      	ldr	r0, [pc, #232]	; (80028d4 <lcd_trigplot+0xfc>)
	val = abs(meanwindiff) & 0xfff;
 80027ec:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = val * 32;		// scale up: n pixels per trigger
 80027f0:	0152      	lsls	r2, r2, #5
	lasttrig = statuspkt.trigcount;
 80027f2:	f8d5 c07c 	ldr.w	ip, [r5, #124]	; 0x7c
	trigvec[trigindex] = val;
 80027f6:	4c38      	ldr	r4, [pc, #224]	; (80028d8 <lcd_trigplot+0x100>)
 80027f8:	2a77      	cmp	r2, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 80027fa:	7800      	ldrb	r0, [r0, #0]
	trigvec[trigindex] = val;
 80027fc:	4f37      	ldr	r7, [pc, #220]	; (80028dc <lcd_trigplot+0x104>)
 80027fe:	bfa8      	it	ge
 8002800:	2277      	movge	r2, #119	; 0x77
	val = abs(meanwindiff) & 0xfff;
 8002802:	2b00      	cmp	r3, #0
	noisevec[trigindex] = val;
 8002804:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8002914 <lcd_trigplot+0x13c>
	val = abs(meanwindiff) & 0xfff;
 8002808:	bfb8      	it	lt
 800280a:	425b      	neglt	r3, r3
	lasttrig = statuspkt.trigcount;
 800280c:	f8c1 c000 	str.w	ip, [r1]
	trigvec[trigindex] = val;
 8002810:	6821      	ldr	r1, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 8002816:	547a      	strb	r2, [r7, r1]
	noisevec[trigindex] = val;
 8002818:	2b77      	cmp	r3, #119	; 0x77
 800281a:	bfa8      	it	ge
 800281c:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 800281e:	2802      	cmp	r0, #2
	noisevec[trigindex] = val;
 8002820:	f808 3001 	strb.w	r3, [r8, r1]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8002824:	d00c      	beq.n	8002840 <lcd_trigplot+0x68>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 8002826:	3101      	adds	r1, #1
	if (trigindex >= LCDXPIXELS)
 8002828:	f5b1 7ff0 	cmp.w	r1, #480	; 0x1e0
 800282c:	da03      	bge.n	8002836 <lcd_trigplot+0x5e>
	trigindex++;
 800282e:	6021      	str	r1, [r4, #0]
		trigindex = 0;
}
 8002830:	b008      	add	sp, #32
 8002832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	6023      	str	r3, [r4, #0]
}
 800283a:	b008      	add	sp, #32
 800283c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 8002840:	4927      	ldr	r1, [pc, #156]	; (80028e0 <lcd_trigplot+0x108>)
 8002842:	4828      	ldr	r0, [pc, #160]	; (80028e4 <lcd_trigplot+0x10c>)
 8002844:	f7ff fcf6 	bl	8002234 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 8002848:	4925      	ldr	r1, [pc, #148]	; (80028e0 <lcd_trigplot+0x108>)
 800284a:	4827      	ldr	r0, [pc, #156]	; (80028e8 <lcd_trigplot+0x110>)
 800284c:	f7ff fcf2 	bl	8002234 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 8002850:	4926      	ldr	r1, [pc, #152]	; (80028ec <lcd_trigplot+0x114>)
 8002852:	4827      	ldr	r0, [pc, #156]	; (80028f0 <lcd_trigplot+0x118>)
 8002854:	f7ff fcee 	bl	8002234 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 8002858:	4924      	ldr	r1, [pc, #144]	; (80028ec <lcd_trigplot+0x114>)
 800285a:	4826      	ldr	r0, [pc, #152]	; (80028f4 <lcd_trigplot+0x11c>)
 800285c:	f7ff fcea 	bl	8002234 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	4925      	ldr	r1, [pc, #148]	; (80028f8 <lcd_trigplot+0x120>)
 8002864:	4668      	mov	r0, sp
 8002866:	5cfa      	ldrb	r2, [r7, r3]
 8002868:	f022 ff7e 	bl	8025768 <siprintf>
		writelcdcmd(str);
 800286c:	4668      	mov	r0, sp
 800286e:	f7ff fcc7 	bl	8002200 <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 8002872:	6823      	ldr	r3, [r4, #0]
 8002874:	4921      	ldr	r1, [pc, #132]	; (80028fc <lcd_trigplot+0x124>)
 8002876:	4668      	mov	r0, sp
 8002878:	f818 2003 	ldrb.w	r2, [r8, r3]
 800287c:	f022 ff74 	bl	8025768 <siprintf>
		writelcdcmd(str);
 8002880:	4668      	mov	r0, sp
 8002882:	f7ff fcbd 	bl	8002200 <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 8002886:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8002888:	491d      	ldr	r1, [pc, #116]	; (8002900 <lcd_trigplot+0x128>)
 800288a:	4668      	mov	r0, sp
 800288c:	f022 ff6c 	bl	8025768 <siprintf>
		setlcdtext("t0.txt", str);
 8002890:	4669      	mov	r1, sp
 8002892:	481c      	ldr	r0, [pc, #112]	; (8002904 <lcd_trigplot+0x12c>)
 8002894:	f7ff fcce 	bl	8002234 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002898:	f9b6 2000 	ldrsh.w	r2, [r6]
 800289c:	4918      	ldr	r1, [pc, #96]	; (8002900 <lcd_trigplot+0x128>)
 800289e:	4668      	mov	r0, sp
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	bfb8      	it	lt
 80028a4:	4252      	neglt	r2, r2
 80028a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80028aa:	f022 ff5d 	bl	8025768 <siprintf>
		setlcdtext("t2.txt", str);
 80028ae:	4669      	mov	r1, sp
 80028b0:	4815      	ldr	r0, [pc, #84]	; (8002908 <lcd_trigplot+0x130>)
 80028b2:	f7ff fcbf 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 80028b6:	4815      	ldr	r0, [pc, #84]	; (800290c <lcd_trigplot+0x134>)
 80028b8:	f7ff fca2 	bl	8002200 <writelcdcmd>
		writelcdcmd("vis t4,1");
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <lcd_trigplot+0x138>)
 80028be:	f7ff fc9f 	bl	8002200 <writelcdcmd>
	trigindex++;
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	e7af      	b.n	8002826 <lcd_trigplot+0x4e>
 80028c6:	bf00      	nop
 80028c8:	200019fc 	.word	0x200019fc
 80028cc:	20002f3c 	.word	0x20002f3c
 80028d0:	20000750 	.word	0x20000750
 80028d4:	20001c80 	.word	0x20001c80
 80028d8:	20001e9c 	.word	0x20001e9c
 80028dc:	20001ea0 	.word	0x20001ea0
 80028e0:	0802a8e0 	.word	0x0802a8e0
 80028e4:	0802a820 	.word	0x0802a820
 80028e8:	0802a8ec 	.word	0x0802a8ec
 80028ec:	0802a8f4 	.word	0x0802a8f4
 80028f0:	0802a89c 	.word	0x0802a89c
 80028f4:	0802a844 	.word	0x0802a844
 80028f8:	0802a908 	.word	0x0802a908
 80028fc:	0802a914 	.word	0x0802a914
 8002900:	0802a910 	.word	0x0802a910
 8002904:	0802a7fc 	.word	0x0802a7fc
 8002908:	0802a894 	.word	0x0802a894
 800290c:	0802a828 	.word	0x0802a828
 8002910:	0802a930 	.word	0x0802a930
 8002914:	20001aa0 	.word	0x20001aa0

08002918 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 800291c:	4920      	ldr	r1, [pc, #128]	; (80029a0 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 800291e:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8002920:	4820      	ldr	r0, [pc, #128]	; (80029a4 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002922:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8002926:	f7ff fc85 	bl	8002234 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 800292a:	491d      	ldr	r1, [pc, #116]	; (80029a0 <lcd_presscharts+0x88>)
 800292c:	481e      	ldr	r0, [pc, #120]	; (80029a8 <lcd_presscharts+0x90>)
 800292e:	f7ff fc81 	bl	8002234 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002932:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <lcd_presscharts+0x94>)
 8002934:	4a1e      	ldr	r2, [pc, #120]	; (80029b0 <lcd_presscharts+0x98>)
 8002936:	4668      	mov	r0, sp
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	089b      	lsrs	r3, r3, #2
 800293e:	491d      	ldr	r1, [pc, #116]	; (80029b4 <lcd_presscharts+0x9c>)
 8002940:	f022 ff12 	bl	8025768 <siprintf>
	setlcdtext("t0.txt", str);
 8002944:	4669      	mov	r1, sp
 8002946:	481c      	ldr	r0, [pc, #112]	; (80029b8 <lcd_presscharts+0xa0>)
 8002948:	f7ff fc74 	bl	8002234 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 800294c:	481b      	ldr	r0, [pc, #108]	; (80029bc <lcd_presscharts+0xa4>)
 800294e:	f7ff fc57 	bl	8002200 <writelcdcmd>
	buffi = pressindex;
 8002952:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <lcd_presscharts+0xa8>)
 8002954:	4f1b      	ldr	r7, [pc, #108]	; (80029c4 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002956:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80029d0 <lcd_presscharts+0xb8>
	buffi = pressindex;
 800295a:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 800295c:	4e1a      	ldr	r6, [pc, #104]	; (80029c8 <lcd_presscharts+0xb0>)
 800295e:	e010      	b.n	8002982 <lcd_presscharts+0x6a>
 8002960:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 8002964:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002966:	f022 feff 	bl	8025768 <siprintf>
		writelcdcmd(str);
 800296a:	4668      	mov	r0, sp
 800296c:	f7ff fc48 	bl	8002200 <writelcdcmd>
		osDelay(15);
 8002970:	200f      	movs	r0, #15
 8002972:	f012 fd71 	bl	8015458 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8002976:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 800297a:	bfc8      	it	gt
 800297c:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 800297e:	3d01      	subs	r5, #1
 8002980:	d007      	beq.n	8002992 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8002982:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002984:	4631      	mov	r1, r6
 8002986:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8002988:	2b03      	cmp	r3, #3
 800298a:	d0e9      	beq.n	8002960 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800298c:	b008      	add	sp, #32
 800298e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <lcd_presscharts+0xb4>)
 8002994:	f7ff fc34 	bl	8002200 <writelcdcmd>
}
 8002998:	b008      	add	sp, #32
 800299a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800299e:	bf00      	nop
 80029a0:	0802a93c 	.word	0x0802a93c
 80029a4:	0802a820 	.word	0x0802a820
 80029a8:	0802a8ec 	.word	0x0802a8ec
 80029ac:	20003074 	.word	0x20003074
 80029b0:	20003078 	.word	0x20003078
 80029b4:	0802a948 	.word	0x0802a948
 80029b8:	0802a7fc 	.word	0x0802a7fc
 80029bc:	0802a8fc 	.word	0x0802a8fc
 80029c0:	20001c84 	.word	0x20001c84
 80029c4:	20001c80 	.word	0x20001c80
 80029c8:	0802a908 	.word	0x0802a908
 80029cc:	0802a920 	.word	0x0802a920
 80029d0:	20001c88 	.word	0x20001c88

080029d4 <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
void lcd_pressplot() {
 80029d4:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 80029d6:	4d2c      	ldr	r5, [pc, #176]	; (8002a88 <lcd_pressplot+0xb4>)
void lcd_pressplot() {
 80029d8:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 80029da:	4c2c      	ldr	r4, [pc, #176]	; (8002a8c <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 80029dc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 80029e0:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 80029e2:	6821      	ldr	r1, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 80029e4:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 80029e6:	482a      	ldr	r0, [pc, #168]	; (8002a90 <lcd_pressplot+0xbc>)
	p = pressure;
 80029e8:	9101      	str	r1, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 80029ea:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	fb06 3301 	mla	r3, r6, r1, r3
 80029f2:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 80029f4:	9b01      	ldr	r3, [sp, #4]
 80029f6:	4283      	cmp	r3, r0
 80029f8:	dc01      	bgt.n	80029fe <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <lcd_pressplot+0xc0>)
 80029fc:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 80029fe:	9a01      	ldr	r2, [sp, #4]
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <lcd_pressplot+0xc4>)
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dd00      	ble.n	8002a08 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8002a06:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8002a08:	9901      	ldr	r1, [sp, #4]
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8002a0e:	440b      	add	r3, r1
 8002a10:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8002a12:	9b01      	ldr	r3, [sp, #4]
 8002a14:	fb82 1203 	smull	r1, r2, r2, r3
 8002a18:	17db      	asrs	r3, r3, #31
 8002a1a:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8002a1e:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8002a20:	9b03      	ldr	r3, [sp, #12]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	da01      	bge.n	8002a2a <lcd_pressplot+0x56>
		val = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8002a2a:	9b03      	ldr	r3, [sp, #12]
 8002a2c:	2bef      	cmp	r3, #239	; 0xef
 8002a2e:	dd01      	ble.n	8002a34 <lcd_pressplot+0x60>
		val = 239;		// max Y
 8002a30:	23ef      	movs	r3, #239	; 0xef
 8002a32:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a34:	491b      	ldr	r1, [pc, #108]	; (8002aa4 <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8002a36:	9a03      	ldr	r2, [sp, #12]
 8002a38:	4e1b      	ldr	r6, [pc, #108]	; (8002aa8 <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a3a:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	481b      	ldr	r0, [pc, #108]	; (8002aac <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a40:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8002a42:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8002a44:	d007      	beq.n	8002a56 <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8002a46:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8002a48:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8002a4c:	bfa8      	it	ge
 8002a4e:	2300      	movge	r3, #0
 8002a50:	6033      	str	r3, [r6, #0]
}
 8002a52:	b00c      	add	sp, #48	; 0x30
 8002a54:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4915      	ldr	r1, [pc, #84]	; (8002ab0 <lcd_pressplot+0xdc>)
 8002a5a:	a804      	add	r0, sp, #16
 8002a5c:	f022 fe84 	bl	8025768 <siprintf>
		writelcdcmd(str);
 8002a60:	a804      	add	r0, sp, #16
 8002a62:	f7ff fbcd 	bl	8002200 <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	a804      	add	r0, sp, #16
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <lcd_pressplot+0xe0>)
 8002a70:	f022 fe7a 	bl	8025768 <siprintf>
		setlcdtext("t0.txt", str);
 8002a74:	a904      	add	r1, sp, #16
 8002a76:	4810      	ldr	r0, [pc, #64]	; (8002ab8 <lcd_pressplot+0xe4>)
 8002a78:	f7ff fbdc 	bl	8002234 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002a7c:	480f      	ldr	r0, [pc, #60]	; (8002abc <lcd_pressplot+0xe8>)
 8002a7e:	f7ff fbbf 	bl	8002200 <writelcdcmd>
	pressindex++;
 8002a82:	6833      	ldr	r3, [r6, #0]
 8002a84:	e7df      	b.n	8002a46 <lcd_pressplot+0x72>
 8002a86:	bf00      	nop
 8002a88:	20003074 	.word	0x20003074
 8002a8c:	20003078 	.word	0x20003078
 8002a90:	00016b47 	.word	0x00016b47
 8002a94:	00016b48 	.word	0x00016b48
 8002a98:	00019258 	.word	0x00019258
 8002a9c:	fffe94b8 	.word	0xfffe94b8
 8002aa0:	63e7063f 	.word	0x63e7063f
 8002aa4:	20001c80 	.word	0x20001c80
 8002aa8:	20001c84 	.word	0x20001c84
 8002aac:	20001c88 	.word	0x20001c88
 8002ab0:	0802a908 	.word	0x0802a908
 8002ab4:	0802a948 	.word	0x0802a948
 8002ab8:	0802a7fc 	.word	0x0802a7fc
 8002abc:	0802a828 	.word	0x0802a828

08002ac0 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8002ac0:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8002ac2:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002ac4:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8002ac6:	f012 fcc7 	bl	8015458 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <lcd_controls+0x48>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8002ad2:	b00d      	add	sp, #52	; 0x34
 8002ad4:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <lcd_controls+0x4c>)
 8002ada:	480d      	ldr	r0, [pc, #52]	; (8002b10 <lcd_controls+0x50>)
 8002adc:	f7ff fbaa 	bl	8002234 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <lcd_controls+0x54>)
 8002ae2:	480d      	ldr	r0, [pc, #52]	; (8002b18 <lcd_controls+0x58>)
 8002ae4:	f7ff fba6 	bl	8002234 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <lcd_controls+0x5c>)
 8002aea:	480d      	ldr	r0, [pc, #52]	; (8002b20 <lcd_controls+0x60>)
 8002aec:	f7ff fba2 	bl	8002234 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002af0:	4a0c      	ldr	r2, [pc, #48]	; (8002b24 <lcd_controls+0x64>)
 8002af2:	490d      	ldr	r1, [pc, #52]	; (8002b28 <lcd_controls+0x68>)
 8002af4:	4668      	mov	r0, sp
 8002af6:	f022 fe37 	bl	8025768 <siprintf>
		setlcdtext("t3.txt", str);
 8002afa:	4669      	mov	r1, sp
 8002afc:	480b      	ldr	r0, [pc, #44]	; (8002b2c <lcd_controls+0x6c>)
 8002afe:	f7ff fb99 	bl	8002234 <setlcdtext>
}
 8002b02:	b00d      	add	sp, #52	; 0x34
 8002b04:	f85d fb04 	ldr.w	pc, [sp], #4
 8002b08:	20001c80 	.word	0x20001c80
 8002b0c:	0802a954 	.word	0x0802a954
 8002b10:	0802a7fc 	.word	0x0802a7fc
 8002b14:	0802a95c 	.word	0x0802a95c
 8002b18:	0802a844 	.word	0x0802a844
 8002b1c:	0802a964 	.word	0x0802a964
 8002b20:	0802a894 	.word	0x0802a894
 8002b24:	20003150 	.word	0x20003150
 8002b28:	0802a974 	.word	0x0802a974
 8002b2c:	0802a820 	.word	0x0802a820

08002b30 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8002b30:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8002b32:	4c1b      	ldr	r4, [pc, #108]	; (8002ba0 <lcd_pagechange+0x70>)
 8002b34:	7823      	ldrb	r3, [r4, #0]
 8002b36:	4283      	cmp	r3, r0
 8002b38:	d016      	beq.n	8002b68 <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8002b3a:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8002b3c:	2805      	cmp	r0, #5
 8002b3e:	d82a      	bhi.n	8002b96 <lcd_pagechange+0x66>
 8002b40:	e8df f000 	tbb	[pc, r0]
 8002b44:	241f1a03 	.word	0x241f1a03
 8002b48:	1215      	.short	0x1215
		lcd_time();
 8002b4a:	f7ff fc33 	bl	80023b4 <lcd_time>
	lastday = timeinfo.tm_yday;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <lcd_pagechange+0x74>)
 8002b50:	4915      	ldr	r1, [pc, #84]	; (8002ba8 <lcd_pagechange+0x78>)
 8002b52:	69d8      	ldr	r0, [r3, #28]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8002b56:	6008      	str	r0, [r1, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8002b58:	2128      	movs	r1, #40	; 0x28
 8002b5a:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <lcd_pagechange+0x80>)
 8002b5c:	f023 fbec 	bl	8026338 <strftime>
	setlcdtext("t1.txt", buffer);
 8002b60:	4913      	ldr	r1, [pc, #76]	; (8002bb0 <lcd_pagechange+0x80>)
 8002b62:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <lcd_pagechange+0x84>)
 8002b64:	f7ff fb66 	bl	8002234 <setlcdtext>
	return (our_currentpage);
 8002b68:	7820      	ldrb	r0, [r4, #0]
 8002b6a:	b2c0      	uxtb	r0, r0
}
 8002b6c:	bd10      	pop	{r4, pc}
		lcd_controls();
 8002b6e:	f7ff ffa7 	bl	8002ac0 <lcd_controls>
	return (our_currentpage);
 8002b72:	7820      	ldrb	r0, [r4, #0]
 8002b74:	b2c0      	uxtb	r0, r0
}
 8002b76:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8002b78:	f7ff fcaa 	bl	80024d0 <lcd_showvars>
	return (our_currentpage);
 8002b7c:	7820      	ldrb	r0, [r4, #0]
 8002b7e:	b2c0      	uxtb	r0, r0
}
 8002b80:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8002b82:	f7ff fd9d 	bl	80026c0 <lcd_trigcharts>
	return (our_currentpage);
 8002b86:	7820      	ldrb	r0, [r4, #0]
 8002b88:	b2c0      	uxtb	r0, r0
}
 8002b8a:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8002b8c:	f7ff fec4 	bl	8002918 <lcd_presscharts>
	return (our_currentpage);
 8002b90:	7820      	ldrb	r0, [r4, #0]
 8002b92:	b2c0      	uxtb	r0, r0
}
 8002b94:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8002b96:	4808      	ldr	r0, [pc, #32]	; (8002bb8 <lcd_pagechange+0x88>)
 8002b98:	f022 fc98 	bl	80254cc <puts>
		break;
 8002b9c:	e7e4      	b.n	8002b68 <lcd_pagechange+0x38>
 8002b9e:	bf00      	nop
 8002ba0:	20001c80 	.word	0x20001c80
 8002ba4:	20001e74 	.word	0x20001e74
 8002ba8:	200019f4 	.word	0x200019f4
 8002bac:	0802a834 	.word	0x0802a834
 8002bb0:	200018c4 	.word	0x200018c4
 8002bb4:	0802a844 	.word	0x0802a844
 8002bb8:	0802a98c 	.word	0x0802a98c

08002bbc <lcd_event_process>:
int lcd_event_process(void) {
 8002bbc:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002bbe:	4c8f      	ldr	r4, [pc, #572]	; (8002dfc <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8002bc0:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fb8b 	bl	80022e0 <isnexpkt>
 8002bca:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8002bcc:	9b01      	ldr	r3, [sp, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	dd47      	ble.n	8002c62 <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8002bd2:	7821      	ldrb	r1, [r4, #0]
 8002bd4:	4b8a      	ldr	r3, [pc, #552]	; (8002e00 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002bd6:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8002bd8:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002bda:	d925      	bls.n	8002c28 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8002bdc:	2965      	cmp	r1, #101	; 0x65
 8002bde:	d067      	beq.n	8002cb0 <lcd_event_process+0xf4>
 8002be0:	2966      	cmp	r1, #102	; 0x66
 8002be2:	d046      	beq.n	8002c72 <lcd_event_process+0xb6>
 8002be4:	2924      	cmp	r1, #36	; 0x24
 8002be6:	d03f      	beq.n	8002c68 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8002be8:	4886      	ldr	r0, [pc, #536]	; (8002e04 <lcd_event_process+0x248>)
 8002bea:	f022 fbd3 	bl	8025394 <iprintf>
				i = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002bf2:	9b00      	ldr	r3, [sp, #0]
 8002bf4:	5ce3      	ldrb	r3, [r4, r3]
 8002bf6:	2bff      	cmp	r3, #255	; 0xff
 8002bf8:	d00f      	beq.n	8002c1a <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8002bfa:	4d83      	ldr	r5, [pc, #524]	; (8002e08 <lcd_event_process+0x24c>)
 8002bfc:	e009      	b.n	8002c12 <lcd_event_process+0x56>
 8002bfe:	9b00      	ldr	r3, [sp, #0]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	5ce1      	ldrb	r1, [r4, r3]
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	f022 fbc5 	bl	8025394 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002c0a:	9b00      	ldr	r3, [sp, #0]
 8002c0c:	5ce3      	ldrb	r3, [r4, r3]
 8002c0e:	2bff      	cmp	r3, #255	; 0xff
 8002c10:	d003      	beq.n	8002c1a <lcd_event_process+0x5e>
 8002c12:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8002c14:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002c16:	2b1f      	cmp	r3, #31
 8002c18:	d9f1      	bls.n	8002bfe <lcd_event_process+0x42>
				printf("\n");
 8002c1a:	200a      	movs	r0, #10
 8002c1c:	f022 fbd2 	bl	80253c4 <putchar>
				return (-1);
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c24:	b003      	add	sp, #12
 8002c26:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8002c28:	2901      	cmp	r1, #1
 8002c2a:	d0fb      	beq.n	8002c24 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8002c2c:	4877      	ldr	r0, [pc, #476]	; (8002e0c <lcd_event_process+0x250>)
 8002c2e:	f022 fbb1 	bl	8025394 <iprintf>
				switch (eventbuffer[0]) {
 8002c32:	7821      	ldrb	r1, [r4, #0]
 8002c34:	2924      	cmp	r1, #36	; 0x24
 8002c36:	d846      	bhi.n	8002cc6 <lcd_event_process+0x10a>
 8002c38:	e8df f001 	tbb	[pc, r1]
 8002c3c:	4582878c 	.word	0x4582878c
 8002c40:	45454545 	.word	0x45454545
 8002c44:	45454545 	.word	0x45454545
 8002c48:	45454545 	.word	0x45454545
 8002c4c:	457a4545 	.word	0x457a4545
 8002c50:	45454545 	.word	0x45454545
 8002c54:	45724545 	.word	0x45724545
 8002c58:	4566456c 	.word	0x4566456c
 8002c5c:	5a454560 	.word	0x5a454560
 8002c60:	54          	.byte	0x54
 8002c61:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8002c62:	9801      	ldr	r0, [sp, #4]
}
 8002c64:	b003      	add	sp, #12
 8002c66:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8002c68:	4869      	ldr	r0, [pc, #420]	; (8002e10 <lcd_event_process+0x254>)
 8002c6a:	f022 fc2f 	bl	80254cc <puts>
				return (1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	e7d8      	b.n	8002c24 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8002c72:	4968      	ldr	r1, [pc, #416]	; (8002e14 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8002c74:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002c78:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8002c7a:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8002c7c:	4867      	ldr	r0, [pc, #412]	; (8002e1c <lcd_event_process+0x260>)
 8002c7e:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8002c80:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002c82:	bf28      	it	cs
 8002c84:	2163      	movcs	r1, #99	; 0x63
 8002c86:	f7ff fafb 	bl	8002280 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8002c8a:	7860      	ldrb	r0, [r4, #1]
 8002c8c:	f7ff ff50 	bl	8002b30 <lcd_pagechange>
 8002c90:	2800      	cmp	r0, #0
 8002c92:	db04      	blt.n	8002c9e <lcd_event_process+0xe2>
 8002c94:	7860      	ldrb	r0, [r4, #1]
 8002c96:	f7ff ff4b 	bl	8002b30 <lcd_pagechange>
 8002c9a:	2805      	cmp	r0, #5
 8002c9c:	dd19      	ble.n	8002cd2 <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002c9e:	7860      	ldrb	r0, [r4, #1]
 8002ca0:	f7ff ff46 	bl	8002b30 <lcd_pagechange>
 8002ca4:	4601      	mov	r1, r0
 8002ca6:	485e      	ldr	r0, [pc, #376]	; (8002e20 <lcd_event_process+0x264>)
 8002ca8:	f022 fb74 	bl	8025394 <iprintf>
			return (0);
 8002cac:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002cae:	e7b9      	b.n	8002c24 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8002cb0:	78e3      	ldrb	r3, [r4, #3]
 8002cb2:	78a2      	ldrb	r2, [r4, #2]
 8002cb4:	7861      	ldrb	r1, [r4, #1]
 8002cb6:	485b      	ldr	r0, [pc, #364]	; (8002e24 <lcd_event_process+0x268>)
 8002cb8:	f022 fb6c 	bl	8025394 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002cbc:	7863      	ldrb	r3, [r4, #1]
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d04e      	beq.n	8002d60 <lcd_event_process+0x1a4>
			return (0);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e7ae      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8002cc6:	4858      	ldr	r0, [pc, #352]	; (8002e28 <lcd_event_process+0x26c>)
 8002cc8:	f022 fb64 	bl	8025394 <iprintf>
				return (-1);		// some kindof error
 8002ccc:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cd0:	e7a8      	b.n	8002c24 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002cd2:	7860      	ldrb	r0, [r4, #1]
 8002cd4:	f7ff ff2c 	bl	8002b30 <lcd_pagechange>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <lcd_event_process+0x270>)
			return (0);
 8002cdc:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	7013      	strb	r3, [r2, #0]
 8002ce2:	e79f      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8002ce4:	4852      	ldr	r0, [pc, #328]	; (8002e30 <lcd_event_process+0x274>)
 8002ce6:	f022 fbf1 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cee:	e799      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8002cf0:	4850      	ldr	r0, [pc, #320]	; (8002e34 <lcd_event_process+0x278>)
 8002cf2:	f022 fbeb 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002cf6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002cfa:	e793      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8002cfc:	484e      	ldr	r0, [pc, #312]	; (8002e38 <lcd_event_process+0x27c>)
 8002cfe:	f022 fbe5 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002d02:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d06:	e78d      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8002d08:	484c      	ldr	r0, [pc, #304]	; (8002e3c <lcd_event_process+0x280>)
 8002d0a:	f022 fbdf 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002d0e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d12:	e787      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8002d14:	484a      	ldr	r0, [pc, #296]	; (8002e40 <lcd_event_process+0x284>)
 8002d16:	f022 fbd9 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d1e:	e781      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8002d20:	4848      	ldr	r0, [pc, #288]	; (8002e44 <lcd_event_process+0x288>)
 8002d22:	f022 fbd3 	bl	80254cc <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002d26:	f000 f961 	bl	8002fec <getlcdpage>
				return (-1);		// some kindof error
 8002d2a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d2e:	e779      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 8002d30:	4845      	ldr	r0, [pc, #276]	; (8002e48 <lcd_event_process+0x28c>)
 8002d32:	f022 fbcb 	bl	80254cc <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8002d36:	f000 f959 	bl	8002fec <getlcdpage>
				return (-1);		// some kindof error
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d3e:	e771      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 8002d40:	4842      	ldr	r0, [pc, #264]	; (8002e4c <lcd_event_process+0x290>)
 8002d42:	f022 fbc3 	bl	80254cc <puts>
					return (0);
 8002d46:	2000      	movs	r0, #0
 8002d48:	e76c      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8002d4a:	4841      	ldr	r0, [pc, #260]	; (8002e50 <lcd_event_process+0x294>)
 8002d4c:	f022 fbbe 	bl	80254cc <puts>
					return (0);
 8002d50:	2000      	movs	r0, #0
 8002d52:	e767      	b.n	8002c24 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8002d54:	483f      	ldr	r0, [pc, #252]	; (8002e54 <lcd_event_process+0x298>)
 8002d56:	f022 fbb9 	bl	80254cc <puts>
				return (-1);		// some kindof error
 8002d5a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d5e:	e761      	b.n	8002c24 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002d60:	78a3      	ldrb	r3, [r4, #2]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d012      	beq.n	8002d8c <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d039      	beq.n	8002dde <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d026      	beq.n	8002dbc <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d1a7      	bne.n	8002cc2 <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8002d72:	78e3      	ldrb	r3, [r4, #3]
 8002d74:	4a38      	ldr	r2, [pc, #224]	; (8002e58 <lcd_event_process+0x29c>)
 8002d76:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8002d7a:	4838      	ldr	r0, [pc, #224]	; (8002e5c <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8002d84:	f022 fba2 	bl	80254cc <puts>
			return (0);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	e74b      	b.n	8002c24 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8002d8c:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <lcd_event_process+0x258>)
 8002d8e:	78e2      	ldrb	r2, [r4, #3]
 8002d90:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	2a0d      	cmp	r2, #13
 8002d96:	dc01      	bgt.n	8002d9c <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 8002d98:	220e      	movs	r2, #14
 8002d9a:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8002d9c:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8002d9e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8002da4:	2963      	cmp	r1, #99	; 0x63
 8002da6:	481d      	ldr	r0, [pc, #116]	; (8002e1c <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 8002da8:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002daa:	bf28      	it	cs
 8002dac:	2163      	movcs	r1, #99	; 0x63
 8002dae:	f7ff fa67 	bl	8002280 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002db2:	7863      	ldrb	r3, [r4, #1]
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d184      	bne.n	8002cc2 <lcd_event_process+0x106>
 8002db8:	78a3      	ldrb	r3, [r4, #2]
 8002dba:	e7d4      	b.n	8002d66 <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8002dbc:	78e3      	ldrb	r3, [r4, #3]
 8002dbe:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <lcd_event_process+0x2a4>)
 8002dc0:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002dc4:	4827      	ldr	r0, [pc, #156]	; (8002e64 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8002dc6:	fab3 f383 	clz	r3, r3
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8002dce:	f022 fb7d 	bl	80254cc <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002dd2:	7863      	ldrb	r3, [r4, #1]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	f47f af74 	bne.w	8002cc2 <lcd_event_process+0x106>
 8002dda:	78a3      	ldrb	r3, [r4, #2]
 8002ddc:	e7c7      	b.n	8002d6e <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 8002dde:	4822      	ldr	r0, [pc, #136]	; (8002e68 <lcd_event_process+0x2ac>)
 8002de0:	f022 fb74 	bl	80254cc <puts>
					osDelay(100);
 8002de4:	2064      	movs	r0, #100	; 0x64
 8002de6:	f012 fb37 	bl	8015458 <osDelay>
					rebootme();
 8002dea:	f000 fa93 	bl	8003314 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002dee:	7863      	ldrb	r3, [r4, #1]
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	f47f af66 	bne.w	8002cc2 <lcd_event_process+0x106>
 8002df6:	78a3      	ldrb	r3, [r4, #2]
 8002df8:	e7b7      	b.n	8002d6a <lcd_event_process+0x1ae>
 8002dfa:	bf00      	nop
 8002dfc:	200019cc 	.word	0x200019cc
 8002e00:	20001a90 	.word	0x20001a90
 8002e04:	0802ab50 	.word	0x0802ab50
 8002e08:	0802ab84 	.word	0x0802ab84
 8002e0c:	0802a9a0 	.word	0x0802a9a0
 8002e10:	0802aab0 	.word	0x0802aab0
 8002e14:	20000014 	.word	0x20000014
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	0802a7e8 	.word	0x0802a7e8
 8002e20:	0802ab20 	.word	0x0802ab20
 8002e24:	0802aac8 	.word	0x0802aac8
 8002e28:	0802aa98 	.word	0x0802aa98
 8002e2c:	20001a00 	.word	0x20001a00
 8002e30:	0802a9f0 	.word	0x0802a9f0
 8002e34:	0802a9d8 	.word	0x0802a9d8
 8002e38:	0802aa24 	.word	0x0802aa24
 8002e3c:	0802aa04 	.word	0x0802aa04
 8002e40:	0802aa38 	.word	0x0802aa38
 8002e44:	0802a9c4 	.word	0x0802a9c4
 8002e48:	0802aa54 	.word	0x0802aa54
 8002e4c:	0802aa80 	.word	0x0802aa80
 8002e50:	0802aa68 	.word	0x0802aa68
 8002e54:	0802a9b4 	.word	0x0802a9b4
 8002e58:	20000278 	.word	0x20000278
 8002e5c:	0802ab14 	.word	0x0802ab14
 8002e60:	2000027e 	.word	0x2000027e
 8002e64:	0802ab08 	.word	0x0802ab08
 8002e68:	0802aaf8 	.word	0x0802aaf8

08002e6c <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8002e6c:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8002e6e:	4d50      	ldr	r5, [pc, #320]	; (8002fb0 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8002e70:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d06d      	beq.n	8002f54 <processnex+0xe8>
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d066      	beq.n	8002f4a <processnex+0xde>
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d04b      	beq.n	8002f18 <processnex+0xac>
 8002e80:	4c4c      	ldr	r4, [pc, #304]	; (8002fb4 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002e82:	2600      	movs	r6, #0
 8002e84:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002e86:	6823      	ldr	r3, [r4, #0]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d04e      	beq.n	8002f2a <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d07f      	beq.n	8002f92 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8002e92:	6823      	ldr	r3, [r4, #0]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d069      	beq.n	8002f6c <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 8002e98:	f7ff f974 	bl	8002184 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002e9c:	f7ff fe8e 	bl	8002bbc <lcd_event_process>
	if (dimtimer > 50000) {
 8002ea0:	4a45      	ldr	r2, [pc, #276]	; (8002fb8 <processnex+0x14c>)
 8002ea2:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002ea6:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8002ea8:	6813      	ldr	r3, [r2, #0]
 8002eaa:	428b      	cmp	r3, r1
 8002eac:	d903      	bls.n	8002eb6 <processnex+0x4a>
		dimtimer--;
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	b022      	add	sp, #136	; 0x88
 8002eb4:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002eb6:	4841      	ldr	r0, [pc, #260]	; (8002fbc <processnex+0x150>)
		dimtimer = 60000;
 8002eb8:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ebc:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8002ebe:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ec0:	6804      	ldr	r4, [r0, #0]
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	6802      	ldr	r2, [r0, #0]
 8002ec6:	109b      	asrs	r3, r3, #2
 8002ec8:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8002ecc:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8002ed0:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	dd45      	ble.n	8002f62 <processnex+0xf6>
 8002ed6:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002ed8:	4939      	ldr	r1, [pc, #228]	; (8002fc0 <processnex+0x154>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	bf28      	it	cs
 8002ede:	2363      	movcs	r3, #99	; 0x63
 8002ee0:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8002ee2:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <processnex+0x158>)
 8002ee4:	a802      	add	r0, sp, #8
 8002ee6:	4938      	ldr	r1, [pc, #224]	; (8002fc8 <processnex+0x15c>)
 8002ee8:	f022 fc3e 	bl	8025768 <siprintf>
	strcpy(pkt, str);
 8002eec:	a902      	add	r1, sp, #8
 8002eee:	a80a      	add	r0, sp, #40	; 0x28
 8002ef0:	f022 fccb 	bl	802588a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002ef4:	4935      	ldr	r1, [pc, #212]	; (8002fcc <processnex+0x160>)
	if (!(lcd_txblocked))
 8002ef6:	4b36      	ldr	r3, [pc, #216]	; (8002fd0 <processnex+0x164>)
	strcpy(pkt, str);
 8002ef8:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002efa:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002efc:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002efe:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d152      	bne.n	8002faa <processnex+0x13e>
		return (lcd_puts(pkt));
 8002f04:	a80a      	add	r0, sp, #40	; 0x28
 8002f06:	f7ff f905 	bl	8002114 <lcd_puts>
	result = writelcdcmd(buffer);
 8002f0a:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 8002f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f0e:	3301      	adds	r3, #1
 8002f10:	d047      	beq.n	8002fa2 <processnex+0x136>
	return (result);
 8002f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8002f14:	b022      	add	sp, #136	; 0x88
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8002f18:	4c26      	ldr	r4, [pc, #152]	; (8002fb4 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f1a:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8002f1c:	482d      	ldr	r0, [pc, #180]	; (8002fd4 <processnex+0x168>)
 8002f1e:	f022 fad5 	bl	80254cc <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f22:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d1b0      	bne.n	8002e8c <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002f2a:	482b      	ldr	r0, [pc, #172]	; (8002fd8 <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002f2c:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002f2e:	f022 facd 	bl	80254cc <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8002f32:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002f36:	f7ff f81f 	bl	8001f78 <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8002f3a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002f3e:	f7ff f863 	bl	8002008 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8002f42:	2302      	movs	r3, #2
 8002f44:	6023      	str	r3, [r4, #0]
}
 8002f46:	b022      	add	sp, #136	; 0x88
 8002f48:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8002f4a:	4824      	ldr	r0, [pc, #144]	; (8002fdc <processnex+0x170>)
 8002f4c:	4c19      	ldr	r4, [pc, #100]	; (8002fb4 <processnex+0x148>)
 8002f4e:	f022 fabd 	bl	80254cc <puts>
 8002f52:	e796      	b.n	8002e82 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002f54:	4822      	ldr	r0, [pc, #136]	; (8002fe0 <processnex+0x174>)
 8002f56:	f022 fab9 	bl	80254cc <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8002f5a:	4c16      	ldr	r4, [pc, #88]	; (8002fb4 <processnex+0x148>)
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	6023      	str	r3, [r4, #0]
		break;
 8002f60:	e78f      	b.n	8002e82 <processnex+0x16>
			i = 2;	// prevent black
 8002f62:	2202      	movs	r2, #2
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <processnex+0x154>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	600a      	str	r2, [r1, #0]
 8002f6a:	e7ba      	b.n	8002ee2 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002f6c:	481d      	ldr	r0, [pc, #116]	; (8002fe4 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002f6e:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002f70:	f022 faac 	bl	80254cc <puts>
		lcd_uart_init(230400);
 8002f74:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002f78:	f7fe fffe 	bl	8001f78 <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8002f7c:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002f80:	f7ff f842 	bl	8002008 <lcd_init>
		osDelay(100);
 8002f84:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8002f86:	6026      	str	r6, [r4, #0]
}
 8002f88:	b022      	add	sp, #136	; 0x88
 8002f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8002f8e:	f012 ba63 	b.w	8015458 <osDelay>
		osDelay(500);
 8002f92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f96:	f012 fa5f 	bl	8015458 <osDelay>
		lcd_initflag = 3;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	6023      	str	r3, [r4, #0]
}
 8002f9e:	b022      	add	sp, #136	; 0x88
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8002fa2:	4811      	ldr	r0, [pc, #68]	; (8002fe8 <processnex+0x17c>)
 8002fa4:	f022 f9f6 	bl	8025394 <iprintf>
 8002fa8:	e7b3      	b.n	8002f12 <processnex+0xa6>
		return (-1);
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	e7ac      	b.n	8002f0a <processnex+0x9e>
 8002fb0:	20001a94 	.word	0x20001a94
 8002fb4:	20001a04 	.word	0x20001a04
 8002fb8:	2000000c 	.word	0x2000000c
 8002fbc:	20000014 	.word	0x20000014
 8002fc0:	200019ec 	.word	0x200019ec
 8002fc4:	0802a7e8 	.word	0x0802a7e8
 8002fc8:	0802a7c8 	.word	0x0802a7c8
 8002fcc:	0802a73c 	.word	0x0802a73c
 8002fd0:	20001a08 	.word	0x20001a08
 8002fd4:	0802ab8c 	.word	0x0802ab8c
 8002fd8:	0802abc4 	.word	0x0802abc4
 8002fdc:	0802abb0 	.word	0x0802abb0
 8002fe0:	0802ab9c 	.word	0x0802ab9c
 8002fe4:	0802abec 	.word	0x0802abec
 8002fe8:	0802a7d0 	.word	0x0802a7d0

08002fec <getlcdpage>:
int getlcdpage(void) {
 8002fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	printf("getlcdpage:\n");
 8002ff0:	4842      	ldr	r0, [pc, #264]	; (80030fc <getlcdpage+0x110>)
int getlcdpage(void) {
 8002ff2:	b09b      	sub	sp, #108	; 0x6c
	printf("getlcdpage:\n");
 8002ff4:	f022 fa6a 	bl	80254cc <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002ff8:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003118 <getlcdpage+0x12c>
 8002ffc:	2301      	movs	r3, #1
	strcpy(pkt, str);
 8002ffe:	4e40      	ldr	r6, [pc, #256]	; (8003100 <getlcdpage+0x114>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003000:	2096      	movs	r0, #150	; 0x96
	strcat(pkt, "\xff\xff\xff");
 8003002:	4f40      	ldr	r7, [pc, #256]	; (8003104 <getlcdpage+0x118>)
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003004:	f8c8 3000 	str.w	r3, [r8]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003008:	f012 fa26 	bl	8015458 <osDelay>
	lcdstatus = 0xff;
 800300c:	4d3e      	ldr	r5, [pc, #248]	; (8003108 <getlcdpage+0x11c>)
 800300e:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 8003010:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 8003014:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8003016:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003018:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 800301a:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800301e:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 8003022:	a802      	add	r0, sp, #8
 8003024:	f7ff f876 	bl	8002114 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003028:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 800302a:	9b01      	ldr	r3, [sp, #4]
 800302c:	3301      	adds	r3, #1
 800302e:	d060      	beq.n	80030f2 <getlcdpage+0x106>
	processnex();
 8003030:	f7ff ff1c 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 8003034:	782b      	ldrb	r3, [r5, #0]
 8003036:	2bff      	cmp	r3, #255	; 0xff
 8003038:	d121      	bne.n	800307e <getlcdpage+0x92>
 800303a:	4c34      	ldr	r4, [pc, #208]	; (800310c <getlcdpage+0x120>)
 800303c:	e007      	b.n	800304e <getlcdpage+0x62>
		trys++;
 800303e:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003040:	f012 fa0a 	bl	8015458 <osDelay>
		processnex();
 8003044:	f7ff ff12 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 8003048:	782b      	ldrb	r3, [r5, #0]
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d117      	bne.n	800307e <getlcdpage+0x92>
		if (trys > 1000) {
 800304e:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003050:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003056:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800305a:	d9f0      	bls.n	800303e <getlcdpage+0x52>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800305c:	482c      	ldr	r0, [pc, #176]	; (8003110 <getlcdpage+0x124>)
 800305e:	f022 f999 	bl	8025394 <iprintf>
			trys = 0;
 8003062:	2300      	movs	r3, #0
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 8003068:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 800306a:	9b01      	ldr	r3, [sp, #4]
 800306c:	2bff      	cmp	r3, #255	; 0xff
 800306e:	d00c      	beq.n	800308a <getlcdpage+0x9e>
	lcd_txblocked = 0;		// allow others sending to the LCD
 8003070:	2300      	movs	r3, #0
 8003072:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 8003076:	9801      	ldr	r0, [sp, #4]
}
 8003078:	b01b      	add	sp, #108	; 0x6c
 800307a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 800307e:	782b      	ldrb	r3, [r5, #0]
 8003080:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 8003082:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 8003084:	9b01      	ldr	r3, [sp, #4]
 8003086:	2bff      	cmp	r3, #255	; 0xff
 8003088:	d1f2      	bne.n	8003070 <getlcdpage+0x84>
	strcat(pkt, "\xff\xff\xff");
 800308a:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 800308c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800311c <getlcdpage+0x130>
 8003090:	4c1e      	ldr	r4, [pc, #120]	; (800310c <getlcdpage+0x120>)
	strcat(pkt, "\xff\xff\xff");
 8003092:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 8003096:	e896 0003 	ldmia.w	r6, {r0, r1}
 800309a:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 800309c:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 800309e:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 80030a2:	f7ff f837 	bl	8002114 <lcd_puts>
		result = intwritelcdcmd("sendme");
 80030a6:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80030a8:	9b01      	ldr	r3, [sp, #4]
 80030aa:	3301      	adds	r3, #1
 80030ac:	d10a      	bne.n	80030c4 <getlcdpage+0xd8>
 80030ae:	e01c      	b.n	80030ea <getlcdpage+0xfe>
		if (trys > 1000) {
 80030b0:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80030b2:	2001      	movs	r0, #1
		if (trys > 1000) {
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80030b8:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80030bc:	d80e      	bhi.n	80030dc <getlcdpage+0xf0>
		trys++;
 80030be:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80030c0:	f012 f9ca 	bl	8015458 <osDelay>
		processnex();
 80030c4:	f7ff fed2 	bl	8002e6c <processnex>
	while (lcdstatus == 0xff) {
 80030c8:	782b      	ldrb	r3, [r5, #0]
 80030ca:	2bff      	cmp	r3, #255	; 0xff
 80030cc:	d0f0      	beq.n	80030b0 <getlcdpage+0xc4>
	return (lcdstatus);
 80030ce:	782b      	ldrb	r3, [r5, #0]
 80030d0:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 80030d2:	9301      	str	r3, [sp, #4]
	while (result == 0xff) {	// try again
 80030d4:	9b01      	ldr	r3, [sp, #4]
 80030d6:	2bff      	cmp	r3, #255	; 0xff
 80030d8:	d0db      	beq.n	8003092 <getlcdpage+0xa6>
 80030da:	e7c9      	b.n	8003070 <getlcdpage+0x84>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <getlcdpage+0x124>)
 80030de:	f022 f959 	bl	8025394 <iprintf>
			trys = 0;
 80030e2:	2200      	movs	r2, #0
 80030e4:	23ff      	movs	r3, #255	; 0xff
 80030e6:	6022      	str	r2, [r4, #0]
			return (-1);
 80030e8:	e7f3      	b.n	80030d2 <getlcdpage+0xe6>
			printf("getlcdpage2: Cmd failed\n\r");
 80030ea:	4648      	mov	r0, r9
 80030ec:	f022 f952 	bl	8025394 <iprintf>
 80030f0:	e7e8      	b.n	80030c4 <getlcdpage+0xd8>
		printf("getlcdpage: Cmd failed\n\r");
 80030f2:	4808      	ldr	r0, [pc, #32]	; (8003114 <getlcdpage+0x128>)
 80030f4:	f022 f94e 	bl	8025394 <iprintf>
 80030f8:	e79a      	b.n	8003030 <getlcdpage+0x44>
 80030fa:	bf00      	nop
 80030fc:	0802ac48 	.word	0x0802ac48
 8003100:	0802ac54 	.word	0x0802ac54
 8003104:	0802a73c 	.word	0x0802a73c
 8003108:	20001a90 	.word	0x20001a90
 800310c:	20002080 	.word	0x20002080
 8003110:	0802ac18 	.word	0x0802ac18
 8003114:	0802ac5c 	.word	0x0802ac5c
 8003118:	20001a08 	.word	0x20001a08
 800311c:	0802ac78 	.word	0x0802ac78

08003120 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003120:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003122:	2200      	movs	r2, #0
 8003124:	2107      	movs	r1, #7
 8003126:	2026      	movs	r0, #38	; 0x26
 8003128:	f005 fc86 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800312c:	2026      	movs	r0, #38	; 0x26
 800312e:	f005 fccd 	bl	8008acc <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 8003132:	2200      	movs	r2, #0
 8003134:	2106      	movs	r1, #6
 8003136:	2047      	movs	r0, #71	; 0x47
 8003138:	f005 fc7e 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 800313c:	2047      	movs	r0, #71	; 0x47
 800313e:	f005 fcc5 	bl	8008acc <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2106      	movs	r1, #6
 8003146:	2012      	movs	r0, #18
 8003148:	f005 fc76 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800314c:	2012      	movs	r0, #18
 800314e:	f005 fcbd 	bl	8008acc <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2106      	movs	r1, #6
 8003156:	2028      	movs	r0, #40	; 0x28
 8003158:	f005 fc6e 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800315c:	2028      	movs	r0, #40	; 0x28
 800315e:	f005 fcb5 	bl	8008acc <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8003162:	202d      	movs	r0, #45	; 0x2d
 8003164:	2200      	movs	r2, #0
 8003166:	2101      	movs	r1, #1
 8003168:	f005 fc66 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800316c:	202d      	movs	r0, #45	; 0x2d
}
 800316e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003172:	f005 bcab 	b.w	8008acc <HAL_NVIC_EnableIRQ>
 8003176:	bf00      	nop

08003178 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <netif_status_callbk_fn+0x8>)
 800317a:	f022 b9a7 	b.w	80254cc <puts>
 800317e:	bf00      	nop
 8003180:	0802aca8 	.word	0x0802aca8

08003184 <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <Callback01+0x8>)
 8003186:	f022 b9a1 	b.w	80254cc <puts>
 800318a:	bf00      	nop
 800318c:	0802acc0 	.word	0x0802acc0

08003190 <_write>:
	if (file == 1) {
 8003190:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 8003192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003194:	460c      	mov	r4, r1
 8003196:	4617      	mov	r7, r2
	if (file == 1) {
 8003198:	d00e      	beq.n	80031b8 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800319a:	2a00      	cmp	r2, #0
 800319c:	dd0a      	ble.n	80031b4 <_write+0x24>
 800319e:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 80031a0:	4d0b      	ldr	r5, [pc, #44]	; (80031d0 <_write+0x40>)
 80031a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a6:	230a      	movs	r3, #10
 80031a8:	2201      	movs	r2, #1
 80031aa:	4628      	mov	r0, r5
 80031ac:	f00f fe60 	bl	8012e70 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b0:	42a6      	cmp	r6, r4
 80031b2:	d1f6      	bne.n	80031a2 <_write+0x12>
}
 80031b4:	4638      	mov	r0, r7
 80031b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	ddfb      	ble.n	80031b4 <_write+0x24>
 80031bc:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 80031be:	f814 0b01 	ldrb.w	r0, [r4], #1
 80031c2:	f001 fef9 	bl	8004fb8 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80031c6:	42ac      	cmp	r4, r5
 80031c8:	d1f9      	bne.n	80031be <_write+0x2e>
}
 80031ca:	4638      	mov	r0, r7
 80031cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20002b0c 	.word	0x20002b0c

080031d4 <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031d4:	4b10      	ldr	r3, [pc, #64]	; (8003218 <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031d6:	4811      	ldr	r0, [pc, #68]	; (800321c <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031d8:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031dc:	4b10      	ldr	r3, [pc, #64]	; (8003220 <crc_rom+0x4c>)
 80031de:	4a11      	ldr	r2, [pc, #68]	; (8003224 <crc_rom+0x50>)
 80031e0:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 80031e2:	bf2c      	ite	cs
 80031e4:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 80031e8:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031ec:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 80031ee:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 80031f2:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 80031f4:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 80031f6:	460c      	mov	r4, r1
crc_rom() {
 80031f8:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 80031fa:	4619      	mov	r1, r3
 80031fc:	4620      	mov	r0, r4
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	f7fd fcde 	bl	8000bc0 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003204:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 8003206:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003208:	4622      	mov	r2, r4
 800320a:	4807      	ldr	r0, [pc, #28]	; (8003228 <crc_rom+0x54>)
}
 800320c:	b002      	add	sp, #8
 800320e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003212:	f022 b8bf 	b.w	8025394 <iprintf>
 8003216:	bf00      	nop
 8003218:	08003121 	.word	0x08003121
 800321c:	200006c4 	.word	0x200006c4
 8003220:	080464a4 	.word	0x080464a4
 8003224:	20000000 	.word	0x20000000
 8003228:	0802accc 	.word	0x0802accc

0800322c <err_leds>:
err_leds(int why) {
 800322c:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800322e:	4e37      	ldr	r6, [pc, #220]	; (800330c <err_leds+0xe0>)
err_leds(int why) {
 8003230:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8003232:	4d37      	ldr	r5, [pc, #220]	; (8003310 <err_leds+0xe4>)
 8003234:	1e44      	subs	r4, r0, #1
		switch (why) {
 8003236:	2c07      	cmp	r4, #7
 8003238:	d80f      	bhi.n	800325a <err_leds+0x2e>
 800323a:	e8df f004 	tbb	[pc, r4]
 800323e:	5c51      	.short	0x5c51
 8003240:	25303b46 	.word	0x25303b46
 8003244:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003246:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800324a:	4630      	mov	r0, r6
 800324c:	f008 fd38 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003254:	4630      	mov	r0, r6
 8003256:	f008 fd33 	bl	800bcc0 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	9b01      	ldr	r3, [sp, #4]
 8003260:	42ab      	cmp	r3, r5
 8003262:	dae8      	bge.n	8003236 <err_leds+0xa>
 8003264:	9b01      	ldr	r3, [sp, #4]
 8003266:	3301      	adds	r3, #1
 8003268:	9301      	str	r3, [sp, #4]
 800326a:	9b01      	ldr	r3, [sp, #4]
 800326c:	42ab      	cmp	r3, r5
 800326e:	dbf9      	blt.n	8003264 <err_leds+0x38>
 8003270:	e7e1      	b.n	8003236 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003272:	4630      	mov	r0, r6
 8003274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003278:	f008 fd22 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800327c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003280:	4630      	mov	r0, r6
 8003282:	f008 fd1d 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 8003286:	e7e8      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003288:	4630      	mov	r0, r6
 800328a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800328e:	f008 fd17 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003292:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003296:	4630      	mov	r0, r6
 8003298:	f008 fd12 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 800329c:	e7dd      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800329e:	4630      	mov	r0, r6
 80032a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032a4:	f008 fd0c 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80032a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032ac:	4630      	mov	r0, r6
 80032ae:	f008 fd07 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 80032b2:	e7d2      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80032b4:	4630      	mov	r0, r6
 80032b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ba:	f008 fd01 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80032be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80032c2:	4630      	mov	r0, r6
 80032c4:	f008 fcfc 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 80032c8:	e7c7      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032ca:	4630      	mov	r0, r6
 80032cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032d0:	f008 fcf6 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80032d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80032d8:	4630      	mov	r0, r6
 80032da:	f008 fcf1 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 80032de:	e7bc      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032e0:	4630      	mov	r0, r6
 80032e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032e6:	f008 fceb 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80032ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032ee:	4630      	mov	r0, r6
 80032f0:	f008 fce6 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 80032f4:	e7b1      	b.n	800325a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80032f6:	4630      	mov	r0, r6
 80032f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032fc:	f008 fce0 	bl	800bcc0 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003300:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003304:	4630      	mov	r0, r6
 8003306:	f008 fcdb 	bl	800bcc0 <HAL_GPIO_TogglePin>
			break;
 800330a:	e7a6      	b.n	800325a <err_leds+0x2e>
 800330c:	40020c00 	.word	0x40020c00
 8003310:	003567e0 	.word	0x003567e0

08003314 <rebootme>:
void rebootme(int why) {
 8003314:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003316:	b672      	cpsid	i
		err_leds(why);
 8003318:	f7ff ff88 	bl	800322c <err_leds>

0800331c <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 800331c:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003320:	074a      	lsls	r2, r1, #29
 8003322:	d502      	bpl.n	800332a <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <netif_link_callbk_fn+0x30>)
 8003326:	f022 b835 	b.w	8025394 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 800332a:	b510      	push	{r4, lr}
 800332c:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 800332e:	4808      	ldr	r0, [pc, #32]	; (8003350 <netif_link_callbk_fn+0x34>)
 8003330:	f022 f830 	bl	8025394 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8003334:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003338:	075b      	lsls	r3, r3, #29
 800333a:	d500      	bpl.n	800333e <netif_link_callbk_fn+0x22>
}
 800333c:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 800333e:	4805      	ldr	r0, [pc, #20]	; (8003354 <netif_link_callbk_fn+0x38>)
 8003340:	f022 f8c4 	bl	80254cc <puts>
			rebootme(1);
 8003344:	2001      	movs	r0, #1
 8003346:	f7ff ffe5 	bl	8003314 <rebootme>
 800334a:	bf00      	nop
 800334c:	0802acf0 	.word	0x0802acf0
 8003350:	0802ad10 	.word	0x0802ad10
 8003354:	0802ad30 	.word	0x0802ad30

08003358 <StarLPTask>:
	char str[82] = { "empty" };
 8003358:	4bab      	ldr	r3, [pc, #684]	; (8003608 <StarLPTask+0x2b0>)
 800335a:	224c      	movs	r2, #76	; 0x4c
void StarLPTask(void const *argument) {
 800335c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8003360:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 8003364:	b0a1      	sub	sp, #132	; 0x84
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003366:	2400      	movs	r4, #0
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 8003368:	f8df b31c 	ldr.w	fp, [pc, #796]	; 8003688 <StarLPTask+0x330>
	char str[82] = { "empty" };
 800336c:	900b      	str	r0, [sp, #44]	; 0x2c
 800336e:	f10d 0032 	add.w	r0, sp, #50	; 0x32
 8003372:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 8003376:	4621      	mov	r1, r4
 8003378:	f021 f86e 	bl	8024458 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 800337c:	4ba3      	ldr	r3, [pc, #652]	; (800360c <StarLPTask+0x2b4>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800337e:	4622      	mov	r2, r4
 8003380:	2101      	movs	r1, #1
 8003382:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003384:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003386:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8003388:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 800338c:	f012 fb5c 	bl	8015a48 <xQueueGenericCreate>
 8003390:	f8cb 0000 	str.w	r0, [fp]
	if (consolerxq == NULL) {
 8003394:	2800      	cmp	r0, #0
 8003396:	f000 84da 	beq.w	8003d4e <StarLPTask+0x9f6>
	strcpy(udp_target, SERVER_DESTINATION);
 800339a:	4e9d      	ldr	r6, [pc, #628]	; (8003610 <StarLPTask+0x2b8>)
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 800339c:	f10d 0a2c 	add.w	sl, sp, #44	; 0x2c
	strcpy(udp_target, SERVER_DESTINATION);
 80033a0:	4f9c      	ldr	r7, [pc, #624]	; (8003614 <StarLPTask+0x2bc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80033a2:	f8df 82e8 	ldr.w	r8, [pc, #744]	; 800368c <StarLPTask+0x334>
	while (main_init_done == 0) { // wait from main to complete the init {
 80033a6:	4d9c      	ldr	r5, [pc, #624]	; (8003618 <StarLPTask+0x2c0>)
	strcpy(udp_target, SERVER_DESTINATION);
 80033a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80033aa:	6038      	str	r0, [r7, #0]
 80033ac:	6830      	ldr	r0, [r6, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	6079      	str	r1, [r7, #4]
 80033b2:	60ba      	str	r2, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80033b4:	2201      	movs	r2, #1
 80033b6:	4999      	ldr	r1, [pc, #612]	; (800361c <StarLPTask+0x2c4>)
	strcpy(udp_target, SERVER_DESTINATION);
 80033b8:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80033ba:	4899      	ldr	r0, [pc, #612]	; (8003620 <StarLPTask+0x2c8>)
 80033bc:	f00f ff76 	bl	80132ac <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80033c0:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 80033c4:	f8c8 4000 	str.w	r4, [r8]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 80033c8:	f7fe fe1e 	bl	8002008 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 80033cc:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80033d0:	f7fe fdd2 	bl	8001f78 <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 80033d4:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80033d8:	f7fe fe16 	bl	8002008 <lcd_init>
	osDelay(600);
 80033dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 80033e0:	f012 f83a 	bl	8015458 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 80033e4:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80033e8:	f7fe fe0e 	bl	8002008 <lcd_init>
	osDelay(600);
 80033ec:	f44f 7016 	mov.w	r0, #600	; 0x258
 80033f0:	f012 f832 	bl	8015458 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 80033f4:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80033f8:	f7fe fdbe 	bl	8001f78 <lcd_uart_init>
	osDelay(600);
 80033fc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003400:	f012 f82a 	bl	8015458 <osDelay>
	writelcdcmd("page 0");
 8003404:	4887      	ldr	r0, [pc, #540]	; (8003624 <StarLPTask+0x2cc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003406:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("page 0");
 800340a:	f7fe fef9 	bl	8002200 <writelcdcmd>
	printf("LCD page 0\n");
 800340e:	4886      	ldr	r0, [pc, #536]	; (8003628 <StarLPTask+0x2d0>)
 8003410:	f022 f85c 	bl	80254cc <puts>
	osDelay(600);
 8003414:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003418:	f012 f81e 	bl	8015458 <osDelay>
	writelcdcmd("cls BLACK");
 800341c:	4883      	ldr	r0, [pc, #524]	; (800362c <StarLPTask+0x2d4>)
 800341e:	f7fe feef 	bl	8002200 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8003422:	f242 732c 	movw	r3, #10028	; 0x272c
 8003426:	4622      	mov	r2, r4
 8003428:	4981      	ldr	r1, [pc, #516]	; (8003630 <StarLPTask+0x2d8>)
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4650      	mov	r0, sl
 800342e:	2310      	movs	r3, #16
 8003430:	f022 f99a 	bl	8025768 <siprintf>
	writelcdcmd(str);
 8003434:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 8003436:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd(str);
 800343a:	f7fe fee1 	bl	8002200 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 800343e:	f8c8 4000 	str.w	r4, [r8]
	while (main_init_done == 0) { // wait from main to complete the init {
 8003442:	682c      	ldr	r4, [r5, #0]
 8003444:	2c00      	cmp	r4, #0
 8003446:	d148      	bne.n	80034da <StarLPTask+0x182>
 8003448:	4e7a      	ldr	r6, [pc, #488]	; (8003634 <StarLPTask+0x2dc>)
 800344a:	e017      	b.n	800347c <StarLPTask+0x124>
		switch (i & 3) {
 800344c:	f1b9 0f01 	cmp.w	r9, #1
 8003450:	f000 80ab 	beq.w	80035aa <StarLPTask+0x252>
			writelcdcmd(strcat(str, ".\""));
 8003454:	4b78      	ldr	r3, [pc, #480]	; (8003638 <StarLPTask+0x2e0>)
 8003456:	4650      	mov	r0, sl
 8003458:	881a      	ldrh	r2, [r3, #0]
 800345a:	789b      	ldrb	r3, [r3, #2]
 800345c:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
 8003460:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8003464:	f7fe fecc 	bl	8002200 <writelcdcmd>
		osDelay(250);
 8003468:	20fa      	movs	r0, #250	; 0xfa
		i++;
 800346a:	3401      	adds	r4, #1
		osDelay(250);
 800346c:	f011 fff4 	bl	8015458 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8003470:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8003474:	075a      	lsls	r2, r3, #29
 8003476:	d52a      	bpl.n	80034ce <StarLPTask+0x176>
	while (main_init_done == 0) { // wait from main to complete the init {
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	bb73      	cbnz	r3, 80034da <StarLPTask+0x182>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800347c:	f8df e210 	ldr.w	lr, [pc, #528]	; 8003690 <StarLPTask+0x338>
 8003480:	46d4      	mov	ip, sl
		switch (i & 3) {
 8003482:	f004 0903 	and.w	r9, r4, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8003486:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800348a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800348e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003492:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003496:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
		switch (i & 3) {
 800349a:	f1b9 0f02 	cmp.w	r9, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 800349e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80034a2:	f82c 3b02 	strh.w	r3, [ip], #2
 80034a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80034aa:	f88c 3000 	strb.w	r3, [ip]
		switch (i & 3) {
 80034ae:	f000 8084 	beq.w	80035ba <StarLPTask+0x262>
 80034b2:	f1b9 0f03 	cmp.w	r9, #3
 80034b6:	d1c9      	bne.n	800344c <StarLPTask+0xf4>
			writelcdcmd(strcat(str, "....\""));
 80034b8:	4b60      	ldr	r3, [pc, #384]	; (800363c <StarLPTask+0x2e4>)
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	889b      	ldrh	r3, [r3, #4]
 80034be:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80034c2:	4650      	mov	r0, sl
 80034c4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
 80034c8:	f7fe fe9a 	bl	8002200 <writelcdcmd>
			break;
 80034cc:	e7cc      	b.n	8003468 <StarLPTask+0x110>
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 80034ce:	485c      	ldr	r0, [pc, #368]	; (8003640 <StarLPTask+0x2e8>)
 80034d0:	f7fe fe96 	bl	8002200 <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0d0      	beq.n	800347c <StarLPTask+0x124>
	lcduart_error = HAL_UART_ERROR_NONE;
 80034da:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 80034dc:	4859      	ldr	r0, [pc, #356]	; (8003644 <StarLPTask+0x2ec>)
 80034de:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8003694 <StarLPTask+0x33c>
	lcduart_error = HAL_UART_ERROR_NONE;
 80034e2:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("ref 0");		// refresh screen
 80034e6:	f7fe fe8b 	bl	8002200 <writelcdcmd>
	writelcdcmd("page 0");
 80034ea:	484e      	ldr	r0, [pc, #312]	; (8003624 <StarLPTask+0x2cc>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80034ec:	f8c8 4000 	str.w	r4, [r8]
	int last3min = 0;
 80034f0:	46a0      	mov	r8, r4
 80034f2:	9409      	str	r4, [sp, #36]	; 0x24
	writelcdcmd("page 0");
 80034f4:	f7fe fe84 	bl	8002200 <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80034f8:	4b44      	ldr	r3, [pc, #272]	; (800360c <StarLPTask+0x2b4>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80034fa:	4853      	ldr	r0, [pc, #332]	; (8003648 <StarLPTask+0x2f0>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80034fc:	f8b3 405c 	ldrh.w	r4, [r3, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8003500:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003698 <StarLPTask+0x340>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8003504:	f893 5070 	ldrb.w	r5, [r3, #112]	; 0x70
 8003508:	b2a4      	uxth	r4, r4
 800350a:	f893 6071 	ldrb.w	r6, [r3, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800350e:	f8d0 2420 	ldr.w	r2, [r0, #1056]	; 0x420
 8003512:	f8d0 3424 	ldr.w	r3, [r0, #1060]	; 0x424
 8003516:	9401      	str	r4, [sp, #4]
 8003518:	494c      	ldr	r1, [pc, #304]	; (800364c <StarLPTask+0x2f4>)
 800351a:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800351e:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8003522:	f8d0 0428 	ldr.w	r0, [r0, #1064]	; 0x428
	gainchanged = 0;
 8003526:	4647      	mov	r7, r8
				agc = (agc) ? 0 : 1;
 8003528:	4d49      	ldr	r5, [pc, #292]	; (8003650 <StarLPTask+0x2f8>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800352a:	9000      	str	r0, [sp, #0]
 800352c:	4849      	ldr	r0, [pc, #292]	; (8003654 <StarLPTask+0x2fc>)
 800352e:	f022 f91b 	bl	8025768 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8003532:	4849      	ldr	r0, [pc, #292]	; (8003658 <StarLPTask+0x300>)
 8003534:	f00c f828 	bl	800f588 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003538:	4b48      	ldr	r3, [pc, #288]	; (800365c <StarLPTask+0x304>)
 800353a:	2201      	movs	r2, #1
	uint16_t onesectimer = 0;
 800353c:	e9cd 8807 	strd	r8, r8, [sp, #28]
	lptask_init_done = 1;		// this lp task has done its initialisation
 8003540:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8003542:	4847      	ldr	r0, [pc, #284]	; (8003660 <StarLPTask+0x308>)
 8003544:	f009 fa26 	bl	800c994 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 8003548:	200a      	movs	r0, #10
 800354a:	f011 ff85 	bl	8015458 <osDelay>
		if (http_downloading) {
 800354e:	f8d9 3000 	ldr.w	r3, [r9]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f040 8315 	bne.w	8003b82 <StarLPTask+0x82a>
		globaladcnoise = abs(meanwindiff);
 8003558:	4b42      	ldr	r3, [pc, #264]	; (8003664 <StarLPTask+0x30c>)
		tenmstimer++;
 800355a:	3701      	adds	r7, #1
		globaladcnoise = abs(meanwindiff);
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <StarLPTask+0x310>)
 800355e:	f9b3 3000 	ldrsh.w	r3, [r3]
		tenmstimer++;
 8003562:	b2bf      	uxth	r7, r7
				printf("AGC is ");
 8003564:	4e41      	ldr	r6, [pc, #260]	; (800366c <StarLPTask+0x314>)
		globaladcnoise = abs(meanwindiff);
 8003566:	2b00      	cmp	r3, #0
					printf("OFF\n");
 8003568:	f8df 8130 	ldr.w	r8, [pc, #304]	; 800369c <StarLPTask+0x344>
		globaladcnoise = abs(meanwindiff);
 800356c:	bfb8      	it	lt
 800356e:	425b      	neglt	r3, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	6013      	str	r3, [r2, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8003574:	09db      	lsrs	r3, r3, #7
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <StarLPTask+0x318>)
 8003578:	3304      	adds	r3, #4
 800357a:	8013      	strh	r3, [r2, #0]
		while (xQueueReceive(consolerxq, &inch, 0)) {
 800357c:	2200      	movs	r2, #0
 800357e:	f10d 012b 	add.w	r1, sp, #43	; 0x2b
 8003582:	f8db 0000 	ldr.w	r0, [fp]
 8003586:	f012 fc63 	bl	8015e50 <xQueueReceive>
 800358a:	2800      	cmp	r0, #0
 800358c:	f000 8088 	beq.w	80036a0 <StarLPTask+0x348>
			if (inch == 0x03) {		// control C
 8003590:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8003594:	2803      	cmp	r0, #3
 8003596:	d024      	beq.n	80035e2 <StarLPTask+0x28a>
			if ((isdigit(inch)) && (agc == 0)) {
 8003598:	4b36      	ldr	r3, [pc, #216]	; (8003674 <StarLPTask+0x31c>)
 800359a:	5cc3      	ldrb	r3, [r0, r3]
 800359c:	075b      	lsls	r3, r3, #29
 800359e:	d501      	bpl.n	80035a4 <StarLPTask+0x24c>
 80035a0:	882b      	ldrh	r3, [r5, #0]
 80035a2:	b1ab      	cbz	r3, 80035d0 <StarLPTask+0x278>
				__io_putchar(inch); // putchar(inch);	// echo console rx to tx
 80035a4:	f001 fd08 	bl	8004fb8 <__io_putchar>
 80035a8:	e7e8      	b.n	800357c <StarLPTask+0x224>
			writelcdcmd(strcat(str, "..\""));
 80035aa:	4b33      	ldr	r3, [pc, #204]	; (8003678 <StarLPTask+0x320>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80035b2:	4650      	mov	r0, sl
 80035b4:	f7fe fe24 	bl	8002200 <writelcdcmd>
			break;
 80035b8:	e756      	b.n	8003468 <StarLPTask+0x110>
			writelcdcmd(strcat(str, "...\""));
 80035ba:	4b30      	ldr	r3, [pc, #192]	; (800367c <StarLPTask+0x324>)
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	791b      	ldrb	r3, [r3, #4]
 80035c0:	f8cd 005a 	str.w	r0, [sp, #90]	; 0x5a
 80035c4:	4650      	mov	r0, sl
 80035c6:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
 80035ca:	f7fe fe19 	bl	8002200 <writelcdcmd>
			break;
 80035ce:	e74b      	b.n	8003468 <StarLPTask+0x110>
				setpgagain(inch - '0');
 80035d0:	3830      	subs	r0, #48	; 0x30
 80035d2:	f002 f96d 	bl	80058b0 <setpgagain>
				printf("Manually setting PGA gain to %c\n", inch);
 80035d6:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
 80035da:	4829      	ldr	r0, [pc, #164]	; (8003680 <StarLPTask+0x328>)
 80035dc:	f021 feda 	bl	8025394 <iprintf>
 80035e0:	e7cc      	b.n	800357c <StarLPTask+0x224>
				agc = (agc) ? 0 : 1;
 80035e2:	882b      	ldrh	r3, [r5, #0]
				printf("AGC is ");
 80035e4:	4630      	mov	r0, r6
				agc = (agc) ? 0 : 1;
 80035e6:	fab3 f383 	clz	r3, r3
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	802b      	strh	r3, [r5, #0]
				printf("AGC is ");
 80035ee:	f021 fed1 	bl	8025394 <iprintf>
				if (agc)
 80035f2:	882b      	ldrh	r3, [r5, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 813b 	beq.w	8003870 <StarLPTask+0x518>
					printf("ON\n");
 80035fa:	4822      	ldr	r0, [pc, #136]	; (8003684 <StarLPTask+0x32c>)
 80035fc:	f021 ff66 	bl	80254cc <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003600:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8003604:	e7c8      	b.n	8003598 <StarLPTask+0x240>
 8003606:	bf00      	nop
 8003608:	080293f0 	.word	0x080293f0
 800360c:	20002f3c 	.word	0x20002f3c
 8003610:	0802a2c4 	.word	0x0802a2c4
 8003614:	20003150 	.word	0x20003150
 8003618:	20002d2c 	.word	0x20002d2c
 800361c:	20002090 	.word	0x20002090
 8003620:	20002980 	.word	0x20002980
 8003624:	0802ad98 	.word	0x0802ad98
 8003628:	0802ad94 	.word	0x0802ad94
 800362c:	0802ada0 	.word	0x0802ada0
 8003630:	0802adac 	.word	0x0802adac
 8003634:	200031bc 	.word	0x200031bc
 8003638:	0802ae68 	.word	0x0802ae68
 800363c:	0802ae78 	.word	0x0802ae78
 8003640:	0802ae80 	.word	0x0802ae80
 8003644:	0802ade8 	.word	0x0802ade8
 8003648:	1ff0f000 	.word	0x1ff0f000
 800364c:	0802adf0 	.word	0x0802adf0
 8003650:	20000018 	.word	0x20000018
 8003654:	2000008c 	.word	0x2000008c
 8003658:	20002934 	.word	0x20002934
 800365c:	20002d28 	.word	0x20002d28
 8003660:	200025d4 	.word	0x200025d4
 8003664:	20000750 	.word	0x20000750
 8003668:	20000700 	.word	0x20000700
 800366c:	0802af1c 	.word	0x0802af1c
 8003670:	20000000 	.word	0x20000000
 8003674:	08045bb1 	.word	0x08045bb1
 8003678:	0802ae6c 	.word	0x0802ae6c
 800367c:	0802ae70 	.word	0x0802ae70
 8003680:	0802af2c 	.word	0x0802af2c
 8003684:	0802af24 	.word	0x0802af24
 8003688:	20002094 	.word	0x20002094
 800368c:	20001a94 	.word	0x20001a94
 8003690:	0802ae38 	.word	0x0802ae38
 8003694:	200018a8 	.word	0x200018a8
 8003698:	200030f4 	.word	0x200030f4
 800369c:	0802af28 	.word	0x0802af28
		if (!(ledsenabled)) {
 80036a0:	4b9d      	ldr	r3, [pc, #628]	; (8003918 <StarLPTask+0x5c0>)
 80036a2:	4604      	mov	r4, r0
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80e8 	beq.w	800387c <StarLPTask+0x524>
		} else if (ledhang) {	// trigger led
 80036ac:	4a9b      	ldr	r2, [pc, #620]	; (800391c <StarLPTask+0x5c4>)
 80036ae:	6813      	ldr	r3, [r2, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80e3 	beq.w	800387c <StarLPTask+0x524>
			ledhang--;
 80036b6:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80036b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036bc:	4898      	ldr	r0, [pc, #608]	; (8003920 <StarLPTask+0x5c8>)
			ledhang--;
 80036be:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 80036c0:	2201      	movs	r2, #1
 80036c2:	f008 fae3 	bl	800bc8c <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 80036c6:	4997      	ldr	r1, [pc, #604]	; (8003924 <StarLPTask+0x5cc>)
 80036c8:	4897      	ldr	r0, [pc, #604]	; (8003928 <StarLPTask+0x5d0>)
 80036ca:	6fca      	ldr	r2, [r1, #124]	; 0x7c
 80036cc:	6803      	ldr	r3, [r0, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	f040 80db 	bne.w	800388a <StarLPTask+0x532>
		processnex();		// process Nextion
 80036d4:	f7ff fbca 	bl	8002e6c <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 80036d8:	4a94      	ldr	r2, [pc, #592]	; (800392c <StarLPTask+0x5d4>)
 80036da:	1cfb      	adds	r3, r7, #3
 80036dc:	fb02 f303 	mul.w	r3, r2, r3
 80036e0:	4a93      	ldr	r2, [pc, #588]	; (8003930 <StarLPTask+0x5d8>)
 80036e2:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 80036e6:	d31e      	bcc.n	8003726 <StarLPTask+0x3ce>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 80036e8:	4b8e      	ldr	r3, [pc, #568]	; (8003924 <StarLPTask+0x5cc>)
 80036ea:	4c92      	ldr	r4, [pc, #584]	; (8003934 <StarLPTask+0x5dc>)
 80036ec:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	f103 0219 	add.w	r2, r3, #25
 80036f4:	4291      	cmp	r1, r2
 80036f6:	f200 8209 	bhi.w	8003b0c <StarLPTask+0x7b4>
				if (jabbertimeout) {
 80036fa:	4a8f      	ldr	r2, [pc, #572]	; (8003938 <StarLPTask+0x5e0>)
 80036fc:	6813      	ldr	r3, [r2, #0]
 80036fe:	b10b      	cbz	r3, 8003704 <StarLPTask+0x3ac>
					jabbertimeout--;		// de-arm count
 8003700:	3b01      	subs	r3, #1
 8003702:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 8003704:	4b87      	ldr	r3, [pc, #540]	; (8003924 <StarLPTask+0x5cc>)
 8003706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003708:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 800370a:	9b08      	ldr	r3, [sp, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 821f 	beq.w	8003b50 <StarLPTask+0x7f8>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003712:	4b8a      	ldr	r3, [pc, #552]	; (800393c <StarLPTask+0x5e4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 81ce 	beq.w	8003ab8 <StarLPTask+0x760>
 800371c:	4b88      	ldr	r3, [pc, #544]	; (8003940 <StarLPTask+0x5e8>)
			} else if (lcd_currentpage == 1) {
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	f000 8278 	beq.w	8003c16 <StarLPTask+0x8be>
				lcd_showvars();
 8003726:	4a87      	ldr	r2, [pc, #540]	; (8003944 <StarLPTask+0x5ec>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003728:	f107 030b 	add.w	r3, r7, #11
				lcd_showvars();
 800372c:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 8003730:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8003734:	3a01      	subs	r2, #1
 8003736:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 800373a:	f080 80df 	bcs.w	80038fc <StarLPTask+0x5a4>
			lcd_trigplot();		// update lcd trigger and noise plots
 800373e:	4a82      	ldr	r2, [pc, #520]	; (8003948 <StarLPTask+0x5f0>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003740:	f107 031b 	add.w	r3, r7, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 8003744:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8003748:	4a80      	ldr	r2, [pc, #512]	; (800394c <StarLPTask+0x5f4>)
 800374a:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800374e:	d31a      	bcc.n	8003786 <StarLPTask+0x42e>
			if (agc) {
 8003750:	882b      	ldrh	r3, [r5, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 820f 	beq.w	8003b76 <StarLPTask+0x81e>
				trigsin10sec = trigs - prevtrigs;
 8003758:	4b73      	ldr	r3, [pc, #460]	; (8003928 <StarLPTask+0x5d0>)
 800375a:	4c7d      	ldr	r4, [pc, #500]	; (8003950 <StarLPTask+0x5f8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800375c:	4e7d      	ldr	r6, [pc, #500]	; (8003954 <StarLPTask+0x5fc>)
				trigsin10sec = trigs - prevtrigs;
 800375e:	681a      	ldr	r2, [r3, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003760:	8831      	ldrh	r1, [r6, #0]
				trigsin10sec = trigs - prevtrigs;
 8003762:	6823      	ldr	r3, [r4, #0]
 8003764:	f8df 8250 	ldr.w	r8, [pc, #592]	; 80039b8 <StarLPTask+0x660>
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003768:	2905      	cmp	r1, #5
				trigsin10sec = trigs - prevtrigs;
 800376a:	eba2 0303 	sub.w	r3, r2, r3
 800376e:	f8c8 3000 	str.w	r3, [r8]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8003772:	d802      	bhi.n	800377a <StarLPTask+0x422>
					if (trigsin10sec < MINTRIGS10S)
 8003774:	2b01      	cmp	r3, #1
 8003776:	f240 82d5 	bls.w	8003d24 <StarLPTask+0x9cc>
				if (trigsin10sec > MAXTRIGS10S)
 800377a:	2b0a      	cmp	r3, #10
 800377c:	f200 824e 	bhi.w	8003c1c <StarLPTask+0x8c4>
			gainchanged = 0;
 8003780:	2300      	movs	r3, #0
				prevtrigs = trigs;
 8003782:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 8003784:	9308      	str	r3, [sp, #32]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 8003786:	f640 338c 	movw	r3, #2956	; 0xb8c
 800378a:	429f      	cmp	r7, r3
 800378c:	d94e      	bls.n	800382c <StarLPTask+0x4d4>
			if (gpsgood == 0) {	// gps is not talking to us
 800378e:	4b72      	ldr	r3, [pc, #456]	; (8003958 <StarLPTask+0x600>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	f040 81f1 	bne.w	8003b7a <StarLPTask+0x822>
				printf("GPS serial comms problem?\n");
 8003798:	4870      	ldr	r0, [pc, #448]	; (800395c <StarLPTask+0x604>)
 800379a:	f021 fe97 	bl	80254cc <puts>
				if (gpsbadcount++ > 9) {
 800379e:	4970      	ldr	r1, [pc, #448]	; (8003960 <StarLPTask+0x608>)
 80037a0:	680b      	ldr	r3, [r1, #0]
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	2b09      	cmp	r3, #9
 80037a6:	600a      	str	r2, [r1, #0]
 80037a8:	f300 82c7 	bgt.w	8003d3a <StarLPTask+0x9e2>
			if (psensor == MPL115A2) {
 80037ac:	4b6d      	ldr	r3, [pc, #436]	; (8003964 <StarLPTask+0x60c>)
			gpsgood = 0;			// reset the good flag
 80037ae:	2200      	movs	r2, #0
 80037b0:	4969      	ldr	r1, [pc, #420]	; (8003958 <StarLPTask+0x600>)
			if (psensor == MPL115A2) {
 80037b2:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 80037b4:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	f000 8224 	beq.w	8003c04 <StarLPTask+0x8ac>
			} else if (psensor == MPL3115A2) {
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f000 8243 	beq.w	8003c48 <StarLPTask+0x8f0>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80037c2:	4b69      	ldr	r3, [pc, #420]	; (8003968 <StarLPTask+0x610>)
			tenmstimer = 0;
 80037c4:	2700      	movs	r7, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 80037c6:	4a57      	ldr	r2, [pc, #348]	; (8003924 <StarLPTask+0x5cc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 80037ce:	0e1a      	lsrs	r2, r3, #24
 80037d0:	4866      	ldr	r0, [pc, #408]	; (800396c <StarLPTask+0x614>)
 80037d2:	b289      	uxth	r1, r1
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	9200      	str	r2, [sp, #0]
 80037e4:	f242 722c 	movw	r2, #10028	; 0x272c
 80037e8:	f021 fdd4 	bl	8025394 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 80037ec:	4b60      	ldr	r3, [pc, #384]	; (8003970 <StarLPTask+0x618>)
 80037ee:	4a61      	ldr	r2, [pc, #388]	; (8003974 <StarLPTask+0x61c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	494d      	ldr	r1, [pc, #308]	; (8003928 <StarLPTask+0x5d0>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	485f      	ldr	r0, [pc, #380]	; (8003978 <StarLPTask+0x620>)
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	9304      	str	r3, [sp, #16]
 80037fe:	4b5f      	ldr	r3, [pc, #380]	; (800397c <StarLPTask+0x624>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	4b5e      	ldr	r3, [pc, #376]	; (8003980 <StarLPTask+0x628>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	4b5d      	ldr	r3, [pc, #372]	; (8003984 <StarLPTask+0x62c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	4b50      	ldr	r3, [pc, #320]	; (8003954 <StarLPTask+0x5fc>)
 8003814:	881b      	ldrh	r3, [r3, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4b5b      	ldr	r3, [pc, #364]	; (8003988 <StarLPTask+0x630>)
 800381a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800381e:	4b5b      	ldr	r3, [pc, #364]	; (800398c <StarLPTask+0x634>)
 8003820:	9305      	str	r3, [sp, #20]
 8003822:	4b5b      	ldr	r3, [pc, #364]	; (8003990 <StarLPTask+0x638>)
 8003824:	6809      	ldr	r1, [r1, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f021 fdb4 	bl	8025394 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 800382c:	9907      	ldr	r1, [sp, #28]
 800382e:	4a59      	ldr	r2, [pc, #356]	; (8003994 <StarLPTask+0x63c>)
 8003830:	f101 0315 	add.w	r3, r1, #21
 8003834:	b29b      	uxth	r3, r3
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <StarLPTask+0x640>)
 800383c:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8003840:	d30b      	bcc.n	800385a <StarLPTask+0x502>
 8003842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003844:	4299      	cmp	r1, r3
 8003846:	d008      	beq.n	800385a <StarLPTask+0x502>
			if (boosttrys > 0)		// timer for boost gain oscillating
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <StarLPTask+0x644>)
 800384a:	8813      	ldrh	r3, [r2, #0]
 800384c:	b10b      	cbz	r3, 8003852 <StarLPTask+0x4fa>
				boosttrys--;
 800384e:	3b01      	subs	r3, #1
 8003850:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8003852:	f7ff f8bf 	bl	80029d4 <lcd_pressplot>
 8003856:	9b07      	ldr	r3, [sp, #28]
 8003858:	9309      	str	r3, [sp, #36]	; 0x24
		if (onesectimer > 900) {			// 15 mins
 800385a:	f240 3385 	movw	r3, #901	; 0x385
 800385e:	9a07      	ldr	r2, [sp, #28]
 8003860:	429a      	cmp	r2, r3
 8003862:	f47f ae6e 	bne.w	8003542 <StarLPTask+0x1ea>
			requestapisn();	//update s/n and udp target (reboot on fail)
 8003866:	f004 fc25 	bl	80080b4 <requestapisn>
			onesectimer = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	9307      	str	r3, [sp, #28]
 800386e:	e668      	b.n	8003542 <StarLPTask+0x1ea>
					printf("OFF\n");
 8003870:	4640      	mov	r0, r8
 8003872:	f021 fe2b 	bl	80254cc <puts>
			if ((isdigit(inch)) && (agc == 0)) {
 8003876:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 800387a:	e68d      	b.n	8003598 <StarLPTask+0x240>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 800387c:	2200      	movs	r2, #0
 800387e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003882:	4827      	ldr	r0, [pc, #156]	; (8003920 <StarLPTask+0x5c8>)
 8003884:	f008 fa02 	bl	800bc8c <HAL_GPIO_WritePin>
 8003888:	e71d      	b.n	80036c6 <StarLPTask+0x36e>
			if (soundenabled) {
 800388a:	4b45      	ldr	r3, [pc, #276]	; (80039a0 <StarLPTask+0x648>)
			trigs = statuspkt.trigcount;
 800388c:	6fca      	ldr	r2, [r1, #124]	; 0x7c
			if (soundenabled) {
 800388e:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8003890:	6002      	str	r2, [r0, #0]
			if (soundenabled) {
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 8191 	bne.w	8003bba <StarLPTask+0x862>
 8003898:	4e42      	ldr	r6, [pc, #264]	; (80039a4 <StarLPTask+0x64c>)
				printf("sem wait 1a\n");
 800389a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 80039bc <StarLPTask+0x664>
 800389e:	e002      	b.n	80038a6 <StarLPTask+0x54e>
 80038a0:	4640      	mov	r0, r8
 80038a2:	f021 fe13 	bl	80254cc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80038a6:	2101      	movs	r1, #1
 80038a8:	6830      	ldr	r0, [r6, #0]
 80038aa:	f012 fb99 	bl	8015fe0 <xQueueSemaphoreTake>
 80038ae:	2801      	cmp	r0, #1
 80038b0:	d1f6      	bne.n	80038a0 <StarLPTask+0x548>
			strcpy(str, ctime(&epochtime));		// ctime
 80038b2:	483d      	ldr	r0, [pc, #244]	; (80039a8 <StarLPTask+0x650>)
 80038b4:	f020 fb4e 	bl	8023f54 <ctime>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4650      	mov	r0, sl
 80038bc:	f021 ffe5 	bl	802588a <stpcpy>
			i = 0;
 80038c0:	2300      	movs	r3, #0
			while (i < strlen(str)) {
 80038c2:	eba0 000a 	sub.w	r0, r0, sl
 80038c6:	4939      	ldr	r1, [pc, #228]	; (80039ac <StarLPTask+0x654>)
 80038c8:	e008      	b.n	80038dc <StarLPTask+0x584>
				if ((str[i] != '\n') && (str[i] != '\r'))
 80038ca:	f81a 2003 	ldrb.w	r2, [sl, r3]
 80038ce:	2a0a      	cmp	r2, #10
 80038d0:	d003      	beq.n	80038da <StarLPTask+0x582>
 80038d2:	2a0d      	cmp	r2, #13
 80038d4:	d001      	beq.n	80038da <StarLPTask+0x582>
					trigtimestr[n++] = str[i];
 80038d6:	550a      	strb	r2, [r1, r4]
 80038d8:	3401      	adds	r4, #1
				i++;
 80038da:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 80038dc:	4283      	cmp	r3, r0
 80038de:	d3f4      	bcc.n	80038ca <StarLPTask+0x572>
			trigtimestr[n] = '\0';
 80038e0:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80038e2:	6830      	ldr	r0, [r6, #0]
			trigtimestr[n] = '\0';
 80038e4:	550b      	strb	r3, [r1, r4]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80038e6:	461a      	mov	r2, r3
 80038e8:	4619      	mov	r1, r3
 80038ea:	f012 f8df 	bl	8015aac <xQueueGenericSend>
 80038ee:	2801      	cmp	r0, #1
 80038f0:	f43f aef0 	beq.w	80036d4 <StarLPTask+0x37c>
				printf("semaphore 1a release failed\n");
 80038f4:	482e      	ldr	r0, [pc, #184]	; (80039b0 <StarLPTask+0x658>)
 80038f6:	f021 fde9 	bl	80254cc <puts>
 80038fa:	e6eb      	b.n	80036d4 <StarLPTask+0x37c>
			if (ledsenabled)
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <StarLPTask+0x5c0>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80038fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003902:	4807      	ldr	r0, [pc, #28]	; (8003920 <StarLPTask+0x5c8>)
			if (ledsenabled)
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	2a00      	cmp	r2, #0
 8003908:	f000 8161 	beq.w	8003bce <StarLPTask+0x876>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800390c:	f008 f9d8 	bl	800bcc0 <HAL_GPIO_TogglePin>
 8003910:	4e24      	ldr	r6, [pc, #144]	; (80039a4 <StarLPTask+0x64c>)
				printf("sem wait 1b\n");
 8003912:	4c28      	ldr	r4, [pc, #160]	; (80039b4 <StarLPTask+0x65c>)
 8003914:	e057      	b.n	80039c6 <StarLPTask+0x66e>
 8003916:	bf00      	nop
 8003918:	20000278 	.word	0x20000278
 800391c:	2000074c 	.word	0x2000074c
 8003920:	40020c00 	.word	0x40020c00
 8003924:	20002f3c 	.word	0x20002f3c
 8003928:	20002d58 	.word	0x20002d58
 800392c:	cccccccd 	.word	0xcccccccd
 8003930:	19999999 	.word	0x19999999
 8003934:	20002d1c 	.word	0x20002d1c
 8003938:	20000704 	.word	0x20000704
 800393c:	20001a04 	.word	0x20001a04
 8003940:	20001a00 	.word	0x20001a00
 8003944:	c28f5c29 	.word	0xc28f5c29
 8003948:	26e978d5 	.word	0x26e978d5
 800394c:	00418937 	.word	0x00418937
 8003950:	20002d48 	.word	0x20002d48
 8003954:	20000002 	.word	0x20000002
 8003958:	20002dfc 	.word	0x20002dfc
 800395c:	0802b0e0 	.word	0x0802b0e0
 8003960:	200020dc 	.word	0x200020dc
 8003964:	2000307c 	.word	0x2000307c
 8003968:	20002d3c 	.word	0x20002d3c
 800396c:	0802b13c 	.word	0x0802b13c
 8003970:	20003084 	.word	0x20003084
 8003974:	10624dd3 	.word	0x10624dd3
 8003978:	0802b158 	.word	0x0802b158
 800397c:	20003074 	.word	0x20003074
 8003980:	20003080 	.word	0x20003080
 8003984:	20003078 	.word	0x20003078
 8003988:	20003070 	.word	0x20003070
 800398c:	2000005c 	.word	0x2000005c
 8003990:	20000700 	.word	0x20000700
 8003994:	a4fa4fa5 	.word	0xa4fa4fa5
 8003998:	016c16c1 	.word	0x016c16c1
 800399c:	20002ff0 	.word	0x20002ff0
 80039a0:	2000027e 	.word	0x2000027e
 80039a4:	20002d50 	.word	0x20002d50
 80039a8:	20002df0 	.word	0x20002df0
 80039ac:	20000244 	.word	0x20000244
 80039b0:	0802af5c 	.word	0x0802af5c
 80039b4:	0802af88 	.word	0x0802af88
 80039b8:	20002d5c 	.word	0x20002d5c
 80039bc:	0802af50 	.word	0x0802af50
 80039c0:	4620      	mov	r0, r4
 80039c2:	f021 fd83 	bl	80254cc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80039c6:	2101      	movs	r1, #1
 80039c8:	6830      	ldr	r0, [r6, #0]
 80039ca:	f012 fb09 	bl	8015fe0 <xQueueSemaphoreTake>
 80039ce:	2801      	cmp	r0, #1
 80039d0:	d1f6      	bne.n	80039c0 <StarLPTask+0x668>
			strcpy(str, ctime(&epochtime));
 80039d2:	48a7      	ldr	r0, [pc, #668]	; (8003c70 <StarLPTask+0x918>)
 80039d4:	f020 fabe 	bl	8023f54 <ctime>
 80039d8:	4601      	mov	r1, r0
 80039da:	4650      	mov	r0, sl
			sprintf(statstr,
 80039dc:	4ca5      	ldr	r4, [pc, #660]	; (8003c74 <StarLPTask+0x91c>)
			strcpy(str, ctime(&epochtime));
 80039de:	f021 ff54 	bl	802588a <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039e2:	eba0 000a 	sub.w	r0, r0, sl
 80039e6:	2200      	movs	r2, #0
			sprintf(nowtimestr, "\"%s\"", str);
 80039e8:	49a3      	ldr	r1, [pc, #652]	; (8003c78 <StarLPTask+0x920>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039ea:	f100 0380 	add.w	r3, r0, #128	; 0x80
			sprintf(nowtimestr, "\"%s\"", str);
 80039ee:	48a3      	ldr	r0, [pc, #652]	; (8003c7c <StarLPTask+0x924>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80039f0:	446b      	add	r3, sp
 80039f2:	f803 2c55 	strb.w	r2, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 80039f6:	4652      	mov	r2, sl
 80039f8:	f021 feb6 	bl	8025768 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 80039fc:	4ba0      	ldr	r3, [pc, #640]	; (8003c80 <StarLPTask+0x928>)
 80039fe:	4aa1      	ldr	r2, [pc, #644]	; (8003c84 <StarLPTask+0x92c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6812      	ldr	r2, [r2, #0]
 8003a04:	49a0      	ldr	r1, [pc, #640]	; (8003c88 <StarLPTask+0x930>)
 8003a06:	48a1      	ldr	r0, [pc, #644]	; (8003c8c <StarLPTask+0x934>)
 8003a08:	f021 feae 	bl	8025768 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 8003a0c:	4ba0      	ldr	r3, [pc, #640]	; (8003c90 <StarLPTask+0x938>)
 8003a0e:	4aa1      	ldr	r2, [pc, #644]	; (8003c94 <StarLPTask+0x93c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	499c      	ldr	r1, [pc, #624]	; (8003c88 <StarLPTask+0x930>)
 8003a16:	48a0      	ldr	r0, [pc, #640]	; (8003c98 <StarLPTask+0x940>)
 8003a18:	f021 fea6 	bl	8025768 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a1c:	4b9f      	ldr	r3, [pc, #636]	; (8003c9c <StarLPTask+0x944>)
			sprintf(statstr,
 8003a1e:	49a0      	ldr	r1, [pc, #640]	; (8003ca0 <StarLPTask+0x948>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a20:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8003a24:	489f      	ldr	r0, [pc, #636]	; (8003ca4 <StarLPTask+0x94c>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfb8      	it	lt
 8003a2a:	425b      	neglt	r3, r3
			sprintf(statstr,
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	4b9d      	ldr	r3, [pc, #628]	; (8003ca8 <StarLPTask+0x950>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3a:	9302      	str	r3, [sp, #8]
 8003a3c:	4b9b      	ldr	r3, [pc, #620]	; (8003cac <StarLPTask+0x954>)
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	9303      	str	r3, [sp, #12]
 8003a42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a44:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4b99      	ldr	r3, [pc, #612]	; (8003cb0 <StarLPTask+0x958>)
 8003a4a:	f021 fe8d 	bl	8025768 <siprintf>
			if (gpslocked) {
 8003a4e:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <StarLPTask+0x95c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f000 80be 	beq.w	8003bd4 <StarLPTask+0x87c>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 8003a58:	7ee2      	ldrb	r2, [r4, #27]
 8003a5a:	69e3      	ldr	r3, [r4, #28]
 8003a5c:	6a21      	ldr	r1, [r4, #32]
 8003a5e:	4896      	ldr	r0, [pc, #600]	; (8003cb8 <StarLPTask+0x960>)
 8003a60:	9100      	str	r1, [sp, #0]
 8003a62:	4996      	ldr	r1, [pc, #600]	; (8003cbc <StarLPTask+0x964>)
 8003a64:	f021 fe80 	bl	8025768 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8003a68:	2300      	movs	r3, #0
 8003a6a:	6830      	ldr	r0, [r6, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f012 f81c 	bl	8015aac <xQueueGenericSend>
 8003a74:	2801      	cmp	r0, #1
 8003a76:	d002      	beq.n	8003a7e <StarLPTask+0x726>
				printf("semaphore 1b release failed\n");
 8003a78:	4891      	ldr	r0, [pc, #580]	; (8003cc0 <StarLPTask+0x968>)
 8003a7a:	f021 fd27 	bl	80254cc <puts>
			onesectimer++;
 8003a7e:	9b07      	ldr	r3, [sp, #28]
				printf("sem wait 1c\n");
 8003a80:	4c90      	ldr	r4, [pc, #576]	; (8003cc4 <StarLPTask+0x96c>)
			onesectimer++;
 8003a82:	3301      	adds	r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	9307      	str	r3, [sp, #28]
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8003a88:	e002      	b.n	8003a90 <StarLPTask+0x738>
				printf("sem wait 1c\n");
 8003a8a:	4620      	mov	r0, r4
 8003a8c:	f021 fd1e 	bl	80254cc <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 8003a90:	2119      	movs	r1, #25
 8003a92:	6830      	ldr	r0, [r6, #0]
 8003a94:	f012 faa4 	bl	8015fe0 <xQueueSemaphoreTake>
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	d1f6      	bne.n	8003a8a <StarLPTask+0x732>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	6830      	ldr	r0, [r6, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	f012 f802 	bl	8015aac <xQueueGenericSend>
 8003aa8:	2801      	cmp	r0, #1
 8003aaa:	d002      	beq.n	8003ab2 <StarLPTask+0x75a>
				printf("semaphore 1c release failed\n");
 8003aac:	4886      	ldr	r0, [pc, #536]	; (8003cc8 <StarLPTask+0x970>)
 8003aae:	f021 fd0d 	bl	80254cc <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 8003ab2:	f7fe fe91 	bl	80027d8 <lcd_trigplot>
 8003ab6:	e642      	b.n	800373e <StarLPTask+0x3e6>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 8003ab8:	4c84      	ldr	r4, [pc, #528]	; (8003ccc <StarLPTask+0x974>)
 8003aba:	9a07      	ldr	r2, [sp, #28]
 8003abc:	8823      	ldrh	r3, [r4, #0]
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <StarLPTask+0x978>)
 8003ac2:	f43f ae2c 	beq.w	800371e <StarLPTask+0x3c6>
 8003ac6:	781a      	ldrb	r2, [r3, #0]
 8003ac8:	2a00      	cmp	r2, #0
 8003aca:	f47f ae28 	bne.w	800371e <StarLPTask+0x3c6>
				timeinfo = *localtime(&localepochtime);
 8003ace:	4881      	ldr	r0, [pc, #516]	; (8003cd4 <StarLPTask+0x97c>)
 8003ad0:	f020 fb62 	bl	8024198 <localtime>
 8003ad4:	4e80      	ldr	r6, [pc, #512]	; (8003cd8 <StarLPTask+0x980>)
 8003ad6:	4684      	mov	ip, r0
 8003ad8:	46b6      	mov	lr, r6
 8003ada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003ade:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
				lastsec = onesectimer;
 8003ae2:	9b07      	ldr	r3, [sp, #28]
 8003ae4:	8023      	strh	r3, [r4, #0]
				timeinfo = *localtime(&localepochtime);
 8003ae6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003aea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8003aee:	f8dc 3000 	ldr.w	r3, [ip]
 8003af2:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8003af6:	f7fe fc5d 	bl	80023b4 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8003afa:	4b78      	ldr	r3, [pc, #480]	; (8003cdc <StarLPTask+0x984>)
 8003afc:	69f2      	ldr	r2, [r6, #28]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	f43f ae10 	beq.w	8003726 <StarLPTask+0x3ce>
					lcd_date();
 8003b06:	f7fe fcab 	bl	8002460 <lcd_date>
 8003b0a:	e60c      	b.n	8003726 <StarLPTask+0x3ce>
				statuspkt.jabcnt++;
 8003b0c:	4959      	ldr	r1, [pc, #356]	; (8003c74 <StarLPTask+0x91c>)
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b0e:	4874      	ldr	r0, [pc, #464]	; (8003ce0 <StarLPTask+0x988>)
				statuspkt.jabcnt++;
 8003b10:	f8b1 2086 	ldrh.w	r2, [r1, #134]	; 0x86
 8003b14:	3201      	adds	r2, #1
 8003b16:	b292      	uxth	r2, r2
 8003b18:	f8a1 2086 	strh.w	r2, [r1, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 8003b1c:	2201      	movs	r2, #1
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b1e:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8003b20:	1ac9      	subs	r1, r1, r3
				jabbertimeout = 1;		// 100mS seconds pause
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <StarLPTask+0x98c>)
 8003b24:	601a      	str	r2, [r3, #0]
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8003b26:	f021 fc35 	bl	8025394 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8003b2a:	4b6f      	ldr	r3, [pc, #444]	; (8003ce8 <StarLPTask+0x990>)
 8003b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b30:	b93b      	cbnz	r3, 8003b42 <StarLPTask+0x7ea>
					if (trigthresh < 4095)
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <StarLPTask+0x954>)
 8003b34:	f640 71fe 	movw	r1, #4094	; 0xffe
 8003b38:	8813      	ldrh	r3, [r2, #0]
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d801      	bhi.n	8003b42 <StarLPTask+0x7ea>
						trigthresh++;
 8003b3e:	3301      	adds	r3, #1
 8003b40:	8013      	strh	r3, [r2, #0]
				if (agc) {
 8003b42:	882b      	ldrh	r3, [r5, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f040 8088 	bne.w	8003c5a <StarLPTask+0x902>
				jabtrigcnt = statuspkt.trigcount;
 8003b4a:	4b4a      	ldr	r3, [pc, #296]	; (8003c74 <StarLPTask+0x91c>)
 8003b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b4e:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 8003b50:	4b66      	ldr	r3, [pc, #408]	; (8003cec <StarLPTask+0x994>)
 8003b52:	4a67      	ldr	r2, [pc, #412]	; (8003cf0 <StarLPTask+0x998>)
 8003b54:	6819      	ldr	r1, [r3, #0]
 8003b56:	6813      	ldr	r3, [r2, #0]
 8003b58:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8003b5a:	2b05      	cmp	r3, #5
 8003b5c:	dd49      	ble.n	8003bf2 <StarLPTask+0x89a>
					if (trigthresh < 4095)
 8003b5e:	4853      	ldr	r0, [pc, #332]	; (8003cac <StarLPTask+0x954>)
 8003b60:	f640 74fe 	movw	r4, #4094	; 0xffe
 8003b64:	8803      	ldrh	r3, [r0, #0]
 8003b66:	42a3      	cmp	r3, r4
 8003b68:	d801      	bhi.n	8003b6e <StarLPTask+0x816>
						trigthresh++;
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6011      	str	r1, [r2, #0]
 8003b72:	9308      	str	r3, [sp, #32]
 8003b74:	e5cd      	b.n	8003712 <StarLPTask+0x3ba>
			gainchanged = 0;
 8003b76:	9308      	str	r3, [sp, #32]
 8003b78:	e605      	b.n	8003786 <StarLPTask+0x42e>
				gpsbadcount = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	4a5d      	ldr	r2, [pc, #372]	; (8003cf4 <StarLPTask+0x99c>)
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e614      	b.n	80037ac <StarLPTask+0x454>
	printf("%s----------------------------------------------------------------------------\n", str);
 8003b82:	495d      	ldr	r1, [pc, #372]	; (8003cf8 <StarLPTask+0x9a0>)
 8003b84:	485d      	ldr	r0, [pc, #372]	; (8003cfc <StarLPTask+0x9a4>)
 8003b86:	f021 fc05 	bl	8025394 <iprintf>
			printf("Downloading...\n");
 8003b8a:	485d      	ldr	r0, [pc, #372]	; (8003d00 <StarLPTask+0x9a8>)
 8003b8c:	f021 fc9e 	bl	80254cc <puts>
	printf("%s----------------------------------------------------------------------------\n", str);
 8003b90:	495c      	ldr	r1, [pc, #368]	; (8003d04 <StarLPTask+0x9ac>)
 8003b92:	485a      	ldr	r0, [pc, #360]	; (8003cfc <StarLPTask+0x9a4>)
 8003b94:	f021 fbfe 	bl	8025394 <iprintf>
			while (http_downloading) {
 8003b98:	f8d9 3000 	ldr.w	r3, [r9]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f43f acdb 	beq.w	8003558 <StarLPTask+0x200>
				HAL_IWDG_Refresh(&hiwdg);
 8003ba2:	4c59      	ldr	r4, [pc, #356]	; (8003d08 <StarLPTask+0x9b0>)
				osDelay(50);
 8003ba4:	2032      	movs	r0, #50	; 0x32
 8003ba6:	f011 fc57 	bl	8015458 <osDelay>
				HAL_IWDG_Refresh(&hiwdg);
 8003baa:	4620      	mov	r0, r4
 8003bac:	f008 fef2 	bl	800c994 <HAL_IWDG_Refresh>
			while (http_downloading) {
 8003bb0:	f8d9 3000 	ldr.w	r3, [r9]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f5      	bne.n	8003ba4 <StarLPTask+0x84c>
 8003bb8:	e4ce      	b.n	8003558 <StarLPTask+0x200>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003bba:	2308      	movs	r3, #8
 8003bbc:	4a53      	ldr	r2, [pc, #332]	; (8003d0c <StarLPTask+0x9b4>)
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	4853      	ldr	r0, [pc, #332]	; (8003d10 <StarLPTask+0x9b8>)
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003bc8:	f005 f88e 	bl	8008ce8 <HAL_DAC_Start_DMA>
 8003bcc:	e664      	b.n	8003898 <StarLPTask+0x540>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 8003bce:	f008 f85d 	bl	800bc8c <HAL_GPIO_WritePin>
 8003bd2:	e69d      	b.n	8003910 <StarLPTask+0x5b8>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 8003bd4:	f8df c148 	ldr.w	ip, [pc, #328]	; 8003d20 <StarLPTask+0x9c8>
 8003bd8:	4c37      	ldr	r4, [pc, #220]	; (8003cb8 <StarLPTask+0x960>)
 8003bda:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8003bea:	f844 0b04 	str.w	r0, [r4], #4
 8003bee:	8021      	strh	r1, [r4, #0]
 8003bf0:	e73a      	b.n	8003a68 <StarLPTask+0x710>
				if (n == 0) {		// no triggers in last 100mS
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1bb      	bne.n	8003b6e <StarLPTask+0x816>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 8003bf6:	482d      	ldr	r0, [pc, #180]	; (8003cac <StarLPTask+0x954>)
 8003bf8:	8803      	ldrh	r3, [r0, #0]
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d9b7      	bls.n	8003b6e <StarLPTask+0x816>
						trigthresh--;
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	8003      	strh	r3, [r0, #0]
 8003c02:	e7b4      	b.n	8003b6e <StarLPTask+0x816>
				if (getpressure115() != HAL_OK) {
 8003c04:	f001 ff5e 	bl	8005ac4 <getpressure115>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	f43f adda 	beq.w	80037c2 <StarLPTask+0x46a>
					printf("MPL115A2 error\n\r");
 8003c0e:	4841      	ldr	r0, [pc, #260]	; (8003d14 <StarLPTask+0x9bc>)
 8003c10:	f021 fbc0 	bl	8025394 <iprintf>
 8003c14:	e5d5      	b.n	80037c2 <StarLPTask+0x46a>
				lcd_showvars();
 8003c16:	f7fe fc5b 	bl	80024d0 <lcd_showvars>
 8003c1a:	e584      	b.n	8003726 <StarLPTask+0x3ce>
					gainchanged = bumppga(-1);
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f001 ff0a 	bl	8005a38 <bumppga>
 8003c24:	b203      	sxth	r3, r0
 8003c26:	9308      	str	r3, [sp, #32]
				prevtrigs = trigs;
 8003c28:	4b3b      	ldr	r3, [pc, #236]	; (8003d18 <StarLPTask+0x9c0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8003c2e:	9b08      	ldr	r3, [sp, #32]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f77f ada8 	ble.w	8003786 <StarLPTask+0x42e>
					if (trigthresh < (4095 - 10))
 8003c36:	8833      	ldrh	r3, [r6, #0]
 8003c38:	f640 72f4 	movw	r2, #4084	; 0xff4
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	f63f ada2 	bhi.w	8003786 <StarLPTask+0x42e>
						trigthresh += 5;
 8003c42:	3305      	adds	r3, #5
 8003c44:	8033      	strh	r3, [r6, #0]
 8003c46:	e59e      	b.n	8003786 <StarLPTask+0x42e>
				if (getpressure3115() != HAL_OK) {
 8003c48:	f001 ffea 	bl	8005c20 <getpressure3115>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	f43f adb8 	beq.w	80037c2 <StarLPTask+0x46a>
					printf("MPL3115A2 error\n\r");
 8003c52:	4832      	ldr	r0, [pc, #200]	; (8003d1c <StarLPTask+0x9c4>)
 8003c54:	f021 fb9e 	bl	8025394 <iprintf>
 8003c58:	e5b3      	b.n	80037c2 <StarLPTask+0x46a>
					gainchanged = bumppga(-1);	// decrease gain
 8003c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5e:	f001 feeb 	bl	8005a38 <bumppga>
 8003c62:	b203      	sxth	r3, r0
 8003c64:	9308      	str	r3, [sp, #32]
				jabtrigcnt = statuspkt.trigcount;
 8003c66:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <StarLPTask+0x91c>)
 8003c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6a:	6023      	str	r3, [r4, #0]
 8003c6c:	e54d      	b.n	800370a <StarLPTask+0x3b2>
 8003c6e:	bf00      	nop
 8003c70:	20002df0 	.word	0x20002df0
 8003c74:	20002f3c 	.word	0x20002f3c
 8003c78:	0802af94 	.word	0x0802af94
 8003c7c:	2000005c 	.word	0x2000005c
 8003c80:	20003084 	.word	0x20003084
 8003c84:	20003080 	.word	0x20003080
 8003c88:	0802af9c 	.word	0x0802af9c
 8003c8c:	20000238 	.word	0x20000238
 8003c90:	20003074 	.word	0x20003074
 8003c94:	20003078 	.word	0x20003078
 8003c98:	2000007c 	.word	0x2000007c
 8003c9c:	20000750 	.word	0x20000750
 8003ca0:	0802afa4 	.word	0x0802afa4
 8003ca4:	20000130 	.word	0x20000130
 8003ca8:	200006fc 	.word	0x200006fc
 8003cac:	20000002 	.word	0x20000002
 8003cb0:	20000244 	.word	0x20000244
 8003cb4:	200030e8 	.word	0x200030e8
 8003cb8:	2000001c 	.word	0x2000001c
 8003cbc:	0802b04c 	.word	0x0802b04c
 8003cc0:	0802b09c 	.word	0x0802b09c
 8003cc4:	0802b0b8 	.word	0x0802b0b8
 8003cc8:	0802b0c4 	.word	0x0802b0c4
 8003ccc:	20000010 	.word	0x20000010
 8003cd0:	20001a00 	.word	0x20001a00
 8003cd4:	20001a98 	.word	0x20001a98
 8003cd8:	20001e74 	.word	0x20001e74
 8003cdc:	200019f4 	.word	0x200019f4
 8003ce0:	0802af78 	.word	0x0802af78
 8003ce4:	20000704 	.word	0x20000704
 8003ce8:	20003070 	.word	0x20003070
 8003cec:	20000758 	.word	0x20000758
 8003cf0:	20002d24 	.word	0x20002d24
 8003cf4:	200020dc 	.word	0x200020dc
 8003cf8:	0802a15c 	.word	0x0802a15c
 8003cfc:	0802aebc 	.word	0x0802aebc
 8003d00:	0802af0c 	.word	0x0802af0c
 8003d04:	0802a270 	.word	0x0802a270
 8003d08:	200025d4 	.word	0x200025d4
 8003d0c:	0802b408 	.word	0x0802b408
 8003d10:	200021dc 	.word	0x200021dc
 8003d14:	0802b114 	.word	0x0802b114
 8003d18:	20002d58 	.word	0x20002d58
 8003d1c:	0802b128 	.word	0x0802b128
 8003d20:	0802b074 	.word	0x0802b074
						gainchanged = bumppga(1);
 8003d24:	2001      	movs	r0, #1
 8003d26:	f001 fe87 	bl	8005a38 <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8003d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	f63f af74 	bhi.w	8003c1c <StarLPTask+0x8c4>
						gainchanged = bumppga(1);
 8003d34:	b203      	sxth	r3, r0
 8003d36:	9308      	str	r3, [sp, #32]
 8003d38:	e776      	b.n	8003c28 <StarLPTask+0x8d0>
					printf("GPS bad - rebooting...\n");
 8003d3a:	4808      	ldr	r0, [pc, #32]	; (8003d5c <StarLPTask+0xa04>)
 8003d3c:	f021 fbc6 	bl	80254cc <puts>
					osDelay(3000);
 8003d40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003d44:	f011 fb88 	bl	8015458 <osDelay>
					rebootme(5);
 8003d48:	2005      	movs	r0, #5
 8003d4a:	f7ff fae3 	bl	8003314 <rebootme>
 8003d4e:	4605      	mov	r5, r0
		printf("Console Rx Queue not created... rebooting...\n");
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <StarLPTask+0xa08>)
 8003d52:	f021 fbbb 	bl	80254cc <puts>
		rebootme(0);
 8003d56:	4628      	mov	r0, r5
 8003d58:	f7ff fadc 	bl	8003314 <rebootme>
 8003d5c:	0802b0fc 	.word	0x0802b0fc
 8003d60:	0802ad64 	.word	0x0802ad64

08003d64 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8003d64:	2100      	movs	r1, #0
 8003d66:	f005 b85b 	b.w	8008e20 <HAL_DAC_Stop_DMA>
 8003d6a:	bf00      	nop

08003d6c <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8003d6e:	6803      	ldr	r3, [r0, #0]
 8003d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d74:	d003      	beq.n	8003d7e <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIM_IC_CaptureCallback+0x78>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d02d      	beq.n	8003dd8 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d7e:	4c1a      	ldr	r4, [pc, #104]	; (8003de8 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_TIM_IC_CaptureCallback+0x80>)
 8003d82:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d86:	3101      	adds	r1, #1
 8003d88:	481a      	ldr	r0, [pc, #104]	; (8003df4 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8003d8a:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d8c:	fba3 5301 	umull	r5, r3, r3, r1
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8003d96:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003d9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003d9e:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003da0:	4815      	ldr	r0, [pc, #84]	; (8003df8 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8003da2:	b1b2      	cbz	r2, 8003dd2 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003da4:	f007 ff8c 	bl	800bcc0 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8003da8:	4d14      	ldr	r5, [pc, #80]	; (8003dfc <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8003daa:	2100      	movs	r1, #0
		diff = lastcap;
 8003dac:	4e14      	ldr	r6, [pc, #80]	; (8003e00 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003dae:	462b      	mov	r3, r5
 8003db0:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8003db4:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8003dbc:	4298      	cmp	r0, r3
		sum += data[i];
 8003dbe:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8003dc0:	d1f9      	bne.n	8003db6 <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8003dc2:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8003dc6:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8003dc8:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dca:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8003dcc:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003dce:	6033      	str	r3, [r6, #0]
}
 8003dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003dd2:	f007 ff5b 	bl	800bc8c <HAL_GPIO_WritePin>
 8003dd6:	e7e7      	b.n	8003da8 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8003dda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8003dde:	f021 bb75 	b.w	80254cc <puts>
 8003de2:	bf00      	nop
 8003de4:	40000800 	.word	0x40000800
 8003de8:	20002f3c 	.word	0x20002f3c
 8003dec:	88888889 	.word	0x88888889
 8003df0:	20000278 	.word	0x20000278
 8003df4:	2000075c 	.word	0x2000075c
 8003df8:	40020c00 	.word	0x40020c00
 8003dfc:	20002098 	.word	0x20002098
 8003e00:	20002d20 	.word	0x20002d20
 8003e04:	20000770 	.word	0x20000770
 8003e08:	0802b1b8 	.word	0x0802b1b8

08003e0c <getboardpcb>:
void getboardpcb() {
 8003e0c:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003e0e:	2101      	movs	r1, #1
 8003e10:	4804      	ldr	r0, [pc, #16]	; (8003e24 <getboardpcb+0x18>)
 8003e12:	f007 ff29 	bl	800bc68 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 8003e16:	2800      	cmp	r0, #0
 8003e18:	4b03      	ldr	r3, [pc, #12]	; (8003e28 <getboardpcb+0x1c>)
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2216      	moveq	r2, #22
 8003e1e:	220b      	movne	r2, #11
 8003e20:	601a      	str	r2, [r3, #0]
}
 8003e22:	bd08      	pop	{r3, pc}
 8003e24:	40020800 	.word	0x40020800
 8003e28:	2000208c 	.word	0x2000208c

08003e2c <uart2_rxdone>:
void uart2_rxdone() {
 8003e2c:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 8003e2e:	4807      	ldr	r0, [pc, #28]	; (8003e4c <uart2_rxdone+0x20>)
 8003e30:	2300      	movs	r3, #0
 8003e32:	4907      	ldr	r1, [pc, #28]	; (8003e50 <uart2_rxdone+0x24>)
 8003e34:	461a      	mov	r2, r3
 8003e36:	6800      	ldr	r0, [r0, #0]
 8003e38:	f011 ff38 	bl	8015cac <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	4904      	ldr	r1, [pc, #16]	; (8003e50 <uart2_rxdone+0x24>)
 8003e40:	4804      	ldr	r0, [pc, #16]	; (8003e54 <uart2_rxdone+0x28>)
}
 8003e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003e46:	f00f ba31 	b.w	80132ac <HAL_UART_Receive_IT>
 8003e4a:	bf00      	nop
 8003e4c:	20002094 	.word	0x20002094
 8003e50:	20002090 	.word	0x20002090
 8003e54:	20002980 	.word	0x20002980

08003e58 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003e5a:	6803      	ldr	r3, [r0, #0]
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d029      	beq.n	8003eb4 <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8003e60:	4a24      	ldr	r2, [pc, #144]	; (8003ef4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d02d      	beq.n	8003ec2 <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8003e66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d030      	beq.n	8003ed4 <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8003e72:	4a22      	ldr	r2, [pc, #136]	; (8003efc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d005      	beq.n	8003e84 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8003e78:	4a21      	ldr	r2, [pc, #132]	; (8003f00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01f      	beq.n	8003ebe <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8003e7e:	4821      	ldr	r0, [pc, #132]	; (8003f04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003e80:	f021 bb24 	b.w	80254cc <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e84:	b510      	push	{r4, lr}
		t1sec++;
 8003e86:	4920      	ldr	r1, [pc, #128]	; (8003f08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8003e88:	4c20      	ldr	r4, [pc, #128]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8003e8a:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003e8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8003e8e:	4820      	ldr	r0, [pc, #128]	; (8003f10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8003e90:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8003e92:	3301      	adds	r3, #1
		if (netup)
 8003e94:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8003e96:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003e98:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8003e9a:	b110      	cbz	r0, 8003ea2 <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8003e9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8003ea2:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	b9c3      	cbnz	r3, 8003eda <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8003ea8:	4a1b      	ldr	r2, [pc, #108]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8003eaa:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8003eac:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8003eae:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 8003eb2:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8003eb4:	4a19      	ldr	r2, [pc, #100]	; (8003f1c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003eb6:	6813      	ldr	r3, [r2, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6013      	str	r3, [r2, #0]
		return;
 8003ebc:	4770      	bx	lr
		HAL_IncTick();
 8003ebe:	f004 b957 	b.w	8008170 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8003ec2:	f7fc bce3 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8003ec6:	4a11      	ldr	r2, [pc, #68]	; (8003f0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003ec8:	4b15      	ldr	r3, [pc, #84]	; (8003f20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003eca:	4816      	ldr	r0, [pc, #88]	; (8003f24 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003ecc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	f021 ba60 	b.w	8025394 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8003ed4:	4814      	ldr	r0, [pc, #80]	; (8003f28 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003ed6:	f021 baf9 	b.w	80254cc <puts>
			statuspkt.gpsuptime++;
 8003eda:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003edc:	3301      	adds	r3, #1
 8003ede:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8003ee0:	f001 f888 	bl	8004ff4 <calcepoch32>
				epochvalid = 1;
 8003ee4:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003ee6:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8003ee8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8003eec:	701a      	strb	r2, [r3, #0]
}
 8003eee:	bd10      	pop	{r4, pc}
 8003ef0:	40002000 	.word	0x40002000
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40001000 	.word	0x40001000
 8003f00:	40001800 	.word	0x40001800
 8003f04:	0802b208 	.word	0x0802b208
 8003f08:	20002d54 	.word	0x20002d54
 8003f0c:	20002f3c 	.word	0x20002f3c
 8003f10:	20000752 	.word	0x20000752
 8003f14:	200030e8 	.word	0x200030e8
 8003f18:	200030e0 	.word	0x200030e0
 8003f1c:	20002d4c 	.word	0x20002d4c
 8003f20:	20000770 	.word	0x20000770
 8003f24:	0802b1c8 	.word	0x0802b1c8
 8003f28:	0802b1ec 	.word	0x0802b1ec

08003f2c <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8003f2c:	4c02      	ldr	r4, [pc, #8]	; (8003f38 <Error_Handler+0xc>)
void Error_Handler(void) {
 8003f2e:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8003f30:	4620      	mov	r0, r4
 8003f32:	f021 facb 	bl	80254cc <puts>
	while (1) {
 8003f36:	e7fb      	b.n	8003f30 <Error_Handler+0x4>
 8003f38:	0802b230 	.word	0x0802b230

08003f3c <SystemClock_Config>:
void SystemClock_Config(void) {
 8003f3c:	b530      	push	{r4, r5, lr}
 8003f3e:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f40:	2234      	movs	r2, #52	; 0x34
 8003f42:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f44:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003f46:	a807      	add	r0, sp, #28
 8003f48:	f020 fa86 	bl	8024458 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f52:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f56:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 8003f58:	f009 faac 	bl	800d4b4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4a20      	ldr	r2, [pc, #128]	; (8003fe0 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003f5e:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f60:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003f64:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003f68:	6411      	str	r1, [r2, #64]	; 0x40
 8003f6a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f6c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003f70:	9200      	str	r2, [sp, #0]
 8003f72:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003f7a:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8003f7c:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f7e:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f80:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003f86:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003f88:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f8a:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f92:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f96:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003f9c:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003f9e:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fa0:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003fa2:	23d8      	movs	r3, #216	; 0xd8
 8003fa4:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8003fa8:	2306      	movs	r3, #6
 8003faa:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003fac:	f009 fac4 	bl	800d538 <HAL_RCC_OscConfig>
 8003fb0:	b9a0      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8003fb2:	f009 fa87 	bl	800d4c4 <HAL_PWREx_EnableOverDrive>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	b980      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fba:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fbc:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8003fc0:	a802      	add	r0, sp, #8
 8003fc2:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fc4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003fcc:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003fd0:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8003fd2:	f009 fd87 	bl	800dae4 <HAL_RCC_ClockConfig>
 8003fd6:	b908      	cbnz	r0, 8003fdc <SystemClock_Config+0xa0>
}
 8003fd8:	b015      	add	sp, #84	; 0x54
 8003fda:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8003fdc:	f7ff ffa6 	bl	8003f2c <Error_Handler>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40007000 	.word	0x40007000

08003fe8 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003fec:	228c      	movs	r2, #140	; 0x8c
 8003fee:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003ff0:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003ff2:	a801      	add	r0, sp, #4
 8003ff4:	f020 fa30 	bl	8024458 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003ff8:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003ffa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003ffe:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004000:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8004002:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8004004:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004008:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800400a:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800400c:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 800400e:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8004010:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004012:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8004016:	f009 fecb 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 800401a:	b908      	cbnz	r0, 8004020 <PeriphCommonClock_Config+0x38>
}
 800401c:	b024      	add	sp, #144	; 0x90
 800401e:	bd10      	pop	{r4, pc}
		Error_Handler();
 8004020:	f7ff ff84 	bl	8003f2c <Error_Handler>

08004024 <main>:
int main(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 8004028:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800402c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004030:	4bc2      	ldr	r3, [pc, #776]	; (800433c <main+0x318>)
 8004032:	2400      	movs	r4, #0
 8004034:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 8004038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800403c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004040:	695a      	ldr	r2, [r3, #20]
 8004042:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004046:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 8004048:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800404c:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004050:	4dbb      	ldr	r5, [pc, #748]	; (8004340 <main+0x31c>)
	HAL_Init();
 8004052:	f004 f87b 	bl	800814c <HAL_Init>
	SystemClock_Config();
 8004056:	f7ff ff71 	bl	8003f3c <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800405a:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 800405c:	f7ff ffc4 	bl	8003fe8 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004060:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8004062:	4622      	mov	r2, r4
 8004064:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004068:	48b6      	ldr	r0, [pc, #728]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800406a:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800406e:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004070:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 8004074:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004078:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 800407c:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004080:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004082:	f043 0310 	orr.w	r3, r3, #16
 8004086:	632b      	str	r3, [r5, #48]	; 0x30
 8004088:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800408a:	f003 0310 	and.w	r3, r3, #16
 800408e:	9303      	str	r3, [sp, #12]
 8004090:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004092:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	632b      	str	r3, [r5, #48]	; 0x30
 800409a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80040a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040a6:	f043 0320 	orr.w	r3, r3, #32
 80040aa:	632b      	str	r3, [r5, #48]	; 0x30
 80040ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	9305      	str	r3, [sp, #20]
 80040b4:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80040b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040bc:	632b      	str	r3, [r5, #48]	; 0x30
 80040be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040c4:	9306      	str	r3, [sp, #24]
 80040c6:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80040c8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	632b      	str	r3, [r5, #48]	; 0x30
 80040d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	9307      	str	r3, [sp, #28]
 80040d8:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040dc:	f043 0302 	orr.w	r3, r3, #2
 80040e0:	632b      	str	r3, [r5, #48]	; 0x30
 80040e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	9308      	str	r3, [sp, #32]
 80040ea:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80040ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f2:	632b      	str	r3, [r5, #48]	; 0x30
 80040f4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80040f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fa:	9309      	str	r3, [sp, #36]	; 0x24
 80040fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80040fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004100:	f043 0308 	orr.w	r3, r3, #8
 8004104:	632b      	str	r3, [r5, #48]	; 0x30
 8004106:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	930a      	str	r3, [sp, #40]	; 0x28
 800410e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8004110:	f007 fdbc 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8004114:	4622      	mov	r2, r4
 8004116:	f644 0181 	movw	r1, #18561	; 0x4881
 800411a:	488b      	ldr	r0, [pc, #556]	; (8004348 <main+0x324>)
 800411c:	f007 fdb6 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8004120:	4622      	mov	r2, r4
 8004122:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8004126:	4889      	ldr	r0, [pc, #548]	; (800434c <main+0x328>)
 8004128:	f007 fdb0 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 800412c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8004130:	4887      	ldr	r0, [pc, #540]	; (8004350 <main+0x32c>)
 8004132:	2201      	movs	r2, #1
 8004134:	f007 fdaa 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004138:	4622      	mov	r2, r4
 800413a:	2144      	movs	r1, #68	; 0x44
 800413c:	4885      	ldr	r0, [pc, #532]	; (8004354 <main+0x330>)
 800413e:	f007 fda5 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8004142:	4622      	mov	r2, r4
 8004144:	2102      	movs	r1, #2
 8004146:	4882      	ldr	r0, [pc, #520]	; (8004350 <main+0x32c>)
 8004148:	f007 fda0 	bl	800bc8c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 800414c:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004150:	a955      	add	r1, sp, #340	; 0x154
 8004152:	487e      	ldr	r0, [pc, #504]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 8004154:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004156:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800415a:	f007 faeb 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800415e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004162:	a955      	add	r1, sp, #340	; 0x154
 8004164:	487c      	ldr	r0, [pc, #496]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004166:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004168:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800416e:	f007 fae1 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8004172:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004176:	a955      	add	r1, sp, #340	; 0x154
 8004178:	4872      	ldr	r0, [pc, #456]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 800417a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004180:	f007 fad8 	bl	800b734 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004184:	a955      	add	r1, sp, #340	; 0x154
 8004186:	486f      	ldr	r0, [pc, #444]	; (8004344 <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8004188:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800418c:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004190:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8004194:	f007 face 	bl	800b734 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004198:	a955      	add	r1, sp, #340	; 0x154
 800419a:	486f      	ldr	r0, [pc, #444]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800419c:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800419e:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f007 fac7 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041a6:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a8:	a955      	add	r1, sp, #340	; 0x154
 80041aa:	486c      	ldr	r0, [pc, #432]	; (800435c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80041ac:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ae:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b2:	f007 fabf 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80041b6:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041ba:	a955      	add	r1, sp, #340	; 0x154
 80041bc:	4862      	ldr	r0, [pc, #392]	; (8004348 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 80041be:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c0:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041c6:	f007 fab5 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80041ca:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041cc:	a955      	add	r1, sp, #340	; 0x154
 80041ce:	485e      	ldr	r0, [pc, #376]	; (8004348 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 80041d0:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d2:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041d6:	f007 faad 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80041da:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041de:	a955      	add	r1, sp, #340	; 0x154
 80041e0:	485c      	ldr	r0, [pc, #368]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 80041e2:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e4:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041e8:	f007 faa4 	bl	800b734 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041ec:	a955      	add	r1, sp, #340	; 0x154
 80041ee:	4857      	ldr	r0, [pc, #348]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f0:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80041f2:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041f6:	f007 fa9d 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 80041fa:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041fe:	a955      	add	r1, sp, #340	; 0x154
 8004200:	4852      	ldr	r0, [pc, #328]	; (800434c <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8004202:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004204:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800420a:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004212:	f007 fa8f 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8004216:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800421a:	a955      	add	r1, sp, #340	; 0x154
 800421c:	484c      	ldr	r0, [pc, #304]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 800421e:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004224:	f007 fa86 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004228:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800422c:	a955      	add	r1, sp, #340	; 0x154
 800422e:	4848      	ldr	r0, [pc, #288]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8004230:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004232:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004234:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004238:	f007 fa7c 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 800423c:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800423e:	a955      	add	r1, sp, #340	; 0x154
 8004240:	4844      	ldr	r0, [pc, #272]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8004242:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004244:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004246:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800424a:	f007 fa73 	bl	800b734 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800424e:	a955      	add	r1, sp, #340	; 0x154
 8004250:	4840      	ldr	r0, [pc, #256]	; (8004354 <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8004252:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800425a:	f007 fa6b 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800425e:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004262:	a955      	add	r1, sp, #340	; 0x154
 8004264:	483c      	ldr	r0, [pc, #240]	; (8004358 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8004266:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004268:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426c:	f007 fa62 	bl	800b734 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004270:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004274:	a955      	add	r1, sp, #340	; 0x154
 8004276:	4839      	ldr	r0, [pc, #228]	; (800435c <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004278:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800427a:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 800427c:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004280:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004284:	f007 fa56 	bl	800b734 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004288:	a955      	add	r1, sp, #340	; 0x154
 800428a:	4831      	ldr	r0, [pc, #196]	; (8004350 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800428c:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004290:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8004294:	f007 fa4e 	bl	800b734 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004298:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800429a:	4639      	mov	r1, r7
 800429c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800429e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80042a2:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 80042a4:	632b      	str	r3, [r5, #48]	; 0x30
 80042a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 80042b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80042b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80042b6:	632b      	str	r3, [r5, #48]	; 0x30
 80042b8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 80042ba:	4d29      	ldr	r5, [pc, #164]	; (8004360 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	9302      	str	r3, [sp, #8]
 80042c2:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 80042c4:	f004 fbb8 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80042c8:	200b      	movs	r0, #11
 80042ca:	f004 fbff 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80042ce:	4622      	mov	r2, r4
 80042d0:	2106      	movs	r1, #6
 80042d2:	4650      	mov	r0, sl
 80042d4:	f004 fbb0 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80042d8:	4650      	mov	r0, sl
 80042da:	f004 fbf7 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80042de:	4622      	mov	r2, r4
 80042e0:	2106      	movs	r1, #6
 80042e2:	2010      	movs	r0, #16
 80042e4:	f004 fba8 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80042e8:	2010      	movs	r0, #16
 80042ea:	f004 fbef 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 80042ee:	4622      	mov	r2, r4
 80042f0:	4639      	mov	r1, r7
 80042f2:	2011      	movs	r0, #17
 80042f4:	f004 fba0 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80042f8:	2011      	movs	r0, #17
 80042fa:	f004 fbe7 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 80042fe:	4622      	mov	r2, r4
 8004300:	4639      	mov	r1, r7
 8004302:	202f      	movs	r0, #47	; 0x2f
 8004304:	f004 fb98 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8004308:	202f      	movs	r0, #47	; 0x2f
 800430a:	f004 fbdf 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 800430e:	4622      	mov	r2, r4
 8004310:	2106      	movs	r1, #6
 8004312:	2039      	movs	r0, #57	; 0x39
 8004314:	f004 fb90 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004318:	2039      	movs	r0, #57	; 0x39
 800431a:	f004 fbd7 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 800431e:	4622      	mov	r2, r4
 8004320:	4649      	mov	r1, r9
 8004322:	203c      	movs	r0, #60	; 0x3c
 8004324:	f004 fb88 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004328:	203c      	movs	r0, #60	; 0x3c
 800432a:	f004 fbcf 	bl	8008acc <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 800432e:	4622      	mov	r2, r4
 8004330:	4639      	mov	r1, r7
 8004332:	2045      	movs	r0, #69	; 0x45
 8004334:	f004 fb80 	bl	8008a38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004338:	2045      	movs	r0, #69	; 0x45
 800433a:	e013      	b.n	8004364 <main+0x340>
 800433c:	e000ed00 	.word	0xe000ed00
 8004340:	40023800 	.word	0x40023800
 8004344:	40021400 	.word	0x40021400
 8004348:	40020400 	.word	0x40020400
 800434c:	40021000 	.word	0x40021000
 8004350:	40020c00 	.word	0x40020c00
 8004354:	40021800 	.word	0x40021800
 8004358:	40020800 	.word	0x40020800
 800435c:	40020000 	.word	0x40020000
 8004360:	40004400 	.word	0x40004400
 8004364:	f004 fbb2 	bl	8008acc <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8004368:	48bd      	ldr	r0, [pc, #756]	; (8004660 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 800436a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800436e:	4622      	mov	r2, r4
 8004370:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004372:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004376:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8004378:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800437c:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 800437e:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004382:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004386:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 800438a:	f00f f831 	bl	80133f0 <HAL_RS485Ex_Init>
 800438e:	2800      	cmp	r0, #0
 8004390:	f040 8446 	bne.w	8004c20 <main+0xbfc>
	hadc1.Instance = ADC1;
 8004394:	4cb3      	ldr	r4, [pc, #716]	; (8004664 <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004396:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800439a:	4bb3      	ldr	r3, [pc, #716]	; (8004668 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 800439c:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800439e:	9045      	str	r0, [sp, #276]	; 0x114
 80043a0:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80043a2:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80043a4:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043a6:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043aa:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043ac:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80043ae:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80043b0:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 80043b2:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80043b4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80043b8:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043bc:	4bab      	ldr	r3, [pc, #684]	; (800466c <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 80043be:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80043c2:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80043c6:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043c8:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80043ca:	f003 fef5 	bl	80081b8 <HAL_ADC_Init>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	f040 8426 	bne.w	8004c20 <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 80043d8:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043da:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80043dc:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 80043de:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80043e2:	4620      	mov	r0, r4
 80043e4:	f004 faa8 	bl	8008938 <HAL_ADCEx_MultiModeConfigChannel>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	f040 8419 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80043ee:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043f0:	a945      	add	r1, sp, #276	; 0x114
 80043f2:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80043f4:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80043f8:	f004 f9aa 	bl	8008750 <HAL_ADC_ConfigChannel>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	f040 840f 	bne.w	8004c20 <main+0xbfc>
	hadc2.Instance = ADC2;
 8004402:	4c9b      	ldr	r4, [pc, #620]	; (8004670 <main+0x64c>)
 8004404:	4b9b      	ldr	r3, [pc, #620]	; (8004674 <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004406:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004408:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800440c:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 800440e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004412:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8004414:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8004416:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8004418:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800441a:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 800441e:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004422:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8004426:	4620      	mov	r0, r4
 8004428:	f003 fec6 	bl	80081b8 <HAL_ADC_Init>
 800442c:	2800      	cmp	r0, #0
 800442e:	f040 83f7 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004432:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8004434:	a941      	add	r1, sp, #260	; 0x104
 8004436:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8004438:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 800443c:	f004 f988 	bl	8008750 <HAL_ADC_ConfigChannel>
 8004440:	2800      	cmp	r0, #0
 8004442:	f040 83ed 	bne.w	8004c20 <main+0xbfc>
	hadc3.Instance = ADC3;
 8004446:	4c8c      	ldr	r4, [pc, #560]	; (8004678 <main+0x654>)
 8004448:	4b8c      	ldr	r3, [pc, #560]	; (800467c <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800444a:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800444c:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004450:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8004452:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004456:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8004458:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 800445a:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 800445c:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 800445e:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8004462:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004466:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 800446a:	4620      	mov	r0, r4
 800446c:	f003 fea4 	bl	80081b8 <HAL_ADC_Init>
 8004470:	2800      	cmp	r0, #0
 8004472:	f040 83d5 	bne.w	8004c20 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004476:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004478:	a93d      	add	r1, sp, #244	; 0xf4
 800447a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800447c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8004480:	f004 f966 	bl	8008750 <HAL_ADC_ConfigChannel>
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 83cb 	bne.w	8004c20 <main+0xbfc>
	hrng.Instance = RNG;
 800448a:	487d      	ldr	r0, [pc, #500]	; (8004680 <main+0x65c>)
 800448c:	4b7d      	ldr	r3, [pc, #500]	; (8004684 <main+0x660>)
 800448e:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8004490:	f00a f96e 	bl	800e770 <HAL_RNG_Init>
 8004494:	2800      	cmp	r0, #0
 8004496:	f040 83c3 	bne.w	8004c20 <main+0xbfc>
	htim6.Instance = TIM6;
 800449a:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 800449c:	f642 2230 	movw	r2, #10800	; 0x2a30
 80044a0:	497a      	ldr	r1, [pc, #488]	; (800468c <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044a2:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a4:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044a6:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 80044aa:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 80044ae:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044b2:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80044b6:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 80044b8:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80044ba:	f00b ff49 	bl	8010350 <HAL_TIM_Base_Init>
 80044be:	2800      	cmp	r0, #0
 80044c0:	f040 83ae 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80044c4:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80044c6:	a91f      	add	r1, sp, #124	; 0x7c
 80044c8:	486f      	ldr	r0, [pc, #444]	; (8004688 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80044ca:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 80044d0:	f00d fba8 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f040 83a3 	bne.w	8004c20 <main+0xbfc>
	htim3.Instance = TIM3;
 80044da:	4c6d      	ldr	r4, [pc, #436]	; (8004690 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 80044dc:	f642 2330 	movw	r3, #10800	; 0x2a30
 80044e0:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80046b4 <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044e4:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80044e6:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044e8:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80044ea:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044ec:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ee:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80044f0:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044f2:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 80044f4:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 80044f8:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80044fc:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8004500:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8004504:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004508:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800450c:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004510:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8004512:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004514:	f00b ff1c 	bl	8010350 <HAL_TIM_Base_Init>
 8004518:	2800      	cmp	r0, #0
 800451a:	f040 8381 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800451e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004522:	a939      	add	r1, sp, #228	; 0xe4
 8004524:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004526:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8004528:	f00b f9a8 	bl	800f87c <HAL_TIM_ConfigClockSource>
 800452c:	2800      	cmp	r0, #0
 800452e:	f040 8377 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8004532:	4620      	mov	r0, r4
 8004534:	f00c f8a8 	bl	8010688 <HAL_TIM_PWM_Init>
 8004538:	2800      	cmp	r0, #0
 800453a:	f040 8371 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800453e:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004540:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004542:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8004544:	4620      	mov	r0, r4
 8004546:	f00d fb6d 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 800454a:	2800      	cmp	r0, #0
 800454c:	f040 8368 	bne.w	8004c20 <main+0xbfc>
	sConfigOC.Pulse = 10;
 8004550:	230a      	movs	r3, #10
 8004552:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004556:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004558:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800455a:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 800455c:	a955      	add	r1, sp, #340	; 0x154
 800455e:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8004560:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8004564:	f00c fc0e 	bl	8010d84 <HAL_TIM_PWM_ConfigChannel>
 8004568:	4605      	mov	r5, r0
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 8358 	bne.w	8004c20 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8004570:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8004572:	4c48      	ldr	r4, [pc, #288]	; (8004694 <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8004574:	f002 fa44 	bl	8006a00 <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8004578:	4b47      	ldr	r3, [pc, #284]	; (8004698 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800457a:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800457c:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 800457e:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8004580:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004584:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8004586:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004588:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800458c:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8004590:	f00b fede 	bl	8010350 <HAL_TIM_Base_Init>
 8004594:	2800      	cmp	r0, #0
 8004596:	f040 8343 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800459a:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800459c:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 800459e:	a919      	add	r1, sp, #100	; 0x64
 80045a0:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80045a2:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 80045a4:	f00d fb3e 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	f040 8339 	bne.w	8004c20 <main+0xbfc>
	htim1.Instance = TIM1;
 80045ae:	4c3b      	ldr	r4, [pc, #236]	; (800469c <main+0x678>)
 80045b0:	4b3b      	ldr	r3, [pc, #236]	; (80046a0 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045b2:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 80045b4:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 80045b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80045ba:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 80045bc:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80045be:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 80045c2:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 80045ca:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80045ce:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80045d2:	4620      	mov	r0, r4
 80045d4:	f00b febc 	bl	8010350 <HAL_TIM_Base_Init>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f040 8321 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80045de:	a935      	add	r1, sp, #212	; 0xd4
 80045e0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045e2:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80045e4:	f00b f94a 	bl	800f87c <HAL_TIM_ConfigClockSource>
 80045e8:	2800      	cmp	r0, #0
 80045ea:	f040 8319 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045ee:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80045f0:	a916      	add	r1, sp, #88	; 0x58
 80045f2:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045f4:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80045f6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 80045fa:	f00d fb13 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 80045fe:	4603      	mov	r3, r0
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 830d 	bne.w	8004c20 <main+0xbfc>
	hcrc.Instance = CRC;
 8004606:	4827      	ldr	r0, [pc, #156]	; (80046a4 <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004608:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800460a:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800460c:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800460e:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8004612:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <main+0x684>)
 8004614:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8004616:	f004 fa87 	bl	8008b28 <HAL_CRC_Init>
 800461a:	2800      	cmp	r0, #0
 800461c:	f040 8300 	bne.w	8004c20 <main+0xbfc>
	htim2.Instance = TIM2;
 8004620:	4c22      	ldr	r4, [pc, #136]	; (80046ac <main+0x688>)
 8004622:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004626:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004628:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 800462a:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 800462c:	4b20      	ldr	r3, [pc, #128]	; (80046b0 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800462e:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004630:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004632:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8004634:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004636:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004638:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800463a:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 800463c:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800463e:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8004642:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8004646:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800464a:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800464e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004652:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8004656:	4620      	mov	r0, r4
 8004658:	f00b fe7a 	bl	8010350 <HAL_TIM_Base_Init>
 800465c:	e02c      	b.n	80046b8 <main+0x694>
 800465e:	bf00      	nop
 8004660:	20002980 	.word	0x20002980
 8004664:	200020e0 	.word	0x200020e0
 8004668:	40012000 	.word	0x40012000
 800466c:	0f000001 	.word	0x0f000001
 8004670:	20002128 	.word	0x20002128
 8004674:	40012100 	.word	0x40012100
 8004678:	20002170 	.word	0x20002170
 800467c:	40012200 	.word	0x40012200
 8004680:	200025e4 	.word	0x200025e4
 8004684:	50060800 	.word	0x50060800
 8004688:	200028e8 	.word	0x200028e8
 800468c:	40001000 	.word	0x40001000
 8004690:	20002804 	.word	0x20002804
 8004694:	20002934 	.word	0x20002934
 8004698:	40001400 	.word	0x40001400
 800469c:	20002720 	.word	0x20002720
 80046a0:	40010000 	.word	0x40010000
 80046a4:	200021b8 	.word	0x200021b8
 80046a8:	40023000 	.word	0x40023000
 80046ac:	200027b8 	.word	0x200027b8
 80046b0:	ee6b2800 	.word	0xee6b2800
 80046b4:	40000400 	.word	0x40000400
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f040 82b1 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80046c2:	a92d      	add	r1, sp, #180	; 0xb4
 80046c4:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046c6:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80046c8:	f00b f8d8 	bl	800f87c <HAL_TIM_ConfigClockSource>
 80046cc:	2800      	cmp	r0, #0
 80046ce:	f040 82a7 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80046d2:	4620      	mov	r0, r4
 80046d4:	f00c f8a6 	bl	8010824 <HAL_TIM_IC_Init>
 80046d8:	2800      	cmp	r0, #0
 80046da:	f040 82a1 	bne.w	8004c20 <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80046de:	2704      	movs	r7, #4
 80046e0:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80046e2:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046e4:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 80046e6:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046e8:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80046ea:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 80046ee:	f00b fb9f 	bl	800fe30 <HAL_TIM_SlaveConfigSynchro>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f040 8294 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046f8:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80046fa:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046fc:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80046fe:	4620      	mov	r0, r4
 8004700:	f00d fa90 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 8004704:	4602      	mov	r2, r0
 8004706:	2800      	cmp	r0, #0
 8004708:	f040 828a 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800470c:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800470e:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8004712:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8004716:	4620      	mov	r0, r4
 8004718:	f00c fd54 	bl	80111c4 <HAL_TIM_IC_ConfigChannel>
 800471c:	2800      	cmp	r0, #0
 800471e:	f040 827f 	bne.w	8004c20 <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8004722:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8004724:	463a      	mov	r2, r7
 8004726:	a931      	add	r1, sp, #196	; 0xc4
 8004728:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800472a:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 800472c:	f00c fd4a 	bl	80111c4 <HAL_TIM_IC_ConfigChannel>
 8004730:	2800      	cmp	r0, #0
 8004732:	f040 8275 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8004736:	a931      	add	r1, sp, #196	; 0xc4
 8004738:	4620      	mov	r0, r4
 800473a:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800473c:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 800473e:	f00c fd41 	bl	80111c4 <HAL_TIM_IC_ConfigChannel>
 8004742:	2800      	cmp	r0, #0
 8004744:	f040 826c 	bne.w	8004c20 <main+0xbfc>
	huart6.Instance = USART6;
 8004748:	48c1      	ldr	r0, [pc, #772]	; (8004a50 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800474a:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 800474c:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004750:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8004752:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004754:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8004756:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8004758:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800475c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8004760:	4bbc      	ldr	r3, [pc, #752]	; (8004a54 <main+0xa30>)
 8004762:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004766:	2310      	movs	r3, #16
 8004768:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800476a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800476e:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8004770:	f00e fc26 	bl	8012fc0 <HAL_UART_Init>
 8004774:	2800      	cmp	r0, #0
 8004776:	f040 8253 	bne.w	8004c20 <main+0xbfc>
	hdac.Instance = DAC;
 800477a:	4cb7      	ldr	r4, [pc, #732]	; (8004a58 <main+0xa34>)
 800477c:	4bb7      	ldr	r3, [pc, #732]	; (8004a5c <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 800477e:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004782:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 8004784:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 8004786:	f004 fa8b 	bl	8008ca0 <HAL_DAC_Init>
 800478a:	4602      	mov	r2, r0
 800478c:	2800      	cmp	r0, #0
 800478e:	f040 8247 	bne.w	8004c20 <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004792:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8004794:	4620      	mov	r0, r4
 8004796:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004798:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800479a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800479c:	f004 fbdc 	bl	8008f58 <HAL_DAC_ConfigChannel>
 80047a0:	4607      	mov	r7, r0
 80047a2:	2800      	cmp	r0, #0
 80047a4:	f040 823c 	bne.w	8004c20 <main+0xbfc>
	MX_FATFS_Init();
 80047a8:	f00f fc7e 	bl	80140a8 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 80047ac:	4cac      	ldr	r4, [pc, #688]	; (8004a60 <main+0xa3c>)
 80047ae:	4bad      	ldr	r3, [pc, #692]	; (8004a64 <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80047b0:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 80047b2:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 80047b4:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 80047b6:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047ba:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 80047bc:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 80047c0:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047c2:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 80047c4:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047c8:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047cc:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80047ce:	f007 fc91 	bl	800c0f4 <HAL_I2C_Init>
 80047d2:	4601      	mov	r1, r0
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f040 8223 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80047da:	4620      	mov	r0, r4
 80047dc:	f007 ffe2 	bl	800c7a4 <HAL_I2CEx_ConfigAnalogFilter>
 80047e0:	4601      	mov	r1, r0
 80047e2:	2800      	cmp	r0, #0
 80047e4:	f040 821c 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80047e8:	4620      	mov	r0, r4
 80047ea:	f008 f82d 	bl	800c848 <HAL_I2CEx_ConfigDigitalFilter>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2800      	cmp	r0, #0
 80047f2:	f040 8215 	bne.w	8004c20 <main+0xbfc>
	huart4.Instance = UART4;
 80047f6:	489c      	ldr	r0, [pc, #624]	; (8004a68 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 80047f8:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80047fc:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004800:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004802:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8004804:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8004808:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800480c:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8004810:	4b96      	ldr	r3, [pc, #600]	; (8004a6c <main+0xa48>)
 8004812:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8004816:	f00e fbd3 	bl	8012fc0 <HAL_UART_Init>
 800481a:	4603      	mov	r3, r0
 800481c:	2800      	cmp	r0, #0
 800481e:	f040 81ff 	bne.w	8004c20 <main+0xbfc>
	huart5.Instance = UART5;
 8004822:	4893      	ldr	r0, [pc, #588]	; (8004a70 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004824:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 8004828:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800482c:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004830:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004834:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 8004836:	4b8f      	ldr	r3, [pc, #572]	; (8004a74 <main+0xa50>)
 8004838:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800483a:	f00e fbc1 	bl	8012fc0 <HAL_UART_Init>
 800483e:	4602      	mov	r2, r0
 8004840:	2800      	cmp	r0, #0
 8004842:	f040 81ed 	bne.w	8004c20 <main+0xbfc>
	huart3.Instance = USART3;
 8004846:	488c      	ldr	r0, [pc, #560]	; (8004a78 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8004848:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 800484a:	4b8c      	ldr	r3, [pc, #560]	; (8004a7c <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 800484c:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 800484e:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004850:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004852:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004854:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004858:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800485c:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 8004860:	f00e fc5c 	bl	801311c <HAL_MultiProcessor_Init>
 8004864:	4603      	mov	r3, r0
 8004866:	2800      	cmp	r0, #0
 8004868:	f040 81da 	bne.w	8004c20 <main+0xbfc>
	hspi4.Instance = SPI4;
 800486c:	4884      	ldr	r0, [pc, #528]	; (8004a80 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800486e:	4a85      	ldr	r2, [pc, #532]	; (8004a84 <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004870:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004872:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004876:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800487a:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8004882:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004886:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800488a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800488e:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8004890:	2307      	movs	r3, #7
 8004892:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004894:	2308      	movs	r3, #8
 8004896:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8004898:	f00a f8a0 	bl	800e9dc <HAL_SPI_Init>
 800489c:	2800      	cmp	r0, #0
 800489e:	f040 81bf 	bne.w	8004c20 <main+0xbfc>
	hspi3.Instance = SPI3;
 80048a2:	4879      	ldr	r0, [pc, #484]	; (8004a88 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 80048a4:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80048a6:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048aa:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80048ac:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 80048ae:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80048b0:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 80048b2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80048b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80048bc:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80048c0:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 80048c4:	4b71      	ldr	r3, [pc, #452]	; (8004a8c <main+0xa68>)
 80048c6:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80048c8:	f00a f888 	bl	800e9dc <HAL_SPI_Init>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f040 81a6 	bne.w	8004c20 <main+0xbfc>
	hspi2.Instance = SPI2;
 80048d4:	486e      	ldr	r0, [pc, #440]	; (8004a90 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80048d6:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8004ac0 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048da:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80048de:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80048e0:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 80048e2:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80048e8:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80048ec:	f44f 7382 	mov.w	r3, #260	; 0x104
 80048f0:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80048f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80048f8:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80048fa:	2338      	movs	r3, #56	; 0x38
 80048fc:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80048fe:	2308      	movs	r3, #8
 8004900:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8004902:	f00a f86b 	bl	800e9dc <HAL_SPI_Init>
 8004906:	2800      	cmp	r0, #0
 8004908:	f040 818a 	bne.w	8004c20 <main+0xbfc>
	hi2c4.Instance = I2C4;
 800490c:	4c61      	ldr	r4, [pc, #388]	; (8004a94 <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800490e:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8004910:	4b61      	ldr	r3, [pc, #388]	; (8004a98 <main+0xa74>)
 8004912:	4f62      	ldr	r7, [pc, #392]	; (8004a9c <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 8004914:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004916:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004918:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 800491a:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800491e:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004922:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 8004924:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 8004928:	f007 fbe4 	bl	800c0f4 <HAL_I2C_Init>
 800492c:	4601      	mov	r1, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	f040 8176 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004934:	4620      	mov	r0, r4
 8004936:	f007 ff35 	bl	800c7a4 <HAL_I2CEx_ConfigAnalogFilter>
 800493a:	4601      	mov	r1, r0
 800493c:	2800      	cmp	r0, #0
 800493e:	f040 816f 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 8004942:	4620      	mov	r0, r4
 8004944:	f007 ff80 	bl	800c848 <HAL_I2CEx_ConfigDigitalFilter>
 8004948:	2800      	cmp	r0, #0
 800494a:	f040 8169 	bne.w	8004c20 <main+0xbfc>
	hi2c2.Instance = I2C2;
 800494e:	4c54      	ldr	r4, [pc, #336]	; (8004aa0 <main+0xa7c>)
 8004950:	4b54      	ldr	r3, [pc, #336]	; (8004aa4 <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004952:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 8004954:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 8004956:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 8004958:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 800495c:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004960:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8004964:	4620      	mov	r0, r4
 8004966:	f007 fbc5 	bl	800c0f4 <HAL_I2C_Init>
 800496a:	4601      	mov	r1, r0
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 8157 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004972:	4620      	mov	r0, r4
 8004974:	f007 ff16 	bl	800c7a4 <HAL_I2CEx_ConfigAnalogFilter>
 8004978:	4601      	mov	r1, r0
 800497a:	2800      	cmp	r0, #0
 800497c:	f040 8150 	bne.w	8004c20 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004980:	4620      	mov	r0, r4
 8004982:	f007 ff61 	bl	800c848 <HAL_I2CEx_ConfigDigitalFilter>
 8004986:	2800      	cmp	r0, #0
 8004988:	f040 814a 	bne.w	8004c20 <main+0xbfc>
	htim4.Instance = TIM4;
 800498c:	4c46      	ldr	r4, [pc, #280]	; (8004aa8 <main+0xa84>)
 800498e:	4b47      	ldr	r3, [pc, #284]	; (8004aac <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004990:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 8004992:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 8004994:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004998:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 800499a:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800499c:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800499e:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049a0:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80049a2:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049a4:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80049a6:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80049aa:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 80049ae:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 80049b2:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80049ba:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80049be:	4620      	mov	r0, r4
 80049c0:	f00b fcc6 	bl	8010350 <HAL_TIM_Base_Init>
 80049c4:	2800      	cmp	r0, #0
 80049c6:	f040 812b 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80049ce:	a929      	add	r1, sp, #164	; 0xa4
 80049d0:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049d2:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80049d4:	f00a ff52 	bl	800f87c <HAL_TIM_ConfigClockSource>
 80049d8:	2800      	cmp	r0, #0
 80049da:	f040 8121 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80049de:	4620      	mov	r0, r4
 80049e0:	f00b fd84 	bl	80104ec <HAL_TIM_OC_Init>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	f040 811b 	bne.w	8004c20 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80049ea:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049ec:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80049ee:	a910      	add	r1, sp, #64	; 0x40
 80049f0:	482d      	ldr	r0, [pc, #180]	; (8004aa8 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 80049f2:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80049f4:	f00d f916 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	f040 8111 	bne.w	8004c20 <main+0xbfc>
	sConfigOC.Pulse = 550;
 80049fe:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a02:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a04:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004a06:	2208      	movs	r2, #8
 8004a08:	a94e      	add	r1, sp, #312	; 0x138
 8004a0a:	4827      	ldr	r0, [pc, #156]	; (8004aa8 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004a0c:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 8004a0e:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004a10:	f00c f83a 	bl	8010a88 <HAL_TIM_OC_ConfigChannel>
 8004a14:	2800      	cmp	r0, #0
 8004a16:	f040 8103 	bne.w	8004c20 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 8004a1a:	4823      	ldr	r0, [pc, #140]	; (8004aa8 <main+0xa84>)
 8004a1c:	f001 fff0 	bl	8006a00 <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 8004a20:	4823      	ldr	r0, [pc, #140]	; (8004ab0 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 8004a22:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004a26:	4f23      	ldr	r7, [pc, #140]	; (8004ab4 <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 8004a28:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004a2c:	2306      	movs	r3, #6
 8004a2e:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 8004a32:	f007 ff59 	bl	800c8e8 <HAL_IWDG_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	f040 80f1 	bne.w	8004c20 <main+0xbfc>
	htim14.Instance = TIM14;
 8004a3e:	481e      	ldr	r0, [pc, #120]	; (8004ab8 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a40:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a44:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <main+0xa98>)
 8004a48:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 8004a4a:	f642 2330 	movw	r3, #10800	; 0x2a30
 8004a4e:	e039      	b.n	8004ac4 <main+0xaa0>
 8004a50:	20002b90 	.word	0x20002b90
 8004a54:	40011400 	.word	0x40011400
 8004a58:	200021dc 	.word	0x200021dc
 8004a5c:	40007400 	.word	0x40007400
 8004a60:	200024f0 	.word	0x200024f0
 8004a64:	40005400 	.word	0x40005400
 8004a68:	20002a88 	.word	0x20002a88
 8004a6c:	40004c00 	.word	0x40004c00
 8004a70:	20002b0c 	.word	0x20002b0c
 8004a74:	40005000 	.word	0x40005000
 8004a78:	20002a04 	.word	0x20002a04
 8004a7c:	40004800 	.word	0x40004800
 8004a80:	200026bc 	.word	0x200026bc
 8004a84:	40013400 	.word	0x40013400
 8004a88:	20002658 	.word	0x20002658
 8004a8c:	40003c00 	.word	0x40003c00
 8004a90:	200025f4 	.word	0x200025f4
 8004a94:	20002588 	.word	0x20002588
 8004a98:	40006000 	.word	0x40006000
 8004a9c:	20404768 	.word	0x20404768
 8004aa0:	2000253c 	.word	0x2000253c
 8004aa4:	40005800 	.word	0x40005800
 8004aa8:	20002850 	.word	0x20002850
 8004aac:	40000800 	.word	0x40000800
 8004ab0:	200025d4 	.word	0x200025d4
 8004ab4:	40003000 	.word	0x40003000
 8004ab8:	2000276c 	.word	0x2000276c
 8004abc:	40002000 	.word	0x40002000
 8004ac0:	40003800 	.word	0x40003800
 8004ac4:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ac6:	2380      	movs	r3, #128	; 0x80
 8004ac8:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8004aca:	f00b fc41 	bl	8010350 <HAL_TIM_Base_Init>
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	f040 80a6 	bne.w	8004c20 <main+0xbfc>
	htim5.Instance = TIM5;
 8004ad4:	4f53      	ldr	r7, [pc, #332]	; (8004c24 <main+0xc00>)
	htim5.Init.Period = 4;
 8004ad6:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8004ad8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8004c58 <main+0xc34>
	htim5.Init.Period = 4;
 8004adc:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8004ae0:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ae2:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae4:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004ae6:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8004ae8:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004aec:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8004af0:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004af4:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004af8:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8004afa:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004afe:	f00b fc27 	bl	8010350 <HAL_TIM_Base_Init>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f040 808c 	bne.w	8004c20 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b08:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004b0c:	a925      	add	r1, sp, #148	; 0x94
 8004b0e:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b10:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004b12:	f00a feb3 	bl	800f87c <HAL_TIM_ConfigClockSource>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	f040 8081 	bne.w	8004c20 <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8004b1e:	4638      	mov	r0, r7
 8004b20:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b22:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b24:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8004b26:	f00d f87d 	bl	8011c24 <HAL_TIMEx_MasterConfigSynchronization>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d177      	bne.n	8004c20 <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b30:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 8004b34:	483c      	ldr	r0, [pc, #240]	; (8004c28 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b36:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 8004b3a:	493c      	ldr	r1, [pc, #240]	; (8004c2c <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 8004b3c:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 8004b40:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 8004b42:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004b46:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 8004b48:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004b50:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 8004b54:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004b58:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 8004b5c:	f00e fa30 	bl	8012fc0 <HAL_UART_Init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d15c      	bne.n	8004c20 <main+0xbfc>
	huart7.Instance = UART7;
 8004b66:	4832      	ldr	r0, [pc, #200]	; (8004c30 <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 8004b68:	4a32      	ldr	r2, [pc, #200]	; (8004c34 <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 8004b6a:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b6c:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8004b6e:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8004b70:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 8004b72:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b76:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8004b7a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004b7e:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8004b82:	230c      	movs	r3, #12
 8004b84:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8004b86:	f00e fa1b 	bl	8012fc0 <HAL_UART_Init>
 8004b8a:	2800      	cmp	r0, #0
 8004b8c:	d148      	bne.n	8004c20 <main+0xbfc>
	osMutexDef(myMutex01);
 8004b8e:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8004b90:	f7fe fac6 	bl	8003120 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004b94:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 8004b96:	4c28      	ldr	r4, [pc, #160]	; (8004c38 <main+0xc14>)
	osMutexDef(myMutex01);
 8004b98:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004b9c:	f010 fc86 	bl	80154ac <osMutexCreate>
 8004ba0:	4b26      	ldr	r3, [pc, #152]	; (8004c3c <main+0xc18>)
 8004ba2:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004ba8:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004bac:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8004bae:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004bb2:	f010 fcd7 	bl	8015564 <osSemaphoreCreate>
 8004bb6:	4b22      	ldr	r3, [pc, #136]	; (8004c40 <main+0xc1c>)
 8004bb8:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bba:	2101      	movs	r1, #1
 8004bbc:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8004bbe:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004bc0:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bc2:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 8004bc4:	4b1f      	ldr	r3, [pc, #124]	; (8004c44 <main+0xc20>)
 8004bc6:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004bc8:	f010 fc4e 	bl	8015468 <osTimerCreate>
 8004bcc:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <main+0xc24>)
 8004bce:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8004bd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004bd4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8004bd8:	4628      	mov	r0, r5
 8004bda:	4631      	mov	r1, r6
 8004bdc:	f010 fd3c 	bl	8015658 <osMessageCreate>
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004be2:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004be4:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8004be6:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004be8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bec:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004bf0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	a84e      	add	r0, sp, #312	; 0x138
 8004bf8:	f010 fbfc 	bl	80153f4 <osThreadCreate>
 8004bfc:	4b14      	ldr	r3, [pc, #80]	; (8004c50 <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004bfe:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004c00:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8004c0e:	4631      	mov	r1, r6
 8004c10:	a855      	add	r0, sp, #340	; 0x154
 8004c12:	f010 fbef 	bl	80153f4 <osThreadCreate>
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <main+0xc30>)
 8004c18:	6018      	str	r0, [r3, #0]
	osKernelStart();
 8004c1a:	f010 fbdd 	bl	80153d8 <osKernelStart>
	while (1) {
 8004c1e:	e7fe      	b.n	8004c1e <main+0xbfa>
		Error_Handler();
 8004c20:	f7ff f984 	bl	8003f2c <Error_Handler>
 8004c24:	2000289c 	.word	0x2000289c
 8004c28:	20002c98 	.word	0x20002c98
 8004c2c:	40007c00 	.word	0x40007c00
 8004c30:	20002c14 	.word	0x20002c14
 8004c34:	40007800 	.word	0x40007800
 8004c38:	08029444 	.word	0x08029444
 8004c3c:	20002d30 	.word	0x20002d30
 8004c40:	20002d50 	.word	0x20002d50
 8004c44:	08003185 	.word	0x08003185
 8004c48:	20002d38 	.word	0x20002d38
 8004c4c:	20002d34 	.word	0x20002d34
 8004c50:	200020d8 	.word	0x200020d8
 8004c54:	20002088 	.word	0x20002088
 8004c58:	40000c00 	.word	0x40000c00

08004c5c <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 8004c5c:	b570      	push	{r4, r5, r6, lr}
 8004c5e:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 8004c60:	f01e fee0 	bl	8023a24 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 8004c64:	f00f fa44 	bl	80140f0 <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8004c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c6c:	48a6      	ldr	r0, [pc, #664]	; (8004f08 <StartDefaultTask+0x2ac>)
 8004c6e:	f006 fffb 	bl	800bc68 <HAL_GPIO_ReadPin>
 8004c72:	2801      	cmp	r0, #1
 8004c74:	f000 812b 	beq.w	8004ece <StartDefaultTask+0x272>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8004c78:	f7fb ffb6 	bl	8000be8 <stampboot>
	getboardpcb();		// find our daughterboard
 8004c7c:	f7ff f8c6 	bl	8003e0c <getboardpcb>
	printf("%s----------------------------------------------------------------------------\n", str);
 8004c80:	49a2      	ldr	r1, [pc, #648]	; (8004f0c <StartDefaultTask+0x2b0>)
 8004c82:	48a3      	ldr	r0, [pc, #652]	; (8004f10 <StartDefaultTask+0x2b4>)
 8004c84:	f020 fb86 	bl	8025394 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8004c88:	4da2      	ldr	r5, [pc, #648]	; (8004f14 <StartDefaultTask+0x2b8>)
 8004c8a:	49a3      	ldr	r1, [pc, #652]	; (8004f18 <StartDefaultTask+0x2bc>)
 8004c8c:	f242 702c 	movw	r0, #10028	; 0x272c
 8004c90:	682c      	ldr	r4, [r5, #0]
 8004c92:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8004c96:	c90e      	ldmia	r1, {r1, r2, r3}
 8004c98:	e9cd 0402 	strd	r0, r4, [sp, #8]
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	2410      	movs	r4, #16
 8004ca0:	e9cd 0400 	strd	r0, r4, [sp]
 8004ca4:	489d      	ldr	r0, [pc, #628]	; (8004f1c <StartDefaultTask+0x2c0>)
 8004ca6:	f020 fb75 	bl	8025394 <iprintf>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 8004caa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cae:	4896      	ldr	r0, [pc, #600]	; (8004f08 <StartDefaultTask+0x2ac>)
 8004cb0:	f006 ffda 	bl	800bc68 <HAL_GPIO_ReadPin>
 8004cb4:	2801      	cmp	r0, #1
 8004cb6:	f000 8107 	beq.w	8004ec8 <StartDefaultTask+0x26c>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8004cba:	f7fb ff95 	bl	8000be8 <stampboot>
	crc_rom();
 8004cbe:	f7fe fa89 	bl	80031d4 <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 8004cc2:	4b97      	ldr	r3, [pc, #604]	; (8004f20 <StartDefaultTask+0x2c4>)
 8004cc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cc8:	075b      	lsls	r3, r3, #29
 8004cca:	d41e      	bmi.n	8004d0a <StartDefaultTask+0xae>
		printf("LAN interface appears disconnected\n\r");
 8004ccc:	4895      	ldr	r0, [pc, #596]	; (8004f24 <StartDefaultTask+0x2c8>)
 8004cce:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004cd0:	4d95      	ldr	r5, [pc, #596]	; (8004f28 <StartDefaultTask+0x2cc>)
		printf("LAN interface appears disconnected\n\r");
 8004cd2:	f020 fb5f 	bl	8025394 <iprintf>
			osDelay(50);
 8004cd6:	2032      	movs	r0, #50	; 0x32
 8004cd8:	f010 fbbe 	bl	8015458 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f006 ffd2 	bl	800bc8c <HAL_GPIO_WritePin>
			osDelay(50);
 8004ce8:	2032      	movs	r0, #50	; 0x32
 8004cea:	f010 fbb5 	bl	8015458 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f006 ffc9 	bl	800bc8c <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8004cfa:	3c01      	subs	r4, #1
 8004cfc:	d1eb      	bne.n	8004cd6 <StartDefaultTask+0x7a>
		printf("************* REBOOTING **************\n");
 8004cfe:	488b      	ldr	r0, [pc, #556]	; (8004f2c <StartDefaultTask+0x2d0>)
 8004d00:	f020 fbe4 	bl	80254cc <puts>
		rebootme(0);
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7fe fb05 	bl	8003314 <rebootme>
	netif = netif_default;
 8004d0a:	4a89      	ldr	r2, [pc, #548]	; (8004f30 <StartDefaultTask+0x2d4>)
	globalfreeze = 0;		// Allow UDP streaming
 8004d0c:	2400      	movs	r4, #0
 8004d0e:	4b89      	ldr	r3, [pc, #548]	; (8004f34 <StartDefaultTask+0x2d8>)
	netif = netif_default;
 8004d10:	6810      	ldr	r0, [r2, #0]
 8004d12:	4e89      	ldr	r6, [pc, #548]	; (8004f38 <StartDefaultTask+0x2dc>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004d14:	4989      	ldr	r1, [pc, #548]	; (8004f3c <StartDefaultTask+0x2e0>)
	globalfreeze = 0;		// Allow UDP streaming
 8004d16:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8004d18:	6030      	str	r0, [r6, #0]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004d1a:	f015 ff47 	bl	801abac <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8004d1e:	4988      	ldr	r1, [pc, #544]	; (8004f40 <StartDefaultTask+0x2e4>)
 8004d20:	6830      	ldr	r0, [r6, #0]
 8004d22:	f015 feff 	bl	801ab24 <netif_set_status_callback>
	t2cap[0] = 44444444;
 8004d26:	4b87      	ldr	r3, [pc, #540]	; (8004f44 <StartDefaultTask+0x2e8>)
 8004d28:	4a87      	ldr	r2, [pc, #540]	; (8004f48 <StartDefaultTask+0x2ec>)
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8004d2a:	f242 702c 	movw	r0, #10028	; 0x272c
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004d2e:	682d      	ldr	r5, [r5, #0]
	t2cap[0] = 44444444;
 8004d30:	601a      	str	r2, [r3, #0]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 8004d32:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8004d36:	4b85      	ldr	r3, [pc, #532]	; (8004f4c <StartDefaultTask+0x2f0>)
 8004d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.minorversion = MINORVERSION;
 8004d3c:	2210      	movs	r2, #16
	statuspkt.majorversion = MAJORVERSION;
 8004d3e:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8004d42:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	statuspkt.adctrigoff = TRIG_THRES;
 8004d46:	2264      	movs	r2, #100	; 0x64
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 8004d48:	f8a3 0084 	strh.w	r0, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 8004d4c:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8004d4e:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8004d50:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8004d52:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8004d54:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8004d58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8004d5c:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8004d5e:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8004d60:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8004d64:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8004d68:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8004d6c:	f041 0101 	orr.w	r1, r1, #1
 8004d70:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 8004d74:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004d78:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	newbuild = BUILDNO;				// init to the same
 8004d80:	4b73      	ldr	r3, [pc, #460]	; (8004f50 <StartDefaultTask+0x2f4>)
 8004d82:	6018      	str	r0, [r3, #0]
	initsplat();
 8004d84:	f001 f9cc 	bl	8006120 <initsplat>
	stat = setupneo();
 8004d88:	f000 fa68 	bl	800525c <setupneo>
	if (stat != HAL_OK) {
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f040 80a1 	bne.w	8004ed4 <StartDefaultTask+0x278>
	printf("Setting up timers\n");
 8004d92:	4870      	ldr	r0, [pc, #448]	; (8004f54 <StartDefaultTask+0x2f8>)
 8004d94:	f020 fb9a 	bl	80254cc <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8004d98:	2300      	movs	r3, #0
 8004d9a:	486f      	ldr	r0, [pc, #444]	; (8004f58 <StartDefaultTask+0x2fc>)
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f010 fe83 	bl	8015aac <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8004da6:	486d      	ldr	r0, [pc, #436]	; (8004f5c <StartDefaultTask+0x300>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004da8:	4c6d      	ldr	r4, [pc, #436]	; (8004f60 <StartDefaultTask+0x304>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8004daa:	f00a fca5 	bl	800f6f8 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004dae:	2200      	movs	r2, #0
 8004db0:	6820      	ldr	r0, [r4, #0]
 8004db2:	4611      	mov	r1, r2
 8004db4:	f00c fbca 	bl	801154c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8004db8:	2200      	movs	r2, #0
 8004dba:	2104      	movs	r1, #4
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	f00c fbc5 	bl	801154c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	210c      	movs	r1, #12
 8004dc6:	6820      	ldr	r0, [r4, #0]
 8004dc8:	f00c fbc0 	bl	801154c <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8004dcc:	2100      	movs	r1, #0
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f00c fe0a 	bl	80119e8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8004dd4:	2104      	movs	r1, #4
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f00c fe06 	bl	80119e8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8004ddc:	210c      	movs	r1, #12
 8004dde:	4620      	mov	r0, r4
 8004de0:	f00c fe02 	bl	80119e8 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8004de4:	2301      	movs	r3, #1
 8004de6:	4a57      	ldr	r2, [pc, #348]	; (8004f44 <StartDefaultTask+0x2e8>)
 8004de8:	2108      	movs	r1, #8
 8004dea:	4620      	mov	r0, r4
 8004dec:	f00c fc0c 	bl	8011608 <HAL_TIM_IC_Start_DMA>
 8004df0:	b128      	cbz	r0, 8004dfe <StartDefaultTask+0x1a2>
		printf("TIM_Base_Start_DMA err %i", err);
 8004df2:	4601      	mov	r1, r0
 8004df4:	485b      	ldr	r0, [pc, #364]	; (8004f64 <StartDefaultTask+0x308>)
 8004df6:	f020 facd 	bl	8025394 <iprintf>
		Error_Handler();
 8004dfa:	f7ff f897 	bl	8003f2c <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	2201      	movs	r2, #1
 8004e02:	2108      	movs	r1, #8
	myip = ip.addr;
 8004e04:	4c58      	ldr	r4, [pc, #352]	; (8004f68 <StartDefaultTask+0x30c>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004e06:	f00c fba1 	bl	801154c <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8004e0a:	6833      	ldr	r3, [r6, #0]
	ip = dhcp->offered_ip_addr;
 8004e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0e:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8004e10:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d062      	beq.n	8004edc <StartDefaultTask+0x280>
	printf("*****************************************\n");
 8004e16:	4855      	ldr	r0, [pc, #340]	; (8004f6c <StartDefaultTask+0x310>)
 8004e18:	f020 fb58 	bl	80254cc <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004e1c:	6821      	ldr	r1, [r4, #0]
 8004e1e:	4854      	ldr	r0, [pc, #336]	; (8004f70 <StartDefaultTask+0x314>)
 8004e20:	0e0a      	lsrs	r2, r1, #24
 8004e22:	f3c1 4307 	ubfx	r3, r1, #16, #8
	if (http_downloading) {
 8004e26:	4c53      	ldr	r4, [pc, #332]	; (8004f74 <StartDefaultTask+0x318>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004e28:	9200      	str	r2, [sp, #0]
 8004e2a:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8004e2e:	b2c9      	uxtb	r1, r1
 8004e30:	f020 fab0 	bl	8025394 <iprintf>
	printf("*****************************************\n");
 8004e34:	484d      	ldr	r0, [pc, #308]	; (8004f6c <StartDefaultTask+0x310>)
 8004e36:	f020 fb49 	bl	80254cc <puts>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8004e3a:	484f      	ldr	r0, [pc, #316]	; (8004f78 <StartDefaultTask+0x31c>)
 8004e3c:	f007 fdaa 	bl	800c994 <HAL_IWDG_Refresh>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8004e40:	f003 f8d4 	bl	8007fec <initialapisn>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8004e44:	484c      	ldr	r0, [pc, #304]	; (8004f78 <StartDefaultTask+0x31c>)
 8004e46:	f007 fda5 	bl	800c994 <HAL_IWDG_Refresh>
	osDelay(4000);
 8004e4a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004e4e:	f010 fb03 	bl	8015458 <osDelay>
	if (http_downloading) {
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d14a      	bne.n	8004eee <StartDefaultTask+0x292>
	printf("Starting httpd web server\n");
 8004e58:	4848      	ldr	r0, [pc, #288]	; (8004f7c <StartDefaultTask+0x320>)
 8004e5a:	f020 fb37 	bl	80254cc <puts>
	uip = locateudp();
 8004e5e:	4d48      	ldr	r5, [pc, #288]	; (8004f80 <StartDefaultTask+0x324>)
	httpd_init();		// start the www server
 8004e60:	f014 f912 	bl	8019088 <httpd_init>
	while (lptask_init_done == 0)
 8004e64:	4c47      	ldr	r4, [pc, #284]	; (8004f84 <StartDefaultTask+0x328>)
	init_httpd_ssi();	// set up the embedded tag handler
 8004e66:	f002 ff2b 	bl	8007cc0 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8004e6a:	4847      	ldr	r0, [pc, #284]	; (8004f88 <StartDefaultTask+0x32c>)
 8004e6c:	f020 fb2e 	bl	80254cc <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8004e70:	2008      	movs	r0, #8
 8004e72:	4a46      	ldr	r2, [pc, #280]	; (8004f8c <StartDefaultTask+0x330>)
 8004e74:	2100      	movs	r1, #0
 8004e76:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e7a:	9000      	str	r0, [sp, #0]
 8004e7c:	4844      	ldr	r0, [pc, #272]	; (8004f90 <StartDefaultTask+0x334>)
 8004e7e:	f003 ff33 	bl	8008ce8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8004e82:	4844      	ldr	r0, [pc, #272]	; (8004f94 <StartDefaultTask+0x338>)
 8004e84:	f00a fb80 	bl	800f588 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004e88:	f011 ff5c 	bl	8016d44 <xTaskGetCurrentTaskHandle>
 8004e8c:	4b42      	ldr	r3, [pc, #264]	; (8004f98 <StartDefaultTask+0x33c>)
 8004e8e:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8004e90:	f002 fbca 	bl	8007628 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8004e94:	4b41      	ldr	r3, [pc, #260]	; (8004f9c <StartDefaultTask+0x340>)
 8004e96:	2201      	movs	r2, #1
	uip = locateudp();
 8004e98:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 8004e9a:	4841      	ldr	r0, [pc, #260]	; (8004fa0 <StartDefaultTask+0x344>)
	main_init_done = 1; // let lptask now main has initialised
 8004e9c:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8004e9e:	f020 fb15 	bl	80254cc <puts>
	while (lptask_init_done == 0)
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	b92b      	cbnz	r3, 8004eb2 <StartDefaultTask+0x256>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8004ea6:	2064      	movs	r0, #100	; 0x64
 8004ea8:	f010 fad6 	bl	8015458 <osDelay>
	while (lptask_init_done == 0)
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f9      	beq.n	8004ea6 <StartDefaultTask+0x24a>
	startadc();		// start the ADC DMA loop
 8004eb2:	f7fb fe0f 	bl	8000ad4 <startadc>
		startudp(uip);	// should never return
 8004eb6:	6828      	ldr	r0, [r5, #0]
 8004eb8:	f002 fbec 	bl	8007694 <startudp>
		printf("UDP stream exited!!!\n\r");
 8004ebc:	4839      	ldr	r0, [pc, #228]	; (8004fa4 <StartDefaultTask+0x348>)
 8004ebe:	f020 fa69 	bl	8025394 <iprintf>
		rebootme(4);
 8004ec2:	2004      	movs	r0, #4
 8004ec4:	f7fe fa26 	bl	8003314 <rebootme>
		swapboot();	//  swap the boot vector
 8004ec8:	f7fb ffe8 	bl	8000e9c <swapboot>
 8004ecc:	e6f7      	b.n	8004cbe <StartDefaultTask+0x62>
		swapboot();	//  swap the boot vector
 8004ece:	f7fb ffe5 	bl	8000e9c <swapboot>
 8004ed2:	e6d3      	b.n	8004c7c <StartDefaultTask+0x20>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8004ed4:	4834      	ldr	r0, [pc, #208]	; (8004fa8 <StartDefaultTask+0x34c>)
 8004ed6:	f020 fa5d 	bl	8025394 <iprintf>
 8004eda:	e75a      	b.n	8004d92 <StartDefaultTask+0x136>
		printf("***** DHCP Failed ******\n");
 8004edc:	4833      	ldr	r0, [pc, #204]	; (8004fac <StartDefaultTask+0x350>)
 8004ede:	f020 faf5 	bl	80254cc <puts>
		osDelay(200);
 8004ee2:	20c8      	movs	r0, #200	; 0xc8
 8004ee4:	f010 fab8 	bl	8015458 <osDelay>
		rebootme(1);
 8004ee8:	2001      	movs	r0, #1
 8004eea:	f7fe fa13 	bl	8003314 <rebootme>
		printf("Downloading...\n");
 8004eee:	4830      	ldr	r0, [pc, #192]	; (8004fb0 <StartDefaultTask+0x354>)
 8004ef0:	f020 faec 	bl	80254cc <puts>
		while (http_downloading) {
 8004ef4:	e003      	b.n	8004efe <StartDefaultTask+0x2a2>
			osDelay(1000);
 8004ef6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004efa:	f010 faad 	bl	8015458 <osDelay>
		while (http_downloading) {
 8004efe:	6823      	ldr	r3, [r4, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1f8      	bne.n	8004ef6 <StartDefaultTask+0x29a>
 8004f04:	e7a8      	b.n	8004e58 <StartDefaultTask+0x1fc>
 8004f06:	bf00      	nop
 8004f08:	40020800 	.word	0x40020800
 8004f0c:	0802b248 	.word	0x0802b248
 8004f10:	0802aebc 	.word	0x0802aebc
 8004f14:	2000208c 	.word	0x2000208c
 8004f18:	1ff0f000 	.word	0x1ff0f000
 8004f1c:	0802b24c 	.word	0x0802b24c
 8004f20:	200031bc 	.word	0x200031bc
 8004f24:	0802b28c 	.word	0x0802b28c
 8004f28:	40020c00 	.word	0x40020c00
 8004f2c:	0802b2b4 	.word	0x0802b2b4
 8004f30:	2002e0ac 	.word	0x2002e0ac
 8004f34:	200030e4 	.word	0x200030e4
 8004f38:	20002d40 	.word	0x20002d40
 8004f3c:	0800331d 	.word	0x0800331d
 8004f40:	08003179 	.word	0x08003179
 8004f44:	20000770 	.word	0x20000770
 8004f48:	02a62b1c 	.word	0x02a62b1c
 8004f4c:	20002f3c 	.word	0x20002f3c
 8004f50:	20002d44 	.word	0x20002d44
 8004f54:	0802b2fc 	.word	0x0802b2fc
 8004f58:	20002d50 	.word	0x20002d50
 8004f5c:	200028e8 	.word	0x200028e8
 8004f60:	200027b8 	.word	0x200027b8
 8004f64:	0802b310 	.word	0x0802b310
 8004f68:	20002d3c 	.word	0x20002d3c
 8004f6c:	0802b348 	.word	0x0802b348
 8004f70:	0802b374 	.word	0x0802b374
 8004f74:	200018a8 	.word	0x200018a8
 8004f78:	200025d4 	.word	0x200025d4
 8004f7c:	0802b39c 	.word	0x0802b39c
 8004f80:	20002d60 	.word	0x20002d60
 8004f84:	20002d28 	.word	0x20002d28
 8004f88:	0802b3b8 	.word	0x0802b3b8
 8004f8c:	0802b408 	.word	0x0802b408
 8004f90:	200021dc 	.word	0x200021dc
 8004f94:	20002934 	.word	0x20002934
 8004f98:	20000804 	.word	0x20000804
 8004f9c:	20002d2c 	.word	0x20002d2c
 8004fa0:	0802b3d4 	.word	0x0802b3d4
 8004fa4:	0802b3f0 	.word	0x0802b3f0
 8004fa8:	0802b2dc 	.word	0x0802b2dc
 8004fac:	0802b32c 	.word	0x0802b32c
 8004fb0:	0802af0c 	.word	0x0802af0c

08004fb4 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop

08004fb8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004fb8:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8004fba:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8004fc0:	d009      	beq.n	8004fd6 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8004fc2:	230a      	movs	r3, #10
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	a901      	add	r1, sp, #4
 8004fc8:	4808      	ldr	r0, [pc, #32]	; (8004fec <__io_putchar+0x34>)
 8004fca:	f00d ff51 	bl	8012e70 <HAL_UART_Transmit>

	return ch;
	}
}
 8004fce:	9801      	ldr	r0, [sp, #4]
 8004fd0:	b003      	add	sp, #12
 8004fd2:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2202      	movs	r2, #2
 8004fda:	4905      	ldr	r1, [pc, #20]	; (8004ff0 <__io_putchar+0x38>)
 8004fdc:	4803      	ldr	r0, [pc, #12]	; (8004fec <__io_putchar+0x34>)
 8004fde:	f00d ff47 	bl	8012e70 <HAL_UART_Transmit>
}
 8004fe2:	9801      	ldr	r0, [sp, #4]
 8004fe4:	b003      	add	sp, #12
 8004fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fea:	bf00      	nop
 8004fec:	20002980 	.word	0x20002980
 8004ff0:	0802a10c 	.word	0x0802a10c

08004ff4 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <calcepoch32+0x40>)
 8004ff6:	4810      	ldr	r0, [pc, #64]	; (8005038 <calcepoch32+0x44>)
 8004ff8:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8004ffa:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8004ffc:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005000:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005002:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8005004:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8005006:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005008:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800500c:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 800500e:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8005010:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8005012:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8005014:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8005016:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8005018:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 800501a:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 800501e:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 8005020:	f01f fafa 	bl	8024618 <mktime>
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <calcepoch32+0x48>)
 8005026:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8005028:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 800502c:	e9c2 3100 	strd	r3, r1, [r2]
}
 8005030:	4418      	add	r0, r3
 8005032:	bd10      	pop	{r4, pc}
 8005034:	20002f3c 	.word	0x20002f3c
 8005038:	20002f10 	.word	0x20002f10
 800503c:	20002df0 	.word	0x20002df0

08005040 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8005046:	b33a      	cbz	r2, 8005098 <printPacket+0x58>
 8005048:	4607      	mov	r7, r0
 800504a:	4616      	mov	r6, r2
 800504c:	1e4d      	subs	r5, r1, #1
 800504e:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8005050:	f8df a054 	ldr.w	sl, [pc, #84]	; 80050a8 <printPacket+0x68>
 8005054:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80050ac <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8005058:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80050b0 <printPacket+0x70>
 800505c:	e013      	b.n	8005086 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 800505e:	f8da 1000 	ldr.w	r1, [sl]
 8005062:	1c4b      	adds	r3, r1, #1
 8005064:	f8ca 3000 	str.w	r3, [sl]
 8005068:	f020 f994 	bl	8025394 <iprintf>
	for (byte i = 0; i < len; i++) {
 800506c:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 800506e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005072:	4641      	mov	r1, r8
 8005074:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8005076:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8005078:	f020 fb76 	bl	8025768 <siprintf>
		printf(temp);
 800507c:	a801      	add	r0, sp, #4
 800507e:	f020 f989 	bl	8025394 <iprintf>
	for (byte i = 0; i < len; i++) {
 8005082:	42a6      	cmp	r6, r4
 8005084:	d008      	beq.n	8005098 <printPacket+0x58>
		if (i % 16 == 0) {
 8005086:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 800508a:	463a      	mov	r2, r7
 800508c:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 800508e:	d0e6      	beq.n	800505e <printPacket+0x1e>
			printf(" ");
 8005090:	2020      	movs	r0, #32
 8005092:	f020 f997 	bl	80253c4 <putchar>
 8005096:	e7e9      	b.n	800506c <printPacket+0x2c>
	}
	printf("\n\r");
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <printPacket+0x64>)
 800509a:	f020 f97b 	bl	8025394 <iprintf>
}
 800509e:	b002      	add	sp, #8
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	0802b404 	.word	0x0802b404
 80050a8:	20002de8 	.word	0x20002de8
 80050ac:	0802bb08 	.word	0x0802bb08
 80050b0:	0802bb14 	.word	0x0802bb14

080050b4 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 80050b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050b8:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8005158 <disableNmea+0xa4>
void disableNmea() {
 80050bc:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 80050be:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80050c0:	4f24      	ldr	r7, [pc, #144]	; (8005154 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050c2:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 80050c6:	f10d 0904 	add.w	r9, sp, #4
 80050ca:	ad04      	add	r5, sp, #16
 80050cc:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80050d0:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050d4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050d8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80050dc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80050e0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80050e4:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80050e8:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 80050ec:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 80050f0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050f4:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 80050f8:	f829 2b02 	strh.w	r2, [r9], #2
 80050fc:	0c12      	lsrs	r2, r2, #16
 80050fe:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 8005102:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8005106:	7829      	ldrb	r1, [r5, #0]
 8005108:	786a      	ldrb	r2, [r5, #1]
 800510a:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 800510e:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 8005110:	f88d 100a 	strb.w	r1, [sp, #10]
 8005114:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8005118:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 800511c:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8005120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005124:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 8005126:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 8005128:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 800512c:	44e6      	add	lr, ip
 800512e:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 8005132:	d1f5      	bne.n	8005120 <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8005134:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005136:	2364      	movs	r3, #100	; 0x64
 8005138:	220b      	movs	r2, #11
 800513a:	a901      	add	r1, sp, #4
 800513c:	4638      	mov	r0, r7
 800513e:	f88d c00d 	strb.w	ip, [sp, #13]
 8005142:	f88d e00e 	strb.w	lr, [sp, #14]
 8005146:	f00d fe93 	bl	8012e70 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 800514a:	4545      	cmp	r5, r8
 800514c:	d1d9      	bne.n	8005102 <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 800514e:	b00f      	add	sp, #60	; 0x3c
 8005150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005154:	20002e84 	.word	0x20002e84
 8005158:	080294ac 	.word	0x080294ac

0800515c <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800515c:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 800515e:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005160:	db1c      	blt.n	800519c <isGoodChecksum+0x40>
 8005162:	4910      	ldr	r1, [pc, #64]	; (80051a4 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 8005164:	2200      	movs	r2, #0
 8005166:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 800516a:	4613      	mov	r3, r2
 800516c:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 800516e:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8005172:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8005174:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 8005176:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8005178:	441a      	add	r2, r3
 800517a:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800517c:	d1f7      	bne.n	800516e <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <isGoodChecksum+0x4c>)
 8005180:	4408      	add	r0, r1
 8005182:	7981      	ldrb	r1, [r0, #6]
 8005184:	4299      	cmp	r1, r3
 8005186:	d002      	beq.n	800518e <isGoodChecksum+0x32>
 8005188:	2000      	movs	r0, #0
}
 800518a:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800518e:	79c0      	ldrb	r0, [r0, #7]
 8005190:	1a80      	subs	r0, r0, r2
 8005192:	fab0 f080 	clz	r0, r0
 8005196:	0940      	lsrs	r0, r0, #5
}
 8005198:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 800519c:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 800519e:	4613      	mov	r3, r2
 80051a0:	e7ed      	b.n	800517e <isGoodChecksum+0x22>
 80051a2:	bf00      	nop
 80051a4:	20002d69 	.word	0x20002d69
 80051a8:	20002d68 	.word	0x20002d68

080051ac <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 80051ac:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 80051ae:	4c25      	ldr	r4, [pc, #148]	; (8005244 <IsPacketReady+0x98>)
 80051b0:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d814      	bhi.n	80051e0 <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 80051b6:	4a24      	ldr	r2, [pc, #144]	; (8005248 <IsPacketReady+0x9c>)
 80051b8:	4619      	mov	r1, r3
 80051ba:	5cd2      	ldrb	r2, [r2, r3]
 80051bc:	4282      	cmp	r2, r0
 80051be:	d00a      	beq.n	80051d6 <IsPacketReady+0x2a>
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <IsPacketReady+0xa0>)
 80051c2:	5cd2      	ldrb	r2, [r2, r3]
 80051c4:	4282      	cmp	r2, r0
 80051c6:	d006      	beq.n	80051d6 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 80051c8:	2200      	movs	r2, #0
 80051ca:	4921      	ldr	r1, [pc, #132]	; (8005250 <IsPacketReady+0xa4>)
			p = 0;
 80051cc:	4613      	mov	r3, r2
			len = 0;
 80051ce:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 80051d0:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 80051d2:	70e3      	strb	r3, [r4, #3]
}
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 80051d6:	3301      	adds	r3, #1
 80051d8:	4a1e      	ldr	r2, [pc, #120]	; (8005254 <IsPacketReady+0xa8>)
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	5450      	strb	r0, [r2, r1]
 80051de:	e7f7      	b.n	80051d0 <IsPacketReady+0x24>
		if (p < 6) {
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d917      	bls.n	8005214 <IsPacketReady+0x68>
		if (p == 6) {
 80051e4:	2b06      	cmp	r3, #6
 80051e6:	d01b      	beq.n	8005220 <IsPacketReady+0x74>
 80051e8:	4d19      	ldr	r5, [pc, #100]	; (8005250 <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 80051ea:	682a      	ldr	r2, [r5, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	3207      	adds	r2, #7
 80051f0:	429a      	cmp	r2, r3
 80051f2:	dbed      	blt.n	80051d0 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 80051f4:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 80051f6:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 80051f8:	4e16      	ldr	r6, [pc, #88]	; (8005254 <IsPacketReady+0xa8>)
 80051fa:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 80051fc:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 80051fe:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8005200:	4293      	cmp	r3, r2
 8005202:	d1e5      	bne.n	80051d0 <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8005204:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8005206:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8005208:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 800520a:	f7ff ffa7 	bl	800515c <isGoodChecksum>
 800520e:	b998      	cbnz	r0, 8005238 <IsPacketReady+0x8c>
				p = 0;
 8005210:	4603      	mov	r3, r0
 8005212:	e7dd      	b.n	80051d0 <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8005214:	490f      	ldr	r1, [pc, #60]	; (8005254 <IsPacketReady+0xa8>)
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	54c8      	strb	r0, [r1, r3]
			return (0);
 800521a:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 800521c:	70e2      	strb	r2, [r4, #3]
}
 800521e:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8005220:	490c      	ldr	r1, [pc, #48]	; (8005254 <IsPacketReady+0xa8>)
 8005222:	794d      	ldrb	r5, [r1, #5]
 8005224:	790a      	ldrb	r2, [r1, #4]
 8005226:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 800522a:	4d09      	ldr	r5, [pc, #36]	; (8005250 <IsPacketReady+0xa4>)
 800522c:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 800522e:	682a      	ldr	r2, [r5, #0]
 8005230:	2a7f      	cmp	r2, #127	; 0x7f
 8005232:	d9da      	bls.n	80051ea <IsPacketReady+0x3e>
				return 0;
 8005234:	2000      	movs	r0, #0
}
 8005236:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8005238:	4b07      	ldr	r3, [pc, #28]	; (8005258 <IsPacketReady+0xac>)
 800523a:	2201      	movs	r2, #1
					return len;
 800523c:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 800523e:	601a      	str	r2, [r3, #0]
}
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	bf00      	nop
 8005244:	20000264 	.word	0x20000264
 8005248:	0802bd04 	.word	0x0802bd04
 800524c:	0802bd08 	.word	0x0802bd08
 8005250:	20002f08 	.word	0x20002f08
 8005254:	20002d68 	.word	0x20002d68
 8005258:	20002dfc 	.word	0x20002dfc

0800525c <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 800525c:	4b74      	ldr	r3, [pc, #464]	; (8005430 <setupneo+0x1d4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8005262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005264:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005266:	f000 80ba 	beq.w	80053de <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 800526a:	2284      	movs	r2, #132	; 0x84
 800526c:	4971      	ldr	r1, [pc, #452]	; (8005434 <setupneo+0x1d8>)
 800526e:	4872      	ldr	r0, [pc, #456]	; (8005438 <setupneo+0x1dc>)
 8005270:	f01f f8ca 	bl	8024408 <memcpy>
		gpsuarttx = huart6;
 8005274:	2284      	movs	r2, #132	; 0x84
 8005276:	496f      	ldr	r1, [pc, #444]	; (8005434 <setupneo+0x1d8>)
 8005278:	4870      	ldr	r0, [pc, #448]	; (800543c <setupneo+0x1e0>)
 800527a:	f01f f8c5 	bl	8024408 <memcpy>
		GPSUARTRX = USART6;
 800527e:	4b70      	ldr	r3, [pc, #448]	; (8005440 <setupneo+0x1e4>)
 8005280:	4a70      	ldr	r2, [pc, #448]	; (8005444 <setupneo+0x1e8>)
 8005282:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8005284:	2201      	movs	r2, #1
 8005286:	4970      	ldr	r1, [pc, #448]	; (8005448 <setupneo+0x1ec>)
 8005288:	486b      	ldr	r0, [pc, #428]	; (8005438 <setupneo+0x1dc>)
 800528a:	f00e f889 	bl	80133a0 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 800528e:	4607      	mov	r7, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	f040 809d 	bne.w	80053d0 <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8005296:	f7ff ff0d 	bl	80050b4 <disableNmea>
	osDelay(500);
 800529a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800529e:	f010 f8db 	bl	8015458 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 80052a2:	4b6a      	ldr	r3, [pc, #424]	; (800544c <setupneo+0x1f0>)
 80052a4:	ae01      	add	r6, sp, #4
 80052a6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80052aa:	4d69      	ldr	r5, [pc, #420]	; (8005450 <setupneo+0x1f4>)
 80052ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052b0:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 80052b4:	4867      	ldr	r0, [pc, #412]	; (8005454 <setupneo+0x1f8>)
 80052b6:	f020 f909 	bl	80254cc <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052ba:	2364      	movs	r3, #100	; 0x64
 80052bc:	2208      	movs	r2, #8
 80052be:	4631      	mov	r1, r6
 80052c0:	485e      	ldr	r0, [pc, #376]	; (800543c <setupneo+0x1e0>)
 80052c2:	f00d fdd5 	bl	8012e70 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052c6:	e004      	b.n	80052d2 <setupneo+0x76>
		i++;
		osDelay(1);
 80052c8:	f010 f8c6 	bl	8015458 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052cc:	3c01      	subs	r4, #1
 80052ce:	f000 80a5 	beq.w	800541c <setupneo+0x1c0>
 80052d2:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 80052d4:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0f6      	beq.n	80052c8 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052da:	4c5f      	ldr	r4, [pc, #380]	; (8005458 <setupneo+0x1fc>)
 80052dc:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 80052de:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80052e6:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052ea:	2364      	movs	r3, #100	; 0x64
 80052ec:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052ee:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052f2:	4852      	ldr	r0, [pc, #328]	; (800543c <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 80052f4:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80052f8:	4631      	mov	r1, r6
 80052fa:	f00d fdb9 	bl	8012e70 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 80052fe:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005302:	f010 f8a9 	bl	8015458 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8005306:	4855      	ldr	r0, [pc, #340]	; (800545c <setupneo+0x200>)
 8005308:	f020 f844 	bl	8025394 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 800530c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8005310:	46b4      	mov	ip, r6
 8005312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005314:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005318:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 800531a:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800531e:	220e      	movs	r2, #14
 8005320:	2364      	movs	r3, #100	; 0x64
 8005322:	4846      	ldr	r0, [pc, #280]	; (800543c <setupneo+0x1e0>)
 8005324:	f00d fda4 	bl	8012e70 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8005328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800532c:	f010 f894 	bl	8015458 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8005330:	484b      	ldr	r0, [pc, #300]	; (8005460 <setupneo+0x204>)
 8005332:	f020 f8cb 	bl	80254cc <puts>
	byte packet[] = { 0xB5, // sync char 1
 8005336:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 800533a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800533e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005340:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8005344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005346:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800534a:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 800534c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005350:	4631      	mov	r1, r6
 8005352:	222c      	movs	r2, #44	; 0x2c
 8005354:	4839      	ldr	r0, [pc, #228]	; (800543c <setupneo+0x1e0>)
 8005356:	f00d fd8b 	bl	8012e70 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 800535a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800535e:	f010 f87b 	bl	8015458 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8005362:	4840      	ldr	r0, [pc, #256]	; (8005464 <setupneo+0x208>)
 8005364:	f020 f816 	bl	8025394 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8005368:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 800536c:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800536e:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005370:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8005372:	ca07      	ldmia	r2, {r0, r1, r2}
 8005374:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8005378:	f82c 2b02 	strh.w	r2, [ip], #2
 800537c:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800537e:	4631      	mov	r1, r6
 8005380:	482e      	ldr	r0, [pc, #184]	; (800543c <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8005382:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8005386:	220b      	movs	r2, #11
 8005388:	f00d fd72 	bl	8012e70 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 800538c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005390:	f010 f862 	bl	8015458 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8005394:	46b4      	mov	ip, r6
 8005396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005398:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800539c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80053a2:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80053a6:	2364      	movs	r3, #100	; 0x64
 80053a8:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 80053aa:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80053ae:	4631      	mov	r1, r6
 80053b0:	4822      	ldr	r0, [pc, #136]	; (800543c <setupneo+0x1e0>)
 80053b2:	f00d fd5d 	bl	8012e70 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 80053b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80053ba:	f010 f84d 	bl	8015458 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80053be:	4b2a      	ldr	r3, [pc, #168]	; (8005468 <setupneo+0x20c>)
 80053c0:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 80053c2:	482a      	ldr	r0, [pc, #168]	; (800546c <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 80053c4:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 80053c6:	f01f ffe5 	bl	8025394 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 80053ca:	4638      	mov	r0, r7
 80053cc:	b00d      	add	sp, #52	; 0x34
 80053ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 80053d0:	4601      	mov	r1, r0
 80053d2:	4827      	ldr	r0, [pc, #156]	; (8005470 <setupneo+0x214>)
 80053d4:	f01f ffde 	bl	8025394 <iprintf>
}
 80053d8:	4638      	mov	r0, r7
 80053da:	b00d      	add	sp, #52	; 0x34
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 80053de:	4c25      	ldr	r4, [pc, #148]	; (8005474 <setupneo+0x218>)
 80053e0:	4620      	mov	r0, r4
 80053e2:	f00c fed9 	bl	8012198 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 80053e6:	4620      	mov	r0, r4
 80053e8:	f00c fd3e 	bl	8011e68 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 80053ec:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80053f0:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 80053f2:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80053f4:	f00d fde4 	bl	8012fc0 <HAL_UART_Init>
 80053f8:	b968      	cbnz	r0, 8005416 <setupneo+0x1ba>
		gpsuartrx = huart8;
 80053fa:	2284      	movs	r2, #132	; 0x84
 80053fc:	491e      	ldr	r1, [pc, #120]	; (8005478 <setupneo+0x21c>)
 80053fe:	480e      	ldr	r0, [pc, #56]	; (8005438 <setupneo+0x1dc>)
 8005400:	f01f f802 	bl	8024408 <memcpy>
		gpsuarttx = huart7;
 8005404:	2284      	movs	r2, #132	; 0x84
 8005406:	491b      	ldr	r1, [pc, #108]	; (8005474 <setupneo+0x218>)
 8005408:	480c      	ldr	r0, [pc, #48]	; (800543c <setupneo+0x1e0>)
 800540a:	f01e fffd 	bl	8024408 <memcpy>
		GPSUARTRX = UART8;
 800540e:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <setupneo+0x1e4>)
 8005410:	4a1a      	ldr	r2, [pc, #104]	; (800547c <setupneo+0x220>)
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	e736      	b.n	8005284 <setupneo+0x28>
			Error_Handler();
 8005416:	f7fe fd89 	bl	8003f2c <Error_Handler>
 800541a:	e7ee      	b.n	80053fa <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 800541c:	4818      	ldr	r0, [pc, #96]	; (8005480 <setupneo+0x224>)
 800541e:	f020 f855 	bl	80254cc <puts>
		osDelay(200);
 8005422:	20c8      	movs	r0, #200	; 0xc8
 8005424:	f010 f818 	bl	8015458 <osDelay>
		rebootme(2);
 8005428:	2002      	movs	r0, #2
 800542a:	f7fd ff73 	bl	8003314 <rebootme>
 800542e:	e754      	b.n	80052da <setupneo+0x7e>
 8005430:	2000208c 	.word	0x2000208c
 8005434:	20002b90 	.word	0x20002b90
 8005438:	20002e00 	.word	0x20002e00
 800543c:	20002e84 	.word	0x20002e84
 8005440:	20002d64 	.word	0x20002d64
 8005444:	40011400 	.word	0x40011400
 8005448:	20002f34 	.word	0x20002f34
 800544c:	080294a4 	.word	0x080294a4
 8005450:	20002f0c 	.word	0x20002f0c
 8005454:	0802bb1c 	.word	0x0802bb1c
 8005458:	0802948c 	.word	0x0802948c
 800545c:	0802bb5c 	.word	0x0802bb5c
 8005460:	0802bb8c 	.word	0x0802bb8c
 8005464:	0802bbb4 	.word	0x0802bbb4
 8005468:	20002f3c 	.word	0x20002f3c
 800546c:	0802bbd8 	.word	0x0802bbd8
 8005470:	0802bb34 	.word	0x0802bb34
 8005474:	20002c14 	.word	0x20002c14
 8005478:	20002c98 	.word	0x20002c98
 800547c:	40007c00 	.word	0x40007c00
 8005480:	0802bc00 	.word	0x0802bc00

08005484 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8005484:	4a2a      	ldr	r2, [pc, #168]	; (8005530 <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005486:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	6803      	ldr	r3, [r0, #0]
 800548c:	4293      	cmp	r3, r2
 800548e:	d011      	beq.n	80054b4 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8005490:	4a28      	ldr	r2, [pc, #160]	; (8005534 <HAL_UART_RxCpltCallback+0xb0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d024      	beq.n	80054e0 <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8005496:	4a28      	ldr	r2, [pc, #160]	; (8005538 <HAL_UART_RxCpltCallback+0xb4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d025      	beq.n	80054e8 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 800549c:	4a27      	ldr	r2, [pc, #156]	; (800553c <HAL_UART_RxCpltCallback+0xb8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d004      	beq.n	80054ac <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 80054a2:	4827      	ldr	r0, [pc, #156]	; (8005540 <HAL_UART_RxCpltCallback+0xbc>)
}
 80054a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 80054a8:	f020 b810 	b.w	80254cc <puts>
}
 80054ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 80054b0:	f7fe bcbc 	b.w	8003e2c <uart2_rxdone>
		data = rxdatabuf[0];
 80054b4:	4923      	ldr	r1, [pc, #140]	; (8005544 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 80054b6:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 80054b8:	4b23      	ldr	r3, [pc, #140]	; (8005548 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 80054bc:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 80054be:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 80054c0:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 80054c2:	f7ff fe73 	bl	80051ac <IsPacketReady>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	dd1c      	ble.n	8005504 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 80054ca:	2854      	cmp	r0, #84	; 0x54
 80054cc:	d01b      	beq.n	8005506 <HAL_UART_RxCpltCallback+0x82>
 80054ce:	2864      	cmp	r0, #100	; 0x64
 80054d0:	d00e      	beq.n	80054f0 <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 80054d2:	b2c2      	uxtb	r2, r0
 80054d4:	491e      	ldr	r1, [pc, #120]	; (8005550 <HAL_UART_RxCpltCallback+0xcc>)
 80054d6:	481f      	ldr	r0, [pc, #124]	; (8005554 <HAL_UART_RxCpltCallback+0xd0>)
}
 80054d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 80054dc:	f7ff bdb0 	b.w	8005040 <printPacket>
}
 80054e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 80054e4:	f7fc bd38 	b.w	8001f58 <uart5_rxdone>
}
 80054e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 80054ec:	f000 bd0e 	b.w	8005f0c <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <HAL_UART_RxCpltCallback+0xd4>)
 80054f2:	481a      	ldr	r0, [pc, #104]	; (800555c <HAL_UART_RxCpltCallback+0xd8>)
 80054f4:	f1a3 020a 	sub.w	r2, r3, #10
 80054f8:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80054fc:	f01f ff4a 	bl	8025394 <iprintf>
				neoispresent = 1;
 8005500:	4b17      	ldr	r3, [pc, #92]	; (8005560 <HAL_UART_RxCpltCallback+0xdc>)
 8005502:	601c      	str	r4, [r3, #0]
}
 8005504:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8005506:	4d17      	ldr	r5, [pc, #92]	; (8005564 <HAL_UART_RxCpltCallback+0xe0>)
 8005508:	224e      	movs	r2, #78	; 0x4e
 800550a:	4917      	ldr	r1, [pc, #92]	; (8005568 <HAL_UART_RxCpltCallback+0xe4>)
 800550c:	1d28      	adds	r0, r5, #4
 800550e:	f01e ff7b 	bl	8024408 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8005512:	f7ff fd6f 	bl	8004ff4 <calcepoch32>
 8005516:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 800551a:	7e6b      	ldrb	r3, [r5, #25]
 800551c:	f013 0301 	ands.w	r3, r3, #1
 8005520:	d002      	beq.n	8005528 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <HAL_UART_RxCpltCallback+0xe8>)
 8005524:	701c      	strb	r4, [r3, #0]
}
 8005526:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <HAL_UART_RxCpltCallback+0xe8>)
 800552a:	7013      	strb	r3, [r2, #0]
}
 800552c:	bd38      	pop	{r3, r4, r5, pc}
 800552e:	bf00      	nop
 8005530:	20002d64 	.word	0x20002d64
 8005534:	40005000 	.word	0x40005000
 8005538:	40011400 	.word	0x40011400
 800553c:	40004400 	.word	0x40004400
 8005540:	0802bc74 	.word	0x0802bc74
 8005544:	20002f34 	.word	0x20002f34
 8005548:	20002dec 	.word	0x20002dec
 800554c:	20002df8 	.word	0x20002df8
 8005550:	20002d68 	.word	0x20002d68
 8005554:	0802bc58 	.word	0x0802bc58
 8005558:	20002d96 	.word	0x20002d96
 800555c:	0802bc2c 	.word	0x0802bc2c
 8005560:	20002f0c 	.word	0x20002f0c
 8005564:	20002f3c 	.word	0x20002f3c
 8005568:	20002d6e 	.word	0x20002d6e
 800556c:	200030e8 	.word	0x200030e8

08005570 <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005570:	4926      	ldr	r1, [pc, #152]	; (800560c <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005572:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005576:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005578:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 800557a:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800557c:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 800557e:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8005580:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8005582:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8005584:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8005586:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8005588:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 800558a:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800558c:	d02b      	beq.n	80055e6 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 800558e:	4920      	ldr	r1, [pc, #128]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 8005590:	428b      	cmp	r3, r1
 8005592:	d00f      	beq.n	80055b4 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8005594:	491f      	ldr	r1, [pc, #124]	; (8005614 <HAL_UART_ErrorCallback+0xa4>)
 8005596:	428b      	cmp	r3, r1
 8005598:	d000      	beq.n	800559c <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 800559a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 800559c:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 80055a0:	481d      	ldr	r0, [pc, #116]	; (8005618 <HAL_UART_ErrorCallback+0xa8>)
 80055a2:	f01f fef7 	bl	8025394 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 80055ac:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 80055ae:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 80055b0:	621d      	str	r5, [r3, #32]
}
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 80055b4:	4a19      	ldr	r2, [pc, #100]	; (800561c <HAL_UART_ErrorCallback+0xac>)
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d1ee      	bne.n	800559a <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 80055bc:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80055c0:	4a17      	ldr	r2, [pc, #92]	; (8005620 <HAL_UART_ErrorCallback+0xb0>)
 80055c2:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 80055c4:	69da      	ldr	r2, [r3, #28]
 80055c6:	0710      	lsls	r0, r2, #28
 80055c8:	d500      	bpl.n	80055cc <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 80055ca:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 80055cc:	4b10      	ldr	r3, [pc, #64]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	0751      	lsls	r1, r2, #29
 80055d2:	d501      	bpl.n	80055d8 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 80055d4:	2204      	movs	r2, #4
 80055d6:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 80055d8:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <HAL_UART_ErrorCallback+0xa0>)
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	0792      	lsls	r2, r2, #30
 80055de:	d5dc      	bpl.n	800559a <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 80055e0:	2202      	movs	r2, #2
 80055e2:	621a      	str	r2, [r3, #32]
}
 80055e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 80055e6:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 80055ea:	480e      	ldr	r0, [pc, #56]	; (8005624 <HAL_UART_ErrorCallback+0xb4>)
 80055ec:	f01f fed2 	bl	8025394 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 80055f0:	462a      	mov	r2, r5
 80055f2:	490d      	ldr	r1, [pc, #52]	; (8005628 <HAL_UART_ErrorCallback+0xb8>)
 80055f4:	480d      	ldr	r0, [pc, #52]	; (800562c <HAL_UART_ErrorCallback+0xbc>)
 80055f6:	f00d fed3 	bl	80133a0 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 80055fa:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80055fe:	d0cc      	beq.n	800559a <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005600:	4601      	mov	r1, r0
 8005602:	480b      	ldr	r0, [pc, #44]	; (8005630 <HAL_UART_ErrorCallback+0xc0>)
}
 8005604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8005608:	f01f bec4 	b.w	8025394 <iprintf>
 800560c:	20002d64 	.word	0x20002d64
 8005610:	40005000 	.word	0x40005000
 8005614:	40011400 	.word	0x40011400
 8005618:	0802bcd8 	.word	0x0802bcd8
 800561c:	20001a04 	.word	0x20001a04
 8005620:	20001a94 	.word	0x20001a94
 8005624:	0802bc8c 	.word	0x0802bc8c
 8005628:	20002f34 	.word	0x20002f34
 800562c:	20002e00 	.word	0x20002e00
 8005630:	0802bcac 	.word	0x0802bcac
 8005634:	ffffffff 	.word	0xffffffff

08005638 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8005638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800563c:	ed2d 8b02 	vpush	{d8}
 8005640:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 8005642:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 8005644:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005646:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 800564a:	ae0c      	add	r6, sp, #48	; 0x30
 800564c:	4f6e      	ldr	r7, [pc, #440]	; (8005808 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800564e:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8005830 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 8005652:	f00f ff01 	bl	8015458 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005656:	2301      	movs	r3, #1
 8005658:	9600      	str	r6, [sp, #0]
 800565a:	b2aa      	uxth	r2, r5
 800565c:	21c1      	movs	r1, #193	; 0xc1
 800565e:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8005660:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005662:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8005666:	f006 ffab 	bl	800c5c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800566a:	4604      	mov	r4, r0
 800566c:	2800      	cmp	r0, #0
 800566e:	f040 80a6 	bne.w	80057be <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8005672:	3501      	adds	r5, #1
 8005674:	2d04      	cmp	r5, #4
 8005676:	d1ee      	bne.n	8005656 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8005678:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800567c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8005680:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8005684:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8005688:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800568c:	485f      	ldr	r0, [pc, #380]	; (800580c <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800568e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8005692:	495f      	ldr	r1, [pc, #380]	; (8005810 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8005694:	0992      	lsrs	r2, r2, #6
	t = tr;
 8005696:	099c      	lsrs	r4, r3, #6
	p = pr;
 8005698:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800569c:	4a5d      	ldr	r2, [pc, #372]	; (8005814 <getpressure115.part.0+0x1dc>)
	t = tr;
 800569e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 80056a2:	119d      	asrs	r5, r3, #6
	p = pr;
 80056a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 80056a8:	2400      	movs	r4, #0
	t = tr;
 80056aa:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ae:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 80056b2:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 80056b6:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ba:	ed9d 7b08 	vldr	d7, [sp, #32]
 80056be:	ed91 4b00 	vldr	d4, [r1]
 80056c2:	4955      	ldr	r1, [pc, #340]	; (8005818 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 80056c4:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056c6:	eea1 4b07 	vfma.f64	d4, d1, d7
 80056ca:	ed91 6b00 	vldr	d6, [r1]
 80056ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80056d2:	ed92 0b00 	vldr	d0, [r2]
 80056d6:	eeb0 7b46 	vmov.f64	d7, d6
 80056da:	ed9d 2b08 	vldr	d2, [sp, #32]
 80056de:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80056e2:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 80057d8 <getpressure115.part.0+0x1a0>
 80056e6:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 80057e0 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 80056ea:	eea0 7b02 	vfma.f64	d7, d0, d2
 80056ee:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 80056f2:	ed9d 6b06 	vldr	d6, [sp, #24]
 80056f6:	eea6 5b03 	vfma.f64	d5, d6, d3
 80056fa:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 80056fe:	ed9d 0b06 	vldr	d0, [sp, #24]
 8005702:	f01f ff93 	bl	802562c <modf>
	t = tr * -0.1706 + 112.27; //C
 8005706:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800570a:	4944      	ldr	r1, [pc, #272]	; (800581c <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800570c:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 8005710:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 8005714:	4b42      	ldr	r3, [pc, #264]	; (8005820 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 8005716:	2264      	movs	r2, #100	; 0x64
 8005718:	4842      	ldr	r0, [pc, #264]	; (8005824 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 800571a:	ed9f 2b33 	vldr	d2, [pc, #204]	; 80057e8 <getpressure115.part.0+0x1b0>
 800571e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80057f0 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 8005722:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 8005726:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800572a:	ed9f 3b33 	vldr	d3, [pc, #204]	; 80057f8 <getpressure115.part.0+0x1c0>
 800572e:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 8005732:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005736:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 800573a:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800573e:	ed9f 2b30 	vldr	d2, [pc, #192]	; 8005800 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005742:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 8005746:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 800574a:	4b37      	ldr	r3, [pc, #220]	; (8005828 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 800574c:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 8005750:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005754:	4935      	ldr	r1, [pc, #212]	; (800582c <getpressure115.part.0+0x1f4>)
	temperature = t;
 8005756:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 800575a:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800575e:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8005762:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005766:	ed9d 7b06 	vldr	d7, [sp, #24]
 800576a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 800576e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005772:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8005776:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800577a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 800577e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005782:	feb8 7b47 	vrinta.f64	d7, d7
 8005786:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 800578a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800578e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005792:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8005796:	ee16 3a10 	vmov	r3, s12
 800579a:	fb02 f303 	mul.w	r3, r2, r3
 800579e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057a0:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 80057a4:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057a6:	ee17 2a10 	vmov	r2, s14
}
 80057aa:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80057ac:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 80057b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057b4:	b00f      	add	sp, #60	; 0x3c
 80057b6:	ecbd 8b02 	vpop	{d8}
 80057ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80057be:	4648      	mov	r0, r9
 80057c0:	4621      	mov	r1, r4
 80057c2:	f01f fde7 	bl	8025394 <iprintf>
			if (i == 3)
 80057c6:	2d03      	cmp	r5, #3
 80057c8:	f47f af53 	bne.w	8005672 <getpressure115.part.0+0x3a>
}
 80057cc:	4620      	mov	r0, r4
 80057ce:	b00f      	add	sp, #60	; 0x3c
 80057d0:	ecbd 8b02 	vpop	{d8}
 80057d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80057d8:	04411044 	.word	0x04411044
 80057dc:	3fb04411 	.word	0x3fb04411
 80057e0:	00000000 	.word	0x00000000
 80057e4:	40490000 	.word	0x40490000
 80057e8:	86594af5 	.word	0x86594af5
 80057ec:	bfc5d638 	.word	0xbfc5d638
 80057f0:	ae147ae1 	.word	0xae147ae1
 80057f4:	405c1147 	.word	0x405c1147
 80057f8:	00000000 	.word	0x00000000
 80057fc:	40590000 	.word	0x40590000
 8005800:	00000000 	.word	0x00000000
 8005804:	40af4000 	.word	0x40af4000
 8005808:	200024f0 	.word	0x200024f0
 800580c:	20002ff8 	.word	0x20002ff8
 8005810:	20002fe0 	.word	0x20002fe0
 8005814:	20002fe8 	.word	0x20002fe8
 8005818:	20002fd8 	.word	0x20002fd8
 800581c:	20003074 	.word	0x20003074
 8005820:	20003078 	.word	0x20003078
 8005824:	20003084 	.word	0x20003084
 8005828:	20003080 	.word	0x20003080
 800582c:	20002f3c 	.word	0x20002f3c
 8005830:	0802bd0c 	.word	0x0802bd0c

08005834 <cycleleds>:
void cycleleds(void) {
 8005834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005836:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 8005838:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800583a:	4f1c      	ldr	r7, [pc, #112]	; (80058ac <cycleleds+0x78>)
 800583c:	ac01      	add	r4, sp, #4
 800583e:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 8005842:	ca07      	ldmia	r2, {r0, r1, r2}
 8005844:	4623      	mov	r3, r4
 8005846:	4626      	mov	r6, r4
 8005848:	c303      	stmia	r3!, {r0, r1}
 800584a:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800584c:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005850:	4638      	mov	r0, r7
 8005852:	2200      	movs	r2, #0
 8005854:	f006 fa1a 	bl	800bc8c <HAL_GPIO_WritePin>
		osDelay(140);
 8005858:	208c      	movs	r0, #140	; 0x8c
 800585a:	f00f fdfd 	bl	8015458 <osDelay>
	for (i = 0; i < 5; i++) {
 800585e:	42ae      	cmp	r6, r5
 8005860:	d1f4      	bne.n	800584c <cycleleds+0x18>
	osDelay(600);
 8005862:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005866:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8005868:	4f10      	ldr	r7, [pc, #64]	; (80058ac <cycleleds+0x78>)
	osDelay(600);
 800586a:	f00f fdf5 	bl	8015458 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800586e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005872:	4638      	mov	r0, r7
 8005874:	2201      	movs	r2, #1
 8005876:	f006 fa09 	bl	800bc8c <HAL_GPIO_WritePin>
		osDelay(140);
 800587a:	208c      	movs	r0, #140	; 0x8c
 800587c:	f00f fdec 	bl	8015458 <osDelay>
	for (i = 0; i < 5; i++) {
 8005880:	42ae      	cmp	r6, r5
 8005882:	d1f4      	bne.n	800586e <cycleleds+0x3a>
	osDelay(500);
 8005884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8005888:	4e08      	ldr	r6, [pc, #32]	; (80058ac <cycleleds+0x78>)
	osDelay(500);
 800588a:	f00f fde5 	bl	8015458 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800588e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8005892:	4630      	mov	r0, r6
 8005894:	2200      	movs	r2, #0
 8005896:	f006 f9f9 	bl	800bc8c <HAL_GPIO_WritePin>
		osDelay(140);
 800589a:	208c      	movs	r0, #140	; 0x8c
 800589c:	f00f fddc 	bl	8015458 <osDelay>
	for (i = 0; i < 5; i++) {
 80058a0:	42ac      	cmp	r4, r5
 80058a2:	d1f4      	bne.n	800588e <cycleleds+0x5a>
}
 80058a4:	b005      	add	sp, #20
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a8:	0802956c 	.word	0x0802956c
 80058ac:	40020c00 	.word	0x40020c00

080058b0 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 80058b0:	b510      	push	{r4, lr}
 80058b2:	4604      	mov	r4, r0
 80058b4:	b082      	sub	sp, #8
	osDelay(5);
 80058b6:	2005      	movs	r0, #5
 80058b8:	f00f fdce 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80058bc:	2201      	movs	r2, #1
 80058be:	2104      	movs	r1, #4
 80058c0:	482b      	ldr	r0, [pc, #172]	; (8005970 <setpgagain+0xc0>)
 80058c2:	f006 f9e3 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 80058c6:	2005      	movs	r0, #5
 80058c8:	f00f fdc6 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80058cc:	2200      	movs	r2, #0
 80058ce:	2104      	movs	r1, #4
 80058d0:	4827      	ldr	r0, [pc, #156]	; (8005970 <setpgagain+0xc0>)
 80058d2:	f006 f9db 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 80058d6:	2005      	movs	r0, #5
 80058d8:	f00f fdbe 	bl	8015458 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058dc:	4925      	ldr	r1, [pc, #148]	; (8005974 <setpgagain+0xc4>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058e2:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058e4:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058e6:	4824      	ldr	r0, [pc, #144]	; (8005978 <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 80058e8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80058ec:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 80058f0:	a901      	add	r1, sp, #4
 80058f2:	f009 f9d1 	bl	800ec98 <HAL_SPI_Transmit>
 80058f6:	bb70      	cbnz	r0, 8005956 <setpgagain+0xa6>
	osDelay(5);
 80058f8:	2005      	movs	r0, #5
 80058fa:	f00f fdad 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80058fe:	2201      	movs	r2, #1
 8005900:	2104      	movs	r1, #4
 8005902:	481b      	ldr	r0, [pc, #108]	; (8005970 <setpgagain+0xc0>)
 8005904:	f006 f9c2 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 8005908:	2005      	movs	r0, #5
 800590a:	f00f fda5 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800590e:	2200      	movs	r2, #0
 8005910:	2104      	movs	r1, #4
 8005912:	4817      	ldr	r0, [pc, #92]	; (8005970 <setpgagain+0xc0>)
 8005914:	f006 f9ba 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 8005918:	2005      	movs	r0, #5
 800591a:	f00f fd9d 	bl	8015458 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 800591e:	2c08      	cmp	r4, #8
 8005920:	f244 1001 	movw	r0, #16641	; 0x4101
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 8005924:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 8005928:	bfb8      	it	lt
 800592a:	f44f 4082 	movlt.w	r0, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 800592e:	2201      	movs	r2, #1
 8005930:	a901      	add	r1, sp, #4
 8005932:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005936:	4810      	ldr	r0, [pc, #64]	; (8005978 <setpgagain+0xc8>)
 8005938:	f009 f9ae 	bl	800ec98 <HAL_SPI_Transmit>
 800593c:	b990      	cbnz	r0, 8005964 <setpgagain+0xb4>
	osDelay(5);
 800593e:	2005      	movs	r0, #5
 8005940:	f00f fd8a 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8005944:	2201      	movs	r2, #1
 8005946:	2104      	movs	r1, #4
 8005948:	4809      	ldr	r0, [pc, #36]	; (8005970 <setpgagain+0xc0>)
 800594a:	f006 f99f 	bl	800bc8c <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 800594e:	4b0b      	ldr	r3, [pc, #44]	; (800597c <setpgagain+0xcc>)
 8005950:	801c      	strh	r4, [r3, #0]
}
 8005952:	b002      	add	sp, #8
 8005954:	bd10      	pop	{r4, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8005956:	4601      	mov	r1, r0
 8005958:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800595c:	4808      	ldr	r0, [pc, #32]	; (8005980 <setpgagain+0xd0>)
 800595e:	f01f fd19 	bl	8025394 <iprintf>
 8005962:	e7c9      	b.n	80058f8 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8005964:	4601      	mov	r1, r0
 8005966:	4807      	ldr	r0, [pc, #28]	; (8005984 <setpgagain+0xd4>)
 8005968:	f01f fd14 	bl	8025394 <iprintf>
 800596c:	e7e7      	b.n	800593e <setpgagain+0x8e>
 800596e:	bf00      	nop
 8005970:	40021800 	.word	0x40021800
 8005974:	0802c168 	.word	0x0802c168
 8005978:	200025f4 	.word	0x200025f4
 800597c:	20003070 	.word	0x20003070
 8005980:	0802bd30 	.word	0x0802bd30
 8005984:	0802bd5c 	.word	0x0802bd5c

08005988 <initpga>:
int initpga() {
 8005988:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800598a:	2201      	movs	r2, #1
int initpga() {
 800598c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800598e:	2104      	movs	r1, #4
 8005990:	4826      	ldr	r0, [pc, #152]	; (8005a2c <initpga+0xa4>)
 8005992:	f006 f97b 	bl	800bc8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8005996:	2200      	movs	r2, #0
 8005998:	2104      	movs	r1, #4
 800599a:	4824      	ldr	r0, [pc, #144]	; (8005a2c <initpga+0xa4>)
 800599c:	f006 f976 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(50);
 80059a0:	2032      	movs	r0, #50	; 0x32
 80059a2:	f00f fd59 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 80059a6:	2201      	movs	r2, #1
 80059a8:	2104      	movs	r1, #4
 80059aa:	4820      	ldr	r0, [pc, #128]	; (8005a2c <initpga+0xa4>)
 80059ac:	f006 f96e 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 80059b0:	2005      	movs	r0, #5
 80059b2:	f00f fd51 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80059b6:	2200      	movs	r2, #0
 80059b8:	2104      	movs	r1, #4
 80059ba:	481c      	ldr	r0, [pc, #112]	; (8005a2c <initpga+0xa4>)
 80059bc:	f006 f966 	bl	800bc8c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 80059c0:	2000      	movs	r0, #0
 80059c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8ad 0004 	strh.w	r0, [sp, #4]
 80059cc:	a901      	add	r1, sp, #4
 80059ce:	4818      	ldr	r0, [pc, #96]	; (8005a30 <initpga+0xa8>)
 80059d0:	f009 f962 	bl	800ec98 <HAL_SPI_Transmit>
 80059d4:	4604      	mov	r4, r0
 80059d6:	bb08      	cbnz	r0, 8005a1c <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80059d8:	2104      	movs	r1, #4
 80059da:	2201      	movs	r2, #1
 80059dc:	4813      	ldr	r0, [pc, #76]	; (8005a2c <initpga+0xa4>)
 80059de:	f006 f955 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(5);
 80059e2:	2005      	movs	r0, #5
 80059e4:	f00f fd38 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80059e8:	4622      	mov	r2, r4
 80059ea:	2104      	movs	r1, #4
 80059ec:	480f      	ldr	r0, [pc, #60]	; (8005a2c <initpga+0xa4>)
 80059ee:	f006 f94d 	bl	800bc8c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80059f2:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 80059f6:	2005      	movs	r0, #5
 80059f8:	f00f fd2e 	bl	8015458 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80059fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a00:	2201      	movs	r2, #1
 8005a02:	a901      	add	r1, sp, #4
 8005a04:	480a      	ldr	r0, [pc, #40]	; (8005a30 <initpga+0xa8>)
 8005a06:	f8ad 4004 	strh.w	r4, [sp, #4]
 8005a0a:	f009 f945 	bl	800ec98 <HAL_SPI_Transmit>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	b920      	cbnz	r0, 8005a1c <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 8005a12:	f7ff ff4d 	bl	80058b0 <setpgagain>
	return (0);
 8005a16:	4620      	mov	r0, r4
}
 8005a18:	b002      	add	sp, #8
 8005a1a:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 8005a1c:	4621      	mov	r1, r4
 8005a1e:	4805      	ldr	r0, [pc, #20]	; (8005a34 <initpga+0xac>)
 8005a20:	f01f fcb8 	bl	8025394 <iprintf>
		return (1);
 8005a24:	2001      	movs	r0, #1
}
 8005a26:	b002      	add	sp, #8
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40021800 	.word	0x40021800
 8005a30:	200025f4 	.word	0x200025f4
 8005a34:	0802bd78 	.word	0x0802bd78

08005a38 <bumppga>:
int bumppga(int i) {
 8005a38:	b530      	push	{r4, r5, lr}
	gain = pgagain;
 8005a3a:	4d1f      	ldr	r5, [pc, #124]	; (8005ab8 <bumppga+0x80>)
int bumppga(int i) {
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	4604      	mov	r4, r0
	gain = pgagain;
 8005a40:	f9b5 1000 	ldrsh.w	r1, [r5]
	if ((pgagain > 9) || (pgagain < 0)) {
 8005a44:	b28b      	uxth	r3, r1
	gain = pgagain;
 8005a46:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 8005a48:	2b09      	cmp	r3, #9
 8005a4a:	d827      	bhi.n	8005a9c <bumppga+0x64>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <bumppga+0x84>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b0b      	cmp	r3, #11
 8005a52:	d00c      	beq.n	8005a6e <bumppga+0x36>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8005a54:	2c00      	cmp	r4, #0
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	da01      	bge.n	8005a5e <bumppga+0x26>
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	dd04      	ble.n	8005a68 <bumppga+0x30>
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	9b01      	ldr	r3, [sp, #4]
 8005a62:	dd12      	ble.n	8005a8a <bumppga+0x52>
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	dd10      	ble.n	8005a8a <bumppga+0x52>
	return (0);
 8005a68:	2000      	movs	r0, #0
}
 8005a6a:	b003      	add	sp, #12
 8005a6c:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8005a6e:	2907      	cmp	r1, #7
 8005a70:	dd01      	ble.n	8005a76 <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8005a72:	2307      	movs	r3, #7
 8005a74:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	da01      	bge.n	8005a80 <bumppga+0x48>
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	ddf3      	ble.n	8005a68 <bumppga+0x30>
 8005a80:	9b01      	ldr	r3, [sp, #4]
 8005a82:	2b06      	cmp	r3, #6
 8005a84:	dd01      	ble.n	8005a8a <bumppga+0x52>
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	dcee      	bgt.n	8005a68 <bumppga+0x30>
			gain = gain + i;
 8005a8a:	9b01      	ldr	r3, [sp, #4]
 8005a8c:	4423      	add	r3, r4
 8005a8e:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8005a90:	9801      	ldr	r0, [sp, #4]
 8005a92:	f7ff ff0d 	bl	80058b0 <setpgagain>
			return (i);
 8005a96:	4620      	mov	r0, r4
}
 8005a98:	b003      	add	sp, #12
 8005a9a:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8005a9c:	4808      	ldr	r0, [pc, #32]	; (8005ac0 <bumppga+0x88>)
 8005a9e:	f01f fc79 	bl	8025394 <iprintf>
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aa2:	4b06      	ldr	r3, [pc, #24]	; (8005abc <bumppga+0x84>)
		pgagain = 0;
 8005aa4:	2200      	movs	r2, #0
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aa6:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 8005aa8:	802a      	strh	r2, [r5, #0]
	if (circuitboardpcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8005aaa:	2b0b      	cmp	r3, #11
 8005aac:	d0e3      	beq.n	8005a76 <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8005aae:	2c00      	cmp	r4, #0
 8005ab0:	9b01      	ldr	r3, [sp, #4]
 8005ab2:	dbd2      	blt.n	8005a5a <bumppga+0x22>
 8005ab4:	e7d3      	b.n	8005a5e <bumppga+0x26>
 8005ab6:	bf00      	nop
 8005ab8:	20003070 	.word	0x20003070
 8005abc:	2000208c 	.word	0x2000208c
 8005ac0:	0802bd94 	.word	0x0802bd94

08005ac4 <getpressure115>:
HAL_StatusTypeDef getpressure115(void) {
 8005ac4:	b510      	push	{r4, lr}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005ac6:	2012      	movs	r0, #18
HAL_StatusTypeDef getpressure115(void) {
 8005ac8:	b084      	sub	sp, #16
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005aca:	2100      	movs	r1, #0
 8005acc:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8005ad0:	f88d 000c 	strb.w	r0, [sp, #12]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	f88d 100d 	strb.w	r1, [sp, #13]
 8005ada:	aa03      	add	r2, sp, #12
 8005adc:	21c0      	movs	r1, #192	; 0xc0
 8005ade:	4809      	ldr	r0, [pc, #36]	; (8005b04 <getpressure115+0x40>)
 8005ae0:	9400      	str	r4, [sp, #0]
 8005ae2:	f006 fbd9 	bl	800c298 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005ae6:	b928      	cbnz	r0, 8005af4 <getpressure115+0x30>
 8005ae8:	f7ff fda6 	bl	8005638 <getpressure115.part.0>
 8005aec:	4604      	mov	r4, r0
}
 8005aee:	4620      	mov	r0, r4
 8005af0:	b004      	add	sp, #16
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	4604      	mov	r4, r0
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005af6:	4804      	ldr	r0, [pc, #16]	; (8005b08 <getpressure115+0x44>)
 8005af8:	f01f fc4c 	bl	8025394 <iprintf>
}
 8005afc:	4620      	mov	r0, r4
 8005afe:	b004      	add	sp, #16
 8005b00:	bd10      	pop	{r4, pc}
 8005b02:	bf00      	nop
 8005b04:	200024f0 	.word	0x200024f0
 8005b08:	0802bdcc 	.word	0x0802bdcc

08005b0c <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 8005b12:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b16:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005b1a:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 8005b1e:	ac06      	add	r4, sp, #24
 8005b20:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b24:	4f36      	ldr	r7, [pc, #216]	; (8005c00 <initpressure115+0xf4>)
 8005b26:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8005b2a:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005b2e:	eb09 0204 	add.w	r2, r9, r4
 8005b32:	2301      	movs	r3, #1
 8005b34:	9400      	str	r4, [sp, #0]
 8005b36:	21c0      	movs	r1, #192	; 0xc0
 8005b38:	b292      	uxth	r2, r2
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	441c      	add	r4, r3
 8005b3e:	e9cd 8601 	strd	r8, r6, [sp, #4]
 8005b42:	f006 fd3d 	bl	800c5c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005b46:	4605      	mov	r5, r0
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d141      	bne.n	8005bd0 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8005b4c:	45a2      	cmp	sl, r4
 8005b4e:	d1ee      	bne.n	8005b2e <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8005b50:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005b54:	2b5a      	cmp	r3, #90	; 0x5a
 8005b56:	d04a      	beq.n	8005bee <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8005b58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005b5c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8005b60:	badb      	revsh	r3, r3
 8005b62:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8005b66:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8005b6a:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8005b6c:	109b      	asrs	r3, r3, #2
 8005b6e:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 8005b70:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 8005b72:	ee06 2a10 	vmov	s12, r2
 8005b76:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8005b7a:	ee07 3a10 	vmov	s14, r3
 8005b7e:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 8005b82:	4a20      	ldr	r2, [pc, #128]	; (8005c04 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8005b84:	ee05 1a10 	vmov	s10, r1
 8005b88:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005b8c:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 8005b8e:	ee04 0a10 	vmov	s8, r0
 8005b92:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8005b96:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8005b98:	481c      	ldr	r0, [pc, #112]	; (8005c0c <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8005b9a:	491d      	ldr	r1, [pc, #116]	; (8005c10 <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005b9c:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 8005ba0:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005ba4:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8005ba6:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8005baa:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 8005bae:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005bb2:	f88d 2014 	strb.w	r2, [sp, #20]
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	aa05      	add	r2, sp, #20
 8005bba:	21c0      	movs	r1, #192	; 0xc0
 8005bbc:	4810      	ldr	r0, [pc, #64]	; (8005c00 <initpressure115+0xf4>)
 8005bbe:	f006 fb6b 	bl	800c298 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005bc2:	b968      	cbnz	r0, 8005be0 <initpressure115+0xd4>
 8005bc4:	f7ff fd38 	bl	8005638 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 8005bc8:	4628      	mov	r0, r5
 8005bca:	b008      	add	sp, #32
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8005bd0:	4601      	mov	r1, r0
 8005bd2:	4810      	ldr	r0, [pc, #64]	; (8005c14 <initpressure115+0x108>)
 8005bd4:	f01f fbde 	bl	8025394 <iprintf>
}
 8005bd8:	4628      	mov	r0, r5
 8005bda:	b008      	add	sp, #32
 8005bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 8005be0:	480d      	ldr	r0, [pc, #52]	; (8005c18 <initpressure115+0x10c>)
 8005be2:	f01f fbd7 	bl	8025394 <iprintf>
}
 8005be6:	4628      	mov	r0, r5
 8005be8:	b008      	add	sp, #32
 8005bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8005bee:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8005bf0:	480a      	ldr	r0, [pc, #40]	; (8005c1c <initpressure115+0x110>)
 8005bf2:	f01f fbcf 	bl	8025394 <iprintf>
}
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	b008      	add	sp, #32
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	bf00      	nop
 8005c00:	200024f0 	.word	0x200024f0
 8005c04:	20002ff8 	.word	0x20002ff8
 8005c08:	20002fd8 	.word	0x20002fd8
 8005c0c:	20002fe0 	.word	0x20002fe0
 8005c10:	20002fe8 	.word	0x20002fe8
 8005c14:	0802bdf0 	.word	0x0802bdf0
 8005c18:	0802bdcc 	.word	0x0802bdcc
 8005c1c:	0802be20 	.word	0x0802be20

08005c20 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8005c26:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8005c28:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c2a:	4f46      	ldr	r7, [pc, #280]	; (8005d44 <getpressure3115+0x124>)
 8005c2c:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8005c2e:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005d64 <getpressure3115+0x144>
	data[0] = 0x55;
 8005c32:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8005c36:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8005c3c:	f00f fc0c 	bl	8015458 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c40:	2301      	movs	r3, #1
 8005c42:	2200      	movs	r2, #0
 8005c44:	21c0      	movs	r1, #192	; 0xc0
 8005c46:	4638      	mov	r0, r7
 8005c48:	9600      	str	r6, [sp, #0]
 8005c4a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c4e:	f006 fcb7 	bl	800c5c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005c52:	4604      	mov	r4, r0
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d163      	bne.n	8005d20 <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8005c58:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8005c5c:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 8005c5e:	071b      	lsls	r3, r3, #28
 8005c60:	d401      	bmi.n	8005c66 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 8005c62:	2d04      	cmp	r5, #4
 8005c64:	d1e7      	bne.n	8005c36 <getpressure3115+0x16>
 8005c66:	2501      	movs	r5, #1
 8005c68:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c6a:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8005c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005d44 <getpressure3115+0x124>
 8005c72:	46a9      	mov	r9, r5
 8005c74:	b2aa      	uxth	r2, r5
 8005c76:	2301      	movs	r3, #1
 8005c78:	21c0      	movs	r1, #192	; 0xc0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 8005c7e:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005c80:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005c84:	f006 fc9c 	bl	800c5c0 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005c88:	4604      	mov	r4, r0
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d152      	bne.n	8005d34 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8005c8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8005c92:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8005c94:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8005c98:	d1ec      	bne.n	8005c74 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005c9a:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 8005c9e:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005ca2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005ca6:	0209      	lsls	r1, r1, #8
 8005ca8:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8005cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cb4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cb8:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cba:	4923      	ldr	r1, [pc, #140]	; (8005d48 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cbc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cc0:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cc2:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005cc4:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005cc6:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cc8:	9805      	ldr	r0, [sp, #20]
 8005cca:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 8005ccc:	4b1f      	ldr	r3, [pc, #124]	; (8005d4c <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8005cce:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 8005cd2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cd6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 8005cda:	9a04      	ldr	r2, [sp, #16]
 8005cdc:	fba3 0202 	umull	r0, r2, r3, r2
 8005ce0:	0a12      	lsrs	r2, r2, #8
 8005ce2:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005ce4:	9a04      	ldr	r2, [sp, #16]
 8005ce6:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005cea:	4819      	ldr	r0, [pc, #100]	; (8005d50 <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cec:	0a1b      	lsrs	r3, r3, #8
 8005cee:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8005cf4:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 8005cf8:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8005cfa:	9b06      	ldr	r3, [sp, #24]
 8005cfc:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005cfe:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 8005d00:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8005d02:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d04:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 8005d06:	0912      	lsrs	r2, r2, #4
 8005d08:	4813      	ldr	r0, [pc, #76]	; (8005d58 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d0a:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 8005d0e:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8005d10:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 8005d12:	4a12      	ldr	r2, [pc, #72]	; (8005d5c <getpressure3115+0x13c>)
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	6013      	str	r3, [r2, #0]
}
 8005d1a:	b00c      	add	sp, #48	; 0x30
 8005d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8005d20:	4601      	mov	r1, r0
 8005d22:	4640      	mov	r0, r8
 8005d24:	f01f fb36 	bl	8025394 <iprintf>
			if (trys == 3)
 8005d28:	2d03      	cmp	r5, #3
 8005d2a:	d195      	bne.n	8005c58 <getpressure3115+0x38>
}
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	b00c      	add	sp, #48	; 0x30
 8005d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8005d34:	4601      	mov	r1, r0
 8005d36:	480a      	ldr	r0, [pc, #40]	; (8005d60 <getpressure3115+0x140>)
 8005d38:	f01f fb2c 	bl	8025394 <iprintf>
}
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	b00c      	add	sp, #48	; 0x30
 8005d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d44:	200024f0 	.word	0x200024f0
 8005d48:	20002f3c 	.word	0x20002f3c
 8005d4c:	10624dd3 	.word	0x10624dd3
 8005d50:	20003074 	.word	0x20003074
 8005d54:	20003078 	.word	0x20003078
 8005d58:	20003080 	.word	0x20003080
 8005d5c:	20003084 	.word	0x20003084
 8005d60:	0802be70 	.word	0x0802be70
 8005d64:	0802be48 	.word	0x0802be48

08005d68 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8005d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d6a:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8005d6c:	2501      	movs	r5, #1
 8005d6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005d72:	220c      	movs	r2, #12
 8005d74:	a908      	add	r1, sp, #32
 8005d76:	462b      	mov	r3, r5
 8005d78:	4832      	ldr	r0, [pc, #200]	; (8005e44 <initpressure3115+0xdc>)
 8005d7a:	9100      	str	r1, [sp, #0]
 8005d7c:	21c0      	movs	r1, #192	; 0xc0
 8005d7e:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005d82:	f006 fc1d 	bl	800c5c0 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d145      	bne.n	8005e16 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8005d8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8005d8e:	2bc4      	cmp	r3, #196	; 0xc4
 8005d90:	d003      	beq.n	8005d9a <initpressure3115+0x32>
		return (HAL_ERROR);
 8005d92:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8005d94:	4620      	mov	r0, r4
 8005d96:	b00b      	add	sp, #44	; 0x2c
 8005d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8005d9a:	4f2b      	ldr	r7, [pc, #172]	; (8005e48 <initpressure3115+0xe0>)
 8005d9c:	aa05      	add	r2, sp, #20
 8005d9e:	21c0      	movs	r1, #192	; 0xc0
 8005da0:	4828      	ldr	r0, [pc, #160]	; (8005e44 <initpressure3115+0xdc>)
 8005da2:	89bb      	ldrh	r3, [r7, #12]
 8005da4:	9600      	str	r6, [sp, #0]
 8005da6:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005daa:	2302      	movs	r3, #2
 8005dac:	f006 fa74 	bl	800c298 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005db0:	4604      	mov	r4, r0
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d136      	bne.n	8005e24 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8005db6:	8a3b      	ldrh	r3, [r7, #16]
 8005db8:	aa06      	add	r2, sp, #24
 8005dba:	21c0      	movs	r1, #192	; 0xc0
 8005dbc:	4821      	ldr	r0, [pc, #132]	; (8005e44 <initpressure3115+0xdc>)
 8005dbe:	f8ad 3018 	strh.w	r3, [sp, #24]
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	9600      	str	r6, [sp, #0]
 8005dc6:	f006 fa67 	bl	800c298 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005dca:	4604      	mov	r4, r0
 8005dcc:	bb70      	cbnz	r0, 8005e2c <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8005dce:	8aba      	ldrh	r2, [r7, #20]
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	21c0      	movs	r1, #192	; 0xc0
 8005dd4:	481b      	ldr	r0, [pc, #108]	; (8005e44 <initpressure3115+0xdc>)
 8005dd6:	f8ad 201c 	strh.w	r2, [sp, #28]
 8005dda:	aa07      	add	r2, sp, #28
 8005ddc:	9600      	str	r6, [sp, #0]
 8005dde:	f006 fa5b 	bl	800c298 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8005de2:	4604      	mov	r4, r0
 8005de4:	bb50      	cbnz	r0, 8005e3c <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8005de6:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 8005de8:	2064      	movs	r0, #100	; 0x64
 8005dea:	f00f fb35 	bl	8015458 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8005dee:	462b      	mov	r3, r5
 8005df0:	9400      	str	r4, [sp, #0]
 8005df2:	462a      	mov	r2, r5
 8005df4:	21c0      	movs	r1, #192	; 0xc0
 8005df6:	4813      	ldr	r0, [pc, #76]	; (8005e44 <initpressure3115+0xdc>)
 8005df8:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8005dfc:	f006 fbe0 	bl	800c5c0 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005e00:	4604      	mov	r4, r0
 8005e02:	b9b8      	cbnz	r0, 8005e34 <initpressure3115+0xcc>
	result = getpressure3115();
 8005e04:	f7ff ff0c 	bl	8005c20 <getpressure3115>
	if (result != HAL_OK) {
 8005e08:	4604      	mov	r4, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0c2      	beq.n	8005d94 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8005e0e:	480f      	ldr	r0, [pc, #60]	; (8005e4c <initpressure3115+0xe4>)
 8005e10:	f01f fac0 	bl	8025394 <iprintf>
 8005e14:	e7be      	b.n	8005d94 <initpressure3115+0x2c>
 8005e16:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8005e18:	480d      	ldr	r0, [pc, #52]	; (8005e50 <initpressure3115+0xe8>)
 8005e1a:	f01f fabb 	bl	8025394 <iprintf>
}
 8005e1e:	4620      	mov	r0, r4
 8005e20:	b00b      	add	sp, #44	; 0x2c
 8005e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8005e24:	480b      	ldr	r0, [pc, #44]	; (8005e54 <initpressure3115+0xec>)
 8005e26:	f01f fab5 	bl	8025394 <iprintf>
		return (result);
 8005e2a:	e7b3      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8005e2c:	480a      	ldr	r0, [pc, #40]	; (8005e58 <initpressure3115+0xf0>)
 8005e2e:	f01f fab1 	bl	8025394 <iprintf>
		return (result);
 8005e32:	e7af      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8005e34:	4809      	ldr	r0, [pc, #36]	; (8005e5c <initpressure3115+0xf4>)
 8005e36:	f01f faad 	bl	8025394 <iprintf>
		return (result);
 8005e3a:	e7ab      	b.n	8005d94 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8005e3c:	4808      	ldr	r0, [pc, #32]	; (8005e60 <initpressure3115+0xf8>)
 8005e3e:	f01f faa9 	bl	8025394 <iprintf>
		return (result);
 8005e42:	e7a7      	b.n	8005d94 <initpressure3115+0x2c>
 8005e44:	200024f0 	.word	0x200024f0
 8005e48:	0802956c 	.word	0x0802956c
 8005e4c:	0802bf08 	.word	0x0802bf08
 8005e50:	0802bdb0 	.word	0x0802bdb0
 8005e54:	0802be98 	.word	0x0802be98
 8005e58:	0802beb4 	.word	0x0802beb4
 8005e5c:	0802beec 	.word	0x0802beec
 8005e60:	0802bed0 	.word	0x0802bed0

08005e64 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8005e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8005e68:	4820      	ldr	r0, [pc, #128]	; (8005eec <init_esp+0x88>)
 8005e6a:	f01f fb2f 	bl	80254cc <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8005e6e:	2201      	movs	r2, #1
 8005e70:	491f      	ldr	r1, [pc, #124]	; (8005ef0 <init_esp+0x8c>)
 8005e72:	4820      	ldr	r0, [pc, #128]	; (8005ef4 <init_esp+0x90>)
 8005e74:	f00d fa94 	bl	80133a0 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8005e78:	bb98      	cbnz	r0, 8005ee2 <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e80:	481d      	ldr	r0, [pc, #116]	; (8005ef8 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005e82:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005e86:	f005 ff01 	bl	800bc8c <HAL_GPIO_WritePin>
	osDelay(20);
 8005e8a:	4c1c      	ldr	r4, [pc, #112]	; (8005efc <init_esp+0x98>)
 8005e8c:	2014      	movs	r0, #20
 8005e8e:	4d1c      	ldr	r5, [pc, #112]	; (8005f00 <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 8005e90:	4e1c      	ldr	r6, [pc, #112]	; (8005f04 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8005e92:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8005e96:	f00f fadf 	bl	8015458 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ea0:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <init_esp+0x94>)
 8005ea2:	f005 fef3 	bl	800bc8c <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8005ea6:	6823      	ldr	r3, [r4, #0]
 8005ea8:	e006      	b.n	8005eb8 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8005eaa:	5cf0      	ldrb	r0, [r6, r3]
 8005eac:	6021      	str	r1, [r4, #0]
 8005eae:	f01f fa89 	bl	80253c4 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	2b60      	cmp	r3, #96	; 0x60
 8005eb6:	d810      	bhi.n	8005eda <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005eb8:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005eba:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d1f4      	bne.n	8005eaa <init_esp+0x46>
		osDelay(1);
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	f00f fac9 	bl	8015458 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8005ec6:	3f01      	subs	r7, #1
 8005ec8:	d1ed      	bne.n	8005ea6 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 8005eca:	20c8      	movs	r0, #200	; 0xc8
 8005ecc:	f00f fac4 	bl	8015458 <osDelay>
	printf("\n");
 8005ed0:	200a      	movs	r0, #10
}
 8005ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 8005ed6:	f01f ba75 	b.w	80253c4 <putchar>
			espoutindex = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	f8c4 8000 	str.w	r8, [r4]
 8005ee0:	e7ea      	b.n	8005eb8 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 8005ee2:	4809      	ldr	r0, [pc, #36]	; (8005f08 <init_esp+0xa4>)
 8005ee4:	f01f faf2 	bl	80254cc <puts>
 8005ee8:	e7c7      	b.n	8005e7a <init_esp+0x16>
 8005eea:	bf00      	nop
 8005eec:	0802bf28 	.word	0x0802bf28
 8005ef0:	20003000 	.word	0x20003000
 8005ef4:	20002b90 	.word	0x20002b90
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	20003004 	.word	0x20003004
 8005f00:	20003068 	.word	0x20003068
 8005f04:	20003008 	.word	0x20003008
 8005f08:	0802bf3c 	.word	0x0802bf3c

08005f0c <uart6_rxdone>:
uart6_rxdone() {
 8005f0c:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 8005f0e:	4c0b      	ldr	r4, [pc, #44]	; (8005f3c <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8005f10:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <uart6_rxdone+0x34>)
	i = esprxindex;
 8005f12:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	1c6b      	adds	r3, r5, #1
 8005f18:	4a0a      	ldr	r2, [pc, #40]	; (8005f44 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8005f1a:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8005f1c:	5551      	strb	r1, [r2, r5]
 8005f1e:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8005f20:	d902      	bls.n	8005f28 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8005f22:	2200      	movs	r2, #0
 8005f24:	4613      	mov	r3, r2
 8005f26:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8005f28:	4a07      	ldr	r2, [pc, #28]	; (8005f48 <uart6_rxdone+0x3c>)
 8005f2a:	6812      	ldr	r2, [r2, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d000      	beq.n	8005f32 <uart6_rxdone+0x26>
}
 8005f30:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8005f32:	4806      	ldr	r0, [pc, #24]	; (8005f4c <uart6_rxdone+0x40>)
 8005f34:	f01f faca 	bl	80254cc <puts>
		esprxindex = i;
 8005f38:	6025      	str	r5, [r4, #0]
}
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20003068 	.word	0x20003068
 8005f40:	20003000 	.word	0x20003000
 8005f44:	20003008 	.word	0x20003008
 8005f48:	20003004 	.word	0x20003004
 8005f4c:	0802bf54 	.word	0x0802bf54

08005f50 <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8005f50:	b510      	push	{r4, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8005f56:	ac02      	add	r4, sp, #8
 8005f58:	4620      	mov	r0, r4
 8005f5a:	f01f fc96 	bl	802588a <stpcpy>
	strcat(txbuf, "\r\n");
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <esp_cmd+0x44>)
 8005f60:	8819      	ldrh	r1, [r3, #0]
 8005f62:	789a      	ldrb	r2, [r3, #2]
 8005f64:	1b03      	subs	r3, r0, r4
 8005f66:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8005f68:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8005f6a:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8005f6c:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8005f6e:	480a      	ldr	r0, [pc, #40]	; (8005f98 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8005f70:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8005f72:	f01f fa0f 	bl	8025394 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8005f76:	9a01      	ldr	r2, [sp, #4]
 8005f78:	4621      	mov	r1, r4
 8005f7a:	4808      	ldr	r0, [pc, #32]	; (8005f9c <esp_cmd+0x4c>)
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	f00b ffcf 	bl	8011f20 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8005f82:	b908      	cbnz	r0, 8005f88 <esp_cmd+0x38>
}
 8005f84:	b006      	add	sp, #24
 8005f86:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005f88:	4601      	mov	r1, r0
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <esp_cmd+0x50>)
 8005f8c:	f01f fa02 	bl	8025394 <iprintf>
}
 8005f90:	b006      	add	sp, #24
 8005f92:	bd10      	pop	{r4, pc}
 8005f94:	0802a10c 	.word	0x0802a10c
 8005f98:	0802bf70 	.word	0x0802bf70
 8005f9c:	20002b90 	.word	0x20002b90
 8005fa0:	0802bf84 	.word	0x0802bf84

08005fa4 <test_esp>:
void test_esp() {
 8005fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005fa8:	4813      	ldr	r0, [pc, #76]	; (8005ff8 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8005faa:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8005fae:	f01f fa8d 	bl	80254cc <puts>
	osDelay(200);
 8005fb2:	4c12      	ldr	r4, [pc, #72]	; (8005ffc <test_esp+0x58>)
 8005fb4:	20c8      	movs	r0, #200	; 0xc8
 8005fb6:	4d12      	ldr	r5, [pc, #72]	; (8006000 <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005fb8:	4e12      	ldr	r6, [pc, #72]	; (8006004 <test_esp+0x60>)
			espoutindex = 0;
 8005fba:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8005fbe:	f00f fa4b 	bl	8015458 <osDelay>
	esp_cmd(getstatus);	// send the command
 8005fc2:	4811      	ldr	r0, [pc, #68]	; (8006008 <test_esp+0x64>)
 8005fc4:	f7ff ffc4 	bl	8005f50 <esp_cmd>
	while (espoutindex != esprxindex) {
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	e006      	b.n	8005fda <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8005fcc:	5cf0      	ldrb	r0, [r6, r3]
 8005fce:	6021      	str	r1, [r4, #0]
 8005fd0:	f01f f9f8 	bl	80253c4 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	2b60      	cmp	r3, #96	; 0x60
 8005fd8:	d80a      	bhi.n	8005ff0 <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 8005fda:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005fdc:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d1f4      	bne.n	8005fcc <test_esp+0x28>
		osDelay(1);
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	f00f fa38 	bl	8015458 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8005fe8:	3f01      	subs	r7, #1
 8005fea:	d1ed      	bne.n	8005fc8 <test_esp+0x24>
}
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c4 8000 	str.w	r8, [r4]
 8005ff6:	e7f0      	b.n	8005fda <test_esp+0x36>
 8005ff8:	0802bfa4 	.word	0x0802bfa4
 8005ffc:	20003004 	.word	0x20003004
 8006000:	20003068 	.word	0x20003068
 8006004:	20003008 	.word	0x20003008
 8006008:	20000270 	.word	0x20000270

0800600c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 800600c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 800600e:	4818      	ldr	r0, [pc, #96]	; (8006070 <init_ds2485+0x64>)
void init_ds2485(void) {
 8006010:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8006012:	f01f fa5b 	bl	80254cc <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8006016:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800601c:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 800601e:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006022:	2303      	movs	r3, #3
 8006024:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8006026:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 800602a:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 800602c:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8006030:	aa02      	add	r2, sp, #8
 8006032:	4810      	ldr	r0, [pc, #64]	; (8006074 <init_ds2485+0x68>)
 8006034:	f006 f930 	bl	800c298 <HAL_I2C_Master_Transmit>
 8006038:	b9a8      	cbnz	r0, 8006066 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 800603a:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800603c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8006040:	f00f fa0a 	bl	8015458 <osDelay>
		data[i] = 0xA5 + i;
 8006044:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8006046:	2181      	movs	r1, #129	; 0x81
 8006048:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 800604a:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 800604e:	aa02      	add	r2, sp, #8
 8006050:	4808      	ldr	r0, [pc, #32]	; (8006074 <init_ds2485+0x68>)
 8006052:	9400      	str	r4, [sp, #0]
 8006054:	f006 f9e8 	bl	800c428 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8006058:	4601      	mov	r1, r0
 800605a:	b110      	cbz	r0, 8006062 <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 800605c:	4806      	ldr	r0, [pc, #24]	; (8006078 <init_ds2485+0x6c>)
 800605e:	f01f f999 	bl	8025394 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8006062:	b006      	add	sp, #24
 8006064:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8006066:	4601      	mov	r1, r0
 8006068:	4803      	ldr	r0, [pc, #12]	; (8006078 <init_ds2485+0x6c>)
 800606a:	f01f f993 	bl	8025394 <iprintf>
 800606e:	e7e4      	b.n	800603a <init_ds2485+0x2e>
 8006070:	0802bfcc 	.word	0x0802bfcc
 8006074:	200024f0 	.word	0x200024f0
 8006078:	0802bfd8 	.word	0x0802bfd8

0800607c <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8006082:	4821      	ldr	r0, [pc, #132]	; (8006108 <readp_ds2485+0x8c>)
 8006084:	f01f fa22 	bl	80254cc <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8006088:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800608a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 800608e:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8006090:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8006094:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 800609a:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 800609e:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 80060a0:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 80060a4:	aa03      	add	r2, sp, #12
 80060a6:	4819      	ldr	r0, [pc, #100]	; (800610c <readp_ds2485+0x90>)
 80060a8:	f006 f8f6 	bl	800c298 <HAL_I2C_Master_Transmit>
 80060ac:	bb18      	cbnz	r0, 80060f6 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 80060ae:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060b0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 80060b4:	f00f f9d0 	bl	8015458 <osDelay>
		data[i] = 0x5A + i;
 80060b8:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060ba:	b2a3      	uxth	r3, r4
 80060bc:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 80060be:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 80060c2:	2181      	movs	r1, #129	; 0x81
 80060c4:	4811      	ldr	r0, [pc, #68]	; (800610c <readp_ds2485+0x90>)
 80060c6:	9500      	str	r5, [sp, #0]
 80060c8:	f006 f9ae 	bl	800c428 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 80060cc:	b9b8      	cbnz	r0, 80060fe <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 80060ce:	4810      	ldr	r0, [pc, #64]	; (8006110 <readp_ds2485+0x94>)
 80060d0:	f10d 040b 	add.w	r4, sp, #11
 80060d4:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 80060d8:	4d0e      	ldr	r5, [pc, #56]	; (8006114 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 80060da:	f01f f95b 	bl	8025394 <iprintf>
		printf("0x%02x ", data[i]);
 80060de:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80060e2:	4628      	mov	r0, r5
 80060e4:	f01f f956 	bl	8025394 <iprintf>
	for (i = 0; i < 8; i++) {
 80060e8:	42b4      	cmp	r4, r6
 80060ea:	d1f8      	bne.n	80060de <readp_ds2485+0x62>
	}
	printf("\n");
 80060ec:	200a      	movs	r0, #10
 80060ee:	f01f f969 	bl	80253c4 <putchar>
}
 80060f2:	b006      	add	sp, #24
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 80060f6:	4808      	ldr	r0, [pc, #32]	; (8006118 <readp_ds2485+0x9c>)
 80060f8:	f01f f94c 	bl	8025394 <iprintf>
 80060fc:	e7d7      	b.n	80060ae <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 80060fe:	4601      	mov	r1, r0
 8006100:	4806      	ldr	r0, [pc, #24]	; (800611c <readp_ds2485+0xa0>)
 8006102:	f01f f947 	bl	8025394 <iprintf>
 8006106:	e7e2      	b.n	80060ce <readp_ds2485+0x52>
 8006108:	0802bffc 	.word	0x0802bffc
 800610c:	200024f0 	.word	0x200024f0
 8006110:	0802c05c 	.word	0x0802c05c
 8006114:	0802c084 	.word	0x0802c084
 8006118:	0802c014 	.word	0x0802c014
 800611c:	0802c038 	.word	0x0802c038

08006120 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8006120:	b530      	push	{r4, r5, lr}
 8006122:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8006124:	4c41      	ldr	r4, [pc, #260]	; (800622c <initsplat+0x10c>)
	cycleleds();
 8006126:	f7ff fb85 	bl	8005834 <cycleleds>
	osDelay(500);
 800612a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800612e:	f00f f993 	bl	8015458 <osDelay>
	printf("Initsplat: LED cycle\n");
 8006132:	483f      	ldr	r0, [pc, #252]	; (8006230 <initsplat+0x110>)
 8006134:	f01f f9ca 	bl	80254cc <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	2b0b      	cmp	r3, #11
 800613c:	d05d      	beq.n	80061fa <initsplat+0xda>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 800613e:	483d      	ldr	r0, [pc, #244]	; (8006234 <initsplat+0x114>)
 8006140:	f01f f9c4 	bl	80254cc <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8006144:	4d3c      	ldr	r5, [pc, #240]	; (8006238 <initsplat+0x118>)
	initpga();
 8006146:	f7ff fc1f 	bl	8005988 <initpga>
	osDelay(500);
 800614a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800614e:	f00f f983 	bl	8015458 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8006152:	483a      	ldr	r0, [pc, #232]	; (800623c <initsplat+0x11c>)
 8006154:	f01f f91e 	bl	8025394 <iprintf>
	psensor = PNONE;
 8006158:	2300      	movs	r3, #0
 800615a:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 800615c:	f7ff fe04 	bl	8005d68 <initpressure3115>
 8006160:	b9e0      	cbnz	r0, 800619c <initsplat+0x7c>
		printf("MPL3115A2 pressure sensor present\n\r");
 8006162:	4837      	ldr	r0, [pc, #220]	; (8006240 <initsplat+0x120>)
 8006164:	f01f f916 	bl	8025394 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8006168:	4a36      	ldr	r2, [pc, #216]	; (8006244 <initsplat+0x124>)
		psensor = MPL3115A2;
 800616a:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 800616c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8006170:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8006172:	f043 0310 	orr.w	r3, r3, #16
 8006176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 800617a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800617e:	f00f f96b 	bl	8015458 <osDelay>

	if ((circuitboardpcb == LIGHTNINGBOARD1) || (circuitboardpcb == LIGHTNINGBOARD2)) {
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	3b15      	subs	r3, #21
 8006186:	2b01      	cmp	r3, #1
 8006188:	d91c      	bls.n	80061c4 <initsplat+0xa4>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 800618a:	2200      	movs	r2, #0
 800618c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006190:	482d      	ldr	r0, [pc, #180]	; (8006248 <initsplat+0x128>)
}
 8006192:	b003      	add	sp, #12
 8006194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8006198:	f005 bd78 	b.w	800bc8c <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 800619c:	f7ff fcb6 	bl	8005b0c <initpressure115>
 80061a0:	b960      	cbnz	r0, 80061bc <initsplat+0x9c>
			printf("MPL115A2 pressure sensor present\n\r");
 80061a2:	482a      	ldr	r0, [pc, #168]	; (800624c <initsplat+0x12c>)
 80061a4:	f01f f8f6 	bl	8025394 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 80061a8:	4a26      	ldr	r2, [pc, #152]	; (8006244 <initsplat+0x124>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80061aa:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 80061ac:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 80061b0:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 80061b2:	f043 0308 	orr.w	r3, r3, #8
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061ba:	e7de      	b.n	800617a <initsplat+0x5a>
			printf("NO pressure sensor present\n\r");
 80061bc:	4824      	ldr	r0, [pc, #144]	; (8006250 <initsplat+0x130>)
 80061be:	f01f f8e9 	bl	8025394 <iprintf>
 80061c2:	e7da      	b.n	800617a <initsplat+0x5a>
		huart6.Init.BaudRate = 115200;
 80061c4:	4823      	ldr	r0, [pc, #140]	; (8006254 <initsplat+0x134>)
 80061c6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80061ca:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 80061cc:	f00c fef8 	bl	8012fc0 <HAL_UART_Init>
 80061d0:	bb28      	cbnz	r0, 800621e <initsplat+0xfe>
	init_ds2485();
 80061d2:	f7ff ff1b 	bl	800600c <init_ds2485>
	osDelay(80);
 80061d6:	2050      	movs	r0, #80	; 0x50
 80061d8:	f00f f93e 	bl	8015458 <osDelay>
	readp_ds2485(8);
 80061dc:	2008      	movs	r0, #8
 80061de:	f7ff ff4d 	bl	800607c <readp_ds2485>
		init_esp();
 80061e2:	f7ff fe3f 	bl	8005e64 <init_esp>
		osDelay(500);
 80061e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061ea:	f00f f935 	bl	8015458 <osDelay>
		test_esp();
 80061ee:	f7ff fed9 	bl	8005fa4 <test_esp>
		osDelay(200);
 80061f2:	20c8      	movs	r0, #200	; 0xc8
 80061f4:	f00f f930 	bl	8015458 <osDelay>
 80061f8:	e7c7      	b.n	800618a <initsplat+0x6a>
		printf("Initsplat: Dual Mux\n\r");
 80061fa:	4817      	ldr	r0, [pc, #92]	; (8006258 <initsplat+0x138>)
 80061fc:	f01f f8ca 	bl	8025394 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8006200:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006204:	2301      	movs	r3, #1
 8006206:	4a15      	ldr	r2, [pc, #84]	; (800625c <initsplat+0x13c>)
 8006208:	9000      	str	r0, [sp, #0]
 800620a:	2188      	movs	r1, #136	; 0x88
 800620c:	4814      	ldr	r0, [pc, #80]	; (8006260 <initsplat+0x140>)
 800620e:	f006 f843 	bl	800c298 <HAL_I2C_Master_Transmit>
 8006212:	b938      	cbnz	r0, 8006224 <initsplat+0x104>
		osDelay(500);
 8006214:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006218:	f00f f91e 	bl	8015458 <osDelay>
 800621c:	e78f      	b.n	800613e <initsplat+0x1e>
			Error_Handler();
 800621e:	f7fd fe85 	bl	8003f2c <Error_Handler>
 8006222:	e7d6      	b.n	80061d2 <initsplat+0xb2>
		printf("I2C HAL returned error 1\n\r");
 8006224:	480f      	ldr	r0, [pc, #60]	; (8006264 <initsplat+0x144>)
 8006226:	f01f f8b5 	bl	8025394 <iprintf>
 800622a:	e7f3      	b.n	8006214 <initsplat+0xf4>
 800622c:	2000208c 	.word	0x2000208c
 8006230:	0802c08c 	.word	0x0802c08c
 8006234:	0802c0bc 	.word	0x0802c0bc
 8006238:	2000307c 	.word	0x2000307c
 800623c:	0802c0e0 	.word	0x0802c0e0
 8006240:	0802c100 	.word	0x0802c100
 8006244:	20002f3c 	.word	0x20002f3c
 8006248:	40021000 	.word	0x40021000
 800624c:	0802c124 	.word	0x0802c124
 8006250:	0802c148 	.word	0x0802c148
 8006254:	20002b90 	.word	0x20002b90
 8006258:	0802c0a4 	.word	0x0802c0a4
 800625c:	2000027c 	.word	0x2000027c
 8006260:	200024f0 	.word	0x200024f0
 8006264:	0802bdb0 	.word	0x0802bdb0

08006268 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006268:	4b1a      	ldr	r3, [pc, #104]	; (80062d4 <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800626a:	2200      	movs	r2, #0
 800626c:	210f      	movs	r1, #15
 800626e:	f06f 0001 	mvn.w	r0, #1
{
 8006272:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006274:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8006276:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8006278:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800627c:	641c      	str	r4, [r3, #64]	; 0x40
 800627e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006280:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8006284:	9400      	str	r4, [sp, #0]
 8006286:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006288:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800628a:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800628e:	645c      	str	r4, [r3, #68]	; 0x44
 8006290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006296:	9301      	str	r3, [sp, #4]
 8006298:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800629a:	f002 fbcd 	bl	8008a38 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	2106      	movs	r1, #6
 80062a2:	2005      	movs	r0, #5
 80062a4:	f002 fbc8 	bl	8008a38 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80062a8:	2005      	movs	r0, #5
 80062aa:	f002 fc0f 	bl	8008acc <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 80062ae:	2200      	movs	r2, #0
 80062b0:	2106      	movs	r1, #6
 80062b2:	2005      	movs	r0, #5
 80062b4:	f002 fbc0 	bl	8008a38 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80062b8:	2005      	movs	r0, #5
 80062ba:	f002 fc07 	bl	8008acc <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 80062be:	2051      	movs	r0, #81	; 0x51
 80062c0:	2200      	movs	r2, #0
 80062c2:	2106      	movs	r1, #6
 80062c4:	f002 fbb8 	bl	8008a38 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062c8:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062ca:	b002      	add	sp, #8
 80062cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80062d0:	f002 bbfc 	b.w	8008acc <HAL_NVIC_EnableIRQ>
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80062d8:	4a49      	ldr	r2, [pc, #292]	; (8006400 <HAL_ADC_MspInit+0x128>)
 80062da:	6803      	ldr	r3, [r0, #0]
{
 80062dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 80062de:	4293      	cmp	r3, r2
{
 80062e0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e2:	f04f 0400 	mov.w	r4, #0
 80062e6:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80062ea:	9409      	str	r4, [sp, #36]	; 0x24
 80062ec:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 80062f0:	d007      	beq.n	8006302 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80062f2:	4a44      	ldr	r2, [pc, #272]	; (8006404 <HAL_ADC_MspInit+0x12c>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d045      	beq.n	8006384 <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 80062f8:	4a43      	ldr	r2, [pc, #268]	; (8006408 <HAL_ADC_MspInit+0x130>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d05f      	beq.n	80063be <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80062fe:	b00d      	add	sp, #52	; 0x34
 8006300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006302:	4b42      	ldr	r3, [pc, #264]	; (800640c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006304:	2703      	movs	r7, #3
 8006306:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006308:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 800630a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800630c:	4840      	ldr	r0, [pc, #256]	; (8006410 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800630e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8006312:	4e40      	ldr	r6, [pc, #256]	; (8006414 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006314:	645a      	str	r2, [r3, #68]	; 0x44
 8006316:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006318:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800631c:	9201      	str	r2, [sp, #4]
 800631e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006322:	f042 0201 	orr.w	r2, r2, #1
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006330:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006332:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006334:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006338:	f005 f9fc 	bl	800b734 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800633c:	4b36      	ldr	r3, [pc, #216]	; (8006418 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800633e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006342:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8006344:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006346:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800634a:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800634c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006350:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006352:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006356:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006358:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800635a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800635e:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006360:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006362:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800636a:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800636c:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006370:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006374:	f002 fe72 	bl	800905c <HAL_DMA_Init>
 8006378:	2800      	cmp	r0, #0
 800637a:	d13d      	bne.n	80063f8 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800637c:	63ae      	str	r6, [r5, #56]	; 0x38
 800637e:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8006380:	b00d      	add	sp, #52	; 0x34
 8006382:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006384:	4b21      	ldr	r3, [pc, #132]	; (800640c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006386:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006388:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800638a:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 800638c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800638e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006392:	645a      	str	r2, [r3, #68]	; 0x44
 8006394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006396:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800639a:	9203      	str	r2, [sp, #12]
 800639c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800639e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063a0:	f042 0201 	orr.w	r2, r2, #1
 80063a4:	631a      	str	r2, [r3, #48]	; 0x30
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063a8:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063aa:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063ae:	4818      	ldr	r0, [pc, #96]	; (8006410 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063b0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063b2:	9304      	str	r3, [sp, #16]
 80063b4:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063b6:	f005 f9bd 	bl	800b734 <HAL_GPIO_Init>
}
 80063ba:	b00d      	add	sp, #52	; 0x34
 80063bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 80063be:	4b13      	ldr	r3, [pc, #76]	; (800640c <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063c0:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063c2:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c4:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 80063c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44
 80063ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80063d4:	9205      	str	r2, [sp, #20]
 80063d6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80063e2:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063e4:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80063ea:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ec:	9306      	str	r3, [sp, #24]
 80063ee:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063f0:	f005 f9a0 	bl	800b734 <HAL_GPIO_Init>
}
 80063f4:	b00d      	add	sp, #52	; 0x34
 80063f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80063f8:	f7fd fd98 	bl	8003f2c <Error_Handler>
 80063fc:	e7be      	b.n	800637c <HAL_ADC_MspInit+0xa4>
 80063fe:	bf00      	nop
 8006400:	40012000 	.word	0x40012000
 8006404:	40012100 	.word	0x40012100
 8006408:	40012200 	.word	0x40012200
 800640c:	40023800 	.word	0x40023800
 8006410:	40020000 	.word	0x40020000
 8006414:	200021f0 	.word	0x200021f0
 8006418:	40026470 	.word	0x40026470

0800641c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800641c:	4b09      	ldr	r3, [pc, #36]	; (8006444 <HAL_CRC_MspInit+0x28>)
 800641e:	6802      	ldr	r2, [r0, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d000      	beq.n	8006426 <HAL_CRC_MspInit+0xa>
 8006424:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006426:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 800642e:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8006430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
 8006436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006438:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006440:	b002      	add	sp, #8
 8006442:	4770      	bx	lr
 8006444:	40023000 	.word	0x40023000

08006448 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8006448:	4b2b      	ldr	r3, [pc, #172]	; (80064f8 <HAL_DAC_MspInit+0xb0>)
 800644a:	6802      	ldr	r2, [r0, #0]
{
 800644c:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 800644e:	429a      	cmp	r2, r3
{
 8006450:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006452:	f04f 0400 	mov.w	r4, #0
 8006456:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800645a:	9405      	str	r4, [sp, #20]
 800645c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 8006460:	d001      	beq.n	8006466 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006462:	b008      	add	sp, #32
 8006464:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8006466:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 800646a:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800646c:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 800646e:	4e23      	ldr	r6, [pc, #140]	; (80064fc <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8006470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006472:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006476:	641a      	str	r2, [r3, #64]	; 0x40
 8006478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800647a:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800647e:	9201      	str	r2, [sp, #4]
 8006480:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006482:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006484:	f042 0201 	orr.w	r2, r2, #1
 8006488:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800648a:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006494:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006496:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006498:	4819      	ldr	r0, [pc, #100]	; (8006500 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800649a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800649e:	f005 f949 	bl	800b734 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80064a2:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 80064a6:	4a17      	ldr	r2, [pc, #92]	; (8006504 <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80064a8:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80064aa:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80064ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 80064b0:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064b2:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80064b4:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80064b6:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064b8:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064ba:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80064bc:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80064be:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064c2:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064c4:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064c6:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 80064c8:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80064ca:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80064cc:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80064ce:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80064d2:	f002 fdc3 	bl	800905c <HAL_DMA_Init>
 80064d6:	b958      	cbnz	r0, 80064f0 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064d8:	2200      	movs	r2, #0
 80064da:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80064dc:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064de:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80064e0:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064e2:	f002 faa9 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80064e6:	2036      	movs	r0, #54	; 0x36
 80064e8:	f002 faf0 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 80064ec:	b008      	add	sp, #32
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80064f0:	f7fd fd1c 	bl	8003f2c <Error_Handler>
 80064f4:	e7f0      	b.n	80064d8 <HAL_DAC_MspInit+0x90>
 80064f6:	bf00      	nop
 80064f8:	40007400 	.word	0x40007400
 80064fc:	20002250 	.word	0x20002250
 8006500:	40020000 	.word	0x40020000
 8006504:	40026088 	.word	0x40026088

08006508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006508:	b530      	push	{r4, r5, lr}
 800650a:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800650c:	2100      	movs	r1, #0
{
 800650e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006510:	2290      	movs	r2, #144	; 0x90
 8006512:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	910b      	str	r1, [sp, #44]	; 0x2c
 8006516:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800651a:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800651e:	f01d ff9b 	bl	8024458 <memset>
  if(hi2c->Instance==I2C1)
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	4a4a      	ldr	r2, [pc, #296]	; (8006650 <HAL_I2C_MspInit+0x148>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d007      	beq.n	800653a <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 800652a:	4a4a      	ldr	r2, [pc, #296]	; (8006654 <HAL_I2C_MspInit+0x14c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d030      	beq.n	8006592 <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8006530:	4a49      	ldr	r2, [pc, #292]	; (8006658 <HAL_I2C_MspInit+0x150>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d057      	beq.n	80065e6 <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8006536:	b031      	add	sp, #196	; 0xc4
 8006538:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800653a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800653e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006540:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006542:	f007 fc35 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006546:	2800      	cmp	r0, #0
 8006548:	d178      	bne.n	800663c <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654a:	4c44      	ldr	r4, [pc, #272]	; (800665c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800654c:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006550:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006552:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006554:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006556:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006558:	f043 0302 	orr.w	r3, r3, #2
 800655c:	6323      	str	r3, [r4, #48]	; 0x30
 800655e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006560:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006564:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006568:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800656a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800656c:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800656e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006570:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006574:	483a      	ldr	r0, [pc, #232]	; (8006660 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006576:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006578:	f005 f8dc 	bl	800b734 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800657c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800657e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006582:	6423      	str	r3, [r4, #64]	; 0x40
 8006584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800658a:	9302      	str	r3, [sp, #8]
 800658c:	9b02      	ldr	r3, [sp, #8]
}
 800658e:	b031      	add	sp, #196	; 0xc4
 8006590:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006596:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006598:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800659a:	f007 fc09 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d14f      	bne.n	8006642 <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065a2:	4c2e      	ldr	r4, [pc, #184]	; (800665c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065a4:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065a6:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065a8:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065ac:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ae:	f043 0320 	orr.w	r3, r3, #32
 80065b2:	6323      	str	r3, [r4, #48]	; 0x30
 80065b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065b6:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065b8:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065bc:	4829      	ldr	r0, [pc, #164]	; (8006664 <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065c0:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065c2:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80065c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065ca:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80065cc:	f005 f8b2 	bl	800b734 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80065d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065d6:	6423      	str	r3, [r4, #64]	; 0x40
 80065d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065de:	9304      	str	r3, [sp, #16]
 80065e0:	9b04      	ldr	r3, [sp, #16]
}
 80065e2:	b031      	add	sp, #196	; 0xc4
 80065e4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80065e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065ea:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80065ec:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065ee:	f007 fbdf 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 80065f2:	bb48      	cbnz	r0, 8006648 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065f4:	4c19      	ldr	r4, [pc, #100]	; (800665c <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80065f6:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065fa:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065fc:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80065fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006600:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006602:	f043 0320 	orr.w	r3, r3, #32
 8006606:	6323      	str	r3, [r4, #48]	; 0x30
 8006608:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800660a:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800660e:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006612:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006614:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006616:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006618:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661a:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800661e:	4811      	ldr	r0, [pc, #68]	; (8006664 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006620:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006622:	f005 f887 	bl	800b734 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8006626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006628:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800662c:	6423      	str	r3, [r4, #64]	; 0x40
 800662e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006634:	9306      	str	r3, [sp, #24]
 8006636:	9b06      	ldr	r3, [sp, #24]
}
 8006638:	b031      	add	sp, #196	; 0xc4
 800663a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800663c:	f7fd fc76 	bl	8003f2c <Error_Handler>
 8006640:	e783      	b.n	800654a <HAL_I2C_MspInit+0x42>
      Error_Handler();
 8006642:	f7fd fc73 	bl	8003f2c <Error_Handler>
 8006646:	e7ac      	b.n	80065a2 <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8006648:	f7fd fc70 	bl	8003f2c <Error_Handler>
 800664c:	e7d2      	b.n	80065f4 <HAL_I2C_MspInit+0xec>
 800664e:	bf00      	nop
 8006650:	40005400 	.word	0x40005400
 8006654:	40005800 	.word	0x40005800
 8006658:	40006000 	.word	0x40006000
 800665c:	40023800 	.word	0x40023800
 8006660:	40020400 	.word	0x40020400
 8006664:	40021400 	.word	0x40021400

08006668 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8006668:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_RNG_MspInit+0x24>)
 800666a:	6802      	ldr	r2, [r0, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d000      	beq.n	8006672 <HAL_RNG_MspInit+0xa>
 8006670:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <HAL_RNG_MspInit+0x28>)
{
 8006674:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 8006676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	635a      	str	r2, [r3, #52]	; 0x34
 800667e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8006688:	b002      	add	sp, #8
 800668a:	4770      	bx	lr
 800668c:	50060800 	.word	0x50060800
 8006690:	40023800 	.word	0x40023800

08006694 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 8006694:	4a52      	ldr	r2, [pc, #328]	; (80067e0 <HAL_SPI_MspInit+0x14c>)
 8006696:	6803      	ldr	r3, [r0, #0]
{
 8006698:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 800669a:	4293      	cmp	r3, r2
{
 800669c:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669e:	f04f 0400 	mov.w	r4, #0
 80066a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80066a6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80066aa:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80066ac:	d007      	beq.n	80066be <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80066ae:	4a4d      	ldr	r2, [pc, #308]	; (80067e4 <HAL_SPI_MspInit+0x150>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d038      	beq.n	8006726 <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 80066b4:	4a4c      	ldr	r2, [pc, #304]	; (80067e8 <HAL_SPI_MspInit+0x154>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d071      	beq.n	800679e <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80066ba:	b00f      	add	sp, #60	; 0x3c
 80066bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066be:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066c0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80066c2:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80066c4:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80066c8:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066ca:	4849      	ldr	r0, [pc, #292]	; (80067f0 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80066cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
 80066d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066d4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80066d8:	9201      	str	r2, [sp, #4]
 80066da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066de:	f042 0204 	orr.w	r2, r2, #4
 80066e2:	631a      	str	r2, [r3, #48]	; 0x30
 80066e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066e6:	f002 0204 	and.w	r2, r2, #4
 80066ea:	9202      	str	r2, [sp, #8]
 80066ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066f0:	f042 0208 	orr.w	r2, r2, #8
 80066f4:	631a      	str	r2, [r3, #48]	; 0x30
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80066f8:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066fa:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80066fe:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006700:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006704:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006706:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006708:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800670a:	f005 f813 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800670e:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006710:	a909      	add	r1, sp, #36	; 0x24
 8006712:	4838      	ldr	r0, [pc, #224]	; (80067f4 <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006714:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006716:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006718:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800671a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800671e:	f005 f809 	bl	800b734 <HAL_GPIO_Init>
}
 8006722:	b00f      	add	sp, #60	; 0x3c
 8006724:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006726:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006728:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800672a:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800672c:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 800672e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006730:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006732:	4831      	ldr	r0, [pc, #196]	; (80067f8 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006734:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
 800673a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800673c:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006740:	9204      	str	r2, [sp, #16]
 8006742:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006746:	4332      	orrs	r2, r6
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
 800674a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674c:	4032      	ands	r2, r6
 800674e:	9205      	str	r2, [sp, #20]
 8006750:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006754:	430a      	orrs	r2, r1
 8006756:	631a      	str	r2, [r3, #48]	; 0x30
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800675a:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800675c:	400b      	ands	r3, r1
 800675e:	9306      	str	r3, [sp, #24]
 8006760:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8006762:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006768:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800676a:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676c:	f004 ffe2 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006770:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006774:	a909      	add	r1, sp, #36	; 0x24
 8006776:	481e      	ldr	r0, [pc, #120]	; (80067f0 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006778:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800677a:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800677e:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006782:	f004 ffd7 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006786:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006788:	a909      	add	r1, sp, #36	; 0x24
 800678a:	481b      	ldr	r0, [pc, #108]	; (80067f8 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800678e:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006790:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006792:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006796:	f004 ffcd 	bl	800b734 <HAL_GPIO_Init>
}
 800679a:	b00f      	add	sp, #60	; 0x3c
 800679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 800679e:	4b13      	ldr	r3, [pc, #76]	; (80067ec <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067a0:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80067a2:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a4:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 80067a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067a8:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 80067aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ae:	645a      	str	r2, [r3, #68]	; 0x44
 80067b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067b2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80067b6:	9207      	str	r2, [sp, #28]
 80067b8:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	f042 0210 	orr.w	r2, r2, #16
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80067c2:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c6:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067c8:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067cc:	480b      	ldr	r0, [pc, #44]	; (80067fc <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80067ce:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80067d0:	9308      	str	r3, [sp, #32]
 80067d2:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80067d4:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067d8:	f004 ffac 	bl	800b734 <HAL_GPIO_Init>
}
 80067dc:	b00f      	add	sp, #60	; 0x3c
 80067de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067e0:	40003800 	.word	0x40003800
 80067e4:	40003c00 	.word	0x40003c00
 80067e8:	40013400 	.word	0x40013400
 80067ec:	40023800 	.word	0x40023800
 80067f0:	40020800 	.word	0x40020800
 80067f4:	40020c00 	.word	0x40020c00
 80067f8:	40020400 	.word	0x40020400
 80067fc:	40021000 	.word	0x40021000

08006800 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8006800:	4a73      	ldr	r2, [pc, #460]	; (80069d0 <HAL_TIM_Base_MspInit+0x1d0>)
 8006802:	6803      	ldr	r3, [r0, #0]
{
 8006804:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 8006806:	4293      	cmp	r3, r2
{
 8006808:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800680a:	f04f 0400 	mov.w	r4, #0
 800680e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006812:	940d      	str	r4, [sp, #52]	; 0x34
 8006814:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8006818:	d021      	beq.n	800685e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d055      	beq.n	80068cc <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006820:	4a6c      	ldr	r2, [pc, #432]	; (80069d4 <HAL_TIM_Base_MspInit+0x1d4>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d027      	beq.n	8006876 <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8006826:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d043      	beq.n	80068b4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800682c:	4a6b      	ldr	r2, [pc, #428]	; (80069dc <HAL_TIM_Base_MspInit+0x1dc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f000 80a5 	beq.w	800697e <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8006834:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_TIM_Base_MspInit+0x1e0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	f000 80b4 	beq.w	80069a4 <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800683c:	4a69      	ldr	r2, [pc, #420]	; (80069e4 <HAL_TIM_Base_MspInit+0x1e4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d02d      	beq.n	800689e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8006842:	4a69      	ldr	r2, [pc, #420]	; (80069e8 <HAL_TIM_Base_MspInit+0x1e8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d114      	bne.n	8006872 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006848:	4b68      	ldr	r3, [pc, #416]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
 800684a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800684c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006850:	641a      	str	r2, [r3, #64]	; 0x40
 8006852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006858:	930a      	str	r3, [sp, #40]	; 0x28
 800685a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800685c:	e009      	b.n	8006872 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 800685e:	4b63      	ldr	r3, [pc, #396]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
 8006860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	645a      	str	r2, [r3, #68]	; 0x44
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	9301      	str	r3, [sp, #4]
 8006870:	9b01      	ldr	r3, [sp, #4]
}
 8006872:	b011      	add	sp, #68	; 0x44
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006876:	4b5d      	ldr	r3, [pc, #372]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006878:	4622      	mov	r2, r4
 800687a:	2106      	movs	r1, #6
 800687c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800687e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006880:	f044 0402 	orr.w	r4, r4, #2
 8006884:	641c      	str	r4, [r3, #64]	; 0x40
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	9305      	str	r3, [sp, #20]
 800688e:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006890:	f002 f8d2 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006894:	201d      	movs	r0, #29
 8006896:	f002 f919 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 800689a:	b011      	add	sp, #68	; 0x44
 800689c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800689e:	4b53      	ldr	r3, [pc, #332]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
 80068a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a2:	f042 0220 	orr.w	r2, r2, #32
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b2:	e7de      	b.n	8006872 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068b4:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
 80068b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b8:	f042 0204 	orr.w	r2, r2, #4
 80068bc:	641a      	str	r2, [r3, #64]	; 0x40
 80068be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c0:	f003 0304 	and.w	r3, r3, #4
 80068c4:	9306      	str	r3, [sp, #24]
 80068c6:	9b06      	ldr	r3, [sp, #24]
}
 80068c8:	b011      	add	sp, #68	; 0x44
 80068ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068cc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d0:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80068d2:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068d4:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068d8:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068da:	4845      	ldr	r0, [pc, #276]	; (80069f0 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80068dc:	f042 0201 	orr.w	r2, r2, #1
 80068e0:	641a      	str	r2, [r3, #64]	; 0x40
 80068e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068e4:	f002 0201 	and.w	r2, r2, #1
 80068e8:	9202      	str	r2, [sp, #8]
 80068ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ee:	f042 0201 	orr.w	r2, r2, #1
 80068f2:	631a      	str	r2, [r3, #48]	; 0x30
 80068f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068f6:	f002 0201 	and.w	r2, r2, #1
 80068fa:	9203      	str	r2, [sp, #12]
 80068fc:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006900:	f042 0202 	orr.w	r2, r2, #2
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006908:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800690a:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800690e:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006910:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006912:	2320      	movs	r3, #32
 8006914:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006916:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006918:	f004 ff0c 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800691c:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800691e:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006922:	4834      	ldr	r0, [pc, #208]	; (80069f4 <HAL_TIM_Base_MspInit+0x1f4>)
 8006924:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006926:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006928:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800692a:	4e33      	ldr	r6, [pc, #204]	; (80069f8 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800692c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006930:	f004 ff00 	bl	800b734 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006938:	4a30      	ldr	r2, [pc, #192]	; (80069fc <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800693a:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800693c:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800693e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006942:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8006944:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006948:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 800694a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800694e:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006950:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8006952:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006954:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8006956:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006958:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 800695c:	f002 fb7e 	bl	800905c <HAL_DMA_Init>
 8006960:	2800      	cmp	r0, #0
 8006962:	d132      	bne.n	80069ca <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006964:	2200      	movs	r2, #0
 8006966:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8006968:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800696a:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 800696c:	62ee      	str	r6, [r5, #44]	; 0x2c
 800696e:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006970:	f002 f862 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006974:	201c      	movs	r0, #28
 8006976:	f002 f8a9 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 800697a:	b011      	add	sp, #68	; 0x44
 800697c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006980:	4622      	mov	r2, r4
 8006982:	2105      	movs	r1, #5
 8006984:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006986:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006988:	f044 0408 	orr.w	r4, r4, #8
 800698c:	641c      	str	r4, [r3, #64]	; 0x40
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	9307      	str	r3, [sp, #28]
 8006996:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006998:	f002 f84e 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800699c:	2032      	movs	r0, #50	; 0x32
 800699e:	f002 f895 	bl	8008acc <HAL_NVIC_EnableIRQ>
 80069a2:	e766      	b.n	8006872 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80069a4:	4b11      	ldr	r3, [pc, #68]	; (80069ec <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80069a6:	4622      	mov	r2, r4
 80069a8:	2106      	movs	r1, #6
 80069aa:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80069ac:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80069ae:	f044 0410 	orr.w	r4, r4, #16
 80069b2:	641c      	str	r4, [r3, #64]	; 0x40
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	9308      	str	r3, [sp, #32]
 80069bc:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80069be:	f002 f83b 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80069c2:	2036      	movs	r0, #54	; 0x36
 80069c4:	f002 f882 	bl	8008acc <HAL_NVIC_EnableIRQ>
 80069c8:	e753      	b.n	8006872 <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 80069ca:	f7fd faaf 	bl	8003f2c <Error_Handler>
 80069ce:	e7c9      	b.n	8006964 <HAL_TIM_Base_MspInit+0x164>
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40000400 	.word	0x40000400
 80069d8:	40000800 	.word	0x40000800
 80069dc:	40000c00 	.word	0x40000c00
 80069e0:	40001000 	.word	0x40001000
 80069e4:	40001400 	.word	0x40001400
 80069e8:	40002000 	.word	0x40002000
 80069ec:	40023800 	.word	0x40023800
 80069f0:	40020000 	.word	0x40020000
 80069f4:	40020400 	.word	0x40020400
 80069f8:	200022b0 	.word	0x200022b0
 80069fc:	40026028 	.word	0x40026028

08006a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8006a00:	491d      	ldr	r1, [pc, #116]	; (8006a78 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a02:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8006a04:	6802      	ldr	r2, [r0, #0]
{
 8006a06:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 8006a08:	428a      	cmp	r2, r1
{
 8006a0a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a0c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8006a10:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a14:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8006a18:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <HAL_TIM_MspPostInit+0x7c>)
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d016      	beq.n	8006a4c <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006a1e:	b008      	add	sp, #32
 8006a20:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a22:	4b17      	ldr	r3, [pc, #92]	; (8006a80 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a24:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a26:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a28:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a2c:	f042 0204 	orr.w	r2, r2, #4
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006a34:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a36:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a3a:	4812      	ldr	r0, [pc, #72]	; (8006a84 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3c:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a42:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a44:	f004 fe76 	bl	800b734 <HAL_GPIO_Init>
}
 8006a48:	b008      	add	sp, #32
 8006a4a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a4c:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a50:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a52:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a56:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a5a:	4322      	orrs	r2, r4
 8006a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a60:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a62:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a64:	4808      	ldr	r0, [pc, #32]	; (8006a88 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a66:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a68:	9302      	str	r3, [sp, #8]
 8006a6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a6c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6e:	f004 fe61 	bl	800b734 <HAL_GPIO_Init>
}
 8006a72:	b008      	add	sp, #32
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	40000400 	.word	0x40000400
 8006a7c:	40000800 	.word	0x40000800
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40020800 	.word	0x40020800
 8006a88:	40020400 	.word	0x40020400

08006a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a90:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a92:	2100      	movs	r1, #0
{
 8006a94:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a96:	2290      	movs	r2, #144	; 0x90
 8006a98:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a9a:	9117      	str	r1, [sp, #92]	; 0x5c
 8006a9c:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8006aa0:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006aa4:	f01d fcd8 	bl	8024458 <memset>
  if(huart->Instance==UART4)
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	4aa2      	ldr	r2, [pc, #648]	; (8006d34 <HAL_UART_MspInit+0x2a8>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d070      	beq.n	8006b92 <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8006ab0:	4aa1      	ldr	r2, [pc, #644]	; (8006d38 <HAL_UART_MspInit+0x2ac>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	f000 80c1 	beq.w	8006c3a <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8006ab8:	4aa0      	ldr	r2, [pc, #640]	; (8006d3c <HAL_UART_MspInit+0x2b0>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	f000 815e 	beq.w	8006d7c <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 8006ac0:	4a9f      	ldr	r2, [pc, #636]	; (8006d40 <HAL_UART_MspInit+0x2b4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d00e      	beq.n	8006ae4 <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8006ac6:	4a9f      	ldr	r2, [pc, #636]	; (8006d44 <HAL_UART_MspInit+0x2b8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	f000 818e 	beq.w	8006dea <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8006ace:	4a9e      	ldr	r2, [pc, #632]	; (8006d48 <HAL_UART_MspInit+0x2bc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	f000 81b4 	beq.w	8006e3e <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8006ad6:	4a9d      	ldr	r2, [pc, #628]	; (8006d4c <HAL_UART_MspInit+0x2c0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f000 81df 	beq.w	8006e9c <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006ade:	b03c      	add	sp, #240	; 0xf0
 8006ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006ae4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ae8:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006aea:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006aec:	f007 f960 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f040 8261 	bne.w	8006fb8 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8006af6:	4b96      	ldr	r3, [pc, #600]	; (8006d50 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006af8:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006afa:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006afc:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 8006afe:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b00:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b02:	4894      	ldr	r0, [pc, #592]	; (8006d54 <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8006b04:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8006b08:	6419      	str	r1, [r3, #64]	; 0x40
 8006b0a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006b0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006b10:	910a      	str	r1, [sp, #40]	; 0x28
 8006b12:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b16:	f041 0110 	orr.w	r1, r1, #16
 8006b1a:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b1c:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006b20:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2a:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006b2e:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b32:	f004 fdff 	bl	800b734 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b36:	4887      	ldr	r0, [pc, #540]	; (8006d54 <HAL_UART_MspInit+0x2c8>)
 8006b38:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006b3a:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b3c:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b40:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b44:	f004 fdf6 	bl	800b734 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8006b48:	4d83      	ldr	r5, [pc, #524]	; (8006d58 <HAL_UART_MspInit+0x2cc>)
 8006b4a:	4a84      	ldr	r2, [pc, #528]	; (8006d5c <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8006b4c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006b50:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8006b52:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8006b56:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8006b5e:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b64:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b66:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b6a:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006b6e:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006b72:	f002 fa73 	bl	800905c <HAL_DMA_Init>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f040 8221 	bne.w	8006fbe <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2103      	movs	r1, #3
 8006b80:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006b82:	6725      	str	r5, [r4, #112]	; 0x70
 8006b84:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006b86:	f001 ff57 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006b8a:	2053      	movs	r0, #83	; 0x53
 8006b8c:	f001 ff9e 	bl	8008acc <HAL_NVIC_EnableIRQ>
 8006b90:	e7a5      	b.n	8006ade <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006b92:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b96:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006b98:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b9a:	f007 f909 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	f040 8179 	bne.w	8006e96 <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006ba4:	4b6a      	ldr	r3, [pc, #424]	; (8006d50 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba8:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006baa:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006bae:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bb0:	a913      	add	r1, sp, #76	; 0x4c
 8006bb2:	486b      	ldr	r0, [pc, #428]	; (8006d60 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8006bb4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8006bb8:	641a      	str	r2, [r3, #64]	; 0x40
 8006bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bbc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8006bc0:	9201      	str	r2, [sp, #4]
 8006bc2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
 8006bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bce:	f002 0201 	and.w	r2, r2, #1
 8006bd2:	9202      	str	r2, [sp, #8]
 8006bd4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bd8:	433a      	orrs	r2, r7
 8006bda:	631a      	str	r2, [r3, #48]	; 0x30
 8006bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bde:	403a      	ands	r2, r7
 8006be0:	9203      	str	r2, [sp, #12]
 8006be2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be6:	f042 0204 	orr.w	r2, r2, #4
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
 8006bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bee:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bf0:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006bf4:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bf6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8006bf8:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bfc:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8006bfe:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c00:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c04:	f004 fd96 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c0c:	a913      	add	r1, sp, #76	; 0x4c
 8006c0e:	4855      	ldr	r0, [pc, #340]	; (8006d64 <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c10:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006c16:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c1a:	f004 fd8b 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c22:	a913      	add	r1, sp, #76	; 0x4c
 8006c24:	4850      	ldr	r0, [pc, #320]	; (8006d68 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c26:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006c28:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006c2a:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2c:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c30:	f004 fd80 	bl	800b734 <HAL_GPIO_Init>
}
 8006c34:	b03c      	add	sp, #240	; 0xf0
 8006c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c3e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006c40:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006c42:	f007 f8b5 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	f040 81b0 	bne.w	8006fac <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c4c:	4b40      	ldr	r3, [pc, #256]	; (8006d50 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c4e:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c50:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c52:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c58:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c5c:	a913      	add	r1, sp, #76	; 0x4c
 8006c5e:	4841      	ldr	r0, [pc, #260]	; (8006d64 <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8006c60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006c64:	641a      	str	r2, [r3, #64]	; 0x40
 8006c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006c6c:	9205      	str	r2, [sp, #20]
 8006c6e:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c72:	4332      	orrs	r2, r6
 8006c74:	631a      	str	r2, [r3, #48]	; 0x30
 8006c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c78:	4032      	ands	r2, r6
 8006c7a:	9206      	str	r2, [sp, #24]
 8006c7c:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c80:	f042 0204 	orr.w	r2, r2, #4
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c88:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	9307      	str	r3, [sp, #28]
 8006c90:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c92:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c94:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c98:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c9c:	f004 fd4a 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ca0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ca2:	4831      	ldr	r0, [pc, #196]	; (8006d68 <HAL_UART_MspInit+0x2dc>)
 8006ca4:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ca6:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ca8:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006caa:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cac:	4e2f      	ldr	r6, [pc, #188]	; (8006d6c <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006cae:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006cb0:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb4:	f004 fd3e 	bl	800b734 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cb8:	4a2d      	ldr	r2, [pc, #180]	; (8006d70 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006cbe:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cc0:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006cc2:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8006cc8:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006cca:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cce:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cd0:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006cd4:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006cd8:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006cdc:	f002 f9be 	bl	800905c <HAL_DMA_Init>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	f040 8160 	bne.w	8006fa6 <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006ce6:	4d23      	ldr	r5, [pc, #140]	; (8006d74 <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006ce8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006cec:	4922      	ldr	r1, [pc, #136]	; (8006d78 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cee:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8006cf0:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8006cf6:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006cf8:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006cfa:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006cfc:	6726      	str	r6, [r4, #112]	; 0x70
 8006cfe:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d00:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d02:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d04:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d06:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d08:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d0a:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006d0c:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006d10:	f002 f9a4 	bl	800905c <HAL_DMA_Init>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f040 8143 	bne.w	8006fa0 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2107      	movs	r1, #7
 8006d1e:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8006d20:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006d22:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8006d24:	f001 fe88 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006d28:	2035      	movs	r0, #53	; 0x35
 8006d2a:	f001 fecf 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 8006d2e:	b03c      	add	sp, #240	; 0xf0
 8006d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d34:	40004c00 	.word	0x40004c00
 8006d38:	40005000 	.word	0x40005000
 8006d3c:	40007800 	.word	0x40007800
 8006d40:	40007c00 	.word	0x40007c00
 8006d44:	40004400 	.word	0x40004400
 8006d48:	40004800 	.word	0x40004800
 8006d4c:	40011400 	.word	0x40011400
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40021000 	.word	0x40021000
 8006d58:	200023d0 	.word	0x200023d0
 8006d5c:	400260a0 	.word	0x400260a0
 8006d60:	40020000 	.word	0x40020000
 8006d64:	40020400 	.word	0x40020400
 8006d68:	40020800 	.word	0x40020800
 8006d6c:	20002310 	.word	0x20002310
 8006d70:	40026010 	.word	0x40026010
 8006d74:	20002370 	.word	0x20002370
 8006d78:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d80:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006d82:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d84:	f007 f814 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	f040 8112 	bne.w	8006fb2 <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006d8e:	4b8f      	ldr	r3, [pc, #572]	; (8006fcc <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006d90:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006d92:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d94:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 8006d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006d98:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006d9a:	488d      	ldr	r0, [pc, #564]	; (8006fd0 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8006d9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006da0:	641a      	str	r2, [r3, #64]	; 0x40
 8006da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006da4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006da8:	9208      	str	r2, [sp, #32]
 8006daa:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dae:	f042 0220 	orr.w	r2, r2, #32
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db4:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006db8:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dba:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dbc:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dc0:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dc2:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006dc8:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dcc:	f004 fcb2 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006dd0:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006dd2:	a913      	add	r1, sp, #76	; 0x4c
 8006dd4:	487e      	ldr	r0, [pc, #504]	; (8006fd0 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dd6:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006dd8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006dda:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006ddc:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006de0:	f004 fca8 	bl	800b734 <HAL_GPIO_Init>
}
 8006de4:	b03c      	add	sp, #240	; 0xf0
 8006de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006dea:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006dec:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006dee:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006df0:	f006 ffde 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	f040 80e5 	bne.w	8006fc4 <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006dfa:	4b74      	ldr	r3, [pc, #464]	; (8006fcc <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dfc:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006dfe:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e00:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e04:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e0e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8006e12:	920c      	str	r2, [sp, #48]	; 0x30
 8006e14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e18:	f042 0208 	orr.w	r2, r2, #8
 8006e1c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e1e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e22:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e24:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e28:	486a      	ldr	r0, [pc, #424]	; (8006fd4 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e2a:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e2c:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e2e:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e30:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006e32:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e34:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e38:	f004 fc7c 	bl	800b734 <HAL_GPIO_Init>
 8006e3c:	e64f      	b.n	8006ade <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e42:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006e44:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006e46:	f006 ffb3 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	f040 809c 	bne.w	8006f88 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e50:	4b5e      	ldr	r3, [pc, #376]	; (8006fcc <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e52:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006e54:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e58:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e5c:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8006e5e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e62:	641a      	str	r2, [r3, #64]	; 0x40
 8006e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e66:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006e6a:	920e      	str	r2, [sp, #56]	; 0x38
 8006e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e70:	f042 0208 	orr.w	r2, r2, #8
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e76:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e7a:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e7c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e80:	4854      	ldr	r0, [pc, #336]	; (8006fd4 <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006e82:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e84:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e86:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006e88:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006e8a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8c:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e90:	f004 fc50 	bl	800b734 <HAL_GPIO_Init>
 8006e94:	e623      	b.n	8006ade <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006e96:	f7fd f849 	bl	8003f2c <Error_Handler>
 8006e9a:	e683      	b.n	8006ba4 <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006e9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ea0:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006ea2:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ea4:	f006 ff84 	bl	800ddb0 <HAL_RCCEx_PeriphCLKConfig>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d176      	bne.n	8006f9a <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006eac:	4b47      	ldr	r3, [pc, #284]	; (8006fcc <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006eae:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eb0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb2:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 8006eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006eb6:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006eb8:	4847      	ldr	r0, [pc, #284]	; (8006fd8 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8006eba:	f042 0220 	orr.w	r2, r2, #32
 8006ebe:	645a      	str	r2, [r3, #68]	; 0x44
 8006ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ec2:	f002 0220 	and.w	r2, r2, #32
 8006ec6:	9210      	str	r2, [sp, #64]	; 0x40
 8006ec8:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ecc:	f042 0204 	orr.w	r2, r2, #4
 8006ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ed4:	f002 0204 	and.w	r2, r2, #4
 8006ed8:	9211      	str	r2, [sp, #68]	; 0x44
 8006eda:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ee4:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ee6:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ee8:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006eea:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006eec:	9312      	str	r3, [sp, #72]	; 0x48
 8006eee:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef0:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ef4:	a913      	add	r1, sp, #76	; 0x4c
 8006ef6:	f004 fc1d 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006efa:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006efc:	4837      	ldr	r0, [pc, #220]	; (8006fdc <HAL_UART_MspInit+0x550>)
 8006efe:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f00:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f02:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f06:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f08:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006f0a:	4e35      	ldr	r6, [pc, #212]	; (8006fe0 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006f0c:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f10:	f004 fc10 	bl	800b734 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006f14:	4a33      	ldr	r2, [pc, #204]	; (8006fe4 <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006f16:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006f1a:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006f1c:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006f20:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006f28:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f2e:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f32:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f36:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006f3a:	f002 f88f 	bl	800905c <HAL_DMA_Init>
 8006f3e:	bb48      	cbnz	r0, 8006f94 <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f40:	4d29      	ldr	r5, [pc, #164]	; (8006fe8 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006f42:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f46:	4929      	ldr	r1, [pc, #164]	; (8006fec <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f48:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006f4a:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006f50:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f52:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f54:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f56:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f58:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f5a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f5e:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f60:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f62:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f64:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006f66:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f68:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006f6a:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006f6c:	6726      	str	r6, [r4, #112]	; 0x70
 8006f6e:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f70:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006f74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f78:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f7c:	f002 f86e 	bl	800905c <HAL_DMA_Init>
 8006f80:	b928      	cbnz	r0, 8006f8e <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006f82:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006f84:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8006f86:	e5aa      	b.n	8006ade <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006f88:	f7fc ffd0 	bl	8003f2c <Error_Handler>
 8006f8c:	e760      	b.n	8006e50 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8006f8e:	f7fc ffcd 	bl	8003f2c <Error_Handler>
 8006f92:	e7f6      	b.n	8006f82 <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8006f94:	f7fc ffca 	bl	8003f2c <Error_Handler>
 8006f98:	e7d2      	b.n	8006f40 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8006f9a:	f7fc ffc7 	bl	8003f2c <Error_Handler>
 8006f9e:	e785      	b.n	8006eac <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006fa0:	f7fc ffc4 	bl	8003f2c <Error_Handler>
 8006fa4:	e6b9      	b.n	8006d1a <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006fa6:	f7fc ffc1 	bl	8003f2c <Error_Handler>
 8006faa:	e69c      	b.n	8006ce6 <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8006fac:	f7fc ffbe 	bl	8003f2c <Error_Handler>
 8006fb0:	e64c      	b.n	8006c4c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8006fb2:	f7fc ffbb 	bl	8003f2c <Error_Handler>
 8006fb6:	e6ea      	b.n	8006d8e <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006fb8:	f7fc ffb8 	bl	8003f2c <Error_Handler>
 8006fbc:	e59b      	b.n	8006af6 <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8006fbe:	f7fc ffb5 	bl	8003f2c <Error_Handler>
 8006fc2:	e5db      	b.n	8006b7c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8006fc4:	f7fc ffb2 	bl	8003f2c <Error_Handler>
 8006fc8:	e717      	b.n	8006dfa <HAL_UART_MspInit+0x36e>
 8006fca:	bf00      	nop
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	40021400 	.word	0x40021400
 8006fd4:	40020c00 	.word	0x40020c00
 8006fd8:	40020800 	.word	0x40020800
 8006fdc:	40021800 	.word	0x40021800
 8006fe0:	20002430 	.word	0x20002430
 8006fe4:	40026428 	.word	0x40026428
 8006fe8:	20002490 	.word	0x20002490
 8006fec:	400264a0 	.word	0x400264a0

08006ff0 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8006ff0:	4a4f      	ldr	r2, [pc, #316]	; (8007130 <HAL_UART_MspDeInit+0x140>)
 8006ff2:	6803      	ldr	r3, [r0, #0]
 8006ff4:	4293      	cmp	r3, r2
{
 8006ff6:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8006ff8:	d025      	beq.n	8007046 <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8006ffa:	4a4e      	ldr	r2, [pc, #312]	; (8007134 <HAL_UART_MspDeInit+0x144>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d038      	beq.n	8007074 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8007002:	4a4d      	ldr	r2, [pc, #308]	; (8007138 <HAL_UART_MspDeInit+0x148>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d050      	beq.n	80070aa <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8007008:	4a4c      	ldr	r2, [pc, #304]	; (800713c <HAL_UART_MspDeInit+0x14c>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 800700e:	4a4c      	ldr	r2, [pc, #304]	; (8007140 <HAL_UART_MspDeInit+0x150>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d056      	beq.n	80070c2 <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8007014:	4a4b      	ldr	r2, [pc, #300]	; (8007144 <HAL_UART_MspDeInit+0x154>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d062      	beq.n	80070e0 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 800701a:	4a4b      	ldr	r2, [pc, #300]	; (8007148 <HAL_UART_MspDeInit+0x158>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d06c      	beq.n	80070fa <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8007020:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 8007022:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8007026:	2103      	movs	r1, #3
 8007028:	4848      	ldr	r0, [pc, #288]	; (800714c <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 800702a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800702c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007030:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8007032:	f004 fd25 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007036:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007038:	f002 f9bc 	bl	80093b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 800703c:	2053      	movs	r0, #83	; 0x53
}
 800703e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8007042:	f001 bd57 	b.w	8008af4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8007046:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 800704a:	f248 0101 	movw	r1, #32769	; 0x8001
 800704e:	4840      	ldr	r0, [pc, #256]	; (8007150 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8007050:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007052:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007056:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8007058:	f004 fd12 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 800705c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007060:	483c      	ldr	r0, [pc, #240]	; (8007154 <HAL_UART_MspDeInit+0x164>)
 8007062:	f004 fd0d 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8007066:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800706a:	483b      	ldr	r0, [pc, #236]	; (8007158 <HAL_UART_MspDeInit+0x168>)
}
 800706c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8007070:	f004 bd06 	b.w	800ba80 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8007074:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800707c:	4835      	ldr	r0, [pc, #212]	; (8007154 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 800707e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007080:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007084:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8007086:	f004 fcfb 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 800708a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800708e:	4832      	ldr	r0, [pc, #200]	; (8007158 <HAL_UART_MspDeInit+0x168>)
 8007090:	f004 fcf6 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007094:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007096:	f002 f98d 	bl	80093b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800709a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800709c:	f002 f98a 	bl	80093b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80070a0:	2035      	movs	r0, #53	; 0x35
}
 80070a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 80070a6:	f001 bd25 	b.w	8008af4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 80070aa:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80070ae:	21c0      	movs	r1, #192	; 0xc0
 80070b0:	482a      	ldr	r0, [pc, #168]	; (800715c <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 80070b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 80070b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 80070bc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 80070be:	f004 bcdf 	b.w	800ba80 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 80070c2:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80070c6:	4826      	ldr	r0, [pc, #152]	; (8007160 <HAL_UART_MspDeInit+0x170>)
 80070c8:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 80070ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070d0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 80070d2:	f004 fcd5 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80070d6:	2026      	movs	r0, #38	; 0x26
}
 80070d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80070dc:	f001 bd0a 	b.w	8008af4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 80070e0:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80070e4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80070e8:	481d      	ldr	r0, [pc, #116]	; (8007160 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 80070ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 80070f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 80070f4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 80070f6:	f004 bcc3 	b.w	800ba80 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 80070fa:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 80070fe:	2140      	movs	r1, #64	; 0x40
 8007100:	4815      	ldr	r0, [pc, #84]	; (8007158 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8007102:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8007104:	f023 0320 	bic.w	r3, r3, #32
 8007108:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 800710a:	f004 fcb9 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 800710e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007112:	4814      	ldr	r0, [pc, #80]	; (8007164 <HAL_UART_MspDeInit+0x174>)
 8007114:	f004 fcb4 	bl	800ba80 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007118:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800711a:	f002 f94b 	bl	80093b4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800711e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007120:	f002 f948 	bl	80093b4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007124:	2047      	movs	r0, #71	; 0x47
}
 8007126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800712a:	f001 bce3 	b.w	8008af4 <HAL_NVIC_DisableIRQ>
 800712e:	bf00      	nop
 8007130:	40004c00 	.word	0x40004c00
 8007134:	40005000 	.word	0x40005000
 8007138:	40007800 	.word	0x40007800
 800713c:	40007c00 	.word	0x40007c00
 8007140:	40004400 	.word	0x40004400
 8007144:	40004800 	.word	0x40004800
 8007148:	40011400 	.word	0x40011400
 800714c:	40021000 	.word	0x40021000
 8007150:	40020000 	.word	0x40020000
 8007154:	40020400 	.word	0x40020400
 8007158:	40020800 	.word	0x40020800
 800715c:	40021400 	.word	0x40021400
 8007160:	40020c00 	.word	0x40020c00
 8007164:	40021800 	.word	0x40021800

08007168 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007168:	b530      	push	{r4, r5, lr}
 800716a:	4601      	mov	r1, r0
 800716c:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 800716e:	2200      	movs	r2, #0
 8007170:	202b      	movs	r0, #43	; 0x2b
 8007172:	f001 fc61 	bl	8008a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8007176:	202b      	movs	r0, #43	; 0x2b
 8007178:	f001 fca8 	bl	8008acc <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 800717c:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800717e:	a901      	add	r1, sp, #4
 8007180:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8007182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8007184:	4c14      	ldr	r4, [pc, #80]	; (80071d8 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8007186:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800718a:	4d14      	ldr	r5, [pc, #80]	; (80071dc <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 800718c:	641a      	str	r2, [r3, #64]	; 0x40
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	9302      	str	r3, [sp, #8]
 8007196:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007198:	f006 fde8 	bl	800dd6c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800719c:	f006 fdc6 	bl	800dd2c <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 80071a0:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80071a2:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 80071a4:	490e      	ldr	r1, [pc, #56]	; (80071e0 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 80071a6:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80071a8:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071aa:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071ac:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80071b0:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 80071b4:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071b6:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 80071b8:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071ba:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 80071bc:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 80071be:	f009 f8c7 	bl	8010350 <HAL_TIM_Base_Init>
 80071c2:	b110      	cbz	r0, 80071ca <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 80071c4:	2001      	movs	r0, #1
}
 80071c6:	b009      	add	sp, #36	; 0x24
 80071c8:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 80071ca:	4620      	mov	r0, r4
 80071cc:	f008 fa94 	bl	800f6f8 <HAL_TIM_Base_Start_IT>
}
 80071d0:	b009      	add	sp, #36	; 0x24
 80071d2:	bd30      	pop	{r4, r5, pc}
 80071d4:	40023800 	.word	0x40023800
 80071d8:	20003088 	.word	0x20003088
 80071dc:	431bde83 	.word	0x431bde83
 80071e0:	40001800 	.word	0x40001800

080071e4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop

080071e8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071e8:	e7fe      	b.n	80071e8 <HardFault_Handler>
 80071ea:	bf00      	nop

080071ec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071ec:	e7fe      	b.n	80071ec <MemManage_Handler>
 80071ee:	bf00      	nop

080071f0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071f0:	e7fe      	b.n	80071f0 <BusFault_Handler>
 80071f2:	bf00      	nop

080071f4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071f4:	e7fe      	b.n	80071f4 <UsageFault_Handler>
 80071f6:	bf00      	nop

080071f8 <RCC_IRQHandler>:
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80071fc:	4801      	ldr	r0, [pc, #4]	; (8007204 <DMA1_Stream0_IRQHandler+0x8>)
 80071fe:	f002 ba45 	b.w	800968c <HAL_DMA_IRQHandler>
 8007202:	bf00      	nop
 8007204:	20002310 	.word	0x20002310

08007208 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <DMA1_Stream1_IRQHandler+0x8>)
 800720a:	f002 ba3f 	b.w	800968c <HAL_DMA_IRQHandler>
 800720e:	bf00      	nop
 8007210:	200022b0 	.word	0x200022b0

08007214 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <DMA1_Stream5_IRQHandler+0x8>)
 8007216:	f002 ba39 	b.w	800968c <HAL_DMA_IRQHandler>
 800721a:	bf00      	nop
 800721c:	20002250 	.word	0x20002250

08007220 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8007220:	4801      	ldr	r0, [pc, #4]	; (8007228 <DMA1_Stream6_IRQHandler+0x8>)
 8007222:	f002 ba33 	b.w	800968c <HAL_DMA_IRQHandler>
 8007226:	bf00      	nop
 8007228:	200023d0 	.word	0x200023d0

0800722c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800722c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800722e:	4805      	ldr	r0, [pc, #20]	; (8007244 <ADC_IRQHandler+0x18>)
 8007230:	f001 f9de 	bl	80085f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8007234:	4804      	ldr	r0, [pc, #16]	; (8007248 <ADC_IRQHandler+0x1c>)
 8007236:	f001 f9db 	bl	80085f0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800723a:	4804      	ldr	r0, [pc, #16]	; (800724c <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800723c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8007240:	f001 b9d6 	b.w	80085f0 <HAL_ADC_IRQHandler>
 8007244:	200020e0 	.word	0x200020e0
 8007248:	20002128 	.word	0x20002128
 800724c:	20002170 	.word	0x20002170

08007250 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <TIM2_IRQHandler+0x8>)
 8007252:	f008 bef5 	b.w	8010040 <HAL_TIM_IRQHandler>
 8007256:	bf00      	nop
 8007258:	200027b8 	.word	0x200027b8

0800725c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <TIM3_IRQHandler+0x8>)
 800725e:	f008 beef 	b.w	8010040 <HAL_TIM_IRQHandler>
 8007262:	bf00      	nop
 8007264:	20002804 	.word	0x20002804

08007268 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007268:	4801      	ldr	r0, [pc, #4]	; (8007270 <USART2_IRQHandler+0x8>)
 800726a:	f00b b96d 	b.w	8012548 <HAL_UART_IRQHandler>
 800726e:	bf00      	nop
 8007270:	20002980 	.word	0x20002980

08007274 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8007274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007278:	f004 bd3a 	b.w	800bcf0 <HAL_GPIO_EXTI_IRQHandler>

0800727c <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800727c:	4801      	ldr	r0, [pc, #4]	; (8007284 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 800727e:	f008 bedf 	b.w	8010040 <HAL_TIM_IRQHandler>
 8007282:	bf00      	nop
 8007284:	20003088 	.word	0x20003088

08007288 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8007288:	4801      	ldr	r0, [pc, #4]	; (8007290 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800728a:	f008 bed9 	b.w	8010040 <HAL_TIM_IRQHandler>
 800728e:	bf00      	nop
 8007290:	2000276c 	.word	0x2000276c

08007294 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8007294:	4801      	ldr	r0, [pc, #4]	; (800729c <DMA1_Stream7_IRQHandler+0x8>)
 8007296:	f002 b9f9 	b.w	800968c <HAL_DMA_IRQHandler>
 800729a:	bf00      	nop
 800729c:	20002370 	.word	0x20002370

080072a0 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80072a0:	4801      	ldr	r0, [pc, #4]	; (80072a8 <TIM5_IRQHandler+0x8>)
 80072a2:	f008 becd 	b.w	8010040 <HAL_TIM_IRQHandler>
 80072a6:	bf00      	nop
 80072a8:	2000289c 	.word	0x2000289c

080072ac <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80072ac:	4801      	ldr	r0, [pc, #4]	; (80072b4 <UART5_IRQHandler+0x8>)
 80072ae:	f00b b94b 	b.w	8012548 <HAL_UART_IRQHandler>
 80072b2:	bf00      	nop
 80072b4:	20002b0c 	.word	0x20002b0c

080072b8 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80072b8:	4804      	ldr	r0, [pc, #16]	; (80072cc <TIM6_DAC_IRQHandler+0x14>)
{
 80072ba:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 80072bc:	f001 fe18 	bl	8008ef0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80072c0:	4803      	ldr	r0, [pc, #12]	; (80072d0 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80072c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 80072c6:	f008 bebb 	b.w	8010040 <HAL_TIM_IRQHandler>
 80072ca:	bf00      	nop
 80072cc:	200021dc 	.word	0x200021dc
 80072d0:	200028e8 	.word	0x200028e8

080072d4 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80072d4:	4801      	ldr	r0, [pc, #4]	; (80072dc <DMA2_Stream1_IRQHandler+0x8>)
 80072d6:	f002 b9d9 	b.w	800968c <HAL_DMA_IRQHandler>
 80072da:	bf00      	nop
 80072dc:	20002430 	.word	0x20002430

080072e0 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80072e0:	4801      	ldr	r0, [pc, #4]	; (80072e8 <DMA2_Stream4_IRQHandler+0x8>)
 80072e2:	f002 b9d3 	b.w	800968c <HAL_DMA_IRQHandler>
 80072e6:	bf00      	nop
 80072e8:	200021f0 	.word	0x200021f0

080072ec <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <ETH_IRQHandler+0x8>)
 80072ee:	f003 b951 	b.w	800a594 <HAL_ETH_IRQHandler>
 80072f2:	bf00      	nop
 80072f4:	200062ac 	.word	0x200062ac

080072f8 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <OTG_FS_IRQHandler+0x8>)
 80072fa:	f005 bc17 	b.w	800cb2c <HAL_PCD_IRQHandler>
 80072fe:	bf00      	nop
 8007300:	2002f948 	.word	0x2002f948

08007304 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8007304:	4801      	ldr	r0, [pc, #4]	; (800730c <DMA2_Stream6_IRQHandler+0x8>)
 8007306:	f002 b9c1 	b.w	800968c <HAL_DMA_IRQHandler>
 800730a:	bf00      	nop
 800730c:	20002490 	.word	0x20002490

08007310 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007310:	4801      	ldr	r0, [pc, #4]	; (8007318 <USART6_IRQHandler+0x8>)
 8007312:	f00b b919 	b.w	8012548 <HAL_UART_IRQHandler>
 8007316:	bf00      	nop
 8007318:	20002b90 	.word	0x20002b90

0800731c <FPU_IRQHandler>:
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8007320:	4801      	ldr	r0, [pc, #4]	; (8007328 <UART8_IRQHandler+0x8>)
 8007322:	f00b b911 	b.w	8012548 <HAL_UART_IRQHandler>
 8007326:	bf00      	nop
 8007328:	20002c98 	.word	0x20002c98

0800732c <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 800732c:	2001      	movs	r0, #1
 800732e:	4770      	bx	lr

08007330 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 8007330:	4b02      	ldr	r3, [pc, #8]	; (800733c <_kill+0xc>)
 8007332:	2216      	movs	r2, #22
	return -1;
}
 8007334:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	4770      	bx	lr
 800733c:	2002fd5c 	.word	0x2002fd5c

08007340 <_exit>:
	errno = EINVAL;
 8007340:	4b01      	ldr	r3, [pc, #4]	; (8007348 <_exit+0x8>)
 8007342:	2216      	movs	r2, #22
 8007344:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8007346:	e7fe      	b.n	8007346 <_exit+0x6>
 8007348:	2002fd5c 	.word	0x2002fd5c

0800734c <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 800734c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800734e:	1e16      	subs	r6, r2, #0
 8007350:	dd07      	ble.n	8007362 <_read+0x16>
 8007352:	460c      	mov	r4, r1
 8007354:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8007356:	f3af 8000 	nop.w
 800735a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800735e:	42a5      	cmp	r5, r4
 8007360:	d1f9      	bne.n	8007356 <_read+0xa>
	}

	return len;
}
 8007362:	4630      	mov	r0, r6
 8007364:	bd70      	pop	{r4, r5, r6, pc}
 8007366:	bf00      	nop

08007368 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop

08007370 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8007370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8007374:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8007376:	604b      	str	r3, [r1, #4]
}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop

0800737c <_isatty>:

int _isatty(int file) {
	return 1;
}
 800737c:	2001      	movs	r0, #1
 800737e:	4770      	bx	lr

08007380 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8007380:	2000      	movs	r0, #0
 8007382:	4770      	bx	lr

08007384 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8007384:	490d      	ldr	r1, [pc, #52]	; (80073bc <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8007386:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8007388:	4a0d      	ldr	r2, [pc, #52]	; (80073c0 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 800738a:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 800738c:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800738e:	4c0d      	ldr	r4, [pc, #52]	; (80073c4 <_sbrk+0x40>)
 8007390:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8007392:	b170      	cbz	r0, 80073b2 <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8007394:	4403      	add	r3, r0
 8007396:	4293      	cmp	r3, r2
 8007398:	d803      	bhi.n	80073a2 <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 800739a:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 800739e:	600b      	str	r3, [r1, #0]
}
 80073a0:	4770      	bx	lr
		errno = ENOMEM;
 80073a2:	4b09      	ldr	r3, [pc, #36]	; (80073c8 <_sbrk+0x44>)
 80073a4:	220c      	movs	r2, #12
		return (void*) -1;
 80073a6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80073aa:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 80073ae:	601a      	str	r2, [r3, #0]
}
 80073b0:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 80073b2:	4c06      	ldr	r4, [pc, #24]	; (80073cc <_sbrk+0x48>)
 80073b4:	4620      	mov	r0, r4
 80073b6:	600c      	str	r4, [r1, #0]
 80073b8:	e7ec      	b.n	8007394 <_sbrk+0x10>
 80073ba:	bf00      	nop
 80073bc:	200030d8 	.word	0x200030d8
 80073c0:	20080000 	.word	0x20080000
 80073c4:	00006800 	.word	0x00006800
 80073c8:	2002fd5c 	.word	0x2002fd5c
 80073cc:	2002fd88 	.word	0x2002fd88

080073d0 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073d0:	4a0f      	ldr	r2, [pc, #60]	; (8007410 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80073d2:	4b10      	ldr	r3, [pc, #64]	; (8007414 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073d4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80073d8:	490f      	ldr	r1, [pc, #60]	; (8007418 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073da:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 80073de:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073e0:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 80073e4:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 80073e6:	6818      	ldr	r0, [r3, #0]
 80073e8:	f040 0001 	orr.w	r0, r0, #1
 80073ec:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 80073ee:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80073f4:	4809      	ldr	r0, [pc, #36]	; (800741c <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80073f6:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 80073f8:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80073fa:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073fc:	4808      	ldr	r0, [pc, #32]	; (8007420 <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 80073fe:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007402:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8007404:	60dc      	str	r4, [r3, #12]

#endif
}
 8007406:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800740a:	6090      	str	r0, [r2, #8]
}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	e000ed00 	.word	0xe000ed00
 8007414:	40023800 	.word	0x40023800
 8007418:	fef6ffff 	.word	0xfef6ffff
 800741c:	24003010 	.word	0x24003010
 8007420:	08000000 	.word	0x08000000

08007424 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8007424:	680b      	ldr	r3, [r1, #0]
 8007426:	4a03      	ldr	r2, [pc, #12]	; (8007434 <dnsfound+0x10>)
		ip_ready = -1;
 8007428:	2b00      	cmp	r3, #0
 800742a:	bf08      	it	eq
 800742c:	f04f 33ff 	moveq.w	r3, #4294967295
 8007430:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 8007432:	4770      	bx	lr
 8007434:	200030ec 	.word	0x200030ec

08007438 <myreboot>:
void myreboot(char *msg) {
 8007438:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 800743a:	480a      	ldr	r0, [pc, #40]	; (8007464 <myreboot+0x2c>)
void myreboot(char *msg) {
 800743c:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 800743e:	f01d ffa9 	bl	8025394 <iprintf>
	osDelay(2000);
 8007442:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007446:	f00e f807 	bl	8015458 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 800744a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800744e:	4906      	ldr	r1, [pc, #24]	; (8007468 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007450:	4b06      	ldr	r3, [pc, #24]	; (800746c <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007452:	68ca      	ldr	r2, [r1, #12]
 8007454:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007458:	4313      	orrs	r3, r2
 800745a:	60cb      	str	r3, [r1, #12]
 800745c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007460:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007462:	e7fd      	b.n	8007460 <myreboot+0x28>
 8007464:	0802c18c 	.word	0x0802c18c
 8007468:	e000ed00 	.word	0xe000ed00
 800746c:	05fa0004 	.word	0x05fa0004

08007470 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8007470:	b500      	push	{lr}
 8007472:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007474:	f241 3388 	movw	r3, #5000	; 0x1388
 8007478:	4a16      	ldr	r2, [pc, #88]	; (80074d4 <sendudp+0x64>)
 800747a:	f018 fef5 	bl	8020268 <udp_sendto>
 800747e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8007482:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007486:	b943      	cbnz	r3, 800749a <sendudp+0x2a>
 8007488:	b25a      	sxtb	r2, r3
		busycount = 0;
 800748a:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <sendudp+0x68>)
 800748c:	601a      	str	r2, [r3, #0]
	return (err);
 800748e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007492:	b240      	sxtb	r0, r0
 8007494:	b003      	add	sp, #12
 8007496:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 800749a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800749e:	480f      	ldr	r0, [pc, #60]	; (80074dc <sendudp+0x6c>)
 80074a0:	b249      	sxtb	r1, r1
 80074a2:	f01d ff77 	bl	8025394 <iprintf>
		vTaskDelay(100); //some delay!
 80074a6:	2064      	movs	r0, #100	; 0x64
 80074a8:	f00f fb24 	bl	8016af4 <vTaskDelay>
		if (err == ERR_MEM) {
 80074ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074b0:	2bff      	cmp	r3, #255	; 0xff
 80074b2:	d00c      	beq.n	80074ce <sendudp+0x5e>
		if (err == ERR_USE) {
 80074b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80074b8:	2bf8      	cmp	r3, #248	; 0xf8
 80074ba:	d1e8      	bne.n	800748e <sendudp+0x1e>
			if (busycount++ > 10)
 80074bc:	4a06      	ldr	r2, [pc, #24]	; (80074d8 <sendudp+0x68>)
 80074be:	6813      	ldr	r3, [r2, #0]
 80074c0:	1c59      	adds	r1, r3, #1
 80074c2:	2b0a      	cmp	r3, #10
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	dde2      	ble.n	800748e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 80074c8:	4805      	ldr	r0, [pc, #20]	; (80074e0 <sendudp+0x70>)
 80074ca:	f7ff ffb5 	bl	8007438 <myreboot>
			myreboot("sendudp: out of mem");
 80074ce:	4805      	ldr	r0, [pc, #20]	; (80074e4 <sendudp+0x74>)
 80074d0:	f7ff ffb2 	bl	8007438 <myreboot>
 80074d4:	20003104 	.word	0x20003104
 80074d8:	200030dc 	.word	0x200030dc
 80074dc:	0802c1a0 	.word	0x0802c1a0
 80074e0:	0802c1c8 	.word	0x0802c1c8
 80074e4:	0802c1b4 	.word	0x0802c1b4

080074e8 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80074ea:	4684      	mov	ip, r0
 80074ec:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074ee:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80074f2:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80074f8:	4c22      	ldr	r4, [pc, #136]	; (8007584 <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80074fa:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80074fc:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80074fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007502:	4c21      	ldr	r4, [pc, #132]	; (8007588 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007504:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007508:	f3c5 050b 	ubfx	r5, r5, #0, #12
 800750c:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007510:	4c1e      	ldr	r4, [pc, #120]	; (800758c <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007512:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007516:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800751a:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800751e:	4a1c      	ldr	r2, [pc, #112]	; (8007590 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007520:	bfc8      	it	gt
 8007522:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007526:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 800752a:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800752c:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	4d18      	ldr	r5, [pc, #96]	; (8007594 <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007534:	4a18      	ldr	r2, [pc, #96]	; (8007598 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007536:	2b00      	cmp	r3, #0
 8007538:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800753a:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800753c:	bfb8      	it	lt
 800753e:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007540:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8007542:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007544:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007546:	4d15      	ldr	r5, [pc, #84]	; (800759c <sendstatus+0xb4>)
 8007548:	b292      	uxth	r2, r2
 800754a:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800754c:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007550:	432a      	orrs	r2, r5
 8007552:	4d13      	ldr	r5, [pc, #76]	; (80075a0 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007554:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007556:	4035      	ands	r5, r6
 8007558:	432a      	orrs	r2, r5
 800755a:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800755c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8007560:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007562:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8007564:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007568:	f241 3388 	movw	r3, #5000	; 0x1388
 800756c:	f7ff ff80 	bl	8007470 <sendudp>
 8007570:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	6023      	str	r3, [r4, #0]
}
 800757a:	b002      	add	sp, #8
 800757c:	bd70      	pop	{r4, r5, r6, pc}
 800757e:	bf00      	nop
 8007580:	20000750 	.word	0x20000750
 8007584:	200006fc 	.word	0x200006fc
 8007588:	20003070 	.word	0x20003070
 800758c:	20002f3c 	.word	0x20002f3c
 8007590:	20000708 	.word	0x20000708
 8007594:	20000002 	.word	0x20000002
 8007598:	20000704 	.word	0x20000704
 800759c:	200006e4 	.word	0x200006e4
 80075a0:	ffff0000 	.word	0xffff0000
 80075a4:	20003104 	.word	0x20003104

080075a8 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4604      	mov	r4, r0
 80075ac:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 80075ae:	4818      	ldr	r0, [pc, #96]	; (8007610 <dnslookup+0x68>)
 80075b0:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 80075b2:	4e18      	ldr	r6, [pc, #96]	; (8007614 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 80075b4:	f01d feee 	bl	8025394 <iprintf>
	ip_ready = 0;
 80075b8:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80075ba:	4620      	mov	r0, r4
 80075bc:	4a16      	ldr	r2, [pc, #88]	; (8007618 <dnslookup+0x70>)
 80075be:	4639      	mov	r1, r7
	ip_ready = 0;
 80075c0:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80075c2:	f012 faf5 	bl	8019bb0 <dns_gethostbyname>
 80075c6:	4604      	mov	r4, r0

	switch (err) {
 80075c8:	3005      	adds	r0, #5
 80075ca:	d005      	beq.n	80075d8 <dnslookup+0x30>
 80075cc:	b114      	cbz	r4, 80075d4 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80075ce:	4813      	ldr	r0, [pc, #76]	; (800761c <dnslookup+0x74>)
 80075d0:	f01d fee0 	bl	8025394 <iprintf>
		break;
	}
	return (err);
}
 80075d4:	4620      	mov	r0, r4
 80075d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80075d8:	4811      	ldr	r0, [pc, #68]	; (8007620 <dnslookup+0x78>)
 80075da:	2514      	movs	r5, #20
 80075dc:	f01d feda 	bl	8025394 <iprintf>
		for (i = 0; i < 20; i++) {
 80075e0:	e001      	b.n	80075e6 <dnslookup+0x3e>
 80075e2:	3d01      	subs	r5, #1
 80075e4:	d0f3      	beq.n	80075ce <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80075e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075ea:	f00d ff35 	bl	8015458 <osDelay>
			printf(".");
 80075ee:	202e      	movs	r0, #46	; 0x2e
 80075f0:	f01d fee8 	bl	80253c4 <putchar>
			if (ip_ready) {
 80075f4:	6833      	ldr	r3, [r6, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d0f3      	beq.n	80075e2 <dnslookup+0x3a>
				if (ip_ready == -1) {
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	d002      	beq.n	8007604 <dnslookup+0x5c>
				return (ERR_OK);
 80075fe:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 8007600:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 8007602:	e7e7      	b.n	80075d4 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 8007604:	4b07      	ldr	r3, [pc, #28]	; (8007624 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 8007606:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 800760a:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 800760c:	e7e2      	b.n	80075d4 <dnslookup+0x2c>
 800760e:	bf00      	nop
 8007610:	0802c1e4 	.word	0x0802c1e4
 8007614:	200030ec 	.word	0x200030ec
 8007618:	08007425 	.word	0x08007425
 800761c:	0802c220 	.word	0x0802c220
 8007620:	0802c1f8 	.word	0x0802c1f8
 8007624:	0802c214 	.word	0x0802c214

08007628 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8007628:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 800762a:	4914      	ldr	r1, [pc, #80]	; (800767c <locateudp+0x54>)
{
 800762c:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 800762e:	4814      	ldr	r0, [pc, #80]	; (8007680 <locateudp+0x58>)
 8007630:	f01d feb0 	bl	8025394 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8007634:	4913      	ldr	r1, [pc, #76]	; (8007684 <locateudp+0x5c>)
 8007636:	4811      	ldr	r0, [pc, #68]	; (800767c <locateudp+0x54>)
 8007638:	f7ff ffb6 	bl	80075a8 <dnslookup>
 800763c:	b240      	sxtb	r0, r0
 800763e:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 8007642:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8007646:	b9a3      	cbnz	r3, 8007672 <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8007648:	4b0e      	ldr	r3, [pc, #56]	; (8007684 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800764a:	490f      	ldr	r1, [pc, #60]	; (8007688 <locateudp+0x60>)
	ip = udpdestip.addr;
 800764c:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800764e:	480f      	ldr	r0, [pc, #60]	; (800768c <locateudp+0x64>)
 8007650:	0e22      	lsrs	r2, r4, #24
 8007652:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8007656:	e9cd 3200 	strd	r3, r2, [sp]
 800765a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800765e:	b2e2      	uxtb	r2, r4
 8007660:	f01e f882 	bl	8025768 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8007664:	4909      	ldr	r1, [pc, #36]	; (800768c <locateudp+0x64>)
 8007666:	480a      	ldr	r0, [pc, #40]	; (8007690 <locateudp+0x68>)
 8007668:	f01d fe94 	bl	8025394 <iprintf>
	return (ip);
}
 800766c:	4620      	mov	r0, r4
 800766e:	b004      	add	sp, #16
 8007670:	bd10      	pop	{r4, pc}
		rebootme(3);
 8007672:	2003      	movs	r0, #3
 8007674:	f7fb fe4e 	bl	8003314 <rebootme>
 8007678:	e7e6      	b.n	8007648 <locateudp+0x20>
 800767a:	bf00      	nop
 800767c:	20003150 	.word	0x20003150
 8007680:	0802c244 	.word	0x0802c244
 8007684:	20003104 	.word	0x20003104
 8007688:	0802c264 	.word	0x0802c264
 800768c:	200030f4 	.word	0x200030f4
 8007690:	0802c274 	.word	0x0802c274

08007694 <startudp>:

void startudp(uint32_t ip) {
 8007694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007698:	ed2d 8b02 	vpush	{d8}
 800769c:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 800769e:	f00f fb51 	bl	8016d44 <xTaskGetCurrentTaskHandle>
 80076a2:	4b75      	ldr	r3, [pc, #468]	; (8007878 <startudp+0x1e4>)
 80076a4:	4602      	mov	r2, r0
	osDelay(1000);
 80076a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 80076aa:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 80076ac:	f00d fed4 	bl	8015458 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 80076b0:	f018 fea6 	bl	8020400 <udp_new>
	if (pcb == NULL) {
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f000 80ce 	beq.w	8007856 <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80076ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80076be:	496f      	ldr	r1, [pc, #444]	; (800787c <startudp+0x1e8>)
 80076c0:	ee08 0a10 	vmov	s16, r0
 80076c4:	f018 fc4c 	bl	801ff60 <udp_bind>
 80076c8:	4605      	mov	r5, r0
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f040 80bf 	bne.w	800784e <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076d0:	2241      	movs	r2, #65	; 0x41
 80076d2:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80076d6:	2036      	movs	r0, #54	; 0x36
 80076d8:	f013 fbc0 	bl	801ae5c <pbuf_alloc>

	if (p1 == NULL) {
 80076dc:	9000      	str	r0, [sp, #0]
 80076de:	2800      	cmp	r0, #0
 80076e0:	f000 80bd 	beq.w	800785e <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80076e4:	4c66      	ldr	r4, [pc, #408]	; (8007880 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076e6:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80076ea:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076ec:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80076f2:	2241      	movs	r2, #65	; 0x41
 80076f4:	f013 fbb2 	bl	801ae5c <pbuf_alloc>
	if (p2 == NULL) {
 80076f8:	9001      	str	r0, [sp, #4]
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f000 80b7 	beq.w	800786e <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8007700:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8007702:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8007704:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 8007706:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 8007708:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 800770c:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 800770e:	2201      	movs	r2, #1
 8007710:	f013 fba4 	bl	801ae5c <pbuf_alloc>
	if (ps == NULL) {
 8007714:	ee08 0a90 	vmov	s17, r0
 8007718:	2800      	cmp	r0, #0
 800771a:	f000 80aa 	beq.w	8007872 <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 800771e:	4c59      	ldr	r4, [pc, #356]	; (8007884 <startudp+0x1f0>)
 8007720:	4f59      	ldr	r7, [pc, #356]	; (8007888 <startudp+0x1f4>)
 8007722:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 8007724:	f241 3088 	movw	r0, #5000	; 0x1388
 8007728:	f00d fe96 	bl	8015458 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 800772c:	4b57      	ldr	r3, [pc, #348]	; (800788c <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 800772e:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8007730:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 8007732:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8007734:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8007736:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 800773a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800773e:	4b54      	ldr	r3, [pc, #336]	; (8007890 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8007740:	4854      	ldr	r0, [pc, #336]	; (8007894 <startudp+0x200>)
 8007742:	4e55      	ldr	r6, [pc, #340]	; (8007898 <startudp+0x204>)
 8007744:	f8df b188 	ldr.w	fp, [pc, #392]	; 80078d0 <startudp+0x23c>
 8007748:	f8df a188 	ldr.w	sl, [pc, #392]	; 80078d4 <startudp+0x240>
 800774c:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80078d8 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8007750:	4d52      	ldr	r5, [pc, #328]	; (800789c <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8007752:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8007754:	f01d feba 	bl	80254cc <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007758:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800775c:	2001      	movs	r0, #1
 800775e:	f00f fc39 	bl	8016fd4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8007762:	2800      	cmp	r0, #0
 8007764:	d05a      	beq.n	800781c <startudp+0x188>
			sigsend = 0;
 8007766:	2300      	movs	r3, #0
 8007768:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 800776a:	7833      	ldrb	r3, [r6, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0f3      	beq.n	8007758 <startudp+0xc4>
 8007770:	f8db 3000 	ldr.w	r3, [fp]
 8007774:	f8da 2000 	ldr.w	r2, [sl]
 8007778:	4313      	orrs	r3, r2
 800777a:	d1ed      	bne.n	8007758 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 800777c:	4a48      	ldr	r2, [pc, #288]	; (80078a0 <startudp+0x20c>)
 800777e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	2a00      	cmp	r2, #0
 8007786:	bf08      	it	eq
 8007788:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800778a:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 800778c:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800778e:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8007790:	6822      	ldr	r2, [r4, #0]
 8007792:	684b      	ldr	r3, [r1, #4]
 8007794:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	684a      	ldr	r2, [r1, #4]
 800779a:	0a1b      	lsrs	r3, r3, #8
 800779c:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 800779e:	6823      	ldr	r3, [r4, #0]
 80077a0:	684a      	ldr	r2, [r1, #4]
 80077a2:	0c1b      	lsrs	r3, r3, #16
 80077a4:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 80077a6:	7b89      	ldrb	r1, [r1, #14]
 80077a8:	2901      	cmp	r1, #1
 80077aa:	d006      	beq.n	80077ba <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 80077ac:	4628      	mov	r0, r5
 80077ae:	f01d fdf1 	bl	8025394 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 80077b2:	f899 100e 	ldrb.w	r1, [r9, #14]
 80077b6:	2901      	cmp	r1, #1
 80077b8:	d1f8      	bne.n	80077ac <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 80077ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80077be:	4649      	mov	r1, r9
 80077c0:	4a38      	ldr	r2, [pc, #224]	; (80078a4 <startudp+0x210>)
 80077c2:	ee18 0a10 	vmov	r0, s16
 80077c6:	f7ff fe53 	bl	8007470 <sendudp>
 80077ca:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80077ce:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80077d2:	3301      	adds	r3, #1
 80077d4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80077d8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80077dc:	3301      	adds	r3, #1
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	3301      	adds	r3, #1
 80077e8:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80077ea:	4b2f      	ldr	r3, [pc, #188]	; (80078a8 <startudp+0x214>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0b2      	beq.n	8007758 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80077f2:	492e      	ldr	r1, [pc, #184]	; (80078ac <startudp+0x218>)
 80077f4:	ee18 2a10 	vmov	r2, s16
 80077f8:	2001      	movs	r0, #1
 80077fa:	780b      	ldrb	r3, [r1, #0]
 80077fc:	ee18 1a90 	vmov	r1, s17
 8007800:	f7ff fe72 	bl	80074e8 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 8007804:	2300      	movs	r3, #0
 8007806:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007808:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800780c:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 800780e:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 8007812:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007814:	f00f fbde 	bl	8016fd4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8007818:	2800      	cmp	r0, #0
 800781a:	d1a4      	bne.n	8007766 <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 800781c:	4b24      	ldr	r3, [pc, #144]	; (80078b0 <startudp+0x21c>)
 800781e:	f8d8 2000 	ldr.w	r2, [r8]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4293      	cmp	r3, r2
 8007826:	d097      	beq.n	8007758 <startudp+0xc4>
 8007828:	4a22      	ldr	r2, [pc, #136]	; (80078b4 <startudp+0x220>)
 800782a:	4923      	ldr	r1, [pc, #140]	; (80078b8 <startudp+0x224>)
 800782c:	fb02 f203 	mul.w	r2, r2, r3
 8007830:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 8007834:	d390      	bcc.n	8007758 <startudp+0xc4>
		talive = t1sec;
 8007836:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 800783a:	ee18 2a10 	vmov	r2, s16
 800783e:	4b1b      	ldr	r3, [pc, #108]	; (80078ac <startudp+0x218>)
 8007840:	ee18 1a90 	vmov	r1, s17
 8007844:	2002      	movs	r0, #2
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	f7ff fe4e 	bl	80074e8 <sendstatus>
 800784c:	e784      	b.n	8007758 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 800784e:	481b      	ldr	r0, [pc, #108]	; (80078bc <startudp+0x228>)
 8007850:	f01d fe3c 	bl	80254cc <puts>
		for (;;)
 8007854:	e7fe      	b.n	8007854 <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 8007856:	481a      	ldr	r0, [pc, #104]	; (80078c0 <startudp+0x22c>)
 8007858:	f01d fe38 	bl	80254cc <puts>
		for (;;)
 800785c:	e7fe      	b.n	800785c <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 800785e:	4819      	ldr	r0, [pc, #100]	; (80078c4 <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8007860:	b005      	add	sp, #20
 8007862:	ecbd 8b02 	vpop	{d8}
 8007866:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 800786a:	f01d be2f 	b.w	80254cc <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 800786e:	4816      	ldr	r0, [pc, #88]	; (80078c8 <startudp+0x234>)
 8007870:	e7f6      	b.n	8007860 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 8007872:	4816      	ldr	r0, [pc, #88]	; (80078cc <startudp+0x238>)
 8007874:	e7f4      	b.n	8007860 <startudp+0x1cc>
 8007876:	bf00      	nop
 8007878:	20000804 	.word	0x20000804
 800787c:	08045954 	.word	0x08045954
 8007880:	20000754 	.word	0x20000754
 8007884:	20002f3c 	.word	0x20002f3c
 8007888:	2000076c 	.word	0x2000076c
 800788c:	dec0edfe 	.word	0xdec0edfe
 8007890:	20000752 	.word	0x20000752
 8007894:	0802c320 	.word	0x0802c320
 8007898:	200030e8 	.word	0x200030e8
 800789c:	0802c354 	.word	0x0802c354
 80078a0:	200006f8 	.word	0x200006f8
 80078a4:	20003104 	.word	0x20003104
 80078a8:	20000764 	.word	0x20000764
 80078ac:	200006e4 	.word	0x200006e4
 80078b0:	20002d54 	.word	0x20002d54
 80078b4:	eeeeeeef 	.word	0xeeeeeeef
 80078b8:	02222222 	.word	0x02222222
 80078bc:	0802c2a4 	.word	0x0802c2a4
 80078c0:	0802c288 	.word	0x0802c288
 80078c4:	0802c2c0 	.word	0x0802c2c0
 80078c8:	0802c2e0 	.word	0x0802c2e0
 80078cc:	0802c300 	.word	0x0802c300
 80078d0:	200030e4 	.word	0x200030e4
 80078d4:	20000704 	.word	0x20000704
 80078d8:	200030f0 	.word	0x200030f0

080078dc <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80078dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80078de:	4b52      	ldr	r3, [pc, #328]	; (8007a28 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80078e0:	4606      	mov	r6, r0
 80078e2:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078e4:	4851      	ldr	r0, [pc, #324]	; (8007a2c <tag_callback+0x150>)
	if (ledsenabled) {
 80078e6:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 80078ec:	b35a      	cbz	r2, 8007946 <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80078ee:	f004 f9e7 	bl	800bcc0 <HAL_GPIO_TogglePin>
 80078f2:	4c4f      	ldr	r4, [pc, #316]	; (8007a30 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 80078f4:	4d4f      	ldr	r5, [pc, #316]	; (8007a34 <tag_callback+0x158>)
 80078f6:	e001      	b.n	80078fc <tag_callback+0x20>
 80078f8:	f01d fde8 	bl	80254cc <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80078fc:	2101      	movs	r1, #1
 80078fe:	6820      	ldr	r0, [r4, #0]
 8007900:	f00e fb6e 	bl	8015fe0 <xQueueSemaphoreTake>
 8007904:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 8007906:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8007908:	2b01      	cmp	r3, #1
 800790a:	d1f5      	bne.n	80078f8 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 800790c:	1f32      	subs	r2, r6, #4
 800790e:	2a07      	cmp	r2, #7
 8007910:	d81c      	bhi.n	800794c <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 8007912:	4949      	ldr	r1, [pc, #292]	; (8007a38 <tag_callback+0x15c>)
 8007914:	4093      	lsls	r3, r2
 8007916:	780a      	ldrb	r2, [r1, #0]
 8007918:	4013      	ands	r3, r2
 800791a:	4a48      	ldr	r2, [pc, #288]	; (8007a3c <tag_callback+0x160>)
 800791c:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 800791e:	bb5b      	cbnz	r3, 8007978 <tag_callback+0x9c>
			strcpy(newstring, "0");
 8007920:	4b47      	ldr	r3, [pc, #284]	; (8007a40 <tag_callback+0x164>)
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8007926:	2300      	movs	r3, #0
 8007928:	6820      	ldr	r0, [r4, #0]
 800792a:	461a      	mov	r2, r3
 800792c:	4619      	mov	r1, r3
 800792e:	f00e f8bd 	bl	8015aac <xQueueGenericSend>
 8007932:	2801      	cmp	r0, #1
 8007934:	d002      	beq.n	800793c <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 8007936:	4843      	ldr	r0, [pc, #268]	; (8007a44 <tag_callback+0x168>)
 8007938:	f01d fdc8 	bl	80254cc <puts>
	}
	return (strlen(newstring));
 800793c:	4638      	mov	r0, r7
}
 800793e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 8007942:	f7f8 bc87 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 8007946:	f004 f9a1 	bl	800bc8c <HAL_GPIO_WritePin>
 800794a:	e7d2      	b.n	80078f2 <tag_callback+0x16>
		switch (index) {
 800794c:	2e14      	cmp	r6, #20
 800794e:	d817      	bhi.n	8007980 <tag_callback+0xa4>
 8007950:	e8df f006 	tbb	[pc, r6]
 8007954:	0b655055 	.word	0x0b655055
 8007958:	16161616 	.word	0x16161616
 800795c:	16161616 	.word	0x16161616
 8007960:	343d5a61 	.word	0x343d5a61
 8007964:	464b2429 	.word	0x464b2429
 8007968:	1c          	.byte	0x1c
 8007969:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 800796a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800796e:	482f      	ldr	r0, [pc, #188]	; (8007a2c <tag_callback+0x150>)
 8007970:	f004 f97a 	bl	800bc68 <HAL_GPIO_ReadPin>
 8007974:	2801      	cmp	r0, #1
 8007976:	d1d3      	bne.n	8007920 <tag_callback+0x44>
			strcpy(newstring, "1");
 8007978:	4b33      	ldr	r3, [pc, #204]	; (8007a48 <tag_callback+0x16c>)
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	803b      	strh	r3, [r7, #0]
 800797e:	e7d2      	b.n	8007926 <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8007980:	4632      	mov	r2, r6
 8007982:	4932      	ldr	r1, [pc, #200]	; (8007a4c <tag_callback+0x170>)
 8007984:	4638      	mov	r0, r7
 8007986:	f01d feef 	bl	8025768 <siprintf>
			break;
 800798a:	e7cc      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 800798c:	4b30      	ldr	r3, [pc, #192]	; (8007a50 <tag_callback+0x174>)
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf14      	ite	ne
 8007994:	2331      	movne	r3, #49	; 0x31
 8007996:	2330      	moveq	r3, #48	; 0x30
 8007998:	803b      	strh	r3, [r7, #0]
			break;
 800799a:	e7c4      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 800799c:	492d      	ldr	r1, [pc, #180]	; (8007a54 <tag_callback+0x178>)
 800799e:	4638      	mov	r0, r7
 80079a0:	f01d ff89 	bl	80258b6 <strcpy>
			break;
 80079a4:	e7bf      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 80079a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079aa:	482b      	ldr	r0, [pc, #172]	; (8007a58 <tag_callback+0x17c>)
 80079ac:	f004 f95c 	bl	800bc68 <HAL_GPIO_ReadPin>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bf14      	ite	ne
 80079b4:	2330      	movne	r3, #48	; 0x30
 80079b6:	2331      	moveq	r3, #49	; 0x31
 80079b8:	803b      	strh	r3, [r7, #0]
			break;
 80079ba:	e7b4      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <tag_callback+0x180>)
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	f013 0f04 	tst.w	r3, #4
 80079c4:	bf14      	ite	ne
 80079c6:	2331      	movne	r3, #49	; 0x31
 80079c8:	2330      	moveq	r3, #48	; 0x30
 80079ca:	803b      	strh	r3, [r7, #0]
			break;
 80079cc:	e7ab      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 80079ce:	4b23      	ldr	r3, [pc, #140]	; (8007a5c <tag_callback+0x180>)
 80079d0:	881b      	ldrh	r3, [r3, #0]
 80079d2:	f013 0f02 	tst.w	r3, #2
 80079d6:	bf14      	ite	ne
 80079d8:	2331      	movne	r3, #49	; 0x31
 80079da:	2330      	moveq	r3, #48	; 0x30
 80079dc:	803b      	strh	r3, [r7, #0]
			break;
 80079de:	e7a2      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 80079e0:	491f      	ldr	r1, [pc, #124]	; (8007a60 <tag_callback+0x184>)
 80079e2:	4638      	mov	r0, r7
 80079e4:	f01d ff67 	bl	80258b6 <strcpy>
			break;
 80079e8:	e79d      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 80079ea:	491e      	ldr	r1, [pc, #120]	; (8007a64 <tag_callback+0x188>)
 80079ec:	4638      	mov	r0, r7
 80079ee:	f01d ff62 	bl	80258b6 <strcpy>
			break;
 80079f2:	e798      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 80079f4:	491c      	ldr	r1, [pc, #112]	; (8007a68 <tag_callback+0x18c>)
 80079f6:	4638      	mov	r0, r7
 80079f8:	f01d ff5d 	bl	80258b6 <strcpy>
			break;
 80079fc:	e793      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 80079fe:	491b      	ldr	r1, [pc, #108]	; (8007a6c <tag_callback+0x190>)
 8007a00:	4638      	mov	r0, r7
 8007a02:	f01d ff58 	bl	80258b6 <strcpy>
			break;
 8007a06:	e78e      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 8007a08:	4b14      	ldr	r3, [pc, #80]	; (8007a5c <tag_callback+0x180>)
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	3330      	adds	r3, #48	; 0x30
 8007a12:	803b      	strh	r3, [r7, #0]
			break;
 8007a14:	e787      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, "5");
 8007a16:	4b16      	ldr	r3, [pc, #88]	; (8007a70 <tag_callback+0x194>)
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	803b      	strh	r3, [r7, #0]
			break;
 8007a1c:	e783      	b.n	8007926 <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8007a1e:	4915      	ldr	r1, [pc, #84]	; (8007a74 <tag_callback+0x198>)
 8007a20:	4638      	mov	r0, r7
 8007a22:	f01d ff48 	bl	80258b6 <strcpy>
			break;
 8007a26:	e77e      	b.n	8007926 <tag_callback+0x4a>
 8007a28:	20000278 	.word	0x20000278
 8007a2c:	40020c00 	.word	0x40020c00
 8007a30:	20002d50 	.word	0x20002d50
 8007a34:	0802c43c 	.word	0x0802c43c
 8007a38:	2000027c 	.word	0x2000027c
 8007a3c:	2000310c 	.word	0x2000310c
 8007a40:	08045530 	.word	0x08045530
 8007a44:	0802c468 	.word	0x0802c468
 8007a48:	0802c21c 	.word	0x0802c21c
 8007a4c:	0802c448 	.word	0x0802c448
 8007a50:	20000018 	.word	0x20000018
 8007a54:	2000008c 	.word	0x2000008c
 8007a58:	40021000 	.word	0x40021000
 8007a5c:	20003070 	.word	0x20003070
 8007a60:	2000001c 	.word	0x2000001c
 8007a64:	20000130 	.word	0x20000130
 8007a68:	2000007c 	.word	0x2000007c
 8007a6c:	20000238 	.word	0x20000238
 8007a70:	08043914 	.word	0x08043914
 8007a74:	2000005c 	.word	0x2000005c

08007a78 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	4615      	mov	r5, r2
 8007a80:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007a82:	220a      	movs	r2, #10
 8007a84:	a903      	add	r1, sp, #12
 8007a86:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8007a88:	4699      	mov	r9, r3
 8007a8a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007a8c:	f01e fcee 	bl	802646c <strtol>
 8007a90:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8007a92:	4621      	mov	r1, r4
 8007a94:	462a      	mov	r2, r5
 8007a96:	4871      	ldr	r0, [pc, #452]	; (8007c5c <httpd_cgi_handler+0x1e4>)
 8007a98:	4633      	mov	r3, r6
 8007a9a:	f01d fc7b 	bl	8025394 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007a9e:	2d00      	cmp	r5, #0
 8007aa0:	dd37      	ble.n	8007b12 <httpd_cgi_handler+0x9a>
 8007aa2:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007aa4:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8007c8c <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007aa8:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8007c90 <httpd_cgi_handler+0x218>
		switch (j) {
 8007aac:	f1a6 030a 	sub.w	r3, r6, #10
 8007ab0:	2b0e      	cmp	r3, #14
 8007ab2:	f200 80cc 	bhi.w	8007c4e <httpd_cgi_handler+0x1d6>
 8007ab6:	e8df f003 	tbb	[pc, r3]
 8007aba:	9eb6      	.short	0x9eb6
 8007abc:	08080808 	.word	0x08080808
 8007ac0:	08080808 	.word	0x08080808
 8007ac4:	864d6073 	.word	0x864d6073
 8007ac8:	3a          	.byte	0x3a
 8007ac9:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007aca:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007acc:	2101      	movs	r1, #1
 8007ace:	f1a6 000c 	sub.w	r0, r6, #12
 8007ad2:	4b63      	ldr	r3, [pc, #396]	; (8007c60 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007ad4:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8007ad6:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007ada:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 8007adc:	2a30      	cmp	r2, #48	; 0x30
 8007ade:	d01b      	beq.n	8007b18 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 8007ae0:	781a      	ldrb	r2, [r3, #0]
 8007ae2:	4311      	orrs	r1, r2
 8007ae4:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007ae6:	f001 0202 	and.w	r2, r1, #2
 8007aea:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007aec:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 8007aee:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8007af0:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007af4:	f01d fc4e 	bl	8025394 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 8007af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007afc:	2301      	movs	r3, #1
 8007afe:	4a58      	ldr	r2, [pc, #352]	; (8007c60 <httpd_cgi_handler+0x1e8>)
 8007b00:	9100      	str	r1, [sp, #0]
 8007b02:	2188      	movs	r1, #136	; 0x88
 8007b04:	4857      	ldr	r0, [pc, #348]	; (8007c64 <httpd_cgi_handler+0x1ec>)
 8007b06:	f004 fbc7 	bl	800c298 <HAL_I2C_Master_Transmit>
 8007b0a:	b960      	cbnz	r0, 8007b26 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b0c:	3401      	adds	r4, #1
 8007b0e:	42a5      	cmp	r5, r4
 8007b10:	d1cc      	bne.n	8007aac <httpd_cgi_handler+0x34>
}
 8007b12:	b005      	add	sp, #20
 8007b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fa01 f600 	lsl.w	r6, r1, r0
 8007b1e:	7819      	ldrb	r1, [r3, #0]
 8007b20:	ea21 0106 	bic.w	r1, r1, r6
 8007b24:	e7df      	b.n	8007ae6 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 8007b26:	4850      	ldr	r0, [pc, #320]	; (8007c68 <httpd_cgi_handler+0x1f0>)
 8007b28:	f01d fc34 	bl	8025394 <iprintf>
 8007b2c:	e7ee      	b.n	8007b0c <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b2e:	6839      	ldr	r1, [r7, #0]
 8007b30:	3c01      	subs	r4, #1
 8007b32:	484e      	ldr	r0, [pc, #312]	; (8007c6c <httpd_cgi_handler+0x1f4>)
 8007b34:	440c      	add	r4, r1
 8007b36:	4623      	mov	r3, r4
 8007b38:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b3c:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b3e:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b40:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b44:	bf18      	it	ne
 8007b46:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b48:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007b4a:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b4c:	dcf3      	bgt.n	8007b36 <httpd_cgi_handler+0xbe>
}
 8007b4e:	b005      	add	sp, #20
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	4e46      	ldr	r6, [pc, #280]	; (8007c70 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007b5c:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b5e:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8007b60:	2b30      	cmp	r3, #48	; 0x30
 8007b62:	bf0c      	ite	eq
 8007b64:	f020 0001 	biceq.w	r0, r0, #1
 8007b68:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8007b6c:	f7fd fea0 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b70:	42a5      	cmp	r5, r4
 8007b72:	dcf0      	bgt.n	8007b56 <httpd_cgi_handler+0xde>
}
 8007b74:	b005      	add	sp, #20
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	4e3d      	ldr	r6, [pc, #244]	; (8007c70 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007b82:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b84:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007b86:	2b30      	cmp	r3, #48	; 0x30
 8007b88:	bf0c      	ite	eq
 8007b8a:	f020 0002 	biceq.w	r0, r0, #2
 8007b8e:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8007b92:	f7fd fe8d 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007b96:	42a5      	cmp	r5, r4
 8007b98:	dcf0      	bgt.n	8007b7c <httpd_cgi_handler+0x104>
}
 8007b9a:	b005      	add	sp, #20
 8007b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba0:	4e33      	ldr	r6, [pc, #204]	; (8007c70 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007ba8:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007baa:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007bac:	2b30      	cmp	r3, #48	; 0x30
 8007bae:	bf0c      	ite	eq
 8007bb0:	f020 0004 	biceq.w	r0, r0, #4
 8007bb4:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8007bb8:	f7fd fe7a 	bl	80058b0 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bbc:	42a5      	cmp	r5, r4
 8007bbe:	dcf0      	bgt.n	8007ba2 <httpd_cgi_handler+0x12a>
}
 8007bc0:	b005      	add	sp, #20
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007bc8:	4e2a      	ldr	r6, [pc, #168]	; (8007c74 <httpd_cgi_handler+0x1fc>)
 8007bca:	e004      	b.n	8007bd6 <httpd_cgi_handler+0x15e>
 8007bcc:	f004 f85e 	bl	800bc8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	dd9e      	ble.n	8007b12 <httpd_cgi_handler+0x9a>
 8007bd4:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8007bd6:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8007bd8:	2201      	movs	r2, #1
 8007bda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bde:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8007be0:	4423      	add	r3, r4
 8007be2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007be6:	2b31      	cmp	r3, #49	; 0x31
 8007be8:	d1f0      	bne.n	8007bcc <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8007bea:	2200      	movs	r2, #0
 8007bec:	f004 f84e 	bl	800bc8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007bf0:	42a5      	cmp	r5, r4
 8007bf2:	dcef      	bgt.n	8007bd4 <httpd_cgi_handler+0x15c>
 8007bf4:	e78d      	b.n	8007b12 <httpd_cgi_handler+0x9a>
 8007bf6:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007bf8:	4e1f      	ldr	r6, [pc, #124]	; (8007c78 <httpd_cgi_handler+0x200>)
 8007bfa:	e004      	b.n	8007c06 <httpd_cgi_handler+0x18e>
 8007bfc:	f004 f846 	bl	800bc8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007c00:	42ac      	cmp	r4, r5
 8007c02:	da86      	bge.n	8007b12 <httpd_cgi_handler+0x9a>
 8007c04:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8007c06:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8007c08:	2201      	movs	r2, #1
 8007c0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007c0e:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8007c10:	4423      	add	r3, r4
 8007c12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007c16:	2b30      	cmp	r3, #48	; 0x30
 8007c18:	d1f0      	bne.n	8007bfc <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f004 f836 	bl	800bc8c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007c20:	42a5      	cmp	r5, r4
 8007c22:	dcef      	bgt.n	8007c04 <httpd_cgi_handler+0x18c>
 8007c24:	e775      	b.n	8007b12 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8007c26:	4815      	ldr	r0, [pc, #84]	; (8007c7c <httpd_cgi_handler+0x204>)
 8007c28:	f01d fc50 	bl	80254cc <puts>
			osDelay(500);
 8007c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c30:	f00d fc12 	bl	8015458 <osDelay>
 8007c34:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c38:	4911      	ldr	r1, [pc, #68]	; (8007c80 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c3a:	4b12      	ldr	r3, [pc, #72]	; (8007c84 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007c3c:	68ca      	ldr	r2, [r1, #12]
 8007c3e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60cb      	str	r3, [r1, #12]
 8007c46:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007c4a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007c4c:	e7fd      	b.n	8007c4a <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8007c4e:	f8d9 1000 	ldr.w	r1, [r9]
 8007c52:	480d      	ldr	r0, [pc, #52]	; (8007c88 <httpd_cgi_handler+0x210>)
 8007c54:	f01d fb9e 	bl	8025394 <iprintf>
			break;
 8007c58:	e758      	b.n	8007b0c <httpd_cgi_handler+0x94>
 8007c5a:	bf00      	nop
 8007c5c:	0802c480 	.word	0x0802c480
 8007c60:	2000027c 	.word	0x2000027c
 8007c64:	200024f0 	.word	0x200024f0
 8007c68:	0802bdb0 	.word	0x0802bdb0
 8007c6c:	20000018 	.word	0x20000018
 8007c70:	20003070 	.word	0x20003070
 8007c74:	40021000 	.word	0x40021000
 8007c78:	40020c00 	.word	0x40020c00
 8007c7c:	0802c4ac 	.word	0x0802c4ac
 8007c80:	e000ed00 	.word	0xe000ed00
 8007c84:	05fa0004 	.word	0x05fa0004
 8007c88:	0802c4e4 	.word	0x0802c4e4
 8007c8c:	2000306c 	.word	0x2000306c
 8007c90:	0802c4c8 	.word	0x0802c4c8

08007c94 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8007c94:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8007c96:	4802      	ldr	r0, [pc, #8]	; (8007ca0 <httpd_post_receive_data+0xc>)
 8007c98:	f01d fc18 	bl	80254cc <puts>
}
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	bd08      	pop	{r3, pc}
 8007ca0:	0802c504 	.word	0x0802c504

08007ca4 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8007ca4:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8007ca6:	4802      	ldr	r0, [pc, #8]	; (8007cb0 <httpd_post_begin+0xc>)
 8007ca8:	f01d fc10 	bl	80254cc <puts>
}
 8007cac:	2000      	movs	r0, #0
 8007cae:	bd08      	pop	{r3, pc}
 8007cb0:	0802c520 	.word	0x0802c520

08007cb4 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8007cb4:	4801      	ldr	r0, [pc, #4]	; (8007cbc <httpd_post_finished+0x8>)
 8007cb6:	f01d bc09 	b.w	80254cc <puts>
 8007cba:	bf00      	nop
 8007cbc:	0802c534 	.word	0x0802c534

08007cc0 <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007cc0:	4803      	ldr	r0, [pc, #12]	; (8007cd0 <init_httpd_ssi+0x10>)
 8007cc2:	2215      	movs	r2, #21
 8007cc4:	4903      	ldr	r1, [pc, #12]	; (8007cd4 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8007cc6:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8007cc8:	f011 fa26 	bl	8019118 <http_set_ssi_handler>
}
 8007ccc:	bd08      	pop	{r3, pc}
 8007cce:	bf00      	nop
 8007cd0:	080078dd 	.word	0x080078dd
 8007cd4:	20000288 	.word	0x20000288

08007cd8 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 8007cd8:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 8007cda:	7804      	ldrb	r4, [r0, #0]
 8007cdc:	b194      	cbz	r4, 8007d04 <parsep2+0x2c>
 8007cde:	2c7d      	cmp	r4, #125	; 0x7d
 8007ce0:	d010      	beq.n	8007d04 <parsep2+0x2c>
	j = 0;
 8007ce2:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 8007ce6:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 8007ce8:	f811 600e 	ldrb.w	r6, [r1, lr]
 8007cec:	f105 0c01 	add.w	ip, r5, #1
 8007cf0:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 8007cf2:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 8007cf6:	d008      	beq.n	8007d0a <parsep2+0x32>
 8007cf8:	4665      	mov	r5, ip
			j = 0;
 8007cfa:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 8007cfe:	b10c      	cbz	r4, 8007d04 <parsep2+0x2c>
 8007d00:	2c7d      	cmp	r4, #125	; 0x7d
 8007d02:	d1f1      	bne.n	8007ce8 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 8007d04:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 8007d0a:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 8007d0c:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 8007d10:	d001      	beq.n	8007d16 <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 8007d12:	4665      	mov	r5, ip
 8007d14:	e7f3      	b.n	8007cfe <parsep2+0x26>
				if (type == 1) {		// looking for a string
 8007d16:	2a01      	cmp	r2, #1
				i++;
 8007d18:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8007d1c:	d005      	beq.n	8007d2a <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8007d1e:	2a02      	cmp	r2, #2
 8007d20:	d01a      	beq.n	8007d58 <parsep2+0x80>
				} else if (type == 3) { // uint32_t hex string
 8007d22:	2a03      	cmp	r2, #3
 8007d24:	d022      	beq.n	8007d6c <parsep2+0x94>
	while ((buf[i]) && (buf[i] != '}')) {
 8007d26:	5d44      	ldrb	r4, [r0, r5]
 8007d28:	e7e9      	b.n	8007cfe <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d2a:	5d44      	ldrb	r4, [r0, r5]
 8007d2c:	1941      	adds	r1, r0, r5
 8007d2e:	b36c      	cbz	r4, 8007d8c <parsep2+0xb4>
 8007d30:	1e5d      	subs	r5, r3, #1
					j = 0;
 8007d32:	2200      	movs	r2, #0
 8007d34:	4e17      	ldr	r6, [pc, #92]	; (8007d94 <parsep2+0xbc>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d36:	5d30      	ldrb	r0, [r6, r4]
 8007d38:	0740      	lsls	r0, r0, #29
 8007d3a:	d101      	bne.n	8007d40 <parsep2+0x68>
 8007d3c:	2c2e      	cmp	r4, #46	; 0x2e
 8007d3e:	d11f      	bne.n	8007d80 <parsep2+0xa8>
						pch[j++] = buf[i++];
 8007d40:	f805 4f01 	strb.w	r4, [r5, #1]!
 8007d44:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007d4a:	2c00      	cmp	r4, #0
 8007d4c:	d1f3      	bne.n	8007d36 <parsep2+0x5e>
					pch[j] = 0;
 8007d4e:	4413      	add	r3, r2
 8007d50:	4620      	mov	r0, r4
 8007d52:	2200      	movs	r2, #0
 8007d54:	701a      	strb	r2, [r3, #0]
}
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8007d58:	461a      	mov	r2, r3
 8007d5a:	490f      	ldr	r1, [pc, #60]	; (8007d98 <parsep2+0xc0>)
 8007d5c:	4428      	add	r0, r5
 8007d5e:	f01d fd23 	bl	80257a8 <siscanf>
 8007d62:	3801      	subs	r0, #1
 8007d64:	bf18      	it	ne
 8007d66:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007d6a:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	490b      	ldr	r1, [pc, #44]	; (8007d9c <parsep2+0xc4>)
 8007d70:	4428      	add	r0, r5
 8007d72:	f01d fd19 	bl	80257a8 <siscanf>
 8007d76:	3801      	subs	r0, #1
 8007d78:	bf18      	it	ne
 8007d7a:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007d7e:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8007d80:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 8007d84:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 8007d86:	0940      	lsrs	r0, r0, #5
 8007d88:	4240      	negs	r0, r0
 8007d8a:	e7e2      	b.n	8007d52 <parsep2+0x7a>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e7df      	b.n	8007d52 <parsep2+0x7a>
 8007d92:	bf00      	nop
 8007d94:	08045bb1 	.word	0x08045bb1
 8007d98:	0802c54c 	.word	0x0802c54c
 8007d9c:	0802c550 	.word	0x0802c550

08007da0 <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8007da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int nconv, res, res2;
	volatile int p1;
	volatile char p2[96];
	volatile char filename[32], s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
	char host[17] = "192.168.0.248";
 8007da2:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <returnpage+0x1f0>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8007da4:	b0b7      	sub	sp, #220	; 0xdc
 8007da6:	4606      	mov	r6, r0
 8007da8:	4615      	mov	r5, r2
 8007daa:	f8ad 100e 	strh.w	r1, [sp, #14]
	char host[17] = "192.168.0.248";
 8007dae:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
	int newfirmware = 0;

//	printf("returnpage:\n");
	if (expectedapage) {
 8007db2:	4f78      	ldr	r7, [pc, #480]	; (8007f94 <returnpage+0x1f4>)
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007db4:	2400      	movs	r4, #0
	char host[17] = "192.168.0.248";
 8007db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007db8:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 8007dbc:	f8ac 3000 	strh.w	r3, [ip]
		if (errorm == 0) {
 8007dc0:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007dc2:	940b      	str	r4, [sp, #44]	; 0x2c
	char host[17] = "192.168.0.248";
 8007dc4:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
 8007dc8:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 8007dcc:	940c      	str	r4, [sp, #48]	; 0x30
		if (errorm == 0) {
 8007dce:	b103      	cbz	r3, 8007dd2 <returnpage+0x32>
 8007dd0:	b11d      	cbz	r5, 8007dda <returnpage+0x3a>
				osDelay(1000);
				httploader(filename, host, crc1, crc2);	/// zzz  host ip ??
			}
		}
	}
	expectedapage = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	603b      	str	r3, [r7, #0]
}
 8007dd6:	b037      	add	sp, #220	; 0xdc
 8007dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("server returned page: %.*s\n", charcount, content);
 8007dda:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8007dde:	4632      	mov	r2, r6
 8007de0:	486d      	ldr	r0, [pc, #436]	; (8007f98 <returnpage+0x1f8>)
 8007de2:	b289      	uxth	r1, r1
 8007de4:	f01d fad6 	bl	8025394 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8007de8:	ab1e      	add	r3, sp, #120	; 0x78
 8007dea:	4630      	mov	r0, r6
 8007dec:	aa04      	add	r2, sp, #16
 8007dee:	9301      	str	r3, [sp, #4]
 8007df0:	ab08      	add	r3, sp, #32
 8007df2:	496a      	ldr	r1, [pc, #424]	; (8007f9c <returnpage+0x1fc>)
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	4b6a      	ldr	r3, [pc, #424]	; (8007fa0 <returnpage+0x200>)
			s1[0] = '\0';
 8007df8:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 8007dfc:	f01d fcd4 	bl	80257a8 <siscanf>
 8007e00:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 8007e02:	9b05      	ldr	r3, [sp, #20]
 8007e04:	3301      	adds	r3, #1
 8007e06:	f000 80b0 	beq.w	8007f6a <returnpage+0x1ca>
				switch (nconv) {
 8007e0a:	9b05      	ldr	r3, [sp, #20]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	f200 80b8 	bhi.w	8007f84 <returnpage+0x1e4>
 8007e14:	e8df f003 	tbb	[pc, r3]
 8007e18:	02515a63 	.word	0x02515a63
					if (p2[0] == '{') {		// its the start of enclosed params
 8007e1c:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8007e20:	2b7b      	cmp	r3, #123	; 0x7b
 8007e22:	d14a      	bne.n	8007eba <returnpage+0x11a>
						res = 0;
 8007e24:	2200      	movs	r2, #0
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e26:	ab16      	add	r3, sp, #88	; 0x58
 8007e28:	495e      	ldr	r1, [pc, #376]	; (8007fa4 <returnpage+0x204>)
 8007e2a:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res = 0;
 8007e2e:	9206      	str	r2, [sp, #24]
						res2 = 0;
 8007e30:	9207      	str	r2, [sp, #28]
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e32:	2201      	movs	r2, #1
 8007e34:	f7ff ff50 	bl	8007cd8 <parsep2>
 8007e38:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	495a      	ldr	r1, [pc, #360]	; (8007fa8 <returnpage+0x208>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e3e:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e40:	4b5a      	ldr	r3, [pc, #360]	; (8007fac <returnpage+0x20c>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007e42:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e44:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e48:	f7ff ff46 	bl	8007cd8 <parsep2>
 8007e4c:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e4e:	2203      	movs	r2, #3
 8007e50:	4957      	ldr	r1, [pc, #348]	; (8007fb0 <returnpage+0x210>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e52:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e54:	ab09      	add	r3, sp, #36	; 0x24
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007e56:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e58:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e5c:	f7ff ff3c 	bl	8007cd8 <parsep2>
 8007e60:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e62:	2203      	movs	r2, #3
 8007e64:	4953      	ldr	r1, [pc, #332]	; (8007fb4 <returnpage+0x214>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e66:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e68:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007e6a:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e6c:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e70:	f7ff ff32 	bl	8007cd8 <parsep2>
 8007e74:	9b06      	ldr	r3, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e76:	2201      	movs	r2, #1
 8007e78:	494f      	ldr	r1, [pc, #316]	; (8007fb8 <returnpage+0x218>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e7a:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e7c:	ab11      	add	r3, sp, #68	; 0x44
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007e7e:	9006      	str	r0, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e80:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e84:	f7ff ff28 	bl	8007cd8 <parsep2>
 8007e88:	9b07      	ldr	r3, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007e8a:	2203      	movs	r2, #3
 8007e8c:	494b      	ldr	r1, [pc, #300]	; (8007fbc <returnpage+0x21c>)
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e8e:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007e90:	ab0c      	add	r3, sp, #48	; 0x30
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007e92:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007e94:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007e98:	f7ff ff1e 	bl	8007cd8 <parsep2>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	4602      	mov	r2, r0
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007ea0:	4947      	ldr	r1, [pc, #284]	; (8007fc0 <returnpage+0x220>)
 8007ea2:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007ea6:	431a      	orrs	r2, r3
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007ea8:	ab0d      	add	r3, sp, #52	; 0x34
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007eaa:	9207      	str	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007eac:	2201      	movs	r2, #1
 8007eae:	f7ff ff13 	bl	8007cd8 <parsep2>
 8007eb2:	9b07      	ldr	r3, [sp, #28]
 8007eb4:	4318      	orrs	r0, r3
 8007eb6:	9007      	str	r0, [sp, #28]
						if (!(res)) {		// a valid firmware string received
 8007eb8:	9b06      	ldr	r3, [sp, #24]
					if (p1 == 1) {		// reboot
 8007eba:	9b08      	ldr	r3, [sp, #32]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d049      	beq.n	8007f54 <returnpage+0x1b4>
					if (p1 == 2) {		// freeze the UDP streaming
 8007ec0:	9b08      	ldr	r3, [sp, #32]
 8007ec2:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 8007ec4:	4b3f      	ldr	r3, [pc, #252]	; (8007fc4 <returnpage+0x224>)
					if (p1 == 2) {		// freeze the UDP streaming
 8007ec6:	d03f      	beq.n	8007f48 <returnpage+0x1a8>
						globalfreeze = 0;
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 8007ecc:	4834      	ldr	r0, [pc, #208]	; (8007fa0 <returnpage+0x200>)
 8007ece:	f7f8 f9c1 	bl	8000254 <strlen>
 8007ed2:	2806      	cmp	r0, #6
 8007ed4:	d94f      	bls.n	8007f76 <returnpage+0x1d6>
					printf("Server -> Target UDP host: %s\n", udp_target);
 8007ed6:	4932      	ldr	r1, [pc, #200]	; (8007fa0 <returnpage+0x200>)
 8007ed8:	483b      	ldr	r0, [pc, #236]	; (8007fc8 <returnpage+0x228>)
 8007eda:	f01d fa5b 	bl	8025394 <iprintf>
					if (statuspkt.uid != sn) {
 8007ede:	4d3b      	ldr	r5, [pc, #236]	; (8007fcc <returnpage+0x22c>)
 8007ee0:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007ee4:	9a04      	ldr	r2, [sp, #16]
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d009      	beq.n	8007f00 <returnpage+0x160>
						statuspkt.uid = sn;
 8007eec:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007eee:	4838      	ldr	r0, [pc, #224]	; (8007fd0 <returnpage+0x230>)
						statuspkt.uid = sn;
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8007ef6:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 8007efa:	b289      	uxth	r1, r1
 8007efc:	f01d fa4a 	bl	8025394 <iprintf>
			if (!res) {		// build changed?
 8007f00:	9b06      	ldr	r3, [sp, #24]
 8007f02:	b1cb      	cbz	r3, 8007f38 <returnpage+0x198>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO)) {// the version advertised is different to this one running now
 8007f04:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007f08:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	f43f af5f 	beq.w	8007dd2 <returnpage+0x32>
 8007f14:	4a25      	ldr	r2, [pc, #148]	; (8007fac <returnpage+0x20c>)
 8007f16:	f242 732c 	movw	r3, #10028	; 0x272c
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	f43f af58 	beq.w	8007dd2 <returnpage+0x32>
				osDelay(1000);
 8007f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007f26:	f00d fa97 	bl	8015458 <osDelay>
				httploader(filename, host, crc1, crc2);	/// zzz  host ip ??
 8007f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f2c:	a911      	add	r1, sp, #68	; 0x44
 8007f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f30:	a816      	add	r0, sp, #88	; 0x58
 8007f32:	f7f9 ff85 	bl	8001e40 <httploader>
 8007f36:	e74c      	b.n	8007dd2 <returnpage+0x32>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8007f38:	4b1c      	ldr	r3, [pc, #112]	; (8007fac <returnpage+0x20c>)
 8007f3a:	f242 712c 	movw	r1, #10028	; 0x272c
 8007f3e:	4825      	ldr	r0, [pc, #148]	; (8007fd4 <returnpage+0x234>)
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	f01d fa27 	bl	8025394 <iprintf>
 8007f46:	e7dd      	b.n	8007f04 <returnpage+0x164>
						globalfreeze = 1;
 8007f48:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 8007f4a:	4823      	ldr	r0, [pc, #140]	; (8007fd8 <returnpage+0x238>)
						globalfreeze = 1;
 8007f4c:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 8007f4e:	f01d fabd 	bl	80254cc <puts>
 8007f52:	e7bb      	b.n	8007ecc <returnpage+0x12c>
						printf("Server -> commands a reboot...\n");
 8007f54:	4821      	ldr	r0, [pc, #132]	; (8007fdc <returnpage+0x23c>)
 8007f56:	f01d fab9 	bl	80254cc <puts>
						osDelay(500);
 8007f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f5e:	f00d fa7b 	bl	8015458 <osDelay>
						rebootme(6);
 8007f62:	2006      	movs	r0, #6
 8007f64:	f7fb f9d6 	bl	8003314 <rebootme>
 8007f68:	e7aa      	b.n	8007ec0 <returnpage+0x120>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	481c      	ldr	r0, [pc, #112]	; (8007fe0 <returnpage+0x240>)
 8007f6e:	4d17      	ldr	r5, [pc, #92]	; (8007fcc <returnpage+0x22c>)
 8007f70:	f01d fa10 	bl	8025394 <iprintf>
 8007f74:	e7c4      	b.n	8007f00 <returnpage+0x160>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 8007f76:	4d1b      	ldr	r5, [pc, #108]	; (8007fe4 <returnpage+0x244>)
 8007f78:	4c09      	ldr	r4, [pc, #36]	; (8007fa0 <returnpage+0x200>)
 8007f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f7e:	682b      	ldr	r3, [r5, #0]
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	e7a8      	b.n	8007ed6 <returnpage+0x136>
					printf("Wrong number of params from Server -> %d\n", nconv);
 8007f84:	9905      	ldr	r1, [sp, #20]
 8007f86:	4818      	ldr	r0, [pc, #96]	; (8007fe8 <returnpage+0x248>)
 8007f88:	4d10      	ldr	r5, [pc, #64]	; (8007fcc <returnpage+0x22c>)
 8007f8a:	f01d fa03 	bl	8025394 <iprintf>
					break;
 8007f8e:	e7b7      	b.n	8007f00 <returnpage+0x160>
 8007f90:	08029584 	.word	0x08029584
 8007f94:	20003108 	.word	0x20003108
 8007f98:	0802c554 	.word	0x0802c554
 8007f9c:	0802c570 	.word	0x0802c570
 8007fa0:	20003150 	.word	0x20003150
 8007fa4:	0802c57c 	.word	0x0802c57c
 8007fa8:	0802c580 	.word	0x0802c580
 8007fac:	20002d44 	.word	0x20002d44
 8007fb0:	0802c584 	.word	0x0802c584
 8007fb4:	0802c58c 	.word	0x0802c58c
 8007fb8:	0802c594 	.word	0x0802c594
 8007fbc:	0802c598 	.word	0x0802c598
 8007fc0:	0802c59c 	.word	0x0802c59c
 8007fc4:	200030e4 	.word	0x200030e4
 8007fc8:	0802c5e8 	.word	0x0802c5e8
 8007fcc:	20002f3c 	.word	0x20002f3c
 8007fd0:	0802c608 	.word	0x0802c608
 8007fd4:	0802c67c 	.word	0x0802c67c
 8007fd8:	0802c5c0 	.word	0x0802c5c0
 8007fdc:	0802c5a0 	.word	0x0802c5a0
 8007fe0:	0802c654 	.word	0x0802c654
 8007fe4:	0802a2c4 	.word	0x0802a2c4
 8007fe8:	0802c628 	.word	0x0802c628

08007fec <initialapisn>:

}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, j;

	j = 1;
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007ff0:	4c27      	ldr	r4, [pc, #156]	; (8008090 <initialapisn+0xa4>)
void initialapisn() {
 8007ff2:	b084      	sub	sp, #16

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007ff4:	4d27      	ldr	r5, [pc, #156]	; (8008094 <initialapisn+0xa8>)
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007ff6:	f504 6284 	add.w	r2, r4, #1056	; 0x420
 8007ffa:	4927      	ldr	r1, [pc, #156]	; (8008098 <initialapisn+0xac>)
 8007ffc:	4827      	ldr	r0, [pc, #156]	; (800809c <initialapisn+0xb0>)
 8007ffe:	ca1c      	ldmia	r2, {r2, r3, r4}
 8008000:	9400      	str	r4, [sp, #0]
 8008002:	f01d fbb1 	bl	8025768 <siprintf>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8008006:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 800800a:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 800800e:	b29b      	uxth	r3, r3
 8008010:	4293      	cmp	r3, r2
 8008012:	d132      	bne.n	800807a <initialapisn+0x8e>
	j = 1;
 8008014:	2701      	movs	r7, #1
	{
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8008016:	f8df a094 	ldr.w	sl, [pc, #148]	; 80080ac <initialapisn+0xc0>
	printf("getpage: %s\n", page);
 800801a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800809c <initialapisn+0xb0>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 800801e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80080b0 <initialapisn+0xc4>
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8008022:	4639      	mov	r1, r7
 8008024:	4650      	mov	r0, sl
 8008026:	f01d f9b5 	bl	8025394 <iprintf>
	printf("getpage: %s\n", page);
 800802a:	4649      	mov	r1, r9
 800802c:	481c      	ldr	r0, [pc, #112]	; (80080a0 <initialapisn+0xb4>)
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 800802e:	f241 3488 	movw	r4, #5000	; 0x1388
	printf("getpage: %s\n", page);
 8008032:	f01d f9af 	bl	8025394 <iprintf>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 8008036:	4641      	mov	r1, r8
 8008038:	481a      	ldr	r0, [pc, #104]	; (80080a4 <initialapisn+0xb8>)
		getpage(stmuid);		// get sn and targ
		for (i=0; i<5000; i++) {
			if (statuspkt.uid != 0xfeed)
 800803a:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n",SERVER_DESTINATION);
 800803e:	f01d f9a9 	bl	8025394 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8008042:	2300      	movs	r3, #0
 8008044:	4649      	mov	r1, r9
 8008046:	4640      	mov	r0, r8
 8008048:	461a      	mov	r2, r3
 800804a:	f7f9 fe8b 	bl	8001d64 <hc_open>
 800804e:	9003      	str	r0, [sp, #12]
		for (i=0; i<5000; i++) {
 8008050:	e003      	b.n	800805a <initialapisn+0x6e>
				break;
			osDelay(1);
 8008052:	f00d fa01 	bl	8015458 <osDelay>
		for (i=0; i<5000; i++) {
 8008056:	3c01      	subs	r4, #1
 8008058:	d005      	beq.n	8008066 <initialapisn+0x7a>
			if (statuspkt.uid != 0xfeed)
 800805a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 800805e:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8008060:	b29b      	uxth	r3, r3
 8008062:	42b3      	cmp	r3, r6
 8008064:	d0f5      	beq.n	8008052 <initialapisn+0x66>
		}
		j++;
 8008066:	3701      	adds	r7, #1
		if (j > 5) {
 8008068:	2f05      	cmp	r7, #5
 800806a:	dc09      	bgt.n	8008080 <initialapisn+0x94>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 800806c:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8008070:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8008074:	b29b      	uxth	r3, r3
 8008076:	4293      	cmp	r3, r2
 8008078:	d0d3      	beq.n	8008022 <initialapisn+0x36>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 800807a:	b004      	add	sp, #16
 800807c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8008080:	4809      	ldr	r0, [pc, #36]	; (80080a8 <initialapisn+0xbc>)
 8008082:	f01d fa23 	bl	80254cc <puts>
			rebootme(8);
 8008086:	2008      	movs	r0, #8
 8008088:	f7fb f944 	bl	8003314 <rebootme>
 800808c:	e7ee      	b.n	800806c <initialapisn+0x80>
 800808e:	bf00      	nop
 8008090:	1ff0f000 	.word	0x1ff0f000
 8008094:	20002f3c 	.word	0x20002f3c
 8008098:	0802c6d8 	.word	0x0802c6d8
 800809c:	20003110 	.word	0x20003110
 80080a0:	0802c6b0 	.word	0x0802c6b0
 80080a4:	0802c6c0 	.word	0x0802c6c0
 80080a8:	0802c720 	.word	0x0802c720
 80080ac:	0802c6f0 	.word	0x0802c6f0
 80080b0:	0802a2c4 	.word	0x0802a2c4

080080b4 <requestapisn>:

void requestapisn() {
 80080b4:	b530      	push	{r4, r5, lr}
	printf("getpage: %s\n", page);
 80080b6:	4d0b      	ldr	r5, [pc, #44]	; (80080e4 <requestapisn+0x30>)
void requestapisn() {
 80080b8:	b083      	sub	sp, #12
	printf("Control Server is %s\n",SERVER_DESTINATION);
 80080ba:	4c0b      	ldr	r4, [pc, #44]	; (80080e8 <requestapisn+0x34>)
	printf("updating S/N and UDP target using http\n");
 80080bc:	480b      	ldr	r0, [pc, #44]	; (80080ec <requestapisn+0x38>)
 80080be:	f01d fa05 	bl	80254cc <puts>
	printf("getpage: %s\n", page);
 80080c2:	4629      	mov	r1, r5
 80080c4:	480a      	ldr	r0, [pc, #40]	; (80080f0 <requestapisn+0x3c>)
 80080c6:	f01d f965 	bl	8025394 <iprintf>
	printf("Control Server is %s\n",SERVER_DESTINATION);
 80080ca:	4621      	mov	r1, r4
 80080cc:	4809      	ldr	r0, [pc, #36]	; (80080f4 <requestapisn+0x40>)
 80080ce:	f01d f961 	bl	8025394 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 80080d2:	2300      	movs	r3, #0
 80080d4:	4629      	mov	r1, r5
 80080d6:	4620      	mov	r0, r4
 80080d8:	461a      	mov	r2, r3
 80080da:	f7f9 fe43 	bl	8001d64 <hc_open>
 80080de:	9001      	str	r0, [sp, #4]
	getpage(stmuid);		// get sn and targ
}
 80080e0:	b003      	add	sp, #12
 80080e2:	bd30      	pop	{r4, r5, pc}
 80080e4:	20003110 	.word	0x20003110
 80080e8:	0802a2c4 	.word	0x0802a2c4
 80080ec:	0802c748 	.word	0x0802c748
 80080f0:	0802c6b0 	.word	0x0802c6b0
 80080f4:	0802c6c0 	.word	0x0802c6c0

080080f8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 ldr   sp, =_estack      /* set stack pointer */
 80080f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008130 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80080fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80080fe:	e003      	b.n	8008108 <LoopCopyDataInit>

08008100 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008100:	4b0c      	ldr	r3, [pc, #48]	; (8008134 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008102:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008104:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008106:	3104      	adds	r1, #4

08008108 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008108:	480b      	ldr	r0, [pc, #44]	; (8008138 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800810c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800810e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008110:	d3f6      	bcc.n	8008100 <CopyDataInit>
  ldr  r2, =_sbss
 8008112:	4a0b      	ldr	r2, [pc, #44]	; (8008140 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008114:	e002      	b.n	800811c <LoopFillZerobss>

08008116 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008116:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008118:	f842 3b04 	str.w	r3, [r2], #4

0800811c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800811c:	4b09      	ldr	r3, [pc, #36]	; (8008144 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800811e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008120:	d3f9      	bcc.n	8008116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008122:	f7ff f955 	bl	80073d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008126:	f01c f813 	bl	8024150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800812a:	f7fb ff7b 	bl	8004024 <main>
  bx  lr    
 800812e:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8008130:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8008134:	080464a4 	.word	0x080464a4
  ldr  r0, =_sdata
 8008138:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800813c:	200006c4 	.word	0x200006c4
  ldr  r2, =_sbss
 8008140:	200006c8 	.word	0x200006c8
  ldr  r3, = _ebss
 8008144:	2002fd84 	.word	0x2002fd84

08008148 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008148:	e7fe      	b.n	8008148 <CAN1_RX0_IRQHandler>
 800814a:	Address 0x000000000800814a is out of bounds.


0800814c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800814c:	4a07      	ldr	r2, [pc, #28]	; (800816c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800814e:	2003      	movs	r0, #3
{
 8008150:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008152:	6813      	ldr	r3, [r2, #0]
 8008154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008158:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800815a:	f000 fc4f 	bl	80089fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800815e:	2000      	movs	r0, #0
 8008160:	f7ff f802 	bl	8007168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008164:	f7fe f880 	bl	8006268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8008168:	2000      	movs	r0, #0
 800816a:	bd08      	pop	{r3, pc}
 800816c:	40023c00 	.word	0x40023c00

08008170 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8008170:	4a03      	ldr	r2, [pc, #12]	; (8008180 <HAL_IncTick+0x10>)
 8008172:	4b04      	ldr	r3, [pc, #16]	; (8008184 <HAL_IncTick+0x14>)
 8008174:	6811      	ldr	r1, [r2, #0]
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	440b      	add	r3, r1
 800817a:	6013      	str	r3, [r2, #0]
}
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	20003190 	.word	0x20003190
 8008184:	200002e0 	.word	0x200002e0

08008188 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008188:	4b01      	ldr	r3, [pc, #4]	; (8008190 <HAL_GetTick+0x8>)
 800818a:	6818      	ldr	r0, [r3, #0]
}
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20003190 	.word	0x20003190

08008194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008198:	f7ff fff6 	bl	8008188 <HAL_GetTick>
 800819c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800819e:	1c63      	adds	r3, r4, #1
 80081a0:	d002      	beq.n	80081a8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <HAL_Delay+0x20>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081a8:	f7ff ffee 	bl	8008188 <HAL_GetTick>
 80081ac:	1b43      	subs	r3, r0, r5
 80081ae:	42a3      	cmp	r3, r4
 80081b0:	d3fa      	bcc.n	80081a8 <HAL_Delay+0x14>
  {
  }
}
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	200002e0 	.word	0x200002e0

080081b8 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80081b8:	2800      	cmp	r0, #0
 80081ba:	f000 8144 	beq.w	8008446 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80081be:	6803      	ldr	r3, [r0, #0]
 80081c0:	49a7      	ldr	r1, [pc, #668]	; (8008460 <HAL_ADC_Init+0x2a8>)
 80081c2:	4aa8      	ldr	r2, [pc, #672]	; (8008464 <HAL_ADC_Init+0x2ac>)
 80081c4:	428b      	cmp	r3, r1
 80081c6:	bf18      	it	ne
 80081c8:	4293      	cmpne	r3, r2
{
 80081ca:	b570      	push	{r4, r5, r6, lr}
 80081cc:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80081ce:	d003      	beq.n	80081d8 <HAL_ADC_Init+0x20>
 80081d0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d177      	bne.n	80082c8 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80081d8:	6863      	ldr	r3, [r4, #4]
 80081da:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80081de:	d17c      	bne.n	80082da <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80081e6:	f040 8082 	bne.w	80082ee <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80081ea:	6923      	ldr	r3, [r4, #16]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d84e      	bhi.n	800828e <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80081f0:	69a3      	ldr	r3, [r4, #24]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d845      	bhi.n	8008282 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 80081f6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80081f8:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 80081fc:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8008200:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8008204:	bf18      	it	ne
 8008206:	2900      	cmpne	r1, #0
 8008208:	bf14      	ite	ne
 800820a:	2301      	movne	r3, #1
 800820c:	2300      	moveq	r3, #0
 800820e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8008212:	bf0c      	ite	eq
 8008214:	2300      	moveq	r3, #0
 8008216:	f003 0301 	andne.w	r3, r3, #1
 800821a:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 800821e:	bf0c      	ite	eq
 8008220:	2300      	moveq	r3, #0
 8008222:	f003 0301 	andne.w	r3, r3, #1
 8008226:	b123      	cbz	r3, 8008232 <HAL_ADC_Init+0x7a>
 8008228:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 800822c:	2a01      	cmp	r2, #1
 800822e:	f200 8111 	bhi.w	8008454 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8008232:	68e3      	ldr	r3, [r4, #12]
 8008234:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8008238:	d165      	bne.n	8008306 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800823a:	69e3      	ldr	r3, [r4, #28]
 800823c:	3b01      	subs	r3, #1
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d85b      	bhi.n	80082fa <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8008242:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8008246:	2b01      	cmp	r3, #1
 8008248:	d830      	bhi.n	80082ac <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 800824a:	6963      	ldr	r3, [r4, #20]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d835      	bhi.n	80082bc <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8008250:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d823      	bhi.n	80082a0 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008258:	4b83      	ldr	r3, [pc, #524]	; (8008468 <HAL_ADC_Init+0x2b0>)
 800825a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800825c:	429a      	cmp	r2, r3
 800825e:	d004      	beq.n	800826a <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8008260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008262:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8008266:	f040 80e8 	bne.w	800843a <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800826a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800826c:	2d00      	cmp	r5, #0
 800826e:	f000 80d4 	beq.w	800841a <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008272:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008274:	06db      	lsls	r3, r3, #27
 8008276:	d54c      	bpl.n	8008312 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008278:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 800827a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800827c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8008280:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008282:	f240 1151 	movw	r1, #337	; 0x151
 8008286:	4879      	ldr	r0, [pc, #484]	; (800846c <HAL_ADC_Init+0x2b4>)
 8008288:	f7fc fe94 	bl	8004fb4 <assert_failed>
 800828c:	e7b3      	b.n	80081f6 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800828e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8008292:	4876      	ldr	r0, [pc, #472]	; (800846c <HAL_ADC_Init+0x2b4>)
 8008294:	f7fc fe8e 	bl	8004fb4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8008298:	69a3      	ldr	r3, [r4, #24]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d9ab      	bls.n	80081f6 <HAL_ADC_Init+0x3e>
 800829e:	e7f0      	b.n	8008282 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80082a0:	f240 1157 	movw	r1, #343	; 0x157
 80082a4:	4871      	ldr	r0, [pc, #452]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082a6:	f7fc fe85 	bl	8004fb4 <assert_failed>
 80082aa:	e7d5      	b.n	8008258 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80082ac:	f240 1155 	movw	r1, #341	; 0x155
 80082b0:	486e      	ldr	r0, [pc, #440]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082b2:	f7fc fe7f 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d9c9      	bls.n	8008250 <HAL_ADC_Init+0x98>
 80082bc:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80082c0:	486a      	ldr	r0, [pc, #424]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082c2:	f7fc fe77 	bl	8004fb4 <assert_failed>
 80082c6:	e7c3      	b.n	8008250 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80082c8:	f240 114d 	movw	r1, #333	; 0x14d
 80082cc:	4867      	ldr	r0, [pc, #412]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082ce:	f7fc fe71 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80082d8:	d082      	beq.n	80081e0 <HAL_ADC_Init+0x28>
 80082da:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80082de:	4863      	ldr	r0, [pc, #396]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082e0:	f7fc fe68 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80082e4:	68a3      	ldr	r3, [r4, #8]
 80082e6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 80082ea:	f43f af7e 	beq.w	80081ea <HAL_ADC_Init+0x32>
 80082ee:	f240 114f 	movw	r1, #335	; 0x14f
 80082f2:	485e      	ldr	r0, [pc, #376]	; (800846c <HAL_ADC_Init+0x2b4>)
 80082f4:	f7fc fe5e 	bl	8004fb4 <assert_failed>
 80082f8:	e777      	b.n	80081ea <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80082fa:	f44f 71aa 	mov.w	r1, #340	; 0x154
 80082fe:	485b      	ldr	r0, [pc, #364]	; (800846c <HAL_ADC_Init+0x2b4>)
 8008300:	f7fc fe58 	bl	8004fb4 <assert_failed>
 8008304:	e79d      	b.n	8008242 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8008306:	f240 1153 	movw	r1, #339	; 0x153
 800830a:	4858      	ldr	r0, [pc, #352]	; (800846c <HAL_ADC_Init+0x2b4>)
 800830c:	f7fc fe52 	bl	8004fb4 <assert_failed>
 8008310:	e793      	b.n	800823a <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8008312:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008314:	4b56      	ldr	r3, [pc, #344]	; (8008470 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008316:	4a57      	ldr	r2, [pc, #348]	; (8008474 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8008318:	400b      	ands	r3, r1
 800831a:	f043 0302 	orr.w	r3, r3, #2
 800831e:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008320:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008322:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008324:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8008328:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800832a:	6851      	ldr	r1, [r2, #4]
 800832c:	6860      	ldr	r0, [r4, #4]
 800832e:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008330:	484d      	ldr	r0, [pc, #308]	; (8008468 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008332:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008334:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008336:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008338:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800833c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008344:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008346:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800834e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008350:	6859      	ldr	r1, [r3, #4]
 8008352:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008354:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008356:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008358:	6899      	ldr	r1, [r3, #8]
 800835a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800835e:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008360:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008362:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008364:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008366:	ea42 0205 	orr.w	r2, r2, r5
 800836a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800836c:	d05c      	beq.n	8008428 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800836e:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008370:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008372:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8008376:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	4311      	orrs	r1, r2
 800837c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800837e:	6899      	ldr	r1, [r3, #8]
 8008380:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8008384:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	432a      	orrs	r2, r5
 800838a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800838c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800838e:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008390:	f021 0102 	bic.w	r1, r1, #2
 8008394:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 800839c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800839e:	f894 2020 	ldrb.w	r2, [r4, #32]
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	d051      	beq.n	800844a <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80083a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80083a8:	3a01      	subs	r2, #1
 80083aa:	2a07      	cmp	r2, #7
 80083ac:	d864      	bhi.n	8008478 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80083ae:	6859      	ldr	r1, [r3, #4]
 80083b0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80083b4:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80083b6:	6859      	ldr	r1, [r3, #4]
 80083b8:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80083bc:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 80083c4:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 80083c8:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083ca:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083d0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083d2:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80083d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083d8:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083dc:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80083de:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80083e0:	6899      	ldr	r1, [r3, #8]
 80083e2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80083e6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80083e8:	6899      	ldr	r1, [r3, #8]
 80083ea:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80083ee:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80083f2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80083f4:	6899      	ldr	r1, [r3, #8]
 80083f6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80083fa:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8008402:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8008404:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8008406:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	f043 0301 	orr.w	r3, r3, #1
 8008410:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8008412:	2300      	movs	r3, #0
 8008414:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008418:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 800841a:	4620      	mov	r0, r4
 800841c:	f7fd ff5c 	bl	80062d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8008420:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8008422:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8008426:	e724      	b.n	8008272 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008428:	689a      	ldr	r2, [r3, #8]
 800842a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800842e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008430:	689a      	ldr	r2, [r3, #8]
 8008432:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	e7a8      	b.n	800838c <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800843a:	f240 115b 	movw	r1, #347	; 0x15b
 800843e:	480b      	ldr	r0, [pc, #44]	; (800846c <HAL_ADC_Init+0x2b4>)
 8008440:	f7fc fdb8 	bl	8004fb4 <assert_failed>
 8008444:	e711      	b.n	800826a <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8008446:	2001      	movs	r0, #1
}
 8008448:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800844a:	685a      	ldr	r2, [r3, #4]
 800844c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008450:	605a      	str	r2, [r3, #4]
 8008452:	e7b8      	b.n	80083c6 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8008454:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8008458:	4804      	ldr	r0, [pc, #16]	; (800846c <HAL_ADC_Init+0x2b4>)
 800845a:	f7fc fdab 	bl	8004fb4 <assert_failed>
 800845e:	e6e8      	b.n	8008232 <HAL_ADC_Init+0x7a>
 8008460:	40012000 	.word	0x40012000
 8008464:	40012100 	.word	0x40012100
 8008468:	0f000001 	.word	0x0f000001
 800846c:	0802c770 	.word	0x0802c770
 8008470:	ffffeefd 	.word	0xffffeefd
 8008474:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8008478:	f240 71ac 	movw	r1, #1964	; 0x7ac
 800847c:	4803      	ldr	r0, [pc, #12]	; (800848c <HAL_ADC_Init+0x2d4>)
 800847e:	f7fc fd99 	bl	8004fb4 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008482:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008484:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008486:	3a01      	subs	r2, #1
 8008488:	e791      	b.n	80083ae <HAL_ADC_Init+0x1f6>
 800848a:	bf00      	nop
 800848c:	0802c770 	.word	0x0802c770

08008490 <HAL_ADC_Start>:
{
 8008490:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8008492:	2300      	movs	r3, #0
{
 8008494:	b082      	sub	sp, #8
 8008496:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8008498:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800849a:	6983      	ldr	r3, [r0, #24]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d904      	bls.n	80084aa <HAL_ADC_Start+0x1a>
 80084a0:	f240 21df 	movw	r1, #735	; 0x2df
 80084a4:	4848      	ldr	r0, [pc, #288]	; (80085c8 <HAL_ADC_Start+0x138>)
 80084a6:	f7fc fd85 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 80084aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80084ac:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 80084b0:	d174      	bne.n	800859c <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 80084b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d079      	beq.n	80085ae <HAL_ADC_Start+0x11e>
 80084ba:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80084bc:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 80084be:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80084c2:	6893      	ldr	r3, [r2, #8]
 80084c4:	07d8      	lsls	r0, r3, #31
 80084c6:	d414      	bmi.n	80084f2 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084c8:	4b40      	ldr	r3, [pc, #256]	; (80085cc <HAL_ADC_Start+0x13c>)
 80084ca:	4841      	ldr	r0, [pc, #260]	; (80085d0 <HAL_ADC_Start+0x140>)
 80084cc:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 80084ce:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084d0:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80084d4:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084d8:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80084da:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80084dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80084e0:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	b12b      	cbz	r3, 80084f2 <HAL_ADC_Start+0x62>
      counter--;
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f9      	bne.n	80084e6 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80084f2:	6890      	ldr	r0, [r2, #8]
 80084f4:	f010 0001 	ands.w	r0, r0, #1
 80084f8:	d02c      	beq.n	8008554 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80084fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80084fc:	4b35      	ldr	r3, [pc, #212]	; (80085d4 <HAL_ADC_Start+0x144>)
 80084fe:	400b      	ands	r3, r1
 8008500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008504:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008506:	6853      	ldr	r3, [r2, #4]
 8008508:	0559      	lsls	r1, r3, #21
 800850a:	d505      	bpl.n	8008518 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800850c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800850e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008512:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008516:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008518:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800851a:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800851e:	d02f      	beq.n	8008580 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008520:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008522:	f023 0306 	bic.w	r3, r3, #6
 8008526:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008528:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 800852c:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800852e:	4b2a      	ldr	r3, [pc, #168]	; (80085d8 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8008530:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008534:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008536:	6858      	ldr	r0, [r3, #4]
 8008538:	f010 001f 	ands.w	r0, r0, #31
 800853c:	d114      	bne.n	8008568 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800853e:	6893      	ldr	r3, [r2, #8]
 8008540:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8008544:	d10e      	bne.n	8008564 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008546:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8008548:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800854a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800854e:	6091      	str	r1, [r2, #8]
}
 8008550:	b002      	add	sp, #8
 8008552:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008556:	f043 0310 	orr.w	r3, r3, #16
 800855a:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800855c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800855e:	f043 0301 	orr.w	r3, r3, #1
 8008562:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008564:	b002      	add	sp, #8
 8008566:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008568:	481c      	ldr	r0, [pc, #112]	; (80085dc <HAL_ADC_Start+0x14c>)
 800856a:	4282      	cmp	r2, r0
 800856c:	d00a      	beq.n	8008584 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800856e:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008570:	06db      	lsls	r3, r3, #27
 8008572:	d402      	bmi.n	800857a <HAL_ADC_Start+0xea>
 8008574:	4c1a      	ldr	r4, [pc, #104]	; (80085e0 <HAL_ADC_Start+0x150>)
 8008576:	42a2      	cmp	r2, r4
 8008578:	d01c      	beq.n	80085b4 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800857a:	2000      	movs	r0, #0
}
 800857c:	b002      	add	sp, #8
 800857e:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8008580:	6463      	str	r3, [r4, #68]	; 0x44
 8008582:	e7d1      	b.n	8008528 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008584:	6893      	ldr	r3, [r2, #8]
 8008586:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800858a:	d103      	bne.n	8008594 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800858c:	6893      	ldr	r3, [r2, #8]
 800858e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008592:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008594:	4b10      	ldr	r3, [pc, #64]	; (80085d8 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8008596:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008598:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800859a:	e7e3      	b.n	8008564 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800859c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 80085a0:	4809      	ldr	r0, [pc, #36]	; (80085c8 <HAL_ADC_Start+0x138>)
 80085a2:	f7fc fd07 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hadc);
 80085a6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d185      	bne.n	80084ba <HAL_ADC_Start+0x2a>
 80085ae:	2002      	movs	r0, #2
}
 80085b0:	b002      	add	sp, #8
 80085b2:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085b4:	68a0      	ldr	r0, [r4, #8]
 80085b6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80085ba:	d1de      	bne.n	800857a <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085c2:	60a3      	str	r3, [r4, #8]
 80085c4:	e7ce      	b.n	8008564 <HAL_ADC_Start+0xd4>
 80085c6:	bf00      	nop
 80085c8:	0802c770 	.word	0x0802c770
 80085cc:	20000284 	.word	0x20000284
 80085d0:	431bde83 	.word	0x431bde83
 80085d4:	fffff8fe 	.word	0xfffff8fe
 80085d8:	40012300 	.word	0x40012300
 80085dc:	40012000 	.word	0x40012000
 80085e0:	40012200 	.word	0x40012200

080085e4 <HAL_ADC_ConvCpltCallback>:
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop

080085e8 <HAL_ADC_LevelOutOfWindowCallback>:
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop

080085ec <HAL_ADC_ErrorCallback>:
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80085f0:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80085f2:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80085f4:	2a01      	cmp	r2, #1
{
 80085f6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80085f8:	681d      	ldr	r5, [r3, #0]
{
 80085fa:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80085fc:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80085fe:	d904      	bls.n	800860a <HAL_ADC_IRQHandler+0x1a>
 8008600:	f240 41c1 	movw	r1, #1217	; 0x4c1
 8008604:	4851      	ldr	r0, [pc, #324]	; (800874c <HAL_ADC_IRQHandler+0x15c>)
 8008606:	f7fc fcd5 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800860a:	69e3      	ldr	r3, [r4, #28]
 800860c:	3b01      	subs	r3, #1
 800860e:	2b0f      	cmp	r3, #15
 8008610:	f200 8086 	bhi.w	8008720 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008614:	6963      	ldr	r3, [r4, #20]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d87c      	bhi.n	8008714 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 800861a:	07ab      	lsls	r3, r5, #30
 800861c:	d52c      	bpl.n	8008678 <HAL_ADC_IRQHandler+0x88>
 800861e:	06b0      	lsls	r0, r6, #26
 8008620:	d52a      	bpl.n	8008678 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008624:	06d9      	lsls	r1, r3, #27
 8008626:	d403      	bmi.n	8008630 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8008628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800862a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800862e:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008630:	6823      	ldr	r3, [r4, #0]
 8008632:	689a      	ldr	r2, [r3, #8]
 8008634:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008638:	d117      	bne.n	800866a <HAL_ADC_IRQHandler+0x7a>
 800863a:	69a2      	ldr	r2, [r4, #24]
 800863c:	b9aa      	cbnz	r2, 800866a <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008640:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8008644:	d002      	beq.n	800864c <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008646:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008648:	0552      	lsls	r2, r2, #21
 800864a:	d40e      	bmi.n	800866a <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800864c:	685a      	ldr	r2, [r3, #4]
 800864e:	f022 0220 	bic.w	r2, r2, #32
 8008652:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008654:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008656:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800865a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800865c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800865e:	04d8      	lsls	r0, r3, #19
 8008660:	d403      	bmi.n	800866a <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff ffba 	bl	80085e4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	f06f 0212 	mvn.w	r2, #18
 8008676:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008678:	0769      	lsls	r1, r5, #29
 800867a:	d530      	bpl.n	80086de <HAL_ADC_IRQHandler+0xee>
 800867c:	0632      	lsls	r2, r6, #24
 800867e:	d52e      	bpl.n	80086de <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008682:	06db      	lsls	r3, r3, #27
 8008684:	d403      	bmi.n	800868e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800868c:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	689a      	ldr	r2, [r3, #8]
 8008692:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008696:	d11b      	bne.n	80086d0 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800869a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800869e:	d151      	bne.n	8008744 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80086a0:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80086a2:	0551      	lsls	r1, r2, #21
 80086a4:	d414      	bmi.n	80086d0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80086a6:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80086a8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80086ac:	d110      	bne.n	80086d0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80086ae:	69a2      	ldr	r2, [r4, #24]
 80086b0:	b972      	cbnz	r2, 80086d0 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80086b2:	685a      	ldr	r2, [r3, #4]
 80086b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086b8:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80086ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086c0:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80086c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086c4:	05da      	lsls	r2, r3, #23
 80086c6:	d403      	bmi.n	80086d0 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80086c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80086d0:	4620      	mov	r0, r4
 80086d2:	f000 f92f 	bl	8008934 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	f06f 020c 	mvn.w	r2, #12
 80086dc:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80086de:	0673      	lsls	r3, r6, #25
 80086e0:	d505      	bpl.n	80086ee <HAL_ADC_IRQHandler+0xfe>
 80086e2:	07e8      	lsls	r0, r5, #31
 80086e4:	d503      	bpl.n	80086ee <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	07d9      	lsls	r1, r3, #31
 80086ec:	d41e      	bmi.n	800872c <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80086ee:	06aa      	lsls	r2, r5, #26
 80086f0:	d501      	bpl.n	80086f6 <HAL_ADC_IRQHandler+0x106>
 80086f2:	0173      	lsls	r3, r6, #5
 80086f4:	d400      	bmi.n	80086f8 <HAL_ADC_IRQHandler+0x108>
}
 80086f6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80086f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80086fa:	f06f 0520 	mvn.w	r5, #32
 80086fe:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 8008700:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008702:	f043 0302 	orr.w	r3, r3, #2
 8008706:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008708:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 800870a:	f7ff ff6f 	bl	80085ec <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	601d      	str	r5, [r3, #0]
}
 8008712:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8008714:	f240 41c3 	movw	r1, #1219	; 0x4c3
 8008718:	480c      	ldr	r0, [pc, #48]	; (800874c <HAL_ADC_IRQHandler+0x15c>)
 800871a:	f7fc fc4b 	bl	8004fb4 <assert_failed>
 800871e:	e77c      	b.n	800861a <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8008720:	f240 41c2 	movw	r1, #1218	; 0x4c2
 8008724:	4809      	ldr	r0, [pc, #36]	; (800874c <HAL_ADC_IRQHandler+0x15c>)
 8008726:	f7fc fc45 	bl	8004fb4 <assert_failed>
 800872a:	e773      	b.n	8008614 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800872c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800872e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008734:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008736:	f7ff ff57 	bl	80085e8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	f06f 0201 	mvn.w	r2, #1
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	e7d4      	b.n	80086ee <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008744:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008746:	0550      	lsls	r0, r2, #21
 8008748:	d4c2      	bmi.n	80086d0 <HAL_ADC_IRQHandler+0xe0>
 800874a:	e7a9      	b.n	80086a0 <HAL_ADC_IRQHandler+0xb0>
 800874c:	0802c770 	.word	0x0802c770

08008750 <HAL_ADC_ConfigChannel>:
{
 8008750:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8008752:	2300      	movs	r3, #0
{
 8008754:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008756:	4a71      	ldr	r2, [pc, #452]	; (800891c <HAL_ADC_ConfigChannel+0x1cc>)
{
 8008758:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 800875a:	9301      	str	r3, [sp, #4]
{
 800875c:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800875e:	680b      	ldr	r3, [r1, #0]
 8008760:	4293      	cmp	r3, r2
 8008762:	bf18      	it	ne
 8008764:	2b12      	cmpne	r3, #18
 8008766:	d902      	bls.n	800876e <HAL_ADC_ConfigChannel+0x1e>
 8008768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800876c:	d142      	bne.n	80087f4 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	3b01      	subs	r3, #1
 8008772:	2b0f      	cmp	r3, #15
 8008774:	d847      	bhi.n	8008806 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008776:	68a3      	ldr	r3, [r4, #8]
 8008778:	2b07      	cmp	r3, #7
 800877a:	d84c      	bhi.n	8008816 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800877c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d051      	beq.n	8008828 <HAL_ADC_ConfigChannel+0xd8>
 8008784:	2301      	movs	r3, #1
 8008786:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800878a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800878c:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800878e:	2809      	cmp	r0, #9
 8008790:	d94d      	bls.n	800882e <HAL_ADC_ConfigChannel+0xde>
 8008792:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008796:	d04a      	beq.n	800882e <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008798:	b281      	uxth	r1, r0
 800879a:	f04f 0c07 	mov.w	ip, #7
 800879e:	68de      	ldr	r6, [r3, #12]
 80087a0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087a4:	4f5d      	ldr	r7, [pc, #372]	; (800891c <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087a6:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087a8:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80087aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80087ae:	ea26 060c 	bic.w	r6, r6, ip
 80087b2:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80087b4:	f000 8083 	beq.w	80088be <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80087b8:	68a6      	ldr	r6, [r4, #8]
 80087ba:	4096      	lsls	r6, r2
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	4316      	orrs	r6, r2
 80087c0:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80087c2:	6862      	ldr	r2, [r4, #4]
 80087c4:	2a06      	cmp	r2, #6
 80087c6:	d846      	bhi.n	8008856 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80087c8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80087cc:	241f      	movs	r4, #31
 80087ce:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80087d0:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80087d2:	4094      	lsls	r4, r2
 80087d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087d6:	ea22 0204 	bic.w	r2, r2, r4
 80087da:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80087dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087de:	4311      	orrs	r1, r2
 80087e0:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80087e2:	4a4f      	ldr	r2, [pc, #316]	; (8008920 <HAL_ADC_ConfigChannel+0x1d0>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d048      	beq.n	800887a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 80087e8:	2300      	movs	r3, #0
  return HAL_OK;
 80087ea:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80087ec:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80087f0:	b003      	add	sp, #12
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80087f4:	f240 618b 	movw	r1, #1675	; 0x68b
 80087f8:	484a      	ldr	r0, [pc, #296]	; (8008924 <HAL_ADC_ConfigChannel+0x1d4>)
 80087fa:	f7fc fbdb 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80087fe:	6863      	ldr	r3, [r4, #4]
 8008800:	3b01      	subs	r3, #1
 8008802:	2b0f      	cmp	r3, #15
 8008804:	d9b7      	bls.n	8008776 <HAL_ADC_ConfigChannel+0x26>
 8008806:	f240 618c 	movw	r1, #1676	; 0x68c
 800880a:	4846      	ldr	r0, [pc, #280]	; (8008924 <HAL_ADC_ConfigChannel+0x1d4>)
 800880c:	f7fc fbd2 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	2b07      	cmp	r3, #7
 8008814:	d9b2      	bls.n	800877c <HAL_ADC_ConfigChannel+0x2c>
 8008816:	f240 618d 	movw	r1, #1677	; 0x68d
 800881a:	4842      	ldr	r0, [pc, #264]	; (8008924 <HAL_ADC_ConfigChannel+0x1d4>)
 800881c:	f7fc fbca 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hadc);
 8008820:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008824:	2b01      	cmp	r3, #1
 8008826:	d1ad      	bne.n	8008784 <HAL_ADC_ConfigChannel+0x34>
 8008828:	2002      	movs	r0, #2
}
 800882a:	b003      	add	sp, #12
 800882c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800882e:	b281      	uxth	r1, r0
 8008830:	f04f 0c07 	mov.w	ip, #7
 8008834:	691e      	ldr	r6, [r3, #16]
 8008836:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800883a:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800883c:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008840:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008844:	ea26 060c 	bic.w	r6, r6, ip
 8008848:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800884a:	691e      	ldr	r6, [r3, #16]
 800884c:	4332      	orrs	r2, r6
 800884e:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8008850:	6862      	ldr	r2, [r4, #4]
 8008852:	2a06      	cmp	r2, #6
 8008854:	d9b8      	bls.n	80087c8 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8008856:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008858:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 800885c:	d81c      	bhi.n	8008898 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800885e:	3a23      	subs	r2, #35	; 0x23
 8008860:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008862:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008864:	4094      	lsls	r4, r2
 8008866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008868:	ea22 0204 	bic.w	r2, r2, r4
 800886c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800886e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008870:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008872:	4a2b      	ldr	r2, [pc, #172]	; (8008920 <HAL_ADC_ConfigChannel+0x1d0>)
 8008874:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008876:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008878:	d1b6      	bne.n	80087e8 <HAL_ADC_ConfigChannel+0x98>
 800887a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800887e:	d017      	beq.n	80088b0 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008880:	2812      	cmp	r0, #18
 8008882:	d123      	bne.n	80088cc <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008884:	4b28      	ldr	r3, [pc, #160]	; (8008928 <HAL_ADC_ConfigChannel+0x1d8>)
 8008886:	685a      	ldr	r2, [r3, #4]
 8008888:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800888c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008894:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008896:	e7a7      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008898:	3a41      	subs	r2, #65	; 0x41
 800889a:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800889c:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800889e:	4094      	lsls	r4, r2
 80088a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a2:	ea22 0204 	bic.w	r2, r2, r4
 80088a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80088a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088aa:	4311      	orrs	r1, r2
 80088ac:	62d9      	str	r1, [r3, #44]	; 0x2c
 80088ae:	e798      	b.n	80087e2 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80088b0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80088b4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80088b8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088bc:	e794      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80088be:	68a1      	ldr	r1, [r4, #8]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80088c6:	2112      	movs	r1, #18
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e77a      	b.n	80087c2 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80088cc:	4b13      	ldr	r3, [pc, #76]	; (800891c <HAL_ADC_ConfigChannel+0x1cc>)
 80088ce:	4298      	cmp	r0, r3
 80088d0:	d001      	beq.n	80088d6 <HAL_ADC_ConfigChannel+0x186>
 80088d2:	2811      	cmp	r0, #17
 80088d4:	d188      	bne.n	80087e8 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088d8:	4910      	ldr	r1, [pc, #64]	; (800891c <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 80088da:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088dc:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 80088de:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80088e2:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80088ea:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088ec:	f47f af7c 	bne.w	80087e8 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80088f0:	4b0e      	ldr	r3, [pc, #56]	; (800892c <HAL_ADC_ConfigChannel+0x1dc>)
 80088f2:	4a0f      	ldr	r2, [pc, #60]	; (8008930 <HAL_ADC_ConfigChannel+0x1e0>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	fba2 2303 	umull	r2, r3, r2, r3
 80088fa:	0c9b      	lsrs	r3, r3, #18
 80088fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	f43f af6e 	beq.w	80087e8 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 800890c:	9b01      	ldr	r3, [sp, #4]
 800890e:	3b01      	subs	r3, #1
 8008910:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8008912:	9b01      	ldr	r3, [sp, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1f9      	bne.n	800890c <HAL_ADC_ConfigChannel+0x1bc>
 8008918:	e766      	b.n	80087e8 <HAL_ADC_ConfigChannel+0x98>
 800891a:	bf00      	nop
 800891c:	10000012 	.word	0x10000012
 8008920:	40012000 	.word	0x40012000
 8008924:	0802c770 	.word	0x0802c770
 8008928:	40012300 	.word	0x40012300
 800892c:	20000284 	.word	0x20000284
 8008930:	431bde83 	.word	0x431bde83

08008934 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008934:	4770      	bx	lr
 8008936:	bf00      	nop

08008938 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008938:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 800893a:	680b      	ldr	r3, [r1, #0]
{
 800893c:	460c      	mov	r4, r1
 800893e:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008940:	2b19      	cmp	r3, #25
 8008942:	d93e      	bls.n	80089c2 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8008944:	f240 31af 	movw	r1, #943	; 0x3af
 8008948:	4829      	ldr	r0, [pc, #164]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800894a:	f7fc fb33 	bl	8004fb4 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800894e:	6863      	ldr	r3, [r4, #4]
 8008950:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008954:	d13e      	bne.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8008956:	68a3      	ldr	r3, [r4, #8]
 8008958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008960:	bf18      	it	ne
 8008962:	2b00      	cmpne	r3, #0
 8008964:	bf14      	ite	ne
 8008966:	2201      	movne	r2, #1
 8008968:	2200      	moveq	r2, #0
 800896a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800896e:	bf0c      	ite	eq
 8008970:	2200      	moveq	r2, #0
 8008972:	f002 0201 	andne.w	r2, r2, #1
 8008976:	b112      	cbz	r2, 800897e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008978:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800897c:	d132      	bne.n	80089e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800897e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008982:	2b01      	cmp	r3, #1
 8008984:	d02c      	beq.n	80089e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8008986:	4b1b      	ldr	r3, [pc, #108]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	f022 021f 	bic.w	r2, r2, #31
 800898e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	6821      	ldr	r1, [r4, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800899e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	6861      	ldr	r1, [r4, #4]
 80089a4:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089a6:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 80089a8:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80089b0:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 80089b2:	68a0      	ldr	r0, [r4, #8]
 80089b4:	685a      	ldr	r2, [r3, #4]
 80089b6:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 80089b8:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 80089ba:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80089bc:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 80089c0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 80089c2:	4a0d      	ldr	r2, [pc, #52]	; (80089f8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80089c4:	fa22 f303 	lsr.w	r3, r2, r3
 80089c8:	07db      	lsls	r3, r3, #31
 80089ca:	d5bb      	bpl.n	8008944 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 80089cc:	6863      	ldr	r3, [r4, #4]
 80089ce:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80089d2:	d0c0      	beq.n	8008956 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80089d4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80089d8:	4805      	ldr	r0, [pc, #20]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80089da:	f7fc faeb 	bl	8004fb4 <assert_failed>
 80089de:	e7ba      	b.n	8008956 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 80089e0:	2002      	movs	r0, #2
}
 80089e2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80089e4:	f240 31b1 	movw	r1, #945	; 0x3b1
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80089ea:	f7fc fae3 	bl	8004fb4 <assert_failed>
 80089ee:	e7c6      	b.n	800897e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80089f0:	0802c7a8 	.word	0x0802c7a8
 80089f4:	40012300 	.word	0x40012300
 80089f8:	02e602e7 	.word	0x02e602e7

080089fc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80089fc:	1ec3      	subs	r3, r0, #3
 80089fe:	2b04      	cmp	r3, #4
{
 8008a00:	b510      	push	{r4, lr}
 8008a02:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008a04:	d80c      	bhi.n	8008a20 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a06:	4909      	ldr	r1, [pc, #36]	; (8008a2c <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a08:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a0a:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8008a0e:	4b08      	ldr	r3, [pc, #32]	; (8008a30 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a10:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a12:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a16:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a18:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 8008a1a:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 8008a1c:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008a1e:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8008a20:	2191      	movs	r1, #145	; 0x91
 8008a22:	4804      	ldr	r0, [pc, #16]	; (8008a34 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8008a24:	f7fc fac6 	bl	8004fb4 <assert_failed>
 8008a28:	e7ed      	b.n	8008a06 <HAL_NVIC_SetPriorityGrouping+0xa>
 8008a2a:	bf00      	nop
 8008a2c:	e000ed00 	.word	0xe000ed00
 8008a30:	05fa0000 	.word	0x05fa0000
 8008a34:	0802c7e4 	.word	0x0802c7e4

08008a38 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008a38:	2a0f      	cmp	r2, #15
{ 
 8008a3a:	b570      	push	{r4, r5, r6, lr}
 8008a3c:	4616      	mov	r6, r2
 8008a3e:	4605      	mov	r5, r0
 8008a40:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008a42:	d836      	bhi.n	8008ab2 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008a44:	2c0f      	cmp	r4, #15
 8008a46:	d82f      	bhi.n	8008aa8 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a48:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <HAL_NVIC_SetPriority+0x84>)
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a50:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a54:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008a56:	2804      	cmp	r0, #4
 8008a58:	bf28      	it	cs
 8008a5a:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a5c:	2a06      	cmp	r2, #6
 8008a5e:	d918      	bls.n	8008a92 <HAL_NVIC_SetPriority+0x5a>
 8008a60:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008a62:	f04f 32ff 	mov.w	r2, #4294967295
 8008a66:	409a      	lsls	r2, r3
 8008a68:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a6c:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008a70:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008a72:	fa01 f100 	lsl.w	r1, r1, r0
 8008a76:	ea24 0401 	bic.w	r4, r4, r1
 8008a7a:	fa04 f403 	lsl.w	r4, r4, r3
 8008a7e:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8008a82:	db09      	blt.n	8008a98 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a84:	0124      	lsls	r4, r4, #4
 8008a86:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <HAL_NVIC_SetPriority+0x88>)
 8008a88:	b2e4      	uxtb	r4, r4
 8008a8a:	442b      	add	r3, r5
 8008a8c:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008a90:	bd70      	pop	{r4, r5, r6, pc}
 8008a92:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008a94:	4633      	mov	r3, r6
 8008a96:	e7e9      	b.n	8008a6c <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a98:	f005 050f 	and.w	r5, r5, #15
 8008a9c:	0124      	lsls	r4, r4, #4
 8008a9e:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <HAL_NVIC_SetPriority+0x8c>)
 8008aa0:	b2e4      	uxtb	r4, r4
 8008aa2:	442b      	add	r3, r5
 8008aa4:	761c      	strb	r4, [r3, #24]
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008aa8:	21aa      	movs	r1, #170	; 0xaa
 8008aaa:	4807      	ldr	r0, [pc, #28]	; (8008ac8 <HAL_NVIC_SetPriority+0x90>)
 8008aac:	f7fc fa82 	bl	8004fb4 <assert_failed>
 8008ab0:	e7ca      	b.n	8008a48 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008ab2:	21a9      	movs	r1, #169	; 0xa9
 8008ab4:	4804      	ldr	r0, [pc, #16]	; (8008ac8 <HAL_NVIC_SetPriority+0x90>)
 8008ab6:	f7fc fa7d 	bl	8004fb4 <assert_failed>
 8008aba:	e7c3      	b.n	8008a44 <HAL_NVIC_SetPriority+0xc>
 8008abc:	e000ed00 	.word	0xe000ed00
 8008ac0:	e000e100 	.word	0xe000e100
 8008ac4:	e000ecfc 	.word	0xe000ecfc
 8008ac8:	0802c7e4 	.word	0x0802c7e4

08008acc <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008acc:	2800      	cmp	r0, #0
 8008ace:	db08      	blt.n	8008ae2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008ad0:	f000 011f 	and.w	r1, r0, #31
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	0940      	lsrs	r0, r0, #5
 8008ad8:	4a04      	ldr	r2, [pc, #16]	; (8008aec <HAL_NVIC_EnableIRQ+0x20>)
 8008ada:	408b      	lsls	r3, r1
 8008adc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8008ae0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008ae2:	21bd      	movs	r1, #189	; 0xbd
 8008ae4:	4802      	ldr	r0, [pc, #8]	; (8008af0 <HAL_NVIC_EnableIRQ+0x24>)
 8008ae6:	f7fc ba65 	b.w	8004fb4 <assert_failed>
 8008aea:	bf00      	nop
 8008aec:	e000e100 	.word	0xe000e100
 8008af0:	0802c7e4 	.word	0x0802c7e4

08008af4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008af4:	2800      	cmp	r0, #0
 8008af6:	db0e      	blt.n	8008b16 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008af8:	0943      	lsrs	r3, r0, #5
 8008afa:	2201      	movs	r2, #1
 8008afc:	f000 001f 	and.w	r0, r0, #31
 8008b00:	4907      	ldr	r1, [pc, #28]	; (8008b20 <HAL_NVIC_DisableIRQ+0x2c>)
 8008b02:	3320      	adds	r3, #32
 8008b04:	fa02 f000 	lsl.w	r0, r2, r0
 8008b08:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8008b0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b10:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008b14:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8008b16:	21cd      	movs	r1, #205	; 0xcd
 8008b18:	4802      	ldr	r0, [pc, #8]	; (8008b24 <HAL_NVIC_DisableIRQ+0x30>)
 8008b1a:	f7fc ba4b 	b.w	8004fb4 <assert_failed>
 8008b1e:	bf00      	nop
 8008b20:	e000e100 	.word	0xe000e100
 8008b24:	0802c7e4 	.word	0x0802c7e4

08008b28 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	d075      	beq.n	8008c18 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008b2c:	4b3b      	ldr	r3, [pc, #236]	; (8008c1c <HAL_CRC_Init+0xf4>)
 8008b2e:	6802      	ldr	r2, [r0, #0]
 8008b30:	429a      	cmp	r2, r3
{
 8008b32:	b510      	push	{r4, lr}
 8008b34:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008b36:	d003      	beq.n	8008b40 <HAL_CRC_Init+0x18>
 8008b38:	2170      	movs	r1, #112	; 0x70
 8008b3a:	4839      	ldr	r0, [pc, #228]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008b3c:	f7fc fa3a 	bl	8004fb4 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008b40:	7f63      	ldrb	r3, [r4, #29]
 8008b42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d055      	beq.n	8008bf6 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b4a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b4c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b4e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008b50:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008b52:	d838      	bhi.n	8008bc6 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d13d      	bne.n	8008bd4 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	4a32      	ldr	r2, [pc, #200]	; (8008c24 <HAL_CRC_Init+0xfc>)
 8008b5c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	f022 0218 	bic.w	r2, r2, #24
 8008b64:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008b66:	7963      	ldrb	r3, [r4, #5]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d83c      	bhi.n	8008be6 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008b6c:	b1e3      	cbz	r3, 8008ba8 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008b6e:	6922      	ldr	r2, [r4, #16]
 8008b70:	6823      	ldr	r3, [r4, #0]
 8008b72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008b74:	6962      	ldr	r2, [r4, #20]
 8008b76:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008b7a:	d11d      	bne.n	8008bb8 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008b7c:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008b7e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008b80:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8008b84:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008b86:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008b8a:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008b8c:	d13d      	bne.n	8008c0a <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008b8e:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008b90:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008b96:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008b98:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008b9a:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008b9c:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008b9e:	d82f      	bhi.n	8008c00 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008ba0:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8008ba2:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8008ba4:	7763      	strb	r3, [r4, #29]
}
 8008ba6:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bac:	6823      	ldr	r3, [r4, #0]
 8008bae:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008bb0:	6962      	ldr	r2, [r4, #20]
 8008bb2:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008bb6:	d0e1      	beq.n	8008b7c <HAL_CRC_Init+0x54>
 8008bb8:	219c      	movs	r1, #156	; 0x9c
 8008bba:	4819      	ldr	r0, [pc, #100]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008bbc:	f7fc f9fa 	bl	8004fb4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008bc0:	6962      	ldr	r2, [r4, #20]
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	e7da      	b.n	8008b7c <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008bc6:	217e      	movs	r1, #126	; 0x7e
 8008bc8:	4815      	ldr	r0, [pc, #84]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008bca:	f7fc f9f3 	bl	8004fb4 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008bce:	7923      	ldrb	r3, [r4, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0c1      	beq.n	8008b58 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008bda:	f000 f825 	bl	8008c28 <HAL_CRCEx_Polynomial_Set>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	d0c1      	beq.n	8008b66 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 8008be2:	2001      	movs	r0, #1
}
 8008be4:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008be6:	2190      	movs	r1, #144	; 0x90
 8008be8:	480d      	ldr	r0, [pc, #52]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008bea:	f7fc f9e3 	bl	8004fb4 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008bee:	7963      	ldrb	r3, [r4, #5]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1bc      	bne.n	8008b6e <HAL_CRC_Init+0x46>
 8008bf4:	e7d8      	b.n	8008ba8 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 8008bf6:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 8008bf8:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 8008bfa:	f7fd fc0f 	bl	800641c <HAL_CRC_MspInit>
 8008bfe:	e7a4      	b.n	8008b4a <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008c00:	21a5      	movs	r1, #165	; 0xa5
 8008c02:	4807      	ldr	r0, [pc, #28]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008c04:	f7fc f9d6 	bl	8004fb4 <assert_failed>
 8008c08:	e7ca      	b.n	8008ba0 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008c0a:	4805      	ldr	r0, [pc, #20]	; (8008c20 <HAL_CRC_Init+0xf8>)
 8008c0c:	21a0      	movs	r1, #160	; 0xa0
 8008c0e:	f7fc f9d1 	bl	8004fb4 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	69a0      	ldr	r0, [r4, #24]
 8008c16:	e7ba      	b.n	8008b8e <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 8008c18:	2001      	movs	r0, #1
}
 8008c1a:	4770      	bx	lr
 8008c1c:	40023000 	.word	0x40023000
 8008c20:	0802c820 	.word	0x0802c820
 8008c24:	04c11db7 	.word	0x04c11db7

08008c28 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008c28:	f032 0318 	bics.w	r3, r2, #24
{
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	4616      	mov	r6, r2
 8008c30:	4605      	mov	r5, r0
 8008c32:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008c34:	d003      	beq.n	8008c3e <HAL_CRCEx_Polynomial_Set+0x16>
 8008c36:	215f      	movs	r1, #95	; 0x5f
 8008c38:	4818      	ldr	r0, [pc, #96]	; (8008c9c <HAL_CRCEx_Polynomial_Set+0x74>)
 8008c3a:	f7fc f9bb 	bl	8004fb4 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008c3e:	231e      	movs	r3, #30
 8008c40:	e001      	b.n	8008c46 <HAL_CRCEx_Polynomial_Set+0x1e>
 8008c42:	3b01      	subs	r3, #1
 8008c44:	d315      	bcc.n	8008c72 <HAL_CRCEx_Polynomial_Set+0x4a>
 8008c46:	fa24 fc03 	lsr.w	ip, r4, r3
 8008c4a:	f01c 0f01 	tst.w	ip, #1
 8008c4e:	d0f8      	beq.n	8008c42 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8008c50:	2e18      	cmp	r6, #24
 8008c52:	d80f      	bhi.n	8008c74 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008c54:	e8df f006 	tbb	[pc, r6]
 8008c58:	0e0e0e12 	.word	0x0e0e0e12
 8008c5c:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c60:	0e0e0e1b 	.word	0x0e0e0e1b
 8008c64:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c68:	0e0e0e1e 	.word	0x0e0e0e1e
 8008c6c:	0e0e0e0e 	.word	0x0e0e0e0e
 8008c70:	10          	.byte	0x10
 8008c71:	00          	.byte	0x00
 8008c72:	b11e      	cbz	r6, 8008c7c <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008c74:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8008c78:	2b06      	cmp	r3, #6
 8008c7a:	d8fb      	bhi.n	8008c74 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008c7c:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008c7e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008c80:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008c82:	688b      	ldr	r3, [r1, #8]
 8008c84:	f023 0318 	bic.w	r3, r3, #24
 8008c88:	4333      	orrs	r3, r6
 8008c8a:	608b      	str	r3, [r1, #8]
}
 8008c8c:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8008c8e:	2b0f      	cmp	r3, #15
 8008c90:	d9f4      	bls.n	8008c7c <HAL_CRCEx_Polynomial_Set+0x54>
 8008c92:	e7ef      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8008c94:	2b07      	cmp	r3, #7
 8008c96:	d9f1      	bls.n	8008c7c <HAL_CRCEx_Polynomial_Set+0x54>
 8008c98:	e7ec      	b.n	8008c74 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008c9a:	bf00      	nop
 8008c9c:	0802c858 	.word	0x0802c858

08008ca0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008ca0:	b1d8      	cbz	r0, 8008cda <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <HAL_DAC_Init+0x40>)
 8008ca4:	6802      	ldr	r2, [r0, #0]
 8008ca6:	429a      	cmp	r2, r3
{
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008cac:	d004      	beq.n	8008cb8 <HAL_DAC_Init+0x18>
 8008cae:	f240 1115 	movw	r1, #277	; 0x115
 8008cb2:	480c      	ldr	r0, [pc, #48]	; (8008ce4 <HAL_DAC_Init+0x44>)
 8008cb4:	f7fc f97e 	bl	8004fb4 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008cb8:	7923      	ldrb	r3, [r4, #4]
 8008cba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008cbe:	b13b      	cbz	r3, 8008cd0 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008cc0:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008cc2:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008cc4:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008cc6:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008cc8:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008cca:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8008ccc:	7122      	strb	r2, [r4, #4]
}
 8008cce:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8008cd0:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8008cd2:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8008cd4:	f7fd fbb8 	bl	8006448 <HAL_DAC_MspInit>
 8008cd8:	e7f2      	b.n	8008cc0 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 8008cda:	2001      	movs	r0, #1
}
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	40007400 	.word	0x40007400
 8008ce4:	0802c894 	.word	0x0802c894

08008ce8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cec:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008cee:	f031 0310 	bics.w	r3, r1, #16
{
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	4617      	mov	r7, r2
 8008cf8:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 8008cfa:	d16b      	bne.n	8008dd4 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 8008cfc:	f036 0304 	bics.w	r3, r6, #4
 8008d00:	d001      	beq.n	8008d06 <HAL_DAC_Start_DMA+0x1e>
 8008d02:	2e08      	cmp	r6, #8
 8008d04:	d15b      	bne.n	8008dbe <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 8008d06:	7962      	ldrb	r2, [r4, #5]
 8008d08:	2a01      	cmp	r2, #1
 8008d0a:	d060      	beq.n	8008dce <HAL_DAC_Start_DMA+0xe6>
 8008d0c:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d0e:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 8008d12:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008d14:	2302      	movs	r3, #2
 8008d16:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 8008d18:	bb35      	cbnz	r5, 8008d68 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d1a:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008d1c:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d1e:	4b39      	ldr	r3, [pc, #228]	; (8008e04 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008d20:	4a39      	ldr	r2, [pc, #228]	; (8008e08 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d22:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d24:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008d28:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008d2e:	4a37      	ldr	r2, [pc, #220]	; (8008e0c <HAL_DAC_Start_DMA+0x124>)
 8008d30:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008d32:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008d36:	d059      	beq.n	8008dec <HAL_DAC_Start_DMA+0x104>
 8008d38:	2e08      	cmp	r6, #8
 8008d3a:	d054      	beq.n	8008de6 <HAL_DAC_Start_DMA+0xfe>
 8008d3c:	2e00      	cmp	r6, #0
 8008d3e:	d04f      	beq.n	8008de0 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008d40:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008d42:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008d46:	4643      	mov	r3, r8
 8008d48:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008d4a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8008d4e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008d52:	f000 fbe3 	bl	800951c <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008d56:	2300      	movs	r3, #0
 8008d58:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8008d5a:	b330      	cbz	r0, 8008daa <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8008d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d68:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 8008d6a:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008d6e:	4a29      	ldr	r2, [pc, #164]	; (8008e14 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d70:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008d72:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008d76:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008d7c:	4a26      	ldr	r2, [pc, #152]	; (8008e18 <HAL_DAC_Start_DMA+0x130>)
 8008d7e:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008d80:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008d84:	d03b      	beq.n	8008dfe <HAL_DAC_Start_DMA+0x116>
 8008d86:	2e08      	cmp	r6, #8
 8008d88:	d036      	beq.n	8008df8 <HAL_DAC_Start_DMA+0x110>
 8008d8a:	b396      	cbz	r6, 8008df2 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008d8c:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008d8e:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008d92:	4643      	mov	r3, r8
 8008d94:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008d96:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8008d9a:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008d9e:	f000 fbbd 	bl	800951c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008da2:	2300      	movs	r3, #0
 8008da4:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d1d8      	bne.n	8008d5c <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f005 0110 	and.w	r1, r5, #16
 8008db0:	2501      	movs	r5, #1
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	408d      	lsls	r5, r1
 8008db6:	4315      	orrs	r5, r2
 8008db8:	601d      	str	r5, [r3, #0]
}
 8008dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8008dbe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008dc2:	4816      	ldr	r0, [pc, #88]	; (8008e1c <HAL_DAC_Start_DMA+0x134>)
 8008dc4:	f7fc f8f6 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdac);
 8008dc8:	7962      	ldrb	r2, [r4, #5]
 8008dca:	2a01      	cmp	r2, #1
 8008dcc:	d19e      	bne.n	8008d0c <HAL_DAC_Start_DMA+0x24>
 8008dce:	2002      	movs	r0, #2
}
 8008dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008dd4:	f240 210f 	movw	r1, #527	; 0x20f
 8008dd8:	4810      	ldr	r0, [pc, #64]	; (8008e1c <HAL_DAC_Start_DMA+0x134>)
 8008dda:	f7fc f8eb 	bl	8004fb4 <assert_failed>
 8008dde:	e78d      	b.n	8008cfc <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008de0:	f10c 0208 	add.w	r2, ip, #8
        break;
 8008de4:	e7ad      	b.n	8008d42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008de6:	f10c 0210 	add.w	r2, ip, #16
        break;
 8008dea:	e7aa      	b.n	8008d42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008dec:	f10c 020c 	add.w	r2, ip, #12
        break;
 8008df0:	e7a7      	b.n	8008d42 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008df2:	f10c 0214 	add.w	r2, ip, #20
        break;
 8008df6:	e7ca      	b.n	8008d8e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008df8:	f10c 021c 	add.w	r2, ip, #28
        break;
 8008dfc:	e7c7      	b.n	8008d8e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008dfe:	f10c 0218 	add.w	r2, ip, #24
        break;
 8008e02:	e7c4      	b.n	8008d8e <HAL_DAC_Start_DMA+0xa6>
 8008e04:	08008eb1 	.word	0x08008eb1
 8008e08:	08008ec5 	.word	0x08008ec5
 8008e0c:	08008ed5 	.word	0x08008ed5
 8008e10:	08009029 	.word	0x08009029
 8008e14:	08009039 	.word	0x08009039
 8008e18:	08009045 	.word	0x08009045
 8008e1c:	0802c894 	.word	0x0802c894

08008e20 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008e20:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e22:	f031 0310 	bics.w	r3, r1, #16
{
 8008e26:	460d      	mov	r5, r1
 8008e28:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e2a:	d11e      	bne.n	8008e6a <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e2c:	6803      	ldr	r3, [r0, #0]
 8008e2e:	f001 0e10 	and.w	lr, r1, #16
 8008e32:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e36:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e3e:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e42:	ea20 000c 	bic.w	r0, r0, ip
 8008e46:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	ea22 0201 	bic.w	r2, r2, r1
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008e50:	bb05      	cbnz	r5, 8008e94 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008e52:	68a0      	ldr	r0, [r4, #8]
 8008e54:	f000 fbbe 	bl	80095d4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e58:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8008e5a:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008e5c:	6813      	ldr	r3, [r2, #0]
 8008e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e62:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008e64:	2301      	movs	r3, #1
 8008e66:	7123      	strb	r3, [r4, #4]
}
 8008e68:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008e6a:	f240 218f 	movw	r1, #655	; 0x28f
 8008e6e:	480f      	ldr	r0, [pc, #60]	; (8008eac <HAL_DAC_Stop_DMA+0x8c>)
 8008e70:	f7fc f8a0 	bl	8004fb4 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e74:	f005 0510 	and.w	r5, r5, #16
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e7e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e84:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008e86:	ea22 0200 	bic.w	r2, r2, r0
 8008e8a:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008e8c:	681d      	ldr	r5, [r3, #0]
 8008e8e:	ea25 0501 	bic.w	r5, r5, r1
 8008e92:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008e94:	68e0      	ldr	r0, [r4, #12]
 8008e96:	f000 fb9d 	bl	80095d4 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e9a:	6822      	ldr	r2, [r4, #0]
}
 8008e9c:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008e9e:	6813      	ldr	r3, [r2, #0]
 8008ea0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008ea4:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	7123      	strb	r3, [r4, #4]
}
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	0802c894 	.word	0x0802c894

08008eb0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008eb0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eb2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008eb4:	4620      	mov	r0, r4
 8008eb6:	f7fa ff55 	bl	8003d64 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	7123      	strb	r3, [r4, #4]
}
 8008ebe:	bd10      	pop	{r4, pc}

08008ec0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop

08008ec4 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008ec4:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008ec6:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008ec8:	f7ff fffa 	bl	8008ec0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008ecc:	bd08      	pop	{r3, pc}
 8008ece:	bf00      	nop

08008ed0 <HAL_DAC_ErrorCallbackCh1>:
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop

08008ed4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008ed4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ed6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008ed8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008eda:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008edc:	f043 0304 	orr.w	r3, r3, #4
 8008ee0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008ee2:	f7ff fff5 	bl	8008ed0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	7123      	strb	r3, [r4, #4]
}
 8008eea:	bd10      	pop	{r4, pc}

08008eec <HAL_DAC_DMAUnderrunCallbackCh1>:
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008ef0:	6803      	ldr	r3, [r0, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	0491      	lsls	r1, r2, #18
{
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008efa:	d502      	bpl.n	8008f02 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008efe:	0492      	lsls	r2, r2, #18
 8008f00:	d418      	bmi.n	8008f34 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	0091      	lsls	r1, r2, #2
 8008f06:	d502      	bpl.n	8008f0e <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8008f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f0a:	0092      	lsls	r2, r2, #2
 8008f0c:	d400      	bmi.n	8008f10 <HAL_DAC_IRQHandler+0x20>
}
 8008f0e:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f10:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f12:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f16:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f18:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8008f1a:	6922      	ldr	r2, [r4, #16]
 8008f1c:	f042 0202 	orr.w	r2, r2, #2
 8008f20:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8008f22:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8008f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008f2e:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008f30:	f000 b878 	b.w	8009024 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f34:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008f3a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008f3c:	6902      	ldr	r2, [r0, #16]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008f44:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008f4c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008f4e:	f7ff ffcd 	bl	8008eec <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	e7d5      	b.n	8008f02 <HAL_DAC_IRQHandler+0x12>
 8008f56:	bf00      	nop

08008f58 <HAL_DAC_ConfigChannel>:
{
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008f5c:	6808      	ldr	r0, [r1, #0]
{
 8008f5e:	4616      	mov	r6, r2
 8008f60:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008f62:	f020 0308 	bic.w	r3, r0, #8
 8008f66:	f020 0204 	bic.w	r2, r0, #4
 8008f6a:	2b24      	cmp	r3, #36	; 0x24
 8008f6c:	bf18      	it	ne
 8008f6e:	2a00      	cmpne	r2, #0
 8008f70:	f020 0210 	bic.w	r2, r0, #16
 8008f74:	bf14      	ite	ne
 8008f76:	2301      	movne	r3, #1
 8008f78:	2300      	moveq	r3, #0
 8008f7a:	283c      	cmp	r0, #60	; 0x3c
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2300      	moveq	r3, #0
 8008f80:	f003 0301 	andne.w	r3, r3, #1
 8008f84:	2a0c      	cmp	r2, #12
 8008f86:	bf0c      	ite	eq
 8008f88:	2300      	moveq	r3, #0
 8008f8a:	f003 0301 	andne.w	r3, r3, #1
 8008f8e:	b11b      	cbz	r3, 8008f98 <HAL_DAC_ConfigChannel+0x40>
 8008f90:	f020 0020 	bic.w	r0, r0, #32
 8008f94:	2814      	cmp	r0, #20
 8008f96:	d137      	bne.n	8009008 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008f98:	686b      	ldr	r3, [r5, #4]
 8008f9a:	f033 0302 	bics.w	r3, r3, #2
 8008f9e:	d12d      	bne.n	8008ffc <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8008fa0:	f036 0310 	bics.w	r3, r6, #16
 8008fa4:	d120      	bne.n	8008fe8 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8008fa6:	7963      	ldrb	r3, [r4, #5]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d025      	beq.n	8008ff8 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fac:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008fb0:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fb2:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8008fb6:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008fb8:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fba:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008fbe:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8008fc2:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008fc4:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008fc6:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008fc8:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008fca:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8008fce:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008fd0:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008fd2:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008fd4:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008fd6:	4082      	lsls	r2, r0
 8008fd8:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8008fda:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008fdc:	ea23 0302 	bic.w	r3, r3, r2
 8008fe0:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008fe2:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008fe4:	7165      	strb	r5, [r4, #5]
}
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008fe8:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008fec:	4809      	ldr	r0, [pc, #36]	; (8009014 <HAL_DAC_ConfigChannel+0xbc>)
 8008fee:	f7fb ffe1 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdac);
 8008ff2:	7963      	ldrb	r3, [r4, #5]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d1d9      	bne.n	8008fac <HAL_DAC_ConfigChannel+0x54>
 8008ff8:	2002      	movs	r0, #2
}
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008ffc:	f240 31a5 	movw	r1, #933	; 0x3a5
 8009000:	4804      	ldr	r0, [pc, #16]	; (8009014 <HAL_DAC_ConfigChannel+0xbc>)
 8009002:	f7fb ffd7 	bl	8004fb4 <assert_failed>
 8009006:	e7cb      	b.n	8008fa0 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8009008:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 800900c:	4801      	ldr	r0, [pc, #4]	; (8009014 <HAL_DAC_ConfigChannel+0xbc>)
 800900e:	f7fb ffd1 	bl	8004fb4 <assert_failed>
 8009012:	e7c1      	b.n	8008f98 <HAL_DAC_ConfigChannel+0x40>
 8009014:	0802c894 	.word	0x0802c894

08009018 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop

0800901c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop

08009020 <HAL_DACEx_ErrorCallbackCh2>:
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop

08009024 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop

08009028 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8009028:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800902a:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800902c:	4620      	mov	r0, r4
 800902e:	f7ff fff3 	bl	8009018 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009032:	2301      	movs	r3, #1
 8009034:	7123      	strb	r3, [r4, #4]
}
 8009036:	bd10      	pop	{r4, pc}

08009038 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8009038:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800903a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800903c:	f7ff ffee 	bl	800901c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009040:	bd08      	pop	{r3, pc}
 8009042:	bf00      	nop

08009044 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8009044:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009046:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009048:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800904a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800904c:	f043 0304 	orr.w	r3, r3, #4
 8009050:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009052:	f7ff ffe5 	bl	8009020 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009056:	2301      	movs	r3, #1
 8009058:	7123      	strb	r3, [r4, #4]
}
 800905a:	bd10      	pop	{r4, pc}

0800905c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8009060:	f7ff f892 	bl	8008188 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009064:	2c00      	cmp	r4, #0
 8009066:	f000 8156 	beq.w	8009316 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	4605      	mov	r5, r0
 800906e:	4bad      	ldr	r3, [pc, #692]	; (8009324 <HAL_DMA_Init+0x2c8>)
 8009070:	49ad      	ldr	r1, [pc, #692]	; (8009328 <HAL_DMA_Init+0x2cc>)
 8009072:	429a      	cmp	r2, r3
 8009074:	bf18      	it	ne
 8009076:	428a      	cmpne	r2, r1
 8009078:	f101 0118 	add.w	r1, r1, #24
 800907c:	bf14      	ite	ne
 800907e:	2301      	movne	r3, #1
 8009080:	2300      	moveq	r3, #0
 8009082:	428a      	cmp	r2, r1
 8009084:	bf0c      	ite	eq
 8009086:	2300      	moveq	r3, #0
 8009088:	f003 0301 	andne.w	r3, r3, #1
 800908c:	3118      	adds	r1, #24
 800908e:	428a      	cmp	r2, r1
 8009090:	bf0c      	ite	eq
 8009092:	2300      	moveq	r3, #0
 8009094:	f003 0301 	andne.w	r3, r3, #1
 8009098:	3118      	adds	r1, #24
 800909a:	428a      	cmp	r2, r1
 800909c:	bf0c      	ite	eq
 800909e:	2300      	moveq	r3, #0
 80090a0:	f003 0301 	andne.w	r3, r3, #1
 80090a4:	3118      	adds	r1, #24
 80090a6:	428a      	cmp	r2, r1
 80090a8:	bf0c      	ite	eq
 80090aa:	2300      	moveq	r3, #0
 80090ac:	f003 0301 	andne.w	r3, r3, #1
 80090b0:	3118      	adds	r1, #24
 80090b2:	428a      	cmp	r2, r1
 80090b4:	bf0c      	ite	eq
 80090b6:	2300      	moveq	r3, #0
 80090b8:	f003 0301 	andne.w	r3, r3, #1
 80090bc:	3118      	adds	r1, #24
 80090be:	428a      	cmp	r2, r1
 80090c0:	bf0c      	ite	eq
 80090c2:	2300      	moveq	r3, #0
 80090c4:	f003 0301 	andne.w	r3, r3, #1
 80090c8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80090cc:	428a      	cmp	r2, r1
 80090ce:	bf0c      	ite	eq
 80090d0:	2300      	moveq	r3, #0
 80090d2:	f003 0301 	andne.w	r3, r3, #1
 80090d6:	3118      	adds	r1, #24
 80090d8:	428a      	cmp	r2, r1
 80090da:	bf0c      	ite	eq
 80090dc:	2300      	moveq	r3, #0
 80090de:	f003 0301 	andne.w	r3, r3, #1
 80090e2:	3118      	adds	r1, #24
 80090e4:	428a      	cmp	r2, r1
 80090e6:	bf0c      	ite	eq
 80090e8:	2300      	moveq	r3, #0
 80090ea:	f003 0301 	andne.w	r3, r3, #1
 80090ee:	3118      	adds	r1, #24
 80090f0:	428a      	cmp	r2, r1
 80090f2:	bf0c      	ite	eq
 80090f4:	2300      	moveq	r3, #0
 80090f6:	f003 0301 	andne.w	r3, r3, #1
 80090fa:	3118      	adds	r1, #24
 80090fc:	428a      	cmp	r2, r1
 80090fe:	bf0c      	ite	eq
 8009100:	2300      	moveq	r3, #0
 8009102:	f003 0301 	andne.w	r3, r3, #1
 8009106:	3118      	adds	r1, #24
 8009108:	428a      	cmp	r2, r1
 800910a:	bf0c      	ite	eq
 800910c:	2300      	moveq	r3, #0
 800910e:	f003 0301 	andne.w	r3, r3, #1
 8009112:	3118      	adds	r1, #24
 8009114:	428a      	cmp	r2, r1
 8009116:	bf0c      	ite	eq
 8009118:	2300      	moveq	r3, #0
 800911a:	f003 0301 	andne.w	r3, r3, #1
 800911e:	b11b      	cbz	r3, 8009128 <HAL_DMA_Init+0xcc>
 8009120:	4b82      	ldr	r3, [pc, #520]	; (800932c <HAL_DMA_Init+0x2d0>)
 8009122:	429a      	cmp	r2, r3
 8009124:	f040 8139 	bne.w	800939a <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8009128:	6863      	ldr	r3, [r4, #4]
 800912a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800912e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009132:	bf18      	it	ne
 8009134:	2b00      	cmpne	r3, #0
 8009136:	bf14      	ite	ne
 8009138:	2201      	movne	r2, #1
 800913a:	2200      	moveq	r2, #0
 800913c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009140:	bf0c      	ite	eq
 8009142:	2200      	moveq	r2, #0
 8009144:	f002 0201 	andne.w	r2, r2, #1
 8009148:	b11a      	cbz	r2, 8009152 <HAL_DMA_Init+0xf6>
 800914a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800914e:	f040 8129 	bne.w	80093a4 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8009158:	d002      	beq.n	8009160 <HAL_DMA_Init+0x104>
 800915a:	2b80      	cmp	r3, #128	; 0x80
 800915c:	f040 80a8 	bne.w	80092b0 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8009160:	68e3      	ldr	r3, [r4, #12]
 8009162:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009166:	f040 80ac 	bne.w	80092c2 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8009170:	f040 80b0 	bne.w	80092d4 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8009174:	6963      	ldr	r3, [r4, #20]
 8009176:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800917a:	d003      	beq.n	8009184 <HAL_DMA_Init+0x128>
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009180:	f040 8091 	bne.w	80092a6 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8009184:	69a3      	ldr	r3, [r4, #24]
 8009186:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800918a:	d003      	beq.n	8009194 <HAL_DMA_Init+0x138>
 800918c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009190:	f040 8084 	bne.w	800929c <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8009194:	69e3      	ldr	r3, [r4, #28]
 8009196:	f033 0220 	bics.w	r2, r3, #32
 800919a:	d002      	beq.n	80091a2 <HAL_DMA_Init+0x146>
 800919c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a0:	d16f      	bne.n	8009282 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80091a2:	6a23      	ldr	r3, [r4, #32]
 80091a4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 80091a8:	d173      	bne.n	8009292 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80091aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091ac:	f033 0204 	bics.w	r2, r3, #4
 80091b0:	d15f      	bne.n	8009272 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d14d      	bne.n	8009252 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80091b6:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80091b8:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80091ba:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 80091bc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 80091c0:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	f022 0201 	bic.w	r2, r2, #1
 80091ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091cc:	e006      	b.n	80091dc <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091ce:	f7fe ffdb 	bl	8008188 <HAL_GetTick>
 80091d2:	1b40      	subs	r0, r0, r5
 80091d4:	2805      	cmp	r0, #5
 80091d6:	f200 8082 	bhi.w	80092de <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	07d1      	lsls	r1, r2, #31
 80091e0:	d4f5      	bmi.n	80091ce <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091e2:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 80091e6:	68e1      	ldr	r1, [r4, #12]
 80091e8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091ea:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 80091ec:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091ee:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f0:	6921      	ldr	r1, [r4, #16]
 80091f2:	430a      	orrs	r2, r1
 80091f4:	6961      	ldr	r1, [r4, #20]
 80091f6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80091f8:	69e1      	ldr	r1, [r4, #28]
 80091fa:	4302      	orrs	r2, r0
 80091fc:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091fe:	494c      	ldr	r1, [pc, #304]	; (8009330 <HAL_DMA_Init+0x2d4>)
 8009200:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8009202:	6a25      	ldr	r5, [r4, #32]
 8009204:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009206:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009208:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800920a:	2904      	cmp	r1, #4
 800920c:	d06e      	beq.n	80092ec <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800920e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009210:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009212:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009216:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009218:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 800921a:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800921c:	4945      	ldr	r1, [pc, #276]	; (8009334 <HAL_DMA_Init+0x2d8>)
 800921e:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009220:	4845      	ldr	r0, [pc, #276]	; (8009338 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009222:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8009226:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009228:	4a44      	ldr	r2, [pc, #272]	; (800933c <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800922a:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800922e:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009232:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009236:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009238:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800923c:	bf88      	it	hi
 800923e:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009240:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009242:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009244:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009246:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8009248:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800924a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800924c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009250:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8009252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009254:	2b03      	cmp	r3, #3
 8009256:	d860      	bhi.n	800931a <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8009258:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800925a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800925e:	d171      	bne.n	8009344 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8009260:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009262:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8009266:	d0a6      	beq.n	80091b6 <HAL_DMA_Init+0x15a>
 8009268:	21c8      	movs	r1, #200	; 0xc8
 800926a:	4835      	ldr	r0, [pc, #212]	; (8009340 <HAL_DMA_Init+0x2e4>)
 800926c:	f7fb fea2 	bl	8004fb4 <assert_failed>
 8009270:	e7a1      	b.n	80091b6 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8009272:	21c1      	movs	r1, #193	; 0xc1
 8009274:	4832      	ldr	r0, [pc, #200]	; (8009340 <HAL_DMA_Init+0x2e4>)
 8009276:	f7fb fe9d 	bl	8004fb4 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800927a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d09a      	beq.n	80091b6 <HAL_DMA_Init+0x15a>
 8009280:	e7e7      	b.n	8009252 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8009282:	21bf      	movs	r1, #191	; 0xbf
 8009284:	482e      	ldr	r0, [pc, #184]	; (8009340 <HAL_DMA_Init+0x2e4>)
 8009286:	f7fb fe95 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800928a:	6a23      	ldr	r3, [r4, #32]
 800928c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8009290:	d08b      	beq.n	80091aa <HAL_DMA_Init+0x14e>
 8009292:	21c0      	movs	r1, #192	; 0xc0
 8009294:	482a      	ldr	r0, [pc, #168]	; (8009340 <HAL_DMA_Init+0x2e4>)
 8009296:	f7fb fe8d 	bl	8004fb4 <assert_failed>
 800929a:	e786      	b.n	80091aa <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800929c:	21be      	movs	r1, #190	; 0xbe
 800929e:	4828      	ldr	r0, [pc, #160]	; (8009340 <HAL_DMA_Init+0x2e4>)
 80092a0:	f7fb fe88 	bl	8004fb4 <assert_failed>
 80092a4:	e776      	b.n	8009194 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80092a6:	21bd      	movs	r1, #189	; 0xbd
 80092a8:	4825      	ldr	r0, [pc, #148]	; (8009340 <HAL_DMA_Init+0x2e4>)
 80092aa:	f7fb fe83 	bl	8004fb4 <assert_failed>
 80092ae:	e769      	b.n	8009184 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80092b0:	21ba      	movs	r1, #186	; 0xba
 80092b2:	4823      	ldr	r0, [pc, #140]	; (8009340 <HAL_DMA_Init+0x2e4>)
 80092b4:	f7fb fe7e 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80092b8:	68e3      	ldr	r3, [r4, #12]
 80092ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80092be:	f43f af54 	beq.w	800916a <HAL_DMA_Init+0x10e>
 80092c2:	21bb      	movs	r1, #187	; 0xbb
 80092c4:	481e      	ldr	r0, [pc, #120]	; (8009340 <HAL_DMA_Init+0x2e4>)
 80092c6:	f7fb fe75 	bl	8004fb4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80092d0:	f43f af50 	beq.w	8009174 <HAL_DMA_Init+0x118>
 80092d4:	21bc      	movs	r1, #188	; 0xbc
 80092d6:	481a      	ldr	r0, [pc, #104]	; (8009340 <HAL_DMA_Init+0x2e4>)
 80092d8:	f7fb fe6c 	bl	8004fb4 <assert_failed>
 80092dc:	e74a      	b.n	8009174 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092de:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092e0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 80092e2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092e4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092e6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80092ea:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80092ec:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 80092f0:	4329      	orrs	r1, r5
 80092f2:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 80092f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80092f6:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80092f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80092fa:	f021 0107 	bic.w	r1, r1, #7
 80092fe:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8009300:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009304:	2d00      	cmp	r5, #0
 8009306:	d087      	beq.n	8009218 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009308:	bb08      	cbnz	r0, 800934e <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 800930a:	2a01      	cmp	r2, #1
 800930c:	d040      	beq.n	8009390 <HAL_DMA_Init+0x334>
 800930e:	f032 0202 	bics.w	r2, r2, #2
 8009312:	d181      	bne.n	8009218 <HAL_DMA_Init+0x1bc>
 8009314:	e023      	b.n	800935e <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 8009316:	2001      	movs	r0, #1
}
 8009318:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800931a:	21c6      	movs	r1, #198	; 0xc6
 800931c:	4808      	ldr	r0, [pc, #32]	; (8009340 <HAL_DMA_Init+0x2e4>)
 800931e:	f7fb fe49 	bl	8004fb4 <assert_failed>
 8009322:	e799      	b.n	8009258 <HAL_DMA_Init+0x1fc>
 8009324:	40026010 	.word	0x40026010
 8009328:	40026028 	.word	0x40026028
 800932c:	400264b8 	.word	0x400264b8
 8009330:	e010803f 	.word	0xe010803f
 8009334:	aaaaaaab 	.word	0xaaaaaaab
 8009338:	0802c904 	.word	0x0802c904
 800933c:	fffffc00 	.word	0xfffffc00
 8009340:	0802c8cc 	.word	0x0802c8cc
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8009344:	21c7      	movs	r1, #199	; 0xc7
 8009346:	481a      	ldr	r0, [pc, #104]	; (80093b0 <HAL_DMA_Init+0x354>)
 8009348:	f7fb fe34 	bl	8004fb4 <assert_failed>
 800934c:	e788      	b.n	8009260 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800934e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8009352:	d00e      	beq.n	8009372 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009354:	2a02      	cmp	r2, #2
 8009356:	d905      	bls.n	8009364 <HAL_DMA_Init+0x308>
 8009358:	2a03      	cmp	r2, #3
 800935a:	f47f af5d 	bne.w	8009218 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800935e:	01ea      	lsls	r2, r5, #7
 8009360:	f57f af5a 	bpl.w	8009218 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 8009364:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009366:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8009368:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800936a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800936c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009370:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8009372:	2a03      	cmp	r2, #3
 8009374:	f63f af50 	bhi.w	8009218 <HAL_DMA_Init+0x1bc>
 8009378:	a001      	add	r0, pc, #4	; (adr r0, 8009380 <HAL_DMA_Init+0x324>)
 800937a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800937e:	bf00      	nop
 8009380:	08009365 	.word	0x08009365
 8009384:	0800935f 	.word	0x0800935f
 8009388:	08009365 	.word	0x08009365
 800938c:	08009391 	.word	0x08009391
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009390:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8009394:	f47f af40 	bne.w	8009218 <HAL_DMA_Init+0x1bc>
 8009398:	e7e4      	b.n	8009364 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800939a:	21b8      	movs	r1, #184	; 0xb8
 800939c:	4804      	ldr	r0, [pc, #16]	; (80093b0 <HAL_DMA_Init+0x354>)
 800939e:	f7fb fe09 	bl	8004fb4 <assert_failed>
 80093a2:	e6c1      	b.n	8009128 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80093a4:	21b9      	movs	r1, #185	; 0xb9
 80093a6:	4802      	ldr	r0, [pc, #8]	; (80093b0 <HAL_DMA_Init+0x354>)
 80093a8:	f7fb fe04 	bl	8004fb4 <assert_failed>
 80093ac:	e6d1      	b.n	8009152 <HAL_DMA_Init+0xf6>
 80093ae:	bf00      	nop
 80093b0:	0802c8cc 	.word	0x0802c8cc

080093b4 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80093b4:	2800      	cmp	r0, #0
 80093b6:	f000 8097 	beq.w	80094e8 <HAL_DMA_DeInit+0x134>
{
 80093ba:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80093bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80093c0:	4604      	mov	r4, r0
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	b2d8      	uxtb	r0, r3
 80093c6:	f000 808e 	beq.w	80094e6 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80093ca:	6822      	ldr	r2, [r4, #0]
 80093cc:	4b4b      	ldr	r3, [pc, #300]	; (80094fc <HAL_DMA_DeInit+0x148>)
 80093ce:	484c      	ldr	r0, [pc, #304]	; (8009500 <HAL_DMA_DeInit+0x14c>)
 80093d0:	494c      	ldr	r1, [pc, #304]	; (8009504 <HAL_DMA_DeInit+0x150>)
 80093d2:	429a      	cmp	r2, r3
 80093d4:	bf18      	it	ne
 80093d6:	4282      	cmpne	r2, r0
 80093d8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80093dc:	bf14      	ite	ne
 80093de:	2301      	movne	r3, #1
 80093e0:	2300      	moveq	r3, #0
 80093e2:	428a      	cmp	r2, r1
 80093e4:	bf0c      	ite	eq
 80093e6:	2300      	moveq	r3, #0
 80093e8:	f003 0301 	andne.w	r3, r3, #1
 80093ec:	3130      	adds	r1, #48	; 0x30
 80093ee:	4282      	cmp	r2, r0
 80093f0:	bf0c      	ite	eq
 80093f2:	2300      	moveq	r3, #0
 80093f4:	f003 0301 	andne.w	r3, r3, #1
 80093f8:	3030      	adds	r0, #48	; 0x30
 80093fa:	428a      	cmp	r2, r1
 80093fc:	bf0c      	ite	eq
 80093fe:	2300      	moveq	r3, #0
 8009400:	f003 0301 	andne.w	r3, r3, #1
 8009404:	3130      	adds	r1, #48	; 0x30
 8009406:	4282      	cmp	r2, r0
 8009408:	bf0c      	ite	eq
 800940a:	2300      	moveq	r3, #0
 800940c:	f003 0301 	andne.w	r3, r3, #1
 8009410:	3030      	adds	r0, #48	; 0x30
 8009412:	428a      	cmp	r2, r1
 8009414:	bf0c      	ite	eq
 8009416:	2300      	moveq	r3, #0
 8009418:	f003 0301 	andne.w	r3, r3, #1
 800941c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009420:	4282      	cmp	r2, r0
 8009422:	bf0c      	ite	eq
 8009424:	2300      	moveq	r3, #0
 8009426:	f003 0301 	andne.w	r3, r3, #1
 800942a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800942e:	428a      	cmp	r2, r1
 8009430:	bf0c      	ite	eq
 8009432:	2300      	moveq	r3, #0
 8009434:	f003 0301 	andne.w	r3, r3, #1
 8009438:	3130      	adds	r1, #48	; 0x30
 800943a:	4282      	cmp	r2, r0
 800943c:	bf0c      	ite	eq
 800943e:	2300      	moveq	r3, #0
 8009440:	f003 0301 	andne.w	r3, r3, #1
 8009444:	3030      	adds	r0, #48	; 0x30
 8009446:	428a      	cmp	r2, r1
 8009448:	bf0c      	ite	eq
 800944a:	2300      	moveq	r3, #0
 800944c:	f003 0301 	andne.w	r3, r3, #1
 8009450:	3130      	adds	r1, #48	; 0x30
 8009452:	4282      	cmp	r2, r0
 8009454:	bf0c      	ite	eq
 8009456:	2300      	moveq	r3, #0
 8009458:	f003 0301 	andne.w	r3, r3, #1
 800945c:	3030      	adds	r0, #48	; 0x30
 800945e:	428a      	cmp	r2, r1
 8009460:	bf0c      	ite	eq
 8009462:	2300      	moveq	r3, #0
 8009464:	f003 0301 	andne.w	r3, r3, #1
 8009468:	3130      	adds	r1, #48	; 0x30
 800946a:	4282      	cmp	r2, r0
 800946c:	bf0c      	ite	eq
 800946e:	2300      	moveq	r3, #0
 8009470:	f003 0301 	andne.w	r3, r3, #1
 8009474:	428a      	cmp	r2, r1
 8009476:	bf0c      	ite	eq
 8009478:	2300      	moveq	r3, #0
 800947a:	f003 0301 	andne.w	r3, r3, #1
 800947e:	b113      	cbz	r3, 8009486 <HAL_DMA_DeInit+0xd2>
 8009480:	4b21      	ldr	r3, [pc, #132]	; (8009508 <HAL_DMA_DeInit+0x154>)
 8009482:	429a      	cmp	r2, r3
 8009484:	d132      	bne.n	80094ec <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 8009486:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009488:	b2d3      	uxtb	r3, r2
 800948a:	4920      	ldr	r1, [pc, #128]	; (800950c <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 800948c:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009490:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8009492:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 8009494:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009496:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 800949a:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 800949c:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 800949e:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 80094a2:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80094a4:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 80094a8:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 80094aa:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 80094ac:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80094ae:	f04f 0021 	mov.w	r0, #33	; 0x21
 80094b2:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094b4:	4816      	ldr	r0, [pc, #88]	; (8009510 <HAL_DMA_DeInit+0x15c>)
 80094b6:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094b8:	4916      	ldr	r1, [pc, #88]	; (8009514 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80094ba:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094bc:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094c0:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80094c4:	bf88      	it	hi
 80094c6:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094c8:	4082      	lsls	r2, r0
  return HAL_OK;
 80094ca:	4618      	mov	r0, r3
 80094cc:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80094ce:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80094d0:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80094d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80094d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80094da:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80094de:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80094e2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80094e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80094e8:	2001      	movs	r0, #1
}
 80094ea:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80094ec:	f240 1149 	movw	r1, #329	; 0x149
 80094f0:	4809      	ldr	r0, [pc, #36]	; (8009518 <HAL_DMA_DeInit+0x164>)
 80094f2:	f7fb fd5f 	bl	8004fb4 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	e7c5      	b.n	8009486 <HAL_DMA_DeInit+0xd2>
 80094fa:	bf00      	nop
 80094fc:	40026010 	.word	0x40026010
 8009500:	40026028 	.word	0x40026028
 8009504:	40026040 	.word	0x40026040
 8009508:	400264b8 	.word	0x400264b8
 800950c:	aaaaaaab 	.word	0xaaaaaaab
 8009510:	0802c904 	.word	0x0802c904
 8009514:	fffffc00 	.word	0xfffffc00
 8009518:	0802c8cc 	.word	0x0802c8cc

0800951c <HAL_DMA_Start_IT>:
{
 800951c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009520:	461e      	mov	r6, r3
 8009522:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009524:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009528:	1e58      	subs	r0, r3, #1
 800952a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 800952e:	4688      	mov	r8, r1
 8009530:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009532:	4298      	cmp	r0, r3
 8009534:	d83b      	bhi.n	80095ae <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8009536:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800953a:	2b01      	cmp	r3, #1
 800953c:	d040      	beq.n	80095c0 <HAL_DMA_Start_IT+0xa4>
 800953e:	2301      	movs	r3, #1
 8009540:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009544:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009548:	2b01      	cmp	r3, #1
 800954a:	d005      	beq.n	8009558 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800954c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800954e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8009550:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009558:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800955a:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800955c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009560:	2300      	movs	r3, #0
 8009562:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800956a:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800956c:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800956e:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009570:	2b40      	cmp	r3, #64	; 0x40
 8009572:	d028      	beq.n	80095c6 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8009574:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8009578:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800957a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800957c:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800957e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009580:	408b      	lsls	r3, r1
 8009582:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	f043 0316 	orr.w	r3, r3, #22
 800958c:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800958e:	696b      	ldr	r3, [r5, #20]
 8009590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009594:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8009596:	b11a      	cbz	r2, 80095a0 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	f043 0308 	orr.w	r3, r3, #8
 800959e:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80095a0:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80095a2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80095a4:	f043 0301 	orr.w	r3, r3, #1
 80095a8:	602b      	str	r3, [r5, #0]
}
 80095aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80095ae:	f240 11cd 	movw	r1, #461	; 0x1cd
 80095b2:	4807      	ldr	r0, [pc, #28]	; (80095d0 <HAL_DMA_Start_IT+0xb4>)
 80095b4:	f7fb fcfe 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hdma);
 80095b8:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d1be      	bne.n	800953e <HAL_DMA_Start_IT+0x22>
 80095c0:	2002      	movs	r0, #2
}
 80095c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 80095c6:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80095c8:	f8c5 800c 	str.w	r8, [r5, #12]
 80095cc:	e7d5      	b.n	800957a <HAL_DMA_Start_IT+0x5e>
 80095ce:	bf00      	nop
 80095d0:	0802c8cc 	.word	0x0802c8cc

080095d4 <HAL_DMA_Abort>:
{
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80095d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80095da:	f7fe fdd5 	bl	8008188 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80095de:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d006      	beq.n	80095f4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095e6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80095e8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80095ea:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095ec:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80095ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	4605      	mov	r5, r0
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f022 0216 	bic.w	r2, r2, #22
 80095fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009600:	695a      	ldr	r2, [r3, #20]
 8009602:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009606:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009608:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800960a:	b33a      	cbz	r2, 800965c <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	f022 0208 	bic.w	r2, r2, #8
 8009612:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	f022 0201 	bic.w	r2, r2, #1
 800961a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800961c:	e005      	b.n	800962a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800961e:	f7fe fdb3 	bl	8008188 <HAL_GetTick>
 8009622:	1b43      	subs	r3, r0, r5
 8009624:	2b05      	cmp	r3, #5
 8009626:	d80f      	bhi.n	8009648 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009628:	6823      	ldr	r3, [r4, #0]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f013 0301 	ands.w	r3, r3, #1
 8009630:	d1f5      	bne.n	800961e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009632:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009634:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8009636:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009638:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800963a:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800963c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800963e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009642:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009646:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009648:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800964a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800964c:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800964e:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009650:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009652:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009656:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800965a:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800965c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800965e:	2a00      	cmp	r2, #0
 8009660:	d1d4      	bne.n	800960c <HAL_DMA_Abort+0x38>
 8009662:	e7d7      	b.n	8009614 <HAL_DMA_Abort+0x40>

08009664 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009664:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8009668:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800966a:	2a02      	cmp	r2, #2
 800966c:	d003      	beq.n	8009676 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800966e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009670:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009674:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8009676:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8009678:	2105      	movs	r1, #5
  return HAL_OK;
 800967a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800967c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8009680:	6813      	ldr	r3, [r2, #0]
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	6013      	str	r3, [r2, #0]
}
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop

0800968c <HAL_DMA_IRQHandler>:
{
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8009690:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8009692:	4b74      	ldr	r3, [pc, #464]	; (8009864 <HAL_DMA_IRQHandler+0x1d8>)
{
 8009694:	b082      	sub	sp, #8
 8009696:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8009698:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800969a:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800969c:	2208      	movs	r2, #8
 800969e:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80096a2:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80096a4:	409a      	lsls	r2, r3
 80096a6:	4222      	tst	r2, r4
 80096a8:	d004      	beq.n	80096b4 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80096aa:	6801      	ldr	r1, [r0, #0]
 80096ac:	680f      	ldr	r7, [r1, #0]
 80096ae:	0778      	lsls	r0, r7, #29
 80096b0:	f100 80ab 	bmi.w	800980a <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80096b4:	2201      	movs	r2, #1
 80096b6:	409a      	lsls	r2, r3
 80096b8:	4222      	tst	r2, r4
 80096ba:	d005      	beq.n	80096c8 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80096bc:	f8d8 1000 	ldr.w	r1, [r8]
 80096c0:	6949      	ldr	r1, [r1, #20]
 80096c2:	0609      	lsls	r1, r1, #24
 80096c4:	f100 8099 	bmi.w	80097fa <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80096c8:	2204      	movs	r2, #4
 80096ca:	409a      	lsls	r2, r3
 80096cc:	4222      	tst	r2, r4
 80096ce:	d005      	beq.n	80096dc <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80096d0:	f8d8 1000 	ldr.w	r1, [r8]
 80096d4:	6809      	ldr	r1, [r1, #0]
 80096d6:	078f      	lsls	r7, r1, #30
 80096d8:	f100 8087 	bmi.w	80097ea <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80096dc:	2210      	movs	r2, #16
 80096de:	409a      	lsls	r2, r3
 80096e0:	4222      	tst	r2, r4
 80096e2:	d004      	beq.n	80096ee <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80096e4:	f8d8 1000 	ldr.w	r1, [r8]
 80096e8:	680f      	ldr	r7, [r1, #0]
 80096ea:	0738      	lsls	r0, r7, #28
 80096ec:	d468      	bmi.n	80097c0 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80096ee:	2220      	movs	r2, #32
 80096f0:	409a      	lsls	r2, r3
 80096f2:	4222      	tst	r2, r4
 80096f4:	d017      	beq.n	8009726 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80096f6:	f8d8 1000 	ldr.w	r1, [r8]
 80096fa:	680c      	ldr	r4, [r1, #0]
 80096fc:	06e0      	lsls	r0, r4, #27
 80096fe:	d512      	bpl.n	8009726 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009700:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009702:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8009706:	2a05      	cmp	r2, #5
 8009708:	d039      	beq.n	800977e <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800970a:	680b      	ldr	r3, [r1, #0]
 800970c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009710:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009712:	f000 808d 	beq.w	8009830 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009716:	0319      	lsls	r1, r3, #12
 8009718:	f140 8098 	bpl.w	800984c <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 800971c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8009720:	b10b      	cbz	r3, 8009726 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 8009722:	4640      	mov	r0, r8
 8009724:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009726:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800972a:	2b00      	cmp	r3, #0
 800972c:	d045      	beq.n	80097ba <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800972e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8009732:	07da      	lsls	r2, r3, #31
 8009734:	d51b      	bpl.n	800976e <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 8009736:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800973a:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800973c:	494a      	ldr	r1, [pc, #296]	; (8009868 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800973e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009742:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8009744:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8009748:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800974c:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800974e:	6013      	str	r3, [r2, #0]
 8009750:	e002      	b.n	8009758 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	07db      	lsls	r3, r3, #31
 8009756:	d504      	bpl.n	8009762 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 8009758:	9b01      	ldr	r3, [sp, #4]
 800975a:	3301      	adds	r3, #1
 800975c:	42ab      	cmp	r3, r5
 800975e:	9301      	str	r3, [sp, #4]
 8009760:	d9f7      	bls.n	8009752 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 8009762:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8009764:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8009766:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800976a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800976e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009772:	b313      	cbz	r3, 80097ba <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 8009774:	4640      	mov	r0, r8
}
 8009776:	b002      	add	sp, #8
 8009778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800977c:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800977e:	680a      	ldr	r2, [r1, #0]
 8009780:	f022 0216 	bic.w	r2, r2, #22
 8009784:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009786:	694a      	ldr	r2, [r1, #20]
 8009788:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800978c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800978e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009792:	2a00      	cmp	r2, #0
 8009794:	d060      	beq.n	8009858 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009796:	680a      	ldr	r2, [r1, #0]
 8009798:	f022 0208 	bic.w	r2, r2, #8
 800979c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800979e:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 80097a0:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80097a6:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097a8:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 80097aa:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 80097ae:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80097b2:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1dc      	bne.n	8009774 <HAL_DMA_IRQHandler+0xe8>
}
 80097ba:	b002      	add	sp, #8
 80097bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80097c0:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097c2:	680a      	ldr	r2, [r1, #0]
 80097c4:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80097c8:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80097ca:	d12a      	bne.n	8009822 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80097cc:	05d7      	lsls	r7, r2, #23
 80097ce:	d403      	bmi.n	80097d8 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80097d0:	680a      	ldr	r2, [r1, #0]
 80097d2:	f022 0208 	bic.w	r2, r2, #8
 80097d6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80097d8:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80097dc:	2a00      	cmp	r2, #0
 80097de:	d086      	beq.n	80096ee <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 80097e0:	4640      	mov	r0, r8
 80097e2:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80097e4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80097e8:	e781      	b.n	80096ee <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80097ea:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097ec:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80097f0:	f042 0204 	orr.w	r2, r2, #4
 80097f4:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80097f8:	e770      	b.n	80096dc <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80097fa:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80097fc:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009800:	f042 0202 	orr.w	r2, r2, #2
 8009804:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009808:	e75e      	b.n	80096c8 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800980a:	680f      	ldr	r7, [r1, #0]
 800980c:	f027 0704 	bic.w	r7, r7, #4
 8009810:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009812:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009814:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8009818:	f042 0201 	orr.w	r2, r2, #1
 800981c:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8009820:	e748      	b.n	80096b4 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009822:	0312      	lsls	r2, r2, #12
 8009824:	d5d8      	bpl.n	80097d8 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009826:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800982a:	2a00      	cmp	r2, #0
 800982c:	d1d8      	bne.n	80097e0 <HAL_DMA_IRQHandler+0x154>
 800982e:	e75e      	b.n	80096ee <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009830:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8009834:	f47f af72 	bne.w	800971c <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009838:	680a      	ldr	r2, [r1, #0]
 800983a:	f022 0210 	bic.w	r2, r2, #16
 800983e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009840:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8009842:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8009846:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800984a:	e767      	b.n	800971c <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800984c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009850:	2b00      	cmp	r3, #0
 8009852:	f47f af66 	bne.w	8009722 <HAL_DMA_IRQHandler+0x96>
 8009856:	e766      	b.n	8009726 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009858:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800985c:	2a00      	cmp	r2, #0
 800985e:	d19a      	bne.n	8009796 <HAL_DMA_IRQHandler+0x10a>
 8009860:	e79d      	b.n	800979e <HAL_DMA_IRQHandler+0x112>
 8009862:	bf00      	nop
 8009864:	20000284 	.word	0x20000284
 8009868:	1b4e81b5 	.word	0x1b4e81b5

0800986c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800986c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800986e:	4770      	bx	lr

08009870 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8009870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009874:	9f08      	ldr	r7, [sp, #32]
 8009876:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009878:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800987c:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800987e:	1e7d      	subs	r5, r7, #1
{
 8009880:	4691      	mov	r9, r2
 8009882:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009884:	4285      	cmp	r5, r0
 8009886:	d85f      	bhi.n	8009948 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009888:	68a0      	ldr	r0, [r4, #8]
 800988a:	2880      	cmp	r0, #128	; 0x80
 800988c:	d063      	beq.n	8009956 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800988e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009892:	2b01      	cmp	r3, #1
 8009894:	f000 8090 	beq.w	80099b8 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009898:	2301      	movs	r3, #1
 800989a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800989e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d005      	beq.n	80098b2 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80098a6:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 80098a8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 80098aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 80098ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80098b2:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80098b4:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098b6:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 80098b8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80098bc:	f04f 0300 	mov.w	r3, #0
 80098c0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80098c2:	682b      	ldr	r3, [r5, #0]
 80098c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098c8:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 80098ca:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 80098cc:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80098ce:	d06a      	beq.n	80099a6 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80098d0:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80098d4:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80098d8:	4b93      	ldr	r3, [pc, #588]	; (8009b28 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80098da:	429d      	cmp	r5, r3
 80098dc:	d941      	bls.n	8009962 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 80098de:	3b48      	subs	r3, #72	; 0x48
 80098e0:	4992      	ldr	r1, [pc, #584]	; (8009b2c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80098e2:	4a93      	ldr	r2, [pc, #588]	; (8009b30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80098e4:	429d      	cmp	r5, r3
 80098e6:	bf18      	it	ne
 80098e8:	428d      	cmpne	r5, r1
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	4295      	cmp	r5, r2
 80098f2:	bf0c      	ite	eq
 80098f4:	2300      	moveq	r3, #0
 80098f6:	f003 0301 	andne.w	r3, r3, #1
 80098fa:	b11b      	cbz	r3, 8009904 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 80098fc:	4b8d      	ldr	r3, [pc, #564]	; (8009b34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80098fe:	429d      	cmp	r5, r3
 8009900:	f040 812e 	bne.w	8009b60 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8009904:	4b8c      	ldr	r3, [pc, #560]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009906:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009908:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800990a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800990c:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800990e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009910:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009912:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009914:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009916:	2201      	movs	r2, #1
 8009918:	4b87      	ldr	r3, [pc, #540]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800991a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800991c:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800991e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009920:	f043 0316 	orr.w	r3, r3, #22
 8009924:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009926:	696b      	ldr	r3, [r5, #20]
 8009928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992c:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800992e:	2a00      	cmp	r2, #0
 8009930:	d03e      	beq.n	80099b0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009932:	682b      	ldr	r3, [r5, #0]
 8009934:	f043 0308 	orr.w	r3, r3, #8
 8009938:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800993a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800993c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	602b      	str	r3, [r5, #0]
}
 8009944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009948:	487c      	ldr	r0, [pc, #496]	; (8009b3c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800994a:	21a1      	movs	r1, #161	; 0xa1
 800994c:	f7fb fb32 	bl	8004fb4 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009950:	68a0      	ldr	r0, [r4, #8]
 8009952:	2880      	cmp	r0, #128	; 0x80
 8009954:	d19b      	bne.n	800988e <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8009956:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800995a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800995c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800995e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009962:	4b77      	ldr	r3, [pc, #476]	; (8009b40 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8009964:	429d      	cmp	r5, r3
 8009966:	d929      	bls.n	80099bc <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8009968:	3ba8      	subs	r3, #168	; 0xa8
 800996a:	4976      	ldr	r1, [pc, #472]	; (8009b44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800996c:	4a70      	ldr	r2, [pc, #448]	; (8009b30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800996e:	429d      	cmp	r5, r3
 8009970:	bf18      	it	ne
 8009972:	428d      	cmpne	r5, r1
 8009974:	bf14      	ite	ne
 8009976:	2301      	movne	r3, #1
 8009978:	2300      	moveq	r3, #0
 800997a:	4295      	cmp	r5, r2
 800997c:	bf0c      	ite	eq
 800997e:	2300      	moveq	r3, #0
 8009980:	f003 0301 	andne.w	r3, r3, #1
 8009984:	b113      	cbz	r3, 800998c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8009986:	4b6b      	ldr	r3, [pc, #428]	; (8009b34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009988:	429d      	cmp	r5, r3
 800998a:	d15a      	bne.n	8009a42 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800998c:	4b6a      	ldr	r3, [pc, #424]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800998e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009990:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009992:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009994:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009996:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009998:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800999a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800999c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800999e:	2301      	movs	r3, #1
 80099a0:	4a65      	ldr	r2, [pc, #404]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80099a2:	6093      	str	r3, [r2, #8]
 80099a4:	e7ba      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 80099a6:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80099aa:	f8c5 800c 	str.w	r8, [r5, #12]
 80099ae:	e793      	b.n	80098d8 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1bd      	bne.n	8009932 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 80099b6:	e7c0      	b.n	800993a <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 80099b8:	2002      	movs	r0, #2
 80099ba:	e778      	b.n	80098ae <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80099bc:	4b62      	ldr	r3, [pc, #392]	; (8009b48 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80099be:	429d      	cmp	r5, r3
 80099c0:	d91f      	bls.n	8009a02 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 80099c2:	3b48      	subs	r3, #72	; 0x48
 80099c4:	495f      	ldr	r1, [pc, #380]	; (8009b44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80099c6:	4a5a      	ldr	r2, [pc, #360]	; (8009b30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80099c8:	429d      	cmp	r5, r3
 80099ca:	bf18      	it	ne
 80099cc:	428d      	cmpne	r5, r1
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	4295      	cmp	r5, r2
 80099d6:	bf0c      	ite	eq
 80099d8:	2300      	moveq	r3, #0
 80099da:	f003 0301 	andne.w	r3, r3, #1
 80099de:	b11b      	cbz	r3, 80099e8 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 80099e0:	4b54      	ldr	r3, [pc, #336]	; (8009b34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	f040 8152 	bne.w	8009c8c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 80099e8:	4b58      	ldr	r3, [pc, #352]	; (8009b4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80099ea:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80099ec:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80099ee:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099f0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80099f2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099f4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099f6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099f8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80099fa:	2301      	movs	r3, #1
 80099fc:	4a53      	ldr	r2, [pc, #332]	; (8009b4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80099fe:	60d3      	str	r3, [r2, #12]
 8009a00:	e78c      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a02:	4b50      	ldr	r3, [pc, #320]	; (8009b44 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009a04:	4949      	ldr	r1, [pc, #292]	; (8009b2c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8009a06:	4a4a      	ldr	r2, [pc, #296]	; (8009b30 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009a08:	429d      	cmp	r5, r3
 8009a0a:	bf18      	it	ne
 8009a0c:	428d      	cmpne	r5, r1
 8009a0e:	bf14      	ite	ne
 8009a10:	2301      	movne	r3, #1
 8009a12:	2300      	moveq	r3, #0
 8009a14:	4295      	cmp	r5, r2
 8009a16:	bf0c      	ite	eq
 8009a18:	2300      	moveq	r3, #0
 8009a1a:	f003 0301 	andne.w	r3, r3, #1
 8009a1e:	b11b      	cbz	r3, 8009a28 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 8009a20:	4b44      	ldr	r3, [pc, #272]	; (8009b34 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009a22:	429d      	cmp	r5, r3
 8009a24:	f040 80be 	bne.w	8009ba4 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 8009a28:	4b48      	ldr	r3, [pc, #288]	; (8009b4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a2a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a2c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a2e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a30:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a32:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a34:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a36:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a38:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	4a43      	ldr	r2, [pc, #268]	; (8009b4c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 8009a3e:	6093      	str	r3, [r2, #8]
 8009a40:	e76c      	b.n	800991c <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a42:	3b48      	subs	r3, #72	; 0x48
 8009a44:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009a48:	3218      	adds	r2, #24
 8009a4a:	429d      	cmp	r5, r3
 8009a4c:	bf18      	it	ne
 8009a4e:	428d      	cmpne	r5, r1
 8009a50:	bf14      	ite	ne
 8009a52:	2301      	movne	r3, #1
 8009a54:	2300      	moveq	r3, #0
 8009a56:	4295      	cmp	r5, r2
 8009a58:	bf0c      	ite	eq
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	f003 0301 	andne.w	r3, r3, #1
 8009a60:	b11b      	cbz	r3, 8009a6a <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 8009a62:	4b3b      	ldr	r3, [pc, #236]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009a64:	429d      	cmp	r5, r3
 8009a66:	f040 8210 	bne.w	8009e8a <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 8009a6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a6e:	4b39      	ldr	r3, [pc, #228]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009a70:	4839      	ldr	r0, [pc, #228]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a72:	4a31      	ldr	r2, [pc, #196]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a74:	429d      	cmp	r5, r3
 8009a76:	bf18      	it	ne
 8009a78:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a7a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a7c:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8009a80:	bf14      	ite	ne
 8009a82:	2301      	movne	r3, #1
 8009a84:	2300      	moveq	r3, #0
 8009a86:	4295      	cmp	r5, r2
 8009a88:	bf0c      	ite	eq
 8009a8a:	2300      	moveq	r3, #0
 8009a8c:	f003 0301 	andne.w	r3, r3, #1
 8009a90:	b11b      	cbz	r3, 8009a9a <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8009a92:	4b2f      	ldr	r3, [pc, #188]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009a94:	429d      	cmp	r5, r3
 8009a96:	f040 8212 	bne.w	8009ebe <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 8009a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009a9e:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009aa0:	482d      	ldr	r0, [pc, #180]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009aa2:	4925      	ldr	r1, [pc, #148]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009aa4:	429d      	cmp	r5, r3
 8009aa6:	bf18      	it	ne
 8009aa8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009aaa:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009aac:	bf14      	ite	ne
 8009aae:	2301      	movne	r3, #1
 8009ab0:	2300      	moveq	r3, #0
 8009ab2:	4a2a      	ldr	r2, [pc, #168]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009ab4:	4295      	cmp	r5, r2
 8009ab6:	bf0c      	ite	eq
 8009ab8:	2300      	moveq	r3, #0
 8009aba:	f003 0301 	andne.w	r3, r3, #1
 8009abe:	b11b      	cbz	r3, 8009ac8 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8009ac0:	4b23      	ldr	r3, [pc, #140]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009ac2:	429d      	cmp	r5, r3
 8009ac4:	f040 822b 	bne.w	8009f1e <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8009ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009acc:	4b22      	ldr	r3, [pc, #136]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009ace:	4821      	ldr	r0, [pc, #132]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ad0:	4919      	ldr	r1, [pc, #100]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ad2:	429d      	cmp	r5, r3
 8009ad4:	bf18      	it	ne
 8009ad6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ad8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ada:	bf14      	ite	ne
 8009adc:	2301      	movne	r3, #1
 8009ade:	2300      	moveq	r3, #0
 8009ae0:	4a1e      	ldr	r2, [pc, #120]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009ae2:	4295      	cmp	r5, r2
 8009ae4:	bf0c      	ite	eq
 8009ae6:	2300      	moveq	r3, #0
 8009ae8:	f003 0301 	andne.w	r3, r3, #1
 8009aec:	b11b      	cbz	r3, 8009af6 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 8009aee:	4b18      	ldr	r3, [pc, #96]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009af0:	429d      	cmp	r5, r3
 8009af2:	f040 81fc 	bne.w	8009eee <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8009af6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009afa:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8009afc:	4815      	ldr	r0, [pc, #84]	; (8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009afe:	490e      	ldr	r1, [pc, #56]	; (8009b38 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b00:	429d      	cmp	r5, r3
 8009b02:	bf18      	it	ne
 8009b04:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b06:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009b08:	bf14      	ite	ne
 8009b0a:	2301      	movne	r3, #1
 8009b0c:	2300      	moveq	r3, #0
 8009b0e:	4a13      	ldr	r2, [pc, #76]	; (8009b5c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009b10:	4295      	cmp	r5, r2
 8009b12:	bf0c      	ite	eq
 8009b14:	2300      	moveq	r3, #0
 8009b16:	f003 0301 	andne.w	r3, r3, #1
 8009b1a:	b11b      	cbz	r3, 8009b24 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8009b1c:	4b0c      	ldr	r3, [pc, #48]	; (8009b50 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009b1e:	429d      	cmp	r5, r3
 8009b20:	f040 8215 	bne.w	8009f4e <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	e73b      	b.n	80099a0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 8009b28:	40026458 	.word	0x40026458
 8009b2c:	40026010 	.word	0x40026010
 8009b30:	40026070 	.word	0x40026070
 8009b34:	40026470 	.word	0x40026470
 8009b38:	40026400 	.word	0x40026400
 8009b3c:	0802c90c 	.word	0x0802c90c
 8009b40:	400260b8 	.word	0x400260b8
 8009b44:	40026410 	.word	0x40026410
 8009b48:	40026058 	.word	0x40026058
 8009b4c:	40026000 	.word	0x40026000
 8009b50:	40026488 	.word	0x40026488
 8009b54:	40026028 	.word	0x40026028
 8009b58:	40026428 	.word	0x40026428
 8009b5c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009b60:	3b48      	subs	r3, #72	; 0x48
 8009b62:	3118      	adds	r1, #24
 8009b64:	3218      	adds	r2, #24
 8009b66:	429d      	cmp	r5, r3
 8009b68:	bf18      	it	ne
 8009b6a:	428d      	cmpne	r5, r1
 8009b6c:	bf14      	ite	ne
 8009b6e:	2301      	movne	r3, #1
 8009b70:	2300      	moveq	r3, #0
 8009b72:	4295      	cmp	r5, r2
 8009b74:	bf0c      	ite	eq
 8009b76:	2300      	moveq	r3, #0
 8009b78:	f003 0301 	andne.w	r3, r3, #1
 8009b7c:	b11b      	cbz	r3, 8009b86 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 8009b7e:	4b7d      	ldr	r3, [pc, #500]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009b80:	429d      	cmp	r5, r3
 8009b82:	f040 8103 	bne.w	8009d8c <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8009b86:	4b7c      	ldr	r3, [pc, #496]	; (8009d78 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8009b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009b90:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009b92:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009b96:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b98:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009b9c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b9e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009ba0:	2240      	movs	r2, #64	; 0x40
 8009ba2:	e6b9      	b.n	8009918 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009ba4:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009ba8:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009bac:	3218      	adds	r2, #24
 8009bae:	429d      	cmp	r5, r3
 8009bb0:	bf18      	it	ne
 8009bb2:	428d      	cmpne	r5, r1
 8009bb4:	bf14      	ite	ne
 8009bb6:	2301      	movne	r3, #1
 8009bb8:	2300      	moveq	r3, #0
 8009bba:	4295      	cmp	r5, r2
 8009bbc:	bf0c      	ite	eq
 8009bbe:	2300      	moveq	r3, #0
 8009bc0:	f003 0301 	andne.w	r3, r3, #1
 8009bc4:	b11b      	cbz	r3, 8009bce <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 8009bc6:	4b6b      	ldr	r3, [pc, #428]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009bc8:	429d      	cmp	r5, r3
 8009bca:	f040 81d8 	bne.w	8009f7e <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 8009bce:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bd2:	4b6a      	ldr	r3, [pc, #424]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009bd4:	486a      	ldr	r0, [pc, #424]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bd6:	4a6b      	ldr	r2, [pc, #428]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009bd8:	429d      	cmp	r5, r3
 8009bda:	bf18      	it	ne
 8009bdc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009bde:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009be0:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009be4:	bf14      	ite	ne
 8009be6:	2301      	movne	r3, #1
 8009be8:	2300      	moveq	r3, #0
 8009bea:	4295      	cmp	r5, r2
 8009bec:	bf0c      	ite	eq
 8009bee:	2300      	moveq	r3, #0
 8009bf0:	f003 0301 	andne.w	r3, r3, #1
 8009bf4:	b11b      	cbz	r3, 8009bfe <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8009bf6:	4b5f      	ldr	r3, [pc, #380]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009bf8:	429d      	cmp	r5, r3
 8009bfa:	f040 81d9 	bne.w	8009fb0 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 8009bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c02:	4b5e      	ldr	r3, [pc, #376]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009c04:	485e      	ldr	r0, [pc, #376]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c06:	495f      	ldr	r1, [pc, #380]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c08:	429d      	cmp	r5, r3
 8009c0a:	bf18      	it	ne
 8009c0c:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c0e:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c10:	bf14      	ite	ne
 8009c12:	2301      	movne	r3, #1
 8009c14:	2300      	moveq	r3, #0
 8009c16:	4a5c      	ldr	r2, [pc, #368]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c18:	4295      	cmp	r5, r2
 8009c1a:	bf0c      	ite	eq
 8009c1c:	2300      	moveq	r3, #0
 8009c1e:	f003 0301 	andne.w	r3, r3, #1
 8009c22:	b11b      	cbz	r3, 8009c2c <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 8009c24:	4b53      	ldr	r3, [pc, #332]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c26:	429d      	cmp	r5, r3
 8009c28:	f040 822c 	bne.w	800a084 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 8009c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c30:	4b53      	ldr	r3, [pc, #332]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009c32:	4852      	ldr	r0, [pc, #328]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c34:	4953      	ldr	r1, [pc, #332]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c36:	429d      	cmp	r5, r3
 8009c38:	bf18      	it	ne
 8009c3a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c3c:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c3e:	bf14      	ite	ne
 8009c40:	2301      	movne	r3, #1
 8009c42:	2300      	moveq	r3, #0
 8009c44:	4a50      	ldr	r2, [pc, #320]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c46:	4295      	cmp	r5, r2
 8009c48:	bf0c      	ite	eq
 8009c4a:	2300      	moveq	r3, #0
 8009c4c:	f003 0301 	andne.w	r3, r3, #1
 8009c50:	b11b      	cbz	r3, 8009c5a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009c52:	4b48      	ldr	r3, [pc, #288]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c54:	429d      	cmp	r5, r3
 8009c56:	f040 81db 	bne.w	800a010 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 8009c5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c5e:	4b47      	ldr	r3, [pc, #284]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009c60:	4847      	ldr	r0, [pc, #284]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c62:	4948      	ldr	r1, [pc, #288]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c64:	429d      	cmp	r5, r3
 8009c66:	bf18      	it	ne
 8009c68:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c6a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c6c:	bf14      	ite	ne
 8009c6e:	2301      	movne	r3, #1
 8009c70:	2300      	moveq	r3, #0
 8009c72:	4a45      	ldr	r2, [pc, #276]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009c74:	4295      	cmp	r5, r2
 8009c76:	bf0c      	ite	eq
 8009c78:	2300      	moveq	r3, #0
 8009c7a:	f003 0301 	andne.w	r3, r3, #1
 8009c7e:	b11b      	cbz	r3, 8009c88 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 8009c80:	4b3c      	ldr	r3, [pc, #240]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009c82:	429d      	cmp	r5, r3
 8009c84:	f040 822d 	bne.w	800a0e2 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	e6d7      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c8c:	3b48      	subs	r3, #72	; 0x48
 8009c8e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009c92:	3218      	adds	r2, #24
 8009c94:	429d      	cmp	r5, r3
 8009c96:	bf18      	it	ne
 8009c98:	428d      	cmpne	r5, r1
 8009c9a:	bf14      	ite	ne
 8009c9c:	2301      	movne	r3, #1
 8009c9e:	2300      	moveq	r3, #0
 8009ca0:	4295      	cmp	r5, r2
 8009ca2:	bf0c      	ite	eq
 8009ca4:	2300      	moveq	r3, #0
 8009ca6:	f003 0301 	andne.w	r3, r3, #1
 8009caa:	b11b      	cbz	r3, 8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 8009cac:	4b31      	ldr	r3, [pc, #196]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009cae:	429d      	cmp	r5, r3
 8009cb0:	f040 81d0 	bne.w	800a054 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8009cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cb8:	4b31      	ldr	r3, [pc, #196]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009cba:	4830      	ldr	r0, [pc, #192]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009cbc:	4a31      	ldr	r2, [pc, #196]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cbe:	429d      	cmp	r5, r3
 8009cc0:	bf18      	it	ne
 8009cc2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009cc4:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cc6:	f102 0288 	add.w	r2, r2, #136	; 0x88
 8009cca:	bf14      	ite	ne
 8009ccc:	2301      	movne	r3, #1
 8009cce:	2300      	moveq	r3, #0
 8009cd0:	4295      	cmp	r5, r2
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2300      	moveq	r3, #0
 8009cd6:	f003 0301 	andne.w	r3, r3, #1
 8009cda:	b11b      	cbz	r3, 8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 8009cdc:	4b25      	ldr	r3, [pc, #148]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009cde:	429d      	cmp	r5, r3
 8009ce0:	f040 817e 	bne.w	8009fe0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8009ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009ce8:	4b24      	ldr	r3, [pc, #144]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009cea:	4825      	ldr	r0, [pc, #148]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cec:	4925      	ldr	r1, [pc, #148]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009cee:	429d      	cmp	r5, r3
 8009cf0:	bf18      	it	ne
 8009cf2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009cf4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009cf6:	bf14      	ite	ne
 8009cf8:	2301      	movne	r3, #1
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	4a22      	ldr	r2, [pc, #136]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009cfe:	4295      	cmp	r5, r2
 8009d00:	bf0c      	ite	eq
 8009d02:	2300      	moveq	r3, #0
 8009d04:	f003 0301 	andne.w	r3, r3, #1
 8009d08:	b11b      	cbz	r3, 8009d12 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8009d0a:	4b1a      	ldr	r3, [pc, #104]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d0c:	429d      	cmp	r5, r3
 8009d0e:	f040 81fe 	bne.w	800a10e <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 8009d12:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d16:	4b1a      	ldr	r3, [pc, #104]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009d18:	4818      	ldr	r0, [pc, #96]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d1a:	491a      	ldr	r1, [pc, #104]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d1c:	429d      	cmp	r5, r3
 8009d1e:	bf18      	it	ne
 8009d20:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009d22:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d24:	bf14      	ite	ne
 8009d26:	2301      	movne	r3, #1
 8009d28:	2300      	moveq	r3, #0
 8009d2a:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009d2c:	4295      	cmp	r5, r2
 8009d2e:	bf0c      	ite	eq
 8009d30:	2300      	moveq	r3, #0
 8009d32:	f003 0301 	andne.w	r3, r3, #1
 8009d36:	b11b      	cbz	r3, 8009d40 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8009d38:	4b0e      	ldr	r3, [pc, #56]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d3a:	429d      	cmp	r5, r3
 8009d3c:	f040 81ba 	bne.w	800a0b4 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8009d40:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d44:	4b0e      	ldr	r3, [pc, #56]	; (8009d80 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009d46:	480d      	ldr	r0, [pc, #52]	; (8009d7c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d48:	490e      	ldr	r1, [pc, #56]	; (8009d84 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d4a:	429d      	cmp	r5, r3
 8009d4c:	bf18      	it	ne
 8009d4e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009d50:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009d52:	bf14      	ite	ne
 8009d54:	2301      	movne	r3, #1
 8009d56:	2300      	moveq	r3, #0
 8009d58:	4a0b      	ldr	r2, [pc, #44]	; (8009d88 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009d5a:	4295      	cmp	r5, r2
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	f003 0301 	andne.w	r3, r3, #1
 8009d64:	b11b      	cbz	r3, 8009d6e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8009d66:	4b03      	ldr	r3, [pc, #12]	; (8009d74 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009d68:	429d      	cmp	r5, r3
 8009d6a:	f040 81e6 	bne.w	800a13a <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 8009d6e:	2340      	movs	r3, #64	; 0x40
 8009d70:	e644      	b.n	80099fc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009d72:	bf00      	nop
 8009d74:	40026488 	.word	0x40026488
 8009d78:	40026400 	.word	0x40026400
 8009d7c:	40026428 	.word	0x40026428
 8009d80:	40026028 	.word	0x40026028
 8009d84:	40026000 	.word	0x40026000
 8009d88:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009d8c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009d90:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009d94:	3218      	adds	r2, #24
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf18      	it	ne
 8009d9a:	428d      	cmpne	r5, r1
 8009d9c:	bf14      	ite	ne
 8009d9e:	2301      	movne	r3, #1
 8009da0:	2300      	moveq	r3, #0
 8009da2:	4295      	cmp	r5, r2
 8009da4:	bf0c      	ite	eq
 8009da6:	2300      	moveq	r3, #0
 8009da8:	f003 0301 	andne.w	r3, r3, #1
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	f000 81e6 	beq.w	800a17e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009db2:	4ba3      	ldr	r3, [pc, #652]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009db4:	429d      	cmp	r5, r3
 8009db6:	f000 81e2 	beq.w	800a17e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009dba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009dbe:	4ba1      	ldr	r3, [pc, #644]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009dc0:	48a1      	ldr	r0, [pc, #644]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009dc2:	4aa2      	ldr	r2, [pc, #648]	; (800a04c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009dc4:	429d      	cmp	r5, r3
 8009dc6:	bf18      	it	ne
 8009dc8:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009dca:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009dcc:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009dd0:	bf14      	ite	ne
 8009dd2:	2301      	movne	r3, #1
 8009dd4:	2300      	moveq	r3, #0
 8009dd6:	4295      	cmp	r5, r2
 8009dd8:	bf0c      	ite	eq
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	f003 0301 	andne.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 81c9 	beq.w	800a178 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009de6:	4b96      	ldr	r3, [pc, #600]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009de8:	429d      	cmp	r5, r3
 8009dea:	f000 81c5 	beq.w	800a178 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 8009dee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009df2:	4b94      	ldr	r3, [pc, #592]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009df4:	4894      	ldr	r0, [pc, #592]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009df6:	4995      	ldr	r1, [pc, #596]	; (800a04c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009df8:	429d      	cmp	r5, r3
 8009dfa:	bf18      	it	ne
 8009dfc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009dfe:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e00:	bf14      	ite	ne
 8009e02:	2301      	movne	r3, #1
 8009e04:	2300      	moveq	r3, #0
 8009e06:	4a92      	ldr	r2, [pc, #584]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e08:	4295      	cmp	r5, r2
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2300      	moveq	r3, #0
 8009e0e:	f003 0301 	andne.w	r3, r3, #1
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 81ad 	beq.w	800a172 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009e18:	4b89      	ldr	r3, [pc, #548]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e1a:	429d      	cmp	r5, r3
 8009e1c:	f000 81a9 	beq.w	800a172 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 8009e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e24:	4b87      	ldr	r3, [pc, #540]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009e26:	4888      	ldr	r0, [pc, #544]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e28:	4988      	ldr	r1, [pc, #544]	; (800a04c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e2a:	429d      	cmp	r5, r3
 8009e2c:	bf18      	it	ne
 8009e2e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009e30:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e32:	bf14      	ite	ne
 8009e34:	2301      	movne	r3, #1
 8009e36:	2300      	moveq	r3, #0
 8009e38:	4a85      	ldr	r2, [pc, #532]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e3a:	4295      	cmp	r5, r2
 8009e3c:	bf0c      	ite	eq
 8009e3e:	2300      	moveq	r3, #0
 8009e40:	f003 0301 	andne.w	r3, r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f000 8191 	beq.w	800a16c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009e4a:	4b7d      	ldr	r3, [pc, #500]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e4c:	429d      	cmp	r5, r3
 8009e4e:	f000 818d 	beq.w	800a16c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009e52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e56:	4b7b      	ldr	r3, [pc, #492]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009e58:	487b      	ldr	r0, [pc, #492]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e5a:	497c      	ldr	r1, [pc, #496]	; (800a04c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e5c:	429d      	cmp	r5, r3
 8009e5e:	bf18      	it	ne
 8009e60:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009e62:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009e64:	bf14      	ite	ne
 8009e66:	2301      	movne	r3, #1
 8009e68:	2300      	moveq	r3, #0
 8009e6a:	4a79      	ldr	r2, [pc, #484]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009e6c:	4295      	cmp	r5, r2
 8009e6e:	bf0c      	ite	eq
 8009e70:	2300      	moveq	r3, #0
 8009e72:	f003 0301 	andne.w	r3, r3, #1
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 8174 	beq.w	800a164 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009e7c:	4b70      	ldr	r3, [pc, #448]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009e7e:	429d      	cmp	r5, r3
 8009e80:	f000 8170 	beq.w	800a164 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009e84:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009e88:	e546      	b.n	8009918 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009e8a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009e8e:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009e92:	3218      	adds	r2, #24
 8009e94:	429d      	cmp	r5, r3
 8009e96:	bf18      	it	ne
 8009e98:	428d      	cmpne	r5, r1
 8009e9a:	bf14      	ite	ne
 8009e9c:	2301      	movne	r3, #1
 8009e9e:	2300      	moveq	r3, #0
 8009ea0:	4295      	cmp	r5, r2
 8009ea2:	bf0c      	ite	eq
 8009ea4:	2300      	moveq	r3, #0
 8009ea6:	f003 0301 	andne.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	f000 816d 	beq.w	800a18a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009eb0:	4b63      	ldr	r3, [pc, #396]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009eb2:	429d      	cmp	r5, r3
 8009eb4:	f000 8169 	beq.w	800a18a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009eb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009ebc:	e5d7      	b.n	8009a6e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ebe:	4b62      	ldr	r3, [pc, #392]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ec0:	4960      	ldr	r1, [pc, #384]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009ec2:	4a63      	ldr	r2, [pc, #396]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009ec4:	429d      	cmp	r5, r3
 8009ec6:	bf18      	it	ne
 8009ec8:	428d      	cmpne	r5, r1
 8009eca:	bf14      	ite	ne
 8009ecc:	2301      	movne	r3, #1
 8009ece:	2300      	moveq	r3, #0
 8009ed0:	4295      	cmp	r5, r2
 8009ed2:	bf0c      	ite	eq
 8009ed4:	2300      	moveq	r3, #0
 8009ed6:	f003 0301 	andne.w	r3, r3, #1
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 815b 	beq.w	800a196 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009ee0:	4b57      	ldr	r3, [pc, #348]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ee2:	429d      	cmp	r5, r3
 8009ee4:	f000 8157 	beq.w	800a196 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8009ee8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009eec:	e5d7      	b.n	8009a9e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009eee:	4b55      	ldr	r3, [pc, #340]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009ef0:	4955      	ldr	r1, [pc, #340]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ef2:	4a57      	ldr	r2, [pc, #348]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009ef4:	429d      	cmp	r5, r3
 8009ef6:	bf18      	it	ne
 8009ef8:	428d      	cmpne	r5, r1
 8009efa:	bf14      	ite	ne
 8009efc:	2301      	movne	r3, #1
 8009efe:	2300      	moveq	r3, #0
 8009f00:	4295      	cmp	r5, r2
 8009f02:	bf0c      	ite	eq
 8009f04:	2300      	moveq	r3, #0
 8009f06:	f003 0301 	andne.w	r3, r3, #1
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	f000 8140 	beq.w	800a190 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009f10:	4b4b      	ldr	r3, [pc, #300]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f12:	429d      	cmp	r5, r3
 8009f14:	f000 813c 	beq.w	800a190 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8009f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f1c:	e5ed      	b.n	8009afa <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009f1e:	4b49      	ldr	r3, [pc, #292]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009f20:	4949      	ldr	r1, [pc, #292]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009f22:	4a4b      	ldr	r2, [pc, #300]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009f24:	429d      	cmp	r5, r3
 8009f26:	bf18      	it	ne
 8009f28:	428d      	cmpne	r5, r1
 8009f2a:	bf14      	ite	ne
 8009f2c:	2301      	movne	r3, #1
 8009f2e:	2300      	moveq	r3, #0
 8009f30:	4295      	cmp	r5, r2
 8009f32:	bf0c      	ite	eq
 8009f34:	2300      	moveq	r3, #0
 8009f36:	f003 0301 	andne.w	r3, r3, #1
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 812e 	beq.w	800a19c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009f40:	4b3f      	ldr	r3, [pc, #252]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f42:	429d      	cmp	r5, r3
 8009f44:	f000 812a 	beq.w	800a19c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009f48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009f4c:	e5be      	b.n	8009acc <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009f4e:	4b3d      	ldr	r3, [pc, #244]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009f50:	493d      	ldr	r1, [pc, #244]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009f52:	4a3f      	ldr	r2, [pc, #252]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009f54:	429d      	cmp	r5, r3
 8009f56:	bf18      	it	ne
 8009f58:	428d      	cmpne	r5, r1
 8009f5a:	bf14      	ite	ne
 8009f5c:	2301      	movne	r3, #1
 8009f5e:	2300      	moveq	r3, #0
 8009f60:	4295      	cmp	r5, r2
 8009f62:	bf0c      	ite	eq
 8009f64:	2300      	moveq	r3, #0
 8009f66:	f003 0301 	andne.w	r3, r3, #1
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 810a 	beq.w	800a184 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009f70:	4b33      	ldr	r3, [pc, #204]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009f72:	429d      	cmp	r5, r3
 8009f74:	f000 8106 	beq.w	800a184 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f7c:	e510      	b.n	80099a0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009f7e:	3b48      	subs	r3, #72	; 0x48
 8009f80:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009f84:	3218      	adds	r2, #24
 8009f86:	429d      	cmp	r5, r3
 8009f88:	bf18      	it	ne
 8009f8a:	428d      	cmpne	r5, r1
 8009f8c:	bf14      	ite	ne
 8009f8e:	2301      	movne	r3, #1
 8009f90:	2300      	moveq	r3, #0
 8009f92:	4295      	cmp	r5, r2
 8009f94:	bf0c      	ite	eq
 8009f96:	2300      	moveq	r3, #0
 8009f98:	f003 0301 	andne.w	r3, r3, #1
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f000 8112 	beq.w	800a1c6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009fa2:	4b27      	ldr	r3, [pc, #156]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009fa4:	429d      	cmp	r5, r3
 8009fa6:	f000 810e 	beq.w	800a1c6 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009faa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009fae:	e610      	b.n	8009bd2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009fb0:	4b24      	ldr	r3, [pc, #144]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009fb2:	4925      	ldr	r1, [pc, #148]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009fb4:	4a26      	ldr	r2, [pc, #152]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009fb6:	429d      	cmp	r5, r3
 8009fb8:	bf18      	it	ne
 8009fba:	428d      	cmpne	r5, r1
 8009fbc:	bf14      	ite	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	2300      	moveq	r3, #0
 8009fc2:	4295      	cmp	r5, r2
 8009fc4:	bf0c      	ite	eq
 8009fc6:	2300      	moveq	r3, #0
 8009fc8:	f003 0301 	andne.w	r3, r3, #1
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 80ee 	beq.w	800a1ae <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009fd2:	4b1b      	ldr	r3, [pc, #108]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009fd4:	429d      	cmp	r5, r3
 8009fd6:	f000 80ea 	beq.w	800a1ae <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009fda:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009fde:	e610      	b.n	8009c02 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 8009fe0:	4b19      	ldr	r3, [pc, #100]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009fe2:	4918      	ldr	r1, [pc, #96]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009fe4:	4a1a      	ldr	r2, [pc, #104]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009fe6:	429d      	cmp	r5, r3
 8009fe8:	bf18      	it	ne
 8009fea:	428d      	cmpne	r5, r1
 8009fec:	bf14      	ite	ne
 8009fee:	2301      	movne	r3, #1
 8009ff0:	2300      	moveq	r3, #0
 8009ff2:	4295      	cmp	r5, r2
 8009ff4:	bf0c      	ite	eq
 8009ff6:	2300      	moveq	r3, #0
 8009ff8:	f003 0301 	andne.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 80e8 	beq.w	800a1d2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800a002:	4b0f      	ldr	r3, [pc, #60]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800a004:	429d      	cmp	r5, r3
 800a006:	f000 80e4 	beq.w	800a1d2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800a00a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a00e:	e66b      	b.n	8009ce8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a010:	4b0d      	ldr	r3, [pc, #52]	; (800a048 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 800a012:	490c      	ldr	r1, [pc, #48]	; (800a044 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 800a014:	4a0e      	ldr	r2, [pc, #56]	; (800a050 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800a016:	429d      	cmp	r5, r3
 800a018:	bf18      	it	ne
 800a01a:	428d      	cmpne	r5, r1
 800a01c:	bf14      	ite	ne
 800a01e:	2301      	movne	r3, #1
 800a020:	2300      	moveq	r3, #0
 800a022:	4295      	cmp	r5, r2
 800a024:	bf0c      	ite	eq
 800a026:	2300      	moveq	r3, #0
 800a028:	f003 0301 	andne.w	r3, r3, #1
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 80bb 	beq.w	800a1a8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800a032:	4b03      	ldr	r3, [pc, #12]	; (800a040 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800a034:	429d      	cmp	r5, r3
 800a036:	f000 80b7 	beq.w	800a1a8 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 800a03a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a03e:	e60e      	b.n	8009c5e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 800a040:	400264a0 	.word	0x400264a0
 800a044:	40026040 	.word	0x40026040
 800a048:	40026440 	.word	0x40026440
 800a04c:	40026400 	.word	0x40026400
 800a050:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a054:	3b48      	subs	r3, #72	; 0x48
 800a056:	3118      	adds	r1, #24
 800a058:	3218      	adds	r2, #24
 800a05a:	429d      	cmp	r5, r3
 800a05c:	bf18      	it	ne
 800a05e:	428d      	cmpne	r5, r1
 800a060:	bf14      	ite	ne
 800a062:	2301      	movne	r3, #1
 800a064:	2300      	moveq	r3, #0
 800a066:	4295      	cmp	r5, r2
 800a068:	bf0c      	ite	eq
 800a06a:	2300      	moveq	r3, #0
 800a06c:	f003 0301 	andne.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 80ab 	beq.w	800a1cc <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800a076:	4b5a      	ldr	r3, [pc, #360]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a078:	429d      	cmp	r5, r3
 800a07a:	f000 80a7 	beq.w	800a1cc <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 800a07e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800a082:	e619      	b.n	8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a084:	4b57      	ldr	r3, [pc, #348]	; (800a1e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a086:	4958      	ldr	r1, [pc, #352]	; (800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a088:	4a58      	ldr	r2, [pc, #352]	; (800a1ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a08a:	429d      	cmp	r5, r3
 800a08c:	bf18      	it	ne
 800a08e:	428d      	cmpne	r5, r1
 800a090:	bf14      	ite	ne
 800a092:	2301      	movne	r3, #1
 800a094:	2300      	moveq	r3, #0
 800a096:	4295      	cmp	r5, r2
 800a098:	bf0c      	ite	eq
 800a09a:	2300      	moveq	r3, #0
 800a09c:	f003 0301 	andne.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 808a 	beq.w	800a1ba <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800a0a6:	4b4e      	ldr	r3, [pc, #312]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a0a8:	429d      	cmp	r5, r3
 800a0aa:	f000 8086 	beq.w	800a1ba <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 800a0ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a0b2:	e5bd      	b.n	8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a0b4:	4b4c      	ldr	r3, [pc, #304]	; (800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a0b6:	494b      	ldr	r1, [pc, #300]	; (800a1e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a0b8:	4a4c      	ldr	r2, [pc, #304]	; (800a1ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a0ba:	429d      	cmp	r5, r3
 800a0bc:	bf18      	it	ne
 800a0be:	428d      	cmpne	r5, r1
 800a0c0:	bf14      	ite	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	2300      	moveq	r3, #0
 800a0c6:	4295      	cmp	r5, r2
 800a0c8:	bf0c      	ite	eq
 800a0ca:	2300      	moveq	r3, #0
 800a0cc:	f003 0301 	andne.w	r3, r3, #1
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 8081 	beq.w	800a1d8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800a0d6:	4b42      	ldr	r3, [pc, #264]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a0d8:	429d      	cmp	r5, r3
 800a0da:	d07d      	beq.n	800a1d8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 800a0dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0e0:	e630      	b.n	8009d44 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a0e2:	4b40      	ldr	r3, [pc, #256]	; (800a1e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a0e4:	4940      	ldr	r1, [pc, #256]	; (800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a0e6:	4a41      	ldr	r2, [pc, #260]	; (800a1ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a0e8:	429d      	cmp	r5, r3
 800a0ea:	bf18      	it	ne
 800a0ec:	428d      	cmpne	r5, r1
 800a0ee:	bf14      	ite	ne
 800a0f0:	2301      	movne	r3, #1
 800a0f2:	2300      	moveq	r3, #0
 800a0f4:	4295      	cmp	r5, r2
 800a0f6:	bf0c      	ite	eq
 800a0f8:	2300      	moveq	r3, #0
 800a0fa:	f003 0301 	andne.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d058      	beq.n	800a1b4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800a102:	4b37      	ldr	r3, [pc, #220]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a104:	429d      	cmp	r5, r3
 800a106:	d055      	beq.n	800a1b4 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 800a108:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a10c:	e496      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a10e:	4b35      	ldr	r3, [pc, #212]	; (800a1e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a110:	4935      	ldr	r1, [pc, #212]	; (800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a112:	4a36      	ldr	r2, [pc, #216]	; (800a1ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a114:	429d      	cmp	r5, r3
 800a116:	bf18      	it	ne
 800a118:	428d      	cmpne	r5, r1
 800a11a:	bf14      	ite	ne
 800a11c:	2301      	movne	r3, #1
 800a11e:	2300      	moveq	r3, #0
 800a120:	4295      	cmp	r5, r2
 800a122:	bf0c      	ite	eq
 800a124:	2300      	moveq	r3, #0
 800a126:	f003 0301 	andne.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d048      	beq.n	800a1c0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800a12e:	4b2c      	ldr	r3, [pc, #176]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a130:	429d      	cmp	r5, r3
 800a132:	d045      	beq.n	800a1c0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 800a134:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a138:	e5ed      	b.n	8009d16 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a13a:	4b2a      	ldr	r3, [pc, #168]	; (800a1e4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 800a13c:	492a      	ldr	r1, [pc, #168]	; (800a1e8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 800a13e:	4a2b      	ldr	r2, [pc, #172]	; (800a1ec <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 800a140:	429d      	cmp	r5, r3
 800a142:	bf18      	it	ne
 800a144:	428d      	cmpne	r5, r1
 800a146:	bf14      	ite	ne
 800a148:	2301      	movne	r3, #1
 800a14a:	2300      	moveq	r3, #0
 800a14c:	4295      	cmp	r5, r2
 800a14e:	bf0c      	ite	eq
 800a150:	2300      	moveq	r3, #0
 800a152:	f003 0301 	andne.w	r3, r3, #1
 800a156:	b323      	cbz	r3, 800a1a2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800a158:	4b21      	ldr	r3, [pc, #132]	; (800a1e0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 800a15a:	429d      	cmp	r5, r3
 800a15c:	d021      	beq.n	800a1a2 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 800a15e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a162:	e44b      	b.n	80099fc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 800a164:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a168:	f7ff bbd6 	b.w	8009918 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a16c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a170:	e671      	b.n	8009e56 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a172:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a176:	e655      	b.n	8009e24 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a178:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a17c:	e639      	b.n	8009df2 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a17e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a182:	e61c      	b.n	8009dbe <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a188:	e40a      	b.n	80099a0 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a18a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a18e:	e46e      	b.n	8009a6e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a190:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a194:	e4b1      	b.n	8009afa <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a196:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a19a:	e480      	b.n	8009a9e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a19c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1a0:	e494      	b.n	8009acc <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a1a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1a6:	e429      	b.n	80099fc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a1a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a1ac:	e557      	b.n	8009c5e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1b2:	e526      	b.n	8009c02 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800a1b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a1b8:	e440      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800a1ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1be:	e537      	b.n	8009c30 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 800a1c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1c4:	e5a7      	b.n	8009d16 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a1c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1ca:	e502      	b.n	8009bd2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 800a1cc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1d0:	e572      	b.n	8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a1d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a1d6:	e587      	b.n	8009ce8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800a1d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a1dc:	e5b2      	b.n	8009d44 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800a1de:	bf00      	nop
 800a1e0:	400264a0 	.word	0x400264a0
 800a1e4:	40026040 	.word	0x40026040
 800a1e8:	40026440 	.word	0x40026440
 800a1ec:	400260a0 	.word	0x400260a0

0800a1f0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800a1f4:	2900      	cmp	r1, #0
 800a1f6:	d15b      	bne.n	800a2b0 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 800a1f8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800a1fc:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a1fe:	69e3      	ldr	r3, [r4, #28]
 800a200:	b90b      	cbnz	r3, 800a206 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 800a202:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 800a206:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a208:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a20a:	4b2e      	ldr	r3, [pc, #184]	; (800a2c4 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 800a20c:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a20e:	402b      	ands	r3, r5
 800a210:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800a212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a216:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a218:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a21a:	f7fd ffbb 	bl	8008194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800a21e:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a220:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a222:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800a224:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a226:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a228:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 800a22a:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a22c:	f7fd ffb2 	bl	8008194 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800a230:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a232:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a236:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800a238:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a23a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800a23c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800a23e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a240:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800a242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a246:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 800a248:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a24a:	f7fd ffa3 	bl	8008194 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800a24e:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a250:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800a252:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a254:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 800a256:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a258:	f7fd ff9c 	bl	8008194 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800a25c:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a25e:	491a      	ldr	r1, [pc, #104]	; (800a2c8 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 800a260:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 800a264:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a266:	4a19      	ldr	r2, [pc, #100]	; (800a2cc <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 800a268:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800a26a:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a26c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a26e:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800a270:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 800a272:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a274:	f7fd ff8e 	bl	8008194 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800a278:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a27a:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a27c:	4a14      	ldr	r2, [pc, #80]	; (800a2d0 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 800a27e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a282:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a284:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 800a286:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a288:	f7fd ff84 	bl	8008194 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800a28c:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a28e:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 800a290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a294:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 800a296:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a298:	d103      	bne.n	800a2a2 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800a29a:	69d9      	ldr	r1, [r3, #28]
 800a29c:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <ETH_MACDMAConfig+0xe4>)
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a2a2:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	; (800a2d8 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800a2a6:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800a2a8:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800a2aa:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800a2ac:	645a      	str	r2, [r3, #68]	; 0x44
}
 800a2ae:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800a2b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 800a2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2b8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800a2bc:	e9c0 3202 	strd	r3, r2, [r0, #8]
 800a2c0:	e79d      	b.n	800a1fe <ETH_MACDMAConfig+0xe>
 800a2c2:	bf00      	nop
 800a2c4:	ff20810f 	.word	0xff20810f
 800a2c8:	f8de3f23 	.word	0xf8de3f23
 800a2cc:	02200004 	.word	0x02200004
 800a2d0:	02c12080 	.word	0x02c12080
 800a2d4:	00010040 	.word	0x00010040
 800a2d8:	40028000 	.word	0x40028000

0800a2dc <HAL_ETH_DMATxDescListInit>:
{
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 800a2e2:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800a2e6:	2801      	cmp	r0, #1
 800a2e8:	d03b      	beq.n	800a362 <HAL_ETH_DMATxDescListInit+0x86>
 800a2ea:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a2ee:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 800a2f0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 800a2f4:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a2f8:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 800a2fc:	b31b      	cbz	r3, 800a346 <HAL_ETH_DMATxDescListInit+0x6a>
 800a2fe:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a300:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 800a304:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a308:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a30a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 800a30e:	f10c 36ff 	add.w	r6, ip, #4294967295
 800a312:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800a316:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800a318:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800a31a:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a31c:	f1ba 0f00 	cmp.w	sl, #0
 800a320:	d103      	bne.n	800a32a <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800a322:	6817      	ldr	r7, [r2, #0]
 800a324:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 800a328:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 800a32a:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 800a32c:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 800a330:	bf34      	ite	cc
 800a332:	4675      	movcc	r5, lr
 800a334:	f102 0e20 	addcs.w	lr, r2, #32
 800a338:	4563      	cmp	r3, ip
 800a33a:	60d5      	str	r5, [r2, #12]
 800a33c:	f10c 0501 	add.w	r5, ip, #1
 800a340:	4672      	mov	r2, lr
 800a342:	46ac      	mov	ip, r5
 800a344:	d8e3      	bhi.n	800a30e <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a346:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 800a34a:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800a34c:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800a34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a352:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 800a354:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 800a358:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800a35a:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 800a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 800a362:	2002      	movs	r0, #2
}
 800a364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a368 <HAL_ETH_DMARxDescListInit>:
{
 800a368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a36c:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 800a36e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 800a372:	2801      	cmp	r0, #1
 800a374:	d033      	beq.n	800a3de <HAL_ETH_DMARxDescListInit+0x76>
 800a376:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a37a:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 800a37c:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 800a37e:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a382:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 800a386:	b1eb      	cbz	r3, 800a3c4 <HAL_ETH_DMARxDescListInit+0x5c>
 800a388:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 800a38a:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a38e:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a390:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a394:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 800a398:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800a39c:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800a39e:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 800a3a0:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 800a3a4:	45c6      	cmp	lr, r8
 800a3a6:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800a3aa:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a3ac:	bf34      	ite	cc
 800a3ae:	4675      	movcc	r5, lr
 800a3b0:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 800a3b4:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800a3b6:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 800a3b8:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 800a3ba:	f10c 0501 	add.w	r5, ip, #1
 800a3be:	4672      	mov	r2, lr
 800a3c0:	46ac      	mov	ip, r5
 800a3c2:	d8e9      	bhi.n	800a398 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a3c4:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 800a3c6:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 800a3c8:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800a3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ce:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 800a3d0:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 800a3d4:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 800a3d6:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 800a3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 800a3de:	2002      	movs	r0, #2
}
 800a3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3e4 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 800a3e4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d078      	beq.n	800a4de <HAL_ETH_TransmitFrame+0xfa>
 800a3ec:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 800a3f4:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800a3f8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d03c      	beq.n	800a47a <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a400:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800a402:	6818      	ldr	r0, [r3, #0]
 800a404:	2800      	cmp	r0, #0
 800a406:	db60      	blt.n	800a4ca <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a408:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800a40c:	4281      	cmp	r1, r0
{
 800a40e:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a410:	d93c      	bls.n	800a48c <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800a412:	4c34      	ldr	r4, [pc, #208]	; (800a4e4 <HAL_ETH_TransmitFrame+0x100>)
 800a414:	fba4 4c01 	umull	r4, ip, r4, r1
 800a418:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800a41c:	fb00 101c 	mls	r0, r0, ip, r1
 800a420:	2800      	cmp	r0, #0
 800a422:	d030      	beq.n	800a486 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 800a424:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a428:	482f      	ldr	r0, [pc, #188]	; (800a4e8 <HAL_ETH_TransmitFrame+0x104>)
 800a42a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 800a42e:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a430:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800a434:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 800a438:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a43c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 800a440:	e00f      	b.n	800a462 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 800a442:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a444:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 800a446:	d104      	bne.n	800a452 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a448:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a44a:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a44c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 800a450:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a452:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 800a454:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a456:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 800a45a:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a45c:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a45e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800a460:	d03b      	beq.n	800a4da <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a462:	6818      	ldr	r0, [r3, #0]
 800a464:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 800a468:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 800a46a:	2c00      	cmp	r4, #0
 800a46c:	d1e9      	bne.n	800a442 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a46e:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a470:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a472:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800a476:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 800a478:	e7eb      	b.n	800a452 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 800a47a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 800a47c:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a480:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 800a484:	4770      	bx	lr
  if (bufcount == 1)
 800a486:	f1bc 0f01 	cmp.w	ip, #1
 800a48a:	d1cd      	bne.n	800a428 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a48c:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a48e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a492:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a494:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a498:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a49a:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a49c:	6819      	ldr	r1, [r3, #0]
 800a49e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a4a2:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a4a4:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a4a6:	6813      	ldr	r3, [r2, #0]
 800a4a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ac:	6959      	ldr	r1, [r3, #20]
 800a4ae:	0749      	lsls	r1, r1, #29
 800a4b0:	d503      	bpl.n	800a4ba <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a4b2:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 800a4b4:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a4b6:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 800a4b8:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 800a4ba:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 800a4bc:	2101      	movs	r1, #1
  return HAL_OK;
 800a4be:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a4c0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a4c4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800a4c8:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a4ca:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 800a4cc:	2300      	movs	r3, #0
    return HAL_ERROR;
 800a4ce:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a4d0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a4d4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 800a4d8:	4770      	bx	lr
 800a4da:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4dc:	e7e3      	b.n	800a4a6 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 800a4de:	2002      	movs	r0, #2
}
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	ac02b00b 	.word	0xac02b00b
 800a4e8:	fffffa0c 	.word	0xfffffa0c

0800a4ec <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 800a4ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a4f0:	2b01      	cmp	r3, #1
 800a4f2:	d02f      	beq.n	800a554 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 800a4f4:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a4f6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a4f8:	4602      	mov	r2, r0
{
 800a4fa:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 800a4fc:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a4fe:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a502:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a506:	6819      	ldr	r1, [r3, #0]
 800a508:	2900      	cmp	r1, #0
 800a50a:	db15      	blt.n	800a538 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 800a50c:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a50e:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800a510:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800a512:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800a516:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a51a:	d016      	beq.n	800a54a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a51c:	6819      	ldr	r1, [r3, #0]
 800a51e:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800a522:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800a524:	d118      	bne.n	800a558 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a526:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 800a528:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800a52a:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 800a52c:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800a52e:	6819      	ldr	r1, [r3, #0]
 800a530:	2900      	cmp	r1, #0
 800a532:	db01      	blt.n	800a538 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800a534:	2804      	cmp	r0, #4
 800a536:	d1ea      	bne.n	800a50e <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800a538:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800a53a:	2100      	movs	r1, #0
  return HAL_ERROR;
 800a53c:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a53e:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a542:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800a546:	bc30      	pop	{r4, r5}
 800a548:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a54a:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a54c:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800a54e:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a550:	6293      	str	r3, [r2, #40]	; 0x28
 800a552:	e7ec      	b.n	800a52e <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800a554:	2002      	movs	r0, #2
}
 800a556:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800a558:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a55a:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a55c:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800a55e:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a560:	d011      	beq.n	800a586 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a562:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a564:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800a566:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a568:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a56a:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a56c:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800a570:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a572:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a574:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a576:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800a578:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800a57c:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a57e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800a580:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800a584:	e7df      	b.n	800a546 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a586:	4618      	mov	r0, r3
 800a588:	6313      	str	r3, [r2, #48]	; 0x30
 800a58a:	e7eb      	b.n	800a564 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800a58c <HAL_ETH_TxCpltCallback>:
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop

0800a590 <HAL_ETH_ErrorCallback>:
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop

0800a594 <HAL_ETH_IRQHandler>:
{
 800a594:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a596:	6803      	ldr	r3, [r0, #0]
{
 800a598:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a59a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59e:	695d      	ldr	r5, [r3, #20]
 800a5a0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800a5a4:	d125      	bne.n	800a5f2 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800a5a6:	695a      	ldr	r2, [r3, #20]
 800a5a8:	07d2      	lsls	r2, r2, #31
 800a5aa:	d416      	bmi.n	800a5da <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800a5ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a5b0:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	041b      	lsls	r3, r3, #16
 800a5b6:	d400      	bmi.n	800a5ba <HAL_ETH_IRQHandler+0x26>
}
 800a5b8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f7ff ffe8 	bl	800a590 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800a5c6:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a5cc:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a5ce:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a5d0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a5d4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a5d8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800a5da:	f7ff ffd7 	bl	800a58c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e6:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a5e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a5ec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a5f0:	e7dc      	b.n	800a5ac <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800a5f2:	f009 ff4f 	bl	8014494 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800a5fa:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a600:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a602:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a604:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a608:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a60c:	e7ce      	b.n	800a5ac <HAL_ETH_IRQHandler+0x18>
 800a60e:	bf00      	nop

0800a610 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a610:	8a03      	ldrh	r3, [r0, #16]
 800a612:	2b20      	cmp	r3, #32
{
 800a614:	b570      	push	{r4, r5, r6, lr}
 800a616:	4604      	mov	r4, r0
 800a618:	460e      	mov	r6, r1
 800a61a:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a61c:	d834      	bhi.n	800a688 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a61e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a622:	2b82      	cmp	r3, #130	; 0x82
 800a624:	d039      	beq.n	800a69a <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a626:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800a628:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a62a:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a62c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a630:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a632:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a636:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a638:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a63a:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a63e:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a640:	430b      	orrs	r3, r1
 800a642:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800a644:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800a648:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a64a:	f7fd fd9d 	bl	8008188 <HAL_GetTick>
 800a64e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a650:	e004      	b.n	800a65c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800a652:	6821      	ldr	r1, [r4, #0]
 800a654:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a656:	f013 0301 	ands.w	r3, r3, #1
 800a65a:	d00d      	beq.n	800a678 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a65c:	f7fd fd94 	bl	8008188 <HAL_GetTick>
 800a660:	1b83      	subs	r3, r0, r6
 800a662:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a666:	d3f4      	bcc.n	800a652 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800a668:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a66a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a66c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a66e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a676:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a678:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800a67a:	2101      	movs	r1, #1
  return HAL_OK;
 800a67c:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a67e:	b292      	uxth	r2, r2
 800a680:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a682:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800a686:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a688:	f240 5116 	movw	r1, #1302	; 0x516
 800a68c:	4804      	ldr	r0, [pc, #16]	; (800a6a0 <HAL_ETH_ReadPHYRegister+0x90>)
 800a68e:	f7fa fc91 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a692:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a696:	2b82      	cmp	r3, #130	; 0x82
 800a698:	d1c5      	bne.n	800a626 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800a69a:	2002      	movs	r0, #2
}
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	bf00      	nop
 800a6a0:	0802c948 	.word	0x0802c948

0800a6a4 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a6a4:	8a03      	ldrh	r3, [r0, #16]
 800a6a6:	2b20      	cmp	r3, #32
{
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	460d      	mov	r5, r1
 800a6ae:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a6b0:	d833      	bhi.n	800a71a <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a6b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6b6:	2b42      	cmp	r3, #66	; 0x42
 800a6b8:	d038      	beq.n	800a72c <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a6ba:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800a6bc:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a6be:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a6c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800a6c4:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6c6:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a6c8:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a6cc:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6ce:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a6d0:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a6d2:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a6d6:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a6d8:	430b      	orrs	r3, r1
 800a6da:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800a6dc:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800a6e0:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a6e2:	f7fd fd51 	bl	8008188 <HAL_GetTick>
 800a6e6:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a6e8:	e004      	b.n	800a6f4 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a6ee:	f013 0301 	ands.w	r3, r3, #1
 800a6f2:	d00d      	beq.n	800a710 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a6f4:	f7fd fd48 	bl	8008188 <HAL_GetTick>
 800a6f8:	1b43      	subs	r3, r0, r5
 800a6fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6fe:	d3f4      	bcc.n	800a6ea <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800a700:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a702:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a704:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a706:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a70a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800a710:	2201      	movs	r2, #1
  return HAL_OK; 
 800a712:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a714:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800a718:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a71a:	f240 515e 	movw	r1, #1374	; 0x55e
 800a71e:	4804      	ldr	r0, [pc, #16]	; (800a730 <HAL_ETH_WritePHYRegister+0x8c>)
 800a720:	f7fa fc48 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a724:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a728:	2b42      	cmp	r3, #66	; 0x42
 800a72a:	d1c6      	bne.n	800a6ba <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800a72c:	2002      	movs	r0, #2
}
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	0802c948 	.word	0x0802c948

0800a734 <HAL_ETH_Init>:
{
 800a734:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800a736:	2300      	movs	r3, #0
{
 800a738:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800a73a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800a73c:	2800      	cmp	r0, #0
 800a73e:	f000 80f5 	beq.w	800a92c <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a742:	6843      	ldr	r3, [r0, #4]
 800a744:	4604      	mov	r4, r0
 800a746:	2b01      	cmp	r3, #1
 800a748:	f200 809c 	bhi.w	800a884 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a74c:	69a3      	ldr	r3, [r4, #24]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	f200 808f 	bhi.w	800a872 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a754:	69e3      	ldr	r3, [r4, #28]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d873      	bhi.n	800a842 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a75a:	6a23      	ldr	r3, [r4, #32]
 800a75c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a760:	d177      	bne.n	800a852 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a762:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a766:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d07b      	beq.n	800a866 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a76e:	4b91      	ldr	r3, [pc, #580]	; (800a9b4 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a770:	4a91      	ldr	r2, [pc, #580]	; (800a9b8 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a772:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a774:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a778:	6459      	str	r1, [r3, #68]	; 0x44
 800a77a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a784:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a786:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a788:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a790:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a792:	6851      	ldr	r1, [r2, #4]
 800a794:	6a20      	ldr	r0, [r4, #32]
 800a796:	4301      	orrs	r1, r0
 800a798:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	f042 0201 	orr.w	r2, r2, #1
 800a7a0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a7a2:	f7fd fcf1 	bl	8008188 <HAL_GetTick>
 800a7a6:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a7a8:	e005      	b.n	800a7b6 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a7aa:	f7fd fced 	bl	8008188 <HAL_GetTick>
 800a7ae:	1b43      	subs	r3, r0, r5
 800a7b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a7b4:	d86f      	bhi.n	800a896 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a7b6:	6823      	ldr	r3, [r4, #0]
 800a7b8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a7bc:	6812      	ldr	r2, [r2, #0]
 800a7be:	07d0      	lsls	r0, r2, #31
 800a7c0:	d4f3      	bmi.n	800a7aa <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800a7c2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800a7c4:	f003 faac 	bl	800dd20 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a7c8:	4b7c      	ldr	r3, [pc, #496]	; (800a9bc <HAL_ETH_Init+0x288>)
 800a7ca:	4a7d      	ldr	r2, [pc, #500]	; (800a9c0 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a7cc:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a7d0:	4403      	add	r3, r0
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d274      	bcs.n	800a8c0 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a7d6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a7da:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a7dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a7e4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a7e6:	f7ff ff5d 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d15c      	bne.n	800a8aa <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800a7f0:	20ff      	movs	r0, #255	; 0xff
 800a7f2:	f7fd fccf 	bl	8008194 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a7f6:	6863      	ldr	r3, [r4, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d178      	bne.n	800a8ee <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a802:	f040 809e 	bne.w	800a942 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a806:	68e3      	ldr	r3, [r4, #12]
 800a808:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a80c:	f040 8092 	bne.w	800a934 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a810:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	2100      	movs	r1, #0
 800a816:	4620      	mov	r0, r4
 800a818:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800a81c:	b292      	uxth	r2, r2
 800a81e:	f7ff ff41 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
 800a822:	2800      	cmp	r0, #0
 800a824:	d141      	bne.n	800a8aa <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800a826:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a82a:	f7fd fcb3 	bl	8008194 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800a82e:	4620      	mov	r0, r4
 800a830:	2100      	movs	r1, #0
 800a832:	f7ff fcdd 	bl	800a1f0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800a836:	2301      	movs	r3, #1
}
 800a838:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800a83a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a83e:	b003      	add	sp, #12
 800a840:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a842:	21e0      	movs	r1, #224	; 0xe0
 800a844:	485f      	ldr	r0, [pc, #380]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a846:	f7fa fbb5 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a84a:	6a23      	ldr	r3, [r4, #32]
 800a84c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a850:	d087      	beq.n	800a762 <HAL_ETH_Init+0x2e>
 800a852:	21e1      	movs	r1, #225	; 0xe1
 800a854:	485b      	ldr	r0, [pc, #364]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a856:	f7fa fbad 	bl	8004fb4 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a85a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a85e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a862:	2b00      	cmp	r3, #0
 800a864:	d183      	bne.n	800a76e <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800a866:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800a868:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800a86c:	f009 fd84 	bl	8014378 <HAL_ETH_MspInit>
 800a870:	e77d      	b.n	800a76e <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a872:	21df      	movs	r1, #223	; 0xdf
 800a874:	4853      	ldr	r0, [pc, #332]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a876:	f7fa fb9d 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a87a:	69e3      	ldr	r3, [r4, #28]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	f67f af6c 	bls.w	800a75a <HAL_ETH_Init+0x26>
 800a882:	e7de      	b.n	800a842 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a884:	21de      	movs	r1, #222	; 0xde
 800a886:	484f      	ldr	r0, [pc, #316]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a888:	f7fa fb94 	bl	8004fb4 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a88c:	69a3      	ldr	r3, [r4, #24]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	f67f af60 	bls.w	800a754 <HAL_ETH_Init+0x20>
 800a894:	e7ed      	b.n	800a872 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a896:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800a898:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800a89a:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a89c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a8a0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	b003      	add	sp, #12
 800a8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	2101      	movs	r1, #1
 800a8ae:	f7ff fc9f 	bl	800a1f0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800a8b2:	2301      	movs	r3, #1
      return HAL_ERROR;
 800a8b4:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800a8b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	b003      	add	sp, #12
 800a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a8c0:	4b41      	ldr	r3, [pc, #260]	; (800a9c8 <HAL_ETH_Init+0x294>)
 800a8c2:	4a42      	ldr	r2, [pc, #264]	; (800a9cc <HAL_ETH_Init+0x298>)
 800a8c4:	4403      	add	r3, r0
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d90e      	bls.n	800a8e8 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a8ca:	4b41      	ldr	r3, [pc, #260]	; (800a9d0 <HAL_ETH_Init+0x29c>)
 800a8cc:	4a41      	ldr	r2, [pc, #260]	; (800a9d4 <HAL_ETH_Init+0x2a0>)
 800a8ce:	4403      	add	r3, r0
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d382      	bcc.n	800a7da <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a8d4:	4b40      	ldr	r3, [pc, #256]	; (800a9d8 <HAL_ETH_Init+0x2a4>)
 800a8d6:	4a41      	ldr	r2, [pc, #260]	; (800a9dc <HAL_ETH_Init+0x2a8>)
 800a8d8:	4403      	add	r3, r0
 800a8da:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a8dc:	bf94      	ite	ls
 800a8de:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a8e2:	f045 0510 	orrhi.w	r5, r5, #16
 800a8e6:	e778      	b.n	800a7da <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a8e8:	f045 050c 	orr.w	r5, r5, #12
 800a8ec:	e775      	b.n	800a7da <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800a8ee:	f7fd fc4b 	bl	8008188 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a8f2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	e002      	b.n	800a900 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a8fa:	9b00      	ldr	r3, [sp, #0]
 800a8fc:	0759      	lsls	r1, r3, #29
 800a8fe:	d426      	bmi.n	800a94e <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a900:	466a      	mov	r2, sp
 800a902:	2101      	movs	r1, #1
 800a904:	4620      	mov	r0, r4
 800a906:	f7ff fe83 	bl	800a610 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a90a:	f7fd fc3d 	bl	8008188 <HAL_GetTick>
 800a90e:	1b80      	subs	r0, r0, r6
 800a910:	42b8      	cmp	r0, r7
 800a912:	d9f2      	bls.n	800a8fa <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800a914:	2101      	movs	r1, #1
 800a916:	4620      	mov	r0, r4
 800a918:	f7ff fc6a 	bl	800a1f0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800a91c:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800a91e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a920:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800a922:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800a926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800a92a:	e7bb      	b.n	800a8a4 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800a92c:	2501      	movs	r5, #1
}
 800a92e:	4628      	mov	r0, r5
 800a930:	b003      	add	sp, #12
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a934:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800a938:	4822      	ldr	r0, [pc, #136]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a93a:	f7fa fb3b 	bl	8004fb4 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a93e:	68e3      	ldr	r3, [r4, #12]
 800a940:	e766      	b.n	800a810 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a942:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a946:	481f      	ldr	r0, [pc, #124]	; (800a9c4 <HAL_ETH_Init+0x290>)
 800a948:	f7fa fb34 	bl	8004fb4 <assert_failed>
 800a94c:	e75b      	b.n	800a806 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a94e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a952:	2100      	movs	r1, #0
 800a954:	4620      	mov	r0, r4
 800a956:	f7ff fea5 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d1a5      	bne.n	800a8aa <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800a95e:	f7fd fc13 	bl	8008188 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a962:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a966:	4606      	mov	r6, r0
 800a968:	e002      	b.n	800a970 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a96a:	9b00      	ldr	r3, [sp, #0]
 800a96c:	069a      	lsls	r2, r3, #26
 800a96e:	d40a      	bmi.n	800a986 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a970:	466a      	mov	r2, sp
 800a972:	2101      	movs	r1, #1
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff fe4b 	bl	800a610 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a97a:	f7fd fc05 	bl	8008188 <HAL_GetTick>
 800a97e:	1b80      	subs	r0, r0, r6
 800a980:	42b8      	cmp	r0, r7
 800a982:	d9f2      	bls.n	800a96a <HAL_ETH_Init+0x236>
 800a984:	e7c6      	b.n	800a914 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a986:	466a      	mov	r2, sp
 800a988:	2110      	movs	r1, #16
 800a98a:	4620      	mov	r0, r4
 800a98c:	f7ff fe40 	bl	800a610 <HAL_ETH_ReadPHYRegister>
 800a990:	2800      	cmp	r0, #0
 800a992:	d18a      	bne.n	800a8aa <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a994:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a996:	f013 0204 	ands.w	r2, r3, #4
 800a99a:	bf18      	it	ne
 800a99c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a9a0:	079b      	lsls	r3, r3, #30
 800a9a2:	60e2      	str	r2, [r4, #12]
 800a9a4:	d501      	bpl.n	800a9aa <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a9a6:	60a0      	str	r0, [r4, #8]
 800a9a8:	e741      	b.n	800a82e <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800a9aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a9ae:	60a3      	str	r3, [r4, #8]
 800a9b0:	e73d      	b.n	800a82e <HAL_ETH_Init+0xfa>
 800a9b2:	bf00      	nop
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	40013800 	.word	0x40013800
 800a9bc:	feced300 	.word	0xfeced300
 800a9c0:	00e4e1c0 	.word	0x00e4e1c0
 800a9c4:	0802c948 	.word	0x0802c948
 800a9c8:	fde9f140 	.word	0xfde9f140
 800a9cc:	017d783f 	.word	0x017d783f
 800a9d0:	fc6c7900 	.word	0xfc6c7900
 800a9d4:	02625a00 	.word	0x02625a00
 800a9d8:	fa0a1f00 	.word	0xfa0a1f00
 800a9dc:	02faf07f 	.word	0x02faf07f

0800a9e0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800a9e0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d044      	beq.n	800aa72 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a9e8:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a9ea:	2202      	movs	r2, #2
{  
 800a9ec:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800a9ee:	2601      	movs	r6, #1
{  
 800a9f0:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800a9f2:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800a9f4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a9f8:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800a9fc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800a9fe:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa00:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	f042 0208 	orr.w	r2, r2, #8
 800aa08:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa0e:	f7fd fbc1 	bl	8008194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aa12:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa14:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aa16:	6823      	ldr	r3, [r4, #0]
 800aa18:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800aa1a:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	f042 0204 	orr.w	r2, r2, #4
 800aa22:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa28:	f7fd fbb4 	bl	8008194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aa2c:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa2e:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aa30:	6823      	ldr	r3, [r4, #0]
 800aa32:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aa34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800aa38:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aa3a:	699a      	ldr	r2, [r3, #24]
 800aa3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa40:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa46:	f7fd fba5 	bl	8008194 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800aa4a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800aa4c:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800aa4e:	9a01      	ldr	r2, [sp, #4]
 800aa50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa54:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800aa56:	699a      	ldr	r2, [r3, #24]
 800aa58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800aa5c:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800aa5e:	699a      	ldr	r2, [r3, #24]
 800aa60:	f042 0202 	orr.w	r2, r2, #2
 800aa64:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800aa66:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800aa6a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800aa6e:	b004      	add	sp, #16
 800aa70:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800aa72:	2002      	movs	r0, #2
}
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop

0800aa78 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800aa78:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d046      	beq.n	800ab0e <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aa80:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800aa82:	2102      	movs	r1, #2
{  
 800aa84:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aa86:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800aa8a:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800aa8c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800aa90:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800aa92:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800aa96:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aa98:	6991      	ldr	r1, [r2, #24]
 800aa9a:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aa9c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800aa9e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800aaa2:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800aaa4:	6991      	ldr	r1, [r2, #24]
 800aaa6:	f021 0102 	bic.w	r1, r1, #2
 800aaaa:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800aaac:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	f022 0204 	bic.w	r2, r2, #4
 800aab4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aaba:	f7fd fb6b 	bl	8008194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aabe:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aac0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800aaca:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800aacc:	699a      	ldr	r2, [r3, #24]
 800aace:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aad2:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aad8:	f7fd fb5c 	bl	8008194 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800aadc:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aade:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800aae0:	9902      	ldr	r1, [sp, #8]
 800aae2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800aae6:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800aae8:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	f022 0208 	bic.w	r2, r2, #8
 800aaf0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800aaf6:	f7fd fb4d 	bl	8008194 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800aafa:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800aafc:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800ab02:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800ab06:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800ab0a:	b004      	add	sp, #16
 800ab0c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800ab0e:	2002      	movs	r0, #2
}
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop

0800ab14 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800ab14:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	f000 8249 	beq.w	800afb0 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab1e:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800ab20:	2202      	movs	r2, #2
{
 800ab22:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab24:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800ab28:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800ab2a:	f04f 0101 	mov.w	r1, #1
 800ab2e:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800ab30:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800ab34:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800ab38:	f040 8207 	bne.w	800af4a <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800ab3c:	68eb      	ldr	r3, [r5, #12]
 800ab3e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800ab42:	f040 8114 	bne.w	800ad6e <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800ab46:	2c00      	cmp	r4, #0
 800ab48:	f000 8119 	beq.w	800ad7e <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800ab4c:	6823      	ldr	r3, [r4, #0]
 800ab4e:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800ab52:	f040 8139 	bne.w	800adc8 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800ab56:	6863      	ldr	r3, [r4, #4]
 800ab58:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800ab5c:	f040 816b 	bne.w	800ae36 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ab66:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ab6a:	d002      	beq.n	800ab72 <HAL_ETH_ConfigMAC+0x5e>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8221 	bne.w	800afb4 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800ab72:	68e3      	ldr	r3, [r4, #12]
 800ab74:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ab78:	f040 8152 	bne.w	800ae20 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800ab82:	f040 8142 	bne.w	800ae0a <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800ab86:	6963      	ldr	r3, [r4, #20]
 800ab88:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800ab8c:	f040 8132 	bne.w	800adf4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800ab90:	69a3      	ldr	r3, [r4, #24]
 800ab92:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800ab96:	f040 8122 	bne.w	800adde <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800ab9a:	69e3      	ldr	r3, [r4, #28]
 800ab9c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800aba0:	f040 81a3 	bne.w	800aeea <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800aba4:	6a23      	ldr	r3, [r4, #32]
 800aba6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800abaa:	f040 818e 	bne.w	800aeca <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800abae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb0:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800abb4:	f040 8193 	bne.w	800aede <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800abb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800abba:	f033 0310 	bics.w	r3, r3, #16
 800abbe:	f040 8179 	bne.w	800aeb4 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800abc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800abc4:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800abc8:	f040 819a 	bne.w	800af00 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800abcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abce:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800abd2:	d003      	beq.n	800abdc <HAL_ETH_ConfigMAC+0xc8>
 800abd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abd8:	f040 81d8 	bne.w	800af8c <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800abdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800abde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800abe2:	2a40      	cmp	r2, #64	; 0x40
 800abe4:	d002      	beq.n	800abec <HAL_ETH_ConfigMAC+0xd8>
 800abe6:	2b80      	cmp	r3, #128	; 0x80
 800abe8:	f040 81ba 	bne.w	800af60 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800abec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800abee:	f033 0320 	bics.w	r3, r3, #32
 800abf2:	f040 80de 	bne.w	800adb2 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800abf6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abf8:	f033 0308 	bics.w	r3, r3, #8
 800abfc:	f040 80cf 	bne.w	800ad9e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800ac00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	f200 80a5 	bhi.w	800ad52 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800ac08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ac0a:	f240 4204 	movw	r2, #1028	; 0x404
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	bf18      	it	ne
 800ac12:	2b10      	cmpne	r3, #16
 800ac14:	d003      	beq.n	800ac1e <HAL_ETH_ConfigMAC+0x10a>
 800ac16:	f033 0304 	bics.w	r3, r3, #4
 800ac1a:	f040 81c3 	bne.w	800afa4 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800ac1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ac20:	f033 0202 	bics.w	r2, r3, #2
 800ac24:	d004      	beq.n	800ac30 <HAL_ETH_ConfigMAC+0x11c>
 800ac26:	f240 4202 	movw	r2, #1026	; 0x402
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	f040 81a3 	bne.w	800af76 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800ac30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac36:	f080 816e 	bcs.w	800af16 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800ac3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ac3c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ac40:	f040 8173 	bne.w	800af2a <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800ac44:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ac46:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800ac4a:	f040 8178 	bne.w	800af3e <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800ac4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ac50:	f033 0308 	bics.w	r3, r3, #8
 800ac54:	f040 8123 	bne.w	800ae9e <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800ac58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5a:	f033 0304 	bics.w	r3, r3, #4
 800ac5e:	f040 8113 	bne.w	800ae88 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ac62:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ac64:	f033 0302 	bics.w	r3, r3, #2
 800ac68:	f040 8103 	bne.w	800ae72 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ac6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ac6e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ac72:	f040 80f3 	bne.w	800ae5c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ac76:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ac78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac7c:	f080 80e8 	bcs.w	800ae50 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800ac80:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800ac82:	49b5      	ldr	r1, [pc, #724]	; (800af58 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800ac84:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800ac86:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800ac88:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800ac8a:	6860      	ldr	r0, [r4, #4]
 800ac8c:	4303      	orrs	r3, r0
 800ac8e:	68a0      	ldr	r0, [r4, #8]
 800ac90:	4303      	orrs	r3, r0
 800ac92:	68e0      	ldr	r0, [r4, #12]
 800ac94:	4303      	orrs	r3, r0
 800ac96:	6920      	ldr	r0, [r4, #16]
 800ac98:	4303      	orrs	r3, r0
 800ac9a:	6960      	ldr	r0, [r4, #20]
 800ac9c:	4303      	orrs	r3, r0
 800ac9e:	69a0      	ldr	r0, [r4, #24]
 800aca0:	4303      	orrs	r3, r0
 800aca2:	69e0      	ldr	r0, [r4, #28]
 800aca4:	4303      	orrs	r3, r0
 800aca6:	6a20      	ldr	r0, [r4, #32]
 800aca8:	4303      	orrs	r3, r0
 800acaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800acac:	4303      	orrs	r3, r0
 800acae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800acb0:	4303      	orrs	r3, r0
 800acb2:	68a8      	ldr	r0, [r5, #8]
 800acb4:	4303      	orrs	r3, r0
 800acb6:	68e8      	ldr	r0, [r5, #12]
 800acb8:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800acba:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800acbc:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800acbe:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800acc0:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800acc2:	f7fd fa67 	bl	8008194 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800acc6:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800acc8:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800acca:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800acce:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800acd0:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800acd2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd4:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800acd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acd8:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800acda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800acdc:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800acde:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ace0:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800ace2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ace4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800ace6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ace8:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800acea:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800acec:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800acee:	f7fd fa51 	bl	8008194 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800acf2:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800acf4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800acf6:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800acf8:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800acfa:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800acfc:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800ad00:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800ad02:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800ad04:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800ad06:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800ad0a:	4303      	orrs	r3, r0
 800ad0c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800ad0e:	4303      	orrs	r3, r0
 800ad10:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800ad12:	4303      	orrs	r3, r0
 800ad14:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ad16:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ad18:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800ad1a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad1e:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800ad20:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800ad22:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800ad24:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad26:	f7fd fa35 	bl	8008194 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800ad2a:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad2c:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ad2e:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800ad32:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800ad34:	430a      	orrs	r2, r1
 800ad36:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800ad38:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad3a:	f7fd fa2b 	bl	8008194 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800ad3e:	682b      	ldr	r3, [r5, #0]
 800ad40:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800ad42:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800ad44:	2201      	movs	r2, #1
  return HAL_OK;  
 800ad46:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800ad48:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800ad4c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800ad50:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800ad52:	f240 6123 	movw	r1, #1571	; 0x623
 800ad56:	4881      	ldr	r0, [pc, #516]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ad58:	f7fa f92c 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800ad5c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ad5e:	f240 4204 	movw	r2, #1028	; 0x404
 800ad62:	4293      	cmp	r3, r2
 800ad64:	bf18      	it	ne
 800ad66:	2b10      	cmpne	r3, #16
 800ad68:	f47f af55 	bne.w	800ac16 <HAL_ETH_ConfigMAC+0x102>
 800ad6c:	e757      	b.n	800ac1e <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800ad6e:	f240 610e 	movw	r1, #1550	; 0x60e
 800ad72:	487a      	ldr	r0, [pc, #488]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ad74:	f7fa f91e 	bl	8004fb4 <assert_failed>
  if (macconf != NULL)
 800ad78:	2c00      	cmp	r4, #0
 800ad7a:	f47f aee7 	bne.w	800ab4c <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800ad7e:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad80:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800ad82:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800ad86:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800ad88:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800ad8a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800ad8e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800ad90:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800ad92:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800ad94:	f7fd f9fe 	bl	8008194 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	601c      	str	r4, [r3, #0]
 800ad9c:	e7d1      	b.n	800ad42 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800ad9e:	f240 6122 	movw	r1, #1570	; 0x622
 800ada2:	486e      	ldr	r0, [pc, #440]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ada4:	f7fa f906 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800ada8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800adaa:	2b01      	cmp	r3, #1
 800adac:	f67f af2c 	bls.w	800ac08 <HAL_ETH_ConfigMAC+0xf4>
 800adb0:	e7cf      	b.n	800ad52 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800adb2:	f240 6121 	movw	r1, #1569	; 0x621
 800adb6:	4869      	ldr	r0, [pc, #420]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800adb8:	f7fa f8fc 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800adbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800adbe:	f033 0308 	bics.w	r3, r3, #8
 800adc2:	f43f af1d 	beq.w	800ac00 <HAL_ETH_ConfigMAC+0xec>
 800adc6:	e7ea      	b.n	800ad9e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800adc8:	f240 6113 	movw	r1, #1555	; 0x613
 800adcc:	4863      	ldr	r0, [pc, #396]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800adce:	f7fa f8f1 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800add2:	6863      	ldr	r3, [r4, #4]
 800add4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800add8:	f43f aec2 	beq.w	800ab60 <HAL_ETH_ConfigMAC+0x4c>
 800addc:	e02b      	b.n	800ae36 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800adde:	f240 6119 	movw	r1, #1561	; 0x619
 800ade2:	485e      	ldr	r0, [pc, #376]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ade4:	f7fa f8e6 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800ade8:	69e3      	ldr	r3, [r4, #28]
 800adea:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800adee:	f43f aed9 	beq.w	800aba4 <HAL_ETH_ConfigMAC+0x90>
 800adf2:	e07a      	b.n	800aeea <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800adf4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800adf8:	4858      	ldr	r0, [pc, #352]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800adfa:	f7fa f8db 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800adfe:	69a3      	ldr	r3, [r4, #24]
 800ae00:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800ae04:	f43f aec9 	beq.w	800ab9a <HAL_ETH_ConfigMAC+0x86>
 800ae08:	e7e9      	b.n	800adde <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800ae0a:	f240 6117 	movw	r1, #1559	; 0x617
 800ae0e:	4853      	ldr	r0, [pc, #332]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae10:	f7fa f8d0 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800ae14:	6963      	ldr	r3, [r4, #20]
 800ae16:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800ae1a:	f43f aeb9 	beq.w	800ab90 <HAL_ETH_ConfigMAC+0x7c>
 800ae1e:	e7e9      	b.n	800adf4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800ae20:	f240 6116 	movw	r1, #1558	; 0x616
 800ae24:	484d      	ldr	r0, [pc, #308]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae26:	f7fa f8c5 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800ae30:	f43f aea9 	beq.w	800ab86 <HAL_ETH_ConfigMAC+0x72>
 800ae34:	e7e9      	b.n	800ae0a <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800ae36:	f240 6114 	movw	r1, #1556	; 0x614
 800ae3a:	4848      	ldr	r0, [pc, #288]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae3c:	f7fa f8ba 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ae46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae4a:	f47f ae8f 	bne.w	800ab6c <HAL_ETH_ConfigMAC+0x58>
 800ae4e:	e690      	b.n	800ab72 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ae50:	f240 612d 	movw	r1, #1581	; 0x62d
 800ae54:	4841      	ldr	r0, [pc, #260]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae56:	f7fa f8ad 	bl	8004fb4 <assert_failed>
 800ae5a:	e711      	b.n	800ac80 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ae5c:	f240 612c 	movw	r1, #1580	; 0x62c
 800ae60:	483e      	ldr	r0, [pc, #248]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae62:	f7fa f8a7 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800ae66:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6c:	f4ff af08 	bcc.w	800ac80 <HAL_ETH_ConfigMAC+0x16c>
 800ae70:	e7ee      	b.n	800ae50 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ae72:	f240 612b 	movw	r1, #1579	; 0x62b
 800ae76:	4839      	ldr	r0, [pc, #228]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae78:	f7fa f89c 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800ae7c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae7e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800ae82:	f43f aef8 	beq.w	800ac76 <HAL_ETH_ConfigMAC+0x162>
 800ae86:	e7e9      	b.n	800ae5c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800ae88:	f240 612a 	movw	r1, #1578	; 0x62a
 800ae8c:	4833      	ldr	r0, [pc, #204]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800ae8e:	f7fa f891 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800ae92:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ae94:	f033 0302 	bics.w	r3, r3, #2
 800ae98:	f43f aee8 	beq.w	800ac6c <HAL_ETH_ConfigMAC+0x158>
 800ae9c:	e7e9      	b.n	800ae72 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800ae9e:	f240 6129 	movw	r1, #1577	; 0x629
 800aea2:	482e      	ldr	r0, [pc, #184]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800aea4:	f7fa f886 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800aea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aeaa:	f033 0304 	bics.w	r3, r3, #4
 800aeae:	f43f aed8 	beq.w	800ac62 <HAL_ETH_ConfigMAC+0x14e>
 800aeb2:	e7e9      	b.n	800ae88 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800aeb4:	f240 611d 	movw	r1, #1565	; 0x61d
 800aeb8:	4828      	ldr	r0, [pc, #160]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800aeba:	f7fa f87b 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800aebe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aec0:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800aec4:	f43f ae82 	beq.w	800abcc <HAL_ETH_ConfigMAC+0xb8>
 800aec8:	e01a      	b.n	800af00 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800aeca:	f240 611b 	movw	r1, #1563	; 0x61b
 800aece:	4823      	ldr	r0, [pc, #140]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800aed0:	f7fa f870 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800aed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aed6:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800aeda:	f43f ae6d 	beq.w	800abb8 <HAL_ETH_ConfigMAC+0xa4>
 800aede:	f240 611c 	movw	r1, #1564	; 0x61c
 800aee2:	481e      	ldr	r0, [pc, #120]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800aee4:	f7fa f866 	bl	8004fb4 <assert_failed>
 800aee8:	e666      	b.n	800abb8 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800aeea:	f240 611a 	movw	r1, #1562	; 0x61a
 800aeee:	481b      	ldr	r0, [pc, #108]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800aef0:	f7fa f860 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800aef4:	6a23      	ldr	r3, [r4, #32]
 800aef6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800aefa:	f43f ae58 	beq.w	800abae <HAL_ETH_ConfigMAC+0x9a>
 800aefe:	e7e4      	b.n	800aeca <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800af00:	f240 611e 	movw	r1, #1566	; 0x61e
 800af04:	4815      	ldr	r0, [pc, #84]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800af06:	f7fa f855 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800af0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af0c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800af10:	f47f ae60 	bne.w	800abd4 <HAL_ETH_ConfigMAC+0xc0>
 800af14:	e662      	b.n	800abdc <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800af16:	f240 6126 	movw	r1, #1574	; 0x626
 800af1a:	4810      	ldr	r0, [pc, #64]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800af1c:	f7fa f84a 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800af20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af22:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800af26:	f43f ae8d 	beq.w	800ac44 <HAL_ETH_ConfigMAC+0x130>
 800af2a:	f240 6127 	movw	r1, #1575	; 0x627
 800af2e:	480b      	ldr	r0, [pc, #44]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800af30:	f7fa f840 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800af34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800af36:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800af3a:	f43f ae88 	beq.w	800ac4e <HAL_ETH_ConfigMAC+0x13a>
 800af3e:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800af42:	4806      	ldr	r0, [pc, #24]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800af44:	f7fa f836 	bl	8004fb4 <assert_failed>
 800af48:	e681      	b.n	800ac4e <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800af4a:	f240 610d 	movw	r1, #1549	; 0x60d
 800af4e:	4803      	ldr	r0, [pc, #12]	; (800af5c <HAL_ETH_ConfigMAC+0x448>)
 800af50:	f7fa f830 	bl	8004fb4 <assert_failed>
 800af54:	e5f2      	b.n	800ab3c <HAL_ETH_ConfigMAC+0x28>
 800af56:	bf00      	nop
 800af58:	ff20810f 	.word	0xff20810f
 800af5c:	0802c948 	.word	0x0802c948
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800af60:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800af64:	4816      	ldr	r0, [pc, #88]	; (800afc0 <HAL_ETH_ConfigMAC+0x4ac>)
 800af66:	f7fa f825 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800af6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800af6c:	f033 0320 	bics.w	r3, r3, #32
 800af70:	f43f ae41 	beq.w	800abf6 <HAL_ETH_ConfigMAC+0xe2>
 800af74:	e71d      	b.n	800adb2 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800af76:	f240 6125 	movw	r1, #1573	; 0x625
 800af7a:	4811      	ldr	r0, [pc, #68]	; (800afc0 <HAL_ETH_ConfigMAC+0x4ac>)
 800af7c:	f7fa f81a 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800af80:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800af82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af86:	f4ff ae58 	bcc.w	800ac3a <HAL_ETH_ConfigMAC+0x126>
 800af8a:	e7c4      	b.n	800af16 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800af8c:	f240 611f 	movw	r1, #1567	; 0x61f
 800af90:	480b      	ldr	r0, [pc, #44]	; (800afc0 <HAL_ETH_ConfigMAC+0x4ac>)
 800af92:	f7fa f80f 	bl	8004fb4 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800af96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800af98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af9c:	2a40      	cmp	r2, #64	; 0x40
 800af9e:	f47f ae22 	bne.w	800abe6 <HAL_ETH_ConfigMAC+0xd2>
 800afa2:	e623      	b.n	800abec <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800afa4:	f240 6124 	movw	r1, #1572	; 0x624
 800afa8:	4805      	ldr	r0, [pc, #20]	; (800afc0 <HAL_ETH_ConfigMAC+0x4ac>)
 800afaa:	f7fa f803 	bl	8004fb4 <assert_failed>
 800afae:	e636      	b.n	800ac1e <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800afb0:	2002      	movs	r0, #2
}
 800afb2:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800afb4:	f240 6115 	movw	r1, #1557	; 0x615
 800afb8:	4801      	ldr	r0, [pc, #4]	; (800afc0 <HAL_ETH_ConfigMAC+0x4ac>)
 800afba:	f7f9 fffb 	bl	8004fb4 <assert_failed>
 800afbe:	e5d8      	b.n	800ab72 <HAL_ETH_ConfigMAC+0x5e>
 800afc0:	0802c948 	.word	0x0802c948

0800afc4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800afc4:	4b18      	ldr	r3, [pc, #96]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	079b      	lsls	r3, r3, #30
 800afca:	d504      	bpl.n	800afd6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800afcc:	4a17      	ldr	r2, [pc, #92]	; (800b02c <FLASH_SetErrorCode+0x68>)
 800afce:	6993      	ldr	r3, [r2, #24]
 800afd0:	f043 0320 	orr.w	r3, r3, #32
 800afd4:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800afd6:	4b14      	ldr	r3, [pc, #80]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	06d8      	lsls	r0, r3, #27
 800afdc:	d504      	bpl.n	800afe8 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800afde:	4a13      	ldr	r2, [pc, #76]	; (800b02c <FLASH_SetErrorCode+0x68>)
 800afe0:	6993      	ldr	r3, [r2, #24]
 800afe2:	f043 0310 	orr.w	r3, r3, #16
 800afe6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800afe8:	4b0f      	ldr	r3, [pc, #60]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	0699      	lsls	r1, r3, #26
 800afee:	d504      	bpl.n	800affa <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aff0:	4a0e      	ldr	r2, [pc, #56]	; (800b02c <FLASH_SetErrorCode+0x68>)
 800aff2:	6993      	ldr	r3, [r2, #24]
 800aff4:	f043 0308 	orr.w	r3, r3, #8
 800aff8:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800affa:	4b0b      	ldr	r3, [pc, #44]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	065a      	lsls	r2, r3, #25
 800b000:	d504      	bpl.n	800b00c <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800b002:	4a0a      	ldr	r2, [pc, #40]	; (800b02c <FLASH_SetErrorCode+0x68>)
 800b004:	6993      	ldr	r3, [r2, #24]
 800b006:	f043 0304 	orr.w	r3, r3, #4
 800b00a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	061b      	lsls	r3, r3, #24
 800b012:	d504      	bpl.n	800b01e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800b014:	4a05      	ldr	r2, [pc, #20]	; (800b02c <FLASH_SetErrorCode+0x68>)
 800b016:	6993      	ldr	r3, [r2, #24]
 800b018:	f043 0302 	orr.w	r3, r3, #2
 800b01c:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800b01e:	4b02      	ldr	r3, [pc, #8]	; (800b028 <FLASH_SetErrorCode+0x64>)
 800b020:	22f2      	movs	r2, #242	; 0xf2
 800b022:	60da      	str	r2, [r3, #12]
}
 800b024:	4770      	bx	lr
 800b026:	bf00      	nop
 800b028:	40023c00 	.word	0x40023c00
 800b02c:	20003194 	.word	0x20003194

0800b030 <FLASH_Program_Byte>:
{
 800b030:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b032:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b036:	4604      	mov	r4, r0
 800b038:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b03a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b03e:	d304      	bcc.n	800b04a <FLASH_Program_Byte+0x1a>
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <FLASH_Program_Byte+0x44>)
 800b042:	4403      	add	r3, r0
 800b044:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b048:	d20e      	bcs.n	800b068 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800b04a:	4b0b      	ldr	r3, [pc, #44]	; (800b078 <FLASH_Program_Byte+0x48>)
 800b04c:	691a      	ldr	r2, [r3, #16]
 800b04e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b052:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800b054:	691a      	ldr	r2, [r3, #16]
 800b056:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b058:	691a      	ldr	r2, [r3, #16]
 800b05a:	f042 0201 	orr.w	r2, r2, #1
 800b05e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800b060:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800b062:	f3bf 8f4f 	dsb	sy
}
 800b066:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b068:	f240 21ee 	movw	r1, #750	; 0x2ee
 800b06c:	4803      	ldr	r0, [pc, #12]	; (800b07c <FLASH_Program_Byte+0x4c>)
 800b06e:	f7f9 ffa1 	bl	8004fb4 <assert_failed>
 800b072:	e7ea      	b.n	800b04a <FLASH_Program_Byte+0x1a>
 800b074:	e00f1000 	.word	0xe00f1000
 800b078:	40023c00 	.word	0x40023c00
 800b07c:	0802c980 	.word	0x0802c980

0800b080 <FLASH_Program_HalfWord>:
{
 800b080:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b082:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b086:	4604      	mov	r4, r0
 800b088:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b08a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b08e:	d304      	bcc.n	800b09a <FLASH_Program_HalfWord+0x1a>
 800b090:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <FLASH_Program_HalfWord+0x48>)
 800b092:	4403      	add	r3, r0
 800b094:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b098:	d210      	bcs.n	800b0bc <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800b09a:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <FLASH_Program_HalfWord+0x4c>)
 800b09c:	691a      	ldr	r2, [r3, #16]
 800b09e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0a2:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800b0a4:	691a      	ldr	r2, [r3, #16]
 800b0a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0aa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b0ac:	691a      	ldr	r2, [r3, #16]
 800b0ae:	f042 0201 	orr.w	r2, r2, #1
 800b0b2:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800b0b4:	8025      	strh	r5, [r4, #0]
 800b0b6:	f3bf 8f4f 	dsb	sy
}
 800b0ba:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0bc:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800b0c0:	4803      	ldr	r0, [pc, #12]	; (800b0d0 <FLASH_Program_HalfWord+0x50>)
 800b0c2:	f7f9 ff77 	bl	8004fb4 <assert_failed>
 800b0c6:	e7e8      	b.n	800b09a <FLASH_Program_HalfWord+0x1a>
 800b0c8:	e00f1000 	.word	0xe00f1000
 800b0cc:	40023c00 	.word	0x40023c00
 800b0d0:	0802c980 	.word	0x0802c980

0800b0d4 <FLASH_Program_Word>:
{
 800b0d4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0d6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b0da:	4604      	mov	r4, r0
 800b0dc:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800b0de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0e2:	d304      	bcc.n	800b0ee <FLASH_Program_Word+0x1a>
 800b0e4:	4b0d      	ldr	r3, [pc, #52]	; (800b11c <FLASH_Program_Word+0x48>)
 800b0e6:	4403      	add	r3, r0
 800b0e8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b0ec:	d210      	bcs.n	800b110 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800b0ee:	4b0c      	ldr	r3, [pc, #48]	; (800b120 <FLASH_Program_Word+0x4c>)
 800b0f0:	691a      	ldr	r2, [r3, #16]
 800b0f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0f6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800b0f8:	691a      	ldr	r2, [r3, #16]
 800b0fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0fe:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b100:	691a      	ldr	r2, [r3, #16]
 800b102:	f042 0201 	orr.w	r2, r2, #1
 800b106:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800b108:	6025      	str	r5, [r4, #0]
 800b10a:	f3bf 8f4f 	dsb	sy
}
 800b10e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b110:	f240 21b3 	movw	r1, #691	; 0x2b3
 800b114:	4803      	ldr	r0, [pc, #12]	; (800b124 <FLASH_Program_Word+0x50>)
 800b116:	f7f9 ff4d 	bl	8004fb4 <assert_failed>
 800b11a:	e7e8      	b.n	800b0ee <FLASH_Program_Word+0x1a>
 800b11c:	e00f1000 	.word	0xe00f1000
 800b120:	40023c00 	.word	0x40023c00
 800b124:	0802c980 	.word	0x0802c980

0800b128 <FLASH_Program_DoubleWord>:
{
 800b128:	b570      	push	{r4, r5, r6, lr}
 800b12a:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800b12c:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800b130:	4604      	mov	r4, r0
 800b132:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800b134:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b138:	d304      	bcc.n	800b144 <FLASH_Program_DoubleWord+0x1c>
 800b13a:	4b0f      	ldr	r3, [pc, #60]	; (800b178 <FLASH_Program_DoubleWord+0x50>)
 800b13c:	4403      	add	r3, r0
 800b13e:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800b142:	d213      	bcs.n	800b16c <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800b144:	490d      	ldr	r1, [pc, #52]	; (800b17c <FLASH_Program_DoubleWord+0x54>)
 800b146:	690b      	ldr	r3, [r1, #16]
 800b148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b14c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800b14e:	690b      	ldr	r3, [r1, #16]
 800b150:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b154:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800b156:	690b      	ldr	r3, [r1, #16]
 800b158:	f043 0301 	orr.w	r3, r3, #1
 800b15c:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800b15e:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800b160:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800b164:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800b166:	f3bf 8f4f 	dsb	sy
}
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800b16c:	f240 218e 	movw	r1, #654	; 0x28e
 800b170:	4803      	ldr	r0, [pc, #12]	; (800b180 <FLASH_Program_DoubleWord+0x58>)
 800b172:	f7f9 ff1f 	bl	8004fb4 <assert_failed>
 800b176:	e7e5      	b.n	800b144 <FLASH_Program_DoubleWord+0x1c>
 800b178:	e00f1000 	.word	0xe00f1000
 800b17c:	40023c00 	.word	0x40023c00
 800b180:	0802c980 	.word	0x0802c980

0800b184 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b184:	4b06      	ldr	r3, [pc, #24]	; (800b1a0 <HAL_FLASH_Unlock+0x1c>)
 800b186:	691a      	ldr	r2, [r3, #16]
 800b188:	2a00      	cmp	r2, #0
 800b18a:	db01      	blt.n	800b190 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800b18c:	2000      	movs	r0, #0
}
 800b18e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b190:	4904      	ldr	r1, [pc, #16]	; (800b1a4 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b192:	4a05      	ldr	r2, [pc, #20]	; (800b1a8 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800b194:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800b196:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800b198:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800b19a:	0fc0      	lsrs	r0, r0, #31
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	40023c00 	.word	0x40023c00
 800b1a4:	45670123 	.word	0x45670123
 800b1a8:	cdef89ab 	.word	0xcdef89ab

0800b1ac <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800b1ac:	4a03      	ldr	r2, [pc, #12]	; (800b1bc <HAL_FLASH_Lock+0x10>)
}
 800b1ae:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800b1b0:	6913      	ldr	r3, [r2, #16]
 800b1b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b1b6:	6113      	str	r3, [r2, #16]
}
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	40023c00 	.word	0x40023c00

0800b1c0 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800b1c0:	4b05      	ldr	r3, [pc, #20]	; (800b1d8 <HAL_FLASH_OB_Unlock+0x18>)
 800b1c2:	695a      	ldr	r2, [r3, #20]
 800b1c4:	07d2      	lsls	r2, r2, #31
 800b1c6:	d505      	bpl.n	800b1d4 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800b1c8:	4904      	ldr	r1, [pc, #16]	; (800b1dc <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800b1ca:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800b1cc:	4a04      	ldr	r2, [pc, #16]	; (800b1e0 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800b1ce:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800b1d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800b1d2:	4770      	bx	lr
    return HAL_ERROR;
 800b1d4:	2001      	movs	r0, #1
}
 800b1d6:	4770      	bx	lr
 800b1d8:	40023c00 	.word	0x40023c00
 800b1dc:	08192a3b 	.word	0x08192a3b
 800b1e0:	4c5d6e7f 	.word	0x4c5d6e7f

0800b1e4 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b1e4:	4a03      	ldr	r2, [pc, #12]	; (800b1f4 <HAL_FLASH_OB_Lock+0x10>)
}
 800b1e6:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b1e8:	6953      	ldr	r3, [r2, #20]
 800b1ea:	f043 0301 	orr.w	r3, r3, #1
 800b1ee:	6153      	str	r3, [r2, #20]
}
 800b1f0:	4770      	bx	lr
 800b1f2:	bf00      	nop
 800b1f4:	40023c00 	.word	0x40023c00

0800b1f8 <HAL_FLASH_OB_Launch>:
{
 800b1f8:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800b1fa:	4c14      	ldr	r4, [pc, #80]	; (800b24c <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	4a14      	ldr	r2, [pc, #80]	; (800b250 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b200:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800b204:	6963      	ldr	r3, [r4, #20]
 800b206:	f043 0302 	orr.w	r3, r3, #2
 800b20a:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b20c:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800b20e:	f7fc ffbb 	bl	8008188 <HAL_GetTick>
 800b212:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b214:	e004      	b.n	800b220 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b216:	f7fc ffb7 	bl	8008188 <HAL_GetTick>
 800b21a:	1b40      	subs	r0, r0, r5
 800b21c:	42b0      	cmp	r0, r6
 800b21e:	d80e      	bhi.n	800b23e <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b220:	68e3      	ldr	r3, [r4, #12]
 800b222:	03db      	lsls	r3, r3, #15
 800b224:	d4f7      	bmi.n	800b216 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800b226:	68e2      	ldr	r2, [r4, #12]
 800b228:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800b22c:	d109      	bne.n	800b242 <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b22e:	68e0      	ldr	r0, [r4, #12]
 800b230:	f010 0001 	ands.w	r0, r0, #1
 800b234:	d002      	beq.n	800b23c <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b236:	2301      	movs	r3, #1
  return HAL_OK;
 800b238:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b23a:	60e3      	str	r3, [r4, #12]
}
 800b23c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800b23e:	2003      	movs	r0, #3
}
 800b240:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800b242:	f7ff febf 	bl	800afc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b246:	2001      	movs	r0, #1
}
 800b248:	bd70      	pop	{r4, r5, r6, pc}
 800b24a:	bf00      	nop
 800b24c:	40023c00 	.word	0x40023c00
 800b250:	20003194 	.word	0x20003194

0800b254 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800b254:	4b01      	ldr	r3, [pc, #4]	; (800b25c <HAL_FLASH_GetError+0x8>)
 800b256:	6998      	ldr	r0, [r3, #24]
}  
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	20003194 	.word	0x20003194

0800b260 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b260:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <FLASH_WaitForLastOperation+0x50>)
 800b262:	2200      	movs	r2, #0
{ 
 800b264:	b570      	push	{r4, r5, r6, lr}
 800b266:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b268:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b26a:	4d12      	ldr	r5, [pc, #72]	; (800b2b4 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800b26c:	f7fc ff8c 	bl	8008188 <HAL_GetTick>
 800b270:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b272:	e001      	b.n	800b278 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800b274:	1c62      	adds	r2, r4, #1
 800b276:	d10e      	bne.n	800b296 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800b278:	68eb      	ldr	r3, [r5, #12]
 800b27a:	03db      	lsls	r3, r3, #15
 800b27c:	d4fa      	bmi.n	800b274 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800b27e:	68ea      	ldr	r2, [r5, #12]
 800b280:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800b284:	d10f      	bne.n	800b2a6 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800b286:	68e8      	ldr	r0, [r5, #12]
 800b288:	f010 0001 	ands.w	r0, r0, #1
 800b28c:	d002      	beq.n	800b294 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b28e:	2301      	movs	r3, #1
  return HAL_OK;
 800b290:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800b292:	60eb      	str	r3, [r5, #12]
}  
 800b294:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800b296:	b124      	cbz	r4, 800b2a2 <FLASH_WaitForLastOperation+0x42>
 800b298:	f7fc ff76 	bl	8008188 <HAL_GetTick>
 800b29c:	1b80      	subs	r0, r0, r6
 800b29e:	42a0      	cmp	r0, r4
 800b2a0:	d9ea      	bls.n	800b278 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800b2a2:	2003      	movs	r0, #3
}  
 800b2a4:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800b2a6:	f7ff fe8d 	bl	800afc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800b2aa:	2001      	movs	r0, #1
}  
 800b2ac:	bd70      	pop	{r4, r5, r6, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20003194 	.word	0x20003194
 800b2b4:	40023c00 	.word	0x40023c00

0800b2b8 <HAL_FLASH_Program>:
{
 800b2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800b2bc:	4d23      	ldr	r5, [pc, #140]	; (800b34c <HAL_FLASH_Program+0x94>)
{
 800b2be:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800b2c0:	7d2a      	ldrb	r2, [r5, #20]
 800b2c2:	2a01      	cmp	r2, #1
 800b2c4:	d03a      	beq.n	800b33c <HAL_FLASH_Program+0x84>
 800b2c6:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b2c8:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800b2ca:	f04f 0301 	mov.w	r3, #1
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b2d2:	d81d      	bhi.n	800b310 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2d8:	460e      	mov	r6, r1
 800b2da:	f7ff ffc1 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b2de:	b998      	cbnz	r0, 800b308 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800b2e0:	3c01      	subs	r4, #1
 800b2e2:	2c02      	cmp	r4, #2
 800b2e4:	d82d      	bhi.n	800b342 <HAL_FLASH_Program+0x8a>
 800b2e6:	e8df f004 	tbb	[pc, r4]
 800b2ea:	1e02      	.short	0x1e02
 800b2ec:	23          	.byte	0x23
 800b2ed:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800b2ee:	b2b9      	uxth	r1, r7
 800b2f0:	4630      	mov	r0, r6
 800b2f2:	f7ff fec5 	bl	800b080 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b2f6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b2fa:	f7ff ffb1 	bl	800b260 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800b2fe:	4a14      	ldr	r2, [pc, #80]	; (800b350 <HAL_FLASH_Program+0x98>)
 800b300:	6913      	ldr	r3, [r2, #16]
 800b302:	f023 0301 	bic.w	r3, r3, #1
 800b306:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800b308:	2300      	movs	r3, #0
 800b30a:	752b      	strb	r3, [r5, #20]
}
 800b30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800b310:	4810      	ldr	r0, [pc, #64]	; (800b354 <HAL_FLASH_Program+0x9c>)
 800b312:	21aa      	movs	r1, #170	; 0xaa
 800b314:	f7f9 fe4e 	bl	8004fb4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b318:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b31c:	f7ff ffa0 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b320:	2800      	cmp	r0, #0
 800b322:	d1f1      	bne.n	800b308 <HAL_FLASH_Program+0x50>
 800b324:	e7e7      	b.n	800b2f6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800b326:	4639      	mov	r1, r7
 800b328:	4630      	mov	r0, r6
 800b32a:	f7ff fed3 	bl	800b0d4 <FLASH_Program_Word>
        break;
 800b32e:	e7e2      	b.n	800b2f6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800b330:	463a      	mov	r2, r7
 800b332:	4643      	mov	r3, r8
 800b334:	4630      	mov	r0, r6
 800b336:	f7ff fef7 	bl	800b128 <FLASH_Program_DoubleWord>
        break;
 800b33a:	e7dc      	b.n	800b2f6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800b33c:	2002      	movs	r0, #2
}
 800b33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800b342:	b2f9      	uxtb	r1, r7
 800b344:	4630      	mov	r0, r6
 800b346:	f7ff fe73 	bl	800b030 <FLASH_Program_Byte>
        break;
 800b34a:	e7d4      	b.n	800b2f6 <HAL_FLASH_Program+0x3e>
 800b34c:	20003194 	.word	0x20003194
 800b350:	40023c00 	.word	0x40023c00
 800b354:	0802c980 	.word	0x0802c980

0800b358 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b358:	2803      	cmp	r0, #3
{
 800b35a:	b538      	push	{r3, r4, r5, lr}
 800b35c:	4604      	mov	r4, r0
 800b35e:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b360:	d82f      	bhi.n	800b3c2 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800b362:	1e6b      	subs	r3, r5, #1
 800b364:	2b02      	cmp	r3, #2
 800b366:	d81c      	bhi.n	800b3a2 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800b368:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800b36a:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b372:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800b374:	d10e      	bne.n	800b394 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800b376:	6919      	ldr	r1, [r3, #16]
 800b378:	f248 0204 	movw	r2, #32772	; 0x8004
 800b37c:	430a      	orrs	r2, r1
 800b37e:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800b380:	4a13      	ldr	r2, [pc, #76]	; (800b3d0 <FLASH_MassErase+0x78>)
 800b382:	6910      	ldr	r0, [r2, #16]
 800b384:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800b388:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800b38c:	6110      	str	r0, [r2, #16]
 800b38e:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800b392:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800b394:	2d02      	cmp	r5, #2
 800b396:	d10e      	bne.n	800b3b6 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800b398:	691a      	ldr	r2, [r3, #16]
 800b39a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b39e:	611a      	str	r2, [r3, #16]
 800b3a0:	e7ee      	b.n	800b380 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800b3a2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800b3a6:	480b      	ldr	r0, [pc, #44]	; (800b3d4 <FLASH_MassErase+0x7c>)
 800b3a8:	f7f9 fe04 	bl	8004fb4 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800b3ac:	4a08      	ldr	r2, [pc, #32]	; (800b3d0 <FLASH_MassErase+0x78>)
 800b3ae:	6913      	ldr	r3, [r2, #16]
 800b3b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3b4:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800b3b6:	4a06      	ldr	r2, [pc, #24]	; (800b3d0 <FLASH_MassErase+0x78>)
 800b3b8:	6913      	ldr	r3, [r2, #16]
 800b3ba:	f043 0304 	orr.w	r3, r3, #4
 800b3be:	6113      	str	r3, [r2, #16]
 800b3c0:	e7de      	b.n	800b380 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b3c2:	f240 11bb 	movw	r1, #443	; 0x1bb
 800b3c6:	4803      	ldr	r0, [pc, #12]	; (800b3d4 <FLASH_MassErase+0x7c>)
 800b3c8:	f7f9 fdf4 	bl	8004fb4 <assert_failed>
 800b3cc:	e7c9      	b.n	800b362 <FLASH_MassErase+0xa>
 800b3ce:	bf00      	nop
 800b3d0:	40023c00 	.word	0x40023c00
 800b3d4:	0802c9bc 	.word	0x0802c9bc

0800b3d8 <HAL_FLASHEx_OBProgram>:
{
 800b3d8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800b3da:	4d64      	ldr	r5, [pc, #400]	; (800b56c <HAL_FLASHEx_OBProgram+0x194>)
 800b3dc:	7d2b      	ldrb	r3, [r5, #20]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	f000 80bb 	beq.w	800b55a <HAL_FLASHEx_OBProgram+0x182>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b3ea:	6803      	ldr	r3, [r0, #0]
 800b3ec:	2b3f      	cmp	r3, #63	; 0x3f
 800b3ee:	f200 808c 	bhi.w	800b50a <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b3f2:	07d9      	lsls	r1, r3, #31
 800b3f4:	d40d      	bmi.n	800b412 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800b3f6:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b3f8:	079a      	lsls	r2, r3, #30
 800b3fa:	d42c      	bmi.n	800b456 <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b3fc:	075e      	lsls	r6, r3, #29
 800b3fe:	d440      	bmi.n	800b482 <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b400:	0719      	lsls	r1, r3, #28
 800b402:	d44f      	bmi.n	800b4a4 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b404:	06da      	lsls	r2, r3, #27
 800b406:	d45b      	bmi.n	800b4c0 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b408:	069b      	lsls	r3, r3, #26
 800b40a:	d46c      	bmi.n	800b4e6 <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800b40c:	2300      	movs	r3, #0
 800b40e:	752b      	strb	r3, [r5, #20]
}
 800b410:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800b412:	6863      	ldr	r3, [r4, #4]
 800b414:	2b01      	cmp	r3, #1
 800b416:	d905      	bls.n	800b424 <HAL_FLASHEx_OBProgram+0x4c>
 800b418:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800b41c:	4854      	ldr	r0, [pc, #336]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b41e:	f7f9 fdc9 	bl	8004fb4 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b422:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800b424:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b426:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b428:	4b52      	ldr	r3, [pc, #328]	; (800b574 <HAL_FLASHEx_OBProgram+0x19c>)
 800b42a:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800b42e:	d07f      	beq.n	800b530 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b430:	b903      	cbnz	r3, 800b434 <HAL_FLASHEx_OBProgram+0x5c>
 800b432:	b926      	cbnz	r6, 800b43e <HAL_FLASHEx_OBProgram+0x66>
 800b434:	f240 314f 	movw	r1, #847	; 0x34f
 800b438:	484d      	ldr	r0, [pc, #308]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b43a:	f7f9 fdbb 	bl	8004fb4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b43e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b442:	f7ff ff0d 	bl	800b260 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b446:	b918      	cbnz	r0, 800b450 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800b448:	4b4b      	ldr	r3, [pc, #300]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b44a:	695a      	ldr	r2, [r3, #20]
 800b44c:	4316      	orrs	r6, r2
 800b44e:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	079a      	lsls	r2, r3, #30
 800b454:	d5d2      	bpl.n	800b3fc <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800b456:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800b458:	2eaa      	cmp	r6, #170	; 0xaa
 800b45a:	bf18      	it	ne
 800b45c:	2e55      	cmpne	r6, #85	; 0x55
 800b45e:	d006      	beq.n	800b46e <HAL_FLASHEx_OBProgram+0x96>
 800b460:	2ecc      	cmp	r6, #204	; 0xcc
 800b462:	d004      	beq.n	800b46e <HAL_FLASHEx_OBProgram+0x96>
 800b464:	f240 316e 	movw	r1, #878	; 0x36e
 800b468:	4841      	ldr	r0, [pc, #260]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b46a:	f7f9 fda3 	bl	8004fb4 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b46e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b472:	f7ff fef5 	bl	800b260 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800b476:	b908      	cbnz	r0, 800b47c <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800b478:	4b3f      	ldr	r3, [pc, #252]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b47a:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800b47c:	6823      	ldr	r3, [r4, #0]
 800b47e:	075e      	lsls	r6, r3, #29
 800b480:	d5be      	bpl.n	800b400 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b482:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800b486:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b488:	f7ff feea 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b48c:	b938      	cbnz	r0, 800b49e <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b48e:	493a      	ldr	r1, [pc, #232]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b490:	4b3a      	ldr	r3, [pc, #232]	; (800b57c <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b492:	4a3b      	ldr	r2, [pc, #236]	; (800b580 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800b494:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800b496:	694e      	ldr	r6, [r1, #20]
 800b498:	4032      	ands	r2, r6
 800b49a:	4313      	orrs	r3, r2
 800b49c:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	0719      	lsls	r1, r3, #28
 800b4a2:	d5af      	bpl.n	800b404 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b4a4:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b4a6:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800b4aa:	d158      	bne.n	800b55e <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b4ac:	4932      	ldr	r1, [pc, #200]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4ae:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800b4b0:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800b4b2:	694a      	ldr	r2, [r1, #20]
 800b4b4:	f022 020c 	bic.w	r2, r2, #12
 800b4b8:	4332      	orrs	r2, r6
 800b4ba:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b4bc:	06da      	lsls	r2, r3, #27
 800b4be:	d5a3      	bpl.n	800b408 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800b4c0:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b4c2:	f248 0313 	movw	r3, #32787	; 0x8013
 800b4c6:	429e      	cmp	r6, r3
 800b4c8:	d826      	bhi.n	800b518 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b4ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b4ce:	f7ff fec7 	bl	800b260 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800b4d2:	b928      	cbnz	r0, 800b4e0 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800b4d4:	4a28      	ldr	r2, [pc, #160]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4d6:	4b2b      	ldr	r3, [pc, #172]	; (800b584 <HAL_FLASHEx_OBProgram+0x1ac>)
 800b4d8:	6991      	ldr	r1, [r2, #24]
 800b4da:	400b      	ands	r3, r1
 800b4dc:	4333      	orrs	r3, r6
 800b4de:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	069b      	lsls	r3, r3, #26
 800b4e4:	d592      	bpl.n	800b40c <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800b4e6:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b4e8:	f248 0313 	movw	r3, #32787	; 0x8013
 800b4ec:	429c      	cmp	r4, r3
 800b4ee:	d819      	bhi.n	800b524 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b4f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b4f4:	f7ff feb4 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d187      	bne.n	800b40c <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b4fe:	6993      	ldr	r3, [r2, #24]
 800b500:	b29b      	uxth	r3, r3
 800b502:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b506:	6193      	str	r3, [r2, #24]
 800b508:	e780      	b.n	800b40c <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800b50a:	f240 1125 	movw	r1, #293	; 0x125
 800b50e:	4818      	ldr	r0, [pc, #96]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b510:	f7f9 fd50 	bl	8004fb4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800b514:	6823      	ldr	r3, [r4, #0]
 800b516:	e76c      	b.n	800b3f2 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800b518:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b51c:	4814      	ldr	r0, [pc, #80]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b51e:	f7f9 fd49 	bl	8004fb4 <assert_failed>
 800b522:	e7d2      	b.n	800b4ca <HAL_FLASHEx_OBProgram+0xf2>
 800b524:	f240 31a9 	movw	r1, #937	; 0x3a9
 800b528:	4811      	ldr	r0, [pc, #68]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b52a:	f7f9 fd43 	bl	8004fb4 <assert_failed>
 800b52e:	e7df      	b.n	800b4f0 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b530:	b96b      	cbnz	r3, 800b54e <HAL_FLASHEx_OBProgram+0x176>
 800b532:	b166      	cbz	r6, 800b54e <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b534:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b538:	f7ff fe92 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d187      	bne.n	800b450 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800b540:	4a0d      	ldr	r2, [pc, #52]	; (800b578 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b542:	6953      	ldr	r3, [r2, #20]
 800b544:	ea23 0606 	bic.w	r6, r3, r6
 800b548:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	e754      	b.n	800b3f8 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b54e:	f240 312b 	movw	r1, #811	; 0x32b
 800b552:	4807      	ldr	r0, [pc, #28]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b554:	f7f9 fd2e 	bl	8004fb4 <assert_failed>
 800b558:	e7ec      	b.n	800b534 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800b55a:	2002      	movs	r0, #2
}
 800b55c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b55e:	f44f 7162 	mov.w	r1, #904	; 0x388
 800b562:	4803      	ldr	r0, [pc, #12]	; (800b570 <HAL_FLASHEx_OBProgram+0x198>)
 800b564:	f7f9 fd26 	bl	8004fb4 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b568:	6823      	ldr	r3, [r4, #0]
 800b56a:	e79f      	b.n	800b4ac <HAL_FLASHEx_OBProgram+0xd4>
 800b56c:	20003194 	.word	0x20003194
 800b570:	0802c9bc 	.word	0x0802c9bc
 800b574:	f000ffff 	.word	0xf000ffff
 800b578:	40023c00 	.word	0x40023c00
 800b57c:	f00000f0 	.word	0xf00000f0
 800b580:	0fffff0f 	.word	0x0fffff0f
 800b584:	ffff0000 	.word	0xffff0000

0800b588 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b588:	4a11      	ldr	r2, [pc, #68]	; (800b5d0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b58a:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b58c:	4b11      	ldr	r3, [pc, #68]	; (800b5d4 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b58e:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b590:	6951      	ldr	r1, [r2, #20]
 800b592:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800b594:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800b596:	7d51      	ldrb	r1, [r2, #21]
 800b598:	29aa      	cmp	r1, #170	; 0xaa
 800b59a:	b2cb      	uxtb	r3, r1
 800b59c:	d015      	beq.n	800b5ca <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800b59e:	7d53      	ldrb	r3, [r2, #21]
 800b5a0:	2bcc      	cmp	r3, #204	; 0xcc
 800b5a2:	bf0c      	ite	eq
 800b5a4:	22cc      	moveq	r2, #204	; 0xcc
 800b5a6:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b5a8:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800b5aa:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b5ac:	4a0a      	ldr	r2, [pc, #40]	; (800b5d8 <HAL_FLASHEx_OBGetConfig+0x50>)
 800b5ae:	6959      	ldr	r1, [r3, #20]
 800b5b0:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800b5b2:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800b5b4:	695a      	ldr	r2, [r3, #20]
 800b5b6:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800b5ba:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800b5bc:	699a      	ldr	r2, [r3, #24]
 800b5be:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800b5c0:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800b5c2:	699b      	ldr	r3, [r3, #24]
 800b5c4:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800b5c6:	61c3      	str	r3, [r0, #28]
}
 800b5c8:	4770      	bx	lr
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	e7ec      	b.n	800b5a8 <HAL_FLASHEx_OBGetConfig+0x20>
 800b5ce:	bf00      	nop
 800b5d0:	40023c00 	.word	0x40023c00
 800b5d4:	0fff0000 	.word	0x0fff0000
 800b5d8:	f00000f0 	.word	0xf00000f0

0800b5dc <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800b5dc:	2817      	cmp	r0, #23
{
 800b5de:	b538      	push	{r3, r4, r5, lr}
 800b5e0:	4605      	mov	r5, r0
 800b5e2:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800b5e4:	d82b      	bhi.n	800b63e <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b5e6:	2c03      	cmp	r4, #3
 800b5e8:	d821      	bhi.n	800b62e <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b5ea:	b9dc      	cbnz	r4, 800b624 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800b5ee:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800b5f0:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800b5f2:	bf88      	it	hi
 800b5f4:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800b5f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b5fa:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800b5fc:	6919      	ldr	r1, [r3, #16]
 800b5fe:	430c      	orrs	r4, r1
 800b600:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b602:	691a      	ldr	r2, [r3, #16]
 800b604:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b608:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b60a:	6918      	ldr	r0, [r3, #16]
 800b60c:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800b610:	f045 0502 	orr.w	r5, r5, #2
 800b614:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b616:	691a      	ldr	r2, [r3, #16]
 800b618:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b61c:	611a      	str	r2, [r3, #16]
 800b61e:	f3bf 8f4f 	dsb	sy
}
 800b622:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b624:	2c01      	cmp	r4, #1
 800b626:	d110      	bne.n	800b64a <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b628:	f44f 7480 	mov.w	r4, #256	; 0x100
 800b62c:	e7de      	b.n	800b5ec <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b62e:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800b632:	480a      	ldr	r0, [pc, #40]	; (800b65c <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b634:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b638:	f7f9 fcbc 	bl	8004fb4 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b63c:	e7d6      	b.n	800b5ec <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800b63e:	f240 11eb 	movw	r1, #491	; 0x1eb
 800b642:	4806      	ldr	r0, [pc, #24]	; (800b65c <FLASH_Erase_Sector+0x80>)
 800b644:	f7f9 fcb6 	bl	8004fb4 <assert_failed>
 800b648:	e7cd      	b.n	800b5e6 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b64a:	2c02      	cmp	r4, #2
 800b64c:	bf0c      	ite	eq
 800b64e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800b652:	f44f 7440 	movne.w	r4, #768	; 0x300
 800b656:	e7c9      	b.n	800b5ec <FLASH_Erase_Sector+0x10>
 800b658:	40023c00 	.word	0x40023c00
 800b65c:	0802c9bc 	.word	0x0802c9bc

0800b660 <HAL_FLASHEx_Erase>:
{
 800b660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b664:	4f2f      	ldr	r7, [pc, #188]	; (800b724 <HAL_FLASHEx_Erase+0xc4>)
 800b666:	7d3b      	ldrb	r3, [r7, #20]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d040      	beq.n	800b6ee <HAL_FLASHEx_Erase+0x8e>
 800b66c:	2301      	movs	r3, #1
 800b66e:	4604      	mov	r4, r0
 800b670:	4688      	mov	r8, r1
 800b672:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800b674:	6803      	ldr	r3, [r0, #0]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d903      	bls.n	800b682 <HAL_FLASHEx_Erase+0x22>
 800b67a:	21a5      	movs	r1, #165	; 0xa5
 800b67c:	482a      	ldr	r0, [pc, #168]	; (800b728 <HAL_FLASHEx_Erase+0xc8>)
 800b67e:	f7f9 fc99 	bl	8004fb4 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b682:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b686:	f7ff fdeb 	bl	800b260 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b68a:	4606      	mov	r6, r0
 800b68c:	bb50      	cbnz	r0, 800b6e4 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800b68e:	f04f 33ff 	mov.w	r3, #4294967295
 800b692:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b696:	6823      	ldr	r3, [r4, #0]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d034      	beq.n	800b706 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b69c:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b6a0:	442b      	add	r3, r5
 800b6a2:	1e5a      	subs	r2, r3, #1
 800b6a4:	2a17      	cmp	r2, #23
 800b6a6:	d826      	bhi.n	800b6f6 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b6a8:	429d      	cmp	r5, r3
 800b6aa:	d21b      	bcs.n	800b6e4 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b6ac:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800b72c <HAL_FLASHEx_Erase+0xcc>
 800b6b0:	e005      	b.n	800b6be <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b6b2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800b6b6:	3501      	adds	r5, #1
 800b6b8:	4413      	add	r3, r2
 800b6ba:	42ab      	cmp	r3, r5
 800b6bc:	d912      	bls.n	800b6e4 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b6be:	4628      	mov	r0, r5
 800b6c0:	7c21      	ldrb	r1, [r4, #16]
 800b6c2:	f7ff ff8b 	bl	800b5dc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b6c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b6ca:	f7ff fdc9 	bl	800b260 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b6ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800b6d6:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800b6da:	2800      	cmp	r0, #0
 800b6dc:	d0e9      	beq.n	800b6b2 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b6de:	4606      	mov	r6, r0
          *SectorError = index;
 800b6e0:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800b6e8:	753b      	strb	r3, [r7, #20]
}
 800b6ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800b6ee:	2602      	movs	r6, #2
}
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b6f6:	21c1      	movs	r1, #193	; 0xc1
 800b6f8:	480b      	ldr	r0, [pc, #44]	; (800b728 <HAL_FLASHEx_Erase+0xc8>)
 800b6fa:	f7f9 fc5b 	bl	8004fb4 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b6fe:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b702:	442b      	add	r3, r5
 800b704:	e7d0      	b.n	800b6a8 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b706:	6861      	ldr	r1, [r4, #4]
 800b708:	7c20      	ldrb	r0, [r4, #16]
 800b70a:	f7ff fe25 	bl	800b358 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b70e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b712:	f7ff fda5 	bl	800b260 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800b716:	4a05      	ldr	r2, [pc, #20]	; (800b72c <HAL_FLASHEx_Erase+0xcc>)
 800b718:	4b05      	ldr	r3, [pc, #20]	; (800b730 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b71a:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800b71c:	6911      	ldr	r1, [r2, #16]
 800b71e:	400b      	ands	r3, r1
 800b720:	6113      	str	r3, [r2, #16]
 800b722:	e7df      	b.n	800b6e4 <HAL_FLASHEx_Erase+0x84>
 800b724:	20003194 	.word	0x20003194
 800b728:	0802c9bc 	.word	0x0802c9bc
 800b72c:	40023c00 	.word	0x40023c00
 800b730:	ffff7ffb 	.word	0xffff7ffb

0800b734 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b734:	4bb9      	ldr	r3, [pc, #740]	; (800ba1c <HAL_GPIO_Init+0x2e8>)
 800b736:	4aba      	ldr	r2, [pc, #744]	; (800ba20 <HAL_GPIO_Init+0x2ec>)
 800b738:	4290      	cmp	r0, r2
 800b73a:	bf18      	it	ne
 800b73c:	4298      	cmpne	r0, r3
{
 800b73e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b742:	bf18      	it	ne
 800b744:	2301      	movne	r3, #1
{
 800b746:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b748:	bf08      	it	eq
 800b74a:	2300      	moveq	r3, #0
{
 800b74c:	4606      	mov	r6, r0
 800b74e:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	d026      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b754:	4bb3      	ldr	r3, [pc, #716]	; (800ba24 <HAL_GPIO_Init+0x2f0>)
 800b756:	4298      	cmp	r0, r3
 800b758:	d023      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b75a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b75e:	4298      	cmp	r0, r3
 800b760:	d01f      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b766:	4298      	cmp	r0, r3
 800b768:	d01b      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b76a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b76e:	4298      	cmp	r0, r3
 800b770:	d017      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b776:	4298      	cmp	r0, r3
 800b778:	d013      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b77a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b77e:	4298      	cmp	r0, r3
 800b780:	d00f      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b782:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b78a:	4290      	cmp	r0, r2
 800b78c:	bf18      	it	ne
 800b78e:	4298      	cmpne	r0, r3
 800b790:	d007      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b792:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b796:	4298      	cmp	r0, r3
 800b798:	d003      	beq.n	800b7a2 <HAL_GPIO_Init+0x6e>
 800b79a:	21aa      	movs	r1, #170	; 0xaa
 800b79c:	48a2      	ldr	r0, [pc, #648]	; (800ba28 <HAL_GPIO_Init+0x2f4>)
 800b79e:	f7f9 fc09 	bl	8004fb4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b7a2:	883b      	ldrh	r3, [r7, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f000 811a 	beq.w	800b9de <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800b7b0:	bf18      	it	ne
 800b7b2:	2a03      	cmpne	r2, #3
 800b7b4:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800b7b8:	bf8c      	ite	hi
 800b7ba:	2301      	movhi	r3, #1
 800b7bc:	2300      	movls	r3, #0
 800b7be:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800b7c2:	bf0c      	ite	eq
 800b7c4:	2300      	moveq	r3, #0
 800b7c6:	f003 0301 	andne.w	r3, r3, #1
 800b7ca:	3a11      	subs	r2, #17
 800b7cc:	2a01      	cmp	r2, #1
 800b7ce:	bf94      	ite	ls
 800b7d0:	2300      	movls	r3, #0
 800b7d2:	f003 0301 	andhi.w	r3, r3, #1
 800b7d6:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800b7da:	bf0c      	ite	eq
 800b7dc:	2300      	moveq	r3, #0
 800b7de:	f003 0301 	andne.w	r3, r3, #1
 800b7e2:	b11b      	cbz	r3, 800b7ec <HAL_GPIO_Init+0xb8>
 800b7e4:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800b7e8:	f040 813e 	bne.w	800ba68 <HAL_GPIO_Init+0x334>
{
 800b7ec:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7ee:	f8df a260 	ldr.w	sl, [pc, #608]	; 800ba50 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b7f2:	46b8      	mov	r8, r7
 800b7f4:	e003      	b.n	800b7fe <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b7f6:	3501      	adds	r5, #1
 800b7f8:	2d10      	cmp	r5, #16
 800b7fa:	f000 80b3 	beq.w	800b964 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800b7fe:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b800:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800b804:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b806:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800b80a:	ea34 0303 	bics.w	r3, r4, r3
 800b80e:	d1f2      	bne.n	800b7f6 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b810:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b814:	f001 0303 	and.w	r3, r1, #3
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	2a01      	cmp	r2, #1
 800b81c:	f240 80a5 	bls.w	800b96a <HAL_GPIO_Init+0x236>
 800b820:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b822:	f04f 0b03 	mov.w	fp, #3
 800b826:	fa0b fb07 	lsl.w	fp, fp, r7
 800b82a:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b82e:	2b03      	cmp	r3, #3
 800b830:	d025      	beq.n	800b87e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b832:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b836:	2802      	cmp	r0, #2
 800b838:	f200 80b3 	bhi.w	800b9a2 <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800b83c:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b83e:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b840:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b842:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b846:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800b84a:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b84c:	d117      	bne.n	800b87e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b84e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b852:	280f      	cmp	r0, #15
 800b854:	f200 80c8 	bhi.w	800b9e8 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800b858:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b85a:	f005 0e07 	and.w	lr, r5, #7
 800b85e:	f04f 0c0f 	mov.w	ip, #15
 800b862:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b866:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b86a:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b86c:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b870:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b874:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b878:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800b87c:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800b87e:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b880:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b882:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b886:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b88a:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800b88e:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b890:	d0b1      	beq.n	800b7f6 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b892:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b896:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b89a:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b89e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8a2:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b8a4:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800b8a8:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b8ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b8b0:	9203      	str	r2, [sp, #12]
 800b8b2:	4a5e      	ldr	r2, [pc, #376]	; (800ba2c <HAL_GPIO_Init+0x2f8>)
 800b8b4:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800b8b6:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8b8:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800b8ba:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b8bc:	40a3      	lsls	r3, r4
 800b8be:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b8c2:	4857      	ldr	r0, [pc, #348]	; (800ba20 <HAL_GPIO_Init+0x2ec>)
 800b8c4:	4286      	cmp	r6, r0
 800b8c6:	d025      	beq.n	800b914 <HAL_GPIO_Init+0x1e0>
 800b8c8:	9801      	ldr	r0, [sp, #4]
 800b8ca:	2800      	cmp	r0, #0
 800b8cc:	d07d      	beq.n	800b9ca <HAL_GPIO_Init+0x296>
 800b8ce:	4855      	ldr	r0, [pc, #340]	; (800ba24 <HAL_GPIO_Init+0x2f0>)
 800b8d0:	4286      	cmp	r6, r0
 800b8d2:	d07f      	beq.n	800b9d4 <HAL_GPIO_Init+0x2a0>
 800b8d4:	4856      	ldr	r0, [pc, #344]	; (800ba30 <HAL_GPIO_Init+0x2fc>)
 800b8d6:	4286      	cmp	r6, r0
 800b8d8:	f000 8091 	beq.w	800b9fe <HAL_GPIO_Init+0x2ca>
 800b8dc:	4855      	ldr	r0, [pc, #340]	; (800ba34 <HAL_GPIO_Init+0x300>)
 800b8de:	4286      	cmp	r6, r0
 800b8e0:	f000 8092 	beq.w	800ba08 <HAL_GPIO_Init+0x2d4>
 800b8e4:	4854      	ldr	r0, [pc, #336]	; (800ba38 <HAL_GPIO_Init+0x304>)
 800b8e6:	4286      	cmp	r6, r0
 800b8e8:	f000 80b4 	beq.w	800ba54 <HAL_GPIO_Init+0x320>
 800b8ec:	4853      	ldr	r0, [pc, #332]	; (800ba3c <HAL_GPIO_Init+0x308>)
 800b8ee:	4286      	cmp	r6, r0
 800b8f0:	f000 80b5 	beq.w	800ba5e <HAL_GPIO_Init+0x32a>
 800b8f4:	4852      	ldr	r0, [pc, #328]	; (800ba40 <HAL_GPIO_Init+0x30c>)
 800b8f6:	4286      	cmp	r6, r0
 800b8f8:	f000 808b 	beq.w	800ba12 <HAL_GPIO_Init+0x2de>
 800b8fc:	4851      	ldr	r0, [pc, #324]	; (800ba44 <HAL_GPIO_Init+0x310>)
 800b8fe:	4286      	cmp	r6, r0
 800b900:	f000 80b7 	beq.w	800ba72 <HAL_GPIO_Init+0x33e>
 800b904:	4850      	ldr	r0, [pc, #320]	; (800ba48 <HAL_GPIO_Init+0x314>)
 800b906:	4286      	cmp	r6, r0
 800b908:	bf0c      	ite	eq
 800b90a:	2009      	moveq	r0, #9
 800b90c:	200a      	movne	r0, #10
 800b90e:	fa00 f404 	lsl.w	r4, r0, r4
 800b912:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800b914:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800b916:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800b91a:	4b4c      	ldr	r3, [pc, #304]	; (800ba4c <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800b91c:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800b91e:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b920:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800b922:	4b4a      	ldr	r3, [pc, #296]	; (800ba4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b924:	bf54      	ite	pl
 800b926:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b928:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b92c:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800b92e:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800b930:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800b932:	4b46      	ldr	r3, [pc, #280]	; (800ba4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b934:	bf54      	ite	pl
 800b936:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b938:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b93c:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800b93e:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800b940:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800b942:	4b42      	ldr	r3, [pc, #264]	; (800ba4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b944:	bf54      	ite	pl
 800b946:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b948:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800b94c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b94e:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800b950:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800b952:	4a3e      	ldr	r2, [pc, #248]	; (800ba4c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b954:	bf54      	ite	pl
 800b956:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800b958:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b95c:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800b95e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b960:	f47f af4d 	bne.w	800b7fe <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800b964:	b005      	add	sp, #20
 800b966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b96a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b96e:	2803      	cmp	r0, #3
 800b970:	d820      	bhi.n	800b9b4 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800b972:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b974:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800b978:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b97c:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800b980:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b982:	ea20 000b 	bic.w	r0, r0, fp
 800b986:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800b98a:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800b98e:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800b990:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b992:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b996:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800b99a:	40ac      	lsls	r4, r5
 800b99c:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800b99e:	6074      	str	r4, [r6, #4]
 800b9a0:	e745      	b.n	800b82e <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b9a2:	21ce      	movs	r1, #206	; 0xce
 800b9a4:	4820      	ldr	r0, [pc, #128]	; (800ba28 <HAL_GPIO_Init+0x2f4>)
 800b9a6:	f7f9 fb05 	bl	8004fb4 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b9aa:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b9ae:	f001 0303 	and.w	r3, r1, #3
 800b9b2:	e743      	b.n	800b83c <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b9b4:	21bd      	movs	r1, #189	; 0xbd
 800b9b6:	481c      	ldr	r0, [pc, #112]	; (800ba28 <HAL_GPIO_Init+0x2f4>)
 800b9b8:	f7f9 fafc 	bl	8004fb4 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b9c0:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b9c4:	f001 0303 	and.w	r3, r1, #3
 800b9c8:	e7d3      	b.n	800b972 <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b9ca:	2001      	movs	r0, #1
 800b9cc:	fa00 f404 	lsl.w	r4, r0, r4
 800b9d0:	4323      	orrs	r3, r4
 800b9d2:	e79f      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800b9d4:	2002      	movs	r0, #2
 800b9d6:	fa00 f404 	lsl.w	r4, r0, r4
 800b9da:	4323      	orrs	r3, r4
 800b9dc:	e79a      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b9de:	21ab      	movs	r1, #171	; 0xab
 800b9e0:	4811      	ldr	r0, [pc, #68]	; (800ba28 <HAL_GPIO_Init+0x2f4>)
 800b9e2:	f7f9 fae7 	bl	8004fb4 <assert_failed>
 800b9e6:	e6e0      	b.n	800b7aa <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b9e8:	21db      	movs	r1, #219	; 0xdb
 800b9ea:	480f      	ldr	r0, [pc, #60]	; (800ba28 <HAL_GPIO_Init+0x2f4>)
 800b9ec:	f7f9 fae2 	bl	8004fb4 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b9f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b9f4:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b9f8:	f001 0303 	and.w	r3, r1, #3
 800b9fc:	e72c      	b.n	800b858 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b9fe:	2003      	movs	r0, #3
 800ba00:	fa00 f404 	lsl.w	r4, r0, r4
 800ba04:	4323      	orrs	r3, r4
 800ba06:	e785      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800ba08:	2004      	movs	r0, #4
 800ba0a:	fa00 f404 	lsl.w	r4, r0, r4
 800ba0e:	4323      	orrs	r3, r4
 800ba10:	e780      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800ba12:	2007      	movs	r0, #7
 800ba14:	fa00 f404 	lsl.w	r4, r0, r4
 800ba18:	4323      	orrs	r3, r4
 800ba1a:	e77b      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800ba1c:	40020400 	.word	0x40020400
 800ba20:	40020000 	.word	0x40020000
 800ba24:	40020800 	.word	0x40020800
 800ba28:	0802c9fc 	.word	0x0802c9fc
 800ba2c:	40013800 	.word	0x40013800
 800ba30:	40020c00 	.word	0x40020c00
 800ba34:	40021000 	.word	0x40021000
 800ba38:	40021400 	.word	0x40021400
 800ba3c:	40021800 	.word	0x40021800
 800ba40:	40021c00 	.word	0x40021c00
 800ba44:	40022000 	.word	0x40022000
 800ba48:	40022400 	.word	0x40022400
 800ba4c:	40013c00 	.word	0x40013c00
 800ba50:	40023800 	.word	0x40023800
 800ba54:	2005      	movs	r0, #5
 800ba56:	fa00 f404 	lsl.w	r4, r0, r4
 800ba5a:	4323      	orrs	r3, r4
 800ba5c:	e75a      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800ba5e:	2006      	movs	r0, #6
 800ba60:	fa00 f404 	lsl.w	r4, r0, r4
 800ba64:	4323      	orrs	r3, r4
 800ba66:	e755      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800ba68:	21ac      	movs	r1, #172	; 0xac
 800ba6a:	4804      	ldr	r0, [pc, #16]	; (800ba7c <HAL_GPIO_Init+0x348>)
 800ba6c:	f7f9 faa2 	bl	8004fb4 <assert_failed>
 800ba70:	e6bc      	b.n	800b7ec <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800ba72:	2008      	movs	r0, #8
 800ba74:	fa00 f404 	lsl.w	r4, r0, r4
 800ba78:	4323      	orrs	r3, r4
 800ba7a:	e74b      	b.n	800b914 <HAL_GPIO_Init+0x1e0>
 800ba7c:	0802c9fc 	.word	0x0802c9fc

0800ba80 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ba80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ba84:	4f6b      	ldr	r7, [pc, #428]	; (800bc34 <HAL_GPIO_DeInit+0x1b4>)
{
 800ba86:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ba88:	4b6b      	ldr	r3, [pc, #428]	; (800bc38 <HAL_GPIO_DeInit+0x1b8>)
{
 800ba8a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800ba8c:	42b8      	cmp	r0, r7
 800ba8e:	bf18      	it	ne
 800ba90:	4298      	cmpne	r0, r3
 800ba92:	bf14      	ite	ne
 800ba94:	2701      	movne	r7, #1
 800ba96:	2700      	moveq	r7, #0
 800ba98:	d027      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800ba9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba9e:	4298      	cmp	r0, r3
 800baa0:	d023      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800baa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baa6:	4298      	cmp	r0, r3
 800baa8:	d01f      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800baaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800baae:	4298      	cmp	r0, r3
 800bab0:	d01b      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800bab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bab6:	4298      	cmp	r0, r3
 800bab8:	d017      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800baba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800babe:	4298      	cmp	r0, r3
 800bac0:	d013      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800bac2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bac6:	4298      	cmp	r0, r3
 800bac8:	d00f      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800baca:	4a5c      	ldr	r2, [pc, #368]	; (800bc3c <HAL_GPIO_DeInit+0x1bc>)
 800bacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad0:	4290      	cmp	r0, r2
 800bad2:	bf18      	it	ne
 800bad4:	4298      	cmpne	r0, r3
 800bad6:	d008      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800bad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800badc:	4298      	cmp	r0, r3
 800bade:	d004      	beq.n	800baea <HAL_GPIO_DeInit+0x6a>
 800bae0:	f240 112b 	movw	r1, #299	; 0x12b
 800bae4:	4856      	ldr	r0, [pc, #344]	; (800bc40 <HAL_GPIO_DeInit+0x1c0>)
 800bae6:	f7f9 fa65 	bl	8004fb4 <assert_failed>
{
 800baea:	2300      	movs	r3, #0
 800baec:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bc60 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800baf0:	f8df a140 	ldr.w	sl, [pc, #320]	; 800bc34 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800baf4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800bc64 <HAL_GPIO_DeInit+0x1e4>
 800baf8:	e002      	b.n	800bb00 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800bafa:	3301      	adds	r3, #1
 800bafc:	2b10      	cmp	r3, #16
 800bafe:	d07b      	beq.n	800bbf8 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800bb00:	2001      	movs	r0, #1
 800bb02:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800bb06:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800bb0a:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800bb0e:	d1f4      	bne.n	800bafa <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800bb10:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb14:	f003 0103 	and.w	r1, r3, #3
 800bb18:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bb1c:	4554      	cmp	r4, sl
 800bb1e:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb20:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800bb24:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800bb28:	fa0c fc01 	lsl.w	ip, ip, r1
 800bb2c:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bb30:	d01e      	beq.n	800bb70 <HAL_GPIO_DeInit+0xf0>
 800bb32:	2f00      	cmp	r7, #0
 800bb34:	d063      	beq.n	800bbfe <HAL_GPIO_DeInit+0x17e>
 800bb36:	4843      	ldr	r0, [pc, #268]	; (800bc44 <HAL_GPIO_DeInit+0x1c4>)
 800bb38:	4284      	cmp	r4, r0
 800bb3a:	d063      	beq.n	800bc04 <HAL_GPIO_DeInit+0x184>
 800bb3c:	4842      	ldr	r0, [pc, #264]	; (800bc48 <HAL_GPIO_DeInit+0x1c8>)
 800bb3e:	4284      	cmp	r4, r0
 800bb40:	d064      	beq.n	800bc0c <HAL_GPIO_DeInit+0x18c>
 800bb42:	4842      	ldr	r0, [pc, #264]	; (800bc4c <HAL_GPIO_DeInit+0x1cc>)
 800bb44:	4284      	cmp	r4, r0
 800bb46:	d065      	beq.n	800bc14 <HAL_GPIO_DeInit+0x194>
 800bb48:	4841      	ldr	r0, [pc, #260]	; (800bc50 <HAL_GPIO_DeInit+0x1d0>)
 800bb4a:	4284      	cmp	r4, r0
 800bb4c:	d066      	beq.n	800bc1c <HAL_GPIO_DeInit+0x19c>
 800bb4e:	4841      	ldr	r0, [pc, #260]	; (800bc54 <HAL_GPIO_DeInit+0x1d4>)
 800bb50:	4284      	cmp	r4, r0
 800bb52:	d053      	beq.n	800bbfc <HAL_GPIO_DeInit+0x17c>
 800bb54:	4840      	ldr	r0, [pc, #256]	; (800bc58 <HAL_GPIO_DeInit+0x1d8>)
 800bb56:	4284      	cmp	r4, r0
 800bb58:	d064      	beq.n	800bc24 <HAL_GPIO_DeInit+0x1a4>
 800bb5a:	4838      	ldr	r0, [pc, #224]	; (800bc3c <HAL_GPIO_DeInit+0x1bc>)
 800bb5c:	4284      	cmp	r4, r0
 800bb5e:	d065      	beq.n	800bc2c <HAL_GPIO_DeInit+0x1ac>
 800bb60:	483e      	ldr	r0, [pc, #248]	; (800bc5c <HAL_GPIO_DeInit+0x1dc>)
 800bb62:	4284      	cmp	r4, r0
 800bb64:	bf14      	ite	ne
 800bb66:	200a      	movne	r0, #10
 800bb68:	2009      	moveq	r0, #9
 800bb6a:	fa00 f101 	lsl.w	r1, r0, r1
 800bb6e:	e000      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bb70:	2100      	movs	r1, #0
 800bb72:	4588      	cmp	r8, r1
 800bb74:	d11b      	bne.n	800bbae <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bb76:	f8d9 1000 	ldr.w	r1, [r9]
 800bb7a:	ea21 010e 	bic.w	r1, r1, lr
 800bb7e:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bb82:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb86:	ea21 010e 	bic.w	r1, r1, lr
 800bb8a:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bb8e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800bb92:	ea21 010e 	bic.w	r1, r1, lr
 800bb96:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bb9a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800bb9e:	ea21 010e 	bic.w	r1, r1, lr
 800bba2:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800bba6:	68b1      	ldr	r1, [r6, #8]
 800bba8:	ea21 010c 	bic.w	r1, r1, ip
 800bbac:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbae:	0059      	lsls	r1, r3, #1
 800bbb0:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbb2:	f003 0c07 	and.w	ip, r3, #7
 800bbb6:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbb8:	fa00 f101 	lsl.w	r1, r0, r1
 800bbbc:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbbe:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbc2:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbc6:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800bbca:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbcc:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800bbce:	3301      	adds	r3, #1
 800bbd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800bbd4:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800bbd6:	6a06      	ldr	r6, [r0, #32]
 800bbd8:	ea26 060c 	bic.w	r6, r6, ip
 800bbdc:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bbde:	68e0      	ldr	r0, [r4, #12]
 800bbe0:	ea20 0001 	bic.w	r0, r0, r1
 800bbe4:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bbe6:	6860      	ldr	r0, [r4, #4]
 800bbe8:	ea20 0202 	bic.w	r2, r0, r2
 800bbec:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bbee:	68a2      	ldr	r2, [r4, #8]
 800bbf0:	ea22 0101 	bic.w	r1, r2, r1
 800bbf4:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800bbf6:	d183      	bne.n	800bb00 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800bbf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800bbfc:	2006      	movs	r0, #6
 800bbfe:	fa00 f101 	lsl.w	r1, r0, r1
 800bc02:	e7b6      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc04:	2002      	movs	r0, #2
 800bc06:	fa00 f101 	lsl.w	r1, r0, r1
 800bc0a:	e7b2      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc0c:	2003      	movs	r0, #3
 800bc0e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc12:	e7ae      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc14:	2004      	movs	r0, #4
 800bc16:	fa00 f101 	lsl.w	r1, r0, r1
 800bc1a:	e7aa      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc1c:	2005      	movs	r0, #5
 800bc1e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc22:	e7a6      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc24:	2007      	movs	r0, #7
 800bc26:	fa00 f101 	lsl.w	r1, r0, r1
 800bc2a:	e7a2      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc2c:	2008      	movs	r0, #8
 800bc2e:	fa00 f101 	lsl.w	r1, r0, r1
 800bc32:	e79e      	b.n	800bb72 <HAL_GPIO_DeInit+0xf2>
 800bc34:	40020000 	.word	0x40020000
 800bc38:	40020400 	.word	0x40020400
 800bc3c:	40022000 	.word	0x40022000
 800bc40:	0802c9fc 	.word	0x0802c9fc
 800bc44:	40020800 	.word	0x40020800
 800bc48:	40020c00 	.word	0x40020c00
 800bc4c:	40021000 	.word	0x40021000
 800bc50:	40021400 	.word	0x40021400
 800bc54:	40021800 	.word	0x40021800
 800bc58:	40021c00 	.word	0x40021c00
 800bc5c:	40022400 	.word	0x40022400
 800bc60:	40013800 	.word	0x40013800
 800bc64:	40013c00 	.word	0x40013c00

0800bc68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	b129      	cbz	r1, 800bc7c <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bc70:	692b      	ldr	r3, [r5, #16]
 800bc72:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800bc74:	bf14      	ite	ne
 800bc76:	2001      	movne	r0, #1
 800bc78:	2000      	moveq	r0, #0
 800bc7a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bc7c:	f240 1177 	movw	r1, #375	; 0x177
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <HAL_GPIO_ReadPin+0x20>)
 800bc82:	f7f9 f997 	bl	8004fb4 <assert_failed>
 800bc86:	e7f3      	b.n	800bc70 <HAL_GPIO_ReadPin+0x8>
 800bc88:	0802c9fc 	.word	0x0802c9fc

0800bc8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bc8c:	b570      	push	{r4, r5, r6, lr}
 800bc8e:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bc90:	460c      	mov	r4, r1
{
 800bc92:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bc94:	b161      	cbz	r1, 800bcb0 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800bc96:	2d01      	cmp	r5, #1
 800bc98:	d803      	bhi.n	800bca2 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800bc9a:	b905      	cbnz	r5, 800bc9e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bc9c:	0424      	lsls	r4, r4, #16
 800bc9e:	61b4      	str	r4, [r6, #24]
  }
}
 800bca0:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800bca2:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800bca6:	4805      	ldr	r0, [pc, #20]	; (800bcbc <HAL_GPIO_WritePin+0x30>)
 800bca8:	f7f9 f984 	bl	8004fb4 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800bcac:	61b4      	str	r4, [r6, #24]
}
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcb0:	f240 1197 	movw	r1, #407	; 0x197
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <HAL_GPIO_WritePin+0x30>)
 800bcb6:	f7f9 f97d 	bl	8004fb4 <assert_failed>
 800bcba:	e7ec      	b.n	800bc96 <HAL_GPIO_WritePin+0xa>
 800bcbc:	0802c9fc 	.word	0x0802c9fc

0800bcc0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcc4:	460c      	mov	r4, r1
 800bcc6:	b141      	cbz	r1, 800bcda <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bcc8:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bcca:	ea04 0301 	and.w	r3, r4, r1
 800bcce:	ea24 0401 	bic.w	r4, r4, r1
 800bcd2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800bcd6:	61ac      	str	r4, [r5, #24]
}
 800bcd8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800bcda:	f240 11af 	movw	r1, #431	; 0x1af
 800bcde:	4802      	ldr	r0, [pc, #8]	; (800bce8 <HAL_GPIO_TogglePin+0x28>)
 800bce0:	f7f9 f968 	bl	8004fb4 <assert_failed>
 800bce4:	e7f0      	b.n	800bcc8 <HAL_GPIO_TogglePin+0x8>
 800bce6:	bf00      	nop
 800bce8:	0802c9fc 	.word	0x0802c9fc

0800bcec <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop

0800bcf0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bcf0:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800bcf2:	6951      	ldr	r1, [r2, #20]
 800bcf4:	4201      	tst	r1, r0
 800bcf6:	d100      	bne.n	800bcfa <HAL_GPIO_EXTI_IRQHandler+0xa>
 800bcf8:	4770      	bx	lr
{
 800bcfa:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bcfc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bcfe:	f7ff fff5 	bl	800bcec <HAL_GPIO_EXTI_Callback>
}
 800bd02:	bd08      	pop	{r3, pc}
 800bd04:	40013c00 	.word	0x40013c00

0800bd08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd10:	4926      	ldr	r1, [pc, #152]	; (800bdac <I2C_TransferConfig+0xa4>)
{
 800bd12:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd14:	4a26      	ldr	r2, [pc, #152]	; (800bdb0 <I2C_TransferConfig+0xa8>)
{
 800bd16:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd18:	6803      	ldr	r3, [r0, #0]
{
 800bd1a:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	bf18      	it	ne
 800bd20:	428b      	cmpne	r3, r1
 800bd22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bd26:	bf14      	ite	ne
 800bd28:	2201      	movne	r2, #1
 800bd2a:	2200      	moveq	r2, #0
 800bd2c:	428b      	cmp	r3, r1
 800bd2e:	bf0c      	ite	eq
 800bd30:	2200      	moveq	r2, #0
 800bd32:	f002 0201 	andne.w	r2, r2, #1
 800bd36:	b112      	cbz	r2, 800bd3e <I2C_TransferConfig+0x36>
 800bd38:	4a1e      	ldr	r2, [pc, #120]	; (800bdb4 <I2C_TransferConfig+0xac>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d123      	bne.n	800bd86 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800bd3e:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800bd42:	d002      	beq.n	800bd4a <I2C_TransferConfig+0x42>
 800bd44:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800bd48:	d129      	bne.n	800bd9e <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800bd4a:	4b1b      	ldr	r3, [pc, #108]	; (800bdb8 <I2C_TransferConfig+0xb0>)
 800bd4c:	429f      	cmp	r7, r3
 800bd4e:	d005      	beq.n	800bd5c <I2C_TransferConfig+0x54>
 800bd50:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800bd54:	4a19      	ldr	r2, [pc, #100]	; (800bdbc <I2C_TransferConfig+0xb4>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d000      	beq.n	800bd5c <I2C_TransferConfig+0x54>
 800bd5a:	b9d7      	cbnz	r7, 800bd92 <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd5c:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd60:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd64:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800bd68:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd6c:	4a14      	ldr	r2, [pc, #80]	; (800bdc0 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd6e:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd70:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800bd74:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bd76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800bd7a:	ea27 0702 	bic.w	r7, r7, r2
 800bd7e:	433b      	orrs	r3, r7
 800bd80:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd86:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800bd8a:	480e      	ldr	r0, [pc, #56]	; (800bdc4 <I2C_TransferConfig+0xbc>)
 800bd8c:	f7f9 f912 	bl	8004fb4 <assert_failed>
 800bd90:	e7d5      	b.n	800bd3e <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800bd92:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800bd96:	480b      	ldr	r0, [pc, #44]	; (800bdc4 <I2C_TransferConfig+0xbc>)
 800bd98:	f7f9 f90c 	bl	8004fb4 <assert_failed>
 800bd9c:	e7de      	b.n	800bd5c <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800bd9e:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800bda2:	4808      	ldr	r0, [pc, #32]	; (800bdc4 <I2C_TransferConfig+0xbc>)
 800bda4:	f7f9 f906 	bl	8004fb4 <assert_failed>
 800bda8:	e7cf      	b.n	800bd4a <I2C_TransferConfig+0x42>
 800bdaa:	bf00      	nop
 800bdac:	40005800 	.word	0x40005800
 800bdb0:	40005400 	.word	0x40005400
 800bdb4:	40006000 	.word	0x40006000
 800bdb8:	80004000 	.word	0x80004000
 800bdbc:	80002000 	.word	0x80002000
 800bdc0:	03ff63ff 	.word	0x03ff63ff
 800bdc4:	0802ca38 	.word	0x0802ca38

0800bdc8 <I2C_IsErrorOccurred>:
{
 800bdc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800bdcc:	6803      	ldr	r3, [r0, #0]
{
 800bdce:	460d      	mov	r5, r1
 800bdd0:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800bdd2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800bdd4:	f011 0110 	ands.w	r1, r1, #16
 800bdd8:	d045      	beq.n	800be66 <I2C_IsErrorOccurred+0x9e>
 800bdda:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800bddc:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bde0:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800bde2:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bde6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bde8:	699a      	ldr	r2, [r3, #24]
 800bdea:	0696      	lsls	r6, r2, #26
 800bdec:	f100 808d 	bmi.w	800bf0a <I2C_IsErrorOccurred+0x142>
 800bdf0:	f1b9 0f00 	cmp.w	r9, #0
 800bdf4:	f040 808d 	bne.w	800bf12 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800bdf8:	1c6a      	adds	r2, r5, #1
 800bdfa:	d152      	bne.n	800bea2 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800bdfc:	699a      	ldr	r2, [r3, #24]
 800bdfe:	0697      	lsls	r7, r2, #26
 800be00:	d5fc      	bpl.n	800bdfc <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be02:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800be04:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800be06:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be0a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800be0c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be0e:	05d5      	lsls	r5, r2, #23
 800be10:	d42d      	bmi.n	800be6e <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800be12:	0557      	lsls	r7, r2, #21
 800be14:	d53d      	bpl.n	800be92 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be16:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800be1a:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be1e:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be20:	0596      	lsls	r6, r2, #22
 800be22:	d504      	bpl.n	800be2e <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be24:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800be28:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800be2c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be2e:	699a      	ldr	r2, [r3, #24]
 800be30:	0790      	lsls	r0, r2, #30
 800be32:	d501      	bpl.n	800be38 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800be34:	2200      	movs	r2, #0
 800be36:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be38:	699a      	ldr	r2, [r3, #24]
 800be3a:	07d2      	lsls	r2, r2, #31
 800be3c:	d524      	bpl.n	800be88 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800be3e:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be40:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800be42:	4835      	ldr	r0, [pc, #212]	; (800bf18 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800be44:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800be48:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be4a:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800be4c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800be4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800be50:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800be54:	4319      	orrs	r1, r3
 800be56:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800be58:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800be5c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800be60:	4648      	mov	r0, r9
 800be62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800be66:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800be68:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800be6a:	05d5      	lsls	r5, r2, #23
 800be6c:	d5d1      	bpl.n	800be12 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be6e:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800be72:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be76:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800be78:	0550      	lsls	r0, r2, #21
 800be7a:	d5d1      	bpl.n	800be20 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800be80:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800be84:	61d8      	str	r0, [r3, #28]
 800be86:	e7cb      	b.n	800be20 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be88:	699a      	ldr	r2, [r3, #24]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	619a      	str	r2, [r3, #24]
 800be90:	e7d5      	b.n	800be3e <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800be92:	0595      	lsls	r5, r2, #22
 800be94:	d4c6      	bmi.n	800be24 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800be96:	f1b9 0f00 	cmp.w	r9, #0
 800be9a:	d1c8      	bne.n	800be2e <I2C_IsErrorOccurred+0x66>
}
 800be9c:	4648      	mov	r0, r9
 800be9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800bea2:	f7fc f971 	bl	8008188 <HAL_GetTick>
 800bea6:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800bea8:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800beaa:	42a8      	cmp	r0, r5
 800beac:	d801      	bhi.n	800beb2 <I2C_IsErrorOccurred+0xea>
 800beae:	2d00      	cmp	r5, #0
 800beb0:	d19a      	bne.n	800bde8 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800beb2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800beb4:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800beb8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800beba:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800bebc:	040e      	lsls	r6, r1, #16
 800bebe:	d50d      	bpl.n	800bedc <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800bec0:	0441      	lsls	r1, r0, #17
 800bec2:	d40b      	bmi.n	800bedc <I2C_IsErrorOccurred+0x114>
 800bec4:	2a20      	cmp	r2, #32
 800bec6:	d009      	beq.n	800bedc <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bece:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800bed0:	f7fc f95a 	bl	8008188 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bed4:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800bed6:	4607      	mov	r7, r0
 800bed8:	e000      	b.n	800bedc <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	699e      	ldr	r6, [r3, #24]
 800bede:	f016 0620 	ands.w	r6, r6, #32
 800bee2:	d181      	bne.n	800bde8 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800bee4:	f7fc f950 	bl	8008188 <HAL_GetTick>
 800bee8:	1bc0      	subs	r0, r0, r7
 800beea:	2819      	cmp	r0, #25
 800beec:	d9f5      	bls.n	800beda <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800beee:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800bef0:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800bef4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bef8:	f043 0320 	orr.w	r3, r3, #32
 800befc:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800befe:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf02:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf04:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800bf08:	e7e8      	b.n	800bedc <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800bf0a:	f1b9 0f00 	cmp.w	r9, #0
 800bf0e:	f43f af78 	beq.w	800be02 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800bf12:	2104      	movs	r1, #4
 800bf14:	e7a8      	b.n	800be68 <I2C_IsErrorOccurred+0xa0>
 800bf16:	bf00      	nop
 800bf18:	fe00e800 	.word	0xfe00e800

0800bf1c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800bf1c:	b570      	push	{r4, r5, r6, lr}
 800bf1e:	4604      	mov	r4, r0
 800bf20:	460d      	mov	r5, r1
 800bf22:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf24:	e004      	b.n	800bf30 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf26:	f7ff ff4f 	bl	800bdc8 <I2C_IsErrorOccurred>
 800bf2a:	b950      	cbnz	r0, 800bf42 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800bf2c:	1c6a      	adds	r2, r5, #1
 800bf2e:	d10a      	bne.n	800bf46 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf30:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf32:	4632      	mov	r2, r6
 800bf34:	4629      	mov	r1, r5
 800bf36:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	079b      	lsls	r3, r3, #30
 800bf3c:	d5f3      	bpl.n	800bf26 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800bf3e:	2000      	movs	r0, #0
}
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bf42:	2001      	movs	r0, #1
}
 800bf44:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf46:	f7fc f91f 	bl	8008188 <HAL_GetTick>
 800bf4a:	1b80      	subs	r0, r0, r6
 800bf4c:	42a8      	cmp	r0, r5
 800bf4e:	d801      	bhi.n	800bf54 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	d1ed      	bne.n	800bf30 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf54:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf56:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf58:	2200      	movs	r2, #0
        return HAL_ERROR;
 800bf5a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf5c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bf5e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf62:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bf64:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf68:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
 800bf6e:	bf00      	nop

0800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	4605      	mov	r5, r0
 800bf74:	460c      	mov	r4, r1
 800bf76:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf78:	e008      	b.n	800bf8c <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf7a:	f7ff ff25 	bl	800bdc8 <I2C_IsErrorOccurred>
 800bf7e:	b9d8      	cbnz	r0, 800bfb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf80:	f7fc f902 	bl	8008188 <HAL_GetTick>
 800bf84:	1b80      	subs	r0, r0, r6
 800bf86:	42a0      	cmp	r0, r4
 800bf88:	d809      	bhi.n	800bf9e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800bf8a:	b144      	cbz	r4, 800bf9e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf8c:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf8e:	4632      	mov	r2, r6
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	069b      	lsls	r3, r3, #26
 800bf98:	d5ef      	bpl.n	800bf7a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800bf9a:	2000      	movs	r0, #0
}
 800bf9c:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf9e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfa0:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfa2:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800bfa4:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfa6:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800bfa8:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfac:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bfae:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfb2:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bfb8:	2001      	movs	r0, #1
}
 800bfba:	bd70      	pop	{r4, r5, r6, pc}

0800bfbc <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800bfbc:	b570      	push	{r4, r5, r6, lr}
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfc4:	e00c      	b.n	800bfe0 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfc6:	f7ff feff 	bl	800bdc8 <I2C_IsErrorOccurred>
 800bfca:	b9e8      	cbnz	r0, 800c008 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	699a      	ldr	r2, [r3, #24]
 800bfd0:	0691      	lsls	r1, r2, #26
 800bfd2:	d41b      	bmi.n	800c00c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfd4:	f7fc f8d8 	bl	8008188 <HAL_GetTick>
 800bfd8:	1b80      	subs	r0, r0, r6
 800bfda:	42a8      	cmp	r0, r5
 800bfdc:	d809      	bhi.n	800bff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800bfde:	b145      	cbz	r5, 800bff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfe0:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfe2:	4632      	mov	r2, r6
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	075b      	lsls	r3, r3, #29
 800bfec:	d5eb      	bpl.n	800bfc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800bfee:	2000      	movs	r0, #0
}
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bff2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bff4:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800bff6:	2100      	movs	r1, #0
      return HAL_ERROR;
 800bff8:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bffa:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800bffc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c000:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c002:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800c006:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800c008:	2001      	movs	r0, #1
}
 800c00a:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800c00c:	699a      	ldr	r2, [r3, #24]
 800c00e:	0752      	lsls	r2, r2, #29
 800c010:	d502      	bpl.n	800c018 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800c012:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c014:	2a00      	cmp	r2, #0
 800c016:	d1ea      	bne.n	800bfee <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c018:	699a      	ldr	r2, [r3, #24]
 800c01a:	f012 0210 	ands.w	r2, r2, #16
 800c01e:	d012      	beq.n	800c046 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c020:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c022:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c024:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800c026:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c028:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800c02a:	4808      	ldr	r0, [pc, #32]	; (800c04c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c02c:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c02e:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	4002      	ands	r2, r0
        return HAL_ERROR;
 800c034:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800c036:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800c038:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800c03c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c040:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800c044:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c046:	6462      	str	r2, [r4, #68]	; 0x44
 800c048:	e7ee      	b.n	800c028 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800c04a:	bf00      	nop
 800c04c:	fe00e800 	.word	0xfe00e800

0800c050 <I2C_RequestMemoryRead>:
{
 800c050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c054:	4c26      	ldr	r4, [pc, #152]	; (800c0f0 <I2C_RequestMemoryRead+0xa0>)
{
 800c056:	b083      	sub	sp, #12
 800c058:	4698      	mov	r8, r3
 800c05a:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c05c:	9400      	str	r4, [sp, #0]
{
 800c05e:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c060:	2300      	movs	r3, #0
 800c062:	fa5f f288 	uxtb.w	r2, r8
{
 800c066:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c06a:	f7ff fe4d 	bl	800bd08 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c06e:	4628      	mov	r0, r5
 800c070:	463a      	mov	r2, r7
 800c072:	4621      	mov	r1, r4
 800c074:	f7ff ff52 	bl	800bf1c <I2C_WaitOnTXISFlagUntilTimeout>
 800c078:	b9e0      	cbnz	r0, 800c0b4 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c07a:	f1b8 0f01 	cmp.w	r8, #1
 800c07e:	4606      	mov	r6, r0
 800c080:	d10d      	bne.n	800c09e <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c082:	fa5f f389 	uxtb.w	r3, r9
 800c086:	682a      	ldr	r2, [r5, #0]
 800c088:	6293      	str	r3, [r2, #40]	; 0x28
 800c08a:	e001      	b.n	800c090 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800c08c:	1c61      	adds	r1, r4, #1
 800c08e:	d116      	bne.n	800c0be <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c090:	6993      	ldr	r3, [r2, #24]
 800c092:	065b      	lsls	r3, r3, #25
 800c094:	d5fa      	bpl.n	800c08c <I2C_RequestMemoryRead+0x3c>
}
 800c096:	4630      	mov	r0, r6
 800c098:	b003      	add	sp, #12
 800c09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c09e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800c0a2:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0a4:	4621      	mov	r1, r4
 800c0a6:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c0a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c0aa:	463a      	mov	r2, r7
 800c0ac:	f7ff ff36 	bl	800bf1c <I2C_WaitOnTXISFlagUntilTimeout>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0e6      	beq.n	800c082 <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800c0b4:	2601      	movs	r6, #1
}
 800c0b6:	4630      	mov	r0, r6
 800c0b8:	b003      	add	sp, #12
 800c0ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0be:	f7fc f863 	bl	8008188 <HAL_GetTick>
 800c0c2:	1bc0      	subs	r0, r0, r7
 800c0c4:	4284      	cmp	r4, r0
 800c0c6:	d302      	bcc.n	800c0ce <I2C_RequestMemoryRead+0x7e>
 800c0c8:	b10c      	cbz	r4, 800c0ce <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0ca:	682a      	ldr	r2, [r5, #0]
 800c0cc:	e7e0      	b.n	800c090 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0ce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0d0:	2120      	movs	r1, #32
    return HAL_ERROR;
 800c0d2:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0d4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0d6:	430b      	orrs	r3, r1
}
 800c0d8:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800c0da:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0de:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c0e0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c0e4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c0e8:	b003      	add	sp, #12
 800c0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0ee:	bf00      	nop
 800c0f0:	80002000 	.word	0x80002000

0800c0f4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f000 80c1 	beq.w	800c27c <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c0fa:	4b61      	ldr	r3, [pc, #388]	; (800c280 <HAL_I2C_Init+0x18c>)
 800c0fc:	6802      	ldr	r2, [r0, #0]
 800c0fe:	4961      	ldr	r1, [pc, #388]	; (800c284 <HAL_I2C_Init+0x190>)
{
 800c100:	b510      	push	{r4, lr}
 800c102:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c104:	4860      	ldr	r0, [pc, #384]	; (800c288 <HAL_I2C_Init+0x194>)
 800c106:	429a      	cmp	r2, r3
 800c108:	bf18      	it	ne
 800c10a:	4282      	cmpne	r2, r0
 800c10c:	bf14      	ite	ne
 800c10e:	2301      	movne	r3, #1
 800c110:	2300      	moveq	r3, #0
 800c112:	428a      	cmp	r2, r1
 800c114:	bf0c      	ite	eq
 800c116:	2300      	moveq	r3, #0
 800c118:	f003 0301 	andne.w	r3, r3, #1
 800c11c:	b11b      	cbz	r3, 800c126 <HAL_I2C_Init+0x32>
 800c11e:	4b5b      	ldr	r3, [pc, #364]	; (800c28c <HAL_I2C_Init+0x198>)
 800c120:	429a      	cmp	r2, r3
 800c122:	f040 80a5 	bne.w	800c270 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c126:	68a3      	ldr	r3, [r4, #8]
 800c128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c12c:	f080 809a 	bcs.w	800c264 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c130:	68e3      	ldr	r3, [r4, #12]
 800c132:	3b01      	subs	r3, #1
 800c134:	2b01      	cmp	r3, #1
 800c136:	d855      	bhi.n	800c1e4 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c13e:	d15a      	bne.n	800c1f6 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c140:	6963      	ldr	r3, [r4, #20]
 800c142:	2bff      	cmp	r3, #255	; 0xff
 800c144:	d85f      	bhi.n	800c206 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800c146:	69a3      	ldr	r3, [r4, #24]
 800c148:	2b07      	cmp	r3, #7
 800c14a:	d864      	bhi.n	800c216 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c14c:	69e3      	ldr	r3, [r4, #28]
 800c14e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c152:	d169      	bne.n	800c228 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c154:	6a23      	ldr	r3, [r4, #32]
 800c156:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c15a:	d16e      	bne.n	800c23a <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c15c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c160:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c164:	2b00      	cmp	r3, #0
 800c166:	d073      	beq.n	800c250 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800c168:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c16a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c16c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800c16e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800c172:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c174:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c178:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800c17a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c17e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800c180:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c182:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c184:	689a      	ldr	r2, [r3, #8]
 800c186:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c18a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c18c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c18e:	d065      	beq.n	800c25c <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c190:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c194:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c196:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c198:	d102      	bne.n	800c1a0 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c19a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c19e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1a0:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800c1a2:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1a6:	493a      	ldr	r1, [pc, #232]	; (800c290 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1a8:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c1aa:	4301      	orrs	r1, r0
 800c1ac:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c1ae:	68d9      	ldr	r1, [r3, #12]
 800c1b0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800c1b4:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c1b6:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1ba:	4302      	orrs	r2, r0
 800c1bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1c0:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c1c4:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1c6:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1c8:	4301      	orrs	r1, r0
  return HAL_OK;
 800c1ca:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c1cc:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	f041 0101 	orr.w	r1, r1, #1
 800c1d4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c1d6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c1d8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c1dc:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1de:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c1e2:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800c1e4:	f240 2117 	movw	r1, #535	; 0x217
 800c1e8:	482a      	ldr	r0, [pc, #168]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c1ea:	f7f8 fee3 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800c1ee:	6923      	ldr	r3, [r4, #16]
 800c1f0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800c1f4:	d0a4      	beq.n	800c140 <HAL_I2C_Init+0x4c>
 800c1f6:	f44f 7106 	mov.w	r1, #536	; 0x218
 800c1fa:	4826      	ldr	r0, [pc, #152]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c1fc:	f7f8 feda 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800c200:	6963      	ldr	r3, [r4, #20]
 800c202:	2bff      	cmp	r3, #255	; 0xff
 800c204:	d99f      	bls.n	800c146 <HAL_I2C_Init+0x52>
 800c206:	f240 2119 	movw	r1, #537	; 0x219
 800c20a:	4822      	ldr	r0, [pc, #136]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c20c:	f7f8 fed2 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800c210:	69a3      	ldr	r3, [r4, #24]
 800c212:	2b07      	cmp	r3, #7
 800c214:	d99a      	bls.n	800c14c <HAL_I2C_Init+0x58>
 800c216:	f240 211a 	movw	r1, #538	; 0x21a
 800c21a:	481e      	ldr	r0, [pc, #120]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c21c:	f7f8 feca 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800c220:	69e3      	ldr	r3, [r4, #28]
 800c222:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800c226:	d095      	beq.n	800c154 <HAL_I2C_Init+0x60>
 800c228:	f240 211b 	movw	r1, #539	; 0x21b
 800c22c:	4819      	ldr	r0, [pc, #100]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c22e:	f7f8 fec1 	bl	8004fb4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800c232:	6a23      	ldr	r3, [r4, #32]
 800c234:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800c238:	d090      	beq.n	800c15c <HAL_I2C_Init+0x68>
 800c23a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800c23e:	4815      	ldr	r0, [pc, #84]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c240:	f7f8 feb8 	bl	8004fb4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c244:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c248:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d18b      	bne.n	800c168 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800c250:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800c252:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800c256:	f7fa f957 	bl	8006508 <HAL_I2C_MspInit>
 800c25a:	e785      	b.n	800c168 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c25c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c260:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c262:	e79d      	b.n	800c1a0 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800c264:	f240 2116 	movw	r1, #534	; 0x216
 800c268:	480a      	ldr	r0, [pc, #40]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c26a:	f7f8 fea3 	bl	8004fb4 <assert_failed>
 800c26e:	e75f      	b.n	800c130 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c270:	f240 2115 	movw	r1, #533	; 0x215
 800c274:	4807      	ldr	r0, [pc, #28]	; (800c294 <HAL_I2C_Init+0x1a0>)
 800c276:	f7f8 fe9d 	bl	8004fb4 <assert_failed>
 800c27a:	e754      	b.n	800c126 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800c27c:	2001      	movs	r0, #1
}
 800c27e:	4770      	bx	lr
 800c280:	40005400 	.word	0x40005400
 800c284:	40005c00 	.word	0x40005c00
 800c288:	40005800 	.word	0x40005800
 800c28c:	40006000 	.word	0x40006000
 800c290:	02008000 	.word	0x02008000
 800c294:	0802ca38 	.word	0x0802ca38

0800c298 <HAL_I2C_Master_Transmit>:
{
 800c298:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c29c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c29e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c2a2:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2a4:	2b20      	cmp	r3, #32
{
 800c2a6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2a8:	d16d      	bne.n	800c386 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800c2aa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	2b01      	cmp	r3, #1
 800c2b2:	d068      	beq.n	800c386 <HAL_I2C_Master_Transmit+0xee>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	460f      	mov	r7, r1
 800c2b8:	4691      	mov	r9, r2
 800c2ba:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c2be:	f7fb ff63 	bl	8008188 <HAL_GetTick>
 800c2c2:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2c4:	e004      	b.n	800c2d0 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2c6:	f7fb ff5f 	bl	8008188 <HAL_GetTick>
 800c2ca:	1b80      	subs	r0, r0, r6
 800c2cc:	2819      	cmp	r0, #25
 800c2ce:	d85e      	bhi.n	800c38e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	6999      	ldr	r1, [r3, #24]
 800c2d4:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800c2d8:	d1f5      	bne.n	800c2c6 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c2da:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800c2dc:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800c2e0:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c2e2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c2e6:	2310      	movs	r3, #16
 800c2e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2ec:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c2ee:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c2f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	2bff      	cmp	r3, #255	; 0xff
 800c2f8:	d86d      	bhi.n	800c3d6 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800c2fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4b48      	ldr	r3, [pc, #288]	; (800c420 <HAL_I2C_Master_Transmit+0x188>)
 800c300:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800c302:	b292      	uxth	r2, r2
 800c304:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	9300      	str	r3, [sp, #0]
 800c30a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c30e:	f7ff fcfb 	bl	800bd08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c312:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c316:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c31a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c31c:	4632      	mov	r2, r6
 800c31e:	4629      	mov	r1, r5
 800c320:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c322:	b29b      	uxth	r3, r3
 800c324:	b1eb      	cbz	r3, 800c362 <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c326:	f7ff fdf9 	bl	800bf1c <I2C_WaitOnTXISFlagUntilTimeout>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d174      	bne.n	800c418 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c32e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c330:	6821      	ldr	r1, [r4, #0]
 800c332:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800c336:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c338:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800c33a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c33c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800c33e:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800c340:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800c342:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c344:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c346:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c348:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c34a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800c34c:	b292      	uxth	r2, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e3      	bne.n	800c31a <HAL_I2C_Master_Transmit+0x82>
 800c352:	bb6a      	cbnz	r2, 800c3b0 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800c354:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c356:	4632      	mov	r2, r6
 800c358:	4629      	mov	r1, r5
 800c35a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1e1      	bne.n	800c326 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c362:	f7ff fe05 	bl	800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c366:	2800      	cmp	r0, #0
 800c368:	d156      	bne.n	800c418 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c36e:	4d2d      	ldr	r5, [pc, #180]	; (800c424 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c370:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c372:	685a      	ldr	r2, [r3, #4]
 800c374:	402a      	ands	r2, r5
 800c376:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c378:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c37c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c380:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c384:	e000      	b.n	800c388 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800c386:	2002      	movs	r0, #2
}
 800c388:	b003      	add	sp, #12
 800c38a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c38e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c390:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c392:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c394:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c396:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c398:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c39c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c39e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3a2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c3a6:	b003      	add	sp, #12
 800c3a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800c3ac:	1c6a      	adds	r2, r5, #1
 800c3ae:	d11d      	bne.n	800c3ec <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3b0:	698b      	ldr	r3, [r1, #24]
 800c3b2:	061b      	lsls	r3, r3, #24
 800c3b4:	d5fa      	bpl.n	800c3ac <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c3b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	2bff      	cmp	r3, #255	; 0xff
 800c3bc:	d91f      	bls.n	800c3fe <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3be:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c3c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3c6:	22ff      	movs	r2, #255	; 0xff
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	4620      	mov	r0, r4
 800c3cc:	f8cd 8000 	str.w	r8, [sp]
 800c3d0:	f7ff fc9a 	bl	800bd08 <I2C_TransferConfig>
 800c3d4:	e7a1      	b.n	800c31a <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3d6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c3d8:	4b11      	ldr	r3, [pc, #68]	; (800c420 <HAL_I2C_Master_Transmit+0x188>)
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c3de:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3e6:	f7ff fc8f 	bl	800bd08 <I2C_TransferConfig>
 800c3ea:	e792      	b.n	800c312 <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ec:	f7fb fecc 	bl	8008188 <HAL_GetTick>
 800c3f0:	1b80      	subs	r0, r0, r6
 800c3f2:	4285      	cmp	r5, r0
 800c3f4:	d3cb      	bcc.n	800c38e <HAL_I2C_Master_Transmit+0xf6>
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	d0c9      	beq.n	800c38e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3fa:	6821      	ldr	r1, [r4, #0]
 800c3fc:	e7d8      	b.n	800c3b0 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c3fe:	f8cd 8000 	str.w	r8, [sp]
 800c402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c406:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c408:	4639      	mov	r1, r7
 800c40a:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c40c:	b292      	uxth	r2, r2
 800c40e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	f7ff fc79 	bl	800bd08 <I2C_TransferConfig>
 800c416:	e780      	b.n	800c31a <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800c418:	2001      	movs	r0, #1
}
 800c41a:	b003      	add	sp, #12
 800c41c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c420:	80002000 	.word	0x80002000
 800c424:	fe00e800 	.word	0xfe00e800

0800c428 <HAL_I2C_Master_Receive>:
{
 800c428:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c42c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c42e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800c432:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c434:	2b20      	cmp	r3, #32
{
 800c436:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c438:	f040 8088 	bne.w	800c54c <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800c43c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c440:	4604      	mov	r4, r0
 800c442:	2b01      	cmp	r3, #1
 800c444:	f000 8082 	beq.w	800c54c <HAL_I2C_Master_Receive+0x124>
 800c448:	2301      	movs	r3, #1
 800c44a:	460f      	mov	r7, r1
 800c44c:	4691      	mov	r9, r2
 800c44e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c452:	f7fb fe99 	bl	8008188 <HAL_GetTick>
 800c456:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c458:	e004      	b.n	800c464 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c45a:	f7fb fe95 	bl	8008188 <HAL_GetTick>
 800c45e:	1b80      	subs	r0, r0, r6
 800c460:	2819      	cmp	r0, #25
 800c462:	d87e      	bhi.n	800c562 <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	6999      	ldr	r1, [r3, #24]
 800c468:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800c46c:	d1f5      	bne.n	800c45a <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c46e:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800c470:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800c474:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c476:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c47a:	2310      	movs	r3, #16
 800c47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c480:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800c482:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c486:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c488:	b29b      	uxth	r3, r3
 800c48a:	2bff      	cmp	r3, #255	; 0xff
 800c48c:	d878      	bhi.n	800c580 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800c48e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c490:	4639      	mov	r1, r7
 800c492:	4b49      	ldr	r3, [pc, #292]	; (800c5b8 <HAL_I2C_Master_Receive+0x190>)
 800c494:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800c496:	b292      	uxth	r2, r2
 800c498:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c49a:	b2d2      	uxtb	r2, r2
 800c49c:	9300      	str	r3, [sp, #0]
 800c49e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c4a2:	f7ff fc31 	bl	800bd08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c4a6:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c4aa:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800c4ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d035      	beq.n	800c528 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4bc:	f7ff fd7e 	bl	800bfbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	d175      	bne.n	800c5b0 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c4c4:	6822      	ldr	r2, [r4, #0]
 800c4c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c4ca:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c4cc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800c4ce:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800c4d0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c4d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800c4d4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c4d6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c4d8:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c4da:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c4dc:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c4e0:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4e2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c4e4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1e1      	bne.n	800c4ae <HAL_I2C_Master_Receive+0x86>
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	d0df      	beq.n	800c4ae <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	e001      	b.n	800c4f6 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800c4f2:	1c69      	adds	r1, r5, #1
 800c4f4:	d12e      	bne.n	800c554 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c4f6:	6993      	ldr	r3, [r2, #24]
 800c4f8:	061b      	lsls	r3, r3, #24
 800c4fa:	d5fa      	bpl.n	800c4f2 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c4fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	2bff      	cmp	r3, #255	; 0xff
 800c502:	d948      	bls.n	800c596 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c508:	22ff      	movs	r2, #255	; 0xff
 800c50a:	4639      	mov	r1, r7
 800c50c:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c50e:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c512:	f8cd 8000 	str.w	r8, [sp]
 800c516:	f7ff fbf7 	bl	800bd08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c51a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c51c:	4632      	mov	r2, r6
 800c51e:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800c520:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c522:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1c9      	bne.n	800c4bc <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c528:	f7ff fd22 	bl	800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d13f      	bne.n	800c5b0 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c530:	6823      	ldr	r3, [r4, #0]
 800c532:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c534:	4d21      	ldr	r5, [pc, #132]	; (800c5bc <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c536:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	402a      	ands	r2, r5
 800c53c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c53e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c542:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c546:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c54a:	e000      	b.n	800c54e <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800c54c:	2002      	movs	r0, #2
}
 800c54e:	b003      	add	sp, #12
 800c550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c554:	f7fb fe18 	bl	8008188 <HAL_GetTick>
 800c558:	1b80      	subs	r0, r0, r6
 800c55a:	4285      	cmp	r5, r0
 800c55c:	d301      	bcc.n	800c562 <HAL_I2C_Master_Receive+0x13a>
 800c55e:	2d00      	cmp	r5, #0
 800c560:	d1c5      	bne.n	800c4ee <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c562:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c564:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c566:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c568:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c56a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c56c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c570:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c572:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c576:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c57a:	b003      	add	sp, #12
 800c57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c580:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c582:	4b0d      	ldr	r3, [pc, #52]	; (800c5b8 <HAL_I2C_Master_Receive+0x190>)
 800c584:	4639      	mov	r1, r7
 800c586:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c588:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c590:	f7ff fbba 	bl	800bd08 <I2C_TransferConfig>
 800c594:	e787      	b.n	800c4a6 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c596:	f8cd 8000 	str.w	r8, [sp]
 800c59a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c59e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c5a4:	b292      	uxth	r2, r2
 800c5a6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c5a8:	b2d2      	uxtb	r2, r2
 800c5aa:	f7ff fbad 	bl	800bd08 <I2C_TransferConfig>
 800c5ae:	e77e      	b.n	800c4ae <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800c5b0:	2001      	movs	r0, #1
}
 800c5b2:	b003      	add	sp, #12
 800c5b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5b8:	80002400 	.word	0x80002400
 800c5bc:	fe00e800 	.word	0xfe00e800

0800c5c0 <HAL_I2C_Mem_Read>:
{
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c5c6:	3b01      	subs	r3, #1
{
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c5cc:	2b01      	cmp	r3, #1
{
 800c5ce:	4688      	mov	r8, r1
 800c5d0:	4691      	mov	r9, r2
 800c5d2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c5d6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c5d8:	d904      	bls.n	800c5e4 <HAL_I2C_Mem_Read+0x24>
 800c5da:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800c5de:	486e      	ldr	r0, [pc, #440]	; (800c798 <HAL_I2C_Mem_Read+0x1d8>)
 800c5e0:	f7f8 fce8 	bl	8004fb4 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5e4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800c5e8:	2b20      	cmp	r3, #32
 800c5ea:	d17f      	bne.n	800c6ec <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800c5ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d075      	beq.n	800c6de <HAL_I2C_Mem_Read+0x11e>
 800c5f2:	f1ba 0f00 	cmp.w	sl, #0
 800c5f6:	d072      	beq.n	800c6de <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800c5f8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d075      	beq.n	800c6ec <HAL_I2C_Mem_Read+0x12c>
 800c600:	2301      	movs	r3, #1
 800c602:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c606:	f7fb fdbf 	bl	8008188 <HAL_GetTick>
 800c60a:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c60c:	e004      	b.n	800c618 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c60e:	f7fb fdbb 	bl	8008188 <HAL_GetTick>
 800c612:	1b80      	subs	r0, r0, r6
 800c614:	2819      	cmp	r0, #25
 800c616:	d874      	bhi.n	800c702 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	699b      	ldr	r3, [r3, #24]
 800c61c:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800c620:	d1f5      	bne.n	800c60e <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800c622:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c624:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800c626:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c62a:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800c62c:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c62e:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c630:	4628      	mov	r0, r5
 800c632:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c636:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c63a:	2140      	movs	r1, #64	; 0x40
 800c63c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c640:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c642:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800c646:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c64a:	f7ff fd01 	bl	800c050 <I2C_RequestMemoryRead>
 800c64e:	2800      	cmp	r0, #0
 800c650:	f040 8083 	bne.w	800c75a <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c654:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c656:	b29b      	uxth	r3, r3
 800c658:	2bff      	cmp	r3, #255	; 0xff
 800c65a:	f240 808e 	bls.w	800c77a <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c65e:	4b4f      	ldr	r3, [pc, #316]	; (800c79c <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c660:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c662:	4641      	mov	r1, r8
 800c664:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c666:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c668:	9300      	str	r3, [sp, #0]
 800c66a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c66e:	f7ff fb4b 	bl	800bd08 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c672:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c674:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c678:	682a      	ldr	r2, [r5, #0]
 800c67a:	e001      	b.n	800c680 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800c67c:	1c63      	adds	r3, r4, #1
 800c67e:	d139      	bne.n	800c6f4 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c680:	6993      	ldr	r3, [r2, #24]
 800c682:	0758      	lsls	r0, r3, #29
 800c684:	d5fa      	bpl.n	800c67c <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c686:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c688:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c68a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c68c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800c68e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800c690:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c692:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800c694:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c696:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c698:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c69a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c69c:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c69e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c6a0:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c6a2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c6a4:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c6a6:	b90b      	cbnz	r3, 800c6ac <HAL_I2C_Mem_Read+0xec>
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d140      	bne.n	800c72e <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800c6ac:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e1      	bne.n	800c678 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c6b4:	4632      	mov	r2, r6
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	f7ff fc59 	bl	800bf70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d168      	bne.n	800c794 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6c2:	682b      	ldr	r3, [r5, #0]
 800c6c4:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c6c6:	4c36      	ldr	r4, [pc, #216]	; (800c7a0 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c6c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c6ca:	685a      	ldr	r2, [r3, #4]
 800c6cc:	4022      	ands	r2, r4
 800c6ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c6d0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c6d4:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c6d8:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800c6dc:	e003      	b.n	800c6e6 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c6de:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c6e2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c6e4:	646b      	str	r3, [r5, #68]	; 0x44
}
 800c6e6:	b003      	add	sp, #12
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800c6ec:	2002      	movs	r0, #2
}
 800c6ee:	b003      	add	sp, #12
 800c6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c6f4:	f7fb fd48 	bl	8008188 <HAL_GetTick>
 800c6f8:	1b80      	subs	r0, r0, r6
 800c6fa:	4284      	cmp	r4, r0
 800c6fc:	d301      	bcc.n	800c702 <HAL_I2C_Mem_Read+0x142>
 800c6fe:	2c00      	cmp	r4, #0
 800c700:	d1ba      	bne.n	800c678 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c702:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c704:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c706:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c708:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c70a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c70c:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c710:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c712:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c716:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c71a:	b003      	add	sp, #12
 800c71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c720:	f7fb fd32 	bl	8008188 <HAL_GetTick>
 800c724:	1b80      	subs	r0, r0, r6
 800c726:	4284      	cmp	r4, r0
 800c728:	d3eb      	bcc.n	800c702 <HAL_I2C_Mem_Read+0x142>
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	d0e9      	beq.n	800c702 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c72e:	682a      	ldr	r2, [r5, #0]
 800c730:	e001      	b.n	800c736 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800c732:	1c61      	adds	r1, r4, #1
 800c734:	d1f4      	bne.n	800c720 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c736:	6993      	ldr	r3, [r2, #24]
 800c738:	061b      	lsls	r3, r3, #24
 800c73a:	d5fa      	bpl.n	800c732 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c73c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c73e:	b29b      	uxth	r3, r3
 800c740:	2bff      	cmp	r3, #255	; 0xff
 800c742:	d90e      	bls.n	800c762 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c744:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c74c:	22ff      	movs	r2, #255	; 0xff
 800c74e:	4641      	mov	r1, r8
 800c750:	4628      	mov	r0, r5
 800c752:	9700      	str	r7, [sp, #0]
 800c754:	f7ff fad8 	bl	800bd08 <I2C_TransferConfig>
 800c758:	e7a8      	b.n	800c6ac <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800c75a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c75c:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800c760:	e7c1      	b.n	800c6e6 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c762:	9700      	str	r7, [sp, #0]
 800c764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c768:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c76a:	4641      	mov	r1, r8
 800c76c:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800c76e:	b292      	uxth	r2, r2
 800c770:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c772:	b2d2      	uxtb	r2, r2
 800c774:	f7ff fac8 	bl	800bd08 <I2C_TransferConfig>
 800c778:	e798      	b.n	800c6ac <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800c77a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c77c:	4641      	mov	r1, r8
 800c77e:	4b07      	ldr	r3, [pc, #28]	; (800c79c <HAL_I2C_Mem_Read+0x1dc>)
 800c780:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800c782:	b292      	uxth	r2, r2
 800c784:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c786:	b2d2      	uxtb	r2, r2
 800c788:	9300      	str	r3, [sp, #0]
 800c78a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c78e:	f7ff fabb 	bl	800bd08 <I2C_TransferConfig>
 800c792:	e76e      	b.n	800c672 <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800c794:	2001      	movs	r0, #1
 800c796:	e7a6      	b.n	800c6e6 <HAL_I2C_Mem_Read+0x126>
 800c798:	0802ca38 	.word	0x0802ca38
 800c79c:	80002400 	.word	0x80002400
 800c7a0:	fe00e800 	.word	0xfe00e800

0800c7a4 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7a4:	4b23      	ldr	r3, [pc, #140]	; (800c834 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800c7a6:	6802      	ldr	r2, [r0, #0]
{
 800c7a8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7aa:	4d23      	ldr	r5, [pc, #140]	; (800c838 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800c7ac:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7ae:	4e23      	ldr	r6, [pc, #140]	; (800c83c <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	bf18      	it	ne
 800c7b4:	42aa      	cmpne	r2, r5
{
 800c7b6:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c7b8:	bf14      	ite	ne
 800c7ba:	2301      	movne	r3, #1
 800c7bc:	2300      	moveq	r3, #0
 800c7be:	42b2      	cmp	r2, r6
 800c7c0:	bf0c      	ite	eq
 800c7c2:	2300      	moveq	r3, #0
 800c7c4:	f003 0301 	andne.w	r3, r3, #1
 800c7c8:	b113      	cbz	r3, 800c7d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c7ca:	4b1d      	ldr	r3, [pc, #116]	; (800c840 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d12c      	bne.n	800c82a <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c7d0:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800c7d4:	d124      	bne.n	800c820 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7d6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c7da:	2b20      	cmp	r3, #32
 800c7dc:	b2de      	uxtb	r6, r3
 800c7de:	d11d      	bne.n	800c81c <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7e0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d019      	beq.n	800c81c <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c7e8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c7ea:	2224      	movs	r2, #36	; 0x24
 800c7ec:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	f022 0201 	bic.w	r2, r2, #1
 800c7f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c7f8:	681a      	ldr	r2, [r3, #0]
 800c7fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c7fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c800:	6819      	ldr	r1, [r3, #0]
 800c802:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c804:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c806:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c808:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	f042 0201 	orr.w	r2, r2, #1
 800c810:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c812:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c816:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c81c:	2002      	movs	r0, #2
}
 800c81e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c820:	215f      	movs	r1, #95	; 0x5f
 800c822:	4808      	ldr	r0, [pc, #32]	; (800c844 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c824:	f7f8 fbc6 	bl	8004fb4 <assert_failed>
 800c828:	e7d5      	b.n	800c7d6 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c82a:	215e      	movs	r1, #94	; 0x5e
 800c82c:	4805      	ldr	r0, [pc, #20]	; (800c844 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c82e:	f7f8 fbc1 	bl	8004fb4 <assert_failed>
 800c832:	e7cd      	b.n	800c7d0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c834:	40005400 	.word	0x40005400
 800c838:	40005800 	.word	0x40005800
 800c83c:	40005c00 	.word	0x40005c00
 800c840:	40006000 	.word	0x40006000
 800c844:	0802ca70 	.word	0x0802ca70

0800c848 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c848:	4b22      	ldr	r3, [pc, #136]	; (800c8d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800c84a:	6802      	ldr	r2, [r0, #0]
{
 800c84c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c84e:	4d22      	ldr	r5, [pc, #136]	; (800c8d8 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800c850:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c852:	4e22      	ldr	r6, [pc, #136]	; (800c8dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c854:	429a      	cmp	r2, r3
 800c856:	bf18      	it	ne
 800c858:	42aa      	cmpne	r2, r5
{
 800c85a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c85c:	bf14      	ite	ne
 800c85e:	2301      	movne	r3, #1
 800c860:	2300      	moveq	r3, #0
 800c862:	42b2      	cmp	r2, r6
 800c864:	bf0c      	ite	eq
 800c866:	2300      	moveq	r3, #0
 800c868:	f003 0301 	andne.w	r3, r3, #1
 800c86c:	b113      	cbz	r3, 800c874 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c86e:	4b1c      	ldr	r3, [pc, #112]	; (800c8e0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800c870:	429a      	cmp	r2, r3
 800c872:	d12a      	bne.n	800c8ca <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c874:	2d0f      	cmp	r5, #15
 800c876:	d823      	bhi.n	800c8c0 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c878:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c87c:	2b20      	cmp	r3, #32
 800c87e:	b2de      	uxtb	r6, r3
 800c880:	d11c      	bne.n	800c8bc <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c882:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c886:	2b01      	cmp	r3, #1
 800c888:	d018      	beq.n	800c8bc <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c88a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c88c:	2224      	movs	r2, #36	; 0x24
 800c88e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	f022 0201 	bic.w	r2, r2, #1
 800c898:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c89a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c89c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c8a0:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8a4:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800c8a6:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c8a8:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	f042 0201 	orr.w	r2, r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c8b2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c8b6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c8bc:	2002      	movs	r0, #2
}
 800c8be:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c8c0:	218d      	movs	r1, #141	; 0x8d
 800c8c2:	4808      	ldr	r0, [pc, #32]	; (800c8e4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c8c4:	f7f8 fb76 	bl	8004fb4 <assert_failed>
 800c8c8:	e7d6      	b.n	800c878 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c8ca:	218c      	movs	r1, #140	; 0x8c
 800c8cc:	4805      	ldr	r0, [pc, #20]	; (800c8e4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c8ce:	f7f8 fb71 	bl	8004fb4 <assert_failed>
 800c8d2:	e7cf      	b.n	800c874 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c8d4:	40005400 	.word	0x40005400
 800c8d8:	40005800 	.word	0x40005800
 800c8dc:	40005c00 	.word	0x40005c00
 800c8e0:	40006000 	.word	0x40006000
 800c8e4:	0802ca70 	.word	0x0802ca70

0800c8e8 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d04c      	beq.n	800c986 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c8ec:	6802      	ldr	r2, [r0, #0]
{
 800c8ee:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c8f0:	4b26      	ldr	r3, [pc, #152]	; (800c98c <HAL_IWDG_Init+0xa4>)
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d003      	beq.n	800c900 <HAL_IWDG_Init+0x18>
 800c8f8:	21b5      	movs	r1, #181	; 0xb5
 800c8fa:	4825      	ldr	r0, [pc, #148]	; (800c990 <HAL_IWDG_Init+0xa8>)
 800c8fc:	f7f8 fb5a 	bl	8004fb4 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c900:	6863      	ldr	r3, [r4, #4]
 800c902:	2b06      	cmp	r3, #6
 800c904:	d835      	bhi.n	800c972 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c906:	68a3      	ldr	r3, [r4, #8]
 800c908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c90c:	d22c      	bcs.n	800c968 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c90e:	68e3      	ldr	r3, [r4, #12]
 800c910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c914:	d223      	bcs.n	800c95e <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c916:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c91a:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c91c:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800c920:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c922:	f245 5055 	movw	r0, #21845	; 0x5555
 800c926:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c928:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c92a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c92c:	f7fb fc2c 	bl	8008188 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c930:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c932:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c934:	68da      	ldr	r2, [r3, #12]
 800c936:	0751      	lsls	r1, r2, #29
 800c938:	d00a      	beq.n	800c950 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c93a:	f7fb fc25 	bl	8008188 <HAL_GetTick>
 800c93e:	1b43      	subs	r3, r0, r5
 800c940:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c942:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c944:	d9f6      	bls.n	800c934 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c946:	68da      	ldr	r2, [r3, #12]
 800c948:	0752      	lsls	r2, r2, #29
 800c94a:	d0f3      	beq.n	800c934 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800c94c:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800c94e:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c950:	6919      	ldr	r1, [r3, #16]
 800c952:	68e2      	ldr	r2, [r4, #12]
 800c954:	4291      	cmp	r1, r2
 800c956:	d011      	beq.n	800c97c <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800c958:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c95a:	611a      	str	r2, [r3, #16]
}
 800c95c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c95e:	21b8      	movs	r1, #184	; 0xb8
 800c960:	480b      	ldr	r0, [pc, #44]	; (800c990 <HAL_IWDG_Init+0xa8>)
 800c962:	f7f8 fb27 	bl	8004fb4 <assert_failed>
 800c966:	e7d6      	b.n	800c916 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c968:	21b7      	movs	r1, #183	; 0xb7
 800c96a:	4809      	ldr	r0, [pc, #36]	; (800c990 <HAL_IWDG_Init+0xa8>)
 800c96c:	f7f8 fb22 	bl	8004fb4 <assert_failed>
 800c970:	e7cd      	b.n	800c90e <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c972:	21b6      	movs	r1, #182	; 0xb6
 800c974:	4806      	ldr	r0, [pc, #24]	; (800c990 <HAL_IWDG_Init+0xa8>)
 800c976:	f7f8 fb1d 	bl	8004fb4 <assert_failed>
 800c97a:	e7c4      	b.n	800c906 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c97c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800c980:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c982:	601a      	str	r2, [r3, #0]
}
 800c984:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c986:	2001      	movs	r0, #1
}
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	40003000 	.word	0x40003000
 800c990:	0802caac 	.word	0x0802caac

0800c994 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c994:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c996:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800c99a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	601a      	str	r2, [r3, #0]
}
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop

0800c9a4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9a6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	f000 809d 	beq.w	800cae8 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c9ae:	6804      	ldr	r4, [r0, #0]
 800c9b0:	4605      	mov	r5, r0
 800c9b2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800c9b6:	d003      	beq.n	800c9c0 <HAL_PCD_Init+0x1c>
 800c9b8:	4b4f      	ldr	r3, [pc, #316]	; (800caf8 <HAL_PCD_Init+0x154>)
 800c9ba:	429c      	cmp	r4, r3
 800c9bc:	f040 8081 	bne.w	800cac2 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c9c0:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800c9c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	f000 8086 	beq.w	800cada <HAL_PCD_Init+0x136>
 800c9ce:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c9d0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9d2:	462e      	mov	r6, r5
 800c9d4:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800c9d6:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c9da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9dc:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c9de:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800c9e2:	bf08      	it	eq
 800c9e4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800c9e6:	f006 fe87 	bl	80136f8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c9ea:	f856 eb10 	ldr.w	lr, [r6], #16
 800c9ee:	46b4      	mov	ip, r6
 800c9f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c9f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9f6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c9fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c9fc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ca00:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca04:	4670      	mov	r0, lr
 800ca06:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ca0a:	f006 fdb5 	bl	8013578 <USB_CoreInit>
 800ca0e:	4604      	mov	r4, r0
 800ca10:	b130      	cbz	r0, 800ca20 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800ca12:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca14:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800ca16:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ca18:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800ca1c:	b00b      	add	sp, #44	; 0x2c
 800ca1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ca20:	4601      	mov	r1, r0
 800ca22:	6828      	ldr	r0, [r5, #0]
 800ca24:	f006 fe70 	bl	8013708 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca28:	6868      	ldr	r0, [r5, #4]
 800ca2a:	b358      	cbz	r0, 800ca84 <HAL_PCD_Init+0xe0>
 800ca2c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ca2e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca32:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ca34:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca38:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800ca3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ca44:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca48:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800ca4c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca50:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ca52:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800ca56:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ca58:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca5c:	d3ea      	bcc.n	800ca34 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800ca5e:	2200      	movs	r2, #0
 800ca60:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca64:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800ca66:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800ca6a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca6e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800ca70:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca74:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ca76:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ca7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ca7e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ca82:	d3ed      	bcc.n	800ca60 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ca84:	466c      	mov	r4, sp
 800ca86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca8a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ca8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca8e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ca92:	e884 0003 	stmia.w	r4, {r0, r1}
 800ca96:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ca9a:	6828      	ldr	r0, [r5, #0]
 800ca9c:	f006 feb8 	bl	8013810 <USB_DevInit>
 800caa0:	4604      	mov	r4, r0
 800caa2:	2800      	cmp	r0, #0
 800caa4:	d1b5      	bne.n	800ca12 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800caa6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800caa8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800caaa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800caae:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800cab0:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800cab4:	d01c      	beq.n	800caf0 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800cab6:	6828      	ldr	r0, [r5, #0]
 800cab8:	f007 fa72 	bl	8013fa0 <USB_DevDisconnect>
}
 800cabc:	4620      	mov	r0, r4
 800cabe:	b00b      	add	sp, #44	; 0x2c
 800cac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800cac2:	2187      	movs	r1, #135	; 0x87
 800cac4:	480d      	ldr	r0, [pc, #52]	; (800cafc <HAL_PCD_Init+0x158>)
 800cac6:	f7f8 fa75 	bl	8004fb4 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800caca:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800cace:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cad0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f47f af7a 	bne.w	800c9ce <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800cada:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800cadc:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800cae0:	f017 f894 	bl	8023c0c <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800cae4:	6828      	ldr	r0, [r5, #0]
 800cae6:	e773      	b.n	800c9d0 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800cae8:	2401      	movs	r4, #1
}
 800caea:	4620      	mov	r0, r4
 800caec:	b00b      	add	sp, #44	; 0x2c
 800caee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800caf0:	4628      	mov	r0, r5
 800caf2:	f000 fcc7 	bl	800d484 <HAL_PCDEx_ActivateLPM>
 800caf6:	e7de      	b.n	800cab6 <HAL_PCD_Init+0x112>
 800caf8:	40040000 	.word	0x40040000
 800cafc:	0802cae8 	.word	0x0802cae8

0800cb00 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800cb00:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d00f      	beq.n	800cb28 <HAL_PCD_Start+0x28>
 800cb08:	2301      	movs	r3, #1
{
 800cb0a:	b510      	push	{r4, lr}
 800cb0c:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800cb0e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800cb10:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800cb14:	f006 fde8 	bl	80136e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800cb18:	6820      	ldr	r0, [r4, #0]
 800cb1a:	f007 fa31 	bl	8013f80 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800cb1e:	2300      	movs	r3, #0

  return HAL_OK;
 800cb20:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cb22:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cb26:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800cb28:	2002      	movs	r0, #2
}
 800cb2a:	4770      	bx	lr

0800cb2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cb30:	6807      	ldr	r7, [r0, #0]
{
 800cb32:	b089      	sub	sp, #36	; 0x24
 800cb34:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800cb36:	4638      	mov	r0, r7
 800cb38:	f007 fa70 	bl	801401c <USB_GetMode>
 800cb3c:	b110      	cbz	r0, 800cb44 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800cb3e:	b009      	add	sp, #36	; 0x24
 800cb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800cb44:	4683      	mov	fp, r0
 800cb46:	6820      	ldr	r0, [r4, #0]
 800cb48:	f007 fa3a 	bl	8013fc0 <USB_ReadInterrupts>
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0f6      	beq.n	800cb3e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cb50:	6820      	ldr	r0, [r4, #0]
 800cb52:	f007 fa35 	bl	8013fc0 <USB_ReadInterrupts>
 800cb56:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cb5a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800cb5c:	d003      	beq.n	800cb66 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800cb5e:	6943      	ldr	r3, [r0, #20]
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cb66:	f007 fa2b 	bl	8013fc0 <USB_ReadInterrupts>
 800cb6a:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb6e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800cb70:	d012      	beq.n	800cb98 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb72:	6983      	ldr	r3, [r0, #24]
 800cb74:	f023 0310 	bic.w	r3, r3, #16
 800cb78:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800cb7a:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cb7c:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800cb80:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	f000 8253 	beq.w	800d030 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800cb8a:	2b06      	cmp	r3, #6
 800cb8c:	f000 81b1 	beq.w	800cef2 <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb90:	6983      	ldr	r3, [r0, #24]
 800cb92:	f043 0310 	orr.w	r3, r3, #16
 800cb96:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cb98:	f007 fa12 	bl	8013fc0 <USB_ReadInterrupts>
 800cb9c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cba0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800cba2:	f040 80cf 	bne.w	800cd44 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cba6:	f007 fa0b 	bl	8013fc0 <USB_ReadInterrupts>
 800cbaa:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cbae:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cbb0:	d175      	bne.n	800cc9e <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cbb2:	f007 fa05 	bl	8013fc0 <USB_ReadInterrupts>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	db5d      	blt.n	800cc76 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800cbba:	6820      	ldr	r0, [r4, #0]
 800cbbc:	f007 fa00 	bl	8013fc0 <USB_ReadInterrupts>
 800cbc0:	0500      	lsls	r0, r0, #20
 800cbc2:	d44d      	bmi.n	800cc60 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800cbc4:	6820      	ldr	r0, [r4, #0]
 800cbc6:	f007 f9fb 	bl	8013fc0 <USB_ReadInterrupts>
 800cbca:	0102      	lsls	r2, r0, #4
 800cbcc:	d514      	bpl.n	800cbf8 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800cbce:	6822      	ldr	r2, [r4, #0]
 800cbd0:	6953      	ldr	r3, [r2, #20]
 800cbd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbd6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800cbd8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f040 8172 	bne.w	800cec6 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800cbe2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cbe4:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800cbe6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800cbea:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cbec:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800cbf0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800cbf4:	f017 f978 	bl	8023ee8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800cbf8:	6820      	ldr	r0, [r4, #0]
 800cbfa:	f007 f9e1 	bl	8013fc0 <USB_ReadInterrupts>
 800cbfe:	04c3      	lsls	r3, r0, #19
 800cc00:	f100 8116 	bmi.w	800ce30 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc04:	6820      	ldr	r0, [r4, #0]
 800cc06:	f007 f9db 	bl	8013fc0 <USB_ReadInterrupts>
 800cc0a:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800cc0e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800cc10:	f040 80f7 	bne.w	800ce02 <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800cc14:	f007 f9d4 	bl	8013fc0 <USB_ReadInterrupts>
 800cc18:	0707      	lsls	r7, r0, #28
 800cc1a:	f100 80e9 	bmi.w	800cdf0 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	f007 f9ce 	bl	8013fc0 <USB_ReadInterrupts>
 800cc24:	02c6      	lsls	r6, r0, #11
 800cc26:	f100 80d9 	bmi.w	800cddc <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cc2a:	6820      	ldr	r0, [r4, #0]
 800cc2c:	f007 f9c8 	bl	8013fc0 <USB_ReadInterrupts>
 800cc30:	0285      	lsls	r5, r0, #10
 800cc32:	f100 80c9 	bmi.w	800cdc8 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cc36:	6820      	ldr	r0, [r4, #0]
 800cc38:	f007 f9c2 	bl	8013fc0 <USB_ReadInterrupts>
 800cc3c:	0040      	lsls	r0, r0, #1
 800cc3e:	f100 80ba 	bmi.w	800cdb6 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cc42:	6820      	ldr	r0, [r4, #0]
 800cc44:	f007 f9bc 	bl	8013fc0 <USB_ReadInterrupts>
 800cc48:	0741      	lsls	r1, r0, #29
 800cc4a:	f57f af78 	bpl.w	800cb3e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cc52:	076a      	lsls	r2, r5, #29
 800cc54:	f100 820d 	bmi.w	800d072 <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800cc58:	685a      	ldr	r2, [r3, #4]
 800cc5a:	432a      	orrs	r2, r5
 800cc5c:	605a      	str	r2, [r3, #4]
 800cc5e:	e76e      	b.n	800cb3e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800cc60:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800cc64:	07d9      	lsls	r1, r3, #31
 800cc66:	f100 8200 	bmi.w	800d06a <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800cc6a:	6820      	ldr	r0, [r4, #0]
 800cc6c:	6943      	ldr	r3, [r0, #20]
 800cc6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc72:	6143      	str	r3, [r0, #20]
 800cc74:	e7a7      	b.n	800cbc6 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800cc76:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800cc7a:	f022 0201 	bic.w	r2, r2, #1
 800cc7e:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800cc82:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800cc86:	2b01      	cmp	r3, #1
 800cc88:	f000 812c 	beq.w	800cee4 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f017 f859 	bl	8023d44 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800cc92:	6820      	ldr	r0, [r4, #0]
 800cc94:	6943      	ldr	r3, [r0, #20]
 800cc96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc9a:	6143      	str	r3, [r0, #20]
 800cc9c:	e78e      	b.n	800cbbc <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800cc9e:	f007 f99b 	bl	8013fd8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800cca2:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cca4:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800cca6:	f1b8 0f00 	cmp.w	r8, #0
 800ccaa:	d082      	beq.n	800cbb2 <HAL_PCD_IRQHandler+0x86>
 800ccac:	4626      	mov	r6, r4
 800ccae:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800ccb2:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800ccb6:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800ccba:	e009      	b.n	800ccd0 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800ccbc:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800ccc0:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800ccc4:	f106 061c 	add.w	r6, r6, #28
 800ccc8:	f109 0920 	add.w	r9, r9, #32
 800cccc:	f000 8126 	beq.w	800cf1c <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800ccd0:	f018 0f01 	tst.w	r8, #1
 800ccd4:	d0f2      	beq.n	800ccbc <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ccd6:	fa5f f78a 	uxtb.w	r7, sl
 800ccda:	4639      	mov	r1, r7
 800ccdc:	f007 f98e 	bl	8013ffc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cce0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cce2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800cce4:	d515      	bpl.n	800cd12 <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cce6:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cce8:	f00a 030f 	and.w	r3, sl, #15
 800ccec:	2201      	movs	r2, #1
 800ccee:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ccf0:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800ccf4:	ea23 0302 	bic.w	r3, r3, r2
 800ccf8:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ccfc:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800ccfe:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800cd00:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800cd04:	4299      	cmp	r1, r3
 800cd06:	f000 81b9 	beq.w	800d07c <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800cd0a:	4639      	mov	r1, r7
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f016 ffdd 	bl	8023ccc <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800cd12:	0728      	lsls	r0, r5, #28
 800cd14:	d502      	bpl.n	800cd1c <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800cd16:	2308      	movs	r3, #8
 800cd18:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800cd1c:	06e9      	lsls	r1, r5, #27
 800cd1e:	d502      	bpl.n	800cd26 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800cd20:	2310      	movs	r3, #16
 800cd22:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800cd26:	066a      	lsls	r2, r5, #25
 800cd28:	d502      	bpl.n	800cd30 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800cd2a:	2340      	movs	r3, #64	; 0x40
 800cd2c:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800cd30:	07ab      	lsls	r3, r5, #30
 800cd32:	d502      	bpl.n	800cd3a <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800cd34:	2302      	movs	r3, #2
 800cd36:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800cd3a:	062d      	lsls	r5, r5, #24
 800cd3c:	f100 80f1 	bmi.w	800cf22 <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cd40:	6820      	ldr	r0, [r4, #0]
 800cd42:	e7bb      	b.n	800ccbc <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800cd44:	f007 f940 	bl	8013fc8 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800cd48:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd4a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800cd4c:	2d00      	cmp	r5, #0
 800cd4e:	f43f af2a 	beq.w	800cba6 <HAL_PCD_IRQHandler+0x7a>
 800cd52:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800cd56:	46a2      	mov	sl, r4
      epnum = 0U;
 800cd58:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cd5c:	9703      	str	r7, [sp, #12]
 800cd5e:	e008      	b.n	800cd72 <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800cd60:	086d      	lsrs	r5, r5, #1
        epnum++;
 800cd62:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800cd66:	f106 0620 	add.w	r6, r6, #32
 800cd6a:	f10a 0a1c 	add.w	sl, sl, #28
 800cd6e:	f000 80d3 	beq.w	800cf18 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800cd72:	07ef      	lsls	r7, r5, #31
 800cd74:	d5f4      	bpl.n	800cd60 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800cd76:	fa5f f788 	uxtb.w	r7, r8
 800cd7a:	4639      	mov	r1, r7
 800cd7c:	f007 f934 	bl	8013fe8 <USB_ReadDevOutEPInterrupt>
 800cd80:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cd82:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800cd84:	f019 0f01 	tst.w	r9, #1
 800cd88:	f040 8135 	bne.w	800cff6 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800cd8c:	f019 0f08 	tst.w	r9, #8
 800cd90:	f040 8119 	bne.w	800cfc6 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800cd94:	f019 0f10 	tst.w	r9, #16
 800cd98:	d001      	beq.n	800cd9e <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800cd9a:	2310      	movs	r3, #16
 800cd9c:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cd9e:	f019 0f20 	tst.w	r9, #32
 800cda2:	d001      	beq.n	800cda8 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cda4:	2320      	movs	r3, #32
 800cda6:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800cda8:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800cdac:	d0d8      	beq.n	800cd60 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800cdae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cdb2:	60b3      	str	r3, [r6, #8]
 800cdb4:	e7d4      	b.n	800cd60 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f016 ffd0 	bl	8023d5c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	6943      	ldr	r3, [r0, #20]
 800cdc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cdc4:	6143      	str	r3, [r0, #20]
 800cdc6:	e73d      	b.n	800cc44 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800cdc8:	4620      	mov	r0, r4
 800cdca:	2100      	movs	r1, #0
 800cdcc:	f016 ffbe 	bl	8023d4c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cdd0:	6820      	ldr	r0, [r4, #0]
 800cdd2:	6943      	ldr	r3, [r0, #20]
 800cdd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdd8:	6143      	str	r3, [r0, #20]
 800cdda:	e72d      	b.n	800cc38 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800cddc:	4620      	mov	r0, r4
 800cdde:	2100      	movs	r1, #0
 800cde0:	f016 ffb8 	bl	8023d54 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cde4:	6820      	ldr	r0, [r4, #0]
 800cde6:	6943      	ldr	r3, [r0, #20]
 800cde8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cdec:	6143      	str	r3, [r0, #20]
 800cdee:	e71d      	b.n	800cc2c <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800cdf0:	4620      	mov	r0, r4
 800cdf2:	f016 ff75 	bl	8023ce0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800cdf6:	6820      	ldr	r0, [r4, #0]
 800cdf8:	6943      	ldr	r3, [r0, #20]
 800cdfa:	f003 0308 	and.w	r3, r3, #8
 800cdfe:	6143      	str	r3, [r0, #20]
 800ce00:	e70e      	b.n	800cc20 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800ce02:	f007 f90f 	bl	8014024 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce06:	6820      	ldr	r0, [r4, #0]
 800ce08:	f006 fdc0 	bl	801398c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce0c:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ce0e:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ce10:	f000 ff86 	bl	800dd20 <HAL_RCC_GetHCLKFreq>
 800ce14:	7b22      	ldrb	r2, [r4, #12]
 800ce16:	4601      	mov	r1, r0
 800ce18:	4628      	mov	r0, r5
 800ce1a:	f006 fbeb 	bl	80135f4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f016 ff62 	bl	8023ce8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800ce24:	6820      	ldr	r0, [r4, #0]
 800ce26:	6943      	ldr	r3, [r0, #20]
 800ce28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce2c:	6143      	str	r3, [r0, #20]
 800ce2e:	e6f1      	b.n	800cc14 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ce30:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800ce34:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ce38:	2110      	movs	r1, #16
 800ce3a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800ce3c:	f023 0301 	bic.w	r3, r3, #1
 800ce40:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800ce42:	f006 fc97 	bl	8013774 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce46:	6860      	ldr	r0, [r4, #4]
 800ce48:	b1e0      	cbz	r0, 800ce84 <HAL_PCD_IRQHandler+0x358>
 800ce4a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800ce4e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800ce52:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce54:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce58:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce5a:	3320      	adds	r3, #32
 800ce5c:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ce5e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ce62:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800ce66:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ce6a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800ce6e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800ce72:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce76:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800ce7a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ce7e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ce82:	d1e6      	bne.n	800ce52 <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ce84:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ce86:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800ce88:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800ce8c:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800ce8e:	b9f2      	cbnz	r2, 800cece <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ce90:	696a      	ldr	r2, [r5, #20]
 800ce92:	f242 032b 	movw	r3, #8235	; 0x202b
 800ce96:	4313      	orrs	r3, r2
 800ce98:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ce9a:	692b      	ldr	r3, [r5, #16]
 800ce9c:	f043 030b 	orr.w	r3, r3, #11
 800cea0:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800cea2:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800cea6:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ceaa:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ceac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ceb0:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ceb2:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ceb6:	f007 f8cb 	bl	8014050 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ceba:	6820      	ldr	r0, [r4, #0]
 800cebc:	6943      	ldr	r3, [r0, #20]
 800cebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cec2:	6143      	str	r3, [r0, #20]
 800cec4:	e69f      	b.n	800cc06 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800cec6:	4620      	mov	r0, r4
 800cec8:	f016 ff24 	bl	8023d14 <HAL_PCD_SuspendCallback>
 800cecc:	e694      	b.n	800cbf8 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800cece:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800ced2:	f043 030b 	orr.w	r3, r3, #11
 800ced6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800ceda:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800cedc:	f043 030b 	orr.w	r3, r3, #11
 800cee0:	646b      	str	r3, [r5, #68]	; 0x44
 800cee2:	e7de      	b.n	800cea2 <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800cee4:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cee6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800cee8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800ceec:	f016 fffc 	bl	8023ee8 <HAL_PCDEx_LPM_Callback>
 800cef0:	e6cf      	b.n	800cc92 <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cef2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800cef6:	2208      	movs	r2, #8
 800cef8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800cefc:	4638      	mov	r0, r7
 800cefe:	f006 ffa9 	bl	8013e54 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf02:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800cf06:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cf0a:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cf0c:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800cf10:	440b      	add	r3, r1
 800cf12:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800cf16:	e63b      	b.n	800cb90 <HAL_PCD_IRQHandler+0x64>
 800cf18:	9f03      	ldr	r7, [sp, #12]
 800cf1a:	e644      	b.n	800cba6 <HAL_PCD_IRQHandler+0x7a>
 800cf1c:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800cf20:	e647      	b.n	800cbb2 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800cf22:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf26:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800cf2a:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf2c:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800cf2e:	f63f aec5 	bhi.w	800ccbc <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf32:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800cf36:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf38:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf3c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800cf40:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800cf42:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800cf44:	428a      	cmp	r2, r1
 800cf46:	bf28      	it	cs
 800cf48:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf4a:	9905      	ldr	r1, [sp, #20]
 800cf4c:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800cf4e:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf50:	b289      	uxth	r1, r1
 800cf52:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800cf56:	f0c0 80bc 	bcc.w	800d0d2 <HAL_PCD_IRQHandler+0x5a6>
 800cf5a:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf5e:	46a0      	mov	r8, r4
 800cf60:	9c05      	ldr	r4, [sp, #20]
 800cf62:	e01a      	b.n	800cf9a <HAL_PCD_IRQHandler+0x46e>
 800cf64:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800cf66:	463a      	mov	r2, r7
 800cf68:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800cf6a:	4658      	mov	r0, fp
 800cf6c:	429d      	cmp	r5, r3
 800cf6e:	bf28      	it	cs
 800cf70:	461d      	movcs	r5, r3
 800cf72:	f898 3010 	ldrb.w	r3, [r8, #16]
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	b2ab      	uxth	r3, r5
 800cf7a:	f006 ff55 	bl	8013e28 <USB_WritePacket>
    ep->xfer_buff  += len;
 800cf7e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf80:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800cf82:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf84:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800cf86:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800cf88:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800cf8a:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800cf8c:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf8e:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800cf92:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800cf94:	f0c0 8096 	bcc.w	800d0c4 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cf98:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800cf9a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800cf9c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800cfa0:	d3e0      	bcc.n	800cf64 <HAL_PCD_IRQHandler+0x438>
 800cfa2:	4644      	mov	r4, r8
 800cfa4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cfa8:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfac:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cfae:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cfb0:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfb2:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800cfb6:	f00a 030f 	and.w	r3, sl, #15
 800cfba:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800cfbc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800cfbe:	ea23 0302 	bic.w	r3, r3, r2
 800cfc2:	634b      	str	r3, [r1, #52]	; 0x34
 800cfc4:	e67a      	b.n	800ccbc <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cfc6:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cfc8:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800cfcc:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cfd2:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfd4:	485f      	ldr	r0, [pc, #380]	; (800d154 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cfd6:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cfd8:	4282      	cmp	r2, r0
 800cfda:	d961      	bls.n	800d0a0 <HAL_PCD_IRQHandler+0x574>
 800cfdc:	040a      	lsls	r2, r1, #16
 800cfde:	d502      	bpl.n	800cfe6 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cfe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cfe4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	f016 fe60 	bl	8023cac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cfec:	6921      	ldr	r1, [r4, #16]
 800cfee:	2901      	cmp	r1, #1
 800cff0:	d07f      	beq.n	800d0f2 <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cff2:	6820      	ldr	r0, [r4, #0]
 800cff4:	e6ce      	b.n	800cd94 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cff6:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800cff8:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cffa:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cffc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800d000:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d002:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d006:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800d00a:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800d00c:	d04d      	beq.n	800d0aa <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d00e:	4952      	ldr	r1, [pc, #328]	; (800d158 <HAL_PCD_IRQHandler+0x62c>)
 800d010:	458c      	cmp	ip, r1
 800d012:	d062      	beq.n	800d0da <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d014:	f1b8 0f00 	cmp.w	r8, #0
 800d018:	d104      	bne.n	800d024 <HAL_PCD_IRQHandler+0x4f8>
 800d01a:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d01e:	2a00      	cmp	r2, #0
 800d020:	f000 8092 	beq.w	800d148 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d024:	4620      	mov	r0, r4
 800d026:	4639      	mov	r1, r7
 800d028:	f016 fe46 	bl	8023cb8 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d02c:	6820      	ldr	r0, [r4, #0]
 800d02e:	e6ad      	b.n	800cd8c <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800d030:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800d034:	421d      	tst	r5, r3
 800d036:	f43f adab 	beq.w	800cb90 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800d03a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800d03e:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800d042:	4638      	mov	r0, r7
 800d044:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800d048:	4615      	mov	r5, r2
 800d04a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800d04e:	f006 ff01 	bl	8013e54 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d052:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800d056:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d058:	442b      	add	r3, r5
 800d05a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800d05e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800d062:	442b      	add	r3, r5
 800d064:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800d068:	e592      	b.n	800cb90 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800d06a:	4620      	mov	r0, r4
 800d06c:	f016 fe52 	bl	8023d14 <HAL_PCD_SuspendCallback>
 800d070:	e5fb      	b.n	800cc6a <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800d072:	4620      	mov	r0, r4
 800d074:	f016 fe76 	bl	8023d64 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	e5ed      	b.n	800cc58 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800d07c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800d080:	4413      	add	r3, r2
 800d082:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800d084:	f1ba 0f00 	cmp.w	sl, #0
 800d088:	f47f ae3f 	bne.w	800cd0a <HAL_PCD_IRQHandler+0x1de>
 800d08c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d08e:	2b00      	cmp	r3, #0
 800d090:	f47f ae3b 	bne.w	800cd0a <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d094:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	f006 ffd9 	bl	8014050 <USB_EP0_OutStart>
 800d09e:	e634      	b.n	800cd0a <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f016 fe03 	bl	8023cac <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800d0a6:	6820      	ldr	r0, [r4, #0]
 800d0a8:	e674      	b.n	800cd94 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d0aa:	0719      	lsls	r1, r3, #28
 800d0ac:	d51c      	bpl.n	800d0e8 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d0ae:	4929      	ldr	r1, [pc, #164]	; (800d154 <HAL_PCD_IRQHandler+0x628>)
 800d0b0:	458c      	cmp	ip, r1
 800d0b2:	f67f ae6b 	bls.w	800cd8c <HAL_PCD_IRQHandler+0x260>
 800d0b6:	041f      	lsls	r7, r3, #16
 800d0b8:	f57f ae68 	bpl.w	800cd8c <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d0bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0c0:	6093      	str	r3, [r2, #8]
 800d0c2:	e663      	b.n	800cd8c <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d0c4:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800d0c6:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800d0c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800d0cc:	f8d4 b000 	ldr.w	fp, [r4]
 800d0d0:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800d0d2:	42ab      	cmp	r3, r5
 800d0d4:	f4ff adf2 	bcc.w	800ccbc <HAL_PCD_IRQHandler+0x190>
 800d0d8:	e768      	b.n	800cfac <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d0da:	0419      	lsls	r1, r3, #16
 800d0dc:	d4ee      	bmi.n	800d0bc <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d0de:	0699      	lsls	r1, r3, #26
 800d0e0:	d5a0      	bpl.n	800d024 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0e2:	2120      	movs	r1, #32
 800d0e4:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d0e6:	e79d      	b.n	800d024 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d0e8:	0699      	lsls	r1, r3, #26
 800d0ea:	d508      	bpl.n	800d0fe <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d0ec:	2320      	movs	r3, #32
 800d0ee:	6093      	str	r3, [r2, #8]
 800d0f0:	e64c      	b.n	800cd8c <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d0f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d0f6:	6820      	ldr	r0, [r4, #0]
 800d0f8:	f006 ffaa 	bl	8014050 <USB_EP0_OutStart>
 800d0fc:	e779      	b.n	800cff2 <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d0fe:	f013 0f28 	tst.w	r3, #40	; 0x28
 800d102:	f47f ae43 	bne.w	800cd8c <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d106:	4913      	ldr	r1, [pc, #76]	; (800d154 <HAL_PCD_IRQHandler+0x628>)
 800d108:	458c      	cmp	ip, r1
 800d10a:	d901      	bls.n	800d110 <HAL_PCD_IRQHandler+0x5e4>
 800d10c:	041b      	lsls	r3, r3, #16
 800d10e:	d4d5      	bmi.n	800d0bc <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d110:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800d112:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d116:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800d11a:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800d11c:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800d120:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800d124:	440a      	add	r2, r1
 800d126:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d12a:	f1b8 0f00 	cmp.w	r8, #0
 800d12e:	f47f af79 	bne.w	800d024 <HAL_PCD_IRQHandler+0x4f8>
 800d132:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800d136:	2a00      	cmp	r2, #0
 800d138:	f47f af74 	bne.w	800d024 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d13c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d140:	2101      	movs	r1, #1
 800d142:	f006 ff85 	bl	8014050 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d146:	e76d      	b.n	800d024 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d148:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d14c:	4641      	mov	r1, r8
 800d14e:	f006 ff7f 	bl	8014050 <USB_EP0_OutStart>
 800d152:	e767      	b.n	800d024 <HAL_PCD_IRQHandler+0x4f8>
 800d154:	4f54300a 	.word	0x4f54300a
 800d158:	4f54310a 	.word	0x4f54310a

0800d15c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800d15c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800d160:	2a01      	cmp	r2, #1
 800d162:	d00e      	beq.n	800d182 <HAL_PCD_SetAddress+0x26>
 800d164:	2201      	movs	r2, #1
{
 800d166:	b510      	push	{r4, lr}
 800d168:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d16a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800d16c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800d170:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d174:	f006 fef2 	bl	8013f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d178:	2300      	movs	r3, #0
  return HAL_OK;
 800d17a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d17c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d180:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800d182:	2002      	movs	r0, #2
}
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop

0800d188 <HAL_PCD_EP_Open>:
{
 800d188:	b510      	push	{r4, lr}
 800d18a:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800d18e:	0609      	lsls	r1, r1, #24
{
 800d190:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d192:	d427      	bmi.n	800d1e4 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d194:	f04f 0c1c 	mov.w	ip, #28
 800d198:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800d19c:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800d1a0:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800d1a4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800d1ae:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800d1b0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d1b2:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800d1b6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800d1b8:	b10a      	cbz	r2, 800d1be <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800d1ba:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d101      	bne.n	800d1c6 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800d1c6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d1ca:	2b01      	cmp	r3, #1
 800d1cc:	d018      	beq.n	800d200 <HAL_PCD_EP_Open+0x78>
 800d1ce:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d1d0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d1d2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d1d6:	f006 fbe5 	bl	80139a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d1da:	2300      	movs	r3, #0
  return ret;
 800d1dc:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d1de:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d1e2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1e4:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800d1e6:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1ea:	fb00 400e 	mla	r0, r0, lr, r4
 800d1ee:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800d1f2:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800d1f6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800d1fa:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800d1fe:	e7d6      	b.n	800d1ae <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800d200:	2002      	movs	r0, #2
}
 800d202:	bd10      	pop	{r4, pc}

0800d204 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800d204:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d208:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d20c:	f04f 011c 	mov.w	r1, #28
{
 800d210:	b510      	push	{r4, lr}
 800d212:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800d214:	d11a      	bne.n	800d24c <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d216:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d21a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d21e:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d220:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d224:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d228:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d22c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d22e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d232:	2b01      	cmp	r3, #1
 800d234:	d019      	beq.n	800d26a <HAL_PCD_EP_Close+0x66>
 800d236:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d238:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d23a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d23e:	f006 fbf9 	bl	8013a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d242:	2300      	movs	r3, #0
  return HAL_OK;
 800d244:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d246:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d24a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d24c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d250:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800d254:	2001      	movs	r0, #1
 800d256:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d25a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d25c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800d260:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800d262:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d266:	2b01      	cmp	r3, #1
 800d268:	d1e5      	bne.n	800d236 <HAL_PCD_EP_Close+0x32>
 800d26a:	2002      	movs	r0, #2
}
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	bf00      	nop

0800d270 <HAL_PCD_EP_Receive>:
{
 800d270:	b510      	push	{r4, lr}
 800d272:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d276:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d278:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d27c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d280:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d284:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800d288:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800d28c:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d28e:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800d292:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800d296:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800d29a:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800d29e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2a0:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d2a2:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d2a4:	bf08      	it	eq
 800d2a6:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2aa:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d2ac:	b91c      	cbnz	r4, 800d2b6 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2ae:	f006 fd37 	bl	8013d20 <USB_EP0StartXfer>
}
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d2b6:	f006 fc1b 	bl	8013af0 <USB_EPStartXfer>
}
 800d2ba:	2000      	movs	r0, #0
 800d2bc:	bd10      	pop	{r4, pc}
 800d2be:	bf00      	nop

0800d2c0 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d2c0:	f001 010f 	and.w	r1, r1, #15
 800d2c4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800d2c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800d2cc:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop

0800d2d4 <HAL_PCD_EP_Transmit>:
{
 800d2d4:	b510      	push	{r4, lr}
 800d2d6:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2da:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800d2dc:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2e0:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800d2e4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d2e8:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800d2ea:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800d2ee:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800d2f0:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800d2f4:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800d2f8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2fa:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800d2fe:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800d302:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d304:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800d306:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800d308:	bf08      	it	eq
 800d30a:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d30e:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d310:	b91c      	cbnz	r4, 800d31a <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d312:	f006 fd05 	bl	8013d20 <USB_EP0StartXfer>
}
 800d316:	2000      	movs	r0, #0
 800d318:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800d31a:	f006 fbe9 	bl	8013af0 <USB_EPStartXfer>
}
 800d31e:	2000      	movs	r0, #0
 800d320:	bd10      	pop	{r4, pc}
 800d322:	bf00      	nop

0800d324 <HAL_PCD_EP_SetStall>:
{
 800d324:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d326:	6843      	ldr	r3, [r0, #4]
 800d328:	f001 050f 	and.w	r5, r1, #15
 800d32c:	429d      	cmp	r5, r3
 800d32e:	d834      	bhi.n	800d39a <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800d330:	060b      	lsls	r3, r1, #24
 800d332:	4604      	mov	r4, r0
 800d334:	d41d      	bmi.n	800d372 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800d336:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800d338:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800d33c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800d340:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d344:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800d346:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d34a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800d34e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d350:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d352:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d354:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d358:	429a      	cmp	r2, r3
 800d35a:	d01c      	beq.n	800d396 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d35c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d35e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d362:	f006 fd9b 	bl	8013e9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800d366:	b1d5      	cbz	r5, 800d39e <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800d368:	2300      	movs	r3, #0
  return HAL_OK;
 800d36a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800d36c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800d370:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d372:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800d374:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800d378:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d37a:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800d37e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d382:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800d388:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800d38a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800d38c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800d38e:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800d392:	429a      	cmp	r2, r3
 800d394:	d1e2      	bne.n	800d35c <HAL_PCD_EP_SetStall+0x38>
 800d396:	2002      	movs	r0, #2
}
 800d398:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d39a:	2001      	movs	r0, #1
}
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800d39e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800d3a2:	7c21      	ldrb	r1, [r4, #16]
 800d3a4:	6820      	ldr	r0, [r4, #0]
 800d3a6:	f006 fe53 	bl	8014050 <USB_EP0_OutStart>
 800d3aa:	e7dd      	b.n	800d368 <HAL_PCD_EP_SetStall+0x44>

0800d3ac <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d3ac:	6842      	ldr	r2, [r0, #4]
{
 800d3ae:	b538      	push	{r3, r4, r5, lr}
 800d3b0:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d3b4:	4293      	cmp	r3, r2
 800d3b6:	d832      	bhi.n	800d41e <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800d3b8:	f011 0f80 	tst.w	r1, #128	; 0x80
 800d3bc:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3be:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800d3c2:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800d3c6:	d119      	bne.n	800d3fc <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3c8:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d3d2:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d3d4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800d3d8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800d3dc:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d3de:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d3e0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d018      	beq.n	800d41a <HAL_PCD_EP_ClrStall+0x6e>
 800d3e8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d3ea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800d3ec:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d3f0:	f006 fd88 	bl	8013f04 <USB_EPClearStall>
  return HAL_OK;
 800d3f4:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800d3f6:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d3fc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800d400:	2001      	movs	r0, #1
 800d402:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800d406:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d408:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800d40a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800d40e:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800d410:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800d412:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800d416:	2b01      	cmp	r3, #1
 800d418:	d1e6      	bne.n	800d3e8 <HAL_PCD_EP_ClrStall+0x3c>
 800d41a:	2002      	movs	r0, #2
}
 800d41c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800d41e:	2001      	movs	r0, #1
}
 800d420:	bd38      	pop	{r3, r4, r5, pc}
 800d422:	bf00      	nop

0800d424 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d424:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d426:	6804      	ldr	r4, [r0, #0]
 800d428:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800d42a:	b931      	cbnz	r1, 800d43a <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d42c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d430:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800d432:	2000      	movs	r0, #0
 800d434:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d438:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d43a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800d43c:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d440:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d444:	d00b      	beq.n	800d45e <HAL_PCDEx_SetTxFiFo+0x3a>
 800d446:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d448:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800d44c:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d44e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800d452:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d454:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800d456:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d458:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800d45c:	d3f4      	bcc.n	800d448 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d45e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800d462:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800d466:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800d46a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d46e:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800d472:	2000      	movs	r0, #0
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop

0800d478 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d478:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800d47a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	6259      	str	r1, [r3, #36]	; 0x24
}
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop

0800d484 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800d484:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800d486:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d48a:	4909      	ldr	r1, [pc, #36]	; (800d4b0 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d48c:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800d48e:	4660      	mov	r0, ip
{
 800d490:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800d492:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800d494:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800d498:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d49c:	6993      	ldr	r3, [r2, #24]
}
 800d49e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800d4a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d4a6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800d4a8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d4aa:	4319      	orrs	r1, r3
 800d4ac:	6551      	str	r1, [r2, #84]	; 0x54
}
 800d4ae:	4770      	bx	lr
 800d4b0:	10000003 	.word	0x10000003

0800d4b4 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d4b4:	4a02      	ldr	r2, [pc, #8]	; (800d4c0 <HAL_PWR_EnableBkUpAccess+0xc>)
 800d4b6:	6813      	ldr	r3, [r2, #0]
 800d4b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4bc:	6013      	str	r3, [r2, #0]
}
 800d4be:	4770      	bx	lr
 800d4c0:	40007000 	.word	0x40007000

0800d4c4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800d4c4:	4b1a      	ldr	r3, [pc, #104]	; (800d530 <HAL_PWREx_EnableOverDrive+0x6c>)
 800d4c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800d4cc:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4ce:	641a      	str	r2, [r3, #64]	; 0x40
{
 800d4d0:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d4d4:	4c17      	ldr	r4, [pc, #92]	; (800d534 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d4de:	6823      	ldr	r3, [r4, #0]
 800d4e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d4e4:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d4e6:	f7fa fe4f 	bl	8008188 <HAL_GetTick>
 800d4ea:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4ec:	e005      	b.n	800d4fa <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d4ee:	f7fa fe4b 	bl	8008188 <HAL_GetTick>
 800d4f2:	1b40      	subs	r0, r0, r5
 800d4f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d4f8:	d817      	bhi.n	800d52a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	03da      	lsls	r2, r3, #15
 800d4fe:	d5f6      	bpl.n	800d4ee <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d500:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d502:	4d0c      	ldr	r5, [pc, #48]	; (800d534 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d508:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d50a:	f7fa fe3d 	bl	8008188 <HAL_GetTick>
 800d50e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d510:	e005      	b.n	800d51e <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d512:	f7fa fe39 	bl	8008188 <HAL_GetTick>
 800d516:	1b00      	subs	r0, r0, r4
 800d518:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800d51c:	d805      	bhi.n	800d52a <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d51e:	686b      	ldr	r3, [r5, #4]
 800d520:	039b      	lsls	r3, r3, #14
 800d522:	d5f6      	bpl.n	800d512 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800d524:	2000      	movs	r0, #0
}
 800d526:	b003      	add	sp, #12
 800d528:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800d52a:	2003      	movs	r0, #3
}
 800d52c:	b003      	add	sp, #12
 800d52e:	bd30      	pop	{r4, r5, pc}
 800d530:	40023800 	.word	0x40023800
 800d534:	40007000 	.word	0x40007000

0800d538 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d538:	2800      	cmp	r0, #0
 800d53a:	f000 828c 	beq.w	800da56 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d53e:	6803      	ldr	r3, [r0, #0]
 800d540:	2b0f      	cmp	r3, #15
{
 800d542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d546:	4604      	mov	r4, r0
 800d548:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d54a:	f200 8123 	bhi.w	800d794 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d54e:	07dd      	lsls	r5, r3, #31
 800d550:	d534      	bpl.n	800d5bc <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d552:	6863      	ldr	r3, [r4, #4]
 800d554:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800d558:	d003      	beq.n	800d562 <HAL_RCC_OscConfig+0x2a>
 800d55a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d55e:	f040 8175 	bne.w	800d84c <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d562:	4aa3      	ldr	r2, [pc, #652]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d564:	6893      	ldr	r3, [r2, #8]
 800d566:	f003 030c 	and.w	r3, r3, #12
 800d56a:	2b04      	cmp	r3, #4
 800d56c:	d01d      	beq.n	800d5aa <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d56e:	6893      	ldr	r3, [r2, #8]
 800d570:	f003 030c 	and.w	r3, r3, #12
 800d574:	2b08      	cmp	r3, #8
 800d576:	d015      	beq.n	800d5a4 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d578:	6863      	ldr	r3, [r4, #4]
 800d57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d57e:	f000 816b 	beq.w	800d858 <HAL_RCC_OscConfig+0x320>
 800d582:	2b00      	cmp	r3, #0
 800d584:	f000 819c 	beq.w	800d8c0 <HAL_RCC_OscConfig+0x388>
 800d588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d58c:	4b98      	ldr	r3, [pc, #608]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d58e:	681a      	ldr	r2, [r3, #0]
 800d590:	f000 822d 	beq.w	800d9ee <HAL_RCC_OscConfig+0x4b6>
 800d594:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	681a      	ldr	r2, [r3, #0]
 800d59c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d5a0:	601a      	str	r2, [r3, #0]
 800d5a2:	e15e      	b.n	800d862 <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d5a4:	6853      	ldr	r3, [r2, #4]
 800d5a6:	0258      	lsls	r0, r3, #9
 800d5a8:	d5e6      	bpl.n	800d578 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d5aa:	4b91      	ldr	r3, [pc, #580]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	0399      	lsls	r1, r3, #14
 800d5b0:	d503      	bpl.n	800d5ba <HAL_RCC_OscConfig+0x82>
 800d5b2:	6863      	ldr	r3, [r4, #4]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f000 80ff 	beq.w	800d7b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d5ba:	6823      	ldr	r3, [r4, #0]
 800d5bc:	079f      	lsls	r7, r3, #30
 800d5be:	d531      	bpl.n	800d624 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d5c0:	68e3      	ldr	r3, [r4, #12]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	f200 80fc 	bhi.w	800d7c0 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d5c8:	6923      	ldr	r3, [r4, #16]
 800d5ca:	2b1f      	cmp	r3, #31
 800d5cc:	f200 8101 	bhi.w	800d7d2 <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d5d0:	4b87      	ldr	r3, [pc, #540]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d5d2:	689a      	ldr	r2, [r3, #8]
 800d5d4:	f012 0f0c 	tst.w	r2, #12
 800d5d8:	f000 80e7 	beq.w	800d7aa <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d5dc:	689a      	ldr	r2, [r3, #8]
 800d5de:	f002 020c 	and.w	r2, r2, #12
 800d5e2:	2a08      	cmp	r2, #8
 800d5e4:	f000 80dd 	beq.w	800d7a2 <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d5e8:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d5ea:	4d81      	ldr	r5, [pc, #516]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	f000 819d 	beq.w	800d92c <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	f043 0301 	orr.w	r3, r3, #1
 800d5f8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5fa:	f7fa fdc5 	bl	8008188 <HAL_GetTick>
 800d5fe:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d600:	e005      	b.n	800d60e <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d602:	f7fa fdc1 	bl	8008188 <HAL_GetTick>
 800d606:	1b80      	subs	r0, r0, r6
 800d608:	2802      	cmp	r0, #2
 800d60a:	f200 8155 	bhi.w	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d60e:	682b      	ldr	r3, [r5, #0]
 800d610:	0798      	lsls	r0, r3, #30
 800d612:	d5f6      	bpl.n	800d602 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	6922      	ldr	r2, [r4, #16]
 800d618:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d61c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d620:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	071a      	lsls	r2, r3, #28
 800d626:	d42a      	bmi.n	800d67e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d628:	075e      	lsls	r6, r3, #29
 800d62a:	d544      	bpl.n	800d6b6 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d62c:	68a3      	ldr	r3, [r4, #8]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d906      	bls.n	800d640 <HAL_RCC_OscConfig+0x108>
 800d632:	2b05      	cmp	r3, #5
 800d634:	d004      	beq.n	800d640 <HAL_RCC_OscConfig+0x108>
 800d636:	f240 2106 	movw	r1, #518	; 0x206
 800d63a:	486e      	ldr	r0, [pc, #440]	; (800d7f4 <HAL_RCC_OscConfig+0x2bc>)
 800d63c:	f7f7 fcba 	bl	8004fb4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d640:	4b6b      	ldr	r3, [pc, #428]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d642:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d644:	00d5      	lsls	r5, r2, #3
 800d646:	f140 80ec 	bpl.w	800d822 <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800d64a:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d64c:	4e6a      	ldr	r6, [pc, #424]	; (800d7f8 <HAL_RCC_OscConfig+0x2c0>)
 800d64e:	6833      	ldr	r3, [r6, #0]
 800d650:	05d8      	lsls	r0, r3, #23
 800d652:	f140 8121 	bpl.w	800d898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d656:	68a3      	ldr	r3, [r4, #8]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	f000 8179 	beq.w	800d950 <HAL_RCC_OscConfig+0x418>
 800d65e:	2b00      	cmp	r3, #0
 800d660:	f000 8144 	beq.w	800d8ec <HAL_RCC_OscConfig+0x3b4>
 800d664:	2b05      	cmp	r3, #5
 800d666:	4b62      	ldr	r3, [pc, #392]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d66a:	f000 81c8 	beq.w	800d9fe <HAL_RCC_OscConfig+0x4c6>
 800d66e:	f022 0201 	bic.w	r2, r2, #1
 800d672:	671a      	str	r2, [r3, #112]	; 0x70
 800d674:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d676:	f022 0204 	bic.w	r2, r2, #4
 800d67a:	671a      	str	r2, [r3, #112]	; 0x70
 800d67c:	e16d      	b.n	800d95a <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d67e:	6963      	ldr	r3, [r4, #20]
 800d680:	2b01      	cmp	r3, #1
 800d682:	f200 80c4 	bhi.w	800d80e <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800d686:	4d5a      	ldr	r5, [pc, #360]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80a8 	beq.w	800d7de <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800d68e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d690:	f043 0301 	orr.w	r3, r3, #1
 800d694:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d696:	f7fa fd77 	bl	8008188 <HAL_GetTick>
 800d69a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d69c:	e005      	b.n	800d6aa <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d69e:	f7fa fd73 	bl	8008188 <HAL_GetTick>
 800d6a2:	1b80      	subs	r0, r0, r6
 800d6a4:	2802      	cmp	r0, #2
 800d6a6:	f200 8107 	bhi.w	800d8b8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d6aa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d6ac:	079b      	lsls	r3, r3, #30
 800d6ae:	d5f6      	bpl.n	800d69e <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	075e      	lsls	r6, r3, #29
 800d6b4:	d4ba      	bmi.n	800d62c <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d6b6:	69a0      	ldr	r0, [r4, #24]
 800d6b8:	2802      	cmp	r0, #2
 800d6ba:	f200 80bd 	bhi.w	800d838 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d064      	beq.n	800d78c <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d6c2:	4d4b      	ldr	r5, [pc, #300]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d6c4:	68ab      	ldr	r3, [r5, #8]
 800d6c6:	f003 030c 	and.w	r3, r3, #12
 800d6ca:	2b08      	cmp	r3, #8
 800d6cc:	f000 8158 	beq.w	800d980 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6d0:	2802      	cmp	r0, #2
 800d6d2:	f040 81ae 	bne.w	800da32 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d6d6:	69e3      	ldr	r3, [r4, #28]
 800d6d8:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800d6dc:	f040 81a3 	bne.w	800da26 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d6e0:	6a23      	ldr	r3, [r4, #32]
 800d6e2:	3b02      	subs	r3, #2
 800d6e4:	2b3d      	cmp	r3, #61	; 0x3d
 800d6e6:	f200 8198 	bhi.w	800da1a <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d6ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6ec:	3b32      	subs	r3, #50	; 0x32
 800d6ee:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d6f2:	f200 818c 	bhi.w	800da0e <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d6f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d6f8:	2b08      	cmp	r3, #8
 800d6fa:	f200 8172 	bhi.w	800d9e2 <HAL_RCC_OscConfig+0x4aa>
 800d6fe:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800d702:	fa22 f303 	lsr.w	r3, r2, r3
 800d706:	07d8      	lsls	r0, r3, #31
 800d708:	f140 816b 	bpl.w	800d9e2 <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d70c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d70e:	3b02      	subs	r3, #2
 800d710:	2b0d      	cmp	r3, #13
 800d712:	f200 81a8 	bhi.w	800da66 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d716:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d718:	3b02      	subs	r3, #2
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	f200 819d 	bhi.w	800da5a <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d720:	4d33      	ldr	r5, [pc, #204]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d722:	682b      	ldr	r3, [r5, #0]
 800d724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d728:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d72a:	f7fa fd2d 	bl	8008188 <HAL_GetTick>
 800d72e:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d730:	e005      	b.n	800d73e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d732:	f7fa fd29 	bl	8008188 <HAL_GetTick>
 800d736:	1b80      	subs	r0, r0, r6
 800d738:	2802      	cmp	r0, #2
 800d73a:	f200 80bd 	bhi.w	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d73e:	682b      	ldr	r3, [r5, #0]
 800d740:	0199      	lsls	r1, r3, #6
 800d742:	d4f6      	bmi.n	800d732 <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d744:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800d748:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d74a:	430b      	orrs	r3, r1
 800d74c:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d74e:	4e28      	ldr	r6, [pc, #160]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d750:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d754:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800d758:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d75c:	0852      	lsrs	r2, r2, #1
 800d75e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d762:	3a01      	subs	r2, #1
 800d764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d768:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d76a:	682b      	ldr	r3, [r5, #0]
 800d76c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d770:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d772:	f7fa fd09 	bl	8008188 <HAL_GetTick>
 800d776:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d778:	e005      	b.n	800d786 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d77a:	f7fa fd05 	bl	8008188 <HAL_GetTick>
 800d77e:	1b00      	subs	r0, r0, r4
 800d780:	2802      	cmp	r0, #2
 800d782:	f200 8099 	bhi.w	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d786:	6833      	ldr	r3, [r6, #0]
 800d788:	019a      	lsls	r2, r3, #6
 800d78a:	d5f6      	bpl.n	800d77a <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800d78c:	2000      	movs	r0, #0
}
 800d78e:	b002      	add	sp, #8
 800d790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d794:	f240 1163 	movw	r1, #355	; 0x163
 800d798:	4816      	ldr	r0, [pc, #88]	; (800d7f4 <HAL_RCC_OscConfig+0x2bc>)
 800d79a:	f7f7 fc0b 	bl	8004fb4 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	e6d5      	b.n	800d54e <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	025e      	lsls	r6, r3, #9
 800d7a6:	f53f af1f 	bmi.w	800d5e8 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7aa:	4b11      	ldr	r3, [pc, #68]	; (800d7f0 <HAL_RCC_OscConfig+0x2b8>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	079d      	lsls	r5, r3, #30
 800d7b0:	d565      	bpl.n	800d87e <HAL_RCC_OscConfig+0x346>
 800d7b2:	68e3      	ldr	r3, [r4, #12]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d062      	beq.n	800d87e <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800d7b8:	2001      	movs	r0, #1
}
 800d7ba:	b002      	add	sp, #8
 800d7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d7c0:	f240 119b 	movw	r1, #411	; 0x19b
 800d7c4:	480b      	ldr	r0, [pc, #44]	; (800d7f4 <HAL_RCC_OscConfig+0x2bc>)
 800d7c6:	f7f7 fbf5 	bl	8004fb4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d7ca:	6923      	ldr	r3, [r4, #16]
 800d7cc:	2b1f      	cmp	r3, #31
 800d7ce:	f67f aeff 	bls.w	800d5d0 <HAL_RCC_OscConfig+0x98>
 800d7d2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d7d6:	4807      	ldr	r0, [pc, #28]	; (800d7f4 <HAL_RCC_OscConfig+0x2bc>)
 800d7d8:	f7f7 fbec 	bl	8004fb4 <assert_failed>
 800d7dc:	e6f8      	b.n	800d5d0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800d7de:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d7e0:	f023 0301 	bic.w	r3, r3, #1
 800d7e4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d7e6:	f7fa fccf 	bl	8008188 <HAL_GetTick>
 800d7ea:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d7ec:	e00b      	b.n	800d806 <HAL_RCC_OscConfig+0x2ce>
 800d7ee:	bf00      	nop
 800d7f0:	40023800 	.word	0x40023800
 800d7f4:	0802cb20 	.word	0x0802cb20
 800d7f8:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d7fc:	f7fa fcc4 	bl	8008188 <HAL_GetTick>
 800d800:	1b80      	subs	r0, r0, r6
 800d802:	2802      	cmp	r0, #2
 800d804:	d858      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d806:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d808:	079f      	lsls	r7, r3, #30
 800d80a:	d4f7      	bmi.n	800d7fc <HAL_RCC_OscConfig+0x2c4>
 800d80c:	e750      	b.n	800d6b0 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d80e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800d812:	4898      	ldr	r0, [pc, #608]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800d814:	f7f7 fbce 	bl	8004fb4 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d818:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d81a:	4d97      	ldr	r5, [pc, #604]	; (800da78 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d0de      	beq.n	800d7de <HAL_RCC_OscConfig+0x2a6>
 800d820:	e735      	b.n	800d68e <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800d824:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d826:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d82a:	641a      	str	r2, [r3, #64]	; 0x40
 800d82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d82e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d832:	9301      	str	r3, [sp, #4]
 800d834:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d836:	e709      	b.n	800d64c <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d838:	488e      	ldr	r0, [pc, #568]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800d83a:	f240 214a 	movw	r1, #586	; 0x24a
 800d83e:	f7f7 fbb9 	bl	8004fb4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d842:	69a0      	ldr	r0, [r4, #24]
 800d844:	2800      	cmp	r0, #0
 800d846:	f47f af3c 	bne.w	800d6c2 <HAL_RCC_OscConfig+0x18a>
 800d84a:	e79f      	b.n	800d78c <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d84c:	f240 1169 	movw	r1, #361	; 0x169
 800d850:	4888      	ldr	r0, [pc, #544]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800d852:	f7f7 fbaf 	bl	8004fb4 <assert_failed>
 800d856:	e684      	b.n	800d562 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d858:	4a87      	ldr	r2, [pc, #540]	; (800da78 <HAL_RCC_OscConfig+0x540>)
 800d85a:	6813      	ldr	r3, [r2, #0]
 800d85c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d860:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d862:	f7fa fc91 	bl	8008188 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d866:	4e84      	ldr	r6, [pc, #528]	; (800da78 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800d868:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d86a:	e004      	b.n	800d876 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d86c:	f7fa fc8c 	bl	8008188 <HAL_GetTick>
 800d870:	1b40      	subs	r0, r0, r5
 800d872:	2864      	cmp	r0, #100	; 0x64
 800d874:	d820      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d876:	6833      	ldr	r3, [r6, #0]
 800d878:	039a      	lsls	r2, r3, #14
 800d87a:	d5f7      	bpl.n	800d86c <HAL_RCC_OscConfig+0x334>
 800d87c:	e69d      	b.n	800d5ba <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d87e:	4a7e      	ldr	r2, [pc, #504]	; (800da78 <HAL_RCC_OscConfig+0x540>)
 800d880:	6921      	ldr	r1, [r4, #16]
 800d882:	6813      	ldr	r3, [r2, #0]
 800d884:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d888:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d88c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	071a      	lsls	r2, r3, #28
 800d892:	f57f aec9 	bpl.w	800d628 <HAL_RCC_OscConfig+0xf0>
 800d896:	e6f2      	b.n	800d67e <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800d898:	6833      	ldr	r3, [r6, #0]
 800d89a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d89e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d8a0:	f7fa fc72 	bl	8008188 <HAL_GetTick>
 800d8a4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d8a6:	6833      	ldr	r3, [r6, #0]
 800d8a8:	05d9      	lsls	r1, r3, #23
 800d8aa:	f53f aed4 	bmi.w	800d656 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8ae:	f7fa fc6b 	bl	8008188 <HAL_GetTick>
 800d8b2:	1bc0      	subs	r0, r0, r7
 800d8b4:	2864      	cmp	r0, #100	; 0x64
 800d8b6:	d9f6      	bls.n	800d8a6 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800d8b8:	2003      	movs	r0, #3
}
 800d8ba:	b002      	add	sp, #8
 800d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d8c0:	4d6d      	ldr	r5, [pc, #436]	; (800da78 <HAL_RCC_OscConfig+0x540>)
 800d8c2:	682b      	ldr	r3, [r5, #0]
 800d8c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d8c8:	602b      	str	r3, [r5, #0]
 800d8ca:	682b      	ldr	r3, [r5, #0]
 800d8cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d8d0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d8d2:	f7fa fc59 	bl	8008188 <HAL_GetTick>
 800d8d6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8d8:	e004      	b.n	800d8e4 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d8da:	f7fa fc55 	bl	8008188 <HAL_GetTick>
 800d8de:	1b80      	subs	r0, r0, r6
 800d8e0:	2864      	cmp	r0, #100	; 0x64
 800d8e2:	d8e9      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	039b      	lsls	r3, r3, #14
 800d8e8:	d4f7      	bmi.n	800d8da <HAL_RCC_OscConfig+0x3a2>
 800d8ea:	e666      	b.n	800d5ba <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8ec:	4e62      	ldr	r6, [pc, #392]	; (800da78 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d8ee:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d8f2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d8f4:	f023 0301 	bic.w	r3, r3, #1
 800d8f8:	6733      	str	r3, [r6, #112]	; 0x70
 800d8fa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d8fc:	f023 0304 	bic.w	r3, r3, #4
 800d900:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d902:	f7fa fc41 	bl	8008188 <HAL_GetTick>
 800d906:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d908:	e004      	b.n	800d914 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d90a:	f7fa fc3d 	bl	8008188 <HAL_GetTick>
 800d90e:	1bc0      	subs	r0, r0, r7
 800d910:	4540      	cmp	r0, r8
 800d912:	d8d1      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d914:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d916:	079b      	lsls	r3, r3, #30
 800d918:	d4f7      	bmi.n	800d90a <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	f43f aecb 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d920:	4a55      	ldr	r2, [pc, #340]	; (800da78 <HAL_RCC_OscConfig+0x540>)
 800d922:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d928:	6413      	str	r3, [r2, #64]	; 0x40
 800d92a:	e6c4      	b.n	800d6b6 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	f023 0301 	bic.w	r3, r3, #1
 800d932:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d934:	f7fa fc28 	bl	8008188 <HAL_GetTick>
 800d938:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d93a:	e004      	b.n	800d946 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d93c:	f7fa fc24 	bl	8008188 <HAL_GetTick>
 800d940:	1b80      	subs	r0, r0, r6
 800d942:	2802      	cmp	r0, #2
 800d944:	d8b8      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d946:	682b      	ldr	r3, [r5, #0]
 800d948:	0799      	lsls	r1, r3, #30
 800d94a:	d4f7      	bmi.n	800d93c <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	e669      	b.n	800d624 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d950:	4a49      	ldr	r2, [pc, #292]	; (800da78 <HAL_RCC_OscConfig+0x540>)
 800d952:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d954:	f043 0301 	orr.w	r3, r3, #1
 800d958:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d95a:	f7fa fc15 	bl	8008188 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d95e:	4f46      	ldr	r7, [pc, #280]	; (800da78 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d960:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d964:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d966:	e004      	b.n	800d972 <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d968:	f7fa fc0e 	bl	8008188 <HAL_GetTick>
 800d96c:	1b80      	subs	r0, r0, r6
 800d96e:	4540      	cmp	r0, r8
 800d970:	d8a2      	bhi.n	800d8b8 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d974:	079a      	lsls	r2, r3, #30
 800d976:	d5f7      	bpl.n	800d968 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800d978:	2d00      	cmp	r5, #0
 800d97a:	f43f ae9c 	beq.w	800d6b6 <HAL_RCC_OscConfig+0x17e>
 800d97e:	e7cf      	b.n	800d920 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d980:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800d982:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d984:	f43f af03 	beq.w	800d78e <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d988:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d98c:	69e1      	ldr	r1, [r4, #28]
 800d98e:	428b      	cmp	r3, r1
 800d990:	f47f af12 	bne.w	800d7b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d994:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d998:	6a21      	ldr	r1, [r4, #32]
 800d99a:	428b      	cmp	r3, r1
 800d99c:	f47f af0c 	bne.w	800d7b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d9a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d9a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d9a6:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d9a8:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800d9ac:	f47f af04 	bne.w	800d7b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d9b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d9b2:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800d9b6:	085b      	lsrs	r3, r3, #1
 800d9b8:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d9ba:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800d9be:	f47f aefb 	bne.w	800d7b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d9c2:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800d9c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d9c8:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800d9cc:	f47f aef4 	bne.w	800d7b8 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d9d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d9d2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d9d6:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800d9da:	bf14      	ite	ne
 800d9dc:	2001      	movne	r0, #1
 800d9de:	2000      	moveq	r0, #0
 800d9e0:	e6d5      	b.n	800d78e <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d9e2:	f240 2156 	movw	r1, #598	; 0x256
 800d9e6:	4823      	ldr	r0, [pc, #140]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800d9e8:	f7f7 fae4 	bl	8004fb4 <assert_failed>
 800d9ec:	e68e      	b.n	800d70c <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d9f2:	601a      	str	r2, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d9fa:	601a      	str	r2, [r3, #0]
 800d9fc:	e731      	b.n	800d862 <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d9fe:	f042 0204 	orr.w	r2, r2, #4
 800da02:	671a      	str	r2, [r3, #112]	; 0x70
 800da04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800da06:	f042 0201 	orr.w	r2, r2, #1
 800da0a:	671a      	str	r2, [r3, #112]	; 0x70
 800da0c:	e7a5      	b.n	800d95a <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800da0e:	f240 2155 	movw	r1, #597	; 0x255
 800da12:	4818      	ldr	r0, [pc, #96]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800da14:	f7f7 face 	bl	8004fb4 <assert_failed>
 800da18:	e66d      	b.n	800d6f6 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800da1a:	f44f 7115 	mov.w	r1, #596	; 0x254
 800da1e:	4815      	ldr	r0, [pc, #84]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800da20:	f7f7 fac8 	bl	8004fb4 <assert_failed>
 800da24:	e661      	b.n	800d6ea <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800da26:	f240 2153 	movw	r1, #595	; 0x253
 800da2a:	4812      	ldr	r0, [pc, #72]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800da2c:	f7f7 fac2 	bl	8004fb4 <assert_failed>
 800da30:	e656      	b.n	800d6e0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da38:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800da3a:	f7fa fba5 	bl	8008188 <HAL_GetTick>
 800da3e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da40:	e005      	b.n	800da4e <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da42:	f7fa fba1 	bl	8008188 <HAL_GetTick>
 800da46:	1b00      	subs	r0, r0, r4
 800da48:	2802      	cmp	r0, #2
 800da4a:	f63f af35 	bhi.w	800d8b8 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da4e:	682b      	ldr	r3, [r5, #0]
 800da50:	019b      	lsls	r3, r3, #6
 800da52:	d4f6      	bmi.n	800da42 <HAL_RCC_OscConfig+0x50a>
 800da54:	e69a      	b.n	800d78c <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800da56:	2001      	movs	r0, #1
}
 800da58:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800da5a:	f240 2159 	movw	r1, #601	; 0x259
 800da5e:	4805      	ldr	r0, [pc, #20]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800da60:	f7f7 faa8 	bl	8004fb4 <assert_failed>
 800da64:	e65c      	b.n	800d720 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800da66:	f240 2157 	movw	r1, #599	; 0x257
 800da6a:	4802      	ldr	r0, [pc, #8]	; (800da74 <HAL_RCC_OscConfig+0x53c>)
 800da6c:	f7f7 faa2 	bl	8004fb4 <assert_failed>
 800da70:	e651      	b.n	800d716 <HAL_RCC_OscConfig+0x1de>
 800da72:	bf00      	nop
 800da74:	0802cb20 	.word	0x0802cb20
 800da78:	40023800 	.word	0x40023800

0800da7c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da7c:	4916      	ldr	r1, [pc, #88]	; (800dad8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800da7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800da80:	688b      	ldr	r3, [r1, #8]
 800da82:	f003 030c 	and.w	r3, r3, #12
 800da86:	2b04      	cmp	r3, #4
 800da88:	d01b      	beq.n	800dac2 <HAL_RCC_GetSysClockFreq+0x46>
 800da8a:	2b08      	cmp	r3, #8
 800da8c:	d117      	bne.n	800dabe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da8e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800da90:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800da92:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da96:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800da98:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800da9c:	d113      	bne.n	800dac6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800da9e:	480f      	ldr	r0, [pc, #60]	; (800dadc <HAL_RCC_GetSysClockFreq+0x60>)
 800daa0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800daa4:	fba1 0100 	umull	r0, r1, r1, r0
 800daa8:	f7f2 fc82 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800daac:	4b0a      	ldr	r3, [pc, #40]	; (800dad8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800daae:	685b      	ldr	r3, [r3, #4]
 800dab0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800dab4:	3301      	adds	r3, #1
 800dab6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800dab8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800dabc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800dabe:	4807      	ldr	r0, [pc, #28]	; (800dadc <HAL_RCC_GetSysClockFreq+0x60>)
}
 800dac0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dac2:	4807      	ldr	r0, [pc, #28]	; (800dae0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800dac4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dac6:	4806      	ldr	r0, [pc, #24]	; (800dae0 <HAL_RCC_GetSysClockFreq+0x64>)
 800dac8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800dacc:	2300      	movs	r3, #0
 800dace:	fba1 0100 	umull	r0, r1, r1, r0
 800dad2:	f7f2 fc6d 	bl	80003b0 <__aeabi_uldivmod>
 800dad6:	e7e9      	b.n	800daac <HAL_RCC_GetSysClockFreq+0x30>
 800dad8:	40023800 	.word	0x40023800
 800dadc:	00f42400 	.word	0x00f42400
 800dae0:	007a1200 	.word	0x007a1200

0800dae4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800dae4:	2800      	cmp	r0, #0
 800dae6:	f000 80f6 	beq.w	800dcd6 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800daea:	6803      	ldr	r3, [r0, #0]
 800daec:	3b01      	subs	r3, #1
 800daee:	2b0e      	cmp	r3, #14
{
 800daf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daf4:	4604      	mov	r4, r0
 800daf6:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800daf8:	f200 80d6 	bhi.w	800dca8 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800dafc:	2d0f      	cmp	r5, #15
 800dafe:	f200 80c3 	bhi.w	800dc88 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800db02:	4a81      	ldr	r2, [pc, #516]	; (800dd08 <HAL_RCC_ClockConfig+0x224>)
 800db04:	6813      	ldr	r3, [r2, #0]
 800db06:	f003 030f 	and.w	r3, r3, #15
 800db0a:	42ab      	cmp	r3, r5
 800db0c:	d36f      	bcc.n	800dbee <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db0e:	6823      	ldr	r3, [r4, #0]
 800db10:	0798      	lsls	r0, r3, #30
 800db12:	d530      	bpl.n	800db76 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db14:	0759      	lsls	r1, r3, #29
 800db16:	d504      	bpl.n	800db22 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800db18:	497c      	ldr	r1, [pc, #496]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800db1a:	688a      	ldr	r2, [r1, #8]
 800db1c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800db20:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db22:	071a      	lsls	r2, r3, #28
 800db24:	d504      	bpl.n	800db30 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800db26:	4979      	ldr	r1, [pc, #484]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800db28:	688a      	ldr	r2, [r1, #8]
 800db2a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800db2e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800db30:	68a1      	ldr	r1, [r4, #8]
 800db32:	f021 0220 	bic.w	r2, r1, #32
 800db36:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800db3a:	2a90      	cmp	r2, #144	; 0x90
 800db3c:	bf18      	it	ne
 800db3e:	2800      	cmpne	r0, #0
 800db40:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800db44:	bf14      	ite	ne
 800db46:	2201      	movne	r2, #1
 800db48:	2200      	moveq	r2, #0
 800db4a:	29f0      	cmp	r1, #240	; 0xf0
 800db4c:	bf0c      	ite	eq
 800db4e:	2200      	moveq	r2, #0
 800db50:	f002 0201 	andne.w	r2, r2, #1
 800db54:	28a0      	cmp	r0, #160	; 0xa0
 800db56:	bf0c      	ite	eq
 800db58:	2200      	moveq	r2, #0
 800db5a:	f002 0201 	andne.w	r2, r2, #1
 800db5e:	b122      	cbz	r2, 800db6a <HAL_RCC_ClockConfig+0x86>
 800db60:	f021 0210 	bic.w	r2, r1, #16
 800db64:	2ac0      	cmp	r2, #192	; 0xc0
 800db66:	f040 80b8 	bne.w	800dcda <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800db6a:	4868      	ldr	r0, [pc, #416]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800db6c:	6882      	ldr	r2, [r0, #8]
 800db6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800db72:	4311      	orrs	r1, r2
 800db74:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800db76:	07df      	lsls	r7, r3, #31
 800db78:	d526      	bpl.n	800dbc8 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800db7a:	6863      	ldr	r3, [r4, #4]
 800db7c:	2b02      	cmp	r3, #2
 800db7e:	f200 80a1 	bhi.w	800dcc4 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db82:	4a62      	ldr	r2, [pc, #392]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db84:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800db86:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800db88:	f000 8098 	beq.w	800dcbc <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	f000 8091 	beq.w	800dcb4 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800db92:	0791      	lsls	r1, r2, #30
 800db94:	d528      	bpl.n	800dbe8 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db96:	4e5d      	ldr	r6, [pc, #372]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800db9c:	68b2      	ldr	r2, [r6, #8]
 800db9e:	f022 0203 	bic.w	r2, r2, #3
 800dba2:	4313      	orrs	r3, r2
 800dba4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800dba6:	f7fa faef 	bl	8008188 <HAL_GetTick>
 800dbaa:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbac:	e005      	b.n	800dbba <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dbae:	f7fa faeb 	bl	8008188 <HAL_GetTick>
 800dbb2:	1bc0      	subs	r0, r0, r7
 800dbb4:	4540      	cmp	r0, r8
 800dbb6:	f200 808c 	bhi.w	800dcd2 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dbba:	68b3      	ldr	r3, [r6, #8]
 800dbbc:	6862      	ldr	r2, [r4, #4]
 800dbbe:	f003 030c 	and.w	r3, r3, #12
 800dbc2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800dbc6:	d1f2      	bne.n	800dbae <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dbc8:	4a4f      	ldr	r2, [pc, #316]	; (800dd08 <HAL_RCC_ClockConfig+0x224>)
 800dbca:	6813      	ldr	r3, [r2, #0]
 800dbcc:	f003 030f 	and.w	r3, r3, #15
 800dbd0:	42ab      	cmp	r3, r5
 800dbd2:	d91a      	bls.n	800dc0a <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbd4:	6813      	ldr	r3, [r2, #0]
 800dbd6:	f023 030f 	bic.w	r3, r3, #15
 800dbda:	432b      	orrs	r3, r5
 800dbdc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbde:	6813      	ldr	r3, [r2, #0]
 800dbe0:	f003 030f 	and.w	r3, r3, #15
 800dbe4:	42ab      	cmp	r3, r5
 800dbe6:	d010      	beq.n	800dc0a <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800dbe8:	2001      	movs	r0, #1
}
 800dbea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbee:	6813      	ldr	r3, [r2, #0]
 800dbf0:	f023 030f 	bic.w	r3, r3, #15
 800dbf4:	432b      	orrs	r3, r5
 800dbf6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbf8:	6813      	ldr	r3, [r2, #0]
 800dbfa:	f003 030f 	and.w	r3, r3, #15
 800dbfe:	42ab      	cmp	r3, r5
 800dc00:	d1f2      	bne.n	800dbe8 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc02:	6823      	ldr	r3, [r4, #0]
 800dc04:	0798      	lsls	r0, r3, #30
 800dc06:	d485      	bmi.n	800db14 <HAL_RCC_ClockConfig+0x30>
 800dc08:	e7b5      	b.n	800db76 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	075a      	lsls	r2, r3, #29
 800dc0e:	d512      	bpl.n	800dc36 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800dc10:	68e1      	ldr	r1, [r4, #12]
 800dc12:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800dc16:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800dc1a:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800dc1e:	bf18      	it	ne
 800dc20:	2a00      	cmpne	r2, #0
 800dc22:	d002      	beq.n	800dc2a <HAL_RCC_ClockConfig+0x146>
 800dc24:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800dc28:	d15f      	bne.n	800dcea <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dc2a:	4838      	ldr	r0, [pc, #224]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800dc2c:	6882      	ldr	r2, [r0, #8]
 800dc2e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800dc32:	430a      	orrs	r2, r1
 800dc34:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc36:	071b      	lsls	r3, r3, #28
 800dc38:	d513      	bpl.n	800dc62 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800dc3a:	6922      	ldr	r2, [r4, #16]
 800dc3c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800dc40:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800dc44:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800dc48:	bf18      	it	ne
 800dc4a:	2b00      	cmpne	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <HAL_RCC_ClockConfig+0x170>
 800dc4e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800dc52:	d152      	bne.n	800dcfa <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dc54:	492d      	ldr	r1, [pc, #180]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800dc56:	688b      	ldr	r3, [r1, #8]
 800dc58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800dc5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800dc60:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dc62:	f7ff ff0b 	bl	800da7c <HAL_RCC_GetSysClockFreq>
 800dc66:	4a29      	ldr	r2, [pc, #164]	; (800dd0c <HAL_RCC_ClockConfig+0x228>)
 800dc68:	4c29      	ldr	r4, [pc, #164]	; (800dd10 <HAL_RCC_ClockConfig+0x22c>)
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800dc6e:	4829      	ldr	r0, [pc, #164]	; (800dd14 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dc70:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800dc74:	4928      	ldr	r1, [pc, #160]	; (800dd18 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800dc76:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dc78:	5ca2      	ldrb	r2, [r4, r2]
 800dc7a:	40d3      	lsrs	r3, r2
 800dc7c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800dc7e:	f7f9 fa73 	bl	8007168 <HAL_InitTick>
  return HAL_OK;
 800dc82:	2000      	movs	r0, #0
}
 800dc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800dc88:	f240 21de 	movw	r1, #734	; 0x2de
 800dc8c:	4823      	ldr	r0, [pc, #140]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dc8e:	f7f7 f991 	bl	8004fb4 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc92:	4b1d      	ldr	r3, [pc, #116]	; (800dd08 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800dc94:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc96:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc98:	6819      	ldr	r1, [r3, #0]
 800dc9a:	f021 010f 	bic.w	r1, r1, #15
 800dc9e:	430d      	orrs	r5, r1
 800dca0:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dca2:	681b      	ldr	r3, [r3, #0]
}
 800dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800dca8:	f240 21dd 	movw	r1, #733	; 0x2dd
 800dcac:	481b      	ldr	r0, [pc, #108]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dcae:	f7f7 f981 	bl	8004fb4 <assert_failed>
 800dcb2:	e723      	b.n	800dafc <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dcb4:	0190      	lsls	r0, r2, #6
 800dcb6:	f53f af6e 	bmi.w	800db96 <HAL_RCC_ClockConfig+0xb2>
 800dcba:	e795      	b.n	800dbe8 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dcbc:	0396      	lsls	r6, r2, #14
 800dcbe:	f53f af6a 	bmi.w	800db96 <HAL_RCC_ClockConfig+0xb2>
 800dcc2:	e791      	b.n	800dbe8 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800dcc4:	f240 3109 	movw	r1, #777	; 0x309
 800dcc8:	4814      	ldr	r0, [pc, #80]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dcca:	f7f7 f973 	bl	8004fb4 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dcce:	6863      	ldr	r3, [r4, #4]
 800dcd0:	e757      	b.n	800db82 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800dcd2:	2003      	movs	r0, #3
 800dcd4:	e789      	b.n	800dbea <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800dcd6:	2001      	movs	r0, #1
}
 800dcd8:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800dcda:	f240 3102 	movw	r1, #770	; 0x302
 800dcde:	480f      	ldr	r0, [pc, #60]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dce0:	f7f7 f968 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dce4:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dce6:	6823      	ldr	r3, [r4, #0]
 800dce8:	e73f      	b.n	800db6a <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800dcea:	f240 3146 	movw	r1, #838	; 0x346
 800dcee:	480b      	ldr	r0, [pc, #44]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dcf0:	f7f7 f960 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dcf4:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	e797      	b.n	800dc2a <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800dcfa:	f240 314d 	movw	r1, #845	; 0x34d
 800dcfe:	4807      	ldr	r0, [pc, #28]	; (800dd1c <HAL_RCC_ClockConfig+0x238>)
 800dd00:	f7f7 f958 	bl	8004fb4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dd04:	6922      	ldr	r2, [r4, #16]
 800dd06:	e7a5      	b.n	800dc54 <HAL_RCC_ClockConfig+0x170>
 800dd08:	40023c00 	.word	0x40023c00
 800dd0c:	40023800 	.word	0x40023800
 800dd10:	0802c174 	.word	0x0802c174
 800dd14:	200002e4 	.word	0x200002e4
 800dd18:	20000284 	.word	0x20000284
 800dd1c:	0802cb20 	.word	0x0802cb20

0800dd20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800dd20:	4b01      	ldr	r3, [pc, #4]	; (800dd28 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800dd22:	6818      	ldr	r0, [r3, #0]
 800dd24:	4770      	bx	lr
 800dd26:	bf00      	nop
 800dd28:	20000284 	.word	0x20000284

0800dd2c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800dd2e:	4905      	ldr	r1, [pc, #20]	; (800dd44 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	4a05      	ldr	r2, [pc, #20]	; (800dd48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800dd34:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800dd38:	6808      	ldr	r0, [r1, #0]
 800dd3a:	5cd3      	ldrb	r3, [r2, r3]
}
 800dd3c:	40d8      	lsrs	r0, r3
 800dd3e:	4770      	bx	lr
 800dd40:	40023800 	.word	0x40023800
 800dd44:	20000284 	.word	0x20000284
 800dd48:	0802c184 	.word	0x0802c184

0800dd4c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd4c:	4b04      	ldr	r3, [pc, #16]	; (800dd60 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800dd4e:	4905      	ldr	r1, [pc, #20]	; (800dd64 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	4a05      	ldr	r2, [pc, #20]	; (800dd68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800dd54:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800dd58:	6808      	ldr	r0, [r1, #0]
 800dd5a:	5cd3      	ldrb	r3, [r2, r3]
}
 800dd5c:	40d8      	lsrs	r0, r3
 800dd5e:	4770      	bx	lr
 800dd60:	40023800 	.word	0x40023800
 800dd64:	20000284 	.word	0x20000284
 800dd68:	0802c184 	.word	0x0802c184

0800dd6c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800dd6e:	220f      	movs	r2, #15
 800dd70:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	f002 0203 	and.w	r2, r2, #3
 800dd78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800dd7a:	689a      	ldr	r2, [r3, #8]
 800dd7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800dd80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800dd82:	689a      	ldr	r2, [r3, #8]
 800dd84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800dd88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dd8a:	689b      	ldr	r3, [r3, #8]
 800dd8c:	08db      	lsrs	r3, r3, #3
{
 800dd8e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dd90:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dd94:	4c05      	ldr	r4, [pc, #20]	; (800ddac <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800dd96:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dd98:	6823      	ldr	r3, [r4, #0]
}
 800dd9a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800dd9e:	f003 030f 	and.w	r3, r3, #15
 800dda2:	600b      	str	r3, [r1, #0]
}
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	40023800 	.word	0x40023800
 800ddac:	40023c00 	.word	0x40023c00

0800ddb0 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ddb0:	4a56      	ldr	r2, [pc, #344]	; (800df0c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ddb2:	6803      	ldr	r3, [r0, #0]
 800ddb4:	401a      	ands	r2, r3
{
 800ddb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddba:	4604      	mov	r4, r0
 800ddbc:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	f000 833f 	beq.w	800e442 <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ddc4:	f013 0601 	ands.w	r6, r3, #1
 800ddc8:	d00f      	beq.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800ddca:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ddcc:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800ddd0:	f040 8342 	bne.w	800e458 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ddd4:	4a4e      	ldr	r2, [pc, #312]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800ddd6:	6891      	ldr	r1, [r2, #8]
 800ddd8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800dddc:	6091      	str	r1, [r2, #8]
 800ddde:	6891      	ldr	r1, [r2, #8]
 800dde0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dde2:	fab6 f686 	clz	r6, r6
 800dde6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dde8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ddea:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800ddee:	d014      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800ddf0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800ddf2:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800ddf6:	f040 838d 	bne.w	800e514 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ddfa:	4945      	ldr	r1, [pc, #276]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ddfc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800de00:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800de04:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800de08:	ea42 0205 	orr.w	r2, r2, r5
 800de0c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800de10:	f000 831f 	beq.w	800e452 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800de14:	fab5 f585 	clz	r5, r5
 800de18:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800de1a:	02d9      	lsls	r1, r3, #11
 800de1c:	d514      	bpl.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800de1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800de20:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800de24:	f040 837d 	bne.w	800e522 <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de28:	4839      	ldr	r0, [pc, #228]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800de2a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800de2e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800de32:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800de36:	ea42 0201 	orr.w	r2, r2, r1
 800de3a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800de3e:	f000 8306 	beq.w	800e44e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800de42:	2900      	cmp	r1, #0
 800de44:	bf08      	it	eq
 800de46:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800de48:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800de4c:	bf18      	it	ne
 800de4e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800de50:	069a      	lsls	r2, r3, #26
 800de52:	f140 8099 	bpl.w	800df88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800de56:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800de58:	482e      	ldr	r0, [pc, #184]	; (800df14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800de5a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800de5e:	bf18      	it	ne
 800de60:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800de64:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800de68:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800de6c:	bf14      	ite	ne
 800de6e:	2301      	movne	r3, #1
 800de70:	2300      	moveq	r3, #0
 800de72:	4287      	cmp	r7, r0
 800de74:	bf0c      	ite	eq
 800de76:	2300      	moveq	r3, #0
 800de78:	f003 0301 	andne.w	r3, r3, #1
 800de7c:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800de80:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800de84:	4287      	cmp	r7, r0
 800de86:	bf0c      	ite	eq
 800de88:	2300      	moveq	r3, #0
 800de8a:	f003 0301 	andne.w	r3, r3, #1
 800de8e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800de92:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800de96:	4281      	cmp	r1, r0
 800de98:	bf0c      	ite	eq
 800de9a:	2300      	moveq	r3, #0
 800de9c:	f003 0301 	andne.w	r3, r3, #1
 800dea0:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800dea4:	4287      	cmp	r7, r0
 800dea6:	bf0c      	ite	eq
 800dea8:	2300      	moveq	r3, #0
 800deaa:	f003 0301 	andne.w	r3, r3, #1
 800deae:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800deb2:	4281      	cmp	r1, r0
 800deb4:	bf0c      	ite	eq
 800deb6:	2300      	moveq	r3, #0
 800deb8:	f003 0301 	andne.w	r3, r3, #1
 800debc:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800dec0:	4281      	cmp	r1, r0
 800dec2:	bf0c      	ite	eq
 800dec4:	2300      	moveq	r3, #0
 800dec6:	f003 0301 	andne.w	r3, r3, #1
 800deca:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800dece:	4281      	cmp	r1, r0
 800ded0:	bf0c      	ite	eq
 800ded2:	2300      	moveq	r3, #0
 800ded4:	f003 0301 	andne.w	r3, r3, #1
 800ded8:	b12b      	cbz	r3, 800dee6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800deda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800dede:	4b0e      	ldr	r3, [pc, #56]	; (800df18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800dee0:	429a      	cmp	r2, r3
 800dee2:	f040 8438 	bne.w	800e756 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800dee6:	4b0a      	ldr	r3, [pc, #40]	; (800df10 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800dee8:	4f0c      	ldr	r7, [pc, #48]	; (800df1c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800deea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800deec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800def0:	641a      	str	r2, [r3, #64]	; 0x40
 800def2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800def4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800def8:	9301      	str	r3, [sp, #4]
 800defa:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df02:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df04:	f7fa f940 	bl	8008188 <HAL_GetTick>
 800df08:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df0a:	e010      	b.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800df0c:	1dfffff9 	.word	0x1dfffff9
 800df10:	40023800 	.word	0x40023800
 800df14:	00020300 	.word	0x00020300
 800df18:	001c0300 	.word	0x001c0300
 800df1c:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df20:	f7fa f932 	bl	8008188 <HAL_GetTick>
 800df24:	eba0 0008 	sub.w	r0, r0, r8
 800df28:	2864      	cmp	r0, #100	; 0x64
 800df2a:	f200 8286 	bhi.w	800e43a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	05db      	lsls	r3, r3, #23
 800df32:	d5f5      	bpl.n	800df20 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800df34:	4fb0      	ldr	r7, [pc, #704]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800df36:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800df38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800df3a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800df3e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800df42:	d011      	beq.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800df44:	4291      	cmp	r1, r2
 800df46:	d00f      	beq.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df48:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800df4a:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800df50:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800df54:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800df56:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800df58:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800df5c:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800df5e:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800df60:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800df62:	07d0      	lsls	r0, r2, #31
 800df64:	f100 836c 	bmi.w	800e640 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800df68:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800df6c:	f000 82c9 	beq.w	800e502 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800df70:	49a1      	ldr	r1, [pc, #644]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800df72:	688a      	ldr	r2, [r1, #8]
 800df74:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800df78:	608a      	str	r2, [r1, #8]
 800df7a:	4a9f      	ldr	r2, [pc, #636]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800df7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df80:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800df82:	430b      	orrs	r3, r1
 800df84:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	06da      	lsls	r2, r3, #27
 800df8a:	d510      	bpl.n	800dfae <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800df8c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800df8e:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800df92:	f040 82db 	bne.w	800e54c <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800df96:	4a98      	ldr	r2, [pc, #608]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800df98:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800df9c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800dfa0:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800dfa4:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800dfa8:	4339      	orrs	r1, r7
 800dfaa:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dfae:	045f      	lsls	r7, r3, #17
 800dfb0:	d50f      	bpl.n	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dfb2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800dfb4:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800dfb8:	d003      	beq.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800dfba:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800dfbe:	f040 8299 	bne.w	800e4f4 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfc2:	488d      	ldr	r0, [pc, #564]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dfc4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dfc8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dfd2:	0418      	lsls	r0, r3, #16
 800dfd4:	d50f      	bpl.n	800dff6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800dfd6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800dfd8:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800dfdc:	d003      	beq.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800dfde:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800dfe2:	f040 826a 	bne.w	800e4ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dfe6:	4884      	ldr	r0, [pc, #528]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dfe8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dfec:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800dff0:	430a      	orrs	r2, r1
 800dff2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dff6:	03d9      	lsls	r1, r3, #15
 800dff8:	d50f      	bpl.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800dffa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800dffc:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800e000:	d003      	beq.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e002:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800e006:	f040 8260 	bne.w	800e4ca <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e00a:	487b      	ldr	r0, [pc, #492]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e00c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e010:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800e014:	430a      	orrs	r2, r1
 800e016:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e01a:	039a      	lsls	r2, r3, #14
 800e01c:	d50f      	bpl.n	800e03e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800e01e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800e020:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800e024:	d003      	beq.n	800e02e <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800e026:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800e02a:	f040 825b 	bne.w	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e02e:	4872      	ldr	r0, [pc, #456]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e030:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e034:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800e038:	430a      	orrs	r2, r1
 800e03a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e03e:	065f      	lsls	r7, r3, #25
 800e040:	d50b      	bpl.n	800e05a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e042:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e044:	2903      	cmp	r1, #3
 800e046:	f200 82b3 	bhi.w	800e5b0 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e04a:	486b      	ldr	r0, [pc, #428]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e04c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e050:	f022 0203 	bic.w	r2, r2, #3
 800e054:	430a      	orrs	r2, r1
 800e056:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e05a:	0618      	lsls	r0, r3, #24
 800e05c:	d50c      	bpl.n	800e078 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e05e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e060:	f031 020c 	bics.w	r2, r1, #12
 800e064:	f040 82b4 	bne.w	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e068:	4863      	ldr	r0, [pc, #396]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e06a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e06e:	f022 020c 	bic.w	r2, r2, #12
 800e072:	430a      	orrs	r2, r1
 800e074:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e078:	05d9      	lsls	r1, r3, #23
 800e07a:	d50c      	bpl.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e07c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e07e:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800e082:	f040 82ad 	bne.w	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e086:	485c      	ldr	r0, [pc, #368]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e088:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e08c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800e090:	430a      	orrs	r2, r1
 800e092:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e096:	059a      	lsls	r2, r3, #22
 800e098:	d50c      	bpl.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e09a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800e09c:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800e0a0:	f040 82a6 	bne.w	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e0a4:	4854      	ldr	r0, [pc, #336]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0a6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e0b4:	055f      	lsls	r7, r3, #21
 800e0b6:	d50c      	bpl.n	800e0d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e0b8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800e0ba:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800e0be:	f040 829f 	bne.w	800e600 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e0c2:	484d      	ldr	r0, [pc, #308]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0c8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e0cc:	430a      	orrs	r2, r1
 800e0ce:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e0d2:	0518      	lsls	r0, r3, #20
 800e0d4:	d50c      	bpl.n	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e0d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e0d8:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800e0dc:	f040 8298 	bne.w	800e610 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e0e0:	4845      	ldr	r0, [pc, #276]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e0e2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e0e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e0ea:	430a      	orrs	r2, r1
 800e0ec:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e0f0:	04d9      	lsls	r1, r3, #19
 800e0f2:	d50c      	bpl.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e0f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e0f6:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800e0fa:	f040 8291 	bne.w	800e620 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e0fe:	483e      	ldr	r0, [pc, #248]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e100:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e104:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800e108:	430a      	orrs	r2, r1
 800e10a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e10e:	049a      	lsls	r2, r3, #18
 800e110:	d50c      	bpl.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e112:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800e114:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800e118:	f040 828a 	bne.w	800e630 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e11c:	4836      	ldr	r0, [pc, #216]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e11e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e122:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e126:	430a      	orrs	r2, r1
 800e128:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e12c:	025f      	lsls	r7, r3, #9
 800e12e:	d50c      	bpl.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e130:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e132:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800e136:	f040 8222 	bne.w	800e57e <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e13a:	482f      	ldr	r0, [pc, #188]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e13c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e140:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800e144:	430a      	orrs	r2, r1
 800e146:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e14a:	0298      	lsls	r0, r3, #10
 800e14c:	d510      	bpl.n	800e170 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e14e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800e150:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800e154:	f040 821b 	bne.w	800e58e <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e158:	4827      	ldr	r0, [pc, #156]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800e15a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e15e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800e162:	bf08      	it	eq
 800e164:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e166:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800e16a:	430a      	orrs	r2, r1
 800e16c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800e170:	f013 0f08 	tst.w	r3, #8
 800e174:	bf18      	it	ne
 800e176:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e178:	0359      	lsls	r1, r3, #13
 800e17a:	d50c      	bpl.n	800e196 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e17c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800e17e:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800e182:	f040 821d 	bne.w	800e5c0 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e186:	481c      	ldr	r0, [pc, #112]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e188:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e18c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e190:	430a      	orrs	r2, r1
 800e192:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e196:	021a      	lsls	r2, r3, #8
 800e198:	d50d      	bpl.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e19a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800e19e:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800e1a2:	f040 81fc 	bne.w	800e59e <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e1a6:	4814      	ldr	r0, [pc, #80]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1a8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e1ac:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e1b0:	430a      	orrs	r2, r1
 800e1b2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e1b6:	015f      	lsls	r7, r3, #5
 800e1b8:	d50d      	bpl.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e1ba:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800e1be:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800e1c2:	f040 81ca 	bne.w	800e55a <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e1c6:	480c      	ldr	r0, [pc, #48]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1c8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e1cc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e1d0:	430a      	orrs	r2, r1
 800e1d2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e1d6:	0118      	lsls	r0, r3, #4
 800e1d8:	d510      	bpl.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e1da:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800e1de:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800e1e2:	f040 81c3 	bne.w	800e56c <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e1e6:	4804      	ldr	r0, [pc, #16]	; (800e1f8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800e1e8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800e1ec:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800e1f0:	430a      	orrs	r2, r1
 800e1f2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800e1f6:	e001      	b.n	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800e1f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e1fc:	00d9      	lsls	r1, r3, #3
 800e1fe:	d50d      	bpl.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e200:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e204:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800e208:	f040 8198 	bne.w	800e53c <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e20c:	49b3      	ldr	r1, [pc, #716]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e20e:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800e212:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e216:	4313      	orrs	r3, r2
 800e218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800e21c:	2e01      	cmp	r6, #1
 800e21e:	d003      	beq.n	800e228 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800e220:	6823      	ldr	r3, [r4, #0]
 800e222:	019a      	lsls	r2, r3, #6
 800e224:	f140 8083 	bpl.w	800e32e <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e228:	4eac      	ldr	r6, [pc, #688]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e22a:	6833      	ldr	r3, [r6, #0]
 800e22c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e230:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e232:	f7f9 ffa9 	bl	8008188 <HAL_GetTick>
 800e236:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e238:	e005      	b.n	800e246 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e23a:	f7f9 ffa5 	bl	8008188 <HAL_GetTick>
 800e23e:	1bc0      	subs	r0, r0, r7
 800e240:	2864      	cmp	r0, #100	; 0x64
 800e242:	f200 80fa 	bhi.w	800e43a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e246:	6833      	ldr	r3, [r6, #0]
 800e248:	011b      	lsls	r3, r3, #4
 800e24a:	d4f6      	bmi.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e24c:	6863      	ldr	r3, [r4, #4]
 800e24e:	3b32      	subs	r3, #50	; 0x32
 800e250:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e254:	f200 816c 	bhi.w	800e530 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e258:	6823      	ldr	r3, [r4, #0]
 800e25a:	07df      	lsls	r7, r3, #31
 800e25c:	d517      	bpl.n	800e28e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800e25e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e260:	b9aa      	cbnz	r2, 800e28e <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e262:	68a7      	ldr	r7, [r4, #8]
 800e264:	1eba      	subs	r2, r7, #2
 800e266:	2a05      	cmp	r2, #5
 800e268:	f200 820c 	bhi.w	800e684 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e26c:	499b      	ldr	r1, [pc, #620]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e26e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e270:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e274:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e278:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800e27c:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800e280:	4332      	orrs	r2, r6
 800e282:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800e286:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800e28a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e28e:	031e      	lsls	r6, r3, #12
 800e290:	f100 80e9 	bmi.w	800e466 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800e294:	02d8      	lsls	r0, r3, #11
 800e296:	d504      	bpl.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e298:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e29a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800e29e:	f000 80e7 	beq.w	800e470 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e2a2:	01d9      	lsls	r1, r3, #7
 800e2a4:	d514      	bpl.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e2a6:	6927      	ldr	r7, [r4, #16]
 800e2a8:	2f03      	cmp	r7, #3
 800e2aa:	f200 81f9 	bhi.w	800e6a0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2ae:	498b      	ldr	r1, [pc, #556]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e2b0:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e2b2:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e2b6:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e2ba:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e2be:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800e2c2:	4332      	orrs	r2, r6
 800e2c4:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800e2c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800e2cc:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e2d0:	019a      	lsls	r2, r3, #6
 800e2d2:	d51a      	bpl.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	2b03      	cmp	r3, #3
 800e2d8:	f200 81dc 	bhi.w	800e694 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e2dc:	68a3      	ldr	r3, [r4, #8]
 800e2de:	3b02      	subs	r3, #2
 800e2e0:	2b05      	cmp	r3, #5
 800e2e2:	f200 81ec 	bhi.w	800e6be <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e2e6:	68e2      	ldr	r2, [r4, #12]
 800e2e8:	1e93      	subs	r3, r2, #2
 800e2ea:	2b0d      	cmp	r3, #13
 800e2ec:	f200 81e0 	bhi.w	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	6861      	ldr	r1, [r4, #4]
 800e2f4:	041b      	lsls	r3, r3, #16
 800e2f6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800e2fa:	68a1      	ldr	r1, [r4, #8]
 800e2fc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e300:	4976      	ldr	r1, [pc, #472]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e302:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800e306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e30a:	4e74      	ldr	r6, [pc, #464]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e30c:	6833      	ldr	r3, [r6, #0]
 800e30e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e312:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e314:	f7f9 ff38 	bl	8008188 <HAL_GetTick>
 800e318:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e31a:	e005      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e31c:	f7f9 ff34 	bl	8008188 <HAL_GetTick>
 800e320:	1bc0      	subs	r0, r0, r7
 800e322:	2864      	cmp	r0, #100	; 0x64
 800e324:	f200 8089 	bhi.w	800e43a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e328:	6833      	ldr	r3, [r6, #0]
 800e32a:	011b      	lsls	r3, r3, #4
 800e32c:	d5f6      	bpl.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e32e:	2d01      	cmp	r5, #1
 800e330:	d003      	beq.n	800e33a <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800e332:	2000      	movs	r0, #0
}
 800e334:	b003      	add	sp, #12
 800e336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800e33a:	4d68      	ldr	r5, [pc, #416]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e33c:	682b      	ldr	r3, [r5, #0]
 800e33e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e342:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800e344:	f7f9 ff20 	bl	8008188 <HAL_GetTick>
 800e348:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e34a:	e004      	b.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e34c:	f7f9 ff1c 	bl	8008188 <HAL_GetTick>
 800e350:	1b80      	subs	r0, r0, r6
 800e352:	2864      	cmp	r0, #100	; 0x64
 800e354:	d871      	bhi.n	800e43a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	009f      	lsls	r7, r3, #2
 800e35a:	d4f7      	bmi.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e35c:	6963      	ldr	r3, [r4, #20]
 800e35e:	3b32      	subs	r3, #50	; 0x32
 800e360:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800e364:	f200 81b9 	bhi.w	800e6da <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e368:	6823      	ldr	r3, [r4, #0]
 800e36a:	031d      	lsls	r5, r3, #12
 800e36c:	f140 81ad 	bpl.w	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800e370:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e372:	2a00      	cmp	r2, #0
 800e374:	f040 81a9 	bne.w	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e378:	69a3      	ldr	r3, [r4, #24]
 800e37a:	3b02      	subs	r3, #2
 800e37c:	2b0d      	cmp	r3, #13
 800e37e:	f200 81d5 	bhi.w	800e72c <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e382:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e384:	1e59      	subs	r1, r3, #1
 800e386:	291f      	cmp	r1, #31
 800e388:	f200 81c8 	bhi.w	800e71c <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e38c:	4a53      	ldr	r2, [pc, #332]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e38e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e392:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e39a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e39e:	4303      	orrs	r3, r0
 800e3a0:	6960      	ldr	r0, [r4, #20]
 800e3a2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e3a6:	69a0      	ldr	r0, [r4, #24]
 800e3a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e3ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e3b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e3b4:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800e3b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e3bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e3c0:	6823      	ldr	r3, [r4, #0]
 800e3c2:	0299      	lsls	r1, r3, #10
 800e3c4:	d504      	bpl.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800e3c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e3c8:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800e3cc:	f000 818b 	beq.w	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e3d0:	071a      	lsls	r2, r3, #28
 800e3d2:	d522      	bpl.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e3d4:	69e3      	ldr	r3, [r4, #28]
 800e3d6:	3b02      	subs	r3, #2
 800e3d8:	2b05      	cmp	r3, #5
 800e3da:	f200 8199 	bhi.w	800e710 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e3de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e3e0:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800e3e4:	f040 81a8 	bne.w	800e738 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e3e8:	4a3c      	ldr	r2, [pc, #240]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e3ea:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e3ec:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e3f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e3f4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800e3f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e3fc:	430b      	orrs	r3, r1
 800e3fe:	69e1      	ldr	r1, [r4, #28]
 800e400:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800e404:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800e408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e40c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e410:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800e414:	4303      	orrs	r3, r0
 800e416:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800e41a:	4c30      	ldr	r4, [pc, #192]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e41c:	6823      	ldr	r3, [r4, #0]
 800e41e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e422:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800e424:	f7f9 feb0 	bl	8008188 <HAL_GetTick>
 800e428:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e42a:	6823      	ldr	r3, [r4, #0]
 800e42c:	009b      	lsls	r3, r3, #2
 800e42e:	d480      	bmi.n	800e332 <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e430:	f7f9 feaa 	bl	8008188 <HAL_GetTick>
 800e434:	1b40      	subs	r0, r0, r5
 800e436:	2864      	cmp	r0, #100	; 0x64
 800e438:	d9f7      	bls.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800e43a:	2003      	movs	r0, #3
}
 800e43c:	b003      	add	sp, #12
 800e43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800e442:	2172      	movs	r1, #114	; 0x72
 800e444:	4826      	ldr	r0, [pc, #152]	; (800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e446:	f7f6 fdb5 	bl	8004fb4 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e44a:	6823      	ldr	r3, [r4, #0]
 800e44c:	e4ba      	b.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800e44e:	2601      	movs	r6, #1
 800e450:	e4fa      	b.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800e452:	2500      	movs	r5, #0
      plli2sused = 1;
 800e454:	2601      	movs	r6, #1
 800e456:	e4e0      	b.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800e458:	2178      	movs	r1, #120	; 0x78
 800e45a:	4821      	ldr	r0, [pc, #132]	; (800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e45c:	f7f6 fdaa 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e460:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	e4b6      	b.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e466:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e468:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800e46c:	f47f af12 	bne.w	800e294 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e470:	68e3      	ldr	r3, [r4, #12]
 800e472:	3b02      	subs	r3, #2
 800e474:	2b0d      	cmp	r3, #13
 800e476:	f200 80f7 	bhi.w	800e668 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e47c:	1e59      	subs	r1, r3, #1
 800e47e:	291f      	cmp	r1, #31
 800e480:	f200 80f8 	bhi.w	800e674 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e484:	4a15      	ldr	r2, [pc, #84]	; (800e4dc <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800e486:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e48a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e48e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e492:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800e496:	4303      	orrs	r3, r0
 800e498:	6860      	ldr	r0, [r4, #4]
 800e49a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800e49e:	68e0      	ldr	r0, [r4, #12]
 800e4a0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e4a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e4a8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800e4ac:	f023 031f 	bic.w	r3, r3, #31
 800e4b0:	430b      	orrs	r3, r1
 800e4b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e4b6:	6823      	ldr	r3, [r4, #0]
 800e4b8:	e6f3      	b.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800e4ba:	f240 1105 	movw	r1, #261	; 0x105
 800e4be:	4808      	ldr	r0, [pc, #32]	; (800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e4c0:	f7f6 fd78 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e4c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e4c6:	6823      	ldr	r3, [r4, #0]
 800e4c8:	e58d      	b.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800e4ca:	f240 110f 	movw	r1, #271	; 0x10f
 800e4ce:	4804      	ldr	r0, [pc, #16]	; (800e4e0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800e4d0:	f7f6 fd70 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e4d4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	e597      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e4da:	bf00      	nop
 800e4dc:	40023800 	.word	0x40023800
 800e4e0:	0802cb58 	.word	0x0802cb58
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800e4e4:	f240 1119 	movw	r1, #281	; 0x119
 800e4e8:	489e      	ldr	r0, [pc, #632]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e4ea:	f7f6 fd63 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e4ee:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	e59c      	b.n	800e02e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800e4f4:	21fb      	movs	r1, #251	; 0xfb
 800e4f6:	489b      	ldr	r0, [pc, #620]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e4f8:	f7f6 fd5c 	bl	8004fb4 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e4fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	e55f      	b.n	800dfc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e502:	4899      	ldr	r0, [pc, #612]	; (800e768 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e504:	4999      	ldr	r1, [pc, #612]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800e506:	6882      	ldr	r2, [r0, #8]
 800e508:	4019      	ands	r1, r3
 800e50a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800e50e:	430a      	orrs	r2, r1
 800e510:	6082      	str	r2, [r0, #8]
 800e512:	e532      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800e514:	2188      	movs	r1, #136	; 0x88
 800e516:	4893      	ldr	r0, [pc, #588]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e518:	f7f6 fd4c 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e51c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e51e:	6823      	ldr	r3, [r4, #0]
 800e520:	e46b      	b.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800e522:	219c      	movs	r1, #156	; 0x9c
 800e524:	488f      	ldr	r0, [pc, #572]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e526:	f7f6 fd45 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e52a:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e52c:	6823      	ldr	r3, [r4, #0]
 800e52e:	e47b      	b.n	800de28 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e530:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800e534:	488b      	ldr	r0, [pc, #556]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e536:	f7f6 fd3d 	bl	8004fb4 <assert_failed>
 800e53a:	e68d      	b.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e53c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800e540:	4888      	ldr	r0, [pc, #544]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e542:	f7f6 fd37 	bl	8004fb4 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e546:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e54a:	e65f      	b.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800e54c:	21f1      	movs	r1, #241	; 0xf1
 800e54e:	4885      	ldr	r0, [pc, #532]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e550:	f7f6 fd30 	bl	8004fb4 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e554:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	e51d      	b.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e55a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e55e:	4881      	ldr	r0, [pc, #516]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e560:	f7f6 fd28 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e564:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e568:	6823      	ldr	r3, [r4, #0]
 800e56a:	e62c      	b.n	800e1c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e56c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e570:	487c      	ldr	r0, [pc, #496]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e572:	f7f6 fd1f 	bl	8004fb4 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e576:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	e633      	b.n	800e1e6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e57e:	f240 1173 	movw	r1, #371	; 0x173
 800e582:	4878      	ldr	r0, [pc, #480]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e584:	f7f6 fd16 	bl	8004fb4 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e588:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e58a:	6823      	ldr	r3, [r4, #0]
 800e58c:	e5d5      	b.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e58e:	f240 117d 	movw	r1, #381	; 0x17d
 800e592:	4874      	ldr	r0, [pc, #464]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e594:	f7f6 fd0e 	bl	8004fb4 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e598:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e59a:	6823      	ldr	r3, [r4, #0]
 800e59c:	e5dc      	b.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e59e:	f240 119f 	movw	r1, #415	; 0x19f
 800e5a2:	4870      	ldr	r0, [pc, #448]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5a4:	f7f6 fd06 	bl	8004fb4 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e5a8:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e5ac:	6823      	ldr	r3, [r4, #0]
 800e5ae:	e5fa      	b.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e5b0:	f240 1123 	movw	r1, #291	; 0x123
 800e5b4:	486b      	ldr	r0, [pc, #428]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5b6:	f7f6 fcfd 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e5ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e5bc:	6823      	ldr	r3, [r4, #0]
 800e5be:	e544      	b.n	800e04a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e5c0:	f240 1195 	movw	r1, #405	; 0x195
 800e5c4:	4867      	ldr	r0, [pc, #412]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5c6:	f7f6 fcf5 	bl	8004fb4 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	e5da      	b.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e5d0:	f240 112d 	movw	r1, #301	; 0x12d
 800e5d4:	4863      	ldr	r0, [pc, #396]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5d6:	f7f6 fced 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e5da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e5dc:	6823      	ldr	r3, [r4, #0]
 800e5de:	e543      	b.n	800e068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e5e0:	f240 1137 	movw	r1, #311	; 0x137
 800e5e4:	485f      	ldr	r0, [pc, #380]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5e6:	f7f6 fce5 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e5ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e5ec:	6823      	ldr	r3, [r4, #0]
 800e5ee:	e54a      	b.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e5f0:	f240 1141 	movw	r1, #321	; 0x141
 800e5f4:	485b      	ldr	r0, [pc, #364]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e5f6:	f7f6 fcdd 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e5fa:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	e551      	b.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e600:	f240 114b 	movw	r1, #331	; 0x14b
 800e604:	4857      	ldr	r0, [pc, #348]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e606:	f7f6 fcd5 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e60a:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e60c:	6823      	ldr	r3, [r4, #0]
 800e60e:	e558      	b.n	800e0c2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e610:	f240 1155 	movw	r1, #341	; 0x155
 800e614:	4853      	ldr	r0, [pc, #332]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e616:	f7f6 fccd 	bl	8004fb4 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e61a:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e61c:	6823      	ldr	r3, [r4, #0]
 800e61e:	e55f      	b.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e620:	f240 115f 	movw	r1, #351	; 0x15f
 800e624:	484f      	ldr	r0, [pc, #316]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e626:	f7f6 fcc5 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e62a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	e566      	b.n	800e0fe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e630:	f240 1169 	movw	r1, #361	; 0x169
 800e634:	484b      	ldr	r0, [pc, #300]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e636:	f7f6 fcbd 	bl	8004fb4 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e63a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	e56d      	b.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800e640:	f7f9 fda2 	bl	8008188 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e644:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e648:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e64a:	e006      	b.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e64c:	f7f9 fd9c 	bl	8008188 <HAL_GetTick>
 800e650:	eba0 0008 	sub.w	r0, r0, r8
 800e654:	4548      	cmp	r0, r9
 800e656:	f63f aef0 	bhi.w	800e43a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e65a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e65c:	0799      	lsls	r1, r3, #30
 800e65e:	d5f5      	bpl.n	800e64c <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e660:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e662:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800e666:	e47f      	b.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e668:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800e66c:	483d      	ldr	r0, [pc, #244]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e66e:	f7f6 fca1 	bl	8004fb4 <assert_failed>
 800e672:	e702      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e674:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800e678:	483a      	ldr	r0, [pc, #232]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e67a:	f7f6 fc9b 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e680:	1e59      	subs	r1, r3, #1
 800e682:	e6ff      	b.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e684:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e688:	4836      	ldr	r0, [pc, #216]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e68a:	f7f6 fc93 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e68e:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	e5eb      	b.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e694:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e698:	4832      	ldr	r0, [pc, #200]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e69a:	f7f6 fc8b 	bl	8004fb4 <assert_failed>
 800e69e:	e61d      	b.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e6a0:	f240 2105 	movw	r1, #517	; 0x205
 800e6a4:	482f      	ldr	r0, [pc, #188]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6a6:	f7f6 fc85 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e6aa:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e6ac:	6823      	ldr	r3, [r4, #0]
 800e6ae:	e5fe      	b.n	800e2ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e6b0:	f240 2116 	movw	r1, #534	; 0x216
 800e6b4:	482b      	ldr	r0, [pc, #172]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6b6:	f7f6 fc7d 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e6ba:	68e2      	ldr	r2, [r4, #12]
 800e6bc:	e618      	b.n	800e2f0 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e6be:	f240 2115 	movw	r1, #533	; 0x215
 800e6c2:	4828      	ldr	r0, [pc, #160]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6c4:	f7f6 fc76 	bl	8004fb4 <assert_failed>
 800e6c8:	e60d      	b.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e6ca:	02d8      	lsls	r0, r3, #11
 800e6cc:	f57f ae79 	bpl.w	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e6d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e6d2:	2a00      	cmp	r2, #0
 800e6d4:	f47f ae75 	bne.w	800e3c2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e6d8:	e64e      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e6da:	f44f 7111 	mov.w	r1, #580	; 0x244
 800e6de:	4821      	ldr	r0, [pc, #132]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e6e0:	f7f6 fc68 	bl	8004fb4 <assert_failed>
 800e6e4:	e640      	b.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e6e6:	6a20      	ldr	r0, [r4, #32]
 800e6e8:	2803      	cmp	r0, #3
 800e6ea:	d82c      	bhi.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e6ec:	491e      	ldr	r1, [pc, #120]	; (800e768 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e6ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e6f2:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e6f6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e6fa:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800e6fe:	432a      	orrs	r2, r5
 800e700:	6965      	ldr	r5, [r4, #20]
 800e702:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800e706:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e70a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800e70e:	e65f      	b.n	800e3d0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e710:	f240 216f 	movw	r1, #623	; 0x26f
 800e714:	4813      	ldr	r0, [pc, #76]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e716:	f7f6 fc4d 	bl	8004fb4 <assert_failed>
 800e71a:	e660      	b.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e71c:	f240 214d 	movw	r1, #589	; 0x24d
 800e720:	4810      	ldr	r0, [pc, #64]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e722:	f7f6 fc47 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e726:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e728:	1e59      	subs	r1, r3, #1
 800e72a:	e62f      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e72c:	f240 214b 	movw	r1, #587	; 0x24b
 800e730:	480c      	ldr	r0, [pc, #48]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e732:	f7f6 fc3f 	bl	8004fb4 <assert_failed>
 800e736:	e624      	b.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e738:	480a      	ldr	r0, [pc, #40]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e73a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800e73e:	f7f6 fc39 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e742:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e744:	e650      	b.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e746:	4807      	ldr	r0, [pc, #28]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e748:	f44f 7118 	mov.w	r1, #608	; 0x260
 800e74c:	f7f6 fc32 	bl	8004fb4 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e750:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e752:	6823      	ldr	r3, [r4, #0]
 800e754:	e7ca      	b.n	800e6ec <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e756:	21b7      	movs	r1, #183	; 0xb7
 800e758:	4802      	ldr	r0, [pc, #8]	; (800e764 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e75a:	f7f6 fc2b 	bl	8004fb4 <assert_failed>
 800e75e:	f7ff bbc2 	b.w	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e762:	bf00      	nop
 800e764:	0802cb58 	.word	0x0802cb58
 800e768:	40023800 	.word	0x40023800
 800e76c:	0ffffcff 	.word	0x0ffffcff

0800e770 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e770:	b308      	cbz	r0, 800e7b6 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e772:	4b12      	ldr	r3, [pc, #72]	; (800e7bc <HAL_RNG_Init+0x4c>)
 800e774:	6802      	ldr	r2, [r0, #0]
 800e776:	429a      	cmp	r2, r3
{
 800e778:	b510      	push	{r4, lr}
 800e77a:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e77c:	d003      	beq.n	800e786 <HAL_RNG_Init+0x16>
 800e77e:	21a3      	movs	r1, #163	; 0xa3
 800e780:	480f      	ldr	r0, [pc, #60]	; (800e7c0 <HAL_RNG_Init+0x50>)
 800e782:	f7f6 fc17 	bl	8004fb4 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e786:	7963      	ldrb	r3, [r4, #5]
 800e788:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e78c:	b173      	cbz	r3, 800e7ac <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e78e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800e790:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e792:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800e794:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800e798:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800e79a:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800e79c:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800e79e:	f043 0304 	orr.w	r3, r3, #4
 800e7a2:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800e7a4:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e7a8:	60a2      	str	r2, [r4, #8]
}
 800e7aa:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800e7ac:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800e7ae:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800e7b0:	f7f7 ff5a 	bl	8006668 <HAL_RNG_MspInit>
 800e7b4:	e7eb      	b.n	800e78e <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800e7b6:	2001      	movs	r0, #1
}
 800e7b8:	4770      	bx	lr
 800e7ba:	bf00      	nop
 800e7bc:	50060800 	.word	0x50060800
 800e7c0:	0802cb94 	.word	0x0802cb94

0800e7c4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800e7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7c6:	460c      	mov	r4, r1
 800e7c8:	4615      	mov	r5, r2
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7ce:	4425      	add	r5, r4
 800e7d0:	f7f9 fcda 	bl	8008188 <HAL_GetTick>
 800e7d4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800e7d6:	f7f9 fcd7 	bl	8008188 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e7da:	4b25      	ldr	r3, [pc, #148]	; (800e870 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800e7dc:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800e7e4:	fb05 f303 	mul.w	r3, r5, r3
 800e7e8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7ea:	6832      	ldr	r2, [r6, #0]
 800e7ec:	e001      	b.n	800e7f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7ee:	1c63      	adds	r3, r4, #1
 800e7f0:	d106      	bne.n	800e800 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7f2:	6893      	ldr	r3, [r2, #8]
 800e7f4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e7f8:	d1f9      	bne.n	800e7ee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800e7fa:	4618      	mov	r0, r3
}
 800e7fc:	b003      	add	sp, #12
 800e7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e800:	f7f9 fcc2 	bl	8008188 <HAL_GetTick>
 800e804:	1bc0      	subs	r0, r0, r7
 800e806:	42a8      	cmp	r0, r5
 800e808:	d208      	bcs.n	800e81c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800e80a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800e80c:	2b00      	cmp	r3, #0
      count--;
 800e80e:	9b01      	ldr	r3, [sp, #4]
 800e810:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e814:	bf08      	it	eq
 800e816:	2500      	moveq	r5, #0
      count--;
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	e7e6      	b.n	800e7ea <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e81c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e820:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e822:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e826:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e82a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e82c:	d014      	beq.n	800e858 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e82e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e830:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e834:	d007      	beq.n	800e846 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800e836:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e838:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e83a:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e83c:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e840:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e844:	e7da      	b.n	800e7fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800e846:	681a      	ldr	r2, [r3, #0]
 800e848:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e854:	601a      	str	r2, [r3, #0]
 800e856:	e7ee      	b.n	800e836 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e858:	68b2      	ldr	r2, [r6, #8]
 800e85a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e85e:	d002      	beq.n	800e866 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800e860:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e864:	d1e3      	bne.n	800e82e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800e866:	681a      	ldr	r2, [r3, #0]
 800e868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e86c:	601a      	str	r2, [r3, #0]
 800e86e:	e7de      	b.n	800e82e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800e870:	20000284 	.word	0x20000284

0800e874 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e878:	4615      	mov	r5, r2
 800e87a:	4698      	mov	r8, r3
 800e87c:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e87e:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e880:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e882:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800e884:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e888:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e88a:	f7f9 fc7d 	bl	8008188 <HAL_GetTick>
 800e88e:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800e892:	f7f9 fc79 	bl	8008188 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e896:	4b2e      	ldr	r3, [pc, #184]	; (800e950 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e898:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800e89c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e89e:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800e8a0:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e8a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e8a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e8aa:	0d1b      	lsrs	r3, r3, #20
 800e8ac:	fb07 f303 	mul.w	r3, r7, r3
 800e8b0:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e8b2:	e00b      	b.n	800e8cc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e8b4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800e8b8:	d106      	bne.n	800e8c8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e8ba:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e8c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e8c8:	1c6b      	adds	r3, r5, #1
 800e8ca:	d106      	bne.n	800e8da <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800e8cc:	6893      	ldr	r3, [r2, #8]
 800e8ce:	4023      	ands	r3, r4
 800e8d0:	d1f0      	bne.n	800e8b4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800e8d2:	4618      	mov	r0, r3
}
 800e8d4:	b003      	add	sp, #12
 800e8d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e8da:	f7f9 fc55 	bl	8008188 <HAL_GetTick>
 800e8de:	eba0 0008 	sub.w	r0, r0, r8
 800e8e2:	42b8      	cmp	r0, r7
 800e8e4:	d209      	bcs.n	800e8fa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800e8e6:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e8e8:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800e8ea:	2b00      	cmp	r3, #0
      count--;
 800e8ec:	9b01      	ldr	r3, [sp, #4]
 800e8ee:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e8f2:	bf08      	it	eq
 800e8f4:	2700      	moveq	r7, #0
      count--;
 800e8f6:	9301      	str	r3, [sp, #4]
 800e8f8:	e7e8      	b.n	800e8cc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8fa:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8fe:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e900:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e904:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e908:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e90a:	d014      	beq.n	800e936 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e90c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e90e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e912:	d007      	beq.n	800e924 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800e914:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e916:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e918:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e91a:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e91e:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e922:	e7d7      	b.n	800e8d4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800e924:	681a      	ldr	r2, [r3, #0]
 800e926:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e92a:	601a      	str	r2, [r3, #0]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	e7ee      	b.n	800e914 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e936:	68b2      	ldr	r2, [r6, #8]
 800e938:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e93c:	d002      	beq.n	800e944 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800e93e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e942:	d1e3      	bne.n	800e90c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e94a:	601a      	str	r2, [r3, #0]
 800e94c:	e7de      	b.n	800e90c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800e94e:	bf00      	nop
 800e950:	20000284 	.word	0x20000284

0800e954 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e954:	b570      	push	{r4, r5, r6, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	4613      	mov	r3, r2
 800e95a:	460e      	mov	r6, r1
 800e95c:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e95e:	9201      	str	r2, [sp, #4]
 800e960:	460a      	mov	r2, r1
 800e962:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e966:	f7ff ff85 	bl	800e874 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e96a:	9b01      	ldr	r3, [sp, #4]
 800e96c:	bb58      	cbnz	r0, 800e9c6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e96e:	4919      	ldr	r1, [pc, #100]	; (800e9d4 <SPI_EndRxTxTransaction+0x80>)
 800e970:	4a19      	ldr	r2, [pc, #100]	; (800e9d8 <SPI_EndRxTxTransaction+0x84>)
 800e972:	6808      	ldr	r0, [r1, #0]
 800e974:	fba2 2000 	umull	r2, r0, r2, r0
 800e978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e97c:	0d40      	lsrs	r0, r0, #21
 800e97e:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e982:	686a      	ldr	r2, [r5, #4]
 800e984:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e988:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e98a:	d107      	bne.n	800e99c <SPI_EndRxTxTransaction+0x48>
 800e98c:	e012      	b.n	800e9b4 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800e98e:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e990:	682a      	ldr	r2, [r5, #0]
      count--;
 800e992:	3c01      	subs	r4, #1
 800e994:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e996:	6894      	ldr	r4, [r2, #8]
 800e998:	0622      	lsls	r2, r4, #24
 800e99a:	d502      	bpl.n	800e9a2 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800e99c:	9c03      	ldr	r4, [sp, #12]
 800e99e:	2c00      	cmp	r4, #0
 800e9a0:	d1f5      	bne.n	800e98e <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e9a2:	4632      	mov	r2, r6
 800e9a4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e9a8:	4628      	mov	r0, r5
 800e9aa:	f7ff ff63 	bl	800e874 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e9ae:	b950      	cbnz	r0, 800e9c6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800e9b0:	b004      	add	sp, #16
 800e9b2:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4631      	mov	r1, r6
 800e9b8:	4628      	mov	r0, r5
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	f7ff ff02 	bl	800e7c4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800e9c0:	9b01      	ldr	r3, [sp, #4]
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	d0ed      	beq.n	800e9a2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9c6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800e9c8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9ca:	f043 0320 	orr.w	r3, r3, #32
 800e9ce:	662b      	str	r3, [r5, #96]	; 0x60
}
 800e9d0:	b004      	add	sp, #16
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	20000284 	.word	0x20000284
 800e9d8:	165e9f81 	.word	0x165e9f81

0800e9dc <HAL_SPI_Init>:
  if (hspi == NULL)
 800e9dc:	2800      	cmp	r0, #0
 800e9de:	f000 8128 	beq.w	800ec32 <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e9e2:	6802      	ldr	r2, [r0, #0]
 800e9e4:	4ba7      	ldr	r3, [pc, #668]	; (800ec84 <HAL_SPI_Init+0x2a8>)
 800e9e6:	49a8      	ldr	r1, [pc, #672]	; (800ec88 <HAL_SPI_Init+0x2ac>)
{
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e9ec:	48a7      	ldr	r0, [pc, #668]	; (800ec8c <HAL_SPI_Init+0x2b0>)
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	bf18      	it	ne
 800e9f2:	4282      	cmpne	r2, r0
 800e9f4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800e9f8:	bf14      	ite	ne
 800e9fa:	2301      	movne	r3, #1
 800e9fc:	2300      	moveq	r3, #0
 800e9fe:	428a      	cmp	r2, r1
 800ea00:	bf0c      	ite	eq
 800ea02:	2300      	moveq	r3, #0
 800ea04:	f003 0301 	andne.w	r3, r3, #1
 800ea08:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800ea0c:	4282      	cmp	r2, r0
 800ea0e:	bf0c      	ite	eq
 800ea10:	2300      	moveq	r3, #0
 800ea12:	f003 0301 	andne.w	r3, r3, #1
 800ea16:	428a      	cmp	r2, r1
 800ea18:	bf0c      	ite	eq
 800ea1a:	2300      	moveq	r3, #0
 800ea1c:	f003 0301 	andne.w	r3, r3, #1
 800ea20:	b11b      	cbz	r3, 800ea2a <HAL_SPI_Init+0x4e>
 800ea22:	4b9b      	ldr	r3, [pc, #620]	; (800ec90 <HAL_SPI_Init+0x2b4>)
 800ea24:	429a      	cmp	r2, r3
 800ea26:	f040 80fe 	bne.w	800ec26 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	b11b      	cbz	r3, 800ea36 <HAL_SPI_Init+0x5a>
 800ea2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea32:	f040 80cd 	bne.w	800ebd0 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ea36:	68a3      	ldr	r3, [r4, #8]
 800ea38:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800ea3c:	d003      	beq.n	800ea46 <HAL_SPI_Init+0x6a>
 800ea3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea42:	f040 80db 	bne.w	800ebfc <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800ea46:	68e2      	ldr	r2, [r4, #12]
 800ea48:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800ea4c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800ea50:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800ea54:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ea58:	bf18      	it	ne
 800ea5a:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800ea5e:	bf14      	ite	ne
 800ea60:	2301      	movne	r3, #1
 800ea62:	2300      	moveq	r3, #0
 800ea64:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ea68:	bf0c      	ite	eq
 800ea6a:	2300      	moveq	r3, #0
 800ea6c:	f003 0301 	andne.w	r3, r3, #1
 800ea70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ea74:	bf0c      	ite	eq
 800ea76:	2300      	moveq	r3, #0
 800ea78:	f003 0301 	andne.w	r3, r3, #1
 800ea7c:	b12b      	cbz	r3, 800ea8a <HAL_SPI_Init+0xae>
 800ea7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea82:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ea86:	f040 80f7 	bne.w	800ec78 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800ea8a:	69a3      	ldr	r3, [r4, #24]
 800ea8c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800ea90:	d003      	beq.n	800ea9a <HAL_SPI_Init+0xbe>
 800ea92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ea96:	f040 80a1 	bne.w	800ebdc <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ea9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ea9c:	f033 0308 	bics.w	r3, r3, #8
 800eaa0:	f040 80a6 	bne.w	800ebf0 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800eaa4:	69e3      	ldr	r3, [r4, #28]
 800eaa6:	f023 0318 	bic.w	r3, r3, #24
 800eaaa:	2b20      	cmp	r3, #32
 800eaac:	d002      	beq.n	800eab4 <HAL_SPI_Init+0xd8>
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	f040 80d6 	bne.w	800ec60 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800eab4:	6a23      	ldr	r3, [r4, #32]
 800eab6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800eaba:	f040 80a8 	bne.w	800ec0e <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800eabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac0:	f033 0210 	bics.w	r2, r3, #16
 800eac4:	d17b      	bne.n	800ebbe <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d16e      	bne.n	800eba8 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800eaca:	6923      	ldr	r3, [r4, #16]
 800eacc:	f033 0302 	bics.w	r3, r3, #2
 800ead0:	f040 80c0 	bne.w	800ec54 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800ead4:	6963      	ldr	r3, [r4, #20]
 800ead6:	2b01      	cmp	r3, #1
 800ead8:	d904      	bls.n	800eae4 <HAL_SPI_Init+0x108>
 800eada:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800eade:	486d      	ldr	r0, [pc, #436]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800eae0:	f7f6 fa68 	bl	8004fb4 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eae4:	6863      	ldr	r3, [r4, #4]
 800eae6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eaea:	f000 80a4 	beq.w	800ec36 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eaf2:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eaf4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eaf8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800eafa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f000 808b 	beq.w	800ec1a <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800eb04:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800eb06:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eb08:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800eb0a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800eb0e:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800eb14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800eb18:	bf8c      	ite	hi
 800eb1a:	f04f 0c00 	movhi.w	ip, #0
 800eb1e:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800eb22:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800eb24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800eb28:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800eb2c:	d16c      	bne.n	800ec08 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eb30:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800eb34:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb36:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb3a:	6923      	ldr	r3, [r4, #16]
 800eb3c:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800eb40:	68a1      	ldr	r1, [r4, #8]
 800eb42:	f003 0302 	and.w	r3, r3, #2
 800eb46:	69a6      	ldr	r6, [r4, #24]
 800eb48:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800eb4c:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb50:	431a      	orrs	r2, r3
 800eb52:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb54:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb58:	f003 0301 	and.w	r3, r3, #1
 800eb5c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb60:	f003 0310 	and.w	r3, r3, #16
 800eb64:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb66:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb68:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb6c:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800eb70:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb74:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb76:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb7a:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb7e:	430a      	orrs	r2, r1
 800eb80:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb82:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb84:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb88:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb8c:	430a      	orrs	r2, r1
 800eb8e:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb90:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800eb92:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800eb94:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800eb96:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eb98:	69eb      	ldr	r3, [r5, #28]
 800eb9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb9e:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eba0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800eba2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800eba6:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800eba8:	69e3      	ldr	r3, [r4, #28]
 800ebaa:	f023 0318 	bic.w	r3, r3, #24
 800ebae:	2b20      	cmp	r3, #32
 800ebb0:	d001      	beq.n	800ebb6 <HAL_SPI_Init+0x1da>
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d15a      	bne.n	800ec6c <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebb6:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebb8:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800ebbc:	e799      	b.n	800eaf2 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ebbe:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800ebc2:	4834      	ldr	r0, [pc, #208]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ebc4:	f7f6 f9f6 	bl	8004fb4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ebc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d1ec      	bne.n	800eba8 <HAL_SPI_Init+0x1cc>
 800ebce:	e77c      	b.n	800eaca <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ebd0:	f240 1147 	movw	r1, #327	; 0x147
 800ebd4:	482f      	ldr	r0, [pc, #188]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ebd6:	f7f6 f9ed 	bl	8004fb4 <assert_failed>
 800ebda:	e72c      	b.n	800ea36 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800ebdc:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ebe0:	482c      	ldr	r0, [pc, #176]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ebe2:	f7f6 f9e7 	bl	8004fb4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ebe6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ebe8:	f033 0308 	bics.w	r3, r3, #8
 800ebec:	f43f af5a 	beq.w	800eaa4 <HAL_SPI_Init+0xc8>
 800ebf0:	f240 114b 	movw	r1, #331	; 0x14b
 800ebf4:	4827      	ldr	r0, [pc, #156]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ebf6:	f7f6 f9dd 	bl	8004fb4 <assert_failed>
 800ebfa:	e753      	b.n	800eaa4 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ebfc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800ec00:	4824      	ldr	r0, [pc, #144]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec02:	f7f6 f9d7 	bl	8004fb4 <assert_failed>
 800ec06:	e71e      	b.n	800ea46 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec08:	2000      	movs	r0, #0
 800ec0a:	62a0      	str	r0, [r4, #40]	; 0x28
 800ec0c:	e792      	b.n	800eb34 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800ec0e:	f240 114d 	movw	r1, #333	; 0x14d
 800ec12:	4820      	ldr	r0, [pc, #128]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec14:	f7f6 f9ce 	bl	8004fb4 <assert_failed>
 800ec18:	e751      	b.n	800eabe <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800ec1a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800ec1c:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800ec20:	f7f7 fd38 	bl	8006694 <HAL_SPI_MspInit>
 800ec24:	e76e      	b.n	800eb04 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ec26:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800ec2a:	481a      	ldr	r0, [pc, #104]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec2c:	f7f6 f9c2 	bl	8004fb4 <assert_failed>
 800ec30:	e6fb      	b.n	800ea2a <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800ec32:	2001      	movs	r0, #1
}
 800ec34:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec36:	69e3      	ldr	r3, [r4, #28]
 800ec38:	f023 0318 	bic.w	r3, r3, #24
 800ec3c:	2b20      	cmp	r3, #32
 800ec3e:	f43f af58 	beq.w	800eaf2 <HAL_SPI_Init+0x116>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	f43f af55 	beq.w	800eaf2 <HAL_SPI_Init+0x116>
 800ec48:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800ec4c:	4811      	ldr	r0, [pc, #68]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec4e:	f7f6 f9b1 	bl	8004fb4 <assert_failed>
 800ec52:	e74e      	b.n	800eaf2 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800ec54:	f240 1151 	movw	r1, #337	; 0x151
 800ec58:	480e      	ldr	r0, [pc, #56]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec5a:	f7f6 f9ab 	bl	8004fb4 <assert_failed>
 800ec5e:	e739      	b.n	800ead4 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec60:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800ec64:	480b      	ldr	r0, [pc, #44]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec66:	f7f6 f9a5 	bl	8004fb4 <assert_failed>
 800ec6a:	e723      	b.n	800eab4 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ec6c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800ec70:	4808      	ldr	r0, [pc, #32]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec72:	f7f6 f99f 	bl	8004fb4 <assert_failed>
 800ec76:	e79e      	b.n	800ebb6 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800ec78:	f240 1149 	movw	r1, #329	; 0x149
 800ec7c:	4805      	ldr	r0, [pc, #20]	; (800ec94 <HAL_SPI_Init+0x2b8>)
 800ec7e:	f7f6 f999 	bl	8004fb4 <assert_failed>
 800ec82:	e702      	b.n	800ea8a <HAL_SPI_Init+0xae>
 800ec84:	40013000 	.word	0x40013000
 800ec88:	40003c00 	.word	0x40003c00
 800ec8c:	40003800 	.word	0x40003800
 800ec90:	40015400 	.word	0x40015400
 800ec94:	0802cbcc 	.word	0x0802cbcc

0800ec98 <HAL_SPI_Transmit>:
{
 800ec98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec9c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ec9e:	6883      	ldr	r3, [r0, #8]
{
 800eca0:	b082      	sub	sp, #8
 800eca2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800eca4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800eca8:	460f      	mov	r7, r1
 800ecaa:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ecac:	d171      	bne.n	800ed92 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800ecae:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d076      	beq.n	800eda4 <HAL_SPI_Transmit+0x10c>
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800ecbc:	f7f9 fa64 	bl	8008188 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ecc0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800ecc4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	b2d8      	uxtb	r0, r3
 800ecca:	d009      	beq.n	800ece0 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800eccc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800ecce:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800ecd0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800ecd2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ecd6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800ecda:	b002      	add	sp, #8
 800ecdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800ece0:	2f00      	cmp	r7, #0
 800ece2:	d0f4      	beq.n	800ecce <HAL_SPI_Transmit+0x36>
 800ece4:	fab8 f388 	clz	r3, r8
 800ece8:	095b      	lsrs	r3, r3, #5
 800ecea:	f1b8 0f00 	cmp.w	r8, #0
 800ecee:	d0ee      	beq.n	800ecce <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ecf0:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ecf2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ecf4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ecf8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ecfc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ecfe:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800ed02:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed06:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed08:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800ed0c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed10:	68a3      	ldr	r3, [r4, #8]
 800ed12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800ed16:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed18:	d07a      	beq.n	800ee10 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	0652      	lsls	r2, r2, #25
 800ed1e:	d403      	bmi.n	800ed28 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800ed20:	681a      	ldr	r2, [r3, #0]
 800ed22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed26:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed28:	68e2      	ldr	r2, [r4, #12]
 800ed2a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed2e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed30:	d93c      	bls.n	800edac <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed32:	b112      	cbz	r2, 800ed3a <HAL_SPI_Transmit+0xa2>
 800ed34:	f1b8 0f01 	cmp.w	r8, #1
 800ed38:	d107      	bne.n	800ed4a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed3a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800ed3e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800ed40:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed42:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800ed44:	3a01      	subs	r2, #1
 800ed46:	b292      	uxth	r2, r2
 800ed48:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ed4a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800ed4c:	b292      	uxth	r2, r2
 800ed4e:	b992      	cbnz	r2, 800ed76 <HAL_SPI_Transmit+0xde>
 800ed50:	e072      	b.n	800ee38 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ed54:	f832 1b02 	ldrh.w	r1, [r2], #2
 800ed58:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800ed5a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed5e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ed60:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ed64:	fa1f fc8c 	uxth.w	ip, ip
 800ed68:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800ed6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d061      	beq.n	800ee38 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	0797      	lsls	r7, r2, #30
 800ed7a:	d4ea      	bmi.n	800ed52 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed7c:	f7f9 fa04 	bl	8008188 <HAL_GetTick>
 800ed80:	1b80      	subs	r0, r0, r6
 800ed82:	42a8      	cmp	r0, r5
 800ed84:	d301      	bcc.n	800ed8a <HAL_SPI_Transmit+0xf2>
 800ed86:	1c68      	adds	r0, r5, #1
 800ed88:	d101      	bne.n	800ed8e <HAL_SPI_Transmit+0xf6>
 800ed8a:	2d00      	cmp	r5, #0
 800ed8c:	d1ee      	bne.n	800ed6c <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800ed8e:	2003      	movs	r0, #3
 800ed90:	e79d      	b.n	800ecce <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800ed92:	f240 313d 	movw	r1, #829	; 0x33d
 800ed96:	4838      	ldr	r0, [pc, #224]	; (800ee78 <HAL_SPI_Transmit+0x1e0>)
 800ed98:	f7f6 f90c 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(hspi);
 800ed9c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d188      	bne.n	800ecb6 <HAL_SPI_Transmit+0x1e>
 800eda4:	2002      	movs	r0, #2
}
 800eda6:	b002      	add	sp, #8
 800eda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edac:	b112      	cbz	r2, 800edb4 <HAL_SPI_Transmit+0x11c>
 800edae:	f1b8 0f01 	cmp.w	r8, #1
 800edb2:	d10b      	bne.n	800edcc <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800edb4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800edb6:	b292      	uxth	r2, r2
 800edb8:	2a01      	cmp	r2, #1
 800edba:	d953      	bls.n	800ee64 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800edbc:	f837 2b02 	ldrh.w	r2, [r7], #2
 800edc0:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800edc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800edc4:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800edc6:	3b02      	subs	r3, #2
 800edc8:	b29b      	uxth	r3, r3
 800edca:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800edcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	b983      	cbnz	r3, 800edf4 <HAL_SPI_Transmit+0x15c>
 800edd2:	e031      	b.n	800ee38 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800edd4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d922      	bls.n	800ee22 <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eddc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800edde:	f831 3b02 	ldrh.w	r3, [r1], #2
 800ede2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800ede4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ede6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ede8:	3b02      	subs	r3, #2
 800edea:	b29b      	uxth	r3, r3
 800edec:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800edee:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800edf0:	b289      	uxth	r1, r1
 800edf2:	b309      	cbz	r1, 800ee38 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800edf4:	6822      	ldr	r2, [r4, #0]
 800edf6:	6893      	ldr	r3, [r2, #8]
 800edf8:	0799      	lsls	r1, r3, #30
 800edfa:	d4eb      	bmi.n	800edd4 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800edfc:	f7f9 f9c4 	bl	8008188 <HAL_GetTick>
 800ee00:	1b80      	subs	r0, r0, r6
 800ee02:	42a8      	cmp	r0, r5
 800ee04:	d301      	bcc.n	800ee0a <HAL_SPI_Transmit+0x172>
 800ee06:	1c6b      	adds	r3, r5, #1
 800ee08:	d1c1      	bne.n	800ed8e <HAL_SPI_Transmit+0xf6>
 800ee0a:	2d00      	cmp	r5, #0
 800ee0c:	d1ef      	bne.n	800edee <HAL_SPI_Transmit+0x156>
 800ee0e:	e7be      	b.n	800ed8e <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ee1e:	601a      	str	r2, [r3, #0]
 800ee20:	e77b      	b.n	800ed1a <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800ee28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800ee2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ee2c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800ee2e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800ee30:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800ee32:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800ee34:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ee36:	e7da      	b.n	800edee <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee38:	4632      	mov	r2, r6
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f7ff fd89 	bl	800e954 <SPI_EndRxTxTransaction>
 800ee42:	b108      	cbz	r0, 800ee48 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee44:	2320      	movs	r3, #32
 800ee46:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee48:	68a3      	ldr	r3, [r4, #8]
 800ee4a:	b933      	cbnz	r3, 800ee5a <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee4c:	6822      	ldr	r2, [r4, #0]
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	68d3      	ldr	r3, [r2, #12]
 800ee52:	9301      	str	r3, [sp, #4]
 800ee54:	6893      	ldr	r3, [r2, #8]
 800ee56:	9301      	str	r3, [sp, #4]
 800ee58:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800ee5c:	3800      	subs	r0, #0
 800ee5e:	bf18      	it	ne
 800ee60:	2001      	movne	r0, #1
error:
 800ee62:	e734      	b.n	800ecce <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee64:	783a      	ldrb	r2, [r7, #0]
 800ee66:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800ee68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800ee6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ee6c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800ee6e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800ee70:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800ee72:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800ee74:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800ee76:	e7a9      	b.n	800edcc <HAL_SPI_Transmit+0x134>
 800ee78:	0802cbcc 	.word	0x0802cbcc

0800ee7c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee7c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee7e:	4a12      	ldr	r2, [pc, #72]	; (800eec8 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800ee84:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ee86:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800ee88:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800ee8a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800ee8c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ee8e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ee92:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800ee94:	680d      	ldr	r5, [r1, #0]
 800ee96:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ee98:	688d      	ldr	r5, [r1, #8]
 800ee9a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee9e:	4d0b      	ldr	r5, [pc, #44]	; (800eecc <TIM_OC5_SetConfig+0x50>)
 800eea0:	42a8      	cmp	r0, r5
 800eea2:	d00a      	beq.n	800eeba <TIM_OC5_SetConfig+0x3e>
 800eea4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800eea8:	42a8      	cmp	r0, r5
 800eeaa:	d006      	beq.n	800eeba <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eeac:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800eeae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800eeb0:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800eeb2:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eeb4:	6203      	str	r3, [r0, #32]
}
 800eeb6:	bc30      	pop	{r4, r5}
 800eeb8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eeba:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eebe:	694d      	ldr	r5, [r1, #20]
 800eec0:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800eec4:	e7f2      	b.n	800eeac <TIM_OC5_SetConfig+0x30>
 800eec6:	bf00      	nop
 800eec8:	fffeff8f 	.word	0xfffeff8f
 800eecc:	40010000 	.word	0x40010000

0800eed0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eed0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eed2:	4a12      	ldr	r2, [pc, #72]	; (800ef1c <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eed4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800eed8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eeda:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800eedc:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800eede:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800eee0:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eee6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eee8:	680d      	ldr	r5, [r1, #0]
 800eeea:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eeee:	688d      	ldr	r5, [r1, #8]
 800eef0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eef4:	4d0a      	ldr	r5, [pc, #40]	; (800ef20 <TIM_OC6_SetConfig+0x50>)
 800eef6:	42a8      	cmp	r0, r5
 800eef8:	d00a      	beq.n	800ef10 <TIM_OC6_SetConfig+0x40>
 800eefa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800eefe:	42a8      	cmp	r0, r5
 800ef00:	d006      	beq.n	800ef10 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef02:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800ef04:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800ef06:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800ef08:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef0a:	6203      	str	r3, [r0, #32]
}
 800ef0c:	bc30      	pop	{r4, r5}
 800ef0e:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ef10:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ef14:	694d      	ldr	r5, [r1, #20]
 800ef16:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800ef1a:	e7f2      	b.n	800ef02 <TIM_OC6_SetConfig+0x32>
 800ef1c:	feff8fff 	.word	0xfeff8fff
 800ef20:	40010000 	.word	0x40010000

0800ef24 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef24:	6a03      	ldr	r3, [r0, #32]
 800ef26:	f023 0301 	bic.w	r3, r3, #1
{
 800ef2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef2e:	6203      	str	r3, [r0, #32]
{
 800ef30:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ef32:	6a05      	ldr	r5, [r0, #32]
{
 800ef34:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ef36:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef3a:	4b27      	ldr	r3, [pc, #156]	; (800efd8 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800ef3c:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800ef40:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800ef42:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef44:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ef46:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800ef48:	688b      	ldr	r3, [r1, #8]
 800ef4a:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ef4c:	4b23      	ldr	r3, [pc, #140]	; (800efdc <TIM_OC1_SetConfig+0xb8>)
 800ef4e:	4298      	cmp	r0, r3
 800ef50:	d00b      	beq.n	800ef6a <TIM_OC1_SetConfig+0x46>
 800ef52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ef56:	4298      	cmp	r0, r3
 800ef58:	d007      	beq.n	800ef6a <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ef5a:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ef5c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ef60:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ef62:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ef64:	6225      	str	r5, [r4, #32]
}
 800ef66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ef6a:	68f3      	ldr	r3, [r6, #12]
 800ef6c:	f033 0208 	bics.w	r2, r3, #8
 800ef70:	d120      	bne.n	800efb4 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800ef72:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ef76:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ef78:	69b3      	ldr	r3, [r6, #24]
 800ef7a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800ef7e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ef82:	d11e      	bne.n	800efc2 <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ef84:	6973      	ldr	r3, [r6, #20]
 800ef86:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ef8a:	d106      	bne.n	800ef9a <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef8c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ef90:	69b1      	ldr	r1, [r6, #24]
 800ef92:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef94:	ea42 0803 	orr.w	r8, r2, r3
 800ef98:	e7df      	b.n	800ef5a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ef9a:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800ef9e:	4810      	ldr	r0, [pc, #64]	; (800efe0 <TIM_OC1_SetConfig+0xbc>)
 800efa0:	f7f6 f808 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800efa4:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800efa8:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800efaa:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800efac:	430a      	orrs	r2, r1
 800efae:	ea42 0803 	orr.w	r8, r2, r3
 800efb2:	e7d2      	b.n	800ef5a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800efb4:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800efb8:	4809      	ldr	r0, [pc, #36]	; (800efe0 <TIM_OC1_SetConfig+0xbc>)
 800efba:	f7f5 fffb 	bl	8004fb4 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800efbe:	68f3      	ldr	r3, [r6, #12]
 800efc0:	e7d7      	b.n	800ef72 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800efc2:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800efc6:	4806      	ldr	r0, [pc, #24]	; (800efe0 <TIM_OC1_SetConfig+0xbc>)
 800efc8:	f7f5 fff4 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800efcc:	6973      	ldr	r3, [r6, #20]
 800efce:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800efd2:	d0db      	beq.n	800ef8c <TIM_OC1_SetConfig+0x68>
 800efd4:	e7e1      	b.n	800ef9a <TIM_OC1_SetConfig+0x76>
 800efd6:	bf00      	nop
 800efd8:	fffeff8c 	.word	0xfffeff8c
 800efdc:	40010000 	.word	0x40010000
 800efe0:	0802cc04 	.word	0x0802cc04

0800efe4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efe4:	6a03      	ldr	r3, [r0, #32]
 800efe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800efea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efee:	6203      	str	r3, [r0, #32]
{
 800eff0:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800eff2:	6a05      	ldr	r5, [r0, #32]
{
 800eff4:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800eff6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800effa:	4b29      	ldr	r3, [pc, #164]	; (800f0a0 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800effc:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800f000:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800f002:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f004:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800f006:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f008:	688b      	ldr	r3, [r1, #8]
 800f00a:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f00e:	4b25      	ldr	r3, [pc, #148]	; (800f0a4 <TIM_OC3_SetConfig+0xc0>)
 800f010:	4298      	cmp	r0, r3
 800f012:	d00b      	beq.n	800f02c <TIM_OC3_SetConfig+0x48>
 800f014:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f018:	4298      	cmp	r0, r3
 800f01a:	d007      	beq.n	800f02c <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800f01c:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800f01e:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f022:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800f024:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800f026:	6225      	str	r5, [r4, #32]
}
 800f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f02c:	68f3      	ldr	r3, [r6, #12]
 800f02e:	f033 0208 	bics.w	r2, r3, #8
 800f032:	d123      	bne.n	800f07c <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800f034:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f038:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f03c:	69b3      	ldr	r3, [r6, #24]
 800f03e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800f042:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f046:	d120      	bne.n	800f08a <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f048:	6973      	ldr	r3, [r6, #20]
 800f04a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f04e:	d107      	bne.n	800f060 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f050:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f054:	69b1      	ldr	r1, [r6, #24]
 800f056:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800f05a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800f05e:	e7dd      	b.n	800f01c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f060:	f641 4103 	movw	r1, #7171	; 0x1c03
 800f064:	4810      	ldr	r0, [pc, #64]	; (800f0a8 <TIM_OC3_SetConfig+0xc4>)
 800f066:	f7f5 ffa5 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f06a:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f06e:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f070:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f072:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800f076:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800f07a:	e7cf      	b.n	800f01c <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800f07c:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800f080:	4809      	ldr	r0, [pc, #36]	; (800f0a8 <TIM_OC3_SetConfig+0xc4>)
 800f082:	f7f5 ff97 	bl	8004fb4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f086:	68f3      	ldr	r3, [r6, #12]
 800f088:	e7d4      	b.n	800f034 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800f08a:	f641 4102 	movw	r1, #7170	; 0x1c02
 800f08e:	4806      	ldr	r0, [pc, #24]	; (800f0a8 <TIM_OC3_SetConfig+0xc4>)
 800f090:	f7f5 ff90 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f094:	6973      	ldr	r3, [r6, #20]
 800f096:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800f09a:	d0d9      	beq.n	800f050 <TIM_OC3_SetConfig+0x6c>
 800f09c:	e7e0      	b.n	800f060 <TIM_OC3_SetConfig+0x7c>
 800f09e:	bf00      	nop
 800f0a0:	fffeff8c 	.word	0xfffeff8c
 800f0a4:	40010000 	.word	0x40010000
 800f0a8:	0802cc04 	.word	0x0802cc04

0800f0ac <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0ac:	6a03      	ldr	r3, [r0, #32]
 800f0ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800f0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0b4:	6203      	str	r3, [r0, #32]
{
 800f0b6:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800f0b8:	6a06      	ldr	r6, [r0, #32]
{
 800f0ba:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800f0bc:	6842      	ldr	r2, [r0, #4]
{
 800f0be:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800f0c0:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800f0c2:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0c6:	4b16      	ldr	r3, [pc, #88]	; (800f120 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0c8:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0ca:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0cc:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0d0:	68ab      	ldr	r3, [r5, #8]
 800f0d2:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0d6:	4b13      	ldr	r3, [pc, #76]	; (800f124 <TIM_OC4_SetConfig+0x78>)
 800f0d8:	4298      	cmp	r0, r3
 800f0da:	d00a      	beq.n	800f0f2 <TIM_OC4_SetConfig+0x46>
 800f0dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f0e0:	4298      	cmp	r0, r3
 800f0e2:	d006      	beq.n	800f0f2 <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800f0e4:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800f0e6:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800f0e8:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800f0ea:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800f0ec:	6226      	str	r6, [r4, #32]
}
 800f0ee:	b003      	add	sp, #12
 800f0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f0f2:	696b      	ldr	r3, [r5, #20]
 800f0f4:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800f0f8:	d104      	bne.n	800f104 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f0fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f0fe:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800f102:	e7ef      	b.n	800f0e4 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800f104:	f641 4141 	movw	r1, #7233	; 0x1c41
 800f108:	4807      	ldr	r0, [pc, #28]	; (800f128 <TIM_OC4_SetConfig+0x7c>)
 800f10a:	9201      	str	r2, [sp, #4]
 800f10c:	f7f5 ff52 	bl	8004fb4 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f110:	9a01      	ldr	r2, [sp, #4]
 800f112:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f118:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800f11c:	e7e2      	b.n	800f0e4 <TIM_OC4_SetConfig+0x38>
 800f11e:	bf00      	nop
 800f120:	feff8cff 	.word	0xfeff8cff
 800f124:	40010000 	.word	0x40010000
 800f128:	0802cc04 	.word	0x0802cc04

0800f12c <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f12c:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f12e:	684a      	ldr	r2, [r1, #4]
{
 800f130:	b570      	push	{r4, r5, r6, lr}
 800f132:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800f134:	6899      	ldr	r1, [r3, #8]
{
 800f136:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f138:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800f13a:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f13e:	4980      	ldr	r1, [pc, #512]	; (800f340 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f140:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f142:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f146:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f14a:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f14e:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800f150:	f000 8104 	beq.w	800f35c <TIM_SlaveTimer_SetConfig+0x230>
 800f154:	d953      	bls.n	800f1fe <TIM_SlaveTimer_SetConfig+0xd2>
 800f156:	2a60      	cmp	r2, #96	; 0x60
 800f158:	f000 816b 	beq.w	800f432 <TIM_SlaveTimer_SetConfig+0x306>
 800f15c:	2a70      	cmp	r2, #112	; 0x70
 800f15e:	d151      	bne.n	800f204 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f160:	4a78      	ldr	r2, [pc, #480]	; (800f344 <TIM_SlaveTimer_SetConfig+0x218>)
 800f162:	4979      	ldr	r1, [pc, #484]	; (800f348 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f164:	4293      	cmp	r3, r2
 800f166:	bf18      	it	ne
 800f168:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f16c:	bf14      	ite	ne
 800f16e:	2201      	movne	r2, #1
 800f170:	2200      	moveq	r2, #0
 800f172:	428b      	cmp	r3, r1
 800f174:	bf0c      	ite	eq
 800f176:	2200      	moveq	r2, #0
 800f178:	f002 0201 	andne.w	r2, r2, #1
 800f17c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f180:	428b      	cmp	r3, r1
 800f182:	bf0c      	ite	eq
 800f184:	2200      	moveq	r2, #0
 800f186:	f002 0201 	andne.w	r2, r2, #1
 800f18a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f18e:	428b      	cmp	r3, r1
 800f190:	bf0c      	ite	eq
 800f192:	2200      	moveq	r2, #0
 800f194:	f002 0201 	andne.w	r2, r2, #1
 800f198:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f19c:	428b      	cmp	r3, r1
 800f19e:	bf0c      	ite	eq
 800f1a0:	2200      	moveq	r2, #0
 800f1a2:	f002 0201 	andne.w	r2, r2, #1
 800f1a6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f1aa:	428b      	cmp	r3, r1
 800f1ac:	bf0c      	ite	eq
 800f1ae:	2200      	moveq	r2, #0
 800f1b0:	f002 0201 	andne.w	r2, r2, #1
 800f1b4:	b11a      	cbz	r2, 800f1be <TIM_SlaveTimer_SetConfig+0x92>
 800f1b6:	4a65      	ldr	r2, [pc, #404]	; (800f34c <TIM_SlaveTimer_SetConfig+0x220>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	f040 81bb 	bne.w	800f534 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800f1be:	68e3      	ldr	r3, [r4, #12]
 800f1c0:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f1c4:	f040 819e 	bne.w	800f504 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f1c8:	68a3      	ldr	r3, [r4, #8]
 800f1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f1ce:	bf18      	it	ne
 800f1d0:	2b0a      	cmpne	r3, #10
 800f1d2:	d003      	beq.n	800f1dc <TIM_SlaveTimer_SetConfig+0xb0>
 800f1d4:	f033 0302 	bics.w	r3, r3, #2
 800f1d8:	f040 81a6 	bne.w	800f528 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f1dc:	6921      	ldr	r1, [r4, #16]
 800f1de:	290f      	cmp	r1, #15
 800f1e0:	f200 8175 	bhi.w	800f4ce <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800f1e4:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f1e6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800f1ea:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1ec:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f1ee:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f1f0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800f1f4:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f1f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f1fa:	60ab      	str	r3, [r5, #8]
}
 800f1fc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f1fe:	2a40      	cmp	r2, #64	; 0x40
 800f200:	d03a      	beq.n	800f278 <TIM_SlaveTimer_SetConfig+0x14c>
 800f202:	d901      	bls.n	800f208 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800f204:	2001      	movs	r0, #1
}
 800f206:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f208:	2a20      	cmp	r2, #32
 800f20a:	d002      	beq.n	800f212 <TIM_SlaveTimer_SetConfig+0xe6>
 800f20c:	d930      	bls.n	800f270 <TIM_SlaveTimer_SetConfig+0x144>
 800f20e:	2a30      	cmp	r2, #48	; 0x30
 800f210:	d1f8      	bne.n	800f204 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f212:	4a4c      	ldr	r2, [pc, #304]	; (800f344 <TIM_SlaveTimer_SetConfig+0x218>)
 800f214:	484c      	ldr	r0, [pc, #304]	; (800f348 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f216:	4293      	cmp	r3, r2
 800f218:	bf18      	it	ne
 800f21a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f21e:	494c      	ldr	r1, [pc, #304]	; (800f350 <TIM_SlaveTimer_SetConfig+0x224>)
 800f220:	4c4c      	ldr	r4, [pc, #304]	; (800f354 <TIM_SlaveTimer_SetConfig+0x228>)
 800f222:	bf14      	ite	ne
 800f224:	2201      	movne	r2, #1
 800f226:	2200      	moveq	r2, #0
 800f228:	4283      	cmp	r3, r0
 800f22a:	bf0c      	ite	eq
 800f22c:	2200      	moveq	r2, #0
 800f22e:	f002 0201 	andne.w	r2, r2, #1
 800f232:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800f236:	428b      	cmp	r3, r1
 800f238:	bf0c      	ite	eq
 800f23a:	2200      	moveq	r2, #0
 800f23c:	f002 0201 	andne.w	r2, r2, #1
 800f240:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f244:	42a3      	cmp	r3, r4
 800f246:	bf0c      	ite	eq
 800f248:	2200      	moveq	r2, #0
 800f24a:	f002 0201 	andne.w	r2, r2, #1
 800f24e:	4283      	cmp	r3, r0
 800f250:	bf0c      	ite	eq
 800f252:	2200      	moveq	r2, #0
 800f254:	f002 0201 	andne.w	r2, r2, #1
 800f258:	428b      	cmp	r3, r1
 800f25a:	bf0c      	ite	eq
 800f25c:	2200      	moveq	r2, #0
 800f25e:	f002 0201 	andne.w	r2, r2, #1
 800f262:	b11a      	cbz	r2, 800f26c <TIM_SlaveTimer_SetConfig+0x140>
 800f264:	4a39      	ldr	r2, [pc, #228]	; (800f34c <TIM_SlaveTimer_SetConfig+0x220>)
 800f266:	4293      	cmp	r3, r2
 800f268:	f040 816a 	bne.w	800f540 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800f26c:	2000      	movs	r0, #0
}
 800f26e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800f270:	f032 0210 	bics.w	r2, r2, #16
 800f274:	d1c6      	bne.n	800f204 <TIM_SlaveTimer_SetConfig+0xd8>
 800f276:	e7cc      	b.n	800f212 <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f278:	4a32      	ldr	r2, [pc, #200]	; (800f344 <TIM_SlaveTimer_SetConfig+0x218>)
 800f27a:	4933      	ldr	r1, [pc, #204]	; (800f348 <TIM_SlaveTimer_SetConfig+0x21c>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	bf18      	it	ne
 800f280:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f284:	bf14      	ite	ne
 800f286:	2201      	movne	r2, #1
 800f288:	2200      	moveq	r2, #0
 800f28a:	428b      	cmp	r3, r1
 800f28c:	bf0c      	ite	eq
 800f28e:	2200      	moveq	r2, #0
 800f290:	f002 0201 	andne.w	r2, r2, #1
 800f294:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f298:	428b      	cmp	r3, r1
 800f29a:	bf0c      	ite	eq
 800f29c:	2200      	moveq	r2, #0
 800f29e:	f002 0201 	andne.w	r2, r2, #1
 800f2a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2a6:	428b      	cmp	r3, r1
 800f2a8:	bf0c      	ite	eq
 800f2aa:	2200      	moveq	r2, #0
 800f2ac:	f002 0201 	andne.w	r2, r2, #1
 800f2b0:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f2b4:	428b      	cmp	r3, r1
 800f2b6:	bf0c      	ite	eq
 800f2b8:	2200      	moveq	r2, #0
 800f2ba:	f002 0201 	andne.w	r2, r2, #1
 800f2be:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f2c2:	428b      	cmp	r3, r1
 800f2c4:	bf0c      	ite	eq
 800f2c6:	2200      	moveq	r2, #0
 800f2c8:	f002 0201 	andne.w	r2, r2, #1
 800f2cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2d0:	428b      	cmp	r3, r1
 800f2d2:	bf0c      	ite	eq
 800f2d4:	2200      	moveq	r2, #0
 800f2d6:	f002 0201 	andne.w	r2, r2, #1
 800f2da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2de:	428b      	cmp	r3, r1
 800f2e0:	bf0c      	ite	eq
 800f2e2:	2200      	moveq	r2, #0
 800f2e4:	f002 0201 	andne.w	r2, r2, #1
 800f2e8:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800f2ec:	428b      	cmp	r3, r1
 800f2ee:	bf0c      	ite	eq
 800f2f0:	2200      	moveq	r2, #0
 800f2f2:	f002 0201 	andne.w	r2, r2, #1
 800f2f6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f2fa:	428b      	cmp	r3, r1
 800f2fc:	bf0c      	ite	eq
 800f2fe:	2200      	moveq	r2, #0
 800f300:	f002 0201 	andne.w	r2, r2, #1
 800f304:	b11a      	cbz	r2, 800f30e <TIM_SlaveTimer_SetConfig+0x1e2>
 800f306:	4a14      	ldr	r2, [pc, #80]	; (800f358 <TIM_SlaveTimer_SetConfig+0x22c>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	f040 8126 	bne.w	800f55a <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f30e:	6923      	ldr	r3, [r4, #16]
 800f310:	2b0f      	cmp	r3, #15
 800f312:	f200 80ea 	bhi.w	800f4ea <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800f316:	6823      	ldr	r3, [r4, #0]
 800f318:	2b05      	cmp	r3, #5
 800f31a:	f43f af73 	beq.w	800f204 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800f31e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f320:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f322:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800f324:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f326:	6a19      	ldr	r1, [r3, #32]
 800f328:	f021 0101 	bic.w	r1, r1, #1
 800f32c:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f32e:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f330:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f334:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800f338:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f33a:	621c      	str	r4, [r3, #32]
}
 800f33c:	bd70      	pop	{r4, r5, r6, pc}
 800f33e:	bf00      	nop
 800f340:	fffefff8 	.word	0xfffefff8
 800f344:	40010000 	.word	0x40010000
 800f348:	40000400 	.word	0x40000400
 800f34c:	40001800 	.word	0x40001800
 800f350:	40000800 	.word	0x40000800
 800f354:	40000c00 	.word	0x40000c00
 800f358:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f35c:	4a85      	ldr	r2, [pc, #532]	; (800f574 <TIM_SlaveTimer_SetConfig+0x448>)
 800f35e:	4986      	ldr	r1, [pc, #536]	; (800f578 <TIM_SlaveTimer_SetConfig+0x44c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	bf18      	it	ne
 800f364:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f368:	bf14      	ite	ne
 800f36a:	2201      	movne	r2, #1
 800f36c:	2200      	moveq	r2, #0
 800f36e:	428b      	cmp	r3, r1
 800f370:	bf0c      	ite	eq
 800f372:	2200      	moveq	r2, #0
 800f374:	f002 0201 	andne.w	r2, r2, #1
 800f378:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f37c:	428b      	cmp	r3, r1
 800f37e:	bf0c      	ite	eq
 800f380:	2200      	moveq	r2, #0
 800f382:	f002 0201 	andne.w	r2, r2, #1
 800f386:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f38a:	428b      	cmp	r3, r1
 800f38c:	bf0c      	ite	eq
 800f38e:	2200      	moveq	r2, #0
 800f390:	f002 0201 	andne.w	r2, r2, #1
 800f394:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f398:	428b      	cmp	r3, r1
 800f39a:	bf0c      	ite	eq
 800f39c:	2200      	moveq	r2, #0
 800f39e:	f002 0201 	andne.w	r2, r2, #1
 800f3a2:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f3a6:	428b      	cmp	r3, r1
 800f3a8:	bf0c      	ite	eq
 800f3aa:	2200      	moveq	r2, #0
 800f3ac:	f002 0201 	andne.w	r2, r2, #1
 800f3b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3b4:	428b      	cmp	r3, r1
 800f3b6:	bf0c      	ite	eq
 800f3b8:	2200      	moveq	r2, #0
 800f3ba:	f002 0201 	andne.w	r2, r2, #1
 800f3be:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3c2:	428b      	cmp	r3, r1
 800f3c4:	bf0c      	ite	eq
 800f3c6:	2200      	moveq	r2, #0
 800f3c8:	f002 0201 	andne.w	r2, r2, #1
 800f3cc:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800f3d0:	428b      	cmp	r3, r1
 800f3d2:	bf0c      	ite	eq
 800f3d4:	2200      	moveq	r2, #0
 800f3d6:	f002 0201 	andne.w	r2, r2, #1
 800f3da:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3de:	428b      	cmp	r3, r1
 800f3e0:	bf0c      	ite	eq
 800f3e2:	2200      	moveq	r2, #0
 800f3e4:	f002 0201 	andne.w	r2, r2, #1
 800f3e8:	b11a      	cbz	r2, 800f3f2 <TIM_SlaveTimer_SetConfig+0x2c6>
 800f3ea:	4a64      	ldr	r2, [pc, #400]	; (800f57c <TIM_SlaveTimer_SetConfig+0x450>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	f040 80ba 	bne.w	800f566 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f3f2:	68a3      	ldr	r3, [r4, #8]
 800f3f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3f8:	bf18      	it	ne
 800f3fa:	2b0a      	cmpne	r3, #10
 800f3fc:	d003      	beq.n	800f406 <TIM_SlaveTimer_SetConfig+0x2da>
 800f3fe:	f033 0302 	bics.w	r3, r3, #2
 800f402:	f040 808b 	bne.w	800f51c <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f406:	6926      	ldr	r6, [r4, #16]
 800f408:	2e0f      	cmp	r6, #15
 800f40a:	d874      	bhi.n	800f4f6 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f40c:	682b      	ldr	r3, [r5, #0]
 800f40e:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800f410:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f412:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f414:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f418:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800f41c:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f41e:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f420:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f422:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f424:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f428:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f42c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f42e:	6219      	str	r1, [r3, #32]
}
 800f430:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f432:	4a50      	ldr	r2, [pc, #320]	; (800f574 <TIM_SlaveTimer_SetConfig+0x448>)
 800f434:	4950      	ldr	r1, [pc, #320]	; (800f578 <TIM_SlaveTimer_SetConfig+0x44c>)
 800f436:	4293      	cmp	r3, r2
 800f438:	bf18      	it	ne
 800f43a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f43e:	bf14      	ite	ne
 800f440:	2201      	movne	r2, #1
 800f442:	2200      	moveq	r2, #0
 800f444:	428b      	cmp	r3, r1
 800f446:	bf0c      	ite	eq
 800f448:	2200      	moveq	r2, #0
 800f44a:	f002 0201 	andne.w	r2, r2, #1
 800f44e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f452:	428b      	cmp	r3, r1
 800f454:	bf0c      	ite	eq
 800f456:	2200      	moveq	r2, #0
 800f458:	f002 0201 	andne.w	r2, r2, #1
 800f45c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f460:	428b      	cmp	r3, r1
 800f462:	bf0c      	ite	eq
 800f464:	2200      	moveq	r2, #0
 800f466:	f002 0201 	andne.w	r2, r2, #1
 800f46a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f46e:	428b      	cmp	r3, r1
 800f470:	bf0c      	ite	eq
 800f472:	2200      	moveq	r2, #0
 800f474:	f002 0201 	andne.w	r2, r2, #1
 800f478:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f47c:	428b      	cmp	r3, r1
 800f47e:	bf0c      	ite	eq
 800f480:	2200      	moveq	r2, #0
 800f482:	f002 0201 	andne.w	r2, r2, #1
 800f486:	b112      	cbz	r2, 800f48e <TIM_SlaveTimer_SetConfig+0x362>
 800f488:	4a3d      	ldr	r2, [pc, #244]	; (800f580 <TIM_SlaveTimer_SetConfig+0x454>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d15f      	bne.n	800f54e <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f48e:	68a3      	ldr	r3, [r4, #8]
 800f490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f494:	bf18      	it	ne
 800f496:	2b0a      	cmpne	r3, #10
 800f498:	d002      	beq.n	800f4a0 <TIM_SlaveTimer_SetConfig+0x374>
 800f49a:	f033 0302 	bics.w	r3, r3, #2
 800f49e:	d137      	bne.n	800f510 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4a0:	6926      	ldr	r6, [r4, #16]
 800f4a2:	2e0f      	cmp	r6, #15
 800f4a4:	d81a      	bhi.n	800f4dc <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4a6:	682b      	ldr	r3, [r5, #0]
 800f4a8:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f4aa:	6a18      	ldr	r0, [r3, #32]
 800f4ac:	f020 0010 	bic.w	r0, r0, #16
 800f4b0:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f4b2:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f4b4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f4b6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f4b8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f4bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f4c0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f4c4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f4c8:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4ca:	621a      	str	r2, [r3, #32]
}
 800f4cc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4ce:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800f4d2:	482c      	ldr	r0, [pc, #176]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f4d4:	f7f5 fd6e 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f4d8:	6921      	ldr	r1, [r4, #16]
 800f4da:	e683      	b.n	800f1e4 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4dc:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800f4e0:	4828      	ldr	r0, [pc, #160]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f4e2:	f7f5 fd67 	bl	8004fb4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f4e6:	6926      	ldr	r6, [r4, #16]
 800f4e8:	e7dd      	b.n	800f4a6 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4ea:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800f4ee:	4825      	ldr	r0, [pc, #148]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f4f0:	f7f5 fd60 	bl	8004fb4 <assert_failed>
 800f4f4:	e70f      	b.n	800f316 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800f4f6:	f641 5111 	movw	r1, #7441	; 0x1d11
 800f4fa:	4822      	ldr	r0, [pc, #136]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f4fc:	f7f5 fd5a 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f500:	6926      	ldr	r6, [r4, #16]
 800f502:	e783      	b.n	800f40c <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800f504:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800f508:	481e      	ldr	r0, [pc, #120]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f50a:	f7f5 fd53 	bl	8004fb4 <assert_failed>
 800f50e:	e65b      	b.n	800f1c8 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f510:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800f514:	481b      	ldr	r0, [pc, #108]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f516:	f7f5 fd4d 	bl	8004fb4 <assert_failed>
 800f51a:	e7c1      	b.n	800f4a0 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f51c:	f641 5110 	movw	r1, #7440	; 0x1d10
 800f520:	4818      	ldr	r0, [pc, #96]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f522:	f7f5 fd47 	bl	8004fb4 <assert_failed>
 800f526:	e76e      	b.n	800f406 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800f528:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800f52c:	4815      	ldr	r0, [pc, #84]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f52e:	f7f5 fd41 	bl	8004fb4 <assert_failed>
 800f532:	e653      	b.n	800f1dc <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f534:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800f538:	4812      	ldr	r0, [pc, #72]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f53a:	f7f5 fd3b 	bl	8004fb4 <assert_failed>
 800f53e:	e63e      	b.n	800f1be <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f540:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800f544:	480f      	ldr	r0, [pc, #60]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f546:	f7f5 fd35 	bl	8004fb4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f54a:	2000      	movs	r0, #0
}
 800f54c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f54e:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800f552:	480c      	ldr	r0, [pc, #48]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f554:	f7f5 fd2e 	bl	8004fb4 <assert_failed>
 800f558:	e799      	b.n	800f48e <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f55a:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800f55e:	4809      	ldr	r0, [pc, #36]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f560:	f7f5 fd28 	bl	8004fb4 <assert_failed>
 800f564:	e6d3      	b.n	800f30e <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f566:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800f56a:	4806      	ldr	r0, [pc, #24]	; (800f584 <TIM_SlaveTimer_SetConfig+0x458>)
 800f56c:	f7f5 fd22 	bl	8004fb4 <assert_failed>
 800f570:	e73f      	b.n	800f3f2 <TIM_SlaveTimer_SetConfig+0x2c6>
 800f572:	bf00      	nop
 800f574:	40010000 	.word	0x40010000
 800f578:	40000400 	.word	0x40000400
 800f57c:	40002000 	.word	0x40002000
 800f580:	40001800 	.word	0x40001800
 800f584:	0802cc04 	.word	0x0802cc04

0800f588 <HAL_TIM_Base_Start>:
{
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f58c:	4b52      	ldr	r3, [pc, #328]	; (800f6d8 <HAL_TIM_Base_Start+0x150>)
 800f58e:	4d53      	ldr	r5, [pc, #332]	; (800f6dc <HAL_TIM_Base_Start+0x154>)
 800f590:	6822      	ldr	r2, [r4, #0]
 800f592:	4953      	ldr	r1, [pc, #332]	; (800f6e0 <HAL_TIM_Base_Start+0x158>)
 800f594:	429a      	cmp	r2, r3
 800f596:	bf18      	it	ne
 800f598:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f59c:	4851      	ldr	r0, [pc, #324]	; (800f6e4 <HAL_TIM_Base_Start+0x15c>)
 800f59e:	bf14      	ite	ne
 800f5a0:	2301      	movne	r3, #1
 800f5a2:	2300      	moveq	r3, #0
 800f5a4:	42aa      	cmp	r2, r5
 800f5a6:	bf0c      	ite	eq
 800f5a8:	2300      	moveq	r3, #0
 800f5aa:	f003 0301 	andne.w	r3, r3, #1
 800f5ae:	428a      	cmp	r2, r1
 800f5b0:	bf0c      	ite	eq
 800f5b2:	2300      	moveq	r3, #0
 800f5b4:	f003 0301 	andne.w	r3, r3, #1
 800f5b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5bc:	4282      	cmp	r2, r0
 800f5be:	bf0c      	ite	eq
 800f5c0:	2300      	moveq	r3, #0
 800f5c2:	f003 0301 	andne.w	r3, r3, #1
 800f5c6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f5ca:	428a      	cmp	r2, r1
 800f5cc:	bf0c      	ite	eq
 800f5ce:	2300      	moveq	r3, #0
 800f5d0:	f003 0301 	andne.w	r3, r3, #1
 800f5d4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f5d8:	4282      	cmp	r2, r0
 800f5da:	bf0c      	ite	eq
 800f5dc:	2300      	moveq	r3, #0
 800f5de:	f003 0301 	andne.w	r3, r3, #1
 800f5e2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f5e6:	428a      	cmp	r2, r1
 800f5e8:	bf0c      	ite	eq
 800f5ea:	2300      	moveq	r3, #0
 800f5ec:	f003 0301 	andne.w	r3, r3, #1
 800f5f0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f5f4:	4282      	cmp	r2, r0
 800f5f6:	bf0c      	ite	eq
 800f5f8:	2300      	moveq	r3, #0
 800f5fa:	f003 0301 	andne.w	r3, r3, #1
 800f5fe:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f602:	428a      	cmp	r2, r1
 800f604:	bf0c      	ite	eq
 800f606:	2300      	moveq	r3, #0
 800f608:	f003 0301 	andne.w	r3, r3, #1
 800f60c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f610:	4282      	cmp	r2, r0
 800f612:	bf0c      	ite	eq
 800f614:	2300      	moveq	r3, #0
 800f616:	f003 0301 	andne.w	r3, r3, #1
 800f61a:	428a      	cmp	r2, r1
 800f61c:	bf0c      	ite	eq
 800f61e:	2300      	moveq	r3, #0
 800f620:	f003 0301 	andne.w	r3, r3, #1
 800f624:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f628:	428a      	cmp	r2, r1
 800f62a:	bf0c      	ite	eq
 800f62c:	2300      	moveq	r3, #0
 800f62e:	f003 0301 	andne.w	r3, r3, #1
 800f632:	b113      	cbz	r3, 800f63a <HAL_TIM_Base_Start+0xb2>
 800f634:	4b2c      	ldr	r3, [pc, #176]	; (800f6e8 <HAL_TIM_Base_Start+0x160>)
 800f636:	429a      	cmp	r2, r3
 800f638:	d143      	bne.n	800f6c2 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800f63a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d13b      	bne.n	800f6ba <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f642:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f644:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f646:	4b24      	ldr	r3, [pc, #144]	; (800f6d8 <HAL_TIM_Base_Start+0x150>)
 800f648:	4d24      	ldr	r5, [pc, #144]	; (800f6dc <HAL_TIM_Base_Start+0x154>)
 800f64a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f64e:	bf18      	it	ne
 800f650:	429a      	cmpne	r2, r3
 800f652:	4923      	ldr	r1, [pc, #140]	; (800f6e0 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f654:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f658:	bf0c      	ite	eq
 800f65a:	2301      	moveq	r3, #1
 800f65c:	2300      	movne	r3, #0
 800f65e:	4c21      	ldr	r4, [pc, #132]	; (800f6e4 <HAL_TIM_Base_Start+0x15c>)
 800f660:	42aa      	cmp	r2, r5
 800f662:	bf08      	it	eq
 800f664:	f043 0301 	orreq.w	r3, r3, #1
 800f668:	4820      	ldr	r0, [pc, #128]	; (800f6ec <HAL_TIM_Base_Start+0x164>)
 800f66a:	428a      	cmp	r2, r1
 800f66c:	bf08      	it	eq
 800f66e:	f043 0301 	orreq.w	r3, r3, #1
 800f672:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f676:	42a2      	cmp	r2, r4
 800f678:	bf08      	it	eq
 800f67a:	f043 0301 	orreq.w	r3, r3, #1
 800f67e:	4282      	cmp	r2, r0
 800f680:	bf08      	it	eq
 800f682:	f043 0301 	orreq.w	r3, r3, #1
 800f686:	428a      	cmp	r2, r1
 800f688:	bf08      	it	eq
 800f68a:	f043 0301 	orreq.w	r3, r3, #1
 800f68e:	b933      	cbnz	r3, 800f69e <HAL_TIM_Base_Start+0x116>
 800f690:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f694:	1a10      	subs	r0, r2, r0
 800f696:	fab0 f080 	clz	r0, r0
 800f69a:	0940      	lsrs	r0, r0, #5
 800f69c:	b1b8      	cbz	r0, 800f6ce <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f69e:	6891      	ldr	r1, [r2, #8]
 800f6a0:	4b13      	ldr	r3, [pc, #76]	; (800f6f0 <HAL_TIM_Base_Start+0x168>)
 800f6a2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f6a4:	2b06      	cmp	r3, #6
 800f6a6:	d00a      	beq.n	800f6be <HAL_TIM_Base_Start+0x136>
 800f6a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f6ac:	d007      	beq.n	800f6be <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800f6ae:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f6b0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f6b2:	f043 0301 	orr.w	r3, r3, #1
 800f6b6:	6013      	str	r3, [r2, #0]
}
 800f6b8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f6ba:	2001      	movs	r0, #1
}
 800f6bc:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f6be:	2000      	movs	r0, #0
}
 800f6c0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f6c2:	f240 1197 	movw	r1, #407	; 0x197
 800f6c6:	480b      	ldr	r0, [pc, #44]	; (800f6f4 <HAL_TIM_Base_Start+0x16c>)
 800f6c8:	f7f5 fc74 	bl	8004fb4 <assert_failed>
 800f6cc:	e7b5      	b.n	800f63a <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f6ce:	6813      	ldr	r3, [r2, #0]
 800f6d0:	f043 0301 	orr.w	r3, r3, #1
 800f6d4:	6013      	str	r3, [r2, #0]
}
 800f6d6:	bd38      	pop	{r3, r4, r5, pc}
 800f6d8:	40010000 	.word	0x40010000
 800f6dc:	40000400 	.word	0x40000400
 800f6e0:	40000800 	.word	0x40000800
 800f6e4:	40000c00 	.word	0x40000c00
 800f6e8:	40002000 	.word	0x40002000
 800f6ec:	40010400 	.word	0x40010400
 800f6f0:	00010007 	.word	0x00010007
 800f6f4:	0802cc04 	.word	0x0802cc04

0800f6f8 <HAL_TIM_Base_Start_IT>:
{
 800f6f8:	b538      	push	{r3, r4, r5, lr}
 800f6fa:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f6fc:	4b54      	ldr	r3, [pc, #336]	; (800f850 <HAL_TIM_Base_Start_IT+0x158>)
 800f6fe:	4d55      	ldr	r5, [pc, #340]	; (800f854 <HAL_TIM_Base_Start_IT+0x15c>)
 800f700:	6822      	ldr	r2, [r4, #0]
 800f702:	4955      	ldr	r1, [pc, #340]	; (800f858 <HAL_TIM_Base_Start_IT+0x160>)
 800f704:	429a      	cmp	r2, r3
 800f706:	bf18      	it	ne
 800f708:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f70c:	4853      	ldr	r0, [pc, #332]	; (800f85c <HAL_TIM_Base_Start_IT+0x164>)
 800f70e:	bf14      	ite	ne
 800f710:	2301      	movne	r3, #1
 800f712:	2300      	moveq	r3, #0
 800f714:	42aa      	cmp	r2, r5
 800f716:	bf0c      	ite	eq
 800f718:	2300      	moveq	r3, #0
 800f71a:	f003 0301 	andne.w	r3, r3, #1
 800f71e:	428a      	cmp	r2, r1
 800f720:	bf0c      	ite	eq
 800f722:	2300      	moveq	r3, #0
 800f724:	f003 0301 	andne.w	r3, r3, #1
 800f728:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f72c:	4282      	cmp	r2, r0
 800f72e:	bf0c      	ite	eq
 800f730:	2300      	moveq	r3, #0
 800f732:	f003 0301 	andne.w	r3, r3, #1
 800f736:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f73a:	428a      	cmp	r2, r1
 800f73c:	bf0c      	ite	eq
 800f73e:	2300      	moveq	r3, #0
 800f740:	f003 0301 	andne.w	r3, r3, #1
 800f744:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f748:	4282      	cmp	r2, r0
 800f74a:	bf0c      	ite	eq
 800f74c:	2300      	moveq	r3, #0
 800f74e:	f003 0301 	andne.w	r3, r3, #1
 800f752:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f756:	428a      	cmp	r2, r1
 800f758:	bf0c      	ite	eq
 800f75a:	2300      	moveq	r3, #0
 800f75c:	f003 0301 	andne.w	r3, r3, #1
 800f760:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f764:	4282      	cmp	r2, r0
 800f766:	bf0c      	ite	eq
 800f768:	2300      	moveq	r3, #0
 800f76a:	f003 0301 	andne.w	r3, r3, #1
 800f76e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f772:	428a      	cmp	r2, r1
 800f774:	bf0c      	ite	eq
 800f776:	2300      	moveq	r3, #0
 800f778:	f003 0301 	andne.w	r3, r3, #1
 800f77c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f780:	4282      	cmp	r2, r0
 800f782:	bf0c      	ite	eq
 800f784:	2300      	moveq	r3, #0
 800f786:	f003 0301 	andne.w	r3, r3, #1
 800f78a:	428a      	cmp	r2, r1
 800f78c:	bf0c      	ite	eq
 800f78e:	2300      	moveq	r3, #0
 800f790:	f003 0301 	andne.w	r3, r3, #1
 800f794:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f798:	428a      	cmp	r2, r1
 800f79a:	bf0c      	ite	eq
 800f79c:	2300      	moveq	r3, #0
 800f79e:	f003 0301 	andne.w	r3, r3, #1
 800f7a2:	b113      	cbz	r3, 800f7aa <HAL_TIM_Base_Start_IT+0xb2>
 800f7a4:	4b2e      	ldr	r3, [pc, #184]	; (800f860 <HAL_TIM_Base_Start_IT+0x168>)
 800f7a6:	429a      	cmp	r2, r3
 800f7a8:	d147      	bne.n	800f83a <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800f7aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d13f      	bne.n	800f832 <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7b2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f7b4:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7b6:	4b26      	ldr	r3, [pc, #152]	; (800f850 <HAL_TIM_Base_Start_IT+0x158>)
 800f7b8:	4d26      	ldr	r5, [pc, #152]	; (800f854 <HAL_TIM_Base_Start_IT+0x15c>)
 800f7ba:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f7be:	bf18      	it	ne
 800f7c0:	429a      	cmpne	r2, r3
 800f7c2:	4825      	ldr	r0, [pc, #148]	; (800f858 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f7c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7c8:	bf0c      	ite	eq
 800f7ca:	2301      	moveq	r3, #1
 800f7cc:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7ce:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7d0:	42aa      	cmp	r2, r5
 800f7d2:	bf08      	it	eq
 800f7d4:	f043 0301 	orreq.w	r3, r3, #1
 800f7d8:	4c20      	ldr	r4, [pc, #128]	; (800f85c <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7da:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7de:	4282      	cmp	r2, r0
 800f7e0:	bf08      	it	eq
 800f7e2:	f043 0301 	orreq.w	r3, r3, #1
 800f7e6:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f7ea:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f7ec:	42a2      	cmp	r2, r4
 800f7ee:	bf08      	it	eq
 800f7f0:	f043 0301 	orreq.w	r3, r3, #1
 800f7f4:	491b      	ldr	r1, [pc, #108]	; (800f864 <HAL_TIM_Base_Start_IT+0x16c>)
 800f7f6:	4282      	cmp	r2, r0
 800f7f8:	bf08      	it	eq
 800f7fa:	f043 0301 	orreq.w	r3, r3, #1
 800f7fe:	428a      	cmp	r2, r1
 800f800:	bf08      	it	eq
 800f802:	f043 0301 	orreq.w	r3, r3, #1
 800f806:	b933      	cbnz	r3, 800f816 <HAL_TIM_Base_Start_IT+0x11e>
 800f808:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f80c:	1a10      	subs	r0, r2, r0
 800f80e:	fab0 f080 	clz	r0, r0
 800f812:	0940      	lsrs	r0, r0, #5
 800f814:	b1b8      	cbz	r0, 800f846 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f816:	6891      	ldr	r1, [r2, #8]
 800f818:	4b13      	ldr	r3, [pc, #76]	; (800f868 <HAL_TIM_Base_Start_IT+0x170>)
 800f81a:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f81c:	2b06      	cmp	r3, #6
 800f81e:	d00a      	beq.n	800f836 <HAL_TIM_Base_Start_IT+0x13e>
 800f820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f824:	d007      	beq.n	800f836 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800f826:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f828:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f82a:	f043 0301 	orr.w	r3, r3, #1
 800f82e:	6013      	str	r3, [r2, #0]
}
 800f830:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f832:	2001      	movs	r0, #1
}
 800f834:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f836:	2000      	movs	r0, #0
}
 800f838:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f83a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800f83e:	480b      	ldr	r0, [pc, #44]	; (800f86c <HAL_TIM_Base_Start_IT+0x174>)
 800f840:	f7f5 fbb8 	bl	8004fb4 <assert_failed>
 800f844:	e7b1      	b.n	800f7aa <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f846:	6813      	ldr	r3, [r2, #0]
 800f848:	f043 0301 	orr.w	r3, r3, #1
 800f84c:	6013      	str	r3, [r2, #0]
}
 800f84e:	bd38      	pop	{r3, r4, r5, pc}
 800f850:	40010000 	.word	0x40010000
 800f854:	40000400 	.word	0x40000400
 800f858:	40000800 	.word	0x40000800
 800f85c:	40000c00 	.word	0x40000c00
 800f860:	40002000 	.word	0x40002000
 800f864:	40014000 	.word	0x40014000
 800f868:	00010007 	.word	0x00010007
 800f86c:	0802cc04 	.word	0x0802cc04

0800f870 <HAL_TIM_OC_MspInit>:
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop

0800f874 <HAL_TIM_PWM_MspInit>:
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop

0800f878 <HAL_TIM_IC_MspInit>:
 800f878:	4770      	bx	lr
 800f87a:	bf00      	nop

0800f87c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f87c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f880:	2b01      	cmp	r3, #1
 800f882:	f000 8151 	beq.w	800fb28 <HAL_TIM_ConfigClockSource+0x2ac>
 800f886:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f888:	2302      	movs	r3, #2
{
 800f88a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800f88c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f890:	460d      	mov	r5, r1
 800f892:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f896:	4604      	mov	r4, r0
 800f898:	680b      	ldr	r3, [r1, #0]
 800f89a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f89e:	bf18      	it	ne
 800f8a0:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800f8a4:	bf14      	ite	ne
 800f8a6:	2201      	movne	r2, #1
 800f8a8:	2200      	moveq	r2, #0
 800f8aa:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800f8ae:	f002 0201 	and.w	r2, r2, #1
 800f8b2:	bf08      	it	eq
 800f8b4:	2200      	moveq	r2, #0
 800f8b6:	b112      	cbz	r2, 800f8be <HAL_TIM_ConfigClockSource+0x42>
 800f8b8:	2940      	cmp	r1, #64	; 0x40
 800f8ba:	f040 8267 	bne.w	800fd8c <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800f8be:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800f8c0:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8c2:	499a      	ldr	r1, [pc, #616]	; (800fb2c <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800f8c4:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f8c6:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f8ca:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f8cc:	f000 8138 	beq.w	800fb40 <HAL_TIM_ConfigClockSource+0x2c4>
 800f8d0:	d84f      	bhi.n	800f972 <HAL_TIM_ConfigClockSource+0xf6>
 800f8d2:	2b40      	cmp	r3, #64	; 0x40
 800f8d4:	f000 81d7 	beq.w	800fc86 <HAL_TIM_ConfigClockSource+0x40a>
 800f8d8:	f240 80a2 	bls.w	800fa20 <HAL_TIM_ConfigClockSource+0x1a4>
 800f8dc:	2b50      	cmp	r3, #80	; 0x50
 800f8de:	f040 8097 	bne.w	800fa10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f8e2:	4b93      	ldr	r3, [pc, #588]	; (800fb30 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f8e4:	4993      	ldr	r1, [pc, #588]	; (800fb34 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	bf18      	it	ne
 800f8ea:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f8ee:	bf14      	ite	ne
 800f8f0:	2301      	movne	r3, #1
 800f8f2:	2300      	moveq	r3, #0
 800f8f4:	428a      	cmp	r2, r1
 800f8f6:	bf0c      	ite	eq
 800f8f8:	2300      	moveq	r3, #0
 800f8fa:	f003 0301 	andne.w	r3, r3, #1
 800f8fe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f902:	428a      	cmp	r2, r1
 800f904:	bf0c      	ite	eq
 800f906:	2300      	moveq	r3, #0
 800f908:	f003 0301 	andne.w	r3, r3, #1
 800f90c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f910:	428a      	cmp	r2, r1
 800f912:	bf0c      	ite	eq
 800f914:	2300      	moveq	r3, #0
 800f916:	f003 0301 	andne.w	r3, r3, #1
 800f91a:	b11b      	cbz	r3, 800f924 <HAL_TIM_ConfigClockSource+0xa8>
 800f91c:	4b86      	ldr	r3, [pc, #536]	; (800fb38 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f91e:	429a      	cmp	r2, r3
 800f920:	f040 8222 	bne.w	800fd68 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f924:	686b      	ldr	r3, [r5, #4]
 800f926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f92a:	bf18      	it	ne
 800f92c:	2b0a      	cmpne	r3, #10
 800f92e:	d003      	beq.n	800f938 <HAL_TIM_ConfigClockSource+0xbc>
 800f930:	f033 0302 	bics.w	r3, r3, #2
 800f934:	f040 81fe 	bne.w	800fd34 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f938:	68ee      	ldr	r6, [r5, #12]
 800f93a:	2e0f      	cmp	r6, #15
 800f93c:	f200 8242 	bhi.w	800fdc4 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f944:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f946:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f948:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f94c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f950:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f952:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f954:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f956:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f958:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f95c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f962:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f964:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f966:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f96a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f96e:	609a      	str	r2, [r3, #8]
}
 800f970:	e04f      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f976:	f000 812c 	beq.w	800fbd2 <HAL_TIM_ConfigClockSource+0x356>
 800f97a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f97e:	d17e      	bne.n	800fa7e <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f980:	4b6b      	ldr	r3, [pc, #428]	; (800fb30 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f982:	496c      	ldr	r1, [pc, #432]	; (800fb34 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f984:	429a      	cmp	r2, r3
 800f986:	bf18      	it	ne
 800f988:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f98c:	bf14      	ite	ne
 800f98e:	2301      	movne	r3, #1
 800f990:	2300      	moveq	r3, #0
 800f992:	428a      	cmp	r2, r1
 800f994:	bf0c      	ite	eq
 800f996:	2300      	moveq	r3, #0
 800f998:	f003 0301 	andne.w	r3, r3, #1
 800f99c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9a0:	428a      	cmp	r2, r1
 800f9a2:	bf0c      	ite	eq
 800f9a4:	2300      	moveq	r3, #0
 800f9a6:	f003 0301 	andne.w	r3, r3, #1
 800f9aa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f9ae:	428a      	cmp	r2, r1
 800f9b0:	bf0c      	ite	eq
 800f9b2:	2300      	moveq	r3, #0
 800f9b4:	f003 0301 	andne.w	r3, r3, #1
 800f9b8:	b11b      	cbz	r3, 800f9c2 <HAL_TIM_ConfigClockSource+0x146>
 800f9ba:	4b5f      	ldr	r3, [pc, #380]	; (800fb38 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	f040 81c5 	bne.w	800fd4c <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f9c2:	68ab      	ldr	r3, [r5, #8]
 800f9c4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f9c8:	f040 8210 	bne.w	800fdec <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f9cc:	686b      	ldr	r3, [r5, #4]
 800f9ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9d2:	bf18      	it	ne
 800f9d4:	2b0a      	cmpne	r3, #10
 800f9d6:	d003      	beq.n	800f9e0 <HAL_TIM_ConfigClockSource+0x164>
 800f9d8:	f033 0302 	bics.w	r3, r3, #2
 800f9dc:	f040 81a4 	bne.w	800fd28 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f9e0:	68ee      	ldr	r6, [r5, #12]
 800f9e2:	2e0f      	cmp	r6, #15
 800f9e4:	f200 81d9 	bhi.w	800fd9a <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800f9e8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f9ea:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f9ee:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f9f0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f9f2:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f9f4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f9f8:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f9fa:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f9fe:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800fa00:	6893      	ldr	r3, [r2, #8]
 800fa02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800fa06:	6093      	str	r3, [r2, #8]
      break;
 800fa08:	e003      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800fa0a:	f033 0110 	bics.w	r1, r3, #16
 800fa0e:	d00c      	beq.n	800fa2a <HAL_TIM_ConfigClockSource+0x1ae>
 800fa10:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800fa12:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800fa14:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800fa16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fa1a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800fa1e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800fa20:	2b20      	cmp	r3, #32
 800fa22:	d002      	beq.n	800fa2a <HAL_TIM_ConfigClockSource+0x1ae>
 800fa24:	d9f1      	bls.n	800fa0a <HAL_TIM_ConfigClockSource+0x18e>
 800fa26:	2b30      	cmp	r3, #48	; 0x30
 800fa28:	d1f2      	bne.n	800fa10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800fa2a:	4941      	ldr	r1, [pc, #260]	; (800fb30 <HAL_TIM_ConfigClockSource+0x2b4>)
 800fa2c:	4841      	ldr	r0, [pc, #260]	; (800fb34 <HAL_TIM_ConfigClockSource+0x2b8>)
 800fa2e:	428a      	cmp	r2, r1
 800fa30:	bf18      	it	ne
 800fa32:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fa36:	bf14      	ite	ne
 800fa38:	2101      	movne	r1, #1
 800fa3a:	2100      	moveq	r1, #0
 800fa3c:	4282      	cmp	r2, r0
 800fa3e:	bf0c      	ite	eq
 800fa40:	2100      	moveq	r1, #0
 800fa42:	f001 0101 	andne.w	r1, r1, #1
 800fa46:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800fa4a:	4282      	cmp	r2, r0
 800fa4c:	bf0c      	ite	eq
 800fa4e:	2100      	moveq	r1, #0
 800fa50:	f001 0101 	andne.w	r1, r1, #1
 800fa54:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800fa58:	4282      	cmp	r2, r0
 800fa5a:	bf0c      	ite	eq
 800fa5c:	2100      	moveq	r1, #0
 800fa5e:	f001 0101 	andne.w	r1, r1, #1
 800fa62:	b119      	cbz	r1, 800fa6c <HAL_TIM_ConfigClockSource+0x1f0>
 800fa64:	4934      	ldr	r1, [pc, #208]	; (800fb38 <HAL_TIM_ConfigClockSource+0x2bc>)
 800fa66:	428a      	cmp	r2, r1
 800fa68:	f040 8176 	bne.w	800fd58 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800fa6c:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800fa6e:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800fa70:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fa74:	430b      	orrs	r3, r1
 800fa76:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800fa7a:	6093      	str	r3, [r2, #8]
}
 800fa7c:	e7c9      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800fa7e:	2b70      	cmp	r3, #112	; 0x70
 800fa80:	d1c6      	bne.n	800fa10 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fa82:	4b2b      	ldr	r3, [pc, #172]	; (800fb30 <HAL_TIM_ConfigClockSource+0x2b4>)
 800fa84:	492b      	ldr	r1, [pc, #172]	; (800fb34 <HAL_TIM_ConfigClockSource+0x2b8>)
 800fa86:	429a      	cmp	r2, r3
 800fa88:	bf18      	it	ne
 800fa8a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	428a      	cmp	r2, r1
 800fa96:	bf0c      	ite	eq
 800fa98:	2300      	moveq	r3, #0
 800fa9a:	f003 0301 	andne.w	r3, r3, #1
 800fa9e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800faa2:	428a      	cmp	r2, r1
 800faa4:	bf0c      	ite	eq
 800faa6:	2300      	moveq	r3, #0
 800faa8:	f003 0301 	andne.w	r3, r3, #1
 800faac:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fab0:	428a      	cmp	r2, r1
 800fab2:	bf0c      	ite	eq
 800fab4:	2300      	moveq	r3, #0
 800fab6:	f003 0301 	andne.w	r3, r3, #1
 800faba:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800fabe:	428a      	cmp	r2, r1
 800fac0:	bf0c      	ite	eq
 800fac2:	2300      	moveq	r3, #0
 800fac4:	f003 0301 	andne.w	r3, r3, #1
 800fac8:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800facc:	428a      	cmp	r2, r1
 800face:	bf0c      	ite	eq
 800fad0:	2300      	moveq	r3, #0
 800fad2:	f003 0301 	andne.w	r3, r3, #1
 800fad6:	b11b      	cbz	r3, 800fae0 <HAL_TIM_ConfigClockSource+0x264>
 800fad8:	4b18      	ldr	r3, [pc, #96]	; (800fb3c <HAL_TIM_ConfigClockSource+0x2c0>)
 800fada:	429a      	cmp	r2, r3
 800fadc:	f040 818c 	bne.w	800fdf8 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fae0:	68ab      	ldr	r3, [r5, #8]
 800fae2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800fae6:	f040 817b 	bne.w	800fde0 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800faea:	686b      	ldr	r3, [r5, #4]
 800faec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800faf0:	bf18      	it	ne
 800faf2:	2b0a      	cmpne	r3, #10
 800faf4:	d003      	beq.n	800fafe <HAL_TIM_ConfigClockSource+0x282>
 800faf6:	f033 0302 	bics.w	r3, r3, #2
 800fafa:	f040 8121 	bne.w	800fd40 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fafe:	68ee      	ldr	r6, [r5, #12]
 800fb00:	2e0f      	cmp	r6, #15
 800fb02:	f200 8166 	bhi.w	800fdd2 <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800fb06:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800fb08:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800fb0c:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb0e:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fb10:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb12:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800fb16:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb18:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800fb1c:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800fb1e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800fb20:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800fb24:	6093      	str	r3, [r2, #8]
      break;
 800fb26:	e774      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800fb28:	2002      	movs	r0, #2
}
 800fb2a:	4770      	bx	lr
 800fb2c:	fffe0088 	.word	0xfffe0088
 800fb30:	40010000 	.word	0x40010000
 800fb34:	40000400 	.word	0x40000400
 800fb38:	40010400 	.word	0x40010400
 800fb3c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fb40:	4bb0      	ldr	r3, [pc, #704]	; (800fe04 <HAL_TIM_ConfigClockSource+0x588>)
 800fb42:	49b1      	ldr	r1, [pc, #708]	; (800fe08 <HAL_TIM_ConfigClockSource+0x58c>)
 800fb44:	429a      	cmp	r2, r3
 800fb46:	bf18      	it	ne
 800fb48:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fb4c:	bf14      	ite	ne
 800fb4e:	2301      	movne	r3, #1
 800fb50:	2300      	moveq	r3, #0
 800fb52:	428a      	cmp	r2, r1
 800fb54:	bf0c      	ite	eq
 800fb56:	2300      	moveq	r3, #0
 800fb58:	f003 0301 	andne.w	r3, r3, #1
 800fb5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb60:	428a      	cmp	r2, r1
 800fb62:	bf0c      	ite	eq
 800fb64:	2300      	moveq	r3, #0
 800fb66:	f003 0301 	andne.w	r3, r3, #1
 800fb6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fb6e:	428a      	cmp	r2, r1
 800fb70:	bf0c      	ite	eq
 800fb72:	2300      	moveq	r3, #0
 800fb74:	f003 0301 	andne.w	r3, r3, #1
 800fb78:	b11b      	cbz	r3, 800fb82 <HAL_TIM_ConfigClockSource+0x306>
 800fb7a:	4ba4      	ldr	r3, [pc, #656]	; (800fe0c <HAL_TIM_ConfigClockSource+0x590>)
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	f040 80ff 	bne.w	800fd80 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fb82:	686b      	ldr	r3, [r5, #4]
 800fb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb88:	bf18      	it	ne
 800fb8a:	2b0a      	cmpne	r3, #10
 800fb8c:	d003      	beq.n	800fb96 <HAL_TIM_ConfigClockSource+0x31a>
 800fb8e:	f033 0302 	bics.w	r3, r3, #2
 800fb92:	f040 80c3 	bne.w	800fd1c <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fb96:	68ee      	ldr	r6, [r5, #12]
 800fb98:	2e0f      	cmp	r6, #15
 800fb9a:	f200 810c 	bhi.w	800fdb6 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fba2:	6a18      	ldr	r0, [r3, #32]
 800fba4:	f020 0010 	bic.w	r0, r0, #16
 800fba8:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800fbaa:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800fbac:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800fbae:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fbb0:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fbb4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fbb8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800fbbc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800fbc0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800fbc2:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800fbc4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800fbc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fbca:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800fbce:	609a      	str	r2, [r3, #8]
}
 800fbd0:	e71f      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fbd2:	4b8c      	ldr	r3, [pc, #560]	; (800fe04 <HAL_TIM_ConfigClockSource+0x588>)
 800fbd4:	488c      	ldr	r0, [pc, #560]	; (800fe08 <HAL_TIM_ConfigClockSource+0x58c>)
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	bf18      	it	ne
 800fbda:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fbde:	498c      	ldr	r1, [pc, #560]	; (800fe10 <HAL_TIM_ConfigClockSource+0x594>)
 800fbe0:	bf14      	ite	ne
 800fbe2:	2301      	movne	r3, #1
 800fbe4:	2300      	moveq	r3, #0
 800fbe6:	4282      	cmp	r2, r0
 800fbe8:	bf0c      	ite	eq
 800fbea:	2300      	moveq	r3, #0
 800fbec:	f003 0301 	andne.w	r3, r3, #1
 800fbf0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fbf4:	428a      	cmp	r2, r1
 800fbf6:	bf0c      	ite	eq
 800fbf8:	2300      	moveq	r3, #0
 800fbfa:	f003 0301 	andne.w	r3, r3, #1
 800fbfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc02:	4282      	cmp	r2, r0
 800fc04:	bf0c      	ite	eq
 800fc06:	2300      	moveq	r3, #0
 800fc08:	f003 0301 	andne.w	r3, r3, #1
 800fc0c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fc10:	428a      	cmp	r2, r1
 800fc12:	bf0c      	ite	eq
 800fc14:	2300      	moveq	r3, #0
 800fc16:	f003 0301 	andne.w	r3, r3, #1
 800fc1a:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fc1e:	4282      	cmp	r2, r0
 800fc20:	bf0c      	ite	eq
 800fc22:	2300      	moveq	r3, #0
 800fc24:	f003 0301 	andne.w	r3, r3, #1
 800fc28:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fc2c:	428a      	cmp	r2, r1
 800fc2e:	bf0c      	ite	eq
 800fc30:	2300      	moveq	r3, #0
 800fc32:	f003 0301 	andne.w	r3, r3, #1
 800fc36:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fc3a:	4282      	cmp	r2, r0
 800fc3c:	bf0c      	ite	eq
 800fc3e:	2300      	moveq	r3, #0
 800fc40:	f003 0301 	andne.w	r3, r3, #1
 800fc44:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fc48:	428a      	cmp	r2, r1
 800fc4a:	bf0c      	ite	eq
 800fc4c:	2300      	moveq	r3, #0
 800fc4e:	f003 0301 	andne.w	r3, r3, #1
 800fc52:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800fc56:	4282      	cmp	r2, r0
 800fc58:	bf0c      	ite	eq
 800fc5a:	2300      	moveq	r3, #0
 800fc5c:	f003 0301 	andne.w	r3, r3, #1
 800fc60:	428a      	cmp	r2, r1
 800fc62:	bf0c      	ite	eq
 800fc64:	2300      	moveq	r3, #0
 800fc66:	f003 0301 	andne.w	r3, r3, #1
 800fc6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fc6e:	428a      	cmp	r2, r1
 800fc70:	bf0c      	ite	eq
 800fc72:	2300      	moveq	r3, #0
 800fc74:	f003 0301 	andne.w	r3, r3, #1
 800fc78:	b11b      	cbz	r3, 800fc82 <HAL_TIM_ConfigClockSource+0x406>
 800fc7a:	4b66      	ldr	r3, [pc, #408]	; (800fe14 <HAL_TIM_ConfigClockSource+0x598>)
 800fc7c:	429a      	cmp	r2, r3
 800fc7e:	f040 80cd 	bne.w	800fe1c <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800fc82:	2000      	movs	r0, #0
 800fc84:	e6c5      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fc86:	4b5f      	ldr	r3, [pc, #380]	; (800fe04 <HAL_TIM_ConfigClockSource+0x588>)
 800fc88:	495f      	ldr	r1, [pc, #380]	; (800fe08 <HAL_TIM_ConfigClockSource+0x58c>)
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	bf18      	it	ne
 800fc8e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fc92:	bf14      	ite	ne
 800fc94:	2301      	movne	r3, #1
 800fc96:	2300      	moveq	r3, #0
 800fc98:	428a      	cmp	r2, r1
 800fc9a:	bf0c      	ite	eq
 800fc9c:	2300      	moveq	r3, #0
 800fc9e:	f003 0301 	andne.w	r3, r3, #1
 800fca2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fca6:	428a      	cmp	r2, r1
 800fca8:	bf0c      	ite	eq
 800fcaa:	2300      	moveq	r3, #0
 800fcac:	f003 0301 	andne.w	r3, r3, #1
 800fcb0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fcb4:	428a      	cmp	r2, r1
 800fcb6:	bf0c      	ite	eq
 800fcb8:	2300      	moveq	r3, #0
 800fcba:	f003 0301 	andne.w	r3, r3, #1
 800fcbe:	b113      	cbz	r3, 800fcc6 <HAL_TIM_ConfigClockSource+0x44a>
 800fcc0:	4b52      	ldr	r3, [pc, #328]	; (800fe0c <HAL_TIM_ConfigClockSource+0x590>)
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d156      	bne.n	800fd74 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fcc6:	686b      	ldr	r3, [r5, #4]
 800fcc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fccc:	bf18      	it	ne
 800fcce:	2b0a      	cmpne	r3, #10
 800fcd0:	d002      	beq.n	800fcd8 <HAL_TIM_ConfigClockSource+0x45c>
 800fcd2:	f033 0302 	bics.w	r3, r3, #2
 800fcd6:	d11b      	bne.n	800fd10 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fcd8:	68ee      	ldr	r6, [r5, #12]
 800fcda:	2e0f      	cmp	r6, #15
 800fcdc:	d864      	bhi.n	800fda8 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fcde:	6823      	ldr	r3, [r4, #0]
 800fce0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800fce2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fce4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fce6:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcea:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800fcee:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800fcf0:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcf2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcf4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fcf6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fcfa:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800fcfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd00:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800fd02:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800fd04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fd08:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800fd0c:	609a      	str	r2, [r3, #8]
}
 800fd0e:	e680      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd10:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800fd14:	4840      	ldr	r0, [pc, #256]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd16:	f7f5 f94d 	bl	8004fb4 <assert_failed>
 800fd1a:	e7dd      	b.n	800fcd8 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd1c:	f241 5196 	movw	r1, #5526	; 0x1596
 800fd20:	483d      	ldr	r0, [pc, #244]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd22:	f7f5 f947 	bl	8004fb4 <assert_failed>
 800fd26:	e736      	b.n	800fb96 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd28:	f241 5173 	movw	r1, #5491	; 0x1573
 800fd2c:	483a      	ldr	r0, [pc, #232]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd2e:	f7f5 f941 	bl	8004fb4 <assert_failed>
 800fd32:	e655      	b.n	800f9e0 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd34:	f241 5186 	movw	r1, #5510	; 0x1586
 800fd38:	4837      	ldr	r0, [pc, #220]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd3a:	f7f5 f93b 	bl	8004fb4 <assert_failed>
 800fd3e:	e5fb      	b.n	800f938 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800fd40:	f241 515b 	movw	r1, #5467	; 0x155b
 800fd44:	4834      	ldr	r0, [pc, #208]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd46:	f7f5 f935 	bl	8004fb4 <assert_failed>
 800fd4a:	e6d8      	b.n	800fafe <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800fd4c:	f241 516f 	movw	r1, #5487	; 0x156f
 800fd50:	4831      	ldr	r0, [pc, #196]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd52:	f7f5 f92f 	bl	8004fb4 <assert_failed>
 800fd56:	e634      	b.n	800f9c2 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800fd58:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800fd5c:	482e      	ldr	r0, [pc, #184]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd5e:	f7f5 f929 	bl	8004fb4 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800fd62:	6822      	ldr	r2, [r4, #0]
 800fd64:	682b      	ldr	r3, [r5, #0]
 800fd66:	e681      	b.n	800fa6c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd68:	f241 5183 	movw	r1, #5507	; 0x1583
 800fd6c:	482a      	ldr	r0, [pc, #168]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd6e:	f7f5 f921 	bl	8004fb4 <assert_failed>
 800fd72:	e5d7      	b.n	800f924 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd74:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800fd78:	4827      	ldr	r0, [pc, #156]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd7a:	f7f5 f91b 	bl	8004fb4 <assert_failed>
 800fd7e:	e7a2      	b.n	800fcc6 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800fd80:	f241 5193 	movw	r1, #5523	; 0x1593
 800fd84:	4824      	ldr	r0, [pc, #144]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd86:	f7f5 f915 	bl	8004fb4 <assert_failed>
 800fd8a:	e6fa      	b.n	800fb82 <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800fd8c:	f241 5144 	movw	r1, #5444	; 0x1544
 800fd90:	4821      	ldr	r0, [pc, #132]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fd92:	f7f5 f90f 	bl	8004fb4 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800fd96:	682b      	ldr	r3, [r5, #0]
 800fd98:	e591      	b.n	800f8be <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fd9a:	f241 5174 	movw	r1, #5492	; 0x1574
 800fd9e:	481e      	ldr	r0, [pc, #120]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fda0:	f7f5 f908 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fda4:	68ee      	ldr	r6, [r5, #12]
 800fda6:	e61f      	b.n	800f9e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fda8:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800fdac:	481a      	ldr	r0, [pc, #104]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdae:	f7f5 f901 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdb2:	68ee      	ldr	r6, [r5, #12]
 800fdb4:	e793      	b.n	800fcde <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdb6:	f241 5197 	movw	r1, #5527	; 0x1597
 800fdba:	4817      	ldr	r0, [pc, #92]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdbc:	f7f5 f8fa 	bl	8004fb4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800fdc0:	68ee      	ldr	r6, [r5, #12]
 800fdc2:	e6ec      	b.n	800fb9e <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdc4:	f241 5187 	movw	r1, #5511	; 0x1587
 800fdc8:	4813      	ldr	r0, [pc, #76]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdca:	f7f5 f8f3 	bl	8004fb4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800fdce:	68ee      	ldr	r6, [r5, #12]
 800fdd0:	e5b6      	b.n	800f940 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800fdd2:	f241 515c 	movw	r1, #5468	; 0x155c
 800fdd6:	4810      	ldr	r0, [pc, #64]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdd8:	f7f5 f8ec 	bl	8004fb4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800fddc:	68ee      	ldr	r6, [r5, #12]
 800fdde:	e692      	b.n	800fb06 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fde0:	f241 515a 	movw	r1, #5466	; 0x155a
 800fde4:	480c      	ldr	r0, [pc, #48]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fde6:	f7f5 f8e5 	bl	8004fb4 <assert_failed>
 800fdea:	e67e      	b.n	800faea <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800fdec:	f241 5172 	movw	r1, #5490	; 0x1572
 800fdf0:	4809      	ldr	r0, [pc, #36]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdf2:	f7f5 f8df 	bl	8004fb4 <assert_failed>
 800fdf6:	e5e9      	b.n	800f9cc <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800fdf8:	f241 5157 	movw	r1, #5463	; 0x1557
 800fdfc:	4806      	ldr	r0, [pc, #24]	; (800fe18 <HAL_TIM_ConfigClockSource+0x59c>)
 800fdfe:	f7f5 f8d9 	bl	8004fb4 <assert_failed>
 800fe02:	e66d      	b.n	800fae0 <HAL_TIM_ConfigClockSource+0x264>
 800fe04:	40010000 	.word	0x40010000
 800fe08:	40000400 	.word	0x40000400
 800fe0c:	40010400 	.word	0x40010400
 800fe10:	40000800 	.word	0x40000800
 800fe14:	40002000 	.word	0x40002000
 800fe18:	0802cc04 	.word	0x0802cc04
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe1c:	4803      	ldr	r0, [pc, #12]	; (800fe2c <HAL_TIM_ConfigClockSource+0x5b0>)
 800fe1e:	f241 5150 	movw	r1, #5456	; 0x1550
 800fe22:	f7f5 f8c7 	bl	8004fb4 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800fe26:	2000      	movs	r0, #0
 800fe28:	e5f3      	b.n	800fa12 <HAL_TIM_ConfigClockSource+0x196>
 800fe2a:	bf00      	nop
 800fe2c:	0802cc04 	.word	0x0802cc04

0800fe30 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe30:	6802      	ldr	r2, [r0, #0]
{
 800fe32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe34:	4b39      	ldr	r3, [pc, #228]	; (800ff1c <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800fe36:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe38:	4f39      	ldr	r7, [pc, #228]	; (800ff20 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800fe3a:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	bf18      	it	ne
 800fe40:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800fe44:	4e37      	ldr	r6, [pc, #220]	; (800ff24 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800fe46:	4938      	ldr	r1, [pc, #224]	; (800ff28 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800fe48:	bf14      	ite	ne
 800fe4a:	2301      	movne	r3, #1
 800fe4c:	2300      	moveq	r3, #0
 800fe4e:	42ba      	cmp	r2, r7
 800fe50:	bf0c      	ite	eq
 800fe52:	2300      	moveq	r3, #0
 800fe54:	f003 0301 	andne.w	r3, r3, #1
 800fe58:	42b2      	cmp	r2, r6
 800fe5a:	bf0c      	ite	eq
 800fe5c:	2300      	moveq	r3, #0
 800fe5e:	f003 0301 	andne.w	r3, r3, #1
 800fe62:	428a      	cmp	r2, r1
 800fe64:	bf0c      	ite	eq
 800fe66:	2300      	moveq	r3, #0
 800fe68:	f003 0301 	andne.w	r3, r3, #1
 800fe6c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800fe70:	428a      	cmp	r2, r1
 800fe72:	bf0c      	ite	eq
 800fe74:	2300      	moveq	r3, #0
 800fe76:	f003 0301 	andne.w	r3, r3, #1
 800fe7a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800fe7e:	428a      	cmp	r2, r1
 800fe80:	bf0c      	ite	eq
 800fe82:	2300      	moveq	r3, #0
 800fe84:	f003 0301 	andne.w	r3, r3, #1
 800fe88:	b113      	cbz	r3, 800fe90 <HAL_TIM_SlaveConfigSynchro+0x60>
 800fe8a:	4b28      	ldr	r3, [pc, #160]	; (800ff2c <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d138      	bne.n	800ff02 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800fe90:	682b      	ldr	r3, [r5, #0]
 800fe92:	1f1a      	subs	r2, r3, #4
 800fe94:	2a03      	cmp	r2, #3
 800fe96:	d902      	bls.n	800fe9e <HAL_TIM_SlaveConfigSynchro+0x6e>
 800fe98:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800fe9c:	d12b      	bne.n	800fef6 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800fe9e:	686b      	ldr	r3, [r5, #4]
 800fea0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800fea4:	2b40      	cmp	r3, #64	; 0x40
 800fea6:	d000      	beq.n	800feaa <HAL_TIM_SlaveConfigSynchro+0x7a>
 800fea8:	bb8b      	cbnz	r3, 800ff0e <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800feaa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d01f      	beq.n	800fef2 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800feb2:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800feb4:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800feb6:	4629      	mov	r1, r5
 800feb8:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800feba:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800febe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800fec2:	f7ff f933 	bl	800f12c <TIM_SlaveTimer_SetConfig>
 800fec6:	b968      	cbnz	r0, 800fee4 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	68da      	ldr	r2, [r3, #12]
 800fecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fed0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800fed2:	68da      	ldr	r2, [r3, #12]
 800fed4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800fed8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800feda:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800fede:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800fee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800fee4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800fee6:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800fee8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800feec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800fef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800fef2:	2002      	movs	r0, #2
}
 800fef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800fef6:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800fefa:	480d      	ldr	r0, [pc, #52]	; (800ff30 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800fefc:	f7f5 f85a 	bl	8004fb4 <assert_failed>
 800ff00:	e7cd      	b.n	800fe9e <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800ff02:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800ff06:	480a      	ldr	r0, [pc, #40]	; (800ff30 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ff08:	f7f5 f854 	bl	8004fb4 <assert_failed>
 800ff0c:	e7c0      	b.n	800fe90 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800ff0e:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800ff12:	4807      	ldr	r0, [pc, #28]	; (800ff30 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800ff14:	f7f5 f84e 	bl	8004fb4 <assert_failed>
 800ff18:	e7c7      	b.n	800feaa <HAL_TIM_SlaveConfigSynchro+0x7a>
 800ff1a:	bf00      	nop
 800ff1c:	40010000 	.word	0x40010000
 800ff20:	40000400 	.word	0x40000400
 800ff24:	40000800 	.word	0x40000800
 800ff28:	40000c00 	.word	0x40000c00
 800ff2c:	40001800 	.word	0x40001800
 800ff30:	0802cc04 	.word	0x0802cc04

0800ff34 <HAL_TIM_OC_DelayElapsedCallback>:
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <TIM_DMACaptureCplt>:
{
 800ff38:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff3e:	4283      	cmp	r3, r0
 800ff40:	d01e      	beq.n	800ff80 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ff44:	4283      	cmp	r3, r0
 800ff46:	d00b      	beq.n	800ff60 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ff48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff4a:	4283      	cmp	r3, r0
 800ff4c:	d027      	beq.n	800ff9e <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ff4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ff50:	4283      	cmp	r3, r0
 800ff52:	d02f      	beq.n	800ffb4 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800ff54:	4620      	mov	r0, r4
 800ff56:	f7f3 ff09 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	7723      	strb	r3, [r4, #28]
}
 800ff5e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff60:	2202      	movs	r2, #2
 800ff62:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ff64:	69db      	ldr	r3, [r3, #28]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1f4      	bne.n	800ff54 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff6a:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800ff6c:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff6e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ff72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800ff76:	f7f3 fef9 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	7723      	strb	r3, [r4, #28]
}
 800ff7e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff80:	2201      	movs	r2, #1
 800ff82:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ff84:	69db      	ldr	r3, [r3, #28]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d1e4      	bne.n	800ff54 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff8a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800ff8e:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff90:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800ff94:	f7f3 feea 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	7723      	strb	r3, [r4, #28]
}
 800ff9c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ff9e:	2204      	movs	r2, #4
 800ffa0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ffa2:	69db      	ldr	r3, [r3, #28]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d1d5      	bne.n	800ff54 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ffb2:	e7cf      	b.n	800ff54 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffb4:	2208      	movs	r2, #8
 800ffb6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1ca      	bne.n	800ff54 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffc4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800ffc8:	e7c4      	b.n	800ff54 <TIM_DMACaptureCplt+0x1c>
 800ffca:	bf00      	nop

0800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800ffcc:	4770      	bx	lr
 800ffce:	bf00      	nop

0800ffd0 <TIM_DMACaptureHalfCplt>:
{
 800ffd0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ffd2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ffd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ffd6:	4283      	cmp	r3, r0
 800ffd8:	d016      	beq.n	8010008 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ffda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ffdc:	4283      	cmp	r3, r0
 800ffde:	d00b      	beq.n	800fff8 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ffe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ffe2:	4283      	cmp	r3, r0
 800ffe4:	d018      	beq.n	8010018 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ffe6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ffe8:	4283      	cmp	r3, r0
 800ffea:	d01d      	beq.n	8010028 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ffec:	4620      	mov	r0, r4
 800ffee:	f7ff ffed 	bl	800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fff2:	2300      	movs	r3, #0
 800fff4:	7723      	strb	r3, [r4, #28]
}
 800fff6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fff8:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fffa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fffc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fffe:	f7ff ffe5 	bl	800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010002:	2300      	movs	r3, #0
 8010004:	7723      	strb	r3, [r4, #28]
}
 8010006:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010008:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801000a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801000c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801000e:	f7ff ffdd 	bl	800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010012:	2300      	movs	r3, #0
 8010014:	7723      	strb	r3, [r4, #28]
}
 8010016:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010018:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801001a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801001c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801001e:	f7ff ffd5 	bl	800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010022:	2300      	movs	r3, #0
 8010024:	7723      	strb	r3, [r4, #28]
}
 8010026:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010028:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801002a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801002c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 801002e:	f7ff ffcd 	bl	800ffcc <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010032:	2300      	movs	r3, #0
 8010034:	7723      	strb	r3, [r4, #28]
}
 8010036:	bd10      	pop	{r4, pc}

08010038 <HAL_TIM_PWM_PulseFinishedCallback>:
 8010038:	4770      	bx	lr
 801003a:	bf00      	nop

0801003c <HAL_TIM_TriggerCallback>:
 801003c:	4770      	bx	lr
 801003e:	bf00      	nop

08010040 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010040:	6803      	ldr	r3, [r0, #0]
 8010042:	691a      	ldr	r2, [r3, #16]
 8010044:	0791      	lsls	r1, r2, #30
{
 8010046:	b510      	push	{r4, lr}
 8010048:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801004a:	d502      	bpl.n	8010052 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801004c:	68da      	ldr	r2, [r3, #12]
 801004e:	0792      	lsls	r2, r2, #30
 8010050:	d468      	bmi.n	8010124 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010052:	691a      	ldr	r2, [r3, #16]
 8010054:	0752      	lsls	r2, r2, #29
 8010056:	d502      	bpl.n	801005e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010058:	68da      	ldr	r2, [r3, #12]
 801005a:	0750      	lsls	r0, r2, #29
 801005c:	d44f      	bmi.n	80100fe <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801005e:	691a      	ldr	r2, [r3, #16]
 8010060:	0711      	lsls	r1, r2, #28
 8010062:	d502      	bpl.n	801006a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010064:	68da      	ldr	r2, [r3, #12]
 8010066:	0712      	lsls	r2, r2, #28
 8010068:	d437      	bmi.n	80100da <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801006a:	691a      	ldr	r2, [r3, #16]
 801006c:	06d0      	lsls	r0, r2, #27
 801006e:	d502      	bpl.n	8010076 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010070:	68da      	ldr	r2, [r3, #12]
 8010072:	06d1      	lsls	r1, r2, #27
 8010074:	d41e      	bmi.n	80100b4 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010076:	691a      	ldr	r2, [r3, #16]
 8010078:	07d2      	lsls	r2, r2, #31
 801007a:	d502      	bpl.n	8010082 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801007c:	68da      	ldr	r2, [r3, #12]
 801007e:	07d0      	lsls	r0, r2, #31
 8010080:	d469      	bmi.n	8010156 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010082:	691a      	ldr	r2, [r3, #16]
 8010084:	0611      	lsls	r1, r2, #24
 8010086:	d502      	bpl.n	801008e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	0612      	lsls	r2, r2, #24
 801008c:	d46b      	bmi.n	8010166 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801008e:	691a      	ldr	r2, [r3, #16]
 8010090:	05d0      	lsls	r0, r2, #23
 8010092:	d502      	bpl.n	801009a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010094:	68da      	ldr	r2, [r3, #12]
 8010096:	0611      	lsls	r1, r2, #24
 8010098:	d46d      	bmi.n	8010176 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801009a:	691a      	ldr	r2, [r3, #16]
 801009c:	0652      	lsls	r2, r2, #25
 801009e:	d502      	bpl.n	80100a6 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80100a0:	68da      	ldr	r2, [r3, #12]
 80100a2:	0650      	lsls	r0, r2, #25
 80100a4:	d46f      	bmi.n	8010186 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80100a6:	691a      	ldr	r2, [r3, #16]
 80100a8:	0691      	lsls	r1, r2, #26
 80100aa:	d502      	bpl.n	80100b2 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	0692      	lsls	r2, r2, #26
 80100b0:	d449      	bmi.n	8010146 <HAL_TIM_IRQHandler+0x106>
}
 80100b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100b4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100b8:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 80100ba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80100bc:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100be:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100c0:	69db      	ldr	r3, [r3, #28]
 80100c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80100c6:	d16f      	bne.n	80101a8 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100c8:	f7ff ff34 	bl	800ff34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100cc:	4620      	mov	r0, r4
 80100ce:	f7ff ffb3 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100d2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100d4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100d6:	7722      	strb	r2, [r4, #28]
 80100d8:	e7cd      	b.n	8010076 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100da:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100de:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 80100e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80100e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80100e6:	69db      	ldr	r3, [r3, #28]
 80100e8:	079b      	lsls	r3, r3, #30
 80100ea:	d15a      	bne.n	80101a2 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100ec:	f7ff ff22 	bl	800ff34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f0:	4620      	mov	r0, r4
 80100f2:	f7ff ffa1 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100f6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80100f8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fa:	7722      	strb	r2, [r4, #28]
 80100fc:	e7b5      	b.n	801006a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80100fe:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010102:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8010104:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010106:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010108:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801010a:	699b      	ldr	r3, [r3, #24]
 801010c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8010110:	d144      	bne.n	801019c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010112:	f7ff ff0f 	bl	800ff34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010116:	4620      	mov	r0, r4
 8010118:	f7ff ff8e 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801011c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801011e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010120:	7722      	strb	r2, [r4, #28]
 8010122:	e79c      	b.n	801005e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010124:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010128:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801012a:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801012c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801012e:	699b      	ldr	r3, [r3, #24]
 8010130:	0799      	lsls	r1, r3, #30
 8010132:	d130      	bne.n	8010196 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010134:	f7ff fefe 	bl	800ff34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010138:	4620      	mov	r0, r4
 801013a:	f7ff ff7d 	bl	8010038 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801013e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010140:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010142:	7722      	strb	r2, [r4, #28]
 8010144:	e785      	b.n	8010052 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010146:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 801014a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801014c:	611a      	str	r2, [r3, #16]
}
 801014e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8010152:	f001 be53 	b.w	8011dfc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010156:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 801015a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801015c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801015e:	f7f3 fe7b 	bl	8003e58 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010162:	6823      	ldr	r3, [r4, #0]
 8010164:	e78d      	b.n	8010082 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010166:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 801016a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801016c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801016e:	f001 fe47 	bl	8011e00 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010172:	6823      	ldr	r3, [r4, #0]
 8010174:	e78b      	b.n	801008e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010176:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 801017a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801017c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 801017e:	f001 fe41 	bl	8011e04 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	e789      	b.n	801009a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010186:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 801018a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801018c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801018e:	f7ff ff55 	bl	801003c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010192:	6823      	ldr	r3, [r4, #0]
 8010194:	e787      	b.n	80100a6 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8010196:	f7f3 fde9 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 801019a:	e7d0      	b.n	801013e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 801019c:	f7f3 fde6 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101a0:	e7bc      	b.n	801011c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 80101a2:	f7f3 fde3 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101a6:	e7a6      	b.n	80100f6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 80101a8:	f7f3 fde0 	bl	8003d6c <HAL_TIM_IC_CaptureCallback>
 80101ac:	e791      	b.n	80100d2 <HAL_TIM_IRQHandler+0x92>
 80101ae:	bf00      	nop

080101b0 <HAL_TIM_ErrorCallback>:
 80101b0:	4770      	bx	lr
 80101b2:	bf00      	nop

080101b4 <TIM_DMAError>:
{
 80101b4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101ba:	4283      	cmp	r3, r0
 80101bc:	d01c      	beq.n	80101f8 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80101c0:	4283      	cmp	r3, r0
 80101c2:	d00e      	beq.n	80101e2 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80101c6:	4283      	cmp	r3, r0
 80101c8:	d020      	beq.n	801020c <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80101cc:	4283      	cmp	r3, r0
 80101ce:	d028      	beq.n	8010222 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 80101d0:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80101d2:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 80101d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 80101d8:	f7ff ffea 	bl	80101b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101dc:	2300      	movs	r3, #0
 80101de:	7723      	strb	r3, [r4, #28]
}
 80101e0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101e2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101e4:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 80101e6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101e8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101ec:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 80101ee:	f7ff ffdf 	bl	80101b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101f2:	2300      	movs	r3, #0
 80101f4:	7723      	strb	r3, [r4, #28]
}
 80101f6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101f8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 80101fa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101fc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8010202:	f7ff ffd5 	bl	80101b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010206:	2300      	movs	r3, #0
 8010208:	7723      	strb	r3, [r4, #28]
}
 801020a:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801020c:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801020e:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 8010210:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010216:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8010218:	f7ff ffca 	bl	80101b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801021c:	2300      	movs	r3, #0
 801021e:	7723      	strb	r3, [r4, #28]
}
 8010220:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010222:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010224:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 8010226:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010228:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801022c:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 801022e:	f7ff ffbf 	bl	80101b0 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010232:	2300      	movs	r3, #0
 8010234:	7723      	strb	r3, [r4, #28]
}
 8010236:	bd10      	pop	{r4, pc}

08010238 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010238:	4a3c      	ldr	r2, [pc, #240]	; (801032c <TIM_Base_SetConfig+0xf4>)
 801023a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 801023e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010240:	eba0 0202 	sub.w	r2, r0, r2
 8010244:	fab2 f282 	clz	r2, r2
{
 8010248:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801024a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 801024e:	d010      	beq.n	8010272 <TIM_Base_SetConfig+0x3a>
 8010250:	b97a      	cbnz	r2, 8010272 <TIM_Base_SetConfig+0x3a>
 8010252:	4d37      	ldr	r5, [pc, #220]	; (8010330 <TIM_Base_SetConfig+0xf8>)
 8010254:	4c37      	ldr	r4, [pc, #220]	; (8010334 <TIM_Base_SetConfig+0xfc>)
 8010256:	42a0      	cmp	r0, r4
 8010258:	bf18      	it	ne
 801025a:	42a8      	cmpne	r0, r5
 801025c:	d12b      	bne.n	80102b6 <TIM_Base_SetConfig+0x7e>
 801025e:	4c36      	ldr	r4, [pc, #216]	; (8010338 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010264:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010266:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 8010268:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801026a:	fab4 f484 	clz	r4, r4
 801026e:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010270:	e008      	b.n	8010284 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 8010272:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8010278:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801027a:	4c2f      	ldr	r4, [pc, #188]	; (8010338 <TIM_Base_SetConfig+0x100>)
 801027c:	1b04      	subs	r4, r0, r4
 801027e:	fab4 f484 	clz	r4, r4
 8010282:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010284:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8010286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801028a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801028c:	694d      	ldr	r5, [r1, #20]
 801028e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010292:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010294:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010296:	688b      	ldr	r3, [r1, #8]
 8010298:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 801029a:	680b      	ldr	r3, [r1, #0]
 801029c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801029e:	b922      	cbnz	r2, 80102aa <TIM_Base_SetConfig+0x72>
 80102a0:	b91c      	cbnz	r4, 80102aa <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 80102a2:	2301      	movs	r3, #1
}
 80102a4:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80102a6:	6143      	str	r3, [r0, #20]
}
 80102a8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80102aa:	690b      	ldr	r3, [r1, #16]
 80102ac:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80102ae:	2301      	movs	r3, #1
}
 80102b0:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 80102b2:	6143      	str	r3, [r0, #20]
}
 80102b4:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80102ba:	42a0      	cmp	r0, r4
 80102bc:	d024      	beq.n	8010308 <TIM_Base_SetConfig+0xd0>
 80102be:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80102c2:	42a0      	cmp	r0, r4
 80102c4:	d020      	beq.n	8010308 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102c6:	4c1d      	ldr	r4, [pc, #116]	; (801033c <TIM_Base_SetConfig+0x104>)
 80102c8:	4d1d      	ldr	r5, [pc, #116]	; (8010340 <TIM_Base_SetConfig+0x108>)
 80102ca:	42a0      	cmp	r0, r4
 80102cc:	bf18      	it	ne
 80102ce:	42a8      	cmpne	r0, r5
 80102d0:	bf0c      	ite	eq
 80102d2:	2401      	moveq	r4, #1
 80102d4:	2400      	movne	r4, #0
 80102d6:	d027      	beq.n	8010328 <TIM_Base_SetConfig+0xf0>
 80102d8:	4e1a      	ldr	r6, [pc, #104]	; (8010344 <TIM_Base_SetConfig+0x10c>)
 80102da:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 80102de:	42a8      	cmp	r0, r5
 80102e0:	bf18      	it	ne
 80102e2:	42b0      	cmpne	r0, r6
 80102e4:	d0ce      	beq.n	8010284 <TIM_Base_SetConfig+0x4c>
 80102e6:	4c18      	ldr	r4, [pc, #96]	; (8010348 <TIM_Base_SetConfig+0x110>)
 80102e8:	42a0      	cmp	r0, r4
 80102ea:	d01d      	beq.n	8010328 <TIM_Base_SetConfig+0xf0>
 80102ec:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80102f0:	42a0      	cmp	r0, r4
 80102f2:	d019      	beq.n	8010328 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102f4:	694d      	ldr	r5, [r1, #20]
 80102f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80102fa:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 80102fc:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80102fe:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8010300:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010302:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010304:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010306:	e7cc      	b.n	80102a2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8010308:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801030a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801030e:	4c0a      	ldr	r4, [pc, #40]	; (8010338 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 8010310:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010312:	4d0e      	ldr	r5, [pc, #56]	; (801034c <TIM_Base_SetConfig+0x114>)
 8010314:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010316:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010318:	fab4 f484 	clz	r4, r4
 801031c:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010320:	d0b0      	beq.n	8010284 <TIM_Base_SetConfig+0x4c>
 8010322:	2c00      	cmp	r4, #0
 8010324:	d1ae      	bne.n	8010284 <TIM_Base_SetConfig+0x4c>
 8010326:	e7ce      	b.n	80102c6 <TIM_Base_SetConfig+0x8e>
 8010328:	2400      	movs	r4, #0
 801032a:	e7ab      	b.n	8010284 <TIM_Base_SetConfig+0x4c>
 801032c:	40010000 	.word	0x40010000
 8010330:	40000400 	.word	0x40000400
 8010334:	40000800 	.word	0x40000800
 8010338:	40010400 	.word	0x40010400
 801033c:	40014400 	.word	0x40014400
 8010340:	40014000 	.word	0x40014000
 8010344:	40014800 	.word	0x40014800
 8010348:	40001c00 	.word	0x40001c00
 801034c:	40000c00 	.word	0x40000c00

08010350 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8010350:	2800      	cmp	r0, #0
 8010352:	f000 80b8 	beq.w	80104c6 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010356:	6802      	ldr	r2, [r0, #0]
 8010358:	4b5f      	ldr	r3, [pc, #380]	; (80104d8 <HAL_TIM_Base_Init+0x188>)
 801035a:	4960      	ldr	r1, [pc, #384]	; (80104dc <HAL_TIM_Base_Init+0x18c>)
 801035c:	429a      	cmp	r2, r3
 801035e:	bf18      	it	ne
 8010360:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010364:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010366:	bf14      	ite	ne
 8010368:	2301      	movne	r3, #1
 801036a:	2300      	moveq	r3, #0
 801036c:	4604      	mov	r4, r0
 801036e:	485c      	ldr	r0, [pc, #368]	; (80104e0 <HAL_TIM_Base_Init+0x190>)
 8010370:	4282      	cmp	r2, r0
 8010372:	bf0c      	ite	eq
 8010374:	2300      	moveq	r3, #0
 8010376:	f003 0301 	andne.w	r3, r3, #1
 801037a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801037e:	428a      	cmp	r2, r1
 8010380:	bf0c      	ite	eq
 8010382:	2300      	moveq	r3, #0
 8010384:	f003 0301 	andne.w	r3, r3, #1
 8010388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801038c:	4282      	cmp	r2, r0
 801038e:	bf0c      	ite	eq
 8010390:	2300      	moveq	r3, #0
 8010392:	f003 0301 	andne.w	r3, r3, #1
 8010396:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801039a:	428a      	cmp	r2, r1
 801039c:	bf0c      	ite	eq
 801039e:	2300      	moveq	r3, #0
 80103a0:	f003 0301 	andne.w	r3, r3, #1
 80103a4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80103a8:	4282      	cmp	r2, r0
 80103aa:	bf0c      	ite	eq
 80103ac:	2300      	moveq	r3, #0
 80103ae:	f003 0301 	andne.w	r3, r3, #1
 80103b2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80103b6:	428a      	cmp	r2, r1
 80103b8:	bf0c      	ite	eq
 80103ba:	2300      	moveq	r3, #0
 80103bc:	f003 0301 	andne.w	r3, r3, #1
 80103c0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80103c4:	4282      	cmp	r2, r0
 80103c6:	bf0c      	ite	eq
 80103c8:	2300      	moveq	r3, #0
 80103ca:	f003 0301 	andne.w	r3, r3, #1
 80103ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80103d2:	428a      	cmp	r2, r1
 80103d4:	bf0c      	ite	eq
 80103d6:	2300      	moveq	r3, #0
 80103d8:	f003 0301 	andne.w	r3, r3, #1
 80103dc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80103e0:	4282      	cmp	r2, r0
 80103e2:	bf0c      	ite	eq
 80103e4:	2300      	moveq	r3, #0
 80103e6:	f003 0301 	andne.w	r3, r3, #1
 80103ea:	428a      	cmp	r2, r1
 80103ec:	bf0c      	ite	eq
 80103ee:	2300      	moveq	r3, #0
 80103f0:	f003 0301 	andne.w	r3, r3, #1
 80103f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80103f8:	428a      	cmp	r2, r1
 80103fa:	bf0c      	ite	eq
 80103fc:	2300      	moveq	r3, #0
 80103fe:	f003 0301 	andne.w	r3, r3, #1
 8010402:	b113      	cbz	r3, 801040a <HAL_TIM_Base_Init+0xba>
 8010404:	4b37      	ldr	r3, [pc, #220]	; (80104e4 <HAL_TIM_Base_Init+0x194>)
 8010406:	429a      	cmp	r2, r3
 8010408:	d15f      	bne.n	80104ca <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801040a:	68a3      	ldr	r3, [r4, #8]
 801040c:	f023 0210 	bic.w	r2, r3, #16
 8010410:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010414:	2920      	cmp	r1, #32
 8010416:	bf18      	it	ne
 8010418:	2a00      	cmpne	r2, #0
 801041a:	d001      	beq.n	8010420 <HAL_TIM_Base_Init+0xd0>
 801041c:	2b40      	cmp	r3, #64	; 0x40
 801041e:	d14c      	bne.n	80104ba <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010426:	d002      	beq.n	801042e <HAL_TIM_Base_Init+0xde>
 8010428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801042c:	d12b      	bne.n	8010486 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801042e:	69a3      	ldr	r3, [r4, #24]
 8010430:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010434:	d130      	bne.n	8010498 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010436:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801043a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801043e:	b3b3      	cbz	r3, 80104ae <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010440:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8010442:	2302      	movs	r3, #2
 8010444:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010448:	f851 0b04 	ldr.w	r0, [r1], #4
 801044c:	f7ff fef4 	bl	8010238 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010450:	2301      	movs	r3, #1
  return HAL_OK;
 8010452:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010454:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010458:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 801045c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010460:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010464:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801046c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010470:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010478:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 801047c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010480:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010484:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010486:	f44f 718c 	mov.w	r1, #280	; 0x118
 801048a:	4817      	ldr	r0, [pc, #92]	; (80104e8 <HAL_TIM_Base_Init+0x198>)
 801048c:	f7f4 fd92 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010490:	69a3      	ldr	r3, [r4, #24]
 8010492:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010496:	d0ce      	beq.n	8010436 <HAL_TIM_Base_Init+0xe6>
 8010498:	f240 1119 	movw	r1, #281	; 0x119
 801049c:	4812      	ldr	r0, [pc, #72]	; (80104e8 <HAL_TIM_Base_Init+0x198>)
 801049e:	f7f4 fd89 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80104a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80104a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d1c8      	bne.n	8010440 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 80104ae:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80104b0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80104b4:	f7f6 f9a4 	bl	8006800 <HAL_TIM_Base_MspInit>
 80104b8:	e7c2      	b.n	8010440 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80104ba:	f240 1117 	movw	r1, #279	; 0x117
 80104be:	480a      	ldr	r0, [pc, #40]	; (80104e8 <HAL_TIM_Base_Init+0x198>)
 80104c0:	f7f4 fd78 	bl	8004fb4 <assert_failed>
 80104c4:	e7ac      	b.n	8010420 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 80104c6:	2001      	movs	r0, #1
}
 80104c8:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80104ca:	f44f 718b 	mov.w	r1, #278	; 0x116
 80104ce:	4806      	ldr	r0, [pc, #24]	; (80104e8 <HAL_TIM_Base_Init+0x198>)
 80104d0:	f7f4 fd70 	bl	8004fb4 <assert_failed>
 80104d4:	e799      	b.n	801040a <HAL_TIM_Base_Init+0xba>
 80104d6:	bf00      	nop
 80104d8:	40010000 	.word	0x40010000
 80104dc:	40000800 	.word	0x40000800
 80104e0:	40000400 	.word	0x40000400
 80104e4:	40002000 	.word	0x40002000
 80104e8:	0802cc04 	.word	0x0802cc04

080104ec <HAL_TIM_OC_Init>:
  if (htim == NULL)
 80104ec:	2800      	cmp	r0, #0
 80104ee:	f000 80b8 	beq.w	8010662 <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80104f2:	6802      	ldr	r2, [r0, #0]
 80104f4:	4b5f      	ldr	r3, [pc, #380]	; (8010674 <HAL_TIM_OC_Init+0x188>)
 80104f6:	4960      	ldr	r1, [pc, #384]	; (8010678 <HAL_TIM_OC_Init+0x18c>)
 80104f8:	429a      	cmp	r2, r3
 80104fa:	bf18      	it	ne
 80104fc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010500:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010502:	bf14      	ite	ne
 8010504:	2301      	movne	r3, #1
 8010506:	2300      	moveq	r3, #0
 8010508:	4604      	mov	r4, r0
 801050a:	485c      	ldr	r0, [pc, #368]	; (801067c <HAL_TIM_OC_Init+0x190>)
 801050c:	4282      	cmp	r2, r0
 801050e:	bf0c      	ite	eq
 8010510:	2300      	moveq	r3, #0
 8010512:	f003 0301 	andne.w	r3, r3, #1
 8010516:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801051a:	428a      	cmp	r2, r1
 801051c:	bf0c      	ite	eq
 801051e:	2300      	moveq	r3, #0
 8010520:	f003 0301 	andne.w	r3, r3, #1
 8010524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010528:	4282      	cmp	r2, r0
 801052a:	bf0c      	ite	eq
 801052c:	2300      	moveq	r3, #0
 801052e:	f003 0301 	andne.w	r3, r3, #1
 8010532:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010536:	428a      	cmp	r2, r1
 8010538:	bf0c      	ite	eq
 801053a:	2300      	moveq	r3, #0
 801053c:	f003 0301 	andne.w	r3, r3, #1
 8010540:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010544:	4282      	cmp	r2, r0
 8010546:	bf0c      	ite	eq
 8010548:	2300      	moveq	r3, #0
 801054a:	f003 0301 	andne.w	r3, r3, #1
 801054e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010552:	428a      	cmp	r2, r1
 8010554:	bf0c      	ite	eq
 8010556:	2300      	moveq	r3, #0
 8010558:	f003 0301 	andne.w	r3, r3, #1
 801055c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010560:	4282      	cmp	r2, r0
 8010562:	bf0c      	ite	eq
 8010564:	2300      	moveq	r3, #0
 8010566:	f003 0301 	andne.w	r3, r3, #1
 801056a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801056e:	428a      	cmp	r2, r1
 8010570:	bf0c      	ite	eq
 8010572:	2300      	moveq	r3, #0
 8010574:	f003 0301 	andne.w	r3, r3, #1
 8010578:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801057c:	4282      	cmp	r2, r0
 801057e:	bf0c      	ite	eq
 8010580:	2300      	moveq	r3, #0
 8010582:	f003 0301 	andne.w	r3, r3, #1
 8010586:	428a      	cmp	r2, r1
 8010588:	bf0c      	ite	eq
 801058a:	2300      	moveq	r3, #0
 801058c:	f003 0301 	andne.w	r3, r3, #1
 8010590:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010594:	428a      	cmp	r2, r1
 8010596:	bf0c      	ite	eq
 8010598:	2300      	moveq	r3, #0
 801059a:	f003 0301 	andne.w	r3, r3, #1
 801059e:	b113      	cbz	r3, 80105a6 <HAL_TIM_OC_Init+0xba>
 80105a0:	4b37      	ldr	r3, [pc, #220]	; (8010680 <HAL_TIM_OC_Init+0x194>)
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d15f      	bne.n	8010666 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80105a6:	68a3      	ldr	r3, [r4, #8]
 80105a8:	f023 0210 	bic.w	r2, r3, #16
 80105ac:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80105b0:	2920      	cmp	r1, #32
 80105b2:	bf18      	it	ne
 80105b4:	2a00      	cmpne	r2, #0
 80105b6:	d001      	beq.n	80105bc <HAL_TIM_OC_Init+0xd0>
 80105b8:	2b40      	cmp	r3, #64	; 0x40
 80105ba:	d14c      	bne.n	8010656 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80105bc:	6923      	ldr	r3, [r4, #16]
 80105be:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80105c2:	d002      	beq.n	80105ca <HAL_TIM_OC_Init+0xde>
 80105c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105c8:	d12b      	bne.n	8010622 <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80105ca:	69a3      	ldr	r3, [r4, #24]
 80105cc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80105d0:	d130      	bne.n	8010634 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80105d2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80105d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80105da:	b3b3      	cbz	r3, 801064a <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80105dc:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80105de:	2302      	movs	r3, #2
 80105e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80105e4:	f851 0b04 	ldr.w	r0, [r1], #4
 80105e8:	f7ff fe26 	bl	8010238 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105ec:	2301      	movs	r3, #1
  return HAL_OK;
 80105ee:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105f0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105f4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80105f8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80105fc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010600:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801060c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010610:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010614:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010618:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 801061c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010620:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010622:	f240 2197 	movw	r1, #663	; 0x297
 8010626:	4817      	ldr	r0, [pc, #92]	; (8010684 <HAL_TIM_OC_Init+0x198>)
 8010628:	f7f4 fcc4 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801062c:	69a3      	ldr	r3, [r4, #24]
 801062e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010632:	d0ce      	beq.n	80105d2 <HAL_TIM_OC_Init+0xe6>
 8010634:	f44f 7126 	mov.w	r1, #664	; 0x298
 8010638:	4812      	ldr	r0, [pc, #72]	; (8010684 <HAL_TIM_OC_Init+0x198>)
 801063a:	f7f4 fcbb 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801063e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010642:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010646:	2b00      	cmp	r3, #0
 8010648:	d1c8      	bne.n	80105dc <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 801064a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801064c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010650:	f7ff f90e 	bl	800f870 <HAL_TIM_OC_MspInit>
 8010654:	e7c2      	b.n	80105dc <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010656:	f240 2196 	movw	r1, #662	; 0x296
 801065a:	480a      	ldr	r0, [pc, #40]	; (8010684 <HAL_TIM_OC_Init+0x198>)
 801065c:	f7f4 fcaa 	bl	8004fb4 <assert_failed>
 8010660:	e7ac      	b.n	80105bc <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 8010662:	2001      	movs	r0, #1
}
 8010664:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010666:	f240 2195 	movw	r1, #661	; 0x295
 801066a:	4806      	ldr	r0, [pc, #24]	; (8010684 <HAL_TIM_OC_Init+0x198>)
 801066c:	f7f4 fca2 	bl	8004fb4 <assert_failed>
 8010670:	e799      	b.n	80105a6 <HAL_TIM_OC_Init+0xba>
 8010672:	bf00      	nop
 8010674:	40010000 	.word	0x40010000
 8010678:	40000800 	.word	0x40000800
 801067c:	40000400 	.word	0x40000400
 8010680:	40002000 	.word	0x40002000
 8010684:	0802cc04 	.word	0x0802cc04

08010688 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8010688:	2800      	cmp	r0, #0
 801068a:	f000 80b8 	beq.w	80107fe <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801068e:	6802      	ldr	r2, [r0, #0]
 8010690:	4b5f      	ldr	r3, [pc, #380]	; (8010810 <HAL_TIM_PWM_Init+0x188>)
 8010692:	4960      	ldr	r1, [pc, #384]	; (8010814 <HAL_TIM_PWM_Init+0x18c>)
 8010694:	429a      	cmp	r2, r3
 8010696:	bf18      	it	ne
 8010698:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 801069c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801069e:	bf14      	ite	ne
 80106a0:	2301      	movne	r3, #1
 80106a2:	2300      	moveq	r3, #0
 80106a4:	4604      	mov	r4, r0
 80106a6:	485c      	ldr	r0, [pc, #368]	; (8010818 <HAL_TIM_PWM_Init+0x190>)
 80106a8:	4282      	cmp	r2, r0
 80106aa:	bf0c      	ite	eq
 80106ac:	2300      	moveq	r3, #0
 80106ae:	f003 0301 	andne.w	r3, r3, #1
 80106b2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80106b6:	428a      	cmp	r2, r1
 80106b8:	bf0c      	ite	eq
 80106ba:	2300      	moveq	r3, #0
 80106bc:	f003 0301 	andne.w	r3, r3, #1
 80106c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106c4:	4282      	cmp	r2, r0
 80106c6:	bf0c      	ite	eq
 80106c8:	2300      	moveq	r3, #0
 80106ca:	f003 0301 	andne.w	r3, r3, #1
 80106ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80106d2:	428a      	cmp	r2, r1
 80106d4:	bf0c      	ite	eq
 80106d6:	2300      	moveq	r3, #0
 80106d8:	f003 0301 	andne.w	r3, r3, #1
 80106dc:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80106e0:	4282      	cmp	r2, r0
 80106e2:	bf0c      	ite	eq
 80106e4:	2300      	moveq	r3, #0
 80106e6:	f003 0301 	andne.w	r3, r3, #1
 80106ea:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80106ee:	428a      	cmp	r2, r1
 80106f0:	bf0c      	ite	eq
 80106f2:	2300      	moveq	r3, #0
 80106f4:	f003 0301 	andne.w	r3, r3, #1
 80106f8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80106fc:	4282      	cmp	r2, r0
 80106fe:	bf0c      	ite	eq
 8010700:	2300      	moveq	r3, #0
 8010702:	f003 0301 	andne.w	r3, r3, #1
 8010706:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801070a:	428a      	cmp	r2, r1
 801070c:	bf0c      	ite	eq
 801070e:	2300      	moveq	r3, #0
 8010710:	f003 0301 	andne.w	r3, r3, #1
 8010714:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010718:	4282      	cmp	r2, r0
 801071a:	bf0c      	ite	eq
 801071c:	2300      	moveq	r3, #0
 801071e:	f003 0301 	andne.w	r3, r3, #1
 8010722:	428a      	cmp	r2, r1
 8010724:	bf0c      	ite	eq
 8010726:	2300      	moveq	r3, #0
 8010728:	f003 0301 	andne.w	r3, r3, #1
 801072c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010730:	428a      	cmp	r2, r1
 8010732:	bf0c      	ite	eq
 8010734:	2300      	moveq	r3, #0
 8010736:	f003 0301 	andne.w	r3, r3, #1
 801073a:	b113      	cbz	r3, 8010742 <HAL_TIM_PWM_Init+0xba>
 801073c:	4b37      	ldr	r3, [pc, #220]	; (801081c <HAL_TIM_PWM_Init+0x194>)
 801073e:	429a      	cmp	r2, r3
 8010740:	d15f      	bne.n	8010802 <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010742:	68a3      	ldr	r3, [r4, #8]
 8010744:	f023 0210 	bic.w	r2, r3, #16
 8010748:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801074c:	2920      	cmp	r1, #32
 801074e:	bf18      	it	ne
 8010750:	2a00      	cmpne	r2, #0
 8010752:	d001      	beq.n	8010758 <HAL_TIM_PWM_Init+0xd0>
 8010754:	2b40      	cmp	r3, #64	; 0x40
 8010756:	d14c      	bne.n	80107f2 <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010758:	6923      	ldr	r3, [r4, #16]
 801075a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801075e:	d002      	beq.n	8010766 <HAL_TIM_PWM_Init+0xde>
 8010760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010764:	d12b      	bne.n	80107be <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010766:	69a3      	ldr	r3, [r4, #24]
 8010768:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801076c:	d130      	bne.n	80107d0 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801076e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010772:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010776:	b3b3      	cbz	r3, 80107e6 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010778:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801077a:	2302      	movs	r3, #2
 801077c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010780:	f851 0b04 	ldr.w	r0, [r1], #4
 8010784:	f7ff fd58 	bl	8010238 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010788:	2301      	movs	r3, #1
  return HAL_OK;
 801078a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801078c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010790:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010794:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010798:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801079c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80107a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80107a8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80107ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80107b0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80107b4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80107b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80107bc:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80107be:	f240 5132 	movw	r1, #1330	; 0x532
 80107c2:	4817      	ldr	r0, [pc, #92]	; (8010820 <HAL_TIM_PWM_Init+0x198>)
 80107c4:	f7f4 fbf6 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80107c8:	69a3      	ldr	r3, [r4, #24]
 80107ca:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80107ce:	d0ce      	beq.n	801076e <HAL_TIM_PWM_Init+0xe6>
 80107d0:	f240 5133 	movw	r1, #1331	; 0x533
 80107d4:	4812      	ldr	r0, [pc, #72]	; (8010820 <HAL_TIM_PWM_Init+0x198>)
 80107d6:	f7f4 fbed 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80107da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80107de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d1c8      	bne.n	8010778 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 80107e6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80107e8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80107ec:	f7ff f842 	bl	800f874 <HAL_TIM_PWM_MspInit>
 80107f0:	e7c2      	b.n	8010778 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80107f2:	f240 5131 	movw	r1, #1329	; 0x531
 80107f6:	480a      	ldr	r0, [pc, #40]	; (8010820 <HAL_TIM_PWM_Init+0x198>)
 80107f8:	f7f4 fbdc 	bl	8004fb4 <assert_failed>
 80107fc:	e7ac      	b.n	8010758 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 80107fe:	2001      	movs	r0, #1
}
 8010800:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010802:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 8010806:	4806      	ldr	r0, [pc, #24]	; (8010820 <HAL_TIM_PWM_Init+0x198>)
 8010808:	f7f4 fbd4 	bl	8004fb4 <assert_failed>
 801080c:	e799      	b.n	8010742 <HAL_TIM_PWM_Init+0xba>
 801080e:	bf00      	nop
 8010810:	40010000 	.word	0x40010000
 8010814:	40000800 	.word	0x40000800
 8010818:	40000400 	.word	0x40000400
 801081c:	40002000 	.word	0x40002000
 8010820:	0802cc04 	.word	0x0802cc04

08010824 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8010824:	2800      	cmp	r0, #0
 8010826:	f000 80b8 	beq.w	801099a <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801082a:	6802      	ldr	r2, [r0, #0]
 801082c:	4b5f      	ldr	r3, [pc, #380]	; (80109ac <HAL_TIM_IC_Init+0x188>)
 801082e:	4960      	ldr	r1, [pc, #384]	; (80109b0 <HAL_TIM_IC_Init+0x18c>)
 8010830:	429a      	cmp	r2, r3
 8010832:	bf18      	it	ne
 8010834:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010838:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801083a:	bf14      	ite	ne
 801083c:	2301      	movne	r3, #1
 801083e:	2300      	moveq	r3, #0
 8010840:	4604      	mov	r4, r0
 8010842:	485c      	ldr	r0, [pc, #368]	; (80109b4 <HAL_TIM_IC_Init+0x190>)
 8010844:	4282      	cmp	r2, r0
 8010846:	bf0c      	ite	eq
 8010848:	2300      	moveq	r3, #0
 801084a:	f003 0301 	andne.w	r3, r3, #1
 801084e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010852:	428a      	cmp	r2, r1
 8010854:	bf0c      	ite	eq
 8010856:	2300      	moveq	r3, #0
 8010858:	f003 0301 	andne.w	r3, r3, #1
 801085c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010860:	4282      	cmp	r2, r0
 8010862:	bf0c      	ite	eq
 8010864:	2300      	moveq	r3, #0
 8010866:	f003 0301 	andne.w	r3, r3, #1
 801086a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801086e:	428a      	cmp	r2, r1
 8010870:	bf0c      	ite	eq
 8010872:	2300      	moveq	r3, #0
 8010874:	f003 0301 	andne.w	r3, r3, #1
 8010878:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801087c:	4282      	cmp	r2, r0
 801087e:	bf0c      	ite	eq
 8010880:	2300      	moveq	r3, #0
 8010882:	f003 0301 	andne.w	r3, r3, #1
 8010886:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801088a:	428a      	cmp	r2, r1
 801088c:	bf0c      	ite	eq
 801088e:	2300      	moveq	r3, #0
 8010890:	f003 0301 	andne.w	r3, r3, #1
 8010894:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010898:	4282      	cmp	r2, r0
 801089a:	bf0c      	ite	eq
 801089c:	2300      	moveq	r3, #0
 801089e:	f003 0301 	andne.w	r3, r3, #1
 80108a2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80108a6:	428a      	cmp	r2, r1
 80108a8:	bf0c      	ite	eq
 80108aa:	2300      	moveq	r3, #0
 80108ac:	f003 0301 	andne.w	r3, r3, #1
 80108b0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80108b4:	4282      	cmp	r2, r0
 80108b6:	bf0c      	ite	eq
 80108b8:	2300      	moveq	r3, #0
 80108ba:	f003 0301 	andne.w	r3, r3, #1
 80108be:	428a      	cmp	r2, r1
 80108c0:	bf0c      	ite	eq
 80108c2:	2300      	moveq	r3, #0
 80108c4:	f003 0301 	andne.w	r3, r3, #1
 80108c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80108cc:	428a      	cmp	r2, r1
 80108ce:	bf0c      	ite	eq
 80108d0:	2300      	moveq	r3, #0
 80108d2:	f003 0301 	andne.w	r3, r3, #1
 80108d6:	b113      	cbz	r3, 80108de <HAL_TIM_IC_Init+0xba>
 80108d8:	4b37      	ldr	r3, [pc, #220]	; (80109b8 <HAL_TIM_IC_Init+0x194>)
 80108da:	429a      	cmp	r2, r3
 80108dc:	d15f      	bne.n	801099e <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80108de:	68a3      	ldr	r3, [r4, #8]
 80108e0:	f023 0210 	bic.w	r2, r3, #16
 80108e4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80108e8:	2920      	cmp	r1, #32
 80108ea:	bf18      	it	ne
 80108ec:	2a00      	cmpne	r2, #0
 80108ee:	d001      	beq.n	80108f4 <HAL_TIM_IC_Init+0xd0>
 80108f0:	2b40      	cmp	r3, #64	; 0x40
 80108f2:	d14c      	bne.n	801098e <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80108f4:	6923      	ldr	r3, [r4, #16]
 80108f6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80108fa:	d002      	beq.n	8010902 <HAL_TIM_IC_Init+0xde>
 80108fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010900:	d12b      	bne.n	801095a <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010902:	69a3      	ldr	r3, [r4, #24]
 8010904:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010908:	d130      	bne.n	801096c <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801090a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801090e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010912:	b3b3      	cbz	r3, 8010982 <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010914:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8010916:	2302      	movs	r3, #2
 8010918:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801091c:	f851 0b04 	ldr.w	r0, [r1], #4
 8010920:	f7ff fc8a 	bl	8010238 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010924:	2301      	movs	r3, #1
  return HAL_OK;
 8010926:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010928:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801092c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010930:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010934:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010938:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801093c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010944:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801094c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010950:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010954:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010958:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801095a:	f240 71cc 	movw	r1, #1996	; 0x7cc
 801095e:	4817      	ldr	r0, [pc, #92]	; (80109bc <HAL_TIM_IC_Init+0x198>)
 8010960:	f7f4 fb28 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010964:	69a3      	ldr	r3, [r4, #24]
 8010966:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801096a:	d0ce      	beq.n	801090a <HAL_TIM_IC_Init+0xe6>
 801096c:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8010970:	4812      	ldr	r0, [pc, #72]	; (80109bc <HAL_TIM_IC_Init+0x198>)
 8010972:	f7f4 fb1f 	bl	8004fb4 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010976:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801097a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1c8      	bne.n	8010914 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8010982:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010984:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8010988:	f7fe ff76 	bl	800f878 <HAL_TIM_IC_MspInit>
 801098c:	e7c2      	b.n	8010914 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801098e:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8010992:	480a      	ldr	r0, [pc, #40]	; (80109bc <HAL_TIM_IC_Init+0x198>)
 8010994:	f7f4 fb0e 	bl	8004fb4 <assert_failed>
 8010998:	e7ac      	b.n	80108f4 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 801099a:	2001      	movs	r0, #1
}
 801099c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801099e:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80109a2:	4806      	ldr	r0, [pc, #24]	; (80109bc <HAL_TIM_IC_Init+0x198>)
 80109a4:	f7f4 fb06 	bl	8004fb4 <assert_failed>
 80109a8:	e799      	b.n	80108de <HAL_TIM_IC_Init+0xba>
 80109aa:	bf00      	nop
 80109ac:	40010000 	.word	0x40010000
 80109b0:	40000800 	.word	0x40000800
 80109b4:	40000400 	.word	0x40000400
 80109b8:	40002000 	.word	0x40002000
 80109bc:	0802cc04 	.word	0x0802cc04

080109c0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109c0:	6a03      	ldr	r3, [r0, #32]
 80109c2:	f023 0310 	bic.w	r3, r3, #16
{
 80109c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80109ca:	6203      	str	r3, [r0, #32]
{
 80109cc:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 80109ce:	6a05      	ldr	r5, [r0, #32]
{
 80109d0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80109d2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80109d6:	4b29      	ldr	r3, [pc, #164]	; (8010a7c <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 80109d8:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 80109dc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109de:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80109e0:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109e2:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80109e6:	688b      	ldr	r3, [r1, #8]
 80109e8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80109ec:	4b24      	ldr	r3, [pc, #144]	; (8010a80 <TIM_OC2_SetConfig+0xc0>)
 80109ee:	4298      	cmp	r0, r3
 80109f0:	d00b      	beq.n	8010a0a <TIM_OC2_SetConfig+0x4a>
 80109f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109f6:	4298      	cmp	r0, r3
 80109f8:	d007      	beq.n	8010a0a <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 80109fa:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80109fc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 8010a00:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8010a02:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8010a04:	6225      	str	r5, [r4, #32]
}
 8010a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010a0a:	68f3      	ldr	r3, [r6, #12]
 8010a0c:	f033 0208 	bics.w	r2, r3, #8
 8010a10:	d123      	bne.n	8010a5a <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 8010a12:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a16:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a1a:	69b3      	ldr	r3, [r6, #24]
 8010a1c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 8010a20:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a24:	d120      	bne.n	8010a68 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a26:	6973      	ldr	r3, [r6, #20]
 8010a28:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010a2c:	d107      	bne.n	8010a3e <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a2e:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a32:	69b1      	ldr	r1, [r6, #24]
 8010a34:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010a38:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010a3c:	e7dd      	b.n	80109fa <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a3e:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8010a42:	4810      	ldr	r0, [pc, #64]	; (8010a84 <TIM_OC2_SetConfig+0xc4>)
 8010a44:	f7f4 fab6 	bl	8004fb4 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a48:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a4c:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010a4e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a50:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010a54:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010a58:	e7cf      	b.n	80109fa <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8010a5a:	f641 31aa 	movw	r1, #7082	; 0x1baa
 8010a5e:	4809      	ldr	r0, [pc, #36]	; (8010a84 <TIM_OC2_SetConfig+0xc4>)
 8010a60:	f7f4 faa8 	bl	8004fb4 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a64:	68f3      	ldr	r3, [r6, #12]
 8010a66:	e7d4      	b.n	8010a12 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010a68:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 8010a6c:	4805      	ldr	r0, [pc, #20]	; (8010a84 <TIM_OC2_SetConfig+0xc4>)
 8010a6e:	f7f4 faa1 	bl	8004fb4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010a72:	6973      	ldr	r3, [r6, #20]
 8010a74:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010a78:	d0d9      	beq.n	8010a2e <TIM_OC2_SetConfig+0x6e>
 8010a7a:	e7e0      	b.n	8010a3e <TIM_OC2_SetConfig+0x7e>
 8010a7c:	feff8cff 	.word	0xfeff8cff
 8010a80:	40010000 	.word	0x40010000
 8010a84:	0802cc04 	.word	0x0802cc04

08010a88 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010a88:	2a14      	cmp	r2, #20
{
 8010a8a:	b570      	push	{r4, r5, r6, lr}
 8010a8c:	4614      	mov	r4, r2
 8010a8e:	4605      	mov	r5, r0
 8010a90:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010a92:	d937      	bls.n	8010b04 <HAL_TIM_OC_ConfigChannel+0x7c>
 8010a94:	2a3c      	cmp	r2, #60	; 0x3c
 8010a96:	d139      	bne.n	8010b0c <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010a98:	6833      	ldr	r3, [r6, #0]
 8010a9a:	f023 0210 	bic.w	r2, r3, #16
 8010a9e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010aa2:	2a40      	cmp	r2, #64	; 0x40
 8010aa4:	bf18      	it	ne
 8010aa6:	2b00      	cmpne	r3, #0
 8010aa8:	d003      	beq.n	8010ab2 <HAL_TIM_OC_ConfigChannel+0x2a>
 8010aaa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8010aae:	f040 8138 	bne.w	8010d22 <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010ab2:	68b3      	ldr	r3, [r6, #8]
 8010ab4:	f033 0302 	bics.w	r3, r3, #2
 8010ab8:	d12e      	bne.n	8010b18 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 8010aba:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010abe:	2b01      	cmp	r3, #1
 8010ac0:	d033      	beq.n	8010b2a <HAL_TIM_OC_ConfigChannel+0xa2>
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010ac8:	2c14      	cmp	r4, #20
 8010aca:	d816      	bhi.n	8010afa <HAL_TIM_OC_ConfigChannel+0x72>
 8010acc:	e8df f014 	tbh	[pc, r4, lsl #1]
 8010ad0:	0015002f 	.word	0x0015002f
 8010ad4:	00150015 	.word	0x00150015
 8010ad8:	00150080 	.word	0x00150080
 8010adc:	00150015 	.word	0x00150015
 8010ae0:	001500b5 	.word	0x001500b5
 8010ae4:	00150015 	.word	0x00150015
 8010ae8:	001500db 	.word	0x001500db
 8010aec:	00150015 	.word	0x00150015
 8010af0:	00150101 	.word	0x00150101
 8010af4:	00150015 	.word	0x00150015
 8010af8:	010e      	.short	0x010e
 8010afa:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010afc:	2300      	movs	r3, #0
 8010afe:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010b02:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 8010b04:	4b98      	ldr	r3, [pc, #608]	; (8010d68 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 8010b06:	40d3      	lsrs	r3, r2
 8010b08:	07db      	lsls	r3, r3, #31
 8010b0a:	d4c5      	bmi.n	8010a98 <HAL_TIM_OC_ConfigChannel+0x10>
 8010b0c:	f640 71df 	movw	r1, #4063	; 0xfdf
 8010b10:	4896      	ldr	r0, [pc, #600]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010b12:	f7f4 fa4f 	bl	8004fb4 <assert_failed>
 8010b16:	e7bf      	b.n	8010a98 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010b18:	f640 71e1 	movw	r1, #4065	; 0xfe1
 8010b1c:	4893      	ldr	r0, [pc, #588]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010b1e:	f7f4 fa49 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8010b22:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d1cb      	bne.n	8010ac2 <HAL_TIM_OC_ConfigChannel+0x3a>
 8010b2a:	2002      	movs	r0, #2
}
 8010b2c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010b2e:	6828      	ldr	r0, [r5, #0]
 8010b30:	4b8f      	ldr	r3, [pc, #572]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010b32:	4a90      	ldr	r2, [pc, #576]	; (8010d74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010b34:	4298      	cmp	r0, r3
 8010b36:	bf18      	it	ne
 8010b38:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010b3c:	bf14      	ite	ne
 8010b3e:	2301      	movne	r3, #1
 8010b40:	2300      	moveq	r3, #0
 8010b42:	4290      	cmp	r0, r2
 8010b44:	bf0c      	ite	eq
 8010b46:	2300      	moveq	r3, #0
 8010b48:	f003 0301 	andne.w	r3, r3, #1
 8010b4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b50:	4290      	cmp	r0, r2
 8010b52:	bf0c      	ite	eq
 8010b54:	2300      	moveq	r3, #0
 8010b56:	f003 0301 	andne.w	r3, r3, #1
 8010b5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b5e:	4290      	cmp	r0, r2
 8010b60:	bf0c      	ite	eq
 8010b62:	2300      	moveq	r3, #0
 8010b64:	f003 0301 	andne.w	r3, r3, #1
 8010b68:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010b6c:	4290      	cmp	r0, r2
 8010b6e:	bf0c      	ite	eq
 8010b70:	2300      	moveq	r3, #0
 8010b72:	f003 0301 	andne.w	r3, r3, #1
 8010b76:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010b7a:	4290      	cmp	r0, r2
 8010b7c:	bf0c      	ite	eq
 8010b7e:	2300      	moveq	r3, #0
 8010b80:	f003 0301 	andne.w	r3, r3, #1
 8010b84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b88:	4290      	cmp	r0, r2
 8010b8a:	bf0c      	ite	eq
 8010b8c:	2300      	moveq	r3, #0
 8010b8e:	f003 0301 	andne.w	r3, r3, #1
 8010b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b96:	4290      	cmp	r0, r2
 8010b98:	bf0c      	ite	eq
 8010b9a:	2300      	moveq	r3, #0
 8010b9c:	f003 0301 	andne.w	r3, r3, #1
 8010ba0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010ba4:	4290      	cmp	r0, r2
 8010ba6:	bf0c      	ite	eq
 8010ba8:	2300      	moveq	r3, #0
 8010baa:	f003 0301 	andne.w	r3, r3, #1
 8010bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bb2:	4290      	cmp	r0, r2
 8010bb4:	bf0c      	ite	eq
 8010bb6:	2300      	moveq	r3, #0
 8010bb8:	f003 0301 	andne.w	r3, r3, #1
 8010bbc:	b11b      	cbz	r3, 8010bc6 <HAL_TIM_OC_ConfigChannel+0x13e>
 8010bbe:	4b6e      	ldr	r3, [pc, #440]	; (8010d78 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8010bc0:	4298      	cmp	r0, r3
 8010bc2:	f040 80c9 	bne.w	8010d58 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010bc6:	4631      	mov	r1, r6
 8010bc8:	f7fe f9ac 	bl	800ef24 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010bcc:	2000      	movs	r0, #0
      break;
 8010bce:	e795      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010bd0:	6828      	ldr	r0, [r5, #0]
 8010bd2:	4b67      	ldr	r3, [pc, #412]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010bd4:	4a67      	ldr	r2, [pc, #412]	; (8010d74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010bd6:	4298      	cmp	r0, r3
 8010bd8:	bf18      	it	ne
 8010bda:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010bde:	bf14      	ite	ne
 8010be0:	2301      	movne	r3, #1
 8010be2:	2300      	moveq	r3, #0
 8010be4:	4290      	cmp	r0, r2
 8010be6:	bf0c      	ite	eq
 8010be8:	2300      	moveq	r3, #0
 8010bea:	f003 0301 	andne.w	r3, r3, #1
 8010bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010bf2:	4290      	cmp	r0, r2
 8010bf4:	bf0c      	ite	eq
 8010bf6:	2300      	moveq	r3, #0
 8010bf8:	f003 0301 	andne.w	r3, r3, #1
 8010bfc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c00:	4290      	cmp	r0, r2
 8010c02:	bf0c      	ite	eq
 8010c04:	2300      	moveq	r3, #0
 8010c06:	f003 0301 	andne.w	r3, r3, #1
 8010c0a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010c0e:	4290      	cmp	r0, r2
 8010c10:	bf0c      	ite	eq
 8010c12:	2300      	moveq	r3, #0
 8010c14:	f003 0301 	andne.w	r3, r3, #1
 8010c18:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010c1c:	4290      	cmp	r0, r2
 8010c1e:	bf0c      	ite	eq
 8010c20:	2300      	moveq	r3, #0
 8010c22:	f003 0301 	andne.w	r3, r3, #1
 8010c26:	b11b      	cbz	r3, 8010c30 <HAL_TIM_OC_ConfigChannel+0x1a8>
 8010c28:	4b54      	ldr	r3, [pc, #336]	; (8010d7c <HAL_TIM_OC_ConfigChannel+0x2f4>)
 8010c2a:	4298      	cmp	r0, r3
 8010c2c:	f040 808d 	bne.w	8010d4a <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010c30:	4631      	mov	r1, r6
 8010c32:	f7ff fec5 	bl	80109c0 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010c36:	2000      	movs	r0, #0
      break;
 8010c38:	e760      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010c3a:	6828      	ldr	r0, [r5, #0]
 8010c3c:	4b4c      	ldr	r3, [pc, #304]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010c3e:	4a4d      	ldr	r2, [pc, #308]	; (8010d74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010c40:	4298      	cmp	r0, r3
 8010c42:	bf18      	it	ne
 8010c44:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010c48:	bf14      	ite	ne
 8010c4a:	2301      	movne	r3, #1
 8010c4c:	2300      	moveq	r3, #0
 8010c4e:	4290      	cmp	r0, r2
 8010c50:	bf0c      	ite	eq
 8010c52:	2300      	moveq	r3, #0
 8010c54:	f003 0301 	andne.w	r3, r3, #1
 8010c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c5c:	4290      	cmp	r0, r2
 8010c5e:	bf0c      	ite	eq
 8010c60:	2300      	moveq	r3, #0
 8010c62:	f003 0301 	andne.w	r3, r3, #1
 8010c66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010c6a:	4290      	cmp	r0, r2
 8010c6c:	bf0c      	ite	eq
 8010c6e:	2300      	moveq	r3, #0
 8010c70:	f003 0301 	andne.w	r3, r3, #1
 8010c74:	b113      	cbz	r3, 8010c7c <HAL_TIM_OC_ConfigChannel+0x1f4>
 8010c76:	4b42      	ldr	r3, [pc, #264]	; (8010d80 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010c78:	4298      	cmp	r0, r3
 8010c7a:	d15f      	bne.n	8010d3c <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010c7c:	4631      	mov	r1, r6
 8010c7e:	f7fe f9b1 	bl	800efe4 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010c82:	2000      	movs	r0, #0
      break;
 8010c84:	e73a      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010c86:	6828      	ldr	r0, [r5, #0]
 8010c88:	4b39      	ldr	r3, [pc, #228]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010c8a:	4a3a      	ldr	r2, [pc, #232]	; (8010d74 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010c8c:	4298      	cmp	r0, r3
 8010c8e:	bf18      	it	ne
 8010c90:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010c94:	bf14      	ite	ne
 8010c96:	2301      	movne	r3, #1
 8010c98:	2300      	moveq	r3, #0
 8010c9a:	4290      	cmp	r0, r2
 8010c9c:	bf0c      	ite	eq
 8010c9e:	2300      	moveq	r3, #0
 8010ca0:	f003 0301 	andne.w	r3, r3, #1
 8010ca4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010ca8:	4290      	cmp	r0, r2
 8010caa:	bf0c      	ite	eq
 8010cac:	2300      	moveq	r3, #0
 8010cae:	f003 0301 	andne.w	r3, r3, #1
 8010cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cb6:	4290      	cmp	r0, r2
 8010cb8:	bf0c      	ite	eq
 8010cba:	2300      	moveq	r3, #0
 8010cbc:	f003 0301 	andne.w	r3, r3, #1
 8010cc0:	b113      	cbz	r3, 8010cc8 <HAL_TIM_OC_ConfigChannel+0x240>
 8010cc2:	4b2f      	ldr	r3, [pc, #188]	; (8010d80 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010cc4:	4298      	cmp	r0, r3
 8010cc6:	d132      	bne.n	8010d2e <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010cc8:	4631      	mov	r1, r6
 8010cca:	f7fe f9ef 	bl	800f0ac <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010cce:	2000      	movs	r0, #0
      break;
 8010cd0:	e714      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010cd2:	6828      	ldr	r0, [r5, #0]
 8010cd4:	4b26      	ldr	r3, [pc, #152]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010cd6:	4298      	cmp	r0, r3
 8010cd8:	d003      	beq.n	8010ce2 <HAL_TIM_OC_ConfigChannel+0x25a>
 8010cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010cde:	4298      	cmp	r0, r3
 8010ce0:	d118      	bne.n	8010d14 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ce2:	4631      	mov	r1, r6
 8010ce4:	f7fe f8ca 	bl	800ee7c <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010ce8:	2000      	movs	r0, #0
      break;
 8010cea:	e707      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010cec:	6828      	ldr	r0, [r5, #0]
 8010cee:	4b20      	ldr	r3, [pc, #128]	; (8010d70 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010cf0:	4298      	cmp	r0, r3
 8010cf2:	d003      	beq.n	8010cfc <HAL_TIM_OC_ConfigChannel+0x274>
 8010cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010cf8:	4298      	cmp	r0, r3
 8010cfa:	d104      	bne.n	8010d06 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010cfc:	4631      	mov	r1, r6
 8010cfe:	f7fe f8e7 	bl	800eed0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010d02:	2000      	movs	r0, #0
      break;
 8010d04:	e6fa      	b.n	8010afc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010d06:	4819      	ldr	r0, [pc, #100]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d08:	f241 011d 	movw	r1, #4125	; 0x101d
 8010d0c:	f7f4 f952 	bl	8004fb4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010d10:	6828      	ldr	r0, [r5, #0]
 8010d12:	e7f3      	b.n	8010cfc <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010d14:	4815      	ldr	r0, [pc, #84]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d16:	f241 0113 	movw	r1, #4115	; 0x1013
 8010d1a:	f7f4 f94b 	bl	8004fb4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010d1e:	6828      	ldr	r0, [r5, #0]
 8010d20:	e7df      	b.n	8010ce2 <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010d22:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 8010d26:	4811      	ldr	r0, [pc, #68]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d28:	f7f4 f944 	bl	8004fb4 <assert_failed>
 8010d2c:	e6c1      	b.n	8010ab2 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010d2e:	480f      	ldr	r0, [pc, #60]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d30:	f241 0109 	movw	r1, #4105	; 0x1009
 8010d34:	f7f4 f93e 	bl	8004fb4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010d38:	6828      	ldr	r0, [r5, #0]
 8010d3a:	e7c5      	b.n	8010cc8 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010d3c:	480b      	ldr	r0, [pc, #44]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d3e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010d42:	f7f4 f937 	bl	8004fb4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d46:	6828      	ldr	r0, [r5, #0]
 8010d48:	e798      	b.n	8010c7c <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010d4a:	4808      	ldr	r0, [pc, #32]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d4c:	f640 71f5 	movw	r1, #4085	; 0xff5
 8010d50:	f7f4 f930 	bl	8004fb4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d54:	6828      	ldr	r0, [r5, #0]
 8010d56:	e76b      	b.n	8010c30 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010d58:	4804      	ldr	r0, [pc, #16]	; (8010d6c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010d5a:	f640 71eb 	movw	r1, #4075	; 0xfeb
 8010d5e:	f7f4 f929 	bl	8004fb4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d62:	6828      	ldr	r0, [r5, #0]
 8010d64:	e72f      	b.n	8010bc6 <HAL_TIM_OC_ConfigChannel+0x13e>
 8010d66:	bf00      	nop
 8010d68:	00111111 	.word	0x00111111
 8010d6c:	0802cc04 	.word	0x0802cc04
 8010d70:	40010000 	.word	0x40010000
 8010d74:	40000400 	.word	0x40000400
 8010d78:	40002000 	.word	0x40002000
 8010d7c:	40001800 	.word	0x40001800
 8010d80:	40010400 	.word	0x40010400

08010d84 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010d84:	2a14      	cmp	r2, #20
{
 8010d86:	b570      	push	{r4, r5, r6, lr}
 8010d88:	4616      	mov	r6, r2
 8010d8a:	4605      	mov	r5, r0
 8010d8c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010d8e:	d933      	bls.n	8010df8 <HAL_TIM_PWM_ConfigChannel+0x74>
 8010d90:	2a3c      	cmp	r2, #60	; 0x3c
 8010d92:	d135      	bne.n	8010e00 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010d94:	6822      	ldr	r2, [r4, #0]
 8010d96:	4b90      	ldr	r3, [pc, #576]	; (8010fd8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8010d98:	4013      	ands	r3, r2
 8010d9a:	2b60      	cmp	r3, #96	; 0x60
 8010d9c:	d004      	beq.n	8010da8 <HAL_TIM_PWM_ConfigChannel+0x24>
 8010d9e:	f022 0210 	bic.w	r2, r2, #16
 8010da2:	4b8e      	ldr	r3, [pc, #568]	; (8010fdc <HAL_TIM_PWM_ConfigChannel+0x258>)
 8010da4:	429a      	cmp	r2, r3
 8010da6:	d147      	bne.n	8010e38 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010da8:	68a3      	ldr	r3, [r4, #8]
 8010daa:	f033 0302 	bics.w	r3, r3, #2
 8010dae:	d13d      	bne.n	8010e2c <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010db0:	6923      	ldr	r3, [r4, #16]
 8010db2:	f033 0304 	bics.w	r3, r3, #4
 8010db6:	d12e      	bne.n	8010e16 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8010db8:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d033      	beq.n	8010e28 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010dc6:	2e14      	cmp	r6, #20
 8010dc8:	d820      	bhi.n	8010e0c <HAL_TIM_PWM_ConfigChannel+0x88>
 8010dca:	e8df f016 	tbh	[pc, r6, lsl #1]
 8010dce:	00a7      	.short	0x00a7
 8010dd0:	001f001f 	.word	0x001f001f
 8010dd4:	0115001f 	.word	0x0115001f
 8010dd8:	001f001f 	.word	0x001f001f
 8010ddc:	0157001f 	.word	0x0157001f
 8010de0:	001f001f 	.word	0x001f001f
 8010de4:	0057001f 	.word	0x0057001f
 8010de8:	001f001f 	.word	0x001f001f
 8010dec:	008c001f 	.word	0x008c001f
 8010df0:	001f001f 	.word	0x001f001f
 8010df4:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 8010df8:	4b79      	ldr	r3, [pc, #484]	; (8010fe0 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 8010dfa:	40d3      	lsrs	r3, r2
 8010dfc:	07db      	lsls	r3, r3, #31
 8010dfe:	d4c9      	bmi.n	8010d94 <HAL_TIM_PWM_ConfigChannel+0x10>
 8010e00:	f241 01a7 	movw	r1, #4263	; 0x10a7
 8010e04:	4877      	ldr	r0, [pc, #476]	; (8010fe4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e06:	f7f4 f8d5 	bl	8004fb4 <assert_failed>
 8010e0a:	e7c3      	b.n	8010d94 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 8010e0c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8010e0e:	2300      	movs	r3, #0
 8010e10:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010e14:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010e16:	f241 01aa 	movw	r1, #4266	; 0x10aa
 8010e1a:	4872      	ldr	r0, [pc, #456]	; (8010fe4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e1c:	f7f4 f8ca 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8010e20:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d1cb      	bne.n	8010dc0 <HAL_TIM_PWM_ConfigChannel+0x3c>
 8010e28:	2002      	movs	r0, #2
}
 8010e2a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010e2c:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8010e30:	486c      	ldr	r0, [pc, #432]	; (8010fe4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e32:	f7f4 f8bf 	bl	8004fb4 <assert_failed>
 8010e36:	e7bb      	b.n	8010db0 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010e38:	f241 01a8 	movw	r1, #4264	; 0x10a8
 8010e3c:	4869      	ldr	r0, [pc, #420]	; (8010fe4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010e3e:	f7f4 f8b9 	bl	8004fb4 <assert_failed>
 8010e42:	e7b1      	b.n	8010da8 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010e44:	6828      	ldr	r0, [r5, #0]
 8010e46:	4b68      	ldr	r3, [pc, #416]	; (8010fe8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010e48:	4298      	cmp	r0, r3
 8010e4a:	d004      	beq.n	8010e56 <HAL_TIM_PWM_ConfigChannel+0xd2>
 8010e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010e50:	4298      	cmp	r0, r3
 8010e52:	f040 814d 	bne.w	80110f0 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010e56:	4621      	mov	r1, r4
 8010e58:	f7fe f83a 	bl	800eed0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e5c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e5e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e62:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010e66:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e6a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010e6e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e72:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010e76:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e7a:	e7c8      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010e7c:	6828      	ldr	r0, [r5, #0]
 8010e7e:	4b5a      	ldr	r3, [pc, #360]	; (8010fe8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010e80:	4a5a      	ldr	r2, [pc, #360]	; (8010fec <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010e82:	4298      	cmp	r0, r3
 8010e84:	bf18      	it	ne
 8010e86:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010e8a:	bf14      	ite	ne
 8010e8c:	2301      	movne	r3, #1
 8010e8e:	2300      	moveq	r3, #0
 8010e90:	4290      	cmp	r0, r2
 8010e92:	bf0c      	ite	eq
 8010e94:	2300      	moveq	r3, #0
 8010e96:	f003 0301 	andne.w	r3, r3, #1
 8010e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010e9e:	4290      	cmp	r0, r2
 8010ea0:	bf0c      	ite	eq
 8010ea2:	2300      	moveq	r3, #0
 8010ea4:	f003 0301 	andne.w	r3, r3, #1
 8010ea8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010eac:	4290      	cmp	r0, r2
 8010eae:	bf0c      	ite	eq
 8010eb0:	2300      	moveq	r3, #0
 8010eb2:	f003 0301 	andne.w	r3, r3, #1
 8010eb6:	b11b      	cbz	r3, 8010ec0 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8010eb8:	4b4d      	ldr	r3, [pc, #308]	; (8010ff0 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 8010eba:	4298      	cmp	r0, r3
 8010ebc:	f040 811f 	bne.w	80110fe <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ec0:	4621      	mov	r1, r4
 8010ec2:	f7fe f8f3 	bl	800f0ac <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010ec6:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010ec8:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010eca:	69d9      	ldr	r1, [r3, #28]
 8010ecc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010ed0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010ed2:	69d9      	ldr	r1, [r3, #28]
 8010ed4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010ed8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010eda:	69da      	ldr	r2, [r3, #28]
 8010edc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010ee0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010ee2:	61da      	str	r2, [r3, #28]
      break;
 8010ee4:	e793      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010ee6:	6828      	ldr	r0, [r5, #0]
 8010ee8:	4b3f      	ldr	r3, [pc, #252]	; (8010fe8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010eea:	4298      	cmp	r0, r3
 8010eec:	d004      	beq.n	8010ef8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8010eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010ef2:	4298      	cmp	r0, r3
 8010ef4:	f040 80f5 	bne.w	80110e2 <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010ef8:	4621      	mov	r1, r4
 8010efa:	f7fd ffbf 	bl	800ee7c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010efe:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f00:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010f02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f04:	f041 0108 	orr.w	r1, r1, #8
 8010f08:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010f0a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010f0c:	f021 0104 	bic.w	r1, r1, #4
 8010f10:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f14:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010f16:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010f18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010f1a:	e778      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010f1c:	6828      	ldr	r0, [r5, #0]
 8010f1e:	4b32      	ldr	r3, [pc, #200]	; (8010fe8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010f20:	4a32      	ldr	r2, [pc, #200]	; (8010fec <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010f22:	4298      	cmp	r0, r3
 8010f24:	bf18      	it	ne
 8010f26:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010f2a:	bf14      	ite	ne
 8010f2c:	2301      	movne	r3, #1
 8010f2e:	2300      	moveq	r3, #0
 8010f30:	4290      	cmp	r0, r2
 8010f32:	bf0c      	ite	eq
 8010f34:	2300      	moveq	r3, #0
 8010f36:	f003 0301 	andne.w	r3, r3, #1
 8010f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f3e:	4290      	cmp	r0, r2
 8010f40:	bf0c      	ite	eq
 8010f42:	2300      	moveq	r3, #0
 8010f44:	f003 0301 	andne.w	r3, r3, #1
 8010f48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f4c:	4290      	cmp	r0, r2
 8010f4e:	bf0c      	ite	eq
 8010f50:	2300      	moveq	r3, #0
 8010f52:	f003 0301 	andne.w	r3, r3, #1
 8010f56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010f5a:	4290      	cmp	r0, r2
 8010f5c:	bf0c      	ite	eq
 8010f5e:	2300      	moveq	r3, #0
 8010f60:	f003 0301 	andne.w	r3, r3, #1
 8010f64:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010f68:	4290      	cmp	r0, r2
 8010f6a:	bf0c      	ite	eq
 8010f6c:	2300      	moveq	r3, #0
 8010f6e:	f003 0301 	andne.w	r3, r3, #1
 8010f72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f76:	4290      	cmp	r0, r2
 8010f78:	bf0c      	ite	eq
 8010f7a:	2300      	moveq	r3, #0
 8010f7c:	f003 0301 	andne.w	r3, r3, #1
 8010f80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010f84:	4290      	cmp	r0, r2
 8010f86:	bf0c      	ite	eq
 8010f88:	2300      	moveq	r3, #0
 8010f8a:	f003 0301 	andne.w	r3, r3, #1
 8010f8e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010f92:	4290      	cmp	r0, r2
 8010f94:	bf0c      	ite	eq
 8010f96:	2300      	moveq	r3, #0
 8010f98:	f003 0301 	andne.w	r3, r3, #1
 8010f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010fa0:	4290      	cmp	r0, r2
 8010fa2:	bf0c      	ite	eq
 8010fa4:	2300      	moveq	r3, #0
 8010fa6:	f003 0301 	andne.w	r3, r3, #1
 8010faa:	b11b      	cbz	r3, 8010fb4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010fac:	4b11      	ldr	r3, [pc, #68]	; (8010ff4 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8010fae:	4298      	cmp	r0, r3
 8010fb0:	f040 80ba 	bne.w	8011128 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010fb4:	4621      	mov	r1, r4
 8010fb6:	f7fd ffb5 	bl	800ef24 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fba:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fbc:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010fbe:	6999      	ldr	r1, [r3, #24]
 8010fc0:	f041 0108 	orr.w	r1, r1, #8
 8010fc4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010fc6:	6999      	ldr	r1, [r3, #24]
 8010fc8:	f021 0104 	bic.w	r1, r1, #4
 8010fcc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fce:	699a      	ldr	r2, [r3, #24]
 8010fd0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010fd2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010fd4:	619a      	str	r2, [r3, #24]
      break;
 8010fd6:	e71a      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
 8010fd8:	fffeffef 	.word	0xfffeffef
 8010fdc:	00010040 	.word	0x00010040
 8010fe0:	00111111 	.word	0x00111111
 8010fe4:	0802cc04 	.word	0x0802cc04
 8010fe8:	40010000 	.word	0x40010000
 8010fec:	40000400 	.word	0x40000400
 8010ff0:	40010400 	.word	0x40010400
 8010ff4:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010ff8:	6828      	ldr	r0, [r5, #0]
 8010ffa:	4b4f      	ldr	r3, [pc, #316]	; (8011138 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8010ffc:	4a4f      	ldr	r2, [pc, #316]	; (801113c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8010ffe:	4298      	cmp	r0, r3
 8011000:	bf18      	it	ne
 8011002:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011006:	bf14      	ite	ne
 8011008:	2301      	movne	r3, #1
 801100a:	2300      	moveq	r3, #0
 801100c:	4290      	cmp	r0, r2
 801100e:	bf0c      	ite	eq
 8011010:	2300      	moveq	r3, #0
 8011012:	f003 0301 	andne.w	r3, r3, #1
 8011016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801101a:	4290      	cmp	r0, r2
 801101c:	bf0c      	ite	eq
 801101e:	2300      	moveq	r3, #0
 8011020:	f003 0301 	andne.w	r3, r3, #1
 8011024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011028:	4290      	cmp	r0, r2
 801102a:	bf0c      	ite	eq
 801102c:	2300      	moveq	r3, #0
 801102e:	f003 0301 	andne.w	r3, r3, #1
 8011032:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011036:	4290      	cmp	r0, r2
 8011038:	bf0c      	ite	eq
 801103a:	2300      	moveq	r3, #0
 801103c:	f003 0301 	andne.w	r3, r3, #1
 8011040:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011044:	4290      	cmp	r0, r2
 8011046:	bf0c      	ite	eq
 8011048:	2300      	moveq	r3, #0
 801104a:	f003 0301 	andne.w	r3, r3, #1
 801104e:	b113      	cbz	r3, 8011056 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8011050:	4b3b      	ldr	r3, [pc, #236]	; (8011140 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8011052:	4298      	cmp	r0, r3
 8011054:	d161      	bne.n	801111a <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011056:	4621      	mov	r1, r4
 8011058:	f7ff fcb2 	bl	80109c0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801105c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801105e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011060:	6999      	ldr	r1, [r3, #24]
 8011062:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8011066:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011068:	6999      	ldr	r1, [r3, #24]
 801106a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801106e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011070:	699a      	ldr	r2, [r3, #24]
 8011072:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8011076:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011078:	619a      	str	r2, [r3, #24]
      break;
 801107a:	e6c8      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801107c:	6828      	ldr	r0, [r5, #0]
 801107e:	4b2e      	ldr	r3, [pc, #184]	; (8011138 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8011080:	4a2e      	ldr	r2, [pc, #184]	; (801113c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8011082:	4298      	cmp	r0, r3
 8011084:	bf18      	it	ne
 8011086:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801108a:	bf14      	ite	ne
 801108c:	2301      	movne	r3, #1
 801108e:	2300      	moveq	r3, #0
 8011090:	4290      	cmp	r0, r2
 8011092:	bf0c      	ite	eq
 8011094:	2300      	moveq	r3, #0
 8011096:	f003 0301 	andne.w	r3, r3, #1
 801109a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801109e:	4290      	cmp	r0, r2
 80110a0:	bf0c      	ite	eq
 80110a2:	2300      	moveq	r3, #0
 80110a4:	f003 0301 	andne.w	r3, r3, #1
 80110a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80110ac:	4290      	cmp	r0, r2
 80110ae:	bf0c      	ite	eq
 80110b0:	2300      	moveq	r3, #0
 80110b2:	f003 0301 	andne.w	r3, r3, #1
 80110b6:	b113      	cbz	r3, 80110be <HAL_TIM_PWM_ConfigChannel+0x33a>
 80110b8:	4b22      	ldr	r3, [pc, #136]	; (8011144 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 80110ba:	4298      	cmp	r0, r3
 80110bc:	d126      	bne.n	801110c <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110be:	4621      	mov	r1, r4
 80110c0:	f7fd ff90 	bl	800efe4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110c4:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110c6:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80110c8:	69d9      	ldr	r1, [r3, #28]
 80110ca:	f041 0108 	orr.w	r1, r1, #8
 80110ce:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80110d0:	69d9      	ldr	r1, [r3, #28]
 80110d2:	f021 0104 	bic.w	r1, r1, #4
 80110d6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110d8:	69da      	ldr	r2, [r3, #28]
 80110da:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80110dc:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80110de:	61da      	str	r2, [r3, #28]
      break;
 80110e0:	e695      	b.n	8010e0e <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80110e2:	4819      	ldr	r0, [pc, #100]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80110e4:	f241 01f8 	movw	r1, #4344	; 0x10f8
 80110e8:	f7f3 ff64 	bl	8004fb4 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80110ec:	6828      	ldr	r0, [r5, #0]
 80110ee:	e703      	b.n	8010ef8 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80110f0:	4815      	ldr	r0, [pc, #84]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 80110f2:	f241 1109 	movw	r1, #4361	; 0x1109
 80110f6:	f7f3 ff5d 	bl	8004fb4 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80110fa:	6828      	ldr	r0, [r5, #0]
 80110fc:	e6ab      	b.n	8010e56 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80110fe:	4812      	ldr	r0, [pc, #72]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8011100:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8011104:	f7f3 ff56 	bl	8004fb4 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011108:	6828      	ldr	r0, [r5, #0]
 801110a:	e6d9      	b.n	8010ec0 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801110c:	480e      	ldr	r0, [pc, #56]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801110e:	f241 01d6 	movw	r1, #4310	; 0x10d6
 8011112:	f7f3 ff4f 	bl	8004fb4 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011116:	6828      	ldr	r0, [r5, #0]
 8011118:	e7d1      	b.n	80110be <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801111a:	480b      	ldr	r0, [pc, #44]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801111c:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8011120:	f7f3 ff48 	bl	8004fb4 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011124:	6828      	ldr	r0, [r5, #0]
 8011126:	e796      	b.n	8011056 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011128:	4807      	ldr	r0, [pc, #28]	; (8011148 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 801112a:	f241 01b4 	movw	r1, #4276	; 0x10b4
 801112e:	f7f3 ff41 	bl	8004fb4 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011132:	6828      	ldr	r0, [r5, #0]
 8011134:	e73e      	b.n	8010fb4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8011136:	bf00      	nop
 8011138:	40010000 	.word	0x40010000
 801113c:	40000400 	.word	0x40000400
 8011140:	40001800 	.word	0x40001800
 8011144:	40010400 	.word	0x40010400
 8011148:	0802cc04 	.word	0x0802cc04

0801114c <TIM_TI1_SetConfig>:
{
 801114c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801114e:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011150:	4e1b      	ldr	r6, [pc, #108]	; (80111c0 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011152:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011156:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011158:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 801115a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 801115c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801115e:	d01d      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 8011160:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011164:	d01a      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 8011166:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 801116a:	42b0      	cmp	r0, r6
 801116c:	d016      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 801116e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8011172:	42b0      	cmp	r0, r6
 8011174:	d012      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 8011176:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801117a:	42b0      	cmp	r0, r6
 801117c:	d00e      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 801117e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8011182:	42b0      	cmp	r0, r6
 8011184:	d00a      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 8011186:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 801118a:	42b0      	cmp	r0, r6
 801118c:	d006      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
 801118e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8011192:	42b0      	cmp	r0, r6
 8011194:	d002      	beq.n	801119c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011196:	f044 0201 	orr.w	r2, r4, #1
 801119a:	e002      	b.n	80111a2 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801119c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 80111a0:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111a2:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80111a4:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80111a8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80111ac:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111b0:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80111b2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80111b4:	4313      	orrs	r3, r2
}
 80111b6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 80111b8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80111ba:	6201      	str	r1, [r0, #32]
}
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	40010000 	.word	0x40010000

080111c4 <HAL_TIM_IC_ConfigChannel>:
{
 80111c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111c6:	4ba8      	ldr	r3, [pc, #672]	; (8011468 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 80111c8:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111ca:	6801      	ldr	r1, [r0, #0]
{
 80111cc:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111ce:	4fa7      	ldr	r7, [pc, #668]	; (801146c <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 80111d0:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80111d2:	4299      	cmp	r1, r3
 80111d4:	bf18      	it	ne
 80111d6:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 80111da:	4aa5      	ldr	r2, [pc, #660]	; (8011470 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 80111dc:	bf14      	ite	ne
 80111de:	2301      	movne	r3, #1
 80111e0:	2300      	moveq	r3, #0
 80111e2:	42b9      	cmp	r1, r7
 80111e4:	bf0c      	ite	eq
 80111e6:	2300      	moveq	r3, #0
 80111e8:	f003 0301 	andne.w	r3, r3, #1
 80111ec:	4291      	cmp	r1, r2
 80111ee:	bf0c      	ite	eq
 80111f0:	2300      	moveq	r3, #0
 80111f2:	f003 0301 	andne.w	r3, r3, #1
 80111f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80111fa:	4291      	cmp	r1, r2
 80111fc:	bf0c      	ite	eq
 80111fe:	2300      	moveq	r3, #0
 8011200:	f003 0301 	andne.w	r3, r3, #1
 8011204:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8011208:	4291      	cmp	r1, r2
 801120a:	bf0c      	ite	eq
 801120c:	2300      	moveq	r3, #0
 801120e:	f003 0301 	andne.w	r3, r3, #1
 8011212:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8011216:	4291      	cmp	r1, r2
 8011218:	bf0c      	ite	eq
 801121a:	2300      	moveq	r3, #0
 801121c:	f003 0301 	andne.w	r3, r3, #1
 8011220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011224:	4291      	cmp	r1, r2
 8011226:	bf0c      	ite	eq
 8011228:	2300      	moveq	r3, #0
 801122a:	f003 0301 	andne.w	r3, r3, #1
 801122e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011232:	4291      	cmp	r1, r2
 8011234:	bf0c      	ite	eq
 8011236:	2300      	moveq	r3, #0
 8011238:	f003 0301 	andne.w	r3, r3, #1
 801123c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8011240:	4291      	cmp	r1, r2
 8011242:	bf0c      	ite	eq
 8011244:	2300      	moveq	r3, #0
 8011246:	f003 0301 	andne.w	r3, r3, #1
 801124a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801124e:	4291      	cmp	r1, r2
 8011250:	bf0c      	ite	eq
 8011252:	2300      	moveq	r3, #0
 8011254:	f003 0301 	andne.w	r3, r3, #1
 8011258:	b11b      	cbz	r3, 8011262 <HAL_TIM_IC_ConfigChannel+0x9e>
 801125a:	4b86      	ldr	r3, [pc, #536]	; (8011474 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 801125c:	4299      	cmp	r1, r3
 801125e:	f040 8158 	bne.w	8011512 <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8011262:	6823      	ldr	r3, [r4, #0]
 8011264:	f033 0202 	bics.w	r2, r3, #2
 8011268:	d001      	beq.n	801126e <HAL_TIM_IC_ConfigChannel+0xaa>
 801126a:	2b0a      	cmp	r3, #10
 801126c:	d11e      	bne.n	80112ac <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 801126e:	6863      	ldr	r3, [r4, #4]
 8011270:	3b01      	subs	r3, #1
 8011272:	2b02      	cmp	r3, #2
 8011274:	d823      	bhi.n	80112be <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8011276:	68a3      	ldr	r3, [r4, #8]
 8011278:	f033 030c 	bics.w	r3, r3, #12
 801127c:	d128      	bne.n	80112d0 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 801127e:	68e3      	ldr	r3, [r4, #12]
 8011280:	2b0f      	cmp	r3, #15
 8011282:	d82d      	bhi.n	80112e0 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8011284:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8011288:	2b01      	cmp	r3, #1
 801128a:	d032      	beq.n	80112f2 <HAL_TIM_IC_ConfigChannel+0x12e>
 801128c:	2001      	movs	r0, #1
 801128e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8011292:	b386      	cbz	r6, 80112f6 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8011294:	2e04      	cmp	r6, #4
 8011296:	d042      	beq.n	801131e <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8011298:	2e08      	cmp	r6, #8
 801129a:	f000 80f3 	beq.w	8011484 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 801129e:	2e0c      	cmp	r6, #12
 80112a0:	f000 8095 	beq.w	80113ce <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 80112a4:	2300      	movs	r3, #0
 80112a6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80112aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 80112ac:	f241 0141 	movw	r1, #4161	; 0x1041
 80112b0:	4871      	ldr	r0, [pc, #452]	; (8011478 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112b2:	f7f3 fe7f 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 80112b6:	6863      	ldr	r3, [r4, #4]
 80112b8:	3b01      	subs	r3, #1
 80112ba:	2b02      	cmp	r3, #2
 80112bc:	d9db      	bls.n	8011276 <HAL_TIM_IC_ConfigChannel+0xb2>
 80112be:	f241 0142 	movw	r1, #4162	; 0x1042
 80112c2:	486d      	ldr	r0, [pc, #436]	; (8011478 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112c4:	f7f3 fe76 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80112c8:	68a3      	ldr	r3, [r4, #8]
 80112ca:	f033 030c 	bics.w	r3, r3, #12
 80112ce:	d0d6      	beq.n	801127e <HAL_TIM_IC_ConfigChannel+0xba>
 80112d0:	f241 0143 	movw	r1, #4163	; 0x1043
 80112d4:	4868      	ldr	r0, [pc, #416]	; (8011478 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112d6:	f7f3 fe6d 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80112da:	68e3      	ldr	r3, [r4, #12]
 80112dc:	2b0f      	cmp	r3, #15
 80112de:	d9d1      	bls.n	8011284 <HAL_TIM_IC_ConfigChannel+0xc0>
 80112e0:	f241 0144 	movw	r1, #4164	; 0x1044
 80112e4:	4864      	ldr	r0, [pc, #400]	; (8011478 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 80112e6:	f7f3 fe65 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 80112ea:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d1cc      	bne.n	801128c <HAL_TIM_IC_ConfigChannel+0xc8>
 80112f2:	2002      	movs	r0, #2
}
 80112f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80112f6:	e9d4 1200 	ldrd	r1, r2, [r4]
 80112fa:	68e3      	ldr	r3, [r4, #12]
 80112fc:	6828      	ldr	r0, [r5, #0]
 80112fe:	f7ff ff25 	bl	801114c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011302:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011304:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8011306:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8011308:	6999      	ldr	r1, [r3, #24]
 801130a:	f021 010c 	bic.w	r1, r1, #12
 801130e:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8011310:	699a      	ldr	r2, [r3, #24]
 8011312:	4322      	orrs	r2, r4
 8011314:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8011316:	2300      	movs	r3, #0
 8011318:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 801131c:	e7c5      	b.n	80112aa <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801131e:	682a      	ldr	r2, [r5, #0]
 8011320:	4b51      	ldr	r3, [pc, #324]	; (8011468 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8011322:	4952      	ldr	r1, [pc, #328]	; (801146c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8011324:	429a      	cmp	r2, r3
 8011326:	bf18      	it	ne
 8011328:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801132c:	bf14      	ite	ne
 801132e:	2301      	movne	r3, #1
 8011330:	2300      	moveq	r3, #0
 8011332:	428a      	cmp	r2, r1
 8011334:	bf0c      	ite	eq
 8011336:	2300      	moveq	r3, #0
 8011338:	f003 0301 	andne.w	r3, r3, #1
 801133c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011340:	428a      	cmp	r2, r1
 8011342:	bf0c      	ite	eq
 8011344:	2300      	moveq	r3, #0
 8011346:	f003 0301 	andne.w	r3, r3, #1
 801134a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801134e:	428a      	cmp	r2, r1
 8011350:	bf0c      	ite	eq
 8011352:	2300      	moveq	r3, #0
 8011354:	f003 0301 	andne.w	r3, r3, #1
 8011358:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 801135c:	428a      	cmp	r2, r1
 801135e:	bf0c      	ite	eq
 8011360:	2300      	moveq	r3, #0
 8011362:	f003 0301 	andne.w	r3, r3, #1
 8011366:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 801136a:	428a      	cmp	r2, r1
 801136c:	bf0c      	ite	eq
 801136e:	2300      	moveq	r3, #0
 8011370:	f003 0301 	andne.w	r3, r3, #1
 8011374:	b11b      	cbz	r3, 801137e <HAL_TIM_IC_ConfigChannel+0x1ba>
 8011376:	4b41      	ldr	r3, [pc, #260]	; (801147c <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8011378:	429a      	cmp	r2, r3
 801137a:	f040 80d7 	bne.w	801152c <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801137e:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8011380:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011382:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011386:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8011388:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801138c:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801138e:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8011390:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011392:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8011394:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011396:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 801139a:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 801139e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80113a2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80113a6:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 80113a8:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80113aa:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80113ac:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80113b0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 80113b2:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80113b4:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80113b6:	6991      	ldr	r1, [r2, #24]
 80113b8:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 80113bc:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80113be:	6993      	ldr	r3, [r2, #24]
 80113c0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80113c4:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 80113c6:	2300      	movs	r3, #0
 80113c8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 80113cc:	e76d      	b.n	80112aa <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80113ce:	682b      	ldr	r3, [r5, #0]
 80113d0:	4a25      	ldr	r2, [pc, #148]	; (8011468 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 80113d2:	4926      	ldr	r1, [pc, #152]	; (801146c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 80113d4:	4293      	cmp	r3, r2
 80113d6:	bf18      	it	ne
 80113d8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 80113dc:	bf14      	ite	ne
 80113de:	2201      	movne	r2, #1
 80113e0:	2200      	moveq	r2, #0
 80113e2:	428b      	cmp	r3, r1
 80113e4:	bf0c      	ite	eq
 80113e6:	2200      	moveq	r2, #0
 80113e8:	f002 0201 	andne.w	r2, r2, #1
 80113ec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80113f0:	428b      	cmp	r3, r1
 80113f2:	bf0c      	ite	eq
 80113f4:	2200      	moveq	r2, #0
 80113f6:	f002 0201 	andne.w	r2, r2, #1
 80113fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80113fe:	428b      	cmp	r3, r1
 8011400:	bf0c      	ite	eq
 8011402:	2200      	moveq	r2, #0
 8011404:	f002 0201 	andne.w	r2, r2, #1
 8011408:	b142      	cbz	r2, 801141c <HAL_TIM_IC_ConfigChannel+0x258>
 801140a:	4a1d      	ldr	r2, [pc, #116]	; (8011480 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 801140c:	4293      	cmp	r3, r2
 801140e:	d005      	beq.n	801141c <HAL_TIM_IC_ConfigChannel+0x258>
 8011410:	f241 017a 	movw	r1, #4218	; 0x107a
 8011414:	4818      	ldr	r0, [pc, #96]	; (8011478 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8011416:	f7f3 fdcd 	bl	8004fb4 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 801141a:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801141c:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 801141e:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011420:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011424:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 8011426:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801142a:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 801142c:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 801142e:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011430:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011432:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011434:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011438:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801143c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011440:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011444:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8011446:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8011448:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801144a:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 801144e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8011450:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 8011452:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8011454:	69d9      	ldr	r1, [r3, #28]
 8011456:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 801145a:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801145c:	69da      	ldr	r2, [r3, #28]
 801145e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8011462:	61da      	str	r2, [r3, #28]
 8011464:	e71e      	b.n	80112a4 <HAL_TIM_IC_ConfigChannel+0xe0>
 8011466:	bf00      	nop
 8011468:	40010000 	.word	0x40010000
 801146c:	40000400 	.word	0x40000400
 8011470:	40000800 	.word	0x40000800
 8011474:	40002000 	.word	0x40002000
 8011478:	0802cc04 	.word	0x0802cc04
 801147c:	40001800 	.word	0x40001800
 8011480:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8011484:	682b      	ldr	r3, [r5, #0]
 8011486:	4a2d      	ldr	r2, [pc, #180]	; (801153c <HAL_TIM_IC_ConfigChannel+0x378>)
 8011488:	492d      	ldr	r1, [pc, #180]	; (8011540 <HAL_TIM_IC_ConfigChannel+0x37c>)
 801148a:	4293      	cmp	r3, r2
 801148c:	bf18      	it	ne
 801148e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011492:	bf14      	ite	ne
 8011494:	2201      	movne	r2, #1
 8011496:	2200      	moveq	r2, #0
 8011498:	428b      	cmp	r3, r1
 801149a:	bf0c      	ite	eq
 801149c:	2200      	moveq	r2, #0
 801149e:	f002 0201 	andne.w	r2, r2, #1
 80114a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114a6:	428b      	cmp	r3, r1
 80114a8:	bf0c      	ite	eq
 80114aa:	2200      	moveq	r2, #0
 80114ac:	f002 0201 	andne.w	r2, r2, #1
 80114b0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80114b4:	428b      	cmp	r3, r1
 80114b6:	bf0c      	ite	eq
 80114b8:	2200      	moveq	r2, #0
 80114ba:	f002 0201 	andne.w	r2, r2, #1
 80114be:	b112      	cbz	r2, 80114c6 <HAL_TIM_IC_ConfigChannel+0x302>
 80114c0:	4a20      	ldr	r2, [pc, #128]	; (8011544 <HAL_TIM_IC_ConfigChannel+0x380>)
 80114c2:	4293      	cmp	r3, r2
 80114c4:	d12b      	bne.n	801151e <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114c6:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 80114c8:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114ca:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80114ce:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 80114d0:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80114d4:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80114d6:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 80114d8:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80114da:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80114dc:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80114de:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80114e2:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 80114e6:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80114e8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80114ec:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 80114ee:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80114f0:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 80114f4:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80114f6:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 80114f8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80114fa:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80114fc:	69d9      	ldr	r1, [r3, #28]
 80114fe:	f021 010c 	bic.w	r1, r1, #12
 8011502:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011504:	69da      	ldr	r2, [r3, #28]
 8011506:	4322      	orrs	r2, r4
 8011508:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 801150a:	2300      	movs	r3, #0
 801150c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8011510:	e6cb      	b.n	80112aa <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8011512:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8011516:	480c      	ldr	r0, [pc, #48]	; (8011548 <HAL_TIM_IC_ConfigChannel+0x384>)
 8011518:	f7f3 fd4c 	bl	8004fb4 <assert_failed>
 801151c:	e6a1      	b.n	8011262 <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801151e:	f241 016a 	movw	r1, #4202	; 0x106a
 8011522:	4809      	ldr	r0, [pc, #36]	; (8011548 <HAL_TIM_IC_ConfigChannel+0x384>)
 8011524:	f7f3 fd46 	bl	8004fb4 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 8011528:	682b      	ldr	r3, [r5, #0]
 801152a:	e7cc      	b.n	80114c6 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801152c:	f241 015a 	movw	r1, #4186	; 0x105a
 8011530:	4805      	ldr	r0, [pc, #20]	; (8011548 <HAL_TIM_IC_ConfigChannel+0x384>)
 8011532:	f7f3 fd3f 	bl	8004fb4 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 8011536:	682a      	ldr	r2, [r5, #0]
 8011538:	e721      	b.n	801137e <HAL_TIM_IC_ConfigChannel+0x1ba>
 801153a:	bf00      	nop
 801153c:	40010000 	.word	0x40010000
 8011540:	40000400 	.word	0x40000400
 8011544:	40010400 	.word	0x40010400
 8011548:	0802cc04 	.word	0x0802cc04

0801154c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 801154c:	4b2b      	ldr	r3, [pc, #172]	; (80115fc <TIM_CCxChannelCmd+0xb0>)
 801154e:	4298      	cmp	r0, r3
{
 8011550:	b530      	push	{r4, r5, lr}
 8011552:	4604      	mov	r4, r0
 8011554:	b083      	sub	sp, #12
 8011556:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8011558:	d031      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 801155a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801155e:	d02e      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011560:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8011564:	4298      	cmp	r0, r3
 8011566:	d02a      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011568:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801156c:	4298      	cmp	r0, r3
 801156e:	d026      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011570:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011574:	4298      	cmp	r0, r3
 8011576:	d022      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011578:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 801157c:	4298      	cmp	r0, r3
 801157e:	d01e      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011580:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8011584:	4298      	cmp	r0, r3
 8011586:	d01a      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801158c:	4298      	cmp	r0, r3
 801158e:	d016      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011594:	4298      	cmp	r0, r3
 8011596:	d012      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 8011598:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 801159c:	4298      	cmp	r0, r3
 801159e:	d00e      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 80115a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115a4:	4298      	cmp	r0, r3
 80115a6:	d00a      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 80115a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80115ac:	4298      	cmp	r0, r3
 80115ae:	d006      	beq.n	80115be <TIM_CCxChannelCmd+0x72>
 80115b0:	f641 6199 	movw	r1, #7833	; 0x1e99
 80115b4:	4812      	ldr	r0, [pc, #72]	; (8011600 <TIM_CCxChannelCmd+0xb4>)
 80115b6:	9201      	str	r2, [sp, #4]
 80115b8:	f7f3 fcfc 	bl	8004fb4 <assert_failed>
 80115bc:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 80115be:	2d14      	cmp	r5, #20
 80115c0:	d90f      	bls.n	80115e2 <TIM_CCxChannelCmd+0x96>
 80115c2:	2d3c      	cmp	r5, #60	; 0x3c
 80115c4:	d111      	bne.n	80115ea <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80115c6:	f005 051f 	and.w	r5, r5, #31
 80115ca:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80115cc:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80115ce:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80115d0:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80115d2:	ea23 0301 	bic.w	r3, r3, r1
 80115d6:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80115d8:	6a25      	ldr	r5, [r4, #32]
 80115da:	4315      	orrs	r5, r2
 80115dc:	6225      	str	r5, [r4, #32]
}
 80115de:	b003      	add	sp, #12
 80115e0:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80115e2:	4b08      	ldr	r3, [pc, #32]	; (8011604 <TIM_CCxChannelCmd+0xb8>)
 80115e4:	40eb      	lsrs	r3, r5
 80115e6:	07db      	lsls	r3, r3, #31
 80115e8:	d4ed      	bmi.n	80115c6 <TIM_CCxChannelCmd+0x7a>
 80115ea:	f641 619a 	movw	r1, #7834	; 0x1e9a
 80115ee:	4804      	ldr	r0, [pc, #16]	; (8011600 <TIM_CCxChannelCmd+0xb4>)
 80115f0:	9201      	str	r2, [sp, #4]
 80115f2:	f7f3 fcdf 	bl	8004fb4 <assert_failed>
 80115f6:	9a01      	ldr	r2, [sp, #4]
 80115f8:	e7e5      	b.n	80115c6 <TIM_CCxChannelCmd+0x7a>
 80115fa:	bf00      	nop
 80115fc:	40010000 	.word	0x40010000
 8011600:	0802cc04 	.word	0x0802cc04
 8011604:	00111111 	.word	0x00111111

08011608 <HAL_TIM_IC_Start_DMA>:
{
 8011608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801160c:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801160e:	460d      	mov	r5, r1
{
 8011610:	4617      	mov	r7, r2
 8011612:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011614:	2900      	cmp	r1, #0
 8011616:	f040 8087 	bne.w	8011728 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801161a:	6803      	ldr	r3, [r0, #0]
 801161c:	4aa4      	ldr	r2, [pc, #656]	; (80118b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801161e:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011622:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011624:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011628:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801162a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801162e:	d037      	beq.n	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011634:	d034      	beq.n	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011636:	4a9f      	ldr	r2, [pc, #636]	; (80118b4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d031      	beq.n	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 801163c:	4a9e      	ldr	r2, [pc, #632]	; (80118b8 <HAL_TIM_IC_Start_DMA+0x2b0>)
 801163e:	4293      	cmp	r3, r2
 8011640:	d066      	beq.n	8011710 <HAL_TIM_IC_Start_DMA+0x108>
 8011642:	4a9e      	ldr	r2, [pc, #632]	; (80118bc <HAL_TIM_IC_Start_DMA+0x2b4>)
 8011644:	4293      	cmp	r3, r2
 8011646:	d063      	beq.n	8011710 <HAL_TIM_IC_Start_DMA+0x108>
 8011648:	4a9d      	ldr	r2, [pc, #628]	; (80118c0 <HAL_TIM_IC_Start_DMA+0x2b8>)
 801164a:	4293      	cmp	r3, r2
 801164c:	f040 80f7 	bne.w	801183e <HAL_TIM_IC_Start_DMA+0x236>
 8011650:	2d14      	cmp	r5, #20
 8011652:	d862      	bhi.n	801171a <HAL_TIM_IC_Start_DMA+0x112>
 8011654:	4a9b      	ldr	r2, [pc, #620]	; (80118c4 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8011656:	40ea      	lsrs	r2, r5
 8011658:	07d2      	lsls	r2, r2, #31
 801165a:	d55e      	bpl.n	801171a <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801165c:	4994      	ldr	r1, [pc, #592]	; (80118b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 801165e:	4a95      	ldr	r2, [pc, #596]	; (80118b4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011660:	428b      	cmp	r3, r1
 8011662:	bf18      	it	ne
 8011664:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011668:	bf14      	ite	ne
 801166a:	2101      	movne	r1, #1
 801166c:	2100      	moveq	r1, #0
 801166e:	4293      	cmp	r3, r2
 8011670:	bf0c      	ite	eq
 8011672:	2100      	moveq	r1, #0
 8011674:	f001 0101 	andne.w	r1, r1, #1
 8011678:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801167c:	4293      	cmp	r3, r2
 801167e:	bf0c      	ite	eq
 8011680:	2100      	moveq	r1, #0
 8011682:	f001 0101 	andne.w	r1, r1, #1
 8011686:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801168a:	4293      	cmp	r3, r2
 801168c:	bf0c      	ite	eq
 801168e:	2100      	moveq	r1, #0
 8011690:	f001 0101 	andne.w	r1, r1, #1
 8011694:	b121      	cbz	r1, 80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011696:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801169a:	4293      	cmp	r3, r2
 801169c:	f040 80c5 	bne.w	801182a <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80116a0:	2e02      	cmp	r6, #2
 80116a2:	d06a      	beq.n	801177a <HAL_TIM_IC_Start_DMA+0x172>
 80116a4:	f1b9 0f02 	cmp.w	r9, #2
 80116a8:	d067      	beq.n	801177a <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80116aa:	2e01      	cmp	r6, #1
 80116ac:	d106      	bne.n	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
 80116ae:	f1b9 0f01 	cmp.w	r9, #1
 80116b2:	d103      	bne.n	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 80116b4:	b92f      	cbnz	r7, 80116c2 <HAL_TIM_IC_Start_DMA+0xba>
 80116b6:	f1b8 0f00 	cmp.w	r8, #0
 80116ba:	d002      	beq.n	80116c2 <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 80116bc:	2001      	movs	r0, #1
}
 80116be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80116c2:	2302      	movs	r3, #2
 80116c4:	2d00      	cmp	r5, #0
 80116c6:	d05b      	beq.n	8011780 <HAL_TIM_IC_Start_DMA+0x178>
 80116c8:	2d04      	cmp	r5, #4
 80116ca:	f000 8119 	beq.w	8011900 <HAL_TIM_IC_Start_DMA+0x2f8>
 80116ce:	2d08      	cmp	r5, #8
 80116d0:	f000 8141 	beq.w	8011956 <HAL_TIM_IC_Start_DMA+0x34e>
 80116d4:	2d0c      	cmp	r5, #12
 80116d6:	f000 815d 	beq.w	8011994 <HAL_TIM_IC_Start_DMA+0x38c>
 80116da:	2d10      	cmp	r5, #16
 80116dc:	f000 812f 	beq.w	801193e <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80116e0:	4629      	mov	r1, r5
  switch (Channel)
 80116e2:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80116e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80116e8:	2201      	movs	r2, #1
 80116ea:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80116ec:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80116f0:	f7ff ff2c 	bl	801154c <TIM_CCxChannelCmd>
  switch (Channel)
 80116f4:	2d08      	cmp	r5, #8
 80116f6:	f200 812b 	bhi.w	8011950 <HAL_TIM_IC_Start_DMA+0x348>
 80116fa:	e8df f015 	tbh	[pc, r5, lsl #1]
 80116fe:	010a      	.short	0x010a
 8011700:	01290129 	.word	0x01290129
 8011704:	01350129 	.word	0x01350129
 8011708:	01290129 	.word	0x01290129
 801170c:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011710:	f035 0204 	bics.w	r2, r5, #4
 8011714:	d0a2      	beq.n	801165c <HAL_TIM_IC_Start_DMA+0x54>
 8011716:	2a08      	cmp	r2, #8
 8011718:	d0a0      	beq.n	801165c <HAL_TIM_IC_Start_DMA+0x54>
 801171a:	f640 114a 	movw	r1, #2378	; 0x94a
 801171e:	486a      	ldr	r0, [pc, #424]	; (80118c8 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8011720:	f7f3 fc48 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011724:	6823      	ldr	r3, [r4, #0]
 8011726:	e799      	b.n	801165c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011728:	2904      	cmp	r1, #4
 801172a:	f000 8090 	beq.w	801184e <HAL_TIM_IC_Start_DMA+0x246>
 801172e:	2908      	cmp	r1, #8
 8011730:	f000 80e0 	beq.w	80118f4 <HAL_TIM_IC_Start_DMA+0x2ec>
 8011734:	290c      	cmp	r1, #12
 8011736:	d07e      	beq.n	8011836 <HAL_TIM_IC_Start_DMA+0x22e>
 8011738:	2910      	cmp	r1, #16
 801173a:	f000 814a 	beq.w	80119d2 <HAL_TIM_IC_Start_DMA+0x3ca>
 801173e:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 8011742:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011744:	6823      	ldr	r3, [r4, #0]
 8011746:	4a5a      	ldr	r2, [pc, #360]	; (80118b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011748:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801174c:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801174e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011752:	f000 8098 	beq.w	8011886 <HAL_TIM_IC_Start_DMA+0x27e>
 8011756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801175a:	f000 8088 	beq.w	801186e <HAL_TIM_IC_Start_DMA+0x266>
 801175e:	4a55      	ldr	r2, [pc, #340]	; (80118b4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011760:	4293      	cmp	r3, r2
 8011762:	f47f af6b 	bne.w	801163c <HAL_TIM_IC_Start_DMA+0x34>
 8011766:	f035 020c 	bics.w	r2, r5, #12
 801176a:	d099      	beq.n	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 801176c:	4a57      	ldr	r2, [pc, #348]	; (80118cc <HAL_TIM_IC_Start_DMA+0x2c4>)
 801176e:	4293      	cmp	r3, r2
 8011770:	d1d3      	bne.n	801171a <HAL_TIM_IC_Start_DMA+0x112>
 8011772:	2d00      	cmp	r5, #0
 8011774:	f43f af72 	beq.w	801165c <HAL_TIM_IC_Start_DMA+0x54>
 8011778:	e7cf      	b.n	801171a <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 801177a:	2002      	movs	r0, #2
}
 801177c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011780:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011784:	4629      	mov	r1, r5
 8011786:	2201      	movs	r2, #1
 8011788:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801178a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801178e:	f7ff fedd 	bl	801154c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8011792:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011794:	494e      	ldr	r1, [pc, #312]	; (80118d0 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8011796:	4643      	mov	r3, r8
 8011798:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801179a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801179c:	494d      	ldr	r1, [pc, #308]	; (80118d4 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801179e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80117a0:	494d      	ldr	r1, [pc, #308]	; (80118d8 <HAL_TIM_IC_Start_DMA+0x2d0>)
 80117a2:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80117a4:	6821      	ldr	r1, [r4, #0]
 80117a6:	3134      	adds	r1, #52	; 0x34
 80117a8:	f7f7 feb8 	bl	800951c <HAL_DMA_Start_IT>
 80117ac:	2800      	cmp	r0, #0
 80117ae:	d185      	bne.n	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80117b0:	6822      	ldr	r2, [r4, #0]
 80117b2:	68d3      	ldr	r3, [r2, #12]
 80117b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80117b8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117ba:	4b3d      	ldr	r3, [pc, #244]	; (80118b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 80117bc:	4c3d      	ldr	r4, [pc, #244]	; (80118b4 <HAL_TIM_IC_Start_DMA+0x2ac>)
 80117be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80117c2:	bf18      	it	ne
 80117c4:	429a      	cmpne	r2, r3
 80117c6:	493c      	ldr	r1, [pc, #240]	; (80118b8 <HAL_TIM_IC_Start_DMA+0x2b0>)
 80117c8:	bf0c      	ite	eq
 80117ca:	2301      	moveq	r3, #1
 80117cc:	2300      	movne	r3, #0
 80117ce:	42a2      	cmp	r2, r4
 80117d0:	bf08      	it	eq
 80117d2:	f043 0301 	orreq.w	r3, r3, #1
 80117d6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80117da:	428a      	cmp	r2, r1
 80117dc:	bf08      	it	eq
 80117de:	f043 0301 	orreq.w	r3, r3, #1
 80117e2:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80117e6:	42a2      	cmp	r2, r4
 80117e8:	bf08      	it	eq
 80117ea:	f043 0301 	orreq.w	r3, r3, #1
 80117ee:	428a      	cmp	r2, r1
 80117f0:	bf08      	it	eq
 80117f2:	f043 0301 	orreq.w	r3, r3, #1
 80117f6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80117fa:	428a      	cmp	r2, r1
 80117fc:	bf08      	it	eq
 80117fe:	f043 0301 	orreq.w	r3, r3, #1
 8011802:	b913      	cbnz	r3, 801180a <HAL_TIM_IC_Start_DMA+0x202>
 8011804:	4b35      	ldr	r3, [pc, #212]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2d4>)
 8011806:	429a      	cmp	r2, r3
 8011808:	d109      	bne.n	801181e <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801180a:	6891      	ldr	r1, [r2, #8]
 801180c:	4b34      	ldr	r3, [pc, #208]	; (80118e0 <HAL_TIM_IC_Start_DMA+0x2d8>)
 801180e:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011810:	2b06      	cmp	r3, #6
 8011812:	f43f af54 	beq.w	80116be <HAL_TIM_IC_Start_DMA+0xb6>
 8011816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801181a:	f43f af50 	beq.w	80116be <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 801181e:	6813      	ldr	r3, [r2, #0]
 8011820:	f043 0301 	orr.w	r3, r3, #1
 8011824:	6013      	str	r3, [r2, #0]
}
 8011826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801182a:	f640 114b 	movw	r1, #2379	; 0x94b
 801182e:	4826      	ldr	r0, [pc, #152]	; (80118c8 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8011830:	f7f3 fbc0 	bl	8004fb4 <assert_failed>
 8011834:	e734      	b.n	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011836:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 801183a:	b2f6      	uxtb	r6, r6
 801183c:	e782      	b.n	8011744 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801183e:	4a29      	ldr	r2, [pc, #164]	; (80118e4 <HAL_TIM_IC_Start_DMA+0x2dc>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d128      	bne.n	8011896 <HAL_TIM_IC_Start_DMA+0x28e>
 8011844:	f035 0204 	bics.w	r2, r5, #4
 8011848:	f47f af67 	bne.w	801171a <HAL_TIM_IC_Start_DMA+0x112>
 801184c:	e706      	b.n	801165c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801184e:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011852:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011856:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011858:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801185a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801185e:	4a14      	ldr	r2, [pc, #80]	; (80118b0 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8011860:	4293      	cmp	r3, r2
 8011862:	f43f af1d 	beq.w	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801186a:	f47f af78 	bne.w	801175e <HAL_TIM_IC_Start_DMA+0x156>
 801186e:	f035 020c 	bics.w	r2, r5, #12
 8011872:	f43f af15 	beq.w	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011876:	4a1c      	ldr	r2, [pc, #112]	; (80118e8 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8011878:	4293      	cmp	r3, r2
 801187a:	f47f af77 	bne.w	801176c <HAL_TIM_IC_Start_DMA+0x164>
 801187e:	2d00      	cmp	r5, #0
 8011880:	f43f aeec 	beq.w	801165c <HAL_TIM_IC_Start_DMA+0x54>
 8011884:	e749      	b.n	801171a <HAL_TIM_IC_Start_DMA+0x112>
 8011886:	f025 0204 	bic.w	r2, r5, #4
 801188a:	2a08      	cmp	r2, #8
 801188c:	f43f af08 	beq.w	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011890:	2a10      	cmp	r2, #16
 8011892:	f43f af05 	beq.w	80116a0 <HAL_TIM_IC_Start_DMA+0x98>
 8011896:	4a15      	ldr	r2, [pc, #84]	; (80118ec <HAL_TIM_IC_Start_DMA+0x2e4>)
 8011898:	4293      	cmp	r3, r2
 801189a:	f43f af6a 	beq.w	8011772 <HAL_TIM_IC_Start_DMA+0x16a>
 801189e:	4a14      	ldr	r2, [pc, #80]	; (80118f0 <HAL_TIM_IC_Start_DMA+0x2e8>)
 80118a0:	4293      	cmp	r3, r2
 80118a2:	f43f af66 	beq.w	8011772 <HAL_TIM_IC_Start_DMA+0x16a>
 80118a6:	4a0d      	ldr	r2, [pc, #52]	; (80118dc <HAL_TIM_IC_Start_DMA+0x2d4>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d0cb      	beq.n	8011844 <HAL_TIM_IC_Start_DMA+0x23c>
 80118ac:	e7e3      	b.n	8011876 <HAL_TIM_IC_Start_DMA+0x26e>
 80118ae:	bf00      	nop
 80118b0:	40010000 	.word	0x40010000
 80118b4:	40000400 	.word	0x40000400
 80118b8:	40000800 	.word	0x40000800
 80118bc:	40000c00 	.word	0x40000c00
 80118c0:	40010400 	.word	0x40010400
 80118c4:	00111111 	.word	0x00111111
 80118c8:	0802cc04 	.word	0x0802cc04
 80118cc:	40002000 	.word	0x40002000
 80118d0:	0800ff39 	.word	0x0800ff39
 80118d4:	0800ffd1 	.word	0x0800ffd1
 80118d8:	080101b5 	.word	0x080101b5
 80118dc:	40001800 	.word	0x40001800
 80118e0:	00010007 	.word	0x00010007
 80118e4:	40014000 	.word	0x40014000
 80118e8:	40001c00 	.word	0x40001c00
 80118ec:	40014400 	.word	0x40014400
 80118f0:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80118f4:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80118f8:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80118fc:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80118fe:	e7ab      	b.n	8011858 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011900:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011904:	4629      	mov	r1, r5
 8011906:	2201      	movs	r2, #1
 8011908:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801190a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801190e:	f7ff fe1d 	bl	801154c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8011912:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8011914:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8011916:	4931      	ldr	r1, [pc, #196]	; (80119dc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8011918:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 801191a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801191c:	4930      	ldr	r1, [pc, #192]	; (80119e0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 801191e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8011920:	4930      	ldr	r1, [pc, #192]	; (80119e4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011922:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8011924:	6821      	ldr	r1, [r4, #0]
 8011926:	3138      	adds	r1, #56	; 0x38
 8011928:	f7f7 fdf8 	bl	800951c <HAL_DMA_Start_IT>
 801192c:	2800      	cmp	r0, #0
 801192e:	f47f aec5 	bne.w	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011932:	6822      	ldr	r2, [r4, #0]
 8011934:	68d3      	ldr	r3, [r2, #12]
 8011936:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801193a:	60d3      	str	r3, [r2, #12]
      break;
 801193c:	e73d      	b.n	80117ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801193e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011942:	2201      	movs	r2, #1
 8011944:	4629      	mov	r1, r5
 8011946:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011948:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801194c:	f7ff fdfe 	bl	801154c <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011950:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 8011952:	2001      	movs	r0, #1
 8011954:	e731      	b.n	80117ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011956:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801195a:	4629      	mov	r1, r5
 801195c:	2201      	movs	r2, #1
 801195e:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011960:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011964:	f7ff fdf2 	bl	801154c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011968:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801196a:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 801196c:	491b      	ldr	r1, [pc, #108]	; (80119dc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801196e:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011970:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011972:	491b      	ldr	r1, [pc, #108]	; (80119e0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011974:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011976:	491b      	ldr	r1, [pc, #108]	; (80119e4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011978:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801197a:	6821      	ldr	r1, [r4, #0]
 801197c:	313c      	adds	r1, #60	; 0x3c
 801197e:	f7f7 fdcd 	bl	800951c <HAL_DMA_Start_IT>
 8011982:	2800      	cmp	r0, #0
 8011984:	f47f ae9a 	bne.w	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011988:	6822      	ldr	r2, [r4, #0]
 801198a:	68d3      	ldr	r3, [r2, #12]
 801198c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011990:	60d3      	str	r3, [r2, #12]
      break;
 8011992:	e712      	b.n	80117ba <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011994:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011998:	4629      	mov	r1, r5
 801199a:	2201      	movs	r2, #1
 801199c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801199e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80119a2:	f7ff fdd3 	bl	801154c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119a8:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119aa:	490c      	ldr	r1, [pc, #48]	; (80119dc <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119ac:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80119ae:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80119b0:	490b      	ldr	r1, [pc, #44]	; (80119e0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80119b2:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80119b4:	490b      	ldr	r1, [pc, #44]	; (80119e4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80119b6:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 80119b8:	6821      	ldr	r1, [r4, #0]
 80119ba:	3140      	adds	r1, #64	; 0x40
 80119bc:	f7f7 fdae 	bl	800951c <HAL_DMA_Start_IT>
 80119c0:	2800      	cmp	r0, #0
 80119c2:	f47f ae7b 	bne.w	80116bc <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80119c6:	6822      	ldr	r2, [r4, #0]
 80119c8:	68d3      	ldr	r3, [r2, #12]
 80119ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80119ce:	60d3      	str	r3, [r2, #12]
      break;
 80119d0:	e6f3      	b.n	80117ba <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80119d2:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80119d6:	b2f6      	uxtb	r6, r6
 80119d8:	e6b4      	b.n	8011744 <HAL_TIM_IC_Start_DMA+0x13c>
 80119da:	bf00      	nop
 80119dc:	0800ff39 	.word	0x0800ff39
 80119e0:	0800ffd1 	.word	0x0800ffd1
 80119e4:	080101b5 	.word	0x080101b5

080119e8 <HAL_TIM_IC_Stop_DMA>:
{
 80119e8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80119ea:	4b82      	ldr	r3, [pc, #520]	; (8011bf4 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 80119ec:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80119ee:	6800      	ldr	r0, [r0, #0]
{
 80119f0:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80119f2:	4298      	cmp	r0, r3
 80119f4:	f000 80cc 	beq.w	8011b90 <HAL_TIM_IC_Stop_DMA+0x1a8>
 80119f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80119fc:	d056      	beq.n	8011aac <HAL_TIM_IC_Stop_DMA+0xc4>
 80119fe:	4b7e      	ldr	r3, [pc, #504]	; (8011bf8 <HAL_TIM_IC_Stop_DMA+0x210>)
 8011a00:	4298      	cmp	r0, r3
 8011a02:	d053      	beq.n	8011aac <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a04:	4b7d      	ldr	r3, [pc, #500]	; (8011bfc <HAL_TIM_IC_Stop_DMA+0x214>)
 8011a06:	4298      	cmp	r0, r3
 8011a08:	d050      	beq.n	8011aac <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a0a:	4b7d      	ldr	r3, [pc, #500]	; (8011c00 <HAL_TIM_IC_Stop_DMA+0x218>)
 8011a0c:	4298      	cmp	r0, r3
 8011a0e:	d04d      	beq.n	8011aac <HAL_TIM_IC_Stop_DMA+0xc4>
 8011a10:	4b7c      	ldr	r3, [pc, #496]	; (8011c04 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011a12:	4298      	cmp	r0, r3
 8011a14:	f000 80bc 	beq.w	8011b90 <HAL_TIM_IC_Stop_DMA+0x1a8>
 8011a18:	4b7b      	ldr	r3, [pc, #492]	; (8011c08 <HAL_TIM_IC_Stop_DMA+0x220>)
 8011a1a:	4298      	cmp	r0, r3
 8011a1c:	d00c      	beq.n	8011a38 <HAL_TIM_IC_Stop_DMA+0x50>
 8011a1e:	4b7b      	ldr	r3, [pc, #492]	; (8011c0c <HAL_TIM_IC_Stop_DMA+0x224>)
 8011a20:	4298      	cmp	r0, r3
 8011a22:	f000 80d9 	beq.w	8011bd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011a26:	4b7a      	ldr	r3, [pc, #488]	; (8011c10 <HAL_TIM_IC_Stop_DMA+0x228>)
 8011a28:	4298      	cmp	r0, r3
 8011a2a:	f000 80d5 	beq.w	8011bd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011a2e:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8011a32:	4298      	cmp	r0, r3
 8011a34:	f040 80c9 	bne.w	8011bca <HAL_TIM_IC_Stop_DMA+0x1e2>
 8011a38:	f035 0304 	bics.w	r3, r5, #4
 8011a3c:	f000 80cf 	beq.w	8011bde <HAL_TIM_IC_Stop_DMA+0x1f6>
 8011a40:	4874      	ldr	r0, [pc, #464]	; (8011c14 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011a42:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8011a46:	f7f3 fab5 	bl	8004fb4 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011a4a:	6820      	ldr	r0, [r4, #0]
 8011a4c:	4b69      	ldr	r3, [pc, #420]	; (8011bf4 <HAL_TIM_IC_Stop_DMA+0x20c>)
 8011a4e:	4a6a      	ldr	r2, [pc, #424]	; (8011bf8 <HAL_TIM_IC_Stop_DMA+0x210>)
 8011a50:	4298      	cmp	r0, r3
 8011a52:	bf18      	it	ne
 8011a54:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011a58:	bf14      	ite	ne
 8011a5a:	2301      	movne	r3, #1
 8011a5c:	2300      	moveq	r3, #0
 8011a5e:	4290      	cmp	r0, r2
 8011a60:	bf0c      	ite	eq
 8011a62:	2300      	moveq	r3, #0
 8011a64:	f003 0301 	andne.w	r3, r3, #1
 8011a68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a6c:	4290      	cmp	r0, r2
 8011a6e:	bf0c      	ite	eq
 8011a70:	2300      	moveq	r3, #0
 8011a72:	f003 0301 	andne.w	r3, r3, #1
 8011a76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011a7a:	4290      	cmp	r0, r2
 8011a7c:	bf0c      	ite	eq
 8011a7e:	2300      	moveq	r3, #0
 8011a80:	f003 0301 	andne.w	r3, r3, #1
 8011a84:	b11b      	cbz	r3, 8011a8e <HAL_TIM_IC_Stop_DMA+0xa6>
 8011a86:	4b5f      	ldr	r3, [pc, #380]	; (8011c04 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011a88:	4298      	cmp	r0, r3
 8011a8a:	f040 80a8 	bne.w	8011bde <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011a8e:	2200      	movs	r2, #0
 8011a90:	4629      	mov	r1, r5
 8011a92:	f7ff fd5b 	bl	801154c <TIM_CCxChannelCmd>
  switch (Channel)
 8011a96:	2d0c      	cmp	r5, #12
 8011a98:	d80c      	bhi.n	8011ab4 <HAL_TIM_IC_Stop_DMA+0xcc>
 8011a9a:	e8df f005 	tbb	[pc, r5]
 8011a9e:	0b0d      	.short	0x0b0d
 8011aa0:	0b640b0b 	.word	0x0b640b0b
 8011aa4:	0b4a0b0b 	.word	0x0b4a0b0b
 8011aa8:	0b0b      	.short	0x0b0b
 8011aaa:	22          	.byte	0x22
 8011aab:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011aac:	f035 030c 	bics.w	r3, r5, #12
 8011ab0:	d1c6      	bne.n	8011a40 <HAL_TIM_IC_Stop_DMA+0x58>
 8011ab2:	e7ec      	b.n	8011a8e <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8011ab4:	2001      	movs	r0, #1
}
 8011ab6:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011ab8:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011aba:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011abc:	68d3      	ldr	r3, [r2, #12]
 8011abe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011ac2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011ac4:	f7f7 fdce 	bl	8009664 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011ac8:	6823      	ldr	r3, [r4, #0]
 8011aca:	f241 1211 	movw	r2, #4369	; 0x1111
 8011ace:	6a19      	ldr	r1, [r3, #32]
 8011ad0:	4211      	tst	r1, r2
 8011ad2:	d06c      	beq.n	8011bae <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011adc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011ae2:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011ae4:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011ae6:	68d3      	ldr	r3, [r2, #12]
 8011ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011aec:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011aee:	f7f7 fdb9 	bl	8009664 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011af2:	6823      	ldr	r3, [r4, #0]
 8011af4:	f241 1211 	movw	r2, #4369	; 0x1111
 8011af8:	6a19      	ldr	r1, [r3, #32]
 8011afa:	4211      	tst	r1, r2
 8011afc:	d161      	bne.n	8011bc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8011afe:	6a19      	ldr	r1, [r3, #32]
 8011b00:	f240 4244 	movw	r2, #1092	; 0x444
 8011b04:	4211      	tst	r1, r2
 8011b06:	d15c      	bne.n	8011bc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8011b08:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b0a:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 8011b0c:	f022 0201 	bic.w	r2, r2, #1
 8011b10:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b12:	d036      	beq.n	8011b82 <HAL_TIM_IC_Stop_DMA+0x19a>
 8011b14:	2d08      	cmp	r5, #8
 8011b16:	d01f      	beq.n	8011b58 <HAL_TIM_IC_Stop_DMA+0x170>
 8011b18:	2d0c      	cmp	r5, #12
 8011b1a:	d052      	beq.n	8011bc2 <HAL_TIM_IC_Stop_DMA+0x1da>
 8011b1c:	2d10      	cmp	r5, #16
 8011b1e:	f04f 0301 	mov.w	r3, #1
 8011b22:	d063      	beq.n	8011bec <HAL_TIM_IC_Stop_DMA+0x204>
 8011b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b28:	2301      	movs	r3, #1
 8011b2a:	2000      	movs	r0, #0
 8011b2c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8011b30:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011b32:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011b34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011b36:	68d3      	ldr	r3, [r2, #12]
 8011b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b3c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011b3e:	f7f7 fd91 	bl	8009664 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011b42:	6823      	ldr	r3, [r4, #0]
 8011b44:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b48:	6a19      	ldr	r1, [r3, #32]
 8011b4a:	4211      	tst	r1, r2
 8011b4c:	d104      	bne.n	8011b58 <HAL_TIM_IC_Stop_DMA+0x170>
 8011b4e:	6a19      	ldr	r1, [r3, #32]
 8011b50:	f240 4244 	movw	r2, #1092	; 0x444
 8011b54:	4211      	tst	r1, r2
 8011b56:	d0d7      	beq.n	8011b08 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b58:	2301      	movs	r3, #1
 8011b5a:	2000      	movs	r0, #0
 8011b5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b60:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8011b64:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011b66:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011b68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011b6a:	68d3      	ldr	r3, [r2, #12]
 8011b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b70:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011b72:	f7f7 fd77 	bl	8009664 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011b76:	6823      	ldr	r3, [r4, #0]
 8011b78:	f241 1211 	movw	r2, #4369	; 0x1111
 8011b7c:	6a19      	ldr	r1, [r3, #32]
 8011b7e:	4211      	tst	r1, r2
 8011b80:	d00f      	beq.n	8011ba2 <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b82:	2301      	movs	r3, #1
 8011b84:	2000      	movs	r0, #0
 8011b86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011b8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8011b8e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011b90:	2d14      	cmp	r5, #20
 8011b92:	f63f af55 	bhi.w	8011a40 <HAL_TIM_IC_Stop_DMA+0x58>
 8011b96:	4b20      	ldr	r3, [pc, #128]	; (8011c18 <HAL_TIM_IC_Stop_DMA+0x230>)
 8011b98:	40eb      	lsrs	r3, r5
 8011b9a:	07db      	lsls	r3, r3, #31
 8011b9c:	f53f af77 	bmi.w	8011a8e <HAL_TIM_IC_Stop_DMA+0xa6>
 8011ba0:	e74e      	b.n	8011a40 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8011ba2:	6a19      	ldr	r1, [r3, #32]
 8011ba4:	f240 4244 	movw	r2, #1092	; 0x444
 8011ba8:	4211      	tst	r1, r2
 8011baa:	d0ad      	beq.n	8011b08 <HAL_TIM_IC_Stop_DMA+0x120>
 8011bac:	e7e9      	b.n	8011b82 <HAL_TIM_IC_Stop_DMA+0x19a>
 8011bae:	6a19      	ldr	r1, [r3, #32]
 8011bb0:	f240 4244 	movw	r2, #1092	; 0x444
 8011bb4:	4211      	tst	r1, r2
 8011bb6:	d18d      	bne.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xec>
 8011bb8:	681a      	ldr	r2, [r3, #0]
 8011bba:	f022 0201 	bic.w	r2, r2, #1
 8011bbe:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011bc0:	e788      	b.n	8011ad4 <HAL_TIM_IC_Stop_DMA+0xec>
 8011bc2:	2301      	movs	r3, #1
 8011bc4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011bc8:	e7ae      	b.n	8011b28 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011bca:	4b14      	ldr	r3, [pc, #80]	; (8011c1c <HAL_TIM_IC_Stop_DMA+0x234>)
 8011bcc:	4298      	cmp	r0, r3
 8011bce:	d003      	beq.n	8011bd8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 8011bd0:	4b13      	ldr	r3, [pc, #76]	; (8011c20 <HAL_TIM_IC_Stop_DMA+0x238>)
 8011bd2:	4298      	cmp	r0, r3
 8011bd4:	f47f af34 	bne.w	8011a40 <HAL_TIM_IC_Stop_DMA+0x58>
 8011bd8:	2d00      	cmp	r5, #0
 8011bda:	f47f af31 	bne.w	8011a40 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8011bde:	480d      	ldr	r0, [pc, #52]	; (8011c14 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011be0:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8011be4:	f7f3 f9e6 	bl	8004fb4 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011be8:	6820      	ldr	r0, [r4, #0]
 8011bea:	e750      	b.n	8011a8e <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011bec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011bf0:	e79a      	b.n	8011b28 <HAL_TIM_IC_Stop_DMA+0x140>
 8011bf2:	bf00      	nop
 8011bf4:	40010000 	.word	0x40010000
 8011bf8:	40000400 	.word	0x40000400
 8011bfc:	40000800 	.word	0x40000800
 8011c00:	40000c00 	.word	0x40000c00
 8011c04:	40010400 	.word	0x40010400
 8011c08:	40014000 	.word	0x40014000
 8011c0c:	40014400 	.word	0x40014400
 8011c10:	40014800 	.word	0x40014800
 8011c14:	0802cc04 	.word	0x0802cc04
 8011c18:	00111111 	.word	0x00111111
 8011c1c:	40001c00 	.word	0x40001c00
 8011c20:	40002000 	.word	0x40002000

08011c24 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c24:	6802      	ldr	r2, [r0, #0]
{
 8011c26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c2a:	4b6d      	ldr	r3, [pc, #436]	; (8011de0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8011c2c:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c2e:	4f6d      	ldr	r7, [pc, #436]	; (8011de4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8011c30:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011c32:	429a      	cmp	r2, r3
 8011c34:	bf18      	it	ne
 8011c36:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8011c3a:	4e6b      	ldr	r6, [pc, #428]	; (8011de8 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8011c3c:	496b      	ldr	r1, [pc, #428]	; (8011dec <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 8011c3e:	bf14      	ite	ne
 8011c40:	2301      	movne	r3, #1
 8011c42:	2300      	moveq	r3, #0
 8011c44:	42ba      	cmp	r2, r7
 8011c46:	bf0c      	ite	eq
 8011c48:	2300      	moveq	r3, #0
 8011c4a:	f003 0301 	andne.w	r3, r3, #1
 8011c4e:	42b2      	cmp	r2, r6
 8011c50:	bf0c      	ite	eq
 8011c52:	2300      	moveq	r3, #0
 8011c54:	f003 0301 	andne.w	r3, r3, #1
 8011c58:	428a      	cmp	r2, r1
 8011c5a:	bf0c      	ite	eq
 8011c5c:	2300      	moveq	r3, #0
 8011c5e:	f003 0301 	andne.w	r3, r3, #1
 8011c62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011c66:	428a      	cmp	r2, r1
 8011c68:	bf0c      	ite	eq
 8011c6a:	2300      	moveq	r3, #0
 8011c6c:	f003 0301 	andne.w	r3, r3, #1
 8011c70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011c74:	428a      	cmp	r2, r1
 8011c76:	bf0c      	ite	eq
 8011c78:	2300      	moveq	r3, #0
 8011c7a:	f003 0301 	andne.w	r3, r3, #1
 8011c7e:	b11b      	cbz	r3, 8011c88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011c80:	4b5b      	ldr	r3, [pc, #364]	; (8011df0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8011c82:	429a      	cmp	r2, r3
 8011c84:	f040 808c 	bne.w	8011da0 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8011c8e:	2b40      	cmp	r3, #64	; 0x40
 8011c90:	d002      	beq.n	8011c98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f040 808a 	bne.w	8011dac <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011c98:	68ab      	ldr	r3, [r5, #8]
 8011c9a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8011c9e:	d173      	bne.n	8011d88 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8011ca0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d078      	beq.n	8011d9a <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011ca8:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 8011caa:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cac:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8011de0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8011cb0:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cb2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8011df0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8011cb6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cba:	eba2 0009 	sub.w	r0, r2, r9
 8011cbe:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8011cc2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cc6:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 8011cca:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011ccc:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 8011cd0:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011cd2:	0940      	lsrs	r0, r0, #5
 8011cd4:	0949      	lsrs	r1, r1, #5
 8011cd6:	ea50 0301 	orrs.w	r3, r0, r1
 8011cda:	d135      	bne.n	8011d48 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 8011cdc:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011cde:	430b      	orrs	r3, r1
 8011ce0:	4940      	ldr	r1, [pc, #256]	; (8011de4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8011ce2:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011ce6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011cea:	bf08      	it	eq
 8011cec:	f043 0301 	orreq.w	r3, r3, #1
 8011cf0:	428a      	cmp	r2, r1
 8011cf2:	bf08      	it	eq
 8011cf4:	f043 0301 	orreq.w	r3, r3, #1
 8011cf8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011cfc:	428a      	cmp	r2, r1
 8011cfe:	bf08      	it	eq
 8011d00:	f043 0301 	orreq.w	r3, r3, #1
 8011d04:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011d08:	428a      	cmp	r2, r1
 8011d0a:	bf08      	it	eq
 8011d0c:	f043 0301 	orreq.w	r3, r3, #1
 8011d10:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8011d14:	428a      	cmp	r2, r1
 8011d16:	bf08      	it	eq
 8011d18:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d1c:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d1e:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011d20:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 8011d22:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d24:	b913      	cbnz	r3, 8011d2c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011d26:	4b33      	ldr	r3, [pc, #204]	; (8011df4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d104      	bne.n	8011d36 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d2c:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011d2e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011d32:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011d34:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8011d36:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8011d38:	2201      	movs	r2, #1

  return HAL_OK;
 8011d3a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8011d3c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011d40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8011d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011d48:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8011d4c:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8011d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d54:	bf18      	it	ne
 8011d56:	2b00      	cmpne	r3, #0
 8011d58:	bf14      	ite	ne
 8011d5a:	f04f 0c01 	movne.w	ip, #1
 8011d5e:	f04f 0c00 	moveq.w	ip, #0
 8011d62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011d66:	bf0c      	ite	eq
 8011d68:	f04f 0c00 	moveq.w	ip, #0
 8011d6c:	f00c 0c01 	andne.w	ip, ip, #1
 8011d70:	f1bc 0f00 	cmp.w	ip, #0
 8011d74:	d002      	beq.n	8011d7c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011d76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011d7a:	d11d      	bne.n	8011db8 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011d7c:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011d80:	4603      	mov	r3, r0
 8011d82:	ea47 070e 	orr.w	r7, r7, lr
 8011d86:	e7aa      	b.n	8011cde <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011d88:	f240 71b5 	movw	r1, #1973	; 0x7b5
 8011d8c:	481a      	ldr	r0, [pc, #104]	; (8011df8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011d8e:	f7f3 f911 	bl	8004fb4 <assert_failed>
  __HAL_LOCK(htim);
 8011d92:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d186      	bne.n	8011ca8 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8011d9a:	2002      	movs	r0, #2
}
 8011d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011da0:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8011da4:	4814      	ldr	r0, [pc, #80]	; (8011df8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011da6:	f7f3 f905 	bl	8004fb4 <assert_failed>
 8011daa:	e76d      	b.n	8011c88 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011dac:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8011db0:	4811      	ldr	r0, [pc, #68]	; (8011df8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011db2:	f7f3 f8ff 	bl	8004fb4 <assert_failed>
 8011db6:	e76f      	b.n	8011c98 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011db8:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8011dbc:	480e      	ldr	r0, [pc, #56]	; (8011df8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011dbe:	f7f3 f8f9 	bl	8004fb4 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8011dc2:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011dc4:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011dc8:	eba2 0309 	sub.w	r3, r2, r9
 8011dcc:	eba2 0c08 	sub.w	ip, r2, r8
 8011dd0:	4258      	negs	r0, r3
 8011dd2:	4158      	adcs	r0, r3
 8011dd4:	f1dc 0100 	rsbs	r1, ip, #0
 8011dd8:	eb41 010c 	adc.w	r1, r1, ip
 8011ddc:	e7ce      	b.n	8011d7c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011dde:	bf00      	nop
 8011de0:	40010000 	.word	0x40010000
 8011de4:	40000400 	.word	0x40000400
 8011de8:	40000800 	.word	0x40000800
 8011dec:	40000c00 	.word	0x40000c00
 8011df0:	40010400 	.word	0x40010400
 8011df4:	40001800 	.word	0x40001800
 8011df8:	0802cc3c 	.word	0x0802cc3c

08011dfc <HAL_TIMEx_CommutCallback>:
 8011dfc:	4770      	bx	lr
 8011dfe:	bf00      	nop

08011e00 <HAL_TIMEx_BreakCallback>:
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop

08011e04 <HAL_TIMEx_Break2Callback>:
 8011e04:	4770      	bx	lr
 8011e06:	bf00      	nop

08011e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011e08:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e0a:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e12:	e842 3100 	strex	r1, r3, [r2]
 8011e16:	2900      	cmp	r1, #0
 8011e18:	d1f7      	bne.n	8011e0a <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e1a:	f102 0308 	add.w	r3, r2, #8
 8011e1e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e22:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e26:	f102 0c08 	add.w	ip, r2, #8
 8011e2a:	e84c 3100 	strex	r1, r3, [ip]
 8011e2e:	2900      	cmp	r1, #0
 8011e30:	d1f3      	bne.n	8011e1a <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e32:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011e34:	2b01      	cmp	r3, #1
 8011e36:	d005      	beq.n	8011e44 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e38:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8011e3a:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011e3c:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8011e3e:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e40:	6603      	str	r3, [r0, #96]	; 0x60
}
 8011e42:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e44:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e48:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e4c:	e842 3100 	strex	r1, r3, [r2]
 8011e50:	2900      	cmp	r1, #0
 8011e52:	d0f1      	beq.n	8011e38 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e54:	e852 3f00 	ldrex	r3, [r2]
 8011e58:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e5c:	e842 3100 	strex	r1, r3, [r2]
 8011e60:	2900      	cmp	r1, #0
 8011e62:	d1ef      	bne.n	8011e44 <UART_EndRxTransfer+0x3c>
 8011e64:	e7e8      	b.n	8011e38 <UART_EndRxTransfer+0x30>
 8011e66:	bf00      	nop

08011e68 <HAL_UART_DeInit>:
  if (huart == NULL)
 8011e68:	2800      	cmp	r0, #0
 8011e6a:	d046      	beq.n	8011efa <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011e6c:	6802      	ldr	r2, [r0, #0]
 8011e6e:	4927      	ldr	r1, [pc, #156]	; (8011f0c <HAL_UART_DeInit+0xa4>)
{
 8011e70:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011e72:	4b27      	ldr	r3, [pc, #156]	; (8011f10 <HAL_UART_DeInit+0xa8>)
 8011e74:	4604      	mov	r4, r0
 8011e76:	4827      	ldr	r0, [pc, #156]	; (8011f14 <HAL_UART_DeInit+0xac>)
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	bf18      	it	ne
 8011e7c:	4282      	cmpne	r2, r0
 8011e7e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011e82:	bf14      	ite	ne
 8011e84:	2301      	movne	r3, #1
 8011e86:	2300      	moveq	r3, #0
 8011e88:	428a      	cmp	r2, r1
 8011e8a:	bf0c      	ite	eq
 8011e8c:	2300      	moveq	r3, #0
 8011e8e:	f003 0301 	andne.w	r3, r3, #1
 8011e92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011e96:	4282      	cmp	r2, r0
 8011e98:	bf0c      	ite	eq
 8011e9a:	2300      	moveq	r3, #0
 8011e9c:	f003 0301 	andne.w	r3, r3, #1
 8011ea0:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011ea4:	428a      	cmp	r2, r1
 8011ea6:	bf0c      	ite	eq
 8011ea8:	2300      	moveq	r3, #0
 8011eaa:	f003 0301 	andne.w	r3, r3, #1
 8011eae:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011eb2:	4282      	cmp	r2, r0
 8011eb4:	bf0c      	ite	eq
 8011eb6:	2300      	moveq	r3, #0
 8011eb8:	f003 0301 	andne.w	r3, r3, #1
 8011ebc:	428a      	cmp	r2, r1
 8011ebe:	bf0c      	ite	eq
 8011ec0:	2300      	moveq	r3, #0
 8011ec2:	f003 0301 	andne.w	r3, r3, #1
 8011ec6:	b113      	cbz	r3, 8011ece <HAL_UART_DeInit+0x66>
 8011ec8:	4b13      	ldr	r3, [pc, #76]	; (8011f18 <HAL_UART_DeInit+0xb0>)
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d117      	bne.n	8011efe <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 8011ece:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8011ed0:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8011ed2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011ed4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011ed6:	6813      	ldr	r3, [r2, #0]
 8011ed8:	f023 0301 	bic.w	r3, r3, #1
 8011edc:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8011ede:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8011ee0:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8011ee2:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8011ee4:	f7f5 f884 	bl	8006ff0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ee8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 8011eec:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8011eee:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011ef0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8011ef4:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ef6:	6625      	str	r5, [r4, #96]	; 0x60
}
 8011ef8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011efa:	2001      	movs	r0, #1
}
 8011efc:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011efe:	f240 2167 	movw	r1, #615	; 0x267
 8011f02:	4806      	ldr	r0, [pc, #24]	; (8011f1c <HAL_UART_DeInit+0xb4>)
 8011f04:	f7f3 f856 	bl	8004fb4 <assert_failed>
  __HAL_UART_DISABLE(huart);
 8011f08:	6822      	ldr	r2, [r4, #0]
 8011f0a:	e7e0      	b.n	8011ece <HAL_UART_DeInit+0x66>
 8011f0c:	40004800 	.word	0x40004800
 8011f10:	40011000 	.word	0x40011000
 8011f14:	40004400 	.word	0x40004400
 8011f18:	40007c00 	.word	0x40007c00
 8011f1c:	0802cc78 	.word	0x0802cc78

08011f20 <HAL_UART_Transmit_DMA>:
{
 8011f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8011f22:	6f87      	ldr	r7, [r0, #120]	; 0x78
 8011f24:	2f20      	cmp	r7, #32
 8011f26:	d141      	bne.n	8011fac <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 8011f28:	2900      	cmp	r1, #0
 8011f2a:	d03d      	beq.n	8011fa8 <HAL_UART_Transmit_DMA+0x88>
 8011f2c:	fab2 f682 	clz	r6, r2
 8011f30:	0976      	lsrs	r6, r6, #5
 8011f32:	2a00      	cmp	r2, #0
 8011f34:	d038      	beq.n	8011fa8 <HAL_UART_Transmit_DMA+0x88>
 8011f36:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8011f38:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8011f3c:	2801      	cmp	r0, #1
 8011f3e:	d035      	beq.n	8011fac <HAL_UART_Transmit_DMA+0x8c>
 8011f40:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f42:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8011f44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8011f46:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8011f4a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f4c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8011f50:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8011f54:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011f58:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8011f5a:	b190      	cbz	r0, 8011f82 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f5c:	f8df c060 	ldr.w	ip, [pc, #96]	; 8011fc0 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011f60:	4613      	mov	r3, r2
 8011f62:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011f64:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f68:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011fc4 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011f6c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8011f6e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011f70:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011f74:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011fc8 <HAL_UART_Transmit_DMA+0xa8>
 8011f78:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011f7c:	f7f7 face 	bl	800951c <HAL_DMA_Start_IT>
 8011f80:	b9b0      	cbnz	r0, 8011fb0 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f82:	6822      	ldr	r2, [r4, #0]
 8011f84:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8011f86:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011f88:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8011f8a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f8e:	f102 0308 	add.w	r3, r2, #8
 8011f92:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f9a:	f102 0108 	add.w	r1, r2, #8
 8011f9e:	e841 3000 	strex	r0, r3, [r1]
 8011fa2:	2800      	cmp	r0, #0
 8011fa4:	d1f3      	bne.n	8011f8e <HAL_UART_Transmit_DMA+0x6e>
}
 8011fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011fa8:	2001      	movs	r0, #1
}
 8011faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011fac:	2002      	movs	r0, #2
}
 8011fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fb0:	2310      	movs	r3, #16
        return HAL_ERROR;
 8011fb2:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011fb4:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011fb8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011fbc:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8011fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc0:	080120d1 	.word	0x080120d1
 8011fc4:	08012119 	.word	0x08012119
 8011fc8:	08012129 	.word	0x08012129

08011fcc <HAL_UART_Abort>:
{
 8011fcc:	b538      	push	{r3, r4, r5, lr}
 8011fce:	4604      	mov	r4, r0
 8011fd0:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011fd6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fda:	e843 2100 	strex	r1, r2, [r3]
 8011fde:	2900      	cmp	r1, #0
 8011fe0:	d1f7      	bne.n	8011fd2 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe2:	f103 0208 	add.w	r2, r3, #8
 8011fe6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fea:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fee:	f103 0008 	add.w	r0, r3, #8
 8011ff2:	e840 2100 	strex	r1, r2, [r0]
 8011ff6:	2900      	cmp	r1, #0
 8011ff8:	d1f3      	bne.n	8011fe2 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ffa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011ffc:	2a01      	cmp	r2, #1
 8011ffe:	d043      	beq.n	8012088 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8012000:	6899      	ldr	r1, [r3, #8]
 8012002:	461a      	mov	r2, r3
 8012004:	0608      	lsls	r0, r1, #24
 8012006:	d42a      	bmi.n	801205e <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012008:	6899      	ldr	r1, [r3, #8]
 801200a:	0649      	lsls	r1, r1, #25
 801200c:	d514      	bpl.n	8012038 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200e:	f103 0208 	add.w	r2, r3, #8
 8012012:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801201a:	f103 0008 	add.w	r0, r3, #8
 801201e:	e840 2100 	strex	r1, r2, [r0]
 8012022:	2900      	cmp	r1, #0
 8012024:	d1f3      	bne.n	801200e <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8012026:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8012028:	2800      	cmp	r0, #0
 801202a:	d03e      	beq.n	80120aa <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 801202c:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801202e:	f7f7 fad1 	bl	80095d4 <HAL_DMA_Abort>
 8012032:	2800      	cmp	r0, #0
 8012034:	d145      	bne.n	80120c2 <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012036:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8012038:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801203a:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 801203c:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 801203e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8012042:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8012044:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012048:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801204a:	6991      	ldr	r1, [r2, #24]
 801204c:	f041 0108 	orr.w	r1, r1, #8
 8012050:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8012052:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012054:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012056:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012058:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 801205c:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205e:	f103 0208 	add.w	r2, r3, #8
 8012062:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012066:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801206a:	f103 0008 	add.w	r0, r3, #8
 801206e:	e840 2100 	strex	r1, r2, [r0]
 8012072:	2900      	cmp	r1, #0
 8012074:	d1f3      	bne.n	801205e <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8012076:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8012078:	b120      	cbz	r0, 8012084 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 801207a:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 801207c:	f7f7 faaa 	bl	80095d4 <HAL_DMA_Abort>
 8012080:	b9a8      	cbnz	r0, 80120ae <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012082:	6823      	ldr	r3, [r4, #0]
 8012084:	461a      	mov	r2, r3
 8012086:	e7bf      	b.n	8012008 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012088:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801208c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012090:	e843 2100 	strex	r1, r2, [r3]
 8012094:	2900      	cmp	r1, #0
 8012096:	d0b3      	beq.n	8012000 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012098:	e853 2f00 	ldrex	r2, [r3]
 801209c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a0:	e843 2100 	strex	r1, r2, [r3]
 80120a4:	2900      	cmp	r1, #0
 80120a6:	d1ef      	bne.n	8012088 <HAL_UART_Abort+0xbc>
 80120a8:	e7aa      	b.n	8012000 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80120aa:	461a      	mov	r2, r3
 80120ac:	e7c4      	b.n	8012038 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80120ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80120b0:	f7f7 fbdc 	bl	800986c <HAL_DMA_GetError>
 80120b4:	2820      	cmp	r0, #32
 80120b6:	d1e4      	bne.n	8012082 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120b8:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 80120ba:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80120bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80120c0:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80120c2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80120c4:	f7f7 fbd2 	bl	800986c <HAL_DMA_GetError>
 80120c8:	2820      	cmp	r0, #32
 80120ca:	d1b4      	bne.n	8012036 <HAL_UART_Abort+0x6a>
 80120cc:	e7f4      	b.n	80120b8 <HAL_UART_Abort+0xec>
 80120ce:	bf00      	nop

080120d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80120d0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120d2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80120d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80120d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120da:	d018      	beq.n	801210e <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 80120dc:	2300      	movs	r3, #0
 80120de:	6802      	ldr	r2, [r0, #0]
 80120e0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e4:	f102 0308 	add.w	r3, r2, #8
 80120e8:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80120ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f0:	f102 0008 	add.w	r0, r2, #8
 80120f4:	e840 3100 	strex	r1, r3, [r0]
 80120f8:	2900      	cmp	r1, #0
 80120fa:	d1f3      	bne.n	80120e4 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fc:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012104:	e842 3100 	strex	r1, r3, [r2]
 8012108:	2900      	cmp	r1, #0
 801210a:	d1f7      	bne.n	80120fc <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801210c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 801210e:	f7ef ff25 	bl	8001f5c <HAL_UART_TxCpltCallback>
}
 8012112:	bd08      	pop	{r3, pc}

08012114 <HAL_UART_TxHalfCpltCallback>:
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop

08012118 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8012118:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801211a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 801211c:	f7ff fffa 	bl	8012114 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012120:	bd08      	pop	{r3, pc}
 8012122:	bf00      	nop

08012124 <HAL_UART_RxHalfCpltCallback>:
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop

08012128 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012128:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801212a:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 801212c:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 801212e:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012130:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012132:	6893      	ldr	r3, [r2, #8]
 8012134:	061b      	lsls	r3, r3, #24
 8012136:	d501      	bpl.n	801213c <UART_DMAError+0x14>
 8012138:	2921      	cmp	r1, #33	; 0x21
 801213a:	d00d      	beq.n	8012158 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801213c:	6893      	ldr	r3, [r2, #8]
 801213e:	065b      	lsls	r3, r3, #25
 8012140:	d501      	bpl.n	8012146 <UART_DMAError+0x1e>
 8012142:	2c22      	cmp	r4, #34	; 0x22
 8012144:	d016      	beq.n	8012174 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012146:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 801214a:	f043 0310 	orr.w	r3, r3, #16
 801214e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012152:	f7f3 fa0d 	bl	8005570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012156:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8012158:	2300      	movs	r3, #0
 801215a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801215e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012162:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012166:	e842 3100 	strex	r1, r3, [r2]
 801216a:	2900      	cmp	r1, #0
 801216c:	d1f7      	bne.n	801215e <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 801216e:	2320      	movs	r3, #32
 8012170:	6783      	str	r3, [r0, #120]	; 0x78
}
 8012172:	e7e3      	b.n	801213c <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8012174:	2300      	movs	r3, #0
 8012176:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 801217a:	f7ff fe45 	bl	8011e08 <UART_EndRxTransfer>
 801217e:	e7e2      	b.n	8012146 <UART_DMAError+0x1e>

08012180 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012180:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012182:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8012184:	2300      	movs	r3, #0
 8012186:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801218a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801218e:	f7f3 f9ef 	bl	8005570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012192:	bd08      	pop	{r3, pc}

08012194 <HAL_UART_AbortCpltCallback>:
 8012194:	4770      	bx	lr
 8012196:	bf00      	nop

08012198 <HAL_UART_Abort_IT>:
{
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	6803      	ldr	r3, [r0, #0]
 801219c:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801219e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80121a2:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121a6:	e843 2100 	strex	r1, r2, [r3]
 80121aa:	2900      	cmp	r1, #0
 80121ac:	d1f7      	bne.n	801219e <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121ae:	f103 0208 	add.w	r2, r3, #8
 80121b2:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121ba:	f103 0008 	add.w	r0, r3, #8
 80121be:	e840 2100 	strex	r1, r2, [r0]
 80121c2:	2900      	cmp	r1, #0
 80121c4:	d1f3      	bne.n	80121ae <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121c6:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80121c8:	2a01      	cmp	r2, #1
 80121ca:	d05e      	beq.n	801228a <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 80121cc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d071      	beq.n	80122b6 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80121d2:	689a      	ldr	r2, [r3, #8]
 80121d4:	461c      	mov	r4, r3
 80121d6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80121da:	bf18      	it	ne
 80121dc:	4a3b      	ldrne	r2, [pc, #236]	; (80122cc <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 80121de:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 80121e0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80121e2:	b129      	cbz	r1, 80121f0 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121e4:	689a      	ldr	r2, [r3, #8]
 80121e6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80121ea:	bf18      	it	ne
 80121ec:	4a38      	ldrne	r2, [pc, #224]	; (80122d0 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 80121ee:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80121f0:	689a      	ldr	r2, [r3, #8]
 80121f2:	0612      	lsls	r2, r2, #24
 80121f4:	d430      	bmi.n	8012258 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121f6:	689a      	ldr	r2, [r3, #8]
 80121f8:	0656      	lsls	r6, r2, #25
 80121fa:	d515      	bpl.n	8012228 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80121fc:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121fe:	f103 0208 	add.w	r2, r3, #8
 8012202:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801220a:	f103 0008 	add.w	r0, r3, #8
 801220e:	e840 2600 	strex	r6, r2, [r0]
 8012212:	2e00      	cmp	r6, #0
 8012214:	d1f3      	bne.n	80121fe <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8012216:	2900      	cmp	r1, #0
 8012218:	d04f      	beq.n	80122ba <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801221a:	4608      	mov	r0, r1
 801221c:	f7f7 fa22 	bl	8009664 <HAL_DMA_Abort_IT>
 8012220:	b1c0      	cbz	r0, 8012254 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8012222:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012224:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 8012226:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8012228:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801222a:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 801222c:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 801222e:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8012230:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8012234:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 8012236:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 801223a:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801223c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8012240:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012242:	69a2      	ldr	r2, [r4, #24]
 8012244:	f042 0208 	orr.w	r2, r2, #8
 8012248:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 801224a:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 801224c:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801224e:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8012250:	f7ff ffa0 	bl	8012194 <HAL_UART_AbortCpltCallback>
}
 8012254:	2000      	movs	r0, #0
 8012256:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012258:	f103 0208 	add.w	r2, r3, #8
 801225c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012260:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012264:	f103 0608 	add.w	r6, r3, #8
 8012268:	e846 2400 	strex	r4, r2, [r6]
 801226c:	2c00      	cmp	r4, #0
 801226e:	d1f3      	bne.n	8012258 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8012270:	b1e0      	cbz	r0, 80122ac <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8012272:	f7f7 f9f7 	bl	8009664 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012276:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8012278:	b318      	cbz	r0, 80122c2 <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 801227a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801227c:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 801227e:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012280:	461c      	mov	r4, r3
 8012282:	0651      	lsls	r1, r2, #25
 8012284:	d5d0      	bpl.n	8012228 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8012286:	2401      	movs	r4, #1
 8012288:	e01e      	b.n	80122c8 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801228a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801228e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012292:	e843 2100 	strex	r1, r2, [r3]
 8012296:	2900      	cmp	r1, #0
 8012298:	d098      	beq.n	80121cc <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229a:	e853 2f00 	ldrex	r2, [r3]
 801229e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a2:	e843 2100 	strex	r1, r2, [r3]
 80122a6:	2900      	cmp	r1, #0
 80122a8:	d1ef      	bne.n	801228a <HAL_UART_Abort_IT+0xf2>
 80122aa:	e78f      	b.n	80121cc <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122ac:	689a      	ldr	r2, [r3, #8]
 80122ae:	461c      	mov	r4, r3
 80122b0:	0652      	lsls	r2, r2, #25
 80122b2:	d5b9      	bpl.n	8012228 <HAL_UART_Abort_IT+0x90>
 80122b4:	e7a2      	b.n	80121fc <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80122b6:	461c      	mov	r4, r3
 80122b8:	e792      	b.n	80121e0 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 80122ba:	2c01      	cmp	r4, #1
 80122bc:	d1ca      	bne.n	8012254 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80122be:	461c      	mov	r4, r3
 80122c0:	e7b2      	b.n	8012228 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80122c2:	689a      	ldr	r2, [r3, #8]
 80122c4:	0650      	lsls	r0, r2, #25
 80122c6:	d5c5      	bpl.n	8012254 <HAL_UART_Abort_IT+0xbc>
 80122c8:	6f29      	ldr	r1, [r5, #112]	; 0x70
 80122ca:	e798      	b.n	80121fe <HAL_UART_Abort_IT+0x66>
 80122cc:	08012315 	.word	0x08012315
 80122d0:	080122d5 	.word	0x080122d5

080122d4 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80122d4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 80122d6:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80122d8:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 80122dc:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 80122de:	b113      	cbz	r3, 80122e6 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80122e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122e2:	b103      	cbz	r3, 80122e6 <UART_DMARxAbortCallback+0x12>
 80122e4:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 80122e6:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80122e8:	6802      	ldr	r2, [r0, #0]
 80122ea:	210f      	movs	r1, #15
{
 80122ec:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 80122ee:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80122f2:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 80122f4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122f8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80122fc:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80122fe:	6991      	ldr	r1, [r2, #24]
 8012300:	f041 0108 	orr.w	r1, r1, #8
 8012304:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8012306:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012308:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801230a:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 801230c:	f7ff ff42 	bl	8012194 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012310:	bd10      	pop	{r4, pc}
 8012312:	bf00      	nop

08012314 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012314:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8012316:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8012318:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 801231c:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 801231e:	b113      	cbz	r3, 8012326 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8012320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012322:	b103      	cbz	r3, 8012326 <UART_DMATxAbortCallback+0x12>
 8012324:	4770      	bx	lr
{
 8012326:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8012328:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 801232a:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801232c:	6801      	ldr	r1, [r0, #0]
 801232e:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8012330:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8012334:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012338:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 801233c:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 801233e:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012340:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012342:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8012344:	f7ff ff26 	bl	8012194 <HAL_UART_AbortCpltCallback>
}
 8012348:	bd10      	pop	{r4, pc}
 801234a:	bf00      	nop

0801234c <HAL_UARTEx_RxEventCallback>:
}
 801234c:	4770      	bx	lr
 801234e:	bf00      	nop

08012350 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012350:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8012352:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012354:	2b22      	cmp	r3, #34	; 0x22
 8012356:	d005      	beq.n	8012364 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012358:	6802      	ldr	r2, [r0, #0]
 801235a:	6993      	ldr	r3, [r2, #24]
 801235c:	f043 0308 	orr.w	r3, r3, #8
 8012360:	6193      	str	r3, [r2, #24]
  }
}
 8012362:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012364:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012366:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801236c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801236e:	400b      	ands	r3, r1
 8012370:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8012372:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8012376:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8012378:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 801237a:	3201      	adds	r2, #1
    huart->RxXferCount--;
 801237c:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 801237e:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8012380:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8012384:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8012388:	b29b      	uxth	r3, r3
 801238a:	2b00      	cmp	r3, #0
 801238c:	d1e9      	bne.n	8012362 <UART_RxISR_8BIT+0x12>
 801238e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012390:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012394:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012398:	e843 2100 	strex	r1, r2, [r3]
 801239c:	2900      	cmp	r1, #0
 801239e:	d1f7      	bne.n	8012390 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123a0:	f103 0208 	add.w	r2, r3, #8
 80123a4:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80123a8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ac:	f103 0c08 	add.w	ip, r3, #8
 80123b0:	e84c 2100 	strex	r1, r2, [ip]
 80123b4:	2900      	cmp	r1, #0
 80123b6:	d1f3      	bne.n	80123a0 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 80123b8:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 80123ba:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 80123bc:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123be:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80123c0:	2a01      	cmp	r2, #1
 80123c2:	d112      	bne.n	80123ea <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123c4:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ce:	e843 2100 	strex	r1, r2, [r3]
 80123d2:	2900      	cmp	r1, #0
 80123d4:	d1f7      	bne.n	80123c6 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123d6:	69da      	ldr	r2, [r3, #28]
 80123d8:	06d2      	lsls	r2, r2, #27
 80123da:	d501      	bpl.n	80123e0 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123dc:	2210      	movs	r2, #16
 80123de:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123e0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80123e4:	f7ff ffb2 	bl	801234c <HAL_UARTEx_RxEventCallback>
}
 80123e8:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 80123ea:	f7f3 f84b 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 80123ee:	bd08      	pop	{r3, pc}

080123f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80123f0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123f2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80123f4:	2b22      	cmp	r3, #34	; 0x22
 80123f6:	d005      	beq.n	8012404 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80123f8:	6802      	ldr	r2, [r0, #0]
 80123fa:	6993      	ldr	r3, [r2, #24]
 80123fc:	f043 0308 	orr.w	r3, r3, #8
 8012400:	6193      	str	r3, [r2, #24]
  }
}
 8012402:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012404:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8012406:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 801240c:	6d41      	ldr	r1, [r0, #84]	; 0x54
 801240e:	ea02 020c 	and.w	r2, r2, ip
 8012412:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8012416:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 801241a:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 801241c:	3a01      	subs	r2, #1
 801241e:	b292      	uxth	r2, r2
 8012420:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8012424:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8012428:	b292      	uxth	r2, r2
 801242a:	2a00      	cmp	r2, #0
 801242c:	d1e9      	bne.n	8012402 <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801242e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012436:	e843 2100 	strex	r1, r2, [r3]
 801243a:	2900      	cmp	r1, #0
 801243c:	d1f7      	bne.n	801242e <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801243e:	f103 0208 	add.w	r2, r3, #8
 8012442:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012446:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801244a:	f103 0c08 	add.w	ip, r3, #8
 801244e:	e84c 2100 	strex	r1, r2, [ip]
 8012452:	2900      	cmp	r1, #0
 8012454:	d1f3      	bne.n	801243e <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8012456:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8012458:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 801245a:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801245c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 801245e:	2a01      	cmp	r2, #1
 8012460:	d112      	bne.n	8012488 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012462:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012464:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012468:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801246c:	e843 2100 	strex	r1, r2, [r3]
 8012470:	2900      	cmp	r1, #0
 8012472:	d1f7      	bne.n	8012464 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012474:	69da      	ldr	r2, [r3, #28]
 8012476:	06d2      	lsls	r2, r2, #27
 8012478:	d501      	bpl.n	801247e <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801247a:	2210      	movs	r2, #16
 801247c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801247e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8012482:	f7ff ff63 	bl	801234c <HAL_UARTEx_RxEventCallback>
}
 8012486:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8012488:	f7f2 fffc 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 801248c:	bd08      	pop	{r3, pc}
 801248e:	bf00      	nop

08012490 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012490:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8012492:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012494:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8012496:	2b01      	cmp	r3, #1
 8012498:	d002      	beq.n	80124a0 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 801249a:	f7ff fe43 	bl	8012124 <HAL_UART_RxHalfCpltCallback>
}
 801249e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80124a0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 80124a4:	0849      	lsrs	r1, r1, #1
 80124a6:	f7ff ff51 	bl	801234c <HAL_UARTEx_RxEventCallback>
}
 80124aa:	bd08      	pop	{r3, pc}

080124ac <UART_DMAReceiveCplt>:
{
 80124ac:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124ae:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124b0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80124b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124b6:	d028      	beq.n	801250a <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 80124b8:	2200      	movs	r2, #0
 80124ba:	6803      	ldr	r3, [r0, #0]
 80124bc:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124c8:	e843 2100 	strex	r1, r2, [r3]
 80124cc:	2900      	cmp	r1, #0
 80124ce:	d1f7      	bne.n	80124c0 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d0:	f103 0208 	add.w	r2, r3, #8
 80124d4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80124d8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124dc:	f103 0c08 	add.w	ip, r3, #8
 80124e0:	e84c 2100 	strex	r1, r2, [ip]
 80124e4:	2900      	cmp	r1, #0
 80124e6:	d1f3      	bne.n	80124d0 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e8:	f103 0208 	add.w	r2, r3, #8
 80124ec:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80124f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f4:	f103 0c08 	add.w	ip, r3, #8
 80124f8:	e84c 2100 	strex	r1, r2, [ip]
 80124fc:	2900      	cmp	r1, #0
 80124fe:	d1f3      	bne.n	80124e8 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8012500:	2220      	movs	r2, #32
 8012502:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012504:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8012506:	2a01      	cmp	r2, #1
 8012508:	d005      	beq.n	8012516 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801250a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801250c:	2b01      	cmp	r3, #1
 801250e:	d013      	beq.n	8012538 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8012510:	f7f2 ffb8 	bl	8005484 <HAL_UART_RxCpltCallback>
}
 8012514:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012516:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801251a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801251e:	e843 2100 	strex	r1, r2, [r3]
 8012522:	2900      	cmp	r1, #0
 8012524:	d0f1      	beq.n	801250a <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012526:	e853 2f00 	ldrex	r2, [r3]
 801252a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801252e:	e843 2100 	strex	r1, r2, [r3]
 8012532:	2900      	cmp	r1, #0
 8012534:	d1ef      	bne.n	8012516 <UART_DMAReceiveCplt+0x6a>
 8012536:	e7e8      	b.n	801250a <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012538:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801253c:	f7ff ff06 	bl	801234c <HAL_UARTEx_RxEventCallback>
}
 8012540:	bd08      	pop	{r3, pc}
 8012542:	bf00      	nop

08012544 <HAL_UARTEx_WakeupCallback>:
}
 8012544:	4770      	bx	lr
 8012546:	bf00      	nop

08012548 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012548:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801254a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801254e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012550:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8012552:	ea12 0f0c 	tst.w	r2, ip
{
 8012556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801255a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801255c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 801255e:	d17d      	bne.n	801265c <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012560:	0697      	lsls	r7, r2, #26
 8012562:	d502      	bpl.n	801256a <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012564:	068e      	lsls	r6, r1, #26
 8012566:	f100 80f4 	bmi.w	8012752 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801256a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801256c:	2801      	cmp	r0, #1
 801256e:	d024      	beq.n	80125ba <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012570:	02d0      	lsls	r0, r2, #11
 8012572:	d502      	bpl.n	801257a <HAL_UART_IRQHandler+0x32>
 8012574:	026f      	lsls	r7, r5, #9
 8012576:	f100 80f1 	bmi.w	801275c <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 801257a:	0616      	lsls	r6, r2, #24
 801257c:	d414      	bmi.n	80125a8 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801257e:	0650      	lsls	r0, r2, #25
 8012580:	d501      	bpl.n	8012586 <HAL_UART_IRQHandler+0x3e>
 8012582:	064a      	lsls	r2, r1, #25
 8012584:	d401      	bmi.n	801258a <HAL_UART_IRQHandler+0x42>
}
 8012586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801258a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801258e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012592:	e843 2100 	strex	r1, r2, [r3]
 8012596:	2900      	cmp	r1, #0
 8012598:	d1f7      	bne.n	801258a <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 801259a:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 801259c:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801259e:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 80125a0:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 80125a2:	f7ef fcdb 	bl	8001f5c <HAL_UART_TxCpltCallback>
}
 80125a6:	e7ee      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80125a8:	060d      	lsls	r5, r1, #24
 80125aa:	d5e8      	bpl.n	801257e <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 80125ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d0e9      	beq.n	8012586 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 80125b2:	4620      	mov	r0, r4
}
 80125b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80125b8:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80125ba:	06d7      	lsls	r7, r2, #27
 80125bc:	d5d8      	bpl.n	8012570 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80125be:	06ce      	lsls	r6, r1, #27
 80125c0:	d5d6      	bpl.n	8012570 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80125c2:	2210      	movs	r2, #16
 80125c4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80125c6:	689a      	ldr	r2, [r3, #8]
 80125c8:	0655      	lsls	r5, r2, #25
 80125ca:	f140 80d9 	bpl.w	8012780 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80125ce:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80125d0:	6802      	ldr	r2, [r0, #0]
 80125d2:	6852      	ldr	r2, [r2, #4]
 80125d4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80125d6:	2a00      	cmp	r2, #0
 80125d8:	d0d5      	beq.n	8012586 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80125da:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80125de:	4291      	cmp	r1, r2
 80125e0:	d9d1      	bls.n	8012586 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 80125e2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80125e6:	69c2      	ldr	r2, [r0, #28]
 80125e8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80125ec:	d02e      	beq.n	801264c <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125ee:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80125f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f6:	e843 2100 	strex	r1, r2, [r3]
 80125fa:	2900      	cmp	r1, #0
 80125fc:	d1f7      	bne.n	80125ee <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125fe:	f103 0208 	add.w	r2, r3, #8
 8012602:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012606:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801260a:	f103 0508 	add.w	r5, r3, #8
 801260e:	e845 2100 	strex	r1, r2, [r5]
 8012612:	2900      	cmp	r1, #0
 8012614:	d1f3      	bne.n	80125fe <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012616:	f103 0208 	add.w	r2, r3, #8
 801261a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012622:	f103 0508 	add.w	r5, r3, #8
 8012626:	e845 2100 	strex	r1, r2, [r5]
 801262a:	2900      	cmp	r1, #0
 801262c:	d1f3      	bne.n	8012616 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 801262e:	2220      	movs	r2, #32
 8012630:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012632:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012634:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012638:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263c:	e843 2100 	strex	r1, r2, [r3]
 8012640:	2900      	cmp	r1, #0
 8012642:	d1f7      	bne.n	8012634 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012644:	f7f6 ffc6 	bl	80095d4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012648:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801264c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8012650:	4620      	mov	r0, r4
 8012652:	1ac9      	subs	r1, r1, r3
 8012654:	b289      	uxth	r1, r1
 8012656:	f7ff fe79 	bl	801234c <HAL_UARTEx_RxEventCallback>
 801265a:	e794      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801265c:	4864      	ldr	r0, [pc, #400]	; (80127f0 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 801265e:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012662:	4008      	ands	r0, r1
 8012664:	4330      	orrs	r0, r6
 8012666:	d080      	beq.n	801256a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012668:	07d5      	lsls	r5, r2, #31
 801266a:	461f      	mov	r7, r3
 801266c:	d509      	bpl.n	8012682 <HAL_UART_IRQHandler+0x13a>
 801266e:	05c8      	lsls	r0, r1, #23
 8012670:	d507      	bpl.n	8012682 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012672:	2001      	movs	r0, #1
 8012674:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012676:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801267a:	f040 0001 	orr.w	r0, r0, #1
 801267e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012682:	0795      	lsls	r5, r2, #30
 8012684:	d560      	bpl.n	8012748 <HAL_UART_IRQHandler+0x200>
 8012686:	b18e      	cbz	r6, 80126ac <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012688:	2002      	movs	r0, #2
 801268a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801268c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012690:	f040 0004 	orr.w	r0, r0, #4
 8012694:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012698:	0750      	lsls	r0, r2, #29
 801269a:	d507      	bpl.n	80126ac <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801269c:	2004      	movs	r0, #4
 801269e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80126a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126a4:	f040 0002 	orr.w	r0, r0, #2
 80126a8:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 80126ac:	0710      	lsls	r0, r2, #28
 80126ae:	d50b      	bpl.n	80126c8 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80126b0:	f001 0020 	and.w	r0, r1, #32
 80126b4:	4330      	orrs	r0, r6
 80126b6:	d007      	beq.n	80126c8 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80126b8:	2008      	movs	r0, #8
 80126ba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80126bc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80126c0:	f040 0008 	orr.w	r0, r0, #8
 80126c4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80126c8:	0516      	lsls	r6, r2, #20
 80126ca:	d50a      	bpl.n	80126e2 <HAL_UART_IRQHandler+0x19a>
 80126cc:	014d      	lsls	r5, r1, #5
 80126ce:	d508      	bpl.n	80126e2 <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80126d0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80126d4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80126d6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80126da:	f043 0320 	orr.w	r3, r3, #32
 80126de:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80126e2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	f43f af4d 	beq.w	8012586 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80126ec:	0690      	lsls	r0, r2, #26
 80126ee:	d501      	bpl.n	80126f4 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80126f0:	0689      	lsls	r1, r1, #26
 80126f2:	d43e      	bmi.n	8012772 <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80126f4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80126f8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126fa:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126fc:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012704:	431d      	orrs	r5, r3
 8012706:	d06e      	beq.n	80127e6 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 8012708:	f7ff fb7e 	bl	8011e08 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801270c:	6823      	ldr	r3, [r4, #0]
 801270e:	689a      	ldr	r2, [r3, #8]
 8012710:	0652      	lsls	r2, r2, #25
 8012712:	d52a      	bpl.n	801276a <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012714:	f103 0208 	add.w	r2, r3, #8
 8012718:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801271c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012720:	f103 0008 	add.w	r0, r3, #8
 8012724:	e840 2100 	strex	r1, r2, [r0]
 8012728:	2900      	cmp	r1, #0
 801272a:	d1f3      	bne.n	8012714 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 801272c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801272e:	b1e0      	cbz	r0, 801276a <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012730:	4b30      	ldr	r3, [pc, #192]	; (80127f4 <HAL_UART_IRQHandler+0x2ac>)
 8012732:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012734:	f7f6 ff96 	bl	8009664 <HAL_DMA_Abort_IT>
 8012738:	2800      	cmp	r0, #0
 801273a:	f43f af24 	beq.w	8012586 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801273e:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8012740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012744:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012746:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012748:	0755      	lsls	r5, r2, #29
 801274a:	d5af      	bpl.n	80126ac <HAL_UART_IRQHandler+0x164>
 801274c:	2e00      	cmp	r6, #0
 801274e:	d1a5      	bne.n	801269c <HAL_UART_IRQHandler+0x154>
 8012750:	e7ac      	b.n	80126ac <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8012752:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8012754:	2b00      	cmp	r3, #0
 8012756:	f47f af2d 	bne.w	80125b4 <HAL_UART_IRQHandler+0x6c>
 801275a:	e714      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801275c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8012760:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012762:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8012764:	f7ff feee 	bl	8012544 <HAL_UARTEx_WakeupCallback>
    return;
 8012768:	e70d      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 801276a:	4620      	mov	r0, r4
 801276c:	f7f2 ff00 	bl	8005570 <HAL_UART_ErrorCallback>
 8012770:	e709      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8012772:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012774:	2b00      	cmp	r3, #0
 8012776:	d0bd      	beq.n	80126f4 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8012778:	4620      	mov	r0, r4
 801277a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801277c:	6827      	ldr	r7, [r4, #0]
 801277e:	e7b9      	b.n	80126f4 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012780:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8012784:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8012788:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801278c:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801278e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012790:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8012792:	2900      	cmp	r1, #0
 8012794:	f43f aef7 	beq.w	8012586 <HAL_UART_IRQHandler+0x3e>
 8012798:	2a00      	cmp	r2, #0
 801279a:	f43f aef4 	beq.w	8012586 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801279e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80127a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127a6:	e843 2000 	strex	r0, r2, [r3]
 80127aa:	2800      	cmp	r0, #0
 80127ac:	d1f7      	bne.n	801279e <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ae:	f103 0208 	add.w	r2, r3, #8
 80127b2:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80127b6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127ba:	f103 0508 	add.w	r5, r3, #8
 80127be:	e845 2000 	strex	r0, r2, [r5]
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d1f3      	bne.n	80127ae <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 80127c6:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80127c8:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 80127ca:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80127cc:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127ce:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80127d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127d6:	e843 2000 	strex	r0, r2, [r3]
 80127da:	2800      	cmp	r0, #0
 80127dc:	d1f7      	bne.n	80127ce <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80127de:	4620      	mov	r0, r4
 80127e0:	f7ff fdb4 	bl	801234c <HAL_UARTEx_RxEventCallback>
 80127e4:	e6cf      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 80127e6:	f7f2 fec3 	bl	8005570 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127ea:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80127ee:	e6ca      	b.n	8012586 <HAL_UART_IRQHandler+0x3e>
 80127f0:	04000120 	.word	0x04000120
 80127f4:	08012181 	.word	0x08012181

080127f8 <UART_SetConfig>:
{
 80127f8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80127fa:	6842      	ldr	r2, [r0, #4]
{
 80127fc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80127fe:	4bac      	ldr	r3, [pc, #688]	; (8012ab0 <UART_SetConfig+0x2b8>)
 8012800:	429a      	cmp	r2, r3
 8012802:	f200 80bb 	bhi.w	801297c <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012806:	68a3      	ldr	r3, [r4, #8]
 8012808:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 801280c:	d002      	beq.n	8012814 <UART_SetConfig+0x1c>
 801280e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012812:	d179      	bne.n	8012908 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8012814:	68e3      	ldr	r3, [r4, #12]
 8012816:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 801281a:	d17e      	bne.n	801291a <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 801281c:	6a23      	ldr	r3, [r4, #32]
 801281e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8012822:	f040 8084 	bne.w	801292e <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8012826:	6923      	ldr	r3, [r4, #16]
 8012828:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 801282c:	d002      	beq.n	8012834 <UART_SetConfig+0x3c>
 801282e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012832:	d163      	bne.n	80128fc <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8012834:	6963      	ldr	r3, [r4, #20]
 8012836:	f033 020c 	bics.w	r2, r3, #12
 801283a:	d146      	bne.n	80128ca <UART_SetConfig+0xd2>
 801283c:	2b00      	cmp	r3, #0
 801283e:	d044      	beq.n	80128ca <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012840:	69a3      	ldr	r3, [r4, #24]
 8012842:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8012846:	d149      	bne.n	80128dc <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8012848:	69e0      	ldr	r0, [r4, #28]
 801284a:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 801284e:	d14e      	bne.n	80128ee <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012850:	6921      	ldr	r1, [r4, #16]
 8012852:	68a2      	ldr	r2, [r4, #8]
 8012854:	6823      	ldr	r3, [r4, #0]
 8012856:	430a      	orrs	r2, r1
 8012858:	6961      	ldr	r1, [r4, #20]
 801285a:	681d      	ldr	r5, [r3, #0]
 801285c:	430a      	orrs	r2, r1
 801285e:	4995      	ldr	r1, [pc, #596]	; (8012ab4 <UART_SetConfig+0x2bc>)
 8012860:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012862:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012864:	430a      	orrs	r2, r1
 8012866:	4302      	orrs	r2, r0
 8012868:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801286a:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801286c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801286e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8012872:	4329      	orrs	r1, r5
 8012874:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8012876:	6a21      	ldr	r1, [r4, #32]
 8012878:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801287a:	6899      	ldr	r1, [r3, #8]
 801287c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8012880:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012882:	498d      	ldr	r1, [pc, #564]	; (8012ab8 <UART_SetConfig+0x2c0>)
 8012884:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012886:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012888:	d07e      	beq.n	8012988 <UART_SetConfig+0x190>
 801288a:	4a8c      	ldr	r2, [pc, #560]	; (8012abc <UART_SetConfig+0x2c4>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d054      	beq.n	801293a <UART_SetConfig+0x142>
 8012890:	4a8b      	ldr	r2, [pc, #556]	; (8012ac0 <UART_SetConfig+0x2c8>)
 8012892:	4293      	cmp	r3, r2
 8012894:	f000 812a 	beq.w	8012aec <UART_SetConfig+0x2f4>
 8012898:	4a8a      	ldr	r2, [pc, #552]	; (8012ac4 <UART_SetConfig+0x2cc>)
 801289a:	4293      	cmp	r3, r2
 801289c:	f000 8137 	beq.w	8012b0e <UART_SetConfig+0x316>
 80128a0:	4a89      	ldr	r2, [pc, #548]	; (8012ac8 <UART_SetConfig+0x2d0>)
 80128a2:	4293      	cmp	r3, r2
 80128a4:	f000 809e 	beq.w	80129e4 <UART_SetConfig+0x1ec>
 80128a8:	4a88      	ldr	r2, [pc, #544]	; (8012acc <UART_SetConfig+0x2d4>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	f000 80d1 	beq.w	8012a52 <UART_SetConfig+0x25a>
 80128b0:	4a87      	ldr	r2, [pc, #540]	; (8012ad0 <UART_SetConfig+0x2d8>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	f000 8151 	beq.w	8012b5a <UART_SetConfig+0x362>
 80128b8:	4a86      	ldr	r2, [pc, #536]	; (8012ad4 <UART_SetConfig+0x2dc>)
 80128ba:	4293      	cmp	r3, r2
 80128bc:	f000 8164 	beq.w	8012b88 <UART_SetConfig+0x390>
    switch (clocksource)
 80128c0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80128c2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80128c4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80128c8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80128ca:	f640 3176 	movw	r1, #2934	; 0xb76
 80128ce:	4882      	ldr	r0, [pc, #520]	; (8012ad8 <UART_SetConfig+0x2e0>)
 80128d0:	f7f2 fb70 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80128d4:	69a3      	ldr	r3, [r4, #24]
 80128d6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80128da:	d0b5      	beq.n	8012848 <UART_SetConfig+0x50>
 80128dc:	487e      	ldr	r0, [pc, #504]	; (8012ad8 <UART_SetConfig+0x2e0>)
 80128de:	f640 3177 	movw	r1, #2935	; 0xb77
 80128e2:	f7f2 fb67 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80128e6:	69e0      	ldr	r0, [r4, #28]
 80128e8:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80128ec:	d0b0      	beq.n	8012850 <UART_SetConfig+0x58>
 80128ee:	487a      	ldr	r0, [pc, #488]	; (8012ad8 <UART_SetConfig+0x2e0>)
 80128f0:	f640 3178 	movw	r1, #2936	; 0xb78
 80128f4:	f7f2 fb5e 	bl	8004fb4 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80128f8:	69e0      	ldr	r0, [r4, #28]
 80128fa:	e7a9      	b.n	8012850 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80128fc:	f640 3175 	movw	r1, #2933	; 0xb75
 8012900:	4875      	ldr	r0, [pc, #468]	; (8012ad8 <UART_SetConfig+0x2e0>)
 8012902:	f7f2 fb57 	bl	8004fb4 <assert_failed>
 8012906:	e795      	b.n	8012834 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8012908:	f640 3171 	movw	r1, #2929	; 0xb71
 801290c:	4872      	ldr	r0, [pc, #456]	; (8012ad8 <UART_SetConfig+0x2e0>)
 801290e:	f7f2 fb51 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8012912:	68e3      	ldr	r3, [r4, #12]
 8012914:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8012918:	d080      	beq.n	801281c <UART_SetConfig+0x24>
 801291a:	f640 3172 	movw	r1, #2930	; 0xb72
 801291e:	486e      	ldr	r0, [pc, #440]	; (8012ad8 <UART_SetConfig+0x2e0>)
 8012920:	f7f2 fb48 	bl	8004fb4 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8012924:	6a23      	ldr	r3, [r4, #32]
 8012926:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 801292a:	f43f af7c 	beq.w	8012826 <UART_SetConfig+0x2e>
 801292e:	f640 3173 	movw	r1, #2931	; 0xb73
 8012932:	4869      	ldr	r0, [pc, #420]	; (8012ad8 <UART_SetConfig+0x2e0>)
 8012934:	f7f2 fb3e 	bl	8004fb4 <assert_failed>
 8012938:	e775      	b.n	8012826 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801293a:	4b68      	ldr	r3, [pc, #416]	; (8012adc <UART_SetConfig+0x2e4>)
 801293c:	4a68      	ldr	r2, [pc, #416]	; (8012ae0 <UART_SetConfig+0x2e8>)
 801293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012942:	f003 030c 	and.w	r3, r3, #12
 8012946:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012948:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801294c:	d033      	beq.n	80129b6 <UART_SetConfig+0x1be>
    switch (clocksource)
 801294e:	2b08      	cmp	r3, #8
 8012950:	d8b6      	bhi.n	80128c0 <UART_SetConfig+0xc8>
 8012952:	a201      	add	r2, pc, #4	; (adr r2, 8012958 <UART_SetConfig+0x160>)
 8012954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012958:	08012a13 	.word	0x08012a13
 801295c:	0801299f 	.word	0x0801299f
 8012960:	08012a69 	.word	0x08012a69
 8012964:	080128c1 	.word	0x080128c1
 8012968:	08012a07 	.word	0x08012a07
 801296c:	080128c1 	.word	0x080128c1
 8012970:	080128c1 	.word	0x080128c1
 8012974:	080128c1 	.word	0x080128c1
 8012978:	08012a29 	.word	0x08012a29
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 801297c:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8012980:	4855      	ldr	r0, [pc, #340]	; (8012ad8 <UART_SetConfig+0x2e0>)
 8012982:	f7f2 fb17 	bl	8004fb4 <assert_failed>
 8012986:	e73e      	b.n	8012806 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012988:	4b54      	ldr	r3, [pc, #336]	; (8012adc <UART_SetConfig+0x2e4>)
 801298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801298e:	f003 0303 	and.w	r3, r3, #3
 8012992:	3b01      	subs	r3, #1
 8012994:	2b02      	cmp	r3, #2
 8012996:	d90b      	bls.n	80129b0 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012998:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801299c:	d066      	beq.n	8012a6c <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 801299e:	f7fb f9d5 	bl	800dd4c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d142      	bne.n	8012a2c <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 80129a6:	2300      	movs	r3, #0
 80129a8:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 80129aa:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 80129ae:	bd38      	pop	{r3, r4, r5, pc}
 80129b0:	4a4c      	ldr	r2, [pc, #304]	; (8012ae4 <UART_SetConfig+0x2ec>)
 80129b2:	5cd3      	ldrb	r3, [r2, r3]
 80129b4:	e7c8      	b.n	8012948 <UART_SetConfig+0x150>
    switch (clocksource)
 80129b6:	2b08      	cmp	r3, #8
 80129b8:	d882      	bhi.n	80128c0 <UART_SetConfig+0xc8>
 80129ba:	a201      	add	r2, pc, #4	; (adr r2, 80129c0 <UART_SetConfig+0x1c8>)
 80129bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129c0:	08012aa9 	.word	0x08012aa9
 80129c4:	08012a6d 	.word	0x08012a6d
 80129c8:	08012b51 	.word	0x08012b51
 80129cc:	080128c1 	.word	0x080128c1
 80129d0:	08012aa3 	.word	0x08012aa3
 80129d4:	080128c1 	.word	0x080128c1
 80129d8:	080128c1 	.word	0x080128c1
 80129dc:	080128c1 	.word	0x080128c1
 80129e0:	08012b55 	.word	0x08012b55
  UART_GETCLOCKSOURCE(huart, clocksource);
 80129e4:	4b3d      	ldr	r3, [pc, #244]	; (8012adc <UART_SetConfig+0x2e4>)
 80129e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80129ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80129f2:	d036      	beq.n	8012a62 <UART_SetConfig+0x26a>
 80129f4:	d810      	bhi.n	8012a18 <UART_SetConfig+0x220>
 80129f6:	b14b      	cbz	r3, 8012a0c <UART_SetConfig+0x214>
 80129f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129fc:	f47f af60 	bne.w	80128c0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a00:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a04:	d04d      	beq.n	8012aa2 <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 8012a06:	f7fb f839 	bl	800da7c <HAL_RCC_GetSysClockFreq>
        break;
 8012a0a:	e7ca      	b.n	80129a2 <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a10:	d04a      	beq.n	8012aa8 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012a12:	f7fb f98b 	bl	800dd2c <HAL_RCC_GetPCLK1Freq>
        break;
 8012a16:	e7c4      	b.n	80129a2 <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a1c:	f47f af50 	bne.w	80128c0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a20:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a24:	f000 8096 	beq.w	8012b54 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 8012a28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012a2c:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a2e:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012a32:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8012a36:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a3a:	f1a3 0110 	sub.w	r1, r3, #16
 8012a3e:	4291      	cmp	r1, r2
 8012a40:	f63f af3e 	bhi.w	80128c0 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012a44:	6822      	ldr	r2, [r4, #0]
 8012a46:	2000      	movs	r0, #0
 8012a48:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8012a4a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8012a4c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012a52:	4b22      	ldr	r3, [pc, #136]	; (8012adc <UART_SetConfig+0x2e4>)
 8012a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8012a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a60:	d168      	bne.n	8012b34 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a62:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012a66:	d073      	beq.n	8012b50 <UART_SetConfig+0x358>
    switch (clocksource)
 8012a68:	481f      	ldr	r0, [pc, #124]	; (8012ae8 <UART_SetConfig+0x2f0>)
 8012a6a:	e7df      	b.n	8012a2c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 8012a6c:	f7fb f96e 	bl	800dd4c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012a70:	2800      	cmp	r0, #0
 8012a72:	d098      	beq.n	80129a6 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a74:	0043      	lsls	r3, r0, #1
 8012a76:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a78:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012a7c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012a80:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a84:	f1a3 0210 	sub.w	r2, r3, #16
 8012a88:	428a      	cmp	r2, r1
 8012a8a:	f63f af19 	bhi.w	80128c0 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a8e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a92:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8012a96:	6821      	ldr	r1, [r4, #0]
 8012a98:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a9a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8012a9c:	4313      	orrs	r3, r2
 8012a9e:	60cb      	str	r3, [r1, #12]
 8012aa0:	e70f      	b.n	80128c2 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8012aa2:	f7fa ffeb 	bl	800da7c <HAL_RCC_GetSysClockFreq>
        break;
 8012aa6:	e7e3      	b.n	8012a70 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012aa8:	f7fb f940 	bl	800dd2c <HAL_RCC_GetPCLK1Freq>
        break;
 8012aac:	e7e0      	b.n	8012a70 <UART_SetConfig+0x278>
 8012aae:	bf00      	nop
 8012ab0:	019bfcc0 	.word	0x019bfcc0
 8012ab4:	efff69f3 	.word	0xefff69f3
 8012ab8:	40011000 	.word	0x40011000
 8012abc:	40004400 	.word	0x40004400
 8012ac0:	40004800 	.word	0x40004800
 8012ac4:	40004c00 	.word	0x40004c00
 8012ac8:	40005000 	.word	0x40005000
 8012acc:	40011400 	.word	0x40011400
 8012ad0:	40007800 	.word	0x40007800
 8012ad4:	40007c00 	.word	0x40007c00
 8012ad8:	0802cc78 	.word	0x0802cc78
 8012adc:	40023800 	.word	0x40023800
 8012ae0:	0802ccb8 	.word	0x0802ccb8
 8012ae4:	0802ccb4 	.word	0x0802ccb4
 8012ae8:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012aec:	4b32      	ldr	r3, [pc, #200]	; (8012bb8 <UART_SetConfig+0x3c0>)
 8012aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012af2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8012af6:	2b20      	cmp	r3, #32
 8012af8:	d0b3      	beq.n	8012a62 <UART_SetConfig+0x26a>
 8012afa:	d805      	bhi.n	8012b08 <UART_SetConfig+0x310>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d085      	beq.n	8012a0c <UART_SetConfig+0x214>
 8012b00:	2b10      	cmp	r3, #16
 8012b02:	f43f af7d 	beq.w	8012a00 <UART_SetConfig+0x208>
 8012b06:	e6db      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b08:	2b30      	cmp	r3, #48	; 0x30
 8012b0a:	d089      	beq.n	8012a20 <UART_SetConfig+0x228>
 8012b0c:	e6d8      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b0e:	4b2a      	ldr	r3, [pc, #168]	; (8012bb8 <UART_SetConfig+0x3c0>)
 8012b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012b18:	2b80      	cmp	r3, #128	; 0x80
 8012b1a:	d0a2      	beq.n	8012a62 <UART_SetConfig+0x26a>
 8012b1c:	d806      	bhi.n	8012b2c <UART_SetConfig+0x334>
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	f43f af74 	beq.w	8012a0c <UART_SetConfig+0x214>
 8012b24:	2b40      	cmp	r3, #64	; 0x40
 8012b26:	f43f af6b 	beq.w	8012a00 <UART_SetConfig+0x208>
 8012b2a:	e6c9      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b2c:	2bc0      	cmp	r3, #192	; 0xc0
 8012b2e:	f43f af77 	beq.w	8012a20 <UART_SetConfig+0x228>
 8012b32:	e6c5      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b34:	d807      	bhi.n	8012b46 <UART_SetConfig+0x34e>
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	f43f af2e 	beq.w	8012998 <UART_SetConfig+0x1a0>
 8012b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b40:	f43f af5e 	beq.w	8012a00 <UART_SetConfig+0x208>
 8012b44:	e6bc      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012b4a:	f43f af69 	beq.w	8012a20 <UART_SetConfig+0x228>
 8012b4e:	e6b7      	b.n	80128c0 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012b50:	4b1a      	ldr	r3, [pc, #104]	; (8012bbc <UART_SetConfig+0x3c4>)
 8012b52:	e790      	b.n	8012a76 <UART_SetConfig+0x27e>
    switch (clocksource)
 8012b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012b58:	e78d      	b.n	8012a76 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012b5a:	4b17      	ldr	r3, [pc, #92]	; (8012bb8 <UART_SetConfig+0x3c0>)
 8012b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012b68:	f43f af7b 	beq.w	8012a62 <UART_SetConfig+0x26a>
 8012b6c:	d807      	bhi.n	8012b7e <UART_SetConfig+0x386>
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	f43f af4c 	beq.w	8012a0c <UART_SetConfig+0x214>
 8012b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b78:	f43f af42 	beq.w	8012a00 <UART_SetConfig+0x208>
 8012b7c:	e6a0      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012b82:	f43f af4d 	beq.w	8012a20 <UART_SetConfig+0x228>
 8012b86:	e69b      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012b88:	4b0b      	ldr	r3, [pc, #44]	; (8012bb8 <UART_SetConfig+0x3c0>)
 8012b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012b92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b96:	f43f af64 	beq.w	8012a62 <UART_SetConfig+0x26a>
 8012b9a:	d807      	bhi.n	8012bac <UART_SetConfig+0x3b4>
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f43f af35 	beq.w	8012a0c <UART_SetConfig+0x214>
 8012ba2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012ba6:	f43f af2b 	beq.w	8012a00 <UART_SetConfig+0x208>
 8012baa:	e689      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012bac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012bb0:	f43f af36 	beq.w	8012a20 <UART_SetConfig+0x228>
 8012bb4:	e684      	b.n	80128c0 <UART_SetConfig+0xc8>
 8012bb6:	bf00      	nop
 8012bb8:	40023800 	.word	0x40023800
 8012bbc:	01e84800 	.word	0x01e84800

08012bc0 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012bc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012bc2:	2bff      	cmp	r3, #255	; 0xff
{
 8012bc4:	b510      	push	{r4, lr}
 8012bc6:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012bc8:	d87b      	bhi.n	8012cc2 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012bca:	07da      	lsls	r2, r3, #31
 8012bcc:	d50a      	bpl.n	8012be4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012bce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012bd0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8012bd4:	f040 808e 	bne.w	8012cf4 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012bd8:	6820      	ldr	r0, [r4, #0]
 8012bda:	6842      	ldr	r2, [r0, #4]
 8012bdc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8012be0:	430a      	orrs	r2, r1
 8012be2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012be4:	0798      	lsls	r0, r3, #30
 8012be6:	d50a      	bpl.n	8012bfe <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012be8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012bea:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8012bee:	f040 8089 	bne.w	8012d04 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012bf2:	6820      	ldr	r0, [r4, #0]
 8012bf4:	6842      	ldr	r2, [r0, #4]
 8012bf6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012bfa:	430a      	orrs	r2, r1
 8012bfc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012bfe:	0759      	lsls	r1, r3, #29
 8012c00:	d50a      	bpl.n	8012c18 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8012c02:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c04:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8012c08:	f040 8084 	bne.w	8012d14 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c0c:	6820      	ldr	r0, [r4, #0]
 8012c0e:	6842      	ldr	r2, [r0, #4]
 8012c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012c14:	430a      	orrs	r2, r1
 8012c16:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012c18:	071a      	lsls	r2, r3, #28
 8012c1a:	d509      	bpl.n	8012c30 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8012c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c1e:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8012c22:	d17f      	bne.n	8012d24 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012c24:	6820      	ldr	r0, [r4, #0]
 8012c26:	6842      	ldr	r2, [r0, #4]
 8012c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012c2c:	430a      	orrs	r2, r1
 8012c2e:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012c30:	06d8      	lsls	r0, r3, #27
 8012c32:	d509      	bpl.n	8012c48 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012c34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012c36:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8012c3a:	d17b      	bne.n	8012d34 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012c3c:	6820      	ldr	r0, [r4, #0]
 8012c3e:	6882      	ldr	r2, [r0, #8]
 8012c40:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012c44:	430a      	orrs	r2, r1
 8012c46:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012c48:	0699      	lsls	r1, r3, #26
 8012c4a:	d509      	bpl.n	8012c60 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8012c4c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012c4e:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8012c52:	d177      	bne.n	8012d44 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012c54:	6820      	ldr	r0, [r4, #0]
 8012c56:	6882      	ldr	r2, [r0, #8]
 8012c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012c5c:	430a      	orrs	r2, r1
 8012c5e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012c60:	065a      	lsls	r2, r3, #25
 8012c62:	d521      	bpl.n	8012ca8 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012c64:	4b46      	ldr	r3, [pc, #280]	; (8012d80 <UART_AdvFeatureConfig+0x1c0>)
 8012c66:	6822      	ldr	r2, [r4, #0]
 8012c68:	4846      	ldr	r0, [pc, #280]	; (8012d84 <UART_AdvFeatureConfig+0x1c4>)
 8012c6a:	4947      	ldr	r1, [pc, #284]	; (8012d88 <UART_AdvFeatureConfig+0x1c8>)
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	bf18      	it	ne
 8012c70:	4282      	cmpne	r2, r0
 8012c72:	bf14      	ite	ne
 8012c74:	2301      	movne	r3, #1
 8012c76:	2300      	moveq	r3, #0
 8012c78:	428a      	cmp	r2, r1
 8012c7a:	bf0c      	ite	eq
 8012c7c:	2300      	moveq	r3, #0
 8012c7e:	f003 0301 	andne.w	r3, r3, #1
 8012c82:	b113      	cbz	r3, 8012c8a <UART_AdvFeatureConfig+0xca>
 8012c84:	4b41      	ldr	r3, [pc, #260]	; (8012d8c <UART_AdvFeatureConfig+0x1cc>)
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d16b      	bne.n	8012d62 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012c8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012c8c:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8012c90:	d160      	bne.n	8012d54 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c92:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012c94:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012c98:	684b      	ldr	r3, [r1, #4]
 8012c9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012c9e:	ea43 0302 	orr.w	r3, r3, r2
 8012ca2:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012ca4:	d014      	beq.n	8012cd0 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012ca8:	061b      	lsls	r3, r3, #24
 8012caa:	d509      	bpl.n	8012cc0 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012cac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012cae:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8012cb2:	d118      	bne.n	8012ce6 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012cb4:	6821      	ldr	r1, [r4, #0]
 8012cb6:	684b      	ldr	r3, [r1, #4]
 8012cb8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8012cbc:	4313      	orrs	r3, r2
 8012cbe:	604b      	str	r3, [r1, #4]
}
 8012cc0:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012cc2:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8012cc6:	4832      	ldr	r0, [pc, #200]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012cc8:	f7f2 f974 	bl	8004fb4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cce:	e77c      	b.n	8012bca <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012cd0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012cd2:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8012cd6:	d14a      	bne.n	8012d6e <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012cd8:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012cda:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012cdc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8012ce0:	4302      	orrs	r2, r0
 8012ce2:	604a      	str	r2, [r1, #4]
 8012ce4:	e7e0      	b.n	8012ca8 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8012ce6:	f640 4136 	movw	r1, #3126	; 0xc36
 8012cea:	4829      	ldr	r0, [pc, #164]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012cec:	f7f2 f962 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012cf0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8012cf2:	e7df      	b.n	8012cb4 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8012cf4:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8012cf8:	4825      	ldr	r0, [pc, #148]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012cfa:	f7f2 f95b 	bl	8004fb4 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012cfe:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8012d02:	e769      	b.n	8012bd8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8012d04:	f640 4105 	movw	r1, #3077	; 0xc05
 8012d08:	4821      	ldr	r0, [pc, #132]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d0a:	f7f2 f953 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012d0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d12:	e76e      	b.n	8012bf2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8012d14:	f640 410c 	movw	r1, #3084	; 0xc0c
 8012d18:	481d      	ldr	r0, [pc, #116]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d1a:	f7f2 f94b 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012d1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d22:	e773      	b.n	8012c0c <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8012d24:	f640 4113 	movw	r1, #3091	; 0xc13
 8012d28:	4819      	ldr	r0, [pc, #100]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d2a:	f7f2 f943 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d32:	e777      	b.n	8012c24 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012d34:	f640 411a 	movw	r1, #3098	; 0xc1a
 8012d38:	4815      	ldr	r0, [pc, #84]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d3a:	f7f2 f93b 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012d3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012d40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d42:	e77b      	b.n	8012c3c <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8012d44:	f640 4121 	movw	r1, #3105	; 0xc21
 8012d48:	4811      	ldr	r0, [pc, #68]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d4a:	f7f2 f933 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d4e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d52:	e77f      	b.n	8012c54 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012d54:	f640 4129 	movw	r1, #3113	; 0xc29
 8012d58:	480d      	ldr	r0, [pc, #52]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d5a:	f7f2 f92b 	bl	8004fb4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012d60:	e797      	b.n	8012c92 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012d62:	f640 4128 	movw	r1, #3112	; 0xc28
 8012d66:	480a      	ldr	r0, [pc, #40]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d68:	f7f2 f924 	bl	8004fb4 <assert_failed>
 8012d6c:	e78d      	b.n	8012c8a <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8012d6e:	f640 412e 	movw	r1, #3118	; 0xc2e
 8012d72:	4807      	ldr	r0, [pc, #28]	; (8012d90 <UART_AdvFeatureConfig+0x1d0>)
 8012d74:	f7f2 f91e 	bl	8004fb4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d78:	6821      	ldr	r1, [r4, #0]
 8012d7a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012d7c:	e7ac      	b.n	8012cd8 <UART_AdvFeatureConfig+0x118>
 8012d7e:	bf00      	nop
 8012d80:	40011000 	.word	0x40011000
 8012d84:	40004400 	.word	0x40004400
 8012d88:	40004800 	.word	0x40004800
 8012d8c:	40011400 	.word	0x40011400
 8012d90:	0802cc78 	.word	0x0802cc78

08012d94 <UART_WaitOnFlagUntilTimeout>:
{
 8012d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012d9c:	4681      	mov	r9, r0
 8012d9e:	460f      	mov	r7, r1
 8012da0:	4616      	mov	r6, r2
 8012da2:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012da4:	6805      	ldr	r5, [r0, #0]
 8012da6:	e002      	b.n	8012dae <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8012da8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012dac:	d10c      	bne.n	8012dc8 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012dae:	69ec      	ldr	r4, [r5, #28]
 8012db0:	ea37 0304 	bics.w	r3, r7, r4
 8012db4:	bf0c      	ite	eq
 8012db6:	f04f 0c01 	moveq.w	ip, #1
 8012dba:	f04f 0c00 	movne.w	ip, #0
 8012dbe:	45b4      	cmp	ip, r6
 8012dc0:	d0f2      	beq.n	8012da8 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8012dc2:	2000      	movs	r0, #0
}
 8012dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012dc8:	f7f5 f9de 	bl	8008188 <HAL_GetTick>
 8012dcc:	eba0 000a 	sub.w	r0, r0, sl
 8012dd0:	4540      	cmp	r0, r8
 8012dd2:	d82d      	bhi.n	8012e30 <UART_WaitOnFlagUntilTimeout+0x9c>
 8012dd4:	f1b8 0f00 	cmp.w	r8, #0
 8012dd8:	d02a      	beq.n	8012e30 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012dda:	f8d9 5000 	ldr.w	r5, [r9]
 8012dde:	682b      	ldr	r3, [r5, #0]
 8012de0:	462a      	mov	r2, r5
 8012de2:	0759      	lsls	r1, r3, #29
 8012de4:	d5e3      	bpl.n	8012dae <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012de6:	69eb      	ldr	r3, [r5, #28]
 8012de8:	051b      	lsls	r3, r3, #20
 8012dea:	d5e0      	bpl.n	8012dae <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012dec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012df0:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012df2:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dfa:	e842 3100 	strex	r1, r3, [r2]
 8012dfe:	2900      	cmp	r1, #0
 8012e00:	d1f7      	bne.n	8012df2 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e02:	f102 0308 	add.w	r3, r2, #8
 8012e06:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e0a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0e:	f102 0008 	add.w	r0, r2, #8
 8012e12:	e840 3100 	strex	r1, r3, [r0]
 8012e16:	2900      	cmp	r1, #0
 8012e18:	d1f3      	bne.n	8012e02 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 8012e1a:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8012e1c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8012e1e:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 8012e22:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012e26:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012e2a:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8012e2e:	e7c9      	b.n	8012dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8012e30:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e34:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012e38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e3c:	e842 3100 	strex	r1, r3, [r2]
 8012e40:	2900      	cmp	r1, #0
 8012e42:	d1f7      	bne.n	8012e34 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e44:	f102 0308 	add.w	r3, r2, #8
 8012e48:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e4c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e50:	f102 0008 	add.w	r0, r2, #8
 8012e54:	e840 3100 	strex	r1, r3, [r0]
 8012e58:	2900      	cmp	r1, #0
 8012e5a:	d1f3      	bne.n	8012e44 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 8012e5c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8012e5e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8012e60:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8012e64:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012e68:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8012e6c:	e7aa      	b.n	8012dc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8012e6e:	bf00      	nop

08012e70 <HAL_UART_Transmit>:
{
 8012e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e74:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8012e76:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8012e78:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8012e7a:	2b20      	cmp	r3, #32
 8012e7c:	d14b      	bne.n	8012f16 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8012e7e:	460d      	mov	r5, r1
 8012e80:	2900      	cmp	r1, #0
 8012e82:	d044      	beq.n	8012f0e <HAL_UART_Transmit+0x9e>
 8012e84:	fab2 f982 	clz	r9, r2
 8012e88:	4617      	mov	r7, r2
 8012e8a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8012e8e:	2a00      	cmp	r2, #0
 8012e90:	d03d      	beq.n	8012f0e <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8012e92:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8012e96:	4604      	mov	r4, r0
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d03c      	beq.n	8012f16 <HAL_UART_Transmit+0xa6>
 8012e9c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012e9e:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8012ea2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012ea6:	2321      	movs	r3, #33	; 0x21
 8012ea8:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8012eaa:	f7f5 f96d 	bl	8008188 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012eae:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8012eb0:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8012eb2:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8012eba:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012ebe:	d040      	beq.n	8012f42 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8012ec0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8012ec4:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8012ec6:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8012ec8:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 8012ecc:	b973      	cbnz	r3, 8012eec <HAL_UART_Transmit+0x7c>
 8012ece:	e02a      	b.n	8012f26 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012ed0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8012ed4:	6823      	ldr	r3, [r4, #0]
 8012ed6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8012ed8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012edc:	3a01      	subs	r2, #1
 8012ede:	b292      	uxth	r2, r2
 8012ee0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8012ee4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8012ee8:	b292      	uxth	r2, r2
 8012eea:	b1e2      	cbz	r2, 8012f26 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012eec:	4643      	mov	r3, r8
 8012eee:	2200      	movs	r2, #0
 8012ef0:	2180      	movs	r1, #128	; 0x80
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	9600      	str	r6, [sp, #0]
 8012ef6:	f7ff ff4d 	bl	8012d94 <UART_WaitOnFlagUntilTimeout>
 8012efa:	b980      	cbnz	r0, 8012f1e <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 8012efc:	2d00      	cmp	r5, #0
 8012efe:	d1e7      	bne.n	8012ed0 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012f00:	f839 3b02 	ldrh.w	r3, [r9], #2
 8012f04:	6822      	ldr	r2, [r4, #0]
 8012f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f0a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8012f0c:	e7e4      	b.n	8012ed8 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8012f0e:	2001      	movs	r0, #1
}
 8012f10:	b003      	add	sp, #12
 8012f12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8012f16:	2002      	movs	r0, #2
}
 8012f18:	b003      	add	sp, #12
 8012f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8012f1e:	2003      	movs	r0, #3
}
 8012f20:	b003      	add	sp, #12
 8012f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012f26:	4643      	mov	r3, r8
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2140      	movs	r1, #64	; 0x40
 8012f2c:	4620      	mov	r0, r4
 8012f2e:	9600      	str	r6, [sp, #0]
 8012f30:	f7ff ff30 	bl	8012d94 <UART_WaitOnFlagUntilTimeout>
 8012f34:	2800      	cmp	r0, #0
 8012f36:	d1f2      	bne.n	8012f1e <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8012f38:	2320      	movs	r3, #32
 8012f3a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8012f3c:	b003      	add	sp, #12
 8012f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f42:	6923      	ldr	r3, [r4, #16]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1bb      	bne.n	8012ec0 <HAL_UART_Transmit+0x50>
 8012f48:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8012f4a:	461d      	mov	r5, r3
 8012f4c:	e7b8      	b.n	8012ec0 <HAL_UART_Transmit+0x50>
 8012f4e:	bf00      	nop

08012f50 <UART_CheckIdleState>:
{
 8012f50:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f52:	2600      	movs	r6, #0
{
 8012f54:	4604      	mov	r4, r0
 8012f56:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f58:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8012f5c:	f7f5 f914 	bl	8008188 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f60:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012f62:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012f64:	681a      	ldr	r2, [r3, #0]
 8012f66:	0712      	lsls	r2, r2, #28
 8012f68:	d40c      	bmi.n	8012f84 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012f6a:	681b      	ldr	r3, [r3, #0]
 8012f6c:	075b      	lsls	r3, r3, #29
 8012f6e:	d418      	bmi.n	8012fa2 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f70:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012f72:	2220      	movs	r2, #32
  return HAL_OK;
 8012f74:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012f76:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012f78:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012f7c:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f7e:	6623      	str	r3, [r4, #96]	; 0x60
}
 8012f80:	b002      	add	sp, #8
 8012f82:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012f84:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8012f88:	4603      	mov	r3, r0
 8012f8a:	4632      	mov	r2, r6
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	9100      	str	r1, [sp, #0]
 8012f90:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012f94:	f7ff fefe 	bl	8012d94 <UART_WaitOnFlagUntilTimeout>
 8012f98:	b978      	cbnz	r0, 8012fba <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	075b      	lsls	r3, r3, #29
 8012fa0:	d5e6      	bpl.n	8012f70 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012fa2:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	2200      	movs	r2, #0
 8012faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012fae:	9000      	str	r0, [sp, #0]
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f7ff feef 	bl	8012d94 <UART_WaitOnFlagUntilTimeout>
 8012fb6:	2800      	cmp	r0, #0
 8012fb8:	d0da      	beq.n	8012f70 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8012fba:	2003      	movs	r0, #3
}
 8012fbc:	b002      	add	sp, #8
 8012fbe:	bd70      	pop	{r4, r5, r6, pc}

08012fc0 <HAL_UART_Init>:
  if (huart == NULL)
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	f000 8099 	beq.w	80130f8 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012fc6:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012fc8:	6802      	ldr	r2, [r0, #0]
{
 8012fca:	b510      	push	{r4, lr}
 8012fcc:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d051      	beq.n	8013076 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012fd2:	4b4d      	ldr	r3, [pc, #308]	; (8013108 <HAL_UART_Init+0x148>)
 8012fd4:	484d      	ldr	r0, [pc, #308]	; (801310c <HAL_UART_Init+0x14c>)
 8012fd6:	494e      	ldr	r1, [pc, #312]	; (8013110 <HAL_UART_Init+0x150>)
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	bf18      	it	ne
 8012fdc:	4282      	cmpne	r2, r0
 8012fde:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012fe2:	bf14      	ite	ne
 8012fe4:	2301      	movne	r3, #1
 8012fe6:	2300      	moveq	r3, #0
 8012fe8:	428a      	cmp	r2, r1
 8012fea:	bf0c      	ite	eq
 8012fec:	2300      	moveq	r3, #0
 8012fee:	f003 0301 	andne.w	r3, r3, #1
 8012ff2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ff6:	4282      	cmp	r2, r0
 8012ff8:	bf0c      	ite	eq
 8012ffa:	2300      	moveq	r3, #0
 8012ffc:	f003 0301 	andne.w	r3, r3, #1
 8013000:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8013004:	428a      	cmp	r2, r1
 8013006:	bf0c      	ite	eq
 8013008:	2300      	moveq	r3, #0
 801300a:	f003 0301 	andne.w	r3, r3, #1
 801300e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8013012:	4282      	cmp	r2, r0
 8013014:	bf0c      	ite	eq
 8013016:	2300      	moveq	r3, #0
 8013018:	f003 0301 	andne.w	r3, r3, #1
 801301c:	428a      	cmp	r2, r1
 801301e:	bf0c      	ite	eq
 8013020:	2300      	moveq	r3, #0
 8013022:	f003 0301 	andne.w	r3, r3, #1
 8013026:	b113      	cbz	r3, 801302e <HAL_UART_Init+0x6e>
 8013028:	4b3a      	ldr	r3, [pc, #232]	; (8013114 <HAL_UART_Init+0x154>)
 801302a:	429a      	cmp	r2, r3
 801302c:	d166      	bne.n	80130fc <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 801302e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013030:	2b00      	cmp	r3, #0
 8013032:	d057      	beq.n	80130e4 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8013034:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013036:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013038:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801303a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 801303c:	6813      	ldr	r3, [r2, #0]
 801303e:	f023 0301 	bic.w	r3, r3, #1
 8013042:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013044:	f7ff fbd8 	bl	80127f8 <UART_SetConfig>
 8013048:	2801      	cmp	r0, #1
 801304a:	d049      	beq.n	80130e0 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801304c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801304e:	2b00      	cmp	r3, #0
 8013050:	d14e      	bne.n	80130f0 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013052:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8013054:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013056:	685a      	ldr	r2, [r3, #4]
 8013058:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801305c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801305e:	689a      	ldr	r2, [r3, #8]
 8013060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013064:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	f042 0201 	orr.w	r2, r2, #1
}
 801306c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8013070:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013072:	f7ff bf6d 	b.w	8012f50 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8013076:	4b24      	ldr	r3, [pc, #144]	; (8013108 <HAL_UART_Init+0x148>)
 8013078:	4824      	ldr	r0, [pc, #144]	; (801310c <HAL_UART_Init+0x14c>)
 801307a:	4925      	ldr	r1, [pc, #148]	; (8013110 <HAL_UART_Init+0x150>)
 801307c:	429a      	cmp	r2, r3
 801307e:	bf18      	it	ne
 8013080:	4282      	cmpne	r2, r0
 8013082:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8013086:	bf14      	ite	ne
 8013088:	2301      	movne	r3, #1
 801308a:	2300      	moveq	r3, #0
 801308c:	428a      	cmp	r2, r1
 801308e:	bf0c      	ite	eq
 8013090:	2300      	moveq	r3, #0
 8013092:	f003 0301 	andne.w	r3, r3, #1
 8013096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801309a:	4282      	cmp	r2, r0
 801309c:	bf0c      	ite	eq
 801309e:	2300      	moveq	r3, #0
 80130a0:	f003 0301 	andne.w	r3, r3, #1
 80130a4:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 80130a8:	428a      	cmp	r2, r1
 80130aa:	bf0c      	ite	eq
 80130ac:	2300      	moveq	r3, #0
 80130ae:	f003 0301 	andne.w	r3, r3, #1
 80130b2:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 80130b6:	4282      	cmp	r2, r0
 80130b8:	bf0c      	ite	eq
 80130ba:	2300      	moveq	r3, #0
 80130bc:	f003 0301 	andne.w	r3, r3, #1
 80130c0:	428a      	cmp	r2, r1
 80130c2:	bf0c      	ite	eq
 80130c4:	2300      	moveq	r3, #0
 80130c6:	f003 0301 	andne.w	r3, r3, #1
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d0af      	beq.n	801302e <HAL_UART_Init+0x6e>
 80130ce:	4b11      	ldr	r3, [pc, #68]	; (8013114 <HAL_UART_Init+0x154>)
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d0ac      	beq.n	801302e <HAL_UART_Init+0x6e>
 80130d4:	f240 1131 	movw	r1, #305	; 0x131
 80130d8:	480f      	ldr	r0, [pc, #60]	; (8013118 <HAL_UART_Init+0x158>)
 80130da:	f7f1 ff6b 	bl	8004fb4 <assert_failed>
 80130de:	e7a6      	b.n	801302e <HAL_UART_Init+0x6e>
}
 80130e0:	2001      	movs	r0, #1
 80130e2:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 80130e4:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80130e6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80130ea:	f7f3 fccf 	bl	8006a8c <HAL_UART_MspInit>
 80130ee:	e7a1      	b.n	8013034 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 80130f0:	4620      	mov	r0, r4
 80130f2:	f7ff fd65 	bl	8012bc0 <UART_AdvFeatureConfig>
 80130f6:	e7ac      	b.n	8013052 <HAL_UART_Init+0x92>
}
 80130f8:	2001      	movs	r0, #1
 80130fa:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80130fc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8013100:	4805      	ldr	r0, [pc, #20]	; (8013118 <HAL_UART_Init+0x158>)
 8013102:	f7f1 ff57 	bl	8004fb4 <assert_failed>
 8013106:	e792      	b.n	801302e <HAL_UART_Init+0x6e>
 8013108:	40011000 	.word	0x40011000
 801310c:	40004400 	.word	0x40004400
 8013110:	40004800 	.word	0x40004800
 8013114:	40007c00 	.word	0x40007c00
 8013118:	0802cc78 	.word	0x0802cc78

0801311c <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 801311c:	2800      	cmp	r0, #0
 801311e:	d04a      	beq.n	80131b6 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8013120:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8013124:	b570      	push	{r4, r5, r6, lr}
 8013126:	460e      	mov	r6, r1
 8013128:	4604      	mov	r4, r0
 801312a:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 801312c:	d13d      	bne.n	80131aa <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 801312e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013130:	2b00      	cmp	r3, #0
 8013132:	d034      	beq.n	801319e <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8013134:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8013136:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013138:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 801313a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 801313c:	6813      	ldr	r3, [r2, #0]
 801313e:	f023 0301 	bic.w	r3, r3, #1
 8013142:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013144:	f7ff fb58 	bl	80127f8 <UART_SetConfig>
 8013148:	2801      	cmp	r0, #1
 801314a:	d026      	beq.n	801319a <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801314c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801314e:	bb03      	cbnz	r3, 8013192 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013150:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8013152:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013156:	685a      	ldr	r2, [r3, #4]
 8013158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801315c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801315e:	689a      	ldr	r2, [r3, #8]
 8013160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013164:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8013166:	d00d      	beq.n	8013184 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8013168:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 801316a:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 801316c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8013170:	4315      	orrs	r5, r2
 8013172:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8013174:	681a      	ldr	r2, [r3, #0]
 8013176:	f042 0201 	orr.w	r2, r2, #1
}
 801317a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 801317e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8013180:	f7ff bee6 	b.w	8012f50 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8013184:	6859      	ldr	r1, [r3, #4]
 8013186:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801318a:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 801318e:	605e      	str	r6, [r3, #4]
 8013190:	e7ea      	b.n	8013168 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8013192:	4620      	mov	r0, r4
 8013194:	f7ff fd14 	bl	8012bc0 <UART_AdvFeatureConfig>
 8013198:	e7da      	b.n	8013150 <HAL_MultiProcessor_Init+0x34>
}
 801319a:	2001      	movs	r0, #1
 801319c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 801319e:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80131a0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80131a4:	f7f3 fc72 	bl	8006a8c <HAL_UART_MspInit>
 80131a8:	e7c4      	b.n	8013134 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80131aa:	f240 211d 	movw	r1, #541	; 0x21d
 80131ae:	4803      	ldr	r0, [pc, #12]	; (80131bc <HAL_MultiProcessor_Init+0xa0>)
 80131b0:	f7f1 ff00 	bl	8004fb4 <assert_failed>
 80131b4:	e7bb      	b.n	801312e <HAL_MultiProcessor_Init+0x12>
}
 80131b6:	2001      	movs	r0, #1
 80131b8:	4770      	bx	lr
 80131ba:	bf00      	nop
 80131bc:	0802cc78 	.word	0x0802cc78

080131c0 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 80131c0:	6883      	ldr	r3, [r0, #8]
{
 80131c2:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 80131c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 80131c8:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 80131cc:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 80131ce:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 80131d2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 80131d6:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80131d8:	d04f      	beq.n	801327a <UART_Start_Receive_IT+0xba>
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d043      	beq.n	8013266 <UART_Start_Receive_IT+0xa6>
 80131de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80131e2:	d057      	beq.n	8013294 <UART_Start_Receive_IT+0xd4>
 80131e4:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131e8:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80131ea:	2322      	movs	r3, #34	; 0x22
 80131ec:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80131ee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80131f2:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131f4:	f102 0308 	add.w	r3, r2, #8
 80131f8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80131fc:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013200:	f102 0408 	add.w	r4, r2, #8
 8013204:	e844 3100 	strex	r1, r3, [r4]
 8013208:	2900      	cmp	r1, #0
 801320a:	d1f3      	bne.n	80131f4 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801320c:	6883      	ldr	r3, [r0, #8]
 801320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013212:	d011      	beq.n	8013238 <UART_Start_Receive_IT+0x78>
 8013214:	4c23      	ldr	r4, [pc, #140]	; (80132a4 <UART_Start_Receive_IT+0xe4>)
 8013216:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8013218:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 801321c:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 801321e:	b18b      	cbz	r3, 8013244 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013220:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8013224:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013228:	e842 3100 	strex	r1, r3, [r2]
 801322c:	2900      	cmp	r1, #0
 801322e:	d1f7      	bne.n	8013220 <UART_Start_Receive_IT+0x60>
}
 8013230:	2000      	movs	r0, #0
 8013232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013236:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013238:	6903      	ldr	r3, [r0, #16]
 801323a:	bb33      	cbnz	r3, 801328a <UART_Start_Receive_IT+0xca>
 801323c:	491a      	ldr	r1, [pc, #104]	; (80132a8 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 801323e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8013242:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013244:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8013248:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801324c:	e842 3100 	strex	r1, r3, [r2]
 8013250:	2900      	cmp	r1, #0
 8013252:	d0ed      	beq.n	8013230 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013254:	e852 3f00 	ldrex	r3, [r2]
 8013258:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801325c:	e842 3100 	strex	r1, r3, [r2]
 8013260:	2900      	cmp	r1, #0
 8013262:	d1ef      	bne.n	8013244 <UART_Start_Receive_IT+0x84>
 8013264:	e7e4      	b.n	8013230 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8013266:	6903      	ldr	r3, [r0, #16]
 8013268:	b91b      	cbnz	r3, 8013272 <UART_Start_Receive_IT+0xb2>
 801326a:	23ff      	movs	r3, #255	; 0xff
 801326c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8013270:	e7ba      	b.n	80131e8 <UART_Start_Receive_IT+0x28>
 8013272:	237f      	movs	r3, #127	; 0x7f
 8013274:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8013278:	e7b6      	b.n	80131e8 <UART_Start_Receive_IT+0x28>
 801327a:	6903      	ldr	r3, [r0, #16]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d1f4      	bne.n	801326a <UART_Start_Receive_IT+0xaa>
 8013280:	f240 13ff 	movw	r3, #511	; 0x1ff
 8013284:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8013288:	e7ae      	b.n	80131e8 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 801328a:	4b06      	ldr	r3, [pc, #24]	; (80132a4 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 801328c:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8013290:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013292:	e7c5      	b.n	8013220 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8013294:	6903      	ldr	r3, [r0, #16]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d0eb      	beq.n	8013272 <UART_Start_Receive_IT+0xb2>
 801329a:	233f      	movs	r3, #63	; 0x3f
 801329c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80132a0:	e7a2      	b.n	80131e8 <UART_Start_Receive_IT+0x28>
 80132a2:	bf00      	nop
 80132a4:	08012351 	.word	0x08012351
 80132a8:	080123f1 	.word	0x080123f1

080132ac <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80132ac:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80132ae:	2b20      	cmp	r3, #32
 80132b0:	d11e      	bne.n	80132f0 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 80132b2:	b1d9      	cbz	r1, 80132ec <HAL_UART_Receive_IT+0x40>
 80132b4:	fab2 f382 	clz	r3, r2
 80132b8:	095b      	lsrs	r3, r3, #5
 80132ba:	b1ba      	cbz	r2, 80132ec <HAL_UART_Receive_IT+0x40>
{
 80132bc:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80132be:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80132c2:	2c01      	cmp	r4, #1
 80132c4:	d016      	beq.n	80132f4 <HAL_UART_Receive_IT+0x48>
 80132c6:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80132c8:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132ca:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80132cc:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80132d0:	6863      	ldr	r3, [r4, #4]
 80132d2:	021b      	lsls	r3, r3, #8
 80132d4:	d507      	bpl.n	80132e6 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132d6:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80132da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132de:	e844 3500 	strex	r5, r3, [r4]
 80132e2:	2d00      	cmp	r5, #0
 80132e4:	d1f7      	bne.n	80132d6 <HAL_UART_Receive_IT+0x2a>
}
 80132e6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 80132e8:	f7ff bf6a 	b.w	80131c0 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80132ec:	2001      	movs	r0, #1
}
 80132ee:	4770      	bx	lr
    return HAL_BUSY;
 80132f0:	2002      	movs	r0, #2
 80132f2:	4770      	bx	lr
 80132f4:	2002      	movs	r0, #2
}
 80132f6:	bc30      	pop	{r4, r5}
 80132f8:	4770      	bx	lr
 80132fa:	bf00      	nop

080132fc <UART_Start_Receive_DMA>:
{
 80132fc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80132fe:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013300:	2500      	movs	r5, #0
{
 8013302:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8013304:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013306:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 801330a:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801330e:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8013310:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8013312:	b168      	cbz	r0, 8013330 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013314:	4e1f      	ldr	r6, [pc, #124]	; (8013394 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013316:	4613      	mov	r3, r2
 8013318:	460a      	mov	r2, r1
 801331a:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801331c:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801331e:	4e1e      	ldr	r6, [pc, #120]	; (8013398 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013320:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8013322:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013324:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013326:	4e1d      	ldr	r6, [pc, #116]	; (801339c <UART_Start_Receive_DMA+0xa0>)
 8013328:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801332a:	f7f6 f8f7 	bl	800951c <HAL_DMA_Start_IT>
 801332e:	bb40      	cbnz	r0, 8013382 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8013330:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013332:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8013334:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013338:	b14b      	cbz	r3, 801334e <UART_Start_Receive_DMA+0x52>
 801333a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801333c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013344:	e843 2100 	strex	r1, r2, [r3]
 8013348:	2900      	cmp	r1, #0
 801334a:	d1f7      	bne.n	801333c <UART_Start_Receive_DMA+0x40>
 801334c:	e000      	b.n	8013350 <UART_Start_Receive_DMA+0x54>
 801334e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013350:	f103 0208 	add.w	r2, r3, #8
 8013354:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013358:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801335c:	f103 0008 	add.w	r0, r3, #8
 8013360:	e840 2100 	strex	r1, r2, [r0]
 8013364:	2900      	cmp	r1, #0
 8013366:	d1f3      	bne.n	8013350 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013368:	f103 0208 	add.w	r2, r3, #8
 801336c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013374:	f103 0108 	add.w	r1, r3, #8
 8013378:	e841 2000 	strex	r0, r2, [r1]
 801337c:	2800      	cmp	r0, #0
 801337e:	d1f3      	bne.n	8013368 <UART_Start_Receive_DMA+0x6c>
}
 8013380:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013382:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8013384:	2320      	movs	r3, #32
      return HAL_ERROR;
 8013386:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8013388:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801338c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8013390:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8013392:	bd70      	pop	{r4, r5, r6, pc}
 8013394:	080124ad 	.word	0x080124ad
 8013398:	08012491 	.word	0x08012491
 801339c:	08012129 	.word	0x08012129

080133a0 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80133a0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80133a2:	2b20      	cmp	r3, #32
 80133a4:	d11e      	bne.n	80133e4 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 80133a6:	b1d9      	cbz	r1, 80133e0 <HAL_UART_Receive_DMA+0x40>
 80133a8:	fab2 f382 	clz	r3, r2
 80133ac:	095b      	lsrs	r3, r3, #5
 80133ae:	b1ba      	cbz	r2, 80133e0 <HAL_UART_Receive_DMA+0x40>
{
 80133b0:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 80133b2:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 80133b6:	2c01      	cmp	r4, #1
 80133b8:	d016      	beq.n	80133e8 <HAL_UART_Receive_DMA+0x48>
 80133ba:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133bc:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80133be:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 80133c0:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80133c4:	6863      	ldr	r3, [r4, #4]
 80133c6:	021b      	lsls	r3, r3, #8
 80133c8:	d507      	bpl.n	80133da <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133ca:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80133ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133d2:	e844 3500 	strex	r5, r3, [r4]
 80133d6:	2d00      	cmp	r5, #0
 80133d8:	d1f7      	bne.n	80133ca <HAL_UART_Receive_DMA+0x2a>
}
 80133da:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 80133dc:	f7ff bf8e 	b.w	80132fc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 80133e0:	2001      	movs	r0, #1
}
 80133e2:	4770      	bx	lr
    return HAL_BUSY;
 80133e4:	2002      	movs	r0, #2
 80133e6:	4770      	bx	lr
 80133e8:	2002      	movs	r0, #2
}
 80133ea:	bc30      	pop	{r4, r5}
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop

080133f0 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80133f0:	2800      	cmp	r0, #0
 80133f2:	f000 808a 	beq.w	801350a <HAL_RS485Ex_Init+0x11a>
{
 80133f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80133fa:	4c47      	ldr	r4, [pc, #284]	; (8013518 <HAL_RS485Ex_Init+0x128>)
 80133fc:	4617      	mov	r7, r2
 80133fe:	461d      	mov	r5, r3
 8013400:	4a46      	ldr	r2, [pc, #280]	; (801351c <HAL_RS485Ex_Init+0x12c>)
 8013402:	6803      	ldr	r3, [r0, #0]
 8013404:	460e      	mov	r6, r1
 8013406:	4680      	mov	r8, r0
 8013408:	42a3      	cmp	r3, r4
 801340a:	bf18      	it	ne
 801340c:	4293      	cmpne	r3, r2
 801340e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013412:	bf14      	ite	ne
 8013414:	2401      	movne	r4, #1
 8013416:	2400      	moveq	r4, #0
 8013418:	4293      	cmp	r3, r2
 801341a:	bf0c      	ite	eq
 801341c:	2400      	moveq	r4, #0
 801341e:	f004 0401 	andne.w	r4, r4, #1
 8013422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013426:	4293      	cmp	r3, r2
 8013428:	bf0c      	ite	eq
 801342a:	2400      	moveq	r4, #0
 801342c:	f004 0401 	andne.w	r4, r4, #1
 8013430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013434:	4293      	cmp	r3, r2
 8013436:	bf0c      	ite	eq
 8013438:	2400      	moveq	r4, #0
 801343a:	f004 0401 	andne.w	r4, r4, #1
 801343e:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8013442:	4293      	cmp	r3, r2
 8013444:	bf0c      	ite	eq
 8013446:	2400      	moveq	r4, #0
 8013448:	f004 0401 	andne.w	r4, r4, #1
 801344c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8013450:	4293      	cmp	r3, r2
 8013452:	bf0c      	ite	eq
 8013454:	2400      	moveq	r4, #0
 8013456:	f004 0401 	andne.w	r4, r4, #1
 801345a:	b11c      	cbz	r4, 8013464 <HAL_RS485Ex_Init+0x74>
 801345c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013460:	4293      	cmp	r3, r2
 8013462:	d154      	bne.n	801350e <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8013464:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8013468:	d14a      	bne.n	8013500 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 801346a:	2f1f      	cmp	r7, #31
 801346c:	d843      	bhi.n	80134f6 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 801346e:	2d1f      	cmp	r5, #31
 8013470:	d83c      	bhi.n	80134ec <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8013472:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8013476:	b39b      	cbz	r3, 80134e0 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8013478:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 801347c:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801347e:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8013480:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8013484:	6813      	ldr	r3, [r2, #0]
 8013486:	f023 0301 	bic.w	r3, r3, #1
 801348a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801348c:	f7ff f9b4 	bl	80127f8 <UART_SetConfig>
 8013490:	2801      	cmp	r0, #1
 8013492:	d022      	beq.n	80134da <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013494:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8013498:	b9db      	cbnz	r3, 80134d2 <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801349a:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801349e:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80134a0:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80134a2:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 80134a4:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80134a8:	4d1d      	ldr	r5, [pc, #116]	; (8013520 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 80134aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80134ae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 80134b0:	6899      	ldr	r1, [r3, #8]
 80134b2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 80134b6:	430e      	orrs	r6, r1
 80134b8:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 80134ba:	681a      	ldr	r2, [r3, #0]
 80134bc:	4015      	ands	r5, r2
 80134be:	432f      	orrs	r7, r5
 80134c0:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	f042 0201 	orr.w	r2, r2, #1
}
 80134c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 80134cc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80134ce:	f7ff bd3f 	b.w	8012f50 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 80134d2:	4640      	mov	r0, r8
 80134d4:	f7ff fb74 	bl	8012bc0 <UART_AdvFeatureConfig>
 80134d8:	e7df      	b.n	801349a <HAL_RS485Ex_Init+0xaa>
}
 80134da:	2001      	movs	r0, #1
 80134dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 80134e0:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 80134e2:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80134e6:	f7f3 fad1 	bl	8006a8c <HAL_UART_MspInit>
 80134ea:	e7c5      	b.n	8013478 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80134ec:	21aa      	movs	r1, #170	; 0xaa
 80134ee:	480d      	ldr	r0, [pc, #52]	; (8013524 <HAL_RS485Ex_Init+0x134>)
 80134f0:	f7f1 fd60 	bl	8004fb4 <assert_failed>
 80134f4:	e7bd      	b.n	8013472 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80134f6:	21a7      	movs	r1, #167	; 0xa7
 80134f8:	480a      	ldr	r0, [pc, #40]	; (8013524 <HAL_RS485Ex_Init+0x134>)
 80134fa:	f7f1 fd5b 	bl	8004fb4 <assert_failed>
 80134fe:	e7b6      	b.n	801346e <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8013500:	21a4      	movs	r1, #164	; 0xa4
 8013502:	4808      	ldr	r0, [pc, #32]	; (8013524 <HAL_RS485Ex_Init+0x134>)
 8013504:	f7f1 fd56 	bl	8004fb4 <assert_failed>
 8013508:	e7af      	b.n	801346a <HAL_RS485Ex_Init+0x7a>
}
 801350a:	2001      	movs	r0, #1
 801350c:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 801350e:	21a1      	movs	r1, #161	; 0xa1
 8013510:	4804      	ldr	r0, [pc, #16]	; (8013524 <HAL_RS485Ex_Init+0x134>)
 8013512:	f7f1 fd4f 	bl	8004fb4 <assert_failed>
 8013516:	e7a5      	b.n	8013464 <HAL_RS485Ex_Init+0x74>
 8013518:	40011000 	.word	0x40011000
 801351c:	40004400 	.word	0x40004400
 8013520:	fc00ffff 	.word	0xfc00ffff
 8013524:	0802ccc8 	.word	0x0802ccc8

08013528 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013528:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801352a:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801352c:	4a11      	ldr	r2, [pc, #68]	; (8013574 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 801352e:	9301      	str	r3, [sp, #4]
 8013530:	e002      	b.n	8013538 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013532:	6903      	ldr	r3, [r0, #16]
 8013534:	2b00      	cmp	r3, #0
 8013536:	db07      	blt.n	8013548 <USB_CoreReset+0x20>
    if (++count > 200000U)
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	3301      	adds	r3, #1
 801353c:	4293      	cmp	r3, r2
 801353e:	9301      	str	r3, [sp, #4]
 8013540:	d9f7      	bls.n	8013532 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8013542:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8013544:	b002      	add	sp, #8
 8013546:	4770      	bx	lr
  count = 0U;
 8013548:	2300      	movs	r3, #0
    if (++count > 200000U)
 801354a:	4a0a      	ldr	r2, [pc, #40]	; (8013574 <USB_CoreReset+0x4c>)
  count = 0U;
 801354c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801354e:	6903      	ldr	r3, [r0, #16]
 8013550:	f043 0301 	orr.w	r3, r3, #1
 8013554:	6103      	str	r3, [r0, #16]
 8013556:	e003      	b.n	8013560 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013558:	6903      	ldr	r3, [r0, #16]
 801355a:	f013 0301 	ands.w	r3, r3, #1
 801355e:	d005      	beq.n	801356c <USB_CoreReset+0x44>
    if (++count > 200000U)
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	3301      	adds	r3, #1
 8013564:	4293      	cmp	r3, r2
 8013566:	9301      	str	r3, [sp, #4]
 8013568:	d9f6      	bls.n	8013558 <USB_CoreReset+0x30>
 801356a:	e7ea      	b.n	8013542 <USB_CoreReset+0x1a>
  return HAL_OK;
 801356c:	4618      	mov	r0, r3
}
 801356e:	b002      	add	sp, #8
 8013570:	4770      	bx	lr
 8013572:	bf00      	nop
 8013574:	00030d40 	.word	0x00030d40

08013578 <USB_CoreInit>:
{
 8013578:	b084      	sub	sp, #16
 801357a:	b510      	push	{r4, lr}
 801357c:	f10d 0c0c 	add.w	ip, sp, #12
 8013580:	4604      	mov	r4, r0
 8013582:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013586:	9b08      	ldr	r3, [sp, #32]
 8013588:	2b01      	cmp	r3, #1
 801358a:	d122      	bne.n	80135d2 <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801358c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801358e:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8013592:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013594:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8013598:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801359a:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801359c:	68c2      	ldr	r2, [r0, #12]
 801359e:	ea03 0302 	and.w	r3, r3, r2
 80135a2:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80135a4:	68c3      	ldr	r3, [r0, #12]
 80135a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80135aa:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 80135ac:	d01c      	beq.n	80135e8 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 80135ae:	4620      	mov	r0, r4
 80135b0:	f7ff ffba 	bl	8013528 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80135b4:	9b06      	ldr	r3, [sp, #24]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d107      	bne.n	80135ca <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80135ba:	68a3      	ldr	r3, [r4, #8]
 80135bc:	f043 0306 	orr.w	r3, r3, #6
 80135c0:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80135c2:	68a3      	ldr	r3, [r4, #8]
 80135c4:	f043 0320 	orr.w	r3, r3, #32
 80135c8:	60a3      	str	r3, [r4, #8]
}
 80135ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135ce:	b004      	add	sp, #16
 80135d0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80135d2:	68c3      	ldr	r3, [r0, #12]
 80135d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135d8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80135da:	f7ff ffa5 	bl	8013528 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80135de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80135e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80135e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80135e6:	e7e5      	b.n	80135b4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80135e8:	68c3      	ldr	r3, [r0, #12]
 80135ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80135ee:	60c3      	str	r3, [r0, #12]
 80135f0:	e7dd      	b.n	80135ae <USB_CoreInit+0x36>
 80135f2:	bf00      	nop

080135f4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80135f4:	2a02      	cmp	r2, #2
{
 80135f6:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80135f8:	d00b      	beq.n	8013612 <USB_SetTurnaroundTime+0x1e>
 80135fa:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80135fe:	68d9      	ldr	r1, [r3, #12]
}
 8013600:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013602:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 8013606:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013608:	68da      	ldr	r2, [r3, #12]
 801360a:	ea42 020c 	orr.w	r2, r2, ip
 801360e:	60da      	str	r2, [r3, #12]
}
 8013610:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013612:	4a23      	ldr	r2, [pc, #140]	; (80136a0 <USB_SetTurnaroundTime+0xac>)
 8013614:	4823      	ldr	r0, [pc, #140]	; (80136a4 <USB_SetTurnaroundTime+0xb0>)
 8013616:	440a      	add	r2, r1
 8013618:	4282      	cmp	r2, r0
 801361a:	d92c      	bls.n	8013676 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801361c:	4a22      	ldr	r2, [pc, #136]	; (80136a8 <USB_SetTurnaroundTime+0xb4>)
 801361e:	4823      	ldr	r0, [pc, #140]	; (80136ac <USB_SetTurnaroundTime+0xb8>)
 8013620:	440a      	add	r2, r1
 8013622:	4282      	cmp	r2, r0
 8013624:	d92a      	bls.n	801367c <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013626:	4a22      	ldr	r2, [pc, #136]	; (80136b0 <USB_SetTurnaroundTime+0xbc>)
 8013628:	4822      	ldr	r0, [pc, #136]	; (80136b4 <USB_SetTurnaroundTime+0xc0>)
 801362a:	440a      	add	r2, r1
 801362c:	4282      	cmp	r2, r0
 801362e:	d928      	bls.n	8013682 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013630:	4a21      	ldr	r2, [pc, #132]	; (80136b8 <USB_SetTurnaroundTime+0xc4>)
 8013632:	4822      	ldr	r0, [pc, #136]	; (80136bc <USB_SetTurnaroundTime+0xc8>)
 8013634:	440a      	add	r2, r1
 8013636:	4282      	cmp	r2, r0
 8013638:	d326      	bcc.n	8013688 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801363a:	4a21      	ldr	r2, [pc, #132]	; (80136c0 <USB_SetTurnaroundTime+0xcc>)
 801363c:	4821      	ldr	r0, [pc, #132]	; (80136c4 <USB_SetTurnaroundTime+0xd0>)
 801363e:	440a      	add	r2, r1
 8013640:	4282      	cmp	r2, r0
 8013642:	d924      	bls.n	801368e <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013644:	4a20      	ldr	r2, [pc, #128]	; (80136c8 <USB_SetTurnaroundTime+0xd4>)
 8013646:	4821      	ldr	r0, [pc, #132]	; (80136cc <USB_SetTurnaroundTime+0xd8>)
 8013648:	440a      	add	r2, r1
 801364a:	4282      	cmp	r2, r0
 801364c:	d322      	bcc.n	8013694 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801364e:	4a20      	ldr	r2, [pc, #128]	; (80136d0 <USB_SetTurnaroundTime+0xdc>)
 8013650:	4820      	ldr	r0, [pc, #128]	; (80136d4 <USB_SetTurnaroundTime+0xe0>)
 8013652:	440a      	add	r2, r1
 8013654:	4282      	cmp	r2, r0
 8013656:	d3d0      	bcc.n	80135fa <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013658:	4a1f      	ldr	r2, [pc, #124]	; (80136d8 <USB_SetTurnaroundTime+0xe4>)
 801365a:	4820      	ldr	r0, [pc, #128]	; (80136dc <USB_SetTurnaroundTime+0xe8>)
 801365c:	440a      	add	r2, r1
 801365e:	4282      	cmp	r2, r0
 8013660:	d31b      	bcc.n	801369a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013662:	4a1f      	ldr	r2, [pc, #124]	; (80136e0 <USB_SetTurnaroundTime+0xec>)
 8013664:	481f      	ldr	r0, [pc, #124]	; (80136e4 <USB_SetTurnaroundTime+0xf0>)
 8013666:	440a      	add	r2, r1
 8013668:	4282      	cmp	r2, r0
 801366a:	bf34      	ite	cc
 801366c:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8013670:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8013674:	e7c3      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 8013676:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 801367a:	e7c0      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 801367c:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8013680:	e7bd      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 8013682:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8013686:	e7ba      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 8013688:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 801368c:	e7b7      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 801368e:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8013692:	e7b4      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 8013694:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8013698:	e7b1      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 801369a:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801369e:	e7ae      	b.n	80135fe <USB_SetTurnaroundTime+0xa>
 80136a0:	ff275340 	.word	0xff275340
 80136a4:	000c34ff 	.word	0x000c34ff
 80136a8:	ff1b1e40 	.word	0xff1b1e40
 80136ac:	000f423f 	.word	0x000f423f
 80136b0:	ff0bdc00 	.word	0xff0bdc00
 80136b4:	00124f7f 	.word	0x00124f7f
 80136b8:	fef98c80 	.word	0xfef98c80
 80136bc:	0013d620 	.word	0x0013d620
 80136c0:	fee5b660 	.word	0xfee5b660
 80136c4:	0016e35f 	.word	0x0016e35f
 80136c8:	feced300 	.word	0xfeced300
 80136cc:	001b7740 	.word	0x001b7740
 80136d0:	feb35bc0 	.word	0xfeb35bc0
 80136d4:	002191c0 	.word	0x002191c0
 80136d8:	fe91ca00 	.word	0xfe91ca00
 80136dc:	00387520 	.word	0x00387520
 80136e0:	fe5954e0 	.word	0xfe5954e0
 80136e4:	00419ce0 	.word	0x00419ce0

080136e8 <USB_EnableGlobalInt>:
{
 80136e8:	4603      	mov	r3, r0
}
 80136ea:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80136ec:	689a      	ldr	r2, [r3, #8]
 80136ee:	f042 0201 	orr.w	r2, r2, #1
 80136f2:	609a      	str	r2, [r3, #8]
}
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop

080136f8 <USB_DisableGlobalInt>:
{
 80136f8:	4603      	mov	r3, r0
}
 80136fa:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80136fc:	689a      	ldr	r2, [r3, #8]
 80136fe:	f022 0201 	bic.w	r2, r2, #1
 8013702:	609a      	str	r2, [r3, #8]
}
 8013704:	4770      	bx	lr
 8013706:	bf00      	nop

08013708 <USB_SetCurrentMode>:
{
 8013708:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801370a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 801370c:	2901      	cmp	r1, #1
{
 801370e:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013710:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013714:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8013716:	d017      	beq.n	8013748 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 8013718:	b9a1      	cbnz	r1, 8013744 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801371a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801371c:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801371e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013722:	60c3      	str	r3, [r0, #12]
 8013724:	e001      	b.n	801372a <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013726:	2c32      	cmp	r4, #50	; 0x32
 8013728:	d00c      	beq.n	8013744 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 801372a:	2001      	movs	r0, #1
      ms++;
 801372c:	4404      	add	r4, r0
      HAL_Delay(1U);
 801372e:	f7f4 fd31 	bl	8008194 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8013732:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013734:	07db      	lsls	r3, r3, #31
 8013736:	d4f6      	bmi.n	8013726 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8013738:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801373c:	fab0 f080 	clz	r0, r0
 8013740:	0940      	lsrs	r0, r0, #5
}
 8013742:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8013744:	2001      	movs	r0, #1
}
 8013746:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013748:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801374a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801374c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013750:	60c3      	str	r3, [r0, #12]
 8013752:	e001      	b.n	8013758 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013754:	2c32      	cmp	r4, #50	; 0x32
 8013756:	d0f5      	beq.n	8013744 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8013758:	2001      	movs	r0, #1
      ms++;
 801375a:	4404      	add	r4, r0
      HAL_Delay(1U);
 801375c:	f7f4 fd1a 	bl	8008194 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8013760:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013762:	07da      	lsls	r2, r3, #31
 8013764:	d5f6      	bpl.n	8013754 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8013766:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801376a:	fab0 f080 	clz	r0, r0
 801376e:	0940      	lsrs	r0, r0, #5
 8013770:	e7e7      	b.n	8013742 <USB_SetCurrentMode+0x3a>
 8013772:	bf00      	nop

08013774 <USB_FlushTxFifo>:
{
 8013774:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8013776:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013778:	4a11      	ldr	r2, [pc, #68]	; (80137c0 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801377a:	9301      	str	r3, [sp, #4]
 801377c:	e002      	b.n	8013784 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801377e:	6903      	ldr	r3, [r0, #16]
 8013780:	2b00      	cmp	r3, #0
 8013782:	db07      	blt.n	8013794 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8013784:	9b01      	ldr	r3, [sp, #4]
 8013786:	3301      	adds	r3, #1
 8013788:	4293      	cmp	r3, r2
 801378a:	9301      	str	r3, [sp, #4]
 801378c:	d9f7      	bls.n	801377e <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801378e:	2003      	movs	r0, #3
}
 8013790:	b002      	add	sp, #8
 8013792:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013794:	0189      	lsls	r1, r1, #6
  count = 0U;
 8013796:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013798:	4a09      	ldr	r2, [pc, #36]	; (80137c0 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801379a:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801379e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80137a0:	6101      	str	r1, [r0, #16]
 80137a2:	e003      	b.n	80137ac <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80137a4:	6903      	ldr	r3, [r0, #16]
 80137a6:	f013 0320 	ands.w	r3, r3, #32
 80137aa:	d005      	beq.n	80137b8 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 80137ac:	9b01      	ldr	r3, [sp, #4]
 80137ae:	3301      	adds	r3, #1
 80137b0:	4293      	cmp	r3, r2
 80137b2:	9301      	str	r3, [sp, #4]
 80137b4:	d9f6      	bls.n	80137a4 <USB_FlushTxFifo+0x30>
 80137b6:	e7ea      	b.n	801378e <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 80137b8:	4618      	mov	r0, r3
}
 80137ba:	b002      	add	sp, #8
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	00030d40 	.word	0x00030d40

080137c4 <USB_FlushRxFifo>:
{
 80137c4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80137c6:	2300      	movs	r3, #0
    if (++count > 200000U)
 80137c8:	4a10      	ldr	r2, [pc, #64]	; (801380c <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 80137ca:	9301      	str	r3, [sp, #4]
 80137cc:	e002      	b.n	80137d4 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80137ce:	6903      	ldr	r3, [r0, #16]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	db07      	blt.n	80137e4 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 80137d4:	9b01      	ldr	r3, [sp, #4]
 80137d6:	3301      	adds	r3, #1
 80137d8:	4293      	cmp	r3, r2
 80137da:	9301      	str	r3, [sp, #4]
 80137dc:	d9f7      	bls.n	80137ce <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 80137de:	2003      	movs	r0, #3
}
 80137e0:	b002      	add	sp, #8
 80137e2:	4770      	bx	lr
  count = 0U;
 80137e4:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80137e6:	2310      	movs	r3, #16
    if (++count > 200000U)
 80137e8:	4a08      	ldr	r2, [pc, #32]	; (801380c <USB_FlushRxFifo+0x48>)
  count = 0U;
 80137ea:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80137ec:	6103      	str	r3, [r0, #16]
 80137ee:	e003      	b.n	80137f8 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80137f0:	6903      	ldr	r3, [r0, #16]
 80137f2:	f013 0310 	ands.w	r3, r3, #16
 80137f6:	d005      	beq.n	8013804 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80137f8:	9b01      	ldr	r3, [sp, #4]
 80137fa:	3301      	adds	r3, #1
 80137fc:	4293      	cmp	r3, r2
 80137fe:	9301      	str	r3, [sp, #4]
 8013800:	d9f6      	bls.n	80137f0 <USB_FlushRxFifo+0x2c>
 8013802:	e7ec      	b.n	80137de <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 8013804:	4618      	mov	r0, r3
}
 8013806:	b002      	add	sp, #8
 8013808:	4770      	bx	lr
 801380a:	bf00      	nop
 801380c:	00030d40 	.word	0x00030d40

08013810 <USB_DevInit>:
{
 8013810:	b084      	sub	sp, #16
 8013812:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013816:	ad09      	add	r5, sp, #36	; 0x24
 8013818:	4604      	mov	r4, r0
 801381a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801381c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8013820:	2300      	movs	r3, #0
 8013822:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 8013824:	4619      	mov	r1, r3
 8013826:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 801382a:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 801382c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8013830:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8013832:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8013834:	d1f7      	bne.n	8013826 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8013836:	2e00      	cmp	r6, #0
 8013838:	f040 8092 	bne.w	8013960 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801383c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8013840:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8013844:	f043 0302 	orr.w	r3, r3, #2
 8013848:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801384a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801384c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013850:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013852:	6823      	ldr	r3, [r4, #0]
 8013854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013858:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801385a:	6823      	ldr	r3, [r4, #0]
 801385c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013860:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8013862:	2300      	movs	r3, #0
 8013864:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801386c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801386e:	2b01      	cmp	r3, #1
 8013870:	d07d      	beq.n	801396e <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	f043 0303 	orr.w	r3, r3, #3
 8013878:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801387a:	2110      	movs	r1, #16
 801387c:	4620      	mov	r0, r4
 801387e:	f7ff ff79 	bl	8013774 <USB_FlushTxFifo>
 8013882:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013884:	4620      	mov	r0, r4
 8013886:	f7ff ff9d 	bl	80137c4 <USB_FlushRxFifo>
 801388a:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801388e:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013890:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8013892:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8013894:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8013896:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013898:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 801389a:	bf18      	it	ne
 801389c:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801389e:	b1ed      	cbz	r5, 80138dc <USB_DevInit+0xcc>
 80138a0:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80138a4:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80138a8:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80138ac:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80138ae:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 80138b2:	e009      	b.n	80138c8 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 80138b4:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138b8:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80138ba:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80138be:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138c2:	3320      	adds	r3, #32
 80138c4:	4295      	cmp	r5, r2
 80138c6:	d02c      	beq.n	8013922 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138c8:	6819      	ldr	r1, [r3, #0]
 80138ca:	2900      	cmp	r1, #0
 80138cc:	daf2      	bge.n	80138b4 <USB_DevInit+0xa4>
      if (i == 0U)
 80138ce:	b112      	cbz	r2, 80138d6 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80138d0:	f8c3 8000 	str.w	r8, [r3]
 80138d4:	e7f0      	b.n	80138b8 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80138d6:	f8c3 9000 	str.w	r9, [r3]
 80138da:	e7ed      	b.n	80138b8 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80138dc:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80138de:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80138e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80138e4:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80138e6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80138ea:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80138ec:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80138ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138f0:	b91b      	cbnz	r3, 80138fa <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80138f2:	69a3      	ldr	r3, [r4, #24]
 80138f4:	f043 0310 	orr.w	r3, r3, #16
 80138f8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80138fa:	69a2      	ldr	r2, [r4, #24]
 80138fc:	4b21      	ldr	r3, [pc, #132]	; (8013984 <USB_DevInit+0x174>)
 80138fe:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 8013900:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013902:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8013904:	b11a      	cbz	r2, 801390e <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013906:	69a3      	ldr	r3, [r4, #24]
 8013908:	f043 0308 	orr.w	r3, r3, #8
 801390c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 801390e:	2e01      	cmp	r6, #1
 8013910:	d103      	bne.n	801391a <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013912:	69a2      	ldr	r2, [r4, #24]
 8013914:	4b1c      	ldr	r3, [pc, #112]	; (8013988 <USB_DevInit+0x178>)
 8013916:	4313      	orrs	r3, r2
 8013918:	61a3      	str	r3, [r4, #24]
}
 801391a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801391e:	b004      	add	sp, #16
 8013920:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013922:	2200      	movs	r2, #0
 8013924:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013928:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801392c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013930:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013932:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8013936:	e009      	b.n	801394c <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013938:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801393c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801393e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013942:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013946:	3320      	adds	r3, #32
 8013948:	4295      	cmp	r5, r2
 801394a:	d0c7      	beq.n	80138dc <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801394c:	6819      	ldr	r1, [r3, #0]
 801394e:	2900      	cmp	r1, #0
 8013950:	daf2      	bge.n	8013938 <USB_DevInit+0x128>
      if (i == 0U)
 8013952:	b112      	cbz	r2, 801395a <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013954:	f8c3 8000 	str.w	r8, [r3]
 8013958:	e7f0      	b.n	801393c <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801395a:	f8c3 9000 	str.w	r9, [r3]
 801395e:	e7ed      	b.n	801393c <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013962:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013966:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801396a:	63a3      	str	r3, [r4, #56]	; 0x38
 801396c:	e779      	b.n	8013862 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 801396e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013970:	b913      	cbnz	r3, 8013978 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013976:	e780      	b.n	801387a <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	f043 0301 	orr.w	r3, r3, #1
 801397e:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013980:	e77b      	b.n	801387a <USB_DevInit+0x6a>
 8013982:	bf00      	nop
 8013984:	803c3800 	.word	0x803c3800
 8013988:	40000004 	.word	0x40000004

0801398c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801398c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013990:	f013 0006 	ands.w	r0, r3, #6
 8013994:	d004      	beq.n	80139a0 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8013996:	f013 0f02 	tst.w	r3, #2
 801399a:	bf14      	ite	ne
 801399c:	2002      	movne	r0, #2
 801399e:	200f      	moveq	r0, #15
}
 80139a0:	4770      	bx	lr
 80139a2:	bf00      	nop

080139a4 <USB_ActivateEndpoint>:
{
 80139a4:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 80139a6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80139a8:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80139aa:	2b01      	cmp	r3, #1
 80139ac:	d020      	beq.n	80139f0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80139ae:	f002 0c0f 	and.w	ip, r2, #15
 80139b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80139b6:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80139ba:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80139be:	fa03 f30c 	lsl.w	r3, r3, ip
 80139c2:	4323      	orrs	r3, r4
 80139c4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80139c8:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80139cc:	041b      	lsls	r3, r3, #16
 80139ce:	d40c      	bmi.n	80139ea <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80139d0:	688b      	ldr	r3, [r1, #8]
 80139d2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 80139d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80139da:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80139dc:	4914      	ldr	r1, [pc, #80]	; (8013a30 <USB_ActivateEndpoint+0x8c>)
 80139de:	4323      	orrs	r3, r4
 80139e0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80139e4:	4319      	orrs	r1, r3
 80139e6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80139ea:	2000      	movs	r0, #0
 80139ec:	bc30      	pop	{r4, r5}
 80139ee:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80139f0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80139f4:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80139f8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80139fc:	40ab      	lsls	r3, r5
 80139fe:	69e5      	ldr	r5, [r4, #28]
 8013a00:	432b      	orrs	r3, r5
 8013a02:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013a04:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013a08:	041c      	lsls	r4, r3, #16
 8013a0a:	d4ee      	bmi.n	80139ea <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a0c:	688b      	ldr	r3, [r1, #8]
 8013a0e:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8013a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013a16:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a18:	4905      	ldr	r1, [pc, #20]	; (8013a30 <USB_ActivateEndpoint+0x8c>)
 8013a1a:	432b      	orrs	r3, r5
 8013a1c:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8013a20:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8013a24:	4311      	orrs	r1, r2
}
 8013a26:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013a28:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	4770      	bx	lr
 8013a30:	10008000 	.word	0x10008000

08013a34 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8013a34:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013a36:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013a38:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a3a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013a3e:	d02a      	beq.n	8013a96 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a40:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013a44:	2a00      	cmp	r2, #0
 8013a46:	db19      	blt.n	8013a7c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8013a4c:	f003 030f 	and.w	r3, r3, #15
 8013a50:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013a54:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a58:	4a23      	ldr	r2, [pc, #140]	; (8013ae8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a5a:	ea21 0103 	bic.w	r1, r1, r3
 8013a5e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a62:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013a66:	ea21 0303 	bic.w	r3, r1, r3
 8013a6a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013a6e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a70:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013a74:	401a      	ands	r2, r3
 8013a76:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 8013a7a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013a7c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013a80:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013a84:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013a88:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013a8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013a90:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8013a94:	e7d8      	b.n	8013a48 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013a96:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	da0b      	bge.n	8013ab6 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013a9e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013aa2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013aa6:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013aaa:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013aae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013ab2:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013ab6:	f003 020f 	and.w	r2, r3, #15
 8013aba:	2301      	movs	r3, #1
 8013abc:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013ac0:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013ac2:	4a0a      	ldr	r2, [pc, #40]	; (8013aec <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013ac4:	ea21 0103 	bic.w	r1, r1, r3
 8013ac8:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013acc:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013ad0:	ea21 0303 	bic.w	r3, r1, r3
 8013ad4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8013ad8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013ada:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 8013ade:	401a      	ands	r2, r3
 8013ae0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 8013ae4:	4770      	bx	lr
 8013ae6:	bf00      	nop
 8013ae8:	eff37800 	.word	0xeff37800
 8013aec:	ec337800 	.word	0xec337800

08013af0 <USB_EPStartXfer>:
{
 8013af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8013af4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013af6:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d051      	beq.n	8013ba2 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013afe:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 8013b02:	4c84      	ldr	r4, [pc, #528]	; (8013d14 <USB_EPStartXfer+0x224>)
 8013b04:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 8013b08:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 8013b0c:	402c      	ands	r4, r5
 8013b0e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013b10:	4c81      	ldr	r4, [pc, #516]	; (8013d18 <USB_EPStartXfer+0x228>)
 8013b12:	691d      	ldr	r5, [r3, #16]
 8013b14:	402c      	ands	r4, r5
 8013b16:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 8013b18:	694c      	ldr	r4, [r1, #20]
 8013b1a:	b384      	cbz	r4, 8013b7e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b1c:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8013b1e:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b20:	4e7e      	ldr	r6, [pc, #504]	; (8013d1c <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013b22:	442c      	add	r4, r5
 8013b24:	f104 34ff 	add.w	r4, r4, #4294967295
 8013b28:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b2c:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8013b30:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b32:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b36:	691d      	ldr	r5, [r3, #16]
 8013b38:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b3c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013b40:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013b42:	691d      	ldr	r5, [r3, #16]
 8013b44:	ea44 0405 	orr.w	r4, r4, r5
 8013b48:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013b4a:	d025      	beq.n	8013b98 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 8013b4c:	78cb      	ldrb	r3, [r1, #3]
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d10c      	bne.n	8013b6c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013b52:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013b56:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013b5a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013b5e:	bf0c      	ite	eq
 8013b60:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013b64:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013b68:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013b6c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013b70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013b74:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8013b78:	2000      	movs	r0, #0
 8013b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b7e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8013b80:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013b82:	691d      	ldr	r5, [r3, #16]
 8013b84:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8013b88:	ea44 0405 	orr.w	r4, r4, r5
 8013b8c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b8e:	691c      	ldr	r4, [r3, #16]
 8013b90:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013b94:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013b96:	d1d9      	bne.n	8013b4c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8013b98:	68ca      	ldr	r2, [r1, #12]
 8013b9a:	2a00      	cmp	r2, #0
 8013b9c:	d0d6      	beq.n	8013b4c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013b9e:	615a      	str	r2, [r3, #20]
 8013ba0:	e7d4      	b.n	8013b4c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8013ba2:	694d      	ldr	r5, [r1, #20]
 8013ba4:	2d00      	cmp	r5, #0
 8013ba6:	d03d      	beq.n	8013c24 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ba8:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 8013bac:	4e59      	ldr	r6, [pc, #356]	; (8013d14 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013bae:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bb2:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bb6:	4f58      	ldr	r7, [pc, #352]	; (8013d18 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bb8:	ea08 0606 	and.w	r6, r8, r6
 8013bbc:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013bc0:	eb05 060e 	add.w	r6, r5, lr
 8013bc4:	3e01      	subs	r6, #1
 8013bc6:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bca:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8013bce:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013bd0:	4e52      	ldr	r6, [pc, #328]	; (8013d1c <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013bd2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013bd6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 8013bda:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013bde:	433e      	orrs	r6, r7
 8013be0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013be4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 8013be8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 8013bec:	433e      	orrs	r6, r7
 8013bee:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013bf2:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8013bf6:	f891 e003 	ldrb.w	lr, [r1, #3]
 8013bfa:	f1be 0f01 	cmp.w	lr, #1
 8013bfe:	d057      	beq.n	8013cb0 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 8013c00:	2a01      	cmp	r2, #1
 8013c02:	d072      	beq.n	8013cea <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c04:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c08:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c0c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c10:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c14:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013c18:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8013c1c:	4313      	orrs	r3, r2
 8013c1e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 8013c22:	e7a9      	b.n	8013b78 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c24:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 8013c28:	4e3b      	ldr	r6, [pc, #236]	; (8013d18 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c2a:	4c3a      	ldr	r4, [pc, #232]	; (8013d14 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 8013c2c:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c2e:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8013c32:	ea06 0607 	and.w	r6, r6, r7
 8013c36:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013c3a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8013c3e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013c42:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c46:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 8013c4a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013c4e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013c52:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8013c56:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 8013c5a:	d03a      	beq.n	8013cd2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c5c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013c60:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c64:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8013c68:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013c6c:	d184      	bne.n	8013b78 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c6e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013c72:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013c76:	6833      	ldr	r3, [r6, #0]
 8013c78:	bf0c      	ite	eq
 8013c7a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013c7e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013c82:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8013c84:	2a00      	cmp	r2, #0
 8013c86:	f47f af77 	bne.w	8013b78 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013c8a:	b2ad      	uxth	r5, r5
 8013c8c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 8013c8e:	08ad      	lsrs	r5, r5, #2
 8013c90:	f43f af72 	beq.w	8013b78 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013c94:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013c96:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 8013c9a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 8013c9e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8013ca2:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8013ca6:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013ca8:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 8013cac:	d1f9      	bne.n	8013ca2 <USB_EPStartXfer+0x1b2>
 8013cae:	e763      	b.n	8013b78 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013cb0:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8013cb2:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013cb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013cb8:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013cba:	6933      	ldr	r3, [r6, #16]
 8013cbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013cc0:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8013cc2:	d017      	beq.n	8013cf4 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cc4:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8013cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ccc:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013cd0:	e7cd      	b.n	8013c6e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 8013cd2:	690b      	ldr	r3, [r1, #16]
 8013cd4:	b963      	cbnz	r3, 8013cf0 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 8013cd6:	f1be 0f01 	cmp.w	lr, #1
 8013cda:	d00e      	beq.n	8013cfa <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cdc:	6833      	ldr	r3, [r6, #0]
}
 8013cde:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013ce0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ce4:	6033      	str	r3, [r6, #0]
}
 8013ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8013cea:	690b      	ldr	r3, [r1, #16]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d0f5      	beq.n	8013cdc <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013cf0:	6173      	str	r3, [r6, #20]
 8013cf2:	e7f0      	b.n	8013cd6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 8013cf4:	690b      	ldr	r3, [r1, #16]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d1fa      	bne.n	8013cf0 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013cfa:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d02:	6833      	ldr	r3, [r6, #0]
 8013d04:	bf0c      	ite	eq
 8013d06:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d0a:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013d0e:	6033      	str	r3, [r6, #0]
 8013d10:	e7e4      	b.n	8013cdc <USB_EPStartXfer+0x1ec>
 8013d12:	bf00      	nop
 8013d14:	fff80000 	.word	0xfff80000
 8013d18:	e007ffff 	.word	0xe007ffff
 8013d1c:	1ff80000 	.word	0x1ff80000

08013d20 <USB_EP0StartXfer>:
{
 8013d20:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 8013d22:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013d24:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d027      	beq.n	8013d7a <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013d2a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8013d2e:	4c3c      	ldr	r4, [pc, #240]	; (8013e20 <USB_EP0StartXfer+0x100>)
 8013d30:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8013d34:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8013d38:	402c      	ands	r4, r5
 8013d3a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013d3c:	4c39      	ldr	r4, [pc, #228]	; (8013e24 <USB_EP0StartXfer+0x104>)
 8013d3e:	691d      	ldr	r5, [r3, #16]
 8013d40:	402c      	ands	r4, r5
 8013d42:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8013d44:	694c      	ldr	r4, [r1, #20]
 8013d46:	b9ac      	cbnz	r4, 8013d74 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8013d48:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d4a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013d4c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8013d50:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013d52:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013d56:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013d58:	691d      	ldr	r5, [r3, #16]
 8013d5a:	ea44 0405 	orr.w	r4, r4, r5
 8013d5e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013d60:	d03e      	beq.n	8013de0 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013d62:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013d66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013d6a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013d6e:	2000      	movs	r0, #0
 8013d70:	bcf0      	pop	{r4, r5, r6, r7}
 8013d72:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8013d74:	688c      	ldr	r4, [r1, #8]
 8013d76:	614c      	str	r4, [r1, #20]
 8013d78:	e7e7      	b.n	8013d4a <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d7a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8013d7e:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8013d84:	2d00      	cmp	r5, #0
 8013d86:	d030      	beq.n	8013dea <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013d88:	691f      	ldr	r7, [r3, #16]
 8013d8a:	4e25      	ldr	r6, [pc, #148]	; (8013e20 <USB_EP0StartXfer+0x100>)
 8013d8c:	403e      	ands	r6, r7
 8013d8e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013d90:	4e24      	ldr	r6, [pc, #144]	; (8013e24 <USB_EP0StartXfer+0x104>)
 8013d92:	691f      	ldr	r7, [r3, #16]
 8013d94:	403e      	ands	r6, r7
 8013d96:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8013d98:	688e      	ldr	r6, [r1, #8]
 8013d9a:	42b5      	cmp	r5, r6
 8013d9c:	d901      	bls.n	8013da2 <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 8013d9e:	4635      	mov	r5, r6
 8013da0:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013da2:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013da4:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8013da8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013daa:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013dae:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013db0:	691e      	ldr	r6, [r3, #16]
 8013db2:	ea45 0506 	orr.w	r5, r5, r6
 8013db6:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013db8:	d027      	beq.n	8013e0a <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013dba:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013dbc:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013dbe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013dc2:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013dc4:	2900      	cmp	r1, #0
 8013dc6:	d0d2      	beq.n	8013d6e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013dc8:	f004 020f 	and.w	r2, r4, #15
 8013dcc:	2401      	movs	r4, #1
 8013dce:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8013dd2:	4094      	lsls	r4, r2
 8013dd4:	431c      	orrs	r4, r3
 8013dd6:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8013dda:	2000      	movs	r0, #0
 8013ddc:	bcf0      	pop	{r4, r5, r6, r7}
 8013dde:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 8013de0:	68ca      	ldr	r2, [r1, #12]
 8013de2:	2a00      	cmp	r2, #0
 8013de4:	d0bd      	beq.n	8013d62 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013de6:	615a      	str	r2, [r3, #20]
 8013de8:	e7bb      	b.n	8013d62 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013dea:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 8013dec:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013dee:	4d0d      	ldr	r5, [pc, #52]	; (8013e24 <USB_EP0StartXfer+0x104>)
 8013df0:	ea05 0506 	and.w	r5, r5, r6
 8013df4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013df6:	691d      	ldr	r5, [r3, #16]
 8013df8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013dfc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013dfe:	4d08      	ldr	r5, [pc, #32]	; (8013e20 <USB_EP0StartXfer+0x100>)
 8013e00:	691e      	ldr	r6, [r3, #16]
 8013e02:	ea05 0506 	and.w	r5, r5, r6
 8013e06:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013e08:	d1d7      	bne.n	8013dba <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 8013e0a:	690a      	ldr	r2, [r1, #16]
 8013e0c:	b102      	cbz	r2, 8013e10 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013e0e:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e10:	681a      	ldr	r2, [r3, #0]
}
 8013e12:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e14:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 8013e18:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013e1a:	601a      	str	r2, [r3, #0]
}
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	fff80000 	.word	0xfff80000
 8013e24:	e007ffff 	.word	0xe007ffff

08013e28 <USB_WritePacket>:
{
 8013e28:	b410      	push	{r4}
 8013e2a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8013e2e:	b964      	cbnz	r4, 8013e4a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013e30:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8013e32:	089b      	lsrs	r3, r3, #2
 8013e34:	d009      	beq.n	8013e4a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e36:	3201      	adds	r2, #1
 8013e38:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013e3c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8013e40:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8013e44:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013e46:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8013e48:	d1fa      	bne.n	8013e40 <USB_WritePacket+0x18>
}
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop

08013e54 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8013e54:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8013e58:	b570      	push	{r4, r5, r6, lr}
 8013e5a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 8013e5c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8013e60:	d01a      	beq.n	8013e98 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e62:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8013e66:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8013e68:	2300      	movs	r3, #0
 8013e6a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e6c:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8013e70:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013e72:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8013e76:	d1f8      	bne.n	8013e6a <USB_ReadPacket+0x16>
    pDest++;
 8013e78:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 8013e7c:	b15e      	cbz	r6, 8013e96 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013e7e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8013e82:	4406      	add	r6, r0
 8013e84:	2200      	movs	r2, #0
 8013e86:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013e88:	fa21 f302 	lsr.w	r3, r1, r2
 8013e8c:	3208      	adds	r2, #8
 8013e8e:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8013e92:	42b0      	cmp	r0, r6
 8013e94:	d1f8      	bne.n	8013e88 <USB_ReadPacket+0x34>
}
 8013e96:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8013e98:	4608      	mov	r0, r1
 8013e9a:	e7ef      	b.n	8013e7c <USB_ReadPacket+0x28>

08013e9c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8013e9c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013e9e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013ea0:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ea2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013ea6:	d00c      	beq.n	8013ec2 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ea8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8013eac:	b10b      	cbz	r3, 8013eb2 <USB_EPSetStall+0x16>
 8013eae:	2a00      	cmp	r2, #0
 8013eb0:	da14      	bge.n	8013edc <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013eb2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013eb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013eba:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013ebe:	2000      	movs	r0, #0
 8013ec0:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ec2:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013ec6:	2a00      	cmp	r2, #0
 8013ec8:	db00      	blt.n	8013ecc <USB_EPSetStall+0x30>
 8013eca:	b973      	cbnz	r3, 8013eea <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ecc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ed4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013ed8:	2000      	movs	r0, #0
 8013eda:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013edc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013ee0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ee4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8013ee8:	e7e3      	b.n	8013eb2 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013eea:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013eee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ef2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ef6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013efe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8013f02:	e7e9      	b.n	8013ed8 <USB_EPSetStall+0x3c>

08013f04 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8013f04:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013f06:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013f08:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013f0a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013f0e:	d013      	beq.n	8013f38 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013f10:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f18:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f1c:	78cb      	ldrb	r3, [r1, #3]
 8013f1e:	3b02      	subs	r3, #2
 8013f20:	2b01      	cmp	r3, #1
 8013f22:	d901      	bls.n	8013f28 <USB_EPClearStall+0x24>
}
 8013f24:	2000      	movs	r0, #0
 8013f26:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013f28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013f34:	2000      	movs	r0, #0
 8013f36:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013f38:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f40:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013f44:	78cb      	ldrb	r3, [r1, #3]
 8013f46:	3b02      	subs	r3, #2
 8013f48:	2b01      	cmp	r3, #1
 8013f4a:	d8eb      	bhi.n	8013f24 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013f4c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f54:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013f58:	2000      	movs	r0, #0
 8013f5a:	4770      	bx	lr

08013f5c <USB_SetDevAddress>:
{
 8013f5c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f5e:	0109      	lsls	r1, r1, #4
}
 8013f60:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013f62:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f66:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013f6a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8013f6e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013f72:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013f76:	4311      	orrs	r1, r2
 8013f78:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8013f7c:	4770      	bx	lr
 8013f7e:	bf00      	nop

08013f80 <USB_DevConnect>:
{
 8013f80:	4603      	mov	r3, r0
}
 8013f82:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013f84:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013f88:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013f8c:	f022 0203 	bic.w	r2, r2, #3
 8013f90:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013f94:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013f98:	f023 0302 	bic.w	r3, r3, #2
 8013f9c:	604b      	str	r3, [r1, #4]
}
 8013f9e:	4770      	bx	lr

08013fa0 <USB_DevDisconnect>:
{
 8013fa0:	4603      	mov	r3, r0
}
 8013fa2:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fa4:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013fa8:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013fac:	f022 0203 	bic.w	r2, r2, #3
 8013fb0:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013fb4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013fb8:	f043 0302 	orr.w	r3, r3, #2
 8013fbc:	604b      	str	r3, [r1, #4]
}
 8013fbe:	4770      	bx	lr

08013fc0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8013fc0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8013fc2:	6980      	ldr	r0, [r0, #24]
}
 8013fc4:	4010      	ands	r0, r2
 8013fc6:	4770      	bx	lr

08013fc8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013fc8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013fcc:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013fd0:	4018      	ands	r0, r3
}
 8013fd2:	0c00      	lsrs	r0, r0, #16
 8013fd4:	4770      	bx	lr
 8013fd6:	bf00      	nop

08013fd8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013fd8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013fdc:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013fe0:	4018      	ands	r0, r3
}
 8013fe2:	b280      	uxth	r0, r0
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop

08013fe8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013fe8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013fec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013ff0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013ff4:	6940      	ldr	r0, [r0, #20]
}
 8013ff6:	4010      	ands	r0, r2
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop

08013ffc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8013ffc:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014000:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014004:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014008:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801400c:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014010:	40cb      	lsrs	r3, r1
 8014012:	01db      	lsls	r3, r3, #7
 8014014:	b2db      	uxtb	r3, r3
 8014016:	4313      	orrs	r3, r2
}
 8014018:	4018      	ands	r0, r3
 801401a:	4770      	bx	lr

0801401c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 801401c:	6940      	ldr	r0, [r0, #20]
}
 801401e:	f000 0001 	and.w	r0, r0, #1
 8014022:	4770      	bx	lr

08014024 <USB_ActivateSetup>:
{
 8014024:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014026:	4a09      	ldr	r2, [pc, #36]	; (801404c <USB_ActivateSetup+0x28>)
}
 8014028:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801402a:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 801402e:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014030:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8014034:	4022      	ands	r2, r4
}
 8014036:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801403a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801403e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8014042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014046:	604b      	str	r3, [r1, #4]
}
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	fffff800 	.word	0xfffff800

08014050 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014050:	4b14      	ldr	r3, [pc, #80]	; (80140a4 <USB_EP0_OutStart+0x54>)
{
 8014052:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014054:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014056:	429c      	cmp	r4, r3
 8014058:	d81a      	bhi.n	8014090 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801405a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801405e:	2300      	movs	r3, #0
  if (dma == 1U)
 8014060:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014062:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014064:	6903      	ldr	r3, [r0, #16]
 8014066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801406a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801406c:	6903      	ldr	r3, [r0, #16]
 801406e:	f043 0318 	orr.w	r3, r3, #24
 8014072:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014074:	6903      	ldr	r3, [r0, #16]
 8014076:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801407a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 801407c:	d104      	bne.n	8014088 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801407e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014080:	6803      	ldr	r3, [r0, #0]
 8014082:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014086:	6003      	str	r3, [r0, #0]
}
 8014088:	2000      	movs	r0, #0
 801408a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801408e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014090:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8014094:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8014098:	2b00      	cmp	r3, #0
 801409a:	dae0      	bge.n	801405e <USB_EP0_OutStart+0xe>
}
 801409c:	2000      	movs	r0, #0
 801409e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140a2:	4770      	bx	lr
 80140a4:	4f54300a 	.word	0x4f54300a

080140a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80140a8:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80140aa:	4903      	ldr	r1, [pc, #12]	; (80140b8 <MX_FATFS_Init+0x10>)
 80140ac:	4803      	ldr	r0, [pc, #12]	; (80140bc <MX_FATFS_Init+0x14>)
 80140ae:	f001 f96f 	bl	8015390 <FATFS_LinkDriver>
 80140b2:	4b03      	ldr	r3, [pc, #12]	; (80140c0 <MX_FATFS_Init+0x18>)
 80140b4:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80140b6:	bd08      	pop	{r3, pc}
 80140b8:	200031b0 	.word	0x200031b0
 80140bc:	200002ec 	.word	0x200002ec
 80140c0:	200031b4 	.word	0x200031b4

080140c4 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80140c4:	4b02      	ldr	r3, [pc, #8]	; (80140d0 <USER_initialize+0xc>)
 80140c6:	2201      	movs	r2, #1
 80140c8:	701a      	strb	r2, [r3, #0]
    return Stat;
 80140ca:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 80140cc:	4770      	bx	lr
 80140ce:	bf00      	nop
 80140d0:	200002e8 	.word	0x200002e8

080140d4 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80140d4:	2000      	movs	r0, #0
 80140d6:	4770      	bx	lr

080140d8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80140d8:	2001      	movs	r0, #1
 80140da:	4770      	bx	lr

080140dc <USER_write>:
 80140dc:	2000      	movs	r0, #0
 80140de:	4770      	bx	lr

080140e0 <USER_status>:
 80140e0:	4b02      	ldr	r3, [pc, #8]	; (80140ec <USER_status+0xc>)
 80140e2:	2201      	movs	r2, #1
 80140e4:	701a      	strb	r2, [r3, #0]
 80140e6:	7818      	ldrb	r0, [r3, #0]
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	200002e8 	.word	0x200002e8

080140f0 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80140f0:	2100      	movs	r1, #0
{
 80140f2:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 80140f4:	4608      	mov	r0, r1
{
 80140f6:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 80140f8:	f003 fe6c 	bl	8017dd4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80140fc:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 80140fe:	4b1f      	ldr	r3, [pc, #124]	; (801417c <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8014100:	491f      	ldr	r1, [pc, #124]	; (8014180 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8014102:	4a20      	ldr	r2, [pc, #128]	; (8014184 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8014104:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8014106:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8014108:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 801410a:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801410c:	481e      	ldr	r0, [pc, #120]	; (8014188 <MX_LWIP_Init+0x98>)
 801410e:	4d1f      	ldr	r5, [pc, #124]	; (801418c <MX_LWIP_Init+0x9c>)
 8014110:	9002      	str	r0, [sp, #8]
 8014112:	481f      	ldr	r0, [pc, #124]	; (8014190 <MX_LWIP_Init+0xa0>)
 8014114:	9001      	str	r0, [sp, #4]
 8014116:	4628      	mov	r0, r5
 8014118:	f006 fc0a 	bl	801a930 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801411c:	4628      	mov	r0, r5
 801411e:	f006 fcb5 	bl	801aa8c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8014122:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8014126:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8014128:	075b      	lsls	r3, r3, #29
 801412a:	d524      	bpl.n	8014176 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 801412c:	f006 fcb4 	bl	801aa98 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8014130:	4918      	ldr	r1, [pc, #96]	; (8014194 <MX_LWIP_Init+0xa4>)
 8014132:	4816      	ldr	r0, [pc, #88]	; (801418c <MX_LWIP_Init+0x9c>)
 8014134:	f006 fd3a 	bl	801abac <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8014138:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801413a:	2101      	movs	r1, #1
 801413c:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 801413e:	4e16      	ldr	r6, [pc, #88]	; (8014198 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8014140:	4c16      	ldr	r4, [pc, #88]	; (801419c <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8014142:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8014146:	f001 fa0d 	bl	8015564 <osSemaphoreCreate>
 801414a:	4b15      	ldr	r3, [pc, #84]	; (80141a0 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 801414c:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801414e:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8014152:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8014154:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8014156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014158:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801415c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8014160:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8014164:	4631      	mov	r1, r6
 8014166:	a807      	add	r0, sp, #28
 8014168:	f001 f944 	bl	80153f4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 801416c:	4807      	ldr	r0, [pc, #28]	; (801418c <MX_LWIP_Init+0x9c>)
 801416e:	f00d fca7 	bl	8021ac0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8014172:	b00e      	add	sp, #56	; 0x38
 8014174:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8014176:	f006 fcb1 	bl	801aadc <netif_set_down>
 801417a:	e7d9      	b.n	8014130 <MX_LWIP_Init+0x40>
 801417c:	200031f8 	.word	0x200031f8
 8014180:	200031fc 	.word	0x200031fc
 8014184:	20003208 	.word	0x20003208
 8014188:	08017d4d 	.word	0x08017d4d
 801418c:	200031bc 	.word	0x200031bc
 8014190:	080144a1 	.word	0x080144a1
 8014194:	08014681 	.word	0x08014681
 8014198:	20003200 	.word	0x20003200
 801419c:	08029598 	.word	0x08029598
 80141a0:	200031b8 	.word	0x200031b8

080141a4 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141a4:	4b2c      	ldr	r3, [pc, #176]	; (8014258 <low_level_output+0xb4>)
{
 80141a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 80141ac:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80141ae:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80141b0:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 80141b2:	2900      	cmp	r1, #0
 80141b4:	d04d      	beq.n	8014252 <low_level_output+0xae>
  bufferoffset = 0;
 80141b6:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141b8:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 80141bc:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80141be:	6822      	ldr	r2, [r4, #0]
 80141c0:	2a00      	cmp	r2, #0
 80141c2:	db1b      	blt.n	80141fc <low_level_output+0x58>
      byteslefttocopy = q->len;
 80141c4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141c8:	1995      	adds	r5, r2, r6
 80141ca:	454d      	cmp	r5, r9
 80141cc:	d93c      	bls.n	8014248 <low_level_output+0xa4>
      payloadoffset = 0;
 80141ce:	2700      	movs	r7, #0
 80141d0:	e002      	b.n	80141d8 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141d2:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80141d4:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80141d6:	d921      	bls.n	801421c <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80141d8:	eba9 0a06 	sub.w	sl, r9, r6
 80141dc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80141e0:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 80141e2:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80141e4:	4439      	add	r1, r7
 80141e6:	4652      	mov	r2, sl
 80141e8:	f010 f90e 	bl	8024408 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80141ec:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80141ee:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80141f2:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80141f4:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80141f6:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80141f8:	42b3      	cmp	r3, r6
 80141fa:	daea      	bge.n	80141d2 <low_level_output+0x2e>
        errval = ERR_USE;
 80141fc:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8014200:	4b15      	ldr	r3, [pc, #84]	; (8014258 <low_level_output+0xb4>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014208:	695a      	ldr	r2, [r3, #20]
 801420a:	0692      	lsls	r2, r2, #26
 801420c:	d503      	bpl.n	8014216 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 801420e:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8014210:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8014212:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8014214:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8014216:	b003      	add	sp, #12
 8014218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801421c:	4618      	mov	r0, r3
 801421e:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014220:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014224:	462a      	mov	r2, r5
 8014226:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8014228:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801422a:	4439      	add	r1, r7
 801422c:	f010 f8ec 	bl	8024408 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8014230:	f8db b000 	ldr.w	fp, [fp]
 8014234:	9b01      	ldr	r3, [sp, #4]
 8014236:	f1bb 0f00 	cmp.w	fp, #0
 801423a:	d1c0      	bne.n	80141be <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 801423c:	4641      	mov	r1, r8
 801423e:	4806      	ldr	r0, [pc, #24]	; (8014258 <low_level_output+0xb4>)
 8014240:	f7f6 f8d0 	bl	800a3e4 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8014244:	2000      	movs	r0, #0
 8014246:	e7db      	b.n	8014200 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8014248:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 801424a:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801424c:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 801424e:	4615      	mov	r5, r2
 8014250:	e7e6      	b.n	8014220 <low_level_output+0x7c>
  uint32_t framelength = 0;
 8014252:	4688      	mov	r8, r1
 8014254:	e7f2      	b.n	801423c <low_level_output+0x98>
 8014256:	bf00      	nop
 8014258:	200062ac 	.word	0x200062ac

0801425c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014260:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8014374 <ethernetif_input+0x118>
 8014264:	b083      	sub	sp, #12
 8014266:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8014268:	4b40      	ldr	r3, [pc, #256]	; (801436c <ethernetif_input+0x110>)
 801426a:	f04f 31ff 	mov.w	r1, #4294967295
 801426e:	6818      	ldr	r0, [r3, #0]
 8014270:	f001 f99e 	bl	80155b0 <osSemaphoreWait>
 8014274:	2800      	cmp	r0, #0
 8014276:	d1f7      	bne.n	8014268 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8014278:	483d      	ldr	r0, [pc, #244]	; (8014370 <ethernetif_input+0x114>)
 801427a:	f00f fbb5 	bl	80239e8 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801427e:	483d      	ldr	r0, [pc, #244]	; (8014374 <ethernetif_input+0x118>)
 8014280:	f7f6 f934 	bl	800a4ec <HAL_ETH_GetReceivedFrame_IT>
 8014284:	4604      	mov	r4, r0
 8014286:	2800      	cmp	r0, #0
 8014288:	d168      	bne.n	801435c <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 801428a:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801428e:	bb51      	cbnz	r1, 80142e6 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8014290:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8014294:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8014298:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801429c:	b140      	cbz	r0, 80142b0 <ethernetif_input+0x54>
 801429e:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142a0:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142a2:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142a4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142a8:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80142aa:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80142ac:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80142ae:	d1f7      	bne.n	80142a0 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142b0:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 80142b4:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 80142ba:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80142be:	695a      	ldr	r2, [r3, #20]
 80142c0:	0612      	lsls	r2, r2, #24
 80142c2:	d503      	bpl.n	80142cc <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80142c4:	2280      	movs	r2, #128	; 0x80
 80142c6:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 80142c8:	2200      	movs	r2, #0
 80142ca:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 80142cc:	f1ba 0f00 	cmp.w	sl, #0
 80142d0:	d044      	beq.n	801435c <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 80142d2:	9901      	ldr	r1, [sp, #4]
 80142d4:	4650      	mov	r0, sl
 80142d6:	690b      	ldr	r3, [r1, #16]
 80142d8:	4798      	blx	r3
 80142da:	2800      	cmp	r0, #0
 80142dc:	d142      	bne.n	8014364 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 80142de:	4824      	ldr	r0, [pc, #144]	; (8014370 <ethernetif_input+0x114>)
 80142e0:	f00f fb88 	bl	80239f4 <sys_mutex_unlock>
      } while(p!=NULL);
 80142e4:	e7c8      	b.n	8014278 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80142e6:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80142ea:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80142ee:	f006 fdb5 	bl	801ae5c <pbuf_alloc>
  if (p != NULL)
 80142f2:	4682      	mov	sl, r0
 80142f4:	2800      	cmp	r0, #0
 80142f6:	d0cb      	beq.n	8014290 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80142f8:	4683      	mov	fp, r0
    bufferoffset = 0;
 80142fa:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80142fc:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8014300:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8014304:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014308:	1854      	adds	r4, r2, r1
 801430a:	4544      	cmp	r4, r8
 801430c:	d923      	bls.n	8014356 <ethernetif_input+0xfa>
      payloadoffset = 0;
 801430e:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8014310:	f8db 0004 	ldr.w	r0, [fp, #4]
 8014314:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8014318:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801431c:	4439      	add	r1, r7
 801431e:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8014320:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8014322:	f010 f871 	bl	8024408 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8014326:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014328:	4544      	cmp	r4, r8
        bufferoffset = 0;
 801432a:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 801432e:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014330:	d8ee      	bhi.n	8014310 <ethernetif_input+0xb4>
 8014332:	4639      	mov	r1, r7
 8014334:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8014336:	f8db 0004 	ldr.w	r0, [fp, #4]
 801433a:	4428      	add	r0, r5
 801433c:	f010 f864 	bl	8024408 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8014340:	f8db b000 	ldr.w	fp, [fp]
 8014344:	f1bb 0f00 	cmp.w	fp, #0
 8014348:	d0a4      	beq.n	8014294 <ethernetif_input+0x38>
 801434a:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 801434c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8014350:	1854      	adds	r4, r2, r1
 8014352:	4544      	cmp	r4, r8
 8014354:	d8db      	bhi.n	801430e <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8014356:	4439      	add	r1, r7
      payloadoffset = 0;
 8014358:	2500      	movs	r5, #0
 801435a:	e7ec      	b.n	8014336 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 801435c:	4804      	ldr	r0, [pc, #16]	; (8014370 <ethernetif_input+0x114>)
 801435e:	f00f fb49 	bl	80239f4 <sys_mutex_unlock>
      } while(p!=NULL);
 8014362:	e781      	b.n	8014268 <ethernetif_input+0xc>
            pbuf_free(p);
 8014364:	4650      	mov	r0, sl
 8014366:	f006 ff4b 	bl	801b200 <pbuf_free>
 801436a:	e7b8      	b.n	80142de <ethernetif_input+0x82>
 801436c:	200062f4 	.word	0x200062f4
 8014370:	2001e5b4 	.word	0x2001e5b4
 8014374:	200062ac 	.word	0x200062ac

08014378 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8014378:	4b41      	ldr	r3, [pc, #260]	; (8014480 <HAL_ETH_MspInit+0x108>)
 801437a:	6802      	ldr	r2, [r0, #0]
{
 801437c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801437e:	429a      	cmp	r2, r3
{
 8014380:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014382:	f04f 0400 	mov.w	r4, #0
 8014386:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801438a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801438e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8014390:	d001      	beq.n	8014396 <HAL_ETH_MspInit+0x1e>
}
 8014392:	b00d      	add	sp, #52	; 0x34
 8014394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8014396:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801439a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801439c:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801439e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 80143a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80143a2:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80143a4:	4837      	ldr	r0, [pc, #220]	; (8014484 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 80143a6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80143aa:	631a      	str	r2, [r3, #48]	; 0x30
 80143ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143ae:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80143b2:	9200      	str	r2, [sp, #0]
 80143b4:	9a00      	ldr	r2, [sp, #0]
 80143b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80143bc:	631a      	str	r2, [r3, #48]	; 0x30
 80143be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143c0:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80143c4:	9201      	str	r2, [sp, #4]
 80143c6:	9a01      	ldr	r2, [sp, #4]
 80143c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143ca:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80143ce:	631a      	str	r2, [r3, #48]	; 0x30
 80143d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80143d6:	9202      	str	r2, [sp, #8]
 80143d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80143da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143dc:	f042 0204 	orr.w	r2, r2, #4
 80143e0:	631a      	str	r2, [r3, #48]	; 0x30
 80143e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143e4:	f002 0204 	and.w	r2, r2, #4
 80143e8:	9203      	str	r2, [sp, #12]
 80143ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80143ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143ee:	f042 0201 	orr.w	r2, r2, #1
 80143f2:	631a      	str	r2, [r3, #48]	; 0x30
 80143f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80143f6:	f002 0201 	and.w	r2, r2, #1
 80143fa:	9204      	str	r2, [sp, #16]
 80143fc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80143fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014400:	433a      	orrs	r2, r7
 8014402:	631a      	str	r2, [r3, #48]	; 0x30
 8014404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014406:	403a      	ands	r2, r7
 8014408:	9205      	str	r2, [sp, #20]
 801440a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801440e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014412:	631a      	str	r2, [r3, #48]	; 0x30
 8014414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014416:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014418:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801441c:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801441e:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014422:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014424:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8014426:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014428:	f7f7 f984 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801442c:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801442e:	a907      	add	r1, sp, #28
 8014430:	4815      	ldr	r0, [pc, #84]	; (8014488 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8014432:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014434:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014438:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801443c:	f7f7 f97a 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8014440:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8014444:	a907      	add	r1, sp, #28
 8014446:	4811      	ldr	r0, [pc, #68]	; (801448c <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8014448:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801444a:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801444e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8014452:	f7f7 f96f 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8014456:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801445a:	a907      	add	r1, sp, #28
 801445c:	480c      	ldr	r0, [pc, #48]	; (8014490 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 801445e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014460:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8014462:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014464:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8014468:	f7f7 f964 	bl	800b734 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 801446c:	4622      	mov	r2, r4
 801446e:	2106      	movs	r1, #6
 8014470:	203d      	movs	r0, #61	; 0x3d
 8014472:	f7f4 fae1 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8014476:	203d      	movs	r0, #61	; 0x3d
 8014478:	f7f4 fb28 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 801447c:	b00d      	add	sp, #52	; 0x34
 801447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014480:	40028000 	.word	0x40028000
 8014484:	40020800 	.word	0x40020800
 8014488:	40020000 	.word	0x40020000
 801448c:	40020400 	.word	0x40020400
 8014490:	40021800 	.word	0x40021800

08014494 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8014494:	4b01      	ldr	r3, [pc, #4]	; (801449c <HAL_ETH_RxCpltCallback+0x8>)
 8014496:	6818      	ldr	r0, [r3, #0]
 8014498:	f001 b8b6 	b.w	8015608 <osSemaphoreRelease>
 801449c:	200062f4 	.word	0x200062f4

080144a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80144a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80144a2:	4604      	mov	r4, r0
{
 80144a4:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80144a6:	2800      	cmp	r0, #0
 80144a8:	f000 809e 	beq.w	80145e8 <ethernetif_init+0x148>
  heth.Instance = ETH;
 80144ac:	4d52      	ldr	r5, [pc, #328]	; (80145f8 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 80144ae:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80144b0:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80144b4:	4b51      	ldr	r3, [pc, #324]	; (80145fc <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 80144b6:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 80144b8:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 80144ba:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 80144be:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80144c2:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 80144c4:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 80144c6:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 80144c8:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80144cc:	494c      	ldr	r1, [pc, #304]	; (8014600 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 80144ce:	4a4d      	ldr	r2, [pc, #308]	; (8014604 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 80144d0:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 80144d2:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80144d4:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80144d6:	494c      	ldr	r1, [pc, #304]	; (8014608 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 80144d8:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80144dc:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 80144de:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80144e0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 80144e4:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80144e8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 80144ec:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80144f0:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80144f2:	4042      	eors	r2, r0
 80144f4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 80144f8:	404a      	eors	r2, r1
 80144fa:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80144fe:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8014502:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8014506:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 801450a:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801450e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8014512:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8014514:	404b      	eors	r3, r1
 8014516:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801451a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801451e:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 8014522:	ab01      	add	r3, sp, #4
 8014524:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8014526:	f7f6 f905 	bl	800a734 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 801452a:	b928      	cbnz	r0, 8014538 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 801452c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8014530:	f043 0304 	orr.w	r3, r3, #4
 8014534:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014538:	2304      	movs	r3, #4
 801453a:	4a34      	ldr	r2, [pc, #208]	; (801460c <ethernetif_init+0x16c>)
 801453c:	4934      	ldr	r1, [pc, #208]	; (8014610 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 801453e:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014540:	482d      	ldr	r0, [pc, #180]	; (80145f8 <ethernetif_init+0x158>)
 8014542:	f7f5 fecb 	bl	800a2dc <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8014546:	2304      	movs	r3, #4
 8014548:	4a32      	ldr	r2, [pc, #200]	; (8014614 <ethernetif_init+0x174>)
 801454a:	4933      	ldr	r1, [pc, #204]	; (8014618 <ethernetif_init+0x178>)
 801454c:	482a      	ldr	r0, [pc, #168]	; (80145f8 <ethernetif_init+0x158>)
 801454e:	f7f5 ff0b 	bl	800a368 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014552:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014554:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014556:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 801455a:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801455e:	4e2f      	ldr	r6, [pc, #188]	; (801461c <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014560:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014564:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014568:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801456a:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801456c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014570:	7858      	ldrb	r0, [r3, #1]
 8014572:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8014576:	7898      	ldrb	r0, [r3, #2]
 8014578:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801457c:	78d8      	ldrb	r0, [r3, #3]
 801457e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014582:	7918      	ldrb	r0, [r3, #4]
 8014584:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8014588:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801458a:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 801458c:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801458e:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8014590:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014594:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8014598:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801459c:	f000 ffe2 	bl	8015564 <osSemaphoreCreate>
 80145a0:	4b1f      	ldr	r3, [pc, #124]	; (8014620 <ethernetif_init+0x180>)
 80145a2:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80145a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80145a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80145a8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80145ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80145b0:	4621      	mov	r1, r4
 80145b2:	a805      	add	r0, sp, #20
 80145b4:	f000 ff1e 	bl	80153f4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 80145b8:	480f      	ldr	r0, [pc, #60]	; (80145f8 <ethernetif_init+0x158>)
 80145ba:	f7f6 fa11 	bl	800a9e0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80145be:	466a      	mov	r2, sp
 80145c0:	211d      	movs	r1, #29
 80145c2:	480d      	ldr	r0, [pc, #52]	; (80145f8 <ethernetif_init+0x158>)
 80145c4:	f7f6 f824 	bl	800a610 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80145c8:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80145ca:	211d      	movs	r1, #29
 80145cc:	480a      	ldr	r0, [pc, #40]	; (80145f8 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 80145ce:	f042 020b 	orr.w	r2, r2, #11
 80145d2:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80145d4:	f7f6 f866 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80145d8:	466a      	mov	r2, sp
 80145da:	211d      	movs	r1, #29
 80145dc:	4806      	ldr	r0, [pc, #24]	; (80145f8 <ethernetif_init+0x158>)
 80145de:	f7f6 f817 	bl	800a610 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80145e2:	4638      	mov	r0, r7
 80145e4:	b00d      	add	sp, #52	; 0x34
 80145e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80145e8:	4b0e      	ldr	r3, [pc, #56]	; (8014624 <ethernetif_init+0x184>)
 80145ea:	f240 223a 	movw	r2, #570	; 0x23a
 80145ee:	490e      	ldr	r1, [pc, #56]	; (8014628 <ethernetif_init+0x188>)
 80145f0:	480e      	ldr	r0, [pc, #56]	; (801462c <ethernetif_init+0x18c>)
 80145f2:	f010 fecf 	bl	8025394 <iprintf>
 80145f6:	e759      	b.n	80144ac <ethernetif_init+0xc>
 80145f8:	200062ac 	.word	0x200062ac
 80145fc:	1ff0f000 	.word	0x1ff0f000
 8014600:	08022641 	.word	0x08022641
 8014604:	40028000 	.word	0x40028000
 8014608:	080141a5 	.word	0x080141a5
 801460c:	20004adc 	.word	0x20004adc
 8014610:	2000328c 	.word	0x2000328c
 8014614:	2000330c 	.word	0x2000330c
 8014618:	2000320c 	.word	0x2000320c
 801461c:	080295b4 	.word	0x080295b4
 8014620:	200062f4 	.word	0x200062f4
 8014624:	0802cd14 	.word	0x0802cd14
 8014628:	0802cd30 	.word	0x0802cd30
 801462c:	08029fe8 	.word	0x08029fe8

08014630 <sys_now>:
 8014630:	f7f3 bdaa 	b.w	8008188 <HAL_GetTick>

08014634 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8014634:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8014636:	2300      	movs	r3, #0
{
 8014638:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801463a:	4d0f      	ldr	r5, [pc, #60]	; (8014678 <ethernetif_set_link+0x44>)
{
 801463c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 801463e:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8014640:	e003      	b.n	801464a <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8014642:	b1b3      	cbz	r3, 8014672 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8014644:	20c8      	movs	r0, #200	; 0xc8
 8014646:	f000 ff07 	bl	8015458 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801464a:	aa01      	add	r2, sp, #4
 801464c:	2101      	movs	r1, #1
 801464e:	4628      	mov	r0, r5
 8014650:	f7f5 ffde 	bl	800a610 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014654:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8014656:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014658:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 801465c:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014660:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8014662:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014664:	d4ed      	bmi.n	8014642 <ethernetif_set_link+0xe>
 8014666:	b113      	cbz	r3, 801466e <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8014668:	f006 fa60 	bl	801ab2c <netif_set_link_up>
 801466c:	e7ea      	b.n	8014644 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801466e:	0753      	lsls	r3, r2, #29
 8014670:	d5e8      	bpl.n	8014644 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8014672:	f006 fa81 	bl	801ab78 <netif_set_link_down>
 8014676:	e7e5      	b.n	8014644 <ethernetif_set_link+0x10>
 8014678:	200062ac 	.word	0x200062ac

0801467c <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop

08014680 <ethernetif_update_config>:
{
 8014680:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8014682:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8014686:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8014688:	2100      	movs	r1, #0
{
 801468a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 801468c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801468e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8014690:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8014692:	d538      	bpl.n	8014706 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8014694:	4c32      	ldr	r4, [pc, #200]	; (8014760 <ethernetif_update_config+0xe0>)
 8014696:	6863      	ldr	r3, [r4, #4]
 8014698:	b9e3      	cbnz	r3, 80146d4 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801469a:	68a3      	ldr	r3, [r4, #8]
 801469c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80146a0:	d140      	bne.n	8014724 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80146a2:	68e2      	ldr	r2, [r4, #12]
 80146a4:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 80146a8:	d135      	bne.n	8014716 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80146aa:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80146ac:	08d2      	lsrs	r2, r2, #3
 80146ae:	2100      	movs	r1, #0
 80146b0:	482b      	ldr	r0, [pc, #172]	; (8014760 <ethernetif_update_config+0xe0>)
 80146b2:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 80146b6:	b292      	uxth	r2, r2
 80146b8:	f7f5 fff4 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80146bc:	2100      	movs	r1, #0
 80146be:	4828      	ldr	r0, [pc, #160]	; (8014760 <ethernetif_update_config+0xe0>)
 80146c0:	f7f6 fa28 	bl	800ab14 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 80146c4:	4826      	ldr	r0, [pc, #152]	; (8014760 <ethernetif_update_config+0xe0>)
 80146c6:	f7f6 f98b 	bl	800a9e0 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 80146ca:	4628      	mov	r0, r5
 80146cc:	f7ff ffd6 	bl	801467c <ethernetif_notify_conn_changed>
}
 80146d0:	b003      	add	sp, #12
 80146d2:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80146d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80146d8:	4620      	mov	r0, r4
 80146da:	f7f5 ffe3 	bl	800a6a4 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80146de:	f7f3 fd53 	bl	8008188 <HAL_GetTick>
 80146e2:	9000      	str	r0, [sp, #0]
 80146e4:	e002      	b.n	80146ec <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80146e6:	9b01      	ldr	r3, [sp, #4]
 80146e8:	069a      	lsls	r2, r3, #26
 80146ea:	d425      	bmi.n	8014738 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80146ec:	aa01      	add	r2, sp, #4
 80146ee:	2101      	movs	r1, #1
 80146f0:	4620      	mov	r0, r4
 80146f2:	f7f5 ff8d 	bl	800a610 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80146f6:	f7f3 fd47 	bl	8008188 <HAL_GetTick>
 80146fa:	9b00      	ldr	r3, [sp, #0]
 80146fc:	1ac3      	subs	r3, r0, r3
 80146fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014702:	d9f0      	bls.n	80146e6 <ethernetif_update_config+0x66>
 8014704:	e7c9      	b.n	801469a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 8014706:	4816      	ldr	r0, [pc, #88]	; (8014760 <ethernetif_update_config+0xe0>)
 8014708:	f7f6 f9b6 	bl	800aa78 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 801470c:	4628      	mov	r0, r5
 801470e:	f7ff ffb5 	bl	801467c <ethernetif_notify_conn_changed>
}
 8014712:	b003      	add	sp, #12
 8014714:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8014716:	f240 21e3 	movw	r1, #739	; 0x2e3
 801471a:	4812      	ldr	r0, [pc, #72]	; (8014764 <ethernetif_update_config+0xe4>)
 801471c:	f7f0 fc4a 	bl	8004fb4 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8014720:	68e2      	ldr	r2, [r4, #12]
 8014722:	e7c2      	b.n	80146aa <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 8014724:	f240 21e2 	movw	r1, #738	; 0x2e2
 8014728:	480e      	ldr	r0, [pc, #56]	; (8014764 <ethernetif_update_config+0xe4>)
 801472a:	f7f0 fc43 	bl	8004fb4 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 801472e:	68e2      	ldr	r2, [r4, #12]
 8014730:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8014734:	d0b9      	beq.n	80146aa <ethernetif_update_config+0x2a>
 8014736:	e7ee      	b.n	8014716 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8014738:	aa01      	add	r2, sp, #4
 801473a:	2110      	movs	r1, #16
 801473c:	4808      	ldr	r0, [pc, #32]	; (8014760 <ethernetif_update_config+0xe0>)
 801473e:	f7f5 ff67 	bl	800a610 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8014742:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8014744:	f013 0204 	ands.w	r2, r3, #4
 8014748:	bf18      	it	ne
 801474a:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 801474e:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8014750:	bf4c      	ite	mi
 8014752:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8014754:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8014758:	60e2      	str	r2, [r4, #12]
 801475a:	60a3      	str	r3, [r4, #8]
 801475c:	e7ae      	b.n	80146bc <ethernetif_update_config+0x3c>
 801475e:	bf00      	nop
 8014760:	200062ac 	.word	0x200062ac
 8014764:	0802cd14 	.word	0x0802cd14

08014768 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014768:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801476c:	b183      	cbz	r3, 8014790 <USBD_CDC_EP0_RxReady+0x28>
{
 801476e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014770:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014774:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8014778:	28ff      	cmp	r0, #255	; 0xff
 801477a:	d007      	beq.n	801478c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801477c:	689b      	ldr	r3, [r3, #8]
 801477e:	4621      	mov	r1, r4
 8014780:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8014784:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8014786:	23ff      	movs	r3, #255	; 0xff
 8014788:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801478c:	2000      	movs	r0, #0
 801478e:	bd10      	pop	{r4, pc}
 8014790:	2000      	movs	r0, #0
 8014792:	4770      	bx	lr

08014794 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014794:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014796:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8014798:	4801      	ldr	r0, [pc, #4]	; (80147a0 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801479a:	801a      	strh	r2, [r3, #0]
}
 801479c:	4770      	bx	lr
 801479e:	bf00      	nop
 80147a0:	20000338 	.word	0x20000338

080147a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80147a4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80147a6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 80147a8:	4801      	ldr	r0, [pc, #4]	; (80147b0 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80147aa:	801a      	strh	r2, [r3, #0]
}
 80147ac:	4770      	bx	lr
 80147ae:	bf00      	nop
 80147b0:	2000037c 	.word	0x2000037c

080147b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80147b4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80147b6:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80147b8:	4801      	ldr	r0, [pc, #4]	; (80147c0 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80147ba:	801a      	strh	r2, [r3, #0]
}
 80147bc:	4770      	bx	lr
 80147be:	bf00      	nop
 80147c0:	200003cc 	.word	0x200003cc

080147c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80147c4:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80147c6:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 80147c8:	4801      	ldr	r0, [pc, #4]	; (80147d0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80147ca:	801a      	strh	r2, [r3, #0]
}
 80147cc:	4770      	bx	lr
 80147ce:	bf00      	nop
 80147d0:	200003c0 	.word	0x200003c0

080147d4 <USBD_CDC_DataOut>:
{
 80147d4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80147d6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80147da:	b17d      	cbz	r5, 80147fc <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80147dc:	4604      	mov	r4, r0
 80147de:	f00f fb7f 	bl	8023ee0 <USBD_LL_GetRxDataSize>
 80147e2:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80147e4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80147e8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80147ec:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80147f0:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80147f2:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80147f6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80147f8:	2000      	movs	r0, #0
}
 80147fa:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80147fc:	2003      	movs	r0, #3
}
 80147fe:	bd38      	pop	{r3, r4, r5, pc}

08014800 <USBD_CDC_DataIn>:
{
 8014800:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 8014802:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 8014806:	b34d      	cbz	r5, 801485c <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014808:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801480c:	4686      	mov	lr, r0
 801480e:	460a      	mov	r2, r1
 8014810:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8014814:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8014818:	b15b      	cbz	r3, 8014832 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801481a:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 801481e:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 8014822:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8014826:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8014828:	fbb3 f6f4 	udiv	r6, r3, r4
 801482c:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014830:	b164      	cbz	r4, 801484c <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014832:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8014836:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014838:	f505 7104 	add.w	r1, r5, #528	; 0x210
 801483c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8014840:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8014842:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014846:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8014848:	4620      	mov	r0, r4
}
 801484a:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801484c:	4623      	mov	r3, r4
 801484e:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8014850:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014854:	f00f fb28 	bl	8023ea8 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8014858:	4620      	mov	r0, r4
}
 801485a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 801485c:	2003      	movs	r0, #3
}
 801485e:	bd70      	pop	{r4, r5, r6, pc}

08014860 <USBD_CDC_Setup>:
{
 8014860:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014862:	f891 c000 	ldrb.w	ip, [r1]
{
 8014866:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8014868:	2300      	movs	r3, #0
{
 801486a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801486c:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8014870:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014872:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8014876:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 801487a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801487e:	d01c      	beq.n	80148ba <USBD_CDC_Setup+0x5a>
 8014880:	2e20      	cmp	r6, #32
 8014882:	d112      	bne.n	80148aa <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8014884:	88ca      	ldrh	r2, [r1, #6]
 8014886:	2a00      	cmp	r2, #0
 8014888:	d036      	beq.n	80148f8 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 801488a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801488e:	d055      	beq.n	801493c <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8014890:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014892:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014896:	4639      	mov	r1, r7
 8014898:	7860      	ldrb	r0, [r4, #1]
 801489a:	689b      	ldr	r3, [r3, #8]
 801489c:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801489e:	88e2      	ldrh	r2, [r4, #6]
 80148a0:	4639      	mov	r1, r7
 80148a2:	4628      	mov	r0, r5
 80148a4:	f000 fd2c 	bl	8015300 <USBD_CtlSendData>
 80148a8:	e004      	b.n	80148b4 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 80148aa:	4621      	mov	r1, r4
 80148ac:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 80148ae:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 80148b0:	f000 fcf0 	bl	8015294 <USBD_CtlError>
}
 80148b4:	4630      	mov	r0, r6
 80148b6:	b003      	add	sp, #12
 80148b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 80148ba:	784b      	ldrb	r3, [r1, #1]
 80148bc:	2b0b      	cmp	r3, #11
 80148be:	d8f4      	bhi.n	80148aa <USBD_CDC_Setup+0x4a>
 80148c0:	a201      	add	r2, pc, #4	; (adr r2, 80148c8 <USBD_CDC_Setup+0x68>)
 80148c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148c6:	bf00      	nop
 80148c8:	0801490b 	.word	0x0801490b
 80148cc:	080148b5 	.word	0x080148b5
 80148d0:	080148ab 	.word	0x080148ab
 80148d4:	080148ab 	.word	0x080148ab
 80148d8:	080148ab 	.word	0x080148ab
 80148dc:	080148ab 	.word	0x080148ab
 80148e0:	080148ab 	.word	0x080148ab
 80148e4:	080148ab 	.word	0x080148ab
 80148e8:	080148ab 	.word	0x080148ab
 80148ec:	080148ab 	.word	0x080148ab
 80148f0:	08014929 	.word	0x08014929
 80148f4:	0801491f 	.word	0x0801491f
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80148f8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80148fc:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80148fe:	7848      	ldrb	r0, [r1, #1]
 8014900:	689b      	ldr	r3, [r3, #8]
 8014902:	4798      	blx	r3
}
 8014904:	4630      	mov	r0, r6
 8014906:	b003      	add	sp, #12
 8014908:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801490a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801490e:	2a03      	cmp	r2, #3
 8014910:	d01e      	beq.n	8014950 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 8014912:	4621      	mov	r1, r4
 8014914:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8014916:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8014918:	f000 fcbc 	bl	8015294 <USBD_CtlError>
        ret = USBD_FAIL;
 801491c:	e7ca      	b.n	80148b4 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801491e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014922:	2b03      	cmp	r3, #3
 8014924:	d0c6      	beq.n	80148b4 <USBD_CDC_Setup+0x54>
 8014926:	e7f4      	b.n	8014912 <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014928:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801492c:	2b03      	cmp	r3, #3
 801492e:	d1f0      	bne.n	8014912 <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014930:	2201      	movs	r2, #1
 8014932:	f10d 0105 	add.w	r1, sp, #5
 8014936:	f000 fce3 	bl	8015300 <USBD_CtlSendData>
 801493a:	e7bb      	b.n	80148b4 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 801493c:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 801493e:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8014940:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8014944:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014948:	4639      	mov	r1, r7
 801494a:	f000 fcf1 	bl	8015330 <USBD_CtlPrepareRx>
 801494e:	e7b1      	b.n	80148b4 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014950:	2202      	movs	r2, #2
 8014952:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8014956:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014958:	f000 fcd2 	bl	8015300 <USBD_CtlSendData>
 801495c:	e7aa      	b.n	80148b4 <USBD_CDC_Setup+0x54>
 801495e:	bf00      	nop

08014960 <USBD_CDC_DeInit>:
{
 8014960:	b538      	push	{r3, r4, r5, lr}
 8014962:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014964:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014966:	2181      	movs	r1, #129	; 0x81
 8014968:	f00f fa52 	bl	8023e10 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801496c:	2101      	movs	r1, #1
 801496e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014970:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014972:	f00f fa4d 	bl	8023e10 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014976:	2182      	movs	r1, #130	; 0x82
 8014978:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801497a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801497e:	f00f fa47 	bl	8023e10 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8014982:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014986:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8014988:	b14b      	cbz	r3, 801499e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801498a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014992:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8014996:	f00f fd1f 	bl	80243d8 <free>
    pdev->pClassData = NULL;
 801499a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801499e:	2000      	movs	r0, #0
 80149a0:	bd38      	pop	{r3, r4, r5, pc}
 80149a2:	bf00      	nop

080149a4 <USBD_CDC_Init>:
{
 80149a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149a8:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80149aa:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80149ae:	f00f fd0b 	bl	80243c8 <malloc>
  if (hcdc == NULL)
 80149b2:	4605      	mov	r5, r0
 80149b4:	2800      	cmp	r0, #0
 80149b6:	d04c      	beq.n	8014a52 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149b8:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 80149ba:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149be:	b393      	cbz	r3, 8014a26 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80149c0:	2340      	movs	r3, #64	; 0x40
 80149c2:	2202      	movs	r2, #2
 80149c4:	2181      	movs	r1, #129	; 0x81
 80149c6:	4620      	mov	r0, r4
 80149c8:	f00f fa10 	bl	8023dec <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80149cc:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80149ce:	2340      	movs	r3, #64	; 0x40
 80149d0:	4631      	mov	r1, r6
 80149d2:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80149d4:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80149d6:	4620      	mov	r0, r4
 80149d8:	f00f fa08 	bl	8023dec <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80149dc:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80149de:	2203      	movs	r2, #3
 80149e0:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80149e2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80149e6:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80149e8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80149ec:	2308      	movs	r3, #8
 80149ee:	f00f f9fd 	bl	8023dec <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80149f2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80149f6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80149fa:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80149fc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a04:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8014a06:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8014a0a:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a0e:	b9ae      	cbnz	r6, 8014a3c <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a14:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8014a18:	4641      	mov	r1, r8
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	f00f fa52 	bl	8023ec4 <USBD_LL_PrepareReceive>
}
 8014a20:	4630      	mov	r0, r6
 8014a22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a2a:	2202      	movs	r2, #2
 8014a2c:	2181      	movs	r1, #129	; 0x81
 8014a2e:	4620      	mov	r0, r4
 8014a30:	f00f f9dc 	bl	8023dec <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014a34:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a3a:	e7c9      	b.n	80149d0 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 8014a3c:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a3e:	2340      	movs	r3, #64	; 0x40
 8014a40:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8014a44:	4641      	mov	r1, r8
 8014a46:	4620      	mov	r0, r4
 8014a48:	f00f fa3c 	bl	8023ec4 <USBD_LL_PrepareReceive>
}
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8014a52:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8014a54:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014a58:	e7e2      	b.n	8014a20 <USBD_CDC_Init+0x7c>
 8014a5a:	bf00      	nop

08014a5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014a5c:	4603      	mov	r3, r0
  if (fops == NULL)
 8014a5e:	b119      	cbz	r1, 8014a68 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8014a60:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8014a62:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8014a66:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8014a68:	2003      	movs	r0, #3
}
 8014a6a:	4770      	bx	lr

08014a6c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014a6c:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8014a6e:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014a70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8014a74:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014a78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8014a7c:	4770      	bx	lr
 8014a7e:	bf00      	nop

08014a80 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014a80:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8014a82:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8014a84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a88:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8014a8c:	4770      	bx	lr
 8014a8e:	bf00      	nop

08014a90 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014a90:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8014a94:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8014a96:	b19a      	cbz	r2, 8014ac0 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a98:	7c04      	ldrb	r4, [r0, #16]
 8014a9a:	b144      	cbz	r4, 8014aae <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014a9c:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014a9e:	2340      	movs	r3, #64	; 0x40
 8014aa0:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014aa4:	2101      	movs	r1, #1
 8014aa6:	f00f fa0d 	bl	8023ec4 <USBD_LL_PrepareReceive>
}
 8014aaa:	4620      	mov	r0, r4
 8014aac:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8014aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ab2:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014ab6:	2101      	movs	r1, #1
 8014ab8:	f00f fa04 	bl	8023ec4 <USBD_LL_PrepareReceive>
}
 8014abc:	4620      	mov	r0, r4
 8014abe:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8014ac0:	2403      	movs	r4, #3
}
 8014ac2:	4620      	mov	r0, r4
 8014ac4:	bd10      	pop	{r4, pc}
 8014ac6:	bf00      	nop

08014ac8 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014ac8:	b1a0      	cbz	r0, 8014af4 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8014aca:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014ace:	b113      	cbz	r3, 8014ad6 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8014ad6:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8014ada:	b113      	cbz	r3, 8014ae2 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8014adc:	2300      	movs	r3, #0
 8014ade:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014ae2:	b109      	cbz	r1, 8014ae8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8014ae4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014ae8:	2301      	movs	r3, #1
  pdev->id = id;
 8014aea:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014aec:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014af0:	f00f b93c 	b.w	8023d6c <USBD_LL_Init>

  return ret;
}
 8014af4:	2003      	movs	r0, #3
 8014af6:	4770      	bx	lr

08014af8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014af8:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8014afa:	2400      	movs	r4, #0
{
 8014afc:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8014afe:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8014b02:	b159      	cbz	r1, 8014b1c <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014b04:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8014b06:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014b08:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 8014b0c:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8014b10:	4798      	blx	r3
 8014b12:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8014b16:	4620      	mov	r0, r4
 8014b18:	b003      	add	sp, #12
 8014b1a:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8014b1c:	2403      	movs	r4, #3
}
 8014b1e:	4620      	mov	r0, r4
 8014b20:	b003      	add	sp, #12
 8014b22:	bd30      	pop	{r4, r5, pc}

08014b24 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014b24:	f00f b954 	b.w	8023dd0 <USBD_LL_Start>

08014b28 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8014b28:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014b2c:	b10b      	cbz	r3, 8014b32 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4718      	bx	r3
  }

  return ret;
}
 8014b32:	2003      	movs	r0, #3
 8014b34:	4770      	bx	lr
 8014b36:	bf00      	nop

08014b38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014b38:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8014b3a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014b3e:	b10b      	cbz	r3, 8014b44 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	4798      	blx	r3
  }

  return USBD_OK;
}
 8014b44:	2000      	movs	r0, #0
 8014b46:	bd08      	pop	{r3, pc}

08014b48 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014b48:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b4a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8014b4e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014b50:	4628      	mov	r0, r5
 8014b52:	f000 fb93 	bl	801527c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014b56:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8014b58:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 8014b5c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8014b60:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8014b64:	f001 031f 	and.w	r3, r1, #31
 8014b68:	4293      	cmp	r3, r2
 8014b6a:	d009      	beq.n	8014b80 <USBD_LL_SetupStage+0x38>
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d013      	beq.n	8014b98 <USBD_LL_SetupStage+0x50>
 8014b70:	b163      	cbz	r3, 8014b8c <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014b72:	4620      	mov	r0, r4
 8014b74:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8014b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014b7c:	f00f b956 	b.w	8023e2c <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014b80:	4629      	mov	r1, r5
 8014b82:	4620      	mov	r0, r4
}
 8014b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014b88:	f000 ba9e 	b.w	80150c8 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014b8c:	4629      	mov	r1, r5
 8014b8e:	4620      	mov	r0, r4
}
 8014b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014b94:	f000 b8fa 	b.w	8014d8c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014b98:	4629      	mov	r1, r5
 8014b9a:	4620      	mov	r0, r4
}
 8014b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014ba0:	f000 baca 	b.w	8015138 <USBD_StdEPReq>

08014ba4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014ba4:	b570      	push	{r4, r5, r6, lr}
 8014ba6:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014ba8:	b939      	cbnz	r1, 8014bba <USBD_LL_DataOutStage+0x16>
 8014baa:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014bac:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	2a03      	cmp	r2, #3
 8014bb4:	d00e      	beq.n	8014bd4 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014bb6:	2000      	movs	r0, #0
}
 8014bb8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8014bba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	b133      	cbz	r3, 8014bd0 <USBD_LL_DataOutStage+0x2c>
 8014bc2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014bc6:	2a03      	cmp	r2, #3
 8014bc8:	d102      	bne.n	8014bd0 <USBD_LL_DataOutStage+0x2c>
}
 8014bca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014bce:	4718      	bx	r3
    return USBD_FAIL;
 8014bd0:	2003      	movs	r0, #3
}
 8014bd2:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014bd4:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 8014bd8:	4291      	cmp	r1, r2
 8014bda:	d80d      	bhi.n	8014bf8 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014bdc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014be0:	691b      	ldr	r3, [r3, #16]
 8014be2:	b123      	cbz	r3, 8014bee <USBD_LL_DataOutStage+0x4a>
 8014be4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014be8:	2a03      	cmp	r2, #3
 8014bea:	d100      	bne.n	8014bee <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 8014bec:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8014bee:	4628      	mov	r0, r5
 8014bf0:	f000 fbb6 	bl	8015360 <USBD_CtlSendStatus>
  return USBD_OK;
 8014bf4:	2000      	movs	r0, #0
 8014bf6:	e7df      	b.n	8014bb8 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8014bf8:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014bfa:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 8014bfc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014c00:	bf28      	it	cs
 8014c02:	460a      	movcs	r2, r1
 8014c04:	4619      	mov	r1, r3
 8014c06:	f000 fba1 	bl	801534c <USBD_CtlContinueRx>
  return USBD_OK;
 8014c0a:	4620      	mov	r0, r4
}
 8014c0c:	bd70      	pop	{r4, r5, r6, pc}
 8014c0e:	bf00      	nop

08014c10 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014c10:	b570      	push	{r4, r5, r6, lr}
 8014c12:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014c14:	b949      	cbnz	r1, 8014c2a <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014c16:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8014c1a:	2b02      	cmp	r3, #2
 8014c1c:	d012      	beq.n	8014c44 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014c1e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	d027      	beq.n	8014c76 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014c26:	2000      	movs	r0, #0
}
 8014c28:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8014c2a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014c2e:	695b      	ldr	r3, [r3, #20]
 8014c30:	b133      	cbz	r3, 8014c40 <USBD_LL_DataInStage+0x30>
 8014c32:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014c36:	2a03      	cmp	r2, #3
 8014c38:	d102      	bne.n	8014c40 <USBD_LL_DataInStage+0x30>
}
 8014c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014c3e:	4718      	bx	r3
    return USBD_FAIL;
 8014c40:	2003      	movs	r0, #3
}
 8014c42:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014c44:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8014c48:	460d      	mov	r5, r1
 8014c4a:	42b3      	cmp	r3, r6
 8014c4c:	d818      	bhi.n	8014c80 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8014c4e:	d027      	beq.n	8014ca0 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014c50:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014c54:	68db      	ldr	r3, [r3, #12]
 8014c56:	b11b      	cbz	r3, 8014c60 <USBD_LL_DataInStage+0x50>
 8014c58:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8014c5c:	2a03      	cmp	r2, #3
 8014c5e:	d01c      	beq.n	8014c9a <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c60:	2180      	movs	r1, #128	; 0x80
 8014c62:	4620      	mov	r0, r4
 8014c64:	f00f f8e2 	bl	8023e2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f000 fb85 	bl	8015378 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8014c6e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014c72:	2b01      	cmp	r3, #1
 8014c74:	d1d7      	bne.n	8014c26 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8014c76:	2300      	movs	r3, #0
  return USBD_OK;
 8014c78:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 8014c7a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 8014c7e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8014c80:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014c82:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8014c84:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014c86:	461a      	mov	r2, r3
 8014c88:	f000 fb48 	bl	801531c <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014c8c:	462b      	mov	r3, r5
 8014c8e:	462a      	mov	r2, r5
 8014c90:	4629      	mov	r1, r5
 8014c92:	4620      	mov	r0, r4
 8014c94:	f00f f916 	bl	8023ec4 <USBD_LL_PrepareReceive>
 8014c98:	e7c1      	b.n	8014c1e <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8014c9a:	4620      	mov	r0, r4
 8014c9c:	4798      	blx	r3
 8014c9e:	e7df      	b.n	8014c60 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8014ca0:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8014ca2:	4293      	cmp	r3, r2
 8014ca4:	d8d4      	bhi.n	8014c50 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8014ca6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d2d0      	bcs.n	8014c50 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014cae:	460a      	mov	r2, r1
 8014cb0:	f000 fb34 	bl	801531c <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cb4:	462b      	mov	r3, r5
 8014cb6:	462a      	mov	r2, r5
 8014cb8:	4629      	mov	r1, r5
 8014cba:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 8014cbc:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014cc0:	f00f f900 	bl	8023ec4 <USBD_LL_PrepareReceive>
 8014cc4:	e7ab      	b.n	8014c1e <USBD_LL_DataInStage+0xe>
 8014cc6:	bf00      	nop

08014cc8 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8014cc8:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014cca:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8014ccc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8014cd0:	b570      	push	{r4, r5, r6, lr}
 8014cd2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014cd4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014cd8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8014cdc:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8014cde:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8014ce2:	b11b      	cbz	r3, 8014cec <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014ce4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014cec:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cee:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014cf0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cf2:	4620      	mov	r0, r4
 8014cf4:	462b      	mov	r3, r5
 8014cf6:	4611      	mov	r1, r2
 8014cf8:	f00f f878 	bl	8023dec <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cfc:	462b      	mov	r3, r5
 8014cfe:	2200      	movs	r2, #0
 8014d00:	2180      	movs	r1, #128	; 0x80
 8014d02:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014d04:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014d08:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014d0c:	f00f f86e 	bl	8023dec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8014d10:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014d12:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014d14:	6225      	str	r5, [r4, #32]
}
 8014d16:	bd70      	pop	{r4, r5, r6, pc}

08014d18 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014d18:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8014d1a:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8014d1c:	7419      	strb	r1, [r3, #16]
}
 8014d1e:	4770      	bx	lr

08014d20 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014d20:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d22:	2104      	movs	r1, #4

  return USBD_OK;
}
 8014d24:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8014d26:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d2a:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8014d2e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8014d32:	4770      	bx	lr

08014d34 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014d34:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014d38:	2b04      	cmp	r3, #4
 8014d3a:	d103      	bne.n	8014d44 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014d3c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8014d40:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8014d44:	2000      	movs	r0, #0
 8014d46:	4770      	bx	lr

08014d48 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d48:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014d4c:	2a03      	cmp	r2, #3
 8014d4e:	d001      	beq.n	8014d54 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8014d50:	2000      	movs	r0, #0
 8014d52:	4770      	bx	lr
{
 8014d54:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8014d56:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014d5a:	69db      	ldr	r3, [r3, #28]
 8014d5c:	b103      	cbz	r3, 8014d60 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8014d5e:	4798      	blx	r3
}
 8014d60:	2000      	movs	r0, #0
 8014d62:	bd08      	pop	{r3, pc}

08014d64 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8014d64:	2000      	movs	r0, #0
 8014d66:	4770      	bx	lr

08014d68 <USBD_LL_IsoOUTIncomplete>:
 8014d68:	2000      	movs	r0, #0
 8014d6a:	4770      	bx	lr

08014d6c <USBD_LL_DevConnected>:
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	4770      	bx	lr

08014d70 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014d70:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8014d72:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014d76:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8014d7a:	b12a      	cbz	r2, 8014d88 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014d7c:	6852      	ldr	r2, [r2, #4]
 8014d7e:	7901      	ldrb	r1, [r0, #4]
{
 8014d80:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014d82:	4790      	blx	r2
  }

  return USBD_OK;
}
 8014d84:	2000      	movs	r0, #0
 8014d86:	bd08      	pop	{r3, pc}
 8014d88:	2000      	movs	r0, #0
 8014d8a:	4770      	bx	lr

08014d8c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d8c:	b570      	push	{r4, r5, r6, lr}
 8014d8e:	780c      	ldrb	r4, [r1, #0]
 8014d90:	b082      	sub	sp, #8
 8014d92:	460e      	mov	r6, r1
 8014d94:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d96:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8014d9a:	2c20      	cmp	r4, #32
 8014d9c:	d00e      	beq.n	8014dbc <USBD_StdDevReq+0x30>
 8014d9e:	2c40      	cmp	r4, #64	; 0x40
 8014da0:	d00c      	beq.n	8014dbc <USBD_StdDevReq+0x30>
 8014da2:	b1a4      	cbz	r4, 8014dce <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014da4:	2180      	movs	r1, #128	; 0x80
 8014da6:	4628      	mov	r0, r5
 8014da8:	f00f f840 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014dac:	2100      	movs	r1, #0
 8014dae:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014db0:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014db2:	f00f f83b 	bl	8023e2c <USBD_LL_StallEP>
}
 8014db6:	4620      	mov	r0, r4
 8014db8:	b002      	add	sp, #8
 8014dba:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014dbc:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8014dc0:	4631      	mov	r1, r6
 8014dc2:	4628      	mov	r0, r5
 8014dc4:	689b      	ldr	r3, [r3, #8]
}
 8014dc6:	b002      	add	sp, #8
 8014dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014dcc:	4718      	bx	r3
    switch (req->bRequest)
 8014dce:	784b      	ldrb	r3, [r1, #1]
 8014dd0:	2b09      	cmp	r3, #9
 8014dd2:	d8e7      	bhi.n	8014da4 <USBD_StdDevReq+0x18>
 8014dd4:	a201      	add	r2, pc, #4	; (adr r2, 8014ddc <USBD_StdDevReq+0x50>)
 8014dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dda:	bf00      	nop
 8014ddc:	08014e3b 	.word	0x08014e3b
 8014de0:	08014e69 	.word	0x08014e69
 8014de4:	08014da5 	.word	0x08014da5
 8014de8:	08014e87 	.word	0x08014e87
 8014dec:	08014da5 	.word	0x08014da5
 8014df0:	08014e8f 	.word	0x08014e8f
 8014df4:	08014ec7 	.word	0x08014ec7
 8014df8:	08014da5 	.word	0x08014da5
 8014dfc:	08014eeb 	.word	0x08014eeb
 8014e00:	08014e05 	.word	0x08014e05
  cfgidx = (uint8_t)(req->wValue);
 8014e04:	7889      	ldrb	r1, [r1, #2]
 8014e06:	4eaa      	ldr	r6, [pc, #680]	; (80150b0 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e08:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8014e0a:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014e0c:	f200 8146 	bhi.w	801509c <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 8014e10:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e14:	2b02      	cmp	r3, #2
 8014e16:	f000 8130 	beq.w	801507a <USBD_StdDevReq+0x2ee>
 8014e1a:	2b03      	cmp	r3, #3
 8014e1c:	f000 810c 	beq.w	8015038 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e20:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8014e22:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e24:	f00f f802 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014e28:	2100      	movs	r1, #0
 8014e2a:	4628      	mov	r0, r5
 8014e2c:	f00e fffe 	bl	8023e2c <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014e30:	7831      	ldrb	r1, [r6, #0]
 8014e32:	4628      	mov	r0, r5
 8014e34:	f7ff fe80 	bl	8014b38 <USBD_ClrClassConfig>
    break;
 8014e38:	e7bd      	b.n	8014db6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014e3a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014e3e:	3a01      	subs	r2, #1
 8014e40:	2a02      	cmp	r2, #2
 8014e42:	d868      	bhi.n	8014f16 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8014e44:	88ca      	ldrh	r2, [r1, #6]
 8014e46:	2a02      	cmp	r2, #2
 8014e48:	d165      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e4a:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8014e4c:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014e50:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8014e52:	b10a      	cbz	r2, 8014e58 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014e54:	2203      	movs	r2, #3
 8014e56:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e58:	2202      	movs	r2, #2
 8014e5a:	f105 010c 	add.w	r1, r5, #12
 8014e5e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014e60:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014e62:	f000 fa4d 	bl	8015300 <USBD_CtlSendData>
    break;
 8014e66:	e7a6      	b.n	8014db6 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014e68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	2b02      	cmp	r3, #2
 8014e70:	d851      	bhi.n	8014f16 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e72:	884b      	ldrh	r3, [r1, #2]
 8014e74:	2b01      	cmp	r3, #1
 8014e76:	d19e      	bne.n	8014db6 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8014e78:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 8014e7a:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 8014e7c:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014e80:	f000 fa6e 	bl	8015360 <USBD_CtlSendStatus>
 8014e84:	e797      	b.n	8014db6 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e86:	884b      	ldrh	r3, [r1, #2]
 8014e88:	2b01      	cmp	r3, #1
 8014e8a:	d194      	bne.n	8014db6 <USBD_StdDevReq+0x2a>
 8014e8c:	e7f5      	b.n	8014e7a <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014e8e:	888b      	ldrh	r3, [r1, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d140      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
 8014e94:	88cb      	ldrh	r3, [r1, #6]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d13d      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
 8014e9a:	884e      	ldrh	r6, [r1, #2]
 8014e9c:	2e7f      	cmp	r6, #127	; 0x7f
 8014e9e:	d83a      	bhi.n	8014f16 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ea0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014ea4:	2b03      	cmp	r3, #3
 8014ea6:	d036      	beq.n	8014f16 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ea8:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8014eaa:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014eae:	f00e ffed 	bl	8023e8c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	f000 fa54 	bl	8015360 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8014eb8:	2e00      	cmp	r6, #0
 8014eba:	f040 80da 	bne.w	8015072 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014ebe:	2301      	movs	r3, #1
 8014ec0:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014ec4:	e777      	b.n	8014db6 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8014ec6:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8014ec8:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8014eca:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8014ece:	0a13      	lsrs	r3, r2, #8
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	2b0e      	cmp	r3, #14
 8014ed4:	d81f      	bhi.n	8014f16 <USBD_StdDevReq+0x18a>
 8014ed6:	e8df f003 	tbb	[pc, r3]
 8014eda:	6b77      	.short	0x6b77
 8014edc:	4f1e1e59 	.word	0x4f1e1e59
 8014ee0:	1e1e1e43 	.word	0x1e1e1e43
 8014ee4:	1e1e1e1e 	.word	0x1e1e1e1e
 8014ee8:	29          	.byte	0x29
 8014ee9:	00          	.byte	0x00
  if (req->wLength != 1U)
 8014eea:	88ca      	ldrh	r2, [r1, #6]
 8014eec:	2a01      	cmp	r2, #1
 8014eee:	d112      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 8014ef0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014ef4:	2b02      	cmp	r3, #2
 8014ef6:	f200 8098 	bhi.w	801502a <USBD_StdDevReq+0x29e>
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f43f af52 	beq.w	8014da4 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 8014f00:	4601      	mov	r1, r0
 8014f02:	2300      	movs	r3, #0
 8014f04:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014f08:	f000 f9fa 	bl	8015300 <USBD_CtlSendData>
      break;
 8014f0c:	e753      	b.n	8014db6 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f0e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014f12:	699b      	ldr	r3, [r3, #24]
 8014f14:	b97b      	cbnz	r3, 8014f36 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f16:	2180      	movs	r1, #128	; 0x80
 8014f18:	4628      	mov	r0, r5
 8014f1a:	f00e ff87 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f1e:	2100      	movs	r1, #0
 8014f20:	4628      	mov	r0, r5
 8014f22:	f00e ff83 	bl	8023e2c <USBD_LL_StallEP>
}
 8014f26:	4620      	mov	r0, r4
 8014f28:	b002      	add	sp, #8
 8014f2a:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014f2c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014f30:	69db      	ldr	r3, [r3, #28]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d0ef      	beq.n	8014f16 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f36:	f10d 0106 	add.w	r1, sp, #6
 8014f3a:	7c28      	ldrb	r0, [r5, #16]
 8014f3c:	4798      	blx	r3
    if (req->wLength != 0U)
 8014f3e:	88f2      	ldrh	r2, [r6, #6]
 8014f40:	2a00      	cmp	r2, #0
 8014f42:	d06e      	beq.n	8015022 <USBD_StdDevReq+0x296>
      if (len != 0U)
 8014f44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d0e4      	beq.n	8014f16 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8014f4c:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014f4e:	4601      	mov	r1, r0
 8014f50:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8014f52:	bf28      	it	cs
 8014f54:	461a      	movcs	r2, r3
 8014f56:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014f5a:	f000 f9d1 	bl	8015300 <USBD_CtlSendData>
 8014f5e:	e72a      	b.n	8014db6 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f60:	7c03      	ldrb	r3, [r0, #16]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d1d7      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014f66:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014f6a:	f10d 0006 	add.w	r0, sp, #6
 8014f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f70:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014f72:	2307      	movs	r3, #7
 8014f74:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014f76:	e7e2      	b.n	8014f3e <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f78:	7c03      	ldrb	r3, [r0, #16]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d1cb      	bne.n	8014f16 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014f7e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014f82:	f10d 0006 	add.w	r0, sp, #6
 8014f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f88:	4798      	blx	r3
  if (err != 0U)
 8014f8a:	e7d8      	b.n	8014f3e <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8014f8c:	b2d2      	uxtb	r2, r2
 8014f8e:	2a05      	cmp	r2, #5
 8014f90:	d8c1      	bhi.n	8014f16 <USBD_StdDevReq+0x18a>
 8014f92:	a301      	add	r3, pc, #4	; (adr r3, 8014f98 <USBD_StdDevReq+0x20c>)
 8014f94:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014f98:	08015009 	.word	0x08015009
 8014f9c:	08014ffd 	.word	0x08014ffd
 8014fa0:	08014ff1 	.word	0x08014ff1
 8014fa4:	08014fe5 	.word	0x08014fe5
 8014fa8:	08014fd9 	.word	0x08014fd9
 8014fac:	08014f0f 	.word	0x08014f0f
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fb0:	7c03      	ldrb	r3, [r0, #16]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d17e      	bne.n	80150b4 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014fb6:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014fba:	f10d 0006 	add.w	r0, sp, #6
 8014fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fc0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014fc2:	2302      	movs	r3, #2
 8014fc4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014fc6:	e7ba      	b.n	8014f3e <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014fc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014fcc:	f10d 0106 	add.w	r1, sp, #6
 8014fd0:	7c00      	ldrb	r0, [r0, #16]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4798      	blx	r3
  if (err != 0U)
 8014fd6:	e7b2      	b.n	8014f3e <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014fd8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014fdc:	695b      	ldr	r3, [r3, #20]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1a9      	bne.n	8014f36 <USBD_StdDevReq+0x1aa>
 8014fe2:	e798      	b.n	8014f16 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014fe4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014fe8:	691b      	ldr	r3, [r3, #16]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d1a3      	bne.n	8014f36 <USBD_StdDevReq+0x1aa>
 8014fee:	e792      	b.n	8014f16 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014ff0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ff4:	68db      	ldr	r3, [r3, #12]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d19d      	bne.n	8014f36 <USBD_StdDevReq+0x1aa>
 8014ffa:	e78c      	b.n	8014f16 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014ffc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8015000:	689b      	ldr	r3, [r3, #8]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d197      	bne.n	8014f36 <USBD_StdDevReq+0x1aa>
 8015006:	e786      	b.n	8014f16 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015008:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d191      	bne.n	8014f36 <USBD_StdDevReq+0x1aa>
 8015012:	e780      	b.n	8014f16 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015014:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8015016:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015018:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801501a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801501e:	f7ff fd8b 	bl	8014b38 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015022:	4628      	mov	r0, r5
 8015024:	f000 f99c 	bl	8015360 <USBD_CtlSendStatus>
 8015028:	e6c5      	b.n	8014db6 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 801502a:	2b03      	cmp	r3, #3
 801502c:	f47f aeba 	bne.w	8014da4 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015030:	1d01      	adds	r1, r0, #4
 8015032:	f000 f965 	bl	8015300 <USBD_CtlSendData>
      break;
 8015036:	e6be      	b.n	8014db6 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8015038:	2900      	cmp	r1, #0
 801503a:	d0eb      	beq.n	8015014 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 801503c:	6841      	ldr	r1, [r0, #4]
 801503e:	2901      	cmp	r1, #1
 8015040:	d0ef      	beq.n	8015022 <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015042:	b2c9      	uxtb	r1, r1
 8015044:	f7ff fd78 	bl	8014b38 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015048:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801504a:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 801504c:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801504e:	f7ff fd6b 	bl	8014b28 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8015052:	4606      	mov	r6, r0
 8015054:	2800      	cmp	r0, #0
 8015056:	d0e4      	beq.n	8015022 <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015058:	2180      	movs	r1, #128	; 0x80
 801505a:	4628      	mov	r0, r5
 801505c:	f00e fee6 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015060:	2100      	movs	r1, #0
 8015062:	4628      	mov	r0, r5
 8015064:	4634      	mov	r4, r6
 8015066:	f00e fee1 	bl	8023e2c <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801506a:	7929      	ldrb	r1, [r5, #4]
 801506c:	4628      	mov	r0, r5
 801506e:	f7ff fd63 	bl	8014b38 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015072:	2302      	movs	r3, #2
 8015074:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8015078:	e69d      	b.n	8014db6 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 801507a:	2900      	cmp	r1, #0
 801507c:	d0d1      	beq.n	8015022 <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 801507e:	2101      	movs	r1, #1
 8015080:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015082:	f7ff fd51 	bl	8014b28 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8015086:	4604      	mov	r4, r0
 8015088:	2800      	cmp	r0, #0
 801508a:	f47f af44 	bne.w	8014f16 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 801508e:	4628      	mov	r0, r5
 8015090:	f000 f966 	bl	8015360 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015094:	2303      	movs	r3, #3
 8015096:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 801509a:	e68c      	b.n	8014db6 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801509c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801509e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150a0:	f00e fec4 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80150a4:	2100      	movs	r1, #0
 80150a6:	4628      	mov	r0, r5
 80150a8:	f00e fec0 	bl	8023e2c <USBD_LL_StallEP>
}
 80150ac:	e683      	b.n	8014db6 <USBD_StdDevReq+0x2a>
 80150ae:	bf00      	nop
 80150b0:	200062f8 	.word	0x200062f8
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80150b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80150b8:	f10d 0006 	add.w	r0, sp, #6
 80150bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150be:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80150c0:	2302      	movs	r3, #2
 80150c2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80150c4:	e73b      	b.n	8014f3e <USBD_StdDevReq+0x1b2>
 80150c6:	bf00      	nop

080150c8 <USBD_StdItfReq>:
{
 80150c8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150ca:	780b      	ldrb	r3, [r1, #0]
{
 80150cc:	460d      	mov	r5, r1
 80150ce:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80150d4:	2a40      	cmp	r2, #64	; 0x40
 80150d6:	d00b      	beq.n	80150f0 <USBD_StdItfReq+0x28>
 80150d8:	065b      	lsls	r3, r3, #25
 80150da:	d509      	bpl.n	80150f0 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80150dc:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80150de:	2180      	movs	r1, #128	; 0x80
 80150e0:	f00e fea4 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80150e4:	4620      	mov	r0, r4
 80150e6:	4629      	mov	r1, r5
 80150e8:	f00e fea0 	bl	8023e2c <USBD_LL_StallEP>
}
 80150ec:	4628      	mov	r0, r5
 80150ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80150f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80150f4:	3b01      	subs	r3, #1
 80150f6:	2b02      	cmp	r3, #2
 80150f8:	d812      	bhi.n	8015120 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80150fa:	792b      	ldrb	r3, [r5, #4]
 80150fc:	2b01      	cmp	r3, #1
 80150fe:	d80f      	bhi.n	8015120 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015100:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015104:	4629      	mov	r1, r5
 8015106:	4620      	mov	r0, r4
 8015108:	689b      	ldr	r3, [r3, #8]
 801510a:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 801510c:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801510e:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8015110:	2b00      	cmp	r3, #0
 8015112:	d1eb      	bne.n	80150ec <USBD_StdItfReq+0x24>
 8015114:	2800      	cmp	r0, #0
 8015116:	d1e9      	bne.n	80150ec <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8015118:	4620      	mov	r0, r4
 801511a:	f000 f921 	bl	8015360 <USBD_CtlSendStatus>
 801511e:	e7e5      	b.n	80150ec <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015120:	2180      	movs	r1, #128	; 0x80
 8015122:	4620      	mov	r0, r4
 8015124:	f00e fe82 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015128:	2100      	movs	r1, #0
 801512a:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 801512c:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 801512e:	f00e fe7d 	bl	8023e2c <USBD_LL_StallEP>
}
 8015132:	4628      	mov	r0, r5
 8015134:	bd38      	pop	{r3, r4, r5, pc}
 8015136:	bf00      	nop

08015138 <USBD_StdEPReq>:
{
 8015138:	b570      	push	{r4, r5, r6, lr}
 801513a:	780b      	ldrb	r3, [r1, #0]
 801513c:	460d      	mov	r5, r1
 801513e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015140:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015144:	2b20      	cmp	r3, #32
 8015146:	d00c      	beq.n	8015162 <USBD_StdEPReq+0x2a>
 8015148:	2b40      	cmp	r3, #64	; 0x40
 801514a:	d00a      	beq.n	8015162 <USBD_StdEPReq+0x2a>
 801514c:	b18b      	cbz	r3, 8015172 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801514e:	2180      	movs	r1, #128	; 0x80
 8015150:	4620      	mov	r0, r4
 8015152:	f00e fe6b 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015156:	2100      	movs	r1, #0
 8015158:	4620      	mov	r0, r4
 801515a:	f00e fe67 	bl	8023e2c <USBD_LL_StallEP>
}
 801515e:	2000      	movs	r0, #0
 8015160:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015162:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8015166:	4629      	mov	r1, r5
 8015168:	4620      	mov	r0, r4
 801516a:	689b      	ldr	r3, [r3, #8]
}
 801516c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015170:	4718      	bx	r3
    switch (req->bRequest)
 8015172:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8015174:	888a      	ldrh	r2, [r1, #4]
 8015176:	2b01      	cmp	r3, #1
 8015178:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801517a:	d036      	beq.n	80151ea <USBD_StdEPReq+0xb2>
 801517c:	2b03      	cmp	r3, #3
 801517e:	d023      	beq.n	80151c8 <USBD_StdEPReq+0x90>
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1e4      	bne.n	801514e <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8015184:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8015188:	2b02      	cmp	r3, #2
 801518a:	d04c      	beq.n	8015226 <USBD_StdEPReq+0xee>
 801518c:	2b03      	cmp	r3, #3
 801518e:	d1de      	bne.n	801514e <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015190:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8015194:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015196:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801519a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801519e:	d453      	bmi.n	8015248 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80151a0:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d0d2      	beq.n	801514e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80151a8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 80151ac:	2514      	movs	r5, #20
 80151ae:	fb05 0503 	mla	r5, r5, r3, r0
 80151b2:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d152      	bne.n	8015260 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 80151ba:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80151bc:	2202      	movs	r2, #2
 80151be:	4629      	mov	r1, r5
 80151c0:	4620      	mov	r0, r4
 80151c2:	f000 f89d 	bl	8015300 <USBD_CtlSendData>
          break;
 80151c6:	e7ca      	b.n	801515e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80151c8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80151cc:	2b02      	cmp	r3, #2
 80151ce:	d021      	beq.n	8015214 <USBD_StdEPReq+0xdc>
 80151d0:	2b03      	cmp	r3, #3
 80151d2:	d1bc      	bne.n	801514e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80151d4:	886b      	ldrh	r3, [r5, #2]
 80151d6:	b923      	cbnz	r3, 80151e2 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80151d8:	064a      	lsls	r2, r1, #25
 80151da:	d002      	beq.n	80151e2 <USBD_StdEPReq+0xaa>
 80151dc:	88eb      	ldrh	r3, [r5, #6]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d049      	beq.n	8015276 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 80151e2:	4620      	mov	r0, r4
 80151e4:	f000 f8bc 	bl	8015360 <USBD_CtlSendStatus>
        break;
 80151e8:	e7b9      	b.n	801515e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80151ea:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80151ee:	2b02      	cmp	r3, #2
 80151f0:	d010      	beq.n	8015214 <USBD_StdEPReq+0xdc>
 80151f2:	2b03      	cmp	r3, #3
 80151f4:	d1ab      	bne.n	801514e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80151f6:	886b      	ldrh	r3, [r5, #2]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d1b0      	bne.n	801515e <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80151fc:	064e      	lsls	r6, r1, #25
 80151fe:	d135      	bne.n	801526c <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8015200:	4620      	mov	r0, r4
 8015202:	f000 f8ad 	bl	8015360 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015206:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 801520a:	4629      	mov	r1, r5
 801520c:	4620      	mov	r0, r4
 801520e:	689b      	ldr	r3, [r3, #8]
 8015210:	4798      	blx	r3
 8015212:	e7a4      	b.n	801515e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015214:	064b      	lsls	r3, r1, #25
 8015216:	d09a      	beq.n	801514e <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015218:	f00e fe08 	bl	8023e2c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801521c:	2180      	movs	r1, #128	; 0x80
 801521e:	4620      	mov	r0, r4
 8015220:	f00e fe04 	bl	8023e2c <USBD_LL_StallEP>
 8015224:	e79b      	b.n	801515e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015226:	0648      	lsls	r0, r1, #25
 8015228:	d191      	bne.n	801514e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801522a:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 801522c:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015230:	f04f 0202 	mov.w	r2, #2
 8015234:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015236:	bf4c      	ite	mi
 8015238:	f104 0114 	addmi.w	r1, r4, #20
 801523c:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8015240:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015242:	f000 f85d 	bl	8015300 <USBD_CtlSendData>
        break;
 8015246:	e78a      	b.n	801515e <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015248:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801524a:	2b00      	cmp	r3, #0
 801524c:	f43f af7f 	beq.w	801514e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015250:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8015254:	1c5d      	adds	r5, r3, #1
 8015256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801525a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801525e:	e7aa      	b.n	80151b6 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015260:	4620      	mov	r0, r4
 8015262:	f00e fdff 	bl	8023e64 <USBD_LL_IsStallEP>
 8015266:	b120      	cbz	r0, 8015272 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8015268:	2301      	movs	r3, #1
 801526a:	e7a6      	b.n	80151ba <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801526c:	f00e fdec 	bl	8023e48 <USBD_LL_ClearStallEP>
 8015270:	e7c6      	b.n	8015200 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8015272:	6028      	str	r0, [r5, #0]
 8015274:	e7a2      	b.n	80151bc <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8015276:	f00e fdd9 	bl	8023e2c <USBD_LL_StallEP>
 801527a:	e7b2      	b.n	80151e2 <USBD_StdEPReq+0xaa>

0801527c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 801527c:	780b      	ldrb	r3, [r1, #0]
 801527e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8015280:	784b      	ldrb	r3, [r1, #1]
 8015282:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8015284:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8015286:	8043      	strh	r3, [r0, #2]
 8015288:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 801528a:	8083      	strh	r3, [r0, #4]
 801528c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 801528e:	80c3      	strh	r3, [r0, #6]
}
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop

08015294 <USBD_CtlError>:
{
 8015294:	b510      	push	{r4, lr}
 8015296:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015298:	2180      	movs	r1, #128	; 0x80
 801529a:	f00e fdc7 	bl	8023e2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801529e:	2100      	movs	r1, #0
 80152a0:	4620      	mov	r0, r4
}
 80152a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80152a6:	f00e bdc1 	b.w	8023e2c <USBD_LL_StallEP>
 80152aa:	bf00      	nop

080152ac <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80152ac:	b318      	cbz	r0, 80152f6 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80152ae:	7803      	ldrb	r3, [r0, #0]
{
 80152b0:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 80152b2:	b30b      	cbz	r3, 80152f8 <USBD_GetString+0x4c>
 80152b4:	4604      	mov	r4, r0
 80152b6:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 80152ba:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 80152be:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	2d00      	cmp	r5, #0
 80152c6:	d1f8      	bne.n	80152ba <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80152c8:	3301      	adds	r3, #1
 80152ca:	005b      	lsls	r3, r3, #1
 80152cc:	b2dc      	uxtb	r4, r3
 80152ce:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152d0:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 80152d2:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80152d4:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80152d6:	7804      	ldrb	r4, [r0, #0]
 80152d8:	b15c      	cbz	r4, 80152f2 <USBD_GetString+0x46>
  idx++;
 80152da:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80152dc:	2500      	movs	r5, #0
    idx++;
 80152de:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80152e0:	54cc      	strb	r4, [r1, r3]
    idx++;
 80152e2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80152e4:	b2d2      	uxtb	r2, r2
    idx++;
 80152e6:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80152e8:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80152ea:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80152ee:	2c00      	cmp	r4, #0
 80152f0:	d1f5      	bne.n	80152de <USBD_GetString+0x32>
}
 80152f2:	bc30      	pop	{r4, r5}
 80152f4:	4770      	bx	lr
 80152f6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80152f8:	2402      	movs	r4, #2
 80152fa:	4623      	mov	r3, r4
 80152fc:	e7e7      	b.n	80152ce <USBD_GetString+0x22>
 80152fe:	bf00      	nop

08015300 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015300:	b510      	push	{r4, lr}
 8015302:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015304:	2402      	movs	r4, #2
{
 8015306:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015308:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801530a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 801530e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015312:	f00e fdc9 	bl	8023ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8015316:	2000      	movs	r0, #0
 8015318:	bd10      	pop	{r4, pc}
 801531a:	bf00      	nop

0801531c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801531c:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801531e:	2100      	movs	r1, #0
{
 8015320:	b508      	push	{r3, lr}
 8015322:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015324:	4662      	mov	r2, ip
 8015326:	f00e fdbf 	bl	8023ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 801532a:	2000      	movs	r0, #0
 801532c:	bd08      	pop	{r3, pc}
 801532e:	bf00      	nop

08015330 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015330:	b510      	push	{r4, lr}
 8015332:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015334:	2403      	movs	r4, #3
{
 8015336:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015338:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801533a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 801533e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015342:	f00e fdbf 	bl	8023ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8015346:	2000      	movs	r0, #0
 8015348:	bd10      	pop	{r4, pc}
 801534a:	bf00      	nop

0801534c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801534c:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801534e:	2100      	movs	r1, #0
{
 8015350:	b508      	push	{r3, lr}
 8015352:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015354:	4662      	mov	r2, ip
 8015356:	f00e fdb5 	bl	8023ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801535a:	2000      	movs	r0, #0
 801535c:	bd08      	pop	{r3, pc}
 801535e:	bf00      	nop

08015360 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015360:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015362:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015364:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015366:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801536a:	461a      	mov	r2, r3
 801536c:	4619      	mov	r1, r3
 801536e:	f00e fd9b 	bl	8023ea8 <USBD_LL_Transmit>

  return USBD_OK;
}
 8015372:	2000      	movs	r0, #0
 8015374:	bd08      	pop	{r3, pc}
 8015376:	bf00      	nop

08015378 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015378:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801537a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801537c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801537e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015382:	461a      	mov	r2, r3
 8015384:	4619      	mov	r1, r3
 8015386:	f00e fd9d 	bl	8023ec4 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801538a:	2000      	movs	r0, #0
 801538c:	bd08      	pop	{r3, pc}
 801538e:	bf00      	nop

08015390 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8015390:	4b10      	ldr	r3, [pc, #64]	; (80153d4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015392:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8015394:	7a5c      	ldrb	r4, [r3, #9]
 8015396:	b9cc      	cbnz	r4, 80153cc <FATFS_LinkDriver+0x3c>
 8015398:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 801539a:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 801539e:	7a5c      	ldrb	r4, [r3, #9]
 80153a0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80153a2:	7a5c      	ldrb	r4, [r3, #9]
 80153a4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80153a8:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80153aa:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80153ac:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80153ae:	441c      	add	r4, r3
 80153b0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80153b2:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80153b4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80153b6:	b2e4      	uxtb	r4, r4
 80153b8:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80153ba:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80153bc:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80153be:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80153c0:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80153c2:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80153c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80153c8:	708b      	strb	r3, [r1, #2]
}
 80153ca:	4770      	bx	lr
  uint8_t ret = 1;
 80153cc:	2001      	movs	r0, #1
}
 80153ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153d2:	4770      	bx	lr
 80153d4:	200062fc 	.word	0x200062fc

080153d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80153d8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80153da:	f001 f9c9 	bl	8016770 <vTaskStartScheduler>
  
  return osOK;
}
 80153de:	2000      	movs	r0, #0
 80153e0:	bd08      	pop	{r3, pc}
 80153e2:	bf00      	nop

080153e4 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80153e4:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80153e8:	b10b      	cbz	r3, 80153ee <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80153ea:	f001 ba23 	b.w	8016834 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80153ee:	f001 ba1b 	b.w	8016828 <xTaskGetTickCount>
 80153f2:	bf00      	nop

080153f4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80153f4:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80153f6:	6944      	ldr	r4, [r0, #20]
{
 80153f8:	b086      	sub	sp, #24
 80153fa:	4684      	mov	ip, r0
 80153fc:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80153fe:	b1ac      	cbz	r4, 801542c <osThreadCreate+0x38>
 8015400:	6986      	ldr	r6, [r0, #24]
 8015402:	b19e      	cbz	r6, 801542c <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015404:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015408:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 801540c:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8015410:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8015414:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 8015416:	bf14      	ite	ne
 8015418:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801541c:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801541e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8015422:	9500      	str	r5, [sp, #0]
 8015424:	f001 f932 	bl	801668c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8015428:	b006      	add	sp, #24
 801542a:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801542c:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8015430:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8015434:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8015436:	bf14      	ite	ne
 8015438:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801543a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801543c:	e9dc 1000 	ldrd	r1, r0, [ip]
 8015440:	9400      	str	r4, [sp, #0]
 8015442:	ac05      	add	r4, sp, #20
 8015444:	9401      	str	r4, [sp, #4]
 8015446:	f001 f961 	bl	801670c <xTaskCreate>
 801544a:	2801      	cmp	r0, #1
  return handle;
 801544c:	bf0c      	ite	eq
 801544e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8015450:	2000      	movne	r0, #0
}
 8015452:	b006      	add	sp, #24
 8015454:	bd70      	pop	{r4, r5, r6, pc}
 8015456:	bf00      	nop

08015458 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8015458:	2801      	cmp	r0, #1
{
 801545a:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801545c:	bf38      	it	cc
 801545e:	2001      	movcc	r0, #1
 8015460:	f001 fb48 	bl	8016af4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8015464:	2000      	movs	r0, #0
 8015466:	bd08      	pop	{r3, pc}

08015468 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8015468:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 801546a:	6844      	ldr	r4, [r0, #4]
{
 801546c:	b082      	sub	sp, #8
 801546e:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8015470:	b16c      	cbz	r4, 801548e <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8015472:	f1a1 0201 	sub.w	r2, r1, #1
 8015476:	6800      	ldr	r0, [r0, #0]
 8015478:	2101      	movs	r1, #1
 801547a:	fab2 f282 	clz	r2, r2
 801547e:	0952      	lsrs	r2, r2, #5
 8015480:	e9cd 0400 	strd	r0, r4, [sp]
 8015484:	4808      	ldr	r0, [pc, #32]	; (80154a8 <osTimerCreate+0x40>)
 8015486:	f001 fee9 	bl	801725c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 801548a:	b002      	add	sp, #8
 801548c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 801548e:	f1a1 0201 	sub.w	r2, r1, #1
 8015492:	6804      	ldr	r4, [r0, #0]
 8015494:	2101      	movs	r1, #1
 8015496:	4804      	ldr	r0, [pc, #16]	; (80154a8 <osTimerCreate+0x40>)
 8015498:	fab2 f282 	clz	r2, r2
 801549c:	9400      	str	r4, [sp, #0]
 801549e:	0952      	lsrs	r2, r2, #5
 80154a0:	f001 feac 	bl	80171fc <xTimerCreate>
}
 80154a4:	b002      	add	sp, #8
 80154a6:	bd10      	pop	{r4, pc}
 80154a8:	0802a270 	.word	0x0802a270

080154ac <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80154ac:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80154ae:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 80154b0:	b109      	cbz	r1, 80154b6 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80154b2:	f000 bbc9 	b.w	8015c48 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80154b6:	f000 bbdf 	b.w	8015c78 <xQueueCreateMutex>
 80154ba:	bf00      	nop

080154bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80154bc:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80154be:	2400      	movs	r4, #0
{
 80154c0:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80154c2:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80154c4:	b310      	cbz	r0, 801550c <osMutexWait+0x50>
 80154c6:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80154ca:	b933      	cbnz	r3, 80154da <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80154cc:	f000 fd88 	bl	8015fe0 <xQueueSemaphoreTake>
 80154d0:	2801      	cmp	r0, #1
 80154d2:	d118      	bne.n	8015506 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80154d4:	2000      	movs	r0, #0
}
 80154d6:	b002      	add	sp, #8
 80154d8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80154da:	aa01      	add	r2, sp, #4
 80154dc:	4621      	mov	r1, r4
 80154de:	f000 fe63 	bl	80161a8 <xQueueReceiveFromISR>
 80154e2:	2801      	cmp	r0, #1
 80154e4:	d10f      	bne.n	8015506 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80154e6:	9b01      	ldr	r3, [sp, #4]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d0f3      	beq.n	80154d4 <osMutexWait+0x18>
 80154ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80154f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80154f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80154f8:	f3bf 8f4f 	dsb	sy
 80154fc:	f3bf 8f6f 	isb	sy
  return osOK;
 8015500:	4620      	mov	r0, r4
}
 8015502:	b002      	add	sp, #8
 8015504:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8015506:	20ff      	movs	r0, #255	; 0xff
}
 8015508:	b002      	add	sp, #8
 801550a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 801550c:	2080      	movs	r0, #128	; 0x80
}
 801550e:	b002      	add	sp, #8
 8015510:	bd10      	pop	{r4, pc}
 8015512:	bf00      	nop

08015514 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8015514:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8015516:	2400      	movs	r4, #0
{
 8015518:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 801551a:	9401      	str	r4, [sp, #4]
 801551c:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8015520:	b19b      	cbz	r3, 801554a <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8015522:	a901      	add	r1, sp, #4
 8015524:	f000 fc34 	bl	8015d90 <xQueueGiveFromISR>
 8015528:	2801      	cmp	r0, #1
 801552a:	d114      	bne.n	8015556 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801552c:	9b01      	ldr	r3, [sp, #4]
 801552e:	b1ab      	cbz	r3, 801555c <osMutexRelease+0x48>
 8015530:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015538:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801553c:	f3bf 8f4f 	dsb	sy
 8015540:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8015544:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8015546:	b002      	add	sp, #8
 8015548:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801554a:	461a      	mov	r2, r3
 801554c:	4619      	mov	r1, r3
 801554e:	f000 faad 	bl	8015aac <xQueueGenericSend>
 8015552:	2801      	cmp	r0, #1
 8015554:	d002      	beq.n	801555c <osMutexRelease+0x48>
    result = osErrorOS;
 8015556:	20ff      	movs	r0, #255	; 0xff
}
 8015558:	b002      	add	sp, #8
 801555a:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 801555c:	2000      	movs	r0, #0
}
 801555e:	b002      	add	sp, #8
 8015560:	bd10      	pop	{r4, pc}
 8015562:	bf00      	nop

08015564 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8015564:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8015566:	6844      	ldr	r4, [r0, #4]
{ 
 8015568:	b083      	sub	sp, #12
 801556a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 801556c:	b184      	cbz	r4, 8015590 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801556e:	2901      	cmp	r1, #1
 8015570:	d003      	beq.n	801557a <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8015572:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8015574:	4620      	mov	r0, r4
 8015576:	b003      	add	sp, #12
 8015578:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801557a:	2200      	movs	r2, #0
 801557c:	2503      	movs	r5, #3
 801557e:	4623      	mov	r3, r4
 8015580:	4611      	mov	r1, r2
 8015582:	9500      	str	r5, [sp, #0]
 8015584:	f000 fa08 	bl	8015998 <xQueueGenericCreateStatic>
 8015588:	4604      	mov	r4, r0
}
 801558a:	4620      	mov	r0, r4
 801558c:	b003      	add	sp, #12
 801558e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8015590:	2901      	cmp	r1, #1
 8015592:	d1ef      	bne.n	8015574 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8015594:	4621      	mov	r1, r4
 8015596:	2203      	movs	r2, #3
 8015598:	f000 fa56 	bl	8015a48 <xQueueGenericCreate>
 801559c:	4604      	mov	r4, r0
 801559e:	2800      	cmp	r0, #0
 80155a0:	d0e8      	beq.n	8015574 <osSemaphoreCreate+0x10>
 80155a2:	2300      	movs	r3, #0
 80155a4:	461a      	mov	r2, r3
 80155a6:	4619      	mov	r1, r3
 80155a8:	f000 fa80 	bl	8015aac <xQueueGenericSend>
 80155ac:	e7e2      	b.n	8015574 <osSemaphoreCreate+0x10>
 80155ae:	bf00      	nop

080155b0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80155b0:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80155b2:	2400      	movs	r4, #0
{
 80155b4:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 80155b6:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80155b8:	b310      	cbz	r0, 8015600 <osSemaphoreWait+0x50>
 80155ba:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80155be:	b933      	cbnz	r3, 80155ce <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80155c0:	f000 fd0e 	bl	8015fe0 <xQueueSemaphoreTake>
 80155c4:	2801      	cmp	r0, #1
 80155c6:	d118      	bne.n	80155fa <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 80155c8:	2000      	movs	r0, #0
}
 80155ca:	b002      	add	sp, #8
 80155cc:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80155ce:	aa01      	add	r2, sp, #4
 80155d0:	4621      	mov	r1, r4
 80155d2:	f000 fde9 	bl	80161a8 <xQueueReceiveFromISR>
 80155d6:	2801      	cmp	r0, #1
 80155d8:	d10f      	bne.n	80155fa <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80155da:	9b01      	ldr	r3, [sp, #4]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d0f3      	beq.n	80155c8 <osSemaphoreWait+0x18>
 80155e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80155e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80155e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80155ec:	f3bf 8f4f 	dsb	sy
 80155f0:	f3bf 8f6f 	isb	sy
  return osOK;
 80155f4:	4620      	mov	r0, r4
}
 80155f6:	b002      	add	sp, #8
 80155f8:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80155fa:	20ff      	movs	r0, #255	; 0xff
}
 80155fc:	b002      	add	sp, #8
 80155fe:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8015600:	2080      	movs	r0, #128	; 0x80
}
 8015602:	b002      	add	sp, #8
 8015604:	bd10      	pop	{r4, pc}
 8015606:	bf00      	nop

08015608 <osSemaphoreRelease>:
 8015608:	b510      	push	{r4, lr}
 801560a:	2400      	movs	r4, #0
 801560c:	b082      	sub	sp, #8
 801560e:	9401      	str	r4, [sp, #4]
 8015610:	f3ef 8305 	mrs	r3, IPSR
 8015614:	b19b      	cbz	r3, 801563e <osSemaphoreRelease+0x36>
 8015616:	a901      	add	r1, sp, #4
 8015618:	f000 fbba 	bl	8015d90 <xQueueGiveFromISR>
 801561c:	2801      	cmp	r0, #1
 801561e:	d114      	bne.n	801564a <osSemaphoreRelease+0x42>
 8015620:	9b01      	ldr	r3, [sp, #4]
 8015622:	b1ab      	cbz	r3, 8015650 <osSemaphoreRelease+0x48>
 8015624:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801562c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015630:	f3bf 8f4f 	dsb	sy
 8015634:	f3bf 8f6f 	isb	sy
 8015638:	4620      	mov	r0, r4
 801563a:	b002      	add	sp, #8
 801563c:	bd10      	pop	{r4, pc}
 801563e:	461a      	mov	r2, r3
 8015640:	4619      	mov	r1, r3
 8015642:	f000 fa33 	bl	8015aac <xQueueGenericSend>
 8015646:	2801      	cmp	r0, #1
 8015648:	d002      	beq.n	8015650 <osSemaphoreRelease+0x48>
 801564a:	20ff      	movs	r0, #255	; 0xff
 801564c:	b002      	add	sp, #8
 801564e:	bd10      	pop	{r4, pc}
 8015650:	2000      	movs	r0, #0
 8015652:	b002      	add	sp, #8
 8015654:	bd10      	pop	{r4, pc}
 8015656:	bf00      	nop

08015658 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015658:	6882      	ldr	r2, [r0, #8]
 801565a:	b15a      	cbz	r2, 8015674 <osMessageCreate+0x1c>
 801565c:	68c3      	ldr	r3, [r0, #12]
 801565e:	b14b      	cbz	r3, 8015674 <osMessageCreate+0x1c>
{
 8015660:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015662:	2400      	movs	r4, #0
{
 8015664:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015666:	e9d0 0100 	ldrd	r0, r1, [r0]
 801566a:	9400      	str	r4, [sp, #0]
 801566c:	f000 f994 	bl	8015998 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015670:	b002      	add	sp, #8
 8015672:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015674:	2200      	movs	r2, #0
 8015676:	e9d0 0100 	ldrd	r0, r1, [r0]
 801567a:	f000 b9e5 	b.w	8015a48 <xQueueGenericCreate>
 801567e:	bf00      	nop

08015680 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8015680:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8015682:	2400      	movs	r4, #0
{
 8015684:	b084      	sub	sp, #16
 8015686:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015688:	9403      	str	r4, [sp, #12]
 801568a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801568e:	b15b      	cbz	r3, 80156a8 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015690:	4623      	mov	r3, r4
 8015692:	aa03      	add	r2, sp, #12
 8015694:	a901      	add	r1, sp, #4
 8015696:	f000 fb09 	bl	8015cac <xQueueGenericSendFromISR>
 801569a:	2801      	cmp	r0, #1
 801569c:	d10c      	bne.n	80156b8 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801569e:	9b03      	ldr	r3, [sp, #12]
 80156a0:	b96b      	cbnz	r3, 80156be <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80156a2:	2000      	movs	r0, #0
}
 80156a4:	b004      	add	sp, #16
 80156a6:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80156a8:	2a01      	cmp	r2, #1
 80156aa:	a901      	add	r1, sp, #4
 80156ac:	bf38      	it	cc
 80156ae:	2201      	movcc	r2, #1
 80156b0:	f000 f9fc 	bl	8015aac <xQueueGenericSend>
 80156b4:	2801      	cmp	r0, #1
 80156b6:	d0f4      	beq.n	80156a2 <osMessagePut+0x22>
      return osErrorOS;
 80156b8:	20ff      	movs	r0, #255	; 0xff
}
 80156ba:	b004      	add	sp, #16
 80156bc:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80156be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80156c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156c6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80156ca:	f3bf 8f4f 	dsb	sy
 80156ce:	f3bf 8f6f 	isb	sy
  return osOK;
 80156d2:	4620      	mov	r0, r4
}
 80156d4:	b004      	add	sp, #16
 80156d6:	bd10      	pop	{r4, pc}

080156d8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80156d8:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80156da:	2600      	movs	r6, #0
{
 80156dc:	b084      	sub	sp, #16
 80156de:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 80156e0:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80156e4:	b379      	cbz	r1, 8015746 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80156e6:	460b      	mov	r3, r1
 80156e8:	9600      	str	r6, [sp, #0]
 80156ea:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80156ee:	b991      	cbnz	r1, 8015716 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80156f0:	a902      	add	r1, sp, #8
 80156f2:	4618      	mov	r0, r3
 80156f4:	4615      	mov	r5, r2
 80156f6:	f000 fbab 	bl	8015e50 <xQueueReceive>
 80156fa:	2801      	cmp	r0, #1
 80156fc:	d02d      	beq.n	801575a <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80156fe:	2d00      	cmp	r5, #0
 8015700:	bf18      	it	ne
 8015702:	2540      	movne	r5, #64	; 0x40
 8015704:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8015706:	ab04      	add	r3, sp, #16
 8015708:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801570c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015710:	4620      	mov	r0, r4
 8015712:	b004      	add	sp, #16
 8015714:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8015716:	466a      	mov	r2, sp
 8015718:	4618      	mov	r0, r3
 801571a:	a902      	add	r1, sp, #8
 801571c:	f000 fd44 	bl	80161a8 <xQueueReceiveFromISR>
      event.status = osOK;
 8015720:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 8015722:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 8015724:	bf0c      	ite	eq
 8015726:	2210      	moveq	r2, #16
 8015728:	2200      	movne	r2, #0
 801572a:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 801572c:	2b00      	cmp	r3, #0
 801572e:	d0ea      	beq.n	8015706 <osMessageGet+0x2e>
 8015730:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015738:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801573c:	f3bf 8f4f 	dsb	sy
 8015740:	f3bf 8f6f 	isb	sy
 8015744:	e7df      	b.n	8015706 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8015746:	2380      	movs	r3, #128	; 0x80
 8015748:	9301      	str	r3, [sp, #4]
    return event;
 801574a:	ab04      	add	r3, sp, #16
 801574c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015750:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015754:	4620      	mov	r0, r4
 8015756:	b004      	add	sp, #16
 8015758:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801575a:	2310      	movs	r3, #16
 801575c:	9301      	str	r3, [sp, #4]
 801575e:	e7d2      	b.n	8015706 <osMessageGet+0x2e>

08015760 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015760:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015764:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015768:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801576a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801576c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801576e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015770:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015774:	4770      	bx	lr
 8015776:	bf00      	nop

08015778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015778:	2300      	movs	r3, #0
 801577a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop

08015780 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8015780:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8015782:	6802      	ldr	r2, [r0, #0]
{
 8015784:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015786:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8015788:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 801578a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801578c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801578e:	689c      	ldr	r4, [r3, #8]
 8015790:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015792:	6099      	str	r1, [r3, #8]
}
 8015794:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8015798:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801579a:	6002      	str	r2, [r0, #0]
}
 801579c:	4770      	bx	lr
 801579e:	bf00      	nop

080157a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80157a0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80157a2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80157a4:	1c6b      	adds	r3, r5, #1
 80157a6:	d010      	beq.n	80157ca <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80157a8:	f100 0308 	add.w	r3, r0, #8
 80157ac:	461c      	mov	r4, r3
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	681a      	ldr	r2, [r3, #0]
 80157b2:	42aa      	cmp	r2, r5
 80157b4:	d9fa      	bls.n	80157ac <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80157b6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80157b8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80157ba:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80157bc:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80157be:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80157c0:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80157c2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80157c4:	6002      	str	r2, [r0, #0]
}
 80157c6:	bc30      	pop	{r4, r5}
 80157c8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80157ca:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80157cc:	6863      	ldr	r3, [r4, #4]
 80157ce:	e7f2      	b.n	80157b6 <vListInsert+0x16>

080157d0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80157d0:	6903      	ldr	r3, [r0, #16]
{
 80157d2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80157d4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157d6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80157da:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80157dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80157e0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80157e2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80157e4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80157e8:	bf08      	it	eq
 80157ea:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80157ec:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80157ee:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80157f0:	3a01      	subs	r2, #1
 80157f2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80157f4:	6818      	ldr	r0, [r3, #0]
}
 80157f6:	4770      	bx	lr

080157f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80157f8:	b570      	push	{r4, r5, r6, lr}
 80157fa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80157fc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80157fe:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015800:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015802:	b92a      	cbnz	r2, 8015810 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015804:	6805      	ldr	r5, [r0, #0]
 8015806:	b365      	cbz	r5, 8015862 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015808:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801580a:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801580c:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 801580e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8015810:	b97d      	cbnz	r5, 8015832 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015812:	6840      	ldr	r0, [r0, #4]
 8015814:	f00e fdf8 	bl	8024408 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015818:	6863      	ldr	r3, [r4, #4]
 801581a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801581c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801581e:	68a2      	ldr	r2, [r4, #8]
 8015820:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015822:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015824:	d319      	bcc.n	801585a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015826:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015828:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801582a:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801582c:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801582e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015830:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015832:	68c0      	ldr	r0, [r0, #12]
 8015834:	f00e fde8 	bl	8024408 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015838:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801583a:	68e3      	ldr	r3, [r4, #12]
 801583c:	4251      	negs	r1, r2
 801583e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015840:	6822      	ldr	r2, [r4, #0]
 8015842:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015844:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015846:	d202      	bcs.n	801584e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015848:	68a3      	ldr	r3, [r4, #8]
 801584a:	440b      	add	r3, r1
 801584c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801584e:	2d02      	cmp	r5, #2
 8015850:	d00d      	beq.n	801586e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015852:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015854:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015856:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015858:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801585a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801585c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801585e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015860:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015862:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015864:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015866:	f001 fadb 	bl	8016e20 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801586a:	60a5      	str	r5, [r4, #8]
 801586c:	e7ce      	b.n	801580c <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801586e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8015870:	f04f 0000 	mov.w	r0, #0
 8015874:	bf38      	it	cc
 8015876:	2601      	movcc	r6, #1
 8015878:	e7c8      	b.n	801580c <prvCopyDataToQueue+0x14>
 801587a:	bf00      	nop

0801587c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801587c:	b570      	push	{r4, r5, r6, lr}
 801587e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015880:	f001 ff68 	bl	8017754 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015884:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8015888:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801588a:	2c00      	cmp	r4, #0
 801588c:	dd14      	ble.n	80158b8 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801588e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8015892:	e003      	b.n	801589c <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015894:	1e63      	subs	r3, r4, #1
 8015896:	b2da      	uxtb	r2, r3
 8015898:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801589a:	b16a      	cbz	r2, 80158b8 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801589c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801589e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158a0:	b153      	cbz	r3, 80158b8 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80158a2:	f001 f9a5 	bl	8016bf0 <xTaskRemoveFromEventList>
 80158a6:	2800      	cmp	r0, #0
 80158a8:	d0f4      	beq.n	8015894 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80158aa:	f001 fa45 	bl	8016d38 <vTaskMissedYield>
			--cTxLock;
 80158ae:	1e63      	subs	r3, r4, #1
 80158b0:	b2da      	uxtb	r2, r3
 80158b2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80158b4:	2a00      	cmp	r2, #0
 80158b6:	d1f1      	bne.n	801589c <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80158b8:	23ff      	movs	r3, #255	; 0xff
 80158ba:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80158be:	f001 ff6f 	bl	80177a0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80158c2:	f001 ff47 	bl	8017754 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80158c6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80158ca:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158cc:	2c00      	cmp	r4, #0
 80158ce:	dd14      	ble.n	80158fa <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158d0:	f105 0610 	add.w	r6, r5, #16
 80158d4:	e003      	b.n	80158de <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80158d6:	1e63      	subs	r3, r4, #1
 80158d8:	b2da      	uxtb	r2, r3
 80158da:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158dc:	b16a      	cbz	r2, 80158fa <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158de:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158e0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80158e2:	b153      	cbz	r3, 80158fa <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80158e4:	f001 f984 	bl	8016bf0 <xTaskRemoveFromEventList>
 80158e8:	2800      	cmp	r0, #0
 80158ea:	d0f4      	beq.n	80158d6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80158ec:	f001 fa24 	bl	8016d38 <vTaskMissedYield>
				--cRxLock;
 80158f0:	1e63      	subs	r3, r4, #1
 80158f2:	b2da      	uxtb	r2, r3
 80158f4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80158f6:	2a00      	cmp	r2, #0
 80158f8:	d1f1      	bne.n	80158de <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80158fa:	23ff      	movs	r3, #255	; 0xff
 80158fc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8015900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8015904:	f001 bf4c 	b.w	80177a0 <vPortExitCritical>

08015908 <xQueueGenericReset>:
{
 8015908:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801590a:	b1e0      	cbz	r0, 8015946 <xQueueGenericReset+0x3e>
 801590c:	4604      	mov	r4, r0
 801590e:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 8015910:	f001 ff20 	bl	8017754 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015914:	6822      	ldr	r2, [r4, #0]
 8015916:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801591a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801591c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015920:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015922:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015924:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015926:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015928:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 801592a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801592c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801592e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8015930:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015934:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8015938:	b985      	cbnz	r5, 801595c <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801593a:	6923      	ldr	r3, [r4, #16]
 801593c:	b9d3      	cbnz	r3, 8015974 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 801593e:	f001 ff2f 	bl	80177a0 <vPortExitCritical>
}
 8015942:	2001      	movs	r0, #1
 8015944:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015946:	f04f 0330 	mov.w	r3, #48	; 0x30
 801594a:	b672      	cpsid	i
 801594c:	f383 8811 	msr	BASEPRI, r3
 8015950:	f3bf 8f6f 	isb	sy
 8015954:	f3bf 8f4f 	dsb	sy
 8015958:	b662      	cpsie	i
	configASSERT( pxQueue );
 801595a:	e7fe      	b.n	801595a <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801595c:	f104 0010 	add.w	r0, r4, #16
 8015960:	f7ff fefe 	bl	8015760 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015964:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015968:	f7ff fefa 	bl	8015760 <vListInitialise>
	taskEXIT_CRITICAL();
 801596c:	f001 ff18 	bl	80177a0 <vPortExitCritical>
}
 8015970:	2001      	movs	r0, #1
 8015972:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015974:	f104 0010 	add.w	r0, r4, #16
 8015978:	f001 f93a 	bl	8016bf0 <xTaskRemoveFromEventList>
 801597c:	2800      	cmp	r0, #0
 801597e:	d0de      	beq.n	801593e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8015980:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015988:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801598c:	f3bf 8f4f 	dsb	sy
 8015990:	f3bf 8f6f 	isb	sy
 8015994:	e7d3      	b.n	801593e <xQueueGenericReset+0x36>
 8015996:	bf00      	nop

08015998 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015998:	b950      	cbnz	r0, 80159b0 <xQueueGenericCreateStatic+0x18>
 801599a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801599e:	b672      	cpsid	i
 80159a0:	f383 8811 	msr	BASEPRI, r3
 80159a4:	f3bf 8f6f 	isb	sy
 80159a8:	f3bf 8f4f 	dsb	sy
 80159ac:	b662      	cpsie	i
 80159ae:	e7fe      	b.n	80159ae <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80159b0:	b17b      	cbz	r3, 80159d2 <xQueueGenericCreateStatic+0x3a>
	{
 80159b2:	b510      	push	{r4, lr}
 80159b4:	460c      	mov	r4, r1
 80159b6:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80159b8:	b33a      	cbz	r2, 8015a0a <xQueueGenericCreateStatic+0x72>
 80159ba:	b9a9      	cbnz	r1, 80159e8 <xQueueGenericCreateStatic+0x50>
 80159bc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159c0:	b672      	cpsid	i
 80159c2:	f383 8811 	msr	BASEPRI, r3
 80159c6:	f3bf 8f6f 	isb	sy
 80159ca:	f3bf 8f4f 	dsb	sy
 80159ce:	b662      	cpsie	i
 80159d0:	e7fe      	b.n	80159d0 <xQueueGenericCreateStatic+0x38>
 80159d2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159d6:	b672      	cpsid	i
 80159d8:	f383 8811 	msr	BASEPRI, r3
 80159dc:	f3bf 8f6f 	isb	sy
 80159e0:	f3bf 8f4f 	dsb	sy
 80159e4:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80159e6:	e7fe      	b.n	80159e6 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80159e8:	b17a      	cbz	r2, 8015a0a <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80159ea:	2148      	movs	r1, #72	; 0x48
 80159ec:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80159ee:	9903      	ldr	r1, [sp, #12]
 80159f0:	2948      	cmp	r1, #72	; 0x48
 80159f2:	d017      	beq.n	8015a24 <xQueueGenericCreateStatic+0x8c>
 80159f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159f8:	b672      	cpsid	i
 80159fa:	f383 8811 	msr	BASEPRI, r3
 80159fe:	f3bf 8f6f 	isb	sy
 8015a02:	f3bf 8f4f 	dsb	sy
 8015a06:	b662      	cpsie	i
 8015a08:	e7fe      	b.n	8015a08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a0a:	2c00      	cmp	r4, #0
 8015a0c:	d0ed      	beq.n	80159ea <xQueueGenericCreateStatic+0x52>
 8015a0e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a12:	b672      	cpsid	i
 8015a14:	f383 8811 	msr	BASEPRI, r3
 8015a18:	f3bf 8f6f 	isb	sy
 8015a1c:	f3bf 8f4f 	dsb	sy
 8015a20:	b662      	cpsie	i
 8015a22:	e7fe      	b.n	8015a22 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a24:	2c00      	cmp	r4, #0
 8015a26:	bf08      	it	eq
 8015a28:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a2a:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8015a2c:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a2e:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015a30:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8015a34:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8015a36:	641c      	str	r4, [r3, #64]	; 0x40
 8015a38:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015a3a:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a3c:	f7ff ff64 	bl	8015908 <xQueueGenericReset>
	}
 8015a40:	9b01      	ldr	r3, [sp, #4]
 8015a42:	4618      	mov	r0, r3
 8015a44:	b004      	add	sp, #16
 8015a46:	bd10      	pop	{r4, pc}

08015a48 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015a48:	b950      	cbnz	r0, 8015a60 <xQueueGenericCreate+0x18>
 8015a4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a4e:	b672      	cpsid	i
 8015a50:	f383 8811 	msr	BASEPRI, r3
 8015a54:	f3bf 8f6f 	isb	sy
 8015a58:	f3bf 8f4f 	dsb	sy
 8015a5c:	b662      	cpsie	i
 8015a5e:	e7fe      	b.n	8015a5e <xQueueGenericCreate+0x16>
	{
 8015a60:	b570      	push	{r4, r5, r6, lr}
 8015a62:	4605      	mov	r5, r0
 8015a64:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8015a66:	b979      	cbnz	r1, 8015a88 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a68:	2048      	movs	r0, #72	; 0x48
 8015a6a:	f001 ffdd 	bl	8017a28 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015a6e:	4604      	mov	r4, r0
 8015a70:	b1c0      	cbz	r0, 8015aa4 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a72:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015a76:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a78:	2101      	movs	r1, #1
 8015a7a:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8015a7c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015a80:	f7ff ff42 	bl	8015908 <xQueueGenericReset>
	}
 8015a84:	4620      	mov	r0, r4
 8015a86:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a88:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015a8c:	3048      	adds	r0, #72	; 0x48
 8015a8e:	f001 ffcb 	bl	8017a28 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015a92:	4604      	mov	r4, r0
 8015a94:	b130      	cbz	r0, 8015aa4 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a96:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015a98:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015a9c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015aa0:	6003      	str	r3, [r0, #0]
 8015aa2:	e7e9      	b.n	8015a78 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015aa4:	2400      	movs	r4, #0
	}
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	bd70      	pop	{r4, r5, r6, pc}
 8015aaa:	bf00      	nop

08015aac <xQueueGenericSend>:
{
 8015aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015ab0:	b085      	sub	sp, #20
 8015ab2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	f000 8083 	beq.w	8015bc0 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015aba:	460f      	mov	r7, r1
 8015abc:	4604      	mov	r4, r0
 8015abe:	461e      	mov	r6, r3
 8015ac0:	2900      	cmp	r1, #0
 8015ac2:	d06b      	beq.n	8015b9c <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015ac4:	2e02      	cmp	r6, #2
 8015ac6:	d10d      	bne.n	8015ae4 <xQueueGenericSend+0x38>
 8015ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d00a      	beq.n	8015ae4 <xQueueGenericSend+0x38>
 8015ace:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ad2:	b672      	cpsid	i
 8015ad4:	f383 8811 	msr	BASEPRI, r3
 8015ad8:	f3bf 8f6f 	isb	sy
 8015adc:	f3bf 8f4f 	dsb	sy
 8015ae0:	b662      	cpsie	i
 8015ae2:	e7fe      	b.n	8015ae2 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ae4:	f001 f934 	bl	8016d50 <xTaskGetSchedulerState>
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d074      	beq.n	8015bd6 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015aec:	f1a6 0802 	sub.w	r8, r6, #2
 8015af0:	2500      	movs	r5, #0
 8015af2:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 8015af6:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015af8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8015afc:	e007      	b.n	8015b0e <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8015afe:	f001 fe4f 	bl	80177a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015b02:	4620      	mov	r0, r4
 8015b04:	f7ff feba 	bl	801587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b08:	f000 ffe2 	bl	8016ad0 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b0c:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8015b0e:	f001 fe21 	bl	8017754 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015b12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8015b14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015b16:	4290      	cmp	r0, r2
 8015b18:	d36b      	bcc.n	8015bf2 <xQueueGenericSend+0x146>
 8015b1a:	f1b8 0f00 	cmp.w	r8, #0
 8015b1e:	d168      	bne.n	8015bf2 <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015b20:	9b01      	ldr	r3, [sp, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d07d      	beq.n	8015c22 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 8015b26:	2d00      	cmp	r5, #0
 8015b28:	d046      	beq.n	8015bb8 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 8015b2a:	f001 fe39 	bl	80177a0 <vPortExitCritical>
		vTaskSuspendAll();
 8015b2e:	f000 fe73 	bl	8016818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b32:	f001 fe0f 	bl	8017754 <vPortEnterCritical>
 8015b36:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b3a:	2bff      	cmp	r3, #255	; 0xff
 8015b3c:	d101      	bne.n	8015b42 <xQueueGenericSend+0x96>
 8015b3e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8015b42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015b46:	2bff      	cmp	r3, #255	; 0xff
 8015b48:	d101      	bne.n	8015b4e <xQueueGenericSend+0xa2>
 8015b4a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8015b4e:	f001 fe27 	bl	80177a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b52:	a901      	add	r1, sp, #4
 8015b54:	a802      	add	r0, sp, #8
 8015b56:	f001 f8a3 	bl	8016ca0 <xTaskCheckForTimeOut>
 8015b5a:	2800      	cmp	r0, #0
 8015b5c:	d165      	bne.n	8015c2a <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 8015b5e:	f001 fdf9 	bl	8017754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015b62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015b64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d1c9      	bne.n	8015afe <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 8015b6a:	f001 fe19 	bl	80177a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015b6e:	9901      	ldr	r1, [sp, #4]
 8015b70:	f104 0010 	add.w	r0, r4, #16
 8015b74:	f001 f800 	bl	8016b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015b78:	4620      	mov	r0, r4
 8015b7a:	f7ff fe7f 	bl	801587c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015b7e:	f000 ffa7 	bl	8016ad0 <xTaskResumeAll>
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d1c2      	bne.n	8015b0c <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8015b86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015b92:	f3bf 8f4f 	dsb	sy
 8015b96:	f3bf 8f6f 	isb	sy
 8015b9a:	e7b7      	b.n	8015b0c <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015b9c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d090      	beq.n	8015ac4 <xQueueGenericSend+0x18>
 8015ba2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ba6:	b672      	cpsid	i
 8015ba8:	f383 8811 	msr	BASEPRI, r3
 8015bac:	f3bf 8f6f 	isb	sy
 8015bb0:	f3bf 8f4f 	dsb	sy
 8015bb4:	b662      	cpsie	i
 8015bb6:	e7fe      	b.n	8015bb6 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bb8:	a802      	add	r0, sp, #8
 8015bba:	f001 f865 	bl	8016c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bbe:	e7b4      	b.n	8015b2a <xQueueGenericSend+0x7e>
 8015bc0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015bc4:	b672      	cpsid	i
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015bd4:	e7fe      	b.n	8015bd4 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015bd6:	9b01      	ldr	r3, [sp, #4]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d087      	beq.n	8015aec <xQueueGenericSend+0x40>
 8015bdc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015be0:	b672      	cpsid	i
 8015be2:	f383 8811 	msr	BASEPRI, r3
 8015be6:	f3bf 8f6f 	isb	sy
 8015bea:	f3bf 8f4f 	dsb	sy
 8015bee:	b662      	cpsie	i
 8015bf0:	e7fe      	b.n	8015bf0 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015bf2:	4632      	mov	r2, r6
 8015bf4:	4639      	mov	r1, r7
 8015bf6:	4620      	mov	r0, r4
 8015bf8:	f7ff fdfe 	bl	80157f8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bfe:	b9db      	cbnz	r3, 8015c38 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 8015c00:	b148      	cbz	r0, 8015c16 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8015c02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015c0e:	f3bf 8f4f 	dsb	sy
 8015c12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8015c16:	f001 fdc3 	bl	80177a0 <vPortExitCritical>
				return pdPASS;
 8015c1a:	2001      	movs	r0, #1
}
 8015c1c:	b005      	add	sp, #20
 8015c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 8015c22:	f001 fdbd 	bl	80177a0 <vPortExitCritical>
					return errQUEUE_FULL;
 8015c26:	4640      	mov	r0, r8
 8015c28:	e7f8      	b.n	8015c1c <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8015c2a:	4620      	mov	r0, r4
 8015c2c:	f7ff fe26 	bl	801587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015c30:	f000 ff4e 	bl	8016ad0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8015c34:	2000      	movs	r0, #0
 8015c36:	e7f1      	b.n	8015c1c <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015c38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015c3c:	f000 ffd8 	bl	8016bf0 <xTaskRemoveFromEventList>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d0e8      	beq.n	8015c16 <xQueueGenericSend+0x16a>
 8015c44:	e7dd      	b.n	8015c02 <xQueueGenericSend+0x156>
 8015c46:	bf00      	nop

08015c48 <xQueueCreateMutexStatic>:
	{
 8015c48:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015c4a:	2200      	movs	r2, #0
	{
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	b082      	sub	sp, #8
 8015c50:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015c52:	2001      	movs	r0, #1
 8015c54:	4611      	mov	r1, r2
 8015c56:	9400      	str	r4, [sp, #0]
 8015c58:	f7ff fe9e 	bl	8015998 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	b138      	cbz	r0, 8015c70 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c60:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015c62:	461a      	mov	r2, r3
 8015c64:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c66:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015c68:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015c6a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015c6c:	f7ff ff1e 	bl	8015aac <xQueueGenericSend>
	}
 8015c70:	4620      	mov	r0, r4
 8015c72:	b002      	add	sp, #8
 8015c74:	bd10      	pop	{r4, pc}
 8015c76:	bf00      	nop

08015c78 <xQueueCreateMutex>:
	{
 8015c78:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015c7a:	2048      	movs	r0, #72	; 0x48
 8015c7c:	f001 fed4 	bl	8017a28 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015c80:	4604      	mov	r4, r0
 8015c82:	b188      	cbz	r0, 8015ca8 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015c84:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8015c86:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015c88:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015c8a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8015c8e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015c92:	f7ff fe39 	bl	8015908 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015c96:	462b      	mov	r3, r5
 8015c98:	462a      	mov	r2, r5
 8015c9a:	4629      	mov	r1, r5
 8015c9c:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015c9e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015ca0:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015ca2:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015ca4:	f7ff ff02 	bl	8015aac <xQueueGenericSend>
	}
 8015ca8:	4620      	mov	r0, r4
 8015caa:	bd38      	pop	{r3, r4, r5, pc}

08015cac <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d053      	beq.n	8015d58 <xQueueGenericSendFromISR+0xac>
{
 8015cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cb4:	460e      	mov	r6, r1
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	4617      	mov	r7, r2
 8015cba:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cbc:	b359      	cbz	r1, 8015d16 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015cbe:	2d02      	cmp	r5, #2
 8015cc0:	d10d      	bne.n	8015cde <xQueueGenericSendFromISR+0x32>
 8015cc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015cc4:	2b01      	cmp	r3, #1
 8015cc6:	d00a      	beq.n	8015cde <xQueueGenericSendFromISR+0x32>
 8015cc8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ccc:	b672      	cpsid	i
 8015cce:	f383 8811 	msr	BASEPRI, r3
 8015cd2:	f3bf 8f6f 	isb	sy
 8015cd6:	f3bf 8f4f 	dsb	sy
 8015cda:	b662      	cpsie	i
 8015cdc:	e7fe      	b.n	8015cdc <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015cde:	f001 fe3f 	bl	8017960 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015ce2:	f3ef 8811 	mrs	r8, BASEPRI
 8015ce6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015cea:	b672      	cpsid	i
 8015cec:	f383 8811 	msr	BASEPRI, r3
 8015cf0:	f3bf 8f6f 	isb	sy
 8015cf4:	f3bf 8f4f 	dsb	sy
 8015cf8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015cfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015cfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d317      	bcc.n	8015d32 <xQueueGenericSendFromISR+0x86>
 8015d02:	f1a5 0002 	sub.w	r0, r5, #2
 8015d06:	fab0 f080 	clz	r0, r0
 8015d0a:	0940      	lsrs	r0, r0, #5
 8015d0c:	b988      	cbnz	r0, 8015d32 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8015d0e:	f388 8811 	msr	BASEPRI, r8
}
 8015d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015d16:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d0d0      	beq.n	8015cbe <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8015d1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d20:	b672      	cpsid	i
 8015d22:	f383 8811 	msr	BASEPRI, r3
 8015d26:	f3bf 8f6f 	isb	sy
 8015d2a:	f3bf 8f4f 	dsb	sy
 8015d2e:	b662      	cpsie	i
 8015d30:	e7fe      	b.n	8015d30 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d32:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d38:	4631      	mov	r1, r6
 8015d3a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8015d3c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015d3e:	f7ff fd5b 	bl	80157f8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8015d42:	1c6b      	adds	r3, r5, #1
 8015d44:	d013      	beq.n	8015d6e <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d46:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8015d48:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015d4a:	b25b      	sxtb	r3, r3
 8015d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8015d50:	f388 8811 	msr	BASEPRI, r8
}
 8015d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8015d58:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d5c:	b672      	cpsid	i
 8015d5e:	f383 8811 	msr	BASEPRI, r3
 8015d62:	f3bf 8f6f 	isb	sy
 8015d66:	f3bf 8f4f 	dsb	sy
 8015d6a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015d6c:	e7fe      	b.n	8015d6c <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015d6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d70:	b90b      	cbnz	r3, 8015d76 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8015d72:	2001      	movs	r0, #1
 8015d74:	e7cb      	b.n	8015d0e <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015d76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015d7a:	f000 ff39 	bl	8016bf0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d0f7      	beq.n	8015d72 <xQueueGenericSendFromISR+0xc6>
 8015d82:	2f00      	cmp	r7, #0
 8015d84:	d0f5      	beq.n	8015d72 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d86:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015d88:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015d8a:	603b      	str	r3, [r7, #0]
 8015d8c:	e7bf      	b.n	8015d0e <xQueueGenericSendFromISR+0x62>
 8015d8e:	bf00      	nop

08015d90 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8015d90:	b380      	cbz	r0, 8015df4 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015d92:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8015d94:	b570      	push	{r4, r5, r6, lr}
 8015d96:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015d98:	b153      	cbz	r3, 8015db0 <xQueueGiveFromISR+0x20>
 8015d9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015d9e:	b672      	cpsid	i
 8015da0:	f383 8811 	msr	BASEPRI, r3
 8015da4:	f3bf 8f6f 	isb	sy
 8015da8:	f3bf 8f4f 	dsb	sy
 8015dac:	b662      	cpsie	i
 8015dae:	e7fe      	b.n	8015dae <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015db0:	6803      	ldr	r3, [r0, #0]
 8015db2:	460d      	mov	r5, r1
 8015db4:	b34b      	cbz	r3, 8015e0a <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015db6:	f001 fdd3 	bl	8017960 <vPortValidateInterruptPriority>
	__asm volatile
 8015dba:	f3ef 8611 	mrs	r6, BASEPRI
 8015dbe:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015dc2:	b672      	cpsid	i
 8015dc4:	f383 8811 	msr	BASEPRI, r3
 8015dc8:	f3bf 8f6f 	isb	sy
 8015dcc:	f3bf 8f4f 	dsb	sy
 8015dd0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015dd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015dd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d925      	bls.n	8015e26 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8015dda:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015dde:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8015de0:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015de2:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8015de4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8015de6:	d022      	beq.n	8015e2e <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015de8:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8015dea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015dec:	b25b      	sxtb	r3, r3
 8015dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015df2:	e019      	b.n	8015e28 <xQueueGiveFromISR+0x98>
	__asm volatile
 8015df4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015df8:	b672      	cpsid	i
 8015dfa:	f383 8811 	msr	BASEPRI, r3
 8015dfe:	f3bf 8f6f 	isb	sy
 8015e02:	f3bf 8f4f 	dsb	sy
 8015e06:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015e08:	e7fe      	b.n	8015e08 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015e0a:	6883      	ldr	r3, [r0, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d0d2      	beq.n	8015db6 <xQueueGiveFromISR+0x26>
 8015e10:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015e14:	b672      	cpsid	i
 8015e16:	f383 8811 	msr	BASEPRI, r3
 8015e1a:	f3bf 8f6f 	isb	sy
 8015e1e:	f3bf 8f4f 	dsb	sy
 8015e22:	b662      	cpsie	i
 8015e24:	e7fe      	b.n	8015e24 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8015e26:	2000      	movs	r0, #0
	__asm volatile
 8015e28:	f386 8811 	msr	BASEPRI, r6
}
 8015e2c:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015e2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015e30:	b90b      	cbnz	r3, 8015e36 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8015e32:	2001      	movs	r0, #1
 8015e34:	e7f8      	b.n	8015e28 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015e36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015e3a:	f000 fed9 	bl	8016bf0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8015e3e:	2d00      	cmp	r5, #0
 8015e40:	d0f7      	beq.n	8015e32 <xQueueGiveFromISR+0xa2>
 8015e42:	2800      	cmp	r0, #0
 8015e44:	d0f5      	beq.n	8015e32 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e46:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015e48:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015e4a:	602b      	str	r3, [r5, #0]
 8015e4c:	e7ec      	b.n	8015e28 <xQueueGiveFromISR+0x98>
 8015e4e:	bf00      	nop

08015e50 <xQueueReceive>:
{
 8015e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e54:	b085      	sub	sp, #20
 8015e56:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015e58:	2800      	cmp	r0, #0
 8015e5a:	f000 80a4 	beq.w	8015fa6 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e5e:	460d      	mov	r5, r1
 8015e60:	4604      	mov	r4, r0
 8015e62:	2900      	cmp	r1, #0
 8015e64:	d047      	beq.n	8015ef6 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e66:	f000 ff73 	bl	8016d50 <xTaskGetSchedulerState>
 8015e6a:	2800      	cmp	r0, #0
 8015e6c:	d051      	beq.n	8015f12 <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 8015e6e:	f001 fc71 	bl	8017754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015e72:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015e74:	2e00      	cmp	r6, #0
 8015e76:	d16b      	bne.n	8015f50 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015e78:	9b01      	ldr	r3, [sp, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d035      	beq.n	8015eea <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 8015e7e:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015e80:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8015e84:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015e88:	a802      	add	r0, sp, #8
 8015e8a:	f000 fefd 	bl	8016c88 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8015e8e:	f001 fc87 	bl	80177a0 <vPortExitCritical>
		vTaskSuspendAll();
 8015e92:	f000 fcc1 	bl	8016818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015e96:	f001 fc5d 	bl	8017754 <vPortEnterCritical>
 8015e9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015e9e:	2bff      	cmp	r3, #255	; 0xff
 8015ea0:	d101      	bne.n	8015ea6 <xQueueReceive+0x56>
 8015ea2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015ea6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015eaa:	2bff      	cmp	r3, #255	; 0xff
 8015eac:	d101      	bne.n	8015eb2 <xQueueReceive+0x62>
 8015eae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015eb2:	f001 fc75 	bl	80177a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015eb6:	a901      	add	r1, sp, #4
 8015eb8:	a802      	add	r0, sp, #8
 8015eba:	f000 fef1 	bl	8016ca0 <xTaskCheckForTimeOut>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	d135      	bne.n	8015f2e <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8015ec2:	f001 fc47 	bl	8017754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015ec6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d056      	beq.n	8015f7a <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 8015ecc:	f001 fc68 	bl	80177a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f7ff fcd3 	bl	801587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015ed6:	f000 fdfb 	bl	8016ad0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015eda:	f001 fc3b 	bl	8017754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ede:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ee0:	2e00      	cmp	r6, #0
 8015ee2:	d135      	bne.n	8015f50 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ee4:	9b01      	ldr	r3, [sp, #4]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d1d1      	bne.n	8015e8e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 8015eea:	f001 fc59 	bl	80177a0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8015eee:	2000      	movs	r0, #0
}
 8015ef0:	b005      	add	sp, #20
 8015ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ef6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d0b4      	beq.n	8015e66 <xQueueReceive+0x16>
	__asm volatile
 8015efc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f00:	b672      	cpsid	i
 8015f02:	f383 8811 	msr	BASEPRI, r3
 8015f06:	f3bf 8f6f 	isb	sy
 8015f0a:	f3bf 8f4f 	dsb	sy
 8015f0e:	b662      	cpsie	i
 8015f10:	e7fe      	b.n	8015f10 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015f12:	9b01      	ldr	r3, [sp, #4]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d0aa      	beq.n	8015e6e <xQueueReceive+0x1e>
 8015f18:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f1c:	b672      	cpsid	i
 8015f1e:	f383 8811 	msr	BASEPRI, r3
 8015f22:	f3bf 8f6f 	isb	sy
 8015f26:	f3bf 8f4f 	dsb	sy
 8015f2a:	b662      	cpsie	i
 8015f2c:	e7fe      	b.n	8015f2c <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 8015f2e:	4620      	mov	r0, r4
 8015f30:	f7ff fca4 	bl	801587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015f34:	f000 fdcc 	bl	8016ad0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015f38:	f001 fc0c 	bl	8017754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015f3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d0d3      	beq.n	8015eea <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8015f42:	f001 fc2d 	bl	80177a0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015f46:	f001 fc05 	bl	8017754 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015f4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015f4c:	2e00      	cmp	r6, #0
 8015f4e:	d0c9      	beq.n	8015ee4 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015f50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015f52:	b152      	cbz	r2, 8015f6a <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f54:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f56:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f58:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f5a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015f5c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015f5e:	d301      	bcc.n	8015f64 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015f60:	6821      	ldr	r1, [r4, #0]
 8015f62:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015f64:	4628      	mov	r0, r5
 8015f66:	f00e fa4f 	bl	8024408 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015f6a:	3e01      	subs	r6, #1
 8015f6c:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015f6e:	6923      	ldr	r3, [r4, #16]
 8015f70:	bb23      	cbnz	r3, 8015fbc <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8015f72:	f001 fc15 	bl	80177a0 <vPortExitCritical>
				return pdPASS;
 8015f76:	2001      	movs	r0, #1
 8015f78:	e7ba      	b.n	8015ef0 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8015f7a:	f001 fc11 	bl	80177a0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015f7e:	9901      	ldr	r1, [sp, #4]
 8015f80:	4640      	mov	r0, r8
 8015f82:	f000 fdf9 	bl	8016b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015f86:	4620      	mov	r0, r4
 8015f88:	f7ff fc78 	bl	801587c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015f8c:	f000 fda0 	bl	8016ad0 <xTaskResumeAll>
 8015f90:	2800      	cmp	r0, #0
 8015f92:	d1d8      	bne.n	8015f46 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8015f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015f98:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8015f9c:	f3bf 8f4f 	dsb	sy
 8015fa0:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8015fa4:	e7cf      	b.n	8015f46 <xQueueReceive+0xf6>
 8015fa6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015faa:	b672      	cpsid	i
 8015fac:	f383 8811 	msr	BASEPRI, r3
 8015fb0:	f3bf 8f6f 	isb	sy
 8015fb4:	f3bf 8f4f 	dsb	sy
 8015fb8:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015fba:	e7fe      	b.n	8015fba <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015fbc:	f104 0010 	add.w	r0, r4, #16
 8015fc0:	f000 fe16 	bl	8016bf0 <xTaskRemoveFromEventList>
 8015fc4:	2800      	cmp	r0, #0
 8015fc6:	d0d4      	beq.n	8015f72 <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8015fc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fd0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015fd4:	f3bf 8f4f 	dsb	sy
 8015fd8:	f3bf 8f6f 	isb	sy
 8015fdc:	e7c9      	b.n	8015f72 <xQueueReceive+0x122>
 8015fde:	bf00      	nop

08015fe0 <xQueueSemaphoreTake>:
{
 8015fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fe2:	b085      	sub	sp, #20
 8015fe4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015fe6:	2800      	cmp	r0, #0
 8015fe8:	d057      	beq.n	801609a <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015fea:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8015fec:	4604      	mov	r4, r0
 8015fee:	b156      	cbz	r6, 8016006 <xQueueSemaphoreTake+0x26>
 8015ff0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ff4:	b672      	cpsid	i
 8015ff6:	f383 8811 	msr	BASEPRI, r3
 8015ffa:	f3bf 8f6f 	isb	sy
 8015ffe:	f3bf 8f4f 	dsb	sy
 8016002:	b662      	cpsie	i
 8016004:	e7fe      	b.n	8016004 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016006:	f000 fea3 	bl	8016d50 <xTaskGetSchedulerState>
 801600a:	4605      	mov	r5, r0
 801600c:	2800      	cmp	r0, #0
 801600e:	d04f      	beq.n	80160b0 <xQueueSemaphoreTake+0xd0>
 8016010:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8016012:	f001 fb9f 	bl	8017754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016016:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8016018:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801601a:	bb8b      	cbnz	r3, 8016080 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 801601c:	9b01      	ldr	r3, [sp, #4]
 801601e:	2b00      	cmp	r3, #0
 8016020:	f000 809f 	beq.w	8016162 <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8016024:	2d00      	cmp	r5, #0
 8016026:	d05d      	beq.n	80160e4 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8016028:	f001 fbba 	bl	80177a0 <vPortExitCritical>
		vTaskSuspendAll();
 801602c:	f000 fbf4 	bl	8016818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016030:	f001 fb90 	bl	8017754 <vPortEnterCritical>
 8016034:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016038:	2bff      	cmp	r3, #255	; 0xff
 801603a:	d101      	bne.n	8016040 <xQueueSemaphoreTake+0x60>
 801603c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8016040:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016044:	2bff      	cmp	r3, #255	; 0xff
 8016046:	d101      	bne.n	801604c <xQueueSemaphoreTake+0x6c>
 8016048:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801604c:	f001 fba8 	bl	80177a0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016050:	a901      	add	r1, sp, #4
 8016052:	a802      	add	r0, sp, #8
 8016054:	f000 fe24 	bl	8016ca0 <xTaskCheckForTimeOut>
 8016058:	2800      	cmp	r0, #0
 801605a:	d137      	bne.n	80160cc <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 801605c:	f001 fb7a 	bl	8017754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016062:	2b00      	cmp	r3, #0
 8016064:	d042      	beq.n	80160ec <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8016066:	f001 fb9b 	bl	80177a0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801606a:	4620      	mov	r0, r4
 801606c:	f7ff fc06 	bl	801587c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016070:	f000 fd2e 	bl	8016ad0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8016074:	f001 fb6e 	bl	8017754 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016078:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801607a:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801607c:	2b00      	cmp	r3, #0
 801607e:	d0cd      	beq.n	801601c <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016080:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016082:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016084:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016086:	2a00      	cmp	r2, #0
 8016088:	f000 8089 	beq.w	801619e <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801608c:	6923      	ldr	r3, [r4, #16]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d174      	bne.n	801617c <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8016092:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8016094:	f001 fb84 	bl	80177a0 <vPortExitCritical>
				return pdPASS;
 8016098:	e046      	b.n	8016128 <xQueueSemaphoreTake+0x148>
 801609a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801609e:	b672      	cpsid	i
 80160a0:	f383 8811 	msr	BASEPRI, r3
 80160a4:	f3bf 8f6f 	isb	sy
 80160a8:	f3bf 8f4f 	dsb	sy
 80160ac:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 80160ae:	e7fe      	b.n	80160ae <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80160b0:	9b01      	ldr	r3, [sp, #4]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d03b      	beq.n	801612e <xQueueSemaphoreTake+0x14e>
 80160b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80160ba:	b672      	cpsid	i
 80160bc:	f383 8811 	msr	BASEPRI, r3
 80160c0:	f3bf 8f6f 	isb	sy
 80160c4:	f3bf 8f4f 	dsb	sy
 80160c8:	b662      	cpsie	i
 80160ca:	e7fe      	b.n	80160ca <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 80160cc:	4620      	mov	r0, r4
 80160ce:	f7ff fbd5 	bl	801587c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80160d2:	f000 fcfd 	bl	8016ad0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80160d6:	f001 fb3d 	bl	8017754 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80160da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160dc:	b30b      	cbz	r3, 8016122 <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 80160de:	f001 fb5f 	bl	80177a0 <vPortExitCritical>
	return xReturn;
 80160e2:	e7c7      	b.n	8016074 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80160e4:	a802      	add	r0, sp, #8
 80160e6:	f000 fdcf 	bl	8016c88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80160ea:	e79d      	b.n	8016028 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 80160ec:	f001 fb58 	bl	80177a0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80160f0:	6823      	ldr	r3, [r4, #0]
 80160f2:	b36b      	cbz	r3, 8016150 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80160f4:	9901      	ldr	r1, [sp, #4]
 80160f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80160fa:	f000 fd3d 	bl	8016b78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80160fe:	4620      	mov	r0, r4
 8016100:	f7ff fbbc 	bl	801587c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016104:	f000 fce4 	bl	8016ad0 <xTaskResumeAll>
 8016108:	2800      	cmp	r0, #0
 801610a:	d1b3      	bne.n	8016074 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 801610c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016114:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016118:	f3bf 8f4f 	dsb	sy
 801611c:	f3bf 8f6f 	isb	sy
 8016120:	e7a8      	b.n	8016074 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8016122:	f001 fb3d 	bl	80177a0 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8016126:	b926      	cbnz	r6, 8016132 <xQueueSemaphoreTake+0x152>
}
 8016128:	4630      	mov	r0, r6
 801612a:	b005      	add	sp, #20
 801612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801612e:	4606      	mov	r6, r0
 8016130:	e76f      	b.n	8016012 <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8016132:	f001 fb0f 	bl	8017754 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016136:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016138:	b119      	cbz	r1, 8016142 <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801613a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801613c:	6819      	ldr	r1, [r3, #0]
 801613e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016142:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8016144:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8016146:	f000 fecb 	bl	8016ee0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 801614a:	f001 fb29 	bl	80177a0 <vPortExitCritical>
 801614e:	e7eb      	b.n	8016128 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8016150:	f001 fb00 	bl	8017754 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016154:	68a0      	ldr	r0, [r4, #8]
 8016156:	f000 fe0b 	bl	8016d70 <xTaskPriorityInherit>
 801615a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 801615c:	f001 fb20 	bl	80177a0 <vPortExitCritical>
 8016160:	e7c8      	b.n	80160f4 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8016162:	2e00      	cmp	r6, #0
 8016164:	d0f1      	beq.n	801614a <xQueueSemaphoreTake+0x16a>
 8016166:	f04f 0330 	mov.w	r3, #48	; 0x30
 801616a:	b672      	cpsid	i
 801616c:	f383 8811 	msr	BASEPRI, r3
 8016170:	f3bf 8f6f 	isb	sy
 8016174:	f3bf 8f4f 	dsb	sy
 8016178:	b662      	cpsie	i
 801617a:	e7fe      	b.n	801617a <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801617c:	f104 0010 	add.w	r0, r4, #16
 8016180:	f000 fd36 	bl	8016bf0 <xTaskRemoveFromEventList>
 8016184:	2800      	cmp	r0, #0
 8016186:	d084      	beq.n	8016092 <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8016188:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801618c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016190:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016194:	f3bf 8f4f 	dsb	sy
 8016198:	f3bf 8f6f 	isb	sy
 801619c:	e779      	b.n	8016092 <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801619e:	f000 ff0d 	bl	8016fbc <pvTaskIncrementMutexHeldCount>
 80161a2:	60a0      	str	r0, [r4, #8]
 80161a4:	e772      	b.n	801608c <xQueueSemaphoreTake+0xac>
 80161a6:	bf00      	nop

080161a8 <xQueueReceiveFromISR>:
{
 80161a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80161ac:	b330      	cbz	r0, 80161fc <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161ae:	460e      	mov	r6, r1
 80161b0:	4604      	mov	r4, r0
 80161b2:	4617      	mov	r7, r2
 80161b4:	b1a1      	cbz	r1, 80161e0 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80161b6:	f001 fbd3 	bl	8017960 <vPortValidateInterruptPriority>
	__asm volatile
 80161ba:	f3ef 8911 	mrs	r9, BASEPRI
 80161be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161c2:	b672      	cpsid	i
 80161c4:	f383 8811 	msr	BASEPRI, r3
 80161c8:	f3bf 8f6f 	isb	sy
 80161cc:	f3bf 8f4f 	dsb	sy
 80161d0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80161d2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80161d4:	b9ed      	cbnz	r5, 8016212 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 80161d6:	4628      	mov	r0, r5
	__asm volatile
 80161d8:	f389 8811 	msr	BASEPRI, r9
}
 80161dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d0e7      	beq.n	80161b6 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80161e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161ea:	b672      	cpsid	i
 80161ec:	f383 8811 	msr	BASEPRI, r3
 80161f0:	f3bf 8f6f 	isb	sy
 80161f4:	f3bf 8f4f 	dsb	sy
 80161f8:	b662      	cpsie	i
 80161fa:	e7fe      	b.n	80161fa <xQueueReceiveFromISR+0x52>
 80161fc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016200:	b672      	cpsid	i
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8016210:	e7fe      	b.n	8016210 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8016212:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016216:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8016218:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801621c:	b142      	cbz	r2, 8016230 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801621e:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016220:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016222:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016224:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016226:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016228:	d215      	bcs.n	8016256 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801622a:	4630      	mov	r0, r6
 801622c:	f00e f8ec 	bl	8024408 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016230:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8016232:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016236:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8016238:	d009      	beq.n	801624e <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801623a:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 801623e:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016240:	b25b      	sxtb	r3, r3
 8016242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8016246:	f389 8811 	msr	BASEPRI, r9
}
 801624a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801624e:	6923      	ldr	r3, [r4, #16]
 8016250:	b923      	cbnz	r3, 801625c <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8016252:	2001      	movs	r0, #1
 8016254:	e7c0      	b.n	80161d8 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016256:	6821      	ldr	r1, [r4, #0]
 8016258:	60e1      	str	r1, [r4, #12]
 801625a:	e7e6      	b.n	801622a <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801625c:	f104 0010 	add.w	r0, r4, #16
 8016260:	f000 fcc6 	bl	8016bf0 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8016264:	2f00      	cmp	r7, #0
 8016266:	d0f4      	beq.n	8016252 <xQueueReceiveFromISR+0xaa>
 8016268:	2800      	cmp	r0, #0
 801626a:	d0f2      	beq.n	8016252 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801626c:	2301      	movs	r3, #1
			xReturn = pdPASS;
 801626e:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016270:	603b      	str	r3, [r7, #0]
 8016272:	e7b1      	b.n	80161d8 <xQueueReceiveFromISR+0x30>

08016274 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016274:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016276:	2300      	movs	r3, #0
 8016278:	4c08      	ldr	r4, [pc, #32]	; (801629c <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801627a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 801627e:	b12a      	cbz	r2, 801628c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016280:	3301      	adds	r3, #1
 8016282:	2b08      	cmp	r3, #8
 8016284:	d1f9      	bne.n	801627a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016286:	f85d 4b04 	ldr.w	r4, [sp], #4
 801628a:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 801628c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016290:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8016294:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016298:	6050      	str	r0, [r2, #4]
	}
 801629a:	4770      	bx	lr
 801629c:	20006308 	.word	0x20006308

080162a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80162a0:	b570      	push	{r4, r5, r6, lr}
 80162a2:	4604      	mov	r4, r0
 80162a4:	460e      	mov	r6, r1
 80162a6:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80162a8:	f001 fa54 	bl	8017754 <vPortEnterCritical>
 80162ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80162b0:	2bff      	cmp	r3, #255	; 0xff
 80162b2:	d102      	bne.n	80162ba <vQueueWaitForMessageRestricted+0x1a>
 80162b4:	2300      	movs	r3, #0
 80162b6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80162ba:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80162be:	2bff      	cmp	r3, #255	; 0xff
 80162c0:	d102      	bne.n	80162c8 <vQueueWaitForMessageRestricted+0x28>
 80162c2:	2300      	movs	r3, #0
 80162c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80162c8:	f001 fa6a 	bl	80177a0 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80162cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80162ce:	b123      	cbz	r3, 80162da <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80162d0:	4620      	mov	r0, r4
	}
 80162d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80162d6:	f7ff bad1 	b.w	801587c <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80162da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80162de:	462a      	mov	r2, r5
 80162e0:	4631      	mov	r1, r6
 80162e2:	f000 fc65 	bl	8016bb0 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 80162e6:	4620      	mov	r0, r4
	}
 80162e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80162ec:	f7ff bac6 	b.w	801587c <prvUnlockQueue>

080162f0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80162f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162f4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80162f6:	f001 fa2d 	bl	8017754 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80162fa:	4a35      	ldr	r2, [pc, #212]	; (80163d0 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 80162fc:	4d35      	ldr	r5, [pc, #212]	; (80163d4 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 80162fe:	6813      	ldr	r3, [r2, #0]
 8016300:	3301      	adds	r3, #1
 8016302:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d034      	beq.n	8016374 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801630a:	4e33      	ldr	r6, [pc, #204]	; (80163d8 <prvAddNewTaskToReadyList+0xe8>)
 801630c:	6833      	ldr	r3, [r6, #0]
 801630e:	b343      	cbz	r3, 8016362 <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016312:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80163fc <prvAddNewTaskToReadyList+0x10c>
 8016316:	2201      	movs	r2, #1
		uxTaskNumber++;
 8016318:	4f30      	ldr	r7, [pc, #192]	; (80163dc <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 801631a:	4931      	ldr	r1, [pc, #196]	; (80163e0 <prvAddNewTaskToReadyList+0xf0>)
 801631c:	409a      	lsls	r2, r3
 801631e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016322:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	3301      	adds	r3, #1
 801632a:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801632c:	680b      	ldr	r3, [r1, #0]
 801632e:	431a      	orrs	r2, r3
 8016330:	600a      	str	r2, [r1, #0]
 8016332:	1d21      	adds	r1, r4, #4
 8016334:	f7ff fa24 	bl	8015780 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016338:	f001 fa32 	bl	80177a0 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801633c:	6833      	ldr	r3, [r6, #0]
 801633e:	b173      	cbz	r3, 801635e <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016340:	682a      	ldr	r2, [r5, #0]
 8016342:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016346:	429a      	cmp	r2, r3
 8016348:	d209      	bcs.n	801635e <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801634a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801634e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016352:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016356:	f3bf 8f4f 	dsb	sy
 801635a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016362:	682a      	ldr	r2, [r5, #0]
 8016364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016366:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016368:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80163fc <prvAddNewTaskToReadyList+0x10c>
 801636c:	429a      	cmp	r2, r3
 801636e:	d8d2      	bhi.n	8016316 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8016370:	602c      	str	r4, [r5, #0]
 8016372:	e7d0      	b.n	8016316 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8016374:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016376:	6813      	ldr	r3, [r2, #0]
 8016378:	2b01      	cmp	r3, #1
 801637a:	d004      	beq.n	8016386 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 801637c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801637e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80163fc <prvAddNewTaskToReadyList+0x10c>
 8016382:	4e15      	ldr	r6, [pc, #84]	; (80163d8 <prvAddNewTaskToReadyList+0xe8>)
 8016384:	e7c7      	b.n	8016316 <prvAddNewTaskToReadyList+0x26>
 8016386:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80163fc <prvAddNewTaskToReadyList+0x10c>
 801638a:	4646      	mov	r6, r8
 801638c:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016390:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016392:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016394:	f7ff f9e4 	bl	8015760 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016398:	42b7      	cmp	r7, r6
 801639a:	d1f9      	bne.n	8016390 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 801639c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8016400 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 80163a0:	4f10      	ldr	r7, [pc, #64]	; (80163e4 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 80163a2:	4648      	mov	r0, r9
 80163a4:	4e0c      	ldr	r6, [pc, #48]	; (80163d8 <prvAddNewTaskToReadyList+0xe8>)
 80163a6:	f7ff f9db 	bl	8015760 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80163aa:	4638      	mov	r0, r7
 80163ac:	f7ff f9d8 	bl	8015760 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80163b0:	480d      	ldr	r0, [pc, #52]	; (80163e8 <prvAddNewTaskToReadyList+0xf8>)
 80163b2:	f7ff f9d5 	bl	8015760 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80163b6:	480d      	ldr	r0, [pc, #52]	; (80163ec <prvAddNewTaskToReadyList+0xfc>)
 80163b8:	f7ff f9d2 	bl	8015760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80163bc:	480c      	ldr	r0, [pc, #48]	; (80163f0 <prvAddNewTaskToReadyList+0x100>)
 80163be:	f7ff f9cf 	bl	8015760 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80163c2:	4b0c      	ldr	r3, [pc, #48]	; (80163f4 <prvAddNewTaskToReadyList+0x104>)
 80163c4:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80163c8:	4b0b      	ldr	r3, [pc, #44]	; (80163f8 <prvAddNewTaskToReadyList+0x108>)
 80163ca:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80163cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 80163ce:	e7a2      	b.n	8016316 <prvAddNewTaskToReadyList+0x26>
 80163d0:	200063e0 	.word	0x200063e0
 80163d4:	20006348 	.word	0x20006348
 80163d8:	2000643c 	.word	0x2000643c
 80163dc:	200063f0 	.word	0x200063f0
 80163e0:	200063f4 	.word	0x200063f4
 80163e4:	2000640c 	.word	0x2000640c
 80163e8:	20006428 	.word	0x20006428
 80163ec:	20006454 	.word	0x20006454
 80163f0:	20006440 	.word	0x20006440
 80163f4:	2000634c 	.word	0x2000634c
 80163f8:	20006350 	.word	0x20006350
 80163fc:	20006354 	.word	0x20006354
 8016400:	200063f8 	.word	0x200063f8

08016404 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016406:	4b1b      	ldr	r3, [pc, #108]	; (8016474 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8016408:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801640a:	4e1b      	ldr	r6, [pc, #108]	; (8016478 <prvAddCurrentTaskToDelayedList+0x74>)
{
 801640c:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 801640e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016410:	6833      	ldr	r3, [r6, #0]
 8016412:	1d18      	adds	r0, r3, #4
 8016414:	f7ff f9dc 	bl	80157d0 <uxListRemove>
 8016418:	b948      	cbnz	r0, 801642e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801641a:	6833      	ldr	r3, [r6, #0]
 801641c:	4917      	ldr	r1, [pc, #92]	; (801647c <prvAddCurrentTaskToDelayedList+0x78>)
 801641e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016420:	2301      	movs	r3, #1
 8016422:	fa03 f202 	lsl.w	r2, r3, r2
 8016426:	680b      	ldr	r3, [r1, #0]
 8016428:	ea23 0302 	bic.w	r3, r3, r2
 801642c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801642e:	1c63      	adds	r3, r4, #1
 8016430:	d100      	bne.n	8016434 <prvAddCurrentTaskToDelayedList+0x30>
 8016432:	b9bf      	cbnz	r7, 8016464 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016434:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016436:	6833      	ldr	r3, [r6, #0]
 8016438:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 801643a:	d307      	bcc.n	801644c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801643c:	4b10      	ldr	r3, [pc, #64]	; (8016480 <prvAddCurrentTaskToDelayedList+0x7c>)
 801643e:	6818      	ldr	r0, [r3, #0]
 8016440:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016446:	3104      	adds	r1, #4
 8016448:	f7ff b9aa 	b.w	80157a0 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801644c:	4b0d      	ldr	r3, [pc, #52]	; (8016484 <prvAddCurrentTaskToDelayedList+0x80>)
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	6831      	ldr	r1, [r6, #0]
 8016452:	3104      	adds	r1, #4
 8016454:	f7ff f9a4 	bl	80157a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016458:	4b0b      	ldr	r3, [pc, #44]	; (8016488 <prvAddCurrentTaskToDelayedList+0x84>)
 801645a:	681a      	ldr	r2, [r3, #0]
 801645c:	42a2      	cmp	r2, r4
 801645e:	d900      	bls.n	8016462 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8016460:	601c      	str	r4, [r3, #0]
}
 8016462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016464:	6831      	ldr	r1, [r6, #0]
 8016466:	4809      	ldr	r0, [pc, #36]	; (801648c <prvAddCurrentTaskToDelayedList+0x88>)
 8016468:	3104      	adds	r1, #4
}
 801646a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801646e:	f7ff b987 	b.w	8015780 <vListInsertEnd>
 8016472:	bf00      	nop
 8016474:	20006468 	.word	0x20006468
 8016478:	20006348 	.word	0x20006348
 801647c:	200063f4 	.word	0x200063f4
 8016480:	20006350 	.word	0x20006350
 8016484:	2000634c 	.word	0x2000634c
 8016488:	20006420 	.word	0x20006420
 801648c:	20006440 	.word	0x20006440

08016490 <prvDeleteTCB>:
	{
 8016490:	b510      	push	{r4, lr}
 8016492:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8016494:	304c      	adds	r0, #76	; 0x4c
 8016496:	f00f f86d 	bl	8025574 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801649a:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 801649e:	b173      	cbz	r3, 80164be <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d015      	beq.n	80164d0 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80164a4:	2b02      	cmp	r3, #2
 80164a6:	d012      	beq.n	80164ce <prvDeleteTCB+0x3e>
	__asm volatile
 80164a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80164ac:	b672      	cpsid	i
 80164ae:	f383 8811 	msr	BASEPRI, r3
 80164b2:	f3bf 8f6f 	isb	sy
 80164b6:	f3bf 8f4f 	dsb	sy
 80164ba:	b662      	cpsie	i
 80164bc:	e7fe      	b.n	80164bc <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 80164be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80164c0:	f001 fb4e 	bl	8017b60 <vPortFree>
				vPortFree( pxTCB );
 80164c4:	4620      	mov	r0, r4
	}
 80164c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80164ca:	f001 bb49 	b.w	8017b60 <vPortFree>
	}
 80164ce:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 80164d0:	4620      	mov	r0, r4
	}
 80164d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80164d6:	f001 bb43 	b.w	8017b60 <vPortFree>
 80164da:	bf00      	nop

080164dc <prvIdleTask>:
{
 80164dc:	4c16      	ldr	r4, [pc, #88]	; (8016538 <prvIdleTask+0x5c>)
				taskYIELD();
 80164de:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80164e2:	4e16      	ldr	r6, [pc, #88]	; (801653c <prvIdleTask+0x60>)
 80164e4:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 80164e8:	4d15      	ldr	r5, [pc, #84]	; (8016540 <prvIdleTask+0x64>)
 80164ea:	f8df a058 	ldr.w	sl, [pc, #88]	; 8016544 <prvIdleTask+0x68>
{
 80164ee:	b580      	push	{r7, lr}
 80164f0:	e011      	b.n	8016516 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80164f2:	f001 f92f 	bl	8017754 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164f6:	68f3      	ldr	r3, [r6, #12]
 80164f8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164fa:	1d38      	adds	r0, r7, #4
 80164fc:	f7ff f968 	bl	80157d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8016500:	682b      	ldr	r3, [r5, #0]
 8016502:	3b01      	subs	r3, #1
 8016504:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	3b01      	subs	r3, #1
 801650a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 801650c:	f001 f948 	bl	80177a0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8016510:	4638      	mov	r0, r7
 8016512:	f7ff ffbd 	bl	8016490 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d1ea      	bne.n	80164f2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801651c:	f8da 3000 	ldr.w	r3, [sl]
 8016520:	2b01      	cmp	r3, #1
 8016522:	d905      	bls.n	8016530 <prvIdleTask+0x54>
				taskYIELD();
 8016524:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8016528:	f3bf 8f4f 	dsb	sy
 801652c:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8016530:	f7ea fe80 	bl	8001234 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016534:	e7ef      	b.n	8016516 <prvIdleTask+0x3a>
 8016536:	bf00      	nop
 8016538:	200063e4 	.word	0x200063e4
 801653c:	20006454 	.word	0x20006454
 8016540:	200063e0 	.word	0x200063e0
 8016544:	20006354 	.word	0x20006354

08016548 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8016548:	4b1d      	ldr	r3, [pc, #116]	; (80165c0 <vTaskSwitchContext.part.0+0x78>)
 801654a:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 801654c:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 801654e:	4c1d      	ldr	r4, [pc, #116]	; (80165c4 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8016550:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016552:	6822      	ldr	r2, [r4, #0]
 8016554:	6823      	ldr	r3, [r4, #0]
 8016556:	6812      	ldr	r2, [r2, #0]
 8016558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801655a:	429a      	cmp	r2, r3
 801655c:	d927      	bls.n	80165ae <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801655e:	4b1a      	ldr	r3, [pc, #104]	; (80165c8 <vTaskSwitchContext.part.0+0x80>)
 8016560:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016562:	fab3 f383 	clz	r3, r3
 8016566:	b2db      	uxtb	r3, r3
 8016568:	4a18      	ldr	r2, [pc, #96]	; (80165cc <vTaskSwitchContext.part.0+0x84>)
 801656a:	f1c3 031f 	rsb	r3, r3, #31
 801656e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016572:	0099      	lsls	r1, r3, #2
 8016574:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016578:	5850      	ldr	r0, [r2, r1]
 801657a:	b950      	cbnz	r0, 8016592 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 801657c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016580:	b672      	cpsid	i
 8016582:	f383 8811 	msr	BASEPRI, r3
 8016586:	f3bf 8f6f 	isb	sy
 801658a:	f3bf 8f4f 	dsb	sy
 801658e:	b662      	cpsie	i
 8016590:	e7fe      	b.n	8016590 <vTaskSwitchContext.part.0+0x48>
 8016592:	6858      	ldr	r0, [r3, #4]
 8016594:	3108      	adds	r1, #8
 8016596:	6840      	ldr	r0, [r0, #4]
 8016598:	440a      	add	r2, r1
 801659a:	4290      	cmp	r0, r2
 801659c:	6058      	str	r0, [r3, #4]
 801659e:	d00c      	beq.n	80165ba <vTaskSwitchContext.part.0+0x72>
 80165a0:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165a2:	4a0b      	ldr	r2, [pc, #44]	; (80165d0 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165a4:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80165a6:	6823      	ldr	r3, [r4, #0]
 80165a8:	334c      	adds	r3, #76	; 0x4c
 80165aa:	6013      	str	r3, [r2, #0]
}
 80165ac:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 80165ae:	6820      	ldr	r0, [r4, #0]
 80165b0:	6821      	ldr	r1, [r4, #0]
 80165b2:	3134      	adds	r1, #52	; 0x34
 80165b4:	f7ea fe40 	bl	8001238 <vApplicationStackOverflowHook>
 80165b8:	e7d1      	b.n	801655e <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165ba:	6840      	ldr	r0, [r0, #4]
 80165bc:	6058      	str	r0, [r3, #4]
 80165be:	e7ef      	b.n	80165a0 <vTaskSwitchContext.part.0+0x58>
 80165c0:	2000646c 	.word	0x2000646c
 80165c4:	20006348 	.word	0x20006348
 80165c8:	200063f4 	.word	0x200063f4
 80165cc:	20006354 	.word	0x20006354
 80165d0:	20000490 	.word	0x20000490

080165d4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80165d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80165da:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80165dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80165e0:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80165e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80165e4:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80165e6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80165ea:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80165ee:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80165f2:	2900      	cmp	r1, #0
 80165f4:	d041      	beq.n	801667a <prvInitialiseNewTask.constprop.0+0xa6>
 80165f6:	f101 3cff 	add.w	ip, r1, #4294967295
 80165fa:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80165fe:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016600:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 8016604:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8016608:	b10d      	cbz	r5, 801660e <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801660a:	458c      	cmp	ip, r1
 801660c:	d1f8      	bne.n	8016600 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801660e:	2300      	movs	r3, #0
 8016610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016614:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 8016616:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801661a:	1d20      	adds	r0, r4, #4
 801661c:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 801661e:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 8016622:	bf28      	it	cs
 8016624:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8016626:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8016628:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801662a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801662e:	f7ff f8a3 	bl	8015778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016632:	f104 0018 	add.w	r0, r4, #24
 8016636:	f7ff f89f 	bl	8015778 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801663a:	4651      	mov	r1, sl
 801663c:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 801663e:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016642:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016646:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016648:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801664a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801664c:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016650:	f00d ff02 	bl	8024458 <memset>
 8016654:	4b0a      	ldr	r3, [pc, #40]	; (8016680 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016656:	464a      	mov	r2, r9
 8016658:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801665a:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801665c:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801665e:	4b09      	ldr	r3, [pc, #36]	; (8016684 <prvInitialiseNewTask.constprop.0+0xb0>)
 8016660:	6563      	str	r3, [r4, #84]	; 0x54
 8016662:	4b09      	ldr	r3, [pc, #36]	; (8016688 <prvInitialiseNewTask.constprop.0+0xb4>)
 8016664:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016666:	f001 f847 	bl	80176f8 <pxPortInitialiseStack>
 801666a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801666c:	f1b8 0f00 	cmp.w	r8, #0
 8016670:	d001      	beq.n	8016676 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016672:	f8c8 4000 	str.w	r4, [r8]
}
 8016676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801667a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 801667e:	e7c9      	b.n	8016614 <prvInitialiseNewTask.constprop.0+0x40>
 8016680:	08045cd4 	.word	0x08045cd4
 8016684:	08045cf4 	.word	0x08045cf4
 8016688:	08045cb4 	.word	0x08045cb4

0801668c <xTaskCreateStatic>:
	{
 801668c:	b530      	push	{r4, r5, lr}
 801668e:	b087      	sub	sp, #28
 8016690:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8016692:	b1e4      	cbz	r4, 80166ce <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8016694:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016696:	b17d      	cbz	r5, 80166b8 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8016698:	25b4      	movs	r5, #180	; 0xb4
 801669a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801669c:	9d05      	ldr	r5, [sp, #20]
 801669e:	2db4      	cmp	r5, #180	; 0xb4
 80166a0:	d020      	beq.n	80166e4 <xTaskCreateStatic+0x58>
 80166a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166a6:	b672      	cpsid	i
 80166a8:	f383 8811 	msr	BASEPRI, r3
 80166ac:	f3bf 8f6f 	isb	sy
 80166b0:	f3bf 8f4f 	dsb	sy
 80166b4:	b662      	cpsie	i
 80166b6:	e7fe      	b.n	80166b6 <xTaskCreateStatic+0x2a>
 80166b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166bc:	b672      	cpsid	i
 80166be:	f383 8811 	msr	BASEPRI, r3
 80166c2:	f3bf 8f6f 	isb	sy
 80166c6:	f3bf 8f4f 	dsb	sy
 80166ca:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80166cc:	e7fe      	b.n	80166cc <xTaskCreateStatic+0x40>
 80166ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166d2:	b672      	cpsid	i
 80166d4:	f383 8811 	msr	BASEPRI, r3
 80166d8:	f3bf 8f6f 	isb	sy
 80166dc:	f3bf 8f4f 	dsb	sy
 80166e0:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80166e2:	e7fe      	b.n	80166e2 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80166e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166e6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80166e8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80166ea:	9502      	str	r5, [sp, #8]
 80166ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80166ee:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80166f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80166f2:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80166f6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80166f8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80166fa:	9401      	str	r4, [sp, #4]
 80166fc:	f7ff ff6a 	bl	80165d4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016700:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016702:	f7ff fdf5 	bl	80162f0 <prvAddNewTaskToReadyList>
	}
 8016706:	9804      	ldr	r0, [sp, #16]
 8016708:	b007      	add	sp, #28
 801670a:	bd30      	pop	{r4, r5, pc}

0801670c <xTaskCreate>:
	{
 801670c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016710:	4607      	mov	r7, r0
 8016712:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016714:	0090      	lsls	r0, r2, #2
	{
 8016716:	4615      	mov	r5, r2
 8016718:	4688      	mov	r8, r1
 801671a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801671c:	f001 f984 	bl	8017a28 <pvPortMalloc>
			if( pxStack != NULL )
 8016720:	b1d8      	cbz	r0, 801675a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016722:	4604      	mov	r4, r0
 8016724:	20b4      	movs	r0, #180	; 0xb4
 8016726:	f001 f97f 	bl	8017a28 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801672a:	4606      	mov	r6, r0
 801672c:	b1d0      	cbz	r0, 8016764 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 801672e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016730:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016732:	464b      	mov	r3, r9
 8016734:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016736:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801673a:	4641      	mov	r1, r8
 801673c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801673e:	4638      	mov	r0, r7
 8016740:	9602      	str	r6, [sp, #8]
 8016742:	9401      	str	r4, [sp, #4]
 8016744:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016746:	9400      	str	r4, [sp, #0]
 8016748:	f7ff ff44 	bl	80165d4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801674c:	4630      	mov	r0, r6
 801674e:	f7ff fdcf 	bl	80162f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016752:	2001      	movs	r0, #1
	}
 8016754:	b005      	add	sp, #20
 8016756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801675a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801675e:	b005      	add	sp, #20
 8016760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8016764:	4620      	mov	r0, r4
 8016766:	f001 f9fb 	bl	8017b60 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801676a:	f04f 30ff 	mov.w	r0, #4294967295
 801676e:	e7f1      	b.n	8016754 <xTaskCreate+0x48>

08016770 <vTaskStartScheduler>:
{
 8016770:	b510      	push	{r4, lr}
 8016772:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016774:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016776:	aa07      	add	r2, sp, #28
 8016778:	a906      	add	r1, sp, #24
 801677a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801677c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016780:	f7ea fd5e 	bl	8001240 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016784:	4623      	mov	r3, r4
 8016786:	9a07      	ldr	r2, [sp, #28]
 8016788:	9400      	str	r4, [sp, #0]
 801678a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801678e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016792:	491a      	ldr	r1, [pc, #104]	; (80167fc <vTaskStartScheduler+0x8c>)
 8016794:	481a      	ldr	r0, [pc, #104]	; (8016800 <vTaskStartScheduler+0x90>)
 8016796:	f7ff ff79 	bl	801668c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801679a:	b1f8      	cbz	r0, 80167dc <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801679c:	f000 fcfa 	bl	8017194 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80167a0:	2801      	cmp	r0, #1
 80167a2:	d11d      	bne.n	80167e0 <vTaskStartScheduler+0x70>
 80167a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167a8:	b672      	cpsid	i
 80167aa:	f383 8811 	msr	BASEPRI, r3
 80167ae:	f3bf 8f6f 	isb	sy
 80167b2:	f3bf 8f4f 	dsb	sy
 80167b6:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80167b8:	4b12      	ldr	r3, [pc, #72]	; (8016804 <vTaskStartScheduler+0x94>)
 80167ba:	4a13      	ldr	r2, [pc, #76]	; (8016808 <vTaskStartScheduler+0x98>)
 80167bc:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80167be:	4913      	ldr	r1, [pc, #76]	; (801680c <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80167c0:	334c      	adds	r3, #76	; 0x4c
 80167c2:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80167c4:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 80167c8:	4a11      	ldr	r2, [pc, #68]	; (8016810 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80167ca:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167cc:	4b11      	ldr	r3, [pc, #68]	; (8016814 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 80167ce:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80167d0:	601c      	str	r4, [r3, #0]
}
 80167d2:	b008      	add	sp, #32
 80167d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80167d8:	f001 b858 	b.w	801788c <xPortStartScheduler>
}
 80167dc:	b008      	add	sp, #32
 80167de:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80167e0:	3001      	adds	r0, #1
 80167e2:	d1fb      	bne.n	80167dc <vTaskStartScheduler+0x6c>
 80167e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167e8:	b672      	cpsid	i
 80167ea:	f383 8811 	msr	BASEPRI, r3
 80167ee:	f3bf 8f6f 	isb	sy
 80167f2:	f3bf 8f4f 	dsb	sy
 80167f6:	b662      	cpsie	i
 80167f8:	e7fe      	b.n	80167f8 <vTaskStartScheduler+0x88>
 80167fa:	bf00      	nop
 80167fc:	0802cd40 	.word	0x0802cd40
 8016800:	080164dd 	.word	0x080164dd
 8016804:	20006348 	.word	0x20006348
 8016808:	20000490 	.word	0x20000490
 801680c:	20006420 	.word	0x20006420
 8016810:	2000643c 	.word	0x2000643c
 8016814:	20006468 	.word	0x20006468

08016818 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8016818:	4a02      	ldr	r2, [pc, #8]	; (8016824 <vTaskSuspendAll+0xc>)
 801681a:	6813      	ldr	r3, [r2, #0]
 801681c:	3301      	adds	r3, #1
 801681e:	6013      	str	r3, [r2, #0]
}
 8016820:	4770      	bx	lr
 8016822:	bf00      	nop
 8016824:	200063ec 	.word	0x200063ec

08016828 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8016828:	4b01      	ldr	r3, [pc, #4]	; (8016830 <xTaskGetTickCount+0x8>)
 801682a:	6818      	ldr	r0, [r3, #0]
}
 801682c:	4770      	bx	lr
 801682e:	bf00      	nop
 8016830:	20006468 	.word	0x20006468

08016834 <xTaskGetTickCountFromISR>:
{
 8016834:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016836:	f001 f893 	bl	8017960 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801683a:	4b01      	ldr	r3, [pc, #4]	; (8016840 <xTaskGetTickCountFromISR+0xc>)
 801683c:	6818      	ldr	r0, [r3, #0]
}
 801683e:	bd08      	pop	{r3, pc}
 8016840:	20006468 	.word	0x20006468

08016844 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016844:	4b52      	ldr	r3, [pc, #328]	; (8016990 <xTaskIncrementTick+0x14c>)
 8016846:	681b      	ldr	r3, [r3, #0]
{
 8016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801684e:	2b00      	cmp	r3, #0
 8016850:	d14c      	bne.n	80168ec <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016852:	4b50      	ldr	r3, [pc, #320]	; (8016994 <xTaskIncrementTick+0x150>)
 8016854:	681d      	ldr	r5, [r3, #0]
 8016856:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8016858:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801685a:	2d00      	cmp	r5, #0
 801685c:	d054      	beq.n	8016908 <xTaskIncrementTick+0xc4>
 801685e:	4b4e      	ldr	r3, [pc, #312]	; (8016998 <xTaskIncrementTick+0x154>)
 8016860:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016862:	9b01      	ldr	r3, [sp, #4]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	42ab      	cmp	r3, r5
 8016868:	d85d      	bhi.n	8016926 <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801686a:	4e4c      	ldr	r6, [pc, #304]	; (801699c <xTaskIncrementTick+0x158>)
 801686c:	6833      	ldr	r3, [r6, #0]
 801686e:	681c      	ldr	r4, [r3, #0]
 8016870:	2c00      	cmp	r4, #0
 8016872:	d07c      	beq.n	801696e <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8016874:	2400      	movs	r4, #0
 8016876:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80169b4 <xTaskIncrementTick+0x170>
 801687a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 80169b8 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 801687e:	f04f 0a01 	mov.w	sl, #1
 8016882:	4f47      	ldr	r7, [pc, #284]	; (80169a0 <xTaskIncrementTick+0x15c>)
 8016884:	e024      	b.n	80168d0 <xTaskIncrementTick+0x8c>
 8016886:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016888:	f7fe ffa2 	bl	80157d0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801688c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016890:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016894:	9900      	ldr	r1, [sp, #0]
 8016896:	b112      	cbz	r2, 801689e <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016898:	f7fe ff9a 	bl	80157d0 <uxListRemove>
 801689c:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 801689e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 80168a2:	683b      	ldr	r3, [r7, #0]
 80168a4:	fa0a f200 	lsl.w	r2, sl, r0
 80168a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80168ac:	431a      	orrs	r2, r3
 80168ae:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80168b2:	603a      	str	r2, [r7, #0]
 80168b4:	f7fe ff64 	bl	8015780 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80168b8:	f8d9 3000 	ldr.w	r3, [r9]
 80168bc:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80168c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80168c2:	429a      	cmp	r2, r3
 80168c4:	bf28      	it	cs
 80168c6:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80168c8:	6833      	ldr	r3, [r6, #0]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d052      	beq.n	8016976 <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80168d0:	6833      	ldr	r3, [r6, #0]
 80168d2:	68db      	ldr	r3, [r3, #12]
 80168d4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80168d8:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168dc:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80168e0:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168e2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80168e4:	d2cf      	bcs.n	8016886 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 80168e6:	9b01      	ldr	r3, [sp, #4]
 80168e8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80168ea:	e021      	b.n	8016930 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 80168ec:	4a2d      	ldr	r2, [pc, #180]	; (80169a4 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 80168ee:	2400      	movs	r4, #0
		++uxPendedTicks;
 80168f0:	6813      	ldr	r3, [r2, #0]
 80168f2:	3301      	adds	r3, #1
 80168f4:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80168f6:	4b2c      	ldr	r3, [pc, #176]	; (80169a8 <xTaskIncrementTick+0x164>)
 80168f8:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80168fa:	2b00      	cmp	r3, #0
}
 80168fc:	bf0c      	ite	eq
 80168fe:	4620      	moveq	r0, r4
 8016900:	2001      	movne	r0, #1
 8016902:	b003      	add	sp, #12
 8016904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8016908:	4b24      	ldr	r3, [pc, #144]	; (801699c <xTaskIncrementTick+0x158>)
 801690a:	681a      	ldr	r2, [r3, #0]
 801690c:	6812      	ldr	r2, [r2, #0]
 801690e:	b1da      	cbz	r2, 8016948 <xTaskIncrementTick+0x104>
 8016910:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016914:	b672      	cpsid	i
 8016916:	f383 8811 	msr	BASEPRI, r3
 801691a:	f3bf 8f6f 	isb	sy
 801691e:	f3bf 8f4f 	dsb	sy
 8016922:	b662      	cpsie	i
 8016924:	e7fe      	b.n	8016924 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 8016926:	2400      	movs	r4, #0
 8016928:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80169b4 <xTaskIncrementTick+0x170>
 801692c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80169b8 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016930:	f8d9 3000 	ldr.w	r3, [r9]
 8016934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016936:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801693a:	009b      	lsls	r3, r3, #2
 801693c:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8016940:	2b02      	cmp	r3, #2
 8016942:	bf28      	it	cs
 8016944:	2401      	movcs	r4, #1
 8016946:	e7d6      	b.n	80168f6 <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8016948:	4a18      	ldr	r2, [pc, #96]	; (80169ac <xTaskIncrementTick+0x168>)
 801694a:	6818      	ldr	r0, [r3, #0]
 801694c:	6811      	ldr	r1, [r2, #0]
 801694e:	6019      	str	r1, [r3, #0]
 8016950:	4917      	ldr	r1, [pc, #92]	; (80169b0 <xTaskIncrementTick+0x16c>)
 8016952:	6010      	str	r0, [r2, #0]
 8016954:	680a      	ldr	r2, [r1, #0]
 8016956:	3201      	adds	r2, #1
 8016958:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801695a:	681a      	ldr	r2, [r3, #0]
 801695c:	6812      	ldr	r2, [r2, #0]
 801695e:	b97a      	cbnz	r2, 8016980 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8016960:	4b0d      	ldr	r3, [pc, #52]	; (8016998 <xTaskIncrementTick+0x154>)
 8016962:	461a      	mov	r2, r3
 8016964:	9301      	str	r3, [sp, #4]
 8016966:	f04f 33ff 	mov.w	r3, #4294967295
 801696a:	6013      	str	r3, [r2, #0]
 801696c:	e779      	b.n	8016862 <xTaskIncrementTick+0x1e>
 801696e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 80169b4 <xTaskIncrementTick+0x170>
 8016972:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80169b8 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016976:	f04f 33ff 	mov.w	r3, #4294967295
 801697a:	9a01      	ldr	r2, [sp, #4]
 801697c:	6013      	str	r3, [r2, #0]
					break;
 801697e:	e7d7      	b.n	8016930 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016980:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016982:	4a05      	ldr	r2, [pc, #20]	; (8016998 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016984:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016986:	9201      	str	r2, [sp, #4]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	685b      	ldr	r3, [r3, #4]
 801698c:	6013      	str	r3, [r2, #0]
}
 801698e:	e768      	b.n	8016862 <xTaskIncrementTick+0x1e>
 8016990:	200063ec 	.word	0x200063ec
 8016994:	20006468 	.word	0x20006468
 8016998:	20006420 	.word	0x20006420
 801699c:	2000634c 	.word	0x2000634c
 80169a0:	200063f4 	.word	0x200063f4
 80169a4:	200063e8 	.word	0x200063e8
 80169a8:	2000646c 	.word	0x2000646c
 80169ac:	20006350 	.word	0x20006350
 80169b0:	20006424 	.word	0x20006424
 80169b4:	20006354 	.word	0x20006354
 80169b8:	20006348 	.word	0x20006348

080169bc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80169bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169c0:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80169c2:	f000 fec7 	bl	8017754 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80169c6:	4b38      	ldr	r3, [pc, #224]	; (8016aa8 <xTaskResumeAll.part.0+0xec>)
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	3a01      	subs	r2, #1
 80169cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d159      	bne.n	8016a88 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80169d4:	4b35      	ldr	r3, [pc, #212]	; (8016aac <xTaskResumeAll.part.0+0xf0>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d055      	beq.n	8016a88 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80169dc:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016ac4 <xTaskResumeAll.part.0+0x108>
 80169e0:	f8da 3000 	ldr.w	r3, [sl]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d05c      	beq.n	8016aa2 <xTaskResumeAll.part.0+0xe6>
 80169e8:	4d31      	ldr	r5, [pc, #196]	; (8016ab0 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 80169ea:	2601      	movs	r6, #1
 80169ec:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8016ac8 <xTaskResumeAll.part.0+0x10c>
 80169f0:	4f30      	ldr	r7, [pc, #192]	; (8016ab4 <xTaskResumeAll.part.0+0xf8>)
 80169f2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8016acc <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80169f6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80169fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80169fc:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016a00:	f104 0018 	add.w	r0, r4, #24
 8016a04:	f7fe fee4 	bl	80157d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016a08:	4658      	mov	r0, fp
 8016a0a:	f7fe fee1 	bl	80157d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016a0e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016a10:	682a      	ldr	r2, [r5, #0]
 8016a12:	4659      	mov	r1, fp
 8016a14:	fa06 f300 	lsl.w	r3, r6, r0
 8016a18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016a1c:	4313      	orrs	r3, r2
 8016a1e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016a22:	602b      	str	r3, [r5, #0]
 8016a24:	f7fe feac 	bl	8015780 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016a28:	683b      	ldr	r3, [r7, #0]
 8016a2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d301      	bcc.n	8016a36 <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8016a32:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016a36:	f8da 3000 	ldr.w	r3, [sl]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d1db      	bne.n	80169f6 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016a3e:	4b1e      	ldr	r3, [pc, #120]	; (8016ab8 <xTaskResumeAll.part.0+0xfc>)
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	6812      	ldr	r2, [r2, #0]
 8016a44:	b342      	cbz	r2, 8016a98 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a46:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a48:	4b1c      	ldr	r3, [pc, #112]	; (8016abc <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016a4a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016a4c:	68d2      	ldr	r2, [r2, #12]
 8016a4e:	6852      	ldr	r2, [r2, #4]
 8016a50:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016a52:	4e1b      	ldr	r6, [pc, #108]	; (8016ac0 <xTaskResumeAll.part.0+0x104>)
 8016a54:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016a56:	b144      	cbz	r4, 8016a6a <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8016a58:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 8016a5a:	f7ff fef3 	bl	8016844 <xTaskIncrementTick>
 8016a5e:	b108      	cbz	r0, 8016a64 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8016a60:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016a64:	3c01      	subs	r4, #1
 8016a66:	d1f8      	bne.n	8016a5a <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8016a68:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8016a6a:	f8d9 3000 	ldr.w	r3, [r9]
 8016a6e:	b15b      	cbz	r3, 8016a88 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8016a70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016a7c:	f3bf 8f4f 	dsb	sy
 8016a80:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8016a84:	2001      	movs	r0, #1
 8016a86:	e000      	b.n	8016a8a <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8016a88:	2000      	movs	r0, #0
 8016a8a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016a8c:	f000 fe88 	bl	80177a0 <vPortExitCritical>
}
 8016a90:	9801      	ldr	r0, [sp, #4]
 8016a92:	b003      	add	sp, #12
 8016a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8016a98:	4b08      	ldr	r3, [pc, #32]	; (8016abc <xTaskResumeAll.part.0+0x100>)
 8016a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a9e:	601a      	str	r2, [r3, #0]
 8016aa0:	e7d7      	b.n	8016a52 <xTaskResumeAll.part.0+0x96>
 8016aa2:	f8df 9028 	ldr.w	r9, [pc, #40]	; 8016acc <xTaskResumeAll.part.0+0x110>
 8016aa6:	e7d4      	b.n	8016a52 <xTaskResumeAll.part.0+0x96>
 8016aa8:	200063ec 	.word	0x200063ec
 8016aac:	200063e0 	.word	0x200063e0
 8016ab0:	200063f4 	.word	0x200063f4
 8016ab4:	20006348 	.word	0x20006348
 8016ab8:	2000634c 	.word	0x2000634c
 8016abc:	20006420 	.word	0x20006420
 8016ac0:	200063e8 	.word	0x200063e8
 8016ac4:	20006428 	.word	0x20006428
 8016ac8:	20006354 	.word	0x20006354
 8016acc:	2000646c 	.word	0x2000646c

08016ad0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8016ad0:	4b07      	ldr	r3, [pc, #28]	; (8016af0 <xTaskResumeAll+0x20>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	b953      	cbnz	r3, 8016aec <xTaskResumeAll+0x1c>
 8016ad6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ada:	b672      	cpsid	i
 8016adc:	f383 8811 	msr	BASEPRI, r3
 8016ae0:	f3bf 8f6f 	isb	sy
 8016ae4:	f3bf 8f4f 	dsb	sy
 8016ae8:	b662      	cpsie	i
 8016aea:	e7fe      	b.n	8016aea <xTaskResumeAll+0x1a>
 8016aec:	f7ff bf66 	b.w	80169bc <xTaskResumeAll.part.0>
 8016af0:	200063ec 	.word	0x200063ec

08016af4 <vTaskDelay>:
	{
 8016af4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8016af6:	b950      	cbnz	r0, 8016b0e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8016af8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b00:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b04:	f3bf 8f4f 	dsb	sy
 8016b08:	f3bf 8f6f 	isb	sy
	}
 8016b0c:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8016b0e:	4c12      	ldr	r4, [pc, #72]	; (8016b58 <vTaskDelay+0x64>)
 8016b10:	6821      	ldr	r1, [r4, #0]
 8016b12:	b151      	cbz	r1, 8016b2a <vTaskDelay+0x36>
 8016b14:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b18:	b672      	cpsid	i
 8016b1a:	f383 8811 	msr	BASEPRI, r3
 8016b1e:	f3bf 8f6f 	isb	sy
 8016b22:	f3bf 8f4f 	dsb	sy
 8016b26:	b662      	cpsie	i
 8016b28:	e7fe      	b.n	8016b28 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 8016b2a:	6823      	ldr	r3, [r4, #0]
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016b30:	f7ff fc68 	bl	8016404 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8016b34:	6823      	ldr	r3, [r4, #0]
 8016b36:	b953      	cbnz	r3, 8016b4e <vTaskDelay+0x5a>
 8016b38:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b3c:	b672      	cpsid	i
 8016b3e:	f383 8811 	msr	BASEPRI, r3
 8016b42:	f3bf 8f6f 	isb	sy
 8016b46:	f3bf 8f4f 	dsb	sy
 8016b4a:	b662      	cpsie	i
 8016b4c:	e7fe      	b.n	8016b4c <vTaskDelay+0x58>
 8016b4e:	f7ff ff35 	bl	80169bc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8016b52:	2800      	cmp	r0, #0
 8016b54:	d0d0      	beq.n	8016af8 <vTaskDelay+0x4>
	}
 8016b56:	bd10      	pop	{r4, pc}
 8016b58:	200063ec 	.word	0x200063ec

08016b5c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8016b5c:	4b04      	ldr	r3, [pc, #16]	; (8016b70 <vTaskSwitchContext+0x14>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	b11b      	cbz	r3, 8016b6a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8016b62:	4b04      	ldr	r3, [pc, #16]	; (8016b74 <vTaskSwitchContext+0x18>)
 8016b64:	2201      	movs	r2, #1
 8016b66:	601a      	str	r2, [r3, #0]
}
 8016b68:	4770      	bx	lr
 8016b6a:	f7ff bced 	b.w	8016548 <vTaskSwitchContext.part.0>
 8016b6e:	bf00      	nop
 8016b70:	200063ec 	.word	0x200063ec
 8016b74:	2000646c 	.word	0x2000646c

08016b78 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8016b78:	b160      	cbz	r0, 8016b94 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b7a:	4b0c      	ldr	r3, [pc, #48]	; (8016bac <vTaskPlaceOnEventList+0x34>)
{
 8016b7c:	b510      	push	{r4, lr}
 8016b7e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016b80:	6819      	ldr	r1, [r3, #0]
 8016b82:	3118      	adds	r1, #24
 8016b84:	f7fe fe0c 	bl	80157a0 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b88:	4620      	mov	r0, r4
 8016b8a:	2101      	movs	r1, #1
}
 8016b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016b90:	f7ff bc38 	b.w	8016404 <prvAddCurrentTaskToDelayedList>
 8016b94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b98:	b672      	cpsid	i
 8016b9a:	f383 8811 	msr	BASEPRI, r3
 8016b9e:	f3bf 8f6f 	isb	sy
 8016ba2:	f3bf 8f4f 	dsb	sy
 8016ba6:	b662      	cpsie	i
	configASSERT( pxEventList );
 8016ba8:	e7fe      	b.n	8016ba8 <vTaskPlaceOnEventList+0x30>
 8016baa:	bf00      	nop
 8016bac:	20006348 	.word	0x20006348

08016bb0 <vTaskPlaceOnEventListRestricted>:
	{
 8016bb0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8016bb2:	b180      	cbz	r0, 8016bd6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016bb4:	4b0d      	ldr	r3, [pc, #52]	; (8016bec <vTaskPlaceOnEventListRestricted+0x3c>)
 8016bb6:	460d      	mov	r5, r1
 8016bb8:	4614      	mov	r4, r2
 8016bba:	6819      	ldr	r1, [r3, #0]
 8016bbc:	3118      	adds	r1, #24
 8016bbe:	f7fe fddf 	bl	8015780 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8016bc2:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016bc4:	4621      	mov	r1, r4
 8016bc6:	bf0c      	ite	eq
 8016bc8:	4628      	moveq	r0, r5
 8016bca:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8016bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016bd2:	f7ff bc17 	b.w	8016404 <prvAddCurrentTaskToDelayedList>
 8016bd6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016bda:	b672      	cpsid	i
 8016bdc:	f383 8811 	msr	BASEPRI, r3
 8016be0:	f3bf 8f6f 	isb	sy
 8016be4:	f3bf 8f4f 	dsb	sy
 8016be8:	b662      	cpsie	i
		configASSERT( pxEventList );
 8016bea:	e7fe      	b.n	8016bea <vTaskPlaceOnEventListRestricted+0x3a>
 8016bec:	20006348 	.word	0x20006348

08016bf0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bf0:	68c3      	ldr	r3, [r0, #12]
{
 8016bf2:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016bf4:	68dc      	ldr	r4, [r3, #12]
{
 8016bf6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8016bf8:	b364      	cbz	r4, 8016c54 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016bfa:	f104 0518 	add.w	r5, r4, #24
 8016bfe:	4628      	mov	r0, r5
 8016c00:	f7fe fde6 	bl	80157d0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016c04:	4b1a      	ldr	r3, [pc, #104]	; (8016c70 <xTaskRemoveFromEventList+0x80>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	b17b      	cbz	r3, 8016c2a <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016c0a:	4629      	mov	r1, r5
 8016c0c:	4819      	ldr	r0, [pc, #100]	; (8016c74 <xTaskRemoveFromEventList+0x84>)
 8016c0e:	f7fe fdb7 	bl	8015780 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016c12:	4b19      	ldr	r3, [pc, #100]	; (8016c78 <xTaskRemoveFromEventList+0x88>)
 8016c14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d925      	bls.n	8016c6a <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8016c1e:	2301      	movs	r3, #1
 8016c20:	4a16      	ldr	r2, [pc, #88]	; (8016c7c <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 8016c22:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 8016c24:	6013      	str	r3, [r2, #0]
}
 8016c26:	b003      	add	sp, #12
 8016c28:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016c2a:	1d21      	adds	r1, r4, #4
 8016c2c:	4608      	mov	r0, r1
 8016c2e:	9101      	str	r1, [sp, #4]
 8016c30:	f7fe fdce 	bl	80157d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016c34:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016c36:	4a12      	ldr	r2, [pc, #72]	; (8016c80 <xTaskRemoveFromEventList+0x90>)
 8016c38:	2301      	movs	r3, #1
 8016c3a:	9901      	ldr	r1, [sp, #4]
 8016c3c:	6815      	ldr	r5, [r2, #0]
 8016c3e:	4083      	lsls	r3, r0
 8016c40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016c44:	432b      	orrs	r3, r5
 8016c46:	6013      	str	r3, [r2, #0]
 8016c48:	4b0e      	ldr	r3, [pc, #56]	; (8016c84 <xTaskRemoveFromEventList+0x94>)
 8016c4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016c4e:	f7fe fd97 	bl	8015780 <vListInsertEnd>
 8016c52:	e7de      	b.n	8016c12 <xTaskRemoveFromEventList+0x22>
 8016c54:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016c58:	b672      	cpsid	i
 8016c5a:	f383 8811 	msr	BASEPRI, r3
 8016c5e:	f3bf 8f6f 	isb	sy
 8016c62:	f3bf 8f4f 	dsb	sy
 8016c66:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8016c68:	e7fe      	b.n	8016c68 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8016c6a:	2000      	movs	r0, #0
}
 8016c6c:	b003      	add	sp, #12
 8016c6e:	bd30      	pop	{r4, r5, pc}
 8016c70:	200063ec 	.word	0x200063ec
 8016c74:	20006428 	.word	0x20006428
 8016c78:	20006348 	.word	0x20006348
 8016c7c:	2000646c 	.word	0x2000646c
 8016c80:	200063f4 	.word	0x200063f4
 8016c84:	20006354 	.word	0x20006354

08016c88 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c88:	4a03      	ldr	r2, [pc, #12]	; (8016c98 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c8a:	4b04      	ldr	r3, [pc, #16]	; (8016c9c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016c8c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	e9c0 2300 	strd	r2, r3, [r0]
}
 8016c94:	4770      	bx	lr
 8016c96:	bf00      	nop
 8016c98:	20006424 	.word	0x20006424
 8016c9c:	20006468 	.word	0x20006468

08016ca0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8016ca0:	b338      	cbz	r0, 8016cf2 <xTaskCheckForTimeOut+0x52>
{
 8016ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ca4:	460d      	mov	r5, r1
 8016ca6:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8016ca8:	b1c1      	cbz	r1, 8016cdc <xTaskCheckForTimeOut+0x3c>
 8016caa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8016cac:	f000 fd52 	bl	8017754 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8016cb0:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8016cb2:	4a1f      	ldr	r2, [pc, #124]	; (8016d30 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8016cb4:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8016cb6:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8016cb8:	d034      	beq.n	8016d24 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016cba:	f8df c078 	ldr.w	ip, [pc, #120]	; 8016d34 <xTaskCheckForTimeOut+0x94>
 8016cbe:	6826      	ldr	r6, [r4, #0]
 8016cc0:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016cc4:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016cc6:	42be      	cmp	r6, r7
 8016cc8:	d01e      	beq.n	8016d08 <xTaskCheckForTimeOut+0x68>
 8016cca:	4288      	cmp	r0, r1
 8016ccc:	d81c      	bhi.n	8016d08 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8016cce:	2001      	movs	r0, #1
 8016cd0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8016cd2:	f000 fd65 	bl	80177a0 <vPortExitCritical>
}
 8016cd6:	9801      	ldr	r0, [sp, #4]
 8016cd8:	b003      	add	sp, #12
 8016cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cdc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016ce0:	b672      	cpsid	i
 8016ce2:	f383 8811 	msr	BASEPRI, r3
 8016ce6:	f3bf 8f6f 	isb	sy
 8016cea:	f3bf 8f4f 	dsb	sy
 8016cee:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8016cf0:	e7fe      	b.n	8016cf0 <xTaskCheckForTimeOut+0x50>
 8016cf2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016cf6:	b672      	cpsid	i
 8016cf8:	f383 8811 	msr	BASEPRI, r3
 8016cfc:	f3bf 8f6f 	isb	sy
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8016d06:	e7fe      	b.n	8016d06 <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016d08:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016d0c:	4573      	cmp	r3, lr
 8016d0e:	d90b      	bls.n	8016d28 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 8016d10:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016d12:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016d16:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8016d18:	4403      	add	r3, r0
			xReturn = pdFALSE;
 8016d1a:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 8016d1c:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016d1e:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 8016d22:	e7d5      	b.n	8016cd0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 8016d24:	2000      	movs	r0, #0
 8016d26:	e7d3      	b.n	8016cd0 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 8016d28:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8016d2a:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 8016d2c:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8016d2e:	e7cf      	b.n	8016cd0 <xTaskCheckForTimeOut+0x30>
 8016d30:	20006468 	.word	0x20006468
 8016d34:	20006424 	.word	0x20006424

08016d38 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8016d38:	4b01      	ldr	r3, [pc, #4]	; (8016d40 <vTaskMissedYield+0x8>)
 8016d3a:	2201      	movs	r2, #1
 8016d3c:	601a      	str	r2, [r3, #0]
}
 8016d3e:	4770      	bx	lr
 8016d40:	2000646c 	.word	0x2000646c

08016d44 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8016d44:	4b01      	ldr	r3, [pc, #4]	; (8016d4c <xTaskGetCurrentTaskHandle+0x8>)
 8016d46:	6818      	ldr	r0, [r3, #0]
	}
 8016d48:	4770      	bx	lr
 8016d4a:	bf00      	nop
 8016d4c:	20006348 	.word	0x20006348

08016d50 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8016d50:	4b05      	ldr	r3, [pc, #20]	; (8016d68 <xTaskGetSchedulerState+0x18>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	b133      	cbz	r3, 8016d64 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016d56:	4b05      	ldr	r3, [pc, #20]	; (8016d6c <xTaskGetSchedulerState+0x1c>)
 8016d58:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8016d5a:	2b00      	cmp	r3, #0
 8016d5c:	bf0c      	ite	eq
 8016d5e:	2002      	moveq	r0, #2
 8016d60:	2000      	movne	r0, #0
 8016d62:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016d64:	2001      	movs	r0, #1
	}
 8016d66:	4770      	bx	lr
 8016d68:	2000643c 	.word	0x2000643c
 8016d6c:	200063ec 	.word	0x200063ec

08016d70 <xTaskPriorityInherit>:
	{
 8016d70:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8016d72:	4604      	mov	r4, r0
	{
 8016d74:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8016d76:	b1c8      	cbz	r0, 8016dac <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016d78:	4d26      	ldr	r5, [pc, #152]	; (8016e14 <xTaskPriorityInherit+0xa4>)
 8016d7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016d7c:	682a      	ldr	r2, [r5, #0]
 8016d7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016d80:	4293      	cmp	r3, r2
 8016d82:	d215      	bcs.n	8016db0 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016d84:	6982      	ldr	r2, [r0, #24]
 8016d86:	2a00      	cmp	r2, #0
 8016d88:	db04      	blt.n	8016d94 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016d8a:	682a      	ldr	r2, [r5, #0]
 8016d8c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016d8e:	f1c2 0207 	rsb	r2, r2, #7
 8016d92:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016d94:	4e20      	ldr	r6, [pc, #128]	; (8016e18 <xTaskPriorityInherit+0xa8>)
 8016d96:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016d9a:	6962      	ldr	r2, [r4, #20]
 8016d9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d00e      	beq.n	8016dc2 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016da4:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8016da6:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016daa:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8016dac:	b002      	add	sp, #8
 8016dae:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016db0:	682b      	ldr	r3, [r5, #0]
 8016db2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016db6:	4298      	cmp	r0, r3
 8016db8:	bf2c      	ite	cs
 8016dba:	2000      	movcs	r0, #0
 8016dbc:	2001      	movcc	r0, #1
	}
 8016dbe:	b002      	add	sp, #8
 8016dc0:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016dc2:	1d21      	adds	r1, r4, #4
 8016dc4:	4608      	mov	r0, r1
 8016dc6:	9101      	str	r1, [sp, #4]
 8016dc8:	f7fe fd02 	bl	80157d0 <uxListRemove>
 8016dcc:	9901      	ldr	r1, [sp, #4]
 8016dce:	b970      	cbnz	r0, 8016dee <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8016dd0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016dd2:	4a12      	ldr	r2, [pc, #72]	; (8016e1c <xTaskPriorityInherit+0xac>)
 8016dd4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8016dd8:	009b      	lsls	r3, r3, #2
 8016dda:	58f3      	ldr	r3, [r6, r3]
 8016ddc:	b943      	cbnz	r3, 8016df0 <xTaskPriorityInherit+0x80>
 8016dde:	2301      	movs	r3, #1
 8016de0:	fa03 f000 	lsl.w	r0, r3, r0
 8016de4:	6813      	ldr	r3, [r2, #0]
 8016de6:	ea23 0300 	bic.w	r3, r3, r0
 8016dea:	6013      	str	r3, [r2, #0]
 8016dec:	e000      	b.n	8016df0 <xTaskPriorityInherit+0x80>
 8016dee:	4a0b      	ldr	r2, [pc, #44]	; (8016e1c <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016df0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016df2:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016df8:	2401      	movs	r4, #1
 8016dfa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8016dfe:	fa04 f303 	lsl.w	r3, r4, r3
 8016e02:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8016e06:	432b      	orrs	r3, r5
 8016e08:	6013      	str	r3, [r2, #0]
 8016e0a:	f7fe fcb9 	bl	8015780 <vListInsertEnd>
				xReturn = pdTRUE;
 8016e0e:	4620      	mov	r0, r4
 8016e10:	e7cc      	b.n	8016dac <xTaskPriorityInherit+0x3c>
 8016e12:	bf00      	nop
 8016e14:	20006348 	.word	0x20006348
 8016e18:	20006354 	.word	0x20006354
 8016e1c:	200063f4 	.word	0x200063f4

08016e20 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8016e20:	b340      	cbz	r0, 8016e74 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 8016e22:	4b2c      	ldr	r3, [pc, #176]	; (8016ed4 <xTaskPriorityDisinherit+0xb4>)
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	4283      	cmp	r3, r0
	{
 8016e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e2a:	4604      	mov	r4, r0
 8016e2c:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8016e2e:	d00a      	beq.n	8016e46 <xTaskPriorityDisinherit+0x26>
 8016e30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e34:	b672      	cpsid	i
 8016e36:	f383 8811 	msr	BASEPRI, r3
 8016e3a:	f3bf 8f6f 	isb	sy
 8016e3e:	f3bf 8f4f 	dsb	sy
 8016e42:	b662      	cpsie	i
 8016e44:	e7fe      	b.n	8016e44 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8016e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016e48:	b14b      	cbz	r3, 8016e5e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016e4a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8016e4c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016e4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8016e50:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016e52:	4291      	cmp	r1, r2
 8016e54:	d000      	beq.n	8016e58 <xTaskPriorityDisinherit+0x38>
 8016e56:	b17b      	cbz	r3, 8016e78 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8016e58:	2000      	movs	r0, #0
	}
 8016e5a:	b003      	add	sp, #12
 8016e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e62:	b672      	cpsid	i
 8016e64:	f383 8811 	msr	BASEPRI, r3
 8016e68:	f3bf 8f6f 	isb	sy
 8016e6c:	f3bf 8f4f 	dsb	sy
 8016e70:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016e72:	e7fe      	b.n	8016e72 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8016e74:	2000      	movs	r0, #0
	}
 8016e76:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016e78:	1d01      	adds	r1, r0, #4
 8016e7a:	4608      	mov	r0, r1
 8016e7c:	9101      	str	r1, [sp, #4]
 8016e7e:	f7fe fca7 	bl	80157d0 <uxListRemove>
 8016e82:	9901      	ldr	r1, [sp, #4]
 8016e84:	b1a0      	cbz	r0, 8016eb0 <xTaskPriorityDisinherit+0x90>
 8016e86:	4814      	ldr	r0, [pc, #80]	; (8016ed8 <xTaskPriorityDisinherit+0xb8>)
 8016e88:	4a14      	ldr	r2, [pc, #80]	; (8016edc <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8016e8c:	2501      	movs	r5, #1
 8016e8e:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e90:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016e94:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e96:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016e98:	fa05 f403 	lsl.w	r4, r5, r3
 8016e9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016ea0:	4334      	orrs	r4, r6
 8016ea2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016ea6:	6014      	str	r4, [r2, #0]
 8016ea8:	f7fe fc6a 	bl	8015780 <vListInsertEnd>
					xReturn = pdTRUE;
 8016eac:	4628      	mov	r0, r5
		return xReturn;
 8016eae:	e7d4      	b.n	8016e5a <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016eb0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8016eb2:	4809      	ldr	r0, [pc, #36]	; (8016ed8 <xTaskPriorityDisinherit+0xb8>)
 8016eb4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8016eb8:	4a08      	ldr	r2, [pc, #32]	; (8016edc <xTaskPriorityDisinherit+0xbc>)
 8016eba:	009b      	lsls	r3, r3, #2
 8016ebc:	58c3      	ldr	r3, [r0, r3]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d1e3      	bne.n	8016e8a <xTaskPriorityDisinherit+0x6a>
 8016ec2:	2301      	movs	r3, #1
 8016ec4:	fa03 f505 	lsl.w	r5, r3, r5
 8016ec8:	6813      	ldr	r3, [r2, #0]
 8016eca:	ea23 0305 	bic.w	r3, r3, r5
 8016ece:	6013      	str	r3, [r2, #0]
 8016ed0:	e7db      	b.n	8016e8a <xTaskPriorityDisinherit+0x6a>
 8016ed2:	bf00      	nop
 8016ed4:	20006348 	.word	0x20006348
 8016ed8:	20006354 	.word	0x20006354
 8016edc:	200063f4 	.word	0x200063f4

08016ee0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d044      	beq.n	8016f6e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ee4:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 8016ee6:	b530      	push	{r4, r5, lr}
 8016ee8:	4604      	mov	r4, r0
 8016eea:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 8016eec:	b153      	cbz	r3, 8016f04 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016eee:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016ef0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016ef2:	4281      	cmp	r1, r0
 8016ef4:	bf38      	it	cc
 8016ef6:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016ef8:	428a      	cmp	r2, r1
 8016efa:	d001      	beq.n	8016f00 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d00c      	beq.n	8016f1a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 8016f00:	b003      	add	sp, #12
 8016f02:	bd30      	pop	{r4, r5, pc}
 8016f04:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f08:	b672      	cpsid	i
 8016f0a:	f383 8811 	msr	BASEPRI, r3
 8016f0e:	f3bf 8f6f 	isb	sy
 8016f12:	f3bf 8f4f 	dsb	sy
 8016f16:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016f18:	e7fe      	b.n	8016f18 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 8016f1a:	4b25      	ldr	r3, [pc, #148]	; (8016fb0 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 8016f1c:	681b      	ldr	r3, [r3, #0]
 8016f1e:	42a3      	cmp	r3, r4
 8016f20:	d026      	beq.n	8016f70 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f22:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8016f24:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	db02      	blt.n	8016f30 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f2a:	f1c1 0107 	rsb	r1, r1, #7
 8016f2e:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016f30:	4d20      	ldr	r5, [pc, #128]	; (8016fb4 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8016f32:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016f36:	6961      	ldr	r1, [r4, #20]
 8016f38:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8016f3c:	4299      	cmp	r1, r3
 8016f3e:	d1df      	bne.n	8016f00 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f40:	1d21      	adds	r1, r4, #4
 8016f42:	4608      	mov	r0, r1
 8016f44:	9101      	str	r1, [sp, #4]
 8016f46:	f7fe fc43 	bl	80157d0 <uxListRemove>
 8016f4a:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f4e:	b1d0      	cbz	r0, 8016f86 <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f50:	2301      	movs	r3, #1
 8016f52:	0090      	lsls	r0, r2, #2
 8016f54:	4c18      	ldr	r4, [pc, #96]	; (8016fb8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016f56:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8016f58:	4410      	add	r0, r2
 8016f5a:	6822      	ldr	r2, [r4, #0]
 8016f5c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8016f60:	4313      	orrs	r3, r2
 8016f62:	6023      	str	r3, [r4, #0]
	}
 8016f64:	b003      	add	sp, #12
 8016f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8016f6a:	f7fe bc09 	b.w	8015780 <vListInsertEnd>
 8016f6e:	4770      	bx	lr
 8016f70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016f74:	b672      	cpsid	i
 8016f76:	f383 8811 	msr	BASEPRI, r3
 8016f7a:	f3bf 8f6f 	isb	sy
 8016f7e:	f3bf 8f4f 	dsb	sy
 8016f82:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8016f84:	e7fe      	b.n	8016f84 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016f86:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8016f8a:	0090      	lsls	r0, r2, #2
 8016f8c:	009b      	lsls	r3, r3, #2
 8016f8e:	58eb      	ldr	r3, [r5, r3]
 8016f90:	b11b      	cbz	r3, 8016f9a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8016f92:	2301      	movs	r3, #1
 8016f94:	4c08      	ldr	r4, [pc, #32]	; (8016fb8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016f96:	4093      	lsls	r3, r2
 8016f98:	e7de      	b.n	8016f58 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016f9a:	4c07      	ldr	r4, [pc, #28]	; (8016fb8 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016f9c:	2301      	movs	r3, #1
 8016f9e:	f8d4 c000 	ldr.w	ip, [r4]
 8016fa2:	4093      	lsls	r3, r2
 8016fa4:	ea2c 0c03 	bic.w	ip, ip, r3
 8016fa8:	f8c4 c000 	str.w	ip, [r4]
 8016fac:	e7d4      	b.n	8016f58 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016fae:	bf00      	nop
 8016fb0:	20006348 	.word	0x20006348
 8016fb4:	20006354 	.word	0x20006354
 8016fb8:	200063f4 	.word	0x200063f4

08016fbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016fbc:	4b04      	ldr	r3, [pc, #16]	; (8016fd0 <pvTaskIncrementMutexHeldCount+0x14>)
 8016fbe:	681a      	ldr	r2, [r3, #0]
 8016fc0:	b11a      	cbz	r2, 8016fca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8016fc2:	6819      	ldr	r1, [r3, #0]
 8016fc4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016fc6:	3201      	adds	r2, #1
 8016fc8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8016fca:	6818      	ldr	r0, [r3, #0]
	}
 8016fcc:	4770      	bx	lr
 8016fce:	bf00      	nop
 8016fd0:	20006348 	.word	0x20006348

08016fd4 <ulTaskNotifyTake>:
	{
 8016fd4:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016fd6:	4c1a      	ldr	r4, [pc, #104]	; (8017040 <ulTaskNotifyTake+0x6c>)
	{
 8016fd8:	4606      	mov	r6, r0
 8016fda:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8016fdc:	f000 fbba 	bl	8017754 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016fe0:	6823      	ldr	r3, [r4, #0]
 8016fe2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016fe6:	b923      	cbnz	r3, 8016ff2 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016fe8:	6823      	ldr	r3, [r4, #0]
 8016fea:	2101      	movs	r1, #1
 8016fec:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8016ff0:	b9c5      	cbnz	r5, 8017024 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8016ff2:	f000 fbd5 	bl	80177a0 <vPortExitCritical>
		taskENTER_CRITICAL();
 8016ff6:	f000 fbad 	bl	8017754 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8016ffa:	6823      	ldr	r3, [r4, #0]
 8016ffc:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8017000:	b125      	cbz	r5, 801700c <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017002:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8017004:	b156      	cbz	r6, 801701c <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8017006:	2200      	movs	r2, #0
 8017008:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801700c:	6823      	ldr	r3, [r4, #0]
 801700e:	2200      	movs	r2, #0
 8017010:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8017014:	f000 fbc4 	bl	80177a0 <vPortExitCritical>
	}
 8017018:	4628      	mov	r0, r5
 801701a:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801701c:	1e6a      	subs	r2, r5, #1
 801701e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8017022:	e7f3      	b.n	801700c <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017024:	4628      	mov	r0, r5
 8017026:	f7ff f9ed 	bl	8016404 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 801702a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017032:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8017036:	f3bf 8f4f 	dsb	sy
 801703a:	f3bf 8f6f 	isb	sy
 801703e:	e7d8      	b.n	8016ff2 <ulTaskNotifyTake+0x1e>
 8017040:	20006348 	.word	0x20006348

08017044 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8017044:	b318      	cbz	r0, 801708e <vTaskNotifyGiveFromISR+0x4a>
	{
 8017046:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017048:	b083      	sub	sp, #12
 801704a:	4604      	mov	r4, r0
 801704c:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801704e:	f000 fc87 	bl	8017960 <vPortValidateInterruptPriority>
	__asm volatile
 8017052:	f3ef 8611 	mrs	r6, BASEPRI
 8017056:	f04f 0330 	mov.w	r3, #48	; 0x30
 801705a:	b672      	cpsid	i
 801705c:	f383 8811 	msr	BASEPRI, r3
 8017060:	f3bf 8f6f 	isb	sy
 8017064:	f3bf 8f4f 	dsb	sy
 8017068:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801706a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801706c:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8017070:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017074:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8017076:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801707a:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 801707c:	f103 0301 	add.w	r3, r3, #1
 8017080:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8017084:	d00e      	beq.n	80170a4 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8017086:	f386 8811 	msr	BASEPRI, r6
	}
 801708a:	b003      	add	sp, #12
 801708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 801708e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017092:	b672      	cpsid	i
 8017094:	f383 8811 	msr	BASEPRI, r3
 8017098:	f3bf 8f6f 	isb	sy
 801709c:	f3bf 8f4f 	dsb	sy
 80170a0:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 80170a2:	e7fe      	b.n	80170a2 <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80170a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80170a6:	b153      	cbz	r3, 80170be <vTaskNotifyGiveFromISR+0x7a>
 80170a8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80170ac:	b672      	cpsid	i
 80170ae:	f383 8811 	msr	BASEPRI, r3
 80170b2:	f3bf 8f6f 	isb	sy
 80170b6:	f3bf 8f4f 	dsb	sy
 80170ba:	b662      	cpsie	i
 80170bc:	e7fe      	b.n	80170bc <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80170be:	4b14      	ldr	r3, [pc, #80]	; (8017110 <vTaskNotifyGiveFromISR+0xcc>)
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	b18b      	cbz	r3, 80170e8 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80170c4:	f104 0118 	add.w	r1, r4, #24
 80170c8:	4812      	ldr	r0, [pc, #72]	; (8017114 <vTaskNotifyGiveFromISR+0xd0>)
 80170ca:	f7fe fb59 	bl	8015780 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80170ce:	4b12      	ldr	r3, [pc, #72]	; (8017118 <vTaskNotifyGiveFromISR+0xd4>)
 80170d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d6:	429a      	cmp	r2, r3
 80170d8:	d9d5      	bls.n	8017086 <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 80170da:	b10d      	cbz	r5, 80170e0 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80170dc:	2301      	movs	r3, #1
 80170de:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 80170e0:	4b0e      	ldr	r3, [pc, #56]	; (801711c <vTaskNotifyGiveFromISR+0xd8>)
 80170e2:	2201      	movs	r2, #1
 80170e4:	601a      	str	r2, [r3, #0]
 80170e6:	e7ce      	b.n	8017086 <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80170e8:	1d21      	adds	r1, r4, #4
 80170ea:	4608      	mov	r0, r1
 80170ec:	9101      	str	r1, [sp, #4]
 80170ee:	f7fe fb6f 	bl	80157d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80170f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80170f4:	4b0a      	ldr	r3, [pc, #40]	; (8017120 <vTaskNotifyGiveFromISR+0xdc>)
 80170f6:	4087      	lsls	r7, r0
 80170f8:	4a0a      	ldr	r2, [pc, #40]	; (8017124 <vTaskNotifyGiveFromISR+0xe0>)
 80170fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80170fe:	9901      	ldr	r1, [sp, #4]
 8017100:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8017104:	681a      	ldr	r2, [r3, #0]
 8017106:	4317      	orrs	r7, r2
 8017108:	601f      	str	r7, [r3, #0]
 801710a:	f7fe fb39 	bl	8015780 <vListInsertEnd>
 801710e:	e7de      	b.n	80170ce <vTaskNotifyGiveFromISR+0x8a>
 8017110:	200063ec 	.word	0x200063ec
 8017114:	20006428 	.word	0x20006428
 8017118:	20006348 	.word	0x20006348
 801711c:	2000646c 	.word	0x2000646c
 8017120:	200063f4 	.word	0x200063f4
 8017124:	20006354 	.word	0x20006354

08017128 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017128:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 801712a:	4c12      	ldr	r4, [pc, #72]	; (8017174 <prvCheckForValidListAndQueue+0x4c>)
{
 801712c:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801712e:	f000 fb11 	bl	8017754 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8017132:	6825      	ldr	r5, [r4, #0]
 8017134:	b125      	cbz	r5, 8017140 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8017136:	b003      	add	sp, #12
 8017138:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 801713c:	f000 bb30 	b.w	80177a0 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8017140:	4f0d      	ldr	r7, [pc, #52]	; (8017178 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8017142:	4e0e      	ldr	r6, [pc, #56]	; (801717c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8017144:	4638      	mov	r0, r7
 8017146:	f7fe fb0b 	bl	8015760 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801714a:	4630      	mov	r0, r6
 801714c:	f7fe fb08 	bl	8015760 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8017150:	4a0b      	ldr	r2, [pc, #44]	; (8017180 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017152:	9500      	str	r5, [sp, #0]
 8017154:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8017156:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017158:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 801715a:	4a0a      	ldr	r2, [pc, #40]	; (8017184 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801715c:	4b0a      	ldr	r3, [pc, #40]	; (8017188 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 801715e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017160:	4a0a      	ldr	r2, [pc, #40]	; (801718c <prvCheckForValidListAndQueue+0x64>)
 8017162:	f7fe fc19 	bl	8015998 <xQueueGenericCreateStatic>
 8017166:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8017168:	2800      	cmp	r0, #0
 801716a:	d0e4      	beq.n	8017136 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801716c:	4908      	ldr	r1, [pc, #32]	; (8017190 <prvCheckForValidListAndQueue+0x68>)
 801716e:	f7ff f881 	bl	8016274 <vQueueAddToRegistry>
 8017172:	e7e0      	b.n	8017136 <prvCheckForValidListAndQueue+0xe>
 8017174:	2000658c 	.word	0x2000658c
 8017178:	20006518 	.word	0x20006518
 801717c:	2000652c 	.word	0x2000652c
 8017180:	20006470 	.word	0x20006470
 8017184:	20006474 	.word	0x20006474
 8017188:	20006544 	.word	0x20006544
 801718c:	20006478 	.word	0x20006478
 8017190:	0802cd48 	.word	0x0802cd48

08017194 <xTimerCreateTimerTask>:
{
 8017194:	b530      	push	{r4, r5, lr}
 8017196:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8017198:	f7ff ffc6 	bl	8017128 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801719c:	4b13      	ldr	r3, [pc, #76]	; (80171ec <xTimerCreateTimerTask+0x58>)
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	b1cb      	cbz	r3, 80171d6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80171a2:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80171a4:	aa07      	add	r2, sp, #28
 80171a6:	a906      	add	r1, sp, #24
 80171a8:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80171aa:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80171ac:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80171b0:	f7ea f856 	bl	8001260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80171b4:	4623      	mov	r3, r4
 80171b6:	9a07      	ldr	r2, [sp, #28]
 80171b8:	9500      	str	r5, [sp, #0]
 80171ba:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80171be:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80171c2:	490b      	ldr	r1, [pc, #44]	; (80171f0 <xTimerCreateTimerTask+0x5c>)
 80171c4:	480b      	ldr	r0, [pc, #44]	; (80171f4 <xTimerCreateTimerTask+0x60>)
 80171c6:	f7ff fa61 	bl	801668c <xTaskCreateStatic>
 80171ca:	4b0b      	ldr	r3, [pc, #44]	; (80171f8 <xTimerCreateTimerTask+0x64>)
 80171cc:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80171ce:	b110      	cbz	r0, 80171d6 <xTimerCreateTimerTask+0x42>
}
 80171d0:	2001      	movs	r0, #1
 80171d2:	b009      	add	sp, #36	; 0x24
 80171d4:	bd30      	pop	{r4, r5, pc}
 80171d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171da:	b672      	cpsid	i
 80171dc:	f383 8811 	msr	BASEPRI, r3
 80171e0:	f3bf 8f6f 	isb	sy
 80171e4:	f3bf 8f4f 	dsb	sy
 80171e8:	b662      	cpsie	i
	configASSERT( xReturn );
 80171ea:	e7fe      	b.n	80171ea <xTimerCreateTimerTask+0x56>
 80171ec:	2000658c 	.word	0x2000658c
 80171f0:	0802cd50 	.word	0x0802cd50
 80171f4:	080173f5 	.word	0x080173f5
 80171f8:	20006590 	.word	0x20006590

080171fc <xTimerCreate>:
	{
 80171fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017200:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8017202:	2028      	movs	r0, #40	; 0x28
	{
 8017204:	4688      	mov	r8, r1
 8017206:	4615      	mov	r5, r2
 8017208:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801720a:	f000 fc0d 	bl	8017a28 <pvPortMalloc>
		if( pxNewTimer != NULL )
 801720e:	4604      	mov	r4, r0
 8017210:	b1b0      	cbz	r0, 8017240 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8017212:	2300      	movs	r3, #0
 8017214:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017218:	f1b8 0f00 	cmp.w	r8, #0
 801721c:	d013      	beq.n	8017246 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 801721e:	f7ff ff83 	bl	8017128 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017222:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8017224:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8017226:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8017228:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 801722a:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801722e:	f7fe faa3 	bl	8015778 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8017232:	b12d      	cbz	r5, 8017240 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8017234:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8017238:	f043 0304 	orr.w	r3, r3, #4
 801723c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8017240:	4620      	mov	r0, r4
 8017242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017246:	f04f 0330 	mov.w	r3, #48	; 0x30
 801724a:	b672      	cpsid	i
 801724c:	f383 8811 	msr	BASEPRI, r3
 8017250:	f3bf 8f6f 	isb	sy
 8017254:	f3bf 8f4f 	dsb	sy
 8017258:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801725a:	e7fe      	b.n	801725a <xTimerCreate+0x5e>

0801725c <xTimerCreateStatic>:
	{
 801725c:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 801725e:	2428      	movs	r4, #40	; 0x28
	{
 8017260:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8017262:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8017264:	9d05      	ldr	r5, [sp, #20]
 8017266:	2d28      	cmp	r5, #40	; 0x28
 8017268:	d00a      	beq.n	8017280 <xTimerCreateStatic+0x24>
 801726a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801726e:	b672      	cpsid	i
 8017270:	f383 8811 	msr	BASEPRI, r3
 8017274:	f3bf 8f6f 	isb	sy
 8017278:	f3bf 8f4f 	dsb	sy
 801727c:	b662      	cpsie	i
 801727e:	e7fe      	b.n	801727e <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017280:	4604      	mov	r4, r0
 8017282:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8017284:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017286:	b318      	cbz	r0, 80172d0 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8017288:	2002      	movs	r0, #2
 801728a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801728c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8017290:	b349      	cbz	r1, 80172e6 <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 8017292:	9101      	str	r1, [sp, #4]
 8017294:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017298:	f7ff ff46 	bl	8017128 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801729c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801729e:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 80172a0:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 80172a2:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80172a4:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80172a6:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 80172a8:	9b03      	ldr	r3, [sp, #12]
 80172aa:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80172ac:	4613      	mov	r3, r2
 80172ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172b0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80172b2:	f7fe fa61 	bl	8015778 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80172b6:	9a02      	ldr	r2, [sp, #8]
 80172b8:	b13a      	cbz	r2, 80172ca <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80172ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80172be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80172c2:	f043 0304 	orr.w	r3, r3, #4
 80172c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 80172ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80172cc:	b007      	add	sp, #28
 80172ce:	bd30      	pop	{r4, r5, pc}
 80172d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172d4:	b672      	cpsid	i
 80172d6:	f383 8811 	msr	BASEPRI, r3
 80172da:	f3bf 8f6f 	isb	sy
 80172de:	f3bf 8f4f 	dsb	sy
 80172e2:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 80172e4:	e7fe      	b.n	80172e4 <xTimerCreateStatic+0x88>
 80172e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80172ea:	b672      	cpsid	i
 80172ec:	f383 8811 	msr	BASEPRI, r3
 80172f0:	f3bf 8f6f 	isb	sy
 80172f4:	f3bf 8f4f 	dsb	sy
 80172f8:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80172fa:	e7fe      	b.n	80172fa <xTimerCreateStatic+0x9e>

080172fc <xTimerGenericCommand>:
	configASSERT( xTimer );
 80172fc:	b1c8      	cbz	r0, 8017332 <xTimerGenericCommand+0x36>
{
 80172fe:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8017300:	4d19      	ldr	r5, [pc, #100]	; (8017368 <xTimerGenericCommand+0x6c>)
{
 8017302:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8017304:	682c      	ldr	r4, [r5, #0]
 8017306:	b18c      	cbz	r4, 801732c <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017308:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801730a:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 801730c:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017310:	dc1a      	bgt.n	8017348 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017312:	f7ff fd1d 	bl	8016d50 <xTaskGetSchedulerState>
 8017316:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017318:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801731c:	d01d      	beq.n	801735a <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801731e:	4669      	mov	r1, sp
 8017320:	461a      	mov	r2, r3
 8017322:	6828      	ldr	r0, [r5, #0]
 8017324:	f7fe fbc2 	bl	8015aac <xQueueGenericSend>
}
 8017328:	b005      	add	sp, #20
 801732a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 801732c:	4620      	mov	r0, r4
}
 801732e:	b005      	add	sp, #20
 8017330:	bd30      	pop	{r4, r5, pc}
 8017332:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017336:	b672      	cpsid	i
 8017338:	f383 8811 	msr	BASEPRI, r3
 801733c:	f3bf 8f6f 	isb	sy
 8017340:	f3bf 8f4f 	dsb	sy
 8017344:	b662      	cpsie	i
	configASSERT( xTimer );
 8017346:	e7fe      	b.n	8017346 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017348:	469c      	mov	ip, r3
 801734a:	4669      	mov	r1, sp
 801734c:	2300      	movs	r3, #0
 801734e:	4620      	mov	r0, r4
 8017350:	4662      	mov	r2, ip
 8017352:	f7fe fcab 	bl	8015cac <xQueueGenericSendFromISR>
}
 8017356:	b005      	add	sp, #20
 8017358:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801735a:	9a08      	ldr	r2, [sp, #32]
 801735c:	4669      	mov	r1, sp
 801735e:	6828      	ldr	r0, [r5, #0]
 8017360:	f7fe fba4 	bl	8015aac <xQueueGenericSend>
 8017364:	e7e3      	b.n	801732e <xTimerGenericCommand+0x32>
 8017366:	bf00      	nop
 8017368:	2000658c 	.word	0x2000658c

0801736c <prvSwitchTimerLists>:
{
 801736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017370:	4e1e      	ldr	r6, [pc, #120]	; (80173ec <prvSwitchTimerLists+0x80>)
 8017372:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017374:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017378:	e00d      	b.n	8017396 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801737a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801737c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801737e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017380:	1d25      	adds	r5, r4, #4
 8017382:	4628      	mov	r0, r5
 8017384:	f7fe fa24 	bl	80157d0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017388:	6a23      	ldr	r3, [r4, #32]
 801738a:	4620      	mov	r0, r4
 801738c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801738e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8017392:	075b      	lsls	r3, r3, #29
 8017394:	d40a      	bmi.n	80173ac <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8017396:	6833      	ldr	r3, [r6, #0]
 8017398:	681a      	ldr	r2, [r3, #0]
 801739a:	2a00      	cmp	r2, #0
 801739c:	d1ed      	bne.n	801737a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 801739e:	4a14      	ldr	r2, [pc, #80]	; (80173f0 <prvSwitchTimerLists+0x84>)
 80173a0:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80173a2:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80173a4:	6031      	str	r1, [r6, #0]
}
 80173a6:	b002      	add	sp, #8
 80173a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80173ac:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173ae:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173b0:	2300      	movs	r3, #0
 80173b2:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80173b4:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173b6:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 80173b8:	42af      	cmp	r7, r5
 80173ba:	d205      	bcs.n	80173c8 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173bc:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80173be:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80173c0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80173c2:	f7fe f9ed 	bl	80157a0 <vListInsert>
 80173c6:	e7e6      	b.n	8017396 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80173c8:	4619      	mov	r1, r3
 80173ca:	f8cd 8000 	str.w	r8, [sp]
 80173ce:	f7ff ff95 	bl	80172fc <xTimerGenericCommand>
				configASSERT( xResult );
 80173d2:	2800      	cmp	r0, #0
 80173d4:	d1df      	bne.n	8017396 <prvSwitchTimerLists+0x2a>
 80173d6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173da:	b672      	cpsid	i
 80173dc:	f383 8811 	msr	BASEPRI, r3
 80173e0:	f3bf 8f6f 	isb	sy
 80173e4:	f3bf 8f4f 	dsb	sy
 80173e8:	b662      	cpsie	i
 80173ea:	e7fe      	b.n	80173ea <prvSwitchTimerLists+0x7e>
 80173ec:	20006470 	.word	0x20006470
 80173f0:	20006474 	.word	0x20006474

080173f4 <prvTimerTask>:
{
 80173f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f8:	4e9a      	ldr	r6, [pc, #616]	; (8017664 <prvTimerTask+0x270>)
 80173fa:	b087      	sub	sp, #28
 80173fc:	4d9a      	ldr	r5, [pc, #616]	; (8017668 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 80173fe:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8017402:	4c9a      	ldr	r4, [pc, #616]	; (801766c <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017404:	6833      	ldr	r3, [r6, #0]
 8017406:	681f      	ldr	r7, [r3, #0]
 8017408:	2f00      	cmp	r7, #0
 801740a:	f000 80ac 	beq.w	8017566 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801740e:	68db      	ldr	r3, [r3, #12]
 8017410:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8017412:	f7ff fa01 	bl	8016818 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8017416:	f7ff fa07 	bl	8016828 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801741a:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 801741c:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 801741e:	4290      	cmp	r0, r2
 8017420:	f0c0 80a9 	bcc.w	8017576 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017424:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8017426:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017428:	f200 80ca 	bhi.w	80175c0 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 801742c:	f7ff fb50 	bl	8016ad0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017430:	6832      	ldr	r2, [r6, #0]
 8017432:	68d2      	ldr	r2, [r2, #12]
 8017434:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017438:	f10b 0804 	add.w	r8, fp, #4
 801743c:	4640      	mov	r0, r8
 801743e:	f7fe f9c7 	bl	80157d0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017442:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8017446:	0743      	lsls	r3, r0, #29
 8017448:	f100 80ca 	bmi.w	80175e0 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801744c:	f020 0001 	bic.w	r0, r0, #1
 8017450:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017454:	f8db 3020 	ldr.w	r3, [fp, #32]
 8017458:	4658      	mov	r0, fp
 801745a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801745c:	2200      	movs	r2, #0
 801745e:	a902      	add	r1, sp, #8
 8017460:	6820      	ldr	r0, [r4, #0]
 8017462:	f7fe fcf5 	bl	8015e50 <xQueueReceive>
 8017466:	2800      	cmp	r0, #0
 8017468:	d0cc      	beq.n	8017404 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801746a:	9b02      	ldr	r3, [sp, #8]
 801746c:	2b00      	cmp	r3, #0
 801746e:	db71      	blt.n	8017554 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017470:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	b113      	cbz	r3, 801747c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017476:	1d38      	adds	r0, r7, #4
 8017478:	f7fe f9aa 	bl	80157d0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 801747c:	f7ff f9d4 	bl	8016828 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8017480:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017482:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8017484:	4298      	cmp	r0, r3
 8017486:	d37d      	bcc.n	8017584 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8017488:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 801748a:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 801748e:	2b09      	cmp	r3, #9
 8017490:	d8e4      	bhi.n	801745c <prvTimerTask+0x68>
 8017492:	e8df f003 	tbb	[pc, r3]
 8017496:	0505      	.short	0x0505
 8017498:	56394f05 	.word	0x56394f05
 801749c:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174a4:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174a6:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174aa:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80174ac:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80174ae:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80174b2:	185a      	adds	r2, r3, r1
 80174b4:	bf2c      	ite	cs
 80174b6:	2001      	movcs	r0, #1
 80174b8:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 80174ba:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80174bc:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 80174be:	f200 8081 	bhi.w	80175c4 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80174c2:	eba8 0303 	sub.w	r3, r8, r3
 80174c6:	4299      	cmp	r1, r3
 80174c8:	f200 80b5 	bhi.w	8017636 <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80174cc:	6a3b      	ldr	r3, [r7, #32]
 80174ce:	4638      	mov	r0, r7
 80174d0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80174d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80174d6:	0759      	lsls	r1, r3, #29
 80174d8:	d5c0      	bpl.n	801745c <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80174da:	2200      	movs	r2, #0
 80174dc:	69bb      	ldr	r3, [r7, #24]
 80174de:	4638      	mov	r0, r7
 80174e0:	9200      	str	r2, [sp, #0]
 80174e2:	9a03      	ldr	r2, [sp, #12]
 80174e4:	441a      	add	r2, r3
 80174e6:	2300      	movs	r3, #0
 80174e8:	4619      	mov	r1, r3
 80174ea:	f7ff ff07 	bl	80172fc <xTimerGenericCommand>
							configASSERT( xResult );
 80174ee:	2800      	cmp	r0, #0
 80174f0:	d1b4      	bne.n	801745c <prvTimerTask+0x68>
 80174f2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80174f6:	b672      	cpsid	i
 80174f8:	f383 8811 	msr	BASEPRI, r3
 80174fc:	f3bf 8f6f 	isb	sy
 8017500:	f3bf 8f4f 	dsb	sy
 8017504:	b662      	cpsie	i
 8017506:	e7fe      	b.n	8017506 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017508:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801750c:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801750e:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8017512:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017514:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017518:	2b00      	cmp	r3, #0
 801751a:	f000 8098 	beq.w	801764e <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801751e:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017520:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017522:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8017524:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8017526:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8017528:	d856      	bhi.n	80175d8 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801752a:	4b51      	ldr	r3, [pc, #324]	; (8017670 <prvTimerTask+0x27c>)
 801752c:	6818      	ldr	r0, [r3, #0]
 801752e:	f7fe f937 	bl	80157a0 <vListInsert>
	return xProcessTimerNow;
 8017532:	e793      	b.n	801745c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017534:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017538:	f023 0301 	bic.w	r3, r3, #1
 801753c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8017540:	e78c      	b.n	801745c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017542:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017546:	079a      	lsls	r2, r3, #30
 8017548:	d56c      	bpl.n	8017624 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801754a:	f023 0301 	bic.w	r3, r3, #1
 801754e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8017552:	e783      	b.n	801745c <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017554:	9b03      	ldr	r3, [sp, #12]
 8017556:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801755a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801755c:	9b02      	ldr	r3, [sp, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	f6ff af7c 	blt.w	801745c <prvTimerTask+0x68>
 8017564:	e784      	b.n	8017470 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8017566:	f7ff f957 	bl	8016818 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801756a:	f7ff f95d 	bl	8016828 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801756e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017570:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8017572:	4282      	cmp	r2, r0
 8017574:	d909      	bls.n	801758a <prvTimerTask+0x196>
		prvSwitchTimerLists();
 8017576:	f7ff fef9 	bl	801736c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801757a:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 801757e:	f7ff faa7 	bl	8016ad0 <xTaskResumeAll>
 8017582:	e76b      	b.n	801745c <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8017584:	f7ff fef2 	bl	801736c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017588:	e77e      	b.n	8017488 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801758a:	4b39      	ldr	r3, [pc, #228]	; (8017670 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 801758c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017590:	681a      	ldr	r2, [r3, #0]
 8017592:	6812      	ldr	r2, [r2, #0]
 8017594:	fab2 f282 	clz	r2, r2
 8017598:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801759a:	eba7 010a 	sub.w	r1, r7, sl
 801759e:	6820      	ldr	r0, [r4, #0]
 80175a0:	f7fe fe7e 	bl	80162a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80175a4:	f7ff fa94 	bl	8016ad0 <xTaskResumeAll>
 80175a8:	2800      	cmp	r0, #0
 80175aa:	f47f af57 	bne.w	801745c <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 80175ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80175b2:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 80175b6:	f3bf 8f4f 	dsb	sy
 80175ba:	f3bf 8f6f 	isb	sy
 80175be:	e74d      	b.n	801745c <prvTimerTask+0x68>
 80175c0:	2200      	movs	r2, #0
 80175c2:	e7ea      	b.n	801759a <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80175c4:	4543      	cmp	r3, r8
 80175c6:	d902      	bls.n	80175ce <prvTimerTask+0x1da>
 80175c8:	2800      	cmp	r0, #0
 80175ca:	f43f af7f 	beq.w	80174cc <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80175ce:	1d39      	adds	r1, r7, #4
 80175d0:	6830      	ldr	r0, [r6, #0]
 80175d2:	f7fe f8e5 	bl	80157a0 <vListInsert>
	return xProcessTimerNow;
 80175d6:	e741      	b.n	801745c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80175d8:	6830      	ldr	r0, [r6, #0]
 80175da:	f7fe f8e1 	bl	80157a0 <vListInsert>
 80175de:	e73d      	b.n	801745c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80175e0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80175e4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80175e8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80175ea:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80175ec:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80175f0:	d31c      	bcc.n	801762c <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175f2:	ebaa 0307 	sub.w	r3, sl, r7
 80175f6:	429a      	cmp	r2, r3
 80175f8:	d823      	bhi.n	8017642 <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80175fa:	2300      	movs	r3, #0
 80175fc:	463a      	mov	r2, r7
 80175fe:	4658      	mov	r0, fp
 8017600:	4619      	mov	r1, r3
 8017602:	9300      	str	r3, [sp, #0]
 8017604:	f7ff fe7a 	bl	80172fc <xTimerGenericCommand>
			configASSERT( xResult );
 8017608:	2800      	cmp	r0, #0
 801760a:	f47f af23 	bne.w	8017454 <prvTimerTask+0x60>
 801760e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017612:	b672      	cpsid	i
 8017614:	f383 8811 	msr	BASEPRI, r3
 8017618:	f3bf 8f6f 	isb	sy
 801761c:	f3bf 8f4f 	dsb	sy
 8017620:	b662      	cpsie	i
 8017622:	e7fe      	b.n	8017622 <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 8017624:	4638      	mov	r0, r7
 8017626:	f000 fa9b 	bl	8017b60 <vPortFree>
 801762a:	e717      	b.n	801745c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801762c:	4641      	mov	r1, r8
 801762e:	6830      	ldr	r0, [r6, #0]
 8017630:	f7fe f8b6 	bl	80157a0 <vListInsert>
	return xProcessTimerNow;
 8017634:	e70e      	b.n	8017454 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017636:	4b0e      	ldr	r3, [pc, #56]	; (8017670 <prvTimerTask+0x27c>)
 8017638:	1d39      	adds	r1, r7, #4
 801763a:	6818      	ldr	r0, [r3, #0]
 801763c:	f7fe f8b0 	bl	80157a0 <vListInsert>
	return xProcessTimerNow;
 8017640:	e70c      	b.n	801745c <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017642:	4b0b      	ldr	r3, [pc, #44]	; (8017670 <prvTimerTask+0x27c>)
 8017644:	4641      	mov	r1, r8
 8017646:	6818      	ldr	r0, [r3, #0]
 8017648:	f7fe f8aa 	bl	80157a0 <vListInsert>
	return xProcessTimerNow;
 801764c:	e702      	b.n	8017454 <prvTimerTask+0x60>
 801764e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017652:	b672      	cpsid	i
 8017654:	f383 8811 	msr	BASEPRI, r3
 8017658:	f3bf 8f6f 	isb	sy
 801765c:	f3bf 8f4f 	dsb	sy
 8017660:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017662:	e7fe      	b.n	8017662 <prvTimerTask+0x26e>
 8017664:	20006470 	.word	0x20006470
 8017668:	20006540 	.word	0x20006540
 801766c:	2000658c 	.word	0x2000658c
 8017670:	20006474 	.word	0x20006474

08017674 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017674:	4808      	ldr	r0, [pc, #32]	; (8017698 <prvPortStartFirstTask+0x24>)
 8017676:	6800      	ldr	r0, [r0, #0]
 8017678:	6800      	ldr	r0, [r0, #0]
 801767a:	f380 8808 	msr	MSP, r0
 801767e:	f04f 0000 	mov.w	r0, #0
 8017682:	f380 8814 	msr	CONTROL, r0
 8017686:	b662      	cpsie	i
 8017688:	b661      	cpsie	f
 801768a:	f3bf 8f4f 	dsb	sy
 801768e:	f3bf 8f6f 	isb	sy
 8017692:	df00      	svc	0
 8017694:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017696:	0000      	.short	0x0000
 8017698:	e000ed08 	.word	0xe000ed08

0801769c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801769c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80176ac <vPortEnableVFP+0x10>
 80176a0:	6801      	ldr	r1, [r0, #0]
 80176a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80176a6:	6001      	str	r1, [r0, #0]
 80176a8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80176aa:	0000      	.short	0x0000
 80176ac:	e000ed88 	.word	0xe000ed88

080176b0 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80176b0:	4b10      	ldr	r3, [pc, #64]	; (80176f4 <prvTaskExitError+0x44>)
{
 80176b2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80176b4:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80176b6:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 80176b8:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80176ba:	3301      	adds	r3, #1
 80176bc:	d00a      	beq.n	80176d4 <prvTaskExitError+0x24>
 80176be:	f04f 0330 	mov.w	r3, #48	; 0x30
 80176c2:	b672      	cpsid	i
 80176c4:	f383 8811 	msr	BASEPRI, r3
 80176c8:	f3bf 8f6f 	isb	sy
 80176cc:	f3bf 8f4f 	dsb	sy
 80176d0:	b662      	cpsie	i
 80176d2:	e7fe      	b.n	80176d2 <prvTaskExitError+0x22>
 80176d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80176d8:	b672      	cpsid	i
 80176da:	f383 8811 	msr	BASEPRI, r3
 80176de:	f3bf 8f6f 	isb	sy
 80176e2:	f3bf 8f4f 	dsb	sy
 80176e6:	b662      	cpsie	i
	while( ulDummy == 0 )
 80176e8:	9b01      	ldr	r3, [sp, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d0fc      	beq.n	80176e8 <prvTaskExitError+0x38>
}
 80176ee:	b002      	add	sp, #8
 80176f0:	4770      	bx	lr
 80176f2:	bf00      	nop
 80176f4:	20000410 	.word	0x20000410

080176f8 <pxPortInitialiseStack>:
{
 80176f8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80176fa:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80176fe:	4809      	ldr	r0, [pc, #36]	; (8017724 <pxPortInitialiseStack+0x2c>)
{
 8017700:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8017702:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8017706:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801770a:	f843 2c20 	str.w	r2, [r3, #-32]
}
 801770e:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8017712:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8017716:	f06f 0102 	mvn.w	r1, #2
}
 801771a:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801771e:	f843 1c24 	str.w	r1, [r3, #-36]
}
 8017722:	4770      	bx	lr
 8017724:	080176b1 	.word	0x080176b1
 8017728:	ffffffff 	.word	0xffffffff
 801772c:	ffffffff 	.word	0xffffffff

08017730 <SVC_Handler>:
	__asm volatile (
 8017730:	4b07      	ldr	r3, [pc, #28]	; (8017750 <pxCurrentTCBConst2>)
 8017732:	6819      	ldr	r1, [r3, #0]
 8017734:	6808      	ldr	r0, [r1, #0]
 8017736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801773a:	f380 8809 	msr	PSP, r0
 801773e:	f3bf 8f6f 	isb	sy
 8017742:	f04f 0000 	mov.w	r0, #0
 8017746:	f380 8811 	msr	BASEPRI, r0
 801774a:	4770      	bx	lr
 801774c:	f3af 8000 	nop.w

08017750 <pxCurrentTCBConst2>:
 8017750:	20006348 	.word	0x20006348

08017754 <vPortEnterCritical>:
 8017754:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017758:	b672      	cpsid	i
 801775a:	f383 8811 	msr	BASEPRI, r3
 801775e:	f3bf 8f6f 	isb	sy
 8017762:	f3bf 8f4f 	dsb	sy
 8017766:	b662      	cpsie	i
	uxCriticalNesting++;
 8017768:	4a0c      	ldr	r2, [pc, #48]	; (801779c <vPortEnterCritical+0x48>)
 801776a:	6813      	ldr	r3, [r2, #0]
 801776c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801776e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8017770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8017772:	d000      	beq.n	8017776 <vPortEnterCritical+0x22>
}
 8017774:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017776:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801777a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801777e:	b2db      	uxtb	r3, r3
 8017780:	2b00      	cmp	r3, #0
 8017782:	d0f7      	beq.n	8017774 <vPortEnterCritical+0x20>
 8017784:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017788:	b672      	cpsid	i
 801778a:	f383 8811 	msr	BASEPRI, r3
 801778e:	f3bf 8f6f 	isb	sy
 8017792:	f3bf 8f4f 	dsb	sy
 8017796:	b662      	cpsie	i
 8017798:	e7fe      	b.n	8017798 <vPortEnterCritical+0x44>
 801779a:	bf00      	nop
 801779c:	20000410 	.word	0x20000410

080177a0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80177a0:	4a09      	ldr	r2, [pc, #36]	; (80177c8 <vPortExitCritical+0x28>)
 80177a2:	6813      	ldr	r3, [r2, #0]
 80177a4:	b953      	cbnz	r3, 80177bc <vPortExitCritical+0x1c>
 80177a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80177aa:	b672      	cpsid	i
 80177ac:	f383 8811 	msr	BASEPRI, r3
 80177b0:	f3bf 8f6f 	isb	sy
 80177b4:	f3bf 8f4f 	dsb	sy
 80177b8:	b662      	cpsie	i
 80177ba:	e7fe      	b.n	80177ba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80177bc:	3b01      	subs	r3, #1
 80177be:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80177c0:	b90b      	cbnz	r3, 80177c6 <vPortExitCritical+0x26>
	__asm volatile
 80177c2:	f383 8811 	msr	BASEPRI, r3
}
 80177c6:	4770      	bx	lr
 80177c8:	20000410 	.word	0x20000410
 80177cc:	ffffffff 	.word	0xffffffff

080177d0 <PendSV_Handler>:
	__asm volatile
 80177d0:	f3ef 8009 	mrs	r0, PSP
 80177d4:	f3bf 8f6f 	isb	sy
 80177d8:	4b15      	ldr	r3, [pc, #84]	; (8017830 <pxCurrentTCBConst>)
 80177da:	681a      	ldr	r2, [r3, #0]
 80177dc:	f01e 0f10 	tst.w	lr, #16
 80177e0:	bf08      	it	eq
 80177e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80177e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177ea:	6010      	str	r0, [r2, #0]
 80177ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80177f0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80177f4:	b672      	cpsid	i
 80177f6:	f380 8811 	msr	BASEPRI, r0
 80177fa:	f3bf 8f4f 	dsb	sy
 80177fe:	f3bf 8f6f 	isb	sy
 8017802:	b662      	cpsie	i
 8017804:	f7ff f9aa 	bl	8016b5c <vTaskSwitchContext>
 8017808:	f04f 0000 	mov.w	r0, #0
 801780c:	f380 8811 	msr	BASEPRI, r0
 8017810:	bc09      	pop	{r0, r3}
 8017812:	6819      	ldr	r1, [r3, #0]
 8017814:	6808      	ldr	r0, [r1, #0]
 8017816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801781a:	f01e 0f10 	tst.w	lr, #16
 801781e:	bf08      	it	eq
 8017820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017824:	f380 8809 	msr	PSP, r0
 8017828:	f3bf 8f6f 	isb	sy
 801782c:	4770      	bx	lr
 801782e:	bf00      	nop

08017830 <pxCurrentTCBConst>:
 8017830:	20006348 	.word	0x20006348

08017834 <SysTick_Handler>:
{
 8017834:	b508      	push	{r3, lr}
	__asm volatile
 8017836:	f04f 0330 	mov.w	r3, #48	; 0x30
 801783a:	b672      	cpsid	i
 801783c:	f383 8811 	msr	BASEPRI, r3
 8017840:	f3bf 8f6f 	isb	sy
 8017844:	f3bf 8f4f 	dsb	sy
 8017848:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801784a:	f7fe fffb 	bl	8016844 <xTaskIncrementTick>
 801784e:	b128      	cbz	r0, 801785c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017858:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801785c:	2300      	movs	r3, #0
 801785e:	f383 8811 	msr	BASEPRI, r3
}
 8017862:	bd08      	pop	{r3, pc}

08017864 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017864:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8017868:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801786a:	4b06      	ldr	r3, [pc, #24]	; (8017884 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801786c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801786e:	4806      	ldr	r0, [pc, #24]	; (8017888 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017870:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017872:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	fba0 0303 	umull	r0, r3, r0, r3
 801787a:	099b      	lsrs	r3, r3, #6
 801787c:	3b01      	subs	r3, #1
 801787e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017880:	6111      	str	r1, [r2, #16]
}
 8017882:	4770      	bx	lr
 8017884:	20000284 	.word	0x20000284
 8017888:	10624dd3 	.word	0x10624dd3

0801788c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801788c:	4b30      	ldr	r3, [pc, #192]	; (8017950 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801788e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017892:	4830      	ldr	r0, [pc, #192]	; (8017954 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017894:	4930      	ldr	r1, [pc, #192]	; (8017958 <xPortStartScheduler+0xcc>)
{
 8017896:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017898:	781a      	ldrb	r2, [r3, #0]
{
 801789a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801789c:	b2d2      	uxtb	r2, r2
 801789e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178a0:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80178a2:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80178a6:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80178a8:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178b0:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178bc:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80178be:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178c0:	d50f      	bpl.n	80178e2 <xPortStartScheduler+0x56>
 80178c2:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80178c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80178c8:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178ca:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80178cc:	005b      	lsls	r3, r3, #1
 80178ce:	b2db      	uxtb	r3, r3
 80178d0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80178d4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80178d8:	061b      	lsls	r3, r3, #24
 80178da:	d4f3      	bmi.n	80178c4 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80178dc:	2903      	cmp	r1, #3
 80178de:	d00b      	beq.n	80178f8 <xPortStartScheduler+0x6c>
 80178e0:	6001      	str	r1, [r0, #0]
	__asm volatile
 80178e2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80178e6:	b672      	cpsid	i
 80178e8:	f383 8811 	msr	BASEPRI, r3
 80178ec:	f3bf 8f6f 	isb	sy
 80178f0:	f3bf 8f4f 	dsb	sy
 80178f4:	b662      	cpsie	i
 80178f6:	e7fe      	b.n	80178f6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80178f8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80178fa:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80178fe:	4a14      	ldr	r2, [pc, #80]	; (8017950 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017900:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017904:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 8017906:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017908:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801790a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801790c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8017910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017914:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017918:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 801791c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8017920:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8017924:	f7ff ff9e 	bl	8017864 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8017928:	4b0c      	ldr	r3, [pc, #48]	; (801795c <xPortStartScheduler+0xd0>)
 801792a:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 801792c:	f7ff feb6 	bl	801769c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017930:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8017934:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017938:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 801793c:	f7ff fe9a 	bl	8017674 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8017940:	f7ff f90c 	bl	8016b5c <vTaskSwitchContext>
}
 8017944:	4628      	mov	r0, r5
	prvTaskExitError();
 8017946:	f7ff feb3 	bl	80176b0 <prvTaskExitError>
}
 801794a:	b003      	add	sp, #12
 801794c:	bd30      	pop	{r4, r5, pc}
 801794e:	bf00      	nop
 8017950:	e000e400 	.word	0xe000e400
 8017954:	20006598 	.word	0x20006598
 8017958:	20006594 	.word	0x20006594
 801795c:	20000410 	.word	0x20000410

08017960 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017960:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017964:	2b0f      	cmp	r3, #15
 8017966:	d910      	bls.n	801798a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017968:	4913      	ldr	r1, [pc, #76]	; (80179b8 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801796a:	4a14      	ldr	r2, [pc, #80]	; (80179bc <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801796c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801796e:	7812      	ldrb	r2, [r2, #0]
 8017970:	429a      	cmp	r2, r3
 8017972:	d90a      	bls.n	801798a <vPortValidateInterruptPriority+0x2a>
 8017974:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017978:	b672      	cpsid	i
 801797a:	f383 8811 	msr	BASEPRI, r3
 801797e:	f3bf 8f6f 	isb	sy
 8017982:	f3bf 8f4f 	dsb	sy
 8017986:	b662      	cpsie	i
 8017988:	e7fe      	b.n	8017988 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801798a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801798e:	4a0c      	ldr	r2, [pc, #48]	; (80179c0 <vPortValidateInterruptPriority+0x60>)
 8017990:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8017994:	6812      	ldr	r2, [r2, #0]
 8017996:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801799a:	4293      	cmp	r3, r2
 801799c:	d90a      	bls.n	80179b4 <vPortValidateInterruptPriority+0x54>
 801799e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80179a2:	b672      	cpsid	i
 80179a4:	f383 8811 	msr	BASEPRI, r3
 80179a8:	f3bf 8f6f 	isb	sy
 80179ac:	f3bf 8f4f 	dsb	sy
 80179b0:	b662      	cpsie	i
 80179b2:	e7fe      	b.n	80179b2 <vPortValidateInterruptPriority+0x52>
	}
 80179b4:	4770      	bx	lr
 80179b6:	bf00      	nop
 80179b8:	e000e3f0 	.word	0xe000e3f0
 80179bc:	20006594 	.word	0x20006594
 80179c0:	20006598 	.word	0x20006598

080179c4 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80179c4:	4b16      	ldr	r3, [pc, #88]	; (8017a20 <prvInsertBlockIntoFreeList+0x5c>)
{
 80179c6:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80179c8:	461a      	mov	r2, r3
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	4283      	cmp	r3, r0
 80179ce:	d3fb      	bcc.n	80179c8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80179d0:	6851      	ldr	r1, [r2, #4]
 80179d2:	eb02 0c01 	add.w	ip, r2, r1
 80179d6:	4560      	cmp	r0, ip
 80179d8:	d00b      	beq.n	80179f2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179da:	6841      	ldr	r1, [r0, #4]
 80179dc:	eb00 0c01 	add.w	ip, r0, r1
 80179e0:	4563      	cmp	r3, ip
 80179e2:	d00e      	beq.n	8017a02 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80179e4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80179e6:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80179e8:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80179ec:	bf18      	it	ne
 80179ee:	6010      	strne	r0, [r2, #0]
}
 80179f0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80179f2:	6844      	ldr	r4, [r0, #4]
 80179f4:	4610      	mov	r0, r2
 80179f6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179f8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80179fc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179fe:	4563      	cmp	r3, ip
 8017a00:	d1f0      	bne.n	80179e4 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017a02:	4c08      	ldr	r4, [pc, #32]	; (8017a24 <prvInsertBlockIntoFreeList+0x60>)
 8017a04:	6824      	ldr	r4, [r4, #0]
 8017a06:	42a3      	cmp	r3, r4
 8017a08:	d0ec      	beq.n	80179e4 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 8017a0a:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017a0c:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a10:	4421      	add	r1, r4
}
 8017a12:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017a16:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017a1a:	bf18      	it	ne
 8017a1c:	6010      	strne	r0, [r2, #0]
}
 8017a1e:	4770      	bx	lr
 8017a20:	2001e5ac 	.word	0x2001e5ac
 8017a24:	2000659c 	.word	0x2000659c

08017a28 <pvPortMalloc>:
{
 8017a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a2c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8017a2e:	f7fe fef3 	bl	8016818 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8017a32:	f8df c128 	ldr.w	ip, [pc, #296]	; 8017b5c <pvPortMalloc+0x134>
 8017a36:	f8dc 3000 	ldr.w	r3, [ip]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d05d      	beq.n	8017afa <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017a3e:	4b42      	ldr	r3, [pc, #264]	; (8017b48 <pvPortMalloc+0x120>)
 8017a40:	681d      	ldr	r5, [r3, #0]
 8017a42:	422c      	tst	r4, r5
 8017a44:	d130      	bne.n	8017aa8 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8017a46:	b37c      	cbz	r4, 8017aa8 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017a48:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8017a4a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017a4e:	d002      	beq.n	8017a56 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017a50:	f021 0107 	bic.w	r1, r1, #7
 8017a54:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017a56:	b339      	cbz	r1, 8017aa8 <pvPortMalloc+0x80>
 8017a58:	4f3c      	ldr	r7, [pc, #240]	; (8017b4c <pvPortMalloc+0x124>)
 8017a5a:	683e      	ldr	r6, [r7, #0]
 8017a5c:	428e      	cmp	r6, r1
 8017a5e:	d323      	bcc.n	8017aa8 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8017a60:	483b      	ldr	r0, [pc, #236]	; (8017b50 <pvPortMalloc+0x128>)
 8017a62:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017a64:	e003      	b.n	8017a6e <pvPortMalloc+0x46>
 8017a66:	6823      	ldr	r3, [r4, #0]
 8017a68:	b123      	cbz	r3, 8017a74 <pvPortMalloc+0x4c>
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	461c      	mov	r4, r3
 8017a6e:	6862      	ldr	r2, [r4, #4]
 8017a70:	428a      	cmp	r2, r1
 8017a72:	d3f8      	bcc.n	8017a66 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8017a74:	f8dc 3000 	ldr.w	r3, [ip]
 8017a78:	42a3      	cmp	r3, r4
 8017a7a:	d015      	beq.n	8017aa8 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017a7c:	6803      	ldr	r3, [r0, #0]
 8017a7e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017a86:	1a53      	subs	r3, r2, r1
 8017a88:	2b10      	cmp	r3, #16
 8017a8a:	d91b      	bls.n	8017ac4 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017a8c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017a8e:	0742      	lsls	r2, r0, #29
 8017a90:	d013      	beq.n	8017aba <pvPortMalloc+0x92>
 8017a92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017a96:	b672      	cpsid	i
 8017a98:	f383 8811 	msr	BASEPRI, r3
 8017a9c:	f3bf 8f6f 	isb	sy
 8017aa0:	f3bf 8f4f 	dsb	sy
 8017aa4:	b662      	cpsie	i
 8017aa6:	e7fe      	b.n	8017aa6 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8017aa8:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 8017aac:	f7ff f810 	bl	8016ad0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8017ab0:	f7e9 fbc4 	bl	800123c <vApplicationMallocFailedHook>
}
 8017ab4:	4640      	mov	r0, r8
 8017ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017aba:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017abc:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017abe:	f7ff ff81 	bl	80179c4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017ac2:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017ac4:	4b23      	ldr	r3, [pc, #140]	; (8017b54 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017ac6:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017ac8:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017aca:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017acc:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017ace:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017ad0:	bf38      	it	cc
 8017ad2:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 8017ada:	f7fe fff9 	bl	8016ad0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017ade:	f018 0f07 	tst.w	r8, #7
 8017ae2:	d0e7      	beq.n	8017ab4 <pvPortMalloc+0x8c>
 8017ae4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017ae8:	b672      	cpsid	i
 8017aea:	f383 8811 	msr	BASEPRI, r3
 8017aee:	f3bf 8f6f 	isb	sy
 8017af2:	f3bf 8f4f 	dsb	sy
 8017af6:	b662      	cpsie	i
 8017af8:	e7fe      	b.n	8017af8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 8017afa:	4b17      	ldr	r3, [pc, #92]	; (8017b58 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017afc:	075d      	lsls	r5, r3, #29
 8017afe:	d11b      	bne.n	8017b38 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017b00:	461a      	mov	r2, r3
 8017b02:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8017b06:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8017b08:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 8017b0a:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b0c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b10:	f023 0307 	bic.w	r3, r3, #7
}
 8017b14:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017b16:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8017b18:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 8017b1c:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017b20:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017b24:	4b0a      	ldr	r3, [pc, #40]	; (8017b50 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 8017b26:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b2a:	4b0a      	ldr	r3, [pc, #40]	; (8017b54 <pvPortMalloc+0x12c>)
 8017b2c:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017b2e:	4b07      	ldr	r3, [pc, #28]	; (8017b4c <pvPortMalloc+0x124>)
 8017b30:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017b32:	4b05      	ldr	r3, [pc, #20]	; (8017b48 <pvPortMalloc+0x120>)
 8017b34:	601e      	str	r6, [r3, #0]
}
 8017b36:	e784      	b.n	8017a42 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017b38:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017b3a:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8017b3e:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017b42:	4610      	mov	r0, r2
 8017b44:	e7e0      	b.n	8017b08 <pvPortMalloc+0xe0>
 8017b46:	bf00      	nop
 8017b48:	2001e5a0 	.word	0x2001e5a0
 8017b4c:	2001e5a4 	.word	0x2001e5a4
 8017b50:	2001e5ac 	.word	0x2001e5ac
 8017b54:	2001e5a8 	.word	0x2001e5a8
 8017b58:	200065a0 	.word	0x200065a0
 8017b5c:	2000659c 	.word	0x2000659c

08017b60 <vPortFree>:
	if( pv != NULL )
 8017b60:	b1f0      	cbz	r0, 8017ba0 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017b62:	4a1c      	ldr	r2, [pc, #112]	; (8017bd4 <vPortFree+0x74>)
 8017b64:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017b68:	6812      	ldr	r2, [r2, #0]
 8017b6a:	4213      	tst	r3, r2
 8017b6c:	d00d      	beq.n	8017b8a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017b6e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017b72:	b1b1      	cbz	r1, 8017ba2 <vPortFree+0x42>
 8017b74:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b78:	b672      	cpsid	i
 8017b7a:	f383 8811 	msr	BASEPRI, r3
 8017b7e:	f3bf 8f6f 	isb	sy
 8017b82:	f3bf 8f4f 	dsb	sy
 8017b86:	b662      	cpsie	i
 8017b88:	e7fe      	b.n	8017b88 <vPortFree+0x28>
 8017b8a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017b8e:	b672      	cpsid	i
 8017b90:	f383 8811 	msr	BASEPRI, r3
 8017b94:	f3bf 8f6f 	isb	sy
 8017b98:	f3bf 8f4f 	dsb	sy
 8017b9c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017b9e:	e7fe      	b.n	8017b9e <vPortFree+0x3e>
 8017ba0:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017ba2:	ea23 0302 	bic.w	r3, r3, r2
{
 8017ba6:	b500      	push	{lr}
 8017ba8:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017baa:	f840 3c04 	str.w	r3, [r0, #-4]
 8017bae:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8017bb0:	f7fe fe32 	bl	8016818 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017bb4:	4a08      	ldr	r2, [pc, #32]	; (8017bd8 <vPortFree+0x78>)
 8017bb6:	9801      	ldr	r0, [sp, #4]
 8017bb8:	6811      	ldr	r1, [r2, #0]
 8017bba:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017bbe:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017bc0:	440b      	add	r3, r1
 8017bc2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017bc4:	f7ff fefe 	bl	80179c4 <prvInsertBlockIntoFreeList>
}
 8017bc8:	b003      	add	sp, #12
 8017bca:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 8017bce:	f7fe bf7f 	b.w	8016ad0 <xTaskResumeAll>
 8017bd2:	bf00      	nop
 8017bd4:	2001e5a0 	.word	0x2001e5a0
 8017bd8:	2001e5a4 	.word	0x2001e5a4

08017bdc <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8017bdc:	f003 bb10 	b.w	801b200 <pbuf_free>

08017be0 <tcpip_thread>:
{
 8017be0:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8017be2:	4839      	ldr	r0, [pc, #228]	; (8017cc8 <tcpip_thread+0xe8>)
{
 8017be4:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8017be6:	f00b feff 	bl	80239e8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017bea:	4b38      	ldr	r3, [pc, #224]	; (8017ccc <tcpip_thread+0xec>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	b113      	cbz	r3, 8017bf6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8017bf0:	4a37      	ldr	r2, [pc, #220]	; (8017cd0 <tcpip_thread+0xf0>)
 8017bf2:	6810      	ldr	r0, [r2, #0]
 8017bf4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017bf6:	4d34      	ldr	r5, [pc, #208]	; (8017cc8 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017bf8:	4e36      	ldr	r6, [pc, #216]	; (8017cd4 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017bfa:	4f37      	ldr	r7, [pc, #220]	; (8017cd8 <tcpip_thread+0xf8>)
 8017bfc:	e010      	b.n	8017c20 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8017bfe:	b168      	cbz	r0, 8017c1c <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8017c00:	4628      	mov	r0, r5
 8017c02:	f00b fef7 	bl	80239f4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8017c06:	4622      	mov	r2, r4
 8017c08:	a901      	add	r1, sp, #4
 8017c0a:	4630      	mov	r0, r6
 8017c0c:	f00b fea8 	bl	8023960 <sys_arch_mbox_fetch>
 8017c10:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8017c12:	4628      	mov	r0, r5
 8017c14:	f00b fee8 	bl	80239e8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8017c18:	3401      	adds	r4, #1
 8017c1a:	d111      	bne.n	8017c40 <tcpip_thread+0x60>
    sys_check_timeouts();
 8017c1c:	f008 f85c 	bl	801fcd8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8017c20:	f008 f882 	bl	801fd28 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017c24:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8017c26:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8017c28:	d1e9      	bne.n	8017bfe <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	f00b fee2 	bl	80239f4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017c30:	2200      	movs	r2, #0
 8017c32:	a901      	add	r1, sp, #4
 8017c34:	4630      	mov	r0, r6
 8017c36:	f00b fe93 	bl	8023960 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8017c3a:	4628      	mov	r0, r5
 8017c3c:	f00b fed4 	bl	80239e8 <sys_mutex_lock>
    if (msg == NULL) {
 8017c40:	9c01      	ldr	r4, [sp, #4]
 8017c42:	b37c      	cbz	r4, 8017ca4 <tcpip_thread+0xc4>
  switch (msg->type) {
 8017c44:	7823      	ldrb	r3, [r4, #0]
 8017c46:	2b04      	cmp	r3, #4
 8017c48:	d837      	bhi.n	8017cba <tcpip_thread+0xda>
 8017c4a:	e8df f003 	tbb	[pc, r3]
 8017c4e:	1821      	.short	0x1821
 8017c50:	070f      	.short	0x070f
 8017c52:	03          	.byte	0x03
 8017c53:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c54:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017c58:	4798      	blx	r3
      break;
 8017c5a:	e7e1      	b.n	8017c20 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017c5c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017c60:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c62:	4621      	mov	r1, r4
 8017c64:	2009      	movs	r0, #9
 8017c66:	f002 fdb3 	bl	801a7d0 <memp_free>
      break;
 8017c6a:	e7d9      	b.n	8017c20 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8017c6c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8017c70:	f008 f814 	bl	801fc9c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c74:	4621      	mov	r1, r4
 8017c76:	2009      	movs	r0, #9
 8017c78:	f002 fdaa 	bl	801a7d0 <memp_free>
      break;
 8017c7c:	e7d0      	b.n	8017c20 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8017c7e:	1d20      	adds	r0, r4, #4
 8017c80:	c807      	ldmia	r0, {r0, r1, r2}
 8017c82:	f007 ffed 	bl	801fc60 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017c86:	4621      	mov	r1, r4
 8017c88:	2009      	movs	r0, #9
 8017c8a:	f002 fda1 	bl	801a7d0 <memp_free>
      break;
 8017c8e:	e7c7      	b.n	8017c20 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017c90:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017c94:	6860      	ldr	r0, [r4, #4]
 8017c96:	4798      	blx	r3
 8017c98:	b958      	cbnz	r0, 8017cb2 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017c9a:	4621      	mov	r1, r4
 8017c9c:	200a      	movs	r0, #10
 8017c9e:	f002 fd97 	bl	801a7d0 <memp_free>
      break;
 8017ca2:	e7bd      	b.n	8017c20 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017ca4:	463b      	mov	r3, r7
 8017ca6:	2291      	movs	r2, #145	; 0x91
 8017ca8:	490c      	ldr	r1, [pc, #48]	; (8017cdc <tcpip_thread+0xfc>)
 8017caa:	480d      	ldr	r0, [pc, #52]	; (8017ce0 <tcpip_thread+0x100>)
 8017cac:	f00d fb72 	bl	8025394 <iprintf>
      continue;
 8017cb0:	e7b6      	b.n	8017c20 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8017cb2:	6860      	ldr	r0, [r4, #4]
 8017cb4:	f003 faa4 	bl	801b200 <pbuf_free>
 8017cb8:	e7ef      	b.n	8017c9a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017cba:	463b      	mov	r3, r7
 8017cbc:	22cf      	movs	r2, #207	; 0xcf
 8017cbe:	4907      	ldr	r1, [pc, #28]	; (8017cdc <tcpip_thread+0xfc>)
 8017cc0:	4807      	ldr	r0, [pc, #28]	; (8017ce0 <tcpip_thread+0x100>)
 8017cc2:	f00d fb67 	bl	8025394 <iprintf>
      break;
 8017cc6:	e7ab      	b.n	8017c20 <tcpip_thread+0x40>
 8017cc8:	2001e5b4 	.word	0x2001e5b4
 8017ccc:	2001e5b8 	.word	0x2001e5b8
 8017cd0:	2001e5bc 	.word	0x2001e5bc
 8017cd4:	2001e5c0 	.word	0x2001e5c0
 8017cd8:	0802cd58 	.word	0x0802cd58
 8017cdc:	0802cd88 	.word	0x0802cd88
 8017ce0:	08029fe8 	.word	0x08029fe8

08017ce4 <tcpip_inpkt>:
{
 8017ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017ce8:	4814      	ldr	r0, [pc, #80]	; (8017d3c <tcpip_inpkt+0x58>)
{
 8017cea:	460e      	mov	r6, r1
 8017cec:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017cee:	f00b fe59 	bl	80239a4 <sys_mbox_valid>
 8017cf2:	b188      	cbz	r0, 8017d18 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017cf4:	22fe      	movs	r2, #254	; 0xfe
 8017cf6:	4912      	ldr	r1, [pc, #72]	; (8017d40 <tcpip_inpkt+0x5c>)
 8017cf8:	200a      	movs	r0, #10
 8017cfa:	f002 fd33 	bl	801a764 <memp_malloc_fn>
  if (msg == NULL) {
 8017cfe:	4604      	mov	r4, r0
 8017d00:	b1c0      	cbz	r0, 8017d34 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8017d02:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 8017d04:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8017d06:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d08:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8017d0a:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d0c:	480b      	ldr	r0, [pc, #44]	; (8017d3c <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 8017d0e:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d10:	f00b fe1c 	bl	802394c <sys_mbox_trypost>
 8017d14:	b938      	cbnz	r0, 8017d26 <tcpip_inpkt+0x42>
}
 8017d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d18:	4b09      	ldr	r3, [pc, #36]	; (8017d40 <tcpip_inpkt+0x5c>)
 8017d1a:	22fc      	movs	r2, #252	; 0xfc
 8017d1c:	4909      	ldr	r1, [pc, #36]	; (8017d44 <tcpip_inpkt+0x60>)
 8017d1e:	480a      	ldr	r0, [pc, #40]	; (8017d48 <tcpip_inpkt+0x64>)
 8017d20:	f00d fb38 	bl	8025394 <iprintf>
 8017d24:	e7e6      	b.n	8017cf4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8017d26:	4621      	mov	r1, r4
 8017d28:	200a      	movs	r0, #10
 8017d2a:	f002 fd51 	bl	801a7d0 <memp_free>
    return ERR_MEM;
 8017d2e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8017d34:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d3a:	bf00      	nop
 8017d3c:	2001e5c0 	.word	0x2001e5c0
 8017d40:	0802cd58 	.word	0x0802cd58
 8017d44:	0802cda8 	.word	0x0802cda8
 8017d48:	08029fe8 	.word	0x08029fe8

08017d4c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8017d4c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8017d50:	f013 0f18 	tst.w	r3, #24
 8017d54:	d002      	beq.n	8017d5c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017d56:	4a03      	ldr	r2, [pc, #12]	; (8017d64 <tcpip_input+0x18>)
 8017d58:	f7ff bfc4 	b.w	8017ce4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8017d5c:	4a02      	ldr	r2, [pc, #8]	; (8017d68 <tcpip_input+0x1c>)
 8017d5e:	f7ff bfc1 	b.w	8017ce4 <tcpip_inpkt>
 8017d62:	bf00      	nop
 8017d64:	0802380d 	.word	0x0802380d
 8017d68:	08022a69 	.word	0x08022a69

08017d6c <tcpip_try_callback>:
{
 8017d6c:	b570      	push	{r4, r5, r6, lr}
 8017d6e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d70:	4814      	ldr	r0, [pc, #80]	; (8017dc4 <tcpip_try_callback+0x58>)
{
 8017d72:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d74:	f00b fe16 	bl	80239a4 <sys_mbox_valid>
 8017d78:	b188      	cbz	r0, 8017d9e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017d7a:	f240 125f 	movw	r2, #351	; 0x15f
 8017d7e:	4912      	ldr	r1, [pc, #72]	; (8017dc8 <tcpip_try_callback+0x5c>)
 8017d80:	2009      	movs	r0, #9
 8017d82:	f002 fcef 	bl	801a764 <memp_malloc_fn>
  if (msg == NULL) {
 8017d86:	4604      	mov	r4, r0
 8017d88:	b1c0      	cbz	r0, 8017dbc <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8017d8a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d8c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8017d8e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d92:	480c      	ldr	r0, [pc, #48]	; (8017dc4 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8017d94:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017d96:	f00b fdd9 	bl	802394c <sys_mbox_trypost>
 8017d9a:	b940      	cbnz	r0, 8017dae <tcpip_try_callback+0x42>
}
 8017d9c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017d9e:	4b0a      	ldr	r3, [pc, #40]	; (8017dc8 <tcpip_try_callback+0x5c>)
 8017da0:	f240 125d 	movw	r2, #349	; 0x15d
 8017da4:	4909      	ldr	r1, [pc, #36]	; (8017dcc <tcpip_try_callback+0x60>)
 8017da6:	480a      	ldr	r0, [pc, #40]	; (8017dd0 <tcpip_try_callback+0x64>)
 8017da8:	f00d faf4 	bl	8025394 <iprintf>
 8017dac:	e7e5      	b.n	8017d7a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017dae:	4621      	mov	r1, r4
 8017db0:	2009      	movs	r0, #9
 8017db2:	f002 fd0d 	bl	801a7d0 <memp_free>
    return ERR_MEM;
 8017db6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017dba:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017dbc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017dc0:	bd70      	pop	{r4, r5, r6, pc}
 8017dc2:	bf00      	nop
 8017dc4:	2001e5c0 	.word	0x2001e5c0
 8017dc8:	0802cd58 	.word	0x0802cd58
 8017dcc:	0802cda8 	.word	0x0802cda8
 8017dd0:	08029fe8 	.word	0x08029fe8

08017dd4 <tcpip_init>:
{
 8017dd4:	b530      	push	{r4, r5, lr}
 8017dd6:	b083      	sub	sp, #12
 8017dd8:	4605      	mov	r5, r0
 8017dda:	460c      	mov	r4, r1
  lwip_init();
 8017ddc:	f001 ffae 	bl	8019d3c <lwip_init>
  tcpip_init_done = initfunc;
 8017de0:	4a15      	ldr	r2, [pc, #84]	; (8017e38 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017de2:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 8017de4:	4b15      	ldr	r3, [pc, #84]	; (8017e3c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017de6:	4816      	ldr	r0, [pc, #88]	; (8017e40 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8017de8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8017dea:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8017dec:	f00b fd98 	bl	8023920 <sys_mbox_new>
 8017df0:	b968      	cbnz	r0, 8017e0e <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017df2:	4814      	ldr	r0, [pc, #80]	; (8017e44 <tcpip_init+0x70>)
 8017df4:	f00b fde8 	bl	80239c8 <sys_mutex_new>
 8017df8:	b9a8      	cbnz	r0, 8017e26 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8017dfa:	2200      	movs	r2, #0
 8017dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e00:	4911      	ldr	r1, [pc, #68]	; (8017e48 <tcpip_init+0x74>)
 8017e02:	9200      	str	r2, [sp, #0]
 8017e04:	4811      	ldr	r0, [pc, #68]	; (8017e4c <tcpip_init+0x78>)
 8017e06:	f00b fdf9 	bl	80239fc <sys_thread_new>
}
 8017e0a:	b003      	add	sp, #12
 8017e0c:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8017e0e:	4b10      	ldr	r3, [pc, #64]	; (8017e50 <tcpip_init+0x7c>)
 8017e10:	f240 2261 	movw	r2, #609	; 0x261
 8017e14:	490f      	ldr	r1, [pc, #60]	; (8017e54 <tcpip_init+0x80>)
 8017e16:	4810      	ldr	r0, [pc, #64]	; (8017e58 <tcpip_init+0x84>)
 8017e18:	f00d fabc 	bl	8025394 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8017e1c:	4809      	ldr	r0, [pc, #36]	; (8017e44 <tcpip_init+0x70>)
 8017e1e:	f00b fdd3 	bl	80239c8 <sys_mutex_new>
 8017e22:	2800      	cmp	r0, #0
 8017e24:	d0e9      	beq.n	8017dfa <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8017e26:	4b0a      	ldr	r3, [pc, #40]	; (8017e50 <tcpip_init+0x7c>)
 8017e28:	f240 2265 	movw	r2, #613	; 0x265
 8017e2c:	490b      	ldr	r1, [pc, #44]	; (8017e5c <tcpip_init+0x88>)
 8017e2e:	480a      	ldr	r0, [pc, #40]	; (8017e58 <tcpip_init+0x84>)
 8017e30:	f00d fab0 	bl	8025394 <iprintf>
 8017e34:	e7e1      	b.n	8017dfa <tcpip_init+0x26>
 8017e36:	bf00      	nop
 8017e38:	2001e5b8 	.word	0x2001e5b8
 8017e3c:	2001e5bc 	.word	0x2001e5bc
 8017e40:	2001e5c0 	.word	0x2001e5c0
 8017e44:	2001e5b4 	.word	0x2001e5b4
 8017e48:	08017be1 	.word	0x08017be1
 8017e4c:	0802ce00 	.word	0x0802ce00
 8017e50:	0802cd58 	.word	0x0802cd58
 8017e54:	0802cdb8 	.word	0x0802cdb8
 8017e58:	08029fe8 	.word	0x08029fe8
 8017e5c:	0802cddc 	.word	0x0802cddc

08017e60 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8017e60:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8017e62:	4801      	ldr	r0, [pc, #4]	; (8017e68 <pbuf_free_callback+0x8>)
 8017e64:	f7ff bf82 	b.w	8017d6c <tcpip_try_callback>
 8017e68:	08017bdd 	.word	0x08017bdd

08017e6c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8017e6c:	b1e8      	cbz	r0, 8017eaa <fs_open+0x3e>
{
 8017e6e:	b570      	push	{r4, r5, r6, lr}
 8017e70:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8017e72:	b1b9      	cbz	r1, 8017ea4 <fs_open+0x38>
 8017e74:	4606      	mov	r6, r0
 8017e76:	490e      	ldr	r1, [pc, #56]	; (8017eb0 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017e78:	4c0e      	ldr	r4, [pc, #56]	; (8017eb4 <fs_open+0x48>)
 8017e7a:	e000      	b.n	8017e7e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 8017e7c:	6861      	ldr	r1, [r4, #4]
 8017e7e:	4628      	mov	r0, r5
 8017e80:	f7e8 f9de 	bl	8000240 <strcmp>
 8017e84:	b128      	cbz	r0, 8017e92 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017e86:	6824      	ldr	r4, [r4, #0]
 8017e88:	2c00      	cmp	r4, #0
 8017e8a:	d1f7      	bne.n	8017e7c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8017e8c:	f06f 0005 	mvn.w	r0, #5
}
 8017e90:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8017e92:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8017e96:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8017e98:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 8017e9a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 8017e9e:	7c23      	ldrb	r3, [r4, #16]
 8017ea0:	7433      	strb	r3, [r6, #16]
}
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017ea4:	f06f 000f 	mvn.w	r0, #15
}
 8017ea8:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017eaa:	f06f 000f 	mvn.w	r0, #15
}
 8017eae:	4770      	bx	lr
 8017eb0:	08037c94 	.word	0x08037c94
 8017eb4:	08042e00 	.word	0x08042e00

08017eb8 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8017eb8:	4770      	bx	lr
 8017eba:	bf00      	nop

08017ebc <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8017ebc:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8017ec0:	1a10      	subs	r0, r2, r0
 8017ec2:	4770      	bx	lr

08017ec4 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8017ec8:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8017eca:	b374      	cbz	r4, 8017f2a <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8017ecc:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 8017ed0:	4617      	mov	r7, r2
 8017ed2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8017ed6:	4605      	mov	r5, r0
 8017ed8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8017edc:	460e      	mov	r6, r1
 8017ede:	4698      	mov	r8, r3
 8017ee0:	fa1f fc8c 	uxth.w	ip, ip
 8017ee4:	4594      	cmp	ip, r2
 8017ee6:	bf28      	it	cs
 8017ee8:	4694      	movcs	ip, r2
 8017eea:	4564      	cmp	r4, ip
 8017eec:	bf28      	it	cs
 8017eee:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8017ef0:	4643      	mov	r3, r8
 8017ef2:	4622      	mov	r2, r4
 8017ef4:	4631      	mov	r1, r6
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f006 fd1a 	bl	801e930 <tcp_write>
    if (err == ERR_MEM) {
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d007      	beq.n	8017f10 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8017f00:	b970      	cbnz	r0, 8017f20 <http_write+0x5c>
 8017f02:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8017f04:	8b6b      	ldrh	r3, [r5, #26]
 8017f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017f0a:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 8017f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8017f10:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8017f14:	b123      	cbz	r3, 8017f20 <http_write+0x5c>
 8017f16:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 8017f1a:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8017f1c:	2b08      	cmp	r3, #8
 8017f1e:	d901      	bls.n	8017f24 <http_write+0x60>
    *length = 0;
 8017f20:	2400      	movs	r4, #0
 8017f22:	e7ee      	b.n	8017f02 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 8017f24:	2c01      	cmp	r4, #1
 8017f26:	d8e3      	bhi.n	8017ef0 <http_write+0x2c>
 8017f28:	e7fa      	b.n	8017f20 <http_write+0x5c>
    return ERR_OK;
 8017f2a:	4620      	mov	r0, r4
}
 8017f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f30 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8017f30:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8017f32:	4b0e      	ldr	r3, [pc, #56]	; (8017f6c <http_get_404_file+0x3c>)
{
 8017f34:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8017f36:	4604      	mov	r4, r0
 8017f38:	4619      	mov	r1, r3
  *uri = "/404.html";
 8017f3a:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8017f3c:	f7ff ff96 	bl	8017e6c <fs_open>
  if (err != ERR_OK) {
 8017f40:	b908      	cbnz	r0, 8017f46 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8017f42:	4620      	mov	r0, r4
 8017f44:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8017f46:	490a      	ldr	r1, [pc, #40]	; (8017f70 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8017f48:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8017f4a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8017f4c:	f7ff ff8e 	bl	8017e6c <fs_open>
    if (err != ERR_OK) {
 8017f50:	2800      	cmp	r0, #0
 8017f52:	d0f6      	beq.n	8017f42 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8017f54:	4907      	ldr	r1, [pc, #28]	; (8017f74 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8017f56:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8017f58:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8017f5a:	f7ff ff87 	bl	8017e6c <fs_open>
      if (err != ERR_OK) {
 8017f5e:	2800      	cmp	r0, #0
 8017f60:	d0ef      	beq.n	8017f42 <http_get_404_file+0x12>
        *uri = NULL;
 8017f62:	2300      	movs	r3, #0
        return NULL;
 8017f64:	461c      	mov	r4, r3
        *uri = NULL;
 8017f66:	602b      	str	r3, [r5, #0]
        return NULL;
 8017f68:	e7eb      	b.n	8017f42 <http_get_404_file+0x12>
 8017f6a:	bf00      	nop
 8017f6c:	08042e14 	.word	0x08042e14
 8017f70:	08042e20 	.word	0x08042e20
 8017f74:	08042e2c 	.word	0x08042e2c

08017f78 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8017f78:	bb82      	cbnz	r2, 8017fdc <http_accept+0x64>
{
 8017f7a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8017f7c:	fab1 f581 	clz	r5, r1
 8017f80:	460c      	mov	r4, r1
 8017f82:	096d      	lsrs	r5, r5, #5
 8017f84:	b339      	cbz	r1, 8017fd6 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017f86:	2101      	movs	r1, #1
 8017f88:	4620      	mov	r0, r4
 8017f8a:	f003 fec3 	bl	801bd14 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8017f8e:	2034      	movs	r0, #52	; 0x34
 8017f90:	f002 fa46 	bl	801a420 <mem_malloc>
  if (ret != NULL) {
 8017f94:	4606      	mov	r6, r0
 8017f96:	b1d8      	cbz	r0, 8017fd0 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8017f98:	2234      	movs	r2, #52	; 0x34
 8017f9a:	4629      	mov	r1, r5
 8017f9c:	f00c fa5c 	bl	8024458 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8017fa0:	4631      	mov	r1, r6
 8017fa2:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8017fa4:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8017fa6:	f003 feeb 	bl	801bd80 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8017faa:	4620      	mov	r0, r4
 8017fac:	490d      	ldr	r1, [pc, #52]	; (8017fe4 <http_accept+0x6c>)
 8017fae:	f003 feeb 	bl	801bd88 <tcp_recv>
  altcp_err(pcb, http_err);
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	490c      	ldr	r1, [pc, #48]	; (8017fe8 <http_accept+0x70>)
 8017fb6:	f003 ff1f 	bl	801bdf8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017fba:	2204      	movs	r2, #4
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	490b      	ldr	r1, [pc, #44]	; (8017fec <http_accept+0x74>)
 8017fc0:	f003 ff3c 	bl	801be3c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	490a      	ldr	r1, [pc, #40]	; (8017ff0 <http_accept+0x78>)
 8017fc8:	f003 fefa 	bl	801bdc0 <tcp_sent>

  return ERR_OK;
 8017fcc:	4628      	mov	r0, r5
}
 8017fce:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017fd0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017fd4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017fd6:	f06f 0005 	mvn.w	r0, #5
}
 8017fda:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017fdc:	f06f 0005 	mvn.w	r0, #5
}
 8017fe0:	4770      	bx	lr
 8017fe2:	bf00      	nop
 8017fe4:	08018c51 	.word	0x08018c51
 8017fe8:	08018539 	.word	0x08018539
 8017fec:	08018bf9 	.word	0x08018bf9
 8017ff0:	08018be1 	.word	0x08018be1

08017ff4 <http_init_file>:
{
 8017ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ff8:	b087      	sub	sp, #28
 8017ffa:	4604      	mov	r4, r0
  if (file != NULL) {
 8017ffc:	460e      	mov	r6, r1
{
 8017ffe:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8018002:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018004:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8018008:	2900      	cmp	r1, #0
 801800a:	f000 80aa 	beq.w	8018162 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801800e:	680b      	ldr	r3, [r1, #0]
 8018010:	2b00      	cmp	r3, #0
 8018012:	f000 80ac 	beq.w	801816e <http_init_file+0x17a>
    if (tag_check) {
 8018016:	2f00      	cmp	r7, #0
 8018018:	d16f      	bne.n	80180fa <http_init_file+0x106>
    hs->handle = file;
 801801a:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 801801c:	2d00      	cmp	r5, #0
 801801e:	d04f      	beq.n	80180c0 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8018020:	782b      	ldrb	r3, [r5, #0]
 8018022:	2b00      	cmp	r3, #0
 8018024:	f000 80c0 	beq.w	80181a8 <http_init_file+0x1b4>
 8018028:	4b61      	ldr	r3, [pc, #388]	; (80181b0 <http_init_file+0x1bc>)
 801802a:	2701      	movs	r7, #1
 801802c:	9405      	str	r4, [sp, #20]
 801802e:	462c      	mov	r4, r5
 8018030:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80181b4 <http_init_file+0x1c0>
 8018034:	4698      	mov	r8, r3
 8018036:	9304      	str	r3, [sp, #16]
 8018038:	e017      	b.n	801806a <http_init_file+0x76>
 801803a:	2d0e      	cmp	r5, #14
      *pair = '\0';
 801803c:	f04f 0300 	mov.w	r3, #0
 8018040:	bfcc      	ite	gt
 8018042:	2500      	movgt	r5, #0
 8018044:	2501      	movle	r5, #1
 8018046:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 801804a:	4620      	mov	r0, r4
 801804c:	213d      	movs	r1, #61	; 0x3d
 801804e:	f00d fc25 	bl	802589c <strchr>
    if (equals) {
 8018052:	b320      	cbz	r0, 801809e <http_init_file+0xaa>
      *equals = '\0';
 8018054:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018058:	f108 0804 	add.w	r8, r8, #4
 801805c:	3701      	adds	r7, #1
 801805e:	465c      	mov	r4, fp
      *equals = '\0';
 8018060:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8018064:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018068:	b30d      	cbz	r5, 80180ae <http_init_file+0xba>
    pair = strchr(pair, '&');
 801806a:	4620      	mov	r0, r4
 801806c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 801806e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8018072:	1e7d      	subs	r5, r7, #1
 8018074:	f00d fc12 	bl	802589c <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018078:	46ba      	mov	sl, r7
    if (pair) {
 801807a:	4683      	mov	fp, r0
 801807c:	2800      	cmp	r0, #0
 801807e:	d1dc      	bne.n	801803a <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8018080:	4620      	mov	r0, r4
 8018082:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8018084:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8018086:	f00d fc09 	bl	802589c <strchr>
      if (pair) {
 801808a:	2800      	cmp	r0, #0
 801808c:	d0dd      	beq.n	801804a <http_init_file+0x56>
        *pair = '\0';
 801808e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8018092:	213d      	movs	r1, #61	; 0x3d
 8018094:	4620      	mov	r0, r4
 8018096:	f00d fc01 	bl	802589c <strchr>
    if (equals) {
 801809a:	2800      	cmp	r0, #0
 801809c:	d1da      	bne.n	8018054 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 801809e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80180a2:	3701      	adds	r7, #1
 80180a4:	f108 0804 	add.w	r8, r8, #4
 80180a8:	465c      	mov	r4, fp
 80180aa:	2d00      	cmp	r5, #0
 80180ac:	d1dd      	bne.n	801806a <http_init_file+0x76>
 80180ae:	4652      	mov	r2, sl
 80180b0:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80180b2:	9b04      	ldr	r3, [sp, #16]
 80180b4:	4630      	mov	r0, r6
 80180b6:	9903      	ldr	r1, [sp, #12]
 80180b8:	9300      	str	r3, [sp, #0]
 80180ba:	4b3e      	ldr	r3, [pc, #248]	; (80181b4 <http_init_file+0x1c0>)
 80180bc:	f7ef fcdc 	bl	8007a78 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80180c0:	e9d6 3200 	ldrd	r3, r2, [r6]
 80180c4:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80180c6:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80180c8:	db5c      	blt.n	8018184 <http_init_file+0x190>
    hs->retries = 0;
 80180ca:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 80180cc:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 80180ce:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80180d0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80180d4:	7c1b      	ldrb	r3, [r3, #16]
 80180d6:	07d9      	lsls	r1, r3, #31
 80180d8:	d526      	bpl.n	8018128 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80180da:	9b02      	ldr	r3, [sp, #8]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d132      	bne.n	8018146 <http_init_file+0x152>
  if (hs->keepalive) {
 80180e0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80180e4:	b12b      	cbz	r3, 80180f2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 80180e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d054      	beq.n	8018196 <http_init_file+0x1a2>
      hs->keepalive = 0;
 80180ec:	2300      	movs	r3, #0
 80180ee:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80180f2:	2000      	movs	r0, #0
 80180f4:	b007      	add	sp, #28
 80180f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80180fa:	f44f 7090 	mov.w	r0, #288	; 0x120
 80180fe:	f002 f98f 	bl	801a420 <mem_malloc>
  if (ret != NULL) {
 8018102:	4607      	mov	r7, r0
 8018104:	2800      	cmp	r0, #0
 8018106:	d088      	beq.n	801801a <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8018108:	f44f 7290 	mov.w	r2, #288	; 0x120
 801810c:	2100      	movs	r1, #0
 801810e:	f00c f9a3 	bl	8024458 <memset>
        ssi->parsed = file->data;
 8018112:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8018114:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8018116:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8018118:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 801811c:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 801811e:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8018120:	2d00      	cmp	r5, #0
 8018122:	f47f af7d 	bne.w	8018020 <http_init_file+0x2c>
 8018126:	e7cb      	b.n	80180c0 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8018128:	4b23      	ldr	r3, [pc, #140]	; (80181b8 <http_init_file+0x1c4>)
 801812a:	f640 1243 	movw	r2, #2371	; 0x943
 801812e:	4923      	ldr	r1, [pc, #140]	; (80181bc <http_init_file+0x1c8>)
 8018130:	4823      	ldr	r0, [pc, #140]	; (80181c0 <http_init_file+0x1cc>)
 8018132:	f00d f92f 	bl	8025394 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8018136:	9b02      	ldr	r3, [sp, #8]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d0d1      	beq.n	80180e0 <http_init_file+0xec>
 801813c:	6963      	ldr	r3, [r4, #20]
 801813e:	7c1b      	ldrb	r3, [r3, #16]
 8018140:	07db      	lsls	r3, r3, #31
 8018142:	d5cd      	bpl.n	80180e0 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8018144:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8018146:	491f      	ldr	r1, [pc, #124]	; (80181c4 <http_init_file+0x1d0>)
 8018148:	69a0      	ldr	r0, [r4, #24]
 801814a:	f001 f823 	bl	8019194 <lwip_strnstr>
      if (file_start != NULL) {
 801814e:	2800      	cmp	r0, #0
 8018150:	d0c6      	beq.n	80180e0 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8018152:	3004      	adds	r0, #4
 8018154:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8018156:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8018158:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 801815a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 801815c:	1a9b      	subs	r3, r3, r2
 801815e:	6263      	str	r3, [r4, #36]	; 0x24
 8018160:	e7be      	b.n	80180e0 <http_init_file+0xec>
    hs->file = NULL;
 8018162:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8018166:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8018168:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801816c:	e7b8      	b.n	80180e0 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 801816e:	4b12      	ldr	r3, [pc, #72]	; (80181b8 <http_init_file+0x1c4>)
 8018170:	f640 120b 	movw	r2, #2315	; 0x90b
 8018174:	4914      	ldr	r1, [pc, #80]	; (80181c8 <http_init_file+0x1d4>)
 8018176:	4812      	ldr	r0, [pc, #72]	; (80181c0 <http_init_file+0x1cc>)
 8018178:	f00d f90c 	bl	8025394 <iprintf>
    if (tag_check) {
 801817c:	2f00      	cmp	r7, #0
 801817e:	f43f af4c 	beq.w	801801a <http_init_file+0x26>
 8018182:	e7ba      	b.n	80180fa <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8018184:	f640 1234 	movw	r2, #2356	; 0x934
 8018188:	4b0b      	ldr	r3, [pc, #44]	; (80181b8 <http_init_file+0x1c4>)
 801818a:	4910      	ldr	r1, [pc, #64]	; (80181cc <http_init_file+0x1d8>)
 801818c:	480c      	ldr	r0, [pc, #48]	; (80181c0 <http_init_file+0x1cc>)
 801818e:	f00d f901 	bl	8025394 <iprintf>
      hs->left = (u32_t)file->len;
 8018192:	6872      	ldr	r2, [r6, #4]
 8018194:	e799      	b.n	80180ca <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8018196:	6963      	ldr	r3, [r4, #20]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d0aa      	beq.n	80180f2 <http_init_file+0xfe>
 801819c:	7c1b      	ldrb	r3, [r3, #16]
 801819e:	f003 0303 	and.w	r3, r3, #3
 80181a2:	2b01      	cmp	r3, #1
 80181a4:	d1a5      	bne.n	80180f2 <http_init_file+0xfe>
 80181a6:	e7a1      	b.n	80180ec <http_init_file+0xf8>
    return (0);
 80181a8:	461a      	mov	r2, r3
 80181aa:	4b01      	ldr	r3, [pc, #4]	; (80181b0 <http_init_file+0x1bc>)
 80181ac:	9304      	str	r3, [sp, #16]
 80181ae:	e780      	b.n	80180b2 <http_init_file+0xbe>
 80181b0:	2001e5c4 	.word	0x2001e5c4
 80181b4:	2001e604 	.word	0x2001e604
 80181b8:	08042e38 	.word	0x08042e38
 80181bc:	08042ea4 	.word	0x08042ea4
 80181c0:	08029fe8 	.word	0x08029fe8
 80181c4:	0802a26c 	.word	0x0802a26c
 80181c8:	08042e70 	.word	0x08042e70
 80181cc:	08042e84 	.word	0x08042e84

080181d0 <http_find_file>:
{
 80181d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181d4:	ed2d 8b02 	vpush	{d8}
 80181d8:	b087      	sub	sp, #28
 80181da:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 80181dc:	4608      	mov	r0, r1
 80181de:	460c      	mov	r4, r1
{
 80181e0:	4690      	mov	r8, r2
 80181e2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80181e4:	f7e8 f836 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80181e8:	4606      	mov	r6, r0
 80181ea:	b148      	cbz	r0, 8018200 <http_find_file+0x30>
 80181ec:	f100 39ff 	add.w	r9, r0, #4294967295
 80181f0:	f814 3009 	ldrb.w	r3, [r4, r9]
 80181f4:	2b2f      	cmp	r3, #47	; 0x2f
 80181f6:	d06a      	beq.n	80182ce <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 80181f8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80181fa:	f04f 0900 	mov.w	r9, #0
 80181fe:	e001      	b.n	8018204 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8018200:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8018202:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8018204:	213f      	movs	r1, #63	; 0x3f
 8018206:	4620      	mov	r0, r4
 8018208:	f00d fb48 	bl	802589c <strchr>
    if (params != NULL) {
 801820c:	4606      	mov	r6, r0
 801820e:	b118      	cbz	r0, 8018218 <http_find_file+0x48>
      *params = '\0';
 8018210:	2300      	movs	r3, #0
 8018212:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8018216:	9c05      	ldr	r4, [sp, #20]
 8018218:	4621      	mov	r1, r4
 801821a:	4628      	mov	r0, r5
 801821c:	f7ff fe26 	bl	8017e6c <fs_open>
    if (err == ERR_OK) {
 8018220:	b9b0      	cbnz	r0, 8018250 <http_find_file+0x80>
    if (file != NULL) {
 8018222:	b1e7      	cbz	r7, 801825e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8018224:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018228:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 801822a:	f019 0908 	ands.w	r9, r9, #8
 801822e:	d01d      	beq.n	801826c <http_find_file+0x9c>
        tag_check = 1;
 8018230:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018234:	4623      	mov	r3, r4
 8018236:	4642      	mov	r2, r8
 8018238:	4639      	mov	r1, r7
 801823a:	4628      	mov	r0, r5
 801823c:	9601      	str	r6, [sp, #4]
 801823e:	f8cd 9000 	str.w	r9, [sp]
 8018242:	f7ff fed7 	bl	8017ff4 <http_init_file>
}
 8018246:	b007      	add	sp, #28
 8018248:	ecbd 8b02 	vpop	{d8}
 801824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8018250:	a905      	add	r1, sp, #20
 8018252:	4628      	mov	r0, r5
 8018254:	f7ff fe6c 	bl	8017f30 <http_get_404_file>
 8018258:	4607      	mov	r7, r0
    if (file != NULL) {
 801825a:	2f00      	cmp	r7, #0
 801825c:	d1e2      	bne.n	8018224 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 801825e:	a905      	add	r1, sp, #20
 8018260:	4628      	mov	r0, r5
 8018262:	f7ff fe65 	bl	8017f30 <http_get_404_file>
 8018266:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8018268:	9c05      	ldr	r4, [sp, #20]
 801826a:	e7e3      	b.n	8018234 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 801826c:	213f      	movs	r1, #63	; 0x3f
 801826e:	4620      	mov	r0, r4
 8018270:	f00d fb14 	bl	802589c <strchr>
    if (param != NULL) {
 8018274:	4682      	mov	sl, r0
 8018276:	b108      	cbz	r0, 801827c <http_find_file+0xac>
      *param = 0;
 8018278:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801827c:	212e      	movs	r1, #46	; 0x2e
 801827e:	4620      	mov	r0, r4
 8018280:	f00d fb0c 	bl	802589c <strchr>
 8018284:	4603      	mov	r3, r0
 8018286:	b138      	cbz	r0, 8018298 <http_find_file+0xc8>
 8018288:	1c58      	adds	r0, r3, #1
 801828a:	212e      	movs	r1, #46	; 0x2e
 801828c:	461c      	mov	r4, r3
 801828e:	f00d fb05 	bl	802589c <strchr>
 8018292:	4603      	mov	r3, r0
 8018294:	2800      	cmp	r0, #0
 8018296:	d1f7      	bne.n	8018288 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8018298:	4940      	ldr	r1, [pc, #256]	; (801839c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801829a:	4620      	mov	r0, r4
 801829c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80183ac <http_find_file+0x1dc>
 80182a0:	f000 ffa0 	bl	80191e4 <lwip_stricmp>
 80182a4:	b148      	cbz	r0, 80182ba <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 80182a6:	4b3e      	ldr	r3, [pc, #248]	; (80183a0 <http_find_file+0x1d0>)
 80182a8:	459b      	cmp	fp, r3
 80182aa:	d008      	beq.n	80182be <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 80182ac:	f85b 1b04 	ldr.w	r1, [fp], #4
 80182b0:	4620      	mov	r0, r4
 80182b2:	f000 ff97 	bl	80191e4 <lwip_stricmp>
 80182b6:	2800      	cmp	r0, #0
 80182b8:	d1f5      	bne.n	80182a6 <http_find_file+0xd6>
        tag_check = 1;
 80182ba:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 80182be:	f1ba 0f00 	cmp.w	sl, #0
 80182c2:	d0d1      	beq.n	8018268 <http_find_file+0x98>
      *param = '?';
 80182c4:	233f      	movs	r3, #63	; 0x3f
 80182c6:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 80182ca:	9c05      	ldr	r4, [sp, #20]
 80182cc:	e7b2      	b.n	8018234 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80182ce:	4b35      	ldr	r3, [pc, #212]	; (80183a4 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80182d0:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80182d2:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80182d4:	d106      	bne.n	80182e4 <http_find_file+0x114>
 80182d6:	f1a0 0001 	sub.w	r0, r0, #1
 80182da:	fab0 f080 	clz	r0, r0
 80182de:	0940      	lsrs	r0, r0, #5
 80182e0:	2800      	cmp	r0, #0
 80182e2:	d057      	beq.n	8018394 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80182e4:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 80182e8:	bf28      	it	cs
 80182ea:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 80182ee:	2e01      	cmp	r6, #1
 80182f0:	d008      	beq.n	8018304 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 80182f2:	464a      	mov	r2, r9
 80182f4:	4621      	mov	r1, r4
 80182f6:	482b      	ldr	r0, [pc, #172]	; (80183a4 <http_find_file+0x1d4>)
 80182f8:	f00c f886 	bl	8024408 <memcpy>
      http_uri_buf[copy_len] = 0;
 80182fc:	2300      	movs	r3, #0
 80182fe:	9a02      	ldr	r2, [sp, #8]
 8018300:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8018304:	462f      	mov	r7, r5
 8018306:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 801830a:	f8df a098 	ldr.w	sl, [pc, #152]	; 80183a4 <http_find_file+0x1d4>
 801830e:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8018312:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8018314:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8018316:	d012      	beq.n	801833e <http_find_file+0x16e>
        if (len_left > 0) {
 8018318:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 801831c:	d113      	bne.n	8018346 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 801831e:	4641      	mov	r1, r8
 8018320:	4628      	mov	r0, r5
 8018322:	f7ff fda3 	bl	8017e6c <fs_open>
      if (err == ERR_OK) {
 8018326:	b338      	cbz	r0, 8018378 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8018328:	f10b 0b01 	add.w	fp, fp, #1
 801832c:	f1bb 0f05 	cmp.w	fp, #5
 8018330:	d1ef      	bne.n	8018312 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8018332:	ee18 8a10 	vmov	r8, s16
 8018336:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8018338:	f04f 0900 	mov.w	r9, #0
 801833c:	e762      	b.n	8018204 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 801833e:	4b1a      	ldr	r3, [pc, #104]	; (80183a8 <http_find_file+0x1d8>)
 8018340:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8018344:	e7eb      	b.n	801831e <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018346:	4b18      	ldr	r3, [pc, #96]	; (80183a8 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018348:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801834a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 801834e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018350:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8018352:	4608      	mov	r0, r1
 8018354:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8018356:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801835a:	f7e7 ff7b 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801835e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018360:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8018362:	4282      	cmp	r2, r0
 8018364:	bf28      	it	cs
 8018366:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8018368:	4620      	mov	r0, r4
 801836a:	9203      	str	r2, [sp, #12]
 801836c:	f00c f84c 	bl	8024408 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8018370:	2300      	movs	r3, #0
 8018372:	9a03      	ldr	r2, [sp, #12]
 8018374:	54a3      	strb	r3, [r4, r2]
 8018376:	e7d2      	b.n	801831e <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8018378:	4a0b      	ldr	r2, [pc, #44]	; (80183a8 <http_find_file+0x1d8>)
        uri = file_name;
 801837a:	4644      	mov	r4, r8
 801837c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8018380:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8018384:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8018386:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 801838a:	2d00      	cmp	r5, #0
 801838c:	f43f af3a 	beq.w	8018204 <http_find_file+0x34>
  char *params = NULL;
 8018390:	4606      	mov	r6, r0
 8018392:	e74f      	b.n	8018234 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8018394:	462f      	mov	r7, r5
 8018396:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8018398:	4681      	mov	r9, r0
 801839a:	e733      	b.n	8018204 <http_find_file+0x34>
 801839c:	08042ef8 	.word	0x08042ef8
 80183a0:	08043144 	.word	0x08043144
 80183a4:	2001e644 	.word	0x2001e644
 80183a8:	08043154 	.word	0x08043154
 80183ac:	08043134 	.word	0x08043134

080183b0 <http_post_rxpbuf>:
{
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4604      	mov	r4, r0
  if (p != NULL) {
 80183b4:	b1c9      	cbz	r1, 80183ea <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 80183b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80183b8:	890a      	ldrh	r2, [r1, #8]
 80183ba:	4293      	cmp	r3, r2
 80183bc:	d31a      	bcc.n	80183f4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 80183be:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 80183c0:	4620      	mov	r0, r4
 80183c2:	6323      	str	r3, [r4, #48]	; 0x30
 80183c4:	f7ef fc66 	bl	8007c94 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80183c8:	b178      	cbz	r0, 80183ea <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 80183ca:	2300      	movs	r3, #0
 80183cc:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 80183ce:	490a      	ldr	r1, [pc, #40]	; (80183f8 <http_post_rxpbuf+0x48>)
 80183d0:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80183d2:	4620      	mov	r0, r4
 80183d4:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80183d6:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80183d8:	f7ef fc6c 	bl	8007cb4 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80183dc:	462a      	mov	r2, r5
 80183de:	4620      	mov	r0, r4
 80183e0:	4905      	ldr	r1, [pc, #20]	; (80183f8 <http_post_rxpbuf+0x48>)
}
 80183e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80183e6:	f7ff bef3 	b.w	80181d0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 80183ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d0ee      	beq.n	80183ce <http_post_rxpbuf+0x1e>
}
 80183f0:	2000      	movs	r0, #0
 80183f2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80183f4:	2300      	movs	r3, #0
 80183f6:	e7e3      	b.n	80183c0 <http_post_rxpbuf+0x10>
 80183f8:	2001e644 	.word	0x2001e644

080183fc <http_find_error_file>:
  if (error_nr == 501) {
 80183fc:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8018400:	4a17      	ldr	r2, [pc, #92]	; (8018460 <http_find_error_file+0x64>)
 8018402:	4299      	cmp	r1, r3
 8018404:	4b17      	ldr	r3, [pc, #92]	; (8018464 <http_find_error_file+0x68>)
 8018406:	4918      	ldr	r1, [pc, #96]	; (8018468 <http_find_error_file+0x6c>)
{
 8018408:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 801840a:	4e18      	ldr	r6, [pc, #96]	; (801846c <http_find_error_file+0x70>)
 801840c:	bf18      	it	ne
 801840e:	461e      	movne	r6, r3
 8018410:	4b17      	ldr	r3, [pc, #92]	; (8018470 <http_find_error_file+0x74>)
 8018412:	bf18      	it	ne
 8018414:	460b      	movne	r3, r1
{
 8018416:	b084      	sub	sp, #16
 8018418:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801841a:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 801841c:	4d15      	ldr	r5, [pc, #84]	; (8018474 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 801841e:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8018420:	bf08      	it	eq
 8018422:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8018424:	f7ff fd22 	bl	8017e6c <fs_open>
 8018428:	9b03      	ldr	r3, [sp, #12]
 801842a:	b128      	cbz	r0, 8018438 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 801842c:	4629      	mov	r1, r5
 801842e:	4620      	mov	r0, r4
 8018430:	f7ff fd1c 	bl	8017e6c <fs_open>
 8018434:	b948      	cbnz	r0, 801844a <http_find_error_file+0x4e>
    uri = uri2;
 8018436:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8018438:	2200      	movs	r2, #0
 801843a:	4621      	mov	r1, r4
 801843c:	4620      	mov	r0, r4
 801843e:	e9cd 2200 	strd	r2, r2, [sp]
 8018442:	f7ff fdd7 	bl	8017ff4 <http_init_file>
}
 8018446:	b004      	add	sp, #16
 8018448:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 801844a:	4631      	mov	r1, r6
 801844c:	4620      	mov	r0, r4
 801844e:	f7ff fd0d 	bl	8017e6c <fs_open>
 8018452:	b908      	cbnz	r0, 8018458 <http_find_error_file+0x5c>
    uri = uri3;
 8018454:	4633      	mov	r3, r6
 8018456:	e7ef      	b.n	8018438 <http_find_error_file+0x3c>
    return ERR_ARG;
 8018458:	f06f 000f 	mvn.w	r0, #15
 801845c:	e7f3      	b.n	8018446 <http_find_error_file+0x4a>
 801845e:	bf00      	nop
 8018460:	08042edc 	.word	0x08042edc
 8018464:	08042ef4 	.word	0x08042ef4
 8018468:	08042f0c 	.word	0x08042f0c
 801846c:	08042ed0 	.word	0x08042ed0
 8018470:	08042ee8 	.word	0x08042ee8
 8018474:	08042f00 	.word	0x08042f00

08018478 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8018478:	b538      	push	{r3, r4, r5, lr}
 801847a:	4605      	mov	r5, r0
  if (hs != NULL) {
 801847c:	460c      	mov	r4, r1
 801847e:	2900      	cmp	r1, #0
 8018480:	d041      	beq.n	8018506 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8018482:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8018484:	bb83      	cbnz	r3, 80184e8 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8018486:	2100      	movs	r1, #0
 8018488:	4628      	mov	r0, r5
 801848a:	f003 fc79 	bl	801bd80 <tcp_arg>
  altcp_recv(pcb, NULL);
 801848e:	2100      	movs	r1, #0
 8018490:	4628      	mov	r0, r5
 8018492:	f003 fc79 	bl	801bd88 <tcp_recv>
  altcp_err(pcb, NULL);
 8018496:	2100      	movs	r1, #0
 8018498:	4628      	mov	r0, r5
 801849a:	f003 fcad 	bl	801bdf8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801849e:	2200      	movs	r2, #0
 80184a0:	4628      	mov	r0, r5
 80184a2:	4611      	mov	r1, r2
 80184a4:	f003 fcca 	bl	801be3c <tcp_poll>
  altcp_sent(pcb, NULL);
 80184a8:	4628      	mov	r0, r5
 80184aa:	2100      	movs	r1, #0
 80184ac:	f003 fc88 	bl	801bdc0 <tcp_sent>
  if (hs->handle) {
 80184b0:	6960      	ldr	r0, [r4, #20]
 80184b2:	b118      	cbz	r0, 80184bc <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 80184b4:	f7ff fd00 	bl	8017eb8 <fs_close>
    hs->handle = NULL;
 80184b8:	2300      	movs	r3, #0
 80184ba:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80184bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80184be:	b118      	cbz	r0, 80184c8 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 80184c0:	f001 fdf2 	bl	801a0a8 <mem_free>
    hs->ssi = NULL;
 80184c4:	2300      	movs	r3, #0
 80184c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80184c8:	6a20      	ldr	r0, [r4, #32]
 80184ca:	b118      	cbz	r0, 80184d4 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 80184cc:	f002 fe98 	bl	801b200 <pbuf_free>
    hs->req = NULL;
 80184d0:	2300      	movs	r3, #0
 80184d2:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 80184d4:	4620      	mov	r0, r4
 80184d6:	f001 fde7 	bl	801a0a8 <mem_free>
  err = altcp_close(pcb);
 80184da:	4628      	mov	r0, r5
 80184dc:	f004 fb0c 	bl	801caf8 <tcp_close>
  if (err != ERR_OK) {
 80184e0:	4604      	mov	r4, r0
 80184e2:	b948      	cbnz	r0, 80184f8 <http_close_or_abort_conn.constprop.0+0x80>
}
 80184e4:	4620      	mov	r0, r4
 80184e6:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80184e8:	4911      	ldr	r1, [pc, #68]	; (8018530 <http_close_or_abort_conn.constprop.0+0xb8>)
 80184ea:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80184ec:	223f      	movs	r2, #63	; 0x3f
 80184ee:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 80184f0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80184f2:	f7ef fbdf 	bl	8007cb4 <httpd_post_finished>
 80184f6:	e7c6      	b.n	8018486 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80184f8:	4628      	mov	r0, r5
 80184fa:	2204      	movs	r2, #4
 80184fc:	490d      	ldr	r1, [pc, #52]	; (8018534 <http_close_or_abort_conn.constprop.0+0xbc>)
 80184fe:	f003 fc9d 	bl	801be3c <tcp_poll>
}
 8018502:	4620      	mov	r0, r4
 8018504:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8018506:	f003 fc3b 	bl	801bd80 <tcp_arg>
  altcp_recv(pcb, NULL);
 801850a:	4621      	mov	r1, r4
 801850c:	4628      	mov	r0, r5
 801850e:	f003 fc3b 	bl	801bd88 <tcp_recv>
  altcp_err(pcb, NULL);
 8018512:	4621      	mov	r1, r4
 8018514:	4628      	mov	r0, r5
 8018516:	f003 fc6f 	bl	801bdf8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 801851a:	4621      	mov	r1, r4
 801851c:	4628      	mov	r0, r5
 801851e:	4622      	mov	r2, r4
 8018520:	f003 fc8c 	bl	801be3c <tcp_poll>
  altcp_sent(pcb, NULL);
 8018524:	4621      	mov	r1, r4
 8018526:	4628      	mov	r0, r5
 8018528:	f003 fc4a 	bl	801bdc0 <tcp_sent>
  if (hs != NULL) {
 801852c:	e7d5      	b.n	80184da <http_close_or_abort_conn.constprop.0+0x62>
 801852e:	bf00      	nop
 8018530:	2001e644 	.word	0x2001e644
 8018534:	08018bf9 	.word	0x08018bf9

08018538 <http_err>:
  if (hs != NULL) {
 8018538:	b1c0      	cbz	r0, 801856c <http_err+0x34>
{
 801853a:	b510      	push	{r4, lr}
 801853c:	4604      	mov	r4, r0
  if (hs->handle) {
 801853e:	6940      	ldr	r0, [r0, #20]
 8018540:	b118      	cbz	r0, 801854a <http_err+0x12>
    fs_close(hs->handle);
 8018542:	f7ff fcb9 	bl	8017eb8 <fs_close>
    hs->handle = NULL;
 8018546:	2300      	movs	r3, #0
 8018548:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801854a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801854c:	b118      	cbz	r0, 8018556 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801854e:	f001 fdab 	bl	801a0a8 <mem_free>
    hs->ssi = NULL;
 8018552:	2300      	movs	r3, #0
 8018554:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018556:	6a20      	ldr	r0, [r4, #32]
 8018558:	b118      	cbz	r0, 8018562 <http_err+0x2a>
    pbuf_free(hs->req);
 801855a:	f002 fe51 	bl	801b200 <pbuf_free>
    hs->req = NULL;
 801855e:	2300      	movs	r3, #0
 8018560:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8018562:	4620      	mov	r0, r4
}
 8018564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8018568:	f001 bd9e 	b.w	801a0a8 <mem_free>
 801856c:	4770      	bx	lr
 801856e:	bf00      	nop

08018570 <http_eof>:
{
 8018570:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8018572:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8018576:	b1fb      	cbz	r3, 80185b8 <http_eof+0x48>
 8018578:	4605      	mov	r5, r0
  if (hs->handle) {
 801857a:	6948      	ldr	r0, [r1, #20]
 801857c:	460c      	mov	r4, r1
 801857e:	b118      	cbz	r0, 8018588 <http_eof+0x18>
    fs_close(hs->handle);
 8018580:	f7ff fc9a 	bl	8017eb8 <fs_close>
    hs->handle = NULL;
 8018584:	2300      	movs	r3, #0
 8018586:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8018588:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801858a:	b118      	cbz	r0, 8018594 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801858c:	f001 fd8c 	bl	801a0a8 <mem_free>
    hs->ssi = NULL;
 8018590:	2300      	movs	r3, #0
 8018592:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018594:	6a20      	ldr	r0, [r4, #32]
 8018596:	b108      	cbz	r0, 801859c <http_eof+0x2c>
    pbuf_free(hs->req);
 8018598:	f002 fe32 	bl	801b200 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801859c:	2234      	movs	r2, #52	; 0x34
 801859e:	2100      	movs	r1, #0
 80185a0:	4620      	mov	r0, r4
 80185a2:	f00b ff59 	bl	8024458 <memset>
    hs->keepalive = 1;
 80185a6:	2301      	movs	r3, #1
    hs->pcb = pcb;
 80185a8:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 80185aa:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 80185ae:	8b6b      	ldrh	r3, [r5, #26]
 80185b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185b4:	836b      	strh	r3, [r5, #26]
}
 80185b6:	bd38      	pop	{r3, r4, r5, pc}
 80185b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 80185bc:	f7ff bf5c 	b.w	8018478 <http_close_or_abort_conn.constprop.0>

080185c0 <http_send>:
{
 80185c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 80185c4:	460d      	mov	r5, r1
{
 80185c6:	b087      	sub	sp, #28
  if (hs == NULL) {
 80185c8:	2900      	cmp	r1, #0
 80185ca:	f000 824b 	beq.w	8018a64 <http_send+0x4a4>
  if (hs->left == 0) {
 80185ce:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80185d0:	4607      	mov	r7, r0
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	f000 818c 	beq.w	80188f0 <http_send+0x330>
  if (hs->ssi) {
 80185d8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80185da:	2c00      	cmp	r4, #0
 80185dc:	f000 819a 	beq.w	8018914 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 80185e0:	6823      	ldr	r3, [r4, #0]
 80185e2:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 80185e4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 80185e8:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 80185ea:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 80185ee:	f200 80c3 	bhi.w	8018778 <http_send+0x1b8>
  u8_t data_to_send = 0;
 80185f2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 80185f6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80185f8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 80185fc:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018600:	2b04      	cmp	r3, #4
 8018602:	d003      	beq.n	801860c <http_send+0x4c>
 8018604:	68e1      	ldr	r1, [r4, #12]
 8018606:	2900      	cmp	r1, #0
 8018608:	f000 8091 	beq.w	801872e <http_send+0x16e>
 801860c:	2e00      	cmp	r6, #0
 801860e:	f040 811b 	bne.w	8018848 <http_send+0x288>
    if (len == 0) {
 8018612:	2a00      	cmp	r2, #0
 8018614:	f000 811b 	beq.w	801884e <http_send+0x28e>
    switch (ssi->tag_state) {
 8018618:	2b04      	cmp	r3, #4
 801861a:	d8f1      	bhi.n	8018600 <http_send+0x40>
 801861c:	e8df f003 	tbb	[pc, r3]
 8018620:	23407466 	.word	0x23407466
 8018624:	03          	.byte	0x03
 8018625:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 8018626:	68a3      	ldr	r3, [r4, #8]
 8018628:	69a9      	ldr	r1, [r5, #24]
 801862a:	428b      	cmp	r3, r1
 801862c:	f240 80f1 	bls.w	8018812 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018630:	6863      	ldr	r3, [r4, #4]
 8018632:	4299      	cmp	r1, r3
 8018634:	f200 81fc 	bhi.w	8018a30 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018638:	1a5a      	subs	r2, r3, r1
 801863a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801863e:	4282      	cmp	r2, r0
 8018640:	f340 8117 	ble.w	8018872 <http_send+0x2b2>
 8018644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018648:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801864c:	2300      	movs	r3, #0
 801864e:	f10d 0216 	add.w	r2, sp, #22
 8018652:	4638      	mov	r0, r7
 8018654:	f7ff fc36 	bl	8017ec4 <http_write>
          if (err == ERR_OK) {
 8018658:	2800      	cmp	r0, #0
 801865a:	f000 81fe 	beq.w	8018a5a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801865e:	4606      	mov	r6, r0
    if (len == 0) {
 8018660:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018664:	e11a      	b.n	801889c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8018666:	6821      	ldr	r1, [r4, #0]
 8018668:	8a20      	ldrh	r0, [r4, #16]
 801866a:	f891 e000 	ldrb.w	lr, [r1]
 801866e:	2800      	cmp	r0, #0
 8018670:	f040 80b9 	bne.w	80187e6 <http_send+0x226>
 8018674:	f1ae 0c09 	sub.w	ip, lr, #9
 8018678:	fa5f fc8c 	uxtb.w	ip, ip
 801867c:	f1bc 0f17 	cmp.w	ip, #23
 8018680:	f200 80b1 	bhi.w	80187e6 <http_send+0x226>
 8018684:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8018a2c <http_send+0x46c>
 8018688:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 801868c:	f01c 0f01 	tst.w	ip, #1
 8018690:	f000 80a9 	beq.w	80187e6 <http_send+0x226>
          ssi->parsed++;
 8018694:	3101      	adds	r1, #1
 8018696:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8018698:	68e1      	ldr	r1, [r4, #12]
 801869a:	3901      	subs	r1, #1
 801869c:	60e1      	str	r1, [r4, #12]
          break;
 801869e:	e7af      	b.n	8018600 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80186a0:	8a20      	ldrh	r0, [r4, #16]
 80186a2:	2800      	cmp	r0, #0
 80186a4:	f040 8083 	bne.w	80187ae <http_send+0x1ee>
 80186a8:	6821      	ldr	r1, [r4, #0]
 80186aa:	f891 e000 	ldrb.w	lr, [r1]
 80186ae:	f1ae 0c09 	sub.w	ip, lr, #9
 80186b2:	fa5f fc8c 	uxtb.w	ip, ip
 80186b6:	f1bc 0f17 	cmp.w	ip, #23
 80186ba:	f240 8110 	bls.w	80188de <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80186be:	f8df c350 	ldr.w	ip, [pc, #848]	; 8018a10 <http_send+0x450>
 80186c2:	f894 9014 	ldrb.w	r9, [r4, #20]
 80186c6:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 80186ca:	f8dc c004 	ldr.w	ip, [ip, #4]
 80186ce:	f89c c000 	ldrb.w	ip, [ip]
 80186d2:	45f4      	cmp	ip, lr
 80186d4:	f000 8083 	beq.w	80187de <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80186d8:	f100 0c01 	add.w	ip, r0, #1
 80186dc:	4420      	add	r0, r4
 80186de:	f8a4 c010 	strh.w	ip, [r4, #16]
 80186e2:	f891 c000 	ldrb.w	ip, [r1]
 80186e6:	f880 c016 	strb.w	ip, [r0, #22]
 80186ea:	e7d3      	b.n	8018694 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80186ec:	6821      	ldr	r1, [r4, #0]
 80186ee:	7808      	ldrb	r0, [r1, #0]
 80186f0:	283c      	cmp	r0, #60	; 0x3c
 80186f2:	d002      	beq.n	80186fa <http_send+0x13a>
 80186f4:	282f      	cmp	r0, #47	; 0x2f
 80186f6:	d1cd      	bne.n	8018694 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80186f8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 80186fa:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 80186fc:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 80186fe:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 8018700:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8018704:	8223      	strh	r3, [r4, #16]
            break;
 8018706:	e7c5      	b.n	8018694 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8018708:	49c1      	ldr	r1, [pc, #772]	; (8018a10 <http_send+0x450>)
 801870a:	7d20      	ldrb	r0, [r4, #20]
 801870c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8018710:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8018714:	f811 100c 	ldrb.w	r1, [r1, ip]
 8018718:	2900      	cmp	r1, #0
 801871a:	f040 8086 	bne.w	801882a <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 801871e:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 8018720:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018722:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8018724:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018728:	2900      	cmp	r1, #0
 801872a:	f47f af6f 	bne.w	801860c <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 801872e:	6823      	ldr	r3, [r4, #0]
 8018730:	69a9      	ldr	r1, [r5, #24]
 8018732:	428b      	cmp	r3, r1
 8018734:	f240 808b 	bls.w	801884e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018738:	1a5b      	subs	r3, r3, r1
 801873a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801873e:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018740:	4293      	cmp	r3, r2
 8018742:	bfa8      	it	ge
 8018744:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018746:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801874a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801874e:	2300      	movs	r3, #0
 8018750:	f7ff fbb8 	bl	8017ec4 <http_write>
    if (err == ERR_OK) {
 8018754:	2800      	cmp	r0, #0
 8018756:	d17a      	bne.n	801884e <http_send+0x28e>
    hs->file += len;
 8018758:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 801875c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8018760:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8018762:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8018764:	440a      	add	r2, r1
    hs->left -= len;
 8018766:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8018768:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 801876a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801876c:	2b00      	cmp	r3, #0
 801876e:	d071      	beq.n	8018854 <http_send+0x294>
}
 8018770:	4640      	mov	r0, r8
 8018772:	b007      	add	sp, #28
 8018774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018778:	1a5b      	subs	r3, r3, r1
 801877a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801877e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018780:	4293      	cmp	r3, r2
 8018782:	bfa8      	it	ge
 8018784:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018786:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801878a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801878e:	2300      	movs	r3, #0
 8018790:	f7ff fb98 	bl	8017ec4 <http_write>
    if (err == ERR_OK) {
 8018794:	4606      	mov	r6, r0
 8018796:	2800      	cmp	r0, #0
 8018798:	f000 8154 	beq.w	8018a44 <http_send+0x484>
  u8_t data_to_send = 0;
 801879c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 80187a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d052      	beq.n	801884e <http_send+0x28e>
    if (len == 0) {
 80187a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80187ac:	e724      	b.n	80185f8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80187ae:	f8df 9260 	ldr.w	r9, [pc, #608]	; 8018a10 <http_send+0x450>
 80187b2:	7d21      	ldrb	r1, [r4, #20]
 80187b4:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 80187b8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80187bc:	6821      	ldr	r1, [r4, #0]
 80187be:	f89e a000 	ldrb.w	sl, [lr]
 80187c2:	f891 c000 	ldrb.w	ip, [r1]
 80187c6:	45e2      	cmp	sl, ip
 80187c8:	d072      	beq.n	80188b0 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80187ca:	f1ac 0c09 	sub.w	ip, ip, #9
 80187ce:	fa5f fc8c 	uxtb.w	ip, ip
 80187d2:	f1bc 0f17 	cmp.w	ip, #23
 80187d6:	d964      	bls.n	80188a2 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80187d8:	2807      	cmp	r0, #7
 80187da:	f67f af7d 	bls.w	80186d8 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 80187de:	2300      	movs	r3, #0
 80187e0:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 80187e4:	e756      	b.n	8018694 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80187e6:	f894 9014 	ldrb.w	r9, [r4, #20]
 80187ea:	f8df c224 	ldr.w	ip, [pc, #548]	; 8018a10 <http_send+0x450>
 80187ee:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 80187f2:	f8dc c004 	ldr.w	ip, [ip, #4]
 80187f6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 80187fa:	45f1      	cmp	r9, lr
 80187fc:	f000 80a1 	beq.w	8018942 <http_send+0x382>
          ssi->parse_left--;
 8018800:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 8018802:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 8018804:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8018808:	3b01      	subs	r3, #1
          ssi->parsed++;
 801880a:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 801880c:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 801880e:	2300      	movs	r3, #0
 8018810:	e6f8      	b.n	8018604 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 8018812:	8a21      	ldrh	r1, [r4, #16]
 8018814:	8a60      	ldrh	r0, [r4, #18]
 8018816:	4281      	cmp	r1, r0
 8018818:	f0c0 80e0 	bcc.w	80189dc <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 801881c:	6023      	str	r3, [r4, #0]
 801881e:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 8018820:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 8018824:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8018828:	e6ec      	b.n	8018604 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 801882a:	6820      	ldr	r0, [r4, #0]
 801882c:	f890 e000 	ldrb.w	lr, [r0]
 8018830:	458e      	cmp	lr, r1
 8018832:	f000 80ce 	beq.w	80189d2 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8018836:	2300      	movs	r3, #0
 8018838:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 801883c:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801883e:	3001      	adds	r0, #1
          ssi->parse_left--;
 8018840:	3901      	subs	r1, #1
          ssi->parsed++;
 8018842:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8018844:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8018846:	e6db      	b.n	8018600 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8018848:	2b04      	cmp	r3, #4
 801884a:	f47f af70 	bne.w	801872e <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801884e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018850:	2b00      	cmp	r3, #0
 8018852:	d18d      	bne.n	8018770 <http_send+0x1b0>
 8018854:	6968      	ldr	r0, [r5, #20]
 8018856:	f7ff fb31 	bl	8017ebc <fs_bytes_left>
 801885a:	2800      	cmp	r0, #0
 801885c:	dc88      	bgt.n	8018770 <http_send+0x1b0>
      return 0;
 801885e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8018862:	4638      	mov	r0, r7
 8018864:	4629      	mov	r1, r5
 8018866:	f7ff fe83 	bl	8018570 <http_eof>
}
 801886a:	4640      	mov	r0, r8
 801886c:	b007      	add	sp, #28
 801886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018872:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018874:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8018878:	2a00      	cmp	r2, #0
 801887a:	f47f aee7 	bne.w	801864c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801887e:	428b      	cmp	r3, r1
 8018880:	d805      	bhi.n	801888e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018882:	68a0      	ldr	r0, [r4, #8]
 8018884:	1ac3      	subs	r3, r0, r3
 8018886:	441a      	add	r2, r3
 8018888:	b292      	uxth	r2, r2
 801888a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 801888e:	4411      	add	r1, r2
 8018890:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8018892:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8018894:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8018898:	1a9b      	subs	r3, r3, r2
 801889a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801889c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80188a0:	e6ae      	b.n	8018600 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80188a2:	f8df a188 	ldr.w	sl, [pc, #392]	; 8018a2c <http_send+0x46c>
 80188a6:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 80188aa:	f01c 0f01 	tst.w	ip, #1
 80188ae:	d093      	beq.n	80187d8 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 80188b0:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80188b2:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 80188b4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 80188b8:	f200 80e0 	bhi.w	8018a7c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 80188bc:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 80188be:	4420      	add	r0, r4
 80188c0:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 80188c4:	f89e 3000 	ldrb.w	r3, [lr]
 80188c8:	780a      	ldrb	r2, [r1, #0]
 80188ca:	429a      	cmp	r2, r3
 80188cc:	f000 80cf 	beq.w	8018a6e <http_send+0x4ae>
              ssi->tag_index = 0;
 80188d0:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80188d4:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 80188d8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80188dc:	e6da      	b.n	8018694 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80188de:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8018a2c <http_send+0x46c>
 80188e2:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80188e6:	f01c 0f01 	tst.w	ip, #1
 80188ea:	f47f aed3 	bne.w	8018694 <http_send+0xd4>
 80188ee:	e6e6      	b.n	80186be <http_send+0xfe>
  if (hs->handle == NULL) {
 80188f0:	6948      	ldr	r0, [r1, #20]
 80188f2:	2800      	cmp	r0, #0
 80188f4:	d0b3      	beq.n	801885e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 80188f6:	f7ff fae1 	bl	8017ebc <fs_bytes_left>
  if (bytes_left <= 0) {
 80188fa:	2800      	cmp	r0, #0
 80188fc:	ddaf      	ble.n	801885e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80188fe:	4b45      	ldr	r3, [pc, #276]	; (8018a14 <http_send+0x454>)
 8018900:	f240 429d 	movw	r2, #1181	; 0x49d
 8018904:	4944      	ldr	r1, [pc, #272]	; (8018a18 <http_send+0x458>)
 8018906:	4845      	ldr	r0, [pc, #276]	; (8018a1c <http_send+0x45c>)
 8018908:	f00c fd44 	bl	8025394 <iprintf>
  if (hs->ssi) {
 801890c:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 801890e:	2c00      	cmp	r4, #0
 8018910:	f47f ae66 	bne.w	80185e0 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8018914:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8018918:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801891c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801891e:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8018920:	428a      	cmp	r2, r1
 8018922:	bf88      	it	hi
 8018924:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018926:	4623      	mov	r3, r4
 8018928:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 801892a:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801892e:	f10d 0216 	add.w	r2, sp, #22
 8018932:	f7ff fac7 	bl	8017ec4 <http_write>
  if (err == ERR_OK) {
 8018936:	2800      	cmp	r0, #0
 8018938:	f43f af0e 	beq.w	8018758 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801893c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 801893e:	46a0      	mov	r8, r4
 8018940:	e714      	b.n	801876c <http_send+0x1ac>
          ssi->parsed++;
 8018942:	3101      	adds	r1, #1
          ssi->tag_index++;
 8018944:	3001      	adds	r0, #1
          ssi->parsed++;
 8018946:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8018948:	b280      	uxth	r0, r0
          ssi->parse_left--;
 801894a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 801894c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 801894e:	3901      	subs	r1, #1
 8018950:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8018952:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8018956:	2900      	cmp	r1, #0
 8018958:	f47f ae52 	bne.w	8018600 <http_send+0x40>
  ssi = hs->ssi;
 801895c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018960:	f1b9 0f00 	cmp.w	r9, #0
 8018964:	f000 8115 	beq.w	8018b92 <http_send+0x5d2>
  if (httpd_ssi_handler
 8018968:	4b2d      	ldr	r3, [pc, #180]	; (8018a20 <http_send+0x460>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	9300      	str	r3, [sp, #0]
 801896e:	2b00      	cmp	r3, #0
 8018970:	f000 8093 	beq.w	8018a9a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8018974:	4b2b      	ldr	r3, [pc, #172]	; (8018a24 <http_send+0x464>)
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	2a00      	cmp	r2, #0
 801897a:	f000 808e 	beq.w	8018a9a <http_send+0x4da>
 801897e:	4b2a      	ldr	r3, [pc, #168]	; (8018a28 <http_send+0x468>)
 8018980:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018982:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8018984:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018986:	f340 8088 	ble.w	8018a9a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801898a:	f109 0a16 	add.w	sl, r9, #22
 801898e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018990:	2300      	movs	r3, #0
 8018992:	9503      	str	r5, [sp, #12]
 8018994:	460d      	mov	r5, r1
 8018996:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801899a:	4656      	mov	r6, sl
 801899c:	461c      	mov	r4, r3
 801899e:	4692      	mov	sl, r2
 80189a0:	e003      	b.n	80189aa <http_send+0x3ea>
 80189a2:	3401      	adds	r4, #1
 80189a4:	42a5      	cmp	r5, r4
 80189a6:	f000 8105 	beq.w	8018bb4 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 80189aa:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 80189ae:	4630      	mov	r0, r6
 80189b0:	f7e7 fc46 	bl	8000240 <strcmp>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	d1f4      	bne.n	80189a2 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80189b8:	4623      	mov	r3, r4
 80189ba:	22fe      	movs	r2, #254	; 0xfe
 80189bc:	f109 011f 	add.w	r1, r9, #31
 80189c0:	9e02      	ldr	r6, [sp, #8]
 80189c2:	4618      	mov	r0, r3
 80189c4:	9b00      	ldr	r3, [sp, #0]
 80189c6:	9c01      	ldr	r4, [sp, #4]
 80189c8:	9d03      	ldr	r5, [sp, #12]
 80189ca:	4798      	blx	r3
 80189cc:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 80189d0:	e0a6      	b.n	8018b20 <http_send+0x560>
            ssi->tag_index++;
 80189d2:	f10c 0c01 	add.w	ip, ip, #1
 80189d6:	f8a4 c010 	strh.w	ip, [r4, #16]
 80189da:	e72f      	b.n	801883c <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 80189dc:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80189de:	311f      	adds	r1, #31
 80189e0:	f10d 0216 	add.w	r2, sp, #22
 80189e4:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 80189e6:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80189ea:	4421      	add	r1, r4
 80189ec:	4638      	mov	r0, r7
 80189ee:	f7ff fa69 	bl	8017ec4 <http_write>
              ssi->tag_index += len;
 80189f2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 80189f6:	4606      	mov	r6, r0
 80189f8:	2800      	cmp	r0, #0
 80189fa:	f47f af4f 	bne.w	801889c <http_send+0x2dc>
              ssi->tag_index += len;
 80189fe:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 8018a00:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 8018a04:	4413      	add	r3, r2
 8018a06:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018a08:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8018a0c:	e5f8      	b.n	8018600 <http_send+0x40>
 8018a0e:	bf00      	nop
 8018a10:	08043144 	.word	0x08043144
 8018a14:	08042e38 	.word	0x08042e38
 8018a18:	08042f18 	.word	0x08042f18
 8018a1c:	08029fe8 	.word	0x08029fe8
 8018a20:	2001ea88 	.word	0x2001ea88
 8018a24:	2001ea8c 	.word	0x2001ea8c
 8018a28:	2001e684 	.word	0x2001e684
 8018a2c:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018a30:	4b63      	ldr	r3, [pc, #396]	; (8018bc0 <http_send+0x600>)
 8018a32:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8018a36:	4963      	ldr	r1, [pc, #396]	; (8018bc4 <http_send+0x604>)
 8018a38:	4863      	ldr	r0, [pc, #396]	; (8018bc8 <http_send+0x608>)
 8018a3a:	f00c fcab 	bl	8025394 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018a3e:	6863      	ldr	r3, [r4, #4]
 8018a40:	69a9      	ldr	r1, [r5, #24]
 8018a42:	e5f9      	b.n	8018638 <http_send+0x78>
      hs->file += len;
 8018a44:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8018a48:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 8018a4c:	69ab      	ldr	r3, [r5, #24]
 8018a4e:	4413      	add	r3, r2
 8018a50:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8018a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018a54:	1a9b      	subs	r3, r3, r2
 8018a56:	626b      	str	r3, [r5, #36]	; 0x24
 8018a58:	e6a2      	b.n	80187a0 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 8018a5a:	6863      	ldr	r3, [r4, #4]
 8018a5c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018a5e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018a62:	e70c      	b.n	801887e <http_send+0x2be>
    return 0;
 8018a64:	4688      	mov	r8, r1
}
 8018a66:	4640      	mov	r0, r8
 8018a68:	b007      	add	sp, #28
 8018a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 8018a6e:	2301      	movs	r3, #1
 8018a70:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018a72:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018a76:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018a7a:	e60b      	b.n	8018694 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018a7c:	4b50      	ldr	r3, [pc, #320]	; (8018bc0 <http_send+0x600>)
 8018a7e:	f240 523a 	movw	r2, #1338	; 0x53a
 8018a82:	4952      	ldr	r1, [pc, #328]	; (8018bcc <http_send+0x60c>)
 8018a84:	4850      	ldr	r0, [pc, #320]	; (8018bc8 <http_send+0x608>)
 8018a86:	f00c fc85 	bl	8025394 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018a8a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8018a8c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018a8e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8018a92:	6821      	ldr	r1, [r4, #0]
 8018a94:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018a98:	e710      	b.n	80188bc <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8018a9a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018a9e:	4650      	mov	r0, sl
 8018aa0:	f7e7 fbd8 	bl	8000254 <strlen>
 8018aa4:	28e4      	cmp	r0, #228	; 0xe4
 8018aa6:	d865      	bhi.n	8018b74 <http_send+0x5b4>
 8018aa8:	2809      	cmp	r0, #9
 8018aaa:	bf28      	it	cs
 8018aac:	2009      	movcs	r0, #9
 8018aae:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8018ab2:	4686      	mov	lr, r0
 8018ab4:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018ab6:	f100 0319 	add.w	r3, r0, #25
 8018aba:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018abc:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8018bdc <http_send+0x61c>
 8018ac0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018ac4:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8018ac8:	f8bc 3000 	ldrh.w	r3, [ip]
 8018acc:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018ad0:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018ad4:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018ad8:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018ada:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018ade:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8018ae0:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8018ae4:	f00b fc90 	bl	8024408 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018ae8:	4b39      	ldr	r3, [pc, #228]	; (8018bd0 <http_send+0x610>)
 8018aea:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018aec:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018aee:	eb09 0e02 	add.w	lr, r9, r2
 8018af2:	6818      	ldr	r0, [r3, #0]
 8018af4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018af8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018afa:	799b      	ldrb	r3, [r3, #6]
 8018afc:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 8018b00:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8018b04:	f8ae c004 	strh.w	ip, [lr, #4]
 8018b08:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018b0c:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 8018b10:	f7e7 fba0 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018b14:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8018b18:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018b1a:	d232      	bcs.n	8018b82 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 8018b1c:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 8018b20:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 8018b22:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 8018b24:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 8018b26:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8018b2a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8018b2c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8018b30:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8018b32:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8018b34:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8018b36:	d802      	bhi.n	8018b3e <http_send+0x57e>
    if (len == 0) {
 8018b38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b3c:	e566      	b.n	801860c <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b3e:	1a52      	subs	r2, r2, r1
 8018b40:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b44:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b46:	429a      	cmp	r2, r3
 8018b48:	bfa8      	it	ge
 8018b4a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b4c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018b4e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018b52:	f10d 0216 	add.w	r2, sp, #22
 8018b56:	f7ff f9b5 	bl	8017ec4 <http_write>
              if (err == ERR_OK) {
 8018b5a:	4606      	mov	r6, r0
 8018b5c:	2800      	cmp	r0, #0
 8018b5e:	f47f ad7f 	bne.w	8018660 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8018b62:	6861      	ldr	r1, [r4, #4]
 8018b64:	69ab      	ldr	r3, [r5, #24]
 8018b66:	4299      	cmp	r1, r3
 8018b68:	d91b      	bls.n	8018ba2 <http_send+0x5e2>
                hs->file += len;
 8018b6a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018b6e:	4413      	add	r3, r2
 8018b70:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8018b72:	e68e      	b.n	8018892 <http_send+0x2d2>
 8018b74:	233a      	movs	r3, #58	; 0x3a
 8018b76:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018b78:	f04f 0e09 	mov.w	lr, #9
 8018b7c:	e9cd 3200 	strd	r3, r2, [sp]
 8018b80:	e79c      	b.n	8018abc <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018b82:	4b0f      	ldr	r3, [pc, #60]	; (8018bc0 <http_send+0x600>)
 8018b84:	f240 323f 	movw	r2, #831	; 0x33f
 8018b88:	4912      	ldr	r1, [pc, #72]	; (8018bd4 <http_send+0x614>)
 8018b8a:	480f      	ldr	r0, [pc, #60]	; (8018bc8 <http_send+0x608>)
 8018b8c:	f00c fc02 	bl	8025394 <iprintf>
 8018b90:	e7c4      	b.n	8018b1c <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018b92:	4b0b      	ldr	r3, [pc, #44]	; (8018bc0 <http_send+0x600>)
 8018b94:	f240 3206 	movw	r2, #774	; 0x306
 8018b98:	490f      	ldr	r1, [pc, #60]	; (8018bd8 <http_send+0x618>)
 8018b9a:	480b      	ldr	r0, [pc, #44]	; (8018bc8 <http_send+0x608>)
 8018b9c:	f00c fbfa 	bl	8025394 <iprintf>
 8018ba0:	e6e2      	b.n	8018968 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018ba2:	68a2      	ldr	r2, [r4, #8]
 8018ba4:	1a52      	subs	r2, r2, r1
 8018ba6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8018baa:	440a      	add	r2, r1
 8018bac:	b292      	uxth	r2, r2
 8018bae:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018bb2:	e7dc      	b.n	8018b6e <http_send+0x5ae>
 8018bb4:	46b2      	mov	sl, r6
 8018bb6:	9c01      	ldr	r4, [sp, #4]
 8018bb8:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8018bbc:	e76f      	b.n	8018a9e <http_send+0x4de>
 8018bbe:	bf00      	nop
 8018bc0:	08042e38 	.word	0x08042e38
 8018bc4:	08042fa0 	.word	0x08042fa0
 8018bc8:	08029fe8 	.word	0x08029fe8
 8018bcc:	08042f50 	.word	0x08042f50
 8018bd0:	08042f88 	.word	0x08042f88
 8018bd4:	08042f90 	.word	0x08042f90
 8018bd8:	08042f68 	.word	0x08042f68
 8018bdc:	08042f74 	.word	0x08042f74

08018be0 <http_sent>:
{
 8018be0:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8018be2:	4603      	mov	r3, r0
 8018be4:	b130      	cbz	r0, 8018bf4 <http_sent+0x14>
  hs->retries = 0;
 8018be6:	2200      	movs	r2, #0
 8018be8:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8018bea:	4619      	mov	r1, r3
  hs->retries = 0;
 8018bec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8018bf0:	f7ff fce6 	bl	80185c0 <http_send>
}
 8018bf4:	2000      	movs	r0, #0
 8018bf6:	bd08      	pop	{r3, pc}

08018bf8 <http_poll>:
{
 8018bf8:	b510      	push	{r4, lr}
 8018bfa:	460c      	mov	r4, r1
  if (hs == NULL) {
 8018bfc:	b1a8      	cbz	r0, 8018c2a <http_poll+0x32>
    hs->retries++;
 8018bfe:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8018c02:	3301      	adds	r3, #1
 8018c04:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018c06:	2b04      	cmp	r3, #4
    hs->retries++;
 8018c08:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8018c0c:	d019      	beq.n	8018c42 <http_poll+0x4a>
    if (hs->handle) {
 8018c0e:	6943      	ldr	r3, [r0, #20]
 8018c10:	b123      	cbz	r3, 8018c1c <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8018c12:	4601      	mov	r1, r0
 8018c14:	4620      	mov	r0, r4
 8018c16:	f7ff fcd3 	bl	80185c0 <http_send>
 8018c1a:	b908      	cbnz	r0, 8018c20 <http_poll+0x28>
  return ERR_OK;
 8018c1c:	2000      	movs	r0, #0
}
 8018c1e:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8018c20:	4620      	mov	r0, r4
 8018c22:	f006 fc9f 	bl	801f564 <tcp_output>
  return ERR_OK;
 8018c26:	2000      	movs	r0, #0
 8018c28:	e7f9      	b.n	8018c1e <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8018c2a:	4601      	mov	r1, r0
 8018c2c:	4620      	mov	r0, r4
 8018c2e:	f7ff fc23 	bl	8018478 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8018c32:	3001      	adds	r0, #1
 8018c34:	d1f2      	bne.n	8018c1c <http_poll+0x24>
      altcp_abort(pcb);
 8018c36:	4620      	mov	r0, r4
 8018c38:	f003 fd66 	bl	801c708 <tcp_abort>
      return ERR_ABRT;
 8018c3c:	f06f 000c 	mvn.w	r0, #12
}
 8018c40:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8018c42:	4601      	mov	r1, r0
 8018c44:	4620      	mov	r0, r4
 8018c46:	f7ff fc17 	bl	8018478 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8018c4a:	2000      	movs	r0, #0
}
 8018c4c:	bd10      	pop	{r4, pc}
 8018c4e:	bf00      	nop

08018c50 <http_recv>:
{
 8018c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c54:	4605      	mov	r5, r0
 8018c56:	b08d      	sub	sp, #52	; 0x34
 8018c58:	460e      	mov	r6, r1
 8018c5a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8018c5c:	b9ab      	cbnz	r3, 8018c8a <http_recv+0x3a>
 8018c5e:	fab2 f782 	clz	r7, r2
 8018c62:	097f      	lsrs	r7, r7, #5
 8018c64:	b1ca      	cbz	r2, 8018c9a <http_recv+0x4a>
 8018c66:	b188      	cbz	r0, 8018c8c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8018c68:	8911      	ldrh	r1, [r2, #8]
 8018c6a:	4630      	mov	r0, r6
 8018c6c:	f002 ff48 	bl	801bb00 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8018c70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	f040 813c 	bne.w	8018ef0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8018c78:	696b      	ldr	r3, [r5, #20]
 8018c7a:	b1b3      	cbz	r3, 8018caa <http_recv+0x5a>
      pbuf_free(p);
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	f002 fabf 	bl	801b200 <pbuf_free>
}
 8018c82:	2000      	movs	r0, #0
 8018c84:	b00d      	add	sp, #52	; 0x34
 8018c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8018c8a:	b132      	cbz	r2, 8018c9a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8018c8c:	4630      	mov	r0, r6
 8018c8e:	8921      	ldrh	r1, [r4, #8]
 8018c90:	f002 ff36 	bl	801bb00 <tcp_recved>
      pbuf_free(p);
 8018c94:	4620      	mov	r0, r4
 8018c96:	f002 fab3 	bl	801b200 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8018c9a:	4629      	mov	r1, r5
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f7ff fbeb 	bl	8018478 <http_close_or_abort_conn.constprop.0>
}
 8018ca2:	2000      	movs	r0, #0
 8018ca4:	b00d      	add	sp, #52	; 0x34
 8018ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8018caa:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8018cac:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8018cae:	2b00      	cmp	r3, #0
 8018cb0:	f040 8173 	bne.w	8018f9a <http_recv+0x34a>
  if (hs->req == NULL) {
 8018cb4:	2800      	cmp	r0, #0
 8018cb6:	f000 8136 	beq.w	8018f26 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 8018cba:	4621      	mov	r1, r4
 8018cbc:	f002 fad2 	bl	801b264 <pbuf_cat>
  pbuf_ref(p);
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f002 fabb 	bl	801b23c <pbuf_ref>
  if (hs->req->next != NULL) {
 8018cc6:	6a28      	ldr	r0, [r5, #32]
 8018cc8:	6803      	ldr	r3, [r0, #0]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	f000 812d 	beq.w	8018f2a <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cd0:	8907      	ldrh	r7, [r0, #8]
 8018cd2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018cd6:	49bc      	ldr	r1, [pc, #752]	; (8018fc8 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cd8:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 8018cda:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8018cdc:	bf28      	it	cs
 8018cde:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8018ce0:	2300      	movs	r3, #0
 8018ce2:	463a      	mov	r2, r7
 8018ce4:	f002 fb30 	bl	801b348 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8018ce8:	2f06      	cmp	r7, #6
 8018cea:	f240 80ef 	bls.w	8018ecc <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8018cee:	463a      	mov	r2, r7
 8018cf0:	49b6      	ldr	r1, [pc, #728]	; (8018fcc <http_recv+0x37c>)
 8018cf2:	4640      	mov	r0, r8
 8018cf4:	f000 fa4e 	bl	8019194 <lwip_strnstr>
    if (crlf != NULL) {
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	f000 80e7 	beq.w	8018ecc <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 8018cfe:	2204      	movs	r2, #4
 8018d00:	49b3      	ldr	r1, [pc, #716]	; (8018fd0 <http_recv+0x380>)
 8018d02:	4640      	mov	r0, r8
 8018d04:	f00d fb1a 	bl	802633c <strncmp>
 8018d08:	4682      	mov	sl, r0
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	f040 8118 	bne.w	8018f40 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018d10:	1f3a      	subs	r2, r7, #4
 8018d12:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8018d16:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018d1a:	49ae      	ldr	r1, [pc, #696]	; (8018fd4 <http_recv+0x384>)
 8018d1c:	b292      	uxth	r2, r2
 8018d1e:	4658      	mov	r0, fp
 8018d20:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8018d24:	f000 fa36 	bl	8019194 <lwip_strnstr>
      if (sp2 == NULL) {
 8018d28:	9a05      	ldr	r2, [sp, #20]
 8018d2a:	4681      	mov	r9, r0
 8018d2c:	2800      	cmp	r0, #0
 8018d2e:	f000 8123 	beq.w	8018f78 <http_recv+0x328>
      int is_09 = 0;
 8018d32:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8018d34:	9305      	str	r3, [sp, #20]
 8018d36:	f1b9 0f00 	cmp.w	r9, #0
 8018d3a:	f000 80c7 	beq.w	8018ecc <http_recv+0x27c>
 8018d3e:	9b04      	ldr	r3, [sp, #16]
 8018d40:	4599      	cmp	r9, r3
 8018d42:	f240 80c3 	bls.w	8018ecc <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8018d46:	463a      	mov	r2, r7
 8018d48:	49a3      	ldr	r1, [pc, #652]	; (8018fd8 <http_recv+0x388>)
 8018d4a:	4640      	mov	r0, r8
 8018d4c:	f000 fa22 	bl	8019194 <lwip_strnstr>
 8018d50:	2800      	cmp	r0, #0
 8018d52:	f000 80bb 	beq.w	8018ecc <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018d56:	9b05      	ldr	r3, [sp, #20]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 812b 	beq.w	8018fb4 <http_recv+0x364>
            hs->keepalive = 0;
 8018d5e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018d60:	eba9 020b 	sub.w	r2, r9, fp
 8018d64:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8018d68:	2100      	movs	r1, #0
 8018d6a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8018d6c:	b292      	uxth	r2, r2
          *sp1 = 0;
 8018d6e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8018d70:	f80b 1002 	strb.w	r1, [fp, r2]
 8018d74:	445a      	add	r2, fp
 8018d76:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8018d78:	f1ba 0f00 	cmp.w	sl, #0
 8018d7c:	f000 8113 	beq.w	8018fa6 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018d80:	f109 0301 	add.w	r3, r9, #1
 8018d84:	4994      	ldr	r1, [pc, #592]	; (8018fd8 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8018d86:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018d8a:	eba3 0208 	sub.w	r2, r3, r8
 8018d8e:	4618      	mov	r0, r3
 8018d90:	9305      	str	r3, [sp, #20]
 8018d92:	1aba      	subs	r2, r7, r2
 8018d94:	f000 f9fe 	bl	8019194 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8018d98:	9008      	str	r0, [sp, #32]
 8018d9a:	2800      	cmp	r0, #0
 8018d9c:	f000 8168 	beq.w	8019070 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018da0:	9b05      	ldr	r3, [sp, #20]
 8018da2:	498e      	ldr	r1, [pc, #568]	; (8018fdc <http_recv+0x38c>)
 8018da4:	1ac2      	subs	r2, r0, r3
 8018da6:	4618      	mov	r0, r3
 8018da8:	f000 f9f4 	bl	8019194 <lwip_strnstr>
    if (scontent_len != NULL) {
 8018dac:	4603      	mov	r3, r0
 8018dae:	9009      	str	r0, [sp, #36]	; 0x24
 8018db0:	2800      	cmp	r0, #0
 8018db2:	f000 812f 	beq.w	8019014 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018db6:	3310      	adds	r3, #16
 8018db8:	220a      	movs	r2, #10
 8018dba:	4984      	ldr	r1, [pc, #528]	; (8018fcc <http_recv+0x37c>)
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	9307      	str	r3, [sp, #28]
 8018dc0:	f000 f9e8 	bl	8019194 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8018dc4:	2800      	cmp	r0, #0
 8018dc6:	f000 8125 	beq.w	8019014 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 8018dca:	9b07      	ldr	r3, [sp, #28]
 8018dcc:	4618      	mov	r0, r3
 8018dce:	f00b f8bd 	bl	8023f4c <atoi>
        if (content_len == 0) {
 8018dd2:	1e02      	subs	r2, r0, #0
 8018dd4:	9207      	str	r2, [sp, #28]
 8018dd6:	f040 811b 	bne.w	8019010 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8018dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ddc:	7c1b      	ldrb	r3, [r3, #16]
 8018dde:	2b30      	cmp	r3, #48	; 0x30
 8018de0:	f040 8118 	bne.w	8019014 <http_recv+0x3c4>
 8018de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018de6:	7c5b      	ldrb	r3, [r3, #17]
 8018de8:	2b0d      	cmp	r3, #13
 8018dea:	f040 8113 	bne.w	8019014 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018dee:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 8018df0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018df2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018df4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018df6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 8018df8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8018ff4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 8018dfc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e00:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018e04:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 8018e06:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e08:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e0a:	9a05      	ldr	r2, [sp, #20]
 8018e0c:	bfb4      	ite	lt
 8018e0e:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8018e10:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8018e14:	429f      	cmp	r7, r3
 8018e16:	bfa8      	it	ge
 8018e18:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e1a:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8018e1c:	2700      	movs	r7, #0
 8018e1e:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 8018e22:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8018e24:	9807      	ldr	r0, [sp, #28]
 8018e26:	f8cd b004 	str.w	fp, [sp, #4]
 8018e2a:	9000      	str	r0, [sp, #0]
 8018e2c:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8018e30:	9003      	str	r0, [sp, #12]
 8018e32:	203f      	movs	r0, #63	; 0x3f
 8018e34:	9002      	str	r0, [sp, #8]
 8018e36:	4628      	mov	r0, r5
 8018e38:	f7ee ff34 	bl	8007ca4 <httpd_post_begin>
          if (err == ERR_OK) {
 8018e3c:	2800      	cmp	r0, #0
 8018e3e:	f040 80f7 	bne.w	8019030 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8018e42:	9807      	ldr	r0, [sp, #28]
 8018e44:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e46:	f1ba 0f00 	cmp.w	sl, #0
 8018e4a:	f000 80d5 	beq.w	8018ff8 <http_recv+0x3a8>
 8018e4e:	4652      	mov	r2, sl
 8018e50:	e005      	b.n	8018e5e <http_recv+0x20e>
              q = q->next;
 8018e52:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8018e54:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e58:	2a00      	cmp	r2, #0
 8018e5a:	f000 80cd 	beq.w	8018ff8 <http_recv+0x3a8>
 8018e5e:	8953      	ldrh	r3, [r2, #10]
 8018e60:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8018e62:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018e66:	d9f4      	bls.n	8018e52 <http_recv+0x202>
 8018e68:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8018e6a:	4641      	mov	r1, r8
 8018e6c:	4610      	mov	r0, r2
 8018e6e:	f002 f93b 	bl	801b0e8 <pbuf_remove_header>
              pbuf_ref(q);
 8018e72:	4650      	mov	r0, sl
 8018e74:	f002 f9e2 	bl	801b23c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018e78:	4651      	mov	r1, sl
 8018e7a:	4628      	mov	r0, r5
 8018e7c:	f7ff fa98 	bl	80183b0 <http_post_rxpbuf>
 8018e80:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8018e82:	2f00      	cmp	r7, #0
 8018e84:	f000 80ba 	beq.w	8018ffc <http_recv+0x3ac>
              *sp1 = ' ';
 8018e88:	2320      	movs	r3, #32
 8018e8a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8018e8c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8018e90:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018e92:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018e94:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018e98:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8018e9a:	d022      	beq.n	8018ee2 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018e9c:	2f00      	cmp	r7, #0
 8018e9e:	d048      	beq.n	8018f32 <http_recv+0x2e2>
 8018ea0:	1d7a      	adds	r2, r7, #5
 8018ea2:	f43f aeeb 	beq.w	8018c7c <http_recv+0x2c>
 8018ea6:	f027 0308 	bic.w	r3, r7, #8
 8018eaa:	b25b      	sxtb	r3, r3
 8018eac:	3310      	adds	r3, #16
 8018eae:	d12e      	bne.n	8018f0e <http_recv+0x2be>
        if (hs->req != NULL) {
 8018eb0:	6a28      	ldr	r0, [r5, #32]
 8018eb2:	b3a0      	cbz	r0, 8018f1e <http_recv+0x2ce>
          pbuf_free(hs->req);
 8018eb4:	f002 f9a4 	bl	801b200 <pbuf_free>
          hs->req = NULL;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8018ebc:	4620      	mov	r0, r4
 8018ebe:	f002 f99f 	bl	801b200 <pbuf_free>
      if (parsed == ERR_OK) {
 8018ec2:	b1df      	cbz	r7, 8018efc <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8018ec4:	3710      	adds	r7, #16
 8018ec6:	f43f aee8 	beq.w	8018c9a <http_recv+0x4a>
 8018eca:	e6ea      	b.n	8018ca2 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8018ecc:	6a28      	ldr	r0, [r5, #32]
 8018ece:	f002 f9ab 	bl	801b228 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8018ed2:	6a2b      	ldr	r3, [r5, #32]
 8018ed4:	891b      	ldrh	r3, [r3, #8]
 8018ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018eda:	d202      	bcs.n	8018ee2 <http_recv+0x292>
 8018edc:	2805      	cmp	r0, #5
 8018ede:	f67f aecd 	bls.w	8018c7c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8018ee2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8018ee6:	4628      	mov	r0, r5
 8018ee8:	f7ff fa88 	bl	80183fc <http_find_error_file>
 8018eec:	4607      	mov	r7, r0
 8018eee:	e7d5      	b.n	8018e9c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 8018ef0:	4621      	mov	r1, r4
 8018ef2:	4628      	mov	r0, r5
    hs->retries = 0;
 8018ef4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8018ef8:	f7ff fa5a 	bl	80183b0 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8018efc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	f47f aecf 	bne.w	8018ca2 <http_recv+0x52>
      http_send(pcb, hs);
 8018f04:	4629      	mov	r1, r5
 8018f06:	4630      	mov	r0, r6
 8018f08:	f7ff fb5a 	bl	80185c0 <http_send>
 8018f0c:	e6c9      	b.n	8018ca2 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8018f0e:	4b34      	ldr	r3, [pc, #208]	; (8018fe0 <http_recv+0x390>)
 8018f10:	f640 2204 	movw	r2, #2564	; 0xa04
 8018f14:	4933      	ldr	r1, [pc, #204]	; (8018fe4 <http_recv+0x394>)
 8018f16:	4834      	ldr	r0, [pc, #208]	; (8018fe8 <http_recv+0x398>)
 8018f18:	f00c fa3c 	bl	8025394 <iprintf>
 8018f1c:	e7c8      	b.n	8018eb0 <http_recv+0x260>
      pbuf_free(p);
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f002 f96e 	bl	801b200 <pbuf_free>
      if (parsed == ERR_OK) {
 8018f24:	e7ce      	b.n	8018ec4 <http_recv+0x274>
    hs->req = p;
 8018f26:	622c      	str	r4, [r5, #32]
 8018f28:	e6ca      	b.n	8018cc0 <http_recv+0x70>
    data = (char *)p->payload;
 8018f2a:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8018f2e:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8018f30:	e6da      	b.n	8018ce8 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8018f32:	1d7b      	adds	r3, r7, #5
 8018f34:	f43f aea2 	beq.w	8018c7c <http_recv+0x2c>
        if (hs->req != NULL) {
 8018f38:	6a28      	ldr	r0, [r5, #32]
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	d0be      	beq.n	8018ebc <http_recv+0x26c>
 8018f3e:	e7b9      	b.n	8018eb4 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8018f40:	2205      	movs	r2, #5
 8018f42:	492a      	ldr	r1, [pc, #168]	; (8018fec <http_recv+0x39c>)
 8018f44:	4640      	mov	r0, r8
 8018f46:	f00d f9f9 	bl	802633c <strncmp>
 8018f4a:	9005      	str	r0, [sp, #20]
 8018f4c:	b9d8      	cbnz	r0, 8018f86 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018f4e:	f1a7 0a05 	sub.w	sl, r7, #5
 8018f52:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8018f56:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018f5a:	491e      	ldr	r1, [pc, #120]	; (8018fd4 <http_recv+0x384>)
 8018f5c:	fa1f fa8a 	uxth.w	sl, sl
 8018f60:	4658      	mov	r0, fp
        sp1 = data + 4;
 8018f62:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018f64:	4652      	mov	r2, sl
 8018f66:	f000 f915 	bl	8019194 <lwip_strnstr>
      if (sp2 == NULL) {
 8018f6a:	4681      	mov	r9, r0
 8018f6c:	2800      	cmp	r0, #0
 8018f6e:	d059      	beq.n	8019024 <http_recv+0x3d4>
        is_post = 1;
 8018f70:	f04f 0a01 	mov.w	sl, #1
 8018f74:	9b05      	ldr	r3, [sp, #20]
 8018f76:	e6dd      	b.n	8018d34 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018f78:	4914      	ldr	r1, [pc, #80]	; (8018fcc <http_recv+0x37c>)
 8018f7a:	4658      	mov	r0, fp
 8018f7c:	f000 f90a 	bl	8019194 <lwip_strnstr>
        is_09 = 1;
 8018f80:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018f82:	4681      	mov	r9, r0
        if (is_post) {
 8018f84:	e6d6      	b.n	8018d34 <http_recv+0xe4>
        data[4] = 0;
 8018f86:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8018f88:	f240 11f5 	movw	r1, #501	; 0x1f5
 8018f8c:	4628      	mov	r0, r5
        data[4] = 0;
 8018f8e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8018f92:	f7ff fa33 	bl	80183fc <http_find_error_file>
 8018f96:	4607      	mov	r7, r0
 8018f98:	e780      	b.n	8018e9c <http_recv+0x24c>
        if (hs->req != NULL) {
 8018f9a:	2800      	cmp	r0, #0
 8018f9c:	f43f ae6e 	beq.w	8018c7c <http_recv+0x2c>
 8018fa0:	f06f 0707 	mvn.w	r7, #7
 8018fa4:	e786      	b.n	8018eb4 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8018fa6:	461a      	mov	r2, r3
 8018fa8:	4659      	mov	r1, fp
 8018faa:	4628      	mov	r0, r5
 8018fac:	f7ff f910 	bl	80181d0 <http_find_file>
 8018fb0:	4607      	mov	r7, r0
 8018fb2:	e773      	b.n	8018e9c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018fb4:	463a      	mov	r2, r7
 8018fb6:	490e      	ldr	r1, [pc, #56]	; (8018ff0 <http_recv+0x3a0>)
 8018fb8:	4640      	mov	r0, r8
 8018fba:	f000 f8eb 	bl	8019194 <lwip_strnstr>
 8018fbe:	9b05      	ldr	r3, [sp, #20]
 8018fc0:	2800      	cmp	r0, #0
 8018fc2:	d047      	beq.n	8019054 <http_recv+0x404>
            hs->keepalive = 1;
 8018fc4:	2001      	movs	r0, #1
 8018fc6:	e6cb      	b.n	8018d60 <http_recv+0x110>
 8018fc8:	2001e688 	.word	0x2001e688
 8018fcc:	0802a10c 	.word	0x0802a10c
 8018fd0:	08042fb8 	.word	0x08042fb8
 8018fd4:	0802c51c 	.word	0x0802c51c
 8018fd8:	0802a26c 	.word	0x0802a26c
 8018fdc:	0802a274 	.word	0x0802a274
 8018fe0:	08042e38 	.word	0x08042e38
 8018fe4:	08042ff8 	.word	0x08042ff8
 8018fe8:	08029fe8 	.word	0x08029fe8
 8018fec:	08042fc0 	.word	0x08042fc0
 8018ff0:	08042fc8 	.word	0x08042fc8
 8018ff4:	2001e644 	.word	0x2001e644
            } else if (hs->post_content_len_left == 0) {
 8018ff8:	9b07      	ldr	r3, [sp, #28]
 8018ffa:	b303      	cbz	r3, 801903e <http_recv+0x3ee>
        if (hs->req != NULL) {
 8018ffc:	6a28      	ldr	r0, [r5, #32]
 8018ffe:	b398      	cbz	r0, 8019068 <http_recv+0x418>
          pbuf_free(hs->req);
 8019000:	f002 f8fe 	bl	801b200 <pbuf_free>
          hs->req = NULL;
 8019004:	2300      	movs	r3, #0
      pbuf_free(p);
 8019006:	4620      	mov	r0, r4
          hs->req = NULL;
 8019008:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801900a:	f002 f8f9 	bl	801b200 <pbuf_free>
      if (parsed == ERR_OK) {
 801900e:	e775      	b.n	8018efc <http_recv+0x2ac>
        if (content_len >= 0) {
 8019010:	f6bf aeed 	bge.w	8018dee <http_recv+0x19e>
              *sp1 = ' ';
 8019014:	2320      	movs	r3, #32
 8019016:	9a04      	ldr	r2, [sp, #16]
 8019018:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 801901a:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 801901c:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8019020:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8019022:	e75e      	b.n	8018ee2 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8019024:	4652      	mov	r2, sl
 8019026:	4658      	mov	r0, fp
 8019028:	4915      	ldr	r1, [pc, #84]	; (8019080 <http_recv+0x430>)
 801902a:	f000 f8b3 	bl	8019194 <lwip_strnstr>
        if (is_post) {
 801902e:	e758      	b.n	8018ee2 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8019030:	463a      	mov	r2, r7
 8019032:	4659      	mov	r1, fp
 8019034:	4628      	mov	r0, r5
 8019036:	f7ff f8cb 	bl	80181d0 <http_find_file>
 801903a:	4607      	mov	r7, r0
 801903c:	e721      	b.n	8018e82 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 801903e:	9907      	ldr	r1, [sp, #28]
 8019040:	2241      	movs	r2, #65	; 0x41
 8019042:	4608      	mov	r0, r1
 8019044:	f001 ff0a 	bl	801ae5c <pbuf_alloc>
 8019048:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 801904a:	4628      	mov	r0, r5
 801904c:	f7ff f9b0 	bl	80183b0 <http_post_rxpbuf>
 8019050:	4607      	mov	r7, r0
 8019052:	e716      	b.n	8018e82 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8019054:	463a      	mov	r2, r7
 8019056:	490b      	ldr	r1, [pc, #44]	; (8019084 <http_recv+0x434>)
 8019058:	4640      	mov	r0, r8
 801905a:	f000 f89b 	bl	8019194 <lwip_strnstr>
            hs->keepalive = 1;
 801905e:	3800      	subs	r0, #0
 8019060:	9b05      	ldr	r3, [sp, #20]
 8019062:	bf18      	it	ne
 8019064:	2001      	movne	r0, #1
 8019066:	e67b      	b.n	8018d60 <http_recv+0x110>
      pbuf_free(p);
 8019068:	4620      	mov	r0, r4
 801906a:	f002 f8c9 	bl	801b200 <pbuf_free>
      if (parsed == ERR_OK) {
 801906e:	e745      	b.n	8018efc <http_recv+0x2ac>
              *sp1 = ' ';
 8019070:	2320      	movs	r3, #32
 8019072:	9a04      	ldr	r2, [sp, #16]
 8019074:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8019076:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8019078:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 801907c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 801907e:	e5fd      	b.n	8018c7c <http_recv+0x2c>
 8019080:	0802a10c 	.word	0x0802a10c
 8019084:	08042fe0 	.word	0x08042fe0

08019088 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8019088:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801908a:	202e      	movs	r0, #46	; 0x2e
 801908c:	f003 fc60 	bl	801c950 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8019090:	b358      	cbz	r0, 80190ea <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8019092:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8019094:	2101      	movs	r1, #1
 8019096:	f002 fe3d 	bl	801bd14 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801909a:	2250      	movs	r2, #80	; 0x50
 801909c:	4917      	ldr	r1, [pc, #92]	; (80190fc <httpd_init+0x74>)
 801909e:	4620      	mov	r0, r4
 80190a0:	f002 fc0c 	bl	801b8bc <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80190a4:	b958      	cbnz	r0, 80190be <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 80190a6:	4620      	mov	r0, r4
 80190a8:	21ff      	movs	r1, #255	; 0xff
 80190aa:	f002 fce9 	bl	801ba80 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80190ae:	4604      	mov	r4, r0
 80190b0:	b198      	cbz	r0, 80190da <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 80190b2:	4620      	mov	r0, r4
 80190b4:	4912      	ldr	r1, [pc, #72]	; (8019100 <httpd_init+0x78>)
}
 80190b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 80190ba:	f002 beb9 	b.w	801be30 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 80190be:	4b11      	ldr	r3, [pc, #68]	; (8019104 <httpd_init+0x7c>)
 80190c0:	f640 2257 	movw	r2, #2647	; 0xa57
 80190c4:	4910      	ldr	r1, [pc, #64]	; (8019108 <httpd_init+0x80>)
 80190c6:	4811      	ldr	r0, [pc, #68]	; (801910c <httpd_init+0x84>)
 80190c8:	f00c f964 	bl	8025394 <iprintf>
    pcb = altcp_listen(pcb);
 80190cc:	4620      	mov	r0, r4
 80190ce:	21ff      	movs	r1, #255	; 0xff
 80190d0:	f002 fcd6 	bl	801ba80 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 80190d4:	4604      	mov	r4, r0
 80190d6:	2800      	cmp	r0, #0
 80190d8:	d1eb      	bne.n	80190b2 <httpd_init+0x2a>
 80190da:	4b0a      	ldr	r3, [pc, #40]	; (8019104 <httpd_init+0x7c>)
 80190dc:	f640 2259 	movw	r2, #2649	; 0xa59
 80190e0:	490b      	ldr	r1, [pc, #44]	; (8019110 <httpd_init+0x88>)
 80190e2:	480a      	ldr	r0, [pc, #40]	; (801910c <httpd_init+0x84>)
 80190e4:	f00c f956 	bl	8025394 <iprintf>
 80190e8:	e7e3      	b.n	80190b2 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80190ea:	4b06      	ldr	r3, [pc, #24]	; (8019104 <httpd_init+0x7c>)
 80190ec:	f640 2272 	movw	r2, #2674	; 0xa72
 80190f0:	4908      	ldr	r1, [pc, #32]	; (8019114 <httpd_init+0x8c>)
 80190f2:	4806      	ldr	r0, [pc, #24]	; (801910c <httpd_init+0x84>)
}
 80190f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80190f8:	f00c b94c 	b.w	8025394 <iprintf>
 80190fc:	08045954 	.word	0x08045954
 8019100:	08017f79 	.word	0x08017f79
 8019104:	08042e38 	.word	0x08042e38
 8019108:	08043040 	.word	0x08043040
 801910c:	08029fe8 	.word	0x08029fe8
 8019110:	0804305c 	.word	0x0804305c
 8019114:	08043024 	.word	0x08043024

08019118 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8019118:	b570      	push	{r4, r5, r6, lr}
 801911a:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 801911c:	4606      	mov	r6, r0
{
 801911e:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8019120:	b1c8      	cbz	r0, 8019156 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8019122:	4b11      	ldr	r3, [pc, #68]	; (8019168 <http_set_ssi_handler+0x50>)
 8019124:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8019126:	b175      	cbz	r5, 8019146 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8019128:	2c00      	cmp	r4, #0
 801912a:	dd04      	ble.n	8019136 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 801912c:	4a0f      	ldr	r2, [pc, #60]	; (801916c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 801912e:	4b10      	ldr	r3, [pc, #64]	; (8019170 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8019130:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8019132:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8019134:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8019136:	4b0f      	ldr	r3, [pc, #60]	; (8019174 <http_set_ssi_handler+0x5c>)
 8019138:	f640 229f 	movw	r2, #2719	; 0xa9f
 801913c:	490e      	ldr	r1, [pc, #56]	; (8019178 <http_set_ssi_handler+0x60>)
 801913e:	480f      	ldr	r0, [pc, #60]	; (801917c <http_set_ssi_handler+0x64>)
 8019140:	f00c f928 	bl	8025394 <iprintf>
 8019144:	e7f2      	b.n	801912c <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8019146:	4b0b      	ldr	r3, [pc, #44]	; (8019174 <http_set_ssi_handler+0x5c>)
 8019148:	f640 229e 	movw	r2, #2718	; 0xa9e
 801914c:	490c      	ldr	r1, [pc, #48]	; (8019180 <http_set_ssi_handler+0x68>)
 801914e:	480b      	ldr	r0, [pc, #44]	; (801917c <http_set_ssi_handler+0x64>)
 8019150:	f00c f920 	bl	8025394 <iprintf>
 8019154:	e7e8      	b.n	8019128 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8019156:	4b07      	ldr	r3, [pc, #28]	; (8019174 <http_set_ssi_handler+0x5c>)
 8019158:	f640 2297 	movw	r2, #2711	; 0xa97
 801915c:	4909      	ldr	r1, [pc, #36]	; (8019184 <http_set_ssi_handler+0x6c>)
 801915e:	4807      	ldr	r0, [pc, #28]	; (801917c <http_set_ssi_handler+0x64>)
 8019160:	f00c f918 	bl	8025394 <iprintf>
 8019164:	e7dd      	b.n	8019122 <http_set_ssi_handler+0xa>
 8019166:	bf00      	nop
 8019168:	2001ea88 	.word	0x2001ea88
 801916c:	2001ea8c 	.word	0x2001ea8c
 8019170:	2001e684 	.word	0x2001e684
 8019174:	08042e38 	.word	0x08042e38
 8019178:	080430a4 	.word	0x080430a4
 801917c:	08029fe8 	.word	0x08029fe8
 8019180:	08043094 	.word	0x08043094
 8019184:	0804307c 	.word	0x0804307c

08019188 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8019188:	ba40      	rev16	r0, r0
}
 801918a:	b280      	uxth	r0, r0
 801918c:	4770      	bx	lr
 801918e:	bf00      	nop

08019190 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8019190:	ba00      	rev	r0, r0
 8019192:	4770      	bx	lr

08019194 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8019194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019198:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801919a:	4608      	mov	r0, r1
{
 801919c:	4688      	mov	r8, r1
 801919e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 80191a0:	f7e7 f858 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 80191a4:	b1c0      	cbz	r0, 80191d8 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191a6:	4605      	mov	r5, r0
 80191a8:	7820      	ldrb	r0, [r4, #0]
 80191aa:	b1b0      	cbz	r0, 80191da <lwip_strnstr+0x46>
 80191ac:	4426      	add	r6, r4
 80191ae:	1962      	adds	r2, r4, r5
 80191b0:	4296      	cmp	r6, r2
 80191b2:	d314      	bcc.n	80191de <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80191b4:	f898 7000 	ldrb.w	r7, [r8]
 80191b8:	e005      	b.n	80191c6 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 80191ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80191be:	1962      	adds	r2, r4, r5
 80191c0:	b158      	cbz	r0, 80191da <lwip_strnstr+0x46>
 80191c2:	4296      	cmp	r6, r2
 80191c4:	d30b      	bcc.n	80191de <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 80191c6:	4287      	cmp	r7, r0
 80191c8:	d1f7      	bne.n	80191ba <lwip_strnstr+0x26>
 80191ca:	4620      	mov	r0, r4
 80191cc:	462a      	mov	r2, r5
 80191ce:	4641      	mov	r1, r8
 80191d0:	f00d f8b4 	bl	802633c <strncmp>
 80191d4:	2800      	cmp	r0, #0
 80191d6:	d1f0      	bne.n	80191ba <lwip_strnstr+0x26>
 80191d8:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 80191da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 80191de:	2000      	movs	r0, #0
}
 80191e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080191e4 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 80191e4:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 80191e8:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 80191ec:	4293      	cmp	r3, r2
 80191ee:	d01c      	beq.n	801922a <lwip_stricmp+0x46>
 80191f0:	f043 0c20 	orr.w	ip, r3, #32
{
 80191f4:	b500      	push	{lr}
 80191f6:	f042 0e20 	orr.w	lr, r2, #32
 80191fa:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80191fe:	2a19      	cmp	r2, #25
 8019200:	d810      	bhi.n	8019224 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8019202:	45f4      	cmp	ip, lr
 8019204:	d10e      	bne.n	8019224 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8019206:	b1a3      	cbz	r3, 8019232 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8019208:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801920c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8019210:	4293      	cmp	r3, r2
 8019212:	d0f8      	beq.n	8019206 <lwip_stricmp+0x22>
 8019214:	f043 0c20 	orr.w	ip, r3, #32
 8019218:	f042 0e20 	orr.w	lr, r2, #32
 801921c:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019220:	2a19      	cmp	r2, #25
 8019222:	d9ee      	bls.n	8019202 <lwip_stricmp+0x1e>
        return 1;
 8019224:	2001      	movs	r0, #1
  return 0;
}
 8019226:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 801922a:	2b00      	cmp	r3, #0
 801922c:	d1da      	bne.n	80191e4 <lwip_stricmp>
  return 0;
 801922e:	4618      	mov	r0, r3
}
 8019230:	4770      	bx	lr
  return 0;
 8019232:	4618      	mov	r0, r3
}
 8019234:	f85d fb04 	ldr.w	pc, [sp], #4

08019238 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8019238:	4684      	mov	ip, r0
 801923a:	b570      	push	{r4, r5, r6, lr}
 801923c:	e004      	b.n	8019248 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 801923e:	42b4      	cmp	r4, r6
 8019240:	d113      	bne.n	801926a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8019242:	42e8      	cmn	r0, r5
 8019244:	d013      	beq.n	801926e <lwip_strnicmp+0x36>
 8019246:	b193      	cbz	r3, 801926e <lwip_strnicmp+0x36>
    c1 = *str1++;
 8019248:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 801924c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8019250:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019254:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8019258:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 801925a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 801925e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8019262:	d0ee      	beq.n	8019242 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8019264:	f1be 0f19 	cmp.w	lr, #25
 8019268:	d9e9      	bls.n	801923e <lwip_strnicmp+0x6>
        return 1;
 801926a:	2001      	movs	r0, #1
  return 0;
}
 801926c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 801926e:	2000      	movs	r0, #0
}
 8019270:	bd70      	pop	{r4, r5, r6, pc}
 8019272:	bf00      	nop

08019274 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8019274:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019278:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801927a:	4f24      	ldr	r7, [pc, #144]	; (801930c <dns_call_found+0x98>)
 801927c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8019280:	4c23      	ldr	r4, [pc, #140]	; (8019310 <dns_call_found+0x9c>)
{
 8019282:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8019284:	012e      	lsls	r6, r5, #4
 8019286:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 801928a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 801928e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8019292:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8019296:	6823      	ldr	r3, [r4, #0]
 8019298:	b143      	cbz	r3, 80192ac <dns_call_found+0x38>
 801929a:	7a22      	ldrb	r2, [r4, #8]
 801929c:	42aa      	cmp	r2, r5
 801929e:	d105      	bne.n	80192ac <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80192a0:	6862      	ldr	r2, [r4, #4]
 80192a2:	4651      	mov	r1, sl
 80192a4:	4640      	mov	r0, r8
 80192a6:	4798      	blx	r3
      dns_requests[i].found = NULL;
 80192a8:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80192ac:	340c      	adds	r4, #12
 80192ae:	454c      	cmp	r4, r9
 80192b0:	d1f1      	bne.n	8019296 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80192b2:	1973      	adds	r3, r6, r5
 80192b4:	2400      	movs	r4, #0
 80192b6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80192ba:	4f14      	ldr	r7, [pc, #80]	; (801930c <dns_call_found+0x98>)
 80192bc:	7bd9      	ldrb	r1, [r3, #15]
 80192be:	463a      	mov	r2, r7
    if (i == idx) {
 80192c0:	b2e3      	uxtb	r3, r4
 80192c2:	3401      	adds	r4, #1
 80192c4:	429d      	cmp	r5, r3
 80192c6:	d002      	beq.n	80192ce <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 80192c8:	7a93      	ldrb	r3, [r2, #10]
 80192ca:	2b02      	cmp	r3, #2
 80192cc:	d015      	beq.n	80192fa <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80192ce:	2c04      	cmp	r4, #4
 80192d0:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80192d4:	d1f4      	bne.n	80192c0 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80192d6:	2903      	cmp	r1, #3
 80192d8:	d80d      	bhi.n	80192f6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80192da:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80192dc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8019314 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80192e0:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80192e4:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 80192e8:	f007 f860 	bl	80203ac <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80192ec:	2200      	movs	r2, #0
 80192ee:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80192f0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80192f2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 80192f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 80192fa:	7bd3      	ldrb	r3, [r2, #15]
 80192fc:	428b      	cmp	r3, r1
 80192fe:	d1e6      	bne.n	80192ce <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8019300:	4435      	add	r5, r6
 8019302:	2304      	movs	r3, #4
 8019304:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8019308:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801930a:	e7f4      	b.n	80192f6 <dns_call_found+0x82>
 801930c:	2001eae0 	.word	0x2001eae0
 8019310:	2001eaa4 	.word	0x2001eaa4
 8019314:	2001ea94 	.word	0x2001ea94

08019318 <dns_send.isra.0>:
dns_send(u8_t idx)
 8019318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 801931c:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 801931e:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8019320:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8019324:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8019326:	9301      	str	r3, [sp, #4]
 8019328:	4b56      	ldr	r3, [pc, #344]	; (8019484 <dns_send.isra.0+0x16c>)
 801932a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 801932e:	7ae3      	ldrb	r3, [r4, #11]
 8019330:	2b01      	cmp	r3, #1
 8019332:	d907      	bls.n	8019344 <dns_send.isra.0+0x2c>
 8019334:	4b54      	ldr	r3, [pc, #336]	; (8019488 <dns_send.isra.0+0x170>)
 8019336:	f240 22fa 	movw	r2, #762	; 0x2fa
 801933a:	4954      	ldr	r1, [pc, #336]	; (801948c <dns_send.isra.0+0x174>)
 801933c:	4854      	ldr	r0, [pc, #336]	; (8019490 <dns_send.isra.0+0x178>)
 801933e:	f00c f829 	bl	8025394 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8019342:	7ae3      	ldrb	r3, [r4, #11]
 8019344:	4a53      	ldr	r2, [pc, #332]	; (8019494 <dns_send.isra.0+0x17c>)
 8019346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801934a:	2c00      	cmp	r4, #0
 801934c:	f000 808b 	beq.w	8019466 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8019350:	9b01      	ldr	r3, [sp, #4]
 8019352:	4e4c      	ldr	r6, [pc, #304]	; (8019484 <dns_send.isra.0+0x16c>)
 8019354:	eb03 0409 	add.w	r4, r3, r9
 8019358:	0124      	lsls	r4, r4, #4
 801935a:	f104 0510 	add.w	r5, r4, #16
 801935e:	4435      	add	r5, r6
 8019360:	4628      	mov	r0, r5
 8019362:	f7e6 ff77 	bl	8000254 <strlen>
 8019366:	3012      	adds	r0, #18
 8019368:	f44f 7220 	mov.w	r2, #640	; 0x280
 801936c:	b281      	uxth	r1, r0
 801936e:	2036      	movs	r0, #54	; 0x36
 8019370:	f001 fd74 	bl	801ae5c <pbuf_alloc>
  if (p != NULL) {
 8019374:	4680      	mov	r8, r0
 8019376:	2800      	cmp	r0, #0
 8019378:	d06d      	beq.n	8019456 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 801937a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 801937c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 801937e:	260c      	movs	r6, #12
    --hostname;
 8019380:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8019382:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8019384:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8019388:	9305      	str	r3, [sp, #20]
 801938a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 801938e:	f7ff fefb 	bl	8019188 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8019392:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 8019394:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8019398:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 801939a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 801939e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80193a2:	4632      	mov	r2, r6
 80193a4:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 80193a6:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80193aa:	f002 f81d 	bl	801b3e8 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193ae:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 80193b0:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193b2:	2b2e      	cmp	r3, #46	; 0x2e
 80193b4:	d052      	beq.n	801945c <dns_send.isra.0+0x144>
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	d050      	beq.n	801945c <dns_send.isra.0+0x144>
      ++hostname;
 80193ba:	463d      	mov	r5, r7
 80193bc:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 80193c0:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80193c2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80193c6:	2b2e      	cmp	r3, #46	; 0x2e
 80193c8:	b2e4      	uxtb	r4, r4
 80193ca:	d001      	beq.n	80193d0 <dns_send.isra.0+0xb8>
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d1f7      	bne.n	80193c0 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 80193d0:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 80193d4:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 80193d6:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 80193da:	4433      	add	r3, r6
 80193dc:	4553      	cmp	r3, sl
 80193de:	dc37      	bgt.n	8019450 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 80193e0:	4622      	mov	r2, r4
 80193e2:	4631      	mov	r1, r6
 80193e4:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 80193e6:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 80193e8:	f002 f8e4 	bl	801b5b4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80193ec:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 80193ee:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80193f0:	465a      	mov	r2, fp
 80193f2:	4639      	mov	r1, r7
 80193f4:	b29b      	uxth	r3, r3
 80193f6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 80193f8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80193fa:	f002 f85b 	bl	801b4b4 <pbuf_take_at>
    } while (*hostname != 0);
 80193fe:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8019400:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8019402:	2a00      	cmp	r2, #0
 8019404:	d1d3      	bne.n	80193ae <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8019406:	4631      	mov	r1, r6
 8019408:	4640      	mov	r0, r8
 801940a:	f002 f8d3 	bl	801b5b4 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801940e:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8019412:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8019414:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8019416:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801941a:	4640      	mov	r0, r8
 801941c:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 801941e:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8019422:	2204      	movs	r2, #4
 8019424:	f002 f846 	bl	801b4b4 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8019428:	9b01      	ldr	r3, [sp, #4]
 801942a:	4a16      	ldr	r2, [pc, #88]	; (8019484 <dns_send.isra.0+0x16c>)
 801942c:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801942e:	4919      	ldr	r1, [pc, #100]	; (8019494 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 8019430:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8019432:	4b19      	ldr	r3, [pc, #100]	; (8019498 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 8019434:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8019438:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 801943c:	f89b 000f 	ldrb.w	r0, [fp, #15]
 8019440:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019444:	4641      	mov	r1, r8
 8019446:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801944a:	2335      	movs	r3, #53	; 0x35
 801944c:	f006 ff0c 	bl	8020268 <udp_sendto>
    pbuf_free(p);
 8019450:	4640      	mov	r0, r8
 8019452:	f001 fed5 	bl	801b200 <pbuf_free>
}
 8019456:	b007      	add	sp, #28
 8019458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801945c:	2300      	movs	r3, #0
      ++hostname;
 801945e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8019460:	469b      	mov	fp, r3
 8019462:	461c      	mov	r4, r3
 8019464:	e7b9      	b.n	80193da <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 8019466:	4648      	mov	r0, r9
 8019468:	4621      	mov	r1, r4
 801946a:	f7ff ff03 	bl	8019274 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801946e:	9b01      	ldr	r3, [sp, #4]
 8019470:	444b      	add	r3, r9
 8019472:	4699      	mov	r9, r3
 8019474:	4b03      	ldr	r3, [pc, #12]	; (8019484 <dns_send.isra.0+0x16c>)
 8019476:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801947a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 801947e:	b007      	add	sp, #28
 8019480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019484:	2001eae0 	.word	0x2001eae0
 8019488:	0804317c 	.word	0x0804317c
 801948c:	080431ac 	.word	0x080431ac
 8019490:	08029fe8 	.word	0x08029fe8
 8019494:	2001ead8 	.word	0x2001ead8
 8019498:	2001ea94 	.word	0x2001ea94

0801949c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 801949c:	2803      	cmp	r0, #3
{
 801949e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194a2:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80194a4:	d846      	bhi.n	8019534 <dns_check_entry+0x98>

  switch (entry->state) {
 80194a6:	4e3a      	ldr	r6, [pc, #232]	; (8019590 <dns_check_entry+0xf4>)
 80194a8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 80194ac:	0125      	lsls	r5, r4, #4
 80194ae:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80194b2:	7a9b      	ldrb	r3, [r3, #10]
 80194b4:	2b03      	cmp	r3, #3
 80194b6:	d861      	bhi.n	801957c <dns_check_entry+0xe0>
 80194b8:	e8df f003 	tbb	[pc, r3]
 80194bc:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80194c0:	192b      	adds	r3, r5, r4
 80194c2:	011b      	lsls	r3, r3, #4
 80194c4:	58f2      	ldr	r2, [r6, r3]
 80194c6:	2a00      	cmp	r2, #0
 80194c8:	d140      	bne.n	801954c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80194ca:	442c      	add	r4, r5
 80194cc:	2300      	movs	r3, #0
 80194ce:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 80194d2:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 80194d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194d8:	4f2e      	ldr	r7, [pc, #184]	; (8019594 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 80194da:	f00b ffff 	bl	80254dc <rand>
 80194de:	4b2c      	ldr	r3, [pc, #176]	; (8019590 <dns_check_entry+0xf4>)
 80194e0:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80194e2:	7a9a      	ldrb	r2, [r3, #10]
 80194e4:	2a02      	cmp	r2, #2
 80194e6:	d02d      	beq.n	8019544 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80194e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80194ec:	429f      	cmp	r7, r3
 80194ee:	d1f8      	bne.n	80194e2 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 80194f0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 80194f2:	2202      	movs	r2, #2
      entry->tmr = 1;
 80194f4:	2301      	movs	r3, #1
      err = dns_send(i);
 80194f6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 80194f8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 80194fc:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 80194fe:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8019500:	81b3      	strh	r3, [r6, #12]
}
 8019502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8019506:	f7ff bf07 	b.w	8019318 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 801950a:	192a      	adds	r2, r5, r4
 801950c:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8019510:	7b13      	ldrb	r3, [r2, #12]
 8019512:	3b01      	subs	r3, #1
 8019514:	b2db      	uxtb	r3, r3
 8019516:	7313      	strb	r3, [r2, #12]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d1db      	bne.n	80194d4 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 801951c:	7b53      	ldrb	r3, [r2, #13]
 801951e:	3301      	adds	r3, #1
 8019520:	b2db      	uxtb	r3, r3
 8019522:	2b04      	cmp	r3, #4
 8019524:	7353      	strb	r3, [r2, #13]
 8019526:	d016      	beq.n	8019556 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8019528:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 801952a:	4620      	mov	r0, r4
}
 801952c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8019530:	f7ff bef2 	b.w	8019318 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8019534:	4b18      	ldr	r3, [pc, #96]	; (8019598 <dns_check_entry+0xfc>)
 8019536:	f240 421c 	movw	r2, #1052	; 0x41c
 801953a:	4918      	ldr	r1, [pc, #96]	; (801959c <dns_check_entry+0x100>)
 801953c:	4818      	ldr	r0, [pc, #96]	; (80195a0 <dns_check_entry+0x104>)
 801953e:	f00b ff29 	bl	8025394 <iprintf>
 8019542:	e7b0      	b.n	80194a6 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019544:	891a      	ldrh	r2, [r3, #8]
 8019546:	428a      	cmp	r2, r1
 8019548:	d1ce      	bne.n	80194e8 <dns_check_entry+0x4c>
 801954a:	e7c6      	b.n	80194da <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801954c:	3a01      	subs	r2, #1
 801954e:	50f2      	str	r2, [r6, r3]
 8019550:	2a00      	cmp	r2, #0
 8019552:	d0ba      	beq.n	80194ca <dns_check_entry+0x2e>
 8019554:	e7be      	b.n	80194d4 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019556:	7ad3      	ldrb	r3, [r2, #11]
 8019558:	b913      	cbnz	r3, 8019560 <dns_check_entry+0xc4>
 801955a:	4b12      	ldr	r3, [pc, #72]	; (80195a4 <dns_check_entry+0x108>)
 801955c:	685b      	ldr	r3, [r3, #4]
 801955e:	b94b      	cbnz	r3, 8019574 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 8019560:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8019562:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8019564:	2100      	movs	r1, #0
 8019566:	f7ff fe85 	bl	8019274 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801956a:	2300      	movs	r3, #0
 801956c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8019570:	72b3      	strb	r3, [r6, #10]
            break;
 8019572:	e7af      	b.n	80194d4 <dns_check_entry+0x38>
            entry->server_idx++;
 8019574:	2301      	movs	r3, #1
 8019576:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8019578:	8193      	strh	r3, [r2, #12]
 801957a:	e7d6      	b.n	801952a <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801957c:	4b06      	ldr	r3, [pc, #24]	; (8019598 <dns_check_entry+0xfc>)
 801957e:	f240 425b 	movw	r2, #1115	; 0x45b
 8019582:	4909      	ldr	r1, [pc, #36]	; (80195a8 <dns_check_entry+0x10c>)
 8019584:	4806      	ldr	r0, [pc, #24]	; (80195a0 <dns_check_entry+0x104>)
}
 8019586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801958a:	f00b bf03 	b.w	8025394 <iprintf>
 801958e:	bf00      	nop
 8019590:	2001eae0 	.word	0x2001eae0
 8019594:	2001ef20 	.word	0x2001ef20
 8019598:	0804317c 	.word	0x0804317c
 801959c:	080431c4 	.word	0x080431c4
 80195a0:	08029fe8 	.word	0x08029fe8
 80195a4:	2001ead8 	.word	0x2001ead8
 80195a8:	080431e0 	.word	0x080431e0

080195ac <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80195ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b0:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80195b2:	8912      	ldrh	r2, [r2, #8]
{
 80195b4:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 80195b6:	2a0f      	cmp	r2, #15
 80195b8:	d805      	bhi.n	80195c6 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 80195ba:	4620      	mov	r0, r4
 80195bc:	f001 fe20 	bl	801b200 <pbuf_free>
  return;
}
 80195c0:	b00d      	add	sp, #52	; 0x34
 80195c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 80195c6:	4699      	mov	r9, r3
 80195c8:	220c      	movs	r2, #12
 80195ca:	2300      	movs	r3, #0
 80195cc:	a906      	add	r1, sp, #24
 80195ce:	4620      	mov	r0, r4
 80195d0:	f001 feba 	bl	801b348 <pbuf_copy_partial>
 80195d4:	280c      	cmp	r0, #12
 80195d6:	4605      	mov	r5, r0
 80195d8:	d1ef      	bne.n	80195ba <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 80195da:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80198d0 <dns_recv+0x324>
 80195de:	2600      	movs	r6, #0
 80195e0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80195e4:	f7ff fdd0 	bl	8019188 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80195e8:	4643      	mov	r3, r8
 80195ea:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 80195ec:	7a9a      	ldrb	r2, [r3, #10]
 80195ee:	2a02      	cmp	r2, #2
 80195f0:	d008      	beq.n	8019604 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80195f2:	3601      	adds	r6, #1
 80195f4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80195f8:	2e04      	cmp	r6, #4
 80195fa:	d0de      	beq.n	80195ba <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 80195fc:	7a9a      	ldrb	r2, [r3, #10]
 80195fe:	b2f7      	uxtb	r7, r6
 8019600:	2a02      	cmp	r2, #2
 8019602:	d1f6      	bne.n	80195f2 <dns_recv+0x46>
 8019604:	891a      	ldrh	r2, [r3, #8]
 8019606:	4282      	cmp	r2, r0
 8019608:	d1f3      	bne.n	80195f2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 801960a:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 801960e:	f7ff fdbb 	bl	8019188 <lwip_htons>
 8019612:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 8019614:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 8019618:	f7ff fdb6 	bl	8019188 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 801961c:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 8019620:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 8019622:	09db      	lsrs	r3, r3, #7
 8019624:	d0c9      	beq.n	80195ba <dns_recv+0xe>
 8019626:	f1ba 0f01 	cmp.w	sl, #1
 801962a:	d1c6      	bne.n	80195ba <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 801962c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8019630:	49a5      	ldr	r1, [pc, #660]	; (80198c8 <dns_recv+0x31c>)
 8019632:	f8d9 2000 	ldr.w	r2, [r9]
 8019636:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801963a:	7adb      	ldrb	r3, [r3, #11]
 801963c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019640:	429a      	cmp	r2, r3
 8019642:	d1ba      	bne.n	80195ba <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019644:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8019648:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801964c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80198d4 <dns_recv+0x328>
 8019650:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019654:	f103 0210 	add.w	r2, r3, #16
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	4442      	add	r2, r8
 801965c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8019660:	462e      	mov	r6, r5
 8019662:	4627      	mov	r7, r4
 8019664:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8019666:	4631      	mov	r1, r6
 8019668:	4638      	mov	r0, r7
 801966a:	f001 ff93 	bl	801b594 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801966e:	2800      	cmp	r0, #0
 8019670:	db2d      	blt.n	80196ce <dns_recv+0x122>
 8019672:	455e      	cmp	r6, fp
 8019674:	d02b      	beq.n	80196ce <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8019676:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801967a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801967c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801967e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8019680:	d025      	beq.n	80196ce <dns_recv+0x122>
      while (n > 0) {
 8019682:	b330      	cbz	r0, 80196d2 <dns_recv+0x126>
 8019684:	46aa      	mov	sl, r5
 8019686:	182c      	adds	r4, r5, r0
 8019688:	e01b      	b.n	80196c2 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801968a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801968e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019690:	f819 2000 	ldrb.w	r2, [r9, r0]
 8019694:	4601      	mov	r1, r0
        ++query;
 8019696:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019698:	f002 0203 	and.w	r2, r2, #3
 801969c:	2a01      	cmp	r2, #1
 801969e:	f819 2003 	ldrb.w	r2, [r9, r3]
 80196a2:	f002 0203 	and.w	r2, r2, #3
 80196a6:	bf08      	it	eq
 80196a8:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 80196ac:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80196ae:	2a01      	cmp	r2, #1
 80196b0:	bf08      	it	eq
 80196b2:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 80196b4:	455e      	cmp	r6, fp
        response_offset++;
 80196b6:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 80196b8:	d009      	beq.n	80196ce <dns_recv+0x122>
 80196ba:	4299      	cmp	r1, r3
 80196bc:	d107      	bne.n	80196ce <dns_recv+0x122>
      while (n > 0) {
 80196be:	4554      	cmp	r4, sl
 80196c0:	d007      	beq.n	80196d2 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 80196c2:	4631      	mov	r1, r6
 80196c4:	4638      	mov	r0, r7
 80196c6:	f001 ff65 	bl	801b594 <pbuf_try_get_at>
        if (c < 0) {
 80196ca:	1e03      	subs	r3, r0, #0
 80196cc:	dadd      	bge.n	801968a <dns_recv+0xde>
 80196ce:	463c      	mov	r4, r7
 80196d0:	e773      	b.n	80195ba <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 80196d2:	4631      	mov	r1, r6
 80196d4:	4638      	mov	r0, r7
 80196d6:	f001 ff5d 	bl	801b594 <pbuf_try_get_at>
    if (n < 0) {
 80196da:	2800      	cmp	r0, #0
      ++query;
 80196dc:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 80196e0:	dbf5      	blt.n	80196ce <dns_recv+0x122>
  } while (n != 0);
 80196e2:	d1c0      	bne.n	8019666 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 80196e4:	4635      	mov	r5, r6
 80196e6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80196ea:	463c      	mov	r4, r7
 80196ec:	9e03      	ldr	r6, [sp, #12]
 80196ee:	454d      	cmp	r5, r9
 80196f0:	9f02      	ldr	r7, [sp, #8]
 80196f2:	f43f af62 	beq.w	80195ba <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 80196f6:	f105 0a01 	add.w	sl, r5, #1
 80196fa:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 80196fe:	45ca      	cmp	sl, r9
 8019700:	f43f af5b 	beq.w	80195ba <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 8019704:	4653      	mov	r3, sl
 8019706:	2204      	movs	r2, #4
 8019708:	a904      	add	r1, sp, #16
 801970a:	4620      	mov	r0, r4
 801970c:	f001 fe1c 	bl	801b348 <pbuf_copy_partial>
 8019710:	2804      	cmp	r0, #4
 8019712:	f47f af52 	bne.w	80195ba <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 8019716:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801971a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801971e:	f47f af4c 	bne.w	80195ba <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 8019722:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 8019726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801972a:	f47f af46 	bne.w	80195ba <dns_recv+0xe>
 801972e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8019732:	459a      	cmp	sl, r3
 8019734:	f63f af41 	bhi.w	80195ba <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8019738:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801973c:	071b      	lsls	r3, r3, #28
 801973e:	d017      	beq.n	8019770 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019740:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019744:	fb03 8306 	mla	r3, r3, r6, r8
 8019748:	7adb      	ldrb	r3, [r3, #11]
 801974a:	2b00      	cmp	r3, #0
 801974c:	f040 80ae 	bne.w	80198ac <dns_recv+0x300>
 8019750:	4b5d      	ldr	r3, [pc, #372]	; (80198c8 <dns_recv+0x31c>)
 8019752:	685b      	ldr	r3, [r3, #4]
 8019754:	2b00      	cmp	r3, #0
 8019756:	f000 80a9 	beq.w	80198ac <dns_recv+0x300>
            entry->tmr     = 1;
 801975a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801975e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8019760:	fb03 8606 	mla	r6, r3, r6, r8
 8019764:	f240 3301 	movw	r3, #769	; 0x301
 8019768:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801976a:	f7ff fe97 	bl	801949c <dns_check_entry>
            goto ignore_packet;
 801976e:	e724      	b.n	80195ba <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8019770:	3505      	adds	r5, #5
 8019772:	f8dd a000 	ldr.w	sl, [sp]
 8019776:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8019778:	f1ba 0f00 	cmp.w	sl, #0
 801977c:	f000 8096 	beq.w	80198ac <dns_recv+0x300>
 8019780:	8923      	ldrh	r3, [r4, #8]
 8019782:	42ab      	cmp	r3, r5
 8019784:	d80b      	bhi.n	801979e <dns_recv+0x1f2>
 8019786:	e091      	b.n	80198ac <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 8019788:	8922      	ldrh	r2, [r4, #8]
 801978a:	4293      	cmp	r3, r2
 801978c:	f6bf af15 	bge.w	80195ba <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 8019790:	4629      	mov	r1, r5
 8019792:	f001 feff 	bl	801b594 <pbuf_try_get_at>
    if (n < 0) {
 8019796:	2800      	cmp	r0, #0
 8019798:	f6ff af0f 	blt.w	80195ba <dns_recv+0xe>
  } while (n != 0);
 801979c:	d017      	beq.n	80197ce <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801979e:	4629      	mov	r1, r5
 80197a0:	4620      	mov	r0, r4
 80197a2:	f001 fef7 	bl	801b594 <pbuf_try_get_at>
 80197a6:	f105 0b01 	add.w	fp, r5, #1
 80197aa:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 80197ac:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 80197ae:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 80197b2:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 80197b4:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 80197b8:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 80197ba:	f6ff aefe 	blt.w	80195ba <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 80197be:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 80197c0:	f1bb 0f00 	cmp.w	fp, #0
 80197c4:	f43f aef9 	beq.w	80195ba <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 80197c8:	2ac0      	cmp	r2, #192	; 0xc0
 80197ca:	d1dd      	bne.n	8019788 <dns_recv+0x1dc>
 80197cc:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 80197ce:	454d      	cmp	r5, r9
 80197d0:	f43f aef3 	beq.w	80195ba <dns_recv+0xe>
  return (u16_t)(offset + 1);
 80197d4:	f105 0b01 	add.w	fp, r5, #1
 80197d8:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 80197dc:	45cb      	cmp	fp, r9
 80197de:	f43f aeec 	beq.w	80195ba <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80197e2:	465b      	mov	r3, fp
 80197e4:	220a      	movs	r2, #10
 80197e6:	a909      	add	r1, sp, #36	; 0x24
 80197e8:	4620      	mov	r0, r4
 80197ea:	f001 fdad 	bl	801b348 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 80197ee:	280a      	cmp	r0, #10
 80197f0:	f47f aee3 	bne.w	80195ba <dns_recv+0xe>
 80197f4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80197f8:	459b      	cmp	fp, r3
 80197fa:	f63f aede 	bhi.w	80195ba <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80197fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019802:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8019804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8019808:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801980a:	d013      	beq.n	8019834 <dns_recv+0x288>
 801980c:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 8019810:	f7ff fcba 	bl	8019188 <lwip_htons>
 8019814:	4428      	add	r0, r5
 8019816:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 801981a:	f6bf aece 	bge.w	80195ba <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 801981e:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 8019822:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8019826:	f7ff fcaf 	bl	8019188 <lwip_htons>
 801982a:	4405      	add	r5, r0
            --nanswers;
 801982c:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8019830:	b2ad      	uxth	r5, r5
            --nanswers;
 8019832:	e7a1      	b.n	8019778 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8019834:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019838:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801983c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019840:	d1e6      	bne.n	8019810 <dns_recv+0x264>
 8019842:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019846:	d1e3      	bne.n	8019810 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8019848:	462b      	mov	r3, r5
 801984a:	2204      	movs	r2, #4
 801984c:	a905      	add	r1, sp, #20
 801984e:	4620      	mov	r0, r4
 8019850:	f001 fd7a 	bl	801b348 <pbuf_copy_partial>
 8019854:	2804      	cmp	r0, #4
 8019856:	f47f aeb0 	bne.w	80195ba <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801985a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801985e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8019860:	fb03 f606 	mul.w	r6, r3, r6
 8019864:	9b05      	ldr	r3, [sp, #20]
 8019866:	eb08 0406 	add.w	r4, r8, r6
 801986a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801986c:	f001 fcc8 	bl	801b200 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019870:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019872:	f7ff fc8d 	bl	8019190 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8019876:	4a15      	ldr	r2, [pc, #84]	; (80198cc <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019878:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801987a:	9901      	ldr	r1, [sp, #4]
 801987c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801987e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019880:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 8019884:	bf28      	it	cs
 8019886:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019888:	4441      	add	r1, r8
  entry->ttl = ttl;
 801988a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801988e:	2303      	movs	r3, #3
 8019890:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 8019892:	f7ff fcef 	bl	8019274 <dns_call_found>
  if (entry->ttl == 0) {
 8019896:	f858 3006 	ldr.w	r3, [r8, r6]
 801989a:	2b00      	cmp	r3, #0
 801989c:	f47f ae90 	bne.w	80195c0 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 80198a0:	7aa2      	ldrb	r2, [r4, #10]
 80198a2:	2a03      	cmp	r2, #3
 80198a4:	f47f ae8c 	bne.w	80195c0 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 80198a8:	72a3      	strb	r3, [r4, #10]
                  return;
 80198aa:	e689      	b.n	80195c0 <dns_recv+0x14>
        pbuf_free(p);
 80198ac:	4620      	mov	r0, r4
 80198ae:	f001 fca7 	bl	801b200 <pbuf_free>
        dns_call_found(i, NULL);
 80198b2:	2100      	movs	r1, #0
 80198b4:	4638      	mov	r0, r7
 80198b6:	f7ff fcdd 	bl	8019274 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 80198ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80198be:	2200      	movs	r2, #0
 80198c0:	fb03 8606 	mla	r6, r3, r6, r8
 80198c4:	72b2      	strb	r2, [r6, #10]
        return;
 80198c6:	e67b      	b.n	80195c0 <dns_recv+0x14>
 80198c8:	2001ead8 	.word	0x2001ead8
 80198cc:	00093a80 	.word	0x00093a80
 80198d0:	2001eae0 	.word	0x2001eae0
 80198d4:	08045bb1 	.word	0x08045bb1

080198d8 <dns_init>:
}
 80198d8:	4770      	bx	lr
 80198da:	bf00      	nop

080198dc <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80198dc:	2801      	cmp	r0, #1
 80198de:	d900      	bls.n	80198e2 <dns_setserver+0x6>
}
 80198e0:	4770      	bx	lr
    if (dnsserver != NULL) {
 80198e2:	b121      	cbz	r1, 80198ee <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80198e4:	4b05      	ldr	r3, [pc, #20]	; (80198fc <dns_setserver+0x20>)
 80198e6:	680a      	ldr	r2, [r1, #0]
 80198e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80198ec:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80198ee:	4a04      	ldr	r2, [pc, #16]	; (8019900 <dns_setserver+0x24>)
 80198f0:	4b02      	ldr	r3, [pc, #8]	; (80198fc <dns_setserver+0x20>)
 80198f2:	6812      	ldr	r2, [r2, #0]
 80198f4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80198f8:	4770      	bx	lr
 80198fa:	bf00      	nop
 80198fc:	2001ead8 	.word	0x2001ead8
 8019900:	08045954 	.word	0x08045954

08019904 <dns_tmr>:
{
 8019904:	b508      	push	{r3, lr}
    dns_check_entry(i);
 8019906:	2000      	movs	r0, #0
 8019908:	f7ff fdc8 	bl	801949c <dns_check_entry>
 801990c:	2001      	movs	r0, #1
 801990e:	f7ff fdc5 	bl	801949c <dns_check_entry>
 8019912:	2002      	movs	r0, #2
 8019914:	f7ff fdc2 	bl	801949c <dns_check_entry>
 8019918:	2003      	movs	r0, #3
}
 801991a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 801991e:	f7ff bdbd 	b.w	801949c <dns_check_entry>
 8019922:	bf00      	nop

08019924 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 8019924:	2900      	cmp	r1, #0
 8019926:	f000 812e 	beq.w	8019b86 <dns_gethostbyname_addrtype+0x262>
{
 801992a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 801992e:	fab0 f780 	clz	r7, r0
{
 8019932:	b083      	sub	sp, #12
 8019934:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 8019936:	097f      	lsrs	r7, r7, #5
 8019938:	2800      	cmp	r0, #0
 801993a:	f000 8103 	beq.w	8019b44 <dns_gethostbyname_addrtype+0x220>
 801993e:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 8019940:	7803      	ldrb	r3, [r0, #0]
 8019942:	2b00      	cmp	r3, #0
 8019944:	f000 80fe 	beq.w	8019b44 <dns_gethostbyname_addrtype+0x220>
 8019948:	4615      	mov	r5, r2
 801994a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801994c:	f7e6 fc82 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019950:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8019952:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019954:	f200 80f6 	bhi.w	8019b44 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8019958:	4641      	mov	r1, r8
 801995a:	4630      	mov	r0, r6
 801995c:	f009 fa46 	bl	8022dec <ip4addr_aton>
 8019960:	b118      	cbz	r0, 801996a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8019962:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8019964:	b003      	add	sp, #12
 8019966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801996a:	4f88      	ldr	r7, [pc, #544]	; (8019b8c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801996c:	4604      	mov	r4, r0
 801996e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019970:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 8019974:	2b03      	cmp	r3, #3
 8019976:	d03a      	beq.n	80199ee <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019978:	3401      	adds	r4, #1
 801997a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801997e:	2c04      	cmp	r4, #4
 8019980:	d1f6      	bne.n	8019970 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8019982:	4b83      	ldr	r3, [pc, #524]	; (8019b90 <dns_gethostbyname_addrtype+0x26c>)
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	2b00      	cmp	r3, #0
 8019988:	f000 80f6 	beq.w	8019b78 <dns_gethostbyname_addrtype+0x254>
 801998c:	2400      	movs	r4, #0
 801998e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 8019b9c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019992:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 8019996:	fa5f f884 	uxtb.w	r8, r4
 801999a:	2b02      	cmp	r3, #2
 801999c:	d040      	beq.n	8019a20 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801999e:	3401      	adds	r4, #1
 80199a0:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80199a4:	2c04      	cmp	r4, #4
 80199a6:	d1f4      	bne.n	8019992 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80199a8:	4a7a      	ldr	r2, [pc, #488]	; (8019b94 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 80199aa:	4623      	mov	r3, r4
 80199ac:	4f7a      	ldr	r7, [pc, #488]	; (8019b98 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80199ae:	2400      	movs	r4, #0
 80199b0:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 80199b2:	46a4      	mov	ip, r4
 80199b4:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 80199b6:	7a90      	ldrb	r0, [r2, #10]
 80199b8:	fa5f f884 	uxtb.w	r8, r4
 80199bc:	2800      	cmp	r0, #0
 80199be:	d041      	beq.n	8019a44 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 80199c0:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80199c2:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 80199c6:	d023      	beq.n	8019a10 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80199c8:	2c04      	cmp	r4, #4
 80199ca:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80199ce:	d1f2      	bne.n	80199b6 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80199d0:	2b04      	cmp	r3, #4
 80199d2:	d007      	beq.n	80199e4 <dns_gethostbyname_addrtype+0xc0>
 80199d4:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80199d8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 80199dc:	7aa2      	ldrb	r2, [r4, #10]
 80199de:	2a03      	cmp	r2, #3
 80199e0:	f000 80ae 	beq.w	8019b40 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 80199e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80199e8:	b003      	add	sp, #12
 80199ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80199ee:	4651      	mov	r1, sl
 80199f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80199f4:	4630      	mov	r0, r6
 80199f6:	f7ff fc1f 	bl	8019238 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80199fa:	2800      	cmp	r0, #0
 80199fc:	d1bc      	bne.n	8019978 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80199fe:	4b66      	ldr	r3, [pc, #408]	; (8019b98 <dns_gethostbyname_addrtype+0x274>)
 8019a00:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019a04:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8019a08:	6863      	ldr	r3, [r4, #4]
 8019a0a:	f8c8 3000 	str.w	r3, [r8]
 8019a0e:	e7a9      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8019a10:	7b90      	ldrb	r0, [r2, #14]
 8019a12:	1a08      	subs	r0, r1, r0
 8019a14:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 8019a16:	4560      	cmp	r0, ip
 8019a18:	d9d6      	bls.n	80199c8 <dns_gethostbyname_addrtype+0xa4>
 8019a1a:	4643      	mov	r3, r8
 8019a1c:	4684      	mov	ip, r0
 8019a1e:	e7d3      	b.n	80199c8 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8019a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a24:	4639      	mov	r1, r7
 8019a26:	4630      	mov	r0, r6
 8019a28:	f7ff fc06 	bl	8019238 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019a2c:	2800      	cmp	r0, #0
 8019a2e:	d1b6      	bne.n	801999e <dns_gethostbyname_addrtype+0x7a>
 8019a30:	4b5a      	ldr	r3, [pc, #360]	; (8019b9c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8019a32:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a34:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 8019a36:	2a00      	cmp	r2, #0
 8019a38:	f000 8091 	beq.w	8019b5e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a3c:	3001      	adds	r0, #1
 8019a3e:	2804      	cmp	r0, #4
 8019a40:	d1f7      	bne.n	8019a32 <dns_gethostbyname_addrtype+0x10e>
 8019a42:	e7ac      	b.n	801999e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 8019a44:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019a48:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a4c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8019b9c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8019a50:	2700      	movs	r7, #0
 8019a52:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8019a54:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a56:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 8019a58:	b12b      	cbz	r3, 8019a66 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019a5a:	3701      	adds	r7, #1
 8019a5c:	2f04      	cmp	r7, #4
 8019a5e:	d1f9      	bne.n	8019a54 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8019a60:	f04f 30ff 	mov.w	r0, #4294967295
 8019a64:	e7c0      	b.n	80199e8 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 8019a66:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 8019a6a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 8019a6c:	f104 0010 	add.w	r0, r4, #16
 8019a70:	4631      	mov	r1, r6
  req->found = found;
 8019a72:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 8019a76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 8019a7a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 8019a7c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 8019a80:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 8019a84:	2201      	movs	r2, #1
 8019a86:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 8019a88:	464a      	mov	r2, r9
 8019a8a:	f00a fcbd 	bl	8024408 <memcpy>
  entry->name[namelen] = 0;
 8019a8e:	44a1      	add	r9, r4
 8019a90:	9b01      	ldr	r3, [sp, #4]
 8019a92:	461d      	mov	r5, r3
 8019a94:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8019a98:	007b      	lsls	r3, r7, #1
 8019a9a:	9301      	str	r3, [sp, #4]
 8019a9c:	4b40      	ldr	r3, [pc, #256]	; (8019ba0 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8019a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019aa2:	b2ee      	uxtb	r6, r5
 8019aa4:	b30a      	cbz	r2, 8019aea <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8019aa6:	3501      	adds	r5, #1
 8019aa8:	2d04      	cmp	r5, #4
 8019aaa:	d1f8      	bne.n	8019a9e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019aac:	483d      	ldr	r0, [pc, #244]	; (8019ba4 <dns_gethostbyname_addrtype+0x280>)
 8019aae:	2304      	movs	r3, #4
 8019ab0:	7806      	ldrb	r6, [r0, #0]
 8019ab2:	3601      	adds	r6, #1
 8019ab4:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019ab6:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8019ab8:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019aba:	d901      	bls.n	8019ac0 <dns_gethostbyname_addrtype+0x19c>
 8019abc:	2600      	movs	r6, #0
      idx = 0;
 8019abe:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8019ac0:	4d37      	ldr	r5, [pc, #220]	; (8019ba0 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019ac2:	1c71      	adds	r1, r6, #1
 8019ac4:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8019ac6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8019aca:	2a00      	cmp	r2, #0
 8019acc:	d13d      	bne.n	8019b4a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019ace:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019ad2:	b2ce      	uxtb	r6, r1
 8019ad4:	d1ef      	bne.n	8019ab6 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 8019ad6:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8019ad8:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8019adc:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8019ade:	443a      	add	r2, r7
 8019ae0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8019ae4:	2304      	movs	r3, #4
 8019ae6:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 8019ae8:	e73c      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8019aea:	202e      	movs	r0, #46	; 0x2e
 8019aec:	f006 fc9c 	bl	8020428 <udp_new_ip_type>
  if (pcb == NULL) {
 8019af0:	4681      	mov	r9, r0
 8019af2:	2800      	cmp	r0, #0
 8019af4:	d043      	beq.n	8019b7e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019af6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8019bac <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8019afa:	f00b fcef 	bl	80254dc <rand>
 8019afe:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8019b00:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8019b04:	d3f9      	bcc.n	8019afa <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8019b06:	4659      	mov	r1, fp
 8019b08:	4648      	mov	r0, r9
 8019b0a:	f006 fa29 	bl	801ff60 <udp_bind>
  } while (err == ERR_USE);
 8019b0e:	f110 0f08 	cmn.w	r0, #8
 8019b12:	d0f2      	beq.n	8019afa <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 8019b14:	b9d8      	cbnz	r0, 8019b4e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 8019b16:	4602      	mov	r2, r0
 8019b18:	4923      	ldr	r1, [pc, #140]	; (8019ba8 <dns_gethostbyname_addrtype+0x284>)
 8019b1a:	4648      	mov	r0, r9
 8019b1c:	f006 fc34 	bl	8020388 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b20:	4b1f      	ldr	r3, [pc, #124]	; (8019ba0 <dns_gethostbyname_addrtype+0x27c>)
 8019b22:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 8019b26:	4b1f      	ldr	r3, [pc, #124]	; (8019ba4 <dns_gethostbyname_addrtype+0x280>)
 8019b28:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 8019b2a:	4a1a      	ldr	r2, [pc, #104]	; (8019b94 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 8019b2c:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 8019b2e:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 8019b30:	7813      	ldrb	r3, [r2, #0]
 8019b32:	3301      	adds	r3, #1
 8019b34:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8019b36:	f7ff fcb1 	bl	801949c <dns_check_entry>
  return ERR_INPROGRESS;
 8019b3a:	f06f 0004 	mvn.w	r0, #4
 8019b3e:	e711      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8019b40:	4698      	mov	r8, r3
 8019b42:	e783      	b.n	8019a4c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8019b44:	f06f 000f 	mvn.w	r0, #15
 8019b48:	e70c      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 8019b4a:	7006      	strb	r6, [r0, #0]
      return idx;
 8019b4c:	e7ed      	b.n	8019b2a <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 8019b4e:	4648      	mov	r0, r9
 8019b50:	f006 fc2c 	bl	80203ac <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b54:	2300      	movs	r3, #0
 8019b56:	4a12      	ldr	r2, [pc, #72]	; (8019ba0 <dns_gethostbyname_addrtype+0x27c>)
 8019b58:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019b5c:	e7a6      	b.n	8019aac <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 8019b5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019b62:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 8019b66:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 8019b6a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 8019b6e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8019b72:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8019b76:	e6f5      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8019b78:	f06f 0005 	mvn.w	r0, #5
 8019b7c:	e6f2      	b.n	8019964 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 8019b7e:	4b08      	ldr	r3, [pc, #32]	; (8019ba0 <dns_gethostbyname_addrtype+0x27c>)
 8019b80:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019b84:	e792      	b.n	8019aac <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8019b86:	f06f 000f 	mvn.w	r0, #15
}
 8019b8a:	4770      	bx	lr
 8019b8c:	2001eaf0 	.word	0x2001eaf0
 8019b90:	2001ead8 	.word	0x2001ead8
 8019b94:	2001ead4 	.word	0x2001ead4
 8019b98:	2001eae0 	.word	0x2001eae0
 8019b9c:	2001eaa4 	.word	0x2001eaa4
 8019ba0:	2001ea94 	.word	0x2001ea94
 8019ba4:	2001ea90 	.word	0x2001ea90
 8019ba8:	080195ad 	.word	0x080195ad
 8019bac:	08045954 	.word	0x08045954

08019bb0 <dns_gethostbyname>:
{
 8019bb0:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019bb2:	2400      	movs	r4, #0
{
 8019bb4:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019bb6:	9400      	str	r4, [sp, #0]
 8019bb8:	f7ff feb4 	bl	8019924 <dns_gethostbyname_addrtype>
}
 8019bbc:	b002      	add	sp, #8
 8019bbe:	bd10      	pop	{r4, pc}

08019bc0 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8019bc0:	2300      	movs	r3, #0
{
 8019bc2:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8019bc4:	4299      	cmp	r1, r3
{
 8019bc6:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8019bc8:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 8019bcc:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8019bd0:	dd05      	ble.n	8019bde <lwip_standard_chksum+0x1e>
 8019bd2:	b124      	cbz	r4, 8019bde <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8019bd4:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8019bd8:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8019bda:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8019bde:	2901      	cmp	r1, #1
 8019be0:	dd28      	ble.n	8019c34 <lwip_standard_chksum+0x74>
 8019be2:	3902      	subs	r1, #2
  u32_t sum = 0;
 8019be4:	2300      	movs	r3, #0
 8019be6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 8019bea:	f10e 0c01 	add.w	ip, lr, #1
 8019bee:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 8019bf2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8019bf6:	4584      	cmp	ip, r0
    sum += *ps++;
 8019bf8:	4413      	add	r3, r2
  while (len > 1) {
 8019bfa:	d1fa      	bne.n	8019bf2 <lwip_standard_chksum+0x32>
    len -= 2;
 8019bfc:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 8019c00:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8019c04:	2901      	cmp	r1, #1
 8019c06:	d103      	bne.n	8019c10 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8019c08:	f89c 2000 	ldrb.w	r2, [ip]
 8019c0c:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8019c10:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8019c14:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8019c16:	b298      	uxth	r0, r3
 8019c18:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8019c1c:	b298      	uxth	r0, r3
 8019c1e:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8019c22:	b124      	cbz	r4, 8019c2e <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 8019c24:	0203      	lsls	r3, r0, #8
 8019c26:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8019c2e:	b280      	uxth	r0, r0
 8019c30:	b002      	add	sp, #8
 8019c32:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 8019c34:	4684      	mov	ip, r0
  u32_t sum = 0;
 8019c36:	2300      	movs	r3, #0
 8019c38:	e7e4      	b.n	8019c04 <lwip_standard_chksum+0x44>
 8019c3a:	bf00      	nop

08019c3c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8019c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c40:	4688      	mov	r8, r1
 8019c42:	4617      	mov	r7, r2
 8019c44:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8019c46:	b1f8      	cbz	r0, 8019c88 <inet_cksum_pseudo_base+0x4c>
 8019c48:	4605      	mov	r5, r0
  int swapped = 0;
 8019c4a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8019c4c:	8969      	ldrh	r1, [r5, #10]
 8019c4e:	6868      	ldr	r0, [r5, #4]
 8019c50:	f7ff ffb6 	bl	8019bc0 <lwip_standard_chksum>
 8019c54:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019c56:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8019c58:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 8019c5a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 8019c5e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019c62:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019c66:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8019c6a:	d004      	beq.n	8019c76 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	f086 0601 	eor.w	r6, r6, #1
 8019c72:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019c76:	682d      	ldr	r5, [r5, #0]
 8019c78:	2d00      	cmp	r5, #0
 8019c7a:	d1e7      	bne.n	8019c4c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8019c7c:	b126      	cbz	r6, 8019c88 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8019c7e:	0222      	lsls	r2, r4, #8
 8019c80:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019c84:	b292      	uxth	r2, r2
 8019c86:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8019c88:	4640      	mov	r0, r8
 8019c8a:	f7ff fa7d 	bl	8019188 <lwip_htons>
 8019c8e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8019c90:	4638      	mov	r0, r7
 8019c92:	f7ff fa79 	bl	8019188 <lwip_htons>
 8019c96:	4428      	add	r0, r5
 8019c98:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8019c9a:	b2a0      	uxth	r0, r4
 8019c9c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8019ca0:	b2a0      	uxth	r0, r4
 8019ca2:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8019ca6:	43c0      	mvns	r0, r0
}
 8019ca8:	b280      	uxth	r0, r0
 8019caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019cae:	bf00      	nop

08019cb0 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8019cb0:	b430      	push	{r4, r5}
 8019cb2:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8019cb4:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8019cb6:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8019cb8:	0c23      	lsrs	r3, r4, #16
 8019cba:	fa13 f384 	uxtah	r3, r3, r4
 8019cbe:	fa13 f385 	uxtah	r3, r3, r5
 8019cc2:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8019cc6:	b29c      	uxth	r4, r3
 8019cc8:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 8019ccc:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019cce:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 8019cd2:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8019cd4:	f7ff bfb2 	b.w	8019c3c <inet_cksum_pseudo_base>

08019cd8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8019cd8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8019cda:	f7ff ff71 	bl	8019bc0 <lwip_standard_chksum>
 8019cde:	43c0      	mvns	r0, r0
}
 8019ce0:	b280      	uxth	r0, r0
 8019ce2:	bd08      	pop	{r3, pc}

08019ce4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8019ce4:	b338      	cbz	r0, 8019d36 <inet_chksum_pbuf+0x52>
{
 8019ce6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8019ce8:	2600      	movs	r6, #0
 8019cea:	4605      	mov	r5, r0
  acc = 0;
 8019cec:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8019cee:	8969      	ldrh	r1, [r5, #10]
 8019cf0:	6868      	ldr	r0, [r5, #4]
 8019cf2:	f7ff ff65 	bl	8019bc0 <lwip_standard_chksum>
 8019cf6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019cf8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8019cfa:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 8019cfc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8019d00:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019d04:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019d08:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 8019d0c:	d004      	beq.n	8019d18 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 8019d0e:	b29b      	uxth	r3, r3
 8019d10:	f086 0601 	eor.w	r6, r6, #1
 8019d14:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019d18:	682d      	ldr	r5, [r5, #0]
 8019d1a:	2d00      	cmp	r5, #0
 8019d1c:	d1e7      	bne.n	8019cee <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8019d1e:	b13e      	cbz	r6, 8019d30 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 8019d20:	0220      	lsls	r0, r4, #8
 8019d22:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019d26:	b280      	uxth	r0, r0
 8019d28:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 8019d2a:	43c0      	mvns	r0, r0
 8019d2c:	b280      	uxth	r0, r0
}
 8019d2e:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8019d30:	43e0      	mvns	r0, r4
 8019d32:	b280      	uxth	r0, r0
}
 8019d34:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8019d36:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8019d3a:	4770      	bx	lr

08019d3c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8019d3c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8019d3e:	f009 fe37 	bl	80239b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019d42:	f000 f975 	bl	801a030 <mem_init>
  memp_init();
 8019d46:	f000 fcf9 	bl	801a73c <memp_init>
  pbuf_init();
  netif_init();
 8019d4a:	f000 fdbd 	bl	801a8c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8019d4e:	f005 fffd 	bl	801fd4c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019d52:	f001 fd89 	bl	801b868 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8019d56:	f7ff fdbf 	bl	80198d8 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8019d5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8019d5e:	f005 bf4d 	b.w	801fbfc <sys_timeouts_init>
 8019d62:	bf00      	nop

08019d64 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019d64:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8019d68:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 8019d6a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019d6e:	4299      	cmp	r1, r3
 8019d70:	d81b      	bhi.n	8019daa <mem_link_valid+0x46>
 8019d72:	459c      	cmp	ip, r3
 8019d74:	bf94      	ite	ls
 8019d76:	2200      	movls	r2, #0
 8019d78:	2201      	movhi	r2, #1
 8019d7a:	b9b2      	cbnz	r2, 8019daa <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 8019d7c:	4b0f      	ldr	r3, [pc, #60]	; (8019dbc <mem_link_valid+0x58>)
{
 8019d7e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8019d80:	681c      	ldr	r4, [r3, #0]
 8019d82:	1b03      	subs	r3, r0, r4
 8019d84:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019d86:	4299      	cmp	r1, r3
 8019d88:	d002      	beq.n	8019d90 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019d8a:	5a61      	ldrh	r1, [r4, r1]
 8019d8c:	4299      	cmp	r1, r3
 8019d8e:	d10e      	bne.n	8019dae <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019d90:	4a0b      	ldr	r2, [pc, #44]	; (8019dc0 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8019d92:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019d94:	6812      	ldr	r2, [r2, #0]
 8019d96:	42a2      	cmp	r2, r4
 8019d98:	d00d      	beq.n	8019db6 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019d9a:	8860      	ldrh	r0, [r4, #2]
 8019d9c:	1ac0      	subs	r0, r0, r3
 8019d9e:	fab0 f080 	clz	r0, r0
 8019da2:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8019da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019da8:	4770      	bx	lr
    return 0;
 8019daa:	2000      	movs	r0, #0
}
 8019dac:	4770      	bx	lr
    return 0;
 8019dae:	4610      	mov	r0, r2
}
 8019db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019db4:	4770      	bx	lr
  return 1;
 8019db6:	2001      	movs	r0, #1
 8019db8:	e7f4      	b.n	8019da4 <mem_link_valid+0x40>
 8019dba:	bf00      	nop
 8019dbc:	2001ef44 	.word	0x2001ef44
 8019dc0:	2001ef48 	.word	0x2001ef48

08019dc4 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8019dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8019dc8:	4f5f      	ldr	r7, [pc, #380]	; (8019f48 <mem_sanity+0x184>)
 8019dca:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8019dcc:	7935      	ldrb	r5, [r6, #4]
 8019dce:	2d01      	cmp	r5, #1
 8019dd0:	d907      	bls.n	8019de2 <mem_sanity+0x1e>
 8019dd2:	4b5e      	ldr	r3, [pc, #376]	; (8019f4c <mem_sanity+0x188>)
 8019dd4:	f240 223f 	movw	r2, #575	; 0x23f
 8019dd8:	495d      	ldr	r1, [pc, #372]	; (8019f50 <mem_sanity+0x18c>)
 8019dda:	485e      	ldr	r0, [pc, #376]	; (8019f54 <mem_sanity+0x190>)
 8019ddc:	f00b fada 	bl	8025394 <iprintf>
  last_used = mem->used;
 8019de0:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019de2:	8873      	ldrh	r3, [r6, #2]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	f040 80a7 	bne.w	8019f38 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019dea:	8834      	ldrh	r4, [r6, #0]
 8019dec:	f242 7310 	movw	r3, #10000	; 0x2710
 8019df0:	429c      	cmp	r4, r3
 8019df2:	f200 8098 	bhi.w	8019f26 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8019dfa:	429c      	cmp	r4, r3
 8019dfc:	d961      	bls.n	8019ec2 <mem_sanity+0xfe>
 8019dfe:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8019f70 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019e02:	f8df a148 	ldr.w	sl, [pc, #328]	; 8019f4c <mem_sanity+0x188>
 8019e06:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8019f74 <mem_sanity+0x1b0>
 8019e0a:	4e52      	ldr	r6, [pc, #328]	; (8019f54 <mem_sanity+0x190>)
 8019e0c:	e012      	b.n	8019e34 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019e0e:	2b01      	cmp	r3, #1
 8019e10:	d006      	beq.n	8019e20 <mem_sanity+0x5c>
 8019e12:	4653      	mov	r3, sl
 8019e14:	f240 2251 	movw	r2, #593	; 0x251
 8019e18:	494f      	ldr	r1, [pc, #316]	; (8019f58 <mem_sanity+0x194>)
 8019e1a:	4630      	mov	r0, r6
 8019e1c:	f00b faba 	bl	8025394 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019e20:	4620      	mov	r0, r4
 8019e22:	f7ff ff9f 	bl	8019d64 <mem_link_valid>
 8019e26:	b380      	cbz	r0, 8019e8a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8019e28:	683b      	ldr	r3, [r7, #0]
 8019e2a:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8019e2c:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8019e2e:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8019e30:	42a3      	cmp	r3, r4
 8019e32:	d246      	bcs.n	8019ec2 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8019e34:	f8d8 2000 	ldr.w	r2, [r8]
 8019e38:	42a2      	cmp	r2, r4
 8019e3a:	d942      	bls.n	8019ec2 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8019e3c:	1ce2      	adds	r2, r4, #3
 8019e3e:	f022 0203 	bic.w	r2, r2, #3
 8019e42:	4294      	cmp	r4, r2
 8019e44:	d006      	beq.n	8019e54 <mem_sanity+0x90>
 8019e46:	4653      	mov	r3, sl
 8019e48:	f240 2249 	movw	r2, #585	; 0x249
 8019e4c:	4649      	mov	r1, r9
 8019e4e:	4630      	mov	r0, r6
 8019e50:	f00b faa0 	bl	8025394 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019e54:	8862      	ldrh	r2, [r4, #2]
 8019e56:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e5a:	429a      	cmp	r2, r3
 8019e5c:	d81d      	bhi.n	8019e9a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019e5e:	8822      	ldrh	r2, [r4, #0]
 8019e60:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d824      	bhi.n	8019eb2 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019e68:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8019e6a:	2d00      	cmp	r5, #0
 8019e6c:	d0cf      	beq.n	8019e0e <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d9d6      	bls.n	8019e20 <mem_sanity+0x5c>
 8019e72:	4653      	mov	r3, sl
 8019e74:	f240 2253 	movw	r2, #595	; 0x253
 8019e78:	4938      	ldr	r1, [pc, #224]	; (8019f5c <mem_sanity+0x198>)
 8019e7a:	4630      	mov	r0, r6
 8019e7c:	f00b fa8a 	bl	8025394 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019e80:	4620      	mov	r0, r4
 8019e82:	f7ff ff6f 	bl	8019d64 <mem_link_valid>
 8019e86:	2800      	cmp	r0, #0
 8019e88:	d1ce      	bne.n	8019e28 <mem_sanity+0x64>
 8019e8a:	4653      	mov	r3, sl
 8019e8c:	f240 2256 	movw	r2, #598	; 0x256
 8019e90:	4933      	ldr	r1, [pc, #204]	; (8019f60 <mem_sanity+0x19c>)
 8019e92:	4630      	mov	r0, r6
 8019e94:	f00b fa7e 	bl	8025394 <iprintf>
 8019e98:	e7c6      	b.n	8019e28 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019e9a:	4653      	mov	r3, sl
 8019e9c:	f240 224a 	movw	r2, #586	; 0x24a
 8019ea0:	4930      	ldr	r1, [pc, #192]	; (8019f64 <mem_sanity+0x1a0>)
 8019ea2:	4630      	mov	r0, r6
 8019ea4:	f00b fa76 	bl	8025394 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019ea8:	8822      	ldrh	r2, [r4, #0]
 8019eaa:	f242 7310 	movw	r3, #10000	; 0x2710
 8019eae:	429a      	cmp	r2, r3
 8019eb0:	d9da      	bls.n	8019e68 <mem_sanity+0xa4>
 8019eb2:	4653      	mov	r3, sl
 8019eb4:	f240 224b 	movw	r2, #587	; 0x24b
 8019eb8:	492b      	ldr	r1, [pc, #172]	; (8019f68 <mem_sanity+0x1a4>)
 8019eba:	4630      	mov	r0, r6
 8019ebc:	f00b fa6a 	bl	8025394 <iprintf>
 8019ec0:	e7d2      	b.n	8019e68 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8019ec2:	f242 7210 	movw	r2, #10000	; 0x2710
 8019ec6:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8019ec8:	4294      	cmp	r4, r2
 8019eca:	d006      	beq.n	8019eda <mem_sanity+0x116>
 8019ecc:	4b1f      	ldr	r3, [pc, #124]	; (8019f4c <mem_sanity+0x188>)
 8019ece:	f240 225b 	movw	r2, #603	; 0x25b
 8019ed2:	4926      	ldr	r1, [pc, #152]	; (8019f6c <mem_sanity+0x1a8>)
 8019ed4:	481f      	ldr	r0, [pc, #124]	; (8019f54 <mem_sanity+0x190>)
 8019ed6:	f00b fa5d 	bl	8025394 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8019eda:	7923      	ldrb	r3, [r4, #4]
 8019edc:	2b01      	cmp	r3, #1
 8019ede:	d006      	beq.n	8019eee <mem_sanity+0x12a>
 8019ee0:	4b1a      	ldr	r3, [pc, #104]	; (8019f4c <mem_sanity+0x188>)
 8019ee2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8019ee6:	491a      	ldr	r1, [pc, #104]	; (8019f50 <mem_sanity+0x18c>)
 8019ee8:	481a      	ldr	r0, [pc, #104]	; (8019f54 <mem_sanity+0x190>)
 8019eea:	f00b fa53 	bl	8025394 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8019eee:	8862      	ldrh	r2, [r4, #2]
 8019ef0:	f242 7310 	movw	r3, #10000	; 0x2710
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d006      	beq.n	8019f06 <mem_sanity+0x142>
 8019ef8:	4b14      	ldr	r3, [pc, #80]	; (8019f4c <mem_sanity+0x188>)
 8019efa:	f240 225d 	movw	r2, #605	; 0x25d
 8019efe:	4919      	ldr	r1, [pc, #100]	; (8019f64 <mem_sanity+0x1a0>)
 8019f00:	4814      	ldr	r0, [pc, #80]	; (8019f54 <mem_sanity+0x190>)
 8019f02:	f00b fa47 	bl	8025394 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f06:	8822      	ldrh	r2, [r4, #0]
 8019f08:	f242 7310 	movw	r3, #10000	; 0x2710
 8019f0c:	429a      	cmp	r2, r3
 8019f0e:	d101      	bne.n	8019f14 <mem_sanity+0x150>
}
 8019f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f14:	4b0d      	ldr	r3, [pc, #52]	; (8019f4c <mem_sanity+0x188>)
 8019f16:	f240 225e 	movw	r2, #606	; 0x25e
 8019f1a:	4913      	ldr	r1, [pc, #76]	; (8019f68 <mem_sanity+0x1a4>)
 8019f1c:	480d      	ldr	r0, [pc, #52]	; (8019f54 <mem_sanity+0x190>)
}
 8019f1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8019f22:	f00b ba37 	b.w	8025394 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019f26:	4b09      	ldr	r3, [pc, #36]	; (8019f4c <mem_sanity+0x188>)
 8019f28:	f240 2242 	movw	r2, #578	; 0x242
 8019f2c:	490e      	ldr	r1, [pc, #56]	; (8019f68 <mem_sanity+0x1a4>)
 8019f2e:	4809      	ldr	r0, [pc, #36]	; (8019f54 <mem_sanity+0x190>)
 8019f30:	f00b fa30 	bl	8025394 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8019f34:	8834      	ldrh	r4, [r6, #0]
 8019f36:	e75e      	b.n	8019df6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019f38:	4b04      	ldr	r3, [pc, #16]	; (8019f4c <mem_sanity+0x188>)
 8019f3a:	f240 2241 	movw	r2, #577	; 0x241
 8019f3e:	4909      	ldr	r1, [pc, #36]	; (8019f64 <mem_sanity+0x1a0>)
 8019f40:	4804      	ldr	r0, [pc, #16]	; (8019f54 <mem_sanity+0x190>)
 8019f42:	f00b fa27 	bl	8025394 <iprintf>
 8019f46:	e750      	b.n	8019dea <mem_sanity+0x26>
 8019f48:	2001ef44 	.word	0x2001ef44
 8019f4c:	08043200 	.word	0x08043200
 8019f50:	08043230 	.word	0x08043230
 8019f54:	08029fe8 	.word	0x08029fe8
 8019f58:	08043298 	.word	0x08043298
 8019f5c:	080432b0 	.word	0x080432b0
 8019f60:	080432cc 	.word	0x080432cc
 8019f64:	08043248 	.word	0x08043248
 8019f68:	08043264 	.word	0x08043264
 8019f6c:	080432e4 	.word	0x080432e4
 8019f70:	2001ef48 	.word	0x2001ef48
 8019f74:	08043280 	.word	0x08043280

08019f78 <mem_overflow_check_raw>:
{
 8019f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f7c:	1e4c      	subs	r4, r1, #1
 8019f7e:	310f      	adds	r1, #15
 8019f80:	b0a3      	sub	sp, #140	; 0x8c
 8019f82:	4606      	mov	r6, r0
 8019f84:	4615      	mov	r5, r2
 8019f86:	4698      	mov	r8, r3
 8019f88:	4404      	add	r4, r0
 8019f8a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019f8c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 801a004 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8019f90:	f8df b074 	ldr.w	fp, [pc, #116]	; 801a008 <mem_overflow_check_raw+0x90>
 8019f94:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a00c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019f98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019f9c:	464a      	mov	r2, r9
 8019f9e:	2180      	movs	r1, #128	; 0x80
 8019fa0:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019fa2:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fa4:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019fa6:	d009      	beq.n	8019fbc <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019fa8:	f8cd 8000 	str.w	r8, [sp]
 8019fac:	f00b fba8 	bl	8025700 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019fb0:	465b      	mov	r3, fp
 8019fb2:	226d      	movs	r2, #109	; 0x6d
 8019fb4:	a902      	add	r1, sp, #8
 8019fb6:	4650      	mov	r0, sl
 8019fb8:	f00b f9ec 	bl	8025394 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8019fbc:	42bc      	cmp	r4, r7
 8019fbe:	d1eb      	bne.n	8019f98 <mem_overflow_check_raw+0x20>
 8019fc0:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019fc4:	4f0e      	ldr	r7, [pc, #56]	; (801a000 <mem_overflow_check_raw+0x88>)
 8019fc6:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8019fc8:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801a008 <mem_overflow_check_raw+0x90>
 8019fcc:	f8df 903c 	ldr.w	r9, [pc, #60]	; 801a00c <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019fd0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019fd4:	463a      	mov	r2, r7
 8019fd6:	2180      	movs	r1, #128	; 0x80
 8019fd8:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019fda:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019fdc:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019fde:	d009      	beq.n	8019ff4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019fe0:	f8cd 8000 	str.w	r8, [sp]
 8019fe4:	f00b fb8c 	bl	8025700 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019fe8:	4653      	mov	r3, sl
 8019fea:	2278      	movs	r2, #120	; 0x78
 8019fec:	a902      	add	r1, sp, #8
 8019fee:	4648      	mov	r0, r9
 8019ff0:	f00b f9d0 	bl	8025394 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8019ff4:	42b4      	cmp	r4, r6
 8019ff6:	d1eb      	bne.n	8019fd0 <mem_overflow_check_raw+0x58>
}
 8019ff8:	b023      	add	sp, #140	; 0x8c
 8019ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ffe:	bf00      	nop
 801a000:	08043318 	.word	0x08043318
 801a004:	080432f8 	.word	0x080432f8
 801a008:	08043200 	.word	0x08043200
 801a00c:	08029fe8 	.word	0x08029fe8

0801a010 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a010:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801a014:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a016:	f840 3c10 	str.w	r3, [r0, #-16]
 801a01a:	f840 3c0c 	str.w	r3, [r0, #-12]
 801a01e:	f840 3c08 	str.w	r3, [r0, #-8]
 801a022:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a026:	5043      	str	r3, [r0, r1]
 801a028:	6053      	str	r3, [r2, #4]
 801a02a:	6093      	str	r3, [r2, #8]
 801a02c:	60d3      	str	r3, [r2, #12]
}
 801a02e:	4770      	bx	lr

0801a030 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a030:	4b14      	ldr	r3, [pc, #80]	; (801a084 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 801a032:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 801a036:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a038:	4913      	ldr	r1, [pc, #76]	; (801a088 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a03a:	f023 0303 	bic.w	r3, r3, #3
{
 801a03e:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 801a040:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a042:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a044:	4c11      	ldr	r4, [pc, #68]	; (801a08c <mem_init+0x5c>)
  mem->used = 0;
 801a046:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801a048:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 801a04a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 801a04e:	4910      	ldr	r1, [pc, #64]	; (801a090 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801a050:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 801a052:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 801a054:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 801a058:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 801a05c:	f7ff feb2 	bl	8019dc4 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 801a060:	6822      	ldr	r2, [r4, #0]
 801a062:	4b0c      	ldr	r3, [pc, #48]	; (801a094 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a064:	480c      	ldr	r0, [pc, #48]	; (801a098 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 801a066:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801a068:	f009 fcae 	bl	80239c8 <sys_mutex_new>
 801a06c:	b900      	cbnz	r0, 801a070 <mem_init+0x40>
}
 801a06e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a070:	4b0a      	ldr	r3, [pc, #40]	; (801a09c <mem_init+0x6c>)
 801a072:	f240 221f 	movw	r2, #543	; 0x21f
 801a076:	490a      	ldr	r1, [pc, #40]	; (801a0a0 <mem_init+0x70>)
 801a078:	480a      	ldr	r0, [pc, #40]	; (801a0a4 <mem_init+0x74>)
}
 801a07a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801a07e:	f00b b989 	b.w	8025394 <iprintf>
 801a082:	bf00      	nop
 801a084:	2001ef4f 	.word	0x2001ef4f
 801a088:	2001ef48 	.word	0x2001ef48
 801a08c:	2001ef44 	.word	0x2001ef44
 801a090:	27102710 	.word	0x27102710
 801a094:	2001ef38 	.word	0x2001ef38
 801a098:	2001ef40 	.word	0x2001ef40
 801a09c:	08043200 	.word	0x08043200
 801a0a0:	08043338 	.word	0x08043338
 801a0a4:	08029fe8 	.word	0x08029fe8

0801a0a8 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801a0a8:	2800      	cmp	r0, #0
 801a0aa:	d07f      	beq.n	801a1ac <mem_free+0x104>
{
 801a0ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801a0b0:	f010 0803 	ands.w	r8, r0, #3
 801a0b4:	4604      	mov	r4, r0
 801a0b6:	d170      	bne.n	801a19a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a0b8:	4e5c      	ldr	r6, [pc, #368]	; (801a22c <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a0ba:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801a0be:	6833      	ldr	r3, [r6, #0]
 801a0c0:	42ab      	cmp	r3, r5
 801a0c2:	d805      	bhi.n	801a0d0 <mem_free+0x28>
 801a0c4:	4f5a      	ldr	r7, [pc, #360]	; (801a230 <mem_free+0x188>)
 801a0c6:	f100 030c 	add.w	r3, r0, #12
 801a0ca:	683a      	ldr	r2, [r7, #0]
 801a0cc:	429a      	cmp	r2, r3
 801a0ce:	d208      	bcs.n	801a0e2 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a0d0:	4b58      	ldr	r3, [pc, #352]	; (801a234 <mem_free+0x18c>)
 801a0d2:	f240 227f 	movw	r2, #639	; 0x27f
 801a0d6:	4958      	ldr	r1, [pc, #352]	; (801a238 <mem_free+0x190>)
 801a0d8:	4858      	ldr	r0, [pc, #352]	; (801a23c <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801a0da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801a0de:	f00b b959 	b.w	8025394 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a0e2:	4b57      	ldr	r3, [pc, #348]	; (801a240 <mem_free+0x198>)
 801a0e4:	4a57      	ldr	r2, [pc, #348]	; (801a244 <mem_free+0x19c>)
 801a0e6:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801a0ea:	f7ff ff45 	bl	8019f78 <mem_overflow_check_raw>
  if (!mem->used) {
 801a0ee:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	f000 8082 	beq.w	801a1fc <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 801a0f8:	4628      	mov	r0, r5
 801a0fa:	f7ff fe33 	bl	8019d64 <mem_link_valid>
 801a0fe:	2800      	cmp	r0, #0
 801a100:	f000 8085 	beq.w	801a20e <mem_free+0x166>
  mem->used = 0;
 801a104:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 801a108:	f8df 815c 	ldr.w	r8, [pc, #348]	; 801a268 <mem_free+0x1c0>
 801a10c:	f8d8 3000 	ldr.w	r3, [r8]
 801a110:	42ab      	cmp	r3, r5
 801a112:	d901      	bls.n	801a118 <mem_free+0x70>
    lfree = mem;
 801a114:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801a118:	6833      	ldr	r3, [r6, #0]
 801a11a:	429d      	cmp	r5, r3
 801a11c:	d351      	bcc.n	801a1c2 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	429d      	cmp	r5, r3
 801a122:	d258      	bcs.n	801a1d6 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a124:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a128:	f242 7210 	movw	r2, #10000	; 0x2710
 801a12c:	4293      	cmp	r3, r2
 801a12e:	d83e      	bhi.n	801a1ae <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 801a130:	6832      	ldr	r2, [r6, #0]
 801a132:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801a134:	429d      	cmp	r5, r3
 801a136:	d013      	beq.n	801a160 <mem_free+0xb8>
 801a138:	7919      	ldrb	r1, [r3, #4]
 801a13a:	b989      	cbnz	r1, 801a160 <mem_free+0xb8>
 801a13c:	6839      	ldr	r1, [r7, #0]
 801a13e:	428b      	cmp	r3, r1
 801a140:	d00e      	beq.n	801a160 <mem_free+0xb8>
    if (lfree == nmem) {
 801a142:	f8d8 1000 	ldr.w	r1, [r8]
 801a146:	428b      	cmp	r3, r1
 801a148:	d06d      	beq.n	801a226 <mem_free+0x17e>
    mem->next = nmem->next;
 801a14a:	8819      	ldrh	r1, [r3, #0]
 801a14c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801a150:	f242 7110 	movw	r1, #10000	; 0x2710
 801a154:	881b      	ldrh	r3, [r3, #0]
 801a156:	428b      	cmp	r3, r1
 801a158:	d002      	beq.n	801a160 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801a15a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 801a15c:	1aa9      	subs	r1, r5, r2
 801a15e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 801a160:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801a164:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801a166:	429d      	cmp	r5, r3
 801a168:	d010      	beq.n	801a18c <mem_free+0xe4>
 801a16a:	7918      	ldrb	r0, [r3, #4]
 801a16c:	b970      	cbnz	r0, 801a18c <mem_free+0xe4>
    if (lfree == mem) {
 801a16e:	f8d8 0000 	ldr.w	r0, [r8]
 801a172:	4285      	cmp	r5, r0
 801a174:	d054      	beq.n	801a220 <mem_free+0x178>
    pmem->next = mem->next;
 801a176:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a17a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 801a17e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801a180:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a184:	4283      	cmp	r3, r0
 801a186:	d001      	beq.n	801a18c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801a188:	441a      	add	r2, r3
 801a18a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 801a18c:	f7ff fe1a 	bl	8019dc4 <mem_sanity>
  mem_free_count = 1;
 801a190:	4b2d      	ldr	r3, [pc, #180]	; (801a248 <mem_free+0x1a0>)
 801a192:	2201      	movs	r2, #1
 801a194:	701a      	strb	r2, [r3, #0]
}
 801a196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a19a:	4b26      	ldr	r3, [pc, #152]	; (801a234 <mem_free+0x18c>)
 801a19c:	f240 2273 	movw	r2, #627	; 0x273
 801a1a0:	492a      	ldr	r1, [pc, #168]	; (801a24c <mem_free+0x1a4>)
 801a1a2:	4826      	ldr	r0, [pc, #152]	; (801a23c <mem_free+0x194>)
}
 801a1a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801a1a8:	f00b b8f4 	b.w	8025394 <iprintf>
 801a1ac:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801a1ae:	4b21      	ldr	r3, [pc, #132]	; (801a234 <mem_free+0x18c>)
 801a1b0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801a1b4:	4926      	ldr	r1, [pc, #152]	; (801a250 <mem_free+0x1a8>)
 801a1b6:	4821      	ldr	r0, [pc, #132]	; (801a23c <mem_free+0x194>)
 801a1b8:	f00b f8ec 	bl	8025394 <iprintf>
  nmem = ptr_to_mem(mem->next);
 801a1bc:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801a1c0:	e7b6      	b.n	801a130 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801a1c2:	4b1c      	ldr	r3, [pc, #112]	; (801a234 <mem_free+0x18c>)
 801a1c4:	f240 12df 	movw	r2, #479	; 0x1df
 801a1c8:	4922      	ldr	r1, [pc, #136]	; (801a254 <mem_free+0x1ac>)
 801a1ca:	481c      	ldr	r0, [pc, #112]	; (801a23c <mem_free+0x194>)
 801a1cc:	f00b f8e2 	bl	8025394 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801a1d0:	683b      	ldr	r3, [r7, #0]
 801a1d2:	429d      	cmp	r5, r3
 801a1d4:	d306      	bcc.n	801a1e4 <mem_free+0x13c>
 801a1d6:	4b17      	ldr	r3, [pc, #92]	; (801a234 <mem_free+0x18c>)
 801a1d8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a1dc:	491e      	ldr	r1, [pc, #120]	; (801a258 <mem_free+0x1b0>)
 801a1de:	4817      	ldr	r0, [pc, #92]	; (801a23c <mem_free+0x194>)
 801a1e0:	f00b f8d8 	bl	8025394 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801a1e4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 801a1e8:	2b00      	cmp	r3, #0
 801a1ea:	d09b      	beq.n	801a124 <mem_free+0x7c>
 801a1ec:	4b11      	ldr	r3, [pc, #68]	; (801a234 <mem_free+0x18c>)
 801a1ee:	f240 12e1 	movw	r2, #481	; 0x1e1
 801a1f2:	491a      	ldr	r1, [pc, #104]	; (801a25c <mem_free+0x1b4>)
 801a1f4:	4811      	ldr	r0, [pc, #68]	; (801a23c <mem_free+0x194>)
 801a1f6:	f00b f8cd 	bl	8025394 <iprintf>
 801a1fa:	e793      	b.n	801a124 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a1fc:	4b0d      	ldr	r3, [pc, #52]	; (801a234 <mem_free+0x18c>)
 801a1fe:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801a202:	4917      	ldr	r1, [pc, #92]	; (801a260 <mem_free+0x1b8>)
 801a204:	480d      	ldr	r0, [pc, #52]	; (801a23c <mem_free+0x194>)
}
 801a206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801a20a:	f00b b8c3 	b.w	8025394 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a20e:	4b09      	ldr	r3, [pc, #36]	; (801a234 <mem_free+0x18c>)
 801a210:	f240 2295 	movw	r2, #661	; 0x295
 801a214:	4913      	ldr	r1, [pc, #76]	; (801a264 <mem_free+0x1bc>)
 801a216:	4809      	ldr	r0, [pc, #36]	; (801a23c <mem_free+0x194>)
}
 801a218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801a21c:	f00b b8ba 	b.w	8025394 <iprintf>
      lfree = pmem;
 801a220:	f8c8 3000 	str.w	r3, [r8]
 801a224:	e7a7      	b.n	801a176 <mem_free+0xce>
      lfree = mem;
 801a226:	f8c8 5000 	str.w	r5, [r8]
 801a22a:	e78e      	b.n	801a14a <mem_free+0xa2>
 801a22c:	2001ef44 	.word	0x2001ef44
 801a230:	2001ef48 	.word	0x2001ef48
 801a234:	08043200 	.word	0x08043200
 801a238:	08043378 	.word	0x08043378
 801a23c:	08029fe8 	.word	0x08029fe8
 801a240:	0802a270 	.word	0x0802a270
 801a244:	08043394 	.word	0x08043394
 801a248:	2001ef3c 	.word	0x2001ef3c
 801a24c:	08043354 	.word	0x08043354
 801a250:	08043448 	.word	0x08043448
 801a254:	080433f8 	.word	0x080433f8
 801a258:	08043410 	.word	0x08043410
 801a25c:	0804342c 	.word	0x0804342c
 801a260:	0804339c 	.word	0x0804339c
 801a264:	080433c4 	.word	0x080433c4
 801a268:	2001ef38 	.word	0x2001ef38

0801a26c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801a26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a270:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a272:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801a276:	f024 0403 	bic.w	r4, r4, #3
 801a27a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 801a27c:	2c0c      	cmp	r4, #12
 801a27e:	bf38      	it	cc
 801a280:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801a282:	3420      	adds	r4, #32
 801a284:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801a286:	429c      	cmp	r4, r3
 801a288:	d87a      	bhi.n	801a380 <mem_trim+0x114>
 801a28a:	42a1      	cmp	r1, r4
 801a28c:	460e      	mov	r6, r1
 801a28e:	d877      	bhi.n	801a380 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801a290:	4f58      	ldr	r7, [pc, #352]	; (801a3f4 <mem_trim+0x188>)
 801a292:	4605      	mov	r5, r0
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	4283      	cmp	r3, r0
 801a298:	d803      	bhi.n	801a2a2 <mem_trim+0x36>
 801a29a:	4b57      	ldr	r3, [pc, #348]	; (801a3f8 <mem_trim+0x18c>)
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	4283      	cmp	r3, r0
 801a2a0:	d810      	bhi.n	801a2c4 <mem_trim+0x58>
 801a2a2:	4b56      	ldr	r3, [pc, #344]	; (801a3fc <mem_trim+0x190>)
 801a2a4:	f240 22d1 	movw	r2, #721	; 0x2d1
 801a2a8:	4955      	ldr	r1, [pc, #340]	; (801a400 <mem_trim+0x194>)
 801a2aa:	4856      	ldr	r0, [pc, #344]	; (801a404 <mem_trim+0x198>)
 801a2ac:	f00b f872 	bl	8025394 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	42ab      	cmp	r3, r5
 801a2b4:	d902      	bls.n	801a2bc <mem_trim+0x50>
{
 801a2b6:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 801a2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801a2bc:	4b4e      	ldr	r3, [pc, #312]	; (801a3f8 <mem_trim+0x18c>)
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	429d      	cmp	r5, r3
 801a2c2:	d2f8      	bcs.n	801a2b6 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a2c4:	4b50      	ldr	r3, [pc, #320]	; (801a408 <mem_trim+0x19c>)
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	4a50      	ldr	r2, [pc, #320]	; (801a40c <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801a2ca:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801a2ce:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801a2d2:	f7ff fe51 	bl	8019f78 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 801a2d6:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a2d8:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 801a2dc:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a2e0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 801a2e4:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801a2e8:	eba3 0308 	sub.w	r3, r3, r8
 801a2ec:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a2ee:	429c      	cmp	r4, r3
 801a2f0:	d83d      	bhi.n	801a36e <mem_trim+0x102>
  if (newsize == size) {
 801a2f2:	d0e0      	beq.n	801a2b6 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 801a2f4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 801a2f8:	f899 0004 	ldrb.w	r0, [r9, #4]
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	d142      	bne.n	801a386 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a300:	f242 7310 	movw	r3, #10000	; 0x2710
 801a304:	4299      	cmp	r1, r3
 801a306:	d061      	beq.n	801a3cc <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a308:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 801a30c:	4940      	ldr	r1, [pc, #256]	; (801a410 <mem_trim+0x1a4>)
    next = mem2->next;
 801a30e:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a312:	441c      	add	r4, r3
    if (lfree == mem2) {
 801a314:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a316:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 801a318:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 801a31a:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 801a31e:	d053      	beq.n	801a3c8 <mem_trim+0x15c>
    mem2->used = 0;
 801a320:	2100      	movs	r1, #0
    mem2->next = next;
 801a322:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 801a324:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801a328:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a32a:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801a32e:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a332:	881b      	ldrh	r3, [r3, #0]
 801a334:	428b      	cmp	r3, r1
 801a336:	d001      	beq.n	801a33c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a338:	4413      	add	r3, r2
 801a33a:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a33c:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 801a340:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 801a342:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a346:	f845 3c10 	str.w	r3, [r5, #-16]
 801a34a:	f845 3c0c 	str.w	r3, [r5, #-12]
 801a34e:	f845 3c08 	str.w	r3, [r5, #-8]
 801a352:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a356:	51ab      	str	r3, [r5, r6]
 801a358:	6053      	str	r3, [r2, #4]
 801a35a:	6093      	str	r3, [r2, #8]
 801a35c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 801a35e:	f7ff fd31 	bl	8019dc4 <mem_sanity>
  mem_free_count = 1;
 801a362:	4b2c      	ldr	r3, [pc, #176]	; (801a414 <mem_trim+0x1a8>)
 801a364:	2201      	movs	r2, #1
  return rmem;
 801a366:	4628      	mov	r0, r5
  mem_free_count = 1;
 801a368:	701a      	strb	r2, [r3, #0]
}
 801a36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801a36e:	4b23      	ldr	r3, [pc, #140]	; (801a3fc <mem_trim+0x190>)
 801a370:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801a374:	4928      	ldr	r1, [pc, #160]	; (801a418 <mem_trim+0x1ac>)
 801a376:	4823      	ldr	r0, [pc, #140]	; (801a404 <mem_trim+0x198>)
 801a378:	f00b f80c 	bl	8025394 <iprintf>
    return NULL;
 801a37c:	2000      	movs	r0, #0
 801a37e:	e79b      	b.n	801a2b8 <mem_trim+0x4c>
    return NULL;
 801a380:	2000      	movs	r0, #0
}
 801a382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801a386:	f104 0014 	add.w	r0, r4, #20
 801a38a:	4298      	cmp	r0, r3
 801a38c:	d8d6      	bhi.n	801a33c <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a38e:	f108 0308 	add.w	r3, r8, #8
 801a392:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a394:	f242 7310 	movw	r3, #10000	; 0x2710
 801a398:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801a39a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a39c:	d01f      	beq.n	801a3de <mem_trim+0x172>
    if (mem2 < lfree) {
 801a39e:	481c      	ldr	r0, [pc, #112]	; (801a410 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 801a3a0:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 801a3a2:	6807      	ldr	r7, [r0, #0]
 801a3a4:	429f      	cmp	r7, r3
 801a3a6:	d900      	bls.n	801a3aa <mem_trim+0x13e>
      lfree = mem2;
 801a3a8:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 801a3aa:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 801a3ac:	2100      	movs	r1, #0
    mem2->prev = ptr;
 801a3ae:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 801a3b2:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a3b4:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 801a3b8:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801a3bc:	881b      	ldrh	r3, [r3, #0]
 801a3be:	428b      	cmp	r3, r1
 801a3c0:	d0bc      	beq.n	801a33c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801a3c2:	441a      	add	r2, r3
 801a3c4:	8054      	strh	r4, [r2, #2]
 801a3c6:	e7b9      	b.n	801a33c <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 801a3c8:	600b      	str	r3, [r1, #0]
 801a3ca:	e7a9      	b.n	801a320 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3cc:	f240 22f5 	movw	r2, #757	; 0x2f5
 801a3d0:	4b0a      	ldr	r3, [pc, #40]	; (801a3fc <mem_trim+0x190>)
 801a3d2:	4912      	ldr	r1, [pc, #72]	; (801a41c <mem_trim+0x1b0>)
 801a3d4:	480b      	ldr	r0, [pc, #44]	; (801a404 <mem_trim+0x198>)
 801a3d6:	f00a ffdd 	bl	8025394 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a3da:	683a      	ldr	r2, [r7, #0]
 801a3dc:	e794      	b.n	801a308 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801a3de:	f240 3216 	movw	r2, #790	; 0x316
 801a3e2:	490e      	ldr	r1, [pc, #56]	; (801a41c <mem_trim+0x1b0>)
 801a3e4:	4b05      	ldr	r3, [pc, #20]	; (801a3fc <mem_trim+0x190>)
 801a3e6:	4807      	ldr	r0, [pc, #28]	; (801a404 <mem_trim+0x198>)
 801a3e8:	f00a ffd4 	bl	8025394 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a3ec:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 801a3ee:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 801a3f2:	e7d4      	b.n	801a39e <mem_trim+0x132>
 801a3f4:	2001ef44 	.word	0x2001ef44
 801a3f8:	2001ef48 	.word	0x2001ef48
 801a3fc:	08043200 	.word	0x08043200
 801a400:	08043474 	.word	0x08043474
 801a404:	08029fe8 	.word	0x08029fe8
 801a408:	0802a270 	.word	0x0802a270
 801a40c:	08043394 	.word	0x08043394
 801a410:	2001ef38 	.word	0x2001ef38
 801a414:	2001ef3c 	.word	0x2001ef3c
 801a418:	0804348c 	.word	0x0804348c
 801a41c:	080434ac 	.word	0x080434ac

0801a420 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801a420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801a424:	4680      	mov	r8, r0
 801a426:	2800      	cmp	r0, #0
 801a428:	f000 80b2 	beq.w	801a590 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a42c:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a430:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801a434:	f02b 0b03 	bic.w	fp, fp, #3
 801a438:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 801a43c:	f1bb 0f0c 	cmp.w	fp, #12
 801a440:	bf38      	it	cc
 801a442:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 801a446:	f10b 0720 	add.w	r7, fp, #32
 801a44a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801a44c:	42a7      	cmp	r7, r4
 801a44e:	f200 809f 	bhi.w	801a590 <mem_malloc+0x170>
 801a452:	42b8      	cmp	r0, r7
 801a454:	bf94      	ite	ls
 801a456:	f04f 0a00 	movls.w	sl, #0
 801a45a:	f04f 0a01 	movhi.w	sl, #1
 801a45e:	f1ba 0f00 	cmp.w	sl, #0
 801a462:	f040 8095 	bne.w	801a590 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801a466:	4866      	ldr	r0, [pc, #408]	; (801a600 <mem_malloc+0x1e0>)
 801a468:	f009 fabe 	bl	80239e8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801a46c:	4b65      	ldr	r3, [pc, #404]	; (801a604 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a46e:	eba4 0c07 	sub.w	ip, r4, r7
 801a472:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801a62c <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 801a476:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a478:	f06f 0e07 	mvn.w	lr, #7
 801a47c:	4d62      	ldr	r5, [pc, #392]	; (801a608 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a47e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801a482:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a484:	b2b3      	uxth	r3, r6
 801a486:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 801a488:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a48a:	d97a      	bls.n	801a582 <mem_malloc+0x162>
      mem_free_count = 0;
 801a48c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a490:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 801a494:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a496:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 801a498:	2900      	cmp	r1, #0
 801a49a:	d1f0      	bne.n	801a47e <mem_malloc+0x5e>
      if ((!mem->used) &&
 801a49c:	7923      	ldrb	r3, [r4, #4]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d16b      	bne.n	801a57a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a4a2:	8821      	ldrh	r1, [r4, #0]
 801a4a4:	440a      	add	r2, r1
 801a4a6:	460b      	mov	r3, r1
      if ((!mem->used) &&
 801a4a8:	42ba      	cmp	r2, r7
 801a4aa:	d3ec      	bcc.n	801a486 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801a4ac:	f107 0314 	add.w	r3, r7, #20
 801a4b0:	429a      	cmp	r2, r3
 801a4b2:	d371      	bcc.n	801a598 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a4b4:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a4b8:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801a4bc:	44b2      	add	sl, r6
 801a4be:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a4c2:	459a      	cmp	sl, r3
 801a4c4:	f000 808f 	beq.w	801a5e6 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 801a4c8:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a4d0:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 801a4d4:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 801a4d8:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 801a4da:	2301      	movs	r3, #1
          mem->next = ptr2;
 801a4dc:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 801a4e0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 801a4e2:	f830 300a 	ldrh.w	r3, [r0, sl]
 801a4e6:	4293      	cmp	r3, r2
 801a4e8:	d002      	beq.n	801a4f0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801a4ea:	4418      	add	r0, r3
 801a4ec:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801a4f0:	f8d9 3000 	ldr.w	r3, [r9]
 801a4f4:	42a3      	cmp	r3, r4
 801a4f6:	f040 8081 	bne.w	801a5fc <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 801a4fa:	4b42      	ldr	r3, [pc, #264]	; (801a604 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 801a4fc:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 801a4fe:	4e43      	ldr	r6, [pc, #268]	; (801a60c <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 801a500:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 801a504:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 801a506:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 801a50a:	791a      	ldrb	r2, [r3, #4]
 801a50c:	b942      	cbnz	r2, 801a520 <mem_malloc+0x100>
 801a50e:	e009      	b.n	801a524 <mem_malloc+0x104>
            mem_free_count = 0;
 801a510:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 801a512:	782a      	ldrb	r2, [r5, #0]
 801a514:	2a00      	cmp	r2, #0
 801a516:	d142      	bne.n	801a59e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 801a518:	881b      	ldrh	r3, [r3, #0]
 801a51a:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 801a51c:	791a      	ldrb	r2, [r3, #4]
 801a51e:	b10a      	cbz	r2, 801a524 <mem_malloc+0x104>
 801a520:	4299      	cmp	r1, r3
 801a522:	d1f5      	bne.n	801a510 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801a524:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a528:	f8d9 3000 	ldr.w	r3, [r9]
 801a52c:	4299      	cmp	r1, r3
 801a52e:	d004      	beq.n	801a53a <mem_malloc+0x11a>
 801a530:	f8d9 3000 	ldr.w	r3, [r9]
 801a534:	791b      	ldrb	r3, [r3, #4]
 801a536:	2b00      	cmp	r3, #0
 801a538:	d14d      	bne.n	801a5d6 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a53a:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801a53c:	4830      	ldr	r0, [pc, #192]	; (801a600 <mem_malloc+0x1e0>)
 801a53e:	f009 fa59 	bl	80239f4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a542:	6833      	ldr	r3, [r6, #0]
 801a544:	4427      	add	r7, r4
 801a546:	42bb      	cmp	r3, r7
 801a548:	d33d      	bcc.n	801a5c6 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a54a:	07a3      	lsls	r3, r4, #30
 801a54c:	d12c      	bne.n	801a5a8 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a54e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a552:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801a556:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801a55a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a55e:	60a3      	str	r3, [r4, #8]
 801a560:	60e3      	str	r3, [r4, #12]
 801a562:	6123      	str	r3, [r4, #16]
 801a564:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a566:	f845 3008 	str.w	r3, [r5, r8]
 801a56a:	6053      	str	r3, [r2, #4]
 801a56c:	6093      	str	r3, [r2, #8]
 801a56e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801a570:	f7ff fc28 	bl	8019dc4 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801a574:	4628      	mov	r0, r5
 801a576:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a57a:	8826      	ldrh	r6, [r4, #0]
 801a57c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a57e:	459c      	cmp	ip, r3
 801a580:	d884      	bhi.n	801a48c <mem_malloc+0x6c>
  return NULL;
 801a582:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801a584:	481e      	ldr	r0, [pc, #120]	; (801a600 <mem_malloc+0x1e0>)
 801a586:	f009 fa35 	bl	80239f4 <sys_mutex_unlock>
}
 801a58a:	4628      	mov	r0, r5
 801a58c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801a590:	2500      	movs	r5, #0
}
 801a592:	4628      	mov	r0, r5
 801a594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801a598:	2301      	movs	r3, #1
 801a59a:	7123      	strb	r3, [r4, #4]
 801a59c:	e7a8      	b.n	801a4f0 <mem_malloc+0xd0>
        if (mem == lfree) {
 801a59e:	f8d9 3000 	ldr.w	r3, [r9]
 801a5a2:	42a3      	cmp	r3, r4
 801a5a4:	d0af      	beq.n	801a506 <mem_malloc+0xe6>
 801a5a6:	e7c8      	b.n	801a53a <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a5a8:	4b19      	ldr	r3, [pc, #100]	; (801a610 <mem_malloc+0x1f0>)
 801a5aa:	f240 32bb 	movw	r2, #955	; 0x3bb
 801a5ae:	4919      	ldr	r1, [pc, #100]	; (801a614 <mem_malloc+0x1f4>)
 801a5b0:	4819      	ldr	r0, [pc, #100]	; (801a618 <mem_malloc+0x1f8>)
 801a5b2:	f00a feef 	bl	8025394 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a5b6:	4b16      	ldr	r3, [pc, #88]	; (801a610 <mem_malloc+0x1f0>)
 801a5b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 801a5bc:	4917      	ldr	r1, [pc, #92]	; (801a61c <mem_malloc+0x1fc>)
 801a5be:	4816      	ldr	r0, [pc, #88]	; (801a618 <mem_malloc+0x1f8>)
 801a5c0:	f00a fee8 	bl	8025394 <iprintf>
 801a5c4:	e7c3      	b.n	801a54e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a5c6:	4b12      	ldr	r3, [pc, #72]	; (801a610 <mem_malloc+0x1f0>)
 801a5c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 801a5cc:	4914      	ldr	r1, [pc, #80]	; (801a620 <mem_malloc+0x200>)
 801a5ce:	4812      	ldr	r0, [pc, #72]	; (801a618 <mem_malloc+0x1f8>)
 801a5d0:	f00a fee0 	bl	8025394 <iprintf>
 801a5d4:	e7b9      	b.n	801a54a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a5d6:	4b0e      	ldr	r3, [pc, #56]	; (801a610 <mem_malloc+0x1f0>)
 801a5d8:	f240 32b5 	movw	r2, #949	; 0x3b5
 801a5dc:	4911      	ldr	r1, [pc, #68]	; (801a624 <mem_malloc+0x204>)
 801a5de:	480e      	ldr	r0, [pc, #56]	; (801a618 <mem_malloc+0x1f8>)
 801a5e0:	f00a fed8 	bl	8025394 <iprintf>
 801a5e4:	e7a9      	b.n	801a53a <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a5e6:	4b0a      	ldr	r3, [pc, #40]	; (801a610 <mem_malloc+0x1f0>)
 801a5e8:	f240 3287 	movw	r2, #903	; 0x387
 801a5ec:	490e      	ldr	r1, [pc, #56]	; (801a628 <mem_malloc+0x208>)
 801a5ee:	480a      	ldr	r0, [pc, #40]	; (801a618 <mem_malloc+0x1f8>)
 801a5f0:	f00a fed0 	bl	8025394 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a5f4:	4b03      	ldr	r3, [pc, #12]	; (801a604 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801a5f6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a5f8:	6818      	ldr	r0, [r3, #0]
 801a5fa:	e765      	b.n	801a4c8 <mem_malloc+0xa8>
 801a5fc:	4e03      	ldr	r6, [pc, #12]	; (801a60c <mem_malloc+0x1ec>)
 801a5fe:	e79c      	b.n	801a53a <mem_malloc+0x11a>
 801a600:	2001ef40 	.word	0x2001ef40
 801a604:	2001ef44 	.word	0x2001ef44
 801a608:	2001ef3c 	.word	0x2001ef3c
 801a60c:	2001ef48 	.word	0x2001ef48
 801a610:	08043200 	.word	0x08043200
 801a614:	0804350c 	.word	0x0804350c
 801a618:	08029fe8 	.word	0x08029fe8
 801a61c:	0804353c 	.word	0x0804353c
 801a620:	080434dc 	.word	0x080434dc
 801a624:	080434c0 	.word	0x080434c0
 801a628:	080434ac 	.word	0x080434ac
 801a62c:	2001ef38 	.word	0x2001ef38

0801a630 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a634:	4f12      	ldr	r7, [pc, #72]	; (801a680 <memp_overflow_check_all+0x50>)
 801a636:	2308      	movs	r3, #8
 801a638:	4c12      	ldr	r4, [pc, #72]	; (801a684 <memp_overflow_check_all+0x54>)
 801a63a:	4d13      	ldr	r5, [pc, #76]	; (801a688 <memp_overflow_check_all+0x58>)
 801a63c:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a640:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801a68c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a644:	3403      	adds	r4, #3
 801a646:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a64a:	b183      	cbz	r3, 801a66e <memp_overflow_check_all+0x3e>
 801a64c:	88a9      	ldrh	r1, [r5, #4]
 801a64e:	2600      	movs	r6, #0
 801a650:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a652:	f104 001c 	add.w	r0, r4, #28
 801a656:	682b      	ldr	r3, [r5, #0]
 801a658:	464a      	mov	r2, r9
 801a65a:	f7ff fc8d 	bl	8019f78 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a65e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a660:	88e8      	ldrh	r0, [r5, #6]
 801a662:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a664:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a668:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a66a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a66c:	d8f0      	bhi.n	801a650 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801a66e:	45b8      	cmp	r8, r7
 801a670:	d004      	beq.n	801a67c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a672:	f857 5b04 	ldr.w	r5, [r7], #4
 801a676:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a678:	88eb      	ldrh	r3, [r5, #6]
 801a67a:	e7e3      	b.n	801a644 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801a67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a680:	080437f0 	.word	0x080437f0
 801a684:	200296c8 	.word	0x200296c8
 801a688:	0804375c 	.word	0x0804375c
 801a68c:	08043560 	.word	0x08043560

0801a690 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a690:	078b      	lsls	r3, r1, #30
{
 801a692:	b570      	push	{r4, r5, r6, lr}
 801a694:	460c      	mov	r4, r1
 801a696:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a698:	d11f      	bne.n	801a6da <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a69a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a69c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801a6a0:	6811      	ldr	r1, [r2, #0]
 801a6a2:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801a6a6:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6a8:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801a6ac:	b15a      	cbz	r2, 801a6c6 <do_memp_free_pool+0x36>
      if (t == h) {
 801a6ae:	429a      	cmp	r2, r3
 801a6b0:	d105      	bne.n	801a6be <do_memp_free_pool+0x2e>
 801a6b2:	e009      	b.n	801a6c8 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6b4:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6b6:	b133      	cbz	r3, 801a6c6 <do_memp_free_pool+0x36>
 801a6b8:	b12a      	cbz	r2, 801a6c6 <do_memp_free_pool+0x36>
      if (t == h) {
 801a6ba:	4293      	cmp	r3, r2
 801a6bc:	d004      	beq.n	801a6c8 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6be:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a6c0:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a6c2:	2a00      	cmp	r2, #0
 801a6c4:	d1f6      	bne.n	801a6b4 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801a6c6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a6c8:	4b08      	ldr	r3, [pc, #32]	; (801a6ec <do_memp_free_pool+0x5c>)
 801a6ca:	f240 1285 	movw	r2, #389	; 0x185
 801a6ce:	4908      	ldr	r1, [pc, #32]	; (801a6f0 <do_memp_free_pool+0x60>)
 801a6d0:	4808      	ldr	r0, [pc, #32]	; (801a6f4 <do_memp_free_pool+0x64>)
}
 801a6d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a6d6:	f00a be5d 	b.w	8025394 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a6da:	4b04      	ldr	r3, [pc, #16]	; (801a6ec <do_memp_free_pool+0x5c>)
 801a6dc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a6e0:	4905      	ldr	r1, [pc, #20]	; (801a6f8 <do_memp_free_pool+0x68>)
 801a6e2:	4804      	ldr	r0, [pc, #16]	; (801a6f4 <do_memp_free_pool+0x64>)
 801a6e4:	f00a fe56 	bl	8025394 <iprintf>
 801a6e8:	e7d7      	b.n	801a69a <do_memp_free_pool+0xa>
 801a6ea:	bf00      	nop
 801a6ec:	08043568 	.word	0x08043568
 801a6f0:	080435b8 	.word	0x080435b8
 801a6f4:	08029fe8 	.word	0x08029fe8
 801a6f8:	08043598 	.word	0x08043598

0801a6fc <memp_init_pool>:
{
 801a6fc:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801a6fe:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801a700:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801a702:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801a706:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a708:	b1b1      	cbz	r1, 801a738 <memp_init_pool+0x3c>
 801a70a:	3403      	adds	r4, #3
 801a70c:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a70e:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801a710:	4616      	mov	r6, r2
 801a712:	f024 0403 	bic.w	r4, r4, #3
 801a716:	e001      	b.n	801a71c <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801a718:	68eb      	ldr	r3, [r5, #12]
 801a71a:	681a      	ldr	r2, [r3, #0]
 801a71c:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a71e:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801a722:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a724:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a726:	f7ff fc73 	bl	801a010 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a72a:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801a72c:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801a72e:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801a732:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a734:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801a736:	dcef      	bgt.n	801a718 <memp_init_pool+0x1c>
}
 801a738:	bd70      	pop	{r4, r5, r6, pc}
 801a73a:	bf00      	nop

0801a73c <memp_init>:
{
 801a73c:	b538      	push	{r3, r4, r5, lr}
 801a73e:	4c07      	ldr	r4, [pc, #28]	; (801a75c <memp_init+0x20>)
 801a740:	4807      	ldr	r0, [pc, #28]	; (801a760 <memp_init+0x24>)
 801a742:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801a746:	e001      	b.n	801a74c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801a748:	f854 0b04 	ldr.w	r0, [r4], #4
 801a74c:	f7ff ffd6 	bl	801a6fc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a750:	42ac      	cmp	r4, r5
 801a752:	d1f9      	bne.n	801a748 <memp_init+0xc>
}
 801a754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801a758:	f7ff bf6a 	b.w	801a630 <memp_overflow_check_all>
 801a75c:	080437f0 	.word	0x080437f0
 801a760:	0804375c 	.word	0x0804375c

0801a764 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a764:	280f      	cmp	r0, #15
{
 801a766:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a768:	d81d      	bhi.n	801a7a6 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801a76a:	4604      	mov	r4, r0
 801a76c:	460e      	mov	r6, r1
 801a76e:	4615      	mov	r5, r2
 801a770:	f7ff ff5e 	bl	801a630 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801a774:	4b11      	ldr	r3, [pc, #68]	; (801a7bc <memp_malloc_fn+0x58>)
 801a776:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a77a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801a77c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801a77e:	b144      	cbz	r4, 801a792 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801a780:	6822      	ldr	r2, [r4, #0]
 801a782:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801a784:	2300      	movs	r3, #0
 801a786:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a788:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801a78a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a78e:	d102      	bne.n	801a796 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801a790:	341c      	adds	r4, #28
}
 801a792:	4620      	mov	r0, r4
 801a794:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a796:	4b0a      	ldr	r3, [pc, #40]	; (801a7c0 <memp_malloc_fn+0x5c>)
 801a798:	f44f 728c 	mov.w	r2, #280	; 0x118
 801a79c:	4909      	ldr	r1, [pc, #36]	; (801a7c4 <memp_malloc_fn+0x60>)
 801a79e:	480a      	ldr	r0, [pc, #40]	; (801a7c8 <memp_malloc_fn+0x64>)
 801a7a0:	f00a fdf8 	bl	8025394 <iprintf>
 801a7a4:	e7f4      	b.n	801a790 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a7a6:	2400      	movs	r4, #0
 801a7a8:	4b05      	ldr	r3, [pc, #20]	; (801a7c0 <memp_malloc_fn+0x5c>)
 801a7aa:	f240 1257 	movw	r2, #343	; 0x157
 801a7ae:	4907      	ldr	r1, [pc, #28]	; (801a7cc <memp_malloc_fn+0x68>)
 801a7b0:	4805      	ldr	r0, [pc, #20]	; (801a7c8 <memp_malloc_fn+0x64>)
 801a7b2:	f00a fdef 	bl	8025394 <iprintf>
}
 801a7b6:	4620      	mov	r0, r4
 801a7b8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ba:	bf00      	nop
 801a7bc:	080437ec 	.word	0x080437ec
 801a7c0:	08043568 	.word	0x08043568
 801a7c4:	080435d8 	.word	0x080435d8
 801a7c8:	08029fe8 	.word	0x08029fe8
 801a7cc:	080435fc 	.word	0x080435fc

0801a7d0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a7d0:	280f      	cmp	r0, #15
 801a7d2:	d80e      	bhi.n	801a7f2 <memp_free+0x22>
{
 801a7d4:	b570      	push	{r4, r5, r6, lr}
 801a7d6:	460d      	mov	r5, r1

  if (mem == NULL) {
 801a7d8:	b151      	cbz	r1, 801a7f0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801a7da:	4604      	mov	r4, r0
 801a7dc:	f7ff ff28 	bl	801a630 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a7e0:	4b07      	ldr	r3, [pc, #28]	; (801a800 <memp_free+0x30>)
 801a7e2:	4629      	mov	r1, r5
 801a7e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a7e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801a7ec:	f7ff bf50 	b.w	801a690 <do_memp_free_pool>
}
 801a7f0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a7f2:	4b04      	ldr	r3, [pc, #16]	; (801a804 <memp_free+0x34>)
 801a7f4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801a7f8:	4903      	ldr	r1, [pc, #12]	; (801a808 <memp_free+0x38>)
 801a7fa:	4804      	ldr	r0, [pc, #16]	; (801a80c <memp_free+0x3c>)
 801a7fc:	f00a bdca 	b.w	8025394 <iprintf>
 801a800:	080437ec 	.word	0x080437ec
 801a804:	08043568 	.word	0x08043568
 801a808:	0804361c 	.word	0x0804361c
 801a80c:	08029fe8 	.word	0x08029fe8

0801a810 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801a810:	f06f 000b 	mvn.w	r0, #11
 801a814:	4770      	bx	lr
 801a816:	bf00      	nop

0801a818 <netif_issue_reports>:
{
 801a818:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a81a:	4604      	mov	r4, r0
 801a81c:	b150      	cbz	r0, 801a834 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a81e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801a822:	f003 0205 	and.w	r2, r3, #5
 801a826:	2a05      	cmp	r2, #5
 801a828:	d103      	bne.n	801a832 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a82a:	6862      	ldr	r2, [r4, #4]
 801a82c:	b10a      	cbz	r2, 801a832 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a82e:	071b      	lsls	r3, r3, #28
 801a830:	d408      	bmi.n	801a844 <netif_issue_reports+0x2c>
}
 801a832:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a834:	4b06      	ldr	r3, [pc, #24]	; (801a850 <netif_issue_reports+0x38>)
 801a836:	f240 326d 	movw	r2, #877	; 0x36d
 801a83a:	4906      	ldr	r1, [pc, #24]	; (801a854 <netif_issue_reports+0x3c>)
 801a83c:	4806      	ldr	r0, [pc, #24]	; (801a858 <netif_issue_reports+0x40>)
 801a83e:	f00a fda9 	bl	8025394 <iprintf>
 801a842:	e7ec      	b.n	801a81e <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801a844:	1d21      	adds	r1, r4, #4
 801a846:	4620      	mov	r0, r4
}
 801a848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801a84c:	f007 bfac 	b.w	80227a8 <etharp_request>
 801a850:	0804382c 	.word	0x0804382c
 801a854:	08043860 	.word	0x08043860
 801a858:	08029fe8 	.word	0x08029fe8

0801a85c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a85c:	b570      	push	{r4, r5, r6, lr}
 801a85e:	4605      	mov	r5, r0
 801a860:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a862:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a864:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a866:	b301      	cbz	r1, 801a8aa <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a868:	686b      	ldr	r3, [r5, #4]
 801a86a:	6822      	ldr	r2, [r4, #0]
 801a86c:	429a      	cmp	r2, r3
 801a86e:	d101      	bne.n	801a874 <netif_do_set_ipaddr.isra.0+0x18>
}
 801a870:	b002      	add	sp, #8
 801a872:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a874:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a876:	4630      	mov	r0, r6
 801a878:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a87a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a87c:	f002 fa5a 	bl	801cd34 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a880:	a901      	add	r1, sp, #4
 801a882:	4630      	mov	r0, r6
 801a884:	f005 fde4 	bl	8020450 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801a888:	a901      	add	r1, sp, #4
 801a88a:	4630      	mov	r0, r6
 801a88c:	f000 ff6c 	bl	801b768 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a890:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a892:	2101      	movs	r1, #1
 801a894:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a896:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a898:	f7ff ffbe 	bl	801a818 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801a89c:	69eb      	ldr	r3, [r5, #28]
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d0e6      	beq.n	801a870 <netif_do_set_ipaddr.isra.0+0x14>
 801a8a2:	4628      	mov	r0, r5
 801a8a4:	4798      	blx	r3
}
 801a8a6:	b002      	add	sp, #8
 801a8a8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a8aa:	4b04      	ldr	r3, [pc, #16]	; (801a8bc <netif_do_set_ipaddr.isra.0+0x60>)
 801a8ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 801a8b0:	4903      	ldr	r1, [pc, #12]	; (801a8c0 <netif_do_set_ipaddr.isra.0+0x64>)
 801a8b2:	4804      	ldr	r0, [pc, #16]	; (801a8c4 <netif_do_set_ipaddr.isra.0+0x68>)
 801a8b4:	f00a fd6e 	bl	8025394 <iprintf>
 801a8b8:	e7d6      	b.n	801a868 <netif_do_set_ipaddr.isra.0+0xc>
 801a8ba:	bf00      	nop
 801a8bc:	0804382c 	.word	0x0804382c
 801a8c0:	08043884 	.word	0x08043884
 801a8c4:	08029fe8 	.word	0x08029fe8

0801a8c8 <netif_init>:
}
 801a8c8:	4770      	bx	lr
 801a8ca:	bf00      	nop

0801a8cc <netif_set_addr>:
{
 801a8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801a8ce:	2900      	cmp	r1, #0
{
 801a8d0:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801a8d2:	4b16      	ldr	r3, [pc, #88]	; (801a92c <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801a8d4:	460c      	mov	r4, r1
{
 801a8d6:	b083      	sub	sp, #12
 801a8d8:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801a8da:	bf14      	ite	ne
 801a8dc:	460c      	movne	r4, r1
 801a8de:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801a8e0:	b30a      	cbz	r2, 801a926 <netif_set_addr+0x5a>
 801a8e2:	4616      	mov	r6, r2
  if (gw == NULL) {
 801a8e4:	b1ef      	cbz	r7, 801a922 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801a8e6:	6823      	ldr	r3, [r4, #0]
 801a8e8:	b993      	cbnz	r3, 801a910 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a8ea:	4621      	mov	r1, r4
 801a8ec:	aa01      	add	r2, sp, #4
 801a8ee:	4628      	mov	r0, r5
 801a8f0:	f7ff ffb4 	bl	801a85c <netif_do_set_ipaddr.isra.0>
 801a8f4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a8f6:	6833      	ldr	r3, [r6, #0]
 801a8f8:	68aa      	ldr	r2, [r5, #8]
 801a8fa:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a8fc:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a8fe:	bf18      	it	ne
 801a900:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a902:	683b      	ldr	r3, [r7, #0]
 801a904:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a906:	bf18      	it	ne
 801a908:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801a90a:	b119      	cbz	r1, 801a914 <netif_set_addr+0x48>
}
 801a90c:	b003      	add	sp, #12
 801a90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801a910:	2100      	movs	r1, #0
 801a912:	e7f0      	b.n	801a8f6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a914:	aa01      	add	r2, sp, #4
 801a916:	4621      	mov	r1, r4
 801a918:	4628      	mov	r0, r5
 801a91a:	f7ff ff9f 	bl	801a85c <netif_do_set_ipaddr.isra.0>
}
 801a91e:	b003      	add	sp, #12
 801a920:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801a922:	4f02      	ldr	r7, [pc, #8]	; (801a92c <netif_set_addr+0x60>)
 801a924:	e7df      	b.n	801a8e6 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801a926:	461e      	mov	r6, r3
 801a928:	e7dc      	b.n	801a8e4 <netif_set_addr+0x18>
 801a92a:	bf00      	nop
 801a92c:	08045954 	.word	0x08045954

0801a930 <netif_add>:
{
 801a930:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a936:	4606      	mov	r6, r0
 801a938:	2800      	cmp	r0, #0
 801a93a:	f000 8081 	beq.w	801aa40 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a93e:	2d00      	cmp	r5, #0
 801a940:	f000 8087 	beq.w	801aa52 <netif_add+0x122>
  if (ipaddr == NULL) {
 801a944:	2900      	cmp	r1, #0
 801a946:	d06f      	beq.n	801aa28 <netif_add+0xf8>
  if (netmask == NULL) {
 801a948:	2a00      	cmp	r2, #0
 801a94a:	d068      	beq.n	801aa1e <netif_add+0xee>
  if (gw == NULL) {
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d069      	beq.n	801aa24 <netif_add+0xf4>
  netif->state = state;
 801a950:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a952:	2400      	movs	r4, #0
  netif->num = netif_num;
 801a954:	f8df a128 	ldr.w	sl, [pc, #296]	; 801aa80 <netif_add+0x150>
  netif->state = state;
 801a958:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801a95a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801a95c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801a95e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801a960:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801a964:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801a966:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801a96a:	483e      	ldr	r0, [pc, #248]	; (801aa64 <netif_add+0x134>)
  netif->flags = 0;
 801a96c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801a970:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a972:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a974:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801a976:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801a97a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a97e:	f7ff ffa5 	bl	801a8cc <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801a982:	4630      	mov	r0, r6
 801a984:	47a8      	blx	r5
 801a986:	2800      	cmp	r0, #0
 801a988:	d157      	bne.n	801aa3a <netif_add+0x10a>
      if (netif->num == 255) {
 801a98a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801a98e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801aa84 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a992:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801aa74 <netif_add+0x144>
 801a996:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801aa88 <netif_add+0x158>
 801a99a:	4f33      	ldr	r7, [pc, #204]	; (801aa68 <netif_add+0x138>)
      if (netif->num == 255) {
 801a99c:	2aff      	cmp	r2, #255	; 0xff
 801a99e:	d102      	bne.n	801a9a6 <netif_add+0x76>
        netif->num = 0;
 801a9a0:	2300      	movs	r3, #0
 801a9a2:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a9a6:	f8d8 4000 	ldr.w	r4, [r8]
 801a9aa:	2c00      	cmp	r4, #0
 801a9ac:	d042      	beq.n	801aa34 <netif_add+0x104>
      num_netifs = 0;
 801a9ae:	2500      	movs	r5, #0
 801a9b0:	e007      	b.n	801a9c2 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801a9b2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a9b6:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a9ba:	429a      	cmp	r2, r3
 801a9bc:	d014      	beq.n	801a9e8 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a9be:	6824      	ldr	r4, [r4, #0]
 801a9c0:	b1fc      	cbz	r4, 801aa02 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9c2:	42a6      	cmp	r6, r4
        num_netifs++;
 801a9c4:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9c8:	d013      	beq.n	801a9f2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a9ca:	2dff      	cmp	r5, #255	; 0xff
 801a9cc:	ddf1      	ble.n	801a9b2 <netif_add+0x82>
 801a9ce:	465b      	mov	r3, fp
 801a9d0:	f240 128d 	movw	r2, #397	; 0x18d
 801a9d4:	4925      	ldr	r1, [pc, #148]	; (801aa6c <netif_add+0x13c>)
 801a9d6:	4638      	mov	r0, r7
 801a9d8:	f00a fcdc 	bl	8025394 <iprintf>
        if (netif2->num == netif->num) {
 801a9dc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a9e0:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a9e4:	429a      	cmp	r2, r3
 801a9e6:	d1ea      	bne.n	801a9be <netif_add+0x8e>
          netif->num++;
 801a9e8:	3201      	adds	r2, #1
 801a9ea:	b2d2      	uxtb	r2, r2
 801a9ec:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801a9f0:	e7d4      	b.n	801a99c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a9f2:	465b      	mov	r3, fp
 801a9f4:	f240 128b 	movw	r2, #395	; 0x18b
 801a9f8:	4649      	mov	r1, r9
 801a9fa:	4638      	mov	r0, r7
 801a9fc:	f00a fcca 	bl	8025394 <iprintf>
 801aa00:	e7e3      	b.n	801a9ca <netif_add+0x9a>
  netif->next = netif_list;
 801aa02:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801aa06:	2bfe      	cmp	r3, #254	; 0xfe
 801aa08:	d012      	beq.n	801aa30 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801aa0a:	3301      	adds	r3, #1
 801aa0c:	b2db      	uxtb	r3, r3
  return netif;
 801aa0e:	4630      	mov	r0, r6
  netif->next = netif_list;
 801aa10:	6034      	str	r4, [r6, #0]
 801aa12:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801aa16:	f8c8 6000 	str.w	r6, [r8]
}
 801aa1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801aa1e:	4a14      	ldr	r2, [pc, #80]	; (801aa70 <netif_add+0x140>)
  if (gw == NULL) {
 801aa20:	2b00      	cmp	r3, #0
 801aa22:	d195      	bne.n	801a950 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801aa24:	4b12      	ldr	r3, [pc, #72]	; (801aa70 <netif_add+0x140>)
 801aa26:	e793      	b.n	801a950 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801aa28:	4911      	ldr	r1, [pc, #68]	; (801aa70 <netif_add+0x140>)
  if (netmask == NULL) {
 801aa2a:	2a00      	cmp	r2, #0
 801aa2c:	d18e      	bne.n	801a94c <netif_add+0x1c>
 801aa2e:	e7f6      	b.n	801aa1e <netif_add+0xee>
    netif_num = 0;
 801aa30:	2300      	movs	r3, #0
 801aa32:	e7ec      	b.n	801aa0e <netif_add+0xde>
  if (netif->num == 254) {
 801aa34:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801aa38:	e7e5      	b.n	801aa06 <netif_add+0xd6>
    return NULL;
 801aa3a:	4620      	mov	r0, r4
}
 801aa3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801aa40:	4b0c      	ldr	r3, [pc, #48]	; (801aa74 <netif_add+0x144>)
 801aa42:	f240 1227 	movw	r2, #295	; 0x127
 801aa46:	490c      	ldr	r1, [pc, #48]	; (801aa78 <netif_add+0x148>)
 801aa48:	4807      	ldr	r0, [pc, #28]	; (801aa68 <netif_add+0x138>)
 801aa4a:	f00a fca3 	bl	8025394 <iprintf>
 801aa4e:	4630      	mov	r0, r6
 801aa50:	e7e3      	b.n	801aa1a <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801aa52:	4b08      	ldr	r3, [pc, #32]	; (801aa74 <netif_add+0x144>)
 801aa54:	f44f 7294 	mov.w	r2, #296	; 0x128
 801aa58:	4908      	ldr	r1, [pc, #32]	; (801aa7c <netif_add+0x14c>)
 801aa5a:	4803      	ldr	r0, [pc, #12]	; (801aa68 <netif_add+0x138>)
 801aa5c:	f00a fc9a 	bl	8025394 <iprintf>
 801aa60:	4628      	mov	r0, r5
 801aa62:	e7da      	b.n	801aa1a <netif_add+0xea>
 801aa64:	0801a811 	.word	0x0801a811
 801aa68:	08029fe8 	.word	0x08029fe8
 801aa6c:	080438e8 	.word	0x080438e8
 801aa70:	08045954 	.word	0x08045954
 801aa74:	0804382c 	.word	0x0804382c
 801aa78:	08043894 	.word	0x08043894
 801aa7c:	080438b0 	.word	0x080438b0
 801aa80:	2002e0b4 	.word	0x2002e0b4
 801aa84:	2002e0b0 	.word	0x2002e0b0
 801aa88:	080438d4 	.word	0x080438d4

0801aa8c <netif_set_default>:
  netif_default = netif;
 801aa8c:	4b01      	ldr	r3, [pc, #4]	; (801aa94 <netif_set_default+0x8>)
 801aa8e:	6018      	str	r0, [r3, #0]
}
 801aa90:	4770      	bx	lr
 801aa92:	bf00      	nop
 801aa94:	2002e0ac 	.word	0x2002e0ac

0801aa98 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801aa98:	b198      	cbz	r0, 801aac2 <netif_set_up+0x2a>
{
 801aa9a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801aa9c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801aaa0:	4604      	mov	r4, r0
 801aaa2:	07da      	lsls	r2, r3, #31
 801aaa4:	d40c      	bmi.n	801aac0 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801aaa6:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801aaaa:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801aaac:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801aab0:	b102      	cbz	r2, 801aab4 <netif_set_up+0x1c>
 801aab2:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801aab4:	4620      	mov	r0, r4
 801aab6:	2103      	movs	r1, #3
}
 801aab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801aabc:	f7ff beac 	b.w	801a818 <netif_issue_reports>
}
 801aac0:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801aac2:	4b03      	ldr	r3, [pc, #12]	; (801aad0 <netif_set_up+0x38>)
 801aac4:	f44f 7254 	mov.w	r2, #848	; 0x350
 801aac8:	4902      	ldr	r1, [pc, #8]	; (801aad4 <netif_set_up+0x3c>)
 801aaca:	4803      	ldr	r0, [pc, #12]	; (801aad8 <netif_set_up+0x40>)
 801aacc:	f00a bc62 	b.w	8025394 <iprintf>
 801aad0:	0804382c 	.word	0x0804382c
 801aad4:	08043918 	.word	0x08043918
 801aad8:	08029fe8 	.word	0x08029fe8

0801aadc <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801aadc:	b1a8      	cbz	r0, 801ab0a <netif_set_down+0x2e>
{
 801aade:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801aae0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801aae4:	4604      	mov	r4, r0
 801aae6:	07da      	lsls	r2, r3, #31
 801aae8:	d50b      	bpl.n	801ab02 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801aaea:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801aaee:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801aaf0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801aaf4:	d406      	bmi.n	801ab04 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801aaf6:	69e3      	ldr	r3, [r4, #28]
 801aaf8:	b11b      	cbz	r3, 801ab02 <netif_set_down+0x26>
 801aafa:	4620      	mov	r0, r4
}
 801aafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801ab00:	4718      	bx	r3
}
 801ab02:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801ab04:	f007 fbc8 	bl	8022298 <etharp_cleanup_netif>
 801ab08:	e7f5      	b.n	801aaf6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801ab0a:	4b03      	ldr	r3, [pc, #12]	; (801ab18 <netif_set_down+0x3c>)
 801ab0c:	f240 329b 	movw	r2, #923	; 0x39b
 801ab10:	4902      	ldr	r1, [pc, #8]	; (801ab1c <netif_set_down+0x40>)
 801ab12:	4803      	ldr	r0, [pc, #12]	; (801ab20 <netif_set_down+0x44>)
 801ab14:	f00a bc3e 	b.w	8025394 <iprintf>
 801ab18:	0804382c 	.word	0x0804382c
 801ab1c:	08043934 	.word	0x08043934
 801ab20:	08029fe8 	.word	0x08029fe8

0801ab24 <netif_set_status_callback>:
  if (netif) {
 801ab24:	b100      	cbz	r0, 801ab28 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801ab26:	61c1      	str	r1, [r0, #28]
}
 801ab28:	4770      	bx	lr
 801ab2a:	bf00      	nop

0801ab2c <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801ab2c:	b1b8      	cbz	r0, 801ab5e <netif_set_link_up+0x32>
{
 801ab2e:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801ab30:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801ab34:	4604      	mov	r4, r0
 801ab36:	075a      	lsls	r2, r3, #29
 801ab38:	d500      	bpl.n	801ab3c <netif_set_link_up+0x10>
}
 801ab3a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801ab3c:	f043 0304 	orr.w	r3, r3, #4
 801ab40:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801ab44:	f006 fd96 	bl	8021674 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ab48:	2103      	movs	r1, #3
 801ab4a:	4620      	mov	r0, r4
 801ab4c:	f7ff fe64 	bl	801a818 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801ab50:	6a23      	ldr	r3, [r4, #32]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d0f1      	beq.n	801ab3a <netif_set_link_up+0xe>
 801ab56:	4620      	mov	r0, r4
}
 801ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801ab5c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801ab5e:	4b03      	ldr	r3, [pc, #12]	; (801ab6c <netif_set_link_up+0x40>)
 801ab60:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801ab64:	4902      	ldr	r1, [pc, #8]	; (801ab70 <netif_set_link_up+0x44>)
 801ab66:	4803      	ldr	r0, [pc, #12]	; (801ab74 <netif_set_link_up+0x48>)
 801ab68:	f00a bc14 	b.w	8025394 <iprintf>
 801ab6c:	0804382c 	.word	0x0804382c
 801ab70:	08043954 	.word	0x08043954
 801ab74:	08029fe8 	.word	0x08029fe8

0801ab78 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801ab78:	b158      	cbz	r0, 801ab92 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801ab7a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801ab7e:	0751      	lsls	r1, r2, #29
 801ab80:	d506      	bpl.n	801ab90 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801ab82:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801ab86:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801ab88:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801ab8c:	b101      	cbz	r1, 801ab90 <netif_set_link_down+0x18>
 801ab8e:	4708      	bx	r1
}
 801ab90:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801ab92:	4b03      	ldr	r3, [pc, #12]	; (801aba0 <netif_set_link_down+0x28>)
 801ab94:	f240 4206 	movw	r2, #1030	; 0x406
 801ab98:	4902      	ldr	r1, [pc, #8]	; (801aba4 <netif_set_link_down+0x2c>)
 801ab9a:	4803      	ldr	r0, [pc, #12]	; (801aba8 <netif_set_link_down+0x30>)
 801ab9c:	f00a bbfa 	b.w	8025394 <iprintf>
 801aba0:	0804382c 	.word	0x0804382c
 801aba4:	08043978 	.word	0x08043978
 801aba8:	08029fe8 	.word	0x08029fe8

0801abac <netif_set_link_callback>:
  if (netif) {
 801abac:	b100      	cbz	r0, 801abb0 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801abae:	6201      	str	r1, [r0, #32]
}
 801abb0:	4770      	bx	lr
 801abb2:	bf00      	nop

0801abb4 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801abb4:	4602      	mov	r2, r0
 801abb6:	b158      	cbz	r0, 801abd0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801abb8:	4b06      	ldr	r3, [pc, #24]	; (801abd4 <netif_get_by_index+0x20>)
 801abba:	6818      	ldr	r0, [r3, #0]
 801abbc:	b910      	cbnz	r0, 801abc4 <netif_get_by_index+0x10>
 801abbe:	e007      	b.n	801abd0 <netif_get_by_index+0x1c>
 801abc0:	6800      	ldr	r0, [r0, #0]
 801abc2:	b130      	cbz	r0, 801abd2 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801abc4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801abc8:	3301      	adds	r3, #1
 801abca:	b2db      	uxtb	r3, r3
 801abcc:	4293      	cmp	r3, r2
 801abce:	d1f7      	bne.n	801abc0 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801abd0:	4770      	bx	lr
 801abd2:	4770      	bx	lr
 801abd4:	2002e0b0 	.word	0x2002e0b0

0801abd8 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801abd8:	4907      	ldr	r1, [pc, #28]	; (801abf8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801abda:	2200      	movs	r2, #0
 801abdc:	4b07      	ldr	r3, [pc, #28]	; (801abfc <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801abde:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801abe0:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801abe2:	b910      	cbnz	r0, 801abea <pbuf_free_ooseq_callback+0x12>
 801abe4:	e006      	b.n	801abf4 <pbuf_free_ooseq_callback+0x1c>
 801abe6:	68c0      	ldr	r0, [r0, #12]
 801abe8:	b120      	cbz	r0, 801abf4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801abea:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801abec:	2b00      	cmp	r3, #0
 801abee:	d0fa      	beq.n	801abe6 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801abf0:	f002 b8ca 	b.w	801cd88 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	2002e0bc 	.word	0x2002e0bc
 801abfc:	2002e0b5 	.word	0x2002e0b5

0801ac00 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801ac04:	4604      	mov	r4, r0
 801ac06:	2800      	cmp	r0, #0
 801ac08:	d052      	beq.n	801acb0 <pbuf_free.part.0+0xb0>
  count = 0;
 801ac0a:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac0c:	4f29      	ldr	r7, [pc, #164]	; (801acb4 <pbuf_free.part.0+0xb4>)
 801ac0e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801acc4 <pbuf_free.part.0+0xc4>
 801ac12:	4e29      	ldr	r6, [pc, #164]	; (801acb8 <pbuf_free.part.0+0xb8>)
 801ac14:	e00a      	b.n	801ac2c <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ac16:	6923      	ldr	r3, [r4, #16]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d03b      	beq.n	801ac94 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801ac20:	3501      	adds	r5, #1
 801ac22:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801ac24:	f1b9 0f00 	cmp.w	r9, #0
 801ac28:	d01b      	beq.n	801ac62 <pbuf_free.part.0+0x62>
 801ac2a:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac2c:	7ba3      	ldrb	r3, [r4, #14]
 801ac2e:	b1db      	cbz	r3, 801ac68 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801ac30:	3b01      	subs	r3, #1
 801ac32:	b2db      	uxtb	r3, r3
 801ac34:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801ac36:	b9a3      	cbnz	r3, 801ac62 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ac38:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801ac3a:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ac3e:	079b      	lsls	r3, r3, #30
 801ac40:	d4e9      	bmi.n	801ac16 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801ac42:	7b23      	ldrb	r3, [r4, #12]
 801ac44:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ac48:	2b02      	cmp	r3, #2
 801ac4a:	d01e      	beq.n	801ac8a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ac4c:	2b01      	cmp	r3, #1
 801ac4e:	d02a      	beq.n	801aca6 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ac50:	b99b      	cbnz	r3, 801ac7a <pbuf_free.part.0+0x7a>
      count++;
 801ac52:	3501      	adds	r5, #1
          mem_free(p);
 801ac54:	4620      	mov	r0, r4
 801ac56:	f7ff fa27 	bl	801a0a8 <mem_free>
      count++;
 801ac5a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801ac5c:	f1b9 0f00 	cmp.w	r9, #0
 801ac60:	d1e3      	bne.n	801ac2a <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801ac62:	4628      	mov	r0, r5
 801ac64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801ac68:	463b      	mov	r3, r7
 801ac6a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ac6e:	4641      	mov	r1, r8
 801ac70:	4630      	mov	r0, r6
 801ac72:	f00a fb8f 	bl	8025394 <iprintf>
    ref = --(p->ref);
 801ac76:	7ba3      	ldrb	r3, [r4, #14]
 801ac78:	e7da      	b.n	801ac30 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801ac7a:	463b      	mov	r3, r7
 801ac7c:	f240 320f 	movw	r2, #783	; 0x30f
 801ac80:	490e      	ldr	r1, [pc, #56]	; (801acbc <pbuf_free.part.0+0xbc>)
 801ac82:	4630      	mov	r0, r6
 801ac84:	f00a fb86 	bl	8025394 <iprintf>
 801ac88:	e7ca      	b.n	801ac20 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801ac8a:	4621      	mov	r1, r4
 801ac8c:	200f      	movs	r0, #15
 801ac8e:	f7ff fd9f 	bl	801a7d0 <memp_free>
 801ac92:	e7c5      	b.n	801ac20 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ac94:	463b      	mov	r3, r7
 801ac96:	f240 22ff 	movw	r2, #767	; 0x2ff
 801ac9a:	4909      	ldr	r1, [pc, #36]	; (801acc0 <pbuf_free.part.0+0xc0>)
 801ac9c:	4630      	mov	r0, r6
 801ac9e:	f00a fb79 	bl	8025394 <iprintf>
        pc->custom_free_function(p);
 801aca2:	6923      	ldr	r3, [r4, #16]
 801aca4:	e7ba      	b.n	801ac1c <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801aca6:	4621      	mov	r1, r4
 801aca8:	200e      	movs	r0, #14
 801acaa:	f7ff fd91 	bl	801a7d0 <memp_free>
 801acae:	e7b7      	b.n	801ac20 <pbuf_free.part.0+0x20>
  count = 0;
 801acb0:	4605      	mov	r5, r0
 801acb2:	e7d6      	b.n	801ac62 <pbuf_free.part.0+0x62>
 801acb4:	0804399c 	.word	0x0804399c
 801acb8:	08029fe8 	.word	0x08029fe8
 801acbc:	08043a08 	.word	0x08043a08
 801acc0:	080439e4 	.word	0x080439e4
 801acc4:	080439cc 	.word	0x080439cc

0801acc8 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801acc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801accc:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801acce:	f8df a124 	ldr.w	sl, [pc, #292]	; 801adf4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801acd2:	4605      	mov	r5, r0
 801acd4:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801acd6:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801acd8:	8944      	ldrh	r4, [r0, #10]
 801acda:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801acdc:	f8df b128 	ldr.w	fp, [pc, #296]	; 801ae08 <pbuf_copy.part.0+0x140>
 801ace0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801adfc <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ace4:	1be4      	subs	r4, r4, r7
 801ace6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801ace8:	6868      	ldr	r0, [r5, #4]
 801acea:	4294      	cmp	r4, r2
 801acec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801acf0:	4438      	add	r0, r7
 801acf2:	bf28      	it	cs
 801acf4:	4614      	movcs	r4, r2
 801acf6:	4431      	add	r1, r6
 801acf8:	4622      	mov	r2, r4
    offset_to += len;
 801acfa:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801acfc:	f009 fb84 	bl	8024408 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad00:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801ad02:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad04:	429f      	cmp	r7, r3
 801ad06:	d837      	bhi.n	801ad78 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ad08:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad0c:	4296      	cmp	r6, r2
 801ad0e:	d829      	bhi.n	801ad64 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801ad10:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801ad12:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801ad14:	d317      	bcc.n	801ad46 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801ad16:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801ad18:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801ad1c:	d04b      	beq.n	801adb6 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ad1e:	f1b8 0f00 	cmp.w	r8, #0
 801ad22:	d144      	bne.n	801adae <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ad24:	892a      	ldrh	r2, [r5, #8]
 801ad26:	896b      	ldrh	r3, [r5, #10]
 801ad28:	429a      	cmp	r2, r3
 801ad2a:	d14c      	bne.n	801adc6 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ad2c:	6828      	ldr	r0, [r5, #0]
 801ad2e:	b140      	cbz	r0, 801ad42 <pbuf_copy.part.0+0x7a>
 801ad30:	4b30      	ldr	r3, [pc, #192]	; (801adf4 <pbuf_copy.part.0+0x12c>)
 801ad32:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801ad36:	4930      	ldr	r1, [pc, #192]	; (801adf8 <pbuf_copy.part.0+0x130>)
 801ad38:	4830      	ldr	r0, [pc, #192]	; (801adfc <pbuf_copy.part.0+0x134>)
 801ad3a:	f00a fb2b 	bl	8025394 <iprintf>
 801ad3e:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801ad42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801ad46:	429f      	cmp	r7, r3
 801ad48:	d040      	beq.n	801adcc <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ad4a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d01a      	beq.n	801ad88 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ad52:	896c      	ldrh	r4, [r5, #10]
 801ad54:	2d00      	cmp	r5, #0
 801ad56:	d0c5      	beq.n	801ace4 <pbuf_copy.part.0+0x1c>
 801ad58:	892b      	ldrh	r3, [r5, #8]
 801ad5a:	42a3      	cmp	r3, r4
 801ad5c:	d045      	beq.n	801adea <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801ad5e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad62:	e7bf      	b.n	801ace4 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801ad64:	f240 32da 	movw	r2, #986	; 0x3da
 801ad68:	4653      	mov	r3, sl
 801ad6a:	4925      	ldr	r1, [pc, #148]	; (801ae00 <pbuf_copy.part.0+0x138>)
 801ad6c:	4648      	mov	r0, r9
 801ad6e:	f00a fb11 	bl	8025394 <iprintf>
    if (offset_from >= p_from->len) {
 801ad72:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801ad76:	e7cb      	b.n	801ad10 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801ad78:	4653      	mov	r3, sl
 801ad7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801ad7e:	4659      	mov	r1, fp
 801ad80:	4648      	mov	r0, r9
 801ad82:	f00a fb07 	bl	8025394 <iprintf>
 801ad86:	e7bf      	b.n	801ad08 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ad88:	f8d8 3000 	ldr.w	r3, [r8]
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d0e0      	beq.n	801ad52 <pbuf_copy.part.0+0x8a>
 801ad90:	4b18      	ldr	r3, [pc, #96]	; (801adf4 <pbuf_copy.part.0+0x12c>)
 801ad92:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801ad96:	4918      	ldr	r1, [pc, #96]	; (801adf8 <pbuf_copy.part.0+0x130>)
 801ad98:	4818      	ldr	r0, [pc, #96]	; (801adfc <pbuf_copy.part.0+0x134>)
 801ad9a:	f00a fafb 	bl	8025394 <iprintf>
 801ad9e:	f06f 0005 	mvn.w	r0, #5
}
 801ada2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801ada6:	f1b8 0f00 	cmp.w	r8, #0
 801adaa:	d00a      	beq.n	801adc2 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801adac:	2700      	movs	r7, #0
 801adae:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801adb0:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801adb4:	e7c9      	b.n	801ad4a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801adb6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801adb8:	2d00      	cmp	r5, #0
 801adba:	d1f4      	bne.n	801ada6 <pbuf_copy.part.0+0xde>
 801adbc:	f1b8 0f00 	cmp.w	r8, #0
 801adc0:	d108      	bne.n	801add4 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801adc2:	2d00      	cmp	r5, #0
 801adc4:	d1ae      	bne.n	801ad24 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801adc6:	2000      	movs	r0, #0
}
 801adc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801adcc:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801adce:	b10d      	cbz	r5, 801add4 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801add0:	2700      	movs	r7, #0
 801add2:	e7ed      	b.n	801adb0 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801add4:	4b07      	ldr	r3, [pc, #28]	; (801adf4 <pbuf_copy.part.0+0x12c>)
 801add6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801adda:	490a      	ldr	r1, [pc, #40]	; (801ae04 <pbuf_copy.part.0+0x13c>)
 801addc:	4807      	ldr	r0, [pc, #28]	; (801adfc <pbuf_copy.part.0+0x134>)
 801adde:	f00a fad9 	bl	8025394 <iprintf>
 801ade2:	f06f 000f 	mvn.w	r0, #15
}
 801ade6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801adea:	682b      	ldr	r3, [r5, #0]
 801adec:	2b00      	cmp	r3, #0
 801adee:	d0b6      	beq.n	801ad5e <pbuf_copy.part.0+0x96>
 801adf0:	e79e      	b.n	801ad30 <pbuf_copy.part.0+0x68>
 801adf2:	bf00      	nop
 801adf4:	0804399c 	.word	0x0804399c
 801adf8:	08043a60 	.word	0x08043a60
 801adfc:	08029fe8 	.word	0x08029fe8
 801ae00:	08043a34 	.word	0x08043a34
 801ae04:	08043a50 	.word	0x08043a50
 801ae08:	08043a1c 	.word	0x08043a1c

0801ae0c <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae0c:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801ae10:	2b01      	cmp	r3, #1
{
 801ae12:	b570      	push	{r4, r5, r6, lr}
 801ae14:	4614      	mov	r4, r2
 801ae16:	4606      	mov	r6, r0
 801ae18:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae1a:	d110      	bne.n	801ae3e <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801ae1c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801ae20:	490b      	ldr	r1, [pc, #44]	; (801ae50 <pbuf_alloc_reference+0x44>)
 801ae22:	200e      	movs	r0, #14
 801ae24:	f7ff fc9e 	bl	801a764 <memp_malloc_fn>
  if (p == NULL) {
 801ae28:	b140      	cbz	r0, 801ae3c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801ae2a:	2300      	movs	r3, #0
  p->ref = 1;
 801ae2c:	2201      	movs	r2, #1
  p->payload = payload;
 801ae2e:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801ae30:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801ae32:	6003      	str	r3, [r0, #0]
  p->len = len;
 801ae34:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801ae36:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801ae38:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801ae3a:	81c2      	strh	r2, [r0, #14]
}
 801ae3c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801ae3e:	4b04      	ldr	r3, [pc, #16]	; (801ae50 <pbuf_alloc_reference+0x44>)
 801ae40:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801ae44:	4903      	ldr	r1, [pc, #12]	; (801ae54 <pbuf_alloc_reference+0x48>)
 801ae46:	4804      	ldr	r0, [pc, #16]	; (801ae58 <pbuf_alloc_reference+0x4c>)
 801ae48:	f00a faa4 	bl	8025394 <iprintf>
 801ae4c:	e7e6      	b.n	801ae1c <pbuf_alloc_reference+0x10>
 801ae4e:	bf00      	nop
 801ae50:	0804399c 	.word	0x0804399c
 801ae54:	08043a8c 	.word	0x08043a8c
 801ae58:	08029fe8 	.word	0x08029fe8

0801ae5c <pbuf_alloc>:
  switch (type) {
 801ae5c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801ae60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae64:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801ae66:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801ae6a:	d03d      	beq.n	801aee8 <pbuf_alloc+0x8c>
 801ae6c:	d80e      	bhi.n	801ae8c <pbuf_alloc+0x30>
 801ae6e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801ae72:	2c01      	cmp	r4, #1
 801ae74:	d033      	beq.n	801aede <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ae76:	4b41      	ldr	r3, [pc, #260]	; (801af7c <pbuf_alloc+0x120>)
 801ae78:	f240 1227 	movw	r2, #295	; 0x127
 801ae7c:	4940      	ldr	r1, [pc, #256]	; (801af80 <pbuf_alloc+0x124>)
      return NULL;
 801ae7e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801ae80:	4840      	ldr	r0, [pc, #256]	; (801af84 <pbuf_alloc+0x128>)
 801ae82:	f00a fa87 	bl	8025394 <iprintf>
}
 801ae86:	4628      	mov	r0, r5
 801ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801ae8c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801ae90:	d1f1      	bne.n	801ae76 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801ae92:	f10a 0303 	add.w	r3, sl, #3
 801ae96:	1cca      	adds	r2, r1, #3
 801ae98:	4606      	mov	r6, r0
 801ae9a:	f022 0203 	bic.w	r2, r2, #3
 801ae9e:	f023 0303 	bic.w	r3, r3, #3
 801aea2:	4413      	add	r3, r2
 801aea4:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801aea6:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801aeaa:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801aeac:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801aeae:	d34d      	bcc.n	801af4c <pbuf_alloc+0xf0>
 801aeb0:	4282      	cmp	r2, r0
 801aeb2:	d84b      	bhi.n	801af4c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801aeb4:	f7ff fab4 	bl	801a420 <mem_malloc>
      if (p == NULL) {
 801aeb8:	4605      	mov	r5, r0
 801aeba:	2800      	cmp	r0, #0
 801aebc:	d0e3      	beq.n	801ae86 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aebe:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801aec0:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801aec2:	4a31      	ldr	r2, [pc, #196]	; (801af88 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aec4:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801aec6:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801aeca:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801aecc:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801aed0:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801aed4:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801aed6:	6043      	str	r3, [r0, #4]
}
 801aed8:	4628      	mov	r0, r5
 801aeda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801aede:	2000      	movs	r0, #0
}
 801aee0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801aee4:	f7ff bf92 	b.w	801ae0c <pbuf_alloc_reference>
  switch (type) {
 801aee8:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801aeea:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801af7c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801aeee:	4f27      	ldr	r7, [pc, #156]	; (801af8c <pbuf_alloc+0x130>)
  switch (type) {
 801aef0:	4625      	mov	r5, r4
 801aef2:	e009      	b.n	801af08 <pbuf_alloc+0xac>
          last->next = q;
 801aef4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801aef6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801aefa:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801aefe:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801af02:	f1b9 0f00 	cmp.w	r9, #0
 801af06:	d0be      	beq.n	801ae86 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801af08:	22f3      	movs	r2, #243	; 0xf3
 801af0a:	4641      	mov	r1, r8
 801af0c:	200f      	movs	r0, #15
 801af0e:	4626      	mov	r6, r4
 801af10:	f7ff fc28 	bl	801a764 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af14:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801af18:	2100      	movs	r1, #0
        if (q == NULL) {
 801af1a:	4604      	mov	r4, r0
 801af1c:	b1d0      	cbz	r0, 801af54 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af1e:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af22:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801af26:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af2a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af2e:	3213      	adds	r2, #19
  p->next = NULL;
 801af30:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af32:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801af34:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801af38:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af3a:	454b      	cmp	r3, r9
  p->payload = payload;
 801af3c:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801af3e:	bf28      	it	cs
 801af40:	464b      	movcs	r3, r9
  p->len = len;
 801af42:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801af44:	2d00      	cmp	r5, #0
 801af46:	d1d5      	bne.n	801aef4 <pbuf_alloc+0x98>
 801af48:	4605      	mov	r5, r0
 801af4a:	e7d4      	b.n	801aef6 <pbuf_alloc+0x9a>
          return NULL;
 801af4c:	2500      	movs	r5, #0
}
 801af4e:	4628      	mov	r0, r5
 801af50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801af54:	4e0e      	ldr	r6, [pc, #56]	; (801af90 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801af56:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801af58:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801af5a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801af5c:	b133      	cbz	r3, 801af6c <pbuf_alloc+0x110>
          if (p) {
 801af5e:	2d00      	cmp	r5, #0
 801af60:	d0f4      	beq.n	801af4c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801af62:	4628      	mov	r0, r5
          return NULL;
 801af64:	2500      	movs	r5, #0
 801af66:	f7ff fe4b 	bl	801ac00 <pbuf_free.part.0>
 801af6a:	e78c      	b.n	801ae86 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801af6c:	4601      	mov	r1, r0
 801af6e:	4809      	ldr	r0, [pc, #36]	; (801af94 <pbuf_alloc+0x138>)
 801af70:	f7fc fefc 	bl	8017d6c <tcpip_try_callback>
 801af74:	2800      	cmp	r0, #0
 801af76:	d0f2      	beq.n	801af5e <pbuf_alloc+0x102>
 801af78:	7034      	strb	r4, [r6, #0]
 801af7a:	e7f0      	b.n	801af5e <pbuf_alloc+0x102>
 801af7c:	0804399c 	.word	0x0804399c
 801af80:	08043aa0 	.word	0x08043aa0
 801af84:	08029fe8 	.word	0x08029fe8
 801af88:	00010080 	.word	0x00010080
 801af8c:	00010082 	.word	0x00010082
 801af90:	2002e0b5 	.word	0x2002e0b5
 801af94:	0801abd9 	.word	0x0801abd9

0801af98 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801af98:	3003      	adds	r0, #3
 801af9a:	f020 0003 	bic.w	r0, r0, #3
{
 801af9e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801afa0:	eb01 0e00 	add.w	lr, r1, r0
{
 801afa4:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801afa8:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801afaa:	45e6      	cmp	lr, ip
 801afac:	d80d      	bhi.n	801afca <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801afae:	b104      	cbz	r4, 801afb2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801afb0:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801afb2:	4618      	mov	r0, r3
  p->next = NULL;
 801afb4:	2300      	movs	r3, #0
  p->payload = payload;
 801afb6:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801afb8:	2402      	movs	r4, #2
  p->next = NULL;
 801afba:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801afbc:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801afbe:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801afc0:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801afc2:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801afc4:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801afc6:	81c3      	strh	r3, [r0, #14]
}
 801afc8:	bd10      	pop	{r4, pc}
    return NULL;
 801afca:	2000      	movs	r0, #0
}
 801afcc:	bd10      	pop	{r4, pc}
 801afce:	bf00      	nop

0801afd0 <pbuf_realloc>:
{
 801afd0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801afd2:	4604      	mov	r4, r0
{
 801afd4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801afd6:	2800      	cmp	r0, #0
 801afd8:	d037      	beq.n	801b04a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801afda:	8922      	ldrh	r2, [r4, #8]
 801afdc:	42aa      	cmp	r2, r5
 801afde:	d91b      	bls.n	801b018 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801afe0:	8963      	ldrh	r3, [r4, #10]
 801afe2:	429d      	cmp	r5, r3
 801afe4:	d90d      	bls.n	801b002 <pbuf_realloc+0x32>
 801afe6:	1aa9      	subs	r1, r5, r2
 801afe8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801afea:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801afec:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801afee:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801aff0:	b29d      	uxth	r5, r3
    q = q->next;
 801aff2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801aff4:	2c00      	cmp	r4, #0
 801aff6:	d030      	beq.n	801b05a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801aff8:	8963      	ldrh	r3, [r4, #10]
 801affa:	42ab      	cmp	r3, r5
 801affc:	d201      	bcs.n	801b002 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801affe:	8922      	ldrh	r2, [r4, #8]
 801b000:	e7f3      	b.n	801afea <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b002:	7b22      	ldrb	r2, [r4, #12]
 801b004:	0712      	lsls	r2, r2, #28
 801b006:	d008      	beq.n	801b01a <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801b008:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801b00a:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801b00c:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801b00e:	b108      	cbz	r0, 801b014 <pbuf_realloc+0x44>
  if (p == NULL) {
 801b010:	f7ff fdf6 	bl	801ac00 <pbuf_free.part.0>
  q->next = NULL;
 801b014:	2300      	movs	r3, #0
 801b016:	6023      	str	r3, [r4, #0]
}
 801b018:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801b01a:	429d      	cmp	r5, r3
 801b01c:	d0f4      	beq.n	801b008 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801b01e:	7b63      	ldrb	r3, [r4, #13]
 801b020:	079b      	lsls	r3, r3, #30
 801b022:	d4f1      	bmi.n	801b008 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801b024:	6863      	ldr	r3, [r4, #4]
 801b026:	4620      	mov	r0, r4
 801b028:	1b1b      	subs	r3, r3, r4
 801b02a:	18e9      	adds	r1, r5, r3
 801b02c:	b289      	uxth	r1, r1
 801b02e:	f7ff f91d 	bl	801a26c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801b032:	4604      	mov	r4, r0
 801b034:	2800      	cmp	r0, #0
 801b036:	d1e7      	bne.n	801b008 <pbuf_realloc+0x38>
 801b038:	4b0c      	ldr	r3, [pc, #48]	; (801b06c <pbuf_realloc+0x9c>)
 801b03a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801b03e:	490c      	ldr	r1, [pc, #48]	; (801b070 <pbuf_realloc+0xa0>)
 801b040:	480c      	ldr	r0, [pc, #48]	; (801b074 <pbuf_realloc+0xa4>)
 801b042:	f00a f9a7 	bl	8025394 <iprintf>
  q->len = rem_len;
 801b046:	8164      	strh	r4, [r4, #10]
 801b048:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801b04a:	4b08      	ldr	r3, [pc, #32]	; (801b06c <pbuf_realloc+0x9c>)
 801b04c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801b050:	4909      	ldr	r1, [pc, #36]	; (801b078 <pbuf_realloc+0xa8>)
 801b052:	4808      	ldr	r0, [pc, #32]	; (801b074 <pbuf_realloc+0xa4>)
 801b054:	f00a f99e 	bl	8025394 <iprintf>
 801b058:	e7bf      	b.n	801afda <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801b05a:	4b04      	ldr	r3, [pc, #16]	; (801b06c <pbuf_realloc+0x9c>)
 801b05c:	f240 12af 	movw	r2, #431	; 0x1af
 801b060:	4906      	ldr	r1, [pc, #24]	; (801b07c <pbuf_realloc+0xac>)
 801b062:	4804      	ldr	r0, [pc, #16]	; (801b074 <pbuf_realloc+0xa4>)
 801b064:	f00a f996 	bl	8025394 <iprintf>
  while (rem_len > q->len) {
 801b068:	8963      	ldrh	r3, [r4, #10]
 801b06a:	deff      	udf	#255	; 0xff
 801b06c:	0804399c 	.word	0x0804399c
 801b070:	08043aec 	.word	0x08043aec
 801b074:	08029fe8 	.word	0x08029fe8
 801b078:	08043abc 	.word	0x08043abc
 801b07c:	08043ad4 	.word	0x08043ad4

0801b080 <pbuf_add_header>:
{
 801b080:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b082:	b310      	cbz	r0, 801b0ca <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801b084:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801b088:	d20c      	bcs.n	801b0a4 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801b08a:	b169      	cbz	r1, 801b0a8 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801b08c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b090:	8902      	ldrh	r2, [r0, #8]
 801b092:	4603      	mov	r3, r0
 801b094:	4462      	add	r2, ip
 801b096:	b292      	uxth	r2, r2
 801b098:	4594      	cmp	ip, r2
 801b09a:	d803      	bhi.n	801b0a4 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b09c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801b0a0:	2800      	cmp	r0, #0
 801b0a2:	db03      	blt.n	801b0ac <pbuf_add_header+0x2c>
    return 1;
 801b0a4:	2001      	movs	r0, #1
}
 801b0a6:	bd08      	pop	{r3, pc}
    return 0;
 801b0a8:	4608      	mov	r0, r1
}
 801b0aa:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801b0ac:	6858      	ldr	r0, [r3, #4]
 801b0ae:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b0b0:	f103 0010 	add.w	r0, r3, #16
 801b0b4:	4281      	cmp	r1, r0
 801b0b6:	d3f5      	bcc.n	801b0a4 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0b8:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801b0bc:	2000      	movs	r0, #0
  p->payload = payload;
 801b0be:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0c0:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b0c2:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b0c4:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801b0c8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b0ca:	4b04      	ldr	r3, [pc, #16]	; (801b0dc <pbuf_add_header+0x5c>)
 801b0cc:	f240 12df 	movw	r2, #479	; 0x1df
 801b0d0:	4903      	ldr	r1, [pc, #12]	; (801b0e0 <pbuf_add_header+0x60>)
 801b0d2:	4804      	ldr	r0, [pc, #16]	; (801b0e4 <pbuf_add_header+0x64>)
 801b0d4:	f00a f95e 	bl	8025394 <iprintf>
    return 1;
 801b0d8:	2001      	movs	r0, #1
}
 801b0da:	bd08      	pop	{r3, pc}
 801b0dc:	0804399c 	.word	0x0804399c
 801b0e0:	080453c8 	.word	0x080453c8
 801b0e4:	08029fe8 	.word	0x08029fe8

0801b0e8 <pbuf_remove_header>:
{
 801b0e8:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b0ea:	b1c8      	cbz	r0, 801b120 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801b0ec:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801b0f0:	d21f      	bcs.n	801b132 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801b0f2:	b199      	cbz	r1, 801b11c <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801b0f4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b0f8:	8942      	ldrh	r2, [r0, #10]
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	4594      	cmp	ip, r2
 801b0fe:	d81a      	bhi.n	801b136 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b100:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801b102:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b106:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b10a:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801b10c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b10e:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801b112:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801b114:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801b116:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801b11a:	bd08      	pop	{r3, pc}
    return 0;
 801b11c:	4608      	mov	r0, r1
}
 801b11e:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801b120:	4b09      	ldr	r3, [pc, #36]	; (801b148 <pbuf_remove_header+0x60>)
 801b122:	f240 224b 	movw	r2, #587	; 0x24b
 801b126:	4909      	ldr	r1, [pc, #36]	; (801b14c <pbuf_remove_header+0x64>)
 801b128:	4809      	ldr	r0, [pc, #36]	; (801b150 <pbuf_remove_header+0x68>)
 801b12a:	f00a f933 	bl	8025394 <iprintf>
    return 1;
 801b12e:	2001      	movs	r0, #1
}
 801b130:	bd08      	pop	{r3, pc}
    return 1;
 801b132:	2001      	movs	r0, #1
}
 801b134:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801b136:	4b04      	ldr	r3, [pc, #16]	; (801b148 <pbuf_remove_header+0x60>)
 801b138:	f240 2255 	movw	r2, #597	; 0x255
 801b13c:	4905      	ldr	r1, [pc, #20]	; (801b154 <pbuf_remove_header+0x6c>)
 801b13e:	4804      	ldr	r0, [pc, #16]	; (801b150 <pbuf_remove_header+0x68>)
 801b140:	f00a f928 	bl	8025394 <iprintf>
 801b144:	2001      	movs	r0, #1
}
 801b146:	bd08      	pop	{r3, pc}
 801b148:	0804399c 	.word	0x0804399c
 801b14c:	080453c8 	.word	0x080453c8
 801b150:	08029fe8 	.word	0x08029fe8
 801b154:	08043b08 	.word	0x08043b08

0801b158 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801b158:	2900      	cmp	r1, #0
 801b15a:	db1a      	blt.n	801b192 <pbuf_header_force+0x3a>
{
 801b15c:	b508      	push	{r3, lr}
 801b15e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801b160:	b1d0      	cbz	r0, 801b198 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801b162:	b341      	cbz	r1, 801b1b6 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801b164:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801b168:	891a      	ldrh	r2, [r3, #8]
 801b16a:	4462      	add	r2, ip
 801b16c:	b292      	uxth	r2, r2
 801b16e:	4594      	cmp	ip, r2
 801b170:	d81f      	bhi.n	801b1b2 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b172:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801b176:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801b178:	6858      	ldr	r0, [r3, #4]
 801b17a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801b17e:	db14      	blt.n	801b1aa <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801b180:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801b184:	2000      	movs	r0, #0
  p->payload = payload;
 801b186:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b188:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801b18a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801b18c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801b190:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801b192:	4249      	negs	r1, r1
 801b194:	f7ff bfa8 	b.w	801b0e8 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801b198:	4b08      	ldr	r3, [pc, #32]	; (801b1bc <pbuf_header_force+0x64>)
 801b19a:	f240 12df 	movw	r2, #479	; 0x1df
 801b19e:	4908      	ldr	r1, [pc, #32]	; (801b1c0 <pbuf_header_force+0x68>)
 801b1a0:	4808      	ldr	r0, [pc, #32]	; (801b1c4 <pbuf_header_force+0x6c>)
 801b1a2:	f00a f8f7 	bl	8025394 <iprintf>
    return 1;
 801b1a6:	2001      	movs	r0, #1
}
 801b1a8:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801b1aa:	f103 0010 	add.w	r0, r3, #16
 801b1ae:	4281      	cmp	r1, r0
 801b1b0:	d2e6      	bcs.n	801b180 <pbuf_header_force+0x28>
    return 1;
 801b1b2:	2001      	movs	r0, #1
}
 801b1b4:	bd08      	pop	{r3, pc}
    return 0;
 801b1b6:	4608      	mov	r0, r1
}
 801b1b8:	bd08      	pop	{r3, pc}
 801b1ba:	bf00      	nop
 801b1bc:	0804399c 	.word	0x0804399c
 801b1c0:	080453c8 	.word	0x080453c8
 801b1c4:	08029fe8 	.word	0x08029fe8

0801b1c8 <pbuf_free_header>:
{
 801b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	b158      	cbz	r0, 801b1e6 <pbuf_free_header+0x1e>
 801b1ce:	460d      	mov	r5, r1
 801b1d0:	b149      	cbz	r1, 801b1e6 <pbuf_free_header+0x1e>
      f->next = 0;
 801b1d2:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801b1d4:	8963      	ldrh	r3, [r4, #10]
 801b1d6:	4620      	mov	r0, r4
 801b1d8:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801b1da:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801b1de:	d904      	bls.n	801b1ea <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801b1e0:	4629      	mov	r1, r5
 801b1e2:	f7ff ff81 	bl	801b0e8 <pbuf_remove_header>
}
 801b1e6:	4620      	mov	r0, r4
 801b1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801b1ea:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801b1ec:	b295      	uxth	r5, r2
      f->next = 0;
 801b1ee:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801b1f0:	4634      	mov	r4, r6
 801b1f2:	f7ff fd05 	bl	801ac00 <pbuf_free.part.0>
  while (free_left && p) {
 801b1f6:	b10d      	cbz	r5, 801b1fc <pbuf_free_header+0x34>
 801b1f8:	2e00      	cmp	r6, #0
 801b1fa:	d1eb      	bne.n	801b1d4 <pbuf_free_header+0xc>
      p = p->next;
 801b1fc:	4634      	mov	r4, r6
 801b1fe:	e7f2      	b.n	801b1e6 <pbuf_free_header+0x1e>

0801b200 <pbuf_free>:
  if (p == NULL) {
 801b200:	b108      	cbz	r0, 801b206 <pbuf_free+0x6>
 801b202:	f7ff bcfd 	b.w	801ac00 <pbuf_free.part.0>
{
 801b206:	b510      	push	{r4, lr}
 801b208:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801b20a:	4b04      	ldr	r3, [pc, #16]	; (801b21c <pbuf_free+0x1c>)
 801b20c:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801b210:	4903      	ldr	r1, [pc, #12]	; (801b220 <pbuf_free+0x20>)
 801b212:	4804      	ldr	r0, [pc, #16]	; (801b224 <pbuf_free+0x24>)
 801b214:	f00a f8be 	bl	8025394 <iprintf>
}
 801b218:	4620      	mov	r0, r4
 801b21a:	bd10      	pop	{r4, pc}
 801b21c:	0804399c 	.word	0x0804399c
 801b220:	080453c8 	.word	0x080453c8
 801b224:	08029fe8 	.word	0x08029fe8

0801b228 <pbuf_clen>:
  while (p != NULL) {
 801b228:	4603      	mov	r3, r0
 801b22a:	b130      	cbz	r0, 801b23a <pbuf_clen+0x12>
  len = 0;
 801b22c:	2000      	movs	r0, #0
    ++len;
 801b22e:	3001      	adds	r0, #1
    p = p->next;
 801b230:	681b      	ldr	r3, [r3, #0]
    ++len;
 801b232:	b280      	uxth	r0, r0
  while (p != NULL) {
 801b234:	2b00      	cmp	r3, #0
 801b236:	d1fa      	bne.n	801b22e <pbuf_clen+0x6>
 801b238:	4770      	bx	lr
}
 801b23a:	4770      	bx	lr

0801b23c <pbuf_ref>:
  if (p != NULL) {
 801b23c:	b120      	cbz	r0, 801b248 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b23e:	7b83      	ldrb	r3, [r0, #14]
 801b240:	3301      	adds	r3, #1
 801b242:	b2db      	uxtb	r3, r3
 801b244:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b246:	b103      	cbz	r3, 801b24a <pbuf_ref+0xe>
}
 801b248:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b24a:	4b03      	ldr	r3, [pc, #12]	; (801b258 <pbuf_ref+0x1c>)
 801b24c:	f240 3242 	movw	r2, #834	; 0x342
 801b250:	4902      	ldr	r1, [pc, #8]	; (801b25c <pbuf_ref+0x20>)
 801b252:	4803      	ldr	r0, [pc, #12]	; (801b260 <pbuf_ref+0x24>)
 801b254:	f00a b89e 	b.w	8025394 <iprintf>
 801b258:	0804399c 	.word	0x0804399c
 801b25c:	08043b28 	.word	0x08043b28
 801b260:	08029fe8 	.word	0x08029fe8

0801b264 <pbuf_cat>:
{
 801b264:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b266:	b330      	cbz	r0, 801b2b6 <pbuf_cat+0x52>
 801b268:	460d      	mov	r5, r1
 801b26a:	b321      	cbz	r1, 801b2b6 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801b26c:	6803      	ldr	r3, [r0, #0]
 801b26e:	4604      	mov	r4, r0
 801b270:	b13b      	cbz	r3, 801b282 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b272:	8922      	ldrh	r2, [r4, #8]
 801b274:	8928      	ldrh	r0, [r5, #8]
 801b276:	4402      	add	r2, r0
 801b278:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801b27a:	461c      	mov	r4, r3
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d1f7      	bne.n	801b272 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801b282:	8963      	ldrh	r3, [r4, #10]
 801b284:	8922      	ldrh	r2, [r4, #8]
 801b286:	429a      	cmp	r2, r3
 801b288:	d010      	beq.n	801b2ac <pbuf_cat+0x48>
 801b28a:	4b0f      	ldr	r3, [pc, #60]	; (801b2c8 <pbuf_cat+0x64>)
 801b28c:	f240 3262 	movw	r2, #866	; 0x362
 801b290:	490e      	ldr	r1, [pc, #56]	; (801b2cc <pbuf_cat+0x68>)
 801b292:	480f      	ldr	r0, [pc, #60]	; (801b2d0 <pbuf_cat+0x6c>)
 801b294:	f00a f87e 	bl	8025394 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801b298:	6823      	ldr	r3, [r4, #0]
 801b29a:	b133      	cbz	r3, 801b2aa <pbuf_cat+0x46>
 801b29c:	4b0a      	ldr	r3, [pc, #40]	; (801b2c8 <pbuf_cat+0x64>)
 801b29e:	f240 3263 	movw	r2, #867	; 0x363
 801b2a2:	490c      	ldr	r1, [pc, #48]	; (801b2d4 <pbuf_cat+0x70>)
 801b2a4:	480a      	ldr	r0, [pc, #40]	; (801b2d0 <pbuf_cat+0x6c>)
 801b2a6:	f00a f875 	bl	8025394 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b2aa:	8923      	ldrh	r3, [r4, #8]
 801b2ac:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801b2ae:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801b2b0:	4413      	add	r3, r2
 801b2b2:	8123      	strh	r3, [r4, #8]
}
 801b2b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b2b6:	4b04      	ldr	r3, [pc, #16]	; (801b2c8 <pbuf_cat+0x64>)
 801b2b8:	f240 3259 	movw	r2, #857	; 0x359
 801b2bc:	4906      	ldr	r1, [pc, #24]	; (801b2d8 <pbuf_cat+0x74>)
 801b2be:	4804      	ldr	r0, [pc, #16]	; (801b2d0 <pbuf_cat+0x6c>)
}
 801b2c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801b2c4:	f00a b866 	b.w	8025394 <iprintf>
 801b2c8:	0804399c 	.word	0x0804399c
 801b2cc:	08043b74 	.word	0x08043b74
 801b2d0:	08029fe8 	.word	0x08029fe8
 801b2d4:	08043ba4 	.word	0x08043ba4
 801b2d8:	08043b3c 	.word	0x08043b3c

0801b2dc <pbuf_chain>:
{
 801b2dc:	b510      	push	{r4, lr}
 801b2de:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801b2e0:	f7ff ffc0 	bl	801b264 <pbuf_cat>
  if (p != NULL) {
 801b2e4:	b124      	cbz	r4, 801b2f0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801b2e6:	7ba3      	ldrb	r3, [r4, #14]
 801b2e8:	3301      	adds	r3, #1
 801b2ea:	b2db      	uxtb	r3, r3
 801b2ec:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b2ee:	b103      	cbz	r3, 801b2f2 <pbuf_chain+0x16>
}
 801b2f0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b2f2:	4b04      	ldr	r3, [pc, #16]	; (801b304 <pbuf_chain+0x28>)
 801b2f4:	f240 3242 	movw	r2, #834	; 0x342
 801b2f8:	4903      	ldr	r1, [pc, #12]	; (801b308 <pbuf_chain+0x2c>)
 801b2fa:	4804      	ldr	r0, [pc, #16]	; (801b30c <pbuf_chain+0x30>)
}
 801b2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801b300:	f00a b848 	b.w	8025394 <iprintf>
 801b304:	0804399c 	.word	0x0804399c
 801b308:	08043b28 	.word	0x08043b28
 801b30c:	08029fe8 	.word	0x08029fe8

0801b310 <pbuf_copy>:
{
 801b310:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b312:	b140      	cbz	r0, 801b326 <pbuf_copy+0x16>
 801b314:	b139      	cbz	r1, 801b326 <pbuf_copy+0x16>
 801b316:	8902      	ldrh	r2, [r0, #8]
 801b318:	890b      	ldrh	r3, [r1, #8]
 801b31a:	429a      	cmp	r2, r3
 801b31c:	d303      	bcc.n	801b326 <pbuf_copy+0x16>
}
 801b31e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b322:	f7ff bcd1 	b.w	801acc8 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b326:	4b05      	ldr	r3, [pc, #20]	; (801b33c <pbuf_copy+0x2c>)
 801b328:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b32c:	4904      	ldr	r1, [pc, #16]	; (801b340 <pbuf_copy+0x30>)
 801b32e:	4805      	ldr	r0, [pc, #20]	; (801b344 <pbuf_copy+0x34>)
 801b330:	f00a f830 	bl	8025394 <iprintf>
}
 801b334:	f06f 000f 	mvn.w	r0, #15
 801b338:	bd08      	pop	{r3, pc}
 801b33a:	bf00      	nop
 801b33c:	0804399c 	.word	0x0804399c
 801b340:	08043bb4 	.word	0x08043bb4
 801b344:	08029fe8 	.word	0x08029fe8

0801b348 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b34c:	4605      	mov	r5, r0
 801b34e:	b370      	cbz	r0, 801b3ae <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b350:	460f      	mov	r7, r1
 801b352:	2900      	cmp	r1, #0
 801b354:	d036      	beq.n	801b3c4 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b356:	4690      	mov	r8, r2
 801b358:	b392      	cbz	r2, 801b3c0 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801b35a:	2600      	movs	r6, #0
 801b35c:	e005      	b.n	801b36a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801b35e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b360:	682d      	ldr	r5, [r5, #0]
 801b362:	f1b8 0f00 	cmp.w	r8, #0
 801b366:	d01f      	beq.n	801b3a8 <pbuf_copy_partial+0x60>
 801b368:	b1f5      	cbz	r5, 801b3a8 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b36a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801b36c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801b370:	b11b      	cbz	r3, 801b37a <pbuf_copy_partial+0x32>
 801b372:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801b374:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801b378:	d2f1      	bcs.n	801b35e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801b37a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b37e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801b380:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b384:	4419      	add	r1, r3
 801b386:	4544      	cmp	r4, r8
 801b388:	bf28      	it	cs
 801b38a:	4644      	movcs	r4, r8
 801b38c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b38e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801b390:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801b394:	f009 f838 	bl	8024408 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801b398:	b2b6      	uxth	r6, r6
      offset = 0;
 801b39a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801b39c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801b3a0:	682d      	ldr	r5, [r5, #0]
 801b3a2:	f1b8 0f00 	cmp.w	r8, #0
 801b3a6:	d1df      	bne.n	801b368 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801b3a8:	4630      	mov	r0, r6
 801b3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801b3ae:	4b0a      	ldr	r3, [pc, #40]	; (801b3d8 <pbuf_copy_partial+0x90>)
 801b3b0:	f240 420a 	movw	r2, #1034	; 0x40a
 801b3b4:	4909      	ldr	r1, [pc, #36]	; (801b3dc <pbuf_copy_partial+0x94>)
 801b3b6:	462e      	mov	r6, r5
 801b3b8:	4809      	ldr	r0, [pc, #36]	; (801b3e0 <pbuf_copy_partial+0x98>)
 801b3ba:	f009 ffeb 	bl	8025394 <iprintf>
 801b3be:	e7f3      	b.n	801b3a8 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801b3c0:	4616      	mov	r6, r2
 801b3c2:	e7f1      	b.n	801b3a8 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801b3c4:	4b04      	ldr	r3, [pc, #16]	; (801b3d8 <pbuf_copy_partial+0x90>)
 801b3c6:	f240 420b 	movw	r2, #1035	; 0x40b
 801b3ca:	4906      	ldr	r1, [pc, #24]	; (801b3e4 <pbuf_copy_partial+0x9c>)
 801b3cc:	463e      	mov	r6, r7
 801b3ce:	4804      	ldr	r0, [pc, #16]	; (801b3e0 <pbuf_copy_partial+0x98>)
 801b3d0:	f009 ffe0 	bl	8025394 <iprintf>
 801b3d4:	e7e8      	b.n	801b3a8 <pbuf_copy_partial+0x60>
 801b3d6:	bf00      	nop
 801b3d8:	0804399c 	.word	0x0804399c
 801b3dc:	08043be4 	.word	0x08043be4
 801b3e0:	08029fe8 	.word	0x08029fe8
 801b3e4:	08043c04 	.word	0x08043c04

0801b3e8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801b3e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b3ec:	2800      	cmp	r0, #0
 801b3ee:	d049      	beq.n	801b484 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b3f0:	460f      	mov	r7, r1
 801b3f2:	2900      	cmp	r1, #0
 801b3f4:	d03c      	beq.n	801b470 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b3f6:	8903      	ldrh	r3, [r0, #8]
 801b3f8:	4604      	mov	r4, r0
 801b3fa:	4690      	mov	r8, r2
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	d32d      	bcc.n	801b45c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b400:	b34a      	cbz	r2, 801b456 <pbuf_take+0x6e>
 801b402:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801b404:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b406:	f8df b094 	ldr.w	fp, [pc, #148]	; 801b49c <pbuf_take+0xb4>
 801b40a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801b4b0 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801b40e:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b410:	19b9      	adds	r1, r7, r6
 801b412:	6860      	ldr	r0, [r4, #4]
 801b414:	42aa      	cmp	r2, r5
 801b416:	bf28      	it	cs
 801b418:	462a      	movcs	r2, r5
 801b41a:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801b41c:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801b41e:	f008 fff3 	bl	8024408 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801b422:	6824      	ldr	r4, [r4, #0]
 801b424:	ebb5 0509 	subs.w	r5, r5, r9
 801b428:	d009      	beq.n	801b43e <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801b42a:	2c00      	cmp	r4, #0
 801b42c:	d1ef      	bne.n	801b40e <pbuf_take+0x26>
 801b42e:	465b      	mov	r3, fp
 801b430:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801b434:	4651      	mov	r1, sl
 801b436:	4818      	ldr	r0, [pc, #96]	; (801b498 <pbuf_take+0xb0>)
 801b438:	f009 ffac 	bl	8025394 <iprintf>
 801b43c:	e7e7      	b.n	801b40e <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801b43e:	45b0      	cmp	r8, r6
 801b440:	d009      	beq.n	801b456 <pbuf_take+0x6e>
 801b442:	4b16      	ldr	r3, [pc, #88]	; (801b49c <pbuf_take+0xb4>)
 801b444:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801b448:	4915      	ldr	r1, [pc, #84]	; (801b4a0 <pbuf_take+0xb8>)
 801b44a:	4813      	ldr	r0, [pc, #76]	; (801b498 <pbuf_take+0xb0>)
 801b44c:	f009 ffa2 	bl	8025394 <iprintf>
  return ERR_OK;
 801b450:	4628      	mov	r0, r5
}
 801b452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801b456:	2000      	movs	r0, #0
}
 801b458:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801b45c:	4b0f      	ldr	r3, [pc, #60]	; (801b49c <pbuf_take+0xb4>)
 801b45e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801b462:	4910      	ldr	r1, [pc, #64]	; (801b4a4 <pbuf_take+0xbc>)
 801b464:	480c      	ldr	r0, [pc, #48]	; (801b498 <pbuf_take+0xb0>)
 801b466:	f009 ff95 	bl	8025394 <iprintf>
 801b46a:	f04f 30ff 	mov.w	r0, #4294967295
 801b46e:	e7f3      	b.n	801b458 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801b470:	4b0a      	ldr	r3, [pc, #40]	; (801b49c <pbuf_take+0xb4>)
 801b472:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801b476:	490c      	ldr	r1, [pc, #48]	; (801b4a8 <pbuf_take+0xc0>)
 801b478:	4807      	ldr	r0, [pc, #28]	; (801b498 <pbuf_take+0xb0>)
 801b47a:	f009 ff8b 	bl	8025394 <iprintf>
 801b47e:	f06f 000f 	mvn.w	r0, #15
 801b482:	e7e9      	b.n	801b458 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801b484:	4b05      	ldr	r3, [pc, #20]	; (801b49c <pbuf_take+0xb4>)
 801b486:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801b48a:	4908      	ldr	r1, [pc, #32]	; (801b4ac <pbuf_take+0xc4>)
 801b48c:	4802      	ldr	r0, [pc, #8]	; (801b498 <pbuf_take+0xb0>)
 801b48e:	f009 ff81 	bl	8025394 <iprintf>
 801b492:	f06f 000f 	mvn.w	r0, #15
 801b496:	e7df      	b.n	801b458 <pbuf_take+0x70>
 801b498:	08029fe8 	.word	0x08029fe8
 801b49c:	0804399c 	.word	0x0804399c
 801b4a0:	08043c94 	.word	0x08043c94
 801b4a4:	08043c5c 	.word	0x08043c5c
 801b4a8:	08043c40 	.word	0x08043c40
 801b4ac:	08043c28 	.word	0x08043c28
 801b4b0:	08043c7c 	.word	0x08043c7c

0801b4b4 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4b4:	b390      	cbz	r0, 801b51c <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801b4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4ba:	460f      	mov	r7, r1
 801b4bc:	4604      	mov	r4, r0
 801b4be:	e002      	b.n	801b4c6 <pbuf_take_at+0x12>
    q = q->next;
 801b4c0:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b4c2:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4c4:	b334      	cbz	r4, 801b514 <pbuf_take_at+0x60>
 801b4c6:	8965      	ldrh	r5, [r4, #10]
 801b4c8:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801b4ca:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801b4ce:	d9f7      	bls.n	801b4c0 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801b4d0:	8921      	ldrh	r1, [r4, #8]
 801b4d2:	189e      	adds	r6, r3, r2
 801b4d4:	42b1      	cmp	r1, r6
 801b4d6:	db1d      	blt.n	801b514 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801b4d8:	1ae9      	subs	r1, r5, r3
 801b4da:	428a      	cmp	r2, r1
 801b4dc:	dc07      	bgt.n	801b4ee <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b4de:	6860      	ldr	r0, [r4, #4]
 801b4e0:	4639      	mov	r1, r7
 801b4e2:	4418      	add	r0, r3
 801b4e4:	f008 ff90 	bl	8024408 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801b4e8:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801b4ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801b4ee:	fa1f f881 	uxth.w	r8, r1
 801b4f2:	6860      	ldr	r0, [r4, #4]
 801b4f4:	4639      	mov	r1, r7
 801b4f6:	4642      	mov	r2, r8
 801b4f8:	4418      	add	r0, r3
 801b4fa:	f008 ff85 	bl	8024408 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801b4fe:	1b70      	subs	r0, r6, r5
 801b500:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801b502:	2a00      	cmp	r2, #0
 801b504:	d0f0      	beq.n	801b4e8 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b506:	eb07 0108 	add.w	r1, r7, r8
 801b50a:	6820      	ldr	r0, [r4, #0]
}
 801b50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801b510:	f7ff bf6a 	b.w	801b3e8 <pbuf_take>
  return ERR_MEM;
 801b514:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801b51c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b520:	4770      	bx	lr
 801b522:	bf00      	nop

0801b524 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801b524:	b538      	push	{r3, r4, r5, lr}
 801b526:	4615      	mov	r5, r2
 801b528:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801b52a:	8929      	ldrh	r1, [r5, #8]
 801b52c:	f7ff fc96 	bl	801ae5c <pbuf_alloc>
  if (q == NULL) {
 801b530:	4604      	mov	r4, r0
 801b532:	b138      	cbz	r0, 801b544 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b534:	8902      	ldrh	r2, [r0, #8]
 801b536:	892b      	ldrh	r3, [r5, #8]
 801b538:	429a      	cmp	r2, r3
 801b53a:	d305      	bcc.n	801b548 <pbuf_clone+0x24>
 801b53c:	4629      	mov	r1, r5
 801b53e:	f7ff fbc3 	bl	801acc8 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b542:	b940      	cbnz	r0, 801b556 <pbuf_clone+0x32>
  return q;
}
 801b544:	4620      	mov	r0, r4
 801b546:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b548:	4b07      	ldr	r3, [pc, #28]	; (801b568 <pbuf_clone+0x44>)
 801b54a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b54e:	4907      	ldr	r1, [pc, #28]	; (801b56c <pbuf_clone+0x48>)
 801b550:	4807      	ldr	r0, [pc, #28]	; (801b570 <pbuf_clone+0x4c>)
 801b552:	f009 ff1f 	bl	8025394 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b556:	4b04      	ldr	r3, [pc, #16]	; (801b568 <pbuf_clone+0x44>)
 801b558:	f240 5224 	movw	r2, #1316	; 0x524
 801b55c:	4905      	ldr	r1, [pc, #20]	; (801b574 <pbuf_clone+0x50>)
 801b55e:	4804      	ldr	r0, [pc, #16]	; (801b570 <pbuf_clone+0x4c>)
 801b560:	f009 ff18 	bl	8025394 <iprintf>
}
 801b564:	4620      	mov	r0, r4
 801b566:	bd38      	pop	{r3, r4, r5, pc}
 801b568:	0804399c 	.word	0x0804399c
 801b56c:	08043bb4 	.word	0x08043bb4
 801b570:	08029fe8 	.word	0x08029fe8
 801b574:	08043cac 	.word	0x08043cac

0801b578 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b578:	b918      	cbnz	r0, 801b582 <pbuf_get_at+0xa>
 801b57a:	e00a      	b.n	801b592 <pbuf_get_at+0x1a>
    q = q->next;
 801b57c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b57e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b580:	b130      	cbz	r0, 801b590 <pbuf_get_at+0x18>
 801b582:	8943      	ldrh	r3, [r0, #10]
 801b584:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b586:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b58a:	d9f7      	bls.n	801b57c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801b58c:	6843      	ldr	r3, [r0, #4]
 801b58e:	5c58      	ldrb	r0, [r3, r1]
}
 801b590:	4770      	bx	lr
 801b592:	4770      	bx	lr

0801b594 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b594:	b140      	cbz	r0, 801b5a8 <pbuf_try_get_at+0x14>
 801b596:	8943      	ldrh	r3, [r0, #10]
 801b598:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b59a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b59e:	d806      	bhi.n	801b5ae <pbuf_try_get_at+0x1a>
    q = q->next;
 801b5a0:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b5a2:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	d1f6      	bne.n	801b596 <pbuf_try_get_at+0x2>
  }
  return -1;
 801b5a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b5ac:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801b5ae:	6843      	ldr	r3, [r0, #4]
 801b5b0:	5c58      	ldrb	r0, [r3, r1]
 801b5b2:	4770      	bx	lr

0801b5b4 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5b4:	b918      	cbnz	r0, 801b5be <pbuf_put_at+0xa>
 801b5b6:	e00a      	b.n	801b5ce <pbuf_put_at+0x1a>
    q = q->next;
 801b5b8:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b5ba:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5bc:	b130      	cbz	r0, 801b5cc <pbuf_put_at+0x18>
 801b5be:	8943      	ldrh	r3, [r0, #10]
 801b5c0:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b5c2:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5c6:	d9f7      	bls.n	801b5b8 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801b5c8:	6843      	ldr	r3, [r0, #4]
 801b5ca:	545a      	strb	r2, [r3, r1]
  }
}
 801b5cc:	4770      	bx	lr
 801b5ce:	4770      	bx	lr

0801b5d0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801b5d0:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801b5d2:	8905      	ldrh	r5, [r0, #8]
 801b5d4:	18cc      	adds	r4, r1, r3
 801b5d6:	42a5      	cmp	r5, r4
 801b5d8:	db2e      	blt.n	801b638 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801b5da:	8944      	ldrh	r4, [r0, #10]
 801b5dc:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801b5de:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b5e2:	d803      	bhi.n	801b5ec <pbuf_memcmp+0x1c>
    q = q->next;
 801b5e4:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801b5e6:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b5e8:	2800      	cmp	r0, #0
 801b5ea:	d1f6      	bne.n	801b5da <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801b5ec:	b1f3      	cbz	r3, 801b62c <pbuf_memcmp+0x5c>
 801b5ee:	2500      	movs	r5, #0
 801b5f0:	1e56      	subs	r6, r2, #1
 801b5f2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801b5f4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801b5f8:	4604      	mov	r4, r0
 801b5fa:	fa1f fc8c 	uxth.w	ip, ip
 801b5fe:	b920      	cbnz	r0, 801b60a <pbuf_memcmp+0x3a>
 801b600:	e00b      	b.n	801b61a <pbuf_memcmp+0x4a>
    q = q->next;
 801b602:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b604:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b608:	b13c      	cbz	r4, 801b61a <pbuf_memcmp+0x4a>
 801b60a:	8962      	ldrh	r2, [r4, #10]
 801b60c:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801b60e:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b612:	d2f6      	bcs.n	801b602 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801b614:	6862      	ldr	r2, [r4, #4]
 801b616:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801b61a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801b61e:	42a2      	cmp	r2, r4
 801b620:	d106      	bne.n	801b630 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801b622:	3501      	adds	r5, #1
 801b624:	fa1f fe85 	uxth.w	lr, r5
 801b628:	4573      	cmp	r3, lr
 801b62a:	d8e3      	bhi.n	801b5f4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801b62c:	2000      	movs	r0, #0
}
 801b62e:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801b630:	f10e 0001 	add.w	r0, lr, #1
 801b634:	b280      	uxth	r0, r0
}
 801b636:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801b638:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b63c:	bd70      	pop	{r4, r5, r6, pc}
 801b63e:	bf00      	nop

0801b640 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b642:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b644:	8905      	ldrh	r5, [r0, #8]
{
 801b646:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801b648:	4422      	add	r2, r4
 801b64a:	4295      	cmp	r5, r2
 801b64c:	db15      	blt.n	801b67a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b64e:	1aed      	subs	r5, r5, r3
 801b650:	4606      	mov	r6, r0
 801b652:	460f      	mov	r7, r1
 801b654:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b656:	42a5      	cmp	r5, r4
 801b658:	d204      	bcs.n	801b664 <pbuf_memfind+0x24>
 801b65a:	e00e      	b.n	801b67a <pbuf_memfind+0x3a>
 801b65c:	fa1f f48c 	uxth.w	r4, ip
 801b660:	42a5      	cmp	r5, r4
 801b662:	d30a      	bcc.n	801b67a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801b664:	4621      	mov	r1, r4
 801b666:	463a      	mov	r2, r7
 801b668:	4630      	mov	r0, r6
 801b66a:	f7ff ffb1 	bl	801b5d0 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b66e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801b672:	2800      	cmp	r0, #0
 801b674:	d1f2      	bne.n	801b65c <pbuf_memfind+0x1c>
 801b676:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801b678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801b67a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b67e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b680 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801b680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b684:	4e33      	ldr	r6, [pc, #204]	; (801b754 <raw_input+0xd4>)
{
 801b686:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b688:	6831      	ldr	r1, [r6, #0]
 801b68a:	6970      	ldr	r0, [r6, #20]
 801b68c:	f007 fb90 	bl	8022db0 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801b690:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b694:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801b696:	4b30      	ldr	r3, [pc, #192]	; (801b758 <raw_input+0xd8>)
 801b698:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801b69a:	2c00      	cmp	r4, #0
 801b69c:	d056      	beq.n	801b74c <raw_input+0xcc>
 801b69e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b6a0:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b6a2:	f106 0b10 	add.w	fp, r6, #16
 801b6a6:	46ca      	mov	sl, r9
  prev = NULL;
 801b6a8:	4606      	mov	r6, r0
 801b6aa:	e004      	b.n	801b6b6 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801b6ac:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801b6ae:	4626      	mov	r6, r4
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d037      	beq.n	801b724 <raw_input+0xa4>
 801b6b4:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b6b6:	7c23      	ldrb	r3, [r4, #16]
 801b6b8:	42ab      	cmp	r3, r5
 801b6ba:	d1f7      	bne.n	801b6ac <raw_input+0x2c>
 801b6bc:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6be:	b13a      	cbz	r2, 801b6d0 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b6c0:	4b24      	ldr	r3, [pc, #144]	; (801b754 <raw_input+0xd4>)
 801b6c2:	685b      	ldr	r3, [r3, #4]
 801b6c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b6c8:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b6ca:	b2db      	uxtb	r3, r3
 801b6cc:	429a      	cmp	r2, r3
 801b6ce:	d1ed      	bne.n	801b6ac <raw_input+0x2c>
 801b6d0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801b6d2:	f1ba 0f00 	cmp.w	sl, #0
 801b6d6:	d027      	beq.n	801b728 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d1e7      	bne.n	801b6ac <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b6dc:	7c63      	ldrb	r3, [r4, #17]
 801b6de:	07db      	lsls	r3, r3, #31
 801b6e0:	d504      	bpl.n	801b6ec <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801b6e2:	4b1c      	ldr	r3, [pc, #112]	; (801b754 <raw_input+0xd4>)
 801b6e4:	6862      	ldr	r2, [r4, #4]
 801b6e6:	691b      	ldr	r3, [r3, #16]
 801b6e8:	429a      	cmp	r2, r3
 801b6ea:	d1df      	bne.n	801b6ac <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801b6ec:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801b6f0:	f1b9 0f00 	cmp.w	r9, #0
 801b6f4:	d0da      	beq.n	801b6ac <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b6f6:	465b      	mov	r3, fp
 801b6f8:	4642      	mov	r2, r8
 801b6fa:	4621      	mov	r1, r4
 801b6fc:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801b6fe:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b702:	47c8      	blx	r9
        if (eaten != 0) {
 801b704:	b9c8      	cbnz	r0, 801b73a <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801b706:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b70a:	42bb      	cmp	r3, r7
 801b70c:	d013      	beq.n	801b736 <raw_input+0xb6>
 801b70e:	4b13      	ldr	r3, [pc, #76]	; (801b75c <raw_input+0xdc>)
 801b710:	22c0      	movs	r2, #192	; 0xc0
 801b712:	4913      	ldr	r1, [pc, #76]	; (801b760 <raw_input+0xe0>)
 801b714:	4626      	mov	r6, r4
 801b716:	4813      	ldr	r0, [pc, #76]	; (801b764 <raw_input+0xe4>)
 801b718:	f009 fe3c 	bl	8025394 <iprintf>
    pcb = pcb->next;
 801b71c:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801b71e:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801b720:	2b00      	cmp	r3, #0
 801b722:	d1c7      	bne.n	801b6b4 <raw_input+0x34>
  }
  return ret;
}
 801b724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801b728:	2b00      	cmp	r3, #0
 801b72a:	d0d7      	beq.n	801b6dc <raw_input+0x5c>
 801b72c:	4a09      	ldr	r2, [pc, #36]	; (801b754 <raw_input+0xd4>)
 801b72e:	6952      	ldr	r2, [r2, #20]
 801b730:	4293      	cmp	r3, r2
 801b732:	d1bb      	bne.n	801b6ac <raw_input+0x2c>
 801b734:	e7d2      	b.n	801b6dc <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801b736:	2002      	movs	r0, #2
 801b738:	e7b8      	b.n	801b6ac <raw_input+0x2c>
          if (prev != NULL) {
 801b73a:	b14e      	cbz	r6, 801b750 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801b73c:	4906      	ldr	r1, [pc, #24]	; (801b758 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801b73e:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801b740:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801b742:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801b744:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801b746:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801b748:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801b74a:	e7eb      	b.n	801b724 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b74c:	4620      	mov	r0, r4
 801b74e:	e7e9      	b.n	801b724 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801b750:	2001      	movs	r0, #1
 801b752:	e7e7      	b.n	801b724 <raw_input+0xa4>
 801b754:	2001ef20 	.word	0x2001ef20
 801b758:	2002e0b8 	.word	0x2002e0b8
 801b75c:	08043cc0 	.word	0x08043cc0
 801b760:	08043cf0 	.word	0x08043cf0
 801b764:	08029fe8 	.word	0x08029fe8

0801b768 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b768:	b110      	cbz	r0, 801b770 <raw_netif_ip_addr_changed+0x8>
 801b76a:	6802      	ldr	r2, [r0, #0]
 801b76c:	b101      	cbz	r1, 801b770 <raw_netif_ip_addr_changed+0x8>
 801b76e:	b902      	cbnz	r2, 801b772 <raw_netif_ip_addr_changed+0xa>
 801b770:	4770      	bx	lr
 801b772:	680b      	ldr	r3, [r1, #0]
 801b774:	2b00      	cmp	r3, #0
 801b776:	d0fb      	beq.n	801b770 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b778:	4b08      	ldr	r3, [pc, #32]	; (801b79c <raw_netif_ip_addr_changed+0x34>)
 801b77a:	681b      	ldr	r3, [r3, #0]
 801b77c:	2b00      	cmp	r3, #0
 801b77e:	d0f7      	beq.n	801b770 <raw_netif_ip_addr_changed+0x8>
{
 801b780:	b410      	push	{r4}
 801b782:	e000      	b.n	801b786 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801b784:	6802      	ldr	r2, [r0, #0]
 801b786:	681c      	ldr	r4, [r3, #0]
 801b788:	4294      	cmp	r4, r2
 801b78a:	d101      	bne.n	801b790 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801b78c:	680a      	ldr	r2, [r1, #0]
 801b78e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b790:	68db      	ldr	r3, [r3, #12]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d1f6      	bne.n	801b784 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801b796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b79a:	4770      	bx	lr
 801b79c:	2002e0b8 	.word	0x2002e0b8

0801b7a0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b7a0:	b4f0      	push	{r4, r5, r6, r7}
 801b7a2:	4f13      	ldr	r7, [pc, #76]	; (801b7f0 <tcp_new_port+0x50>)
 801b7a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b7a8:	4e12      	ldr	r6, [pc, #72]	; (801b7f4 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b7aa:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b7ae:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7b0:	4d11      	ldr	r5, [pc, #68]	; (801b7f8 <tcp_new_port+0x58>)
  tcp_port++;
 801b7b2:	3001      	adds	r0, #1
 801b7b4:	4c11      	ldr	r4, [pc, #68]	; (801b7fc <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7b6:	462b      	mov	r3, r5
  tcp_port++;
 801b7b8:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b7ba:	4560      	cmp	r0, ip
 801b7bc:	bf08      	it	eq
 801b7be:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	b913      	cbnz	r3, 801b7cc <tcp_new_port+0x2c>
 801b7c6:	e00b      	b.n	801b7e0 <tcp_new_port+0x40>
 801b7c8:	68db      	ldr	r3, [r3, #12]
 801b7ca:	b14b      	cbz	r3, 801b7e0 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801b7cc:	8ada      	ldrh	r2, [r3, #22]
 801b7ce:	4282      	cmp	r2, r0
 801b7d0:	d1fa      	bne.n	801b7c8 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b7d2:	3901      	subs	r1, #1
 801b7d4:	b289      	uxth	r1, r1
 801b7d6:	2900      	cmp	r1, #0
 801b7d8:	d1eb      	bne.n	801b7b2 <tcp_new_port+0x12>
 801b7da:	8038      	strh	r0, [r7, #0]
          return 0;
 801b7dc:	4608      	mov	r0, r1
 801b7de:	e005      	b.n	801b7ec <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b7e0:	42b4      	cmp	r4, r6
 801b7e2:	d002      	beq.n	801b7ea <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b7e4:	f854 3b04 	ldr.w	r3, [r4], #4
 801b7e8:	e7eb      	b.n	801b7c2 <tcp_new_port+0x22>
 801b7ea:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801b7ec:	bcf0      	pop	{r4, r5, r6, r7}
 801b7ee:	4770      	bx	lr
 801b7f0:	20000418 	.word	0x20000418
 801b7f4:	08044430 	.word	0x08044430
 801b7f8:	2002e0c8 	.word	0x2002e0c8
 801b7fc:	08044424 	.word	0x08044424

0801b800 <tcp_close_shutdown_fin>:
{
 801b800:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b802:	4604      	mov	r4, r0
 801b804:	b310      	cbz	r0, 801b84c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801b806:	7d23      	ldrb	r3, [r4, #20]
 801b808:	2b04      	cmp	r3, #4
 801b80a:	d005      	beq.n	801b818 <tcp_close_shutdown_fin+0x18>
 801b80c:	2b07      	cmp	r3, #7
 801b80e:	d00e      	beq.n	801b82e <tcp_close_shutdown_fin+0x2e>
 801b810:	2b03      	cmp	r3, #3
 801b812:	d001      	beq.n	801b818 <tcp_close_shutdown_fin+0x18>
 801b814:	2000      	movs	r0, #0
}
 801b816:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b818:	4620      	mov	r0, r4
 801b81a:	f003 fd33 	bl	801f284 <tcp_send_fin>
      if (err == ERR_OK) {
 801b81e:	b950      	cbnz	r0, 801b836 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801b820:	2305      	movs	r3, #5
 801b822:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801b824:	4620      	mov	r0, r4
 801b826:	f003 fe9d 	bl	801f564 <tcp_output>
 801b82a:	2000      	movs	r0, #0
}
 801b82c:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b82e:	4620      	mov	r0, r4
 801b830:	f003 fd28 	bl	801f284 <tcp_send_fin>
      if (err == ERR_OK) {
 801b834:	b138      	cbz	r0, 801b846 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801b836:	1c43      	adds	r3, r0, #1
 801b838:	d1ed      	bne.n	801b816 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b83a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801b83c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b83e:	f043 0308 	orr.w	r3, r3, #8
 801b842:	8363      	strh	r3, [r4, #26]
}
 801b844:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801b846:	2309      	movs	r3, #9
 801b848:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801b84a:	e7eb      	b.n	801b824 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b84c:	4b03      	ldr	r3, [pc, #12]	; (801b85c <tcp_close_shutdown_fin+0x5c>)
 801b84e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801b852:	4903      	ldr	r1, [pc, #12]	; (801b860 <tcp_close_shutdown_fin+0x60>)
 801b854:	4803      	ldr	r0, [pc, #12]	; (801b864 <tcp_close_shutdown_fin+0x64>)
 801b856:	f009 fd9d 	bl	8025394 <iprintf>
 801b85a:	e7d4      	b.n	801b806 <tcp_close_shutdown_fin+0x6>
 801b85c:	08043d3c 	.word	0x08043d3c
 801b860:	08043d6c 	.word	0x08043d6c
 801b864:	08029fe8 	.word	0x08029fe8

0801b868 <tcp_init>:
{
 801b868:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b86a:	f009 fe37 	bl	80254dc <rand>
 801b86e:	4b02      	ldr	r3, [pc, #8]	; (801b878 <tcp_init+0x10>)
 801b870:	4a02      	ldr	r2, [pc, #8]	; (801b87c <tcp_init+0x14>)
 801b872:	4303      	orrs	r3, r0
 801b874:	8013      	strh	r3, [r2, #0]
}
 801b876:	bd08      	pop	{r3, pc}
 801b878:	ffffc000 	.word	0xffffc000
 801b87c:	20000418 	.word	0x20000418

0801b880 <tcp_free>:
{
 801b880:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b882:	7d03      	ldrb	r3, [r0, #20]
{
 801b884:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b886:	2b01      	cmp	r3, #1
 801b888:	d005      	beq.n	801b896 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801b88a:	4621      	mov	r1, r4
 801b88c:	2002      	movs	r0, #2
}
 801b88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b892:	f7fe bf9d 	b.w	801a7d0 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b896:	4906      	ldr	r1, [pc, #24]	; (801b8b0 <tcp_free+0x30>)
 801b898:	22d4      	movs	r2, #212	; 0xd4
 801b89a:	4b06      	ldr	r3, [pc, #24]	; (801b8b4 <tcp_free+0x34>)
 801b89c:	4806      	ldr	r0, [pc, #24]	; (801b8b8 <tcp_free+0x38>)
 801b89e:	f009 fd79 	bl	8025394 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b8a2:	4621      	mov	r1, r4
 801b8a4:	2002      	movs	r0, #2
}
 801b8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b8aa:	f7fe bf91 	b.w	801a7d0 <memp_free>
 801b8ae:	bf00      	nop
 801b8b0:	08043d78 	.word	0x08043d78
 801b8b4:	08043d3c 	.word	0x08043d3c
 801b8b8:	08029fe8 	.word	0x08029fe8

0801b8bc <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801b8bc:	2900      	cmp	r1, #0
{
 801b8be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801b8c0:	4b26      	ldr	r3, [pc, #152]	; (801b95c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801b8c2:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801b8c4:	bf14      	ite	ne
 801b8c6:	460e      	movne	r6, r1
 801b8c8:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b8ca:	2800      	cmp	r0, #0
 801b8cc:	d03c      	beq.n	801b948 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b8ce:	7d03      	ldrb	r3, [r0, #20]
 801b8d0:	4607      	mov	r7, r0
 801b8d2:	bb7b      	cbnz	r3, 801b934 <tcp_bind+0x78>
  if (port == 0) {
 801b8d4:	b31a      	cbz	r2, 801b91e <tcp_bind+0x62>
 801b8d6:	4922      	ldr	r1, [pc, #136]	; (801b960 <tcp_bind+0xa4>)
 801b8d8:	4b22      	ldr	r3, [pc, #136]	; (801b964 <tcp_bind+0xa8>)
 801b8da:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b8de:	681b      	ldr	r3, [r3, #0]
 801b8e0:	b913      	cbnz	r3, 801b8e8 <tcp_bind+0x2c>
 801b8e2:	e00e      	b.n	801b902 <tcp_bind+0x46>
 801b8e4:	68db      	ldr	r3, [r3, #12]
 801b8e6:	b163      	cbz	r3, 801b902 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801b8e8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801b8ec:	4594      	cmp	ip, r2
 801b8ee:	d1f9      	bne.n	801b8e4 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b8f0:	681c      	ldr	r4, [r3, #0]
 801b8f2:	b11c      	cbz	r4, 801b8fc <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801b8f4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b8f6:	b10d      	cbz	r5, 801b8fc <tcp_bind+0x40>
 801b8f8:	42ac      	cmp	r4, r5
 801b8fa:	d1f3      	bne.n	801b8e4 <tcp_bind+0x28>
              return ERR_USE;
 801b8fc:	f06f 0007 	mvn.w	r0, #7
}
 801b900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801b902:	4281      	cmp	r1, r0
 801b904:	d113      	bne.n	801b92e <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801b906:	6833      	ldr	r3, [r6, #0]
 801b908:	b103      	cbz	r3, 801b90c <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b90a:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b90c:	4b16      	ldr	r3, [pc, #88]	; (801b968 <tcp_bind+0xac>)
  pcb->local_port = port;
 801b90e:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b910:	681a      	ldr	r2, [r3, #0]
 801b912:	601f      	str	r7, [r3, #0]
 801b914:	60fa      	str	r2, [r7, #12]
 801b916:	f004 f951 	bl	801fbbc <tcp_timer_needed>
  return ERR_OK;
 801b91a:	2000      	movs	r0, #0
}
 801b91c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801b91e:	f7ff ff3f 	bl	801b7a0 <tcp_new_port>
    if (port == 0) {
 801b922:	4602      	mov	r2, r0
 801b924:	2800      	cmp	r0, #0
 801b926:	d1ee      	bne.n	801b906 <tcp_bind+0x4a>
      return ERR_BUF;
 801b928:	f06f 0001 	mvn.w	r0, #1
}
 801b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b92e:	f851 3b04 	ldr.w	r3, [r1], #4
 801b932:	e7d4      	b.n	801b8de <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b934:	4b0d      	ldr	r3, [pc, #52]	; (801b96c <tcp_bind+0xb0>)
 801b936:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b93a:	490d      	ldr	r1, [pc, #52]	; (801b970 <tcp_bind+0xb4>)
 801b93c:	480d      	ldr	r0, [pc, #52]	; (801b974 <tcp_bind+0xb8>)
 801b93e:	f009 fd29 	bl	8025394 <iprintf>
 801b942:	f06f 0005 	mvn.w	r0, #5
}
 801b946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b948:	4b08      	ldr	r3, [pc, #32]	; (801b96c <tcp_bind+0xb0>)
 801b94a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b94e:	490a      	ldr	r1, [pc, #40]	; (801b978 <tcp_bind+0xbc>)
 801b950:	4808      	ldr	r0, [pc, #32]	; (801b974 <tcp_bind+0xb8>)
 801b952:	f009 fd1f 	bl	8025394 <iprintf>
 801b956:	f06f 000f 	mvn.w	r0, #15
}
 801b95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b95c:	08045954 	.word	0x08045954
 801b960:	08044424 	.word	0x08044424
 801b964:	2002e0c8 	.word	0x2002e0c8
 801b968:	2002e0c4 	.word	0x2002e0c4
 801b96c:	08043d3c 	.word	0x08043d3c
 801b970:	08043da4 	.word	0x08043da4
 801b974:	08029fe8 	.word	0x08029fe8
 801b978:	08043d8c 	.word	0x08043d8c

0801b97c <tcp_listen_with_backlog_and_err>:
{
 801b97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b97e:	4604      	mov	r4, r0
{
 801b980:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b982:	2800      	cmp	r0, #0
 801b984:	d060      	beq.n	801ba48 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b986:	7d05      	ldrb	r5, [r0, #20]
 801b988:	2d00      	cmp	r5, #0
 801b98a:	d14a      	bne.n	801ba22 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b98c:	f240 3272 	movw	r2, #882	; 0x372
 801b990:	4933      	ldr	r1, [pc, #204]	; (801ba60 <tcp_listen_with_backlog_and_err+0xe4>)
 801b992:	2003      	movs	r0, #3
 801b994:	f7fe fee6 	bl	801a764 <memp_malloc_fn>
  if (lpcb == NULL) {
 801b998:	4606      	mov	r6, r0
 801b99a:	2800      	cmp	r0, #0
 801b99c:	d051      	beq.n	801ba42 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801b99e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801b9a0:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801b9a2:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801b9a4:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801b9a6:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801b9a8:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801b9aa:	7d62      	ldrb	r2, [r4, #21]
 801b9ac:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801b9ae:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b9b0:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801b9b2:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801b9b4:	7ae2      	ldrb	r2, [r4, #11]
 801b9b6:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801b9b8:	7aa2      	ldrb	r2, [r4, #10]
 801b9ba:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b9bc:	6822      	ldr	r2, [r4, #0]
 801b9be:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801b9c0:	b99b      	cbnz	r3, 801b9ea <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b9c2:	7d23      	ldrb	r3, [r4, #20]
 801b9c4:	2b01      	cmp	r3, #1
 801b9c6:	d020      	beq.n	801ba0a <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b9c8:	4621      	mov	r1, r4
 801b9ca:	2002      	movs	r0, #2
 801b9cc:	f7fe ff00 	bl	801a7d0 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9d0:	4b24      	ldr	r3, [pc, #144]	; (801ba64 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801b9d2:	4925      	ldr	r1, [pc, #148]	; (801ba68 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9d4:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801b9d6:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b9d8:	60f2      	str	r2, [r6, #12]
 801b9da:	601e      	str	r6, [r3, #0]
 801b9dc:	f004 f8ee 	bl	801fbbc <tcp_timer_needed>
  res = ERR_OK;
 801b9e0:	2300      	movs	r3, #0
  if (err != NULL) {
 801b9e2:	b107      	cbz	r7, 801b9e6 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801b9e4:	703b      	strb	r3, [r7, #0]
}
 801b9e6:	4630      	mov	r0, r6
 801b9e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b9ea:	4a20      	ldr	r2, [pc, #128]	; (801ba6c <tcp_listen_with_backlog_and_err+0xf0>)
 801b9ec:	6813      	ldr	r3, [r2, #0]
 801b9ee:	42a3      	cmp	r3, r4
 801b9f0:	d012      	beq.n	801ba18 <tcp_listen_with_backlog_and_err+0x9c>
 801b9f2:	b12b      	cbz	r3, 801ba00 <tcp_listen_with_backlog_and_err+0x84>
 801b9f4:	68d9      	ldr	r1, [r3, #12]
 801b9f6:	42a1      	cmp	r1, r4
 801b9f8:	d01e      	beq.n	801ba38 <tcp_listen_with_backlog_and_err+0xbc>
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d1f9      	bne.n	801b9f4 <tcp_listen_with_backlog_and_err+0x78>
 801ba00:	2300      	movs	r3, #0
 801ba02:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ba04:	7d23      	ldrb	r3, [r4, #20]
 801ba06:	2b01      	cmp	r3, #1
 801ba08:	d1de      	bne.n	801b9c8 <tcp_listen_with_backlog_and_err+0x4c>
 801ba0a:	4b15      	ldr	r3, [pc, #84]	; (801ba60 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba0c:	22d4      	movs	r2, #212	; 0xd4
 801ba0e:	4918      	ldr	r1, [pc, #96]	; (801ba70 <tcp_listen_with_backlog_and_err+0xf4>)
 801ba10:	4818      	ldr	r0, [pc, #96]	; (801ba74 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba12:	f009 fcbf 	bl	8025394 <iprintf>
 801ba16:	e7d7      	b.n	801b9c8 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba18:	68e3      	ldr	r3, [r4, #12]
 801ba1a:	6013      	str	r3, [r2, #0]
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	60e3      	str	r3, [r4, #12]
 801ba20:	e7f0      	b.n	801ba04 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba22:	4b0f      	ldr	r3, [pc, #60]	; (801ba60 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba24:	f240 325a 	movw	r2, #858	; 0x35a
 801ba28:	4913      	ldr	r1, [pc, #76]	; (801ba78 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ba2a:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801ba2c:	4811      	ldr	r0, [pc, #68]	; (801ba74 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba2e:	f009 fcb1 	bl	8025394 <iprintf>
 801ba32:	f06f 030e 	mvn.w	r3, #14
 801ba36:	e7d4      	b.n	801b9e2 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801ba38:	68e2      	ldr	r2, [r4, #12]
 801ba3a:	60da      	str	r2, [r3, #12]
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	60e3      	str	r3, [r4, #12]
 801ba40:	e7e0      	b.n	801ba04 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801ba42:	f04f 33ff 	mov.w	r3, #4294967295
 801ba46:	e7cc      	b.n	801b9e2 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba48:	4b05      	ldr	r3, [pc, #20]	; (801ba60 <tcp_listen_with_backlog_and_err+0xe4>)
 801ba4a:	f240 3259 	movw	r2, #857	; 0x359
 801ba4e:	490b      	ldr	r1, [pc, #44]	; (801ba7c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801ba50:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801ba52:	4808      	ldr	r0, [pc, #32]	; (801ba74 <tcp_listen_with_backlog_and_err+0xf8>)
 801ba54:	f009 fc9e 	bl	8025394 <iprintf>
 801ba58:	f06f 030f 	mvn.w	r3, #15
 801ba5c:	e7c1      	b.n	801b9e2 <tcp_listen_with_backlog_and_err+0x66>
 801ba5e:	bf00      	nop
 801ba60:	08043d3c 	.word	0x08043d3c
 801ba64:	2002e0c8 	.word	0x2002e0c8
 801ba68:	0801c711 	.word	0x0801c711
 801ba6c:	2002e0c4 	.word	0x2002e0c4
 801ba70:	08043d78 	.word	0x08043d78
 801ba74:	08029fe8 	.word	0x08029fe8
 801ba78:	08043dfc 	.word	0x08043dfc
 801ba7c:	08043dcc 	.word	0x08043dcc

0801ba80 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801ba80:	2200      	movs	r2, #0
 801ba82:	f7ff bf7b 	b.w	801b97c <tcp_listen_with_backlog_and_err>
 801ba86:	bf00      	nop

0801ba88 <tcp_update_rcv_ann_wnd>:
{
 801ba88:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801ba8a:	4604      	mov	r4, r0
 801ba8c:	b1c0      	cbz	r0, 801bac0 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ba8e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ba90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801ba92:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801ba96:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801ba98:	1ad0      	subs	r0, r2, r3
 801ba9a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801ba9e:	4428      	add	r0, r5
 801baa0:	bf94      	ite	ls
 801baa2:	eba0 010c 	subls.w	r1, r0, ip
 801baa6:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801baaa:	2900      	cmp	r1, #0
 801baac:	db01      	blt.n	801bab2 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801baae:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801bab0:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801bab2:	1aea      	subs	r2, r5, r3
 801bab4:	2a00      	cmp	r2, #0
 801bab6:	dd0b      	ble.n	801bad0 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801bab8:	2300      	movs	r3, #0
    return 0;
 801baba:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801babc:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801babe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801bac0:	4b0b      	ldr	r3, [pc, #44]	; (801baf0 <tcp_update_rcv_ann_wnd+0x68>)
 801bac2:	f240 32a6 	movw	r2, #934	; 0x3a6
 801bac6:	490b      	ldr	r1, [pc, #44]	; (801baf4 <tcp_update_rcv_ann_wnd+0x6c>)
 801bac8:	480b      	ldr	r0, [pc, #44]	; (801baf8 <tcp_update_rcv_ann_wnd+0x70>)
 801baca:	f009 fc63 	bl	8025394 <iprintf>
 801bace:	e7de      	b.n	801ba8e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801bad0:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801bad2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801bad6:	d202      	bcs.n	801bade <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801bad8:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801bada:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801badc:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801bade:	4b04      	ldr	r3, [pc, #16]	; (801baf0 <tcp_update_rcv_ann_wnd+0x68>)
 801bae0:	f240 32b6 	movw	r2, #950	; 0x3b6
 801bae4:	4905      	ldr	r1, [pc, #20]	; (801bafc <tcp_update_rcv_ann_wnd+0x74>)
 801bae6:	4804      	ldr	r0, [pc, #16]	; (801baf8 <tcp_update_rcv_ann_wnd+0x70>)
 801bae8:	f009 fc54 	bl	8025394 <iprintf>
 801baec:	e7f4      	b.n	801bad8 <tcp_update_rcv_ann_wnd+0x50>
 801baee:	bf00      	nop
 801baf0:	08043d3c 	.word	0x08043d3c
 801baf4:	08043e34 	.word	0x08043e34
 801baf8:	08029fe8 	.word	0x08029fe8
 801bafc:	08043e58 	.word	0x08043e58

0801bb00 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bb00:	b340      	cbz	r0, 801bb54 <tcp_recved+0x54>
{
 801bb02:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bb04:	7d03      	ldrb	r3, [r0, #20]
 801bb06:	4605      	mov	r5, r0
 801bb08:	460c      	mov	r4, r1
 801bb0a:	2b01      	cmp	r3, #1
 801bb0c:	d01a      	beq.n	801bb44 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801bb0e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801bb10:	1919      	adds	r1, r3, r4
 801bb12:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801bb14:	428b      	cmp	r3, r1
 801bb16:	d802      	bhi.n	801bb1e <tcp_recved+0x1e>
 801bb18:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801bb1c:	d901      	bls.n	801bb22 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801bb1e:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801bb22:	4628      	mov	r0, r5
 801bb24:	8529      	strh	r1, [r5, #40]	; 0x28
 801bb26:	f7ff ffaf 	bl	801ba88 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801bb2a:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801bb2e:	d200      	bcs.n	801bb32 <tcp_recved+0x32>
}
 801bb30:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801bb32:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801bb34:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801bb36:	f043 0302 	orr.w	r3, r3, #2
 801bb3a:	836b      	strh	r3, [r5, #26]
}
 801bb3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801bb40:	f003 bd10 	b.w	801f564 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801bb44:	4b07      	ldr	r3, [pc, #28]	; (801bb64 <tcp_recved+0x64>)
 801bb46:	f240 32d2 	movw	r2, #978	; 0x3d2
 801bb4a:	4907      	ldr	r1, [pc, #28]	; (801bb68 <tcp_recved+0x68>)
 801bb4c:	4807      	ldr	r0, [pc, #28]	; (801bb6c <tcp_recved+0x6c>)
 801bb4e:	f009 fc21 	bl	8025394 <iprintf>
 801bb52:	e7dc      	b.n	801bb0e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801bb54:	4b03      	ldr	r3, [pc, #12]	; (801bb64 <tcp_recved+0x64>)
 801bb56:	f240 32cf 	movw	r2, #975	; 0x3cf
 801bb5a:	4905      	ldr	r1, [pc, #20]	; (801bb70 <tcp_recved+0x70>)
 801bb5c:	4803      	ldr	r0, [pc, #12]	; (801bb6c <tcp_recved+0x6c>)
 801bb5e:	f009 bc19 	b.w	8025394 <iprintf>
 801bb62:	bf00      	nop
 801bb64:	08043d3c 	.word	0x08043d3c
 801bb68:	08043e8c 	.word	0x08043e8c
 801bb6c:	08029fe8 	.word	0x08029fe8
 801bb70:	08043e74 	.word	0x08043e74

0801bb74 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb76:	2800      	cmp	r0, #0
 801bb78:	f000 808c 	beq.w	801bc94 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bb7c:	2900      	cmp	r1, #0
 801bb7e:	d07f      	beq.n	801bc80 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801bb80:	461e      	mov	r6, r3
 801bb82:	7d03      	ldrb	r3, [r0, #20]
 801bb84:	4604      	mov	r4, r0
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d16a      	bne.n	801bc60 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801bb8a:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bb8c:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801bb8e:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801bb90:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bb92:	2800      	cmp	r0, #0
 801bb94:	d049      	beq.n	801bc2a <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801bb96:	f7ff f80d 	bl	801abb4 <netif_get_by_index>
 801bb9a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801bb9c:	2d00      	cmp	r5, #0
 801bb9e:	d06c      	beq.n	801bc7a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801bba0:	6823      	ldr	r3, [r4, #0]
 801bba2:	b90b      	cbnz	r3, 801bba8 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801bba4:	686b      	ldr	r3, [r5, #4]
 801bba6:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801bba8:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801bbaa:	b927      	cbnz	r7, 801bbb6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801bbac:	f7ff fdf8 	bl	801b7a0 <tcp_new_port>
 801bbb0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801bbb2:	2800      	cmp	r0, #0
 801bbb4:	d05e      	beq.n	801bc74 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801bbb6:	4b3c      	ldr	r3, [pc, #240]	; (801bca8 <tcp_connect+0x134>)
 801bbb8:	4a3c      	ldr	r2, [pc, #240]	; (801bcac <tcp_connect+0x138>)
 801bbba:	6811      	ldr	r1, [r2, #0]
 801bbbc:	681a      	ldr	r2, [r3, #0]
 801bbbe:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801bbc0:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801bbc4:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801bbc6:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801bbc8:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bbca:	4b39      	ldr	r3, [pc, #228]	; (801bcb0 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801bbcc:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801bbce:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801bbd0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801bbd2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801bbd6:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801bbda:	2200      	movs	r2, #0
 801bbdc:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bbde:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d037      	beq.n	801bc54 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801bbe4:	2b28      	cmp	r3, #40	; 0x28
 801bbe6:	d907      	bls.n	801bbf8 <tcp_connect+0x84>
 801bbe8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801bbec:	b292      	uxth	r2, r2
 801bbee:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801bbf2:	bf28      	it	cs
 801bbf4:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801bbf8:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801bbfa:	2102      	movs	r1, #2
 801bbfc:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801bbfe:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801bc00:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801bc04:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801bc08:	f003 fa90 	bl	801f12c <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801bc0c:	4605      	mov	r5, r0
 801bc0e:	b9f8      	cbnz	r0, 801bc50 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801bc10:	2302      	movs	r3, #2
 801bc12:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801bc14:	b187      	cbz	r7, 801bc38 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc16:	4a27      	ldr	r2, [pc, #156]	; (801bcb4 <tcp_connect+0x140>)
 801bc18:	6813      	ldr	r3, [r2, #0]
 801bc1a:	42a3      	cmp	r3, r4
 801bc1c:	d01d      	beq.n	801bc5a <tcp_connect+0xe6>
 801bc1e:	b15b      	cbz	r3, 801bc38 <tcp_connect+0xc4>
 801bc20:	68da      	ldr	r2, [r3, #12]
 801bc22:	42a2      	cmp	r2, r4
 801bc24:	d006      	beq.n	801bc34 <tcp_connect+0xc0>
 801bc26:	4613      	mov	r3, r2
 801bc28:	e7f9      	b.n	801bc1e <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801bc2a:	1d20      	adds	r0, r4, #4
 801bc2c:	f006 fee4 	bl	80229f8 <ip4_route>
 801bc30:	4605      	mov	r5, r0
 801bc32:	e7b3      	b.n	801bb9c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc34:	68e2      	ldr	r2, [r4, #12]
 801bc36:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801bc38:	4b1f      	ldr	r3, [pc, #124]	; (801bcb8 <tcp_connect+0x144>)
 801bc3a:	681a      	ldr	r2, [r3, #0]
 801bc3c:	601c      	str	r4, [r3, #0]
 801bc3e:	60e2      	str	r2, [r4, #12]
 801bc40:	f003 ffbc 	bl	801fbbc <tcp_timer_needed>
 801bc44:	4b1d      	ldr	r3, [pc, #116]	; (801bcbc <tcp_connect+0x148>)
 801bc46:	2201      	movs	r2, #1
    tcp_output(pcb);
 801bc48:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801bc4a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801bc4c:	f003 fc8a 	bl	801f564 <tcp_output>
}
 801bc50:	4628      	mov	r0, r5
 801bc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc54:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bc58:	e7ce      	b.n	801bbf8 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801bc5a:	68e3      	ldr	r3, [r4, #12]
 801bc5c:	6013      	str	r3, [r2, #0]
 801bc5e:	e7eb      	b.n	801bc38 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801bc60:	4b17      	ldr	r3, [pc, #92]	; (801bcc0 <tcp_connect+0x14c>)
 801bc62:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801bc66:	4917      	ldr	r1, [pc, #92]	; (801bcc4 <tcp_connect+0x150>)
 801bc68:	f06f 0509 	mvn.w	r5, #9
 801bc6c:	4816      	ldr	r0, [pc, #88]	; (801bcc8 <tcp_connect+0x154>)
 801bc6e:	f009 fb91 	bl	8025394 <iprintf>
 801bc72:	e7ed      	b.n	801bc50 <tcp_connect+0xdc>
      return ERR_BUF;
 801bc74:	f06f 0501 	mvn.w	r5, #1
 801bc78:	e7ea      	b.n	801bc50 <tcp_connect+0xdc>
    return ERR_RTE;
 801bc7a:	f06f 0503 	mvn.w	r5, #3
 801bc7e:	e7e7      	b.n	801bc50 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801bc80:	4b0f      	ldr	r3, [pc, #60]	; (801bcc0 <tcp_connect+0x14c>)
 801bc82:	f240 4236 	movw	r2, #1078	; 0x436
 801bc86:	4911      	ldr	r1, [pc, #68]	; (801bccc <tcp_connect+0x158>)
 801bc88:	f06f 050f 	mvn.w	r5, #15
 801bc8c:	480e      	ldr	r0, [pc, #56]	; (801bcc8 <tcp_connect+0x154>)
 801bc8e:	f009 fb81 	bl	8025394 <iprintf>
 801bc92:	e7dd      	b.n	801bc50 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc94:	4b0a      	ldr	r3, [pc, #40]	; (801bcc0 <tcp_connect+0x14c>)
 801bc96:	f240 4235 	movw	r2, #1077	; 0x435
 801bc9a:	490d      	ldr	r1, [pc, #52]	; (801bcd0 <tcp_connect+0x15c>)
 801bc9c:	f06f 050f 	mvn.w	r5, #15
 801bca0:	4809      	ldr	r0, [pc, #36]	; (801bcc8 <tcp_connect+0x154>)
 801bca2:	f009 fb77 	bl	8025394 <iprintf>
 801bca6:	e7d3      	b.n	801bc50 <tcp_connect+0xdc>
 801bca8:	20000414 	.word	0x20000414
 801bcac:	2002e0cc 	.word	0x2002e0cc
 801bcb0:	08600860 	.word	0x08600860
 801bcb4:	2002e0c4 	.word	0x2002e0c4
 801bcb8:	2002e0bc 	.word	0x2002e0bc
 801bcbc:	2002e0c0 	.word	0x2002e0c0
 801bcc0:	08043d3c 	.word	0x08043d3c
 801bcc4:	08043eec 	.word	0x08043eec
 801bcc8:	08029fe8 	.word	0x08029fe8
 801bccc:	08043ed0 	.word	0x08043ed0
 801bcd0:	08043eb4 	.word	0x08043eb4

0801bcd4 <tcp_segs_free>:
  while (seg != NULL) {
 801bcd4:	b170      	cbz	r0, 801bcf4 <tcp_segs_free+0x20>
{
 801bcd6:	b538      	push	{r3, r4, r5, lr}
 801bcd8:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801bcda:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801bcdc:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bcde:	6868      	ldr	r0, [r5, #4]
 801bce0:	b108      	cbz	r0, 801bce6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801bce2:	f7ff fa8d 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bce6:	4629      	mov	r1, r5
 801bce8:	2004      	movs	r0, #4
 801bcea:	f7fe fd71 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801bcee:	2c00      	cmp	r4, #0
 801bcf0:	d1f3      	bne.n	801bcda <tcp_segs_free+0x6>
}
 801bcf2:	bd38      	pop	{r3, r4, r5, pc}
 801bcf4:	4770      	bx	lr
 801bcf6:	bf00      	nop

0801bcf8 <tcp_seg_free>:
  if (seg != NULL) {
 801bcf8:	b158      	cbz	r0, 801bd12 <tcp_seg_free+0x1a>
{
 801bcfa:	b510      	push	{r4, lr}
 801bcfc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801bcfe:	6840      	ldr	r0, [r0, #4]
 801bd00:	b108      	cbz	r0, 801bd06 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801bd02:	f7ff fa7d 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bd06:	4621      	mov	r1, r4
 801bd08:	2004      	movs	r0, #4
}
 801bd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801bd0e:	f7fe bd5f 	b.w	801a7d0 <memp_free>
 801bd12:	4770      	bx	lr

0801bd14 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801bd14:	b108      	cbz	r0, 801bd1a <tcp_setprio+0x6>
  pcb->prio = prio;
 801bd16:	7541      	strb	r1, [r0, #21]
}
 801bd18:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801bd1a:	4b03      	ldr	r3, [pc, #12]	; (801bd28 <tcp_setprio+0x14>)
 801bd1c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801bd20:	4902      	ldr	r1, [pc, #8]	; (801bd2c <tcp_setprio+0x18>)
 801bd22:	4803      	ldr	r0, [pc, #12]	; (801bd30 <tcp_setprio+0x1c>)
 801bd24:	f009 bb36 	b.w	8025394 <iprintf>
 801bd28:	08043d3c 	.word	0x08043d3c
 801bd2c:	08043f1c 	.word	0x08043f1c
 801bd30:	08029fe8 	.word	0x08029fe8

0801bd34 <tcp_seg_copy>:
{
 801bd34:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bd36:	4605      	mov	r5, r0
 801bd38:	b1a0      	cbz	r0, 801bd64 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801bd3a:	f240 6284 	movw	r2, #1668	; 0x684
 801bd3e:	490d      	ldr	r1, [pc, #52]	; (801bd74 <tcp_seg_copy+0x40>)
 801bd40:	2004      	movs	r0, #4
 801bd42:	f7fe fd0f 	bl	801a764 <memp_malloc_fn>
  if (cseg == NULL) {
 801bd46:	4604      	mov	r4, r0
 801bd48:	b150      	cbz	r0, 801bd60 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bd4a:	6868      	ldr	r0, [r5, #4]
 801bd4c:	6829      	ldr	r1, [r5, #0]
 801bd4e:	68aa      	ldr	r2, [r5, #8]
 801bd50:	68eb      	ldr	r3, [r5, #12]
 801bd52:	6060      	str	r0, [r4, #4]
 801bd54:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801bd56:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801bd58:	60a2      	str	r2, [r4, #8]
 801bd5a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801bd5c:	f7ff fa6e 	bl	801b23c <pbuf_ref>
}
 801bd60:	4620      	mov	r0, r4
 801bd62:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801bd64:	4b03      	ldr	r3, [pc, #12]	; (801bd74 <tcp_seg_copy+0x40>)
 801bd66:	f240 6282 	movw	r2, #1666	; 0x682
 801bd6a:	4903      	ldr	r1, [pc, #12]	; (801bd78 <tcp_seg_copy+0x44>)
 801bd6c:	4803      	ldr	r0, [pc, #12]	; (801bd7c <tcp_seg_copy+0x48>)
 801bd6e:	f009 fb11 	bl	8025394 <iprintf>
 801bd72:	e7e2      	b.n	801bd3a <tcp_seg_copy+0x6>
 801bd74:	08043d3c 	.word	0x08043d3c
 801bd78:	08043f38 	.word	0x08043f38
 801bd7c:	08029fe8 	.word	0x08029fe8

0801bd80 <tcp_arg>:
  if (pcb != NULL) {
 801bd80:	b100      	cbz	r0, 801bd84 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801bd82:	6101      	str	r1, [r0, #16]
}
 801bd84:	4770      	bx	lr
 801bd86:	bf00      	nop

0801bd88 <tcp_recv>:
  if (pcb != NULL) {
 801bd88:	b140      	cbz	r0, 801bd9c <tcp_recv+0x14>
{
 801bd8a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bd8c:	7d03      	ldrb	r3, [r0, #20]
 801bd8e:	4604      	mov	r4, r0
 801bd90:	460d      	mov	r5, r1
 801bd92:	2b01      	cmp	r3, #1
 801bd94:	d003      	beq.n	801bd9e <tcp_recv+0x16>
    pcb->recv = recv;
 801bd96:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801bd9a:	bd38      	pop	{r3, r4, r5, pc}
 801bd9c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801bd9e:	4b05      	ldr	r3, [pc, #20]	; (801bdb4 <tcp_recv+0x2c>)
 801bda0:	f240 72df 	movw	r2, #2015	; 0x7df
 801bda4:	4904      	ldr	r1, [pc, #16]	; (801bdb8 <tcp_recv+0x30>)
 801bda6:	4805      	ldr	r0, [pc, #20]	; (801bdbc <tcp_recv+0x34>)
 801bda8:	f009 faf4 	bl	8025394 <iprintf>
    pcb->recv = recv;
 801bdac:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801bdb0:	bd38      	pop	{r3, r4, r5, pc}
 801bdb2:	bf00      	nop
 801bdb4:	08043d3c 	.word	0x08043d3c
 801bdb8:	08043f54 	.word	0x08043f54
 801bdbc:	08029fe8 	.word	0x08029fe8

0801bdc0 <tcp_sent>:
  if (pcb != NULL) {
 801bdc0:	b140      	cbz	r0, 801bdd4 <tcp_sent+0x14>
{
 801bdc2:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bdc4:	7d03      	ldrb	r3, [r0, #20]
 801bdc6:	4604      	mov	r4, r0
 801bdc8:	460d      	mov	r5, r1
 801bdca:	2b01      	cmp	r3, #1
 801bdcc:	d003      	beq.n	801bdd6 <tcp_sent+0x16>
    pcb->sent = sent;
 801bdce:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801bdd2:	bd38      	pop	{r3, r4, r5, pc}
 801bdd4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801bdd6:	4b05      	ldr	r3, [pc, #20]	; (801bdec <tcp_sent+0x2c>)
 801bdd8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801bddc:	4904      	ldr	r1, [pc, #16]	; (801bdf0 <tcp_sent+0x30>)
 801bdde:	4805      	ldr	r0, [pc, #20]	; (801bdf4 <tcp_sent+0x34>)
 801bde0:	f009 fad8 	bl	8025394 <iprintf>
    pcb->sent = sent;
 801bde4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801bde8:	bd38      	pop	{r3, r4, r5, pc}
 801bdea:	bf00      	nop
 801bdec:	08043d3c 	.word	0x08043d3c
 801bdf0:	08043f7c 	.word	0x08043f7c
 801bdf4:	08029fe8 	.word	0x08029fe8

0801bdf8 <tcp_err>:
  if (pcb != NULL) {
 801bdf8:	b140      	cbz	r0, 801be0c <tcp_err+0x14>
{
 801bdfa:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801bdfc:	7d03      	ldrb	r3, [r0, #20]
 801bdfe:	4604      	mov	r4, r0
 801be00:	460d      	mov	r5, r1
 801be02:	2b01      	cmp	r3, #1
 801be04:	d003      	beq.n	801be0e <tcp_err+0x16>
    pcb->errf = err;
 801be06:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801be0a:	bd38      	pop	{r3, r4, r5, pc}
 801be0c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801be0e:	4b05      	ldr	r3, [pc, #20]	; (801be24 <tcp_err+0x2c>)
 801be10:	f640 020d 	movw	r2, #2061	; 0x80d
 801be14:	4904      	ldr	r1, [pc, #16]	; (801be28 <tcp_err+0x30>)
 801be16:	4805      	ldr	r0, [pc, #20]	; (801be2c <tcp_err+0x34>)
 801be18:	f009 fabc 	bl	8025394 <iprintf>
    pcb->errf = err;
 801be1c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801be20:	bd38      	pop	{r3, r4, r5, pc}
 801be22:	bf00      	nop
 801be24:	08043d3c 	.word	0x08043d3c
 801be28:	08043fa4 	.word	0x08043fa4
 801be2c:	08029fe8 	.word	0x08029fe8

0801be30 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801be30:	b118      	cbz	r0, 801be3a <tcp_accept+0xa>
 801be32:	7d03      	ldrb	r3, [r0, #20]
 801be34:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801be36:	bf08      	it	eq
 801be38:	6181      	streq	r1, [r0, #24]
}
 801be3a:	4770      	bx	lr

0801be3c <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801be3c:	b1a8      	cbz	r0, 801be6a <tcp_poll+0x2e>
{
 801be3e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801be40:	7d03      	ldrb	r3, [r0, #20]
 801be42:	460e      	mov	r6, r1
 801be44:	4604      	mov	r4, r0
 801be46:	4615      	mov	r5, r2
 801be48:	2b01      	cmp	r3, #1
 801be4a:	d003      	beq.n	801be54 <tcp_poll+0x18>
  pcb->poll = poll;
 801be4c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801be50:	7765      	strb	r5, [r4, #29]
}
 801be52:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801be54:	4b08      	ldr	r3, [pc, #32]	; (801be78 <tcp_poll+0x3c>)
 801be56:	f640 023e 	movw	r2, #2110	; 0x83e
 801be5a:	4908      	ldr	r1, [pc, #32]	; (801be7c <tcp_poll+0x40>)
 801be5c:	4808      	ldr	r0, [pc, #32]	; (801be80 <tcp_poll+0x44>)
 801be5e:	f009 fa99 	bl	8025394 <iprintf>
  pcb->poll = poll;
 801be62:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801be66:	7765      	strb	r5, [r4, #29]
}
 801be68:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801be6a:	4b03      	ldr	r3, [pc, #12]	; (801be78 <tcp_poll+0x3c>)
 801be6c:	f640 023d 	movw	r2, #2109	; 0x83d
 801be70:	4904      	ldr	r1, [pc, #16]	; (801be84 <tcp_poll+0x48>)
 801be72:	4803      	ldr	r0, [pc, #12]	; (801be80 <tcp_poll+0x44>)
 801be74:	f009 ba8e 	b.w	8025394 <iprintf>
 801be78:	08043d3c 	.word	0x08043d3c
 801be7c:	08043fe4 	.word	0x08043fe4
 801be80:	08029fe8 	.word	0x08029fe8
 801be84:	08043fcc 	.word	0x08043fcc

0801be88 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801be88:	2800      	cmp	r0, #0
 801be8a:	d041      	beq.n	801bf10 <tcp_pcb_purge+0x88>
{
 801be8c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801be8e:	7d03      	ldrb	r3, [r0, #20]
 801be90:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801be92:	2b0a      	cmp	r3, #10
 801be94:	d001      	beq.n	801be9a <tcp_pcb_purge+0x12>
 801be96:	2b01      	cmp	r3, #1
 801be98:	d800      	bhi.n	801be9c <tcp_pcb_purge+0x14>
}
 801be9a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801be9c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801be9e:	b118      	cbz	r0, 801bea8 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801bea0:	f7ff f9ae 	bl	801b200 <pbuf_free>
      pcb->refused_data = NULL;
 801bea4:	2300      	movs	r3, #0
 801bea6:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801bea8:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801beaa:	b164      	cbz	r4, 801bec6 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801beac:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801beae:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801beb0:	6870      	ldr	r0, [r6, #4]
 801beb2:	b108      	cbz	r0, 801beb8 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801beb4:	f7ff f9a4 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801beb8:	4631      	mov	r1, r6
 801beba:	2004      	movs	r0, #4
 801bebc:	f7fe fc88 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801bec0:	2c00      	cmp	r4, #0
 801bec2:	d1f3      	bne.n	801beac <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801bec4:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801bec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801beca:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801becc:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801bece:	b15c      	cbz	r4, 801bee8 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801bed0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801bed2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bed4:	6870      	ldr	r0, [r6, #4]
 801bed6:	b108      	cbz	r0, 801bedc <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801bed8:	f7ff f992 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bedc:	4631      	mov	r1, r6
 801bede:	2004      	movs	r0, #4
 801bee0:	f7fe fc76 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801bee4:	2c00      	cmp	r4, #0
 801bee6:	d1f3      	bne.n	801bed0 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801bee8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801beea:	b15c      	cbz	r4, 801bf04 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801beec:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801beee:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801bef0:	6870      	ldr	r0, [r6, #4]
 801bef2:	b108      	cbz	r0, 801bef8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801bef4:	f7ff f984 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bef8:	4631      	mov	r1, r6
 801befa:	2004      	movs	r0, #4
 801befc:	f7fe fc68 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801bf00:	2c00      	cmp	r4, #0
 801bf02:	d1f3      	bne.n	801beec <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801bf04:	2300      	movs	r3, #0
 801bf06:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801bf0a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801bf0e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801bf10:	4b03      	ldr	r3, [pc, #12]	; (801bf20 <tcp_pcb_purge+0x98>)
 801bf12:	f640 0251 	movw	r2, #2129	; 0x851
 801bf16:	4903      	ldr	r1, [pc, #12]	; (801bf24 <tcp_pcb_purge+0x9c>)
 801bf18:	4803      	ldr	r0, [pc, #12]	; (801bf28 <tcp_pcb_purge+0xa0>)
 801bf1a:	f009 ba3b 	b.w	8025394 <iprintf>
 801bf1e:	bf00      	nop
 801bf20:	08043d3c 	.word	0x08043d3c
 801bf24:	08044004 	.word	0x08044004
 801bf28:	08029fe8 	.word	0x08029fe8

0801bf2c <tcp_slowtmr>:
{
 801bf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801bf30:	4da9      	ldr	r5, [pc, #676]	; (801c1d8 <tcp_slowtmr+0x2ac>)
{
 801bf32:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801bf34:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801c204 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801bf38:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bf3a:	4fa8      	ldr	r7, [pc, #672]	; (801c1dc <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801bf3c:	3301      	adds	r3, #1
 801bf3e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801bf40:	f89b 3000 	ldrb.w	r3, [fp]
 801bf44:	3301      	adds	r3, #1
 801bf46:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801bf4a:	4ba5      	ldr	r3, [pc, #660]	; (801c1e0 <tcp_slowtmr+0x2b4>)
 801bf4c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801bf4e:	2c00      	cmp	r4, #0
 801bf50:	f000 808a 	beq.w	801c068 <tcp_slowtmr+0x13c>
  prev = NULL;
 801bf54:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bf56:	46b1      	mov	r9, r6
 801bf58:	7d23      	ldrb	r3, [r4, #20]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	f000 80fc 	beq.w	801c158 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bf60:	2b01      	cmp	r3, #1
 801bf62:	f000 8104 	beq.w	801c16e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bf66:	2b0a      	cmp	r3, #10
 801bf68:	f000 810c 	beq.w	801c184 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bf6c:	f89b 2000 	ldrb.w	r2, [fp]
 801bf70:	7fa3      	ldrb	r3, [r4, #30]
 801bf72:	4293      	cmp	r3, r2
 801bf74:	f000 8113 	beq.w	801c19e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bf78:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801bf7a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bf7c:	2b02      	cmp	r3, #2
 801bf7e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801bf82:	f000 8112 	beq.w	801c1aa <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801bf86:	2a0b      	cmp	r2, #11
 801bf88:	f240 80cb 	bls.w	801c122 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801bf8c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801bf90:	2b06      	cmp	r3, #6
 801bf92:	f000 80b7 	beq.w	801c104 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801bf96:	f894 a009 	ldrb.w	sl, [r4, #9]
 801bf9a:	f01a 0a08 	ands.w	sl, sl, #8
 801bf9e:	d01d      	beq.n	801bfdc <tcp_slowtmr+0xb0>
 801bfa0:	2b04      	cmp	r3, #4
 801bfa2:	d007      	beq.n	801bfb4 <tcp_slowtmr+0x88>
 801bfa4:	f1a3 0307 	sub.w	r3, r3, #7
 801bfa8:	fab3 f383 	clz	r3, r3
 801bfac:	095b      	lsrs	r3, r3, #5
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	f000 80b4 	beq.w	801c11c <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bfb4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801bfb8:	4b8a      	ldr	r3, [pc, #552]	; (801c1e4 <tcp_slowtmr+0x2b8>)
 801bfba:	488b      	ldr	r0, [pc, #556]	; (801c1e8 <tcp_slowtmr+0x2bc>)
 801bfbc:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bfbe:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801bfc0:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bfc4:	6a20      	ldr	r0, [r4, #32]
 801bfc6:	1a12      	subs	r2, r2, r0
 801bfc8:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801bfcc:	f240 8160 	bls.w	801c290 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801bfd0:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801bfd4:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801bfd8:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801bfdc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801bfde:	b156      	cbz	r6, 801bff6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801bfe0:	682b      	ldr	r3, [r5, #0]
 801bfe2:	6a22      	ldr	r2, [r4, #32]
 801bfe4:	1a9a      	subs	r2, r3, r2
 801bfe6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801bfea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801bfee:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801bff2:	f080 80e1 	bcs.w	801c1b8 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801bff6:	7d23      	ldrb	r3, [r4, #20]
 801bff8:	2b03      	cmp	r3, #3
 801bffa:	d057      	beq.n	801c0ac <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801bffc:	2b09      	cmp	r3, #9
 801bffe:	d15a      	bne.n	801c0b6 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c000:	682b      	ldr	r3, [r5, #0]
 801c002:	6a22      	ldr	r2, [r4, #32]
 801c004:	1a9b      	subs	r3, r3, r2
 801c006:	2bf0      	cmp	r3, #240	; 0xf0
 801c008:	d955      	bls.n	801c0b6 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801c00a:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801c00c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801c010:	f7ff ff3a 	bl	801be88 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c014:	4b72      	ldr	r3, [pc, #456]	; (801c1e0 <tcp_slowtmr+0x2b4>)
 801c016:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801c018:	f1b9 0f00 	cmp.w	r9, #0
 801c01c:	f000 817e 	beq.w	801c31c <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c020:	42a3      	cmp	r3, r4
 801c022:	f000 81df 	beq.w	801c3e4 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801c026:	68e3      	ldr	r3, [r4, #12]
 801c028:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801c02c:	f1ba 0f00 	cmp.w	sl, #0
 801c030:	f040 8147 	bne.w	801c2c2 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c034:	7d23      	ldrb	r3, [r4, #20]
 801c036:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801c038:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c03c:	f000 8153 	beq.w	801c2e6 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801c040:	4621      	mov	r1, r4
 801c042:	2002      	movs	r0, #2
 801c044:	f7fe fbc4 	bl	801a7d0 <memp_free>
      tcp_active_pcbs_changed = 0;
 801c048:	4c68      	ldr	r4, [pc, #416]	; (801c1ec <tcp_slowtmr+0x2c0>)
 801c04a:	2300      	movs	r3, #0
 801c04c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801c04e:	b13e      	cbz	r6, 801c060 <tcp_slowtmr+0x134>
 801c050:	f06f 010c 	mvn.w	r1, #12
 801c054:	4650      	mov	r0, sl
 801c056:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801c058:	7823      	ldrb	r3, [r4, #0]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	f47f af75 	bne.w	801bf4a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801c060:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801c062:	2c00      	cmp	r4, #0
 801c064:	f47f af78 	bne.w	801bf58 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801c068:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801c208 <tcp_slowtmr+0x2dc>
 801c06c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801c070:	b1cc      	cbz	r4, 801c0a6 <tcp_slowtmr+0x17a>
  prev = NULL;
 801c072:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801c074:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801c1dc <tcp_slowtmr+0x2b0>
 801c078:	f8df a190 	ldr.w	sl, [pc, #400]	; 801c20c <tcp_slowtmr+0x2e0>
 801c07c:	4f5c      	ldr	r7, [pc, #368]	; (801c1f0 <tcp_slowtmr+0x2c4>)
 801c07e:	7d23      	ldrb	r3, [r4, #20]
 801c080:	2b0a      	cmp	r3, #10
 801c082:	d006      	beq.n	801c092 <tcp_slowtmr+0x166>
 801c084:	4643      	mov	r3, r8
 801c086:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801c08a:	4651      	mov	r1, sl
 801c08c:	4638      	mov	r0, r7
 801c08e:	f009 f981 	bl	8025394 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801c092:	682b      	ldr	r3, [r5, #0]
 801c094:	6a22      	ldr	r2, [r4, #32]
 801c096:	1a9b      	subs	r3, r3, r2
 801c098:	2bf0      	cmp	r3, #240	; 0xf0
 801c09a:	f200 80d4 	bhi.w	801c246 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801c09e:	4626      	mov	r6, r4
 801c0a0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c0a2:	2c00      	cmp	r4, #0
 801c0a4:	d1eb      	bne.n	801c07e <tcp_slowtmr+0x152>
}
 801c0a6:	b007      	add	sp, #28
 801c0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c0ac:	682b      	ldr	r3, [r5, #0]
 801c0ae:	6a22      	ldr	r2, [r4, #32]
 801c0b0:	1a9b      	subs	r3, r3, r2
 801c0b2:	2b28      	cmp	r3, #40	; 0x28
 801c0b4:	d8a9      	bhi.n	801c00a <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801c0b6:	f1b8 0f00 	cmp.w	r8, #0
 801c0ba:	d1a6      	bne.n	801c00a <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801c0bc:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c0be:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801c0c0:	3301      	adds	r3, #1
      pcb = pcb->next;
 801c0c2:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801c0c4:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801c0c6:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801c0c8:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801c0ca:	d815      	bhi.n	801c0f8 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801c0cc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801c1ec <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801c0d0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801c0d4:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801c0d8:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	f000 80ce 	beq.w	801c27e <tcp_slowtmr+0x352>
 801c0e2:	4621      	mov	r1, r4
 801c0e4:	6920      	ldr	r0, [r4, #16]
 801c0e6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801c0e8:	f899 3000 	ldrb.w	r3, [r9]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	f47f af2c 	bne.w	801bf4a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801c0f2:	2800      	cmp	r0, #0
 801c0f4:	f000 80c3 	beq.w	801c27e <tcp_slowtmr+0x352>
 801c0f8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c0fa:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801c0fc:	2c00      	cmp	r4, #0
 801c0fe:	f47f af2b 	bne.w	801bf58 <tcp_slowtmr+0x2c>
 801c102:	e7b1      	b.n	801c068 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801c104:	8b63      	ldrh	r3, [r4, #26]
 801c106:	06db      	lsls	r3, r3, #27
 801c108:	d508      	bpl.n	801c11c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c10a:	682b      	ldr	r3, [r5, #0]
 801c10c:	6a22      	ldr	r2, [r4, #32]
 801c10e:	1a9b      	subs	r3, r3, r2
 801c110:	2b28      	cmp	r3, #40	; 0x28
 801c112:	d903      	bls.n	801c11c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801c114:	f108 0801 	add.w	r8, r8, #1
 801c118:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801c11c:	f04f 0a00 	mov.w	sl, #0
 801c120:	e75c      	b.n	801bfdc <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801c122:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801c126:	f1b8 0f00 	cmp.w	r8, #0
 801c12a:	d071      	beq.n	801c210 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801c12c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c12e:	b133      	cbz	r3, 801c13e <tcp_slowtmr+0x212>
 801c130:	463b      	mov	r3, r7
 801c132:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801c136:	492f      	ldr	r1, [pc, #188]	; (801c1f4 <tcp_slowtmr+0x2c8>)
 801c138:	482d      	ldr	r0, [pc, #180]	; (801c1f0 <tcp_slowtmr+0x2c4>)
 801c13a:	f009 f92b 	bl	8025394 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c13e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c140:	2b00      	cmp	r3, #0
 801c142:	f000 8171 	beq.w	801c428 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801c146:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801c14a:	2b0b      	cmp	r3, #11
 801c14c:	f240 80d2 	bls.w	801c2f4 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801c150:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801c152:	f04f 0801 	mov.w	r8, #1
 801c156:	e71b      	b.n	801bf90 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801c158:	463b      	mov	r3, r7
 801c15a:	f240 42be 	movw	r2, #1214	; 0x4be
 801c15e:	4926      	ldr	r1, [pc, #152]	; (801c1f8 <tcp_slowtmr+0x2cc>)
 801c160:	4823      	ldr	r0, [pc, #140]	; (801c1f0 <tcp_slowtmr+0x2c4>)
 801c162:	f009 f917 	bl	8025394 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801c166:	7d23      	ldrb	r3, [r4, #20]
 801c168:	2b01      	cmp	r3, #1
 801c16a:	f47f aefc 	bne.w	801bf66 <tcp_slowtmr+0x3a>
 801c16e:	463b      	mov	r3, r7
 801c170:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801c174:	4921      	ldr	r1, [pc, #132]	; (801c1fc <tcp_slowtmr+0x2d0>)
 801c176:	481e      	ldr	r0, [pc, #120]	; (801c1f0 <tcp_slowtmr+0x2c4>)
 801c178:	f009 f90c 	bl	8025394 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801c17c:	7d23      	ldrb	r3, [r4, #20]
 801c17e:	2b0a      	cmp	r3, #10
 801c180:	f47f aef4 	bne.w	801bf6c <tcp_slowtmr+0x40>
 801c184:	463b      	mov	r3, r7
 801c186:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801c18a:	491d      	ldr	r1, [pc, #116]	; (801c200 <tcp_slowtmr+0x2d4>)
 801c18c:	4818      	ldr	r0, [pc, #96]	; (801c1f0 <tcp_slowtmr+0x2c4>)
 801c18e:	f009 f901 	bl	8025394 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801c192:	f89b 2000 	ldrb.w	r2, [fp]
 801c196:	7fa3      	ldrb	r3, [r4, #30]
 801c198:	4293      	cmp	r3, r2
 801c19a:	f47f aeed 	bne.w	801bf78 <tcp_slowtmr+0x4c>
      continue;
 801c19e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c1a0:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c1a2:	2c00      	cmp	r4, #0
 801c1a4:	f47f aed8 	bne.w	801bf58 <tcp_slowtmr+0x2c>
 801c1a8:	e75e      	b.n	801c068 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801c1aa:	2a05      	cmp	r2, #5
 801c1ac:	d9b9      	bls.n	801c122 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801c1ae:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801c1b2:	f04f 0801 	mov.w	r8, #1
 801c1b6:	e711      	b.n	801bfdc <tcp_slowtmr+0xb0>
 801c1b8:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801c1ba:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801c1bc:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801c1be:	6860      	ldr	r0, [r4, #4]
 801c1c0:	b108      	cbz	r0, 801c1c6 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801c1c2:	f7ff f81d 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c1c6:	4621      	mov	r1, r4
 801c1c8:	2004      	movs	r0, #4
 801c1ca:	f7fe fb01 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801c1ce:	2e00      	cmp	r6, #0
 801c1d0:	d1f3      	bne.n	801c1ba <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801c1d2:	9c05      	ldr	r4, [sp, #20]
 801c1d4:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801c1d6:	e70e      	b.n	801bff6 <tcp_slowtmr+0xca>
 801c1d8:	2002e0cc 	.word	0x2002e0cc
 801c1dc:	08043d3c 	.word	0x08043d3c
 801c1e0:	2002e0bc 	.word	0x2002e0bc
 801c1e4:	000a4cb8 	.word	0x000a4cb8
 801c1e8:	10624dd3 	.word	0x10624dd3
 801c1ec:	2002e0c0 	.word	0x2002e0c0
 801c1f0:	08029fe8 	.word	0x08029fe8
 801c1f4:	080440a8 	.word	0x080440a8
 801c1f8:	08044020 	.word	0x08044020
 801c1fc:	0804404c 	.word	0x0804404c
 801c200:	08044078 	.word	0x08044078
 801c204:	2002e0d1 	.word	0x2002e0d1
 801c208:	2002e0d4 	.word	0x2002e0d4
 801c20c:	0804416c 	.word	0x0804416c
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801c210:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801c214:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801c218:	b291      	uxth	r1, r2
 801c21a:	4281      	cmp	r1, r0
 801c21c:	d802      	bhi.n	801c224 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801c21e:	1c4a      	adds	r2, r1, #1
 801c220:	b212      	sxth	r2, r2
 801c222:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801c224:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801c228:	4291      	cmp	r1, r2
 801c22a:	f73f aeb1 	bgt.w	801bf90 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c22e:	4620      	mov	r0, r4
 801c230:	f003 f85a 	bl	801f2e8 <tcp_rexmit_rto_prepare>
 801c234:	2800      	cmp	r0, #0
 801c236:	f000 80a0 	beq.w	801c37a <tcp_slowtmr+0x44e>
 801c23a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	f000 8098 	beq.w	801c372 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801c242:	7d23      	ldrb	r3, [r4, #20]
 801c244:	e6a4      	b.n	801bf90 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801c246:	4620      	mov	r0, r4
 801c248:	f7ff fe1e 	bl	801be88 <tcp_pcb_purge>
      if (prev != NULL) {
 801c24c:	2e00      	cmp	r6, #0
 801c24e:	f000 80d1 	beq.w	801c3f4 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c252:	f8d9 3000 	ldr.w	r3, [r9]
 801c256:	42a3      	cmp	r3, r4
 801c258:	f000 80ee 	beq.w	801c438 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801c25c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801c260:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c264:	7d23      	ldrb	r3, [r4, #20]
 801c266:	2b01      	cmp	r3, #1
 801c268:	f000 80d7 	beq.w	801c41a <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801c26c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801c26e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801c270:	2002      	movs	r0, #2
 801c272:	f7fe faad 	bl	801a7d0 <memp_free>
  while (pcb != NULL) {
 801c276:	2c00      	cmp	r4, #0
 801c278:	f47f af01 	bne.w	801c07e <tcp_slowtmr+0x152>
 801c27c:	e713      	b.n	801c0a6 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801c27e:	4620      	mov	r0, r4
 801c280:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801c282:	4634      	mov	r4, r6
          tcp_output(prev);
 801c284:	f003 f96e 	bl	801f564 <tcp_output>
  while (pcb != NULL) {
 801c288:	2c00      	cmp	r4, #0
 801c28a:	f47f ae65 	bne.w	801bf58 <tcp_slowtmr+0x2c>
 801c28e:	e6eb      	b.n	801c068 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801c290:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801c294:	4870      	ldr	r0, [pc, #448]	; (801c458 <tcp_slowtmr+0x52c>)
 801c296:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801c29a:	4b70      	ldr	r3, [pc, #448]	; (801c45c <tcp_slowtmr+0x530>)
 801c29c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801c2a0:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801c2a4:	f67f af3a 	bls.w	801c11c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801c2a8:	4620      	mov	r0, r4
 801c2aa:	f003 fb91 	bl	801f9d0 <tcp_keepalive>
        if (err == ERR_OK) {
 801c2ae:	2800      	cmp	r0, #0
 801c2b0:	f47f af34 	bne.w	801c11c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801c2b4:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801c2b8:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801c2ba:	3301      	adds	r3, #1
 801c2bc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801c2c0:	e68c      	b.n	801bfdc <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c2c2:	8b23      	ldrh	r3, [r4, #24]
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c2c8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c2ca:	9302      	str	r3, [sp, #8]
 801c2cc:	8ae3      	ldrh	r3, [r4, #22]
 801c2ce:	9301      	str	r3, [sp, #4]
 801c2d0:	1d23      	adds	r3, r4, #4
 801c2d2:	9300      	str	r3, [sp, #0]
 801c2d4:	4623      	mov	r3, r4
 801c2d6:	f003 f8cb 	bl	801f470 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c2da:	7d23      	ldrb	r3, [r4, #20]
 801c2dc:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801c2de:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c2e2:	f47f aead 	bne.w	801c040 <tcp_slowtmr+0x114>
 801c2e6:	463b      	mov	r3, r7
 801c2e8:	22d4      	movs	r2, #212	; 0xd4
 801c2ea:	495d      	ldr	r1, [pc, #372]	; (801c460 <tcp_slowtmr+0x534>)
 801c2ec:	485d      	ldr	r0, [pc, #372]	; (801c464 <tcp_slowtmr+0x538>)
 801c2ee:	f009 f851 	bl	8025394 <iprintf>
 801c2f2:	e6a5      	b.n	801c040 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c2f4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801c2f8:	4a5b      	ldr	r2, [pc, #364]	; (801c468 <tcp_slowtmr+0x53c>)
 801c2fa:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801c2fc:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801c300:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801c304:	4293      	cmp	r3, r2
 801c306:	d216      	bcs.n	801c336 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801c308:	3301      	adds	r3, #1
 801c30a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801c30c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801c30e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801c312:	d210      	bcs.n	801c336 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801c314:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801c316:	f04f 0800 	mov.w	r8, #0
 801c31a:	e639      	b.n	801bf90 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801c31c:	42a3      	cmp	r3, r4
 801c31e:	d006      	beq.n	801c32e <tcp_slowtmr+0x402>
 801c320:	463b      	mov	r3, r7
 801c322:	f240 5271 	movw	r2, #1393	; 0x571
 801c326:	4951      	ldr	r1, [pc, #324]	; (801c46c <tcp_slowtmr+0x540>)
 801c328:	484e      	ldr	r0, [pc, #312]	; (801c464 <tcp_slowtmr+0x538>)
 801c32a:	f009 f833 	bl	8025394 <iprintf>
        tcp_active_pcbs = pcb->next;
 801c32e:	68e3      	ldr	r3, [r4, #12]
 801c330:	4a4f      	ldr	r2, [pc, #316]	; (801c470 <tcp_slowtmr+0x544>)
 801c332:	6013      	str	r3, [r2, #0]
 801c334:	e67a      	b.n	801c02c <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801c336:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801c33a:	b936      	cbnz	r6, 801c34a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801c33c:	4620      	mov	r0, r4
 801c33e:	f003 fb6d 	bl	801fa1c <tcp_zero_window_probe>
 801c342:	b140      	cbz	r0, 801c356 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801c344:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801c346:	7d23      	ldrb	r3, [r4, #20]
 801c348:	e622      	b.n	801bf90 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801c34a:	4631      	mov	r1, r6
 801c34c:	4620      	mov	r0, r4
 801c34e:	f002 fe17 	bl	801ef80 <tcp_split_unsent_seg>
 801c352:	2800      	cmp	r0, #0
 801c354:	d078      	beq.n	801c448 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c356:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801c35a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c35e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801c360:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801c364:	f63f af6d 	bhi.w	801c242 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801c368:	3301      	adds	r3, #1
 801c36a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801c36e:	7d23      	ldrb	r3, [r4, #20]
 801c370:	e60e      	b.n	801bf90 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801c372:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c374:	2b00      	cmp	r3, #0
 801c376:	f43f af64 	beq.w	801c242 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801c37a:	7d23      	ldrb	r3, [r4, #20]
 801c37c:	2b02      	cmp	r3, #2
 801c37e:	d014      	beq.n	801c3aa <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801c380:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801c384:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801c388:	2a0c      	cmp	r2, #12
 801c38a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801c38e:	bf28      	it	cs
 801c390:	220c      	movcs	r2, #12
 801c392:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801c396:	4937      	ldr	r1, [pc, #220]	; (801c474 <tcp_slowtmr+0x548>)
 801c398:	5c8a      	ldrb	r2, [r1, r2]
 801c39a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801c39c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801c3a0:	4293      	cmp	r3, r2
 801c3a2:	bfa8      	it	ge
 801c3a4:	4613      	movge	r3, r2
 801c3a6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c3aa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801c3ae:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801c3b0:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3b4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801c3b6:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801c3b8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801c3c0:	bf28      	it	cs
 801c3c2:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801c3c4:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c3c6:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801c3ca:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801c3ce:	bf88      	it	hi
 801c3d0:	4613      	movhi	r3, r2
 801c3d2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801c3da:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801c3de:	f003 faab 	bl	801f938 <tcp_rexmit_rto_commit>
 801c3e2:	e72e      	b.n	801c242 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801c3e4:	463b      	mov	r3, r7
 801c3e6:	f240 526d 	movw	r2, #1389	; 0x56d
 801c3ea:	4923      	ldr	r1, [pc, #140]	; (801c478 <tcp_slowtmr+0x54c>)
 801c3ec:	481d      	ldr	r0, [pc, #116]	; (801c464 <tcp_slowtmr+0x538>)
 801c3ee:	f008 ffd1 	bl	8025394 <iprintf>
 801c3f2:	e618      	b.n	801c026 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801c3f4:	f8d9 3000 	ldr.w	r3, [r9]
 801c3f8:	42a3      	cmp	r3, r4
 801c3fa:	d006      	beq.n	801c40a <tcp_slowtmr+0x4de>
 801c3fc:	4643      	mov	r3, r8
 801c3fe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801c402:	491e      	ldr	r1, [pc, #120]	; (801c47c <tcp_slowtmr+0x550>)
 801c404:	4638      	mov	r0, r7
 801c406:	f008 ffc5 	bl	8025394 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c40a:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801c40c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c410:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801c412:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c416:	f47f af29 	bne.w	801c26c <tcp_slowtmr+0x340>
 801c41a:	4643      	mov	r3, r8
 801c41c:	22d4      	movs	r2, #212	; 0xd4
 801c41e:	4910      	ldr	r1, [pc, #64]	; (801c460 <tcp_slowtmr+0x534>)
 801c420:	4638      	mov	r0, r7
 801c422:	f008 ffb7 	bl	8025394 <iprintf>
 801c426:	e721      	b.n	801c26c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801c428:	463b      	mov	r3, r7
 801c42a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801c42e:	4914      	ldr	r1, [pc, #80]	; (801c480 <tcp_slowtmr+0x554>)
 801c430:	480c      	ldr	r0, [pc, #48]	; (801c464 <tcp_slowtmr+0x538>)
 801c432:	f008 ffaf 	bl	8025394 <iprintf>
 801c436:	e686      	b.n	801c146 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801c438:	4643      	mov	r3, r8
 801c43a:	f240 52af 	movw	r2, #1455	; 0x5af
 801c43e:	4911      	ldr	r1, [pc, #68]	; (801c484 <tcp_slowtmr+0x558>)
 801c440:	4638      	mov	r0, r7
 801c442:	f008 ffa7 	bl	8025394 <iprintf>
 801c446:	e709      	b.n	801c25c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801c448:	4620      	mov	r0, r4
 801c44a:	f003 f88b 	bl	801f564 <tcp_output>
 801c44e:	2800      	cmp	r0, #0
 801c450:	d181      	bne.n	801c356 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801c452:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801c454:	7d23      	ldrb	r3, [r4, #20]
 801c456:	e59b      	b.n	801bf90 <tcp_slowtmr+0x64>
 801c458:	000124f8 	.word	0x000124f8
 801c45c:	10624dd3 	.word	0x10624dd3
 801c460:	08043d78 	.word	0x08043d78
 801c464:	08029fe8 	.word	0x08029fe8
 801c468:	08044430 	.word	0x08044430
 801c46c:	08044140 	.word	0x08044140
 801c470:	2002e0bc 	.word	0x2002e0bc
 801c474:	08044410 	.word	0x08044410
 801c478:	08044114 	.word	0x08044114
 801c47c:	080441c4 	.word	0x080441c4
 801c480:	080440dc 	.word	0x080440dc
 801c484:	0804419c 	.word	0x0804419c

0801c488 <tcp_pcb_remove>:
{
 801c488:	b538      	push	{r3, r4, r5, lr}
 801c48a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c48c:	460c      	mov	r4, r1
 801c48e:	2900      	cmp	r1, #0
 801c490:	d04a      	beq.n	801c528 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c492:	2d00      	cmp	r5, #0
 801c494:	d051      	beq.n	801c53a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801c496:	682b      	ldr	r3, [r5, #0]
 801c498:	42a3      	cmp	r3, r4
 801c49a:	d032      	beq.n	801c502 <tcp_pcb_remove+0x7a>
 801c49c:	b12b      	cbz	r3, 801c4aa <tcp_pcb_remove+0x22>
 801c49e:	68da      	ldr	r2, [r3, #12]
 801c4a0:	42a2      	cmp	r2, r4
 801c4a2:	d03e      	beq.n	801c522 <tcp_pcb_remove+0x9a>
 801c4a4:	4613      	mov	r3, r2
 801c4a6:	2b00      	cmp	r3, #0
 801c4a8:	d1f9      	bne.n	801c49e <tcp_pcb_remove+0x16>
 801c4aa:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801c4ac:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801c4ae:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801c4b0:	f7ff fcea 	bl	801be88 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801c4b4:	7d23      	ldrb	r3, [r4, #20]
 801c4b6:	2b0a      	cmp	r3, #10
 801c4b8:	d02d      	beq.n	801c516 <tcp_pcb_remove+0x8e>
 801c4ba:	2b01      	cmp	r3, #1
 801c4bc:	d01d      	beq.n	801c4fa <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801c4be:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801c4c0:	07da      	lsls	r2, r3, #31
 801c4c2:	d421      	bmi.n	801c508 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c4c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c4c6:	b133      	cbz	r3, 801c4d6 <tcp_pcb_remove+0x4e>
 801c4c8:	4b20      	ldr	r3, [pc, #128]	; (801c54c <tcp_pcb_remove+0xc4>)
 801c4ca:	f640 0293 	movw	r2, #2195	; 0x893
 801c4ce:	4920      	ldr	r1, [pc, #128]	; (801c550 <tcp_pcb_remove+0xc8>)
 801c4d0:	4820      	ldr	r0, [pc, #128]	; (801c554 <tcp_pcb_remove+0xcc>)
 801c4d2:	f008 ff5f 	bl	8025394 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801c4d6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801c4d8:	b133      	cbz	r3, 801c4e8 <tcp_pcb_remove+0x60>
 801c4da:	4b1c      	ldr	r3, [pc, #112]	; (801c54c <tcp_pcb_remove+0xc4>)
 801c4dc:	f640 0294 	movw	r2, #2196	; 0x894
 801c4e0:	491d      	ldr	r1, [pc, #116]	; (801c558 <tcp_pcb_remove+0xd0>)
 801c4e2:	481c      	ldr	r0, [pc, #112]	; (801c554 <tcp_pcb_remove+0xcc>)
 801c4e4:	f008 ff56 	bl	8025394 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801c4e8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801c4ea:	b133      	cbz	r3, 801c4fa <tcp_pcb_remove+0x72>
 801c4ec:	4b17      	ldr	r3, [pc, #92]	; (801c54c <tcp_pcb_remove+0xc4>)
 801c4ee:	f640 0296 	movw	r2, #2198	; 0x896
 801c4f2:	491a      	ldr	r1, [pc, #104]	; (801c55c <tcp_pcb_remove+0xd4>)
 801c4f4:	4817      	ldr	r0, [pc, #92]	; (801c554 <tcp_pcb_remove+0xcc>)
 801c4f6:	f008 ff4d 	bl	8025394 <iprintf>
  pcb->state = CLOSED;
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801c4fe:	82e3      	strh	r3, [r4, #22]
}
 801c500:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801c502:	68e3      	ldr	r3, [r4, #12]
 801c504:	602b      	str	r3, [r5, #0]
 801c506:	e7d0      	b.n	801c4aa <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801c508:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801c50c:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801c50e:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801c510:	f003 f828 	bl	801f564 <tcp_output>
  if (pcb->state != LISTEN) {
 801c514:	7d23      	ldrb	r3, [r4, #20]
 801c516:	2b01      	cmp	r3, #1
 801c518:	d0ef      	beq.n	801c4fa <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801c51a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	d1d3      	bne.n	801c4c8 <tcp_pcb_remove+0x40>
 801c520:	e7d9      	b.n	801c4d6 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801c522:	68e2      	ldr	r2, [r4, #12]
 801c524:	60da      	str	r2, [r3, #12]
 801c526:	e7c0      	b.n	801c4aa <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801c528:	4b08      	ldr	r3, [pc, #32]	; (801c54c <tcp_pcb_remove+0xc4>)
 801c52a:	f640 0283 	movw	r2, #2179	; 0x883
 801c52e:	490c      	ldr	r1, [pc, #48]	; (801c560 <tcp_pcb_remove+0xd8>)
 801c530:	4808      	ldr	r0, [pc, #32]	; (801c554 <tcp_pcb_remove+0xcc>)
 801c532:	f008 ff2f 	bl	8025394 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c536:	2d00      	cmp	r5, #0
 801c538:	d1ad      	bne.n	801c496 <tcp_pcb_remove+0xe>
 801c53a:	4b04      	ldr	r3, [pc, #16]	; (801c54c <tcp_pcb_remove+0xc4>)
 801c53c:	f640 0284 	movw	r2, #2180	; 0x884
 801c540:	4908      	ldr	r1, [pc, #32]	; (801c564 <tcp_pcb_remove+0xdc>)
 801c542:	4804      	ldr	r0, [pc, #16]	; (801c554 <tcp_pcb_remove+0xcc>)
 801c544:	f008 ff26 	bl	8025394 <iprintf>
 801c548:	e7a5      	b.n	801c496 <tcp_pcb_remove+0xe>
 801c54a:	bf00      	nop
 801c54c:	08043d3c 	.word	0x08043d3c
 801c550:	08044228 	.word	0x08044228
 801c554:	08029fe8 	.word	0x08029fe8
 801c558:	08044240 	.word	0x08044240
 801c55c:	0804425c 	.word	0x0804425c
 801c560:	080441ec 	.word	0x080441ec
 801c564:	08044208 	.word	0x08044208

0801c568 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c568:	2800      	cmp	r0, #0
 801c56a:	f000 80ad 	beq.w	801c6c8 <tcp_abandon+0x160>
{
 801c56e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c572:	7d03      	ldrb	r3, [r0, #20]
{
 801c574:	b087      	sub	sp, #28
 801c576:	4605      	mov	r5, r0
 801c578:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c57a:	2b01      	cmp	r3, #1
 801c57c:	f000 808b 	beq.w	801c696 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801c580:	2b0a      	cmp	r3, #10
 801c582:	f000 8093 	beq.w	801c6ac <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801c586:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801c588:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801c58c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801c590:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801c594:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801c596:	b96b      	cbnz	r3, 801c5b4 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801c598:	8aef      	ldrh	r7, [r5, #22]
 801c59a:	2f00      	cmp	r7, #0
 801c59c:	d052      	beq.n	801c644 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c59e:	4a51      	ldr	r2, [pc, #324]	; (801c6e4 <tcp_abandon+0x17c>)
 801c5a0:	6813      	ldr	r3, [r2, #0]
 801c5a2:	42ab      	cmp	r3, r5
 801c5a4:	d074      	beq.n	801c690 <tcp_abandon+0x128>
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d050      	beq.n	801c64c <tcp_abandon+0xe4>
 801c5aa:	68da      	ldr	r2, [r3, #12]
 801c5ac:	42aa      	cmp	r2, r5
 801c5ae:	d04b      	beq.n	801c648 <tcp_abandon+0xe0>
 801c5b0:	4613      	mov	r3, r2
 801c5b2:	e7f8      	b.n	801c5a6 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c5b4:	4629      	mov	r1, r5
 801c5b6:	484c      	ldr	r0, [pc, #304]	; (801c6e8 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801c5b8:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c5ba:	f7ff ff65 	bl	801c488 <tcp_pcb_remove>
 801c5be:	4b4b      	ldr	r3, [pc, #300]	; (801c6ec <tcp_abandon+0x184>)
 801c5c0:	2201      	movs	r2, #1
 801c5c2:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801c5c4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801c5c6:	b164      	cbz	r4, 801c5e2 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801c5c8:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c5ca:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c5cc:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c5d0:	b108      	cbz	r0, 801c5d6 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801c5d2:	f7fe fe15 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c5d6:	4651      	mov	r1, sl
 801c5d8:	2004      	movs	r0, #4
 801c5da:	f7fe f8f9 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801c5de:	2c00      	cmp	r4, #0
 801c5e0:	d1f2      	bne.n	801c5c8 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801c5e2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801c5e4:	b164      	cbz	r4, 801c600 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801c5e6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c5e8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c5ea:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c5ee:	b108      	cbz	r0, 801c5f4 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801c5f0:	f7fe fe06 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c5f4:	4651      	mov	r1, sl
 801c5f6:	2004      	movs	r0, #4
 801c5f8:	f7fe f8ea 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801c5fc:	2c00      	cmp	r4, #0
 801c5fe:	d1f2      	bne.n	801c5e6 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801c600:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801c602:	b164      	cbz	r4, 801c61e <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801c604:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c606:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c608:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c60c:	b108      	cbz	r0, 801c612 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801c60e:	f7fe fdf7 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c612:	4651      	mov	r1, sl
 801c614:	2004      	movs	r0, #4
 801c616:	f7fe f8db 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801c61a:	2c00      	cmp	r4, #0
 801c61c:	d1f2      	bne.n	801c604 <tcp_abandon+0x9c>
    if (send_rst) {
 801c61e:	b9ce      	cbnz	r6, 801c654 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c620:	7d2b      	ldrb	r3, [r5, #20]
 801c622:	2b01      	cmp	r3, #1
 801c624:	d024      	beq.n	801c670 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801c626:	4629      	mov	r1, r5
 801c628:	2002      	movs	r0, #2
 801c62a:	f7fe f8d1 	bl	801a7d0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c62e:	f1b8 0f00 	cmp.w	r8, #0
 801c632:	d02a      	beq.n	801c68a <tcp_abandon+0x122>
 801c634:	f06f 010c 	mvn.w	r1, #12
 801c638:	4648      	mov	r0, r9
 801c63a:	4643      	mov	r3, r8
}
 801c63c:	b007      	add	sp, #28
 801c63e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c642:	4718      	bx	r3
    int send_rst = 0;
 801c644:	461e      	mov	r6, r3
 801c646:	e7bd      	b.n	801c5c4 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c648:	68ea      	ldr	r2, [r5, #12]
 801c64a:	60da      	str	r2, [r3, #12]
 801c64c:	2700      	movs	r7, #0
    int send_rst = 0;
 801c64e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c650:	60ef      	str	r7, [r5, #12]
 801c652:	e7b7      	b.n	801c5c4 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c654:	9701      	str	r7, [sp, #4]
 801c656:	465a      	mov	r2, fp
 801c658:	8b2b      	ldrh	r3, [r5, #24]
 801c65a:	4628      	mov	r0, r5
 801c65c:	9905      	ldr	r1, [sp, #20]
 801c65e:	9302      	str	r3, [sp, #8]
 801c660:	1d2b      	adds	r3, r5, #4
 801c662:	9300      	str	r3, [sp, #0]
 801c664:	462b      	mov	r3, r5
 801c666:	f002 ff03 	bl	801f470 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c66a:	7d2b      	ldrb	r3, [r5, #20]
 801c66c:	2b01      	cmp	r3, #1
 801c66e:	d1da      	bne.n	801c626 <tcp_abandon+0xbe>
 801c670:	491f      	ldr	r1, [pc, #124]	; (801c6f0 <tcp_abandon+0x188>)
 801c672:	22d4      	movs	r2, #212	; 0xd4
 801c674:	4b1f      	ldr	r3, [pc, #124]	; (801c6f4 <tcp_abandon+0x18c>)
 801c676:	4820      	ldr	r0, [pc, #128]	; (801c6f8 <tcp_abandon+0x190>)
 801c678:	f008 fe8c 	bl	8025394 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801c67c:	4629      	mov	r1, r5
 801c67e:	2002      	movs	r0, #2
 801c680:	f7fe f8a6 	bl	801a7d0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c684:	f1b8 0f00 	cmp.w	r8, #0
 801c688:	d1d4      	bne.n	801c634 <tcp_abandon+0xcc>
}
 801c68a:	b007      	add	sp, #28
 801c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c690:	68eb      	ldr	r3, [r5, #12]
 801c692:	6013      	str	r3, [r2, #0]
 801c694:	e7da      	b.n	801c64c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c696:	4b17      	ldr	r3, [pc, #92]	; (801c6f4 <tcp_abandon+0x18c>)
 801c698:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c69c:	4917      	ldr	r1, [pc, #92]	; (801c6fc <tcp_abandon+0x194>)
 801c69e:	4816      	ldr	r0, [pc, #88]	; (801c6f8 <tcp_abandon+0x190>)
 801c6a0:	f008 fe78 	bl	8025394 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801c6a4:	7d2b      	ldrb	r3, [r5, #20]
 801c6a6:	2b0a      	cmp	r3, #10
 801c6a8:	f47f af6d 	bne.w	801c586 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c6ac:	4629      	mov	r1, r5
 801c6ae:	4814      	ldr	r0, [pc, #80]	; (801c700 <tcp_abandon+0x198>)
 801c6b0:	f7ff feea 	bl	801c488 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c6b4:	7d2b      	ldrb	r3, [r5, #20]
 801c6b6:	2b01      	cmp	r3, #1
 801c6b8:	d00d      	beq.n	801c6d6 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801c6ba:	4629      	mov	r1, r5
 801c6bc:	2002      	movs	r0, #2
}
 801c6be:	b007      	add	sp, #28
 801c6c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c6c4:	f7fe b884 	b.w	801a7d0 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c6c8:	4b0a      	ldr	r3, [pc, #40]	; (801c6f4 <tcp_abandon+0x18c>)
 801c6ca:	f240 223d 	movw	r2, #573	; 0x23d
 801c6ce:	490d      	ldr	r1, [pc, #52]	; (801c704 <tcp_abandon+0x19c>)
 801c6d0:	4809      	ldr	r0, [pc, #36]	; (801c6f8 <tcp_abandon+0x190>)
 801c6d2:	f008 be5f 	b.w	8025394 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c6d6:	4b07      	ldr	r3, [pc, #28]	; (801c6f4 <tcp_abandon+0x18c>)
 801c6d8:	22d4      	movs	r2, #212	; 0xd4
 801c6da:	4905      	ldr	r1, [pc, #20]	; (801c6f0 <tcp_abandon+0x188>)
 801c6dc:	4806      	ldr	r0, [pc, #24]	; (801c6f8 <tcp_abandon+0x190>)
 801c6de:	f008 fe59 	bl	8025394 <iprintf>
 801c6e2:	e7ea      	b.n	801c6ba <tcp_abandon+0x152>
 801c6e4:	2002e0c4 	.word	0x2002e0c4
 801c6e8:	2002e0bc 	.word	0x2002e0bc
 801c6ec:	2002e0c0 	.word	0x2002e0c0
 801c6f0:	08043d78 	.word	0x08043d78
 801c6f4:	08043d3c 	.word	0x08043d3c
 801c6f8:	08029fe8 	.word	0x08029fe8
 801c6fc:	08044290 	.word	0x08044290
 801c700:	2002e0d4 	.word	0x2002e0d4
 801c704:	08044274 	.word	0x08044274

0801c708 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801c708:	2101      	movs	r1, #1
 801c70a:	f7ff bf2d 	b.w	801c568 <tcp_abandon>
 801c70e:	bf00      	nop

0801c710 <tcp_accept_null>:
{
 801c710:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c712:	460c      	mov	r4, r1
 801c714:	b131      	cbz	r1, 801c724 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801c716:	4620      	mov	r0, r4
 801c718:	2101      	movs	r1, #1
 801c71a:	f7ff ff25 	bl	801c568 <tcp_abandon>
}
 801c71e:	f06f 000c 	mvn.w	r0, #12
 801c722:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c724:	4b06      	ldr	r3, [pc, #24]	; (801c740 <tcp_accept_null+0x30>)
 801c726:	f240 320f 	movw	r2, #783	; 0x30f
 801c72a:	4906      	ldr	r1, [pc, #24]	; (801c744 <tcp_accept_null+0x34>)
 801c72c:	4806      	ldr	r0, [pc, #24]	; (801c748 <tcp_accept_null+0x38>)
 801c72e:	f008 fe31 	bl	8025394 <iprintf>
  tcp_abandon(pcb, 1);
 801c732:	4620      	mov	r0, r4
 801c734:	2101      	movs	r1, #1
 801c736:	f7ff ff17 	bl	801c568 <tcp_abandon>
}
 801c73a:	f06f 000c 	mvn.w	r0, #12
 801c73e:	bd10      	pop	{r4, pc}
 801c740:	08043d3c 	.word	0x08043d3c
 801c744:	080442c4 	.word	0x080442c4
 801c748:	08029fe8 	.word	0x08029fe8

0801c74c <tcp_netif_ip_addr_changed_pcblist>:
{
 801c74c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c74e:	4605      	mov	r5, r0
{
 801c750:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c752:	b178      	cbz	r0, 801c774 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801c754:	b134      	cbz	r4, 801c764 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c756:	6822      	ldr	r2, [r4, #0]
 801c758:	682b      	ldr	r3, [r5, #0]
 801c75a:	429a      	cmp	r2, r3
 801c75c:	d003      	beq.n	801c766 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801c75e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c760:	2c00      	cmp	r4, #0
 801c762:	d1f8      	bne.n	801c756 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801c764:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801c766:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801c768:	4620      	mov	r0, r4
 801c76a:	2101      	movs	r1, #1
      pcb = next;
 801c76c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801c76e:	f7ff fefb 	bl	801c568 <tcp_abandon>
      pcb = next;
 801c772:	e7ef      	b.n	801c754 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c774:	4b03      	ldr	r3, [pc, #12]	; (801c784 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801c776:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c77a:	4903      	ldr	r1, [pc, #12]	; (801c788 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801c77c:	4803      	ldr	r0, [pc, #12]	; (801c78c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801c77e:	f008 fe09 	bl	8025394 <iprintf>
 801c782:	e7e7      	b.n	801c754 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801c784:	08043d3c 	.word	0x08043d3c
 801c788:	080442e4 	.word	0x080442e4
 801c78c:	08029fe8 	.word	0x08029fe8

0801c790 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c790:	4b0f      	ldr	r3, [pc, #60]	; (801c7d0 <tcp_kill_state+0x40>)
 801c792:	6819      	ldr	r1, [r3, #0]
 801c794:	b1d1      	cbz	r1, 801c7cc <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c796:	4b0f      	ldr	r3, [pc, #60]	; (801c7d4 <tcp_kill_state+0x44>)
  inactivity = 0;
 801c798:	2200      	movs	r2, #0
{
 801c79a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c79c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801c79e:	4614      	mov	r4, r2
 801c7a0:	e001      	b.n	801c7a6 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7a2:	68c9      	ldr	r1, [r1, #12]
 801c7a4:	b159      	cbz	r1, 801c7be <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801c7a6:	7d0b      	ldrb	r3, [r1, #20]
 801c7a8:	4283      	cmp	r3, r0
 801c7aa:	d1fa      	bne.n	801c7a2 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7ac:	6a0b      	ldr	r3, [r1, #32]
 801c7ae:	1aeb      	subs	r3, r5, r3
 801c7b0:	4293      	cmp	r3, r2
 801c7b2:	d3f6      	bcc.n	801c7a2 <tcp_kill_state+0x12>
 801c7b4:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7b6:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c7b8:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c7ba:	2900      	cmp	r1, #0
 801c7bc:	d1f3      	bne.n	801c7a6 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801c7be:	b11c      	cbz	r4, 801c7c8 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801c7c0:	4620      	mov	r0, r4
}
 801c7c2:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801c7c4:	f7ff bed0 	b.w	801c568 <tcp_abandon>
}
 801c7c8:	bc30      	pop	{r4, r5}
 801c7ca:	4770      	bx	lr
 801c7cc:	4770      	bx	lr
 801c7ce:	bf00      	nop
 801c7d0:	2002e0bc 	.word	0x2002e0bc
 801c7d4:	2002e0cc 	.word	0x2002e0cc

0801c7d8 <tcp_alloc>:
{
 801c7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c7da:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801c7de:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c7e0:	494f      	ldr	r1, [pc, #316]	; (801c920 <tcp_alloc+0x148>)
 801c7e2:	2002      	movs	r0, #2
 801c7e4:	f7fd ffbe 	bl	801a764 <memp_malloc_fn>
  if (pcb == NULL) {
 801c7e8:	4603      	mov	r3, r0
 801c7ea:	b320      	cbz	r0, 801c836 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c7ec:	229c      	movs	r2, #156	; 0x9c
 801c7ee:	2100      	movs	r1, #0
 801c7f0:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801c7f2:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c7f6:	f007 fe2f 	bl	8024458 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801c7fa:	494a      	ldr	r1, [pc, #296]	; (801c924 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c7fc:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c7fe:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801c800:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801c802:	4849      	ldr	r0, [pc, #292]	; (801c928 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c804:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801c808:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c80a:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801c80c:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c80e:	4a47      	ldr	r2, [pc, #284]	; (801c92c <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801c810:	4947      	ldr	r1, [pc, #284]	; (801c930 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801c812:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801c816:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801c818:	4c46      	ldr	r4, [pc, #280]	; (801c934 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801c81a:	4847      	ldr	r0, [pc, #284]	; (801c938 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801c81c:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c820:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801c824:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c826:	4945      	ldr	r1, [pc, #276]	; (801c93c <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801c828:	6498      	str	r0, [r3, #72]	; 0x48
}
 801c82a:	4618      	mov	r0, r3
    pcb->prio = prio;
 801c82c:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801c82e:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c830:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801c832:	72da      	strb	r2, [r3, #11]
}
 801c834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c836:	4e42      	ldr	r6, [pc, #264]	; (801c940 <tcp_alloc+0x168>)
 801c838:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801c83a:	b15c      	cbz	r4, 801c854 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801c83c:	4620      	mov	r0, r4
 801c83e:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801c840:	8b43      	ldrh	r3, [r0, #26]
 801c842:	0719      	lsls	r1, r3, #28
 801c844:	d5f9      	bpl.n	801c83a <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c846:	f023 0308 	bic.w	r3, r3, #8
 801c84a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801c84c:	f7fe ffd8 	bl	801b800 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801c850:	2c00      	cmp	r4, #0
 801c852:	d1f3      	bne.n	801c83c <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c854:	4b3b      	ldr	r3, [pc, #236]	; (801c944 <tcp_alloc+0x16c>)
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	b193      	cbz	r3, 801c880 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c85a:	4a33      	ldr	r2, [pc, #204]	; (801c928 <tcp_alloc+0x150>)
 801c85c:	4618      	mov	r0, r3
 801c85e:	6a19      	ldr	r1, [r3, #32]
 801c860:	6814      	ldr	r4, [r2, #0]
 801c862:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c864:	68db      	ldr	r3, [r3, #12]
 801c866:	b143      	cbz	r3, 801c87a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c868:	6a1a      	ldr	r2, [r3, #32]
 801c86a:	1aa2      	subs	r2, r4, r2
 801c86c:	428a      	cmp	r2, r1
 801c86e:	d3f9      	bcc.n	801c864 <tcp_alloc+0x8c>
 801c870:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c872:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c874:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c876:	2b00      	cmp	r3, #0
 801c878:	d1f6      	bne.n	801c868 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801c87a:	2101      	movs	r1, #1
 801c87c:	f7ff fe74 	bl	801c568 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c880:	f240 7239 	movw	r2, #1849	; 0x739
 801c884:	4926      	ldr	r1, [pc, #152]	; (801c920 <tcp_alloc+0x148>)
 801c886:	2002      	movs	r0, #2
 801c888:	f7fd ff6c 	bl	801a764 <memp_malloc_fn>
    if (pcb == NULL) {
 801c88c:	4603      	mov	r3, r0
 801c88e:	2800      	cmp	r0, #0
 801c890:	d1ac      	bne.n	801c7ec <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801c892:	2009      	movs	r0, #9
 801c894:	f7ff ff7c 	bl	801c790 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c898:	f240 723f 	movw	r2, #1855	; 0x73f
 801c89c:	4920      	ldr	r1, [pc, #128]	; (801c920 <tcp_alloc+0x148>)
 801c89e:	2002      	movs	r0, #2
 801c8a0:	f7fd ff60 	bl	801a764 <memp_malloc_fn>
      if (pcb == NULL) {
 801c8a4:	4603      	mov	r3, r0
 801c8a6:	2800      	cmp	r0, #0
 801c8a8:	d1a0      	bne.n	801c7ec <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801c8aa:	2008      	movs	r0, #8
 801c8ac:	f7ff ff70 	bl	801c790 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c8b0:	f240 7245 	movw	r2, #1861	; 0x745
 801c8b4:	491a      	ldr	r1, [pc, #104]	; (801c920 <tcp_alloc+0x148>)
 801c8b6:	2002      	movs	r0, #2
 801c8b8:	f7fd ff54 	bl	801a764 <memp_malloc_fn>
        if (pcb == NULL) {
 801c8bc:	4603      	mov	r3, r0
 801c8be:	2800      	cmp	r0, #0
 801c8c0:	d194      	bne.n	801c7ec <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c8c2:	062a      	lsls	r2, r5, #24
 801c8c4:	d42a      	bmi.n	801c91c <tcp_alloc+0x144>
  if (mprio == 0) {
 801c8c6:	b1ed      	cbz	r5, 801c904 <tcp_alloc+0x12c>
 801c8c8:	462a      	mov	r2, r5
  mprio--;
 801c8ca:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8cc:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801c8ce:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8d0:	b1c2      	cbz	r2, 801c904 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c8d2:	4815      	ldr	r0, [pc, #84]	; (801c928 <tcp_alloc+0x150>)
  inactivity = 0;
 801c8d4:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c8d6:	6807      	ldr	r7, [r0, #0]
 801c8d8:	e005      	b.n	801c8e6 <tcp_alloc+0x10e>
 801c8da:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801c8dc:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801c8de:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801c8e0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c8e2:	68d2      	ldr	r2, [r2, #12]
 801c8e4:	b14a      	cbz	r2, 801c8fa <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801c8e6:	7d50      	ldrb	r0, [r2, #21]
 801c8e8:	4288      	cmp	r0, r1
 801c8ea:	d3f6      	bcc.n	801c8da <tcp_alloc+0x102>
 801c8ec:	d1f9      	bne.n	801c8e2 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c8ee:	6a14      	ldr	r4, [r2, #32]
 801c8f0:	eba7 0e04 	sub.w	lr, r7, r4
 801c8f4:	45b6      	cmp	lr, r6
 801c8f6:	d3f4      	bcc.n	801c8e2 <tcp_alloc+0x10a>
 801c8f8:	e7f0      	b.n	801c8dc <tcp_alloc+0x104>
  if (inactive != NULL) {
 801c8fa:	b11b      	cbz	r3, 801c904 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801c8fc:	2101      	movs	r1, #1
 801c8fe:	4618      	mov	r0, r3
 801c900:	f7ff fe32 	bl	801c568 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c904:	f240 724b 	movw	r2, #1867	; 0x74b
 801c908:	4905      	ldr	r1, [pc, #20]	; (801c920 <tcp_alloc+0x148>)
 801c90a:	2002      	movs	r0, #2
 801c90c:	f7fd ff2a 	bl	801a764 <memp_malloc_fn>
  if (pcb != NULL) {
 801c910:	4603      	mov	r3, r0
 801c912:	2800      	cmp	r0, #0
 801c914:	f47f af6a 	bne.w	801c7ec <tcp_alloc+0x14>
}
 801c918:	4618      	mov	r0, r3
 801c91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c91c:	227f      	movs	r2, #127	; 0x7f
 801c91e:	e7d4      	b.n	801c8ca <tcp_alloc+0xf2>
 801c920:	08043d3c 	.word	0x08043d3c
 801c924:	2002e0d1 	.word	0x2002e0d1
 801c928:	2002e0cc 	.word	0x2002e0cc
 801c92c:	006ddd00 	.word	0x006ddd00
 801c930:	0801cb35 	.word	0x0801cb35
 801c934:	0218ffff 	.word	0x0218ffff
 801c938:	04300001 	.word	0x04300001
 801c93c:	08600860 	.word	0x08600860
 801c940:	2002e0bc 	.word	0x2002e0bc
 801c944:	2002e0d4 	.word	0x2002e0d4

0801c948 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801c948:	2040      	movs	r0, #64	; 0x40
 801c94a:	f7ff bf45 	b.w	801c7d8 <tcp_alloc>
 801c94e:	bf00      	nop

0801c950 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c950:	2040      	movs	r0, #64	; 0x40
 801c952:	f7ff bf41 	b.w	801c7d8 <tcp_alloc>
 801c956:	bf00      	nop

0801c958 <tcp_close_shutdown>:
{
 801c958:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c95a:	4604      	mov	r4, r0
{
 801c95c:	b085      	sub	sp, #20
 801c95e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c960:	2800      	cmp	r0, #0
 801c962:	d06a      	beq.n	801ca3a <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c964:	7d23      	ldrb	r3, [r4, #20]
 801c966:	b11d      	cbz	r5, 801c970 <tcp_close_shutdown+0x18>
 801c968:	2b04      	cmp	r3, #4
 801c96a:	d00c      	beq.n	801c986 <tcp_close_shutdown+0x2e>
 801c96c:	2b07      	cmp	r3, #7
 801c96e:	d00a      	beq.n	801c986 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801c970:	2b01      	cmp	r3, #1
 801c972:	d06a      	beq.n	801ca4a <tcp_close_shutdown+0xf2>
 801c974:	2b02      	cmp	r3, #2
 801c976:	d030      	beq.n	801c9da <tcp_close_shutdown+0x82>
 801c978:	b333      	cbz	r3, 801c9c8 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801c97a:	4620      	mov	r0, r4
}
 801c97c:	b005      	add	sp, #20
 801c97e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801c982:	f7fe bf3d 	b.w	801b800 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c986:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c988:	2a00      	cmp	r2, #0
 801c98a:	d037      	beq.n	801c9fc <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c98c:	8b63      	ldrh	r3, [r4, #26]
 801c98e:	06db      	lsls	r3, r3, #27
 801c990:	f140 8084 	bpl.w	801ca9c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c994:	8b21      	ldrh	r1, [r4, #24]
 801c996:	1d20      	adds	r0, r4, #4
 801c998:	8ae2      	ldrh	r2, [r4, #22]
 801c99a:	4623      	mov	r3, r4
 801c99c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c9a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c9a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c9a4:	9000      	str	r0, [sp, #0]
 801c9a6:	4620      	mov	r0, r4
 801c9a8:	f002 fd62 	bl	801f470 <tcp_rst>
      tcp_pcb_purge(pcb);
 801c9ac:	4620      	mov	r0, r4
 801c9ae:	f7ff fa6b 	bl	801be88 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c9b2:	4a45      	ldr	r2, [pc, #276]	; (801cac8 <tcp_close_shutdown+0x170>)
 801c9b4:	6813      	ldr	r3, [r2, #0]
 801c9b6:	42a3      	cmp	r3, r4
 801c9b8:	d030      	beq.n	801ca1c <tcp_close_shutdown+0xc4>
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d030      	beq.n	801ca20 <tcp_close_shutdown+0xc8>
 801c9be:	68da      	ldr	r2, [r3, #12]
 801c9c0:	42a2      	cmp	r2, r4
 801c9c2:	d068      	beq.n	801ca96 <tcp_close_shutdown+0x13e>
 801c9c4:	4613      	mov	r3, r2
 801c9c6:	e7f8      	b.n	801c9ba <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801c9c8:	8ae3      	ldrh	r3, [r4, #22]
 801c9ca:	b9e3      	cbnz	r3, 801ca06 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801c9cc:	4621      	mov	r1, r4
 801c9ce:	2002      	movs	r0, #2
 801c9d0:	f7fd fefe 	bl	801a7d0 <memp_free>
}
 801c9d4:	2000      	movs	r0, #0
 801c9d6:	b005      	add	sp, #20
 801c9d8:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c9da:	4621      	mov	r1, r4
 801c9dc:	483a      	ldr	r0, [pc, #232]	; (801cac8 <tcp_close_shutdown+0x170>)
 801c9de:	f7ff fd53 	bl	801c488 <tcp_pcb_remove>
 801c9e2:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c9e4:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c9e6:	4a39      	ldr	r2, [pc, #228]	; (801cacc <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c9e8:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c9ea:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c9ec:	d1ee      	bne.n	801c9cc <tcp_close_shutdown+0x74>
 801c9ee:	4b38      	ldr	r3, [pc, #224]	; (801cad0 <tcp_close_shutdown+0x178>)
 801c9f0:	22d4      	movs	r2, #212	; 0xd4
 801c9f2:	4938      	ldr	r1, [pc, #224]	; (801cad4 <tcp_close_shutdown+0x17c>)
 801c9f4:	4838      	ldr	r0, [pc, #224]	; (801cad8 <tcp_close_shutdown+0x180>)
 801c9f6:	f008 fccd 	bl	8025394 <iprintf>
 801c9fa:	e7e7      	b.n	801c9cc <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c9fc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c9fe:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801ca02:	d0b5      	beq.n	801c970 <tcp_close_shutdown+0x18>
 801ca04:	e7c2      	b.n	801c98c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ca06:	4a35      	ldr	r2, [pc, #212]	; (801cadc <tcp_close_shutdown+0x184>)
 801ca08:	6813      	ldr	r3, [r2, #0]
 801ca0a:	42a3      	cmp	r3, r4
 801ca0c:	d051      	beq.n	801cab2 <tcp_close_shutdown+0x15a>
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d03e      	beq.n	801ca90 <tcp_close_shutdown+0x138>
 801ca12:	68da      	ldr	r2, [r3, #12]
 801ca14:	42a2      	cmp	r2, r4
 801ca16:	d039      	beq.n	801ca8c <tcp_close_shutdown+0x134>
 801ca18:	4613      	mov	r3, r2
 801ca1a:	e7f8      	b.n	801ca0e <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801ca1c:	68e3      	ldr	r3, [r4, #12]
 801ca1e:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ca20:	4b2f      	ldr	r3, [pc, #188]	; (801cae0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801ca22:	2000      	movs	r0, #0
 801ca24:	4a29      	ldr	r2, [pc, #164]	; (801cacc <tcp_close_shutdown+0x174>)
 801ca26:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801ca28:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801ca2a:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801ca2c:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801ca2e:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801ca30:	d03c      	beq.n	801caac <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801ca32:	7d23      	ldrb	r3, [r4, #20]
 801ca34:	2b01      	cmp	r3, #1
 801ca36:	d1c9      	bne.n	801c9cc <tcp_close_shutdown+0x74>
 801ca38:	e7d9      	b.n	801c9ee <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801ca3a:	4b25      	ldr	r3, [pc, #148]	; (801cad0 <tcp_close_shutdown+0x178>)
 801ca3c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801ca40:	4928      	ldr	r1, [pc, #160]	; (801cae4 <tcp_close_shutdown+0x18c>)
 801ca42:	4825      	ldr	r0, [pc, #148]	; (801cad8 <tcp_close_shutdown+0x180>)
 801ca44:	f008 fca6 	bl	8025394 <iprintf>
 801ca48:	e78c      	b.n	801c964 <tcp_close_shutdown+0xc>
 801ca4a:	4927      	ldr	r1, [pc, #156]	; (801cae8 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801ca4c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801ca4e:	4b23      	ldr	r3, [pc, #140]	; (801cadc <tcp_close_shutdown+0x184>)
 801ca50:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ca54:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ca56:	b133      	cbz	r3, 801ca66 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801ca58:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801ca5a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801ca5c:	bf08      	it	eq
 801ca5e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801ca60:	68db      	ldr	r3, [r3, #12]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d1f8      	bne.n	801ca58 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801ca66:	42a9      	cmp	r1, r5
 801ca68:	d002      	beq.n	801ca70 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801ca6a:	f851 3b04 	ldr.w	r3, [r1], #4
 801ca6e:	e7f1      	b.n	801ca54 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801ca70:	4621      	mov	r1, r4
 801ca72:	481e      	ldr	r0, [pc, #120]	; (801caec <tcp_close_shutdown+0x194>)
 801ca74:	f7ff fd08 	bl	801c488 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801ca78:	7d23      	ldrb	r3, [r4, #20]
 801ca7a:	2b01      	cmp	r3, #1
 801ca7c:	d01c      	beq.n	801cab8 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801ca7e:	4621      	mov	r1, r4
 801ca80:	2003      	movs	r0, #3
 801ca82:	f7fd fea5 	bl	801a7d0 <memp_free>
}
 801ca86:	2000      	movs	r0, #0
 801ca88:	b005      	add	sp, #20
 801ca8a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801ca8c:	68e2      	ldr	r2, [r4, #12]
 801ca8e:	60da      	str	r2, [r3, #12]
 801ca90:	2300      	movs	r3, #0
 801ca92:	60e3      	str	r3, [r4, #12]
 801ca94:	e79a      	b.n	801c9cc <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801ca96:	68e2      	ldr	r2, [r4, #12]
 801ca98:	60da      	str	r2, [r3, #12]
 801ca9a:	e7c1      	b.n	801ca20 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801ca9c:	4b0c      	ldr	r3, [pc, #48]	; (801cad0 <tcp_close_shutdown+0x178>)
 801ca9e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801caa2:	4913      	ldr	r1, [pc, #76]	; (801caf0 <tcp_close_shutdown+0x198>)
 801caa4:	480c      	ldr	r0, [pc, #48]	; (801cad8 <tcp_close_shutdown+0x180>)
 801caa6:	f008 fc75 	bl	8025394 <iprintf>
 801caaa:	e773      	b.n	801c994 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801caac:	f001 fd9e 	bl	801e5ec <tcp_trigger_input_pcb_close>
 801cab0:	e790      	b.n	801c9d4 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801cab2:	68e3      	ldr	r3, [r4, #12]
 801cab4:	6013      	str	r3, [r2, #0]
 801cab6:	e7eb      	b.n	801ca90 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801cab8:	4b05      	ldr	r3, [pc, #20]	; (801cad0 <tcp_close_shutdown+0x178>)
 801caba:	22df      	movs	r2, #223	; 0xdf
 801cabc:	490d      	ldr	r1, [pc, #52]	; (801caf4 <tcp_close_shutdown+0x19c>)
 801cabe:	4806      	ldr	r0, [pc, #24]	; (801cad8 <tcp_close_shutdown+0x180>)
 801cac0:	f008 fc68 	bl	8025394 <iprintf>
 801cac4:	e7db      	b.n	801ca7e <tcp_close_shutdown+0x126>
 801cac6:	bf00      	nop
 801cac8:	2002e0bc 	.word	0x2002e0bc
 801cacc:	2002e0c0 	.word	0x2002e0c0
 801cad0:	08043d3c 	.word	0x08043d3c
 801cad4:	08043d78 	.word	0x08043d78
 801cad8:	08029fe8 	.word	0x08029fe8
 801cadc:	2002e0c4 	.word	0x2002e0c4
 801cae0:	2002e100 	.word	0x2002e100
 801cae4:	08044318 	.word	0x08044318
 801cae8:	08044428 	.word	0x08044428
 801caec:	2002e0c8 	.word	0x2002e0c8
 801caf0:	08044338 	.word	0x08044338
 801caf4:	08044354 	.word	0x08044354

0801caf8 <tcp_close>:
{
 801caf8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801cafa:	b158      	cbz	r0, 801cb14 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801cafc:	7d03      	ldrb	r3, [r0, #20]
 801cafe:	2b01      	cmp	r3, #1
 801cb00:	d003      	beq.n	801cb0a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801cb02:	8b43      	ldrh	r3, [r0, #26]
 801cb04:	f043 0310 	orr.w	r3, r3, #16
 801cb08:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801cb0a:	2101      	movs	r1, #1
}
 801cb0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801cb10:	f7ff bf22 	b.w	801c958 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb14:	4b04      	ldr	r3, [pc, #16]	; (801cb28 <tcp_close+0x30>)
 801cb16:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801cb1a:	4904      	ldr	r1, [pc, #16]	; (801cb2c <tcp_close+0x34>)
 801cb1c:	4804      	ldr	r0, [pc, #16]	; (801cb30 <tcp_close+0x38>)
 801cb1e:	f008 fc39 	bl	8025394 <iprintf>
}
 801cb22:	f06f 000f 	mvn.w	r0, #15
 801cb26:	bd08      	pop	{r3, pc}
 801cb28:	08043d3c 	.word	0x08043d3c
 801cb2c:	08044370 	.word	0x08044370
 801cb30:	08029fe8 	.word	0x08029fe8

0801cb34 <tcp_recv_null>:
{
 801cb34:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb36:	b1c9      	cbz	r1, 801cb6c <tcp_recv_null+0x38>
  if (p != NULL) {
 801cb38:	4614      	mov	r4, r2
 801cb3a:	4608      	mov	r0, r1
 801cb3c:	b13a      	cbz	r2, 801cb4e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801cb3e:	8911      	ldrh	r1, [r2, #8]
 801cb40:	f7fe ffde 	bl	801bb00 <tcp_recved>
    pbuf_free(p);
 801cb44:	4620      	mov	r0, r4
 801cb46:	f7fe fb5b 	bl	801b200 <pbuf_free>
  return ERR_OK;
 801cb4a:	2000      	movs	r0, #0
}
 801cb4c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801cb4e:	b10b      	cbz	r3, 801cb54 <tcp_recv_null+0x20>
  return ERR_OK;
 801cb50:	4610      	mov	r0, r2
}
 801cb52:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801cb54:	7d0b      	ldrb	r3, [r1, #20]
 801cb56:	2b01      	cmp	r3, #1
 801cb58:	d003      	beq.n	801cb62 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801cb5a:	8b4b      	ldrh	r3, [r1, #26]
 801cb5c:	f043 0310 	orr.w	r3, r3, #16
 801cb60:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801cb62:	2101      	movs	r1, #1
}
 801cb64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801cb68:	f7ff bef6 	b.w	801c958 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb6c:	4b04      	ldr	r3, [pc, #16]	; (801cb80 <tcp_recv_null+0x4c>)
 801cb6e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801cb72:	4904      	ldr	r1, [pc, #16]	; (801cb84 <tcp_recv_null+0x50>)
 801cb74:	4804      	ldr	r0, [pc, #16]	; (801cb88 <tcp_recv_null+0x54>)
 801cb76:	f008 fc0d 	bl	8025394 <iprintf>
 801cb7a:	f06f 000f 	mvn.w	r0, #15
}
 801cb7e:	bd10      	pop	{r4, pc}
 801cb80:	08043d3c 	.word	0x08043d3c
 801cb84:	08044388 	.word	0x08044388
 801cb88:	08029fe8 	.word	0x08029fe8

0801cb8c <tcp_process_refused_data>:
{
 801cb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cb8e:	b378      	cbz	r0, 801cbf0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801cb90:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801cb92:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801cb94:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801cb98:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801cb9a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801cb9c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801cb9e:	b156      	cbz	r6, 801cbb6 <tcp_process_refused_data+0x2a>
 801cba0:	4601      	mov	r1, r0
 801cba2:	462a      	mov	r2, r5
 801cba4:	6900      	ldr	r0, [r0, #16]
 801cba6:	47b0      	blx	r6
    if (err == ERR_OK) {
 801cba8:	b158      	cbz	r0, 801cbc2 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801cbaa:	300d      	adds	r0, #13
 801cbac:	d01d      	beq.n	801cbea <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801cbae:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801cbb2:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801cbb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801cbb6:	8929      	ldrh	r1, [r5, #8]
 801cbb8:	f7fe ffa2 	bl	801bb00 <tcp_recved>
    pbuf_free(p);
 801cbbc:	4628      	mov	r0, r5
 801cbbe:	f7fe fb1f 	bl	801b200 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801cbc2:	06bb      	lsls	r3, r7, #26
 801cbc4:	d50f      	bpl.n	801cbe6 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801cbc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801cbc8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801cbcc:	d001      	beq.n	801cbd2 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801cbce:	3301      	adds	r3, #1
 801cbd0:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801cbd2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801cbd6:	b135      	cbz	r5, 801cbe6 <tcp_process_refused_data+0x5a>
 801cbd8:	2300      	movs	r3, #0
 801cbda:	4621      	mov	r1, r4
 801cbdc:	6920      	ldr	r0, [r4, #16]
 801cbde:	461a      	mov	r2, r3
 801cbe0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801cbe2:	300d      	adds	r0, #13
 801cbe4:	d001      	beq.n	801cbea <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801cbe6:	2000      	movs	r0, #0
}
 801cbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801cbea:	f06f 000c 	mvn.w	r0, #12
}
 801cbee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801cbf0:	4b04      	ldr	r3, [pc, #16]	; (801cc04 <tcp_process_refused_data+0x78>)
 801cbf2:	f240 6209 	movw	r2, #1545	; 0x609
 801cbf6:	4904      	ldr	r1, [pc, #16]	; (801cc08 <tcp_process_refused_data+0x7c>)
 801cbf8:	4804      	ldr	r0, [pc, #16]	; (801cc0c <tcp_process_refused_data+0x80>)
 801cbfa:	f008 fbcb 	bl	8025394 <iprintf>
 801cbfe:	f06f 000f 	mvn.w	r0, #15
}
 801cc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc04:	08043d3c 	.word	0x08043d3c
 801cc08:	080443a4 	.word	0x080443a4
 801cc0c:	08029fe8 	.word	0x08029fe8

0801cc10 <tcp_fasttmr>:
{
 801cc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801cc14:	4d1c      	ldr	r5, [pc, #112]	; (801cc88 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801cc16:	2700      	movs	r7, #0
 801cc18:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801cc90 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801cc1c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801cc1e:	4e1b      	ldr	r6, [pc, #108]	; (801cc8c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801cc20:	3301      	adds	r3, #1
 801cc22:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801cc24:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801cc28:	b1bc      	cbz	r4, 801cc5a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801cc2a:	782a      	ldrb	r2, [r5, #0]
 801cc2c:	7fa3      	ldrb	r3, [r4, #30]
 801cc2e:	4293      	cmp	r3, r2
 801cc30:	d015      	beq.n	801cc5e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801cc32:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801cc34:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801cc36:	07d9      	lsls	r1, r3, #31
 801cc38:	d41a      	bmi.n	801cc70 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801cc3a:	071a      	lsls	r2, r3, #28
 801cc3c:	d411      	bmi.n	801cc62 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801cc3e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801cc40:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801cc44:	b133      	cbz	r3, 801cc54 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801cc46:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801cc48:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801cc4a:	f7ff ff9f 	bl	801cb8c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801cc4e:	7833      	ldrb	r3, [r6, #0]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d1e7      	bne.n	801cc24 <tcp_fasttmr+0x14>
      pcb = next;
 801cc54:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801cc56:	2c00      	cmp	r4, #0
 801cc58:	d1e7      	bne.n	801cc2a <tcp_fasttmr+0x1a>
}
 801cc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801cc5e:	68e4      	ldr	r4, [r4, #12]
 801cc60:	e7e2      	b.n	801cc28 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cc62:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801cc66:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801cc68:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801cc6a:	f7fe fdc9 	bl	801b800 <tcp_close_shutdown_fin>
 801cc6e:	e7e6      	b.n	801cc3e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801cc70:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801cc74:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801cc76:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801cc78:	f002 fc74 	bl	801f564 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cc7c:	8b63      	ldrh	r3, [r4, #26]
 801cc7e:	f023 0303 	bic.w	r3, r3, #3
 801cc82:	b29b      	uxth	r3, r3
 801cc84:	8363      	strh	r3, [r4, #26]
 801cc86:	e7d8      	b.n	801cc3a <tcp_fasttmr+0x2a>
 801cc88:	2002e0d1 	.word	0x2002e0d1
 801cc8c:	2002e0c0 	.word	0x2002e0c0
 801cc90:	2002e0bc 	.word	0x2002e0bc

0801cc94 <tcp_tmr>:
{
 801cc94:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801cc96:	f7ff ffbb 	bl	801cc10 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801cc9a:	4a06      	ldr	r2, [pc, #24]	; (801ccb4 <tcp_tmr+0x20>)
 801cc9c:	7813      	ldrb	r3, [r2, #0]
 801cc9e:	3301      	adds	r3, #1
 801cca0:	b2db      	uxtb	r3, r3
 801cca2:	7013      	strb	r3, [r2, #0]
 801cca4:	07db      	lsls	r3, r3, #31
 801cca6:	d400      	bmi.n	801ccaa <tcp_tmr+0x16>
}
 801cca8:	bd08      	pop	{r3, pc}
 801ccaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801ccae:	f7ff b93d 	b.w	801bf2c <tcp_slowtmr>
 801ccb2:	bf00      	nop
 801ccb4:	2002e0d0 	.word	0x2002e0d0

0801ccb8 <tcp_next_iss>:
{
 801ccb8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ccba:	b130      	cbz	r0, 801ccca <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801ccbc:	4b07      	ldr	r3, [pc, #28]	; (801ccdc <tcp_next_iss+0x24>)
 801ccbe:	4a08      	ldr	r2, [pc, #32]	; (801cce0 <tcp_next_iss+0x28>)
 801ccc0:	6818      	ldr	r0, [r3, #0]
 801ccc2:	6812      	ldr	r2, [r2, #0]
 801ccc4:	4410      	add	r0, r2
 801ccc6:	6018      	str	r0, [r3, #0]
}
 801ccc8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801ccca:	4b06      	ldr	r3, [pc, #24]	; (801cce4 <tcp_next_iss+0x2c>)
 801cccc:	f640 02af 	movw	r2, #2223	; 0x8af
 801ccd0:	4905      	ldr	r1, [pc, #20]	; (801cce8 <tcp_next_iss+0x30>)
 801ccd2:	4806      	ldr	r0, [pc, #24]	; (801ccec <tcp_next_iss+0x34>)
 801ccd4:	f008 fb5e 	bl	8025394 <iprintf>
 801ccd8:	e7f0      	b.n	801ccbc <tcp_next_iss+0x4>
 801ccda:	bf00      	nop
 801ccdc:	20000414 	.word	0x20000414
 801cce0:	2002e0cc 	.word	0x2002e0cc
 801cce4:	08043d3c 	.word	0x08043d3c
 801cce8:	080443cc 	.word	0x080443cc
 801ccec:	08029fe8 	.word	0x08029fe8

0801ccf0 <tcp_eff_send_mss_netif>:
{
 801ccf0:	b538      	push	{r3, r4, r5, lr}
 801ccf2:	4605      	mov	r5, r0
 801ccf4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801ccf6:	b172      	cbz	r2, 801cd16 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801ccf8:	b144      	cbz	r4, 801cd0c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801ccfa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801ccfc:	b133      	cbz	r3, 801cd0c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801ccfe:	2b28      	cmp	r3, #40	; 0x28
 801cd00:	d906      	bls.n	801cd10 <tcp_eff_send_mss_netif+0x20>
 801cd02:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801cd04:	b29b      	uxth	r3, r3
 801cd06:	429d      	cmp	r5, r3
 801cd08:	bf28      	it	cs
 801cd0a:	461d      	movcs	r5, r3
}
 801cd0c:	4628      	mov	r0, r5
 801cd0e:	bd38      	pop	{r3, r4, r5, pc}
 801cd10:	2500      	movs	r5, #0
 801cd12:	4628      	mov	r0, r5
 801cd14:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801cd16:	4b04      	ldr	r3, [pc, #16]	; (801cd28 <tcp_eff_send_mss_netif+0x38>)
 801cd18:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801cd1c:	4903      	ldr	r1, [pc, #12]	; (801cd2c <tcp_eff_send_mss_netif+0x3c>)
 801cd1e:	4804      	ldr	r0, [pc, #16]	; (801cd30 <tcp_eff_send_mss_netif+0x40>)
 801cd20:	f008 fb38 	bl	8025394 <iprintf>
 801cd24:	e7e8      	b.n	801ccf8 <tcp_eff_send_mss_netif+0x8>
 801cd26:	bf00      	nop
 801cd28:	08043d3c 	.word	0x08043d3c
 801cd2c:	080443e8 	.word	0x080443e8
 801cd30:	08029fe8 	.word	0x08029fe8

0801cd34 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801cd34:	b308      	cbz	r0, 801cd7a <tcp_netif_ip_addr_changed+0x46>
{
 801cd36:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801cd38:	6803      	ldr	r3, [r0, #0]
 801cd3a:	4604      	mov	r4, r0
 801cd3c:	b903      	cbnz	r3, 801cd40 <tcp_netif_ip_addr_changed+0xc>
}
 801cd3e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801cd40:	4b0e      	ldr	r3, [pc, #56]	; (801cd7c <tcp_netif_ip_addr_changed+0x48>)
 801cd42:	460d      	mov	r5, r1
 801cd44:	6819      	ldr	r1, [r3, #0]
 801cd46:	f7ff fd01 	bl	801c74c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801cd4a:	4b0d      	ldr	r3, [pc, #52]	; (801cd80 <tcp_netif_ip_addr_changed+0x4c>)
 801cd4c:	4620      	mov	r0, r4
 801cd4e:	6819      	ldr	r1, [r3, #0]
 801cd50:	f7ff fcfc 	bl	801c74c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801cd54:	2d00      	cmp	r5, #0
 801cd56:	d0f2      	beq.n	801cd3e <tcp_netif_ip_addr_changed+0xa>
 801cd58:	682b      	ldr	r3, [r5, #0]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d0ef      	beq.n	801cd3e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cd5e:	4b09      	ldr	r3, [pc, #36]	; (801cd84 <tcp_netif_ip_addr_changed+0x50>)
 801cd60:	681b      	ldr	r3, [r3, #0]
 801cd62:	2b00      	cmp	r3, #0
 801cd64:	d0eb      	beq.n	801cd3e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801cd66:	6819      	ldr	r1, [r3, #0]
 801cd68:	6822      	ldr	r2, [r4, #0]
 801cd6a:	4291      	cmp	r1, r2
 801cd6c:	d101      	bne.n	801cd72 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801cd6e:	682a      	ldr	r2, [r5, #0]
 801cd70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801cd72:	68db      	ldr	r3, [r3, #12]
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d1f6      	bne.n	801cd66 <tcp_netif_ip_addr_changed+0x32>
}
 801cd78:	bd38      	pop	{r3, r4, r5, pc}
 801cd7a:	4770      	bx	lr
 801cd7c:	2002e0bc 	.word	0x2002e0bc
 801cd80:	2002e0c4 	.word	0x2002e0c4
 801cd84:	2002e0c8 	.word	0x2002e0c8

0801cd88 <tcp_free_ooseq>:
{
 801cd88:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801cd8a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801cd8c:	b16c      	cbz	r4, 801cdaa <tcp_free_ooseq+0x22>
 801cd8e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801cd90:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801cd92:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801cd94:	6868      	ldr	r0, [r5, #4]
 801cd96:	b108      	cbz	r0, 801cd9c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801cd98:	f7fe fa32 	bl	801b200 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801cd9c:	4629      	mov	r1, r5
 801cd9e:	2004      	movs	r0, #4
 801cda0:	f7fd fd16 	bl	801a7d0 <memp_free>
  while (seg != NULL) {
 801cda4:	2c00      	cmp	r4, #0
 801cda6:	d1f3      	bne.n	801cd90 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801cda8:	6774      	str	r4, [r6, #116]	; 0x74
}
 801cdaa:	bd70      	pop	{r4, r5, r6, pc}

0801cdac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cdae:	4605      	mov	r5, r0
{
 801cdb0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801cdb2:	2800      	cmp	r0, #0
 801cdb4:	d03e      	beq.n	801ce34 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801cdb6:	68eb      	ldr	r3, [r5, #12]
 801cdb8:	8998      	ldrh	r0, [r3, #12]
 801cdba:	f7fc f9e5 	bl	8019188 <lwip_htons>
 801cdbe:	07c2      	lsls	r2, r0, #31
 801cdc0:	d432      	bmi.n	801ce28 <tcp_oos_insert_segment+0x7c>
 801cdc2:	4e20      	ldr	r6, [pc, #128]	; (801ce44 <tcp_oos_insert_segment+0x98>)
 801cdc4:	e005      	b.n	801cdd2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801cdc6:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801cdc8:	4620      	mov	r0, r4
 801cdca:	f7fe ff95 	bl	801bcf8 <tcp_seg_free>
    while (next &&
 801cdce:	463c      	mov	r4, r7
 801cdd0:	b1ef      	cbz	r7, 801ce0e <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801cdd2:	68e1      	ldr	r1, [r4, #12]
 801cdd4:	8923      	ldrh	r3, [r4, #8]
 801cdd6:	6837      	ldr	r7, [r6, #0]
 801cdd8:	892a      	ldrh	r2, [r5, #8]
 801cdda:	6848      	ldr	r0, [r1, #4]
 801cddc:	443a      	add	r2, r7
 801cdde:	4403      	add	r3, r0
 801cde0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801cde2:	2b00      	cmp	r3, #0
 801cde4:	db15      	blt.n	801ce12 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cde6:	8988      	ldrh	r0, [r1, #12]
 801cde8:	f7fc f9ce 	bl	8019188 <lwip_htons>
 801cdec:	07c3      	lsls	r3, r0, #31
 801cdee:	d5ea      	bpl.n	801cdc6 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801cdf0:	68eb      	ldr	r3, [r5, #12]
 801cdf2:	2001      	movs	r0, #1
 801cdf4:	899f      	ldrh	r7, [r3, #12]
 801cdf6:	f7fc f9c7 	bl	8019188 <lwip_htons>
 801cdfa:	68eb      	ldr	r3, [r5, #12]
 801cdfc:	4338      	orrs	r0, r7
      next = next->next;
 801cdfe:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ce00:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801ce02:	4620      	mov	r0, r4
 801ce04:	f7fe ff78 	bl	801bcf8 <tcp_seg_free>
    while (next &&
 801ce08:	463c      	mov	r4, r7
 801ce0a:	2f00      	cmp	r7, #0
 801ce0c:	d1e1      	bne.n	801cdd2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801ce0e:	602c      	str	r4, [r5, #0]
}
 801ce10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ce12:	1a12      	subs	r2, r2, r0
    if (next &&
 801ce14:	2a00      	cmp	r2, #0
 801ce16:	ddfa      	ble.n	801ce0e <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ce18:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801ce1a:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ce1c:	b289      	uxth	r1, r1
 801ce1e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ce20:	f7fe f8d6 	bl	801afd0 <pbuf_realloc>
  cseg->next = next;
 801ce24:	602c      	str	r4, [r5, #0]
}
 801ce26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801ce28:	4620      	mov	r0, r4
    next = NULL;
 801ce2a:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801ce2c:	f7fe ff52 	bl	801bcd4 <tcp_segs_free>
  cseg->next = next;
 801ce30:	602c      	str	r4, [r5, #0]
}
 801ce32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ce34:	4b04      	ldr	r3, [pc, #16]	; (801ce48 <tcp_oos_insert_segment+0x9c>)
 801ce36:	f240 421f 	movw	r2, #1055	; 0x41f
 801ce3a:	4904      	ldr	r1, [pc, #16]	; (801ce4c <tcp_oos_insert_segment+0xa0>)
 801ce3c:	4804      	ldr	r0, [pc, #16]	; (801ce50 <tcp_oos_insert_segment+0xa4>)
 801ce3e:	f008 faa9 	bl	8025394 <iprintf>
 801ce42:	e7b8      	b.n	801cdb6 <tcp_oos_insert_segment+0xa>
 801ce44:	2002e0fc 	.word	0x2002e0fc
 801ce48:	08044438 	.word	0x08044438
 801ce4c:	0804446c 	.word	0x0804446c
 801ce50:	08029fe8 	.word	0x08029fe8

0801ce54 <tcp_input_delayed_close>:
{
 801ce54:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ce56:	4604      	mov	r4, r0
 801ce58:	b1c8      	cbz	r0, 801ce8e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801ce5a:	4b11      	ldr	r3, [pc, #68]	; (801cea0 <tcp_input_delayed_close+0x4c>)
 801ce5c:	781b      	ldrb	r3, [r3, #0]
 801ce5e:	f013 0310 	ands.w	r3, r3, #16
 801ce62:	d101      	bne.n	801ce68 <tcp_input_delayed_close+0x14>
  return 0;
 801ce64:	4618      	mov	r0, r3
}
 801ce66:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ce68:	8b63      	ldrh	r3, [r4, #26]
 801ce6a:	06db      	lsls	r3, r3, #27
 801ce6c:	d406      	bmi.n	801ce7c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ce6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801ce72:	b11b      	cbz	r3, 801ce7c <tcp_input_delayed_close+0x28>
 801ce74:	f06f 010e 	mvn.w	r1, #14
 801ce78:	6920      	ldr	r0, [r4, #16]
 801ce7a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ce7c:	4621      	mov	r1, r4
 801ce7e:	4809      	ldr	r0, [pc, #36]	; (801cea4 <tcp_input_delayed_close+0x50>)
 801ce80:	f7ff fb02 	bl	801c488 <tcp_pcb_remove>
    tcp_free(pcb);
 801ce84:	4620      	mov	r0, r4
 801ce86:	f7fe fcfb 	bl	801b880 <tcp_free>
 801ce8a:	2001      	movs	r0, #1
}
 801ce8c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ce8e:	4b06      	ldr	r3, [pc, #24]	; (801cea8 <tcp_input_delayed_close+0x54>)
 801ce90:	f240 225a 	movw	r2, #602	; 0x25a
 801ce94:	4905      	ldr	r1, [pc, #20]	; (801ceac <tcp_input_delayed_close+0x58>)
 801ce96:	4806      	ldr	r0, [pc, #24]	; (801ceb0 <tcp_input_delayed_close+0x5c>)
 801ce98:	f008 fa7c 	bl	8025394 <iprintf>
 801ce9c:	e7dd      	b.n	801ce5a <tcp_input_delayed_close+0x6>
 801ce9e:	bf00      	nop
 801cea0:	2002e0f8 	.word	0x2002e0f8
 801cea4:	2002e0bc 	.word	0x2002e0bc
 801cea8:	08044438 	.word	0x08044438
 801ceac:	08044494 	.word	0x08044494
 801ceb0:	08029fe8 	.word	0x08029fe8

0801ceb4 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801ceb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ceb8:	b083      	sub	sp, #12
 801ceba:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801cebc:	2900      	cmp	r1, #0
 801cebe:	d03d      	beq.n	801cf3c <tcp_free_acked_segments.constprop.0+0x88>
 801cec0:	4607      	mov	r7, r0
 801cec2:	460c      	mov	r4, r1
 801cec4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801cf8c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cec8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801cf80 <tcp_free_acked_segments.constprop.0+0xcc>
 801cecc:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801cf90 <tcp_free_acked_segments.constprop.0+0xdc>
 801ced0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801cf88 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ced4:	68e3      	ldr	r3, [r4, #12]
 801ced6:	6858      	ldr	r0, [r3, #4]
 801ced8:	f7fc f95a 	bl	8019190 <lwip_htonl>
 801cedc:	68e3      	ldr	r3, [r4, #12]
 801cede:	4605      	mov	r5, r0
 801cee0:	8926      	ldrh	r6, [r4, #8]
 801cee2:	8998      	ldrh	r0, [r3, #12]
 801cee4:	f7fc f950 	bl	8019188 <lwip_htons>
 801cee8:	f8d8 3000 	ldr.w	r3, [r8]
 801ceec:	f010 0003 	ands.w	r0, r0, #3
 801cef0:	eba5 0503 	sub.w	r5, r5, r3
 801cef4:	bf18      	it	ne
 801cef6:	2001      	movne	r0, #1
 801cef8:	4435      	add	r5, r6
 801cefa:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801cefc:	2800      	cmp	r0, #0
 801cefe:	dc37      	bgt.n	801cf70 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801cf00:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801cf04:	f7fe f990 	bl	801b228 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf08:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801cf0c:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf0e:	4298      	cmp	r0, r3
 801cf10:	d824      	bhi.n	801cf5c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf12:	491a      	ldr	r1, [pc, #104]	; (801cf7c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf14:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf16:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801cf18:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf1a:	880d      	ldrh	r5, [r1, #0]
 801cf1c:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801cf22:	1953      	adds	r3, r2, r5
 801cf24:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801cf26:	f7fe fee7 	bl	801bcf8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801cf2a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cf2e:	b11b      	cbz	r3, 801cf38 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cf30:	9b01      	ldr	r3, [sp, #4]
 801cf32:	ea56 0503 	orrs.w	r5, r6, r3
 801cf36:	d006      	beq.n	801cf46 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801cf38:	2e00      	cmp	r6, #0
 801cf3a:	d1cb      	bne.n	801ced4 <tcp_free_acked_segments.constprop.0+0x20>
 801cf3c:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801cf3e:	4628      	mov	r0, r5
 801cf40:	b003      	add	sp, #12
 801cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801cf46:	4b0e      	ldr	r3, [pc, #56]	; (801cf80 <tcp_free_acked_segments.constprop.0+0xcc>)
 801cf48:	f240 4261 	movw	r2, #1121	; 0x461
 801cf4c:	490d      	ldr	r1, [pc, #52]	; (801cf84 <tcp_free_acked_segments.constprop.0+0xd0>)
 801cf4e:	480e      	ldr	r0, [pc, #56]	; (801cf88 <tcp_free_acked_segments.constprop.0+0xd4>)
 801cf50:	f008 fa20 	bl	8025394 <iprintf>
}
 801cf54:	4628      	mov	r0, r5
 801cf56:	b003      	add	sp, #12
 801cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801cf5c:	465b      	mov	r3, fp
 801cf5e:	f240 4257 	movw	r2, #1111	; 0x457
 801cf62:	4651      	mov	r1, sl
 801cf64:	4648      	mov	r0, r9
 801cf66:	f008 fa15 	bl	8025394 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801cf6a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801cf6e:	e7d0      	b.n	801cf12 <tcp_free_acked_segments.constprop.0+0x5e>
 801cf70:	4625      	mov	r5, r4
}
 801cf72:	4628      	mov	r0, r5
 801cf74:	b003      	add	sp, #12
 801cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf7a:	bf00      	nop
 801cf7c:	2002e0f0 	.word	0x2002e0f0
 801cf80:	08044438 	.word	0x08044438
 801cf84:	080444e4 	.word	0x080444e4
 801cf88:	08029fe8 	.word	0x08029fe8
 801cf8c:	2002e0d8 	.word	0x2002e0d8
 801cf90:	080444bc 	.word	0x080444bc

0801cf94 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801cf94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801cf98:	4604      	mov	r4, r0
 801cf9a:	2800      	cmp	r0, #0
 801cf9c:	f000 8200 	beq.w	801d3a0 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801cfa0:	7d23      	ldrb	r3, [r4, #20]
 801cfa2:	2b03      	cmp	r3, #3
 801cfa4:	f240 811e 	bls.w	801d1e4 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801cfa8:	4bb4      	ldr	r3, [pc, #720]	; (801d27c <tcp_receive+0x2e8>)
 801cfaa:	781b      	ldrb	r3, [r3, #0]
 801cfac:	06dd      	lsls	r5, r3, #27
 801cfae:	f100 8097 	bmi.w	801d0e0 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfb2:	4fb3      	ldr	r7, [pc, #716]	; (801d280 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfb4:	4eb3      	ldr	r6, [pc, #716]	; (801d284 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfb6:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfb8:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cfba:	2900      	cmp	r1, #0
 801cfbc:	d07f      	beq.n	801d0be <tcp_receive+0x12a>
 801cfbe:	7d22      	ldrb	r2, [r4, #20]
 801cfc0:	2a06      	cmp	r2, #6
 801cfc2:	d87c      	bhi.n	801d0be <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cfc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cfc6:	eba2 0803 	sub.w	r8, r2, r3
 801cfca:	f1b8 0f01 	cmp.w	r8, #1
 801cfce:	d405      	bmi.n	801cfdc <tcp_receive+0x48>
 801cfd0:	1c50      	adds	r0, r2, #1
 801cfd2:	1ac0      	subs	r0, r0, r3
 801cfd4:	1a41      	subs	r1, r0, r1
 801cfd6:	2900      	cmp	r1, #0
 801cfd8:	f340 81f3 	ble.w	801d3c2 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801cfdc:	1a99      	subs	r1, r3, r2
 801cfde:	2900      	cmp	r1, #0
 801cfe0:	f2c0 81ea 	blt.w	801d3b8 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cfe4:	f103 0c01 	add.w	ip, r3, #1
 801cfe8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801cfea:	ebac 0102 	sub.w	r1, ip, r2
 801cfee:	1a09      	subs	r1, r1, r0
 801cff0:	2900      	cmp	r1, #0
 801cff2:	dc39      	bgt.n	801d068 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801cff4:	429a      	cmp	r2, r3
 801cff6:	f000 8470 	beq.w	801d8da <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801cffa:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801cffc:	2d00      	cmp	r5, #0
 801cffe:	f000 8378 	beq.w	801d6f2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801d002:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801d004:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d008:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801d00c:	6842      	ldr	r2, [r0, #4]
 801d00e:	429a      	cmp	r2, r3
 801d010:	d019      	beq.n	801d046 <tcp_receive+0xb2>
              if (prev == NULL) {
 801d012:	f1b8 0f00 	cmp.w	r8, #0
 801d016:	f000 815b 	beq.w	801d2d0 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d01a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801d01e:	6849      	ldr	r1, [r1, #4]
 801d020:	ebae 0101 	sub.w	r1, lr, r1
 801d024:	2900      	cmp	r1, #0
 801d026:	db04      	blt.n	801d032 <tcp_receive+0x9e>
 801d028:	ebac 0102 	sub.w	r1, ip, r2
 801d02c:	2900      	cmp	r1, #0
 801d02e:	f340 8369 	ble.w	801d704 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d032:	6829      	ldr	r1, [r5, #0]
 801d034:	46a8      	mov	r8, r5
 801d036:	2900      	cmp	r1, #0
 801d038:	f000 8159 	beq.w	801d2ee <tcp_receive+0x35a>
 801d03c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801d03e:	68e8      	ldr	r0, [r5, #12]
 801d040:	6842      	ldr	r2, [r0, #4]
 801d042:	429a      	cmp	r2, r3
 801d044:	d1e5      	bne.n	801d012 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801d046:	4890      	ldr	r0, [pc, #576]	; (801d288 <tcp_receive+0x2f4>)
 801d048:	892b      	ldrh	r3, [r5, #8]
 801d04a:	8902      	ldrh	r2, [r0, #8]
 801d04c:	429a      	cmp	r2, r3
 801d04e:	d90b      	bls.n	801d068 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d050:	f7fe fe70 	bl	801bd34 <tcp_seg_copy>
                if (cseg != NULL) {
 801d054:	b140      	cbz	r0, 801d068 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801d056:	f1b8 0f00 	cmp.w	r8, #0
 801d05a:	f000 8414 	beq.w	801d886 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801d05e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801d062:	4629      	mov	r1, r5
 801d064:	f7ff fea2 	bl	801cdac <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d068:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801d06a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801d06e:	f002 ba47 	b.w	801f500 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801d072:	4f83      	ldr	r7, [pc, #524]	; (801d280 <tcp_receive+0x2ec>)
 801d074:	8839      	ldrh	r1, [r7, #0]
 801d076:	2900      	cmp	r1, #0
 801d078:	f040 8116 	bne.w	801d2a8 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d07c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801d07e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d080:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801d084:	4470      	add	r0, lr
 801d086:	4560      	cmp	r0, ip
 801d088:	f040 810e 	bne.w	801d2a8 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801d08c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801d08e:	0400      	lsls	r0, r0, #16
 801d090:	f100 810a 	bmi.w	801d2a8 <tcp_receive+0x314>
 801d094:	4590      	cmp	r8, r2
 801d096:	f040 8107 	bne.w	801d2a8 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801d09a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801d09e:	28ff      	cmp	r0, #255	; 0xff
 801d0a0:	f000 8393 	beq.w	801d7ca <tcp_receive+0x836>
                ++pcb->dupacks;
 801d0a4:	3001      	adds	r0, #1
 801d0a6:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801d0a8:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801d0aa:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801d0ae:	f200 838c 	bhi.w	801d7ca <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801d0b2:	f000 8396 	beq.w	801d7e2 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d0b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d0b8:	2800      	cmp	r0, #0
 801d0ba:	f040 80b6 	bne.w	801d22a <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d0be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d0c0:	1a99      	subs	r1, r3, r2
 801d0c2:	2900      	cmp	r1, #0
 801d0c4:	db06      	blt.n	801d0d4 <tcp_receive+0x140>
 801d0c6:	f1c2 0201 	rsb	r2, r2, #1
 801d0ca:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801d0cc:	1a52      	subs	r2, r2, r1
 801d0ce:	4413      	add	r3, r2
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	dd03      	ble.n	801d0dc <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801d0d4:	8b63      	ldrh	r3, [r4, #26]
 801d0d6:	f043 0302 	orr.w	r3, r3, #2
 801d0da:	8363      	strh	r3, [r4, #26]
}
 801d0dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d0e0:	4e68      	ldr	r6, [pc, #416]	; (801d284 <tcp_receive+0x2f0>)
 801d0e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801d0e4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d0e6:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d0ea:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801d0ec:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d0f0:	2900      	cmp	r1, #0
 801d0f2:	db7f      	blt.n	801d1f4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d0f4:	4d65      	ldr	r5, [pc, #404]	; (801d28c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d0f6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d0f8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801d0fa:	f000 80d9 	beq.w	801d2b0 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d0fe:	4594      	cmp	ip, r2
 801d100:	f000 80df 	beq.w	801d2c2 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801d104:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801d108:	eba2 0108 	sub.w	r1, r2, r8
 801d10c:	2900      	cmp	r1, #0
 801d10e:	ddb0      	ble.n	801d072 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801d110:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801d112:	1ad3      	subs	r3, r2, r3
 801d114:	2b00      	cmp	r3, #0
 801d116:	dc7d      	bgt.n	801d214 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801d118:	8b63      	ldrh	r3, [r4, #26]
 801d11a:	0758      	lsls	r0, r3, #29
 801d11c:	d509      	bpl.n	801d132 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801d11e:	f023 0304 	bic.w	r3, r3, #4
 801d122:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801d124:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801d128:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801d12c:	2300      	movs	r3, #0
 801d12e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d132:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801d136:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801d138:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d13a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801d13e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d140:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801d144:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801d146:	f04f 0300 	mov.w	r3, #0
 801d14a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801d14e:	d913      	bls.n	801d178 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801d150:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801d154:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801d156:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801d15a:	429a      	cmp	r2, r3
 801d15c:	f200 81c9 	bhi.w	801d4f2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d160:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801d164:	4411      	add	r1, r2
 801d166:	b289      	uxth	r1, r1
 801d168:	428a      	cmp	r2, r1
 801d16a:	f200 82a9 	bhi.w	801d6c0 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801d16e:	428b      	cmp	r3, r1
 801d170:	f240 82a8 	bls.w	801d6c4 <tcp_receive+0x730>
 801d174:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d178:	4620      	mov	r0, r4
 801d17a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801d17e:	f7ff fe99 	bl	801ceb4 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d182:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d184:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801d186:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d188:	4620      	mov	r0, r4
 801d18a:	f7ff fe93 	bl	801ceb4 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801d18e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801d190:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801d192:	fab2 f382 	clz	r3, r2
 801d196:	095b      	lsrs	r3, r3, #5
 801d198:	425b      	negs	r3, r3
 801d19a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801d19c:	2300      	movs	r3, #0
 801d19e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801d1a0:	2800      	cmp	r0, #0
 801d1a2:	f000 81a3 	beq.w	801d4ec <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801d1a6:	4b3a      	ldr	r3, [pc, #232]	; (801d290 <tcp_receive+0x2fc>)
 801d1a8:	8819      	ldrh	r1, [r3, #0]
 801d1aa:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801d1ae:	440b      	add	r3, r1
 801d1b0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801d1b4:	8b63      	ldrh	r3, [r4, #26]
 801d1b6:	0519      	lsls	r1, r3, #20
 801d1b8:	f140 80fa 	bpl.w	801d3b0 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801d1bc:	2a00      	cmp	r2, #0
 801d1be:	f000 81af 	beq.w	801d520 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801d1c2:	68d3      	ldr	r3, [r2, #12]
 801d1c4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801d1c6:	6858      	ldr	r0, [r3, #4]
 801d1c8:	f7fb ffe2 	bl	8019190 <lwip_htonl>
 801d1cc:	1a38      	subs	r0, r7, r0
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	f300 80ee 	bgt.w	801d3b0 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801d1d4:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d1d6:	4f2a      	ldr	r7, [pc, #168]	; (801d280 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801d1d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d1dc:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801d1de:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d1e0:	6833      	ldr	r3, [r6, #0]
 801d1e2:	e01d      	b.n	801d220 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801d1e4:	4b2b      	ldr	r3, [pc, #172]	; (801d294 <tcp_receive+0x300>)
 801d1e6:	f240 427c 	movw	r2, #1148	; 0x47c
 801d1ea:	492b      	ldr	r1, [pc, #172]	; (801d298 <tcp_receive+0x304>)
 801d1ec:	482b      	ldr	r0, [pc, #172]	; (801d29c <tcp_receive+0x308>)
 801d1ee:	f008 f8d1 	bl	8025394 <iprintf>
 801d1f2:	e6d9      	b.n	801cfa8 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d1f4:	4a2a      	ldr	r2, [pc, #168]	; (801d2a0 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d1f6:	4d25      	ldr	r5, [pc, #148]	; (801d28c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d1f8:	6812      	ldr	r2, [r2, #0]
 801d1fa:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d1fc:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d1fe:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801d202:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801d206:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801d208:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801d20c:	bf38      	it	cc
 801d20e:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801d212:	e777      	b.n	801d104 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d214:	4f1a      	ldr	r7, [pc, #104]	; (801d280 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801d216:	4620      	mov	r0, r4
 801d218:	f002 f972 	bl	801f500 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d21c:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d21e:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801d220:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801d222:	2800      	cmp	r0, #0
 801d224:	f43f aec9 	beq.w	801cfba <tcp_receive+0x26>
 801d228:	682a      	ldr	r2, [r5, #0]
 801d22a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801d22c:	1aaa      	subs	r2, r5, r2
 801d22e:	2a00      	cmp	r2, #0
 801d230:	f6bf aec3 	bge.w	801cfba <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801d234:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d238:	b280      	uxth	r0, r0
 801d23a:	4a1a      	ldr	r2, [pc, #104]	; (801d2a4 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801d23c:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801d240:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801d244:	ebae 020c 	sub.w	r2, lr, ip
 801d248:	1a12      	subs	r2, r2, r0
 801d24a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801d24c:	4415      	add	r5, r2
      if (m < 0) {
 801d24e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801d252:	b22d      	sxth	r5, r5
 801d254:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801d256:	d003      	beq.n	801d260 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801d258:	ebac 0c0e 	sub.w	ip, ip, lr
 801d25c:	4460      	add	r0, ip
 801d25e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801d260:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801d264:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801d268:	4410      	add	r0, r2
      pcb->rttest = 0;
 801d26a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801d26c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801d26e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d270:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801d274:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801d276:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801d27a:	e69e      	b.n	801cfba <tcp_receive+0x26>
 801d27c:	2002e0dc 	.word	0x2002e0dc
 801d280:	2002e116 	.word	0x2002e116
 801d284:	2002e0fc 	.word	0x2002e0fc
 801d288:	2002e0e0 	.word	0x2002e0e0
 801d28c:	2002e0d8 	.word	0x2002e0d8
 801d290:	2002e0f0 	.word	0x2002e0f0
 801d294:	08044438 	.word	0x08044438
 801d298:	08044520 	.word	0x08044520
 801d29c:	08029fe8 	.word	0x08029fe8
 801d2a0:	2002e108 	.word	0x2002e108
 801d2a4:	2002e0cc 	.word	0x2002e0cc
        pcb->dupacks = 0;
 801d2a8:	2200      	movs	r2, #0
 801d2aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d2ae:	e7b7      	b.n	801d220 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801d2b0:	ebac 0102 	sub.w	r1, ip, r2
 801d2b4:	2900      	cmp	r1, #0
 801d2b6:	f6bf af22 	bge.w	801d0fe <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801d2ba:	49ac      	ldr	r1, [pc, #688]	; (801d56c <tcp_receive+0x5d8>)
 801d2bc:	6809      	ldr	r1, [r1, #0]
 801d2be:	89c9      	ldrh	r1, [r1, #14]
 801d2c0:	e79d      	b.n	801d1fe <tcp_receive+0x26a>
 801d2c2:	49aa      	ldr	r1, [pc, #680]	; (801d56c <tcp_receive+0x5d8>)
 801d2c4:	6809      	ldr	r1, [r1, #0]
 801d2c6:	89c9      	ldrh	r1, [r1, #14]
 801d2c8:	458e      	cmp	lr, r1
 801d2ca:	f4bf af1b 	bcs.w	801d104 <tcp_receive+0x170>
 801d2ce:	e796      	b.n	801d1fe <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d2d0:	1a99      	subs	r1, r3, r2
 801d2d2:	2900      	cmp	r1, #0
 801d2d4:	f6bf aead 	bge.w	801d032 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d2d8:	48a5      	ldr	r0, [pc, #660]	; (801d570 <tcp_receive+0x5dc>)
 801d2da:	f7fe fd2b 	bl	801bd34 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d2de:	2800      	cmp	r0, #0
 801d2e0:	f43f aec2 	beq.w	801d068 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801d2e4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801d2e6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d2e8:	f7ff fd60 	bl	801cdac <tcp_oos_insert_segment>
 801d2ec:	e6bc      	b.n	801d068 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d2ee:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	f77f aeb9 	ble.w	801d068 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d2f6:	8980      	ldrh	r0, [r0, #12]
 801d2f8:	f7fb ff46 	bl	8019188 <lwip_htons>
 801d2fc:	07c1      	lsls	r1, r0, #31
 801d2fe:	f53f aeb3 	bmi.w	801d068 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801d302:	489b      	ldr	r0, [pc, #620]	; (801d570 <tcp_receive+0x5dc>)
 801d304:	f7fe fd16 	bl	801bd34 <tcp_seg_copy>
 801d308:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801d30a:	2800      	cmp	r0, #0
 801d30c:	f43f aeac 	beq.w	801d068 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d310:	68eb      	ldr	r3, [r5, #12]
 801d312:	892a      	ldrh	r2, [r5, #8]
 801d314:	6859      	ldr	r1, [r3, #4]
 801d316:	6833      	ldr	r3, [r6, #0]
 801d318:	440a      	add	r2, r1
 801d31a:	1ad2      	subs	r2, r2, r3
 801d31c:	2a00      	cmp	r2, #0
 801d31e:	dd05      	ble.n	801d32c <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d320:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801d322:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d324:	b299      	uxth	r1, r3
 801d326:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801d328:	f7fd fe52 	bl	801afd0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d32c:	6832      	ldr	r2, [r6, #0]
 801d32e:	883b      	ldrh	r3, [r7, #0]
 801d330:	4413      	add	r3, r2
 801d332:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d334:	1a9b      	subs	r3, r3, r2
 801d336:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d338:	1a9b      	subs	r3, r3, r2
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	f77f ae94 	ble.w	801d068 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d340:	682b      	ldr	r3, [r5, #0]
 801d342:	68db      	ldr	r3, [r3, #12]
 801d344:	8998      	ldrh	r0, [r3, #12]
 801d346:	f7fb ff1f 	bl	8019188 <lwip_htons>
 801d34a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d34c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d34e:	f100 82b1 	bmi.w	801d8b4 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d352:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801d354:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801d356:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d358:	1a89      	subs	r1, r1, r2
 801d35a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801d35c:	4411      	add	r1, r2
 801d35e:	b289      	uxth	r1, r1
 801d360:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d362:	f7fd fe35 	bl	801afd0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d366:	682b      	ldr	r3, [r5, #0]
 801d368:	891d      	ldrh	r5, [r3, #8]
 801d36a:	68db      	ldr	r3, [r3, #12]
 801d36c:	8998      	ldrh	r0, [r3, #12]
 801d36e:	f7fb ff0b 	bl	8019188 <lwip_htons>
 801d372:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d376:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801d378:	bf18      	it	ne
 801d37a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d37c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801d37e:	442b      	add	r3, r5
 801d380:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d382:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801d384:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d388:	4413      	add	r3, r2
 801d38a:	4299      	cmp	r1, r3
 801d38c:	f43f ae6c 	beq.w	801d068 <tcp_receive+0xd4>
 801d390:	4b78      	ldr	r3, [pc, #480]	; (801d574 <tcp_receive+0x5e0>)
 801d392:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d396:	4978      	ldr	r1, [pc, #480]	; (801d578 <tcp_receive+0x5e4>)
 801d398:	4878      	ldr	r0, [pc, #480]	; (801d57c <tcp_receive+0x5e8>)
 801d39a:	f007 fffb 	bl	8025394 <iprintf>
 801d39e:	e663      	b.n	801d068 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801d3a0:	4b74      	ldr	r3, [pc, #464]	; (801d574 <tcp_receive+0x5e0>)
 801d3a2:	f240 427b 	movw	r2, #1147	; 0x47b
 801d3a6:	4976      	ldr	r1, [pc, #472]	; (801d580 <tcp_receive+0x5ec>)
 801d3a8:	4874      	ldr	r0, [pc, #464]	; (801d57c <tcp_receive+0x5e8>)
 801d3aa:	f007 fff3 	bl	8025394 <iprintf>
 801d3ae:	e5f7      	b.n	801cfa0 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d3b0:	4f74      	ldr	r7, [pc, #464]	; (801d584 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d3b2:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d3b4:	8839      	ldrh	r1, [r7, #0]
 801d3b6:	e733      	b.n	801d220 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801d3b8:	8b63      	ldrh	r3, [r4, #26]
 801d3ba:	f043 0302 	orr.w	r3, r3, #2
 801d3be:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d3c0:	e652      	b.n	801d068 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801d3c2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d570 <tcp_receive+0x5dc>
 801d3c6:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d3ca:	2d00      	cmp	r5, #0
 801d3cc:	f000 8170 	beq.w	801d6b0 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d3d0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801d3d4:	4598      	cmp	r8, r3
 801d3d6:	f200 80c0 	bhi.w	801d55a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d3da:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801d3de:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d3e2:	891a      	ldrh	r2, [r3, #8]
 801d3e4:	4542      	cmp	r2, r8
 801d3e6:	f0c0 80ad 	bcc.w	801d544 <tcp_receive+0x5b0>
      inseg.len -= off;
 801d3ea:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d3ee:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801d3f2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d3f6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801d3f8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801d3fc:	896b      	ldrh	r3, [r5, #10]
 801d3fe:	4543      	cmp	r3, r8
 801d400:	d20a      	bcs.n	801d418 <tcp_receive+0x484>
        p->len = 0;
 801d402:	2100      	movs	r1, #0
        off -= p->len;
 801d404:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801d408:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801d40a:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801d40c:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801d40e:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801d412:	896b      	ldrh	r3, [r5, #10]
 801d414:	4543      	cmp	r3, r8
 801d416:	d3f5      	bcc.n	801d404 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801d418:	4641      	mov	r1, r8
 801d41a:	4628      	mov	r0, r5
 801d41c:	f7fd fe64 	bl	801b0e8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801d420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d422:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801d426:	6033      	str	r3, [r6, #0]
 801d428:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d42a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d42c:	2b00      	cmp	r3, #0
 801d42e:	f43f ae1b 	beq.w	801d068 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801d432:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d436:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d43a:	8998      	ldrh	r0, [r3, #12]
 801d43c:	f7fb fea4 	bl	8019188 <lwip_htons>
 801d440:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801d444:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801d446:	bf18      	it	ne
 801d448:	2301      	movne	r3, #1
 801d44a:	442b      	add	r3, r5
 801d44c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801d44e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801d450:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801d452:	f0c0 8181 	bcc.w	801d758 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801d456:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801d458:	2b00      	cmp	r3, #0
 801d45a:	f000 80a0 	beq.w	801d59e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d45e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d462:	8998      	ldrh	r0, [r3, #12]
 801d464:	f7fb fe90 	bl	8019188 <lwip_htons>
 801d468:	07c2      	lsls	r2, r0, #31
 801d46a:	f100 8095 	bmi.w	801d598 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801d46e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801d470:	b955      	cbnz	r5, 801d488 <tcp_receive+0x4f4>
 801d472:	e1f4      	b.n	801d85e <tcp_receive+0x8ca>
              next = next->next;
 801d474:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801d478:	4628      	mov	r0, r5
 801d47a:	f7fe fc3d 	bl	801bcf8 <tcp_seg_free>
            while (next &&
 801d47e:	4645      	mov	r5, r8
 801d480:	f1b8 0f00 	cmp.w	r8, #0
 801d484:	f000 81eb 	beq.w	801d85e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d488:	68e8      	ldr	r0, [r5, #12]
 801d48a:	883a      	ldrh	r2, [r7, #0]
 801d48c:	f8d6 e000 	ldr.w	lr, [r6]
 801d490:	892b      	ldrh	r3, [r5, #8]
 801d492:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801d496:	eb02 010e 	add.w	r1, r2, lr
 801d49a:	4463      	add	r3, ip
 801d49c:	1acb      	subs	r3, r1, r3
            while (next &&
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	f2c0 81a5 	blt.w	801d7ee <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d4a4:	8980      	ldrh	r0, [r0, #12]
 801d4a6:	f7fb fe6f 	bl	8019188 <lwip_htons>
 801d4aa:	07c3      	lsls	r3, r0, #31
 801d4ac:	d5e2      	bpl.n	801d474 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d4ae:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4b2:	8998      	ldrh	r0, [r3, #12]
 801d4b4:	f7fb fe68 	bl	8019188 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d4b8:	0780      	lsls	r0, r0, #30
 801d4ba:	d4db      	bmi.n	801d474 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d4bc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4c0:	2001      	movs	r0, #1
 801d4c2:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d4c6:	f7fb fe5f 	bl	8019188 <lwip_htons>
 801d4ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d4ce:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801d4d2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d4d6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d4d8:	b280      	uxth	r0, r0
 801d4da:	f7fb fe55 	bl	8019188 <lwip_htons>
 801d4de:	f010 0003 	ands.w	r0, r0, #3
 801d4e2:	bf18      	it	ne
 801d4e4:	2001      	movne	r0, #1
 801d4e6:	4440      	add	r0, r8
 801d4e8:	8038      	strh	r0, [r7, #0]
 801d4ea:	e7c3      	b.n	801d474 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801d4ec:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801d4f0:	e659      	b.n	801d1a6 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d4f2:	8b62      	ldrh	r2, [r4, #26]
 801d4f4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d4f8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801d4fa:	bf14      	ite	ne
 801d4fc:	2001      	movne	r0, #1
 801d4fe:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801d500:	fb12 f200 	smulbb	r2, r2, r0
 801d504:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801d506:	428a      	cmp	r2, r1
 801d508:	bf94      	ite	ls
 801d50a:	1898      	addls	r0, r3, r2
 801d50c:	1858      	addhi	r0, r3, r1
 801d50e:	b282      	uxth	r2, r0
 801d510:	4293      	cmp	r3, r2
 801d512:	f240 80e0 	bls.w	801d6d6 <tcp_receive+0x742>
 801d516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d51a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801d51e:	e62b      	b.n	801d178 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801d520:	b148      	cbz	r0, 801d536 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801d522:	68c3      	ldr	r3, [r0, #12]
 801d524:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801d526:	6858      	ldr	r0, [r3, #4]
 801d528:	f7fb fe32 	bl	8019190 <lwip_htonl>
 801d52c:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801d52e:	2800      	cmp	r0, #0
 801d530:	f73f af3e 	bgt.w	801d3b0 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801d534:	8b63      	ldrh	r3, [r4, #26]
 801d536:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d53a:	4f12      	ldr	r7, [pc, #72]	; (801d584 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801d53c:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d53e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d540:	6833      	ldr	r3, [r6, #0]
 801d542:	e66d      	b.n	801d220 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d544:	4b0b      	ldr	r3, [pc, #44]	; (801d574 <tcp_receive+0x5e0>)
 801d546:	f240 5297 	movw	r2, #1431	; 0x597
 801d54a:	490f      	ldr	r1, [pc, #60]	; (801d588 <tcp_receive+0x5f4>)
 801d54c:	480b      	ldr	r0, [pc, #44]	; (801d57c <tcp_receive+0x5e8>)
 801d54e:	f007 ff21 	bl	8025394 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d552:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d556:	891a      	ldrh	r2, [r3, #8]
 801d558:	e747      	b.n	801d3ea <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d55a:	4b06      	ldr	r3, [pc, #24]	; (801d574 <tcp_receive+0x5e0>)
 801d55c:	f240 5295 	movw	r2, #1429	; 0x595
 801d560:	490a      	ldr	r1, [pc, #40]	; (801d58c <tcp_receive+0x5f8>)
 801d562:	4806      	ldr	r0, [pc, #24]	; (801d57c <tcp_receive+0x5e8>)
 801d564:	f007 ff16 	bl	8025394 <iprintf>
 801d568:	e737      	b.n	801d3da <tcp_receive+0x446>
 801d56a:	bf00      	nop
 801d56c:	2002e108 	.word	0x2002e108
 801d570:	2002e0e0 	.word	0x2002e0e0
 801d574:	08044438 	.word	0x08044438
 801d578:	0804456c 	.word	0x0804456c
 801d57c:	08029fe8 	.word	0x08029fe8
 801d580:	08044504 	.word	0x08044504
 801d584:	2002e116 	.word	0x2002e116
 801d588:	0804455c 	.word	0x0804455c
 801d58c:	0804454c 	.word	0x0804454c
              pcb->ooseq = pcb->ooseq->next;
 801d590:	6803      	ldr	r3, [r0, #0]
 801d592:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d594:	f7fe fbb0 	bl	801bcf8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d598:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d59a:	2800      	cmp	r0, #0
 801d59c:	d1f8      	bne.n	801d590 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801d59e:	883a      	ldrh	r2, [r7, #0]
 801d5a0:	6831      	ldr	r1, [r6, #0]
 801d5a2:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d5a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801d5a6:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d5a8:	4293      	cmp	r3, r2
 801d5aa:	f0c0 80cb 	bcc.w	801d744 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801d5ae:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801d5b0:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801d5b2:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801d5b4:	f7fe fa68 	bl	801ba88 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801d5b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d5bc:	891a      	ldrh	r2, [r3, #8]
 801d5be:	b122      	cbz	r2, 801d5ca <tcp_receive+0x636>
          recv_data = inseg.p;
 801d5c0:	4ab2      	ldr	r2, [pc, #712]	; (801d88c <tcp_receive+0x8f8>)
 801d5c2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d5ca:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d5ce:	8998      	ldrh	r0, [r3, #12]
 801d5d0:	f7fb fdda 	bl	8019188 <lwip_htons>
 801d5d4:	07c2      	lsls	r2, r0, #31
 801d5d6:	d504      	bpl.n	801d5e2 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801d5d8:	4aad      	ldr	r2, [pc, #692]	; (801d890 <tcp_receive+0x8fc>)
 801d5da:	7813      	ldrb	r3, [r2, #0]
 801d5dc:	f043 0320 	orr.w	r3, r3, #32
 801d5e0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801d5e2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d5e4:	2d00      	cmp	r5, #0
 801d5e6:	d07b      	beq.n	801d6e0 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d5e8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801d898 <tcp_receive+0x904>
 801d5ec:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801d8b0 <tcp_receive+0x91c>
 801d5f0:	4fa8      	ldr	r7, [pc, #672]	; (801d894 <tcp_receive+0x900>)
 801d5f2:	e033      	b.n	801d65c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d5f4:	68eb      	ldr	r3, [r5, #12]
 801d5f6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d5fa:	8998      	ldrh	r0, [r3, #12]
 801d5fc:	f7fb fdc4 	bl	8019188 <lwip_htons>
 801d600:	f010 0003 	ands.w	r0, r0, #3
 801d604:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d606:	bf18      	it	ne
 801d608:	2001      	movne	r0, #1
 801d60a:	4450      	add	r0, sl
 801d60c:	1a18      	subs	r0, r3, r0
 801d60e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801d610:	4620      	mov	r0, r4
 801d612:	f7fe fa39 	bl	801ba88 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801d616:	6869      	ldr	r1, [r5, #4]
 801d618:	890b      	ldrh	r3, [r1, #8]
 801d61a:	b13b      	cbz	r3, 801d62c <tcp_receive+0x698>
            if (recv_data) {
 801d61c:	4b9b      	ldr	r3, [pc, #620]	; (801d88c <tcp_receive+0x8f8>)
 801d61e:	6818      	ldr	r0, [r3, #0]
 801d620:	2800      	cmp	r0, #0
 801d622:	d05b      	beq.n	801d6dc <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801d624:	f7fd fe1e 	bl	801b264 <pbuf_cat>
            cseg->p = NULL;
 801d628:	2300      	movs	r3, #0
 801d62a:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d62c:	68eb      	ldr	r3, [r5, #12]
 801d62e:	8998      	ldrh	r0, [r3, #12]
 801d630:	f7fb fdaa 	bl	8019188 <lwip_htons>
 801d634:	07c3      	lsls	r3, r0, #31
 801d636:	d509      	bpl.n	801d64c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801d638:	4a95      	ldr	r2, [pc, #596]	; (801d890 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d63a:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801d63c:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d63e:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801d640:	f043 0320 	orr.w	r3, r3, #32
 801d644:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d646:	d101      	bne.n	801d64c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801d648:	2307      	movs	r3, #7
 801d64a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801d64c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801d64e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801d650:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801d652:	f7fe fb51 	bl	801bcf8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d656:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d658:	2d00      	cmp	r5, #0
 801d65a:	d041      	beq.n	801d6e0 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d65c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801d65e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d660:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801d662:	428b      	cmp	r3, r1
 801d664:	d13c      	bne.n	801d6e0 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801d666:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d668:	8990      	ldrh	r0, [r2, #12]
 801d66a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d66e:	f7fb fd8b 	bl	8019188 <lwip_htons>
 801d672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d674:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d678:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d67c:	bf18      	it	ne
 801d67e:	2001      	movne	r0, #1
 801d680:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d682:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d684:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d686:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d68a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d68c:	8998      	ldrh	r0, [r3, #12]
 801d68e:	f7fb fd7b 	bl	8019188 <lwip_htons>
 801d692:	f010 0003 	ands.w	r0, r0, #3
 801d696:	bf18      	it	ne
 801d698:	2001      	movne	r0, #1
 801d69a:	4458      	add	r0, fp
 801d69c:	4582      	cmp	sl, r0
 801d69e:	d2a9      	bcs.n	801d5f4 <tcp_receive+0x660>
 801d6a0:	464b      	mov	r3, r9
 801d6a2:	f240 622b 	movw	r2, #1579	; 0x62b
 801d6a6:	4641      	mov	r1, r8
 801d6a8:	4638      	mov	r0, r7
 801d6aa:	f007 fe73 	bl	8025394 <iprintf>
 801d6ae:	e7a1      	b.n	801d5f4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d6b0:	4b79      	ldr	r3, [pc, #484]	; (801d898 <tcp_receive+0x904>)
 801d6b2:	f240 5294 	movw	r2, #1428	; 0x594
 801d6b6:	4979      	ldr	r1, [pc, #484]	; (801d89c <tcp_receive+0x908>)
 801d6b8:	4876      	ldr	r0, [pc, #472]	; (801d894 <tcp_receive+0x900>)
 801d6ba:	f007 fe6b 	bl	8025394 <iprintf>
 801d6be:	e687      	b.n	801d3d0 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d6c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6c4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d6c6:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6c8:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d6ca:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d6ce:	b292      	uxth	r2, r2
 801d6d0:	4293      	cmp	r3, r2
 801d6d2:	f63f af20 	bhi.w	801d516 <tcp_receive+0x582>
 801d6d6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801d6da:	e54d      	b.n	801d178 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801d6dc:	6019      	str	r1, [r3, #0]
 801d6de:	e7a3      	b.n	801d628 <tcp_receive+0x694>
        tcp_ack(pcb);
 801d6e0:	8b63      	ldrh	r3, [r4, #26]
 801d6e2:	07d8      	lsls	r0, r3, #31
 801d6e4:	d50a      	bpl.n	801d6fc <tcp_receive+0x768>
 801d6e6:	f023 0301 	bic.w	r3, r3, #1
 801d6ea:	f043 0302 	orr.w	r3, r3, #2
 801d6ee:	8363      	strh	r3, [r4, #26]
 801d6f0:	e4f4      	b.n	801d0dc <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d6f2:	486b      	ldr	r0, [pc, #428]	; (801d8a0 <tcp_receive+0x90c>)
 801d6f4:	f7fe fb1e 	bl	801bd34 <tcp_seg_copy>
 801d6f8:	6760      	str	r0, [r4, #116]	; 0x74
 801d6fa:	e4b5      	b.n	801d068 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801d6fc:	f043 0301 	orr.w	r3, r3, #1
 801d700:	8363      	strh	r3, [r4, #26]
 801d702:	e4eb      	b.n	801d0dc <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d704:	4866      	ldr	r0, [pc, #408]	; (801d8a0 <tcp_receive+0x90c>)
 801d706:	f7fe fb15 	bl	801bd34 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d70a:	4607      	mov	r7, r0
 801d70c:	2800      	cmp	r0, #0
 801d70e:	f43f acab 	beq.w	801d068 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d712:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d716:	6832      	ldr	r2, [r6, #0]
 801d718:	6859      	ldr	r1, [r3, #4]
 801d71a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801d71e:	440b      	add	r3, r1
 801d720:	1a9b      	subs	r3, r3, r2
 801d722:	2b00      	cmp	r3, #0
 801d724:	dd07      	ble.n	801d736 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d726:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801d728:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d72c:	b291      	uxth	r1, r2
 801d72e:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d732:	f7fd fc4d 	bl	801afd0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801d736:	4629      	mov	r1, r5
 801d738:	4638      	mov	r0, r7
                    prev->next = cseg;
 801d73a:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801d73e:	f7ff fb35 	bl	801cdac <tcp_oos_insert_segment>
 801d742:	e491      	b.n	801d068 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d744:	4b54      	ldr	r3, [pc, #336]	; (801d898 <tcp_receive+0x904>)
 801d746:	f240 6207 	movw	r2, #1543	; 0x607
 801d74a:	4956      	ldr	r1, [pc, #344]	; (801d8a4 <tcp_receive+0x910>)
 801d74c:	4851      	ldr	r0, [pc, #324]	; (801d894 <tcp_receive+0x900>)
 801d74e:	f007 fe21 	bl	8025394 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d752:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d754:	883a      	ldrh	r2, [r7, #0]
 801d756:	e72a      	b.n	801d5ae <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d758:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d75c:	8998      	ldrh	r0, [r3, #12]
 801d75e:	f7fb fd13 	bl	8019188 <lwip_htons>
 801d762:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d764:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d768:	d47d      	bmi.n	801d866 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d76a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d76c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d76e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d772:	f7fb fd09 	bl	8019188 <lwip_htons>
 801d776:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801d778:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d77c:	d503      	bpl.n	801d786 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801d77e:	3901      	subs	r1, #1
 801d780:	b289      	uxth	r1, r1
 801d782:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801d786:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d78a:	f7fd fc21 	bl	801afd0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d78e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d792:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d796:	8998      	ldrh	r0, [r3, #12]
 801d798:	f7fb fcf6 	bl	8019188 <lwip_htons>
 801d79c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7a0:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801d7a2:	bf18      	it	ne
 801d7a4:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801d7a8:	442b      	add	r3, r5
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d7ae:	4413      	add	r3, r2
 801d7b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d7b2:	440a      	add	r2, r1
 801d7b4:	4293      	cmp	r3, r2
 801d7b6:	f43f ae4e 	beq.w	801d456 <tcp_receive+0x4c2>
 801d7ba:	4b37      	ldr	r3, [pc, #220]	; (801d898 <tcp_receive+0x904>)
 801d7bc:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d7c0:	4939      	ldr	r1, [pc, #228]	; (801d8a8 <tcp_receive+0x914>)
 801d7c2:	4834      	ldr	r0, [pc, #208]	; (801d894 <tcp_receive+0x900>)
 801d7c4:	f007 fde6 	bl	8025394 <iprintf>
 801d7c8:	e645      	b.n	801d456 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d7ca:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801d7ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d7d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801d7d4:	4413      	add	r3, r2
 801d7d6:	b29b      	uxth	r3, r3
 801d7d8:	429a      	cmp	r2, r3
 801d7da:	bf88      	it	hi
 801d7dc:	460b      	movhi	r3, r1
 801d7de:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	f001 fe0a 	bl	801f3fc <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d7e8:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d7ea:	6833      	ldr	r3, [r6, #0]
 801d7ec:	e518      	b.n	801d220 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801d7ee:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	dc01      	bgt.n	801d7fa <tcp_receive+0x866>
            pcb->ooseq = next;
 801d7f6:	6765      	str	r5, [r4, #116]	; 0x74
 801d7f8:	e6d4      	b.n	801d5a4 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d7fa:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d7fe:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d802:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d806:	8998      	ldrh	r0, [r3, #12]
 801d808:	f7fb fcbe 	bl	8019188 <lwip_htons>
 801d80c:	0781      	lsls	r1, r0, #30
 801d80e:	d504      	bpl.n	801d81a <tcp_receive+0x886>
                inseg.len -= 1;
 801d810:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d814:	3b01      	subs	r3, #1
 801d816:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801d81a:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801d81e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d822:	f7fd fbd5 	bl	801afd0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d826:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d82a:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801d82e:	8998      	ldrh	r0, [r3, #12]
 801d830:	f7fb fcaa 	bl	8019188 <lwip_htons>
 801d834:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d838:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801d83a:	bf18      	it	ne
 801d83c:	2001      	movne	r0, #1
 801d83e:	eb08 0200 	add.w	r2, r8, r0
 801d842:	b292      	uxth	r2, r2
 801d844:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d846:	6859      	ldr	r1, [r3, #4]
 801d848:	6833      	ldr	r3, [r6, #0]
 801d84a:	4413      	add	r3, r2
 801d84c:	428b      	cmp	r3, r1
 801d84e:	d0d2      	beq.n	801d7f6 <tcp_receive+0x862>
 801d850:	4b11      	ldr	r3, [pc, #68]	; (801d898 <tcp_receive+0x904>)
 801d852:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d856:	4915      	ldr	r1, [pc, #84]	; (801d8ac <tcp_receive+0x918>)
 801d858:	480e      	ldr	r0, [pc, #56]	; (801d894 <tcp_receive+0x900>)
 801d85a:	f007 fd9b 	bl	8025394 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801d85e:	883a      	ldrh	r2, [r7, #0]
 801d860:	6831      	ldr	r1, [r6, #0]
 801d862:	4411      	add	r1, r2
 801d864:	e7c7      	b.n	801d7f6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d866:	899d      	ldrh	r5, [r3, #12]
 801d868:	4628      	mov	r0, r5
 801d86a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801d86e:	f7fb fc8b 	bl	8019188 <lwip_htons>
 801d872:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d876:	f7fb fc87 	bl	8019188 <lwip_htons>
 801d87a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d87e:	4328      	orrs	r0, r5
 801d880:	8198      	strh	r0, [r3, #12]
 801d882:	b280      	uxth	r0, r0
 801d884:	e772      	b.n	801d76c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801d886:	6760      	str	r0, [r4, #116]	; 0x74
 801d888:	f7ff bbeb 	b.w	801d062 <tcp_receive+0xce>
 801d88c:	2002e0f4 	.word	0x2002e0f4
 801d890:	2002e0f8 	.word	0x2002e0f8
 801d894:	08029fe8 	.word	0x08029fe8
 801d898:	08044438 	.word	0x08044438
 801d89c:	0804453c 	.word	0x0804453c
 801d8a0:	2002e0e0 	.word	0x2002e0e0
 801d8a4:	080445e0 	.word	0x080445e0
 801d8a8:	0804456c 	.word	0x0804456c
 801d8ac:	080445a4 	.word	0x080445a4
 801d8b0:	08044600 	.word	0x08044600
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d8b4:	68db      	ldr	r3, [r3, #12]
 801d8b6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d8ba:	4640      	mov	r0, r8
 801d8bc:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801d8c0:	f7fb fc62 	bl	8019188 <lwip_htons>
 801d8c4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d8c8:	f7fb fc5e 	bl	8019188 <lwip_htons>
 801d8cc:	682b      	ldr	r3, [r5, #0]
 801d8ce:	ea48 0800 	orr.w	r8, r8, r0
 801d8d2:	68da      	ldr	r2, [r3, #12]
 801d8d4:	f8a2 800c 	strh.w	r8, [r2, #12]
 801d8d8:	e53b      	b.n	801d352 <tcp_receive+0x3be>
 801d8da:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801d8e0 <tcp_receive+0x94c>
 801d8de:	e5a8      	b.n	801d432 <tcp_receive+0x49e>
 801d8e0:	2002e0e0 	.word	0x2002e0e0

0801d8e4 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d8e4:	494a      	ldr	r1, [pc, #296]	; (801da10 <tcp_parseopt.part.0+0x12c>)
 801d8e6:	4b4b      	ldr	r3, [pc, #300]	; (801da14 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d8e8:	4a4b      	ldr	r2, [pc, #300]	; (801da18 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801d8ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d8ee:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d8f2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d8f4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d8f6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d8fa:	4b48      	ldr	r3, [pc, #288]	; (801da1c <tcp_parseopt.part.0+0x138>)
 801d8fc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801da20 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d900:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801d902:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d906:	681d      	ldr	r5, [r3, #0]
 801d908:	f8b9 2000 	ldrh.w	r2, [r9]
 801d90c:	f102 0c14 	add.w	ip, r2, #20
 801d910:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d912:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801d914:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d918:	d96d      	bls.n	801d9f6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801d91a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d91c:	b1ac      	cbz	r4, 801d94a <tcp_parseopt.part.0+0x66>
 801d91e:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801d920:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d924:	d811      	bhi.n	801d94a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801d926:	b2c9      	uxtb	r1, r1
 801d928:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801d92a:	2901      	cmp	r1, #1
 801d92c:	d011      	beq.n	801d952 <tcp_parseopt.part.0+0x6e>
 801d92e:	2902      	cmp	r1, #2
 801d930:	d017      	beq.n	801d962 <tcp_parseopt.part.0+0x7e>
 801d932:	b191      	cbz	r1, 801d95a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d934:	b10c      	cbz	r4, 801d93a <tcp_parseopt.part.0+0x56>
 801d936:	4573      	cmp	r3, lr
 801d938:	d242      	bcs.n	801d9c0 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801d93a:	442b      	add	r3, r5
 801d93c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801d93e:	2b01      	cmp	r3, #1
 801d940:	d961      	bls.n	801da06 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d942:	441a      	add	r2, r3
 801d944:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d946:	2101      	movs	r1, #1
 801d948:	e7e0      	b.n	801d90c <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801d94a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801d94e:	2901      	cmp	r1, #1
 801d950:	d1ed      	bne.n	801d92e <tcp_parseopt.part.0+0x4a>
 801d952:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801d956:	461a      	mov	r2, r3
 801d958:	e7db      	b.n	801d912 <tcp_parseopt.part.0+0x2e>
 801d95a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801d95e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801d962:	1c91      	adds	r1, r2, #2
 801d964:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d966:	b10c      	cbz	r4, 801d96c <tcp_parseopt.part.0+0x88>
 801d968:	4573      	cmp	r3, lr
 801d96a:	d224      	bcs.n	801d9b6 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801d96c:	442b      	add	r3, r5
 801d96e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d970:	2b04      	cmp	r3, #4
 801d972:	d145      	bne.n	801da00 <tcp_parseopt.part.0+0x11c>
 801d974:	1c4b      	adds	r3, r1, #1
 801d976:	42b3      	cmp	r3, r6
 801d978:	da42      	bge.n	801da00 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801d97a:	1cd3      	adds	r3, r2, #3
 801d97c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d97e:	b384      	cbz	r4, 801d9e2 <tcp_parseopt.part.0+0xfe>
 801d980:	458e      	cmp	lr, r1
 801d982:	d822      	bhi.n	801d9ca <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d984:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801d988:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d98a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801d98c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801d98e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d990:	f814 c001 	ldrb.w	ip, [r4, r1]
 801d994:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d998:	d820      	bhi.n	801d9dc <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d99a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801d99e:	b2c9      	uxtb	r1, r1
 801d9a0:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801d9a2:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d9a6:	1e59      	subs	r1, r3, #1
 801d9a8:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801d9ac:	bf28      	it	cs
 801d9ae:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801d9b2:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801d9b4:	e7c7      	b.n	801d946 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9b6:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d9ba:	b2db      	uxtb	r3, r3
 801d9bc:	5ce3      	ldrb	r3, [r4, r3]
 801d9be:	e7d7      	b.n	801d970 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d9c0:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d9c4:	b2db      	uxtb	r3, r3
 801d9c6:	5ce3      	ldrb	r3, [r4, r3]
 801d9c8:	e7b9      	b.n	801d93e <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801d9ca:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d9cc:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9ce:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9d0:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d9d4:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9d6:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d9da:	d9de      	bls.n	801d99a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801d9dc:	442b      	add	r3, r5
 801d9de:	7d1b      	ldrb	r3, [r3, #20]
 801d9e0:	e7df      	b.n	801d9a2 <tcp_parseopt.part.0+0xbe>
 801d9e2:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d9e4:	3204      	adds	r2, #4
    return opts[optidx];
 801d9e6:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9e8:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d9ec:	b292      	uxth	r2, r2
    return opts[optidx];
 801d9ee:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d9f0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801d9f4:	e7d5      	b.n	801d9a2 <tcp_parseopt.part.0+0xbe>
 801d9f6:	2900      	cmp	r1, #0
 801d9f8:	d0b1      	beq.n	801d95e <tcp_parseopt.part.0+0x7a>
 801d9fa:	f8a9 2000 	strh.w	r2, [r9]
 801d9fe:	e7ae      	b.n	801d95e <tcp_parseopt.part.0+0x7a>
 801da00:	f8a9 1000 	strh.w	r1, [r9]
 801da04:	e7ab      	b.n	801d95e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801da06:	3202      	adds	r2, #2
 801da08:	f8a9 2000 	strh.w	r2, [r9]
 801da0c:	e7a7      	b.n	801d95e <tcp_parseopt.part.0+0x7a>
 801da0e:	bf00      	nop
 801da10:	2002e10c 	.word	0x2002e10c
 801da14:	2002e110 	.word	0x2002e110
 801da18:	2002e114 	.word	0x2002e114
 801da1c:	2002e108 	.word	0x2002e108
 801da20:	2002e104 	.word	0x2002e104

0801da24 <tcp_input>:
{
 801da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801da28:	4604      	mov	r4, r0
{
 801da2a:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801da2c:	2800      	cmp	r0, #0
 801da2e:	f000 80d2 	beq.w	801dbd6 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801da32:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801da34:	4e6b      	ldr	r6, [pc, #428]	; (801dbe4 <tcp_input+0x1c0>)
 801da36:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801da38:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801da3a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801da3c:	d805      	bhi.n	801da4a <tcp_input+0x26>
  pbuf_free(p);
 801da3e:	4620      	mov	r0, r4
}
 801da40:	b009      	add	sp, #36	; 0x24
 801da42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801da46:	f7fd bbdb 	b.w	801b200 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801da4a:	4f67      	ldr	r7, [pc, #412]	; (801dbe8 <tcp_input+0x1c4>)
 801da4c:	6839      	ldr	r1, [r7, #0]
 801da4e:	6978      	ldr	r0, [r7, #20]
 801da50:	f005 f9ae 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 801da54:	2800      	cmp	r0, #0
 801da56:	d1f2      	bne.n	801da3e <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801da58:	697b      	ldr	r3, [r7, #20]
 801da5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801da5e:	2be0      	cmp	r3, #224	; 0xe0
 801da60:	d0ed      	beq.n	801da3e <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801da62:	f107 0314 	add.w	r3, r7, #20
 801da66:	f107 0910 	add.w	r9, r7, #16
 801da6a:	2106      	movs	r1, #6
 801da6c:	4620      	mov	r0, r4
 801da6e:	9300      	str	r3, [sp, #0]
 801da70:	464b      	mov	r3, r9
 801da72:	8922      	ldrh	r2, [r4, #8]
 801da74:	f7fc f91c 	bl	8019cb0 <ip_chksum_pseudo>
    if (chksum != 0) {
 801da78:	4605      	mov	r5, r0
 801da7a:	2800      	cmp	r0, #0
 801da7c:	d1df      	bne.n	801da3e <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801da7e:	6833      	ldr	r3, [r6, #0]
 801da80:	8998      	ldrh	r0, [r3, #12]
 801da82:	f7fb fb81 	bl	8019188 <lwip_htons>
 801da86:	0a80      	lsrs	r0, r0, #10
 801da88:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801da8c:	2913      	cmp	r1, #19
 801da8e:	d9d6      	bls.n	801da3e <tcp_input+0x1a>
 801da90:	8923      	ldrh	r3, [r4, #8]
 801da92:	b28a      	uxth	r2, r1
 801da94:	428b      	cmp	r3, r1
 801da96:	d3d2      	bcc.n	801da3e <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801da98:	f1a2 0314 	sub.w	r3, r2, #20
 801da9c:	4853      	ldr	r0, [pc, #332]	; (801dbec <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801da9e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801dc18 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801daa2:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801daa4:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801daa8:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801daaa:	8960      	ldrh	r0, [r4, #10]
 801daac:	4290      	cmp	r0, r2
 801daae:	f080 819f 	bcs.w	801ddf0 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801dab2:	6823      	ldr	r3, [r4, #0]
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	f000 837b 	beq.w	801e1b0 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801daba:	2114      	movs	r1, #20
 801dabc:	4620      	mov	r0, r4
 801dabe:	f7fd fb13 	bl	801b0e8 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dac2:	4b4a      	ldr	r3, [pc, #296]	; (801dbec <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801dac4:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801dac6:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dac8:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801dacc:	4b48      	ldr	r3, [pc, #288]	; (801dbf0 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801dace:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dad0:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801dad4:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801dad6:	f7fd fb07 	bl	801b0e8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801dada:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801dadc:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801dae0:	8943      	ldrh	r3, [r0, #10]
 801dae2:	455b      	cmp	r3, fp
 801dae4:	d3ab      	bcc.n	801da3e <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801dae6:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801dae8:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801daea:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801daee:	f7fd fafb 	bl	801b0e8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801daf2:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801daf4:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801daf6:	442b      	add	r3, r5
 801daf8:	eba3 030a 	sub.w	r3, r3, sl
 801dafc:	b29b      	uxth	r3, r3
 801dafe:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801db00:	2a00      	cmp	r2, #0
 801db02:	f040 835c 	bne.w	801e1be <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801db06:	6822      	ldr	r2, [r4, #0]
 801db08:	8912      	ldrh	r2, [r2, #8]
 801db0a:	429a      	cmp	r2, r3
 801db0c:	d005      	beq.n	801db1a <tcp_input+0xf6>
 801db0e:	4b39      	ldr	r3, [pc, #228]	; (801dbf4 <tcp_input+0x1d0>)
 801db10:	22e0      	movs	r2, #224	; 0xe0
 801db12:	4939      	ldr	r1, [pc, #228]	; (801dbf8 <tcp_input+0x1d4>)
 801db14:	4839      	ldr	r0, [pc, #228]	; (801dbfc <tcp_input+0x1d8>)
 801db16:	f007 fc3d 	bl	8025394 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801db1a:	6835      	ldr	r5, [r6, #0]
 801db1c:	8828      	ldrh	r0, [r5, #0]
 801db1e:	f7fb fb33 	bl	8019188 <lwip_htons>
 801db22:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801db24:	6835      	ldr	r5, [r6, #0]
 801db26:	8868      	ldrh	r0, [r5, #2]
 801db28:	f7fb fb2e 	bl	8019188 <lwip_htons>
 801db2c:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801db2e:	6835      	ldr	r5, [r6, #0]
 801db30:	6868      	ldr	r0, [r5, #4]
 801db32:	f7fb fb2d 	bl	8019190 <lwip_htonl>
 801db36:	4b32      	ldr	r3, [pc, #200]	; (801dc00 <tcp_input+0x1dc>)
 801db38:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db3a:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801db3c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db3e:	68a8      	ldr	r0, [r5, #8]
 801db40:	f7fb fb26 	bl	8019190 <lwip_htonl>
 801db44:	4b2f      	ldr	r3, [pc, #188]	; (801dc04 <tcp_input+0x1e0>)
 801db46:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db48:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801db4a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db4c:	89e8      	ldrh	r0, [r5, #14]
 801db4e:	f7fb fb1b 	bl	8019188 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801db52:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801db54:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801db56:	8998      	ldrh	r0, [r3, #12]
 801db58:	f7fb fb16 	bl	8019188 <lwip_htons>
 801db5c:	492a      	ldr	r1, [pc, #168]	; (801dc08 <tcp_input+0x1e4>)
 801db5e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801db62:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801db64:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801db66:	0782      	lsls	r2, r0, #30
 801db68:	f040 8139 	bne.w	801ddde <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801db6c:	4a27      	ldr	r2, [pc, #156]	; (801dc0c <tcp_input+0x1e8>)
 801db6e:	9205      	str	r2, [sp, #20]
 801db70:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801db72:	4b27      	ldr	r3, [pc, #156]	; (801dc10 <tcp_input+0x1ec>)
 801db74:	681d      	ldr	r5, [r3, #0]
 801db76:	2d00      	cmp	r5, #0
 801db78:	f000 80e0 	beq.w	801dd3c <tcp_input+0x318>
  prev = NULL;
 801db7c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801db80:	4b1c      	ldr	r3, [pc, #112]	; (801dbf4 <tcp_input+0x1d0>)
 801db82:	f8df b098 	ldr.w	fp, [pc, #152]	; 801dc1c <tcp_input+0x1f8>
 801db86:	f8df a074 	ldr.w	sl, [pc, #116]	; 801dbfc <tcp_input+0x1d8>
 801db8a:	e019      	b.n	801dbc0 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801db8c:	2a0a      	cmp	r2, #10
 801db8e:	f000 80cd 	beq.w	801dd2c <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801db92:	2a01      	cmp	r2, #1
 801db94:	f000 80c3 	beq.w	801dd1e <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801db98:	7a29      	ldrb	r1, [r5, #8]
 801db9a:	b131      	cbz	r1, 801dbaa <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801db9c:	687a      	ldr	r2, [r7, #4]
 801db9e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801dba2:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dba4:	b2d2      	uxtb	r2, r2
 801dba6:	4291      	cmp	r1, r2
 801dba8:	d104      	bne.n	801dbb4 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801dbaa:	6832      	ldr	r2, [r6, #0]
 801dbac:	8b28      	ldrh	r0, [r5, #24]
 801dbae:	8811      	ldrh	r1, [r2, #0]
 801dbb0:	4288      	cmp	r0, r1
 801dbb2:	d035      	beq.n	801dc20 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801dbb4:	68ea      	ldr	r2, [r5, #12]
 801dbb6:	46a8      	mov	r8, r5
 801dbb8:	2a00      	cmp	r2, #0
 801dbba:	f000 80bf 	beq.w	801dd3c <tcp_input+0x318>
 801dbbe:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801dbc0:	7d2a      	ldrb	r2, [r5, #20]
 801dbc2:	2a00      	cmp	r2, #0
 801dbc4:	d1e2      	bne.n	801db8c <tcp_input+0x168>
 801dbc6:	22fb      	movs	r2, #251	; 0xfb
 801dbc8:	4659      	mov	r1, fp
 801dbca:	4650      	mov	r0, sl
 801dbcc:	f007 fbe2 	bl	8025394 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dbd0:	7d2a      	ldrb	r2, [r5, #20]
 801dbd2:	4b08      	ldr	r3, [pc, #32]	; (801dbf4 <tcp_input+0x1d0>)
 801dbd4:	e7da      	b.n	801db8c <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801dbd6:	4b07      	ldr	r3, [pc, #28]	; (801dbf4 <tcp_input+0x1d0>)
 801dbd8:	2283      	movs	r2, #131	; 0x83
 801dbda:	490e      	ldr	r1, [pc, #56]	; (801dc14 <tcp_input+0x1f0>)
 801dbdc:	4807      	ldr	r0, [pc, #28]	; (801dbfc <tcp_input+0x1d8>)
 801dbde:	f007 fbd9 	bl	8025394 <iprintf>
 801dbe2:	e726      	b.n	801da32 <tcp_input+0xe>
 801dbe4:	2002e108 	.word	0x2002e108
 801dbe8:	2001ef20 	.word	0x2001ef20
 801dbec:	2002e114 	.word	0x2002e114
 801dbf0:	2002e10c 	.word	0x2002e10c
 801dbf4:	08044438 	.word	0x08044438
 801dbf8:	0804465c 	.word	0x0804465c
 801dbfc:	08029fe8 	.word	0x08029fe8
 801dc00:	2002e0fc 	.word	0x2002e0fc
 801dc04:	2002e0d8 	.word	0x2002e0d8
 801dc08:	2002e0dc 	.word	0x2002e0dc
 801dc0c:	2002e116 	.word	0x2002e116
 801dc10:	2002e0bc 	.word	0x2002e0bc
 801dc14:	08044628 	.word	0x08044628
 801dc18:	2002e110 	.word	0x2002e110
 801dc1c:	0804467c 	.word	0x0804467c
    if (pcb->remote_port == tcphdr->src &&
 801dc20:	8852      	ldrh	r2, [r2, #2]
 801dc22:	8ae9      	ldrh	r1, [r5, #22]
 801dc24:	4291      	cmp	r1, r2
 801dc26:	d1c5      	bne.n	801dbb4 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801dc28:	6869      	ldr	r1, [r5, #4]
 801dc2a:	693a      	ldr	r2, [r7, #16]
 801dc2c:	4291      	cmp	r1, r2
 801dc2e:	d1c1      	bne.n	801dbb4 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801dc30:	6829      	ldr	r1, [r5, #0]
 801dc32:	697a      	ldr	r2, [r7, #20]
 801dc34:	4291      	cmp	r1, r2
 801dc36:	d1bd      	bne.n	801dbb4 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801dc38:	68eb      	ldr	r3, [r5, #12]
 801dc3a:	42ab      	cmp	r3, r5
 801dc3c:	f000 846e 	beq.w	801e51c <tcp_input+0xaf8>
      if (prev != NULL) {
 801dc40:	f1b8 0f00 	cmp.w	r8, #0
 801dc44:	d009      	beq.n	801dc5a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801dc46:	4a75      	ldr	r2, [pc, #468]	; (801de1c <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801dc48:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801dc4c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801dc4e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801dc50:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801dc52:	68eb      	ldr	r3, [r5, #12]
 801dc54:	42ab      	cmp	r3, r5
 801dc56:	f000 8447 	beq.w	801e4e8 <tcp_input+0xac4>
    inseg.next = NULL;
 801dc5a:	2300      	movs	r3, #0
 801dc5c:	4f70      	ldr	r7, [pc, #448]	; (801de20 <tcp_input+0x3fc>)
    recv_data = NULL;
 801dc5e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801de48 <tcp_input+0x424>
    recv_flags = 0;
 801dc62:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801de4c <tcp_input+0x428>
    recv_acked = 0;
 801dc66:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801de50 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801dc6a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801dc6c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801dc6e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801dc72:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801dc76:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801dc7a:	4b6a      	ldr	r3, [pc, #424]	; (801de24 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801dc7c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801dc7e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801dc80:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801dc82:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801dc84:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801dc86:	071a      	lsls	r2, r3, #28
 801dc88:	d503      	bpl.n	801dc92 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801dc8a:	7b62      	ldrb	r2, [r4, #13]
 801dc8c:	f042 0201 	orr.w	r2, r2, #1
 801dc90:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801dc92:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801dc94:	b172      	cbz	r2, 801dcb4 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801dc96:	4628      	mov	r0, r5
 801dc98:	f7fe ff78 	bl	801cb8c <tcp_process_refused_data>
 801dc9c:	300d      	adds	r0, #13
 801dc9e:	f000 8296 	beq.w	801e1ce <tcp_input+0x7aa>
 801dca2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801dca4:	b123      	cbz	r3, 801dcb0 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801dca6:	9b05      	ldr	r3, [sp, #20]
 801dca8:	881b      	ldrh	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	f040 828f 	bne.w	801e1ce <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801dcb0:	4b5c      	ldr	r3, [pc, #368]	; (801de24 <tcp_input+0x400>)
 801dcb2:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801dcb4:	4c5c      	ldr	r4, [pc, #368]	; (801de28 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801dcb6:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801dcb8:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801dcba:	f140 8163 	bpl.w	801df84 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801dcbe:	7d29      	ldrb	r1, [r5, #20]
 801dcc0:	2902      	cmp	r1, #2
 801dcc2:	f000 8350 	beq.w	801e366 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801dcc6:	4b59      	ldr	r3, [pc, #356]	; (801de2c <tcp_input+0x408>)
 801dcc8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	429a      	cmp	r2, r3
 801dcce:	f000 844a 	beq.w	801e566 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801dcd2:	1a9b      	subs	r3, r3, r2
 801dcd4:	d404      	bmi.n	801dce0 <tcp_input+0x2bc>
 801dcd6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801dcd8:	1a9b      	subs	r3, r3, r2
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	f340 833e 	ble.w	801e35c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801dce0:	f89a 3000 	ldrb.w	r3, [sl]
 801dce4:	0718      	lsls	r0, r3, #28
 801dce6:	f140 8278 	bpl.w	801e1da <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801dcea:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801dcee:	b11b      	cbz	r3, 801dcf8 <tcp_input+0x2d4>
 801dcf0:	f06f 010d 	mvn.w	r1, #13
 801dcf4:	6928      	ldr	r0, [r5, #16]
 801dcf6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801dcf8:	4848      	ldr	r0, [pc, #288]	; (801de1c <tcp_input+0x3f8>)
 801dcfa:	4629      	mov	r1, r5
 801dcfc:	f7fe fbc4 	bl	801c488 <tcp_pcb_remove>
        tcp_free(pcb);
 801dd00:	4628      	mov	r0, r5
 801dd02:	f7fd fdbd 	bl	801b880 <tcp_free>
    tcp_input_pcb = NULL;
 801dd06:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801dd08:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801dd0a:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801dd0c:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801dd10:	b110      	cbz	r0, 801dd18 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801dd12:	f7fd fa75 	bl	801b200 <pbuf_free>
      inseg.p = NULL;
 801dd16:	607d      	str	r5, [r7, #4]
}
 801dd18:	b009      	add	sp, #36	; 0x24
 801dd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dd1e:	22fd      	movs	r2, #253	; 0xfd
 801dd20:	4943      	ldr	r1, [pc, #268]	; (801de30 <tcp_input+0x40c>)
 801dd22:	4650      	mov	r0, sl
 801dd24:	f007 fb36 	bl	8025394 <iprintf>
 801dd28:	4b42      	ldr	r3, [pc, #264]	; (801de34 <tcp_input+0x410>)
 801dd2a:	e735      	b.n	801db98 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801dd2c:	22fc      	movs	r2, #252	; 0xfc
 801dd2e:	4942      	ldr	r1, [pc, #264]	; (801de38 <tcp_input+0x414>)
 801dd30:	4650      	mov	r0, sl
 801dd32:	f007 fb2f 	bl	8025394 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801dd36:	7d2a      	ldrb	r2, [r5, #20]
 801dd38:	4b3e      	ldr	r3, [pc, #248]	; (801de34 <tcp_input+0x410>)
 801dd3a:	e72a      	b.n	801db92 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd3c:	4b3f      	ldr	r3, [pc, #252]	; (801de3c <tcp_input+0x418>)
 801dd3e:	681d      	ldr	r5, [r3, #0]
 801dd40:	2d00      	cmp	r5, #0
 801dd42:	d05b      	beq.n	801ddfc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dd44:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801de34 <tcp_input+0x410>
 801dd48:	f8df b108 	ldr.w	fp, [pc, #264]	; 801de54 <tcp_input+0x430>
 801dd4c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801de58 <tcp_input+0x434>
 801dd50:	e002      	b.n	801dd58 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801dd52:	68ed      	ldr	r5, [r5, #12]
 801dd54:	2d00      	cmp	r5, #0
 801dd56:	d051      	beq.n	801ddfc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801dd58:	7d2b      	ldrb	r3, [r5, #20]
 801dd5a:	2b0a      	cmp	r3, #10
 801dd5c:	4643      	mov	r3, r8
 801dd5e:	d005      	beq.n	801dd6c <tcp_input+0x348>
 801dd60:	f240 121f 	movw	r2, #287	; 0x11f
 801dd64:	4659      	mov	r1, fp
 801dd66:	4650      	mov	r0, sl
 801dd68:	f007 fb14 	bl	8025394 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dd6c:	7a2a      	ldrb	r2, [r5, #8]
 801dd6e:	b132      	cbz	r2, 801dd7e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801dd70:	687b      	ldr	r3, [r7, #4]
 801dd72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801dd76:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801dd78:	b2db      	uxtb	r3, r3
 801dd7a:	429a      	cmp	r2, r3
 801dd7c:	d1e9      	bne.n	801dd52 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801dd7e:	6832      	ldr	r2, [r6, #0]
 801dd80:	8b2b      	ldrh	r3, [r5, #24]
 801dd82:	8811      	ldrh	r1, [r2, #0]
 801dd84:	428b      	cmp	r3, r1
 801dd86:	d1e4      	bne.n	801dd52 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801dd88:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801dd8a:	8ae8      	ldrh	r0, [r5, #22]
 801dd8c:	4290      	cmp	r0, r2
 801dd8e:	d1e0      	bne.n	801dd52 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801dd90:	6869      	ldr	r1, [r5, #4]
 801dd92:	693a      	ldr	r2, [r7, #16]
 801dd94:	4291      	cmp	r1, r2
 801dd96:	d1dc      	bne.n	801dd52 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801dd98:	6829      	ldr	r1, [r5, #0]
 801dd9a:	697a      	ldr	r2, [r7, #20]
 801dd9c:	4291      	cmp	r1, r2
 801dd9e:	d1d8      	bne.n	801dd52 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801dda0:	4a20      	ldr	r2, [pc, #128]	; (801de24 <tcp_input+0x400>)
 801dda2:	7812      	ldrb	r2, [r2, #0]
 801dda4:	0757      	lsls	r7, r2, #29
 801dda6:	f53f ae4a 	bmi.w	801da3e <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801ddaa:	0796      	lsls	r6, r2, #30
 801ddac:	f140 8395 	bpl.w	801e4da <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801ddb0:	4a1e      	ldr	r2, [pc, #120]	; (801de2c <tcp_input+0x408>)
 801ddb2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801ddb4:	6812      	ldr	r2, [r2, #0]
 801ddb6:	1a51      	subs	r1, r2, r1
 801ddb8:	d404      	bmi.n	801ddc4 <tcp_input+0x3a0>
 801ddba:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801ddbc:	1b89      	subs	r1, r1, r6
 801ddbe:	2900      	cmp	r1, #0
 801ddc0:	f340 83ba 	ble.w	801e538 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801ddc4:	9b05      	ldr	r3, [sp, #20]
 801ddc6:	881b      	ldrh	r3, [r3, #0]
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	f43f ae38 	beq.w	801da3e <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801ddce:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801ddd0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801ddd2:	f043 0302 	orr.w	r3, r3, #2
 801ddd6:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801ddd8:	f001 fbc4 	bl	801f564 <tcp_output>
        pbuf_free(p);
 801dddc:	e62f      	b.n	801da3e <tcp_input+0x1a>
    tcplen++;
 801ddde:	1c5a      	adds	r2, r3, #1
 801dde0:	4917      	ldr	r1, [pc, #92]	; (801de40 <tcp_input+0x41c>)
 801dde2:	b292      	uxth	r2, r2
 801dde4:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801dde6:	4293      	cmp	r3, r2
    tcplen++;
 801dde8:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801ddea:	f67f aec2 	bls.w	801db72 <tcp_input+0x14e>
 801ddee:	e626      	b.n	801da3e <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801ddf0:	4a14      	ldr	r2, [pc, #80]	; (801de44 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801ddf2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801ddf4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801ddf6:	f7fd f977 	bl	801b0e8 <pbuf_remove_header>
 801ddfa:	e68e      	b.n	801db1a <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ddfc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801de5c <tcp_input+0x438>
 801de00:	f8da 8000 	ldr.w	r8, [sl]
 801de04:	f1b8 0f00 	cmp.w	r8, #0
 801de08:	f000 8237 	beq.w	801e27a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801de0c:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801de10:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801de12:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801de14:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801de16:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801de1a:	e027      	b.n	801de6c <tcp_input+0x448>
 801de1c:	2002e0bc 	.word	0x2002e0bc
 801de20:	2002e0e0 	.word	0x2002e0e0
 801de24:	2002e0dc 	.word	0x2002e0dc
 801de28:	2002e100 	.word	0x2002e100
 801de2c:	2002e0fc 	.word	0x2002e0fc
 801de30:	080446d0 	.word	0x080446d0
 801de34:	08044438 	.word	0x08044438
 801de38:	080446a4 	.word	0x080446a4
 801de3c:	2002e0d4 	.word	0x2002e0d4
 801de40:	2002e116 	.word	0x2002e116
 801de44:	2002e10c 	.word	0x2002e10c
 801de48:	2002e0f4 	.word	0x2002e0f4
 801de4c:	2002e0f8 	.word	0x2002e0f8
 801de50:	2002e0f0 	.word	0x2002e0f0
 801de54:	08044750 	.word	0x08044750
 801de58:	08029fe8 	.word	0x08029fe8
 801de5c:	2002e0c8 	.word	0x2002e0c8
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801de60:	68eb      	ldr	r3, [r5, #12]
 801de62:	4629      	mov	r1, r5
 801de64:	461d      	mov	r5, r3
 801de66:	2b00      	cmp	r3, #0
 801de68:	f000 8208 	beq.w	801e27c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801de6c:	7a2a      	ldrb	r2, [r5, #8]
 801de6e:	b12a      	cbz	r2, 801de7c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801de70:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801de74:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801de76:	b2db      	uxtb	r3, r3
 801de78:	429a      	cmp	r2, r3
 801de7a:	d1f1      	bne.n	801de60 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801de7c:	8aea      	ldrh	r2, [r5, #22]
 801de7e:	8843      	ldrh	r3, [r0, #2]
 801de80:	429a      	cmp	r2, r3
 801de82:	d1ed      	bne.n	801de60 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801de84:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801de86:	b10a      	cbz	r2, 801de8c <tcp_input+0x468>
 801de88:	4572      	cmp	r2, lr
 801de8a:	d1e9      	bne.n	801de60 <tcp_input+0x43c>
      if (prev != NULL) {
 801de8c:	b129      	cbz	r1, 801de9a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801de8e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801de90:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801de94:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801de96:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801de9a:	4a9d      	ldr	r2, [pc, #628]	; (801e110 <tcp_input+0x6ec>)
 801de9c:	7812      	ldrb	r2, [r2, #0]
 801de9e:	0751      	lsls	r1, r2, #29
 801dea0:	f53f adcd 	bmi.w	801da3e <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801dea4:	f012 0810 	ands.w	r8, r2, #16
 801dea8:	f040 8273 	bne.w	801e392 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801deac:	0791      	lsls	r1, r2, #30
 801deae:	f57f adc6 	bpl.w	801da3e <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801deb2:	7d68      	ldrb	r0, [r5, #21]
 801deb4:	f7fe fc90 	bl	801c7d8 <tcp_alloc>
    if (npcb == NULL) {
 801deb8:	4681      	mov	r9, r0
 801deba:	2800      	cmp	r0, #0
 801debc:	f000 82ce 	beq.w	801e45c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801dec0:	4b94      	ldr	r3, [pc, #592]	; (801e114 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801dec2:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801dec4:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801dec6:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801dec8:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801deca:	7849      	ldrb	r1, [r1, #1]
 801decc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801ded0:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801ded2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801ded4:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801ded6:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801ded8:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801deda:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801dedc:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801dede:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801dee0:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801dee2:	2303      	movs	r3, #3
 801dee4:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801dee6:	f7fe fee7 	bl	801ccb8 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801deea:	4b8a      	ldr	r3, [pc, #552]	; (801e114 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801deec:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801def0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801def2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801def6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801def8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801defc:	4a86      	ldr	r2, [pc, #536]	; (801e118 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801defe:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801df02:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801df04:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801df08:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801df0c:	7a6b      	ldrb	r3, [r5, #9]
 801df0e:	f003 030c 	and.w	r3, r3, #12
 801df12:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801df16:	7a2b      	ldrb	r3, [r5, #8]
 801df18:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801df1c:	6813      	ldr	r3, [r2, #0]
 801df1e:	f8c2 9000 	str.w	r9, [r2]
 801df22:	f8c9 300c 	str.w	r3, [r9, #12]
 801df26:	f001 fe49 	bl	801fbbc <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801df2a:	4b7c      	ldr	r3, [pc, #496]	; (801e11c <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801df2c:	4a7c      	ldr	r2, [pc, #496]	; (801e120 <tcp_input+0x6fc>)
 801df2e:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801df30:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801df32:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801df34:	b12b      	cbz	r3, 801df42 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801df36:	4b7b      	ldr	r3, [pc, #492]	; (801e124 <tcp_input+0x700>)
 801df38:	4648      	mov	r0, r9
 801df3a:	f8a3 8000 	strh.w	r8, [r3]
 801df3e:	f7ff fcd1 	bl	801d8e4 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801df42:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df44:	f109 0204 	add.w	r2, r9, #4
 801df48:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801df4c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df4e:	4610      	mov	r0, r2
 801df50:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801df52:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801df56:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df5a:	f004 fd4d 	bl	80229f8 <ip4_route>
 801df5e:	9a05      	ldr	r2, [sp, #20]
 801df60:	4601      	mov	r1, r0
 801df62:	4628      	mov	r0, r5
 801df64:	f7fe fec4 	bl	801ccf0 <tcp_eff_send_mss_netif>
 801df68:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801df6a:	2112      	movs	r1, #18
 801df6c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801df6e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801df72:	f001 f8db 	bl	801f12c <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801df76:	2800      	cmp	r0, #0
 801df78:	f040 82ca 	bne.w	801e510 <tcp_input+0xaec>
    tcp_output(npcb);
 801df7c:	4648      	mov	r0, r9
 801df7e:	f001 faf1 	bl	801f564 <tcp_output>
 801df82:	e55c      	b.n	801da3e <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801df84:	f013 0102 	ands.w	r1, r3, #2
 801df88:	d004      	beq.n	801df94 <tcp_input+0x570>
 801df8a:	7d2a      	ldrb	r2, [r5, #20]
 801df8c:	3a02      	subs	r2, #2
 801df8e:	2a01      	cmp	r2, #1
 801df90:	f200 81e4 	bhi.w	801e35c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801df94:	8b6a      	ldrh	r2, [r5, #26]
 801df96:	06d0      	lsls	r0, r2, #27
 801df98:	d402      	bmi.n	801dfa0 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801df9a:	4a63      	ldr	r2, [pc, #396]	; (801e128 <tcp_input+0x704>)
 801df9c:	6812      	ldr	r2, [r2, #0]
 801df9e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801dfa0:	4a5e      	ldr	r2, [pc, #376]	; (801e11c <tcp_input+0x6f8>)
 801dfa2:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801dfa4:	2200      	movs	r2, #0
 801dfa6:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801dfaa:	b140      	cbz	r0, 801dfbe <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801dfac:	485d      	ldr	r0, [pc, #372]	; (801e124 <tcp_input+0x700>)
 801dfae:	8002      	strh	r2, [r0, #0]
 801dfb0:	4628      	mov	r0, r5
 801dfb2:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801dfb6:	f7ff fc95 	bl	801d8e4 <tcp_parseopt.part.0>
 801dfba:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801dfbe:	7d2a      	ldrb	r2, [r5, #20]
 801dfc0:	3a02      	subs	r2, #2
 801dfc2:	2a07      	cmp	r2, #7
 801dfc4:	f63f ae8c 	bhi.w	801dce0 <tcp_input+0x2bc>
 801dfc8:	e8df f002 	tbb	[pc, r2]
 801dfcc:	89041331 	.word	0x89041331
 801dfd0:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801dfd4:	4628      	mov	r0, r5
 801dfd6:	f7fe ffdd 	bl	801cf94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801dfda:	f89a 3000 	ldrb.w	r3, [sl]
 801dfde:	069e      	lsls	r6, r3, #26
 801dfe0:	f57f ae7e 	bpl.w	801dce0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801dfe4:	8b6b      	ldrh	r3, [r5, #26]
 801dfe6:	f043 0302 	orr.w	r3, r3, #2
 801dfea:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801dfec:	2307      	movs	r3, #7
 801dfee:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801dff0:	e676      	b.n	801dce0 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801dff2:	06da      	lsls	r2, r3, #27
 801dff4:	f140 821c 	bpl.w	801e430 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dff8:	4b4c      	ldr	r3, [pc, #304]	; (801e12c <tcp_input+0x708>)
 801dffa:	6819      	ldr	r1, [r3, #0]
 801dffc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801dffe:	43db      	mvns	r3, r3
 801e000:	42cb      	cmn	r3, r1
 801e002:	d404      	bmi.n	801e00e <tcp_input+0x5ea>
 801e004:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801e006:	1acb      	subs	r3, r1, r3
 801e008:	2b00      	cmp	r3, #0
 801e00a:	f340 823a 	ble.w	801e482 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e00e:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e010:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e012:	8810      	ldrh	r0, [r2, #0]
 801e014:	4a3f      	ldr	r2, [pc, #252]	; (801e114 <tcp_input+0x6f0>)
 801e016:	6812      	ldr	r2, [r2, #0]
 801e018:	4402      	add	r2, r0
 801e01a:	8818      	ldrh	r0, [r3, #0]
 801e01c:	9002      	str	r0, [sp, #8]
 801e01e:	4628      	mov	r0, r5
 801e020:	885b      	ldrh	r3, [r3, #2]
 801e022:	e9cd 9300 	strd	r9, r3, [sp]
 801e026:	4b42      	ldr	r3, [pc, #264]	; (801e130 <tcp_input+0x70c>)
 801e028:	f001 fa22 	bl	801f470 <tcp_rst>
    if (err != ERR_ABRT) {
 801e02c:	e658      	b.n	801dce0 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801e02e:	f003 0212 	and.w	r2, r3, #18
 801e032:	2a12      	cmp	r2, #18
 801e034:	f000 813b 	beq.w	801e2ae <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801e038:	06d9      	lsls	r1, r3, #27
 801e03a:	f57f ae51 	bpl.w	801dce0 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e03e:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e040:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e042:	8811      	ldrh	r1, [r2, #0]
 801e044:	4a33      	ldr	r2, [pc, #204]	; (801e114 <tcp_input+0x6f0>)
 801e046:	8818      	ldrh	r0, [r3, #0]
 801e048:	6812      	ldr	r2, [r2, #0]
 801e04a:	440a      	add	r2, r1
 801e04c:	4937      	ldr	r1, [pc, #220]	; (801e12c <tcp_input+0x708>)
 801e04e:	6809      	ldr	r1, [r1, #0]
 801e050:	9002      	str	r0, [sp, #8]
 801e052:	4628      	mov	r0, r5
 801e054:	885b      	ldrh	r3, [r3, #2]
 801e056:	e9cd 9300 	strd	r9, r3, [sp]
 801e05a:	4b35      	ldr	r3, [pc, #212]	; (801e130 <tcp_input+0x70c>)
 801e05c:	f001 fa08 	bl	801f470 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801e060:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801e064:	2b05      	cmp	r3, #5
 801e066:	f63f ae3b 	bhi.w	801dce0 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801e06a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801e06c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801e06e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801e070:	f001 fc80 	bl	801f974 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801e074:	e634      	b.n	801dce0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801e076:	4628      	mov	r0, r5
 801e078:	f7fe ff8c 	bl	801cf94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e07c:	4b24      	ldr	r3, [pc, #144]	; (801e110 <tcp_input+0x6ec>)
 801e07e:	781b      	ldrb	r3, [r3, #0]
 801e080:	06de      	lsls	r6, r3, #27
 801e082:	f57f ae2d 	bpl.w	801dce0 <tcp_input+0x2bc>
 801e086:	4b29      	ldr	r3, [pc, #164]	; (801e12c <tcp_input+0x708>)
 801e088:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	429a      	cmp	r2, r3
 801e08e:	f47f ae27 	bne.w	801dce0 <tcp_input+0x2bc>
 801e092:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e094:	2b00      	cmp	r3, #0
 801e096:	f47f ae23 	bne.w	801dce0 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801e09a:	f89a 3000 	ldrb.w	r3, [sl]
 801e09e:	f043 0310 	orr.w	r3, r3, #16
 801e0a2:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801e0a6:	e61b      	b.n	801dce0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801e0a8:	4628      	mov	r0, r5
 801e0aa:	f7fe ff73 	bl	801cf94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e0ae:	f89a 3000 	ldrb.w	r3, [sl]
 801e0b2:	069a      	lsls	r2, r3, #26
 801e0b4:	f57f ae14 	bpl.w	801dce0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801e0b8:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801e0ba:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801e0bc:	f043 0302 	orr.w	r3, r3, #2
 801e0c0:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801e0c2:	f7fd fee1 	bl	801be88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e0c6:	4b14      	ldr	r3, [pc, #80]	; (801e118 <tcp_input+0x6f4>)
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	42ab      	cmp	r3, r5
 801e0cc:	d061      	beq.n	801e192 <tcp_input+0x76e>
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d062      	beq.n	801e198 <tcp_input+0x774>
 801e0d2:	68da      	ldr	r2, [r3, #12]
 801e0d4:	42aa      	cmp	r2, r5
 801e0d6:	f000 8210 	beq.w	801e4fa <tcp_input+0xad6>
 801e0da:	4613      	mov	r3, r2
 801e0dc:	e7f7      	b.n	801e0ce <tcp_input+0x6aa>
      tcp_receive(pcb);
 801e0de:	4628      	mov	r0, r5
 801e0e0:	f7fe ff58 	bl	801cf94 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801e0e4:	f89a 3000 	ldrb.w	r3, [sl]
 801e0e8:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e0ec:	4b08      	ldr	r3, [pc, #32]	; (801e110 <tcp_input+0x6ec>)
 801e0ee:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801e0f0:	f000 818e 	beq.w	801e410 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e0f4:	06d8      	lsls	r0, r3, #27
 801e0f6:	d504      	bpl.n	801e102 <tcp_input+0x6de>
 801e0f8:	4b0c      	ldr	r3, [pc, #48]	; (801e12c <tcp_input+0x708>)
 801e0fa:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	429a      	cmp	r2, r3
 801e100:	d038      	beq.n	801e174 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801e102:	8b6b      	ldrh	r3, [r5, #26]
 801e104:	f043 0302 	orr.w	r3, r3, #2
 801e108:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801e10a:	2308      	movs	r3, #8
 801e10c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e10e:	e5e7      	b.n	801dce0 <tcp_input+0x2bc>
 801e110:	2002e0dc 	.word	0x2002e0dc
 801e114:	2002e0fc 	.word	0x2002e0fc
 801e118:	2002e0bc 	.word	0x2002e0bc
 801e11c:	2002e114 	.word	0x2002e114
 801e120:	2002e0c0 	.word	0x2002e0c0
 801e124:	2002e104 	.word	0x2002e104
 801e128:	2002e0cc 	.word	0x2002e0cc
 801e12c:	2002e0d8 	.word	0x2002e0d8
 801e130:	2001ef34 	.word	0x2001ef34
      tcp_receive(pcb);
 801e134:	4628      	mov	r0, r5
 801e136:	f7fe ff2d 	bl	801cf94 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801e13a:	4ba8      	ldr	r3, [pc, #672]	; (801e3dc <tcp_input+0x9b8>)
 801e13c:	781b      	ldrb	r3, [r3, #0]
 801e13e:	06db      	lsls	r3, r3, #27
 801e140:	f57f adce 	bpl.w	801dce0 <tcp_input+0x2bc>
 801e144:	4ba6      	ldr	r3, [pc, #664]	; (801e3e0 <tcp_input+0x9bc>)
 801e146:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e148:	681b      	ldr	r3, [r3, #0]
 801e14a:	429a      	cmp	r2, r3
 801e14c:	f47f adc8 	bne.w	801dce0 <tcp_input+0x2bc>
 801e150:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e152:	2b00      	cmp	r3, #0
 801e154:	f47f adc4 	bne.w	801dce0 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801e158:	4628      	mov	r0, r5
 801e15a:	f7fd fe95 	bl	801be88 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801e15e:	4ba1      	ldr	r3, [pc, #644]	; (801e3e4 <tcp_input+0x9c0>)
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	42ab      	cmp	r3, r5
 801e164:	d015      	beq.n	801e192 <tcp_input+0x76e>
 801e166:	b1bb      	cbz	r3, 801e198 <tcp_input+0x774>
 801e168:	68da      	ldr	r2, [r3, #12]
 801e16a:	42aa      	cmp	r2, r5
 801e16c:	f000 81c5 	beq.w	801e4fa <tcp_input+0xad6>
 801e170:	4613      	mov	r3, r2
 801e172:	e7f8      	b.n	801e166 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e174:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e176:	2b00      	cmp	r3, #0
 801e178:	d1c3      	bne.n	801e102 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801e17a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801e17c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801e17e:	f043 0302 	orr.w	r3, r3, #2
 801e182:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801e184:	f7fd fe80 	bl	801be88 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801e188:	4b96      	ldr	r3, [pc, #600]	; (801e3e4 <tcp_input+0x9c0>)
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	42ab      	cmp	r3, r5
 801e18e:	f040 81b7 	bne.w	801e500 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801e192:	68eb      	ldr	r3, [r5, #12]
 801e194:	4a93      	ldr	r2, [pc, #588]	; (801e3e4 <tcp_input+0x9c0>)
 801e196:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e198:	4b93      	ldr	r3, [pc, #588]	; (801e3e8 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801e19a:	220a      	movs	r2, #10
 801e19c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e19e:	681a      	ldr	r2, [r3, #0]
 801e1a0:	601d      	str	r5, [r3, #0]
 801e1a2:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801e1a4:	2201      	movs	r2, #1
 801e1a6:	4b91      	ldr	r3, [pc, #580]	; (801e3ec <tcp_input+0x9c8>)
 801e1a8:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801e1aa:	f001 fd07 	bl	801fbbc <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801e1ae:	e597      	b.n	801dce0 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801e1b0:	4b8f      	ldr	r3, [pc, #572]	; (801e3f0 <tcp_input+0x9cc>)
 801e1b2:	22c2      	movs	r2, #194	; 0xc2
 801e1b4:	498f      	ldr	r1, [pc, #572]	; (801e3f4 <tcp_input+0x9d0>)
 801e1b6:	4890      	ldr	r0, [pc, #576]	; (801e3f8 <tcp_input+0x9d4>)
 801e1b8:	f007 f8ec 	bl	8025394 <iprintf>
 801e1bc:	e47d      	b.n	801daba <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801e1be:	4b8c      	ldr	r3, [pc, #560]	; (801e3f0 <tcp_input+0x9cc>)
 801e1c0:	22df      	movs	r2, #223	; 0xdf
 801e1c2:	498e      	ldr	r1, [pc, #568]	; (801e3fc <tcp_input+0x9d8>)
 801e1c4:	488c      	ldr	r0, [pc, #560]	; (801e3f8 <tcp_input+0x9d4>)
 801e1c6:	f007 f8e5 	bl	8025394 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801e1ca:	8923      	ldrh	r3, [r4, #8]
 801e1cc:	e49b      	b.n	801db06 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801e1ce:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801e1d0:	2b00      	cmp	r3, #0
 801e1d2:	f000 80d9 	beq.w	801e388 <tcp_input+0x964>
 801e1d6:	4c8a      	ldr	r4, [pc, #552]	; (801e400 <tcp_input+0x9dc>)
 801e1d8:	e595      	b.n	801dd06 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801e1da:	f8bb 2000 	ldrh.w	r2, [fp]
 801e1de:	b15a      	cbz	r2, 801e1f8 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801e1e0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801e1e4:	b12b      	cbz	r3, 801e1f2 <tcp_input+0x7ce>
 801e1e6:	4629      	mov	r1, r5
 801e1e8:	6928      	ldr	r0, [r5, #16]
 801e1ea:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801e1ec:	300d      	adds	r0, #13
 801e1ee:	f43f ad8a 	beq.w	801dd06 <tcp_input+0x2e2>
          recv_acked = 0;
 801e1f2:	2300      	movs	r3, #0
 801e1f4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801e1f8:	4628      	mov	r0, r5
 801e1fa:	f7fe fe2b 	bl	801ce54 <tcp_input_delayed_close>
 801e1fe:	2800      	cmp	r0, #0
 801e200:	f47f ad81 	bne.w	801dd06 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801e204:	f8d8 3000 	ldr.w	r3, [r8]
 801e208:	b1fb      	cbz	r3, 801e24a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801e20a:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801e20c:	b133      	cbz	r3, 801e21c <tcp_input+0x7f8>
 801e20e:	4b78      	ldr	r3, [pc, #480]	; (801e3f0 <tcp_input+0x9cc>)
 801e210:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e214:	497b      	ldr	r1, [pc, #492]	; (801e404 <tcp_input+0x9e0>)
 801e216:	4878      	ldr	r0, [pc, #480]	; (801e3f8 <tcp_input+0x9d4>)
 801e218:	f007 f8bc 	bl	8025394 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801e21c:	8b6b      	ldrh	r3, [r5, #26]
 801e21e:	f013 0310 	ands.w	r3, r3, #16
 801e222:	f040 8113 	bne.w	801e44c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801e226:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801e22a:	2e00      	cmp	r6, #0
 801e22c:	f000 8121 	beq.w	801e472 <tcp_input+0xa4e>
 801e230:	f8d8 2000 	ldr.w	r2, [r8]
 801e234:	4629      	mov	r1, r5
 801e236:	6928      	ldr	r0, [r5, #16]
 801e238:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801e23a:	f110 0f0d 	cmn.w	r0, #13
 801e23e:	f43f ad62 	beq.w	801dd06 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801e242:	b110      	cbz	r0, 801e24a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801e244:	f8d8 3000 	ldr.w	r3, [r8]
 801e248:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801e24a:	f89a 3000 	ldrb.w	r3, [sl]
 801e24e:	0699      	lsls	r1, r3, #26
 801e250:	d507      	bpl.n	801e262 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801e252:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801e254:	2b00      	cmp	r3, #0
 801e256:	f000 80ad 	beq.w	801e3b4 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801e25a:	7b5a      	ldrb	r2, [r3, #13]
 801e25c:	f042 0220 	orr.w	r2, r2, #32
 801e260:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801e262:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801e264:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801e266:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801e268:	f7fe fdf4 	bl	801ce54 <tcp_input_delayed_close>
 801e26c:	2800      	cmp	r0, #0
 801e26e:	f47f ad4a 	bne.w	801dd06 <tcp_input+0x2e2>
        tcp_output(pcb);
 801e272:	4628      	mov	r0, r5
 801e274:	f001 f976 	bl	801f564 <tcp_output>
 801e278:	e545      	b.n	801dd06 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801e27a:	6830      	ldr	r0, [r6, #0]
 801e27c:	8980      	ldrh	r0, [r0, #12]
 801e27e:	f7fa ff83 	bl	8019188 <lwip_htons>
 801e282:	f010 0004 	ands.w	r0, r0, #4
 801e286:	f47f abda 	bne.w	801da3e <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e28a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801e28c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e28e:	8811      	ldrh	r1, [r2, #0]
 801e290:	4a5d      	ldr	r2, [pc, #372]	; (801e408 <tcp_input+0x9e4>)
 801e292:	881d      	ldrh	r5, [r3, #0]
 801e294:	6812      	ldr	r2, [r2, #0]
 801e296:	440a      	add	r2, r1
 801e298:	4951      	ldr	r1, [pc, #324]	; (801e3e0 <tcp_input+0x9bc>)
 801e29a:	6809      	ldr	r1, [r1, #0]
 801e29c:	9502      	str	r5, [sp, #8]
 801e29e:	885b      	ldrh	r3, [r3, #2]
 801e2a0:	e9cd 9300 	strd	r9, r3, [sp]
 801e2a4:	4b59      	ldr	r3, [pc, #356]	; (801e40c <tcp_input+0x9e8>)
 801e2a6:	f001 f8e3 	bl	801f470 <tcp_rst>
 801e2aa:	f7ff bbc8 	b.w	801da3e <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801e2ae:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801e2b0:	494b      	ldr	r1, [pc, #300]	; (801e3e0 <tcp_input+0x9bc>)
 801e2b2:	3201      	adds	r2, #1
 801e2b4:	6809      	ldr	r1, [r1, #0]
 801e2b6:	428a      	cmp	r2, r1
 801e2b8:	f47f aebe 	bne.w	801e038 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801e2bc:	4b52      	ldr	r3, [pc, #328]	; (801e408 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801e2be:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801e2c0:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801e2c2:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2c4:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801e2c6:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e2c8:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2ca:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801e2cc:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801e2ce:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801e2d0:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2d2:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801e2d4:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801e2d6:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801e2d8:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801e2dc:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801e2de:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2e2:	9205      	str	r2, [sp, #20]
 801e2e4:	f004 fb88 	bl	80229f8 <ip4_route>
 801e2e8:	9a05      	ldr	r2, [sp, #20]
 801e2ea:	4601      	mov	r1, r0
 801e2ec:	4630      	mov	r0, r6
 801e2ee:	f7fe fcff 	bl	801ccf0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e2f2:	f241 131c 	movw	r3, #4380	; 0x111c
 801e2f6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801e2f8:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e2fa:	0081      	lsls	r1, r0, #2
 801e2fc:	429a      	cmp	r2, r3
 801e2fe:	4616      	mov	r6, r2
 801e300:	bf38      	it	cc
 801e302:	461e      	movcc	r6, r3
 801e304:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801e308:	f240 814d 	bls.w	801e5a6 <tcp_input+0xb82>
 801e30c:	b28b      	uxth	r3, r1
 801e30e:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e312:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801e316:	2b00      	cmp	r3, #0
 801e318:	f000 813d 	beq.w	801e596 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801e31c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801e320:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801e322:	3b01      	subs	r3, #1
 801e324:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801e328:	2e00      	cmp	r6, #0
 801e32a:	f000 812f 	beq.w	801e58c <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801e32e:	6833      	ldr	r3, [r6, #0]
 801e330:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801e332:	4630      	mov	r0, r6
 801e334:	f7fd fce0 	bl	801bcf8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801e338:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	f000 8122 	beq.w	801e584 <tcp_input+0xb60>
          pcb->rtime = 0;
 801e340:	2300      	movs	r3, #0
 801e342:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801e344:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801e348:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801e34c:	b133      	cbz	r3, 801e35c <tcp_input+0x938>
 801e34e:	2200      	movs	r2, #0
 801e350:	4629      	mov	r1, r5
 801e352:	6928      	ldr	r0, [r5, #16]
 801e354:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801e356:	300d      	adds	r0, #13
 801e358:	f43f acd5 	beq.w	801dd06 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801e35c:	8b6b      	ldrh	r3, [r5, #26]
 801e35e:	f043 0302 	orr.w	r3, r3, #2
 801e362:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801e364:	e4bc      	b.n	801dce0 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801e366:	4b1e      	ldr	r3, [pc, #120]	; (801e3e0 <tcp_input+0x9bc>)
 801e368:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	429a      	cmp	r2, r3
 801e36e:	f47f acb7 	bne.w	801dce0 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801e372:	f89a 3000 	ldrb.w	r3, [sl]
 801e376:	f043 0308 	orr.w	r3, r3, #8
 801e37a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801e37e:	8b6b      	ldrh	r3, [r5, #26]
 801e380:	f023 0301 	bic.w	r3, r3, #1
 801e384:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801e386:	e4ab      	b.n	801dce0 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801e388:	4628      	mov	r0, r5
 801e38a:	4c1d      	ldr	r4, [pc, #116]	; (801e400 <tcp_input+0x9dc>)
 801e38c:	f001 f8b8 	bl	801f500 <tcp_send_empty_ack>
 801e390:	e4b9      	b.n	801dd06 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e392:	8802      	ldrh	r2, [r0, #0]
 801e394:	e9cd 9300 	strd	r9, r3, [sp]
 801e398:	9b05      	ldr	r3, [sp, #20]
 801e39a:	9202      	str	r2, [sp, #8]
 801e39c:	881a      	ldrh	r2, [r3, #0]
 801e39e:	4b1a      	ldr	r3, [pc, #104]	; (801e408 <tcp_input+0x9e4>)
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	441a      	add	r2, r3
 801e3a4:	4b0e      	ldr	r3, [pc, #56]	; (801e3e0 <tcp_input+0x9bc>)
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	6819      	ldr	r1, [r3, #0]
 801e3aa:	4b18      	ldr	r3, [pc, #96]	; (801e40c <tcp_input+0x9e8>)
 801e3ac:	f001 f860 	bl	801f470 <tcp_rst>
 801e3b0:	f7ff bb45 	b.w	801da3e <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801e3b4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801e3b6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801e3ba:	d001      	beq.n	801e3c0 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801e3bc:	3301      	adds	r3, #1
 801e3be:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801e3c0:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801e3c4:	2e00      	cmp	r6, #0
 801e3c6:	f43f af4c 	beq.w	801e262 <tcp_input+0x83e>
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	4629      	mov	r1, r5
 801e3ce:	6928      	ldr	r0, [r5, #16]
 801e3d0:	461a      	mov	r2, r3
 801e3d2:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801e3d4:	300d      	adds	r0, #13
 801e3d6:	f47f af44 	bne.w	801e262 <tcp_input+0x83e>
 801e3da:	e494      	b.n	801dd06 <tcp_input+0x2e2>
 801e3dc:	2002e0dc 	.word	0x2002e0dc
 801e3e0:	2002e0d8 	.word	0x2002e0d8
 801e3e4:	2002e0bc 	.word	0x2002e0bc
 801e3e8:	2002e0d4 	.word	0x2002e0d4
 801e3ec:	2002e0c0 	.word	0x2002e0c0
 801e3f0:	08044438 	.word	0x08044438
 801e3f4:	08044640 	.word	0x08044640
 801e3f8:	08029fe8 	.word	0x08029fe8
 801e3fc:	08044650 	.word	0x08044650
 801e400:	2002e100 	.word	0x2002e100
 801e404:	080447ec 	.word	0x080447ec
 801e408:	2002e0fc 	.word	0x2002e0fc
 801e40c:	2001ef34 	.word	0x2001ef34
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801e410:	06d9      	lsls	r1, r3, #27
 801e412:	f57f ac65 	bpl.w	801dce0 <tcp_input+0x2bc>
 801e416:	4b6a      	ldr	r3, [pc, #424]	; (801e5c0 <tcp_input+0xb9c>)
 801e418:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801e41a:	681b      	ldr	r3, [r3, #0]
 801e41c:	429a      	cmp	r2, r3
 801e41e:	f47f ac5f 	bne.w	801dce0 <tcp_input+0x2bc>
 801e422:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801e424:	2b00      	cmp	r3, #0
 801e426:	f47f ac5b 	bne.w	801dce0 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801e42a:	2306      	movs	r3, #6
 801e42c:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801e42e:	e457      	b.n	801dce0 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801e430:	2900      	cmp	r1, #0
 801e432:	f43f ac55 	beq.w	801dce0 <tcp_input+0x2bc>
 801e436:	4b63      	ldr	r3, [pc, #396]	; (801e5c4 <tcp_input+0xba0>)
 801e438:	681a      	ldr	r2, [r3, #0]
 801e43a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801e43c:	3b01      	subs	r3, #1
 801e43e:	4293      	cmp	r3, r2
 801e440:	f47f ac4e 	bne.w	801dce0 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801e444:	4628      	mov	r0, r5
 801e446:	f000 ff95 	bl	801f374 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801e44a:	e449      	b.n	801dce0 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801e44c:	f8d8 0000 	ldr.w	r0, [r8]
 801e450:	f7fc fed6 	bl	801b200 <pbuf_free>
            tcp_abort(pcb);
 801e454:	4628      	mov	r0, r5
 801e456:	f7fe f957 	bl	801c708 <tcp_abort>
            goto aborted;
 801e45a:	e454      	b.n	801dd06 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801e45c:	69ab      	ldr	r3, [r5, #24]
 801e45e:	2b00      	cmp	r3, #0
 801e460:	f43f aaed 	beq.w	801da3e <tcp_input+0x1a>
 801e464:	4601      	mov	r1, r0
 801e466:	f04f 32ff 	mov.w	r2, #4294967295
 801e46a:	6928      	ldr	r0, [r5, #16]
 801e46c:	4798      	blx	r3
 801e46e:	f7ff bae6 	b.w	801da3e <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801e472:	4633      	mov	r3, r6
 801e474:	4630      	mov	r0, r6
 801e476:	f8d8 2000 	ldr.w	r2, [r8]
 801e47a:	4629      	mov	r1, r5
 801e47c:	f7fe fb5a 	bl	801cb34 <tcp_recv_null>
 801e480:	e6db      	b.n	801e23a <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801e482:	2304      	movs	r3, #4
 801e484:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801e486:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e488:	2b00      	cmp	r3, #0
 801e48a:	d0e3      	beq.n	801e454 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e48c:	699b      	ldr	r3, [r3, #24]
 801e48e:	2b00      	cmp	r3, #0
 801e490:	d05d      	beq.n	801e54e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e492:	2200      	movs	r2, #0
 801e494:	4629      	mov	r1, r5
 801e496:	6928      	ldr	r0, [r5, #16]
 801e498:	4798      	blx	r3
          if (err != ERR_OK) {
 801e49a:	2800      	cmp	r0, #0
 801e49c:	d153      	bne.n	801e546 <tcp_input+0xb22>
          tcp_receive(pcb);
 801e49e:	4628      	mov	r0, r5
 801e4a0:	f7fe fd78 	bl	801cf94 <tcp_receive>
          if (recv_acked != 0) {
 801e4a4:	f8bb 3000 	ldrh.w	r3, [fp]
 801e4a8:	b113      	cbz	r3, 801e4b0 <tcp_input+0xa8c>
            recv_acked--;
 801e4aa:	3b01      	subs	r3, #1
 801e4ac:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e4b0:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801e4b2:	f241 131c 	movw	r3, #4380	; 0x111c
 801e4b6:	004a      	lsls	r2, r1, #1
 801e4b8:	0088      	lsls	r0, r1, #2
 801e4ba:	429a      	cmp	r2, r3
 801e4bc:	4616      	mov	r6, r2
 801e4be:	bf38      	it	cc
 801e4c0:	461e      	movcc	r6, r3
 801e4c2:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801e4c6:	d959      	bls.n	801e57c <tcp_input+0xb58>
 801e4c8:	b283      	uxth	r3, r0
 801e4ca:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801e4ce:	f89a 3000 	ldrb.w	r3, [sl]
 801e4d2:	069b      	lsls	r3, r3, #26
 801e4d4:	f57f ac04 	bpl.w	801dce0 <tcp_input+0x2bc>
 801e4d8:	e584      	b.n	801dfe4 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801e4da:	07d0      	lsls	r0, r2, #31
 801e4dc:	f57f ac72 	bpl.w	801ddc4 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801e4e0:	4b39      	ldr	r3, [pc, #228]	; (801e5c8 <tcp_input+0xba4>)
 801e4e2:	681b      	ldr	r3, [r3, #0]
 801e4e4:	622b      	str	r3, [r5, #32]
 801e4e6:	e46d      	b.n	801ddc4 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801e4e8:	4b38      	ldr	r3, [pc, #224]	; (801e5cc <tcp_input+0xba8>)
 801e4ea:	f240 1215 	movw	r2, #277	; 0x115
 801e4ee:	4938      	ldr	r1, [pc, #224]	; (801e5d0 <tcp_input+0xbac>)
 801e4f0:	4838      	ldr	r0, [pc, #224]	; (801e5d4 <tcp_input+0xbb0>)
 801e4f2:	f006 ff4f 	bl	8025394 <iprintf>
 801e4f6:	f7ff bbb0 	b.w	801dc5a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801e4fa:	68ea      	ldr	r2, [r5, #12]
 801e4fc:	60da      	str	r2, [r3, #12]
 801e4fe:	e64b      	b.n	801e198 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801e500:	2b00      	cmp	r3, #0
 801e502:	f43f ae49 	beq.w	801e198 <tcp_input+0x774>
 801e506:	68da      	ldr	r2, [r3, #12]
 801e508:	42aa      	cmp	r2, r5
 801e50a:	d0f6      	beq.n	801e4fa <tcp_input+0xad6>
 801e50c:	4613      	mov	r3, r2
 801e50e:	e7f7      	b.n	801e500 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801e510:	2100      	movs	r1, #0
 801e512:	4648      	mov	r0, r9
 801e514:	f7fe f828 	bl	801c568 <tcp_abandon>
      return;
 801e518:	f7ff ba91 	b.w	801da3e <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801e51c:	4b2b      	ldr	r3, [pc, #172]	; (801e5cc <tcp_input+0xba8>)
 801e51e:	f240 120d 	movw	r2, #269	; 0x10d
 801e522:	492d      	ldr	r1, [pc, #180]	; (801e5d8 <tcp_input+0xbb4>)
 801e524:	482b      	ldr	r0, [pc, #172]	; (801e5d4 <tcp_input+0xbb0>)
 801e526:	f006 ff35 	bl	8025394 <iprintf>
      if (prev != NULL) {
 801e52a:	f1b8 0f00 	cmp.w	r8, #0
 801e52e:	f43f ab90 	beq.w	801dc52 <tcp_input+0x22e>
 801e532:	68eb      	ldr	r3, [r5, #12]
 801e534:	f7ff bb87 	b.w	801dc46 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e538:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801e53c:	9b05      	ldr	r3, [sp, #20]
 801e53e:	f8cd 9000 	str.w	r9, [sp]
 801e542:	881b      	ldrh	r3, [r3, #0]
 801e544:	e72d      	b.n	801e3a2 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801e546:	300d      	adds	r0, #13
 801e548:	f43f abdd 	beq.w	801dd06 <tcp_input+0x2e2>
 801e54c:	e782      	b.n	801e454 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e54e:	4b1f      	ldr	r3, [pc, #124]	; (801e5cc <tcp_input+0xba8>)
 801e550:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e554:	4921      	ldr	r1, [pc, #132]	; (801e5dc <tcp_input+0xbb8>)
 801e556:	481f      	ldr	r0, [pc, #124]	; (801e5d4 <tcp_input+0xbb0>)
 801e558:	f006 ff1c 	bl	8025394 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e55c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e55e:	699b      	ldr	r3, [r3, #24]
 801e560:	2b00      	cmp	r3, #0
 801e562:	d196      	bne.n	801e492 <tcp_input+0xa6e>
 801e564:	e776      	b.n	801e454 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e566:	2900      	cmp	r1, #0
 801e568:	f47f af03 	bne.w	801e372 <tcp_input+0x94e>
 801e56c:	4b17      	ldr	r3, [pc, #92]	; (801e5cc <tcp_input+0xba8>)
 801e56e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e572:	491b      	ldr	r1, [pc, #108]	; (801e5e0 <tcp_input+0xbbc>)
 801e574:	4817      	ldr	r0, [pc, #92]	; (801e5d4 <tcp_input+0xbb0>)
 801e576:	f006 ff0d 	bl	8025394 <iprintf>
 801e57a:	e6fa      	b.n	801e372 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e57c:	429a      	cmp	r2, r3
 801e57e:	bf88      	it	hi
 801e580:	b293      	uxthhi	r3, r2
 801e582:	e7a2      	b.n	801e4ca <tcp_input+0xaa6>
          pcb->rtime = -1;
 801e584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e588:	862b      	strh	r3, [r5, #48]	; 0x30
 801e58a:	e6dd      	b.n	801e348 <tcp_input+0x924>
          rseg = pcb->unsent;
 801e58c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e58e:	b176      	cbz	r6, 801e5ae <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801e590:	6833      	ldr	r3, [r6, #0]
 801e592:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e594:	e6cd      	b.n	801e332 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e596:	4b0d      	ldr	r3, [pc, #52]	; (801e5cc <tcp_input+0xba8>)
 801e598:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e59c:	4911      	ldr	r1, [pc, #68]	; (801e5e4 <tcp_input+0xbc0>)
 801e59e:	480d      	ldr	r0, [pc, #52]	; (801e5d4 <tcp_input+0xbb0>)
 801e5a0:	f006 fef8 	bl	8025394 <iprintf>
 801e5a4:	e6ba      	b.n	801e31c <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e5a6:	429a      	cmp	r2, r3
 801e5a8:	bf88      	it	hi
 801e5aa:	b293      	uxthhi	r3, r2
 801e5ac:	e6af      	b.n	801e30e <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e5ae:	4b07      	ldr	r3, [pc, #28]	; (801e5cc <tcp_input+0xba8>)
 801e5b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e5b4:	490c      	ldr	r1, [pc, #48]	; (801e5e8 <tcp_input+0xbc4>)
 801e5b6:	4807      	ldr	r0, [pc, #28]	; (801e5d4 <tcp_input+0xbb0>)
 801e5b8:	f006 feec 	bl	8025394 <iprintf>
 801e5bc:	e7e8      	b.n	801e590 <tcp_input+0xb6c>
 801e5be:	bf00      	nop
 801e5c0:	2002e0d8 	.word	0x2002e0d8
 801e5c4:	2002e0fc 	.word	0x2002e0fc
 801e5c8:	2002e0cc 	.word	0x2002e0cc
 801e5cc:	08044438 	.word	0x08044438
 801e5d0:	08044724 	.word	0x08044724
 801e5d4:	08029fe8 	.word	0x08029fe8
 801e5d8:	080446f8 	.word	0x080446f8
 801e5dc:	080447cc 	.word	0x080447cc
 801e5e0:	08044780 	.word	0x08044780
 801e5e4:	080447a0 	.word	0x080447a0
 801e5e8:	080447b8 	.word	0x080447b8

0801e5ec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801e5ec:	4a02      	ldr	r2, [pc, #8]	; (801e5f8 <tcp_trigger_input_pcb_close+0xc>)
 801e5ee:	7813      	ldrb	r3, [r2, #0]
 801e5f0:	f043 0310 	orr.w	r3, r3, #16
 801e5f4:	7013      	strb	r3, [r2, #0]
}
 801e5f6:	4770      	bx	lr
 801e5f8:	2002e0f8 	.word	0x2002e0f8

0801e5fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801e5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e600:	9f08      	ldr	r7, [sp, #32]
 801e602:	4680      	mov	r8, r0
 801e604:	460d      	mov	r5, r1
 801e606:	4614      	mov	r4, r2
 801e608:	461e      	mov	r6, r3
 801e60a:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e60e:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e612:	2f00      	cmp	r7, #0
 801e614:	d033      	beq.n	801e67e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801e616:	42a5      	cmp	r5, r4
 801e618:	d20e      	bcs.n	801e638 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e61a:	f019 0f02 	tst.w	r9, #2
 801e61e:	d008      	beq.n	801e632 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e620:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801e624:	f021 0103 	bic.w	r1, r1, #3
 801e628:	428c      	cmp	r4, r1
 801e62a:	bf28      	it	cs
 801e62c:	460c      	movcs	r4, r1
 801e62e:	b2a1      	uxth	r1, r4
 801e630:	e003      	b.n	801e63a <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e632:	8b7b      	ldrh	r3, [r7, #26]
 801e634:	065b      	lsls	r3, r3, #25
 801e636:	d518      	bpl.n	801e66a <tcp_pbuf_prealloc+0x6e>
 801e638:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e63a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e63e:	4640      	mov	r0, r8
 801e640:	f7fc fc0c 	bl	801ae5c <pbuf_alloc>
  if (p == NULL) {
 801e644:	4604      	mov	r4, r0
 801e646:	b168      	cbz	r0, 801e664 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e648:	6803      	ldr	r3, [r0, #0]
 801e64a:	b133      	cbz	r3, 801e65a <tcp_pbuf_prealloc+0x5e>
 801e64c:	4b0f      	ldr	r3, [pc, #60]	; (801e68c <tcp_pbuf_prealloc+0x90>)
 801e64e:	f240 120b 	movw	r2, #267	; 0x10b
 801e652:	490f      	ldr	r1, [pc, #60]	; (801e690 <tcp_pbuf_prealloc+0x94>)
 801e654:	480f      	ldr	r0, [pc, #60]	; (801e694 <tcp_pbuf_prealloc+0x98>)
 801e656:	f006 fe9d 	bl	8025394 <iprintf>
  *oversize = p->len - length;
 801e65a:	8963      	ldrh	r3, [r4, #10]
 801e65c:	1b5b      	subs	r3, r3, r5
 801e65e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e660:	8125      	strh	r5, [r4, #8]
 801e662:	8165      	strh	r5, [r4, #10]
  return p;
}
 801e664:	4620      	mov	r0, r4
 801e666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801e66a:	f1ba 0f00 	cmp.w	sl, #0
 801e66e:	d0d7      	beq.n	801e620 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801e670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e672:	2b00      	cmp	r3, #0
 801e674:	d1d4      	bne.n	801e620 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801e676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e678:	2b00      	cmp	r3, #0
 801e67a:	d1d1      	bne.n	801e620 <tcp_pbuf_prealloc+0x24>
 801e67c:	e7dc      	b.n	801e638 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e67e:	4b03      	ldr	r3, [pc, #12]	; (801e68c <tcp_pbuf_prealloc+0x90>)
 801e680:	22e9      	movs	r2, #233	; 0xe9
 801e682:	4905      	ldr	r1, [pc, #20]	; (801e698 <tcp_pbuf_prealloc+0x9c>)
 801e684:	4803      	ldr	r0, [pc, #12]	; (801e694 <tcp_pbuf_prealloc+0x98>)
 801e686:	f006 fe85 	bl	8025394 <iprintf>
 801e68a:	e7c4      	b.n	801e616 <tcp_pbuf_prealloc+0x1a>
 801e68c:	08044808 	.word	0x08044808
 801e690:	0804485c 	.word	0x0804485c
 801e694:	08029fe8 	.word	0x08029fe8
 801e698:	0804483c 	.word	0x0804483c

0801e69c <tcp_create_segment>:
{
 801e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e6a0:	460e      	mov	r6, r1
 801e6a2:	f89d a020 	ldrb.w	sl, [sp, #32]
 801e6a6:	4690      	mov	r8, r2
 801e6a8:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e6aa:	4607      	mov	r7, r0
 801e6ac:	2800      	cmp	r0, #0
 801e6ae:	d04c      	beq.n	801e74a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e6b0:	2e00      	cmp	r6, #0
 801e6b2:	d052      	beq.n	801e75a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e6b4:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e6b8:	22a8      	movs	r2, #168	; 0xa8
 801e6ba:	4931      	ldr	r1, [pc, #196]	; (801e780 <tcp_create_segment+0xe4>)
 801e6bc:	2004      	movs	r0, #4
 801e6be:	f7fc f851 	bl	801a764 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e6c2:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e6c6:	4604      	mov	r4, r0
 801e6c8:	2800      	cmp	r0, #0
 801e6ca:	d054      	beq.n	801e776 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801e6cc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801e6d0:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6d2:	8932      	ldrh	r2, [r6, #8]
 801e6d4:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801e6d8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6da:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801e6dc:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e6de:	d32c      	bcc.n	801e73a <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801e6e0:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e6e4:	4630      	mov	r0, r6
 801e6e6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801e6e8:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e6ea:	f7fc fcc9 	bl	801b080 <pbuf_add_header>
 801e6ee:	4606      	mov	r6, r0
 801e6f0:	2800      	cmp	r0, #0
 801e6f2:	d139      	bne.n	801e768 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e6f4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e6f6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e6f8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e6fa:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e6fe:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e702:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e706:	f7fa fd3f 	bl	8019188 <lwip_htons>
 801e70a:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e70e:	8b38      	ldrh	r0, [r7, #24]
 801e710:	68e7      	ldr	r7, [r4, #12]
 801e712:	f7fa fd39 	bl	8019188 <lwip_htons>
 801e716:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e718:	4648      	mov	r0, r9
 801e71a:	68e7      	ldr	r7, [r4, #12]
 801e71c:	f7fa fd38 	bl	8019190 <lwip_htonl>
 801e720:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e722:	ea45 0008 	orr.w	r0, r5, r8
 801e726:	68e7      	ldr	r7, [r4, #12]
 801e728:	f7fa fd2e 	bl	8019188 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801e72c:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e72e:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801e730:	749e      	strb	r6, [r3, #18]
 801e732:	74de      	strb	r6, [r3, #19]
}
 801e734:	4620      	mov	r0, r4
 801e736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e73a:	22b0      	movs	r2, #176	; 0xb0
 801e73c:	4b10      	ldr	r3, [pc, #64]	; (801e780 <tcp_create_segment+0xe4>)
 801e73e:	4911      	ldr	r1, [pc, #68]	; (801e784 <tcp_create_segment+0xe8>)
 801e740:	4811      	ldr	r0, [pc, #68]	; (801e788 <tcp_create_segment+0xec>)
 801e742:	f006 fe27 	bl	8025394 <iprintf>
  seg->len = p->tot_len - optlen;
 801e746:	8932      	ldrh	r2, [r6, #8]
 801e748:	e7ca      	b.n	801e6e0 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e74a:	4b0d      	ldr	r3, [pc, #52]	; (801e780 <tcp_create_segment+0xe4>)
 801e74c:	22a3      	movs	r2, #163	; 0xa3
 801e74e:	490f      	ldr	r1, [pc, #60]	; (801e78c <tcp_create_segment+0xf0>)
 801e750:	480d      	ldr	r0, [pc, #52]	; (801e788 <tcp_create_segment+0xec>)
 801e752:	f006 fe1f 	bl	8025394 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e756:	2e00      	cmp	r6, #0
 801e758:	d1ac      	bne.n	801e6b4 <tcp_create_segment+0x18>
 801e75a:	4b09      	ldr	r3, [pc, #36]	; (801e780 <tcp_create_segment+0xe4>)
 801e75c:	22a4      	movs	r2, #164	; 0xa4
 801e75e:	490c      	ldr	r1, [pc, #48]	; (801e790 <tcp_create_segment+0xf4>)
 801e760:	4809      	ldr	r0, [pc, #36]	; (801e788 <tcp_create_segment+0xec>)
 801e762:	f006 fe17 	bl	8025394 <iprintf>
 801e766:	e7a5      	b.n	801e6b4 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801e768:	4620      	mov	r0, r4
    return NULL;
 801e76a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801e76c:	f7fd fac4 	bl	801bcf8 <tcp_seg_free>
}
 801e770:	4620      	mov	r0, r4
 801e772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801e776:	4630      	mov	r0, r6
 801e778:	f7fc fd42 	bl	801b200 <pbuf_free>
    return NULL;
 801e77c:	e7da      	b.n	801e734 <tcp_create_segment+0x98>
 801e77e:	bf00      	nop
 801e780:	08044808 	.word	0x08044808
 801e784:	080448b4 	.word	0x080448b4
 801e788:	08029fe8 	.word	0x08029fe8
 801e78c:	08044870 	.word	0x08044870
 801e790:	08044890 	.word	0x08044890

0801e794 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e794:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e79a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e79c:	4606      	mov	r6, r0
 801e79e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7a0:	2022      	movs	r0, #34	; 0x22
 801e7a2:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e7a6:	461c      	mov	r4, r3
 801e7a8:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e7ac:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e7b0:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e7b4:	f7fc fb52 	bl	801ae5c <pbuf_alloc>
  if (p != NULL) {
 801e7b8:	4605      	mov	r5, r0
 801e7ba:	b300      	cbz	r0, 801e7fe <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e7bc:	8943      	ldrh	r3, [r0, #10]
 801e7be:	2b13      	cmp	r3, #19
 801e7c0:	d920      	bls.n	801e804 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801e7c2:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801e7c4:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801e7c6:	f7fa fcdf 	bl	8019188 <lwip_htons>
 801e7ca:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e7cc:	4650      	mov	r0, sl
 801e7ce:	f7fa fcdb 	bl	8019188 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801e7d2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801e7d4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801e7d6:	4630      	mov	r0, r6
 801e7d8:	f7fa fcda 	bl	8019190 <lwip_htonl>
 801e7dc:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e7de:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801e7e2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e7e4:	f7fa fcd0 	bl	8019188 <lwip_htons>
 801e7e8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801e7ea:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e7ec:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e7ee:	f7fa fccb 	bl	8019188 <lwip_htons>
    tcphdr->chksum = 0;
 801e7f2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801e7f4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801e7f6:	7423      	strb	r3, [r4, #16]
 801e7f8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801e7fa:	74a3      	strb	r3, [r4, #18]
 801e7fc:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801e7fe:	4628      	mov	r0, r5
 801e800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e804:	4b03      	ldr	r3, [pc, #12]	; (801e814 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801e806:	f240 7223 	movw	r2, #1827	; 0x723
 801e80a:	4903      	ldr	r1, [pc, #12]	; (801e818 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801e80c:	4803      	ldr	r0, [pc, #12]	; (801e81c <tcp_output_alloc_header_common.constprop.0+0x88>)
 801e80e:	f006 fdc1 	bl	8025394 <iprintf>
 801e812:	e7d6      	b.n	801e7c2 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801e814:	08044808 	.word	0x08044808
 801e818:	080448cc 	.word	0x080448cc
 801e81c:	08029fe8 	.word	0x08029fe8

0801e820 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e820:	b570      	push	{r4, r5, r6, lr}
 801e822:	460d      	mov	r5, r1
 801e824:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e826:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e828:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e82a:	b190      	cbz	r0, 801e852 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e82c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801e82e:	2210      	movs	r2, #16
 801e830:	8b21      	ldrh	r1, [r4, #24]
 801e832:	9302      	str	r3, [sp, #8]
 801e834:	e9cd 1200 	strd	r1, r2, [sp]
 801e838:	4632      	mov	r2, r6
 801e83a:	4629      	mov	r1, r5
 801e83c:	8ae3      	ldrh	r3, [r4, #22]
 801e83e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e840:	f7ff ffa8 	bl	801e794 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e844:	b118      	cbz	r0, 801e84e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e846:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e84a:	4413      	add	r3, r2
 801e84c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801e84e:	b004      	add	sp, #16
 801e850:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e852:	4b04      	ldr	r3, [pc, #16]	; (801e864 <tcp_output_alloc_header.constprop.0+0x44>)
 801e854:	f240 7242 	movw	r2, #1858	; 0x742
 801e858:	4903      	ldr	r1, [pc, #12]	; (801e868 <tcp_output_alloc_header.constprop.0+0x48>)
 801e85a:	4804      	ldr	r0, [pc, #16]	; (801e86c <tcp_output_alloc_header.constprop.0+0x4c>)
 801e85c:	f006 fd9a 	bl	8025394 <iprintf>
 801e860:	e7e4      	b.n	801e82c <tcp_output_alloc_header.constprop.0+0xc>
 801e862:	bf00      	nop
 801e864:	08044808 	.word	0x08044808
 801e868:	080448fc 	.word	0x080448fc
 801e86c:	08029fe8 	.word	0x08029fe8

0801e870 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e874:	4605      	mov	r5, r0
 801e876:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e878:	460c      	mov	r4, r1
{
 801e87a:	4690      	mov	r8, r2
 801e87c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e87e:	2900      	cmp	r1, #0
 801e880:	d034      	beq.n	801e8ec <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e882:	2d00      	cmp	r5, #0
 801e884:	d03a      	beq.n	801e8fc <tcp_output_control_segment+0x8c>
 801e886:	7a28      	ldrb	r0, [r5, #8]
 801e888:	bb10      	cbnz	r0, 801e8d0 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801e88a:	4630      	mov	r0, r6
 801e88c:	f004 f8b4 	bl	80229f8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801e890:	4607      	mov	r7, r0
 801e892:	b310      	cbz	r0, 801e8da <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e894:	9600      	str	r6, [sp, #0]
 801e896:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e898:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e89c:	2106      	movs	r1, #6
 801e89e:	8922      	ldrh	r2, [r4, #8]
 801e8a0:	4620      	mov	r0, r4
 801e8a2:	f7fb fa05 	bl	8019cb0 <ip_chksum_pseudo>
 801e8a6:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e8aa:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801e8ac:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e8ae:	9500      	str	r5, [sp, #0]
 801e8b0:	2506      	movs	r5, #6
 801e8b2:	4632      	mov	r2, r6
 801e8b4:	4641      	mov	r1, r8
 801e8b6:	9501      	str	r5, [sp, #4]
 801e8b8:	4620      	mov	r0, r4
 801e8ba:	9702      	str	r7, [sp, #8]
 801e8bc:	f004 fa66 	bl	8022d8c <ip4_output_if>
 801e8c0:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e8c2:	4620      	mov	r0, r4
 801e8c4:	f7fc fc9c 	bl	801b200 <pbuf_free>
  return err;
}
 801e8c8:	4628      	mov	r0, r5
 801e8ca:	b005      	add	sp, #20
 801e8cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801e8d0:	f7fc f970 	bl	801abb4 <netif_get_by_index>
  if (netif == NULL) {
 801e8d4:	4607      	mov	r7, r0
 801e8d6:	2800      	cmp	r0, #0
 801e8d8:	d1dc      	bne.n	801e894 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801e8da:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801e8de:	4620      	mov	r0, r4
 801e8e0:	f7fc fc8e 	bl	801b200 <pbuf_free>
}
 801e8e4:	4628      	mov	r0, r5
 801e8e6:	b005      	add	sp, #20
 801e8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e8ec:	4b0d      	ldr	r3, [pc, #52]	; (801e924 <tcp_output_control_segment+0xb4>)
 801e8ee:	f240 7287 	movw	r2, #1927	; 0x787
 801e8f2:	490d      	ldr	r1, [pc, #52]	; (801e928 <tcp_output_control_segment+0xb8>)
 801e8f4:	480d      	ldr	r0, [pc, #52]	; (801e92c <tcp_output_control_segment+0xbc>)
 801e8f6:	f006 fd4d 	bl	8025394 <iprintf>
 801e8fa:	e7c2      	b.n	801e882 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801e8fc:	4630      	mov	r0, r6
 801e8fe:	f004 f87b 	bl	80229f8 <ip4_route>
  if (netif == NULL) {
 801e902:	4607      	mov	r7, r0
 801e904:	2800      	cmp	r0, #0
 801e906:	d0e8      	beq.n	801e8da <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e908:	9600      	str	r6, [sp, #0]
 801e90a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e90c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e910:	2106      	movs	r1, #6
 801e912:	8922      	ldrh	r2, [r4, #8]
 801e914:	4620      	mov	r0, r4
 801e916:	f7fb f9cb 	bl	8019cb0 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801e91a:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e91c:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801e920:	e7c5      	b.n	801e8ae <tcp_output_control_segment+0x3e>
 801e922:	bf00      	nop
 801e924:	08044808 	.word	0x08044808
 801e928:	08044924 	.word	0x08044924
 801e92c:	08029fe8 	.word	0x08029fe8

0801e930 <tcp_write>:
{
 801e930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801e934:	2400      	movs	r4, #0
{
 801e936:	b091      	sub	sp, #68	; 0x44
 801e938:	9107      	str	r1, [sp, #28]
 801e93a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801e93c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e940:	2800      	cmp	r0, #0
 801e942:	f000 82fc 	beq.w	801ef3e <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e946:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801e94a:	4692      	mov	sl, r2
 801e94c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e94e:	4681      	mov	r9, r0
 801e950:	085b      	lsrs	r3, r3, #1
 801e952:	4293      	cmp	r3, r2
 801e954:	bf28      	it	cs
 801e956:	4613      	movcs	r3, r2
 801e958:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	bf08      	it	eq
 801e95e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e960:	9b07      	ldr	r3, [sp, #28]
 801e962:	2b00      	cmp	r3, #0
 801e964:	f000 82df 	beq.w	801ef26 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801e968:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e96a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801e96c:	2a02      	cmp	r2, #2
 801e96e:	d902      	bls.n	801e976 <tcp_write+0x46>
 801e970:	2b07      	cmp	r3, #7
 801e972:	f040 829c 	bne.w	801eeae <tcp_write+0x57e>
  } else if (len == 0) {
 801e976:	f1ba 0f00 	cmp.w	sl, #0
 801e97a:	f000 80ec 	beq.w	801eb56 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801e97e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e982:	4553      	cmp	r3, sl
 801e984:	f0c0 82b6 	bcc.w	801eef4 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e988:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e98c:	2e08      	cmp	r6, #8
 801e98e:	f200 82b1 	bhi.w	801eef4 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e992:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801e996:	2e00      	cmp	r6, #0
 801e998:	f000 80d3 	beq.w	801eb42 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e99c:	2b00      	cmp	r3, #0
 801e99e:	f040 80dc 	bne.w	801eb5a <tcp_write+0x22a>
 801e9a2:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e9a6:	f1b8 0f00 	cmp.w	r8, #0
 801e9aa:	f000 8263 	beq.w	801ee74 <tcp_write+0x544>
 801e9ae:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e9b0:	461a      	mov	r2, r3
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	2b00      	cmp	r3, #0
 801e9b6:	d1fb      	bne.n	801e9b0 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e9b8:	7a94      	ldrb	r4, [r2, #10]
 801e9ba:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e9bc:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e9be:	00a4      	lsls	r4, r4, #2
 801e9c0:	920b      	str	r2, [sp, #44]	; 0x2c
 801e9c2:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e9c6:	191a      	adds	r2, r3, r4
 801e9c8:	4593      	cmp	fp, r2
 801e9ca:	f2c0 81a6 	blt.w	801ed1a <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e9ce:	ebab 0404 	sub.w	r4, fp, r4
 801e9d2:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801e9d4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e9d8:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801e9da:	930a      	str	r3, [sp, #40]	; 0x28
 801e9dc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801e9e0:	2b00      	cmp	r3, #0
 801e9e2:	f000 80cf 	beq.w	801eb84 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e9e6:	42a3      	cmp	r3, r4
 801e9e8:	f200 818a 	bhi.w	801ed00 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e9ec:	45a2      	cmp	sl, r4
 801e9ee:	4653      	mov	r3, sl
 801e9f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9f2:	bf28      	it	cs
 801e9f4:	4623      	movcs	r3, r4
 801e9f6:	4293      	cmp	r3, r2
 801e9f8:	bf28      	it	cs
 801e9fa:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801e9fc:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801e9fe:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea00:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801ea02:	b292      	uxth	r2, r2
      space -= oversize_used;
 801ea04:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801ea06:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea0a:	2a00      	cmp	r2, #0
 801ea0c:	f000 8183 	beq.w	801ed16 <tcp_write+0x3e6>
 801ea10:	459a      	cmp	sl, r3
 801ea12:	f000 8180 	beq.w	801ed16 <tcp_write+0x3e6>
 801ea16:	4bb2      	ldr	r3, [pc, #712]	; (801ece0 <tcp_write+0x3b0>)
 801ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ea1c:	49b1      	ldr	r1, [pc, #708]	; (801ece4 <tcp_write+0x3b4>)
 801ea1e:	48b2      	ldr	r0, [pc, #712]	; (801ece8 <tcp_write+0x3b8>)
 801ea20:	f006 fcb8 	bl	8025394 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ea24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801ea26:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801ea28:	459a      	cmp	sl, r3
 801ea2a:	f200 80b0 	bhi.w	801eb8e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801ea2e:	2300      	movs	r3, #0
 801ea30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ea32:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801ea34:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801ea36:	45a2      	cmp	sl, r4
 801ea38:	f240 80ee 	bls.w	801ec18 <tcp_write+0x2e8>
 801ea3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea3e:	f04f 0800 	mov.w	r8, #0
 801ea42:	f003 0301 	and.w	r3, r3, #1
 801ea46:	f8cd 8014 	str.w	r8, [sp, #20]
 801ea4a:	9308      	str	r3, [sp, #32]
 801ea4c:	4643      	mov	r3, r8
 801ea4e:	46d8      	mov	r8, fp
 801ea50:	469b      	mov	fp, r3
 801ea52:	e042      	b.n	801eada <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ea54:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ea58:	2b00      	cmp	r3, #0
 801ea5a:	f040 80f0 	bne.w	801ec3e <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ea5e:	2201      	movs	r2, #1
 801ea60:	4629      	mov	r1, r5
 801ea62:	2036      	movs	r0, #54	; 0x36
 801ea64:	f7fc f9fa 	bl	801ae5c <pbuf_alloc>
 801ea68:	2800      	cmp	r0, #0
 801ea6a:	f000 8100 	beq.w	801ec6e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ea6e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ea70:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ea72:	9006      	str	r0, [sp, #24]
 801ea74:	4422      	add	r2, r4
 801ea76:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ea78:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea7c:	2036      	movs	r0, #54	; 0x36
 801ea7e:	f7fc f9ed 	bl	801ae5c <pbuf_alloc>
 801ea82:	9b06      	ldr	r3, [sp, #24]
 801ea84:	4607      	mov	r7, r0
 801ea86:	2800      	cmp	r0, #0
 801ea88:	f000 8195 	beq.w	801edb6 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801ea8c:	4619      	mov	r1, r3
 801ea8e:	f7fc fbe9 	bl	801b264 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801ea92:	4638      	mov	r0, r7
 801ea94:	f7fc fbc8 	bl	801b228 <pbuf_clen>
 801ea98:	4430      	add	r0, r6
 801ea9a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801ea9c:	2e09      	cmp	r6, #9
 801ea9e:	d84a      	bhi.n	801eb36 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801eaa0:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801eaa4:	2200      	movs	r2, #0
 801eaa6:	4639      	mov	r1, r7
 801eaa8:	4648      	mov	r0, r9
 801eaaa:	4423      	add	r3, r4
 801eaac:	9200      	str	r2, [sp, #0]
 801eaae:	f7ff fdf5 	bl	801e69c <tcp_create_segment>
 801eab2:	4607      	mov	r7, r0
 801eab4:	2800      	cmp	r0, #0
 801eab6:	f000 80da 	beq.w	801ec6e <tcp_write+0x33e>
    if (queue == NULL) {
 801eaba:	9b05      	ldr	r3, [sp, #20]
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	f000 80a3 	beq.w	801ec08 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801eac2:	f1bb 0f00 	cmp.w	fp, #0
 801eac6:	f000 80c2 	beq.w	801ec4e <tcp_write+0x31e>
    pos += seglen;
 801eaca:	442c      	add	r4, r5
      prev_seg->next = seg;
 801eacc:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801ead0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ead2:	45a2      	cmp	sl, r4
 801ead4:	f240 809e 	bls.w	801ec14 <tcp_write+0x2e4>
 801ead8:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801eada:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eade:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801eae0:	b2ad      	uxth	r5, r5
 801eae2:	4545      	cmp	r5, r8
 801eae4:	bf28      	it	cs
 801eae6:	4645      	movcs	r5, r8
 801eae8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eaea:	2b00      	cmp	r3, #0
 801eaec:	d0b2      	beq.n	801ea54 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801eaee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eaf0:	4642      	mov	r2, r8
 801eaf2:	4629      	mov	r1, r5
 801eaf4:	2036      	movs	r0, #54	; 0x36
 801eaf6:	e9cd 9300 	strd	r9, r3, [sp]
 801eafa:	9b05      	ldr	r3, [sp, #20]
 801eafc:	fab3 f383 	clz	r3, r3
 801eb00:	095b      	lsrs	r3, r3, #5
 801eb02:	9302      	str	r3, [sp, #8]
 801eb04:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801eb08:	f7ff fd78 	bl	801e5fc <tcp_pbuf_prealloc>
 801eb0c:	4607      	mov	r7, r0
 801eb0e:	2800      	cmp	r0, #0
 801eb10:	f000 80ad 	beq.w	801ec6e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801eb14:	8943      	ldrh	r3, [r0, #10]
 801eb16:	42ab      	cmp	r3, r5
 801eb18:	f0c0 80a1 	bcc.w	801ec5e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801eb1c:	9b07      	ldr	r3, [sp, #28]
 801eb1e:	462a      	mov	r2, r5
 801eb20:	6878      	ldr	r0, [r7, #4]
 801eb22:	1919      	adds	r1, r3, r4
 801eb24:	f005 fc70 	bl	8024408 <memcpy>
    queuelen += pbuf_clen(p);
 801eb28:	4638      	mov	r0, r7
 801eb2a:	f7fc fb7d 	bl	801b228 <pbuf_clen>
 801eb2e:	4430      	add	r0, r6
 801eb30:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801eb32:	2e09      	cmp	r6, #9
 801eb34:	d9b4      	bls.n	801eaa0 <tcp_write+0x170>
      pbuf_free(p);
 801eb36:	4638      	mov	r0, r7
 801eb38:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801eb3c:	f7fc fb60 	bl	801b200 <pbuf_free>
      goto memerr;
 801eb40:	e097      	b.n	801ec72 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	f000 80b6 	beq.w	801ecb4 <tcp_write+0x384>
 801eb48:	4b65      	ldr	r3, [pc, #404]	; (801ece0 <tcp_write+0x3b0>)
 801eb4a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801eb4e:	4967      	ldr	r1, [pc, #412]	; (801ecec <tcp_write+0x3bc>)
 801eb50:	4865      	ldr	r0, [pc, #404]	; (801ece8 <tcp_write+0x3b8>)
 801eb52:	f006 fc1f 	bl	8025394 <iprintf>
  queuelen = pcb->snd_queuelen;
 801eb56:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801eb5a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801eb5e:	f1b8 0f00 	cmp.w	r8, #0
 801eb62:	f47f af24 	bne.w	801e9ae <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801eb66:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801eb6a:	2b00      	cmp	r3, #0
 801eb6c:	f040 80ac 	bne.w	801ecc8 <tcp_write+0x398>
  while (pos < len) {
 801eb70:	f1ba 0f00 	cmp.w	sl, #0
 801eb74:	f000 81c7 	beq.w	801ef06 <tcp_write+0x5d6>
          extendlen = seglen;
 801eb78:	2400      	movs	r4, #0
 801eb7a:	940d      	str	r4, [sp, #52]	; 0x34
 801eb7c:	940c      	str	r4, [sp, #48]	; 0x30
 801eb7e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801eb82:	e75b      	b.n	801ea3c <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801eb84:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801eb86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eb88:	459a      	cmp	sl, r3
 801eb8a:	f67f af50 	bls.w	801ea2e <tcp_write+0xfe>
 801eb8e:	2c00      	cmp	r4, #0
 801eb90:	f43f af4d 	beq.w	801ea2e <tcp_write+0xfe>
 801eb94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801eb96:	8912      	ldrh	r2, [r2, #8]
 801eb98:	920d      	str	r2, [sp, #52]	; 0x34
 801eb9a:	2a00      	cmp	r2, #0
 801eb9c:	f000 809c 	beq.w	801ecd8 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801eba0:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801eba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801eba6:	42a7      	cmp	r7, r4
 801eba8:	bfa8      	it	ge
 801ebaa:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ebac:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ebae:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ebb0:	f100 8187 	bmi.w	801eec2 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801ebb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ebb6:	685a      	ldr	r2, [r3, #4]
 801ebb8:	4613      	mov	r3, r2
 801ebba:	6812      	ldr	r2, [r2, #0]
 801ebbc:	2a00      	cmp	r2, #0
 801ebbe:	d1fb      	bne.n	801ebb8 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ebc0:	920c      	str	r2, [sp, #48]	; 0x30
 801ebc2:	7b1a      	ldrb	r2, [r3, #12]
 801ebc4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801ebc8:	d106      	bne.n	801ebd8 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801ebca:	895a      	ldrh	r2, [r3, #10]
 801ebcc:	685b      	ldr	r3, [r3, #4]
 801ebce:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801ebd0:	9a07      	ldr	r2, [sp, #28]
 801ebd2:	429a      	cmp	r2, r3
 801ebd4:	f000 8167 	beq.w	801eea6 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801ebd8:	2201      	movs	r2, #1
 801ebda:	4629      	mov	r1, r5
 801ebdc:	2000      	movs	r0, #0
 801ebde:	f7fc f93d 	bl	801ae5c <pbuf_alloc>
 801ebe2:	900c      	str	r0, [sp, #48]	; 0x30
 801ebe4:	2800      	cmp	r0, #0
 801ebe6:	f000 813e 	beq.w	801ee66 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801ebea:	9b07      	ldr	r3, [sp, #28]
 801ebec:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ebee:	440b      	add	r3, r1
 801ebf0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801ebf2:	f7fc fb19 	bl	801b228 <pbuf_clen>
 801ebf6:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801ebf8:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801ebfa:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801ebfc:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801ebfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec00:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ec02:	18ec      	adds	r4, r5, r3
 801ec04:	b2a4      	uxth	r4, r4
 801ec06:	e716      	b.n	801ea36 <tcp_write+0x106>
    pos += seglen;
 801ec08:	442c      	add	r4, r5
 801ec0a:	9005      	str	r0, [sp, #20]
 801ec0c:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ec0e:	45a2      	cmp	sl, r4
 801ec10:	f63f af62 	bhi.w	801ead8 <tcp_write+0x1a8>
 801ec14:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801ec18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	f000 80db 	beq.w	801edd6 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801ec20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ec22:	6854      	ldr	r4, [r2, #4]
 801ec24:	2c00      	cmp	r4, #0
 801ec26:	f000 8090 	beq.w	801ed4a <tcp_write+0x41a>
 801ec2a:	469b      	mov	fp, r3
 801ec2c:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801ec2e:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801ec30:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801ec32:	445b      	add	r3, fp
 801ec34:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801ec36:	2a00      	cmp	r2, #0
 801ec38:	d079      	beq.n	801ed2e <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801ec3a:	4614      	mov	r4, r2
 801ec3c:	e7f7      	b.n	801ec2e <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ec3e:	4b28      	ldr	r3, [pc, #160]	; (801ece0 <tcp_write+0x3b0>)
 801ec40:	f240 2271 	movw	r2, #625	; 0x271
 801ec44:	492a      	ldr	r1, [pc, #168]	; (801ecf0 <tcp_write+0x3c0>)
 801ec46:	4828      	ldr	r0, [pc, #160]	; (801ece8 <tcp_write+0x3b8>)
 801ec48:	f006 fba4 	bl	8025394 <iprintf>
 801ec4c:	e707      	b.n	801ea5e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ec4e:	4b24      	ldr	r3, [pc, #144]	; (801ece0 <tcp_write+0x3b0>)
 801ec50:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ec54:	4927      	ldr	r1, [pc, #156]	; (801ecf4 <tcp_write+0x3c4>)
 801ec56:	4824      	ldr	r0, [pc, #144]	; (801ece8 <tcp_write+0x3b8>)
 801ec58:	f006 fb9c 	bl	8025394 <iprintf>
 801ec5c:	e735      	b.n	801eaca <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801ec5e:	4b20      	ldr	r3, [pc, #128]	; (801ece0 <tcp_write+0x3b0>)
 801ec60:	f240 2266 	movw	r2, #614	; 0x266
 801ec64:	4924      	ldr	r1, [pc, #144]	; (801ecf8 <tcp_write+0x3c8>)
 801ec66:	4820      	ldr	r0, [pc, #128]	; (801ece8 <tcp_write+0x3b8>)
 801ec68:	f006 fb94 	bl	8025394 <iprintf>
 801ec6c:	e756      	b.n	801eb1c <tcp_write+0x1ec>
 801ec6e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ec72:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ec76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec7a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ec7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ec80:	b113      	cbz	r3, 801ec88 <tcp_write+0x358>
    pbuf_free(concat_p);
 801ec82:	4618      	mov	r0, r3
 801ec84:	f7fc fabc 	bl	801b200 <pbuf_free>
  if (queue != NULL) {
 801ec88:	f1b8 0f00 	cmp.w	r8, #0
 801ec8c:	d002      	beq.n	801ec94 <tcp_write+0x364>
    tcp_segs_free(queue);
 801ec8e:	4640      	mov	r0, r8
 801ec90:	f7fd f820 	bl	801bcd4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801ec94:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801ec98:	b13b      	cbz	r3, 801ecaa <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801ec9a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801ec9e:	b923      	cbnz	r3, 801ecaa <tcp_write+0x37a>
 801eca0:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	f000 808c 	beq.w	801edc2 <tcp_write+0x492>
  return ERR_MEM;
 801ecaa:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ecae:	b011      	add	sp, #68	; 0x44
 801ecb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801ecb4:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ecb8:	2b00      	cmp	r3, #0
 801ecba:	f47f af45 	bne.w	801eb48 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ecbe:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801ecc2:	2b00      	cmp	r3, #0
 801ecc4:	f43f af58 	beq.w	801eb78 <tcp_write+0x248>
 801ecc8:	4b05      	ldr	r3, [pc, #20]	; (801ece0 <tcp_write+0x3b0>)
 801ecca:	f240 224a 	movw	r2, #586	; 0x24a
 801ecce:	490b      	ldr	r1, [pc, #44]	; (801ecfc <tcp_write+0x3cc>)
 801ecd0:	4805      	ldr	r0, [pc, #20]	; (801ece8 <tcp_write+0x3b8>)
 801ecd2:	f006 fb5f 	bl	8025394 <iprintf>
 801ecd6:	e74b      	b.n	801eb70 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801ecd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ecda:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ecdc:	930c      	str	r3, [sp, #48]	; 0x30
 801ecde:	e6ad      	b.n	801ea3c <tcp_write+0x10c>
 801ece0:	08044808 	.word	0x08044808
 801ece4:	08044a44 	.word	0x08044a44
 801ece8:	08029fe8 	.word	0x08029fe8
 801ecec:	080449d8 	.word	0x080449d8
 801ecf0:	08044b00 	.word	0x08044b00
 801ecf4:	08044b10 	.word	0x08044b10
 801ecf8:	08044ac0 	.word	0x08044ac0
 801ecfc:	08044a90 	.word	0x08044a90
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801ed00:	4b94      	ldr	r3, [pc, #592]	; (801ef54 <tcp_write+0x624>)
 801ed02:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801ed06:	4994      	ldr	r1, [pc, #592]	; (801ef58 <tcp_write+0x628>)
 801ed08:	4894      	ldr	r0, [pc, #592]	; (801ef5c <tcp_write+0x62c>)
 801ed0a:	f006 fb43 	bl	8025394 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ed0e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ed12:	930a      	str	r3, [sp, #40]	; 0x28
 801ed14:	e66a      	b.n	801e9ec <tcp_write+0xbc>
 801ed16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ed18:	e735      	b.n	801eb86 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ed1a:	4b8e      	ldr	r3, [pc, #568]	; (801ef54 <tcp_write+0x624>)
 801ed1c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ed20:	498f      	ldr	r1, [pc, #572]	; (801ef60 <tcp_write+0x630>)
 801ed22:	488e      	ldr	r0, [pc, #568]	; (801ef5c <tcp_write+0x62c>)
 801ed24:	f006 fb36 	bl	8025394 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801ed28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed2a:	891b      	ldrh	r3, [r3, #8]
 801ed2c:	e64f      	b.n	801e9ce <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801ed2e:	8963      	ldrh	r3, [r4, #10]
 801ed30:	465a      	mov	r2, fp
 801ed32:	6860      	ldr	r0, [r4, #4]
 801ed34:	4629      	mov	r1, r5
 801ed36:	4418      	add	r0, r3
 801ed38:	f005 fb66 	bl	8024408 <memcpy>
        p->len += oversize_used;
 801ed3c:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ed3e:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801ed40:	445b      	add	r3, fp
 801ed42:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801ed44:	2a00      	cmp	r2, #0
 801ed46:	f47f af78 	bne.w	801ec3a <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801ed4a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ed4c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ed4e:	8913      	ldrh	r3, [r2, #8]
 801ed50:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801ed52:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801ed56:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801ed58:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801ed5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	d061      	beq.n	801ee26 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801ed62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ed64:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ed66:	6860      	ldr	r0, [r4, #4]
 801ed68:	4629      	mov	r1, r5
 801ed6a:	f7fc fa7b 	bl	801b264 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801ed6e:	892a      	ldrh	r2, [r5, #8]
 801ed70:	8923      	ldrh	r3, [r4, #8]
 801ed72:	4413      	add	r3, r2
 801ed74:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801ed76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ed78:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801ed7c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801ed80:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801ed84:	4453      	add	r3, sl
 801ed86:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801ed8a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801ed8e:	eba3 0a0a 	sub.w	sl, r3, sl
 801ed92:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801ed96:	b11e      	cbz	r6, 801eda0 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ed98:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	d036      	beq.n	801ee0e <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801eda0:	b12f      	cbz	r7, 801edae <tcp_write+0x47e>
 801eda2:	68fb      	ldr	r3, [r7, #12]
 801eda4:	b11b      	cbz	r3, 801edae <tcp_write+0x47e>
 801eda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801eda8:	f012 0502 	ands.w	r5, r2, #2
 801edac:	d025      	beq.n	801edfa <tcp_write+0x4ca>
  return ERR_OK;
 801edae:	2000      	movs	r0, #0
}
 801edb0:	b011      	add	sp, #68	; 0x44
 801edb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801edb6:	4618      	mov	r0, r3
 801edb8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801edbc:	f7fc fa20 	bl	801b200 <pbuf_free>
        goto memerr;
 801edc0:	e757      	b.n	801ec72 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801edc2:	4b64      	ldr	r3, [pc, #400]	; (801ef54 <tcp_write+0x624>)
 801edc4:	f240 3227 	movw	r2, #807	; 0x327
 801edc8:	4966      	ldr	r1, [pc, #408]	; (801ef64 <tcp_write+0x634>)
 801edca:	4864      	ldr	r0, [pc, #400]	; (801ef5c <tcp_write+0x62c>)
 801edcc:	f006 fae2 	bl	8025394 <iprintf>
  return ERR_MEM;
 801edd0:	f04f 30ff 	mov.w	r0, #4294967295
 801edd4:	e76b      	b.n	801ecae <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801edd6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801edda:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801edde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d051      	beq.n	801ee88 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801ede4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ede6:	2b00      	cmp	r3, #0
 801ede8:	d1bb      	bne.n	801ed62 <tcp_write+0x432>
 801edea:	4b5a      	ldr	r3, [pc, #360]	; (801ef54 <tcp_write+0x624>)
 801edec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801edf0:	495d      	ldr	r1, [pc, #372]	; (801ef68 <tcp_write+0x638>)
 801edf2:	485a      	ldr	r0, [pc, #360]	; (801ef5c <tcp_write+0x62c>)
 801edf4:	f006 face 	bl	8025394 <iprintf>
 801edf8:	e7b3      	b.n	801ed62 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801edfa:	2008      	movs	r0, #8
 801edfc:	899c      	ldrh	r4, [r3, #12]
 801edfe:	f7fa f9c3 	bl	8019188 <lwip_htons>
 801ee02:	4602      	mov	r2, r0
 801ee04:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801ee06:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801ee08:	4314      	orrs	r4, r2
 801ee0a:	819c      	strh	r4, [r3, #12]
 801ee0c:	e74f      	b.n	801ecae <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801ee0e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d1c4      	bne.n	801eda0 <tcp_write+0x470>
 801ee16:	4b4f      	ldr	r3, [pc, #316]	; (801ef54 <tcp_write+0x624>)
 801ee18:	f240 3212 	movw	r2, #786	; 0x312
 801ee1c:	4951      	ldr	r1, [pc, #324]	; (801ef64 <tcp_write+0x634>)
 801ee1e:	484f      	ldr	r0, [pc, #316]	; (801ef5c <tcp_write+0x62c>)
 801ee20:	f006 fab8 	bl	8025394 <iprintf>
 801ee24:	e7bc      	b.n	801eda0 <tcp_write+0x470>
  } else if (extendlen > 0) {
 801ee26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d0a4      	beq.n	801ed76 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ee2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee2e:	6859      	ldr	r1, [r3, #4]
 801ee30:	2900      	cmp	r1, #0
 801ee32:	d02e      	beq.n	801ee92 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee34:	680a      	ldr	r2, [r1, #0]
 801ee36:	2a00      	cmp	r2, #0
 801ee38:	d07f      	beq.n	801ef3a <tcp_write+0x60a>
 801ee3a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee3c:	e000      	b.n	801ee40 <tcp_write+0x510>
 801ee3e:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801ee40:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee42:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801ee44:	4423      	add	r3, r4
 801ee46:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ee48:	4611      	mov	r1, r2
 801ee4a:	2800      	cmp	r0, #0
 801ee4c:	d1f7      	bne.n	801ee3e <tcp_write+0x50e>
    p->tot_len += extendlen;
 801ee4e:	8913      	ldrh	r3, [r2, #8]
 801ee50:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ee52:	440b      	add	r3, r1
 801ee54:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801ee56:	8953      	ldrh	r3, [r2, #10]
 801ee58:	440b      	add	r3, r1
 801ee5a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801ee5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ee5e:	8913      	ldrh	r3, [r2, #8]
 801ee60:	440b      	add	r3, r1
 801ee62:	8113      	strh	r3, [r2, #8]
 801ee64:	e787      	b.n	801ed76 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ee66:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801ee6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ee6e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801ee72:	e70f      	b.n	801ec94 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ee74:	4b37      	ldr	r3, [pc, #220]	; (801ef54 <tcp_write+0x624>)
 801ee76:	f240 1255 	movw	r2, #341	; 0x155
 801ee7a:	493c      	ldr	r1, [pc, #240]	; (801ef6c <tcp_write+0x63c>)
 801ee7c:	4837      	ldr	r0, [pc, #220]	; (801ef5c <tcp_write+0x62c>)
 801ee7e:	f006 fa89 	bl	8025394 <iprintf>
  queuelen = pcb->snd_queuelen;
 801ee82:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801ee86:	e668      	b.n	801eb5a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801ee88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee8a:	b19b      	cbz	r3, 801eeb4 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ee8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ee8e:	2b00      	cmp	r3, #0
 801ee90:	d1cc      	bne.n	801ee2c <tcp_write+0x4fc>
 801ee92:	4b30      	ldr	r3, [pc, #192]	; (801ef54 <tcp_write+0x624>)
 801ee94:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ee98:	4935      	ldr	r1, [pc, #212]	; (801ef70 <tcp_write+0x640>)
 801ee9a:	4830      	ldr	r0, [pc, #192]	; (801ef5c <tcp_write+0x62c>)
 801ee9c:	f006 fa7a 	bl	8025394 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801eea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eea2:	6859      	ldr	r1, [r3, #4]
 801eea4:	e7c6      	b.n	801ee34 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801eea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eea8:	bba3      	cbnz	r3, 801ef14 <tcp_write+0x5e4>
          extendlen = seglen;
 801eeaa:	950d      	str	r5, [sp, #52]	; 0x34
 801eeac:	e6a7      	b.n	801ebfe <tcp_write+0x2ce>
    return ERR_CONN;
 801eeae:	f06f 000a 	mvn.w	r0, #10
 801eeb2:	e6fc      	b.n	801ecae <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801eeb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eeb6:	2b00      	cmp	r3, #0
 801eeb8:	f47f af5d 	bne.w	801ed76 <tcp_write+0x446>
    pcb->unsent = queue;
 801eebc:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801eec0:	e75c      	b.n	801ed7c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801eec2:	e9cd 9300 	strd	r9, r3, [sp]
 801eec6:	2301      	movs	r3, #1
 801eec8:	4622      	mov	r2, r4
 801eeca:	4629      	mov	r1, r5
 801eecc:	2000      	movs	r0, #0
 801eece:	9302      	str	r3, [sp, #8]
 801eed0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801eed4:	f7ff fb92 	bl	801e5fc <tcp_pbuf_prealloc>
 801eed8:	4603      	mov	r3, r0
 801eeda:	4604      	mov	r4, r0
 801eedc:	900c      	str	r0, [sp, #48]	; 0x30
 801eede:	2800      	cmp	r0, #0
 801eee0:	d0c1      	beq.n	801ee66 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801eee2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801eee4:	462a      	mov	r2, r5
 801eee6:	9907      	ldr	r1, [sp, #28]
 801eee8:	4401      	add	r1, r0
 801eeea:	6858      	ldr	r0, [r3, #4]
 801eeec:	f005 fa8c 	bl	8024408 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801eef0:	4620      	mov	r0, r4
 801eef2:	e67e      	b.n	801ebf2 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eef4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801eef8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801eefc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ef00:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801ef04:	e6d3      	b.n	801ecae <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801ef06:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ef0a:	46d0      	mov	r8, sl
 801ef0c:	4657      	mov	r7, sl
 801ef0e:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801ef12:	e7d3      	b.n	801eebc <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ef14:	4b0f      	ldr	r3, [pc, #60]	; (801ef54 <tcp_write+0x624>)
 801ef16:	f240 2231 	movw	r2, #561	; 0x231
 801ef1a:	4916      	ldr	r1, [pc, #88]	; (801ef74 <tcp_write+0x644>)
 801ef1c:	480f      	ldr	r0, [pc, #60]	; (801ef5c <tcp_write+0x62c>)
 801ef1e:	f006 fa39 	bl	8025394 <iprintf>
          extendlen = seglen;
 801ef22:	950d      	str	r5, [sp, #52]	; 0x34
 801ef24:	e66b      	b.n	801ebfe <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801ef26:	4b0b      	ldr	r3, [pc, #44]	; (801ef54 <tcp_write+0x624>)
 801ef28:	f240 12ad 	movw	r2, #429	; 0x1ad
 801ef2c:	4912      	ldr	r1, [pc, #72]	; (801ef78 <tcp_write+0x648>)
 801ef2e:	480b      	ldr	r0, [pc, #44]	; (801ef5c <tcp_write+0x62c>)
 801ef30:	f006 fa30 	bl	8025394 <iprintf>
 801ef34:	f06f 000f 	mvn.w	r0, #15
 801ef38:	e6b9      	b.n	801ecae <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ef3a:	460a      	mov	r2, r1
 801ef3c:	e787      	b.n	801ee4e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ef3e:	4b05      	ldr	r3, [pc, #20]	; (801ef54 <tcp_write+0x624>)
 801ef40:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ef44:	490d      	ldr	r1, [pc, #52]	; (801ef7c <tcp_write+0x64c>)
 801ef46:	4805      	ldr	r0, [pc, #20]	; (801ef5c <tcp_write+0x62c>)
 801ef48:	f006 fa24 	bl	8025394 <iprintf>
 801ef4c:	f06f 000f 	mvn.w	r0, #15
 801ef50:	e6ad      	b.n	801ecae <tcp_write+0x37e>
 801ef52:	bf00      	nop
 801ef54:	08044808 	.word	0x08044808
 801ef58:	08044a24 	.word	0x08044a24
 801ef5c:	08029fe8 	.word	0x08029fe8
 801ef60:	08044a0c 	.word	0x08044a0c
 801ef64:	08044b94 	.word	0x08044b94
 801ef68:	08044b24 	.word	0x08044b24
 801ef6c:	0804499c 	.word	0x0804499c
 801ef70:	08044b5c 	.word	0x08044b5c
 801ef74:	08044a64 	.word	0x08044a64
 801ef78:	08044968 	.word	0x08044968
 801ef7c:	08044950 	.word	0x08044950

0801ef80 <tcp_split_unsent_seg>:
{
 801ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ef84:	4605      	mov	r5, r0
{
 801ef86:	b083      	sub	sp, #12
 801ef88:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ef8a:	2800      	cmp	r0, #0
 801ef8c:	f000 80a7 	beq.w	801f0de <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801ef90:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801ef92:	b376      	cbz	r6, 801eff2 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801ef94:	2c00      	cmp	r4, #0
 801ef96:	f000 80b3 	beq.w	801f100 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801ef9a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ef9e:	45a1      	cmp	r9, r4
 801efa0:	f240 8099 	bls.w	801f0d6 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801efa4:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801efa6:	42a3      	cmp	r3, r4
 801efa8:	d328      	bcc.n	801effc <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801efaa:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801efae:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801efb2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801efb6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801efb8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801efbc:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801efc0:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801efc4:	eb08 010b 	add.w	r1, r8, fp
 801efc8:	b289      	uxth	r1, r1
 801efca:	f7fb ff47 	bl	801ae5c <pbuf_alloc>
  if (p == NULL) {
 801efce:	4607      	mov	r7, r0
 801efd0:	b178      	cbz	r0, 801eff2 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801efd2:	6870      	ldr	r0, [r6, #4]
 801efd4:	8932      	ldrh	r2, [r6, #8]
 801efd6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801efd8:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801efda:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801efdc:	4642      	mov	r2, r8
 801efde:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801efe0:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801efe2:	b29b      	uxth	r3, r3
 801efe4:	f7fc f9b0 	bl	801b348 <pbuf_copy_partial>
 801efe8:	4540      	cmp	r0, r8
 801efea:	d01d      	beq.n	801f028 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801efec:	4638      	mov	r0, r7
 801efee:	f7fc f907 	bl	801b200 <pbuf_free>
  return ERR_MEM;
 801eff2:	f04f 30ff 	mov.w	r0, #4294967295
}
 801eff6:	b003      	add	sp, #12
 801eff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801effc:	4b45      	ldr	r3, [pc, #276]	; (801f114 <tcp_split_unsent_seg+0x194>)
 801effe:	f240 325b 	movw	r2, #859	; 0x35b
 801f002:	4945      	ldr	r1, [pc, #276]	; (801f118 <tcp_split_unsent_seg+0x198>)
 801f004:	4845      	ldr	r0, [pc, #276]	; (801f11c <tcp_split_unsent_seg+0x19c>)
 801f006:	f006 f9c5 	bl	8025394 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801f00a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801f00e:	f1b9 0f00 	cmp.w	r9, #0
 801f012:	d1ca      	bne.n	801efaa <tcp_split_unsent_seg+0x2a>
 801f014:	4b3f      	ldr	r3, [pc, #252]	; (801f114 <tcp_split_unsent_seg+0x194>)
 801f016:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801f01a:	4941      	ldr	r1, [pc, #260]	; (801f120 <tcp_split_unsent_seg+0x1a0>)
 801f01c:	483f      	ldr	r0, [pc, #252]	; (801f11c <tcp_split_unsent_seg+0x19c>)
 801f01e:	f006 f9b9 	bl	8025394 <iprintf>
  remainder = useg->len - split;
 801f022:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801f026:	e7c0      	b.n	801efaa <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f028:	68f3      	ldr	r3, [r6, #12]
 801f02a:	8998      	ldrh	r0, [r3, #12]
 801f02c:	f7fa f8ac 	bl	8019188 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801f030:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f034:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801f038:	d159      	bne.n	801f0ee <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801f03a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801f03e:	f018 0f01 	tst.w	r8, #1
 801f042:	d003      	beq.n	801f04c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801f044:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801f048:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801f04c:	68f3      	ldr	r3, [r6, #12]
 801f04e:	6858      	ldr	r0, [r3, #4]
 801f050:	f7fa f89e 	bl	8019190 <lwip_htonl>
 801f054:	f8cd a000 	str.w	sl, [sp]
 801f058:	1823      	adds	r3, r4, r0
 801f05a:	465a      	mov	r2, fp
 801f05c:	4639      	mov	r1, r7
 801f05e:	4628      	mov	r0, r5
 801f060:	f7ff fb1c 	bl	801e69c <tcp_create_segment>
  if (seg == NULL) {
 801f064:	4682      	mov	sl, r0
 801f066:	2800      	cmp	r0, #0
 801f068:	d0c0      	beq.n	801efec <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f06a:	6870      	ldr	r0, [r6, #4]
 801f06c:	eba4 0409 	sub.w	r4, r4, r9
 801f070:	f7fc f8da 	bl	801b228 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f074:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f076:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f07a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f07c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f07e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f080:	4610      	mov	r0, r2
 801f082:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801f084:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801f088:	b289      	uxth	r1, r1
 801f08a:	f7fb ffa1 	bl	801afd0 <pbuf_realloc>
  useg->len -= remainder;
 801f08e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f090:	4640      	mov	r0, r8
  useg->len -= remainder;
 801f092:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f094:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801f096:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f098:	899c      	ldrh	r4, [r3, #12]
 801f09a:	f7fa f875 	bl	8019188 <lwip_htons>
 801f09e:	68f3      	ldr	r3, [r6, #12]
 801f0a0:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0a2:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801f0a4:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0a6:	f7fc f8bf 	bl	801b228 <pbuf_clen>
 801f0aa:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f0ae:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0b0:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801f0b4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0b8:	f7fc f8b6 	bl	801b228 <pbuf_clen>
 801f0bc:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801f0c0:	4418      	add	r0, r3
  seg->next = useg->next;
 801f0c2:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f0c4:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801f0c8:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801f0cc:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801f0d0:	f8da 3000 	ldr.w	r3, [sl]
 801f0d4:	b183      	cbz	r3, 801f0f8 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801f0d6:	2000      	movs	r0, #0
}
 801f0d8:	b003      	add	sp, #12
 801f0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801f0de:	4b0d      	ldr	r3, [pc, #52]	; (801f114 <tcp_split_unsent_seg+0x194>)
 801f0e0:	f240 324b 	movw	r2, #843	; 0x34b
 801f0e4:	490f      	ldr	r1, [pc, #60]	; (801f124 <tcp_split_unsent_seg+0x1a4>)
 801f0e6:	480d      	ldr	r0, [pc, #52]	; (801f11c <tcp_split_unsent_seg+0x19c>)
 801f0e8:	f006 f954 	bl	8025394 <iprintf>
 801f0ec:	e750      	b.n	801ef90 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801f0ee:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801f0f2:	f04f 0b08 	mov.w	fp, #8
 801f0f6:	e7a2      	b.n	801f03e <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801f0f8:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801f0fa:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801f0fe:	e77a      	b.n	801eff6 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801f100:	4b04      	ldr	r3, [pc, #16]	; (801f114 <tcp_split_unsent_seg+0x194>)
 801f102:	f240 3253 	movw	r2, #851	; 0x353
 801f106:	4908      	ldr	r1, [pc, #32]	; (801f128 <tcp_split_unsent_seg+0x1a8>)
 801f108:	4804      	ldr	r0, [pc, #16]	; (801f11c <tcp_split_unsent_seg+0x19c>)
 801f10a:	f006 f943 	bl	8025394 <iprintf>
    return ERR_VAL;
 801f10e:	f06f 0005 	mvn.w	r0, #5
 801f112:	e770      	b.n	801eff6 <tcp_split_unsent_seg+0x76>
 801f114:	08044808 	.word	0x08044808
 801f118:	08044bfc 	.word	0x08044bfc
 801f11c:	08029fe8 	.word	0x08029fe8
 801f120:	08044c0c 	.word	0x08044c0c
 801f124:	08044bb4 	.word	0x08044bb4
 801f128:	08044bd8 	.word	0x08044bd8

0801f12c <tcp_enqueue_flags>:
{
 801f12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f130:	f011 0703 	ands.w	r7, r1, #3
{
 801f134:	b082      	sub	sp, #8
 801f136:	460d      	mov	r5, r1
 801f138:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f13a:	d05e      	beq.n	801f1fa <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f13c:	2c00      	cmp	r4, #0
 801f13e:	d065      	beq.n	801f20c <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801f140:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f144:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801f148:	d049      	beq.n	801f1de <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f14a:	2104      	movs	r1, #4
 801f14c:	2036      	movs	r0, #54	; 0x36
 801f14e:	f7fb fe85 	bl	801ae5c <pbuf_alloc>
 801f152:	4606      	mov	r6, r0
 801f154:	2800      	cmp	r0, #0
 801f156:	d049      	beq.n	801f1ec <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f158:	8943      	ldrh	r3, [r0, #10]
 801f15a:	2b03      	cmp	r3, #3
 801f15c:	d872      	bhi.n	801f244 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801f15e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801f162:	4b40      	ldr	r3, [pc, #256]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f164:	f240 4239 	movw	r2, #1081	; 0x439
 801f168:	493f      	ldr	r1, [pc, #252]	; (801f268 <tcp_enqueue_flags+0x13c>)
 801f16a:	4840      	ldr	r0, [pc, #256]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f16c:	f006 f912 	bl	8025394 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801f170:	4631      	mov	r1, r6
 801f172:	f8cd 8000 	str.w	r8, [sp]
 801f176:	462a      	mov	r2, r5
 801f178:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801f17a:	4620      	mov	r0, r4
 801f17c:	f7ff fa8e 	bl	801e69c <tcp_create_segment>
 801f180:	4606      	mov	r6, r0
 801f182:	2800      	cmp	r0, #0
 801f184:	d032      	beq.n	801f1ec <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f186:	68c3      	ldr	r3, [r0, #12]
 801f188:	079a      	lsls	r2, r3, #30
 801f18a:	d153      	bne.n	801f234 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f18c:	8933      	ldrh	r3, [r6, #8]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d144      	bne.n	801f21c <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801f192:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801f194:	2b00      	cmp	r3, #0
 801f196:	d04b      	beq.n	801f230 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801f198:	461a      	mov	r2, r3
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	2b00      	cmp	r3, #0
 801f19e:	d1fb      	bne.n	801f198 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801f1a0:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801f1a2:	2300      	movs	r3, #0
 801f1a4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801f1a8:	b117      	cbz	r7, 801f1b0 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801f1aa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801f1ac:	3301      	adds	r3, #1
 801f1ae:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801f1b0:	07eb      	lsls	r3, r5, #31
 801f1b2:	d503      	bpl.n	801f1bc <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801f1b4:	8b63      	ldrh	r3, [r4, #26]
 801f1b6:	f043 0320 	orr.w	r3, r3, #32
 801f1ba:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801f1bc:	6870      	ldr	r0, [r6, #4]
 801f1be:	f7fc f833 	bl	801b228 <pbuf_clen>
 801f1c2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801f1c6:	4418      	add	r0, r3
 801f1c8:	b280      	uxth	r0, r0
 801f1ca:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801f1ce:	b118      	cbz	r0, 801f1d8 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f1d0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801f1d2:	2800      	cmp	r0, #0
 801f1d4:	d039      	beq.n	801f24a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801f1d6:	2000      	movs	r0, #0
}
 801f1d8:	b002      	add	sp, #8
 801f1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801f1de:	4641      	mov	r1, r8
 801f1e0:	2036      	movs	r0, #54	; 0x36
 801f1e2:	f7fb fe3b 	bl	801ae5c <pbuf_alloc>
 801f1e6:	4606      	mov	r6, r0
 801f1e8:	2800      	cmp	r0, #0
 801f1ea:	d1c1      	bne.n	801f170 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f1ec:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801f1ee:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f1f6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801f1f8:	e7ee      	b.n	801f1d8 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801f1fa:	4b1a      	ldr	r3, [pc, #104]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f1fc:	f240 4211 	movw	r2, #1041	; 0x411
 801f200:	491b      	ldr	r1, [pc, #108]	; (801f270 <tcp_enqueue_flags+0x144>)
 801f202:	481a      	ldr	r0, [pc, #104]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f204:	f006 f8c6 	bl	8025394 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801f208:	2c00      	cmp	r4, #0
 801f20a:	d199      	bne.n	801f140 <tcp_enqueue_flags+0x14>
 801f20c:	4b15      	ldr	r3, [pc, #84]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f20e:	f240 4213 	movw	r2, #1043	; 0x413
 801f212:	4918      	ldr	r1, [pc, #96]	; (801f274 <tcp_enqueue_flags+0x148>)
 801f214:	4815      	ldr	r0, [pc, #84]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f216:	f006 f8bd 	bl	8025394 <iprintf>
 801f21a:	e791      	b.n	801f140 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801f21c:	4b11      	ldr	r3, [pc, #68]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f21e:	f240 4243 	movw	r2, #1091	; 0x443
 801f222:	4915      	ldr	r1, [pc, #84]	; (801f278 <tcp_enqueue_flags+0x14c>)
 801f224:	4811      	ldr	r0, [pc, #68]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f226:	f006 f8b5 	bl	8025394 <iprintf>
  if (pcb->unsent == NULL) {
 801f22a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d1b3      	bne.n	801f198 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801f230:	66e6      	str	r6, [r4, #108]	; 0x6c
 801f232:	e7b6      	b.n	801f1a2 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801f234:	4b0b      	ldr	r3, [pc, #44]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f236:	f240 4242 	movw	r2, #1090	; 0x442
 801f23a:	4910      	ldr	r1, [pc, #64]	; (801f27c <tcp_enqueue_flags+0x150>)
 801f23c:	480b      	ldr	r0, [pc, #44]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f23e:	f006 f8a9 	bl	8025394 <iprintf>
 801f242:	e7a3      	b.n	801f18c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801f244:	f04f 0801 	mov.w	r8, #1
 801f248:	e792      	b.n	801f170 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801f24a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801f24c:	2c00      	cmp	r4, #0
 801f24e:	d1c3      	bne.n	801f1d8 <tcp_enqueue_flags+0xac>
 801f250:	4b04      	ldr	r3, [pc, #16]	; (801f264 <tcp_enqueue_flags+0x138>)
 801f252:	f240 4265 	movw	r2, #1125	; 0x465
 801f256:	490a      	ldr	r1, [pc, #40]	; (801f280 <tcp_enqueue_flags+0x154>)
 801f258:	4804      	ldr	r0, [pc, #16]	; (801f26c <tcp_enqueue_flags+0x140>)
 801f25a:	f006 f89b 	bl	8025394 <iprintf>
  return ERR_OK;
 801f25e:	4620      	mov	r0, r4
 801f260:	e7ba      	b.n	801f1d8 <tcp_enqueue_flags+0xac>
 801f262:	bf00      	nop
 801f264:	08044808 	.word	0x08044808
 801f268:	08044c94 	.word	0x08044c94
 801f26c:	08029fe8 	.word	0x08029fe8
 801f270:	08044c1c 	.word	0x08044c1c
 801f274:	08044c74 	.word	0x08044c74
 801f278:	08044ce8 	.word	0x08044ce8
 801f27c:	08044cd0 	.word	0x08044cd0
 801f280:	08044d14 	.word	0x08044d14

0801f284 <tcp_send_fin>:
{
 801f284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f286:	4606      	mov	r6, r0
 801f288:	b188      	cbz	r0, 801f2ae <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801f28a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801f28c:	b14c      	cbz	r4, 801f2a2 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801f28e:	4625      	mov	r5, r4
 801f290:	6824      	ldr	r4, [r4, #0]
 801f292:	2c00      	cmp	r4, #0
 801f294:	d1fb      	bne.n	801f28e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801f296:	68eb      	ldr	r3, [r5, #12]
 801f298:	8998      	ldrh	r0, [r3, #12]
 801f29a:	f7f9 ff75 	bl	8019188 <lwip_htons>
 801f29e:	0743      	lsls	r3, r0, #29
 801f2a0:	d00d      	beq.n	801f2be <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f2a2:	4630      	mov	r0, r6
 801f2a4:	2101      	movs	r1, #1
}
 801f2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801f2aa:	f7ff bf3f 	b.w	801f12c <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801f2ae:	4b0b      	ldr	r3, [pc, #44]	; (801f2dc <tcp_send_fin+0x58>)
 801f2b0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801f2b4:	490a      	ldr	r1, [pc, #40]	; (801f2e0 <tcp_send_fin+0x5c>)
 801f2b6:	480b      	ldr	r0, [pc, #44]	; (801f2e4 <tcp_send_fin+0x60>)
 801f2b8:	f006 f86c 	bl	8025394 <iprintf>
 801f2bc:	e7e5      	b.n	801f28a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2be:	68eb      	ldr	r3, [r5, #12]
 801f2c0:	2001      	movs	r0, #1
 801f2c2:	899f      	ldrh	r7, [r3, #12]
 801f2c4:	f7f9 ff60 	bl	8019188 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801f2c8:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2ca:	4338      	orrs	r0, r7
 801f2cc:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801f2ce:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801f2d2:	8190      	strh	r0, [r2, #12]
}
 801f2d4:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801f2d6:	8373      	strh	r3, [r6, #26]
}
 801f2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f2da:	bf00      	nop
 801f2dc:	08044808 	.word	0x08044808
 801f2e0:	08044d3c 	.word	0x08044d3c
 801f2e4:	08029fe8 	.word	0x08029fe8

0801f2e8 <tcp_rexmit_rto_prepare>:
{
 801f2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f2ea:	4605      	mov	r5, r0
 801f2ec:	2800      	cmp	r0, #0
 801f2ee:	d032      	beq.n	801f356 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801f2f0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801f2f2:	b132      	cbz	r2, 801f302 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f2f4:	6813      	ldr	r3, [r2, #0]
 801f2f6:	4614      	mov	r4, r2
 801f2f8:	b15b      	cbz	r3, 801f312 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801f2fa:	6863      	ldr	r3, [r4, #4]
 801f2fc:	7b9b      	ldrb	r3, [r3, #14]
 801f2fe:	2b01      	cmp	r3, #1
 801f300:	d003      	beq.n	801f30a <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801f302:	f06f 0305 	mvn.w	r3, #5
}
 801f306:	4618      	mov	r0, r3
 801f308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801f30a:	6824      	ldr	r4, [r4, #0]
 801f30c:	6823      	ldr	r3, [r4, #0]
 801f30e:	2b00      	cmp	r3, #0
 801f310:	d1f3      	bne.n	801f2fa <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801f312:	6863      	ldr	r3, [r4, #4]
 801f314:	7b9b      	ldrb	r3, [r3, #14]
 801f316:	2b01      	cmp	r3, #1
 801f318:	d1f3      	bne.n	801f302 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801f31a:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801f31c:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801f31e:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801f320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801f324:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801f326:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f328:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801f32a:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f32e:	6858      	ldr	r0, [r3, #4]
 801f330:	f7f9 ff2e 	bl	8019190 <lwip_htonl>
 801f334:	68e3      	ldr	r3, [r4, #12]
 801f336:	4606      	mov	r6, r0
 801f338:	8924      	ldrh	r4, [r4, #8]
 801f33a:	8998      	ldrh	r0, [r3, #12]
 801f33c:	f7f9 ff24 	bl	8019188 <lwip_htons>
 801f340:	f010 0003 	ands.w	r0, r0, #3
 801f344:	4426      	add	r6, r4
  return ERR_OK;
 801f346:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f348:	bf18      	it	ne
 801f34a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801f34c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f34e:	4430      	add	r0, r6
 801f350:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801f352:	4618      	mov	r0, r3
 801f354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801f356:	4b04      	ldr	r3, [pc, #16]	; (801f368 <tcp_rexmit_rto_prepare+0x80>)
 801f358:	f240 6263 	movw	r2, #1635	; 0x663
 801f35c:	4903      	ldr	r1, [pc, #12]	; (801f36c <tcp_rexmit_rto_prepare+0x84>)
 801f35e:	4804      	ldr	r0, [pc, #16]	; (801f370 <tcp_rexmit_rto_prepare+0x88>)
 801f360:	f006 f818 	bl	8025394 <iprintf>
 801f364:	e7c4      	b.n	801f2f0 <tcp_rexmit_rto_prepare+0x8>
 801f366:	bf00      	nop
 801f368:	08044808 	.word	0x08044808
 801f36c:	08044d58 	.word	0x08044d58
 801f370:	08029fe8 	.word	0x08029fe8

0801f374 <tcp_rexmit>:
{
 801f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f376:	4607      	mov	r7, r0
 801f378:	2800      	cmp	r0, #0
 801f37a:	d031      	beq.n	801f3e0 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801f37c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801f37e:	b34e      	cbz	r6, 801f3d4 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801f380:	6873      	ldr	r3, [r6, #4]
 801f382:	7b9b      	ldrb	r3, [r3, #14]
 801f384:	2b01      	cmp	r3, #1
 801f386:	d125      	bne.n	801f3d4 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801f388:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801f38a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801f38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801f390:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801f392:	b91b      	cbnz	r3, 801f39c <tcp_rexmit+0x28>
 801f394:	e00f      	b.n	801f3b6 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801f396:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801f398:	682b      	ldr	r3, [r5, #0]
 801f39a:	b163      	cbz	r3, 801f3b6 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f39c:	68db      	ldr	r3, [r3, #12]
 801f39e:	6858      	ldr	r0, [r3, #4]
 801f3a0:	f7f9 fef6 	bl	8019190 <lwip_htonl>
 801f3a4:	68f3      	ldr	r3, [r6, #12]
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	6858      	ldr	r0, [r3, #4]
 801f3aa:	f7f9 fef1 	bl	8019190 <lwip_htonl>
 801f3ae:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801f3b0:	2c00      	cmp	r4, #0
 801f3b2:	dbf0      	blt.n	801f396 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801f3b4:	682b      	ldr	r3, [r5, #0]
 801f3b6:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801f3b8:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801f3ba:	6833      	ldr	r3, [r6, #0]
 801f3bc:	b16b      	cbz	r3, 801f3da <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801f3be:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801f3c2:	2bff      	cmp	r3, #255	; 0xff
 801f3c4:	d002      	beq.n	801f3cc <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801f3c6:	3301      	adds	r3, #1
 801f3c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801f3cc:	2300      	movs	r3, #0
  return ERR_OK;
 801f3ce:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801f3d0:	637b      	str	r3, [r7, #52]	; 0x34
}
 801f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801f3d4:	f06f 0005 	mvn.w	r0, #5
}
 801f3d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801f3da:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801f3de:	e7ee      	b.n	801f3be <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801f3e0:	4b03      	ldr	r3, [pc, #12]	; (801f3f0 <tcp_rexmit+0x7c>)
 801f3e2:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801f3e6:	4903      	ldr	r1, [pc, #12]	; (801f3f4 <tcp_rexmit+0x80>)
 801f3e8:	4803      	ldr	r0, [pc, #12]	; (801f3f8 <tcp_rexmit+0x84>)
 801f3ea:	f005 ffd3 	bl	8025394 <iprintf>
 801f3ee:	e7c5      	b.n	801f37c <tcp_rexmit+0x8>
 801f3f0:	08044808 	.word	0x08044808
 801f3f4:	08044d7c 	.word	0x08044d7c
 801f3f8:	08029fe8 	.word	0x08029fe8

0801f3fc <tcp_rexmit_fast>:
{
 801f3fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f3fe:	4604      	mov	r4, r0
 801f400:	b340      	cbz	r0, 801f454 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f402:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f404:	b113      	cbz	r3, 801f40c <tcp_rexmit_fast+0x10>
 801f406:	8b63      	ldrh	r3, [r4, #26]
 801f408:	075b      	lsls	r3, r3, #29
 801f40a:	d500      	bpl.n	801f40e <tcp_rexmit_fast+0x12>
}
 801f40c:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f40e:	4620      	mov	r0, r4
 801f410:	f7ff ffb0 	bl	801f374 <tcp_rexmit>
 801f414:	2800      	cmp	r0, #0
 801f416:	d1f9      	bne.n	801f40c <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f418:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801f41c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f420:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f422:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f424:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f428:	bf28      	it	cs
 801f42a:	4619      	movcs	r1, r3
 801f42c:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f42e:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f432:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f436:	d902      	bls.n	801f43e <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801f438:	b283      	uxth	r3, r0
 801f43a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801f43e:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f440:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801f442:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f446:	4413      	add	r3, r2
      pcb->rtime = 0;
 801f448:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f44a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f44e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801f450:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801f452:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801f454:	4b03      	ldr	r3, [pc, #12]	; (801f464 <tcp_rexmit_fast+0x68>)
 801f456:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f45a:	4903      	ldr	r1, [pc, #12]	; (801f468 <tcp_rexmit_fast+0x6c>)
 801f45c:	4803      	ldr	r0, [pc, #12]	; (801f46c <tcp_rexmit_fast+0x70>)
 801f45e:	f005 ff99 	bl	8025394 <iprintf>
 801f462:	e7ce      	b.n	801f402 <tcp_rexmit_fast+0x6>
 801f464:	08044808 	.word	0x08044808
 801f468:	08044d94 	.word	0x08044d94
 801f46c:	08029fe8 	.word	0x08029fe8

0801f470 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f474:	b084      	sub	sp, #16
 801f476:	4607      	mov	r7, r0
 801f478:	460e      	mov	r6, r1
 801f47a:	4615      	mov	r5, r2
 801f47c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f480:	461c      	mov	r4, r3
{
 801f482:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801f486:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f48a:	b1fb      	cbz	r3, 801f4cc <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f48c:	f1b8 0f00 	cmp.w	r8, #0
 801f490:	d026      	beq.n	801f4e0 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f492:	4630      	mov	r0, r6
 801f494:	f7f9 fe7c 	bl	8019190 <lwip_htonl>
 801f498:	2114      	movs	r1, #20
 801f49a:	4602      	mov	r2, r0
 801f49c:	4628      	mov	r0, r5
 801f49e:	f246 0508 	movw	r5, #24584	; 0x6008
 801f4a2:	464b      	mov	r3, r9
 801f4a4:	f8cd a000 	str.w	sl, [sp]
 801f4a8:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801f4ac:	2100      	movs	r1, #0
 801f4ae:	f7ff f971 	bl	801e794 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f4b2:	4601      	mov	r1, r0
 801f4b4:	b138      	cbz	r0, 801f4c6 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f4b6:	4643      	mov	r3, r8
 801f4b8:	4622      	mov	r2, r4
 801f4ba:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f4bc:	b004      	add	sp, #16
 801f4be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f4c2:	f7ff b9d5 	b.w	801e870 <tcp_output_control_segment>
}
 801f4c6:	b004      	add	sp, #16
 801f4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f4cc:	4b08      	ldr	r3, [pc, #32]	; (801f4f0 <tcp_rst+0x80>)
 801f4ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f4d2:	4908      	ldr	r1, [pc, #32]	; (801f4f4 <tcp_rst+0x84>)
 801f4d4:	4808      	ldr	r0, [pc, #32]	; (801f4f8 <tcp_rst+0x88>)
 801f4d6:	f005 ff5d 	bl	8025394 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f4da:	f1b8 0f00 	cmp.w	r8, #0
 801f4de:	d1d8      	bne.n	801f492 <tcp_rst+0x22>
 801f4e0:	4b03      	ldr	r3, [pc, #12]	; (801f4f0 <tcp_rst+0x80>)
 801f4e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f4e6:	4905      	ldr	r1, [pc, #20]	; (801f4fc <tcp_rst+0x8c>)
 801f4e8:	4803      	ldr	r0, [pc, #12]	; (801f4f8 <tcp_rst+0x88>)
 801f4ea:	f005 ff53 	bl	8025394 <iprintf>
 801f4ee:	e7d0      	b.n	801f492 <tcp_rst+0x22>
 801f4f0:	08044808 	.word	0x08044808
 801f4f4:	08044db4 	.word	0x08044db4
 801f4f8:	08029fe8 	.word	0x08029fe8
 801f4fc:	08044dd0 	.word	0x08044dd0

0801f500 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f500:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f502:	4604      	mov	r4, r0
 801f504:	b1c0      	cbz	r0, 801f538 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f506:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f508:	f7f9 fe42 	bl	8019190 <lwip_htonl>
 801f50c:	2100      	movs	r1, #0
 801f50e:	4602      	mov	r2, r0
 801f510:	4620      	mov	r0, r4
 801f512:	f7ff f985 	bl	801e820 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f516:	4601      	mov	r1, r0
 801f518:	b1b0      	cbz	r0, 801f548 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f51a:	1d23      	adds	r3, r4, #4
 801f51c:	4622      	mov	r2, r4
 801f51e:	4620      	mov	r0, r4
 801f520:	f7ff f9a6 	bl	801e870 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f524:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801f526:	b118      	cbz	r0, 801f530 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f528:	f043 0303 	orr.w	r3, r3, #3
 801f52c:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801f52e:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f530:	f023 0303 	bic.w	r3, r3, #3
 801f534:	8363      	strh	r3, [r4, #26]
}
 801f536:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f538:	4b07      	ldr	r3, [pc, #28]	; (801f558 <tcp_send_empty_ack+0x58>)
 801f53a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f53e:	4907      	ldr	r1, [pc, #28]	; (801f55c <tcp_send_empty_ack+0x5c>)
 801f540:	4807      	ldr	r0, [pc, #28]	; (801f560 <tcp_send_empty_ack+0x60>)
 801f542:	f005 ff27 	bl	8025394 <iprintf>
 801f546:	e7de      	b.n	801f506 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f548:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801f54a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f54e:	f043 0303 	orr.w	r3, r3, #3
 801f552:	8363      	strh	r3, [r4, #26]
}
 801f554:	bd10      	pop	{r4, pc}
 801f556:	bf00      	nop
 801f558:	08044808 	.word	0x08044808
 801f55c:	08044dec 	.word	0x08044dec
 801f560:	08029fe8 	.word	0x08029fe8

0801f564 <tcp_output>:
{
 801f564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f568:	4604      	mov	r4, r0
{
 801f56a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f56c:	2800      	cmp	r0, #0
 801f56e:	f000 81bc 	beq.w	801f8ea <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f572:	7d23      	ldrb	r3, [r4, #20]
 801f574:	2b01      	cmp	r3, #1
 801f576:	f000 8173 	beq.w	801f860 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801f57a:	4bb3      	ldr	r3, [pc, #716]	; (801f848 <tcp_output+0x2e4>)
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	42a3      	cmp	r3, r4
 801f580:	f000 817a 	beq.w	801f878 <tcp_output+0x314>
  seg = pcb->unsent;
 801f584:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f586:	b345      	cbz	r5, 801f5da <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f588:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801f58a:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f58e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801f592:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f596:	2800      	cmp	r0, #0
 801f598:	f040 81af 	bne.w	801f8fa <tcp_output+0x396>
    return ip_route(src, dst);
 801f59c:	4648      	mov	r0, r9
 801f59e:	f003 fa2b 	bl	80229f8 <ip4_route>
 801f5a2:	4682      	mov	sl, r0
  if (netif == NULL) {
 801f5a4:	f1ba 0f00 	cmp.w	sl, #0
 801f5a8:	f000 81b9 	beq.w	801f91e <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801f5ac:	6823      	ldr	r3, [r4, #0]
 801f5ae:	b913      	cbnz	r3, 801f5b6 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801f5b0:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f5b4:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5b6:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f5b8:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5ba:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f5bc:	bf28      	it	cs
 801f5be:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f5c0:	f7f9 fde6 	bl	8019190 <lwip_htonl>
 801f5c4:	892b      	ldrh	r3, [r5, #8]
 801f5c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801f5c8:	1a9b      	subs	r3, r3, r2
 801f5ca:	4418      	add	r0, r3
 801f5cc:	42b8      	cmp	r0, r7
 801f5ce:	d90f      	bls.n	801f5f0 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f5d0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801f5d4:	42bb      	cmp	r3, r7
 801f5d6:	f000 8159 	beq.w	801f88c <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801f5da:	8b62      	ldrh	r2, [r4, #26]
 801f5dc:	0791      	lsls	r1, r2, #30
 801f5de:	f100 814f 	bmi.w	801f880 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f5e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801f5e6:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f5e8:	8362      	strh	r2, [r4, #26]
}
 801f5ea:	b005      	add	sp, #20
 801f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801f5f0:	2300      	movs	r3, #0
 801f5f2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801f5f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	f000 8157 	beq.w	801f8ac <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801f5fe:	4698      	mov	r8, r3
 801f600:	681b      	ldr	r3, [r3, #0]
 801f602:	2b00      	cmp	r3, #0
 801f604:	d1fb      	bne.n	801f5fe <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801f606:	464e      	mov	r6, r9
 801f608:	e0b7      	b.n	801f77a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f60a:	68eb      	ldr	r3, [r5, #12]
 801f60c:	2010      	movs	r0, #16
 801f60e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801f612:	f7f9 fdb9 	bl	8019188 <lwip_htons>
 801f616:	ea49 0000 	orr.w	r0, r9, r0
 801f61a:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f61e:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801f622:	686b      	ldr	r3, [r5, #4]
 801f624:	7b9b      	ldrb	r3, [r3, #14]
 801f626:	2b01      	cmp	r3, #1
 801f628:	d160      	bne.n	801f6ec <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f62a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f62c:	f7f9 fdb0 	bl	8019190 <lwip_htonl>
 801f630:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f634:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801f636:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f63a:	f7f9 fda5 	bl	8019188 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f63e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801f640:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f642:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f646:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f648:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f64c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f64e:	7aab      	ldrb	r3, [r5, #10]
 801f650:	07db      	lsls	r3, r3, #31
 801f652:	f100 80d0 	bmi.w	801f7f6 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f656:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801f65a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801f65e:	2b00      	cmp	r3, #0
 801f660:	da01      	bge.n	801f666 <tcp_output+0x102>
    pcb->rtime = 0;
 801f662:	2300      	movs	r3, #0
 801f664:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801f666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f668:	2b00      	cmp	r3, #0
 801f66a:	f000 80b9 	beq.w	801f7e0 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f66e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801f670:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f674:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801f676:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f678:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801f67c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801f67e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f682:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801f684:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801f686:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801f688:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801f68a:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801f68c:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801f68e:	f889 c010 	strb.w	ip, [r9, #16]
 801f692:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f696:	7aab      	ldrb	r3, [r5, #10]
 801f698:	009b      	lsls	r3, r3, #2
 801f69a:	f003 0304 	and.w	r3, r3, #4
 801f69e:	3314      	adds	r3, #20
 801f6a0:	444b      	add	r3, r9
 801f6a2:	459b      	cmp	fp, r3
 801f6a4:	d00a      	beq.n	801f6bc <tcp_output+0x158>
 801f6a6:	f240 621c 	movw	r2, #1564	; 0x61c
 801f6aa:	4b68      	ldr	r3, [pc, #416]	; (801f84c <tcp_output+0x2e8>)
 801f6ac:	4968      	ldr	r1, [pc, #416]	; (801f850 <tcp_output+0x2ec>)
 801f6ae:	4869      	ldr	r0, [pc, #420]	; (801f854 <tcp_output+0x2f0>)
 801f6b0:	f005 fe70 	bl	8025394 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801f6b4:	6868      	ldr	r0, [r5, #4]
 801f6b6:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f6ba:	8902      	ldrh	r2, [r0, #8]
 801f6bc:	4623      	mov	r3, r4
 801f6be:	2106      	movs	r1, #6
 801f6c0:	9600      	str	r6, [sp, #0]
 801f6c2:	f7fa faf5 	bl	8019cb0 <ip_chksum_pseudo>
 801f6c6:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f6ca:	6868      	ldr	r0, [r5, #4]
 801f6cc:	4632      	mov	r2, r6
 801f6ce:	f8cd a008 	str.w	sl, [sp, #8]
 801f6d2:	4621      	mov	r1, r4
 801f6d4:	7aa3      	ldrb	r3, [r4, #10]
 801f6d6:	9300      	str	r3, [sp, #0]
 801f6d8:	2306      	movs	r3, #6
 801f6da:	9301      	str	r3, [sp, #4]
 801f6dc:	7ae3      	ldrb	r3, [r4, #11]
 801f6de:	f003 fb55 	bl	8022d8c <ip4_output_if>
    if (err != ERR_OK) {
 801f6e2:	2800      	cmp	r0, #0
 801f6e4:	f040 8116 	bne.w	801f914 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f6e8:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801f6ec:	682b      	ldr	r3, [r5, #0]
 801f6ee:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f6f0:	7d23      	ldrb	r3, [r4, #20]
 801f6f2:	2b02      	cmp	r3, #2
 801f6f4:	d003      	beq.n	801f6fe <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f6f6:	8b63      	ldrh	r3, [r4, #26]
 801f6f8:	f023 0303 	bic.w	r3, r3, #3
 801f6fc:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f6fe:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f702:	f7f9 fd45 	bl	8019190 <lwip_htonl>
 801f706:	68eb      	ldr	r3, [r5, #12]
 801f708:	4681      	mov	r9, r0
 801f70a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801f70e:	8998      	ldrh	r0, [r3, #12]
 801f710:	f7f9 fd3a 	bl	8019188 <lwip_htons>
 801f714:	f010 0003 	ands.w	r0, r0, #3
 801f718:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f71a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f71c:	bf18      	it	ne
 801f71e:	2001      	movne	r0, #1
 801f720:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801f722:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f726:	1a1b      	subs	r3, r3, r0
 801f728:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801f72a:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801f72c:	bfb8      	it	lt
 801f72e:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801f730:	8998      	ldrh	r0, [r3, #12]
 801f732:	f7f9 fd29 	bl	8019188 <lwip_htons>
 801f736:	f010 0003 	ands.w	r0, r0, #3
 801f73a:	bf18      	it	ne
 801f73c:	2001      	movne	r0, #1
 801f73e:	eb10 0f09 	cmn.w	r0, r9
 801f742:	d046      	beq.n	801f7d2 <tcp_output+0x26e>
      seg->next = NULL;
 801f744:	2300      	movs	r3, #0
 801f746:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801f748:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f74a:	2b00      	cmp	r3, #0
 801f74c:	d045      	beq.n	801f7da <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f74e:	68eb      	ldr	r3, [r5, #12]
 801f750:	6858      	ldr	r0, [r3, #4]
 801f752:	f7f9 fd1d 	bl	8019190 <lwip_htonl>
 801f756:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f75a:	4681      	mov	r9, r0
 801f75c:	6858      	ldr	r0, [r3, #4]
 801f75e:	f7f9 fd17 	bl	8019190 <lwip_htonl>
 801f762:	eba9 0000 	sub.w	r0, r9, r0
 801f766:	2800      	cmp	r0, #0
 801f768:	f2c0 80a2 	blt.w	801f8b0 <tcp_output+0x34c>
          useg->next = seg;
 801f76c:	f8c8 5000 	str.w	r5, [r8]
 801f770:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801f772:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801f774:	2d00      	cmp	r5, #0
 801f776:	f000 80c4 	beq.w	801f902 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f77a:	68eb      	ldr	r3, [r5, #12]
 801f77c:	6858      	ldr	r0, [r3, #4]
 801f77e:	f7f9 fd07 	bl	8019190 <lwip_htonl>
 801f782:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801f784:	1ac0      	subs	r0, r0, r3
 801f786:	892b      	ldrh	r3, [r5, #8]
 801f788:	4418      	add	r0, r3
  while (seg != NULL &&
 801f78a:	42b8      	cmp	r0, r7
 801f78c:	f200 80bb 	bhi.w	801f906 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801f790:	68eb      	ldr	r3, [r5, #12]
 801f792:	8998      	ldrh	r0, [r3, #12]
 801f794:	f7f9 fcf8 	bl	8019188 <lwip_htons>
 801f798:	0742      	lsls	r2, r0, #29
 801f79a:	d412      	bmi.n	801f7c2 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f79c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f79e:	b14b      	cbz	r3, 801f7b4 <tcp_output+0x250>
 801f7a0:	8b63      	ldrh	r3, [r4, #26]
 801f7a2:	f013 0f44 	tst.w	r3, #68	; 0x44
 801f7a6:	461a      	mov	r2, r3
 801f7a8:	d104      	bne.n	801f7b4 <tcp_output+0x250>
 801f7aa:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f7ac:	2900      	cmp	r1, #0
 801f7ae:	d038      	beq.n	801f822 <tcp_output+0x2be>
 801f7b0:	6808      	ldr	r0, [r1, #0]
 801f7b2:	b388      	cbz	r0, 801f818 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801f7b4:	7d23      	ldrb	r3, [r4, #20]
 801f7b6:	2b02      	cmp	r3, #2
 801f7b8:	f47f af27 	bne.w	801f60a <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f7bc:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f7c0:	e72f      	b.n	801f622 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801f7c2:	4b22      	ldr	r3, [pc, #136]	; (801f84c <tcp_output+0x2e8>)
 801f7c4:	f240 5236 	movw	r2, #1334	; 0x536
 801f7c8:	4923      	ldr	r1, [pc, #140]	; (801f858 <tcp_output+0x2f4>)
 801f7ca:	4822      	ldr	r0, [pc, #136]	; (801f854 <tcp_output+0x2f0>)
 801f7cc:	f005 fde2 	bl	8025394 <iprintf>
 801f7d0:	e7e4      	b.n	801f79c <tcp_output+0x238>
      tcp_seg_free(seg);
 801f7d2:	4628      	mov	r0, r5
 801f7d4:	f7fc fa90 	bl	801bcf8 <tcp_seg_free>
 801f7d8:	e7cb      	b.n	801f772 <tcp_output+0x20e>
        pcb->unacked = seg;
 801f7da:	46a8      	mov	r8, r5
 801f7dc:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801f7de:	e7c8      	b.n	801f772 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801f7e0:	4b1e      	ldr	r3, [pc, #120]	; (801f85c <tcp_output+0x2f8>)
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f7e6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f7ea:	f7f9 fcd1 	bl	8019190 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f7ee:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f7f2:	63a0      	str	r0, [r4, #56]	; 0x38
 801f7f4:	e73b      	b.n	801f66e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f7f6:	4632      	mov	r2, r6
 801f7f8:	4651      	mov	r1, sl
 801f7fa:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801f7fe:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f802:	f7fd fa75 	bl	801ccf0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f806:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801f80a:	f7f9 fcc1 	bl	8019190 <lwip_htonl>
 801f80e:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f812:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f816:	e720      	b.n	801f65a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f818:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f81c:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801f81e:	4584      	cmp	ip, r0
 801f820:	d2c8      	bcs.n	801f7b4 <tcp_output+0x250>
 801f822:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801f826:	2800      	cmp	r0, #0
 801f828:	d0c4      	beq.n	801f7b4 <tcp_output+0x250>
 801f82a:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801f82e:	2808      	cmp	r0, #8
 801f830:	d8c0      	bhi.n	801f7b4 <tcp_output+0x250>
 801f832:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801f836:	d1bd      	bne.n	801f7b4 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801f838:	2900      	cmp	r1, #0
 801f83a:	f47f aed2 	bne.w	801f5e2 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801f83e:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f840:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801f842:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801f846:	e6cc      	b.n	801f5e2 <tcp_output+0x7e>
 801f848:	2002e100 	.word	0x2002e100
 801f84c:	08044808 	.word	0x08044808
 801f850:	08044e64 	.word	0x08044e64
 801f854:	08029fe8 	.word	0x08029fe8
 801f858:	08044e4c 	.word	0x08044e4c
 801f85c:	2002e0cc 	.word	0x2002e0cc
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f860:	4b30      	ldr	r3, [pc, #192]	; (801f924 <tcp_output+0x3c0>)
 801f862:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f866:	4930      	ldr	r1, [pc, #192]	; (801f928 <tcp_output+0x3c4>)
 801f868:	4830      	ldr	r0, [pc, #192]	; (801f92c <tcp_output+0x3c8>)
 801f86a:	f005 fd93 	bl	8025394 <iprintf>
  if (tcp_input_pcb == pcb) {
 801f86e:	4b30      	ldr	r3, [pc, #192]	; (801f930 <tcp_output+0x3cc>)
 801f870:	681b      	ldr	r3, [r3, #0]
 801f872:	42a3      	cmp	r3, r4
 801f874:	f47f ae86 	bne.w	801f584 <tcp_output+0x20>
    return ERR_OK;
 801f878:	2000      	movs	r0, #0
}
 801f87a:	b005      	add	sp, #20
 801f87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801f880:	4620      	mov	r0, r4
}
 801f882:	b005      	add	sp, #20
 801f884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801f888:	f7ff be3a 	b.w	801f500 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f88c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f88e:	2b00      	cmp	r3, #0
 801f890:	f47f aea3 	bne.w	801f5da <tcp_output+0x76>
 801f894:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801f898:	2b00      	cmp	r3, #0
 801f89a:	f47f ae9e 	bne.w	801f5da <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801f89e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801f8a2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801f8a6:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801f8aa:	e696      	b.n	801f5da <tcp_output+0x76>
 801f8ac:	4698      	mov	r8, r3
 801f8ae:	e6aa      	b.n	801f606 <tcp_output+0xa2>
          while (*cur_seg &&
 801f8b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f8b2:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801f8b6:	b92b      	cbnz	r3, 801f8c4 <tcp_output+0x360>
 801f8b8:	e013      	b.n	801f8e2 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801f8ba:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801f8be:	f8db 3000 	ldr.w	r3, [fp]
 801f8c2:	b173      	cbz	r3, 801f8e2 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f8c4:	68db      	ldr	r3, [r3, #12]
 801f8c6:	6858      	ldr	r0, [r3, #4]
 801f8c8:	f7f9 fc62 	bl	8019190 <lwip_htonl>
 801f8cc:	68eb      	ldr	r3, [r5, #12]
 801f8ce:	4681      	mov	r9, r0
 801f8d0:	6858      	ldr	r0, [r3, #4]
 801f8d2:	f7f9 fc5d 	bl	8019190 <lwip_htonl>
 801f8d6:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801f8da:	2800      	cmp	r0, #0
 801f8dc:	dbed      	blt.n	801f8ba <tcp_output+0x356>
          seg->next = (*cur_seg);
 801f8de:	f8db 3000 	ldr.w	r3, [fp]
 801f8e2:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801f8e4:	f8cb 5000 	str.w	r5, [fp]
 801f8e8:	e743      	b.n	801f772 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f8ea:	4b0e      	ldr	r3, [pc, #56]	; (801f924 <tcp_output+0x3c0>)
 801f8ec:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f8f0:	4910      	ldr	r1, [pc, #64]	; (801f934 <tcp_output+0x3d0>)
 801f8f2:	480e      	ldr	r0, [pc, #56]	; (801f92c <tcp_output+0x3c8>)
 801f8f4:	f005 fd4e 	bl	8025394 <iprintf>
 801f8f8:	e63b      	b.n	801f572 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801f8fa:	f7fb f95b 	bl	801abb4 <netif_get_by_index>
 801f8fe:	4682      	mov	sl, r0
 801f900:	e650      	b.n	801f5a4 <tcp_output+0x40>
 801f902:	8b63      	ldrh	r3, [r4, #26]
 801f904:	e79b      	b.n	801f83e <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f906:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801f908:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f90a:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801f90c:	2900      	cmp	r1, #0
 801f90e:	f47f ae68 	bne.w	801f5e2 <tcp_output+0x7e>
 801f912:	e794      	b.n	801f83e <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f914:	8b63      	ldrh	r3, [r4, #26]
 801f916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f91a:	8363      	strh	r3, [r4, #26]
      return err;
 801f91c:	e665      	b.n	801f5ea <tcp_output+0x86>
    return ERR_RTE;
 801f91e:	f06f 0003 	mvn.w	r0, #3
 801f922:	e662      	b.n	801f5ea <tcp_output+0x86>
 801f924:	08044808 	.word	0x08044808
 801f928:	08044e24 	.word	0x08044e24
 801f92c:	08029fe8 	.word	0x08029fe8
 801f930:	2002e100 	.word	0x2002e100
 801f934:	08044e0c 	.word	0x08044e0c

0801f938 <tcp_rexmit_rto_commit>:
{
 801f938:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f93a:	4604      	mov	r4, r0
 801f93c:	b158      	cbz	r0, 801f956 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801f93e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f942:	2bff      	cmp	r3, #255	; 0xff
 801f944:	d002      	beq.n	801f94c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801f946:	3301      	adds	r3, #1
 801f948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f94c:	4620      	mov	r0, r4
}
 801f94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f952:	f7ff be07 	b.w	801f564 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f956:	4b04      	ldr	r3, [pc, #16]	; (801f968 <tcp_rexmit_rto_commit+0x30>)
 801f958:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f95c:	4903      	ldr	r1, [pc, #12]	; (801f96c <tcp_rexmit_rto_commit+0x34>)
 801f95e:	4804      	ldr	r0, [pc, #16]	; (801f970 <tcp_rexmit_rto_commit+0x38>)
 801f960:	f005 fd18 	bl	8025394 <iprintf>
 801f964:	e7eb      	b.n	801f93e <tcp_rexmit_rto_commit+0x6>
 801f966:	bf00      	nop
 801f968:	08044808 	.word	0x08044808
 801f96c:	08044e78 	.word	0x08044e78
 801f970:	08029fe8 	.word	0x08029fe8

0801f974 <tcp_rexmit_rto>:
{
 801f974:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f976:	4604      	mov	r4, r0
 801f978:	b118      	cbz	r0, 801f982 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f97a:	f7ff fcb5 	bl	801f2e8 <tcp_rexmit_rto_prepare>
 801f97e:	b198      	cbz	r0, 801f9a8 <tcp_rexmit_rto+0x34>
}
 801f980:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f982:	4b0f      	ldr	r3, [pc, #60]	; (801f9c0 <tcp_rexmit_rto+0x4c>)
 801f984:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f988:	490e      	ldr	r1, [pc, #56]	; (801f9c4 <tcp_rexmit_rto+0x50>)
 801f98a:	480f      	ldr	r0, [pc, #60]	; (801f9c8 <tcp_rexmit_rto+0x54>)
 801f98c:	f005 fd02 	bl	8025394 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f990:	4620      	mov	r0, r4
 801f992:	f7ff fca9 	bl	801f2e8 <tcp_rexmit_rto_prepare>
 801f996:	2800      	cmp	r0, #0
 801f998:	d1f2      	bne.n	801f980 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f99a:	4b09      	ldr	r3, [pc, #36]	; (801f9c0 <tcp_rexmit_rto+0x4c>)
 801f99c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f9a0:	490a      	ldr	r1, [pc, #40]	; (801f9cc <tcp_rexmit_rto+0x58>)
 801f9a2:	4809      	ldr	r0, [pc, #36]	; (801f9c8 <tcp_rexmit_rto+0x54>)
 801f9a4:	f005 fcf6 	bl	8025394 <iprintf>
  if (pcb->nrtx < 0xFF) {
 801f9a8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f9ac:	2bff      	cmp	r3, #255	; 0xff
 801f9ae:	d002      	beq.n	801f9b6 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801f9b0:	3301      	adds	r3, #1
 801f9b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f9b6:	4620      	mov	r0, r4
}
 801f9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f9bc:	f7ff bdd2 	b.w	801f564 <tcp_output>
 801f9c0:	08044808 	.word	0x08044808
 801f9c4:	08044e9c 	.word	0x08044e9c
 801f9c8:	08029fe8 	.word	0x08029fe8
 801f9cc:	08044e78 	.word	0x08044e78

0801f9d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f9d0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f9d2:	4604      	mov	r4, r0
 801f9d4:	b188      	cbz	r0, 801f9fa <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f9d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f9d8:	3801      	subs	r0, #1
 801f9da:	f7f9 fbd9 	bl	8019190 <lwip_htonl>
 801f9de:	2100      	movs	r1, #0
 801f9e0:	4602      	mov	r2, r0
 801f9e2:	4620      	mov	r0, r4
 801f9e4:	f7fe ff1c 	bl	801e820 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f9e8:	4601      	mov	r1, r0
 801f9ea:	b170      	cbz	r0, 801fa0a <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f9ec:	1d23      	adds	r3, r4, #4
 801f9ee:	4622      	mov	r2, r4
 801f9f0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f9f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f9f6:	f7fe bf3b 	b.w	801e870 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f9fa:	4b05      	ldr	r3, [pc, #20]	; (801fa10 <tcp_keepalive+0x40>)
 801f9fc:	f640 0224 	movw	r2, #2084	; 0x824
 801fa00:	4904      	ldr	r1, [pc, #16]	; (801fa14 <tcp_keepalive+0x44>)
 801fa02:	4805      	ldr	r0, [pc, #20]	; (801fa18 <tcp_keepalive+0x48>)
 801fa04:	f005 fcc6 	bl	8025394 <iprintf>
 801fa08:	e7e5      	b.n	801f9d6 <tcp_keepalive+0x6>
}
 801fa0a:	f04f 30ff 	mov.w	r0, #4294967295
 801fa0e:	bd10      	pop	{r4, pc}
 801fa10:	08044808 	.word	0x08044808
 801fa14:	08044eb8 	.word	0x08044eb8
 801fa18:	08029fe8 	.word	0x08029fe8

0801fa1c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801fa20:	4604      	mov	r4, r0
 801fa22:	2800      	cmp	r0, #0
 801fa24:	d051      	beq.n	801faca <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801fa26:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801fa28:	2d00      	cmp	r5, #0
 801fa2a:	d04b      	beq.n	801fac4 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801fa2c:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801fa30:	2bff      	cmp	r3, #255	; 0xff
 801fa32:	d002      	beq.n	801fa3a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801fa34:	3301      	adds	r3, #1
 801fa36:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801fa3a:	68eb      	ldr	r3, [r5, #12]
 801fa3c:	8998      	ldrh	r0, [r3, #12]
 801fa3e:	f7f9 fba3 	bl	8019188 <lwip_htons>
 801fa42:	07c3      	lsls	r3, r0, #31
 801fa44:	d527      	bpl.n	801fa96 <tcp_zero_window_probe+0x7a>
 801fa46:	8929      	ldrh	r1, [r5, #8]
 801fa48:	bb29      	cbnz	r1, 801fa96 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fa4a:	68eb      	ldr	r3, [r5, #12]
 801fa4c:	4620      	mov	r0, r4
 801fa4e:	685a      	ldr	r2, [r3, #4]
 801fa50:	f7fe fee6 	bl	801e820 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801fa54:	4606      	mov	r6, r0
 801fa56:	b388      	cbz	r0, 801fabc <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801fa58:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801fa5c:	2011      	movs	r0, #17
 801fa5e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801fa62:	f7f9 fb91 	bl	8019188 <lwip_htons>
 801fa66:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801fa6a:	4338      	orrs	r0, r7
 801fa6c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fa70:	68eb      	ldr	r3, [r5, #12]
 801fa72:	6858      	ldr	r0, [r3, #4]
 801fa74:	f7f9 fb8c 	bl	8019190 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fa78:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801fa7a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa7c:	4622      	mov	r2, r4
 801fa7e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801fa80:	1a1b      	subs	r3, r3, r0
 801fa82:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa84:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801fa88:	bfb8      	it	lt
 801fa8a:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa8c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801fa8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801fa92:	f7fe beed 	b.w	801e870 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801fa96:	68eb      	ldr	r3, [r5, #12]
 801fa98:	2101      	movs	r1, #1
 801fa9a:	4620      	mov	r0, r4
 801fa9c:	685a      	ldr	r2, [r3, #4]
 801fa9e:	f7fe febf 	bl	801e820 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801faa2:	4606      	mov	r6, r0
 801faa4:	b150      	cbz	r0, 801fabc <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801faa6:	6868      	ldr	r0, [r5, #4]
 801faa8:	892a      	ldrh	r2, [r5, #8]
 801faaa:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801faac:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801faae:	1a9b      	subs	r3, r3, r2
 801fab0:	2201      	movs	r2, #1
 801fab2:	3114      	adds	r1, #20
 801fab4:	b29b      	uxth	r3, r3
 801fab6:	f7fb fc47 	bl	801b348 <pbuf_copy_partial>
 801faba:	e7d9      	b.n	801fa70 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801fabc:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801fac4:	4628      	mov	r0, r5
}
 801fac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801faca:	4b04      	ldr	r3, [pc, #16]	; (801fadc <tcp_zero_window_probe+0xc0>)
 801facc:	f640 024f 	movw	r2, #2127	; 0x84f
 801fad0:	4903      	ldr	r1, [pc, #12]	; (801fae0 <tcp_zero_window_probe+0xc4>)
 801fad2:	4804      	ldr	r0, [pc, #16]	; (801fae4 <tcp_zero_window_probe+0xc8>)
 801fad4:	f005 fc5e 	bl	8025394 <iprintf>
 801fad8:	e7a5      	b.n	801fa26 <tcp_zero_window_probe+0xa>
 801fada:	bf00      	nop
 801fadc:	08044808 	.word	0x08044808
 801fae0:	08044ed4 	.word	0x08044ed4
 801fae4:	08029fe8 	.word	0x08029fe8

0801fae8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801fae8:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801faea:	22bc      	movs	r2, #188	; 0xbc
{
 801faec:	b570      	push	{r4, r5, r6, lr}
 801faee:	460e      	mov	r6, r1
 801faf0:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801faf2:	4910      	ldr	r1, [pc, #64]	; (801fb34 <sys_timeout_abs+0x4c>)
 801faf4:	200c      	movs	r0, #12
{
 801faf6:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801faf8:	f7fa fe34 	bl	801a764 <memp_malloc_fn>
  if (timeout == NULL) {
 801fafc:	b190      	cbz	r0, 801fb24 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801fafe:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801fb00:	490d      	ldr	r1, [pc, #52]	; (801fb38 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801fb02:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801fb04:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801fb06:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801fb0a:	680b      	ldr	r3, [r1, #0]
 801fb0c:	b91b      	cbnz	r3, 801fb16 <sys_timeout_abs+0x2e>
 801fb0e:	e007      	b.n	801fb20 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801fb10:	4619      	mov	r1, r3
 801fb12:	681b      	ldr	r3, [r3, #0]
 801fb14:	b11b      	cbz	r3, 801fb1e <sys_timeout_abs+0x36>
 801fb16:	685a      	ldr	r2, [r3, #4]
 801fb18:	1aa2      	subs	r2, r4, r2
 801fb1a:	2a00      	cmp	r2, #0
 801fb1c:	daf8      	bge.n	801fb10 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801fb1e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801fb20:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801fb22:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fb24:	4b03      	ldr	r3, [pc, #12]	; (801fb34 <sys_timeout_abs+0x4c>)
 801fb26:	22be      	movs	r2, #190	; 0xbe
 801fb28:	4904      	ldr	r1, [pc, #16]	; (801fb3c <sys_timeout_abs+0x54>)
 801fb2a:	4805      	ldr	r0, [pc, #20]	; (801fb40 <sys_timeout_abs+0x58>)
}
 801fb2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801fb30:	f005 bc30 	b.w	8025394 <iprintf>
 801fb34:	08044ef8 	.word	0x08044ef8
 801fb38:	2002e11c 	.word	0x2002e11c
 801fb3c:	08044f2c 	.word	0x08044f2c
 801fb40:	08029fe8 	.word	0x08029fe8

0801fb44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801fb44:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801fb46:	6843      	ldr	r3, [r0, #4]
{
 801fb48:	4604      	mov	r4, r0
  cyclic->handler();
 801fb4a:	4798      	blx	r3

  now = sys_now();
 801fb4c:	f7f4 fd70 	bl	8014630 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fb50:	4b09      	ldr	r3, [pc, #36]	; (801fb78 <lwip_cyclic_timer+0x34>)
 801fb52:	6825      	ldr	r5, [r4, #0]
 801fb54:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb56:	4909      	ldr	r1, [pc, #36]	; (801fb7c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801fb58:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fb5a:	1a1a      	subs	r2, r3, r0
 801fb5c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb5e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801fb60:	da04      	bge.n	801fb6c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb62:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801fb64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801fb68:	f7ff bfbe 	b.w	801fae8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801fb6c:	4618      	mov	r0, r3
}
 801fb6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801fb72:	f7ff bfb9 	b.w	801fae8 <sys_timeout_abs>
 801fb76:	bf00      	nop
 801fb78:	2002e118 	.word	0x2002e118
 801fb7c:	0801fb45 	.word	0x0801fb45

0801fb80 <tcpip_tcp_timer>:
{
 801fb80:	b508      	push	{r3, lr}
  tcp_tmr();
 801fb82:	f7fd f887 	bl	801cc94 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fb86:	4b09      	ldr	r3, [pc, #36]	; (801fbac <tcpip_tcp_timer+0x2c>)
 801fb88:	681b      	ldr	r3, [r3, #0]
 801fb8a:	b143      	cbz	r3, 801fb9e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fb8c:	f7f4 fd50 	bl	8014630 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fb90:	2200      	movs	r2, #0
 801fb92:	4907      	ldr	r1, [pc, #28]	; (801fbb0 <tcpip_tcp_timer+0x30>)
 801fb94:	30fa      	adds	r0, #250	; 0xfa
}
 801fb96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fb9a:	f7ff bfa5 	b.w	801fae8 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801fb9e:	4b05      	ldr	r3, [pc, #20]	; (801fbb4 <tcpip_tcp_timer+0x34>)
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d1f2      	bne.n	801fb8c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801fba6:	4a04      	ldr	r2, [pc, #16]	; (801fbb8 <tcpip_tcp_timer+0x38>)
 801fba8:	6013      	str	r3, [r2, #0]
}
 801fbaa:	bd08      	pop	{r3, pc}
 801fbac:	2002e0bc 	.word	0x2002e0bc
 801fbb0:	0801fb81 	.word	0x0801fb81
 801fbb4:	2002e0d4 	.word	0x2002e0d4
 801fbb8:	2002e120 	.word	0x2002e120

0801fbbc <tcp_timer_needed>:
{
 801fbbc:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fbbe:	4b0b      	ldr	r3, [pc, #44]	; (801fbec <tcp_timer_needed+0x30>)
 801fbc0:	681a      	ldr	r2, [r3, #0]
 801fbc2:	b98a      	cbnz	r2, 801fbe8 <tcp_timer_needed+0x2c>
 801fbc4:	4a0a      	ldr	r2, [pc, #40]	; (801fbf0 <tcp_timer_needed+0x34>)
 801fbc6:	6812      	ldr	r2, [r2, #0]
 801fbc8:	b152      	cbz	r2, 801fbe0 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801fbca:	2201      	movs	r2, #1
 801fbcc:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fbce:	f7f4 fd2f 	bl	8014630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbd2:	2200      	movs	r2, #0
 801fbd4:	4907      	ldr	r1, [pc, #28]	; (801fbf4 <tcp_timer_needed+0x38>)
 801fbd6:	30fa      	adds	r0, #250	; 0xfa
}
 801fbd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fbdc:	f7ff bf84 	b.w	801fae8 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801fbe0:	4a05      	ldr	r2, [pc, #20]	; (801fbf8 <tcp_timer_needed+0x3c>)
 801fbe2:	6812      	ldr	r2, [r2, #0]
 801fbe4:	2a00      	cmp	r2, #0
 801fbe6:	d1f0      	bne.n	801fbca <tcp_timer_needed+0xe>
}
 801fbe8:	bd08      	pop	{r3, pc}
 801fbea:	bf00      	nop
 801fbec:	2002e120 	.word	0x2002e120
 801fbf0:	2002e0bc 	.word	0x2002e0bc
 801fbf4:	0801fb81 	.word	0x0801fb81
 801fbf8:	2002e0d4 	.word	0x2002e0d4

0801fbfc <sys_timeouts_init>:
{
 801fbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fc00:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801fc04:	4c11      	ldr	r4, [pc, #68]	; (801fc4c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc06:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801fc58 <sys_timeouts_init+0x5c>
 801fc0a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801fc0e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801fc5c <sys_timeouts_init+0x60>
 801fc12:	f104 0620 	add.w	r6, r4, #32
 801fc16:	4f0e      	ldr	r7, [pc, #56]	; (801fc50 <sys_timeouts_init+0x54>)
 801fc18:	d20d      	bcs.n	801fc36 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fc1a:	f7f4 fd09 	bl	8014630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc1e:	4622      	mov	r2, r4
 801fc20:	490c      	ldr	r1, [pc, #48]	; (801fc54 <sys_timeouts_init+0x58>)
 801fc22:	4428      	add	r0, r5
 801fc24:	f7ff ff60 	bl	801fae8 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801fc28:	42b4      	cmp	r4, r6
 801fc2a:	d00c      	beq.n	801fc46 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801fc2c:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc30:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801fc34:	d3f1      	bcc.n	801fc1a <sys_timeouts_init+0x1e>
 801fc36:	464b      	mov	r3, r9
 801fc38:	4641      	mov	r1, r8
 801fc3a:	f240 1229 	movw	r2, #297	; 0x129
 801fc3e:	4638      	mov	r0, r7
 801fc40:	f005 fba8 	bl	8025394 <iprintf>
 801fc44:	e7e9      	b.n	801fc1a <sys_timeouts_init+0x1e>
}
 801fc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fc4a:	bf00      	nop
 801fc4c:	08044fac 	.word	0x08044fac
 801fc50:	08029fe8 	.word	0x08029fe8
 801fc54:	0801fb45 	.word	0x0801fb45
 801fc58:	08044ef8 	.word	0x08044ef8
 801fc5c:	08044f6c 	.word	0x08044f6c

0801fc60 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801fc64:	b570      	push	{r4, r5, r6, lr}
 801fc66:	4604      	mov	r4, r0
 801fc68:	460d      	mov	r5, r1
 801fc6a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc6c:	d208      	bcs.n	801fc80 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801fc6e:	f7f4 fcdf 	bl	8014630 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc72:	4632      	mov	r2, r6
 801fc74:	4629      	mov	r1, r5
 801fc76:	4420      	add	r0, r4
#endif
}
 801fc78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801fc7c:	f7ff bf34 	b.w	801fae8 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801fc80:	4b03      	ldr	r3, [pc, #12]	; (801fc90 <sys_timeout+0x30>)
 801fc82:	f240 1229 	movw	r2, #297	; 0x129
 801fc86:	4903      	ldr	r1, [pc, #12]	; (801fc94 <sys_timeout+0x34>)
 801fc88:	4803      	ldr	r0, [pc, #12]	; (801fc98 <sys_timeout+0x38>)
 801fc8a:	f005 fb83 	bl	8025394 <iprintf>
 801fc8e:	e7ee      	b.n	801fc6e <sys_timeout+0xe>
 801fc90:	08044ef8 	.word	0x08044ef8
 801fc94:	08044f6c 	.word	0x08044f6c
 801fc98:	08029fe8 	.word	0x08029fe8

0801fc9c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801fc9c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fc9e:	4d0d      	ldr	r5, [pc, #52]	; (801fcd4 <sys_untimeout+0x38>)
 801fca0:	682b      	ldr	r3, [r5, #0]
 801fca2:	b19b      	cbz	r3, 801fccc <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801fca4:	2400      	movs	r4, #0
 801fca6:	e003      	b.n	801fcb0 <sys_untimeout+0x14>
 801fca8:	681a      	ldr	r2, [r3, #0]
 801fcaa:	461c      	mov	r4, r3
 801fcac:	4613      	mov	r3, r2
 801fcae:	b16a      	cbz	r2, 801fccc <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801fcb0:	689a      	ldr	r2, [r3, #8]
 801fcb2:	4282      	cmp	r2, r0
 801fcb4:	d1f8      	bne.n	801fca8 <sys_untimeout+0xc>
 801fcb6:	68da      	ldr	r2, [r3, #12]
 801fcb8:	428a      	cmp	r2, r1
 801fcba:	d1f5      	bne.n	801fca8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801fcbc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801fcbe:	b13c      	cbz	r4, 801fcd0 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801fcc0:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801fcc2:	4619      	mov	r1, r3
 801fcc4:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801fcc6:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801fcc8:	f7fa bd82 	b.w	801a7d0 <memp_free>
}
 801fccc:	bc30      	pop	{r4, r5}
 801fcce:	4770      	bx	lr
        next_timeout = t->next;
 801fcd0:	602a      	str	r2, [r5, #0]
 801fcd2:	e7f6      	b.n	801fcc2 <sys_untimeout+0x26>
 801fcd4:	2002e11c 	.word	0x2002e11c

0801fcd8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801fcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801fcdc:	f7f4 fca8 	bl	8014630 <sys_now>
 801fce0:	4c0f      	ldr	r4, [pc, #60]	; (801fd20 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801fce2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801fd24 <sys_check_timeouts+0x4c>
  now = sys_now();
 801fce6:	4607      	mov	r7, r0
 801fce8:	e00f      	b.n	801fd0a <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801fcea:	685a      	ldr	r2, [r3, #4]
 801fcec:	eba7 0c02 	sub.w	ip, r7, r2
 801fcf0:	f1bc 0f00 	cmp.w	ip, #0
 801fcf4:	db0e      	blt.n	801fd14 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801fcf6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801fcf8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801fcfa:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801fcfe:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801fd02:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fd04:	f7fa fd64 	bl	801a7d0 <memp_free>
    if (handler != NULL) {
 801fd08:	b935      	cbnz	r5, 801fd18 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801fd0a:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801fd0c:	200c      	movs	r0, #12
 801fd0e:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d1ea      	bne.n	801fcea <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801fd14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801fd18:	4648      	mov	r0, r9
 801fd1a:	47a8      	blx	r5
 801fd1c:	e7f5      	b.n	801fd0a <sys_check_timeouts+0x32>
 801fd1e:	bf00      	nop
 801fd20:	2002e11c 	.word	0x2002e11c
 801fd24:	2002e118 	.word	0x2002e118

0801fd28 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801fd28:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801fd2a:	4c07      	ldr	r4, [pc, #28]	; (801fd48 <sys_timeouts_sleeptime+0x20>)
 801fd2c:	6823      	ldr	r3, [r4, #0]
 801fd2e:	b13b      	cbz	r3, 801fd40 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801fd30:	f7f4 fc7e 	bl	8014630 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801fd34:	6823      	ldr	r3, [r4, #0]
 801fd36:	685b      	ldr	r3, [r3, #4]
    return 0;
 801fd38:	1a18      	subs	r0, r3, r0
 801fd3a:	bf48      	it	mi
 801fd3c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801fd3e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801fd40:	f04f 30ff 	mov.w	r0, #4294967295
}
 801fd44:	bd10      	pop	{r4, pc}
 801fd46:	bf00      	nop
 801fd48:	2002e11c 	.word	0x2002e11c

0801fd4c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801fd4c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801fd4e:	f005 fbc5 	bl	80254dc <rand>
 801fd52:	4b02      	ldr	r3, [pc, #8]	; (801fd5c <udp_init+0x10>)
 801fd54:	4a02      	ldr	r2, [pc, #8]	; (801fd60 <udp_init+0x14>)
 801fd56:	4303      	orrs	r3, r0
 801fd58:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801fd5a:	bd08      	pop	{r3, pc}
 801fd5c:	ffffc000 	.word	0xffffc000
 801fd60:	2000041a 	.word	0x2000041a

0801fd64 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fd68:	4680      	mov	r8, r0
{
 801fd6a:	b085      	sub	sp, #20
 801fd6c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fd6e:	2800      	cmp	r0, #0
 801fd70:	f000 80af 	beq.w	801fed2 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fd74:	2f00      	cmp	r7, #0
 801fd76:	f000 80b5 	beq.w	801fee4 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801fd7a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801fd7e:	2b07      	cmp	r3, #7
 801fd80:	f240 8091 	bls.w	801fea6 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fd84:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ff5c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801fd88:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fd8c:	f8d9 1000 	ldr.w	r1, [r9]
 801fd90:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fd94:	f003 f80c 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 801fd98:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fd9a:	8820      	ldrh	r0, [r4, #0]
 801fd9c:	f7f9 f9f4 	bl	8019188 <lwip_htons>
 801fda0:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801fda2:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801fda4:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801fda6:	f7f9 f9ef 	bl	8019188 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fdaa:	4b64      	ldr	r3, [pc, #400]	; (801ff3c <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801fdac:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fdae:	681c      	ldr	r4, [r3, #0]
 801fdb0:	2c00      	cmp	r4, #0
 801fdb2:	d064      	beq.n	801fe7e <udp_input+0x11a>
  uncon_pcb = NULL;
 801fdb4:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fdb8:	f8df c190 	ldr.w	ip, [pc, #400]	; 801ff4c <udp_input+0x1e8>
 801fdbc:	4960      	ldr	r1, [pc, #384]	; (801ff40 <udp_input+0x1dc>)
  prev = NULL;
 801fdbe:	465e      	mov	r6, fp
 801fdc0:	e004      	b.n	801fdcc <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fdc2:	68e2      	ldr	r2, [r4, #12]
 801fdc4:	4626      	mov	r6, r4
 801fdc6:	2a00      	cmp	r2, #0
 801fdc8:	d056      	beq.n	801fe78 <udp_input+0x114>
 801fdca:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fdcc:	8a62      	ldrh	r2, [r4, #18]
 801fdce:	42aa      	cmp	r2, r5
 801fdd0:	d1f7      	bne.n	801fdc2 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fdd2:	2f00      	cmp	r7, #0
 801fdd4:	d06d      	beq.n	801feb2 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fdd6:	7a20      	ldrb	r0, [r4, #8]
 801fdd8:	b138      	cbz	r0, 801fdea <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fdda:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801fdde:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801fde2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fde4:	b2d2      	uxtb	r2, r2
 801fde6:	4290      	cmp	r0, r2
 801fde8:	d1eb      	bne.n	801fdc2 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fdea:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801fdec:	f1ba 0f00 	cmp.w	sl, #0
 801fdf0:	d038      	beq.n	801fe64 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fdf2:	b13a      	cbz	r2, 801fe04 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fdf4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fdf8:	1c43      	adds	r3, r0, #1
 801fdfa:	d003      	beq.n	801fe04 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801fdfc:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fdfe:	68bb      	ldr	r3, [r7, #8]
 801fe00:	4218      	tst	r0, r3
 801fe02:	d1de      	bne.n	801fdc2 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fe04:	7c20      	ldrb	r0, [r4, #16]
 801fe06:	0743      	lsls	r3, r0, #29
 801fe08:	d409      	bmi.n	801fe1e <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801fe0a:	f1bb 0f00 	cmp.w	fp, #0
 801fe0e:	d059      	beq.n	801fec4 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fe10:	f1ba 0f00 	cmp.w	sl, #0
 801fe14:	d003      	beq.n	801fe1e <udp_input+0xba>
 801fe16:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fe1a:	3001      	adds	r0, #1
 801fe1c:	d069      	beq.n	801fef2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fe1e:	8aa2      	ldrh	r2, [r4, #20]
 801fe20:	9803      	ldr	r0, [sp, #12]
 801fe22:	4282      	cmp	r2, r0
 801fe24:	d1cd      	bne.n	801fdc2 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fe26:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801fe28:	b11a      	cbz	r2, 801fe32 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fe2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801fe2e:	4282      	cmp	r2, r0
 801fe30:	d1c7      	bne.n	801fdc2 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fe32:	b12e      	cbz	r6, 801fe40 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fe34:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801fe36:	4a41      	ldr	r2, [pc, #260]	; (801ff3c <udp_input+0x1d8>)
          prev->next = pcb->next;
 801fe38:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801fe3a:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801fe3c:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801fe3e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fe40:	2108      	movs	r1, #8
 801fe42:	4640      	mov	r0, r8
 801fe44:	f7fb f950 	bl	801b0e8 <pbuf_remove_header>
 801fe48:	2800      	cmp	r0, #0
 801fe4a:	d15b      	bne.n	801ff04 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fe4c:	69a5      	ldr	r5, [r4, #24]
 801fe4e:	b355      	cbz	r5, 801fea6 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fe50:	9b03      	ldr	r3, [sp, #12]
 801fe52:	4642      	mov	r2, r8
 801fe54:	69e0      	ldr	r0, [r4, #28]
 801fe56:	4621      	mov	r1, r4
 801fe58:	9300      	str	r3, [sp, #0]
 801fe5a:	4b3a      	ldr	r3, [pc, #232]	; (801ff44 <udp_input+0x1e0>)
 801fe5c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fe5e:	b005      	add	sp, #20
 801fe60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fe64:	2a00      	cmp	r2, #0
 801fe66:	d0cd      	beq.n	801fe04 <udp_input+0xa0>
 801fe68:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801fe6c:	4282      	cmp	r2, r0
 801fe6e:	d0c9      	beq.n	801fe04 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fe70:	68e2      	ldr	r2, [r4, #12]
 801fe72:	4626      	mov	r6, r4
 801fe74:	2a00      	cmp	r2, #0
 801fe76:	d1a8      	bne.n	801fdca <udp_input+0x66>
  if (pcb != NULL) {
 801fe78:	f1bb 0f00 	cmp.w	fp, #0
 801fe7c:	d15b      	bne.n	801ff36 <udp_input+0x1d2>
  if (for_us) {
 801fe7e:	687a      	ldr	r2, [r7, #4]
 801fe80:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801fe84:	429a      	cmp	r2, r3
 801fe86:	d10e      	bne.n	801fea6 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fe88:	2108      	movs	r1, #8
 801fe8a:	4640      	mov	r0, r8
 801fe8c:	f7fb f92c 	bl	801b0e8 <pbuf_remove_header>
 801fe90:	2800      	cmp	r0, #0
 801fe92:	d137      	bne.n	801ff04 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fe94:	f1ba 0f00 	cmp.w	sl, #0
 801fe98:	d105      	bne.n	801fea6 <udp_input+0x142>
 801fe9a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801fe9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fea2:	2be0      	cmp	r3, #224	; 0xe0
 801fea4:	d13b      	bne.n	801ff1e <udp_input+0x1ba>
      pbuf_free(p);
 801fea6:	4640      	mov	r0, r8
}
 801fea8:	b005      	add	sp, #20
 801feaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801feae:	f7fb b9a7 	b.w	801b200 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801feb2:	4663      	mov	r3, ip
 801feb4:	2288      	movs	r2, #136	; 0x88
 801feb6:	4824      	ldr	r0, [pc, #144]	; (801ff48 <udp_input+0x1e4>)
 801feb8:	f005 fa6c 	bl	8025394 <iprintf>
 801febc:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801ff4c <udp_input+0x1e8>
 801fec0:	491f      	ldr	r1, [pc, #124]	; (801ff40 <udp_input+0x1dc>)
 801fec2:	e788      	b.n	801fdd6 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801fec4:	8aa2      	ldrh	r2, [r4, #20]
 801fec6:	46a3      	mov	fp, r4
 801fec8:	9803      	ldr	r0, [sp, #12]
 801feca:	4282      	cmp	r2, r0
 801fecc:	f47f af79 	bne.w	801fdc2 <udp_input+0x5e>
 801fed0:	e7a9      	b.n	801fe26 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fed2:	4b1e      	ldr	r3, [pc, #120]	; (801ff4c <udp_input+0x1e8>)
 801fed4:	22cf      	movs	r2, #207	; 0xcf
 801fed6:	491e      	ldr	r1, [pc, #120]	; (801ff50 <udp_input+0x1ec>)
 801fed8:	481b      	ldr	r0, [pc, #108]	; (801ff48 <udp_input+0x1e4>)
 801feda:	f005 fa5b 	bl	8025394 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fede:	2f00      	cmp	r7, #0
 801fee0:	f47f af4b 	bne.w	801fd7a <udp_input+0x16>
 801fee4:	4b19      	ldr	r3, [pc, #100]	; (801ff4c <udp_input+0x1e8>)
 801fee6:	22d0      	movs	r2, #208	; 0xd0
 801fee8:	491a      	ldr	r1, [pc, #104]	; (801ff54 <udp_input+0x1f0>)
 801feea:	4817      	ldr	r0, [pc, #92]	; (801ff48 <udp_input+0x1e4>)
 801feec:	f005 fa52 	bl	8025394 <iprintf>
 801fef0:	e743      	b.n	801fd7a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fef2:	6878      	ldr	r0, [r7, #4]
 801fef4:	f8db 3000 	ldr.w	r3, [fp]
 801fef8:	4283      	cmp	r3, r0
 801fefa:	d090      	beq.n	801fe1e <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fefc:	4290      	cmp	r0, r2
 801fefe:	bf08      	it	eq
 801ff00:	46a3      	moveq	fp, r4
 801ff02:	e78c      	b.n	801fe1e <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ff04:	4b11      	ldr	r3, [pc, #68]	; (801ff4c <udp_input+0x1e8>)
 801ff06:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ff0a:	4913      	ldr	r1, [pc, #76]	; (801ff58 <udp_input+0x1f4>)
 801ff0c:	480e      	ldr	r0, [pc, #56]	; (801ff48 <udp_input+0x1e4>)
 801ff0e:	f005 fa41 	bl	8025394 <iprintf>
      pbuf_free(p);
 801ff12:	4640      	mov	r0, r8
}
 801ff14:	b005      	add	sp, #20
 801ff16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801ff1a:	f7fb b971 	b.w	801b200 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ff1e:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801ff22:	4640      	mov	r0, r8
 801ff24:	3108      	adds	r1, #8
 801ff26:	b209      	sxth	r1, r1
 801ff28:	f7fb f916 	bl	801b158 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ff2c:	2103      	movs	r1, #3
 801ff2e:	4640      	mov	r0, r8
 801ff30:	f002 fd5a 	bl	80229e8 <icmp_dest_unreach>
 801ff34:	e7b7      	b.n	801fea6 <udp_input+0x142>
 801ff36:	465c      	mov	r4, fp
 801ff38:	e782      	b.n	801fe40 <udp_input+0xdc>
 801ff3a:	bf00      	nop
 801ff3c:	2002e124 	.word	0x2002e124
 801ff40:	08045038 	.word	0x08045038
 801ff44:	2001ef30 	.word	0x2001ef30
 801ff48:	08029fe8 	.word	0x08029fe8
 801ff4c:	08044fd4 	.word	0x08044fd4
 801ff50:	08045004 	.word	0x08045004
 801ff54:	0804501c 	.word	0x0804501c
 801ff58:	08045060 	.word	0x08045060
 801ff5c:	2001ef20 	.word	0x2001ef20

0801ff60 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801ff60:	4b38      	ldr	r3, [pc, #224]	; (8020044 <udp_bind+0xe4>)
 801ff62:	2900      	cmp	r1, #0
{
 801ff64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801ff68:	bf08      	it	eq
 801ff6a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff6c:	2800      	cmp	r0, #0
 801ff6e:	d05e      	beq.n	802002e <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff70:	4f35      	ldr	r7, [pc, #212]	; (8020048 <udp_bind+0xe8>)
 801ff72:	683e      	ldr	r6, [r7, #0]
 801ff74:	b34e      	cbz	r6, 801ffca <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801ff76:	42b0      	cmp	r0, r6
 801ff78:	d031      	beq.n	801ffde <udp_bind+0x7e>
 801ff7a:	4634      	mov	r4, r6
 801ff7c:	e001      	b.n	801ff82 <udp_bind+0x22>
 801ff7e:	42a0      	cmp	r0, r4
 801ff80:	d02d      	beq.n	801ffde <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff82:	68e4      	ldr	r4, [r4, #12]
 801ff84:	2c00      	cmp	r4, #0
 801ff86:	d1fa      	bne.n	801ff7e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801ff88:	b362      	cbz	r2, 801ffe4 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ff8a:	680d      	ldr	r5, [r1, #0]
 801ff8c:	4633      	mov	r3, r6
 801ff8e:	e001      	b.n	801ff94 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801ff90:	68db      	ldr	r3, [r3, #12]
 801ff92:	b19b      	cbz	r3, 801ffbc <udp_bind+0x5c>
      if (pcb != ipcb) {
 801ff94:	4298      	cmp	r0, r3
 801ff96:	d0fb      	beq.n	801ff90 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801ff98:	8a59      	ldrh	r1, [r3, #18]
 801ff9a:	4291      	cmp	r1, r2
 801ff9c:	d1f8      	bne.n	801ff90 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ff9e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801ffa0:	2900      	cmp	r1, #0
 801ffa2:	bf18      	it	ne
 801ffa4:	42a9      	cmpne	r1, r5
 801ffa6:	d001      	beq.n	801ffac <udp_bind+0x4c>
 801ffa8:	2d00      	cmp	r5, #0
 801ffaa:	d1f1      	bne.n	801ff90 <udp_bind+0x30>
      return ERR_USE;
 801ffac:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801ffb0:	4618      	mov	r0, r3
 801ffb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffb6:	680d      	ldr	r5, [r1, #0]
 801ffb8:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ffbc:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801ffbe:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801ffc0:	b13c      	cbz	r4, 801ffd2 <udp_bind+0x72>
  return ERR_OK;
 801ffc2:	2300      	movs	r3, #0
}
 801ffc4:	4618      	mov	r0, r3
 801ffc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801ffca:	b372      	cbz	r2, 802002a <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801ffcc:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801ffce:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801ffd0:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801ffd2:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801ffd4:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801ffd6:	6038      	str	r0, [r7, #0]
}
 801ffd8:	4618      	mov	r0, r3
 801ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801ffde:	2401      	movs	r4, #1
  if (port == 0) {
 801ffe0:	2a00      	cmp	r2, #0
 801ffe2:	d1d2      	bne.n	801ff8a <udp_bind+0x2a>
 801ffe4:	f8df e070 	ldr.w	lr, [pc, #112]	; 8020058 <udp_bind+0xf8>
  rebind = 0;
 801ffe8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ffec:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801fff0:	f8be 2000 	ldrh.w	r2, [lr]
 801fff4:	4542      	cmp	r2, r8
 801fff6:	d015      	beq.n	8020024 <udp_bind+0xc4>
 801fff8:	3201      	adds	r2, #1
 801fffa:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fffc:	2e00      	cmp	r6, #0
 801fffe:	d0da      	beq.n	801ffb6 <udp_bind+0x56>
 8020000:	4633      	mov	r3, r6
 8020002:	e002      	b.n	802000a <udp_bind+0xaa>
 8020004:	68db      	ldr	r3, [r3, #12]
 8020006:	2b00      	cmp	r3, #0
 8020008:	d0d5      	beq.n	801ffb6 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 802000a:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 802000e:	4594      	cmp	ip, r2
 8020010:	d1f8      	bne.n	8020004 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8020012:	3d01      	subs	r5, #1
 8020014:	b2ad      	uxth	r5, r5
 8020016:	2d00      	cmp	r5, #0
 8020018:	d1ec      	bne.n	801fff4 <udp_bind+0x94>
      return ERR_USE;
 802001a:	f06f 0307 	mvn.w	r3, #7
 802001e:	f8ae 2000 	strh.w	r2, [lr]
 8020022:	e7cf      	b.n	801ffc4 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8020024:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8020028:	e7e8      	b.n	801fffc <udp_bind+0x9c>
  rebind = 0;
 802002a:	4634      	mov	r4, r6
 802002c:	e7da      	b.n	801ffe4 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 802002e:	4b07      	ldr	r3, [pc, #28]	; (802004c <udp_bind+0xec>)
 8020030:	f240 32b7 	movw	r2, #951	; 0x3b7
 8020034:	4906      	ldr	r1, [pc, #24]	; (8020050 <udp_bind+0xf0>)
 8020036:	4807      	ldr	r0, [pc, #28]	; (8020054 <udp_bind+0xf4>)
 8020038:	f005 f9ac 	bl	8025394 <iprintf>
 802003c:	f06f 030f 	mvn.w	r3, #15
 8020040:	e7c0      	b.n	801ffc4 <udp_bind+0x64>
 8020042:	bf00      	nop
 8020044:	08045954 	.word	0x08045954
 8020048:	2002e124 	.word	0x2002e124
 802004c:	08044fd4 	.word	0x08044fd4
 8020050:	0804507c 	.word	0x0804507c
 8020054:	08029fe8 	.word	0x08029fe8
 8020058:	2000041a 	.word	0x2000041a

0802005c <udp_sendto_if_src>:
{
 802005c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020060:	b085      	sub	sp, #20
 8020062:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8020066:	2800      	cmp	r0, #0
 8020068:	f000 8087 	beq.w	802017a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802006c:	460d      	mov	r5, r1
 802006e:	2900      	cmp	r1, #0
 8020070:	d079      	beq.n	8020166 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020072:	4690      	mov	r8, r2
 8020074:	2a00      	cmp	r2, #0
 8020076:	d06c      	beq.n	8020152 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8020078:	f1ba 0f00 	cmp.w	sl, #0
 802007c:	d05f      	beq.n	802013e <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802007e:	f1bb 0f00 	cmp.w	fp, #0
 8020082:	f000 8084 	beq.w	802018e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 8020086:	8a42      	ldrh	r2, [r0, #18]
 8020088:	4699      	mov	r9, r3
 802008a:	4604      	mov	r4, r0
 802008c:	b39a      	cbz	r2, 80200f6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 802008e:	892a      	ldrh	r2, [r5, #8]
 8020090:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8020094:	429a      	cmp	r2, r3
 8020096:	d84f      	bhi.n	8020138 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 8020098:	2108      	movs	r1, #8
 802009a:	4628      	mov	r0, r5
 802009c:	f7fa fff0 	bl	801b080 <pbuf_add_header>
 80200a0:	bb98      	cbnz	r0, 802010a <udp_sendto_if_src+0xae>
 80200a2:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80200a4:	8973      	ldrh	r3, [r6, #10]
 80200a6:	2b07      	cmp	r3, #7
 80200a8:	d93e      	bls.n	8020128 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 80200aa:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 80200ac:	8a60      	ldrh	r0, [r4, #18]
 80200ae:	f7f9 f86b 	bl	8019188 <lwip_htons>
 80200b2:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 80200b4:	4648      	mov	r0, r9
 80200b6:	f7f9 f867 	bl	8019188 <lwip_htons>
  udphdr->chksum = 0x0000;
 80200ba:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 80200bc:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 80200be:	71bb      	strb	r3, [r7, #6]
 80200c0:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 80200c2:	8930      	ldrh	r0, [r6, #8]
 80200c4:	f7f9 f860 	bl	8019188 <lwip_htons>
 80200c8:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80200ca:	f8cd b008 	str.w	fp, [sp, #8]
 80200ce:	2011      	movs	r0, #17
 80200d0:	7aa3      	ldrb	r3, [r4, #10]
 80200d2:	4642      	mov	r2, r8
 80200d4:	4651      	mov	r1, sl
 80200d6:	9300      	str	r3, [sp, #0]
 80200d8:	7ae3      	ldrb	r3, [r4, #11]
 80200da:	9001      	str	r0, [sp, #4]
 80200dc:	4630      	mov	r0, r6
 80200de:	f002 fdb9 	bl	8022c54 <ip4_output_if_src>
  if (q != p) {
 80200e2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80200e4:	4607      	mov	r7, r0
  if (q != p) {
 80200e6:	d002      	beq.n	80200ee <udp_sendto_if_src+0x92>
    pbuf_free(q);
 80200e8:	4630      	mov	r0, r6
 80200ea:	f7fb f889 	bl	801b200 <pbuf_free>
}
 80200ee:	4638      	mov	r0, r7
 80200f0:	b005      	add	sp, #20
 80200f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80200f6:	4601      	mov	r1, r0
 80200f8:	f7ff ff32 	bl	801ff60 <udp_bind>
    if (err != ERR_OK) {
 80200fc:	4607      	mov	r7, r0
 80200fe:	2800      	cmp	r0, #0
 8020100:	d0c5      	beq.n	802008e <udp_sendto_if_src+0x32>
}
 8020102:	4638      	mov	r0, r7
 8020104:	b005      	add	sp, #20
 8020106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 802010a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802010e:	2108      	movs	r1, #8
 8020110:	2022      	movs	r0, #34	; 0x22
 8020112:	f7fa fea3 	bl	801ae5c <pbuf_alloc>
    if (q == NULL) {
 8020116:	4606      	mov	r6, r0
 8020118:	b170      	cbz	r0, 8020138 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 802011a:	892b      	ldrh	r3, [r5, #8]
 802011c:	2b00      	cmp	r3, #0
 802011e:	d0c1      	beq.n	80200a4 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 8020120:	4629      	mov	r1, r5
 8020122:	f7fb f8db 	bl	801b2dc <pbuf_chain>
 8020126:	e7bd      	b.n	80200a4 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020128:	4b1e      	ldr	r3, [pc, #120]	; (80201a4 <udp_sendto_if_src+0x148>)
 802012a:	f240 320d 	movw	r2, #781	; 0x30d
 802012e:	491e      	ldr	r1, [pc, #120]	; (80201a8 <udp_sendto_if_src+0x14c>)
 8020130:	481e      	ldr	r0, [pc, #120]	; (80201ac <udp_sendto_if_src+0x150>)
 8020132:	f005 f92f 	bl	8025394 <iprintf>
 8020136:	e7b8      	b.n	80200aa <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 8020138:	f04f 37ff 	mov.w	r7, #4294967295
 802013c:	e7d7      	b.n	80200ee <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 802013e:	4b19      	ldr	r3, [pc, #100]	; (80201a4 <udp_sendto_if_src+0x148>)
 8020140:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8020144:	491a      	ldr	r1, [pc, #104]	; (80201b0 <udp_sendto_if_src+0x154>)
 8020146:	f06f 070f 	mvn.w	r7, #15
 802014a:	4818      	ldr	r0, [pc, #96]	; (80201ac <udp_sendto_if_src+0x150>)
 802014c:	f005 f922 	bl	8025394 <iprintf>
 8020150:	e7cd      	b.n	80200ee <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020152:	4b14      	ldr	r3, [pc, #80]	; (80201a4 <udp_sendto_if_src+0x148>)
 8020154:	f240 22d3 	movw	r2, #723	; 0x2d3
 8020158:	4916      	ldr	r1, [pc, #88]	; (80201b4 <udp_sendto_if_src+0x158>)
 802015a:	f06f 070f 	mvn.w	r7, #15
 802015e:	4813      	ldr	r0, [pc, #76]	; (80201ac <udp_sendto_if_src+0x150>)
 8020160:	f005 f918 	bl	8025394 <iprintf>
 8020164:	e7c3      	b.n	80200ee <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8020166:	4b0f      	ldr	r3, [pc, #60]	; (80201a4 <udp_sendto_if_src+0x148>)
 8020168:	f240 22d2 	movw	r2, #722	; 0x2d2
 802016c:	4912      	ldr	r1, [pc, #72]	; (80201b8 <udp_sendto_if_src+0x15c>)
 802016e:	f06f 070f 	mvn.w	r7, #15
 8020172:	480e      	ldr	r0, [pc, #56]	; (80201ac <udp_sendto_if_src+0x150>)
 8020174:	f005 f90e 	bl	8025394 <iprintf>
 8020178:	e7b9      	b.n	80200ee <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 802017a:	4b0a      	ldr	r3, [pc, #40]	; (80201a4 <udp_sendto_if_src+0x148>)
 802017c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8020180:	490e      	ldr	r1, [pc, #56]	; (80201bc <udp_sendto_if_src+0x160>)
 8020182:	f06f 070f 	mvn.w	r7, #15
 8020186:	4809      	ldr	r0, [pc, #36]	; (80201ac <udp_sendto_if_src+0x150>)
 8020188:	f005 f904 	bl	8025394 <iprintf>
 802018c:	e7af      	b.n	80200ee <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 802018e:	4b05      	ldr	r3, [pc, #20]	; (80201a4 <udp_sendto_if_src+0x148>)
 8020190:	f240 22d5 	movw	r2, #725	; 0x2d5
 8020194:	490a      	ldr	r1, [pc, #40]	; (80201c0 <udp_sendto_if_src+0x164>)
 8020196:	f06f 070f 	mvn.w	r7, #15
 802019a:	4804      	ldr	r0, [pc, #16]	; (80201ac <udp_sendto_if_src+0x150>)
 802019c:	f005 f8fa 	bl	8025394 <iprintf>
 80201a0:	e7a5      	b.n	80200ee <udp_sendto_if_src+0x92>
 80201a2:	bf00      	nop
 80201a4:	08044fd4 	.word	0x08044fd4
 80201a8:	08045140 	.word	0x08045140
 80201ac:	08029fe8 	.word	0x08029fe8
 80201b0:	080450f8 	.word	0x080450f8
 80201b4:	080450d4 	.word	0x080450d4
 80201b8:	080450b4 	.word	0x080450b4
 80201bc:	08045094 	.word	0x08045094
 80201c0:	0804511c 	.word	0x0804511c

080201c4 <udp_sendto_if>:
{
 80201c4:	b570      	push	{r4, r5, r6, lr}
 80201c6:	b082      	sub	sp, #8
 80201c8:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80201ca:	2800      	cmp	r0, #0
 80201cc:	d036      	beq.n	802023c <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80201ce:	b359      	cbz	r1, 8020228 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80201d0:	b302      	cbz	r2, 8020214 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80201d2:	b1ac      	cbz	r4, 8020200 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80201d4:	6805      	ldr	r5, [r0, #0]
 80201d6:	b935      	cbnz	r5, 80201e6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 80201d8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80201da:	e9cd 4500 	strd	r4, r5, [sp]
 80201de:	f7ff ff3d 	bl	802005c <udp_sendto_if_src>
}
 80201e2:	b002      	add	sp, #8
 80201e4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80201e6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80201ea:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 80201ee:	d0f3      	beq.n	80201d8 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80201f0:	6866      	ldr	r6, [r4, #4]
 80201f2:	42b5      	cmp	r5, r6
 80201f4:	d101      	bne.n	80201fa <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80201f6:	4605      	mov	r5, r0
 80201f8:	e7ef      	b.n	80201da <udp_sendto_if+0x16>
        return ERR_RTE;
 80201fa:	f06f 0003 	mvn.w	r0, #3
 80201fe:	e7f0      	b.n	80201e2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8020200:	4b13      	ldr	r3, [pc, #76]	; (8020250 <udp_sendto_if+0x8c>)
 8020202:	f240 2283 	movw	r2, #643	; 0x283
 8020206:	4913      	ldr	r1, [pc, #76]	; (8020254 <udp_sendto_if+0x90>)
 8020208:	4813      	ldr	r0, [pc, #76]	; (8020258 <udp_sendto_if+0x94>)
 802020a:	f005 f8c3 	bl	8025394 <iprintf>
 802020e:	f06f 000f 	mvn.w	r0, #15
 8020212:	e7e6      	b.n	80201e2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020214:	4b0e      	ldr	r3, [pc, #56]	; (8020250 <udp_sendto_if+0x8c>)
 8020216:	f240 2282 	movw	r2, #642	; 0x282
 802021a:	4910      	ldr	r1, [pc, #64]	; (802025c <udp_sendto_if+0x98>)
 802021c:	480e      	ldr	r0, [pc, #56]	; (8020258 <udp_sendto_if+0x94>)
 802021e:	f005 f8b9 	bl	8025394 <iprintf>
 8020222:	f06f 000f 	mvn.w	r0, #15
 8020226:	e7dc      	b.n	80201e2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8020228:	4b09      	ldr	r3, [pc, #36]	; (8020250 <udp_sendto_if+0x8c>)
 802022a:	f240 2281 	movw	r2, #641	; 0x281
 802022e:	490c      	ldr	r1, [pc, #48]	; (8020260 <udp_sendto_if+0x9c>)
 8020230:	4809      	ldr	r0, [pc, #36]	; (8020258 <udp_sendto_if+0x94>)
 8020232:	f005 f8af 	bl	8025394 <iprintf>
 8020236:	f06f 000f 	mvn.w	r0, #15
 802023a:	e7d2      	b.n	80201e2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802023c:	4b04      	ldr	r3, [pc, #16]	; (8020250 <udp_sendto_if+0x8c>)
 802023e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020242:	4908      	ldr	r1, [pc, #32]	; (8020264 <udp_sendto_if+0xa0>)
 8020244:	4804      	ldr	r0, [pc, #16]	; (8020258 <udp_sendto_if+0x94>)
 8020246:	f005 f8a5 	bl	8025394 <iprintf>
 802024a:	f06f 000f 	mvn.w	r0, #15
 802024e:	e7c8      	b.n	80201e2 <udp_sendto_if+0x1e>
 8020250:	08044fd4 	.word	0x08044fd4
 8020254:	080451c8 	.word	0x080451c8
 8020258:	08029fe8 	.word	0x08029fe8
 802025c:	080451a8 	.word	0x080451a8
 8020260:	0804518c 	.word	0x0804518c
 8020264:	08045170 	.word	0x08045170

08020268 <udp_sendto>:
{
 8020268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802026c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 802026e:	b388      	cbz	r0, 80202d4 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8020270:	460e      	mov	r6, r1
 8020272:	b329      	cbz	r1, 80202c0 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8020274:	4615      	mov	r5, r2
 8020276:	b1ca      	cbz	r2, 80202ac <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8020278:	4604      	mov	r4, r0
 802027a:	7a00      	ldrb	r0, [r0, #8]
 802027c:	4698      	mov	r8, r3
 802027e:	b168      	cbz	r0, 802029c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 8020280:	f7fa fc98 	bl	801abb4 <netif_get_by_index>
 8020284:	4607      	mov	r7, r0
  if (netif == NULL) {
 8020286:	b177      	cbz	r7, 80202a6 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8020288:	4643      	mov	r3, r8
 802028a:	462a      	mov	r2, r5
 802028c:	4631      	mov	r1, r6
 802028e:	4620      	mov	r0, r4
 8020290:	9700      	str	r7, [sp, #0]
 8020292:	f7ff ff97 	bl	80201c4 <udp_sendto_if>
}
 8020296:	b002      	add	sp, #8
 8020298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 802029c:	4610      	mov	r0, r2
 802029e:	f002 fbab 	bl	80229f8 <ip4_route>
 80202a2:	4607      	mov	r7, r0
 80202a4:	e7ef      	b.n	8020286 <udp_sendto+0x1e>
    return ERR_RTE;
 80202a6:	f06f 0003 	mvn.w	r0, #3
 80202aa:	e7f4      	b.n	8020296 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80202ac:	4b0e      	ldr	r3, [pc, #56]	; (80202e8 <udp_sendto+0x80>)
 80202ae:	f240 221a 	movw	r2, #538	; 0x21a
 80202b2:	490e      	ldr	r1, [pc, #56]	; (80202ec <udp_sendto+0x84>)
 80202b4:	480e      	ldr	r0, [pc, #56]	; (80202f0 <udp_sendto+0x88>)
 80202b6:	f005 f86d 	bl	8025394 <iprintf>
 80202ba:	f06f 000f 	mvn.w	r0, #15
 80202be:	e7ea      	b.n	8020296 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80202c0:	4b09      	ldr	r3, [pc, #36]	; (80202e8 <udp_sendto+0x80>)
 80202c2:	f240 2219 	movw	r2, #537	; 0x219
 80202c6:	490b      	ldr	r1, [pc, #44]	; (80202f4 <udp_sendto+0x8c>)
 80202c8:	4809      	ldr	r0, [pc, #36]	; (80202f0 <udp_sendto+0x88>)
 80202ca:	f005 f863 	bl	8025394 <iprintf>
 80202ce:	f06f 000f 	mvn.w	r0, #15
 80202d2:	e7e0      	b.n	8020296 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80202d4:	4b04      	ldr	r3, [pc, #16]	; (80202e8 <udp_sendto+0x80>)
 80202d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80202da:	4907      	ldr	r1, [pc, #28]	; (80202f8 <udp_sendto+0x90>)
 80202dc:	4804      	ldr	r0, [pc, #16]	; (80202f0 <udp_sendto+0x88>)
 80202de:	f005 f859 	bl	8025394 <iprintf>
 80202e2:	f06f 000f 	mvn.w	r0, #15
 80202e6:	e7d6      	b.n	8020296 <udp_sendto+0x2e>
 80202e8:	08044fd4 	.word	0x08044fd4
 80202ec:	0804521c 	.word	0x0804521c
 80202f0:	08029fe8 	.word	0x08029fe8
 80202f4:	08045200 	.word	0x08045200
 80202f8:	080451e8 	.word	0x080451e8

080202fc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80202fc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80202fe:	b320      	cbz	r0, 802034a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8020300:	460d      	mov	r5, r1
 8020302:	b361      	cbz	r1, 802035e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 8020304:	4616      	mov	r6, r2
 8020306:	8a42      	ldrh	r2, [r0, #18]
 8020308:	4604      	mov	r4, r0
 802030a:	b1c2      	cbz	r2, 802033e <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 802030c:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802030e:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020310:	4918      	ldr	r1, [pc, #96]	; (8020374 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8020312:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8020316:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020318:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 802031a:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802031c:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802031e:	b142      	cbz	r2, 8020332 <udp_connect+0x36>
    if (pcb == ipcb) {
 8020320:	4294      	cmp	r4, r2
 8020322:	d00a      	beq.n	802033a <udp_connect+0x3e>
 8020324:	4613      	mov	r3, r2
 8020326:	e001      	b.n	802032c <udp_connect+0x30>
 8020328:	429c      	cmp	r4, r3
 802032a:	d006      	beq.n	802033a <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802032c:	68db      	ldr	r3, [r3, #12]
 802032e:	2b00      	cmp	r3, #0
 8020330:	d1fa      	bne.n	8020328 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 8020332:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 8020334:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 8020336:	600c      	str	r4, [r1, #0]
}
 8020338:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 802033a:	2000      	movs	r0, #0
}
 802033c:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 802033e:	4601      	mov	r1, r0
 8020340:	f7ff fe0e 	bl	801ff60 <udp_bind>
    if (err != ERR_OK) {
 8020344:	2800      	cmp	r0, #0
 8020346:	d0e1      	beq.n	802030c <udp_connect+0x10>
}
 8020348:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802034a:	4b0b      	ldr	r3, [pc, #44]	; (8020378 <udp_connect+0x7c>)
 802034c:	f240 4235 	movw	r2, #1077	; 0x435
 8020350:	490a      	ldr	r1, [pc, #40]	; (802037c <udp_connect+0x80>)
 8020352:	480b      	ldr	r0, [pc, #44]	; (8020380 <udp_connect+0x84>)
 8020354:	f005 f81e 	bl	8025394 <iprintf>
 8020358:	f06f 000f 	mvn.w	r0, #15
}
 802035c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 802035e:	4b06      	ldr	r3, [pc, #24]	; (8020378 <udp_connect+0x7c>)
 8020360:	f240 4236 	movw	r2, #1078	; 0x436
 8020364:	4907      	ldr	r1, [pc, #28]	; (8020384 <udp_connect+0x88>)
 8020366:	4806      	ldr	r0, [pc, #24]	; (8020380 <udp_connect+0x84>)
 8020368:	f005 f814 	bl	8025394 <iprintf>
 802036c:	f06f 000f 	mvn.w	r0, #15
}
 8020370:	bd70      	pop	{r4, r5, r6, pc}
 8020372:	bf00      	nop
 8020374:	2002e124 	.word	0x2002e124
 8020378:	08044fd4 	.word	0x08044fd4
 802037c:	08045238 	.word	0x08045238
 8020380:	08029fe8 	.word	0x08029fe8
 8020384:	08045254 	.word	0x08045254

08020388 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8020388:	b110      	cbz	r0, 8020390 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 802038a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 802038e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8020390:	4b03      	ldr	r3, [pc, #12]	; (80203a0 <udp_recv+0x18>)
 8020392:	f240 428a 	movw	r2, #1162	; 0x48a
 8020396:	4903      	ldr	r1, [pc, #12]	; (80203a4 <udp_recv+0x1c>)
 8020398:	4803      	ldr	r0, [pc, #12]	; (80203a8 <udp_recv+0x20>)
 802039a:	f004 bffb 	b.w	8025394 <iprintf>
 802039e:	bf00      	nop
 80203a0:	08044fd4 	.word	0x08044fd4
 80203a4:	08045270 	.word	0x08045270
 80203a8:	08029fe8 	.word	0x08029fe8

080203ac <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80203ac:	4601      	mov	r1, r0
 80203ae:	b1c0      	cbz	r0, 80203e2 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80203b0:	4b0f      	ldr	r3, [pc, #60]	; (80203f0 <udp_remove+0x44>)
 80203b2:	681a      	ldr	r2, [r3, #0]
 80203b4:	4282      	cmp	r2, r0
 80203b6:	d00a      	beq.n	80203ce <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80203b8:	b132      	cbz	r2, 80203c8 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80203ba:	68d3      	ldr	r3, [r2, #12]
 80203bc:	428b      	cmp	r3, r1
 80203be:	d100      	bne.n	80203c2 <udp_remove+0x16>
 80203c0:	b953      	cbnz	r3, 80203d8 <udp_remove+0x2c>
 80203c2:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80203c4:	2a00      	cmp	r2, #0
 80203c6:	d1f8      	bne.n	80203ba <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80203c8:	2001      	movs	r0, #1
 80203ca:	f7fa ba01 	b.w	801a7d0 <memp_free>
    udp_pcbs = udp_pcbs->next;
 80203ce:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203d0:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 80203d2:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 80203d4:	f7fa b9fc 	b.w	801a7d0 <memp_free>
        pcb2->next = pcb->next;
 80203d8:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203da:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 80203dc:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 80203de:	f7fa b9f7 	b.w	801a7d0 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80203e2:	4b04      	ldr	r3, [pc, #16]	; (80203f4 <udp_remove+0x48>)
 80203e4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80203e8:	4903      	ldr	r1, [pc, #12]	; (80203f8 <udp_remove+0x4c>)
 80203ea:	4804      	ldr	r0, [pc, #16]	; (80203fc <udp_remove+0x50>)
 80203ec:	f004 bfd2 	b.w	8025394 <iprintf>
 80203f0:	2002e124 	.word	0x2002e124
 80203f4:	08044fd4 	.word	0x08044fd4
 80203f8:	08045288 	.word	0x08045288
 80203fc:	08029fe8 	.word	0x08029fe8

08020400 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8020400:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8020402:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8020406:	4907      	ldr	r1, [pc, #28]	; (8020424 <udp_new+0x24>)
 8020408:	2001      	movs	r0, #1
 802040a:	f7fa f9ab 	bl	801a764 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802040e:	4604      	mov	r4, r0
 8020410:	b128      	cbz	r0, 802041e <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8020412:	2220      	movs	r2, #32
 8020414:	2100      	movs	r1, #0
 8020416:	f004 f81f 	bl	8024458 <memset>
    pcb->ttl = UDP_TTL;
 802041a:	23ff      	movs	r3, #255	; 0xff
 802041c:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 802041e:	4620      	mov	r0, r4
 8020420:	bd10      	pop	{r4, pc}
 8020422:	bf00      	nop
 8020424:	08044fd4 	.word	0x08044fd4

08020428 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8020428:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 802042a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 802042e:	4907      	ldr	r1, [pc, #28]	; (802044c <udp_new_ip_type+0x24>)
 8020430:	2001      	movs	r0, #1
 8020432:	f7fa f997 	bl	801a764 <memp_malloc_fn>
  if (pcb != NULL) {
 8020436:	4604      	mov	r4, r0
 8020438:	b128      	cbz	r0, 8020446 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 802043a:	2220      	movs	r2, #32
 802043c:	2100      	movs	r1, #0
 802043e:	f004 f80b 	bl	8024458 <memset>
    pcb->ttl = UDP_TTL;
 8020442:	23ff      	movs	r3, #255	; 0xff
 8020444:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 8020446:	4620      	mov	r0, r4
 8020448:	bd10      	pop	{r4, pc}
 802044a:	bf00      	nop
 802044c:	08044fd4 	.word	0x08044fd4

08020450 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8020450:	b110      	cbz	r0, 8020458 <udp_netif_ip_addr_changed+0x8>
 8020452:	6802      	ldr	r2, [r0, #0]
 8020454:	b101      	cbz	r1, 8020458 <udp_netif_ip_addr_changed+0x8>
 8020456:	b902      	cbnz	r2, 802045a <udp_netif_ip_addr_changed+0xa>
 8020458:	4770      	bx	lr
 802045a:	680b      	ldr	r3, [r1, #0]
 802045c:	2b00      	cmp	r3, #0
 802045e:	d0fb      	beq.n	8020458 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020460:	4b08      	ldr	r3, [pc, #32]	; (8020484 <udp_netif_ip_addr_changed+0x34>)
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d0f7      	beq.n	8020458 <udp_netif_ip_addr_changed+0x8>
{
 8020468:	b410      	push	{r4}
 802046a:	e000      	b.n	802046e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 802046c:	6802      	ldr	r2, [r0, #0]
 802046e:	681c      	ldr	r4, [r3, #0]
 8020470:	4294      	cmp	r4, r2
 8020472:	d101      	bne.n	8020478 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8020474:	680a      	ldr	r2, [r1, #0]
 8020476:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020478:	68db      	ldr	r3, [r3, #12]
 802047a:	2b00      	cmp	r3, #0
 802047c:	d1f6      	bne.n	802046c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 802047e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020482:	4770      	bx	lr
 8020484:	2002e124 	.word	0x2002e124

08020488 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8020488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 802048a:	1d07      	adds	r7, r0, #4
{
 802048c:	4604      	mov	r4, r0
 802048e:	460d      	mov	r5, r1
 8020490:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8020492:	2f44      	cmp	r7, #68	; 0x44
 8020494:	d80e      	bhi.n	80204b4 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8020496:	0e33      	lsrs	r3, r6, #24
 8020498:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802049a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 802049c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 802049e:	b292      	uxth	r2, r2
 80204a0:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204a2:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80204a4:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204a6:	0a32      	lsrs	r2, r6, #8
 80204a8:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80204aa:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80204ac:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 80204ae:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80204b0:	552e      	strb	r6, [r5, r4]
}
 80204b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80204b4:	4b03      	ldr	r3, [pc, #12]	; (80204c4 <dhcp_option_long+0x3c>)
 80204b6:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80204ba:	4903      	ldr	r1, [pc, #12]	; (80204c8 <dhcp_option_long+0x40>)
 80204bc:	4803      	ldr	r0, [pc, #12]	; (80204cc <dhcp_option_long+0x44>)
 80204be:	f004 ff69 	bl	8025394 <iprintf>
 80204c2:	e7e8      	b.n	8020496 <dhcp_option_long+0xe>
 80204c4:	080452a0 	.word	0x080452a0
 80204c8:	080452d8 	.word	0x080452d8
 80204cc:	08029fe8 	.word	0x08029fe8

080204d0 <dhcp_check>:
{
 80204d0:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80204d2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 80204d4:	7963      	ldrb	r3, [r4, #5]
 80204d6:	2b08      	cmp	r3, #8
 80204d8:	d004      	beq.n	80204e4 <dhcp_check+0x14>
    dhcp->tries = 0;
 80204da:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80204dc:	2208      	movs	r2, #8
    dhcp->tries = 0;
 80204de:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 80204e0:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 80204e2:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80204e4:	2200      	movs	r2, #0
 80204e6:	f104 011c 	add.w	r1, r4, #28
 80204ea:	f001 ffab 	bl	8022444 <etharp_query>
  if (dhcp->tries < 255) {
 80204ee:	79a3      	ldrb	r3, [r4, #6]
 80204f0:	2bff      	cmp	r3, #255	; 0xff
 80204f2:	d001      	beq.n	80204f8 <dhcp_check+0x28>
    dhcp->tries++;
 80204f4:	3301      	adds	r3, #1
 80204f6:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80204f8:	2301      	movs	r3, #1
 80204fa:	8123      	strh	r3, [r4, #8]
}
 80204fc:	bd10      	pop	{r4, pc}
 80204fe:	bf00      	nop

08020500 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8020500:	2800      	cmp	r0, #0
 8020502:	f000 808e 	beq.w	8020622 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 8020506:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020508:	2900      	cmp	r1, #0
 802050a:	f000 8091 	beq.w	8020630 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802050e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 8020510:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8020512:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 8020516:	b500      	push	{lr}
  dhcp->lease_used = 0;
 8020518:	824a      	strh	r2, [r1, #18]
{
 802051a:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 802051c:	d00e      	beq.n	802053c <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802051e:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020520:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020524:	d258      	bcs.n	80205d8 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020526:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 802052a:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802052c:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 8020530:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 8020534:	f200 8083 	bhi.w	802063e <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 8020538:	2301      	movs	r3, #1
 802053a:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802053c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802053e:	1c5a      	adds	r2, r3, #1
 8020540:	d050      	beq.n	80205e4 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020542:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020544:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020548:	d241      	bcs.n	80205ce <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802054a:	4a40      	ldr	r2, [pc, #256]	; (802064c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802054c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802054e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8020552:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8020556:	d874      	bhi.n	8020642 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8020558:	2301      	movs	r3, #1
 802055a:	469c      	mov	ip, r3
 802055c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802055e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8020560:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020564:	1c53      	adds	r3, r2, #1
 8020566:	d042      	beq.n	80205ee <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020568:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802056a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802056e:	d24b      	bcs.n	8020608 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020570:	4b36      	ldr	r3, [pc, #216]	; (802064c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8020572:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020574:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8020578:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802057c:	d864      	bhi.n	8020648 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802057e:	2201      	movs	r2, #1
 8020580:	4613      	mov	r3, r2
 8020582:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8020584:	2201      	movs	r2, #1
 8020586:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8020588:	459c      	cmp	ip, r3
 802058a:	d302      	bcc.n	8020592 <dhcp_bind+0x92>
 802058c:	b10a      	cbz	r2, 8020592 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 802058e:	2300      	movs	r3, #0
 8020590:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8020592:	79cb      	ldrb	r3, [r1, #7]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d02f      	beq.n	80205f8 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8020598:	6a0b      	ldr	r3, [r1, #32]
 802059a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802059c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802059e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80205a0:	b92b      	cbnz	r3, 80205ae <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80205a2:	69cb      	ldr	r3, [r1, #28]
 80205a4:	9a00      	ldr	r2, [sp, #0]
 80205a6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80205a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80205ac:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 80205ae:	794b      	ldrb	r3, [r1, #5]
 80205b0:	2b0a      	cmp	r3, #10
 80205b2:	d004      	beq.n	80205be <dhcp_bind+0xbe>
    dhcp->tries = 0;
 80205b4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80205b6:	220a      	movs	r2, #10
    dhcp->tries = 0;
 80205b8:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 80205ba:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 80205bc:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80205be:	ab01      	add	r3, sp, #4
 80205c0:	466a      	mov	r2, sp
 80205c2:	311c      	adds	r1, #28
 80205c4:	f7fa f982 	bl	801a8cc <netif_set_addr>
}
 80205c8:	b003      	add	sp, #12
 80205ca:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 80205ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80205d2:	469c      	mov	ip, r3
 80205d4:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 80205d6:	e7c2      	b.n	802055e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 80205d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80205dc:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80205de:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80205e0:	1c5a      	adds	r2, r3, #1
 80205e2:	d1ae      	bne.n	8020542 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80205e4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80205e6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80205ea:	1c53      	adds	r3, r2, #1
 80205ec:	d1bc      	bne.n	8020568 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80205ee:	898b      	ldrh	r3, [r1, #12]
 80205f0:	1e1a      	subs	r2, r3, #0
 80205f2:	bf18      	it	ne
 80205f4:	2201      	movne	r2, #1
 80205f6:	e7c7      	b.n	8020588 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 80205f8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80205fc:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 80205fe:	2b00      	cmp	r3, #0
 8020600:	db07      	blt.n	8020612 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8020602:	23ff      	movs	r3, #255	; 0xff
 8020604:	9300      	str	r3, [sp, #0]
 8020606:	e7c9      	b.n	802059c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 8020608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802060c:	4613      	mov	r3, r2
 802060e:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 8020610:	e7b8      	b.n	8020584 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 8020612:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8020614:	bf8c      	ite	hi
 8020616:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 802061a:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 802061e:	9300      	str	r3, [sp, #0]
 8020620:	e7bc      	b.n	802059c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8020622:	4b0b      	ldr	r3, [pc, #44]	; (8020650 <dhcp_bind+0x150>)
 8020624:	f240 4215 	movw	r2, #1045	; 0x415
 8020628:	490a      	ldr	r1, [pc, #40]	; (8020654 <dhcp_bind+0x154>)
 802062a:	480b      	ldr	r0, [pc, #44]	; (8020658 <dhcp_bind+0x158>)
 802062c:	f004 beb2 	b.w	8025394 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020630:	4b07      	ldr	r3, [pc, #28]	; (8020650 <dhcp_bind+0x150>)
 8020632:	f240 4217 	movw	r2, #1047	; 0x417
 8020636:	4909      	ldr	r1, [pc, #36]	; (802065c <dhcp_bind+0x15c>)
 8020638:	4807      	ldr	r0, [pc, #28]	; (8020658 <dhcp_bind+0x158>)
 802063a:	f004 beab 	b.w	8025394 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 802063e:	828a      	strh	r2, [r1, #20]
 8020640:	e77c      	b.n	802053c <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8020642:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8020646:	e78a      	b.n	802055e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8020648:	818b      	strh	r3, [r1, #12]
 802064a:	e79b      	b.n	8020584 <dhcp_bind+0x84>
 802064c:	88888889 	.word	0x88888889
 8020650:	080452a0 	.word	0x080452a0
 8020654:	08045314 	.word	0x08045314
 8020658:	08029fe8 	.word	0x08029fe8
 802065c:	08045330 	.word	0x08045330

08020660 <dhcp_inc_pcb_refcount>:
{
 8020660:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8020662:	4c15      	ldr	r4, [pc, #84]	; (80206b8 <dhcp_inc_pcb_refcount+0x58>)
 8020664:	7823      	ldrb	r3, [r4, #0]
 8020666:	b9fb      	cbnz	r3, 80206a8 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8020668:	4d14      	ldr	r5, [pc, #80]	; (80206bc <dhcp_inc_pcb_refcount+0x5c>)
 802066a:	682b      	ldr	r3, [r5, #0]
 802066c:	b12b      	cbz	r3, 802067a <dhcp_inc_pcb_refcount+0x1a>
 802066e:	4b14      	ldr	r3, [pc, #80]	; (80206c0 <dhcp_inc_pcb_refcount+0x60>)
 8020670:	22e5      	movs	r2, #229	; 0xe5
 8020672:	4914      	ldr	r1, [pc, #80]	; (80206c4 <dhcp_inc_pcb_refcount+0x64>)
 8020674:	4814      	ldr	r0, [pc, #80]	; (80206c8 <dhcp_inc_pcb_refcount+0x68>)
 8020676:	f004 fe8d 	bl	8025394 <iprintf>
    dhcp_pcb = udp_new();
 802067a:	f7ff fec1 	bl	8020400 <udp_new>
 802067e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8020680:	b1b0      	cbz	r0, 80206b0 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8020682:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8020684:	4911      	ldr	r1, [pc, #68]	; (80206cc <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8020686:	f042 0220 	orr.w	r2, r2, #32
 802068a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 802068c:	2244      	movs	r2, #68	; 0x44
 802068e:	f7ff fc67 	bl	801ff60 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8020692:	2243      	movs	r2, #67	; 0x43
 8020694:	490d      	ldr	r1, [pc, #52]	; (80206cc <dhcp_inc_pcb_refcount+0x6c>)
 8020696:	6828      	ldr	r0, [r5, #0]
 8020698:	f7ff fe30 	bl	80202fc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 802069c:	2200      	movs	r2, #0
 802069e:	490c      	ldr	r1, [pc, #48]	; (80206d0 <dhcp_inc_pcb_refcount+0x70>)
 80206a0:	6828      	ldr	r0, [r5, #0]
 80206a2:	f7ff fe71 	bl	8020388 <udp_recv>
  dhcp_pcb_refcount++;
 80206a6:	7823      	ldrb	r3, [r4, #0]
 80206a8:	3301      	adds	r3, #1
  return ERR_OK;
 80206aa:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 80206ac:	7023      	strb	r3, [r4, #0]
}
 80206ae:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 80206b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80206b4:	bd38      	pop	{r3, r4, r5, pc}
 80206b6:	bf00      	nop
 80206b8:	2002e12c 	.word	0x2002e12c
 80206bc:	2002e128 	.word	0x2002e128
 80206c0:	080452a0 	.word	0x080452a0
 80206c4:	08045348 	.word	0x08045348
 80206c8:	08029fe8 	.word	0x08029fe8
 80206cc:	08045954 	.word	0x08045954
 80206d0:	08020f79 	.word	0x08020f79

080206d4 <dhcp_dec_pcb_refcount>:
{
 80206d4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80206d6:	4d0b      	ldr	r5, [pc, #44]	; (8020704 <dhcp_dec_pcb_refcount+0x30>)
 80206d8:	782c      	ldrb	r4, [r5, #0]
 80206da:	b154      	cbz	r4, 80206f2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 80206dc:	3c01      	subs	r4, #1
 80206de:	b2e4      	uxtb	r4, r4
 80206e0:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 80206e2:	b104      	cbz	r4, 80206e6 <dhcp_dec_pcb_refcount+0x12>
}
 80206e4:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 80206e6:	4d08      	ldr	r5, [pc, #32]	; (8020708 <dhcp_dec_pcb_refcount+0x34>)
 80206e8:	6828      	ldr	r0, [r5, #0]
 80206ea:	f7ff fe5f 	bl	80203ac <udp_remove>
    dhcp_pcb = NULL;
 80206ee:	602c      	str	r4, [r5, #0]
}
 80206f0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80206f2:	4b06      	ldr	r3, [pc, #24]	; (802070c <dhcp_dec_pcb_refcount+0x38>)
 80206f4:	22ff      	movs	r2, #255	; 0xff
 80206f6:	4906      	ldr	r1, [pc, #24]	; (8020710 <dhcp_dec_pcb_refcount+0x3c>)
 80206f8:	4806      	ldr	r0, [pc, #24]	; (8020714 <dhcp_dec_pcb_refcount+0x40>)
 80206fa:	f004 fe4b 	bl	8025394 <iprintf>
  dhcp_pcb_refcount--;
 80206fe:	782c      	ldrb	r4, [r5, #0]
 8020700:	e7ec      	b.n	80206dc <dhcp_dec_pcb_refcount+0x8>
 8020702:	bf00      	nop
 8020704:	2002e12c 	.word	0x2002e12c
 8020708:	2002e128 	.word	0x2002e128
 802070c:	080452a0 	.word	0x080452a0
 8020710:	08045370 	.word	0x08045370
 8020714:	08029fe8 	.word	0x08029fe8

08020718 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 8020718:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 802071a:	4d29      	ldr	r5, [pc, #164]	; (80207c0 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 802071c:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 802071e:	b083      	sub	sp, #12
 8020720:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020722:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8020724:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8020728:	b112      	cbz	r2, 8020730 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 802072a:	4b26      	ldr	r3, [pc, #152]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 802072c:	68db      	ldr	r3, [r3, #12]
 802072e:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8020730:	792b      	ldrb	r3, [r5, #4]
 8020732:	2b00      	cmp	r3, #0
 8020734:	d041      	beq.n	80207ba <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8020736:	4b23      	ldr	r3, [pc, #140]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 8020738:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 802073a:	796a      	ldrb	r2, [r5, #5]
 802073c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802073e:	b312      	cbz	r2, 8020786 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8020740:	4b20      	ldr	r3, [pc, #128]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 8020742:	695b      	ldr	r3, [r3, #20]
 8020744:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020746:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020748:	690a      	ldr	r2, [r1, #16]
 802074a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 802074c:	bb2b      	cbnz	r3, 802079a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 802074e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020750:	79eb      	ldrb	r3, [r5, #7]
 8020752:	2b00      	cmp	r3, #0
 8020754:	d12b      	bne.n	80207ae <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8020756:	7a2b      	ldrb	r3, [r5, #8]
 8020758:	b19b      	cbz	r3, 8020782 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802075a:	4c1a      	ldr	r4, [pc, #104]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 802075c:	6a20      	ldr	r0, [r4, #32]
 802075e:	f7f8 fd17 	bl	8019190 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8020762:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020764:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8020766:	2000      	movs	r0, #0
 8020768:	f7f9 f8b8 	bl	80198dc <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 802076c:	7a6b      	ldrb	r3, [r5, #9]
 802076e:	b143      	cbz	r3, 8020782 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020770:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020772:	f7f8 fd0d 	bl	8019190 <lwip_htonl>
 8020776:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8020778:	a901      	add	r1, sp, #4
 802077a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802077c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 802077e:	f7f9 f8ad 	bl	80198dc <dns_setserver>
}
 8020782:	b003      	add	sp, #12
 8020784:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8020786:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020788:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802078c:	08db      	lsrs	r3, r3, #3
 802078e:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020790:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020792:	690a      	ldr	r2, [r1, #16]
 8020794:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020796:	2b00      	cmp	r3, #0
 8020798:	d0d9      	beq.n	802074e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 802079a:	4b0a      	ldr	r3, [pc, #40]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 802079c:	6998      	ldr	r0, [r3, #24]
 802079e:	f7f8 fcf7 	bl	8019190 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80207a2:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80207a4:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 80207a6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80207a8:	79eb      	ldrb	r3, [r5, #7]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d0d3      	beq.n	8020756 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80207ae:	4b05      	ldr	r3, [pc, #20]	; (80207c4 <dhcp_handle_ack.isra.0+0xac>)
 80207b0:	69d8      	ldr	r0, [r3, #28]
 80207b2:	f7f8 fced 	bl	8019190 <lwip_htonl>
 80207b6:	6260      	str	r0, [r4, #36]	; 0x24
 80207b8:	e7cd      	b.n	8020756 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80207ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80207bc:	085b      	lsrs	r3, r3, #1
 80207be:	e7bc      	b.n	802073a <dhcp_handle_ack.isra.0+0x22>
 80207c0:	2002e130 	.word	0x2002e130
 80207c4:	2002e13c 	.word	0x2002e13c

080207c8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80207c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80207cc:	4681      	mov	r9, r0
 80207ce:	2800      	cmp	r0, #0
 80207d0:	f000 8097 	beq.w	8020902 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80207d4:	460c      	mov	r4, r1
 80207d6:	2900      	cmp	r1, #0
 80207d8:	f000 808a 	beq.w	80208f0 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80207dc:	4616      	mov	r6, r2
 80207de:	f44f 719a 	mov.w	r1, #308	; 0x134
 80207e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80207e6:	2036      	movs	r0, #54	; 0x36
 80207e8:	461f      	mov	r7, r3
 80207ea:	f7fa fb37 	bl	801ae5c <pbuf_alloc>
  if (p_out == NULL) {
 80207ee:	4605      	mov	r5, r0
 80207f0:	2800      	cmp	r0, #0
 80207f2:	d049      	beq.n	8020888 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80207f4:	8943      	ldrh	r3, [r0, #10]
 80207f6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80207fa:	d371      	bcc.n	80208e0 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80207fc:	2e03      	cmp	r6, #3
 80207fe:	d051      	beq.n	80208a4 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8020800:	79a3      	ldrb	r3, [r4, #6]
 8020802:	2b00      	cmp	r3, #0
 8020804:	d043      	beq.n	802088e <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8020806:	4b43      	ldr	r3, [pc, #268]	; (8020914 <dhcp_create_msg+0x14c>)
 8020808:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 802080a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802080e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8020812:	2100      	movs	r1, #0
    dhcp->xid = xid;
 8020814:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8020816:	4640      	mov	r0, r8
 8020818:	f003 fe1e 	bl	8024458 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 802081c:	2301      	movs	r3, #1
 802081e:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8020822:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020826:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 802082a:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802082e:	6820      	ldr	r0, [r4, #0]
 8020830:	f7f8 fcae 	bl	8019190 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020834:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020836:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802083a:	d12d      	bne.n	8020898 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 802083c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020840:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020844:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8020848:	f109 0434 	add.w	r4, r9, #52	; 0x34
 802084c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020850:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020854:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020856:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802085a:	d1f9      	bne.n	8020850 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802085c:	2363      	movs	r3, #99	; 0x63
 802085e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8020862:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020866:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 802086a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 802086e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020870:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8020874:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8020876:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 802087a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802087c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8020880:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8020884:	2303      	movs	r3, #3
 8020886:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8020888:	4628      	mov	r0, r5
 802088a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 802088e:	f004 fe25 	bl	80254dc <rand>
 8020892:	4b20      	ldr	r3, [pc, #128]	; (8020914 <dhcp_create_msg+0x14c>)
 8020894:	6018      	str	r0, [r3, #0]
 8020896:	e7b8      	b.n	802080a <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020898:	1ff3      	subs	r3, r6, #7
 802089a:	2b01      	cmp	r3, #1
 802089c:	d9ce      	bls.n	802083c <dhcp_create_msg+0x74>
 802089e:	2e03      	cmp	r6, #3
 80208a0:	d1d0      	bne.n	8020844 <dhcp_create_msg+0x7c>
 80208a2:	e018      	b.n	80208d6 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80208a4:	7963      	ldrb	r3, [r4, #5]
 80208a6:	2b03      	cmp	r3, #3
 80208a8:	d0aa      	beq.n	8020800 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 80208aa:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80208ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 80208b2:	2100      	movs	r1, #0
 80208b4:	4640      	mov	r0, r8
 80208b6:	f003 fdcf 	bl	8024458 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 80208ba:	2301      	movs	r3, #1
 80208bc:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80208c0:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 80208c4:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 80208c8:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80208cc:	6820      	ldr	r0, [r4, #0]
 80208ce:	f7f8 fc5f 	bl	8019190 <lwip_htonl>
 80208d2:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80208d6:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80208d8:	3b04      	subs	r3, #4
 80208da:	2b01      	cmp	r3, #1
 80208dc:	d8b2      	bhi.n	8020844 <dhcp_create_msg+0x7c>
 80208de:	e7ad      	b.n	802083c <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80208e0:	4b0d      	ldr	r3, [pc, #52]	; (8020918 <dhcp_create_msg+0x150>)
 80208e2:	f240 7271 	movw	r2, #1905	; 0x771
 80208e6:	490d      	ldr	r1, [pc, #52]	; (802091c <dhcp_create_msg+0x154>)
 80208e8:	480d      	ldr	r0, [pc, #52]	; (8020920 <dhcp_create_msg+0x158>)
 80208ea:	f004 fd53 	bl	8025394 <iprintf>
 80208ee:	e785      	b.n	80207fc <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80208f0:	4b09      	ldr	r3, [pc, #36]	; (8020918 <dhcp_create_msg+0x150>)
 80208f2:	f240 726a 	movw	r2, #1898	; 0x76a
 80208f6:	490b      	ldr	r1, [pc, #44]	; (8020924 <dhcp_create_msg+0x15c>)
 80208f8:	4625      	mov	r5, r4
 80208fa:	4809      	ldr	r0, [pc, #36]	; (8020920 <dhcp_create_msg+0x158>)
 80208fc:	f004 fd4a 	bl	8025394 <iprintf>
 8020900:	e7c2      	b.n	8020888 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8020902:	4b05      	ldr	r3, [pc, #20]	; (8020918 <dhcp_create_msg+0x150>)
 8020904:	f240 7269 	movw	r2, #1897	; 0x769
 8020908:	4907      	ldr	r1, [pc, #28]	; (8020928 <dhcp_create_msg+0x160>)
 802090a:	464d      	mov	r5, r9
 802090c:	4804      	ldr	r0, [pc, #16]	; (8020920 <dhcp_create_msg+0x158>)
 802090e:	f004 fd41 	bl	8025394 <iprintf>
 8020912:	e7b9      	b.n	8020888 <dhcp_create_msg+0xc0>
 8020914:	2002e164 	.word	0x2002e164
 8020918:	080452a0 	.word	0x080452a0
 802091c:	080453d4 	.word	0x080453d4
 8020920:	08029fe8 	.word	0x08029fe8
 8020924:	080453b4 	.word	0x080453b4
 8020928:	08045394 	.word	0x08045394

0802092c <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 802092c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020930:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8020934:	b087      	sub	sp, #28
 8020936:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8020938:	f89a 3005 	ldrb.w	r3, [sl, #5]
 802093c:	2b03      	cmp	r3, #3
 802093e:	d007      	beq.n	8020950 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8020940:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020942:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8020944:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8020948:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 802094c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020950:	f10d 0316 	add.w	r3, sp, #22
 8020954:	2203      	movs	r2, #3
 8020956:	4651      	mov	r1, sl
 8020958:	4648      	mov	r0, r9
 802095a:	f7ff ff35 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 802095e:	4607      	mov	r7, r0
 8020960:	2800      	cmp	r0, #0
 8020962:	f000 808d 	beq.w	8020a80 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020966:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802096a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802096c:	f104 0804 	add.w	r8, r4, #4
 8020970:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020972:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020974:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020978:	f200 80a3 	bhi.w	8020ac2 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 802097c:	2239      	movs	r2, #57	; 0x39
 802097e:	1c63      	adds	r3, r4, #1
 8020980:	fa1f fb85 	uxth.w	fp, r5
 8020984:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020986:	b29b      	uxth	r3, r3
 8020988:	2202      	movs	r2, #2
 802098a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802098c:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020990:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020994:	2b44      	cmp	r3, #68	; 0x44
 8020996:	f200 80ac 	bhi.w	8020af2 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802099a:	2202      	movs	r2, #2
 802099c:	1ce3      	adds	r3, r4, #3
 802099e:	fa1f f588 	uxth.w	r5, r8
 80209a2:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80209a6:	b29b      	uxth	r3, r3
 80209a8:	2240      	movs	r2, #64	; 0x40
 80209aa:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209ac:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80209ae:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209b2:	2b44      	cmp	r3, #68	; 0x44
 80209b4:	f200 8095 	bhi.w	8020ae2 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 80209b8:	1d63      	adds	r3, r4, #5
 80209ba:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 80209bc:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 80209be:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80209c0:	b29b      	uxth	r3, r3
 80209c2:	2204      	movs	r2, #4
 80209c4:	b2a4      	uxth	r4, r4
 80209c6:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209c8:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80209cc:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209d0:	f7f8 fbde 	bl	8019190 <lwip_htonl>
 80209d4:	4631      	mov	r1, r6
 80209d6:	4602      	mov	r2, r0
 80209d8:	4620      	mov	r0, r4
 80209da:	f7ff fd55 	bl	8020488 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209de:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80209e0:	4605      	mov	r5, r0
 80209e2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209e6:	2b44      	cmp	r3, #68	; 0x44
 80209e8:	9303      	str	r3, [sp, #12]
 80209ea:	d872      	bhi.n	8020ad2 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 80209ec:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 80209ee:	2237      	movs	r2, #55	; 0x37
 80209f0:	1c6b      	adds	r3, r5, #1
 80209f2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8020b28 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 80209f6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 80209f8:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80209fa:	b29b      	uxth	r3, r3
 80209fc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80209fe:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a00:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 8020a04:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a06:	493f      	ldr	r1, [pc, #252]	; (8020b04 <dhcp_reboot.isra.0+0x1d8>)
 8020a08:	4b3f      	ldr	r3, [pc, #252]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020a0a:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a0e:	d80c      	bhi.n	8020a2a <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 8020a10:	1c62      	adds	r2, r4, #1
 8020a12:	f806 b004 	strb.w	fp, [r6, r4]
 8020a16:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a18:	4a3c      	ldr	r2, [pc, #240]	; (8020b0c <dhcp_reboot.isra.0+0x1e0>)
 8020a1a:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a1c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020a20:	d00b      	beq.n	8020a3a <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a22:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020a24:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020a28:	d9f2      	bls.n	8020a10 <dhcp_reboot.isra.0+0xe4>
 8020a2a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020a2e:	4838      	ldr	r0, [pc, #224]	; (8020b10 <dhcp_reboot.isra.0+0x1e4>)
 8020a30:	f004 fcb0 	bl	8025394 <iprintf>
 8020a34:	4b34      	ldr	r3, [pc, #208]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
 8020a36:	4933      	ldr	r1, [pc, #204]	; (8020b04 <dhcp_reboot.isra.0+0x1d8>)
 8020a38:	e7ea      	b.n	8020a10 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 8020a3a:	1de8      	adds	r0, r5, #7
 8020a3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020a40:	22ff      	movs	r2, #255	; 0xff
 8020a42:	b280      	uxth	r0, r0
 8020a44:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020a46:	2843      	cmp	r0, #67	; 0x43
 8020a48:	d808      	bhi.n	8020a5c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8020a4a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 8020a4e:	4430      	add	r0, r6
 8020a50:	2100      	movs	r1, #0
 8020a52:	b2ad      	uxth	r5, r5
 8020a54:	1c6a      	adds	r2, r5, #1
 8020a56:	f003 fcff 	bl	8024458 <memset>
 8020a5a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020a5c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020a60:	4638      	mov	r0, r7
 8020a62:	b289      	uxth	r1, r1
 8020a64:	f7fa fab4 	bl	801afd0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020a68:	482a      	ldr	r0, [pc, #168]	; (8020b14 <dhcp_reboot.isra.0+0x1e8>)
 8020a6a:	2343      	movs	r3, #67	; 0x43
 8020a6c:	4a2a      	ldr	r2, [pc, #168]	; (8020b18 <dhcp_reboot.isra.0+0x1ec>)
 8020a6e:	6800      	ldr	r0, [r0, #0]
 8020a70:	4639      	mov	r1, r7
 8020a72:	f8cd 9000 	str.w	r9, [sp]
 8020a76:	f7ff fba5 	bl	80201c4 <udp_sendto_if>
    pbuf_free(p_out);
 8020a7a:	4638      	mov	r0, r7
 8020a7c:	f7fa fbc0 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 8020a80:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8020a84:	2bff      	cmp	r3, #255	; 0xff
 8020a86:	d016      	beq.n	8020ab6 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8020a88:	3301      	adds	r3, #1
 8020a8a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020a8c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8020a8e:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020a92:	d810      	bhi.n	8020ab6 <dhcp_reboot.isra.0+0x18a>
 8020a94:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020a98:	4a20      	ldr	r2, [pc, #128]	; (8020b1c <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020a9a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8020a9e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020aa0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020aa4:	b29b      	uxth	r3, r3
 8020aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8020aaa:	095b      	lsrs	r3, r3, #5
 8020aac:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020ab0:	b007      	add	sp, #28
 8020ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020ab6:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020ab8:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020abc:	b007      	add	sp, #28
 8020abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ac2:	4b11      	ldr	r3, [pc, #68]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
 8020ac4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ac8:	4915      	ldr	r1, [pc, #84]	; (8020b20 <dhcp_reboot.isra.0+0x1f4>)
 8020aca:	4811      	ldr	r0, [pc, #68]	; (8020b10 <dhcp_reboot.isra.0+0x1e4>)
 8020acc:	f004 fc62 	bl	8025394 <iprintf>
 8020ad0:	e754      	b.n	802097c <dhcp_reboot.isra.0+0x50>
 8020ad2:	4b0d      	ldr	r3, [pc, #52]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
 8020ad4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ad8:	4911      	ldr	r1, [pc, #68]	; (8020b20 <dhcp_reboot.isra.0+0x1f4>)
 8020ada:	480d      	ldr	r0, [pc, #52]	; (8020b10 <dhcp_reboot.isra.0+0x1e4>)
 8020adc:	f004 fc5a 	bl	8025394 <iprintf>
 8020ae0:	e784      	b.n	80209ec <dhcp_reboot.isra.0+0xc0>
 8020ae2:	4b09      	ldr	r3, [pc, #36]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
 8020ae4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ae8:	490d      	ldr	r1, [pc, #52]	; (8020b20 <dhcp_reboot.isra.0+0x1f4>)
 8020aea:	4809      	ldr	r0, [pc, #36]	; (8020b10 <dhcp_reboot.isra.0+0x1e4>)
 8020aec:	f004 fc52 	bl	8025394 <iprintf>
 8020af0:	e762      	b.n	80209b8 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020af2:	4b05      	ldr	r3, [pc, #20]	; (8020b08 <dhcp_reboot.isra.0+0x1dc>)
 8020af4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020af8:	490a      	ldr	r1, [pc, #40]	; (8020b24 <dhcp_reboot.isra.0+0x1f8>)
 8020afa:	4805      	ldr	r0, [pc, #20]	; (8020b10 <dhcp_reboot.isra.0+0x1e4>)
 8020afc:	f004 fc4a 	bl	8025394 <iprintf>
 8020b00:	e74b      	b.n	802099a <dhcp_reboot.isra.0+0x6e>
 8020b02:	bf00      	nop
 8020b04:	08045494 	.word	0x08045494
 8020b08:	080452a0 	.word	0x080452a0
 8020b0c:	0804561c 	.word	0x0804561c
 8020b10:	08029fe8 	.word	0x08029fe8
 8020b14:	2002e128 	.word	0x2002e128
 8020b18:	08045958 	.word	0x08045958
 8020b1c:	10624dd3 	.word	0x10624dd3
 8020b20:	08045414 	.word	0x08045414
 8020b24:	08045458 	.word	0x08045458
 8020b28:	08045619 	.word	0x08045619

08020b2c <dhcp_discover>:
{
 8020b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020b30:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020b32:	2300      	movs	r3, #0
{
 8020b34:	b087      	sub	sp, #28
 8020b36:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020b38:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020b3a:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 8020b3c:	2a06      	cmp	r2, #6
 8020b3e:	d003      	beq.n	8020b48 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8020b40:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8020b42:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8020b44:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8020b46:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8020b48:	f10d 0316 	add.w	r3, sp, #22
 8020b4c:	2201      	movs	r2, #1
 8020b4e:	4639      	mov	r1, r7
 8020b50:	4658      	mov	r0, fp
 8020b52:	f7ff fe39 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 8020b56:	4605      	mov	r5, r0
 8020b58:	2800      	cmp	r0, #0
 8020b5a:	f000 8081 	beq.w	8020c60 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b5e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020b62:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b64:	f104 0804 	add.w	r8, r4, #4
 8020b68:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b6c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020b6e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020b72:	f200 809a 	bhi.w	8020caa <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8020b76:	2239      	movs	r2, #57	; 0x39
 8020b78:	1c63      	adds	r3, r4, #1
 8020b7a:	fa1f f189 	uxth.w	r1, r9
 8020b7e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020b80:	b29b      	uxth	r3, r3
 8020b82:	2202      	movs	r2, #2
 8020b84:	9103      	str	r1, [sp, #12]
 8020b86:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020b88:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020b8a:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020b8e:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020b90:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020b94:	f200 8091 	bhi.w	8020cba <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020b98:	1ce3      	adds	r3, r4, #3
 8020b9a:	fa1f f988 	uxth.w	r9, r8
 8020b9e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020ba2:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020ba4:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020ba6:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020ba8:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bac:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020bb0:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020bb4:	2b44      	cmp	r3, #68	; 0x44
 8020bb6:	d870      	bhi.n	8020c9a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8020bb8:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8020bbc:	2237      	movs	r2, #55	; 0x37
 8020bbe:	1d63      	adds	r3, r4, #5
 8020bc0:	f8df a130 	ldr.w	sl, [pc, #304]	; 8020cf4 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8020bc4:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020bc8:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8020bcc:	b29b      	uxth	r3, r3
 8020bce:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bd0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bd4:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 8020bd8:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bda:	493c      	ldr	r1, [pc, #240]	; (8020ccc <dhcp_discover+0x1a0>)
 8020bdc:	4b3c      	ldr	r3, [pc, #240]	; (8020cd0 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020bde:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020be2:	d80f      	bhi.n	8020c04 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 8020be4:	f108 0201 	add.w	r2, r8, #1
 8020be8:	f806 9008 	strb.w	r9, [r6, r8]
 8020bec:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020bf0:	4a38      	ldr	r2, [pc, #224]	; (8020cd4 <dhcp_discover+0x1a8>)
 8020bf2:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020bf4:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020bf8:	d00c      	beq.n	8020c14 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020bfa:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020bfe:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020c02:	d9ef      	bls.n	8020be4 <dhcp_discover+0xb8>
 8020c04:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020c08:	4833      	ldr	r0, [pc, #204]	; (8020cd8 <dhcp_discover+0x1ac>)
 8020c0a:	f004 fbc3 	bl	8025394 <iprintf>
 8020c0e:	4b30      	ldr	r3, [pc, #192]	; (8020cd0 <dhcp_discover+0x1a4>)
 8020c10:	492e      	ldr	r1, [pc, #184]	; (8020ccc <dhcp_discover+0x1a0>)
 8020c12:	e7e7      	b.n	8020be4 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 8020c14:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 8020c18:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8020c1c:	22ff      	movs	r2, #255	; 0xff
 8020c1e:	b280      	uxth	r0, r0
 8020c20:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c22:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8020c24:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020c26:	d808      	bhi.n	8020c3a <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 8020c28:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 8020c2c:	4430      	add	r0, r6
 8020c2e:	2100      	movs	r1, #0
 8020c30:	b2a4      	uxth	r4, r4
 8020c32:	1c62      	adds	r2, r4, #1
 8020c34:	f003 fc10 	bl	8024458 <memset>
 8020c38:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020c3a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020c3e:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020c40:	4c26      	ldr	r4, [pc, #152]	; (8020cdc <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020c42:	b289      	uxth	r1, r1
 8020c44:	f7fa f9c4 	bl	801afd0 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020c48:	4825      	ldr	r0, [pc, #148]	; (8020ce0 <dhcp_discover+0x1b4>)
 8020c4a:	2343      	movs	r3, #67	; 0x43
 8020c4c:	4a25      	ldr	r2, [pc, #148]	; (8020ce4 <dhcp_discover+0x1b8>)
 8020c4e:	6800      	ldr	r0, [r0, #0]
 8020c50:	4629      	mov	r1, r5
 8020c52:	e9cd b400 	strd	fp, r4, [sp]
 8020c56:	f7ff fa01 	bl	802005c <udp_sendto_if_src>
    pbuf_free(p_out);
 8020c5a:	4628      	mov	r0, r5
 8020c5c:	f7fa fad0 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 8020c60:	79bb      	ldrb	r3, [r7, #6]
 8020c62:	2bff      	cmp	r3, #255	; 0xff
 8020c64:	d013      	beq.n	8020c8e <dhcp_discover+0x162>
    dhcp->tries++;
 8020c66:	3301      	adds	r3, #1
 8020c68:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c6a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020c6c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c6e:	d80e      	bhi.n	8020c8e <dhcp_discover+0x162>
 8020c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c74:	491c      	ldr	r1, [pc, #112]	; (8020ce8 <dhcp_discover+0x1bc>)
}
 8020c76:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020c78:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c7a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020c7e:	b29b      	uxth	r3, r3
 8020c80:	fba1 2303 	umull	r2, r3, r1, r3
 8020c84:	095b      	lsrs	r3, r3, #5
 8020c86:	813b      	strh	r3, [r7, #8]
}
 8020c88:	b007      	add	sp, #28
 8020c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020c8e:	2378      	movs	r3, #120	; 0x78
}
 8020c90:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020c92:	813b      	strh	r3, [r7, #8]
}
 8020c94:	b007      	add	sp, #28
 8020c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020c9a:	4b0d      	ldr	r3, [pc, #52]	; (8020cd0 <dhcp_discover+0x1a4>)
 8020c9c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ca0:	4912      	ldr	r1, [pc, #72]	; (8020cec <dhcp_discover+0x1c0>)
 8020ca2:	480d      	ldr	r0, [pc, #52]	; (8020cd8 <dhcp_discover+0x1ac>)
 8020ca4:	f004 fb76 	bl	8025394 <iprintf>
 8020ca8:	e786      	b.n	8020bb8 <dhcp_discover+0x8c>
 8020caa:	4b09      	ldr	r3, [pc, #36]	; (8020cd0 <dhcp_discover+0x1a4>)
 8020cac:	f240 529a 	movw	r2, #1434	; 0x59a
 8020cb0:	490e      	ldr	r1, [pc, #56]	; (8020cec <dhcp_discover+0x1c0>)
 8020cb2:	4809      	ldr	r0, [pc, #36]	; (8020cd8 <dhcp_discover+0x1ac>)
 8020cb4:	f004 fb6e 	bl	8025394 <iprintf>
 8020cb8:	e75d      	b.n	8020b76 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020cba:	4b05      	ldr	r3, [pc, #20]	; (8020cd0 <dhcp_discover+0x1a4>)
 8020cbc:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020cc0:	490b      	ldr	r1, [pc, #44]	; (8020cf0 <dhcp_discover+0x1c4>)
 8020cc2:	4805      	ldr	r0, [pc, #20]	; (8020cd8 <dhcp_discover+0x1ac>)
 8020cc4:	f004 fb66 	bl	8025394 <iprintf>
 8020cc8:	e766      	b.n	8020b98 <dhcp_discover+0x6c>
 8020cca:	bf00      	nop
 8020ccc:	08045494 	.word	0x08045494
 8020cd0:	080452a0 	.word	0x080452a0
 8020cd4:	0804561c 	.word	0x0804561c
 8020cd8:	08029fe8 	.word	0x08029fe8
 8020cdc:	08045954 	.word	0x08045954
 8020ce0:	2002e128 	.word	0x2002e128
 8020ce4:	08045958 	.word	0x08045958
 8020ce8:	10624dd3 	.word	0x10624dd3
 8020cec:	08045414 	.word	0x08045414
 8020cf0:	08045458 	.word	0x08045458
 8020cf4:	08045619 	.word	0x08045619

08020cf8 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020cf8:	2800      	cmp	r0, #0
 8020cfa:	f000 8112 	beq.w	8020f22 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 8020cfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 8020d02:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 8020d04:	b087      	sub	sp, #28
 8020d06:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020d08:	2e00      	cmp	r6, #0
 8020d0a:	f000 8111 	beq.w	8020f30 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 8020d0e:	7973      	ldrb	r3, [r6, #5]
 8020d10:	2b01      	cmp	r3, #1
 8020d12:	d004      	beq.n	8020d1e <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 8020d14:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020d16:	2201      	movs	r2, #1
    dhcp->tries = 0;
 8020d18:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 8020d1a:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 8020d1c:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020d1e:	f10d 0316 	add.w	r3, sp, #22
 8020d22:	2203      	movs	r2, #3
 8020d24:	4631      	mov	r1, r6
 8020d26:	4658      	mov	r0, fp
 8020d28:	f7ff fd4e 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 8020d2c:	4605      	mov	r5, r0
 8020d2e:	2800      	cmp	r0, #0
 8020d30:	f000 80b4 	beq.w	8020e9c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d34:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8020d38:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d3a:	f107 0804 	add.w	r8, r7, #4
 8020d3e:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d42:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d44:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020d48:	f200 80cb 	bhi.w	8020ee2 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 8020d4c:	2239      	movs	r2, #57	; 0x39
 8020d4e:	1c7b      	adds	r3, r7, #1
 8020d50:	fa1f f189 	uxth.w	r1, r9
 8020d54:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020d56:	b29b      	uxth	r3, r3
 8020d58:	2202      	movs	r2, #2
 8020d5a:	9103      	str	r1, [sp, #12]
 8020d5c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d5e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020d60:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d64:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020d66:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020d6a:	f200 80c2 	bhi.w	8020ef2 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020d6e:	1cfb      	adds	r3, r7, #3
 8020d70:	fa1f f988 	uxth.w	r9, r8
 8020d74:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020d78:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020d7a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020d7c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020d7e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d82:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020d86:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020d8a:	2b44      	cmp	r3, #68	; 0x44
 8020d8c:	f200 80b9 	bhi.w	8020f02 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8020d90:	1d7b      	adds	r3, r7, #5
 8020d92:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8020d94:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8020d96:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 8020d9a:	b29b      	uxth	r3, r3
 8020d9c:	2204      	movs	r2, #4
 8020d9e:	b2bf      	uxth	r7, r7
 8020da0:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020da2:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020da4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020da8:	f7f8 f9f2 	bl	8019190 <lwip_htonl>
 8020dac:	4621      	mov	r1, r4
 8020dae:	4602      	mov	r2, r0
 8020db0:	4638      	mov	r0, r7
 8020db2:	f7ff fb69 	bl	8020488 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020db6:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020db8:	4607      	mov	r7, r0
 8020dba:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020dbe:	2b44      	cmp	r3, #68	; 0x44
 8020dc0:	f200 80a7 	bhi.w	8020f12 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8020dc4:	2236      	movs	r2, #54	; 0x36
 8020dc6:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8020dc8:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 8020dcc:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020dce:	b29b      	uxth	r3, r3
 8020dd0:	2204      	movs	r2, #4
 8020dd2:	fa1f f888 	uxth.w	r8, r8
 8020dd6:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020dd8:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8020dda:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020dde:	f7f8 f9d7 	bl	8019190 <lwip_htonl>
 8020de2:	4621      	mov	r1, r4
 8020de4:	4602      	mov	r2, r0
 8020de6:	4640      	mov	r0, r8
 8020de8:	f7ff fb4e 	bl	8020488 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020dec:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8020dee:	4680      	mov	r8, r0
 8020df0:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020df4:	2b44      	cmp	r3, #68	; 0x44
 8020df6:	9303      	str	r3, [sp, #12]
 8020df8:	d86b      	bhi.n	8020ed2 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 8020dfa:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 8020dfe:	2237      	movs	r2, #55	; 0x37
 8020e00:	f108 0301 	add.w	r3, r8, #1
 8020e04:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8020f74 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 8020e08:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 8020e0a:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 8020e0e:	b29b      	uxth	r3, r3
 8020e10:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e12:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020e14:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8020e18:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e1a:	494a      	ldr	r1, [pc, #296]	; (8020f44 <dhcp_select.isra.0+0x24c>)
 8020e1c:	4b4a      	ldr	r3, [pc, #296]	; (8020f48 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8020e1e:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e22:	d80c      	bhi.n	8020e3e <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 8020e24:	1c7a      	adds	r2, r7, #1
 8020e26:	f804 a007 	strb.w	sl, [r4, r7]
 8020e2a:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020e2c:	4a47      	ldr	r2, [pc, #284]	; (8020f4c <dhcp_select.isra.0+0x254>)
 8020e2e:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020e30:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020e34:	d00b      	beq.n	8020e4e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e36:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020e38:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020e3c:	d9f2      	bls.n	8020e24 <dhcp_select.isra.0+0x12c>
 8020e3e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020e42:	4843      	ldr	r0, [pc, #268]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020e44:	f004 faa6 	bl	8025394 <iprintf>
 8020e48:	4b3f      	ldr	r3, [pc, #252]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020e4a:	493e      	ldr	r1, [pc, #248]	; (8020f44 <dhcp_select.isra.0+0x24c>)
 8020e4c:	e7ea      	b.n	8020e24 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 8020e4e:	f108 0007 	add.w	r0, r8, #7
 8020e52:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020e56:	22ff      	movs	r2, #255	; 0xff
 8020e58:	b280      	uxth	r0, r0
 8020e5a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020e5c:	2843      	cmp	r0, #67	; 0x43
 8020e5e:	d80a      	bhi.n	8020e76 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8020e60:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8020e64:	4420      	add	r0, r4
 8020e66:	2100      	movs	r1, #0
 8020e68:	fa1f f888 	uxth.w	r8, r8
 8020e6c:	f108 0201 	add.w	r2, r8, #1
 8020e70:	f003 faf2 	bl	8024458 <memset>
 8020e74:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020e76:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020e7a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020e7c:	4c35      	ldr	r4, [pc, #212]	; (8020f54 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020e7e:	b289      	uxth	r1, r1
 8020e80:	f7fa f8a6 	bl	801afd0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020e84:	4834      	ldr	r0, [pc, #208]	; (8020f58 <dhcp_select.isra.0+0x260>)
 8020e86:	2343      	movs	r3, #67	; 0x43
 8020e88:	4a34      	ldr	r2, [pc, #208]	; (8020f5c <dhcp_select.isra.0+0x264>)
 8020e8a:	6800      	ldr	r0, [r0, #0]
 8020e8c:	4629      	mov	r1, r5
 8020e8e:	e9cd b400 	strd	fp, r4, [sp]
 8020e92:	f7ff f8e3 	bl	802005c <udp_sendto_if_src>
    pbuf_free(p_out);
 8020e96:	4628      	mov	r0, r5
 8020e98:	f7fa f9b2 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 8020e9c:	79b3      	ldrb	r3, [r6, #6]
 8020e9e:	2bff      	cmp	r3, #255	; 0xff
 8020ea0:	d012      	beq.n	8020ec8 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8020ea2:	3301      	adds	r3, #1
 8020ea4:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020ea6:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020ea8:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020eaa:	d80d      	bhi.n	8020ec8 <dhcp_select.isra.0+0x1d0>
 8020eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020eb0:	492b      	ldr	r1, [pc, #172]	; (8020f60 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020eb2:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020eb4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020eb8:	b29b      	uxth	r3, r3
 8020eba:	fba1 2303 	umull	r2, r3, r1, r3
 8020ebe:	095b      	lsrs	r3, r3, #5
 8020ec0:	8133      	strh	r3, [r6, #8]
}
 8020ec2:	b007      	add	sp, #28
 8020ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020ec8:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020eca:	8133      	strh	r3, [r6, #8]
}
 8020ecc:	b007      	add	sp, #28
 8020ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020ed2:	4b1d      	ldr	r3, [pc, #116]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020ed4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ed8:	4922      	ldr	r1, [pc, #136]	; (8020f64 <dhcp_select.isra.0+0x26c>)
 8020eda:	481d      	ldr	r0, [pc, #116]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020edc:	f004 fa5a 	bl	8025394 <iprintf>
 8020ee0:	e78b      	b.n	8020dfa <dhcp_select.isra.0+0x102>
 8020ee2:	4b19      	ldr	r3, [pc, #100]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020ee4:	f240 529a 	movw	r2, #1434	; 0x59a
 8020ee8:	491e      	ldr	r1, [pc, #120]	; (8020f64 <dhcp_select.isra.0+0x26c>)
 8020eea:	4819      	ldr	r0, [pc, #100]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020eec:	f004 fa52 	bl	8025394 <iprintf>
 8020ef0:	e72c      	b.n	8020d4c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020ef2:	4b15      	ldr	r3, [pc, #84]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020ef4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020ef8:	491b      	ldr	r1, [pc, #108]	; (8020f68 <dhcp_select.isra.0+0x270>)
 8020efa:	4815      	ldr	r0, [pc, #84]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020efc:	f004 fa4a 	bl	8025394 <iprintf>
 8020f00:	e735      	b.n	8020d6e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020f02:	4b11      	ldr	r3, [pc, #68]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020f04:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f08:	4916      	ldr	r1, [pc, #88]	; (8020f64 <dhcp_select.isra.0+0x26c>)
 8020f0a:	4811      	ldr	r0, [pc, #68]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020f0c:	f004 fa42 	bl	8025394 <iprintf>
 8020f10:	e73e      	b.n	8020d90 <dhcp_select.isra.0+0x98>
 8020f12:	4b0d      	ldr	r3, [pc, #52]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020f14:	f240 529a 	movw	r2, #1434	; 0x59a
 8020f18:	4912      	ldr	r1, [pc, #72]	; (8020f64 <dhcp_select.isra.0+0x26c>)
 8020f1a:	480d      	ldr	r0, [pc, #52]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020f1c:	f004 fa3a 	bl	8025394 <iprintf>
 8020f20:	e750      	b.n	8020dc4 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8020f22:	4b09      	ldr	r3, [pc, #36]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020f24:	f240 1277 	movw	r2, #375	; 0x177
 8020f28:	4910      	ldr	r1, [pc, #64]	; (8020f6c <dhcp_select.isra.0+0x274>)
 8020f2a:	4809      	ldr	r0, [pc, #36]	; (8020f50 <dhcp_select.isra.0+0x258>)
 8020f2c:	f004 ba32 	b.w	8025394 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020f30:	4b05      	ldr	r3, [pc, #20]	; (8020f48 <dhcp_select.isra.0+0x250>)
 8020f32:	f240 1279 	movw	r2, #377	; 0x179
 8020f36:	490e      	ldr	r1, [pc, #56]	; (8020f70 <dhcp_select.isra.0+0x278>)
 8020f38:	4805      	ldr	r0, [pc, #20]	; (8020f50 <dhcp_select.isra.0+0x258>)
}
 8020f3a:	b007      	add	sp, #28
 8020f3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020f40:	f004 ba28 	b.w	8025394 <iprintf>
 8020f44:	08045494 	.word	0x08045494
 8020f48:	080452a0 	.word	0x080452a0
 8020f4c:	0804561c 	.word	0x0804561c
 8020f50:	08029fe8 	.word	0x08029fe8
 8020f54:	08045954 	.word	0x08045954
 8020f58:	2002e128 	.word	0x2002e128
 8020f5c:	08045958 	.word	0x08045958
 8020f60:	10624dd3 	.word	0x10624dd3
 8020f64:	08045414 	.word	0x08045414
 8020f68:	08045458 	.word	0x08045458
 8020f6c:	080454cc 	.word	0x080454cc
 8020f70:	080454e8 	.word	0x080454e8
 8020f74:	08045619 	.word	0x08045619

08020f78 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8020f78:	4ba5      	ldr	r3, [pc, #660]	; (8021210 <dhcp_recv+0x298>)
{
 8020f7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8020f7e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8020f82:	b08b      	sub	sp, #44	; 0x2c
 8020f84:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020f86:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8020f8a:	f1b9 0f00 	cmp.w	r9, #0
 8020f8e:	d04b      	beq.n	8021028 <dhcp_recv+0xb0>
 8020f90:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020f94:	2b00      	cmp	r3, #0
 8020f96:	d047      	beq.n	8021028 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8020f98:	8953      	ldrh	r3, [r2, #10]
 8020f9a:	2b2b      	cmp	r3, #43	; 0x2b
 8020f9c:	d944      	bls.n	8021028 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8020f9e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8020fa0:	782b      	ldrb	r3, [r5, #0]
 8020fa2:	2b02      	cmp	r3, #2
 8020fa4:	d140      	bne.n	8021028 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fa6:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8020faa:	b186      	cbz	r6, 8020fce <dhcp_recv+0x56>
 8020fac:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8020fb0:	f105 021c 	add.w	r2, r5, #28
 8020fb4:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fba:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fbc:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fc0:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020fc2:	4284      	cmp	r4, r0
 8020fc4:	d130      	bne.n	8021028 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020fc6:	2b06      	cmp	r3, #6
 8020fc8:	d001      	beq.n	8020fce <dhcp_recv+0x56>
 8020fca:	42b3      	cmp	r3, r6
 8020fcc:	d3f3      	bcc.n	8020fb6 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8020fce:	6868      	ldr	r0, [r5, #4]
 8020fd0:	f7f8 f8de 	bl	8019190 <lwip_htonl>
 8020fd4:	f8d9 3000 	ldr.w	r3, [r9]
 8020fd8:	4298      	cmp	r0, r3
 8020fda:	d125      	bne.n	8021028 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8020fdc:	4b8d      	ldr	r3, [pc, #564]	; (8021214 <dhcp_recv+0x29c>)
 8020fde:	2200      	movs	r2, #0
 8020fe0:	605a      	str	r2, [r3, #4]
 8020fe2:	811a      	strh	r2, [r3, #8]
 8020fe4:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8020fe6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8020fea:	2b2b      	cmp	r3, #43	; 0x2b
 8020fec:	d91c      	bls.n	8021028 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 8020fee:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8020ff2:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8020ff4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8020ff8:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 8020ffc:	4693      	mov	fp, r2
 8020ffe:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8021002:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8021006:	e000      	b.n	802100a <dhcp_recv+0x92>
 8021008:	896b      	ldrh	r3, [r5, #10]
 802100a:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 802100c:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8021010:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021014:	d80e      	bhi.n	8021034 <dhcp_recv+0xbc>
    q = q->next;
 8021016:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8021018:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 802101c:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8021020:	2d00      	cmp	r5, #0
 8021022:	d1f1      	bne.n	8021008 <dhcp_recv+0x90>
 8021024:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8021028:	4658      	mov	r0, fp
}
 802102a:	b00b      	add	sp, #44	; 0x2c
 802102c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8021030:	f7fa b8e6 	b.w	801b200 <pbuf_free>
  options = (u8_t *)q->payload;
 8021034:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021036:	45d8      	cmp	r8, fp
 8021038:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 802103c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 802103e:	f080 8140 	bcs.w	80212c2 <dhcp_recv+0x34a>
 8021042:	9c02      	ldr	r4, [sp, #8]
 8021044:	9b01      	ldr	r3, [sp, #4]
 8021046:	5d1a      	ldrb	r2, [r3, r4]
 8021048:	2aff      	cmp	r2, #255	; 0xff
 802104a:	f000 813a 	beq.w	80212c2 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 802104e:	1ca7      	adds	r7, r4, #2
 8021050:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8021052:	42bc      	cmp	r4, r7
 8021054:	d8e6      	bhi.n	8021024 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8021056:	1c61      	adds	r1, r4, #1
 8021058:	896b      	ldrh	r3, [r5, #10]
 802105a:	4299      	cmp	r1, r3
 802105c:	f280 8129 	bge.w	80212b2 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8021060:	9801      	ldr	r0, [sp, #4]
 8021062:	4420      	add	r0, r4
 8021064:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8021066:	2a3b      	cmp	r2, #59	; 0x3b
 8021068:	d83e      	bhi.n	80210e8 <dhcp_recv+0x170>
 802106a:	e8df f012 	tbh	[pc, r2, lsl #1]
 802106e:	0040      	.short	0x0040
 8021070:	003d0053 	.word	0x003d0053
 8021074:	003d00b4 	.word	0x003d00b4
 8021078:	009f003d 	.word	0x009f003d
 802107c:	003d003d 	.word	0x003d003d
 8021080:	003d003d 	.word	0x003d003d
 8021084:	003d003d 	.word	0x003d003d
 8021088:	003d003d 	.word	0x003d003d
 802108c:	003d003d 	.word	0x003d003d
 8021090:	003d003d 	.word	0x003d003d
 8021094:	003d003d 	.word	0x003d003d
 8021098:	003d003d 	.word	0x003d003d
 802109c:	003d003d 	.word	0x003d003d
 80210a0:	003d003d 	.word	0x003d003d
 80210a4:	003d003d 	.word	0x003d003d
 80210a8:	003d003d 	.word	0x003d003d
 80210ac:	003d003d 	.word	0x003d003d
 80210b0:	003d003d 	.word	0x003d003d
 80210b4:	003d003d 	.word	0x003d003d
 80210b8:	003d003d 	.word	0x003d003d
 80210bc:	003d003d 	.word	0x003d003d
 80210c0:	003d003d 	.word	0x003d003d
 80210c4:	003d003d 	.word	0x003d003d
 80210c8:	003d003d 	.word	0x003d003d
 80210cc:	003d003d 	.word	0x003d003d
 80210d0:	003d003d 	.word	0x003d003d
 80210d4:	00f80115 	.word	0x00f80115
 80210d8:	00df0109 	.word	0x00df0109
 80210dc:	003d003d 	.word	0x003d003d
 80210e0:	00ec003d 	.word	0x00ec003d
 80210e4:	00c3      	.short	0x00c3
 80210e6:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 80210e8:	2a00      	cmp	r2, #0
 80210ea:	f040 82a2 	bne.w	8021632 <dhcp_recv+0x6ba>
      offset++;
 80210ee:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 80210f0:	429c      	cmp	r4, r3
 80210f2:	f0c0 80e3 	bcc.w	80212bc <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 80210f6:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 80210f8:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 80210fc:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 80210fe:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8021102:	455c      	cmp	r4, fp
 8021104:	d28e      	bcs.n	8021024 <dhcp_recv+0xac>
        q = q->next;
 8021106:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8021108:	2d00      	cmp	r5, #0
 802110a:	f000 81e1 	beq.w	80214d0 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 802110e:	686b      	ldr	r3, [r5, #4]
 8021110:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8021112:	e797      	b.n	8021044 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021114:	2e04      	cmp	r6, #4
 8021116:	f040 81b5 	bne.w	8021484 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 802111a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 802111e:	429c      	cmp	r4, r3
 8021120:	dc80      	bgt.n	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021122:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8021124:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8021128:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 802112a:	2300      	movs	r3, #0
 802112c:	9405      	str	r4, [sp, #20]
 802112e:	9309      	str	r3, [sp, #36]	; 0x24
 8021130:	4b38      	ldr	r3, [pc, #224]	; (8021214 <dhcp_recv+0x29c>)
 8021132:	eb03 0908 	add.w	r9, r3, r8
 8021136:	4b38      	ldr	r3, [pc, #224]	; (8021218 <dhcp_recv+0x2a0>)
 8021138:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 802113c:	e02b      	b.n	8021196 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 802113e:	f899 3000 	ldrb.w	r3, [r9]
 8021142:	2b00      	cmp	r3, #0
 8021144:	f040 81a8 	bne.w	8021498 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8021148:	2e04      	cmp	r6, #4
 802114a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 802114c:	463b      	mov	r3, r7
 802114e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8021150:	bf28      	it	cs
 8021152:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021154:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8021156:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8021158:	4622      	mov	r2, r4
 802115a:	f7fa f8f5 	bl	801b348 <pbuf_copy_partial>
 802115e:	4284      	cmp	r4, r0
 8021160:	f47f af60 	bne.w	8021024 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8021164:	2e04      	cmp	r6, #4
 8021166:	f240 819a 	bls.w	802149e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 802116a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 802116e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8021172:	f040 81a3 	bne.w	80214bc <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8021176:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021178:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 802117a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 802117c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021180:	f7f8 f806 	bl	8019190 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8021184:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8021186:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8021188:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 802118c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 802118e:	429f      	cmp	r7, r3
            goto decode_next;
 8021190:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8021192:	f63f af47 	bhi.w	8021024 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8021196:	f1b8 0f09 	cmp.w	r8, #9
 802119a:	d9d0      	bls.n	802113e <dhcp_recv+0x1c6>
 802119c:	4b1f      	ldr	r3, [pc, #124]	; (802121c <dhcp_recv+0x2a4>)
 802119e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80211a2:	491f      	ldr	r1, [pc, #124]	; (8021220 <dhcp_recv+0x2a8>)
 80211a4:	481f      	ldr	r0, [pc, #124]	; (8021224 <dhcp_recv+0x2ac>)
 80211a6:	f004 f8f5 	bl	8025394 <iprintf>
 80211aa:	e7c8      	b.n	802113e <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 80211ac:	07b2      	lsls	r2, r6, #30
 80211ae:	f040 81ae 	bne.w	802150e <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80211b2:	2e08      	cmp	r6, #8
 80211b4:	4632      	mov	r2, r6
 80211b6:	bf28      	it	cs
 80211b8:	2208      	movcs	r2, #8
 80211ba:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80211bc:	42b2      	cmp	r2, r6
 80211be:	f240 8241 	bls.w	8021644 <dhcp_recv+0x6cc>
 80211c2:	4b16      	ldr	r3, [pc, #88]	; (802121c <dhcp_recv+0x2a4>)
 80211c4:	f240 623c 	movw	r2, #1596	; 0x63c
 80211c8:	4917      	ldr	r1, [pc, #92]	; (8021228 <dhcp_recv+0x2b0>)
 80211ca:	4816      	ldr	r0, [pc, #88]	; (8021224 <dhcp_recv+0x2ac>)
 80211cc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80211d0:	f004 f8e0 	bl	8025394 <iprintf>
 80211d4:	e728      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80211d6:	2e03      	cmp	r6, #3
 80211d8:	f240 814a 	bls.w	8021470 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 80211dc:	4434      	add	r4, r6
 80211de:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80211e2:	429c      	cmp	r4, r3
 80211e4:	f73f af1e 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80211e8:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80211ea:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 80211ee:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 80211f0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80211f2:	e79a      	b.n	802112a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80211f4:	2e04      	cmp	r6, #4
 80211f6:	f040 8131 	bne.w	802145c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 80211fa:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80211fe:	429c      	cmp	r4, r3
 8021200:	f73f af10 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021204:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8021206:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 802120a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802120c:	e78d      	b.n	802112a <dhcp_recv+0x1b2>
 802120e:	bf00      	nop
 8021210:	2001ef20 	.word	0x2001ef20
 8021214:	2002e130 	.word	0x2002e130
 8021218:	2002e13c 	.word	0x2002e13c
 802121c:	080452a0 	.word	0x080452a0
 8021220:	08045558 	.word	0x08045558
 8021224:	08029fe8 	.word	0x08029fe8
 8021228:	08045510 	.word	0x08045510
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802122c:	2e04      	cmp	r6, #4
 802122e:	f040 80ed 	bne.w	802140c <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8021232:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8021236:	429c      	cmp	r4, r3
 8021238:	f73f aef4 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802123c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 802123e:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8021242:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021244:	e771      	b.n	802112a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021246:	2e04      	cmp	r6, #4
 8021248:	f040 80d6 	bne.w	80213f8 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 802124c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8021250:	429c      	cmp	r4, r3
 8021252:	f73f aee7 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021256:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8021258:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 802125a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802125c:	e765      	b.n	802112a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 802125e:	2e01      	cmp	r6, #1
 8021260:	f040 80e8 	bne.w	8021434 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8021264:	9b02      	ldr	r3, [sp, #8]
 8021266:	2bf0      	cmp	r3, #240	; 0xf0
 8021268:	f040 8147 	bne.w	80214fa <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 802126c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8021270:	4299      	cmp	r1, r3
 8021272:	f43f aed7 	beq.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021276:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8021278:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 802127c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 802127e:	e754      	b.n	802112a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021280:	2e01      	cmp	r6, #1
 8021282:	f040 80cd 	bne.w	8021420 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8021286:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802128a:	4299      	cmp	r1, r3
 802128c:	f43f aeca 	beq.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021290:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8021292:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8021294:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021296:	e748      	b.n	802112a <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021298:	2e04      	cmp	r6, #4
 802129a:	f040 80d5 	bne.w	8021448 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 802129e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 80212a2:	429c      	cmp	r4, r3
 80212a4:	f73f aebe 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 80212a8:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80212aa:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 80212ae:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 80212b0:	e73b      	b.n	802112a <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80212b2:	6828      	ldr	r0, [r5, #0]
 80212b4:	b310      	cbz	r0, 80212fc <dhcp_recv+0x384>
 80212b6:	6840      	ldr	r0, [r0, #4]
 80212b8:	7806      	ldrb	r6, [r0, #0]
 80212ba:	e6d4      	b.n	8021066 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80212bc:	455c      	cmp	r4, fp
 80212be:	f4ff aec1 	bcc.w	8021044 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80212c2:	4bb7      	ldr	r3, [pc, #732]	; (80215a0 <dhcp_recv+0x628>)
 80212c4:	781b      	ldrb	r3, [r3, #0]
 80212c6:	b163      	cbz	r3, 80212e2 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80212c8:	2300      	movs	r3, #0
 80212ca:	4ab5      	ldr	r2, [pc, #724]	; (80215a0 <dhcp_recv+0x628>)
 80212cc:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80212ce:	4bb5      	ldr	r3, [pc, #724]	; (80215a4 <dhcp_recv+0x62c>)
 80212d0:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80212d2:	2b01      	cmp	r3, #1
 80212d4:	f000 8108 	beq.w	80214e8 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80212d8:	2b02      	cmp	r3, #2
 80212da:	d006      	beq.n	80212ea <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80212dc:	2b03      	cmp	r3, #3
 80212de:	f000 8101 	beq.w	80214e4 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 80212e2:	9b04      	ldr	r3, [sp, #16]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	f000 811c 	beq.w	8021522 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 80212ea:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80212ec:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 80212f0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 80212f2:	232c      	movs	r3, #44	; 0x2c
 80212f4:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 80212f6:	9b03      	ldr	r3, [sp, #12]
 80212f8:	895b      	ldrh	r3, [r3, #10]
 80212fa:	e682      	b.n	8021002 <dhcp_recv+0x8a>
    switch (op) {
 80212fc:	1e50      	subs	r0, r2, #1
 80212fe:	283a      	cmp	r0, #58	; 0x3a
 8021300:	f63f aef1 	bhi.w	80210e6 <dhcp_recv+0x16e>
 8021304:	a601      	add	r6, pc, #4	; (adr r6, 802130c <dhcp_recv+0x394>)
 8021306:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 802130a:	bf00      	nop
 802130c:	08021485 	.word	0x08021485
 8021310:	080210e7 	.word	0x080210e7
 8021314:	08021471 	.word	0x08021471
 8021318:	080210e7 	.word	0x080210e7
 802131c:	080210e7 	.word	0x080210e7
 8021320:	080210e7 	.word	0x080210e7
 8021324:	080210e7 	.word	0x080210e7
 8021328:	080210e7 	.word	0x080210e7
 802132c:	080210e7 	.word	0x080210e7
 8021330:	080210e7 	.word	0x080210e7
 8021334:	080210e7 	.word	0x080210e7
 8021338:	080210e7 	.word	0x080210e7
 802133c:	080210e7 	.word	0x080210e7
 8021340:	080210e7 	.word	0x080210e7
 8021344:	080210e7 	.word	0x080210e7
 8021348:	080210e7 	.word	0x080210e7
 802134c:	080210e7 	.word	0x080210e7
 8021350:	080210e7 	.word	0x080210e7
 8021354:	080210e7 	.word	0x080210e7
 8021358:	080210e7 	.word	0x080210e7
 802135c:	080210e7 	.word	0x080210e7
 8021360:	080210e7 	.word	0x080210e7
 8021364:	080210e7 	.word	0x080210e7
 8021368:	080210e7 	.word	0x080210e7
 802136c:	080210e7 	.word	0x080210e7
 8021370:	080210e7 	.word	0x080210e7
 8021374:	080210e7 	.word	0x080210e7
 8021378:	080210e7 	.word	0x080210e7
 802137c:	080210e7 	.word	0x080210e7
 8021380:	080210e7 	.word	0x080210e7
 8021384:	080210e7 	.word	0x080210e7
 8021388:	080210e7 	.word	0x080210e7
 802138c:	080210e7 	.word	0x080210e7
 8021390:	080210e7 	.word	0x080210e7
 8021394:	080210e7 	.word	0x080210e7
 8021398:	080210e7 	.word	0x080210e7
 802139c:	080210e7 	.word	0x080210e7
 80213a0:	080210e7 	.word	0x080210e7
 80213a4:	080210e7 	.word	0x080210e7
 80213a8:	080210e7 	.word	0x080210e7
 80213ac:	080210e7 	.word	0x080210e7
 80213b0:	080210e7 	.word	0x080210e7
 80213b4:	080210e7 	.word	0x080210e7
 80213b8:	080210e7 	.word	0x080210e7
 80213bc:	080210e7 	.word	0x080210e7
 80213c0:	080210e7 	.word	0x080210e7
 80213c4:	080210e7 	.word	0x080210e7
 80213c8:	080210e7 	.word	0x080210e7
 80213cc:	080210e7 	.word	0x080210e7
 80213d0:	080210e7 	.word	0x080210e7
 80213d4:	08021449 	.word	0x08021449
 80213d8:	08021435 	.word	0x08021435
 80213dc:	08021421 	.word	0x08021421
 80213e0:	0802140d 	.word	0x0802140d
 80213e4:	080210e7 	.word	0x080210e7
 80213e8:	080210e7 	.word	0x080210e7
 80213ec:	080210e7 	.word	0x080210e7
 80213f0:	080213f9 	.word	0x080213f9
 80213f4:	0802145d 	.word	0x0802145d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80213f8:	4b6b      	ldr	r3, [pc, #428]	; (80215a8 <dhcp_recv+0x630>)
 80213fa:	f240 625d 	movw	r2, #1629	; 0x65d
 80213fe:	496b      	ldr	r1, [pc, #428]	; (80215ac <dhcp_recv+0x634>)
 8021400:	486b      	ldr	r0, [pc, #428]	; (80215b0 <dhcp_recv+0x638>)
 8021402:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021406:	f003 ffc5 	bl	8025394 <iprintf>
 802140a:	e60d      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802140c:	4b66      	ldr	r3, [pc, #408]	; (80215a8 <dhcp_recv+0x630>)
 802140e:	f240 6259 	movw	r2, #1625	; 0x659
 8021412:	4966      	ldr	r1, [pc, #408]	; (80215ac <dhcp_recv+0x634>)
 8021414:	4866      	ldr	r0, [pc, #408]	; (80215b0 <dhcp_recv+0x638>)
 8021416:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802141a:	f003 ffbb 	bl	8025394 <iprintf>
 802141e:	e603      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021420:	4b61      	ldr	r3, [pc, #388]	; (80215a8 <dhcp_recv+0x630>)
 8021422:	f240 6255 	movw	r2, #1621	; 0x655
 8021426:	4963      	ldr	r1, [pc, #396]	; (80215b4 <dhcp_recv+0x63c>)
 8021428:	4861      	ldr	r0, [pc, #388]	; (80215b0 <dhcp_recv+0x638>)
 802142a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802142e:	f003 ffb1 	bl	8025394 <iprintf>
 8021432:	e5f9      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8021434:	4b5c      	ldr	r3, [pc, #368]	; (80215a8 <dhcp_recv+0x630>)
 8021436:	f240 624f 	movw	r2, #1615	; 0x64f
 802143a:	495e      	ldr	r1, [pc, #376]	; (80215b4 <dhcp_recv+0x63c>)
 802143c:	485c      	ldr	r0, [pc, #368]	; (80215b0 <dhcp_recv+0x638>)
 802143e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021442:	f003 ffa7 	bl	8025394 <iprintf>
 8021446:	e5ef      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021448:	4b57      	ldr	r3, [pc, #348]	; (80215a8 <dhcp_recv+0x630>)
 802144a:	f240 6241 	movw	r2, #1601	; 0x641
 802144e:	4957      	ldr	r1, [pc, #348]	; (80215ac <dhcp_recv+0x634>)
 8021450:	4857      	ldr	r0, [pc, #348]	; (80215b0 <dhcp_recv+0x638>)
 8021452:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021456:	f003 ff9d 	bl	8025394 <iprintf>
 802145a:	e5e5      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 802145c:	4b52      	ldr	r3, [pc, #328]	; (80215a8 <dhcp_recv+0x630>)
 802145e:	f240 6261 	movw	r2, #1633	; 0x661
 8021462:	4952      	ldr	r1, [pc, #328]	; (80215ac <dhcp_recv+0x634>)
 8021464:	4852      	ldr	r0, [pc, #328]	; (80215b0 <dhcp_recv+0x638>)
 8021466:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802146a:	f003 ff93 	bl	8025394 <iprintf>
 802146e:	e5db      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8021470:	4b4d      	ldr	r3, [pc, #308]	; (80215a8 <dhcp_recv+0x630>)
 8021472:	f240 6233 	movw	r2, #1587	; 0x633
 8021476:	4950      	ldr	r1, [pc, #320]	; (80215b8 <dhcp_recv+0x640>)
 8021478:	484d      	ldr	r0, [pc, #308]	; (80215b0 <dhcp_recv+0x638>)
 802147a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802147e:	f003 ff89 	bl	8025394 <iprintf>
 8021482:	e5d1      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8021484:	4b48      	ldr	r3, [pc, #288]	; (80215a8 <dhcp_recv+0x630>)
 8021486:	f240 622e 	movw	r2, #1582	; 0x62e
 802148a:	4948      	ldr	r1, [pc, #288]	; (80215ac <dhcp_recv+0x634>)
 802148c:	4848      	ldr	r0, [pc, #288]	; (80215b0 <dhcp_recv+0x638>)
 802148e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021492:	f003 ff7f 	bl	8025394 <iprintf>
 8021496:	e5c7      	b.n	8021028 <dhcp_recv+0xb0>
 8021498:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 802149a:	896b      	ldrh	r3, [r5, #10]
 802149c:	e628      	b.n	80210f0 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 802149e:	9c05      	ldr	r4, [sp, #20]
 80214a0:	d027      	beq.n	80214f2 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80214a2:	2e01      	cmp	r6, #1
 80214a4:	f040 80bb 	bne.w	802161e <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 80214a8:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214ac:	4b3d      	ldr	r3, [pc, #244]	; (80215a4 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 80214ae:	4a3c      	ldr	r2, [pc, #240]	; (80215a0 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214b0:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 80214b4:	2301      	movs	r3, #1
 80214b6:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80214ba:	e7ee      	b.n	802149a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80214bc:	4b3a      	ldr	r3, [pc, #232]	; (80215a8 <dhcp_recv+0x630>)
 80214be:	f240 6281 	movw	r2, #1665	; 0x681
 80214c2:	493e      	ldr	r1, [pc, #248]	; (80215bc <dhcp_recv+0x644>)
 80214c4:	483a      	ldr	r0, [pc, #232]	; (80215b0 <dhcp_recv+0x638>)
 80214c6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80214ca:	f003 ff63 	bl	8025394 <iprintf>
 80214ce:	e5ab      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80214d0:	4b35      	ldr	r3, [pc, #212]	; (80215a8 <dhcp_recv+0x630>)
 80214d2:	f240 629d 	movw	r2, #1693	; 0x69d
 80214d6:	493a      	ldr	r1, [pc, #232]	; (80215c0 <dhcp_recv+0x648>)
 80214d8:	4835      	ldr	r0, [pc, #212]	; (80215b0 <dhcp_recv+0x638>)
 80214da:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80214de:	f003 ff59 	bl	8025394 <iprintf>
 80214e2:	e5a1      	b.n	8021028 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 80214e4:	2301      	movs	r3, #1
 80214e6:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 80214e8:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80214ea:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 80214ee:	9302      	str	r3, [sp, #8]
 80214f0:	e701      	b.n	80212f6 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 80214f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80214f4:	f7f7 fe4c 	bl	8019190 <lwip_htonl>
 80214f8:	e7d8      	b.n	80214ac <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80214fa:	4b2b      	ldr	r3, [pc, #172]	; (80215a8 <dhcp_recv+0x630>)
 80214fc:	f240 6251 	movw	r2, #1617	; 0x651
 8021500:	4930      	ldr	r1, [pc, #192]	; (80215c4 <dhcp_recv+0x64c>)
 8021502:	482b      	ldr	r0, [pc, #172]	; (80215b0 <dhcp_recv+0x638>)
 8021504:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021508:	f003 ff44 	bl	8025394 <iprintf>
 802150c:	e58c      	b.n	8021028 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 802150e:	4b26      	ldr	r3, [pc, #152]	; (80215a8 <dhcp_recv+0x630>)
 8021510:	f240 6239 	movw	r2, #1593	; 0x639
 8021514:	492c      	ldr	r1, [pc, #176]	; (80215c8 <dhcp_recv+0x650>)
 8021516:	4826      	ldr	r0, [pc, #152]	; (80215b0 <dhcp_recv+0x638>)
 8021518:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802151c:	f003 ff3a 	bl	8025394 <iprintf>
 8021520:	e582      	b.n	8021028 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8021522:	4b1f      	ldr	r3, [pc, #124]	; (80215a0 <dhcp_recv+0x628>)
 8021524:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8021528:	785b      	ldrb	r3, [r3, #1]
 802152a:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 802152e:	2b00      	cmp	r3, #0
 8021530:	f43f ad7a 	beq.w	8021028 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021534:	4a1b      	ldr	r2, [pc, #108]	; (80215a4 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8021536:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 802153a:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 802153c:	2b05      	cmp	r3, #5
 802153e:	d01d      	beq.n	802157c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8021540:	2b06      	cmp	r3, #6
 8021542:	d043      	beq.n	80215cc <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8021544:	2b02      	cmp	r3, #2
 8021546:	f47f ad6f 	bne.w	8021028 <dhcp_recv+0xb0>
 802154a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802154e:	2b06      	cmp	r3, #6
 8021550:	f47f ad6a 	bne.w	8021028 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8021554:	4b12      	ldr	r3, [pc, #72]	; (80215a0 <dhcp_recv+0x628>)
 8021556:	789b      	ldrb	r3, [r3, #2]
 8021558:	2b00      	cmp	r3, #0
 802155a:	f43f ad65 	beq.w	8021028 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802155e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8021562:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021564:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8021566:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021568:	f7f7 fe12 	bl	8019190 <lwip_htonl>
 802156c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802156e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021570:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021572:	6923      	ldr	r3, [r4, #16]
 8021574:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8021576:	f7ff fbbf 	bl	8020cf8 <dhcp_select.isra.0>
 802157a:	e555      	b.n	8021028 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802157c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8021580:	2b01      	cmp	r3, #1
 8021582:	d03f      	beq.n	8021604 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021584:	3b03      	subs	r3, #3
 8021586:	2b02      	cmp	r3, #2
 8021588:	f63f ad4e 	bhi.w	8021028 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 802158c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8021590:	4621      	mov	r1, r4
 8021592:	f7ff f8c1 	bl	8020718 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8021596:	4650      	mov	r0, sl
 8021598:	f7fe ffb2 	bl	8020500 <dhcp_bind>
 802159c:	e544      	b.n	8021028 <dhcp_recv+0xb0>
 802159e:	bf00      	nop
 80215a0:	2002e130 	.word	0x2002e130
 80215a4:	2002e13c 	.word	0x2002e13c
 80215a8:	080452a0 	.word	0x080452a0
 80215ac:	08045504 	.word	0x08045504
 80215b0:	08029fe8 	.word	0x08029fe8
 80215b4:	08045534 	.word	0x08045534
 80215b8:	08045510 	.word	0x08045510
 80215bc:	0804556c 	.word	0x0804556c
 80215c0:	08045598 	.word	0x08045598
 80215c4:	08045540 	.word	0x08045540
 80215c8:	08045524 	.word	0x08045524
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80215cc:	f899 3005 	ldrb.w	r3, [r9, #5]
 80215d0:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80215d2:	2a02      	cmp	r2, #2
 80215d4:	d902      	bls.n	80215dc <dhcp_recv+0x664>
 80215d6:	2b01      	cmp	r3, #1
 80215d8:	f47f ad26 	bne.w	8021028 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80215dc:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 80215e0:	795a      	ldrb	r2, [r3, #5]
 80215e2:	2a0c      	cmp	r2, #12
 80215e4:	d004      	beq.n	80215f0 <dhcp_recv+0x678>
    dhcp->tries = 0;
 80215e6:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80215e8:	210c      	movs	r1, #12
    dhcp->tries = 0;
 80215ea:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 80215ec:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 80215ee:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80215f0:	4b1c      	ldr	r3, [pc, #112]	; (8021664 <dhcp_recv+0x6ec>)
 80215f2:	4650      	mov	r0, sl
 80215f4:	461a      	mov	r2, r3
 80215f6:	4619      	mov	r1, r3
 80215f8:	f7f9 f968 	bl	801a8cc <netif_set_addr>
  dhcp_discover(netif);
 80215fc:	4650      	mov	r0, sl
 80215fe:	f7ff fa95 	bl	8020b2c <dhcp_discover>
}
 8021602:	e511      	b.n	8021028 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 8021604:	4621      	mov	r1, r4
 8021606:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 802160a:	f7ff f885 	bl	8020718 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 802160e:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 8021612:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8021614:	0719      	lsls	r1, r3, #28
 8021616:	d5bf      	bpl.n	8021598 <dhcp_recv+0x620>
        dhcp_check(netif);
 8021618:	f7fe ff5a 	bl	80204d0 <dhcp_check>
 802161c:	e504      	b.n	8021028 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 802161e:	4b12      	ldr	r3, [pc, #72]	; (8021668 <dhcp_recv+0x6f0>)
 8021620:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8021624:	4911      	ldr	r1, [pc, #68]	; (802166c <dhcp_recv+0x6f4>)
 8021626:	4812      	ldr	r0, [pc, #72]	; (8021670 <dhcp_recv+0x6f8>)
 8021628:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802162c:	f003 feb2 	bl	8025394 <iprintf>
 8021630:	e4fa      	b.n	8021028 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8021632:	4434      	add	r4, r6
 8021634:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8021638:	4294      	cmp	r4, r2
 802163a:	f73f acf3 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802163e:	19bc      	adds	r4, r7, r6
 8021640:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021642:	e555      	b.n	80210f0 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8021644:	4434      	add	r4, r6
 8021646:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802164a:	428c      	cmp	r4, r1
 802164c:	f73f acea 	bgt.w	8021024 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021650:	19bc      	adds	r4, r7, r6
 8021652:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021654:	2e00      	cmp	r6, #0
 8021656:	f43f ad4b 	beq.w	80210f0 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802165a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 802165c:	f04f 0808 	mov.w	r8, #8
 8021660:	e563      	b.n	802112a <dhcp_recv+0x1b2>
 8021662:	bf00      	nop
 8021664:	08045954 	.word	0x08045954
 8021668:	080452a0 	.word	0x080452a0
 802166c:	08045584 	.word	0x08045584
 8021670:	08029fe8 	.word	0x08029fe8

08021674 <dhcp_network_changed>:
{
 8021674:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021676:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8021678:	b135      	cbz	r5, 8021688 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 802167a:	796b      	ldrb	r3, [r5, #5]
 802167c:	4604      	mov	r4, r0
 802167e:	2b05      	cmp	r3, #5
 8021680:	d803      	bhi.n	802168a <dhcp_network_changed+0x16>
 8021682:	2b02      	cmp	r3, #2
 8021684:	d813      	bhi.n	80216ae <dhcp_network_changed+0x3a>
 8021686:	b95b      	cbnz	r3, 80216a0 <dhcp_network_changed+0x2c>
}
 8021688:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 802168a:	2b0a      	cmp	r3, #10
 802168c:	d00f      	beq.n	80216ae <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 802168e:	2b0c      	cmp	r3, #12
 8021690:	d906      	bls.n	80216a0 <dhcp_network_changed+0x2c>
 8021692:	4b0a      	ldr	r3, [pc, #40]	; (80216bc <dhcp_network_changed+0x48>)
 8021694:	f240 326d 	movw	r2, #877	; 0x36d
 8021698:	4909      	ldr	r1, [pc, #36]	; (80216c0 <dhcp_network_changed+0x4c>)
 802169a:	480a      	ldr	r0, [pc, #40]	; (80216c4 <dhcp_network_changed+0x50>)
 802169c:	f003 fe7a 	bl	8025394 <iprintf>
      dhcp->tries = 0;
 80216a0:	2300      	movs	r3, #0
      dhcp_discover(netif);
 80216a2:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80216a4:	71ab      	strb	r3, [r5, #6]
}
 80216a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 80216aa:	f7ff ba3f 	b.w	8020b2c <dhcp_discover>
      dhcp->tries = 0;
 80216ae:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 80216b0:	4620      	mov	r0, r4
      dhcp->tries = 0;
 80216b2:	71ab      	strb	r3, [r5, #6]
}
 80216b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 80216b8:	f7ff b938 	b.w	802092c <dhcp_reboot.isra.0>
 80216bc:	080452a0 	.word	0x080452a0
 80216c0:	080455e0 	.word	0x080455e0
 80216c4:	08029fe8 	.word	0x08029fe8

080216c8 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80216c8:	2800      	cmp	r0, #0
 80216ca:	d066      	beq.n	802179a <dhcp_arp_reply+0xd2>
{
 80216cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 80216d0:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80216d2:	b085      	sub	sp, #20
 80216d4:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80216d6:	b115      	cbz	r5, 80216de <dhcp_arp_reply+0x16>
 80216d8:	796b      	ldrb	r3, [r5, #5]
 80216da:	2b08      	cmp	r3, #8
 80216dc:	d002      	beq.n	80216e4 <dhcp_arp_reply+0x1c>
}
 80216de:	b005      	add	sp, #20
 80216e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80216e4:	680a      	ldr	r2, [r1, #0]
 80216e6:	69eb      	ldr	r3, [r5, #28]
 80216e8:	429a      	cmp	r2, r3
 80216ea:	d1f8      	bne.n	80216de <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 80216ec:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80216ee:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80216f0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 80216f2:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 80216f4:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80216f6:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 80216fa:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80216fc:	2204      	movs	r2, #4
 80216fe:	f7ff f863 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 8021702:	4606      	mov	r6, r0
 8021704:	2800      	cmp	r0, #0
 8021706:	d040      	beq.n	802178a <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021708:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 802170c:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802170e:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021712:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021714:	2b44      	cmp	r3, #68	; 0x44
 8021716:	d847      	bhi.n	80217a8 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 8021718:	2232      	movs	r2, #50	; 0x32
 802171a:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 802171e:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 8021722:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 8021726:	b29b      	uxth	r3, r3
 8021728:	2204      	movs	r2, #4
 802172a:	fa1f f888 	uxth.w	r8, r8
 802172e:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021730:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021732:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021736:	f7f7 fd2b 	bl	8019190 <lwip_htonl>
 802173a:	4639      	mov	r1, r7
 802173c:	4602      	mov	r2, r0
 802173e:	4640      	mov	r0, r8
 8021740:	f7fe fea2 	bl	8020488 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021744:	1c41      	adds	r1, r0, #1
 8021746:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021748:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 802174c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802174e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021750:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021752:	2943      	cmp	r1, #67	; 0x43
 8021754:	d807      	bhi.n	8021766 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8021756:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802175a:	1878      	adds	r0, r7, r1
 802175c:	2100      	movs	r1, #0
 802175e:	b292      	uxth	r2, r2
 8021760:	f002 fe7a 	bl	8024458 <memset>
 8021764:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021766:	31f0      	adds	r1, #240	; 0xf0
 8021768:	4630      	mov	r0, r6
 802176a:	b289      	uxth	r1, r1
 802176c:	f7f9 fc30 	bl	801afd0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021770:	4911      	ldr	r1, [pc, #68]	; (80217b8 <dhcp_arp_reply+0xf0>)
 8021772:	4a12      	ldr	r2, [pc, #72]	; (80217bc <dhcp_arp_reply+0xf4>)
 8021774:	2343      	movs	r3, #67	; 0x43
 8021776:	9400      	str	r4, [sp, #0]
 8021778:	6808      	ldr	r0, [r1, #0]
 802177a:	4631      	mov	r1, r6
 802177c:	9201      	str	r2, [sp, #4]
 802177e:	4a10      	ldr	r2, [pc, #64]	; (80217c0 <dhcp_arp_reply+0xf8>)
 8021780:	f7fe fc6c 	bl	802005c <udp_sendto_if_src>
    pbuf_free(p_out);
 8021784:	4630      	mov	r0, r6
 8021786:	f7f9 fd3b 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 802178a:	79ab      	ldrb	r3, [r5, #6]
 802178c:	2bff      	cmp	r3, #255	; 0xff
 802178e:	d001      	beq.n	8021794 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8021790:	3301      	adds	r3, #1
 8021792:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021794:	2314      	movs	r3, #20
 8021796:	812b      	strh	r3, [r5, #8]
  return result;
 8021798:	e7a1      	b.n	80216de <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802179a:	4b0a      	ldr	r3, [pc, #40]	; (80217c4 <dhcp_arp_reply+0xfc>)
 802179c:	f240 328b 	movw	r2, #907	; 0x38b
 80217a0:	4909      	ldr	r1, [pc, #36]	; (80217c8 <dhcp_arp_reply+0x100>)
 80217a2:	480a      	ldr	r0, [pc, #40]	; (80217cc <dhcp_arp_reply+0x104>)
 80217a4:	f003 bdf6 	b.w	8025394 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80217a8:	4b06      	ldr	r3, [pc, #24]	; (80217c4 <dhcp_arp_reply+0xfc>)
 80217aa:	f240 529a 	movw	r2, #1434	; 0x59a
 80217ae:	4908      	ldr	r1, [pc, #32]	; (80217d0 <dhcp_arp_reply+0x108>)
 80217b0:	4806      	ldr	r0, [pc, #24]	; (80217cc <dhcp_arp_reply+0x104>)
 80217b2:	f003 fdef 	bl	8025394 <iprintf>
 80217b6:	e7af      	b.n	8021718 <dhcp_arp_reply+0x50>
 80217b8:	2002e128 	.word	0x2002e128
 80217bc:	08045954 	.word	0x08045954
 80217c0:	08045958 	.word	0x08045958
 80217c4:	080452a0 	.word	0x080452a0
 80217c8:	0802cd30 	.word	0x0802cd30
 80217cc:	08029fe8 	.word	0x08029fe8
 80217d0:	08045414 	.word	0x08045414

080217d4 <dhcp_renew>:
{
 80217d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80217d8:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 80217da:	b087      	sub	sp, #28
 80217dc:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 80217de:	797b      	ldrb	r3, [r7, #5]
 80217e0:	2b05      	cmp	r3, #5
 80217e2:	d004      	beq.n	80217ee <dhcp_renew+0x1a>
    dhcp->tries = 0;
 80217e4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80217e6:	2205      	movs	r2, #5
    dhcp->tries = 0;
 80217e8:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 80217ea:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 80217ec:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80217ee:	f10d 0316 	add.w	r3, sp, #22
 80217f2:	2203      	movs	r2, #3
 80217f4:	4639      	mov	r1, r7
 80217f6:	4658      	mov	r0, fp
 80217f8:	f7fe ffe6 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 80217fc:	4605      	mov	r5, r0
 80217fe:	2800      	cmp	r0, #0
 8021800:	f000 80b9 	beq.w	8021976 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021804:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8021808:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802180a:	f104 0804 	add.w	r8, r4, #4
 802180e:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021812:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021814:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8021818:	f200 8095 	bhi.w	8021946 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 802181c:	2239      	movs	r2, #57	; 0x39
 802181e:	1c63      	adds	r3, r4, #1
 8021820:	fa1f f189 	uxth.w	r1, r9
 8021824:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8021826:	b29b      	uxth	r3, r3
 8021828:	2202      	movs	r2, #2
 802182a:	9103      	str	r1, [sp, #12]
 802182c:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802182e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021830:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021834:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021836:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802183a:	f200 8094 	bhi.w	8021966 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802183e:	1ce3      	adds	r3, r4, #3
 8021840:	fa1f f988 	uxth.w	r9, r8
 8021844:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021848:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802184a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802184c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802184e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021852:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021856:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802185a:	2b44      	cmp	r3, #68	; 0x44
 802185c:	d87b      	bhi.n	8021956 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 802185e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021862:	2237      	movs	r2, #55	; 0x37
 8021864:	1d63      	adds	r3, r4, #5
 8021866:	f8df a134 	ldr.w	sl, [pc, #308]	; 802199c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 802186a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 802186e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021872:	b29b      	uxth	r3, r3
 8021874:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021876:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802187a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 802187e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021880:	493e      	ldr	r1, [pc, #248]	; (802197c <dhcp_renew+0x1a8>)
 8021882:	4b3f      	ldr	r3, [pc, #252]	; (8021980 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021884:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021888:	d80f      	bhi.n	80218aa <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 802188a:	f108 0201 	add.w	r2, r8, #1
 802188e:	f806 9008 	strb.w	r9, [r6, r8]
 8021892:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021896:	4a3b      	ldr	r2, [pc, #236]	; (8021984 <dhcp_renew+0x1b0>)
 8021898:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802189a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802189e:	d00c      	beq.n	80218ba <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218a0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80218a4:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80218a8:	d9ef      	bls.n	802188a <dhcp_renew+0xb6>
 80218aa:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80218ae:	4836      	ldr	r0, [pc, #216]	; (8021988 <dhcp_renew+0x1b4>)
 80218b0:	f003 fd70 	bl	8025394 <iprintf>
 80218b4:	4b32      	ldr	r3, [pc, #200]	; (8021980 <dhcp_renew+0x1ac>)
 80218b6:	4931      	ldr	r1, [pc, #196]	; (802197c <dhcp_renew+0x1a8>)
 80218b8:	e7e7      	b.n	802188a <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 80218ba:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 80218be:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80218c2:	22ff      	movs	r2, #255	; 0xff
 80218c4:	b280      	uxth	r0, r0
 80218c6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80218c8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80218ca:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80218cc:	d808      	bhi.n	80218e0 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 80218ce:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 80218d2:	4430      	add	r0, r6
 80218d4:	2100      	movs	r1, #0
 80218d6:	b2a4      	uxth	r4, r4
 80218d8:	1c62      	adds	r2, r4, #1
 80218da:	f002 fdbd 	bl	8024458 <memset>
 80218de:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80218e0:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80218e4:	4628      	mov	r0, r5
 80218e6:	b289      	uxth	r1, r1
 80218e8:	f7f9 fb72 	bl	801afd0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80218ec:	4827      	ldr	r0, [pc, #156]	; (802198c <dhcp_renew+0x1b8>)
 80218ee:	2343      	movs	r3, #67	; 0x43
 80218f0:	f107 0218 	add.w	r2, r7, #24
 80218f4:	6800      	ldr	r0, [r0, #0]
 80218f6:	4629      	mov	r1, r5
 80218f8:	f8cd b000 	str.w	fp, [sp]
 80218fc:	f7fe fc62 	bl	80201c4 <udp_sendto_if>
 8021900:	4604      	mov	r4, r0
    pbuf_free(p_out);
 8021902:	4628      	mov	r0, r5
 8021904:	f7f9 fc7c 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 8021908:	79bb      	ldrb	r3, [r7, #6]
 802190a:	2bff      	cmp	r3, #255	; 0xff
 802190c:	d015      	beq.n	802193a <dhcp_renew+0x166>
    dhcp->tries++;
 802190e:	3301      	adds	r3, #1
 8021910:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021912:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021914:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021916:	d810      	bhi.n	802193a <dhcp_renew+0x166>
 8021918:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802191c:	4a1c      	ldr	r2, [pc, #112]	; (8021990 <dhcp_renew+0x1bc>)
}
 802191e:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8021920:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8021924:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021926:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802192a:	b29b      	uxth	r3, r3
 802192c:	fba2 2303 	umull	r2, r3, r2, r3
 8021930:	095b      	lsrs	r3, r3, #5
 8021932:	813b      	strh	r3, [r7, #8]
}
 8021934:	b007      	add	sp, #28
 8021936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 802193a:	2328      	movs	r3, #40	; 0x28
}
 802193c:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802193e:	813b      	strh	r3, [r7, #8]
}
 8021940:	b007      	add	sp, #28
 8021942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021946:	4b0e      	ldr	r3, [pc, #56]	; (8021980 <dhcp_renew+0x1ac>)
 8021948:	f240 529a 	movw	r2, #1434	; 0x59a
 802194c:	4911      	ldr	r1, [pc, #68]	; (8021994 <dhcp_renew+0x1c0>)
 802194e:	480e      	ldr	r0, [pc, #56]	; (8021988 <dhcp_renew+0x1b4>)
 8021950:	f003 fd20 	bl	8025394 <iprintf>
 8021954:	e762      	b.n	802181c <dhcp_renew+0x48>
 8021956:	4b0a      	ldr	r3, [pc, #40]	; (8021980 <dhcp_renew+0x1ac>)
 8021958:	f240 529a 	movw	r2, #1434	; 0x59a
 802195c:	490d      	ldr	r1, [pc, #52]	; (8021994 <dhcp_renew+0x1c0>)
 802195e:	480a      	ldr	r0, [pc, #40]	; (8021988 <dhcp_renew+0x1b4>)
 8021960:	f003 fd18 	bl	8025394 <iprintf>
 8021964:	e77b      	b.n	802185e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021966:	4b06      	ldr	r3, [pc, #24]	; (8021980 <dhcp_renew+0x1ac>)
 8021968:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802196c:	490a      	ldr	r1, [pc, #40]	; (8021998 <dhcp_renew+0x1c4>)
 802196e:	4806      	ldr	r0, [pc, #24]	; (8021988 <dhcp_renew+0x1b4>)
 8021970:	f003 fd10 	bl	8025394 <iprintf>
 8021974:	e763      	b.n	802183e <dhcp_renew+0x6a>
    result = ERR_MEM;
 8021976:	f04f 34ff 	mov.w	r4, #4294967295
 802197a:	e7c5      	b.n	8021908 <dhcp_renew+0x134>
 802197c:	08045494 	.word	0x08045494
 8021980:	080452a0 	.word	0x080452a0
 8021984:	0804561c 	.word	0x0804561c
 8021988:	08029fe8 	.word	0x08029fe8
 802198c:	2002e128 	.word	0x2002e128
 8021990:	10624dd3 	.word	0x10624dd3
 8021994:	08045414 	.word	0x08045414
 8021998:	08045458 	.word	0x08045458
 802199c:	08045619 	.word	0x08045619

080219a0 <dhcp_release_and_stop>:
{
 80219a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80219a4:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 80219a6:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 80219a8:	2c00      	cmp	r4, #0
 80219aa:	d06c      	beq.n	8021a86 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 80219ac:	7962      	ldrb	r2, [r4, #5]
 80219ae:	2a00      	cmp	r2, #0
 80219b0:	d069      	beq.n	8021a86 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80219b2:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80219b4:	2300      	movs	r3, #0
 80219b6:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80219b8:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219ba:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80219bc:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219be:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80219c0:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80219c2:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80219c4:	81e3      	strh	r3, [r4, #14]
 80219c6:	6123      	str	r3, [r4, #16]
 80219c8:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80219ca:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80219ce:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80219d2:	d901      	bls.n	80219d8 <dhcp_release_and_stop+0x38>
 80219d4:	2a0a      	cmp	r2, #10
 80219d6:	d148      	bne.n	8021a6a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80219d8:	f10d 030a 	add.w	r3, sp, #10
 80219dc:	2207      	movs	r2, #7
 80219de:	4621      	mov	r1, r4
 80219e0:	4628      	mov	r0, r5
 80219e2:	f7fe fef1 	bl	80207c8 <dhcp_create_msg>
    if (p_out != NULL) {
 80219e6:	4606      	mov	r6, r0
 80219e8:	2800      	cmp	r0, #0
 80219ea:	d03e      	beq.n	8021a6a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80219ec:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80219f0:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80219f2:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80219f6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80219f8:	2b44      	cmp	r3, #68	; 0x44
 80219fa:	d84e      	bhi.n	8021a9a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 80219fc:	f108 0301 	add.w	r3, r8, #1
 8021a00:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 8021a02:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 8021a04:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 8021a08:	2204      	movs	r2, #4
 8021a0a:	f108 0802 	add.w	r8, r8, #2
 8021a0e:	54fa      	strb	r2, [r7, r3]
 8021a10:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a14:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8021a16:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a1a:	f7f7 fbb9 	bl	8019190 <lwip_htonl>
 8021a1e:	4639      	mov	r1, r7
 8021a20:	4602      	mov	r2, r0
 8021a22:	4640      	mov	r0, r8
 8021a24:	f7fe fd30 	bl	8020488 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021a28:	1c43      	adds	r3, r0, #1
 8021a2a:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a2c:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8021a30:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021a32:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021a34:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021a36:	2b43      	cmp	r3, #67	; 0x43
 8021a38:	d807      	bhi.n	8021a4a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 8021a3a:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 8021a3e:	18f8      	adds	r0, r7, r3
 8021a40:	2100      	movs	r1, #0
 8021a42:	b292      	uxth	r2, r2
 8021a44:	f002 fd08 	bl	8024458 <memset>
 8021a48:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021a4a:	33f0      	adds	r3, #240	; 0xf0
 8021a4c:	4630      	mov	r0, r6
 8021a4e:	b299      	uxth	r1, r3
 8021a50:	f7f9 fabe 	bl	801afd0 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021a54:	4a15      	ldr	r2, [pc, #84]	; (8021aac <dhcp_release_and_stop+0x10c>)
 8021a56:	9500      	str	r5, [sp, #0]
 8021a58:	2343      	movs	r3, #67	; 0x43
 8021a5a:	6810      	ldr	r0, [r2, #0]
 8021a5c:	4631      	mov	r1, r6
 8021a5e:	aa03      	add	r2, sp, #12
 8021a60:	f7fe fbb0 	bl	80201c4 <udp_sendto_if>
      pbuf_free(p_out);
 8021a64:	4630      	mov	r0, r6
 8021a66:	f7f9 fbcb 	bl	801b200 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8021a6a:	4b11      	ldr	r3, [pc, #68]	; (8021ab0 <dhcp_release_and_stop+0x110>)
 8021a6c:	4628      	mov	r0, r5
 8021a6e:	461a      	mov	r2, r3
 8021a70:	4619      	mov	r1, r3
 8021a72:	f7f8 ff2b 	bl	801a8cc <netif_set_addr>
  if (new_state != dhcp->state) {
 8021a76:	7963      	ldrb	r3, [r4, #5]
 8021a78:	b11b      	cbz	r3, 8021a82 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 8021a7e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8021a80:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8021a82:	7923      	ldrb	r3, [r4, #4]
 8021a84:	b913      	cbnz	r3, 8021a8c <dhcp_release_and_stop+0xec>
}
 8021a86:	b004      	add	sp, #16
 8021a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021a8c:	f7fe fe22 	bl	80206d4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8021a90:	2300      	movs	r3, #0
 8021a92:	7123      	strb	r3, [r4, #4]
}
 8021a94:	b004      	add	sp, #16
 8021a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021a9a:	4b06      	ldr	r3, [pc, #24]	; (8021ab4 <dhcp_release_and_stop+0x114>)
 8021a9c:	f240 529a 	movw	r2, #1434	; 0x59a
 8021aa0:	4905      	ldr	r1, [pc, #20]	; (8021ab8 <dhcp_release_and_stop+0x118>)
 8021aa2:	4806      	ldr	r0, [pc, #24]	; (8021abc <dhcp_release_and_stop+0x11c>)
 8021aa4:	f003 fc76 	bl	8025394 <iprintf>
 8021aa8:	e7a8      	b.n	80219fc <dhcp_release_and_stop+0x5c>
 8021aaa:	bf00      	nop
 8021aac:	2002e128 	.word	0x2002e128
 8021ab0:	08045954 	.word	0x08045954
 8021ab4:	080452a0 	.word	0x080452a0
 8021ab8:	08045414 	.word	0x08045414
 8021abc:	08029fe8 	.word	0x08029fe8

08021ac0 <dhcp_start>:
{
 8021ac0:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021ac2:	2800      	cmp	r0, #0
 8021ac4:	d046      	beq.n	8021b54 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021ac6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8021aca:	4604      	mov	r4, r0
 8021acc:	07da      	lsls	r2, r3, #31
 8021ace:	d537      	bpl.n	8021b40 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021ad0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 8021ad2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8021ad4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8021ad8:	d32f      	bcc.n	8021b3a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 8021ada:	b33d      	cbz	r5, 8021b2c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 8021adc:	792b      	ldrb	r3, [r5, #4]
 8021ade:	bb13      	cbnz	r3, 8021b26 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 8021ae0:	2234      	movs	r2, #52	; 0x34
 8021ae2:	2100      	movs	r1, #0
 8021ae4:	4628      	mov	r0, r5
 8021ae6:	f002 fcb7 	bl	8024458 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8021aea:	f7fe fdb9 	bl	8020660 <dhcp_inc_pcb_refcount>
 8021aee:	4606      	mov	r6, r0
 8021af0:	bb18      	cbnz	r0, 8021b3a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 8021af2:	2301      	movs	r3, #1
 8021af4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 8021af6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8021afa:	075b      	lsls	r3, r3, #29
 8021afc:	d408      	bmi.n	8021b10 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 8021afe:	796b      	ldrb	r3, [r5, #5]
 8021b00:	2b02      	cmp	r3, #2
 8021b02:	d003      	beq.n	8021b0c <dhcp_start+0x4c>
    dhcp->state = new_state;
 8021b04:	2302      	movs	r3, #2
    dhcp->tries = 0;
 8021b06:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 8021b08:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 8021b0a:	716b      	strb	r3, [r5, #5]
}
 8021b0c:	4630      	mov	r0, r6
 8021b0e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 8021b10:	4620      	mov	r0, r4
 8021b12:	f7ff f80b 	bl	8020b2c <dhcp_discover>
  if (result != ERR_OK) {
 8021b16:	2800      	cmp	r0, #0
 8021b18:	d0f8      	beq.n	8021b0c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 8021b1a:	4620      	mov	r0, r4
    return ERR_MEM;
 8021b1c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 8021b20:	f7ff ff3e 	bl	80219a0 <dhcp_release_and_stop>
    return ERR_MEM;
 8021b24:	e7f2      	b.n	8021b0c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8021b26:	f7fe fdd5 	bl	80206d4 <dhcp_dec_pcb_refcount>
 8021b2a:	e7d9      	b.n	8021ae0 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8021b2c:	2034      	movs	r0, #52	; 0x34
 8021b2e:	f7f8 fc77 	bl	801a420 <mem_malloc>
    if (dhcp == NULL) {
 8021b32:	4605      	mov	r5, r0
 8021b34:	b108      	cbz	r0, 8021b3a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021b36:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8021b38:	e7d2      	b.n	8021ae0 <dhcp_start+0x20>
    return ERR_MEM;
 8021b3a:	f04f 36ff 	mov.w	r6, #4294967295
 8021b3e:	e7e5      	b.n	8021b0c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021b40:	4b09      	ldr	r3, [pc, #36]	; (8021b68 <dhcp_start+0xa8>)
 8021b42:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021b46:	4909      	ldr	r1, [pc, #36]	; (8021b6c <dhcp_start+0xac>)
 8021b48:	f06f 060f 	mvn.w	r6, #15
 8021b4c:	4808      	ldr	r0, [pc, #32]	; (8021b70 <dhcp_start+0xb0>)
 8021b4e:	f003 fc21 	bl	8025394 <iprintf>
 8021b52:	e7db      	b.n	8021b0c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021b54:	4b04      	ldr	r3, [pc, #16]	; (8021b68 <dhcp_start+0xa8>)
 8021b56:	f240 22e7 	movw	r2, #743	; 0x2e7
 8021b5a:	4906      	ldr	r1, [pc, #24]	; (8021b74 <dhcp_start+0xb4>)
 8021b5c:	f06f 060f 	mvn.w	r6, #15
 8021b60:	4803      	ldr	r0, [pc, #12]	; (8021b70 <dhcp_start+0xb0>)
 8021b62:	f003 fc17 	bl	8025394 <iprintf>
 8021b66:	e7d1      	b.n	8021b0c <dhcp_start+0x4c>
 8021b68:	080452a0 	.word	0x080452a0
 8021b6c:	080455f4 	.word	0x080455f4
 8021b70:	08029fe8 	.word	0x08029fe8
 8021b74:	0802cd30 	.word	0x0802cd30

08021b78 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8021b78:	4b8a      	ldr	r3, [pc, #552]	; (8021da4 <dhcp_coarse_tmr+0x22c>)
{
 8021b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 8021b7e:	681d      	ldr	r5, [r3, #0]
{
 8021b80:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8021b82:	b1dd      	cbz	r5, 8021bbc <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021b84:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8021b86:	b1b4      	cbz	r4, 8021bb6 <dhcp_coarse_tmr+0x3e>
 8021b88:	7963      	ldrb	r3, [r4, #5]
 8021b8a:	b1a3      	cbz	r3, 8021bb6 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8021b8c:	8aa1      	ldrh	r1, [r4, #20]
 8021b8e:	b129      	cbz	r1, 8021b9c <dhcp_coarse_tmr+0x24>
 8021b90:	8a62      	ldrh	r2, [r4, #18]
 8021b92:	3201      	adds	r2, #1
 8021b94:	b292      	uxth	r2, r2
 8021b96:	4291      	cmp	r1, r2
 8021b98:	8262      	strh	r2, [r4, #18]
 8021b9a:	d012      	beq.n	8021bc2 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8021b9c:	8a22      	ldrh	r2, [r4, #16]
 8021b9e:	b11a      	cbz	r2, 8021ba8 <dhcp_coarse_tmr+0x30>
 8021ba0:	1e51      	subs	r1, r2, #1
 8021ba2:	2a01      	cmp	r2, #1
 8021ba4:	8221      	strh	r1, [r4, #16]
 8021ba6:	d013      	beq.n	8021bd0 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8021ba8:	89e2      	ldrh	r2, [r4, #14]
 8021baa:	b122      	cbz	r2, 8021bb6 <dhcp_coarse_tmr+0x3e>
 8021bac:	1e51      	subs	r1, r2, #1
 8021bae:	2a01      	cmp	r2, #1
 8021bb0:	81e1      	strh	r1, [r4, #14]
 8021bb2:	f000 8087 	beq.w	8021cc4 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8021bb6:	682d      	ldr	r5, [r5, #0]
 8021bb8:	2d00      	cmp	r5, #0
 8021bba:	d1e3      	bne.n	8021b84 <dhcp_coarse_tmr+0xc>
}
 8021bbc:	b007      	add	sp, #28
 8021bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8021bc2:	4628      	mov	r0, r5
 8021bc4:	f7ff feec 	bl	80219a0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8021bc8:	4628      	mov	r0, r5
 8021bca:	f7ff ff79 	bl	8021ac0 <dhcp_start>
 8021bce:	e7f2      	b.n	8021bb6 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021bd0:	1e5a      	subs	r2, r3, #1
 8021bd2:	b2d1      	uxtb	r1, r2
 8021bd4:	2909      	cmp	r1, #9
 8021bd6:	d8ee      	bhi.n	8021bb6 <dhcp_coarse_tmr+0x3e>
 8021bd8:	f240 2219 	movw	r2, #537	; 0x219
 8021bdc:	40ca      	lsrs	r2, r1
 8021bde:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8021be0:	f012 0201 	ands.w	r2, r2, #1
 8021be4:	d1e7      	bne.n	8021bb6 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 8021be6:	2b04      	cmp	r3, #4
 8021be8:	d003      	beq.n	8021bf2 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 8021bea:	2304      	movs	r3, #4
    dhcp->tries = 0;
 8021bec:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 8021bee:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 8021bf0:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8021bf2:	f10d 0316 	add.w	r3, sp, #22
 8021bf6:	2203      	movs	r2, #3
 8021bf8:	4621      	mov	r1, r4
 8021bfa:	4628      	mov	r0, r5
 8021bfc:	f7fe fde4 	bl	80207c8 <dhcp_create_msg>
  if (p_out != NULL) {
 8021c00:	4607      	mov	r7, r0
 8021c02:	2800      	cmp	r0, #0
 8021c04:	f000 8096 	beq.w	8021d34 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c08:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 8021c0c:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c0e:	f106 0904 	add.w	r9, r6, #4
 8021c12:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c16:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c1a:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 8021c1e:	f200 80b9 	bhi.w	8021d94 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 8021c22:	2239      	movs	r2, #57	; 0x39
 8021c24:	1c73      	adds	r3, r6, #1
 8021c26:	fa1f fb8a 	uxth.w	fp, sl
 8021c2a:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 8021c2e:	b29b      	uxth	r3, r3
 8021c30:	2202      	movs	r2, #2
 8021c32:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c36:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c3a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c3c:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021c3e:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c42:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021c44:	f200 809e 	bhi.w	8021d84 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021c48:	9903      	ldr	r1, [sp, #12]
 8021c4a:	1cf3      	adds	r3, r6, #3
 8021c4c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021c50:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021c52:	0a0a      	lsrs	r2, r1, #8
 8021c54:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021c58:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c5c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021c60:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021c64:	2b44      	cmp	r3, #68	; 0x44
 8021c66:	f200 8085 	bhi.w	8021d74 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 8021c6a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 8021c6e:	2237      	movs	r2, #55	; 0x37
 8021c70:	1d73      	adds	r3, r6, #5
 8021c72:	f8df b158 	ldr.w	fp, [pc, #344]	; 8021dcc <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8021c76:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 8021c7a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 8021c7e:	b29b      	uxth	r3, r3
 8021c80:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021c82:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021c86:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 8021c8a:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021c8e:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021c92:	d80f      	bhi.n	8021cb4 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8021c94:	f808 a009 	strb.w	sl, [r8, r9]
 8021c98:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021c9c:	4b42      	ldr	r3, [pc, #264]	; (8021da8 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 8021c9e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021ca2:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021ca4:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021ca8:	d01f      	beq.n	8021cea <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021caa:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021cae:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021cb2:	d9ef      	bls.n	8021c94 <dhcp_coarse_tmr+0x11c>
 8021cb4:	4b3d      	ldr	r3, [pc, #244]	; (8021dac <dhcp_coarse_tmr+0x234>)
 8021cb6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8021cba:	493d      	ldr	r1, [pc, #244]	; (8021db0 <dhcp_coarse_tmr+0x238>)
 8021cbc:	483d      	ldr	r0, [pc, #244]	; (8021db4 <dhcp_coarse_tmr+0x23c>)
 8021cbe:	f003 fb69 	bl	8025394 <iprintf>
 8021cc2:	e7e7      	b.n	8021c94 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021cc4:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8021cc8:	2a01      	cmp	r2, #1
 8021cca:	d002      	beq.n	8021cd2 <dhcp_coarse_tmr+0x15a>
 8021ccc:	2b0a      	cmp	r3, #10
 8021cce:	f47f af72 	bne.w	8021bb6 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8021cd2:	4628      	mov	r0, r5
 8021cd4:	f7ff fd7e 	bl	80217d4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021cd8:	89a3      	ldrh	r3, [r4, #12]
 8021cda:	8a62      	ldrh	r2, [r4, #18]
 8021cdc:	1a9b      	subs	r3, r3, r2
 8021cde:	2b01      	cmp	r3, #1
 8021ce0:	f77f af69 	ble.w	8021bb6 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8021ce4:	105b      	asrs	r3, r3, #1
 8021ce6:	81e3      	strh	r3, [r4, #14]
 8021ce8:	e765      	b.n	8021bb6 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 8021cea:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 8021cee:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021cf2:	22ff      	movs	r2, #255	; 0xff
 8021cf4:	b280      	uxth	r0, r0
 8021cf6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021cf8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 8021cfa:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021cfe:	d808      	bhi.n	8021d12 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 8021d00:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 8021d04:	4440      	add	r0, r8
 8021d06:	2100      	movs	r1, #0
 8021d08:	b292      	uxth	r2, r2
 8021d0a:	3201      	adds	r2, #1
 8021d0c:	f002 fba4 	bl	8024458 <memset>
 8021d10:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021d12:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8021d16:	4638      	mov	r0, r7
 8021d18:	b289      	uxth	r1, r1
 8021d1a:	f7f9 f959 	bl	801afd0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021d1e:	4b26      	ldr	r3, [pc, #152]	; (8021db8 <dhcp_coarse_tmr+0x240>)
 8021d20:	9500      	str	r5, [sp, #0]
 8021d22:	4639      	mov	r1, r7
 8021d24:	6818      	ldr	r0, [r3, #0]
 8021d26:	2343      	movs	r3, #67	; 0x43
 8021d28:	4a24      	ldr	r2, [pc, #144]	; (8021dbc <dhcp_coarse_tmr+0x244>)
 8021d2a:	f7fe fa4b 	bl	80201c4 <udp_sendto_if>
    pbuf_free(p_out);
 8021d2e:	4638      	mov	r0, r7
 8021d30:	f7f9 fa66 	bl	801b200 <pbuf_free>
  if (dhcp->tries < 255) {
 8021d34:	79a3      	ldrb	r3, [r4, #6]
 8021d36:	2bff      	cmp	r3, #255	; 0xff
 8021d38:	d01a      	beq.n	8021d70 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 8021d3a:	3301      	adds	r3, #1
 8021d3c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d3e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021d40:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d42:	d815      	bhi.n	8021d70 <dhcp_coarse_tmr+0x1f8>
 8021d44:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8021d48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d4c:	4a1c      	ldr	r2, [pc, #112]	; (8021dc0 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021d4e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d50:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021d54:	b29b      	uxth	r3, r3
 8021d56:	fba2 2303 	umull	r2, r3, r2, r3
 8021d5a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021d5c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021d5e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021d60:	8aa3      	ldrh	r3, [r4, #20]
 8021d62:	1a9b      	subs	r3, r3, r2
 8021d64:	2b01      	cmp	r3, #1
 8021d66:	f77f af26 	ble.w	8021bb6 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8021d6a:	105b      	asrs	r3, r3, #1
 8021d6c:	8223      	strh	r3, [r4, #16]
 8021d6e:	e722      	b.n	8021bb6 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8021d70:	2314      	movs	r3, #20
 8021d72:	e7f3      	b.n	8021d5c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d74:	4b0d      	ldr	r3, [pc, #52]	; (8021dac <dhcp_coarse_tmr+0x234>)
 8021d76:	f240 529a 	movw	r2, #1434	; 0x59a
 8021d7a:	4912      	ldr	r1, [pc, #72]	; (8021dc4 <dhcp_coarse_tmr+0x24c>)
 8021d7c:	480d      	ldr	r0, [pc, #52]	; (8021db4 <dhcp_coarse_tmr+0x23c>)
 8021d7e:	f003 fb09 	bl	8025394 <iprintf>
 8021d82:	e772      	b.n	8021c6a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021d84:	4b09      	ldr	r3, [pc, #36]	; (8021dac <dhcp_coarse_tmr+0x234>)
 8021d86:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8021d8a:	490f      	ldr	r1, [pc, #60]	; (8021dc8 <dhcp_coarse_tmr+0x250>)
 8021d8c:	4809      	ldr	r0, [pc, #36]	; (8021db4 <dhcp_coarse_tmr+0x23c>)
 8021d8e:	f003 fb01 	bl	8025394 <iprintf>
 8021d92:	e759      	b.n	8021c48 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021d94:	4b05      	ldr	r3, [pc, #20]	; (8021dac <dhcp_coarse_tmr+0x234>)
 8021d96:	f240 529a 	movw	r2, #1434	; 0x59a
 8021d9a:	490a      	ldr	r1, [pc, #40]	; (8021dc4 <dhcp_coarse_tmr+0x24c>)
 8021d9c:	4805      	ldr	r0, [pc, #20]	; (8021db4 <dhcp_coarse_tmr+0x23c>)
 8021d9e:	f003 faf9 	bl	8025394 <iprintf>
 8021da2:	e73e      	b.n	8021c22 <dhcp_coarse_tmr+0xaa>
 8021da4:	2002e0b0 	.word	0x2002e0b0
 8021da8:	0804561c 	.word	0x0804561c
 8021dac:	080452a0 	.word	0x080452a0
 8021db0:	08045494 	.word	0x08045494
 8021db4:	08029fe8 	.word	0x08029fe8
 8021db8:	2002e128 	.word	0x2002e128
 8021dbc:	08045958 	.word	0x08045958
 8021dc0:	10624dd3 	.word	0x10624dd3
 8021dc4:	08045414 	.word	0x08045414
 8021dc8:	08045458 	.word	0x08045458
 8021dcc:	08045619 	.word	0x08045619

08021dd0 <dhcp_fine_tmr>:
{
 8021dd0:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 8021dd2:	4b21      	ldr	r3, [pc, #132]	; (8021e58 <dhcp_fine_tmr+0x88>)
 8021dd4:	681c      	ldr	r4, [r3, #0]
 8021dd6:	b1fc      	cbz	r4, 8021e18 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 8021dd8:	2500      	movs	r5, #0
 8021dda:	e003      	b.n	8021de4 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 8021ddc:	3a01      	subs	r2, #1
 8021dde:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 8021de0:	6824      	ldr	r4, [r4, #0]
 8021de2:	b1cc      	cbz	r4, 8021e18 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021de4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	d0fa      	beq.n	8021de0 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 8021dea:	891a      	ldrh	r2, [r3, #8]
 8021dec:	2a01      	cmp	r2, #1
 8021dee:	d8f5      	bhi.n	8021ddc <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 8021df0:	d1f6      	bne.n	8021de0 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021df2:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 8021df4:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8021df6:	2a0c      	cmp	r2, #12
 8021df8:	d016      	beq.n	8021e28 <dhcp_fine_tmr+0x58>
 8021dfa:	2a06      	cmp	r2, #6
 8021dfc:	d014      	beq.n	8021e28 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8021dfe:	2a01      	cmp	r2, #1
 8021e00:	d016      	beq.n	8021e30 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8021e02:	2a08      	cmp	r2, #8
 8021e04:	d009      	beq.n	8021e1a <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8021e06:	2a03      	cmp	r2, #3
 8021e08:	d1ea      	bne.n	8021de0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 8021e0a:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 8021e0c:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8021e0e:	2b01      	cmp	r3, #1
 8021e10:	d91e      	bls.n	8021e50 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 8021e12:	f7fe fe8b 	bl	8020b2c <dhcp_discover>
 8021e16:	e7e3      	b.n	8021de0 <dhcp_fine_tmr+0x10>
}
 8021e18:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 8021e1a:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 8021e1c:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 8021e1e:	2b01      	cmp	r3, #1
 8021e20:	d913      	bls.n	8021e4a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 8021e22:	f7fe fb6d 	bl	8020500 <dhcp_bind>
 8021e26:	e7db      	b.n	8021de0 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 8021e28:	4620      	mov	r0, r4
 8021e2a:	f7fe fe7f 	bl	8020b2c <dhcp_discover>
 8021e2e:	e7d7      	b.n	8021de0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8021e30:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8021e32:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8021e34:	2b05      	cmp	r3, #5
 8021e36:	d802      	bhi.n	8021e3e <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8021e38:	f7fe ff5e 	bl	8020cf8 <dhcp_select.isra.0>
 8021e3c:	e7d0      	b.n	8021de0 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 8021e3e:	f7ff fdaf 	bl	80219a0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8021e42:	4620      	mov	r0, r4
 8021e44:	f7ff fe3c 	bl	8021ac0 <dhcp_start>
 8021e48:	e7ca      	b.n	8021de0 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 8021e4a:	f7fe fb41 	bl	80204d0 <dhcp_check>
 8021e4e:	e7c7      	b.n	8021de0 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8021e50:	f7fe fd6c 	bl	802092c <dhcp_reboot.isra.0>
 8021e54:	e7c4      	b.n	8021de0 <dhcp_fine_tmr+0x10>
 8021e56:	bf00      	nop
 8021e58:	2002e0b0 	.word	0x2002e0b0

08021e5c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8021e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021e60:	4f1a      	ldr	r7, [pc, #104]	; (8021ecc <etharp_free_entry+0x70>)
 8021e62:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8021e66:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8021e68:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8021e6c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8021e70:	b32c      	cbz	r4, 8021ebe <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021e72:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8021ed0 <etharp_free_entry+0x74>
 8021e76:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8021ed4 <etharp_free_entry+0x78>
 8021e7a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8021ed8 <etharp_free_entry+0x7c>
 8021e7e:	e006      	b.n	8021e8e <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8021e80:	f7f9 f9be 	bl	801b200 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021e84:	4629      	mov	r1, r5
 8021e86:	200b      	movs	r0, #11
 8021e88:	f7f8 fca2 	bl	801a7d0 <memp_free>
  while (q) {
 8021e8c:	b19c      	cbz	r4, 8021eb6 <etharp_free_entry+0x5a>
    q = q->next;
 8021e8e:	4625      	mov	r5, r4
 8021e90:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021e92:	6868      	ldr	r0, [r5, #4]
 8021e94:	2800      	cmp	r0, #0
 8021e96:	d1f3      	bne.n	8021e80 <etharp_free_entry+0x24>
 8021e98:	4651      	mov	r1, sl
 8021e9a:	465b      	mov	r3, fp
 8021e9c:	229a      	movs	r2, #154	; 0x9a
 8021e9e:	4648      	mov	r0, r9
 8021ea0:	f003 fa78 	bl	8025394 <iprintf>
    pbuf_free(r->p);
 8021ea4:	6868      	ldr	r0, [r5, #4]
 8021ea6:	f7f9 f9ab 	bl	801b200 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021eaa:	4629      	mov	r1, r5
 8021eac:	200b      	movs	r0, #11
 8021eae:	f7f8 fc8f 	bl	801a7d0 <memp_free>
  while (q) {
 8021eb2:	2c00      	cmp	r4, #0
 8021eb4:	d1eb      	bne.n	8021e8e <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8021eb6:	eb08 0306 	add.w	r3, r8, r6
 8021eba:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8021ebe:	4446      	add	r6, r8
 8021ec0:	2300      	movs	r3, #0
 8021ec2:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8021ec6:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021ec8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ecc:	2002e168 	.word	0x2002e168
 8021ed0:	0804561c 	.word	0x0804561c
 8021ed4:	08045654 	.word	0x08045654
 8021ed8:	08029fe8 	.word	0x08029fe8

08021edc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8021edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ee0:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8021ee2:	f04f 0820 	mov.w	r8, #32
{
 8021ee6:	b083      	sub	sp, #12
 8021ee8:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021eea:	469e      	mov	lr, r3
 8021eec:	469b      	mov	fp, r3
{
 8021eee:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8021ef0:	469a      	mov	sl, r3
 8021ef2:	4948      	ldr	r1, [pc, #288]	; (8022014 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 8021ef4:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8021ef6:	46c4      	mov	ip, r8
 8021ef8:	4691      	mov	r9, r2
 8021efa:	f8cd 8004 	str.w	r8, [sp, #4]
 8021efe:	e004      	b.n	8021f0a <etharp_find_entry+0x2e>
 8021f00:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f02:	3301      	adds	r3, #1
 8021f04:	3118      	adds	r1, #24
 8021f06:	2b20      	cmp	r3, #32
 8021f08:	d015      	beq.n	8021f36 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021f0a:	2c20      	cmp	r4, #32
 8021f0c:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 8021f0e:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8021f10:	d134      	bne.n	8021f7c <etharp_find_entry+0xa0>
 8021f12:	2800      	cmp	r0, #0
 8021f14:	d0f4      	beq.n	8021f00 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8021f16:	b11d      	cbz	r5, 8021f20 <etharp_find_entry+0x44>
 8021f18:	682f      	ldr	r7, [r5, #0]
 8021f1a:	684e      	ldr	r6, [r1, #4]
 8021f1c:	42b7      	cmp	r7, r6
 8021f1e:	d038      	beq.n	8021f92 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8021f20:	2801      	cmp	r0, #1
 8021f22:	d02e      	beq.n	8021f82 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8021f24:	8a48      	ldrh	r0, [r1, #18]
 8021f26:	4570      	cmp	r0, lr
 8021f28:	d3eb      	bcc.n	8021f02 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f2a:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 8021f2c:	4686      	mov	lr, r0
 8021f2e:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021f30:	3118      	adds	r1, #24
 8021f32:	2b20      	cmp	r3, #32
 8021f34:	d1e9      	bne.n	8021f0a <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021f36:	9b00      	ldr	r3, [sp, #0]
 8021f38:	464e      	mov	r6, r9
 8021f3a:	2b01      	cmp	r3, #1
 8021f3c:	d166      	bne.n	802200c <etharp_find_entry+0x130>
 8021f3e:	2c20      	cmp	r4, #32
 8021f40:	d040      	beq.n	8021fc4 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021f42:	46a1      	mov	r9, r4
 8021f44:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8021f48:	4a32      	ldr	r2, [pc, #200]	; (8022014 <etharp_find_entry+0x138>)
 8021f4a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8021f4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021f52:	7d1b      	ldrb	r3, [r3, #20]
 8021f54:	bb73      	cbnz	r3, 8021fb4 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021f56:	b135      	cbz	r5, 8021f66 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021f58:	eb08 0309 	add.w	r3, r8, r9
 8021f5c:	492d      	ldr	r1, [pc, #180]	; (8022014 <etharp_find_entry+0x138>)
 8021f5e:	682a      	ldr	r2, [r5, #0]
 8021f60:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8021f64:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8021f66:	44c8      	add	r8, r9
 8021f68:	4a2a      	ldr	r2, [pc, #168]	; (8022014 <etharp_find_entry+0x138>)
 8021f6a:	2300      	movs	r3, #0
 8021f6c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8021f70:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021f72:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8021f74:	4620      	mov	r0, r4
 8021f76:	b003      	add	sp, #12
 8021f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8021f7c:	2800      	cmp	r0, #0
 8021f7e:	d0c0      	beq.n	8021f02 <etharp_find_entry+0x26>
 8021f80:	e7c9      	b.n	8021f16 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8021f82:	6808      	ldr	r0, [r1, #0]
 8021f84:	b180      	cbz	r0, 8021fa8 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8021f86:	8a48      	ldrh	r0, [r1, #18]
 8021f88:	4550      	cmp	r0, sl
 8021f8a:	d3ba      	bcc.n	8021f02 <etharp_find_entry+0x26>
 8021f8c:	4682      	mov	sl, r0
 8021f8e:	4690      	mov	r8, r2
 8021f90:	e7b7      	b.n	8021f02 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021f92:	f1b9 0f00 	cmp.w	r9, #0
 8021f96:	d002      	beq.n	8021f9e <etharp_find_entry+0xc2>
 8021f98:	688e      	ldr	r6, [r1, #8]
 8021f9a:	454e      	cmp	r6, r9
 8021f9c:	d1c0      	bne.n	8021f20 <etharp_find_entry+0x44>
 8021f9e:	4614      	mov	r4, r2
}
 8021fa0:	4620      	mov	r0, r4
 8021fa2:	b003      	add	sp, #12
 8021fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8021fa8:	8a48      	ldrh	r0, [r1, #18]
 8021faa:	4558      	cmp	r0, fp
 8021fac:	d3a9      	bcc.n	8021f02 <etharp_find_entry+0x26>
 8021fae:	4683      	mov	fp, r0
 8021fb0:	9201      	str	r2, [sp, #4]
 8021fb2:	e7a6      	b.n	8021f02 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021fb4:	4b18      	ldr	r3, [pc, #96]	; (8022018 <etharp_find_entry+0x13c>)
 8021fb6:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8021fba:	4918      	ldr	r1, [pc, #96]	; (802201c <etharp_find_entry+0x140>)
 8021fbc:	4818      	ldr	r0, [pc, #96]	; (8022020 <etharp_find_entry+0x144>)
 8021fbe:	f003 f9e9 	bl	8025394 <iprintf>
 8021fc2:	e7c8      	b.n	8021f56 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8021fc4:	f1bc 0f20 	cmp.w	ip, #32
 8021fc8:	d012      	beq.n	8021ff0 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021fca:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8021fce:	4a11      	ldr	r2, [pc, #68]	; (8022014 <etharp_find_entry+0x138>)
 8021fd0:	46e1      	mov	r9, ip
 8021fd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021fd6:	b1bb      	cbz	r3, 8022008 <etharp_find_entry+0x12c>
 8021fd8:	464c      	mov	r4, r9
 8021fda:	4b0f      	ldr	r3, [pc, #60]	; (8022018 <etharp_find_entry+0x13c>)
 8021fdc:	f240 126d 	movw	r2, #365	; 0x16d
 8021fe0:	4910      	ldr	r1, [pc, #64]	; (8022024 <etharp_find_entry+0x148>)
 8021fe2:	480f      	ldr	r0, [pc, #60]	; (8022020 <etharp_find_entry+0x144>)
 8021fe4:	f003 f9d6 	bl	8025394 <iprintf>
    etharp_free_entry(i);
 8021fe8:	4648      	mov	r0, r9
 8021fea:	f7ff ff37 	bl	8021e5c <etharp_free_entry>
 8021fee:	e7a9      	b.n	8021f44 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021ff0:	9b01      	ldr	r3, [sp, #4]
 8021ff2:	2b20      	cmp	r3, #32
 8021ff4:	d105      	bne.n	8022002 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021ff6:	f1b8 0f20 	cmp.w	r8, #32
 8021ffa:	d007      	beq.n	802200c <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8021ffc:	4644      	mov	r4, r8
 8021ffe:	46c1      	mov	r9, r8
 8022000:	e7f2      	b.n	8021fe8 <etharp_find_entry+0x10c>
 8022002:	461c      	mov	r4, r3
 8022004:	4699      	mov	r9, r3
 8022006:	e7ef      	b.n	8021fe8 <etharp_find_entry+0x10c>
 8022008:	4664      	mov	r4, ip
 802200a:	e7ed      	b.n	8021fe8 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 802200c:	f04f 34ff 	mov.w	r4, #4294967295
 8022010:	e7b0      	b.n	8021f74 <etharp_find_entry+0x98>
 8022012:	bf00      	nop
 8022014:	2002e168 	.word	0x2002e168
 8022018:	0804561c 	.word	0x0804561c
 802201c:	0804567c 	.word	0x0804567c
 8022020:	08029fe8 	.word	0x08029fe8
 8022024:	08045664 	.word	0x08045664

08022028 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8022028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802202c:	b082      	sub	sp, #8
 802202e:	4688      	mov	r8, r1
 8022030:	4691      	mov	r9, r2
 8022032:	461f      	mov	r7, r3
 8022034:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022038:	4606      	mov	r6, r0
{
 802203a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802203e:	2800      	cmp	r0, #0
 8022040:	d050      	beq.n	80220e4 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8022042:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022046:	211c      	movs	r1, #28
 8022048:	200e      	movs	r0, #14
 802204a:	f7f8 ff07 	bl	801ae5c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802204e:	4605      	mov	r5, r0
 8022050:	2800      	cmp	r0, #0
 8022052:	d04f      	beq.n	80220f4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8022054:	8943      	ldrh	r3, [r0, #10]
 8022056:	2b1b      	cmp	r3, #27
 8022058:	d93c      	bls.n	80220d4 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 802205a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 802205c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 802205e:	f7f7 f893 	bl	8019188 <lwip_htons>
 8022062:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8022064:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8022068:	2b06      	cmp	r3, #6
 802206a:	d006      	beq.n	802207a <etharp_raw+0x52>
 802206c:	4b23      	ldr	r3, [pc, #140]	; (80220fc <etharp_raw+0xd4>)
 802206e:	f240 4269 	movw	r2, #1129	; 0x469
 8022072:	4923      	ldr	r1, [pc, #140]	; (8022100 <etharp_raw+0xd8>)
 8022074:	4823      	ldr	r0, [pc, #140]	; (8022104 <etharp_raw+0xdc>)
 8022076:	f003 f98d 	bl	8025394 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 802207a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 802207c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802207e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022080:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022082:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8022084:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8022086:	88b9      	ldrh	r1, [r7, #4]
 8022088:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802208a:	f8da 1000 	ldr.w	r1, [sl]
 802208e:	f8c4 1012 	str.w	r1, [r4, #18]
 8022092:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8022096:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8022098:	990a      	ldr	r1, [sp, #40]	; 0x28
 802209a:	6809      	ldr	r1, [r1, #0]
 802209c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80220a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80220a2:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220a4:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80220a6:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220a8:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80220aa:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80220ac:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80220ae:	2108      	movs	r1, #8
 80220b0:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 80220b2:	2106      	movs	r1, #6
 80220b4:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80220b6:	2104      	movs	r1, #4
 80220b8:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80220ba:	f640 0106 	movw	r1, #2054	; 0x806
 80220be:	9100      	str	r1, [sp, #0]
 80220c0:	4629      	mov	r1, r5
 80220c2:	f001 fbf5 	bl	80238b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80220c6:	4628      	mov	r0, r5
 80220c8:	f7f9 f89a 	bl	801b200 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80220cc:	4630      	mov	r0, r6
}
 80220ce:	b002      	add	sp, #8
 80220d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80220d4:	4b09      	ldr	r3, [pc, #36]	; (80220fc <etharp_raw+0xd4>)
 80220d6:	f240 4262 	movw	r2, #1122	; 0x462
 80220da:	490b      	ldr	r1, [pc, #44]	; (8022108 <etharp_raw+0xe0>)
 80220dc:	4809      	ldr	r0, [pc, #36]	; (8022104 <etharp_raw+0xdc>)
 80220de:	f003 f959 	bl	8025394 <iprintf>
 80220e2:	e7ba      	b.n	802205a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80220e4:	4b05      	ldr	r3, [pc, #20]	; (80220fc <etharp_raw+0xd4>)
 80220e6:	f240 4257 	movw	r2, #1111	; 0x457
 80220ea:	4908      	ldr	r1, [pc, #32]	; (802210c <etharp_raw+0xe4>)
 80220ec:	4805      	ldr	r0, [pc, #20]	; (8022104 <etharp_raw+0xdc>)
 80220ee:	f003 f951 	bl	8025394 <iprintf>
 80220f2:	e7a6      	b.n	8022042 <etharp_raw+0x1a>
    return ERR_MEM;
 80220f4:	f04f 30ff 	mov.w	r0, #4294967295
 80220f8:	e7e9      	b.n	80220ce <etharp_raw+0xa6>
 80220fa:	bf00      	nop
 80220fc:	0804561c 	.word	0x0804561c
 8022100:	080456dc 	.word	0x080456dc
 8022104:	08029fe8 	.word	0x08029fe8
 8022108:	080456a8 	.word	0x080456a8
 802210c:	0802cd30 	.word	0x0802cd30

08022110 <etharp_output_to_arp_index>:
{
 8022110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022114:	4f37      	ldr	r7, [pc, #220]	; (80221f4 <etharp_output_to_arp_index+0xe4>)
 8022116:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 802211a:	b085      	sub	sp, #20
 802211c:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802211e:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8022122:	4605      	mov	r5, r0
 8022124:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8022126:	ea4f 0842 	mov.w	r8, r2, lsl #1
 802212a:	f899 3014 	ldrb.w	r3, [r9, #20]
 802212e:	2b01      	cmp	r3, #1
 8022130:	d93c      	bls.n	80221ac <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8022132:	2b02      	cmp	r3, #2
 8022134:	d011      	beq.n	802215a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022136:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022138:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 802213c:	fb02 7404 	mla	r4, r2, r4, r7
 8022140:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8022142:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8022146:	4623      	mov	r3, r4
 8022148:	464a      	mov	r2, r9
 802214a:	4631      	mov	r1, r6
 802214c:	4628      	mov	r0, r5
 802214e:	9700      	str	r7, [sp, #0]
 8022150:	f001 fbae 	bl	80238b0 <ethernet_output>
}
 8022154:	b005      	add	sp, #20
 8022156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 802215a:	44a0      	add	r8, r4
 802215c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8022160:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8022164:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8022168:	d82a      	bhi.n	80221c0 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 802216a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802216e:	d3e2      	bcc.n	8022136 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022170:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022174:	2301      	movs	r3, #1
 8022176:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 802217a:	4628      	mov	r0, r5
 802217c:	00e4      	lsls	r4, r4, #3
 802217e:	9303      	str	r3, [sp, #12]
 8022180:	4b1d      	ldr	r3, [pc, #116]	; (80221f8 <etharp_output_to_arp_index+0xe8>)
 8022182:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022184:	f104 020c 	add.w	r2, r4, #12
 8022188:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802218c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802218e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8022190:	18bc      	adds	r4, r7, r2
 8022192:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022194:	9300      	str	r3, [sp, #0]
 8022196:	464b      	mov	r3, r9
 8022198:	4622      	mov	r2, r4
 802219a:	9702      	str	r7, [sp, #8]
 802219c:	f7ff ff44 	bl	8022028 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221a0:	2800      	cmp	r0, #0
 80221a2:	d1ce      	bne.n	8022142 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80221a4:	2303      	movs	r3, #3
 80221a6:	f888 3014 	strb.w	r3, [r8, #20]
 80221aa:	e7ca      	b.n	8022142 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80221ac:	4b13      	ldr	r3, [pc, #76]	; (80221fc <etharp_output_to_arp_index+0xec>)
 80221ae:	f240 22ee 	movw	r2, #750	; 0x2ee
 80221b2:	4913      	ldr	r1, [pc, #76]	; (8022200 <etharp_output_to_arp_index+0xf0>)
 80221b4:	4813      	ldr	r0, [pc, #76]	; (8022204 <etharp_output_to_arp_index+0xf4>)
 80221b6:	f003 f8ed 	bl	8025394 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80221ba:	f899 3014 	ldrb.w	r3, [r9, #20]
 80221be:	e7b8      	b.n	8022132 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221c0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221c4:	2301      	movs	r3, #1
 80221c6:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 80221ca:	4a0f      	ldr	r2, [pc, #60]	; (8022208 <etharp_output_to_arp_index+0xf8>)
 80221cc:	00e4      	lsls	r4, r4, #3
 80221ce:	9303      	str	r3, [sp, #12]
 80221d0:	4649      	mov	r1, r9
 80221d2:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221d4:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221d6:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221d8:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80221da:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221dc:	9302      	str	r3, [sp, #8]
 80221de:	4b06      	ldr	r3, [pc, #24]	; (80221f8 <etharp_output_to_arp_index+0xe8>)
 80221e0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80221e2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80221e4:	9300      	str	r3, [sp, #0]
 80221e6:	464b      	mov	r3, r9
 80221e8:	f7ff ff1e 	bl	8022028 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80221ec:	2800      	cmp	r0, #0
 80221ee:	d0d9      	beq.n	80221a4 <etharp_output_to_arp_index+0x94>
 80221f0:	e7a7      	b.n	8022142 <etharp_output_to_arp_index+0x32>
 80221f2:	bf00      	nop
 80221f4:	2002e168 	.word	0x2002e168
 80221f8:	08045b54 	.word	0x08045b54
 80221fc:	0804561c 	.word	0x0804561c
 8022200:	08045720 	.word	0x08045720
 8022204:	08029fe8 	.word	0x08029fe8
 8022208:	08045b4c 	.word	0x08045b4c

0802220c <etharp_tmr>:
{
 802220c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022210:	4c1e      	ldr	r4, [pc, #120]	; (802228c <etharp_tmr+0x80>)
 8022212:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022214:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022216:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8022294 <etharp_tmr+0x88>
 802221a:	4f1d      	ldr	r7, [pc, #116]	; (8022290 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 802221c:	2602      	movs	r6, #2
 802221e:	e00d      	b.n	802223c <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8022220:	2a01      	cmp	r2, #1
 8022222:	d101      	bne.n	8022228 <etharp_tmr+0x1c>
 8022224:	2b04      	cmp	r3, #4
 8022226:	d813      	bhi.n	8022250 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8022228:	2a03      	cmp	r2, #3
 802222a:	d01b      	beq.n	8022264 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802222c:	2a04      	cmp	r2, #4
 802222e:	d01c      	beq.n	802226a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8022230:	2a01      	cmp	r2, #1
 8022232:	d01c      	beq.n	802226e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022234:	3501      	adds	r5, #1
 8022236:	3418      	adds	r4, #24
 8022238:	2d20      	cmp	r5, #32
 802223a:	d010      	beq.n	802225e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 802223c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 802223e:	2a00      	cmp	r2, #0
 8022240:	d0f8      	beq.n	8022234 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8022242:	89e3      	ldrh	r3, [r4, #14]
 8022244:	3301      	adds	r3, #1
 8022246:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8022248:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 802224c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802224e:	d3e7      	bcc.n	8022220 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8022250:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022252:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8022254:	f7ff fe02 	bl	8021e5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8022258:	3418      	adds	r4, #24
 802225a:	2d20      	cmp	r5, #32
 802225c:	d1ee      	bne.n	802223c <etharp_tmr+0x30>
}
 802225e:	b004      	add	sp, #16
 8022260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8022264:	2304      	movs	r3, #4
 8022266:	7423      	strb	r3, [r4, #16]
 8022268:	e7e4      	b.n	8022234 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 802226a:	7426      	strb	r6, [r4, #16]
 802226c:	e7e2      	b.n	8022234 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802226e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022270:	f8cd 8004 	str.w	r8, [sp, #4]
 8022274:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022278:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802227a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 802227e:	9100      	str	r1, [sp, #0]
 8022280:	463a      	mov	r2, r7
 8022282:	4619      	mov	r1, r3
 8022284:	f7ff fed0 	bl	8022028 <etharp_raw>
 8022288:	e7d4      	b.n	8022234 <etharp_tmr+0x28>
 802228a:	bf00      	nop
 802228c:	2002e16c 	.word	0x2002e16c
 8022290:	08045b4c 	.word	0x08045b4c
 8022294:	08045b54 	.word	0x08045b54

08022298 <etharp_cleanup_netif>:
{
 8022298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802229a:	4c0c      	ldr	r4, [pc, #48]	; (80222cc <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802229c:	2500      	movs	r5, #0
{
 802229e:	4607      	mov	r7, r0
 80222a0:	f504 7640 	add.w	r6, r4, #768	; 0x300
 80222a4:	e003      	b.n	80222ae <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222a6:	3418      	adds	r4, #24
 80222a8:	3501      	adds	r5, #1
 80222aa:	42b4      	cmp	r4, r6
 80222ac:	d00c      	beq.n	80222c8 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80222ae:	7d23      	ldrb	r3, [r4, #20]
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d0f8      	beq.n	80222a6 <etharp_cleanup_netif+0xe>
 80222b4:	68a3      	ldr	r3, [r4, #8]
 80222b6:	42bb      	cmp	r3, r7
 80222b8:	d1f5      	bne.n	80222a6 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222ba:	3418      	adds	r4, #24
      etharp_free_entry(i);
 80222bc:	4628      	mov	r0, r5
 80222be:	f7ff fdcd 	bl	8021e5c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80222c2:	3501      	adds	r5, #1
 80222c4:	42b4      	cmp	r4, r6
 80222c6:	d1f2      	bne.n	80222ae <etharp_cleanup_netif+0x16>
}
 80222c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80222ca:	bf00      	nop
 80222cc:	2002e168 	.word	0x2002e168

080222d0 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80222d0:	2900      	cmp	r1, #0
 80222d2:	f000 808e 	beq.w	80223f2 <etharp_input+0x122>
{
 80222d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 80222da:	6846      	ldr	r6, [r0, #4]
{
 80222dc:	b087      	sub	sp, #28
 80222de:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80222e0:	8833      	ldrh	r3, [r6, #0]
 80222e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80222e6:	d102      	bne.n	80222ee <etharp_input+0x1e>
 80222e8:	7933      	ldrb	r3, [r6, #4]
 80222ea:	2b06      	cmp	r3, #6
 80222ec:	d005      	beq.n	80222fa <etharp_input+0x2a>
    pbuf_free(p);
 80222ee:	4620      	mov	r0, r4
}
 80222f0:	b007      	add	sp, #28
 80222f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 80222f6:	f7f8 bf83 	b.w	801b200 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80222fa:	7973      	ldrb	r3, [r6, #5]
 80222fc:	2b04      	cmp	r3, #4
 80222fe:	d1f6      	bne.n	80222ee <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8022300:	8873      	ldrh	r3, [r6, #2]
 8022302:	2b08      	cmp	r3, #8
 8022304:	d1f3      	bne.n	80222ee <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022306:	f8d6 000e 	ldr.w	r0, [r6, #14]
 802230a:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 802230c:	684b      	ldr	r3, [r1, #4]
 802230e:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8022312:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022314:	2b00      	cmp	r3, #0
 8022316:	d073      	beq.n	8022400 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022318:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802231c:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8022320:	faba fa8a 	clz	sl, sl
 8022324:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022328:	f1ca 0702 	rsb	r7, sl, #2
 802232c:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802232e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8022332:	2b06      	cmp	r3, #6
 8022334:	d007      	beq.n	8022346 <etharp_input+0x76>
 8022336:	4b3e      	ldr	r3, [pc, #248]	; (8022430 <etharp_input+0x160>)
 8022338:	f240 12a9 	movw	r2, #425	; 0x1a9
 802233c:	493d      	ldr	r1, [pc, #244]	; (8022434 <etharp_input+0x164>)
 802233e:	483e      	ldr	r0, [pc, #248]	; (8022438 <etharp_input+0x168>)
 8022340:	f003 f828 	bl	8025394 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8022344:	9805      	ldr	r0, [sp, #20]
 8022346:	2800      	cmp	r0, #0
 8022348:	d042      	beq.n	80223d0 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802234a:	4629      	mov	r1, r5
 802234c:	f000 fd30 	bl	8022db0 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8022350:	4681      	mov	r9, r0
 8022352:	2800      	cmp	r0, #0
 8022354:	d13c      	bne.n	80223d0 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8022356:	9b05      	ldr	r3, [sp, #20]
 8022358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802235c:	2be0      	cmp	r3, #224	; 0xe0
 802235e:	d037      	beq.n	80223d0 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8022360:	4639      	mov	r1, r7
 8022362:	462a      	mov	r2, r5
 8022364:	a805      	add	r0, sp, #20
 8022366:	f7ff fdb9 	bl	8021edc <etharp_find_entry>
  if (i < 0) {
 802236a:	2800      	cmp	r0, #0
 802236c:	db30      	blt.n	80223d0 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802236e:	4a33      	ldr	r2, [pc, #204]	; (802243c <etharp_input+0x16c>)
 8022370:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8022374:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022376:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802237a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 802237e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022380:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8022382:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8022384:	fb10 330c 	smlabb	r3, r0, ip, r3
 8022388:	f8d8 0000 	ldr.w	r0, [r8]
 802238c:	50d0      	str	r0, [r2, r3]
 802238e:	18d0      	adds	r0, r2, r3
 8022390:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8022394:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8022396:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 802239a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 802239e:	b1b9      	cbz	r1, 80223d0 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80223a0:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 80223a4:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80223a6:	200b      	movs	r0, #11
    p = q->p;
 80223a8:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 80223ac:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80223ae:	f7f8 fa0f 	bl	801a7d0 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80223b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80223b6:	4659      	mov	r1, fp
 80223b8:	464a      	mov	r2, r9
 80223ba:	9300      	str	r3, [sp, #0]
 80223bc:	4628      	mov	r0, r5
 80223be:	4643      	mov	r3, r8
 80223c0:	f001 fa76 	bl	80238b0 <ethernet_output>
    pbuf_free(p);
 80223c4:	4658      	mov	r0, fp
 80223c6:	f7f8 ff1b 	bl	801b200 <pbuf_free>
  while (arp_table[i].q != NULL) {
 80223ca:	6839      	ldr	r1, [r7, #0]
 80223cc:	2900      	cmp	r1, #0
 80223ce:	d1e9      	bne.n	80223a4 <etharp_input+0xd4>
  switch (hdr->opcode) {
 80223d0:	88f3      	ldrh	r3, [r6, #6]
 80223d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80223d6:	d018      	beq.n	802240a <etharp_input+0x13a>
 80223d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80223dc:	d103      	bne.n	80223e6 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 80223de:	a905      	add	r1, sp, #20
 80223e0:	4628      	mov	r0, r5
 80223e2:	f7ff f971 	bl	80216c8 <dhcp_arp_reply>
  pbuf_free(p);
 80223e6:	4620      	mov	r0, r4
 80223e8:	f7f8 ff0a 	bl	801b200 <pbuf_free>
}
 80223ec:	b007      	add	sp, #28
 80223ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80223f2:	4b0f      	ldr	r3, [pc, #60]	; (8022430 <etharp_input+0x160>)
 80223f4:	f240 228a 	movw	r2, #650	; 0x28a
 80223f8:	4911      	ldr	r1, [pc, #68]	; (8022440 <etharp_input+0x170>)
 80223fa:	480f      	ldr	r0, [pc, #60]	; (8022438 <etharp_input+0x168>)
 80223fc:	f002 bfca 	b.w	8025394 <iprintf>
    for_us = 0;
 8022400:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8022402:	f106 0808 	add.w	r8, r6, #8
 8022406:	2702      	movs	r7, #2
 8022408:	e791      	b.n	802232e <etharp_input+0x5e>
      if (for_us) {
 802240a:	f1ba 0f00 	cmp.w	sl, #0
 802240e:	d0ea      	beq.n	80223e6 <etharp_input+0x116>
        etharp_raw(netif,
 8022410:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8022412:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8022416:	4642      	mov	r2, r8
 8022418:	4628      	mov	r0, r5
 802241a:	9103      	str	r1, [sp, #12]
 802241c:	a905      	add	r1, sp, #20
 802241e:	f8cd 8004 	str.w	r8, [sp, #4]
 8022422:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8022424:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8022426:	9100      	str	r1, [sp, #0]
 8022428:	4619      	mov	r1, r3
 802242a:	f7ff fdfd 	bl	8022028 <etharp_raw>
 802242e:	e7da      	b.n	80223e6 <etharp_input+0x116>
 8022430:	0804561c 	.word	0x0804561c
 8022434:	08045770 	.word	0x08045770
 8022438:	08029fe8 	.word	0x08029fe8
 802243c:	2002e168 	.word	0x2002e168
 8022440:	0802cd30 	.word	0x0802cd30

08022444 <etharp_query>:
{
 8022444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022448:	468a      	mov	sl, r1
 802244a:	b085      	sub	sp, #20
 802244c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802244e:	4601      	mov	r1, r0
 8022450:	f8da 0000 	ldr.w	r0, [sl]
{
 8022454:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8022456:	f000 fcab 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 802245a:	2800      	cmp	r0, #0
 802245c:	f040 80d1 	bne.w	8022602 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8022460:	f8da 3000 	ldr.w	r3, [sl]
 8022464:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8022468:	2ae0      	cmp	r2, #224	; 0xe0
 802246a:	f000 80ca 	beq.w	8022602 <etharp_query+0x1be>
 802246e:	2b00      	cmp	r3, #0
 8022470:	f000 80c7 	beq.w	8022602 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8022474:	462a      	mov	r2, r5
 8022476:	2101      	movs	r1, #1
 8022478:	4650      	mov	r0, sl
 802247a:	f7ff fd2f 	bl	8021edc <etharp_find_entry>
  if (i_err < 0) {
 802247e:	1e07      	subs	r7, r0, #0
 8022480:	db52      	blt.n	8022528 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022482:	2f7e      	cmp	r7, #126	; 0x7e
 8022484:	dc48      	bgt.n	8022518 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8022486:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8022488:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8022638 <etharp_query+0x1f4>
 802248c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8022490:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8022494:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8022498:	7d1a      	ldrb	r2, [r3, #20]
 802249a:	b18a      	cbz	r2, 80224c0 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802249c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80224a0:	2e00      	cmp	r6, #0
 80224a2:	f000 80a0 	beq.w	80225e6 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80224a6:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 80224aa:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80224ae:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80224b2:	7d13      	ldrb	r3, [r2, #20]
 80224b4:	2b01      	cmp	r3, #1
 80224b6:	d81e      	bhi.n	80224f6 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80224b8:	d03a      	beq.n	8022530 <etharp_query+0xec>
}
 80224ba:	b005      	add	sp, #20
 80224bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80224c0:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224c2:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 80224c6:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80224c8:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 80224cc:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224ce:	4628      	mov	r0, r5
 80224d0:	4b53      	ldr	r3, [pc, #332]	; (8022620 <etharp_query+0x1dc>)
 80224d2:	4659      	mov	r1, fp
 80224d4:	9203      	str	r2, [sp, #12]
 80224d6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80224d8:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80224da:	4a52      	ldr	r2, [pc, #328]	; (8022624 <etharp_query+0x1e0>)
 80224dc:	9300      	str	r3, [sp, #0]
 80224de:	465b      	mov	r3, fp
 80224e0:	f7ff fda2 	bl	8022028 <etharp_raw>
    if (q == NULL) {
 80224e4:	2e00      	cmp	r6, #0
 80224e6:	d0e8      	beq.n	80224ba <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80224e8:	eb09 0207 	add.w	r2, r9, r7
 80224ec:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80224f0:	7d13      	ldrb	r3, [r2, #20]
 80224f2:	2b01      	cmp	r3, #1
 80224f4:	d9e0      	bls.n	80224b8 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80224f6:	2318      	movs	r3, #24
 80224f8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80224fc:	465a      	mov	r2, fp
 80224fe:	4631      	mov	r1, r6
 8022500:	fb03 8307 	mla	r3, r3, r7, r8
 8022504:	4628      	mov	r0, r5
 8022506:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8022508:	4c47      	ldr	r4, [pc, #284]	; (8022628 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802250a:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 802250c:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802250e:	f001 f9cf 	bl	80238b0 <ethernet_output>
}
 8022512:	b005      	add	sp, #20
 8022514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8022518:	4b44      	ldr	r3, [pc, #272]	; (802262c <etharp_query+0x1e8>)
 802251a:	f240 32c1 	movw	r2, #961	; 0x3c1
 802251e:	4944      	ldr	r1, [pc, #272]	; (8022630 <etharp_query+0x1ec>)
 8022520:	4844      	ldr	r0, [pc, #272]	; (8022634 <etharp_query+0x1f0>)
 8022522:	f002 ff37 	bl	8025394 <iprintf>
 8022526:	e7ae      	b.n	8022486 <etharp_query+0x42>
    return (err_t)i_err;
 8022528:	b278      	sxtb	r0, r7
}
 802252a:	b005      	add	sp, #20
 802252c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022530:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022532:	4d3e      	ldr	r5, [pc, #248]	; (802262c <etharp_query+0x1e8>)
 8022534:	f8df b104 	ldr.w	fp, [pc, #260]	; 802263c <etharp_query+0x1f8>
 8022538:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8022634 <etharp_query+0x1f0>
 802253c:	e005      	b.n	802254a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802253e:	7b23      	ldrb	r3, [r4, #12]
 8022540:	065a      	lsls	r2, r3, #25
 8022542:	d413      	bmi.n	802256c <etharp_query+0x128>
      p = p->next;
 8022544:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8022546:	2c00      	cmp	r4, #0
 8022548:	d038      	beq.n	80225bc <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802254a:	8962      	ldrh	r2, [r4, #10]
 802254c:	8923      	ldrh	r3, [r4, #8]
 802254e:	429a      	cmp	r2, r3
 8022550:	d1f5      	bne.n	802253e <etharp_query+0xfa>
 8022552:	6822      	ldr	r2, [r4, #0]
 8022554:	462b      	mov	r3, r5
 8022556:	b132      	cbz	r2, 8022566 <etharp_query+0x122>
 8022558:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802255c:	4659      	mov	r1, fp
 802255e:	4650      	mov	r0, sl
 8022560:	f002 ff18 	bl	8025394 <iprintf>
 8022564:	e7eb      	b.n	802253e <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8022566:	7b23      	ldrb	r3, [r4, #12]
 8022568:	065b      	lsls	r3, r3, #25
 802256a:	d527      	bpl.n	80225bc <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802256c:	4632      	mov	r2, r6
 802256e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8022572:	200e      	movs	r0, #14
 8022574:	f7f8 ffd6 	bl	801b524 <pbuf_clone>
    if (p != NULL) {
 8022578:	4606      	mov	r6, r0
 802257a:	2800      	cmp	r0, #0
 802257c:	d047      	beq.n	802260e <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802257e:	f240 4206 	movw	r2, #1030	; 0x406
 8022582:	492a      	ldr	r1, [pc, #168]	; (802262c <etharp_query+0x1e8>)
 8022584:	200b      	movs	r0, #11
 8022586:	f7f8 f8ed 	bl	801a764 <memp_malloc_fn>
      if (new_entry != NULL) {
 802258a:	4602      	mov	r2, r0
 802258c:	2800      	cmp	r0, #0
 802258e:	d041      	beq.n	8022614 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8022590:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8022594:	2100      	movs	r1, #0
        new_entry->p = p;
 8022596:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8022598:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802259a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802259c:	f858 5003 	ldr.w	r5, [r8, r3]
 80225a0:	b1ed      	cbz	r5, 80225de <etharp_query+0x19a>
          while (r->next != NULL) {
 80225a2:	682c      	ldr	r4, [r5, #0]
 80225a4:	b384      	cbz	r4, 8022608 <etharp_query+0x1c4>
          qlen++;
 80225a6:	2301      	movs	r3, #1
            qlen++;
 80225a8:	4620      	mov	r0, r4
          while (r->next != NULL) {
 80225aa:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80225ac:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80225ae:	2c00      	cmp	r4, #0
 80225b0:	d1fa      	bne.n	80225a8 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 80225b2:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80225b4:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80225b6:	d805      	bhi.n	80225c4 <etharp_query+0x180>
        result = ERR_OK;
 80225b8:	4620      	mov	r0, r4
 80225ba:	e77e      	b.n	80224ba <etharp_query+0x76>
      pbuf_ref(p);
 80225bc:	4630      	mov	r0, r6
 80225be:	f7f8 fe3d 	bl	801b23c <pbuf_ref>
    if (p != NULL) {
 80225c2:	e7dc      	b.n	802257e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 80225c4:	682b      	ldr	r3, [r5, #0]
 80225c6:	444f      	add	r7, r9
          pbuf_free(old->p);
 80225c8:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 80225ca:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 80225ce:	f7f8 fe17 	bl	801b200 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 80225d2:	200b      	movs	r0, #11
 80225d4:	4629      	mov	r1, r5
 80225d6:	f7f8 f8fb 	bl	801a7d0 <memp_free>
        result = ERR_OK;
 80225da:	4620      	mov	r0, r4
 80225dc:	e76d      	b.n	80224ba <etharp_query+0x76>
 80225de:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 80225e0:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 80225e4:	e769      	b.n	80224ba <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80225e6:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80225e8:	2301      	movs	r3, #1
 80225ea:	4c0d      	ldr	r4, [pc, #52]	; (8022620 <etharp_query+0x1dc>)
 80225ec:	4659      	mov	r1, fp
 80225ee:	4628      	mov	r0, r5
 80225f0:	e9cd a302 	strd	sl, r3, [sp, #8]
 80225f4:	e9cd 2400 	strd	r2, r4, [sp]
 80225f8:	465b      	mov	r3, fp
 80225fa:	4a0a      	ldr	r2, [pc, #40]	; (8022624 <etharp_query+0x1e0>)
 80225fc:	f7ff fd14 	bl	8022028 <etharp_raw>
    if (q == NULL) {
 8022600:	e75b      	b.n	80224ba <etharp_query+0x76>
    return ERR_ARG;
 8022602:	f06f 000f 	mvn.w	r0, #15
 8022606:	e758      	b.n	80224ba <etharp_query+0x76>
        result = ERR_OK;
 8022608:	4620      	mov	r0, r4
          r->next = new_entry;
 802260a:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 802260c:	e755      	b.n	80224ba <etharp_query+0x76>
      result = ERR_MEM;
 802260e:	f04f 30ff 	mov.w	r0, #4294967295
 8022612:	e752      	b.n	80224ba <etharp_query+0x76>
        pbuf_free(p);
 8022614:	4630      	mov	r0, r6
 8022616:	f7f8 fdf3 	bl	801b200 <pbuf_free>
        result = ERR_MEM;
 802261a:	f04f 30ff 	mov.w	r0, #4294967295
 802261e:	e74c      	b.n	80224ba <etharp_query+0x76>
 8022620:	08045b54 	.word	0x08045b54
 8022624:	08045b4c 	.word	0x08045b4c
 8022628:	2002e468 	.word	0x2002e468
 802262c:	0804561c 	.word	0x0804561c
 8022630:	08045794 	.word	0x08045794
 8022634:	08029fe8 	.word	0x08029fe8
 8022638:	2002e168 	.word	0x2002e168
 802263c:	080457a4 	.word	0x080457a4

08022640 <etharp_output>:
{
 8022640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022644:	460f      	mov	r7, r1
 8022646:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022648:	4605      	mov	r5, r0
{
 802264a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802264c:	2800      	cmp	r0, #0
 802264e:	f000 8086 	beq.w	802275e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022652:	2f00      	cmp	r7, #0
 8022654:	d072      	beq.n	802273c <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022656:	2e00      	cmp	r6, #0
 8022658:	d079      	beq.n	802274e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802265a:	4629      	mov	r1, r5
 802265c:	6830      	ldr	r0, [r6, #0]
 802265e:	f000 fba7 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 8022662:	2800      	cmp	r0, #0
 8022664:	d160      	bne.n	8022728 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022666:	6833      	ldr	r3, [r6, #0]
 8022668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802266c:	2ae0      	cmp	r2, #224	; 0xe0
 802266e:	d03b      	beq.n	80226e8 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022670:	686a      	ldr	r2, [r5, #4]
 8022672:	68a9      	ldr	r1, [r5, #8]
 8022674:	405a      	eors	r2, r3
 8022676:	420a      	tst	r2, r1
 8022678:	d009      	beq.n	802268e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 802267a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802267c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022680:	4293      	cmp	r3, r2
 8022682:	d004      	beq.n	802268e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022684:	68eb      	ldr	r3, [r5, #12]
 8022686:	2b00      	cmp	r3, #0
 8022688:	d07b      	beq.n	8022782 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 802268a:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802268e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80227a4 <etharp_output+0x164>
 8022692:	4b3d      	ldr	r3, [pc, #244]	; (8022788 <etharp_output+0x148>)
 8022694:	f898 2000 	ldrb.w	r2, [r8]
 8022698:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802269c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80226a0:	7d19      	ldrb	r1, [r3, #20]
 80226a2:	2901      	cmp	r1, #1
 80226a4:	d902      	bls.n	80226ac <etharp_output+0x6c>
 80226a6:	6899      	ldr	r1, [r3, #8]
 80226a8:	42a9      	cmp	r1, r5
 80226aa:	d063      	beq.n	8022774 <etharp_output+0x134>
 80226ac:	4c36      	ldr	r4, [pc, #216]	; (8022788 <etharp_output+0x148>)
{
 80226ae:	2300      	movs	r3, #0
 80226b0:	e003      	b.n	80226ba <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80226b2:	2b20      	cmp	r3, #32
 80226b4:	f104 0418 	add.w	r4, r4, #24
 80226b8:	d038      	beq.n	802272c <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80226ba:	f894 c014 	ldrb.w	ip, [r4, #20]
 80226be:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80226c0:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80226c2:	f1bc 0f01 	cmp.w	ip, #1
 80226c6:	d9f4      	bls.n	80226b2 <etharp_output+0x72>
 80226c8:	68a0      	ldr	r0, [r4, #8]
 80226ca:	42a8      	cmp	r0, r5
 80226cc:	d1f1      	bne.n	80226b2 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 80226ce:	6860      	ldr	r0, [r4, #4]
 80226d0:	6831      	ldr	r1, [r6, #0]
 80226d2:	4281      	cmp	r1, r0
 80226d4:	d1ed      	bne.n	80226b2 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 80226d6:	4639      	mov	r1, r7
 80226d8:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 80226da:	f888 2000 	strb.w	r2, [r8]
}
 80226de:	b004      	add	sp, #16
 80226e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 80226e4:	f7ff bd14 	b.w	8022110 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80226e8:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80226ea:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80226ec:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80226ee:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80226f2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80226f6:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80226f8:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80226fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80226fe:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8022702:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 8022706:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8022708:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802270c:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8022710:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8022714:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 8022718:	4639      	mov	r1, r7
 802271a:	4628      	mov	r0, r5
 802271c:	9400      	str	r4, [sp, #0]
 802271e:	f001 f8c7 	bl	80238b0 <ethernet_output>
}
 8022722:	b004      	add	sp, #16
 8022724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 8022728:	4b18      	ldr	r3, [pc, #96]	; (802278c <etharp_output+0x14c>)
 802272a:	e7f1      	b.n	8022710 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 802272c:	463a      	mov	r2, r7
 802272e:	4631      	mov	r1, r6
 8022730:	4628      	mov	r0, r5
}
 8022732:	b004      	add	sp, #16
 8022734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8022738:	f7ff be84 	b.w	8022444 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 802273c:	4b14      	ldr	r3, [pc, #80]	; (8022790 <etharp_output+0x150>)
 802273e:	f240 321f 	movw	r2, #799	; 0x31f
 8022742:	4914      	ldr	r1, [pc, #80]	; (8022794 <etharp_output+0x154>)
 8022744:	4814      	ldr	r0, [pc, #80]	; (8022798 <etharp_output+0x158>)
 8022746:	f002 fe25 	bl	8025394 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802274a:	2e00      	cmp	r6, #0
 802274c:	d185      	bne.n	802265a <etharp_output+0x1a>
 802274e:	4b10      	ldr	r3, [pc, #64]	; (8022790 <etharp_output+0x150>)
 8022750:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022754:	4911      	ldr	r1, [pc, #68]	; (802279c <etharp_output+0x15c>)
 8022756:	4810      	ldr	r0, [pc, #64]	; (8022798 <etharp_output+0x158>)
 8022758:	f002 fe1c 	bl	8025394 <iprintf>
 802275c:	e77d      	b.n	802265a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802275e:	4b0c      	ldr	r3, [pc, #48]	; (8022790 <etharp_output+0x150>)
 8022760:	f240 321e 	movw	r2, #798	; 0x31e
 8022764:	490e      	ldr	r1, [pc, #56]	; (80227a0 <etharp_output+0x160>)
 8022766:	480c      	ldr	r0, [pc, #48]	; (8022798 <etharp_output+0x158>)
 8022768:	f002 fe14 	bl	8025394 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802276c:	2f00      	cmp	r7, #0
 802276e:	f47f af72 	bne.w	8022656 <etharp_output+0x16>
 8022772:	e7e3      	b.n	802273c <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022774:	685b      	ldr	r3, [r3, #4]
 8022776:	6831      	ldr	r1, [r6, #0]
 8022778:	4299      	cmp	r1, r3
 802277a:	d197      	bne.n	80226ac <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802277c:	4639      	mov	r1, r7
 802277e:	4628      	mov	r0, r5
 8022780:	e7ad      	b.n	80226de <etharp_output+0x9e>
            return ERR_RTE;
 8022782:	f06f 0003 	mvn.w	r0, #3
 8022786:	e7cc      	b.n	8022722 <etharp_output+0xe2>
 8022788:	2002e168 	.word	0x2002e168
 802278c:	08045b4c 	.word	0x08045b4c
 8022790:	0804561c 	.word	0x0804561c
 8022794:	080457c0 	.word	0x080457c0
 8022798:	08029fe8 	.word	0x08029fe8
 802279c:	08045750 	.word	0x08045750
 80227a0:	0802cd30 	.word	0x0802cd30
 80227a4:	2002e468 	.word	0x2002e468

080227a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80227a8:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227aa:	2301      	movs	r3, #1
{
 80227ac:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227ae:	4c07      	ldr	r4, [pc, #28]	; (80227cc <etharp_request+0x24>)
 80227b0:	4a07      	ldr	r2, [pc, #28]	; (80227d0 <etharp_request+0x28>)
 80227b2:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80227b4:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80227b6:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80227ba:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 80227be:	9400      	str	r4, [sp, #0]
 80227c0:	4619      	mov	r1, r3
 80227c2:	f7ff fc31 	bl	8022028 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80227c6:	b004      	add	sp, #16
 80227c8:	bd10      	pop	{r4, pc}
 80227ca:	bf00      	nop
 80227cc:	08045b54 	.word	0x08045b54
 80227d0:	08045b4c 	.word	0x08045b4c

080227d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80227d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227d6:	460e      	mov	r6, r1
 80227d8:	b087      	sub	sp, #28
 80227da:	4617      	mov	r7, r2
 80227dc:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80227de:	2124      	movs	r1, #36	; 0x24
 80227e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80227e4:	2022      	movs	r0, #34	; 0x22
 80227e6:	f7f8 fb39 	bl	801ae5c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80227ea:	b3a8      	cbz	r0, 8022858 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80227ec:	8943      	ldrh	r3, [r0, #10]
 80227ee:	4605      	mov	r5, r0
 80227f0:	2b23      	cmp	r3, #35	; 0x23
 80227f2:	d933      	bls.n	802285c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80227f4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80227f6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 80227f8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 80227fa:	2600      	movs	r6, #0
  icmphdr->code = code;
 80227fc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 80227fe:	7126      	strb	r6, [r4, #4]
 8022800:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8022802:	71a6      	strb	r6, [r4, #6]
 8022804:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022806:	6818      	ldr	r0, [r3, #0]
 8022808:	6859      	ldr	r1, [r3, #4]
 802280a:	689a      	ldr	r2, [r3, #8]
 802280c:	68df      	ldr	r7, [r3, #12]
 802280e:	60a0      	str	r0, [r4, #8]
 8022810:	6167      	str	r7, [r4, #20]
 8022812:	60e1      	str	r1, [r4, #12]
 8022814:	6122      	str	r2, [r4, #16]
 8022816:	6918      	ldr	r0, [r3, #16]
 8022818:	6959      	ldr	r1, [r3, #20]
 802281a:	699a      	ldr	r2, [r3, #24]
 802281c:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802281e:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8022820:	61e1      	str	r1, [r4, #28]
 8022822:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8022824:	68db      	ldr	r3, [r3, #12]
 8022826:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8022828:	f000 f8e6 	bl	80229f8 <ip4_route>
#endif
  if (netif != NULL) {
 802282c:	4607      	mov	r7, r0
 802282e:	b180      	cbz	r0, 8022852 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022830:	8969      	ldrh	r1, [r5, #10]
 8022832:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8022834:	70a6      	strb	r6, [r4, #2]
 8022836:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022838:	f7f7 fa4e 	bl	8019cd8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802283c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802283e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022840:	aa05      	add	r2, sp, #20
 8022842:	4631      	mov	r1, r6
 8022844:	4628      	mov	r0, r5
 8022846:	9600      	str	r6, [sp, #0]
 8022848:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802284c:	23ff      	movs	r3, #255	; 0xff
 802284e:	f000 fa9d 	bl	8022d8c <ip4_output_if>
  }
  pbuf_free(q);
 8022852:	4628      	mov	r0, r5
 8022854:	f7f8 fcd4 	bl	801b200 <pbuf_free>
}
 8022858:	b007      	add	sp, #28
 802285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802285c:	4b03      	ldr	r3, [pc, #12]	; (802286c <icmp_send_response+0x98>)
 802285e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022862:	4903      	ldr	r1, [pc, #12]	; (8022870 <icmp_send_response+0x9c>)
 8022864:	4803      	ldr	r0, [pc, #12]	; (8022874 <icmp_send_response+0xa0>)
 8022866:	f002 fd95 	bl	8025394 <iprintf>
 802286a:	e7c3      	b.n	80227f4 <icmp_send_response+0x20>
 802286c:	080457cc 	.word	0x080457cc
 8022870:	08045804 	.word	0x08045804
 8022874:	08029fe8 	.word	0x08029fe8

08022878 <icmp_input>:
{
 8022878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 802287c:	4f54      	ldr	r7, [pc, #336]	; (80229d0 <icmp_input+0x158>)
{
 802287e:	b086      	sub	sp, #24
 8022880:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8022882:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8022886:	f898 4000 	ldrb.w	r4, [r8]
 802288a:	f004 040f 	and.w	r4, r4, #15
 802288e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8022890:	2c13      	cmp	r4, #19
 8022892:	d913      	bls.n	80228bc <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8022894:	8943      	ldrh	r3, [r0, #10]
 8022896:	2b03      	cmp	r3, #3
 8022898:	d910      	bls.n	80228bc <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 802289a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 802289c:	781b      	ldrb	r3, [r3, #0]
 802289e:	2b08      	cmp	r3, #8
 80228a0:	d10c      	bne.n	80228bc <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80228a2:	6978      	ldr	r0, [r7, #20]
 80228a4:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80228a8:	2be0      	cmp	r3, #224	; 0xe0
 80228aa:	d007      	beq.n	80228bc <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80228ac:	460e      	mov	r6, r1
 80228ae:	6839      	ldr	r1, [r7, #0]
 80228b0:	f000 fa7e 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 80228b4:	b910      	cbnz	r0, 80228bc <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80228b6:	892b      	ldrh	r3, [r5, #8]
 80228b8:	2b07      	cmp	r3, #7
 80228ba:	d805      	bhi.n	80228c8 <icmp_input+0x50>
  pbuf_free(p);
 80228bc:	4628      	mov	r0, r5
}
 80228be:	b006      	add	sp, #24
 80228c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 80228c4:	f7f8 bc9c 	b.w	801b200 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 80228c8:	4628      	mov	r0, r5
 80228ca:	f7f7 fa0b 	bl	8019ce4 <inet_chksum_pbuf>
 80228ce:	2800      	cmp	r0, #0
 80228d0:	d1f4      	bne.n	80228bc <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80228d2:	f104 010e 	add.w	r1, r4, #14
 80228d6:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 80228d8:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80228dc:	9105      	str	r1, [sp, #20]
 80228de:	f7f8 fbcf 	bl	801b080 <pbuf_add_header>
 80228e2:	9905      	ldr	r1, [sp, #20]
 80228e4:	2800      	cmp	r0, #0
 80228e6:	d058      	beq.n	802299a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80228e8:	892b      	ldrh	r3, [r5, #8]
 80228ea:	eb03 0109 	add.w	r1, r3, r9
 80228ee:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80228f0:	428b      	cmp	r3, r1
 80228f2:	d8e3      	bhi.n	80228bc <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80228f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80228f8:	200e      	movs	r0, #14
 80228fa:	f7f8 faaf 	bl	801ae5c <pbuf_alloc>
        if (r == NULL) {
 80228fe:	4682      	mov	sl, r0
 8022900:	2800      	cmp	r0, #0
 8022902:	d0db      	beq.n	80228bc <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8022904:	8942      	ldrh	r2, [r0, #10]
 8022906:	f104 0308 	add.w	r3, r4, #8
 802290a:	429a      	cmp	r2, r3
 802290c:	d351      	bcc.n	80229b2 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 802290e:	4641      	mov	r1, r8
 8022910:	4622      	mov	r2, r4
 8022912:	6840      	ldr	r0, [r0, #4]
 8022914:	f001 fd78 	bl	8024408 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8022918:	4621      	mov	r1, r4
 802291a:	4650      	mov	r0, sl
 802291c:	f7f8 fbe4 	bl	801b0e8 <pbuf_remove_header>
 8022920:	2800      	cmp	r0, #0
 8022922:	d14a      	bne.n	80229ba <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 8022924:	4629      	mov	r1, r5
 8022926:	4650      	mov	r0, sl
 8022928:	f7f8 fcf2 	bl	801b310 <pbuf_copy>
 802292c:	2800      	cmp	r0, #0
 802292e:	d140      	bne.n	80229b2 <icmp_input+0x13a>
        pbuf_free(p);
 8022930:	4628      	mov	r0, r5
 8022932:	4655      	mov	r5, sl
 8022934:	f7f8 fc64 	bl	801b200 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8022938:	4621      	mov	r1, r4
 802293a:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 802293c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8022940:	f7f8 fb9e 	bl	801b080 <pbuf_add_header>
 8022944:	2800      	cmp	r0, #0
 8022946:	d1b9      	bne.n	80228bc <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022948:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802294a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 802294e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022950:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8022952:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022954:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8022956:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022958:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802295a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802295e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022962:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8022964:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8022966:	bf8c      	ite	hi
 8022968:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802296a:	3308      	addls	r3, #8
 802296c:	b29b      	uxth	r3, r3
 802296e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022972:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8022976:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022978:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802297c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802297e:	f7f7 f9ab 	bl	8019cd8 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022982:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022984:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022986:	4643      	mov	r3, r8
 8022988:	4912      	ldr	r1, [pc, #72]	; (80229d4 <icmp_input+0x15c>)
 802298a:	4628      	mov	r0, r5
 802298c:	9700      	str	r7, [sp, #0]
 802298e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8022992:	463a      	mov	r2, r7
 8022994:	f000 f9fa 	bl	8022d8c <ip4_output_if>
  pbuf_free(p);
 8022998:	e790      	b.n	80228bc <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802299a:	4628      	mov	r0, r5
 802299c:	f7f8 fba4 	bl	801b0e8 <pbuf_remove_header>
 80229a0:	2800      	cmp	r0, #0
 80229a2:	d0c9      	beq.n	8022938 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80229a4:	4b0c      	ldr	r3, [pc, #48]	; (80229d8 <icmp_input+0x160>)
 80229a6:	22c7      	movs	r2, #199	; 0xc7
 80229a8:	490c      	ldr	r1, [pc, #48]	; (80229dc <icmp_input+0x164>)
 80229aa:	480d      	ldr	r0, [pc, #52]	; (80229e0 <icmp_input+0x168>)
 80229ac:	f002 fcf2 	bl	8025394 <iprintf>
          goto icmperr;
 80229b0:	e784      	b.n	80228bc <icmp_input+0x44>
          pbuf_free(r);
 80229b2:	4650      	mov	r0, sl
 80229b4:	f7f8 fc24 	bl	801b200 <pbuf_free>
          goto icmperr;
 80229b8:	e780      	b.n	80228bc <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80229ba:	4b07      	ldr	r3, [pc, #28]	; (80229d8 <icmp_input+0x160>)
 80229bc:	22b6      	movs	r2, #182	; 0xb6
 80229be:	4909      	ldr	r1, [pc, #36]	; (80229e4 <icmp_input+0x16c>)
 80229c0:	4807      	ldr	r0, [pc, #28]	; (80229e0 <icmp_input+0x168>)
 80229c2:	f002 fce7 	bl	8025394 <iprintf>
          pbuf_free(r);
 80229c6:	4650      	mov	r0, sl
 80229c8:	f7f8 fc1a 	bl	801b200 <pbuf_free>
          goto icmperr;
 80229cc:	e776      	b.n	80228bc <icmp_input+0x44>
 80229ce:	bf00      	nop
 80229d0:	2001ef20 	.word	0x2001ef20
 80229d4:	2001ef34 	.word	0x2001ef34
 80229d8:	080457cc 	.word	0x080457cc
 80229dc:	08045868 	.word	0x08045868
 80229e0:	08029fe8 	.word	0x08029fe8
 80229e4:	08045830 	.word	0x08045830

080229e8 <icmp_dest_unreach>:
{
 80229e8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80229ea:	2103      	movs	r1, #3
 80229ec:	f7ff bef2 	b.w	80227d4 <icmp_send_response>

080229f0 <icmp_time_exceeded>:
{
 80229f0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80229f2:	210b      	movs	r1, #11
 80229f4:	f7ff beee 	b.w	80227d4 <icmp_send_response>

080229f8 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80229f8:	4b19      	ldr	r3, [pc, #100]	; (8022a60 <ip4_route+0x68>)
{
 80229fa:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 80229fc:	681b      	ldr	r3, [r3, #0]
 80229fe:	b1ab      	cbz	r3, 8022a2c <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8022a00:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022a04:	07d4      	lsls	r4, r2, #31
 8022a06:	d5f9      	bpl.n	80229fc <ip4_route+0x4>
 8022a08:	0751      	lsls	r1, r2, #29
 8022a0a:	d5f7      	bpl.n	80229fc <ip4_route+0x4>
 8022a0c:	6859      	ldr	r1, [r3, #4]
 8022a0e:	2900      	cmp	r1, #0
 8022a10:	d0f4      	beq.n	80229fc <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8022a12:	6804      	ldr	r4, [r0, #0]
 8022a14:	689d      	ldr	r5, [r3, #8]
 8022a16:	4061      	eors	r1, r4
 8022a18:	4229      	tst	r1, r5
 8022a1a:	d004      	beq.n	8022a26 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8022a1c:	0792      	lsls	r2, r2, #30
 8022a1e:	d4ed      	bmi.n	80229fc <ip4_route+0x4>
 8022a20:	68da      	ldr	r2, [r3, #12]
 8022a22:	4294      	cmp	r4, r2
 8022a24:	d1ea      	bne.n	80229fc <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8022a26:	4618      	mov	r0, r3
 8022a28:	bc30      	pop	{r4, r5}
 8022a2a:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8022a2c:	4b0d      	ldr	r3, [pc, #52]	; (8022a64 <ip4_route+0x6c>)
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d0f8      	beq.n	8022a26 <ip4_route+0x2e>
 8022a34:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022a38:	f002 0205 	and.w	r2, r2, #5
 8022a3c:	2a05      	cmp	r2, #5
 8022a3e:	d108      	bne.n	8022a52 <ip4_route+0x5a>
 8022a40:	685a      	ldr	r2, [r3, #4]
 8022a42:	b152      	cbz	r2, 8022a5a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022a44:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8022a46:	2a7f      	cmp	r2, #127	; 0x7f
 8022a48:	bf08      	it	eq
 8022a4a:	2300      	moveq	r3, #0
}
 8022a4c:	bc30      	pop	{r4, r5}
 8022a4e:	4618      	mov	r0, r3
 8022a50:	4770      	bx	lr
    return NULL;
 8022a52:	2300      	movs	r3, #0
}
 8022a54:	bc30      	pop	{r4, r5}
 8022a56:	4618      	mov	r0, r3
 8022a58:	4770      	bx	lr
    return NULL;
 8022a5a:	4613      	mov	r3, r2
 8022a5c:	e7e3      	b.n	8022a26 <ip4_route+0x2e>
 8022a5e:	bf00      	nop
 8022a60:	2002e0b0 	.word	0x2002e0b0
 8022a64:	2002e0ac 	.word	0x2002e0ac

08022a68 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8022a6c:	6847      	ldr	r7, [r0, #4]
{
 8022a6e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8022a70:	783b      	ldrb	r3, [r7, #0]
 8022a72:	091a      	lsrs	r2, r3, #4
 8022a74:	2a04      	cmp	r2, #4
 8022a76:	f040 80a8 	bne.w	8022bca <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022a7a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022a7e:	8878      	ldrh	r0, [r7, #2]
 8022a80:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022a82:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022a86:	f7f6 fb7f 	bl	8019188 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8022a8a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022a8c:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022a8e:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8022a90:	4283      	cmp	r3, r0
 8022a92:	f200 80a0 	bhi.w	8022bd6 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022a96:	8963      	ldrh	r3, [r4, #10]
 8022a98:	42ab      	cmp	r3, r5
 8022a9a:	f0c0 8096 	bcc.w	8022bca <ip4_input+0x162>
 8022a9e:	8923      	ldrh	r3, [r4, #8]
 8022aa0:	4543      	cmp	r3, r8
 8022aa2:	f0c0 8092 	bcc.w	8022bca <ip4_input+0x162>
 8022aa6:	2d13      	cmp	r5, #19
 8022aa8:	f240 808f 	bls.w	8022bca <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022aac:	693b      	ldr	r3, [r7, #16]
 8022aae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8022c50 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ab2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022ab6:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022aba:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8022abc:	68f8      	ldr	r0, [r7, #12]
 8022abe:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022ac2:	d073      	beq.n	8022bac <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022ac4:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8022ac8:	07d2      	lsls	r2, r2, #31
 8022aca:	d503      	bpl.n	8022ad4 <ip4_input+0x6c>
 8022acc:	6872      	ldr	r2, [r6, #4]
 8022ace:	2a00      	cmp	r2, #0
 8022ad0:	f040 8094 	bne.w	8022bfc <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022ad4:	b2db      	uxtb	r3, r3
 8022ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8022ad8:	d06c      	beq.n	8022bb4 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8022ada:	4b5c      	ldr	r3, [pc, #368]	; (8022c4c <ip4_input+0x1e4>)
 8022adc:	681d      	ldr	r5, [r3, #0]
 8022ade:	b935      	cbnz	r5, 8022aee <ip4_input+0x86>
 8022ae0:	e068      	b.n	8022bb4 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022ae2:	f000 f965 	bl	8022db0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022ae6:	b980      	cbnz	r0, 8022b0a <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 8022ae8:	682d      	ldr	r5, [r5, #0]
 8022aea:	2d00      	cmp	r5, #0
 8022aec:	d062      	beq.n	8022bb4 <ip4_input+0x14c>
          if (netif == inp) {
 8022aee:	42ae      	cmp	r6, r5
 8022af0:	d0fa      	beq.n	8022ae8 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022af2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 8022af6:	07db      	lsls	r3, r3, #31
 8022af8:	d5f6      	bpl.n	8022ae8 <ip4_input+0x80>
 8022afa:	686b      	ldr	r3, [r5, #4]
 8022afc:	2b00      	cmp	r3, #0
 8022afe:	d0f3      	beq.n	8022ae8 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022b00:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022b04:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022b06:	4283      	cmp	r3, r0
 8022b08:	d1eb      	bne.n	8022ae2 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022b0a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022b0e:	2800      	cmp	r0, #0
 8022b10:	d157      	bne.n	8022bc2 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8022b12:	88fb      	ldrh	r3, [r7, #6]
 8022b14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8022b18:	b133      	cbz	r3, 8022b28 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8022b1a:	4620      	mov	r0, r4
 8022b1c:	f000 fb1c 	bl	8023158 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8022b20:	4604      	mov	r4, r0
 8022b22:	2800      	cmp	r0, #0
 8022b24:	d054      	beq.n	8022bd0 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8022b26:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 8022b28:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 8022b2c:	4631      	mov	r1, r6
 8022b2e:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8022b30:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022b34:	783b      	ldrb	r3, [r7, #0]
 8022b36:	f003 030f 	and.w	r3, r3, #15
 8022b3a:	009b      	lsls	r3, r3, #2
 8022b3c:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8022b40:	f7f8 fd9e 	bl	801b680 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8022b44:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8022b46:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8022b48:	d024      	beq.n	8022b94 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8022b4a:	4649      	mov	r1, r9
 8022b4c:	4620      	mov	r0, r4
 8022b4e:	f7f8 facb 	bl	801b0e8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022b52:	7a7b      	ldrb	r3, [r7, #9]
 8022b54:	2b06      	cmp	r3, #6
 8022b56:	d065      	beq.n	8022c24 <ip4_input+0x1bc>
 8022b58:	2b11      	cmp	r3, #17
 8022b5a:	d05e      	beq.n	8022c1a <ip4_input+0x1b2>
 8022b5c:	2b01      	cmp	r3, #1
 8022b5e:	d057      	beq.n	8022c10 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8022b60:	f1ba 0f02 	cmp.w	sl, #2
 8022b64:	d013      	beq.n	8022b8e <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022b66:	4629      	mov	r1, r5
 8022b68:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8022b6c:	f000 f920 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 8022b70:	b968      	cbnz	r0, 8022b8e <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022b72:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022b7a:	2be0      	cmp	r3, #224	; 0xe0
 8022b7c:	d007      	beq.n	8022b8e <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8022b7e:	4649      	mov	r1, r9
 8022b80:	4620      	mov	r0, r4
 8022b82:	f7f8 fae9 	bl	801b158 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022b86:	2102      	movs	r1, #2
 8022b88:	4620      	mov	r0, r4
 8022b8a:	f7ff ff2d 	bl	80229e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8022b8e:	4620      	mov	r0, r4
 8022b90:	f7f8 fb36 	bl	801b200 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022b94:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8022b96:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8022b98:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 8022b9c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022ba0:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022ba4:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8022ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022bac:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8022bb0:	07d9      	lsls	r1, r3, #31
 8022bb2:	d41e      	bmi.n	8022bf2 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022bb4:	7a7b      	ldrb	r3, [r7, #9]
 8022bb6:	2b11      	cmp	r3, #17
 8022bb8:	d039      	beq.n	8022c2e <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022bba:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022bbe:	b120      	cbz	r0, 8022bca <ip4_input+0x162>
 8022bc0:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022bc2:	4631      	mov	r1, r6
 8022bc4:	f000 f8f4 	bl	8022db0 <ip4_addr_isbroadcast_u32>
 8022bc8:	b150      	cbz	r0, 8022be0 <ip4_input+0x178>
    pbuf_free(p);
 8022bca:	4620      	mov	r0, r4
 8022bcc:	f7f8 fb18 	bl	801b200 <pbuf_free>
}
 8022bd0:	2000      	movs	r0, #0
 8022bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 8022bd6:	4601      	mov	r1, r0
 8022bd8:	4620      	mov	r0, r4
 8022bda:	f7f8 f9f9 	bl	801afd0 <pbuf_realloc>
 8022bde:	e75a      	b.n	8022a96 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8022be0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8022be4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022be8:	2be0      	cmp	r3, #224	; 0xe0
 8022bea:	d0ee      	beq.n	8022bca <ip4_input+0x162>
  if (netif == NULL) {
 8022bec:	2d00      	cmp	r5, #0
 8022bee:	d190      	bne.n	8022b12 <ip4_input+0xaa>
 8022bf0:	e7eb      	b.n	8022bca <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8022bf2:	6873      	ldr	r3, [r6, #4]
 8022bf4:	2b00      	cmp	r3, #0
 8022bf6:	d0dd      	beq.n	8022bb4 <ip4_input+0x14c>
 8022bf8:	4635      	mov	r5, r6
 8022bfa:	e788      	b.n	8022b0e <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022bfc:	4293      	cmp	r3, r2
 8022bfe:	d0fb      	beq.n	8022bf8 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8022c00:	4618      	mov	r0, r3
 8022c02:	4631      	mov	r1, r6
 8022c04:	f000 f8d4 	bl	8022db0 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8022c08:	b9e0      	cbnz	r0, 8022c44 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8022c0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022c0e:	e761      	b.n	8022ad4 <ip4_input+0x6c>
        icmp_input(p, inp);
 8022c10:	4631      	mov	r1, r6
 8022c12:	4620      	mov	r0, r4
 8022c14:	f7ff fe30 	bl	8022878 <icmp_input>
        break;
 8022c18:	e7bc      	b.n	8022b94 <ip4_input+0x12c>
        udp_input(p, inp);
 8022c1a:	4631      	mov	r1, r6
 8022c1c:	4620      	mov	r0, r4
 8022c1e:	f7fd f8a1 	bl	801fd64 <udp_input>
        break;
 8022c22:	e7b7      	b.n	8022b94 <ip4_input+0x12c>
        tcp_input(p, inp);
 8022c24:	4631      	mov	r1, r6
 8022c26:	4620      	mov	r0, r4
 8022c28:	f7fa fefc 	bl	801da24 <tcp_input>
        break;
 8022c2c:	e7b2      	b.n	8022b94 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8022c2e:	eb07 0309 	add.w	r3, r7, r9
 8022c32:	885b      	ldrh	r3, [r3, #2]
 8022c34:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022c38:	d1bf      	bne.n	8022bba <ip4_input+0x152>
 8022c3a:	4635      	mov	r5, r6
  if (netif == NULL) {
 8022c3c:	2d00      	cmp	r5, #0
 8022c3e:	f47f af68 	bne.w	8022b12 <ip4_input+0xaa>
 8022c42:	e7c2      	b.n	8022bca <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022c44:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022c48:	4635      	mov	r5, r6
 8022c4a:	e760      	b.n	8022b0e <ip4_input+0xa6>
 8022c4c:	2002e0b0 	.word	0x2002e0b0
 8022c50:	2001ef20 	.word	0x2001ef20

08022c54 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c58:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c5a:	7b83      	ldrb	r3, [r0, #14]
{
 8022c5c:	b083      	sub	sp, #12
 8022c5e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c60:	2b01      	cmp	r3, #1
{
 8022c62:	4689      	mov	r9, r1
 8022c64:	4617      	mov	r7, r2
 8022c66:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 8022c6a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8022c6e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022c72:	d158      	bne.n	8022d26 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022c74:	2f00      	cmp	r7, #0
 8022c76:	d05f      	beq.n	8022d38 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022c78:	2114      	movs	r1, #20
 8022c7a:	4620      	mov	r0, r4
 8022c7c:	f7f8 fa00 	bl	801b080 <pbuf_add_header>
 8022c80:	2800      	cmp	r0, #0
 8022c82:	d174      	bne.n	8022d6e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022c84:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8022c86:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022c88:	2b13      	cmp	r3, #19
 8022c8a:	d95d      	bls.n	8022d48 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8022c8c:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022c90:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8022c94:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022c98:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 8022c9a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022c9c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8022c9e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8022ca0:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022ca2:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8022ca6:	fa10 f383 	uxtah	r3, r0, r3
 8022caa:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022cac:	ea4f 252a 	mov.w	r5, sl, asr #8
 8022cb0:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022cb4:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022cb8:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cba:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8022d88 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022cbe:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022cc0:	8920      	ldrh	r0, [r4, #8]
 8022cc2:	f7f6 fa61 	bl	8019188 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8022cc6:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8022cc8:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022cca:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8022ccc:	71b3      	strb	r3, [r6, #6]
 8022cce:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cd0:	f8ba 0000 	ldrh.w	r0, [sl]
 8022cd4:	f7f6 fa58 	bl	8019188 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8022cd8:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 8022cdc:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8022cde:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8022ce0:	3201      	adds	r2, #1
 8022ce2:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8022ce6:	f1b9 0f00 	cmp.w	r9, #0
 8022cea:	d035      	beq.n	8022d58 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8022cec:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8022cf0:	fa13 f382 	uxtah	r3, r3, r2
 8022cf4:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8022cf6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8022cfa:	b29a      	uxth	r2, r3
 8022cfc:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8022d00:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 8022d04:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8022d06:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8022d08:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 8022d0c:	b113      	cbz	r3, 8022d14 <ip4_output_if_src+0xc0>
 8022d0e:	8922      	ldrh	r2, [r4, #8]
 8022d10:	429a      	cmp	r2, r3
 8022d12:	d824      	bhi.n	8022d5e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8022d14:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022d18:	463a      	mov	r2, r7
 8022d1a:	4621      	mov	r1, r4
 8022d1c:	4640      	mov	r0, r8
 8022d1e:	4798      	blx	r3
}
 8022d20:	b003      	add	sp, #12
 8022d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022d26:	4b13      	ldr	r3, [pc, #76]	; (8022d74 <ip4_output_if_src+0x120>)
 8022d28:	f44f 7255 	mov.w	r2, #852	; 0x354
 8022d2c:	4912      	ldr	r1, [pc, #72]	; (8022d78 <ip4_output_if_src+0x124>)
 8022d2e:	4813      	ldr	r0, [pc, #76]	; (8022d7c <ip4_output_if_src+0x128>)
 8022d30:	f002 fb30 	bl	8025394 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8022d34:	2f00      	cmp	r7, #0
 8022d36:	d19f      	bne.n	8022c78 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8022d38:	8963      	ldrh	r3, [r4, #10]
 8022d3a:	2b13      	cmp	r3, #19
 8022d3c:	d917      	bls.n	8022d6e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022d3e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8022d40:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022d42:	691b      	ldr	r3, [r3, #16]
 8022d44:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8022d46:	e7df      	b.n	8022d08 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022d48:	4b0a      	ldr	r3, [pc, #40]	; (8022d74 <ip4_output_if_src+0x120>)
 8022d4a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8022d4e:	490c      	ldr	r1, [pc, #48]	; (8022d80 <ip4_output_if_src+0x12c>)
 8022d50:	480a      	ldr	r0, [pc, #40]	; (8022d7c <ip4_output_if_src+0x128>)
 8022d52:	f002 fb1f 	bl	8025394 <iprintf>
 8022d56:	e799      	b.n	8022c8c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022d58:	4a0a      	ldr	r2, [pc, #40]	; (8022d84 <ip4_output_if_src+0x130>)
 8022d5a:	6812      	ldr	r2, [r2, #0]
 8022d5c:	e7c8      	b.n	8022cf0 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 8022d5e:	463a      	mov	r2, r7
 8022d60:	4641      	mov	r1, r8
 8022d62:	4620      	mov	r0, r4
 8022d64:	f000 fc36 	bl	80235d4 <ip4_frag>
}
 8022d68:	b003      	add	sp, #12
 8022d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 8022d6e:	f06f 0001 	mvn.w	r0, #1
 8022d72:	e7d5      	b.n	8022d20 <ip4_output_if_src+0xcc>
 8022d74:	0804589c 	.word	0x0804589c
 8022d78:	080458d0 	.word	0x080458d0
 8022d7c:	08029fe8 	.word	0x08029fe8
 8022d80:	080458dc 	.word	0x080458dc
 8022d84:	08045954 	.word	0x08045954
 8022d88:	2002e46a 	.word	0x2002e46a

08022d8c <ip4_output_if>:
{
 8022d8c:	b4f0      	push	{r4, r5, r6, r7}
 8022d8e:	9c06      	ldr	r4, [sp, #24]
 8022d90:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8022d94:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022d98:	b11a      	cbz	r2, 8022da2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8022d9a:	b109      	cbz	r1, 8022da0 <ip4_output_if+0x14>
 8022d9c:	680f      	ldr	r7, [r1, #0]
 8022d9e:	b907      	cbnz	r7, 8022da2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8022da0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022da2:	9504      	str	r5, [sp, #16]
 8022da4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8022da8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022daa:	f7ff bf53 	b.w	8022c54 <ip4_output_if_src>
 8022dae:	bf00      	nop

08022db0 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022db0:	1e43      	subs	r3, r0, #1
 8022db2:	3303      	adds	r3, #3
 8022db4:	d814      	bhi.n	8022de0 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022db6:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8022dba:	f013 0302 	ands.w	r3, r3, #2
 8022dbe:	d00d      	beq.n	8022ddc <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022dc0:	684b      	ldr	r3, [r1, #4]
 8022dc2:	4283      	cmp	r3, r0
 8022dc4:	d00f      	beq.n	8022de6 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022dc6:	688a      	ldr	r2, [r1, #8]
 8022dc8:	4043      	eors	r3, r0
 8022dca:	4213      	tst	r3, r2
 8022dcc:	d10b      	bne.n	8022de6 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8022dce:	43d3      	mvns	r3, r2
 8022dd0:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8022dd4:	1ac3      	subs	r3, r0, r3
 8022dd6:	fab3 f383 	clz	r3, r3
 8022dda:	095b      	lsrs	r3, r3, #5
  }
}
 8022ddc:	4618      	mov	r0, r3
 8022dde:	4770      	bx	lr
    return 1;
 8022de0:	2301      	movs	r3, #1
}
 8022de2:	4618      	mov	r0, r3
 8022de4:	4770      	bx	lr
    return 0;
 8022de6:	2300      	movs	r3, #0
}
 8022de8:	4618      	mov	r0, r3
 8022dea:	4770      	bx	lr

08022dec <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8022dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8022df0:	4e4f      	ldr	r6, [pc, #316]	; (8022f30 <ip4addr_aton+0x144>)
{
 8022df2:	b085      	sub	sp, #20
  c = *cp;
 8022df4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8022df6:	5cf2      	ldrb	r2, [r6, r3]
 8022df8:	0754      	lsls	r4, r2, #29
 8022dfa:	d538      	bpl.n	8022e6e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 8022dfc:	46e9      	mov	r9, sp
 8022dfe:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8022e00:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8022e04:	464f      	mov	r7, r9
    if (c == '0') {
 8022e06:	2b30      	cmp	r3, #48	; 0x30
 8022e08:	d035      	beq.n	8022e76 <ip4addr_aton+0x8a>
    base = 10;
 8022e0a:	210a      	movs	r1, #10
 8022e0c:	1c42      	adds	r2, r0, #1
 8022e0e:	2400      	movs	r4, #0
 8022e10:	e003      	b.n	8022e1a <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 8022e12:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 8022e16:	7813      	ldrb	r3, [r2, #0]
 8022e18:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 8022e1a:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e1e:	f103 0e0a 	add.w	lr, r3, #10
 8022e22:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 8022e26:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 8022e2a:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e2e:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8022e32:	d1ee      	bne.n	8022e12 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022e34:	2910      	cmp	r1, #16
 8022e36:	d10d      	bne.n	8022e54 <ip4addr_aton+0x68>
 8022e38:	f01c 0f44 	tst.w	ip, #68	; 0x44
 8022e3c:	d00a      	beq.n	8022e54 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e3e:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8022e42:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022e44:	bf0c      	ite	eq
 8022e46:	2061      	moveq	r0, #97	; 0x61
 8022e48:	2041      	movne	r0, #65	; 0x41
 8022e4a:	ebae 0e00 	sub.w	lr, lr, r0
 8022e4e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8022e52:	e7e1      	b.n	8022e18 <ip4addr_aton+0x2c>
    if (c == '.') {
 8022e54:	2b2e      	cmp	r3, #46	; 0x2e
 8022e56:	d11a      	bne.n	8022e8e <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8022e58:	4547      	cmp	r7, r8
 8022e5a:	d008      	beq.n	8022e6e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8022e5c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022e60:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8022e64:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8022e68:	5cf2      	ldrb	r2, [r6, r3]
 8022e6a:	0752      	lsls	r2, r2, #29
 8022e6c:	d4cb      	bmi.n	8022e06 <ip4addr_aton+0x1a>
      return 0;
 8022e6e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8022e70:	b005      	add	sp, #20
 8022e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8022e76:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8022e78:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8022e7c:	2a58      	cmp	r2, #88	; 0x58
 8022e7e:	d002      	beq.n	8022e86 <ip4addr_aton+0x9a>
      c = *++cp;
 8022e80:	3001      	adds	r0, #1
        base = 8;
 8022e82:	2108      	movs	r1, #8
 8022e84:	e7c2      	b.n	8022e0c <ip4addr_aton+0x20>
        c = *++cp;
 8022e86:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8022e88:	2110      	movs	r1, #16
        c = *++cp;
 8022e8a:	3002      	adds	r0, #2
 8022e8c:	e7be      	b.n	8022e0c <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 8022e8e:	b113      	cbz	r3, 8022e96 <ip4addr_aton+0xaa>
 8022e90:	f01c 0f08 	tst.w	ip, #8
 8022e94:	d0eb      	beq.n	8022e6e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8022e96:	eba7 0009 	sub.w	r0, r7, r9
 8022e9a:	1080      	asrs	r0, r0, #2
 8022e9c:	3001      	adds	r0, #1
 8022e9e:	2804      	cmp	r0, #4
 8022ea0:	d83e      	bhi.n	8022f20 <ip4addr_aton+0x134>
 8022ea2:	a301      	add	r3, pc, #4	; (adr r3, 8022ea8 <ip4addr_aton+0xbc>)
 8022ea4:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022ea8:	08022e71 	.word	0x08022e71
 8022eac:	08022ecd 	.word	0x08022ecd
 8022eb0:	08022ebd 	.word	0x08022ebd
 8022eb4:	08022f01 	.word	0x08022f01
 8022eb8:	08022edd 	.word	0x08022edd
      if (val > 0xffffffUL) {
 8022ebc:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8022ec0:	d2d5      	bcs.n	8022e6e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8022ec2:	9b00      	ldr	r3, [sp, #0]
 8022ec4:	2bff      	cmp	r3, #255	; 0xff
 8022ec6:	d8d2      	bhi.n	8022e6e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022ec8:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 8022ecc:	b335      	cbz	r5, 8022f1c <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022ece:	4620      	mov	r0, r4
 8022ed0:	f7f6 f95e 	bl	8019190 <lwip_htonl>
 8022ed4:	4603      	mov	r3, r0
  return 1;
 8022ed6:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8022ed8:	602b      	str	r3, [r5, #0]
 8022eda:	e7c9      	b.n	8022e70 <ip4addr_aton+0x84>
      if (val > 0xff) {
 8022edc:	2cff      	cmp	r4, #255	; 0xff
 8022ede:	d8c6      	bhi.n	8022e6e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8022ee0:	9900      	ldr	r1, [sp, #0]
 8022ee2:	29ff      	cmp	r1, #255	; 0xff
 8022ee4:	d8c3      	bhi.n	8022e6e <ip4addr_aton+0x82>
 8022ee6:	9b01      	ldr	r3, [sp, #4]
 8022ee8:	2bff      	cmp	r3, #255	; 0xff
 8022eea:	d8c0      	bhi.n	8022e6e <ip4addr_aton+0x82>
 8022eec:	9a02      	ldr	r2, [sp, #8]
 8022eee:	2aff      	cmp	r2, #255	; 0xff
 8022ef0:	d8bd      	bhi.n	8022e6e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8022ef2:	041b      	lsls	r3, r3, #16
 8022ef4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8022ef8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8022efc:	431c      	orrs	r4, r3
      break;
 8022efe:	e7e5      	b.n	8022ecc <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 8022f00:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8022f04:	d2b3      	bcs.n	8022e6e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8022f06:	9a00      	ldr	r2, [sp, #0]
 8022f08:	2aff      	cmp	r2, #255	; 0xff
 8022f0a:	d8b0      	bhi.n	8022e6e <ip4addr_aton+0x82>
 8022f0c:	9b01      	ldr	r3, [sp, #4]
 8022f0e:	2bff      	cmp	r3, #255	; 0xff
 8022f10:	d8ad      	bhi.n	8022e6e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8022f12:	041b      	lsls	r3, r3, #16
 8022f14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8022f18:	431c      	orrs	r4, r3
      break;
 8022f1a:	e7d7      	b.n	8022ecc <ip4addr_aton+0xe0>
  return 1;
 8022f1c:	2001      	movs	r0, #1
 8022f1e:	e7a7      	b.n	8022e70 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 8022f20:	4b04      	ldr	r3, [pc, #16]	; (8022f34 <ip4addr_aton+0x148>)
 8022f22:	22f9      	movs	r2, #249	; 0xf9
 8022f24:	4904      	ldr	r1, [pc, #16]	; (8022f38 <ip4addr_aton+0x14c>)
 8022f26:	4805      	ldr	r0, [pc, #20]	; (8022f3c <ip4addr_aton+0x150>)
 8022f28:	f002 fa34 	bl	8025394 <iprintf>
      break;
 8022f2c:	e7ce      	b.n	8022ecc <ip4addr_aton+0xe0>
 8022f2e:	bf00      	nop
 8022f30:	08045bb1 	.word	0x08045bb1
 8022f34:	0804590c 	.word	0x0804590c
 8022f38:	08045948 	.word	0x08045948
 8022f3c:	08029fe8 	.word	0x08029fe8

08022f40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022f40:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022f42:	4604      	mov	r4, r0
 8022f44:	b148      	cbz	r0, 8022f5a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8022f46:	6960      	ldr	r0, [r4, #20]
 8022f48:	b108      	cbz	r0, 8022f4e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8022f4a:	f7f8 f959 	bl	801b200 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8022f4e:	4621      	mov	r1, r4
 8022f50:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8022f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8022f56:	f7f7 bc3b 	b.w	801a7d0 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022f5a:	4b04      	ldr	r3, [pc, #16]	; (8022f6c <ipfrag_free_pbuf_custom+0x2c>)
 8022f5c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022f60:	4903      	ldr	r1, [pc, #12]	; (8022f70 <ipfrag_free_pbuf_custom+0x30>)
 8022f62:	4804      	ldr	r0, [pc, #16]	; (8022f74 <ipfrag_free_pbuf_custom+0x34>)
 8022f64:	f002 fa16 	bl	8025394 <iprintf>
 8022f68:	e7ed      	b.n	8022f46 <ipfrag_free_pbuf_custom+0x6>
 8022f6a:	bf00      	nop
 8022f6c:	0804595c 	.word	0x0804595c
 8022f70:	08045998 	.word	0x08045998
 8022f74:	08029fe8 	.word	0x08029fe8

08022f78 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022f78:	4281      	cmp	r1, r0
{
 8022f7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022f7e:	4606      	mov	r6, r0
 8022f80:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022f82:	d075      	beq.n	8023070 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8022f84:	b147      	cbz	r7, 8022f98 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022f86:	683b      	ldr	r3, [r7, #0]
 8022f88:	42b3      	cmp	r3, r6
 8022f8a:	d005      	beq.n	8022f98 <ip_reass_free_complete_datagram+0x20>
 8022f8c:	4b40      	ldr	r3, [pc, #256]	; (8023090 <ip_reass_free_complete_datagram+0x118>)
 8022f8e:	22ad      	movs	r2, #173	; 0xad
 8022f90:	4940      	ldr	r1, [pc, #256]	; (8023094 <ip_reass_free_complete_datagram+0x11c>)
 8022f92:	4841      	ldr	r0, [pc, #260]	; (8023098 <ip_reass_free_complete_datagram+0x120>)
 8022f94:	f002 f9fe 	bl	8025394 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022f98:	6875      	ldr	r5, [r6, #4]
 8022f9a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8022f9c:	889a      	ldrh	r2, [r3, #4]
 8022f9e:	2a00      	cmp	r2, #0
 8022fa0:	d047      	beq.n	8023032 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8022fa2:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022fa6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8023090 <ip_reass_free_complete_datagram+0x118>
 8022faa:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80230b0 <ip_reass_free_complete_datagram+0x138>
 8022fae:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8023098 <ip_reass_free_complete_datagram+0x120>
 8022fb2:	e005      	b.n	8022fc0 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8022fb4:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022fb6:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022fb8:	f7f8 f922 	bl	801b200 <pbuf_free>
  while (p != NULL) {
 8022fbc:	b1b4      	cbz	r4, 8022fec <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022fbe:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8022fc0:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8022fc2:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8022fc4:	f7f8 f930 	bl	801b228 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022fc8:	4458      	add	r0, fp
 8022fca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022fce:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022fd2:	dbef      	blt.n	8022fb4 <ip_reass_free_complete_datagram+0x3c>
 8022fd4:	4653      	mov	r3, sl
 8022fd6:	22cc      	movs	r2, #204	; 0xcc
 8022fd8:	4649      	mov	r1, r9
 8022fda:	4640      	mov	r0, r8
 8022fdc:	f002 f9da 	bl	8025394 <iprintf>
    pbuf_free(pcur);
 8022fe0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022fe2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022fe4:	f7f8 f90c 	bl	801b200 <pbuf_free>
  while (p != NULL) {
 8022fe8:	2c00      	cmp	r4, #0
 8022fea:	d1e8      	bne.n	8022fbe <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8022fec:	4b2b      	ldr	r3, [pc, #172]	; (802309c <ip_reass_free_complete_datagram+0x124>)
 8022fee:	681a      	ldr	r2, [r3, #0]
 8022ff0:	4296      	cmp	r6, r2
 8022ff2:	d03a      	beq.n	802306a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022ff4:	2f00      	cmp	r7, #0
 8022ff6:	d042      	beq.n	802307e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8022ff8:	6833      	ldr	r3, [r6, #0]
 8022ffa:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022ffc:	4c28      	ldr	r4, [pc, #160]	; (80230a0 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8022ffe:	4631      	mov	r1, r6
 8023000:	2005      	movs	r0, #5
 8023002:	f7f7 fbe5 	bl	801a7d0 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023006:	8823      	ldrh	r3, [r4, #0]
 8023008:	455b      	cmp	r3, fp
 802300a:	d305      	bcc.n	8023018 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802300c:	eba3 030b 	sub.w	r3, r3, fp
}
 8023010:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023012:	8023      	strh	r3, [r4, #0]
}
 8023014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8023018:	4b1d      	ldr	r3, [pc, #116]	; (8023090 <ip_reass_free_complete_datagram+0x118>)
 802301a:	22d2      	movs	r2, #210	; 0xd2
 802301c:	4921      	ldr	r1, [pc, #132]	; (80230a4 <ip_reass_free_complete_datagram+0x12c>)
 802301e:	481e      	ldr	r0, [pc, #120]	; (8023098 <ip_reass_free_complete_datagram+0x120>)
 8023020:	f002 f9b8 	bl	8025394 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023024:	8823      	ldrh	r3, [r4, #0]
}
 8023026:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8023028:	eba3 030b 	sub.w	r3, r3, fp
 802302c:	8023      	strh	r3, [r4, #0]
}
 802302e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8023032:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023034:	6930      	ldr	r0, [r6, #16]
 8023036:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8023038:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802303a:	68f4      	ldr	r4, [r6, #12]
 802303c:	68b2      	ldr	r2, [r6, #8]
 802303e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023040:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023042:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8023044:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8023046:	601a      	str	r2, [r3, #0]
 8023048:	605c      	str	r4, [r3, #4]
 802304a:	69b2      	ldr	r2, [r6, #24]
 802304c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802304e:	f7ff fccf 	bl	80229f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8023052:	4628      	mov	r0, r5
 8023054:	f7f8 f8e8 	bl	801b228 <pbuf_clen>
 8023058:	4683      	mov	fp, r0
    pbuf_free(p);
 802305a:	4628      	mov	r0, r5
 802305c:	f7f8 f8d0 	bl	801b200 <pbuf_free>
  p = ipr->p;
 8023060:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8023062:	2d00      	cmp	r5, #0
 8023064:	d0c2      	beq.n	8022fec <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8023066:	686b      	ldr	r3, [r5, #4]
 8023068:	e79d      	b.n	8022fa6 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 802306a:	6832      	ldr	r2, [r6, #0]
 802306c:	601a      	str	r2, [r3, #0]
 802306e:	e7c5      	b.n	8022ffc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8023070:	4b07      	ldr	r3, [pc, #28]	; (8023090 <ip_reass_free_complete_datagram+0x118>)
 8023072:	22ab      	movs	r2, #171	; 0xab
 8023074:	490c      	ldr	r1, [pc, #48]	; (80230a8 <ip_reass_free_complete_datagram+0x130>)
 8023076:	4808      	ldr	r0, [pc, #32]	; (8023098 <ip_reass_free_complete_datagram+0x120>)
 8023078:	f002 f98c 	bl	8025394 <iprintf>
 802307c:	e782      	b.n	8022f84 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 802307e:	4b04      	ldr	r3, [pc, #16]	; (8023090 <ip_reass_free_complete_datagram+0x118>)
 8023080:	f240 1245 	movw	r2, #325	; 0x145
 8023084:	4909      	ldr	r1, [pc, #36]	; (80230ac <ip_reass_free_complete_datagram+0x134>)
 8023086:	4804      	ldr	r0, [pc, #16]	; (8023098 <ip_reass_free_complete_datagram+0x120>)
 8023088:	f002 f984 	bl	8025394 <iprintf>
 802308c:	e7b4      	b.n	8022ff8 <ip_reass_free_complete_datagram+0x80>
 802308e:	bf00      	nop
 8023090:	0804595c 	.word	0x0804595c
 8023094:	080459b0 	.word	0x080459b0
 8023098:	08029fe8 	.word	0x08029fe8
 802309c:	2002e470 	.word	0x2002e470
 80230a0:	2002e46c 	.word	0x2002e46c
 80230a4:	08045a00 	.word	0x08045a00
 80230a8:	080459a4 	.word	0x080459a4
 80230ac:	080459e4 	.word	0x080459e4
 80230b0:	080459c4 	.word	0x080459c4

080230b4 <ip_reass_remove_oldest_datagram>:
{
 80230b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 80230b8:	2700      	movs	r7, #0
 80230ba:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8023124 <ip_reass_remove_oldest_datagram+0x70>
{
 80230be:	4605      	mov	r5, r0
 80230c0:	460e      	mov	r6, r1
    r = reassdatagrams;
 80230c2:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 80230c6:	b1f3      	cbz	r3, 8023106 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 80230c8:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80230ca:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 80230ce:	4621      	mov	r1, r4
    prev = NULL;
 80230d0:	46a4      	mov	ip, r4
    oldest = NULL;
 80230d2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80230d4:	695a      	ldr	r2, [r3, #20]
 80230d6:	4572      	cmp	r2, lr
 80230d8:	d018      	beq.n	802310c <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 80230da:	3401      	adds	r4, #1
        if (oldest == NULL) {
 80230dc:	b120      	cbz	r0, 80230e8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 80230de:	f893 901f 	ldrb.w	r9, [r3, #31]
 80230e2:	7fc2      	ldrb	r2, [r0, #31]
 80230e4:	4591      	cmp	r9, r2
 80230e6:	d801      	bhi.n	80230ec <ip_reass_remove_oldest_datagram+0x38>
 80230e8:	4661      	mov	r1, ip
 80230ea:	4618      	mov	r0, r3
      if (r->next != NULL) {
 80230ec:	681a      	ldr	r2, [r3, #0]
 80230ee:	469c      	mov	ip, r3
 80230f0:	4613      	mov	r3, r2
 80230f2:	2a00      	cmp	r2, #0
 80230f4:	d1ee      	bne.n	80230d4 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 80230f6:	b110      	cbz	r0, 80230fe <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80230f8:	f7ff ff3e 	bl	8022f78 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80230fc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80230fe:	42b7      	cmp	r7, r6
 8023100:	da01      	bge.n	8023106 <ip_reass_remove_oldest_datagram+0x52>
 8023102:	2c01      	cmp	r4, #1
 8023104:	dcdd      	bgt.n	80230c2 <ip_reass_remove_oldest_datagram+0xe>
}
 8023106:	4638      	mov	r0, r7
 8023108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802310c:	699a      	ldr	r2, [r3, #24]
 802310e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8023112:	454a      	cmp	r2, r9
 8023114:	d1e1      	bne.n	80230da <ip_reass_remove_oldest_datagram+0x26>
 8023116:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 802311a:	88aa      	ldrh	r2, [r5, #4]
 802311c:	4591      	cmp	r9, r2
 802311e:	d1dc      	bne.n	80230da <ip_reass_remove_oldest_datagram+0x26>
 8023120:	e7e4      	b.n	80230ec <ip_reass_remove_oldest_datagram+0x38>
 8023122:	bf00      	nop
 8023124:	2002e470 	.word	0x2002e470

08023128 <ip_reass_tmr>:
{
 8023128:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 802312a:	4b0a      	ldr	r3, [pc, #40]	; (8023154 <ip_reass_tmr+0x2c>)
 802312c:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 802312e:	b140      	cbz	r0, 8023142 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8023130:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8023132:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8023134:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8023136:	b12b      	cbz	r3, 8023144 <ip_reass_tmr+0x1c>
 8023138:	4604      	mov	r4, r0
      r->timer--;
 802313a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 802313c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 802313e:	2800      	cmp	r0, #0
 8023140:	d1f7      	bne.n	8023132 <ip_reass_tmr+0xa>
}
 8023142:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8023144:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8023146:	4621      	mov	r1, r4
 8023148:	f7ff ff16 	bl	8022f78 <ip_reass_free_complete_datagram>
      r = r->next;
 802314c:	4628      	mov	r0, r5
  while (r != NULL) {
 802314e:	2800      	cmp	r0, #0
 8023150:	d1ef      	bne.n	8023132 <ip_reass_tmr+0xa>
 8023152:	e7f6      	b.n	8023142 <ip_reass_tmr+0x1a>
 8023154:	2002e470 	.word	0x2002e470

08023158 <ip4_reass>:
{
 8023158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 802315c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8023160:	b085      	sub	sp, #20
 8023162:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8023164:	f89a 3000 	ldrb.w	r3, [sl]
 8023168:	f003 030f 	and.w	r3, r3, #15
 802316c:	2b05      	cmp	r3, #5
 802316e:	f040 8089 	bne.w	8023284 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023172:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8023176:	f7f6 f807 	bl	8019188 <lwip_htons>
 802317a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802317c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8023180:	f7f6 f802 	bl	8019188 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8023184:	f89a 2000 	ldrb.w	r2, [sl]
 8023188:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 802318c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8023190:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8023194:	d376      	bcc.n	8023284 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8023196:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8023198:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8023490 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 802319c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 802319e:	b29b      	uxth	r3, r3
 80231a0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80231a2:	f7f8 f841 	bl	801b228 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80231a6:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 80231aa:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80231ac:	4403      	add	r3, r0
 80231ae:	2b14      	cmp	r3, #20
 80231b0:	f300 80e5 	bgt.w	802337e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80231b4:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8023494 <ip4_reass+0x33c>
 80231b8:	f8d9 4000 	ldr.w	r4, [r9]
 80231bc:	2c00      	cmp	r4, #0
 80231be:	f000 80ec 	beq.w	802339a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80231c2:	f8da 200c 	ldr.w	r2, [sl, #12]
 80231c6:	e003      	b.n	80231d0 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80231c8:	6824      	ldr	r4, [r4, #0]
 80231ca:	2c00      	cmp	r4, #0
 80231cc:	f000 80e5 	beq.w	802339a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80231d0:	6963      	ldr	r3, [r4, #20]
 80231d2:	4293      	cmp	r3, r2
 80231d4:	d1f8      	bne.n	80231c8 <ip4_reass+0x70>
 80231d6:	f8da 3010 	ldr.w	r3, [sl, #16]
 80231da:	69a1      	ldr	r1, [r4, #24]
 80231dc:	4299      	cmp	r1, r3
 80231de:	d1f3      	bne.n	80231c8 <ip4_reass+0x70>
 80231e0:	89a1      	ldrh	r1, [r4, #12]
 80231e2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 80231e6:	4299      	cmp	r1, r3
 80231e8:	d1ee      	bne.n	80231c8 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80231ea:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 80231ee:	f7f5 ffcb 	bl	8019188 <lwip_htons>
 80231f2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80231f6:	2800      	cmp	r0, #0
 80231f8:	f000 80a9 	beq.w	802334e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80231fc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023200:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8023204:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023208:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 802320c:	9301      	str	r3, [sp, #4]
 802320e:	d108      	bne.n	8023222 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8023210:	9b00      	ldr	r3, [sp, #0]
 8023212:	18f3      	adds	r3, r6, r3
 8023214:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8023216:	429e      	cmp	r6, r3
 8023218:	d812      	bhi.n	8023240 <ip4_reass+0xe8>
 802321a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802321e:	4293      	cmp	r3, r2
 8023220:	d80e      	bhi.n	8023240 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8023222:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8023226:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 802322a:	f7f5 ffad 	bl	8019188 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802322e:	f89a 2000 	ldrb.w	r2, [sl]
 8023232:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8023236:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 802323a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802323e:	d229      	bcs.n	8023294 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8023240:	6866      	ldr	r6, [r4, #4]
 8023242:	b9fe      	cbnz	r6, 8023284 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8023244:	f8d9 3000 	ldr.w	r3, [r9]
 8023248:	42a3      	cmp	r3, r4
 802324a:	d014      	beq.n	8023276 <ip4_reass+0x11e>
 802324c:	4b8c      	ldr	r3, [pc, #560]	; (8023480 <ip4_reass+0x328>)
 802324e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8023252:	498c      	ldr	r1, [pc, #560]	; (8023484 <ip4_reass+0x32c>)
 8023254:	488c      	ldr	r0, [pc, #560]	; (8023488 <ip4_reass+0x330>)
 8023256:	f002 f89d 	bl	8025394 <iprintf>
  if (reassdatagrams == ipr) {
 802325a:	f8d9 3000 	ldr.w	r3, [r9]
 802325e:	429c      	cmp	r4, r3
 8023260:	d009      	beq.n	8023276 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023262:	4b87      	ldr	r3, [pc, #540]	; (8023480 <ip4_reass+0x328>)
 8023264:	f240 1245 	movw	r2, #325	; 0x145
 8023268:	4988      	ldr	r1, [pc, #544]	; (802348c <ip4_reass+0x334>)
 802326a:	4887      	ldr	r0, [pc, #540]	; (8023488 <ip4_reass+0x330>)
 802326c:	f002 f892 	bl	8025394 <iprintf>
    prev->next = ipr->next;
 8023270:	6823      	ldr	r3, [r4, #0]
 8023272:	6033      	str	r3, [r6, #0]
 8023274:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8023276:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8023278:	4621      	mov	r1, r4
 802327a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 802327c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8023280:	f7f7 faa6 	bl	801a7d0 <memp_free>
  pbuf_free(p);
 8023284:	4628      	mov	r0, r5
  return NULL;
 8023286:	2600      	movs	r6, #0
  pbuf_free(p);
 8023288:	f7f7 ffba 	bl	801b200 <pbuf_free>
}
 802328c:	4630      	mov	r0, r6
 802328e:	b005      	add	sp, #20
 8023290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8023294:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8023296:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 802329a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 802329e:	f7f5 ff73 	bl	8019188 <lwip_htons>
 80232a2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80232a6:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80232aa:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 80232ac:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 80232b0:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 80232b4:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 80232b8:	f8ab 3006 	strh.w	r3, [fp, #6]
 80232bc:	b29b      	uxth	r3, r3
 80232be:	4619      	mov	r1, r3
 80232c0:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 80232c2:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 80232c4:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 80232c6:	f88b 3000 	strb.w	r3, [fp]
 80232ca:	f88b 3001 	strb.w	r3, [fp, #1]
 80232ce:	f88b 3002 	strb.w	r3, [fp, #2]
 80232d2:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 80232d6:	d8b3      	bhi.n	8023240 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 80232d8:	6861      	ldr	r1, [r4, #4]
 80232da:	2900      	cmp	r1, #0
 80232dc:	f000 80c4 	beq.w	8023468 <ip4_reass+0x310>
  int valid = 1;
 80232e0:	f04f 0a01 	mov.w	sl, #1
 80232e4:	4694      	mov	ip, r2
 80232e6:	e00e      	b.n	8023306 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 80232e8:	d0cc      	beq.n	8023284 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 80232ea:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 80232ee:	45f4      	cmp	ip, lr
 80232f0:	d3c8      	bcc.n	8023284 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 80232f2:	b122      	cbz	r2, 80232fe <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 80232f4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 80232f6:	4282      	cmp	r2, r0
 80232f8:	bf18      	it	ne
 80232fa:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 80232fe:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8023300:	2900      	cmp	r1, #0
 8023302:	f000 808a 	beq.w	802341a <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8023306:	461a      	mov	r2, r3
 8023308:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 802330a:	8898      	ldrh	r0, [r3, #4]
 802330c:	4584      	cmp	ip, r0
 802330e:	d2eb      	bcs.n	80232e8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8023310:	4613      	mov	r3, r2
 8023312:	f8cb 1000 	str.w	r1, [fp]
 8023316:	4662      	mov	r2, ip
 8023318:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 802331a:	2b00      	cmp	r3, #0
 802331c:	d066      	beq.n	80233ec <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 802331e:	88db      	ldrh	r3, [r3, #6]
 8023320:	429a      	cmp	r2, r3
 8023322:	d3af      	bcc.n	8023284 <ip4_reass+0x12c>
 8023324:	9903      	ldr	r1, [sp, #12]
 8023326:	4281      	cmp	r1, r0
 8023328:	d8ac      	bhi.n	8023284 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 802332a:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 802332c:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8023330:	d061      	beq.n	80233f6 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023332:	9b01      	ldr	r3, [sp, #4]
 8023334:	2b00      	cmp	r3, #0
 8023336:	f000 808a 	beq.w	802344e <ip4_reass+0x2f6>
 802333a:	7fa3      	ldrb	r3, [r4, #30]
 802333c:	07db      	lsls	r3, r3, #31
 802333e:	d462      	bmi.n	8023406 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023340:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8023344:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023346:	441f      	add	r7, r3
 8023348:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802334c:	e79e      	b.n	802328c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802334e:	89e0      	ldrh	r0, [r4, #14]
 8023350:	f7f5 ff1a 	bl	8019188 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8023354:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8023358:	2800      	cmp	r0, #0
 802335a:	f43f af4f 	beq.w	80231fc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802335e:	f8da 3000 	ldr.w	r3, [sl]
 8023362:	f8da 0004 	ldr.w	r0, [sl, #4]
 8023366:	f8da 1008 	ldr.w	r1, [sl, #8]
 802336a:	f8da 200c 	ldr.w	r2, [sl, #12]
 802336e:	60a3      	str	r3, [r4, #8]
 8023370:	60e0      	str	r0, [r4, #12]
 8023372:	6121      	str	r1, [r4, #16]
 8023374:	6162      	str	r2, [r4, #20]
 8023376:	f8da 3010 	ldr.w	r3, [sl, #16]
 802337a:	61a3      	str	r3, [r4, #24]
 802337c:	e73e      	b.n	80231fc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802337e:	4601      	mov	r1, r0
 8023380:	4650      	mov	r0, sl
 8023382:	f7ff fe97 	bl	80230b4 <ip_reass_remove_oldest_datagram>
 8023386:	2800      	cmp	r0, #0
 8023388:	f43f af7c 	beq.w	8023284 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802338c:	f8b8 3000 	ldrh.w	r3, [r8]
 8023390:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8023392:	2b14      	cmp	r3, #20
 8023394:	f77f af0e 	ble.w	80231b4 <ip4_reass+0x5c>
 8023398:	e774      	b.n	8023284 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802339a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 802339e:	4938      	ldr	r1, [pc, #224]	; (8023480 <ip4_reass+0x328>)
 80233a0:	2005      	movs	r0, #5
 80233a2:	f7f7 f9df 	bl	801a764 <memp_malloc_fn>
  if (ipr == NULL) {
 80233a6:	4604      	mov	r4, r0
 80233a8:	b178      	cbz	r0, 80233ca <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80233aa:	2300      	movs	r3, #0
 80233ac:	61e3      	str	r3, [r4, #28]
 80233ae:	60a3      	str	r3, [r4, #8]
 80233b0:	60e3      	str	r3, [r4, #12]
 80233b2:	6123      	str	r3, [r4, #16]
 80233b4:	6163      	str	r3, [r4, #20]
 80233b6:	61a3      	str	r3, [r4, #24]
 80233b8:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 80233ba:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 80233be:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 80233c2:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 80233c4:	230f      	movs	r3, #15
 80233c6:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80233c8:	e7c9      	b.n	802335e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80233ca:	4639      	mov	r1, r7
 80233cc:	4650      	mov	r0, sl
 80233ce:	f7ff fe71 	bl	80230b4 <ip_reass_remove_oldest_datagram>
 80233d2:	4287      	cmp	r7, r0
 80233d4:	f73f af56 	bgt.w	8023284 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80233d8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80233dc:	4928      	ldr	r1, [pc, #160]	; (8023480 <ip4_reass+0x328>)
 80233de:	2005      	movs	r0, #5
 80233e0:	f7f7 f9c0 	bl	801a764 <memp_malloc_fn>
    if (ipr == NULL)
 80233e4:	4604      	mov	r4, r0
 80233e6:	2800      	cmp	r0, #0
 80233e8:	d1df      	bne.n	80233aa <ip4_reass+0x252>
 80233ea:	e74b      	b.n	8023284 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 80233ec:	9b03      	ldr	r3, [sp, #12]
 80233ee:	4283      	cmp	r3, r0
 80233f0:	f63f af48 	bhi.w	8023284 <ip4_reass+0x12c>
        ipr->p = new_p;
 80233f4:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80233f6:	9b01      	ldr	r3, [sp, #4]
 80233f8:	b19b      	cbz	r3, 8023422 <ip4_reass+0x2ca>
 80233fa:	7fa3      	ldrb	r3, [r4, #30]
 80233fc:	07d9      	lsls	r1, r3, #31
 80233fe:	d59f      	bpl.n	8023340 <ip4_reass+0x1e8>
    if (valid) {
 8023400:	f1ba 0f00 	cmp.w	sl, #0
 8023404:	d138      	bne.n	8023478 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023406:	f8b8 3000 	ldrh.w	r3, [r8]
 802340a:	441f      	add	r7, r3
 802340c:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8023410:	2600      	movs	r6, #0
}
 8023412:	4630      	mov	r0, r6
 8023414:	b005      	add	sp, #20
 8023416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802341a:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802341c:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 802341e:	d188      	bne.n	8023332 <ip4_reass+0x1da>
 8023420:	e7e9      	b.n	80233f6 <ip4_reass+0x29e>
    if (valid) {
 8023422:	f1ba 0f00 	cmp.w	sl, #0
 8023426:	d012      	beq.n	802344e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023428:	6863      	ldr	r3, [r4, #4]
 802342a:	b183      	cbz	r3, 802344e <ip4_reass+0x2f6>
 802342c:	6859      	ldr	r1, [r3, #4]
 802342e:	888b      	ldrh	r3, [r1, #4]
 8023430:	2b00      	cmp	r3, #0
 8023432:	d031      	beq.n	8023498 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8023434:	f8b8 3000 	ldrh.w	r3, [r8]
 8023438:	441f      	add	r7, r3
  if (is_last) {
 802343a:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802343c:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8023440:	2b00      	cmp	r3, #0
 8023442:	d1e5      	bne.n	8023410 <ip4_reass+0x2b8>
 8023444:	e008      	b.n	8023458 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023446:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 802344a:	4659      	mov	r1, fp
 802344c:	b323      	cbz	r3, 8023498 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802344e:	f8b8 3000 	ldrh.w	r3, [r8]
 8023452:	441f      	add	r7, r3
 8023454:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023458:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802345a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802345c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8023460:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8023462:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8023464:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8023466:	e7d3      	b.n	8023410 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8023468:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 802346a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 802346c:	2b00      	cmp	r3, #0
 802346e:	d0ea      	beq.n	8023446 <ip4_reass+0x2ee>
 8023470:	7fa3      	ldrb	r3, [r4, #30]
 8023472:	07da      	lsls	r2, r3, #31
 8023474:	f57f af64 	bpl.w	8023340 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8023478:	6863      	ldr	r3, [r4, #4]
 802347a:	2b00      	cmp	r3, #0
 802347c:	d0c3      	beq.n	8023406 <ip4_reass+0x2ae>
 802347e:	e7d5      	b.n	802342c <ip4_reass+0x2d4>
 8023480:	0804595c 	.word	0x0804595c
 8023484:	08045a74 	.word	0x08045a74
 8023488:	08029fe8 	.word	0x08029fe8
 802348c:	080459e4 	.word	0x080459e4
 8023490:	2002e46c 	.word	0x2002e46c
 8023494:	2002e470 	.word	0x2002e470
        q = iprh->next_pbuf;
 8023498:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 802349c:	b153      	cbz	r3, 80234b4 <ip4_reass+0x35c>
 802349e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 80234a0:	4610      	mov	r0, r2
 80234a2:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80234a4:	88c0      	ldrh	r0, [r0, #6]
 80234a6:	8893      	ldrh	r3, [r2, #4]
 80234a8:	4298      	cmp	r0, r3
 80234aa:	d1c3      	bne.n	8023434 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 80234ac:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 80234ae:	2b00      	cmp	r3, #0
 80234b0:	d1f6      	bne.n	80234a0 <ip4_reass+0x348>
 80234b2:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 80234b4:	9b02      	ldr	r3, [sp, #8]
 80234b6:	428b      	cmp	r3, r1
 80234b8:	d110      	bne.n	80234dc <ip4_reass+0x384>
 80234ba:	4b40      	ldr	r3, [pc, #256]	; (80235bc <ip4_reass+0x464>)
 80234bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80234c0:	493f      	ldr	r1, [pc, #252]	; (80235c0 <ip4_reass+0x468>)
 80234c2:	4840      	ldr	r0, [pc, #256]	; (80235c4 <ip4_reass+0x46c>)
 80234c4:	f001 ff66 	bl	8025394 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80234c8:	9b02      	ldr	r3, [sp, #8]
 80234ca:	681b      	ldr	r3, [r3, #0]
 80234cc:	b133      	cbz	r3, 80234dc <ip4_reass+0x384>
 80234ce:	4b3b      	ldr	r3, [pc, #236]	; (80235bc <ip4_reass+0x464>)
 80234d0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80234d4:	493c      	ldr	r1, [pc, #240]	; (80235c8 <ip4_reass+0x470>)
 80234d6:	483b      	ldr	r0, [pc, #236]	; (80235c4 <ip4_reass+0x46c>)
 80234d8:	f001 ff5c 	bl	8025394 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80234dc:	f8b8 3000 	ldrh.w	r3, [r8]
 80234e0:	441f      	add	r7, r3
  if (is_last) {
 80234e2:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80234e4:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 80234e8:	2b00      	cmp	r3, #0
 80234ea:	d15b      	bne.n	80235a4 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 80234ec:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80234ee:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80234f0:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80234f2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80234f6:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80234f8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80234fa:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80234fc:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80234fe:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023500:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023502:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023504:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023506:	68a3      	ldr	r3, [r4, #8]
 8023508:	6921      	ldr	r1, [r4, #16]
 802350a:	6962      	ldr	r2, [r4, #20]
 802350c:	6075      	str	r5, [r6, #4]
 802350e:	60b1      	str	r1, [r6, #8]
 8023510:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8023512:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8023514:	6033      	str	r3, [r6, #0]
 8023516:	69a3      	ldr	r3, [r4, #24]
 8023518:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802351a:	f7f5 fe35 	bl	8019188 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802351e:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8023520:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8023522:	2114      	movs	r1, #20
 8023524:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8023526:	71b3      	strb	r3, [r6, #6]
 8023528:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802352a:	72b3      	strb	r3, [r6, #10]
 802352c:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802352e:	f7f6 fbd3 	bl	8019cd8 <inet_chksum>
 8023532:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8023534:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8023536:	b15d      	cbz	r5, 8023550 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8023538:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 802353a:	4628      	mov	r0, r5
 802353c:	2114      	movs	r1, #20
 802353e:	f7f7 fdd3 	bl	801b0e8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8023542:	4629      	mov	r1, r5
 8023544:	4630      	mov	r0, r6
 8023546:	f7f7 fe8d 	bl	801b264 <pbuf_cat>
      r = iprh->next_pbuf;
 802354a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802354c:	2d00      	cmp	r5, #0
 802354e:	d1f3      	bne.n	8023538 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8023550:	f8d9 5000 	ldr.w	r5, [r9]
 8023554:	42a5      	cmp	r5, r4
 8023556:	d005      	beq.n	8023564 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023558:	b335      	cbz	r5, 80235a8 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802355a:	682b      	ldr	r3, [r5, #0]
 802355c:	42a3      	cmp	r3, r4
 802355e:	d014      	beq.n	802358a <ip4_reass+0x432>
 8023560:	461d      	mov	r5, r3
 8023562:	e7f9      	b.n	8023558 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8023564:	6823      	ldr	r3, [r4, #0]
 8023566:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802356a:	4621      	mov	r1, r4
 802356c:	2005      	movs	r0, #5
 802356e:	f7f7 f92f 	bl	801a7d0 <memp_free>
    clen = pbuf_clen(p);
 8023572:	4630      	mov	r0, r6
 8023574:	f7f7 fe58 	bl	801b228 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023578:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802357c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802357e:	4283      	cmp	r3, r0
 8023580:	d306      	bcc.n	8023590 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023582:	1b1b      	subs	r3, r3, r4
 8023584:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8023588:	e680      	b.n	802328c <ip4_reass+0x134>
    prev->next = ipr->next;
 802358a:	6823      	ldr	r3, [r4, #0]
 802358c:	602b      	str	r3, [r5, #0]
 802358e:	e7ec      	b.n	802356a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023590:	4b0a      	ldr	r3, [pc, #40]	; (80235bc <ip4_reass+0x464>)
 8023592:	f240 229b 	movw	r2, #667	; 0x29b
 8023596:	490d      	ldr	r1, [pc, #52]	; (80235cc <ip4_reass+0x474>)
 8023598:	480a      	ldr	r0, [pc, #40]	; (80235c4 <ip4_reass+0x46c>)
 802359a:	f001 fefb 	bl	8025394 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802359e:	f8b8 3000 	ldrh.w	r3, [r8]
 80235a2:	e7ee      	b.n	8023582 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80235a4:	8ba0      	ldrh	r0, [r4, #28]
 80235a6:	e7a9      	b.n	80234fc <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80235a8:	4b04      	ldr	r3, [pc, #16]	; (80235bc <ip4_reass+0x464>)
 80235aa:	f240 1245 	movw	r2, #325	; 0x145
 80235ae:	4908      	ldr	r1, [pc, #32]	; (80235d0 <ip4_reass+0x478>)
 80235b0:	4804      	ldr	r0, [pc, #16]	; (80235c4 <ip4_reass+0x46c>)
 80235b2:	f001 feef 	bl	8025394 <iprintf>
    prev->next = ipr->next;
 80235b6:	6823      	ldr	r3, [r4, #0]
 80235b8:	602b      	str	r3, [r5, #0]
 80235ba:	deff      	udf	#255	; 0xff
 80235bc:	0804595c 	.word	0x0804595c
 80235c0:	08045a24 	.word	0x08045a24
 80235c4:	08029fe8 	.word	0x08029fe8
 80235c8:	08045a34 	.word	0x08045a34
 80235cc:	08045a58 	.word	0x08045a58
 80235d0:	080459e4 	.word	0x080459e4

080235d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80235d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235d8:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 80235da:	b08f      	sub	sp, #60	; 0x3c
 80235dc:	4605      	mov	r5, r0
 80235de:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235e0:	f1b3 0214 	subs.w	r2, r3, #20
{
 80235e4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235e6:	bf48      	it	mi
 80235e8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80235ec:	6843      	ldr	r3, [r0, #4]
 80235ee:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235f0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80235f4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80235f6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80235f8:	f003 030f 	and.w	r3, r3, #15
 80235fc:	2b05      	cmp	r3, #5
 80235fe:	ea4f 0683 	mov.w	r6, r3, lsl #2
 8023602:	f040 80ea 	bne.w	80237da <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8023606:	8943      	ldrh	r3, [r0, #10]
 8023608:	2b13      	cmp	r3, #19
 802360a:	f240 80e9 	bls.w	80237e0 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802360e:	9b04      	ldr	r3, [sp, #16]
 8023610:	88d8      	ldrh	r0, [r3, #6]
 8023612:	f7f5 fdb9 	bl	8019188 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8023616:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8023618:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 802361c:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802361e:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 8023620:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8023624:	b29b      	uxth	r3, r3
 8023626:	920d      	str	r2, [sp, #52]	; 0x34
 8023628:	9305      	str	r3, [sp, #20]

  while (left) {
 802362a:	2b00      	cmp	r3, #0
 802362c:	f000 809d 	beq.w	802376a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023630:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8023632:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023634:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8023800 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023638:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802363a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8023808 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802363e:	b29b      	uxth	r3, r3
 8023640:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023642:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023646:	2114      	movs	r1, #20
 8023648:	200e      	movs	r0, #14
 802364a:	f7f7 fc07 	bl	801ae5c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802364e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023650:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8023652:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023654:	4293      	cmp	r3, r2
 8023656:	bf28      	it	cs
 8023658:	4613      	movcs	r3, r2
 802365a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 802365c:	2800      	cmp	r0, #0
 802365e:	f000 80b9 	beq.w	80237d4 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023662:	8943      	ldrh	r3, [r0, #10]
 8023664:	2b13      	cmp	r3, #19
 8023666:	f240 8091 	bls.w	802378c <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802366a:	9904      	ldr	r1, [sp, #16]
 802366c:	9b03      	ldr	r3, [sp, #12]
 802366e:	680a      	ldr	r2, [r1, #0]
 8023670:	685b      	ldr	r3, [r3, #4]
 8023672:	684f      	ldr	r7, [r1, #4]
 8023674:	6888      	ldr	r0, [r1, #8]
 8023676:	68c9      	ldr	r1, [r1, #12]
 8023678:	605f      	str	r7, [r3, #4]
 802367a:	60d9      	str	r1, [r3, #12]
 802367c:	9904      	ldr	r1, [sp, #16]
 802367e:	601a      	str	r2, [r3, #0]
 8023680:	6098      	str	r0, [r3, #8]
 8023682:	690a      	ldr	r2, [r1, #16]
 8023684:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023686:	9b03      	ldr	r3, [sp, #12]
 8023688:	685b      	ldr	r3, [r3, #4]
 802368a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 802368c:	9b06      	ldr	r3, [sp, #24]
 802368e:	2b00      	cmp	r3, #0
 8023690:	d034      	beq.n	80236fc <ip4_frag+0x128>
 8023692:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023694:	896b      	ldrh	r3, [r5, #10]
 8023696:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023698:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 802369a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802369c:	d36e      	bcc.n	802377c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802369e:	454c      	cmp	r4, r9
 80236a0:	bf28      	it	cs
 80236a2:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80236a4:	2c00      	cmp	r4, #0
 80236a6:	d062      	beq.n	802376e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80236a8:	4641      	mov	r1, r8
 80236aa:	f240 22bd 	movw	r2, #701	; 0x2bd
 80236ae:	2006      	movs	r0, #6
 80236b0:	f7f7 f858 	bl	801a764 <memp_malloc_fn>
 80236b4:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80236b6:	2241      	movs	r2, #65	; 0x41
 80236b8:	4621      	mov	r1, r4
 80236ba:	2000      	movs	r0, #0
      if (pcr == NULL) {
 80236bc:	f1bb 0f00 	cmp.w	fp, #0
 80236c0:	d06f      	beq.n	80237a2 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80236c2:	9401      	str	r4, [sp, #4]
 80236c4:	465b      	mov	r3, fp
 80236c6:	686f      	ldr	r7, [r5, #4]
 80236c8:	4437      	add	r7, r6
 80236ca:	9700      	str	r7, [sp, #0]
 80236cc:	f7f7 fc64 	bl	801af98 <pbuf_alloced_custom>
 80236d0:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80236d2:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 80236d4:	2f00      	cmp	r7, #0
 80236d6:	d06e      	beq.n	80237b6 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80236d8:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 80236dc:	f7f7 fdae 	bl	801b23c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80236e0:	4a44      	ldr	r2, [pc, #272]	; (80237f4 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 80236e2:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80236e4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80236e8:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 80236ea:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80236ee:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 80236f2:	f7f7 fdb7 	bl	801b264 <pbuf_cat>
      if (left_to_copy) {
 80236f6:	f1b9 0f00 	cmp.w	r9, #0
 80236fa:	d138      	bne.n	802376e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80236fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80236fe:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8023700:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 8023702:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 8023704:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 8023706:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 802370a:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 802370c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 802370e:	4293      	cmp	r3, r2
 8023710:	dd44      	ble.n	802379c <ip4_frag+0x1c8>
 8023712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023714:	2b00      	cmp	r3, #0
 8023716:	d141      	bne.n	802379c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023718:	f7f5 fd36 	bl	8019188 <lwip_htons>
 802371c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802371e:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8023720:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8023722:	f103 0014 	add.w	r0, r3, #20
 8023726:	b280      	uxth	r0, r0
 8023728:	f7f5 fd2e 	bl	8019188 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 802372c:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802372e:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023730:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8023732:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023734:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8023736:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023738:	f7f6 face 	bl	8019cd8 <inet_chksum>
 802373c:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802373e:	9f03      	ldr	r7, [sp, #12]
 8023740:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023744:	4639      	mov	r1, r7
 8023746:	6943      	ldr	r3, [r0, #20]
 8023748:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802374a:	4638      	mov	r0, r7
 802374c:	f7f7 fd58 	bl	801b200 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023750:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8023754:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8023756:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 802375a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 802375c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802375e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8023760:	b292      	uxth	r2, r2
 8023762:	9207      	str	r2, [sp, #28]
  while (left) {
 8023764:	2b00      	cmp	r3, #0
 8023766:	f47f af6c 	bne.w	8023642 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802376a:	2000      	movs	r0, #0
 802376c:	e020      	b.n	80237b0 <ip4_frag+0x1dc>
        p = p->next;
 802376e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8023770:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8023772:	896b      	ldrh	r3, [r5, #10]
 8023774:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023776:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8023778:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802377a:	d290      	bcs.n	802369e <ip4_frag+0xca>
 802377c:	4643      	mov	r3, r8
 802377e:	f240 322d 	movw	r2, #813	; 0x32d
 8023782:	491d      	ldr	r1, [pc, #116]	; (80237f8 <ip4_frag+0x224>)
 8023784:	4650      	mov	r0, sl
 8023786:	f001 fe05 	bl	8025394 <iprintf>
 802378a:	e788      	b.n	802369e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802378c:	4643      	mov	r3, r8
 802378e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8023792:	491a      	ldr	r1, [pc, #104]	; (80237fc <ip4_frag+0x228>)
 8023794:	4650      	mov	r0, sl
 8023796:	f001 fdfd 	bl	8025394 <iprintf>
 802379a:	e766      	b.n	802366a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 802379c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80237a0:	e7ba      	b.n	8023718 <ip4_frag+0x144>
        pbuf_free(rambuf);
 80237a2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80237a6:	4658      	mov	r0, fp
 80237a8:	f7f7 fd2a 	bl	801b200 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80237ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80237b0:	b00f      	add	sp, #60	; 0x3c
 80237b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 80237b6:	46d9      	mov	r9, fp
 80237b8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80237bc:	2006      	movs	r0, #6
 80237be:	4649      	mov	r1, r9
 80237c0:	f7f7 f806 	bl	801a7d0 <memp_free>
        pbuf_free(rambuf);
 80237c4:	4658      	mov	r0, fp
 80237c6:	f7f7 fd1b 	bl	801b200 <pbuf_free>
  return ERR_MEM;
 80237ca:	f04f 30ff 	mov.w	r0, #4294967295
}
 80237ce:	b00f      	add	sp, #60	; 0x3c
 80237d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 80237d4:	f04f 30ff 	mov.w	r0, #4294967295
 80237d8:	e7ea      	b.n	80237b0 <ip4_frag+0x1dc>
    return ERR_VAL;
 80237da:	f06f 0005 	mvn.w	r0, #5
 80237de:	e7e7      	b.n	80237b0 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80237e0:	4b07      	ldr	r3, [pc, #28]	; (8023800 <ip4_frag+0x22c>)
 80237e2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80237e6:	4907      	ldr	r1, [pc, #28]	; (8023804 <ip4_frag+0x230>)
 80237e8:	4807      	ldr	r0, [pc, #28]	; (8023808 <ip4_frag+0x234>)
 80237ea:	f001 fdd3 	bl	8025394 <iprintf>
 80237ee:	f06f 0005 	mvn.w	r0, #5
 80237f2:	e7dd      	b.n	80237b0 <ip4_frag+0x1dc>
 80237f4:	08022f41 	.word	0x08022f41
 80237f8:	08045ad0 	.word	0x08045ad0
 80237fc:	08045ab0 	.word	0x08045ab0
 8023800:	0804595c 	.word	0x0804595c
 8023804:	08045a94 	.word	0x08045a94
 8023808:	08029fe8 	.word	0x08029fe8

0802380c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802380c:	8943      	ldrh	r3, [r0, #10]
 802380e:	2b0e      	cmp	r3, #14
{
 8023810:	b570      	push	{r4, r5, r6, lr}
 8023812:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8023814:	d91b      	bls.n	802384e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8023816:	7bc3      	ldrb	r3, [r0, #15]
 8023818:	460d      	mov	r5, r1
 802381a:	b91b      	cbnz	r3, 8023824 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 802381c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8023820:	3301      	adds	r3, #1
 8023822:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8023824:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8023826:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8023828:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 802382a:	07d9      	lsls	r1, r3, #31
 802382c:	d50a      	bpl.n	8023844 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802382e:	2b01      	cmp	r3, #1
 8023830:	d030      	beq.n	8023894 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023832:	2206      	movs	r2, #6
 8023834:	491d      	ldr	r1, [pc, #116]	; (80238ac <ethernet_input+0xa0>)
 8023836:	f000 fdd7 	bl	80243e8 <memcmp>
 802383a:	b918      	cbnz	r0, 8023844 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802383c:	7b63      	ldrb	r3, [r4, #13]
 802383e:	f043 0308 	orr.w	r3, r3, #8
 8023842:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8023844:	2e08      	cmp	r6, #8
 8023846:	d016      	beq.n	8023876 <ethernet_input+0x6a>
 8023848:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 802384c:	d004      	beq.n	8023858 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802384e:	4620      	mov	r0, r4
 8023850:	f7f7 fcd6 	bl	801b200 <pbuf_free>
  return ERR_OK;
}
 8023854:	2000      	movs	r0, #0
 8023856:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023858:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802385c:	071b      	lsls	r3, r3, #28
 802385e:	d5f6      	bpl.n	802384e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023860:	210e      	movs	r1, #14
 8023862:	4620      	mov	r0, r4
 8023864:	f7f7 fc40 	bl	801b0e8 <pbuf_remove_header>
 8023868:	2800      	cmp	r0, #0
 802386a:	d1f0      	bne.n	802384e <ethernet_input+0x42>
        etharp_input(p, netif);
 802386c:	4629      	mov	r1, r5
 802386e:	4620      	mov	r0, r4
 8023870:	f7fe fd2e 	bl	80222d0 <etharp_input>
      break;
 8023874:	e7ee      	b.n	8023854 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023876:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802387a:	071a      	lsls	r2, r3, #28
 802387c:	d5e7      	bpl.n	802384e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802387e:	210e      	movs	r1, #14
 8023880:	4620      	mov	r0, r4
 8023882:	f7f7 fc31 	bl	801b0e8 <pbuf_remove_header>
 8023886:	2800      	cmp	r0, #0
 8023888:	d1e1      	bne.n	802384e <ethernet_input+0x42>
        ip4_input(p, netif);
 802388a:	4629      	mov	r1, r5
 802388c:	4620      	mov	r0, r4
 802388e:	f7ff f8eb 	bl	8022a68 <ip4_input>
      break;
 8023892:	e7df      	b.n	8023854 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023894:	7843      	ldrb	r3, [r0, #1]
 8023896:	2b00      	cmp	r3, #0
 8023898:	d1d4      	bne.n	8023844 <ethernet_input+0x38>
 802389a:	7883      	ldrb	r3, [r0, #2]
 802389c:	2b5e      	cmp	r3, #94	; 0x5e
 802389e:	d1d1      	bne.n	8023844 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 80238a0:	7b63      	ldrb	r3, [r4, #13]
 80238a2:	f043 0310 	orr.w	r3, r3, #16
 80238a6:	7363      	strb	r3, [r4, #13]
 80238a8:	e7cc      	b.n	8023844 <ethernet_input+0x38>
 80238aa:	bf00      	nop
 80238ac:	08045b4c 	.word	0x08045b4c

080238b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80238b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80238b4:	460c      	mov	r4, r1
 80238b6:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80238b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 80238bc:	4616      	mov	r6, r2
 80238be:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 80238c0:	f7f5 fc62 	bl	8019188 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80238c4:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 80238c6:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80238c8:	4620      	mov	r0, r4
 80238ca:	f7f7 fbd9 	bl	801b080 <pbuf_add_header>
 80238ce:	b9e0      	cbnz	r0, 802390a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80238d0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80238d2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80238d6:	683b      	ldr	r3, [r7, #0]
 80238d8:	600b      	str	r3, [r1, #0]
 80238da:	88bb      	ldrh	r3, [r7, #4]
 80238dc:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80238de:	6833      	ldr	r3, [r6, #0]
 80238e0:	f8c1 3006 	str.w	r3, [r1, #6]
 80238e4:	88b3      	ldrh	r3, [r6, #4]
 80238e6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80238e8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80238ec:	2b06      	cmp	r3, #6
 80238ee:	d006      	beq.n	80238fe <ethernet_output+0x4e>
 80238f0:	4b08      	ldr	r3, [pc, #32]	; (8023914 <ethernet_output+0x64>)
 80238f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80238f6:	4908      	ldr	r1, [pc, #32]	; (8023918 <ethernet_output+0x68>)
 80238f8:	4808      	ldr	r0, [pc, #32]	; (802391c <ethernet_output+0x6c>)
 80238fa:	f001 fd4b 	bl	8025394 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80238fe:	69ab      	ldr	r3, [r5, #24]
 8023900:	4621      	mov	r1, r4
 8023902:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8023904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8023908:	4718      	bx	r3
}
 802390a:	f06f 0001 	mvn.w	r0, #1
 802390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023912:	bf00      	nop
 8023914:	08045ae0 	.word	0x08045ae0
 8023918:	08045b18 	.word	0x08045b18
 802391c:	08029fe8 	.word	0x08029fe8

08023920 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8023920:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8023922:	2300      	movs	r3, #0
{
 8023924:	b085      	sub	sp, #20
 8023926:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8023928:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802392a:	4619      	mov	r1, r3
{
 802392c:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802392e:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8023930:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023934:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023938:	f7f1 fe8e 	bl	8015658 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802393c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023940:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8023942:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8023944:	4258      	negs	r0, r3
 8023946:	b005      	add	sp, #20
 8023948:	bd30      	pop	{r4, r5, pc}
 802394a:	bf00      	nop

0802394c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802394c:	2200      	movs	r2, #0
 802394e:	6800      	ldr	r0, [r0, #0]
{
 8023950:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8023952:	f7f1 fe95 	bl	8015680 <osMessagePut>
 8023956:	3800      	subs	r0, #0
 8023958:	bf18      	it	ne
 802395a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 802395c:	4240      	negs	r0, r0
 802395e:	bd08      	pop	{r3, pc}

08023960 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023962:	4614      	mov	r4, r2
 8023964:	b085      	sub	sp, #20
 8023966:	4605      	mov	r5, r0
 8023968:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 802396a:	f7f1 fd3b 	bl	80153e4 <osKernelSysTick>
 802396e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8023970:	b15c      	cbz	r4, 802398a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8023972:	4622      	mov	r2, r4
 8023974:	6829      	ldr	r1, [r5, #0]
 8023976:	a801      	add	r0, sp, #4
 8023978:	f7f1 feae 	bl	80156d8 <osMessageGet>

    if(event.status == osEventMessage)
 802397c:	9b01      	ldr	r3, [sp, #4]
 802397e:	2b10      	cmp	r3, #16
 8023980:	d009      	beq.n	8023996 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023982:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8023986:	b005      	add	sp, #20
 8023988:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 802398a:	f04f 32ff 	mov.w	r2, #4294967295
 802398e:	6829      	ldr	r1, [r5, #0]
 8023990:	a801      	add	r0, sp, #4
 8023992:	f7f1 fea1 	bl	80156d8 <osMessageGet>
    *msg = (void *)event.value.v;
 8023996:	9b02      	ldr	r3, [sp, #8]
 8023998:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 802399a:	f7f1 fd23 	bl	80153e4 <osKernelSysTick>
 802399e:	1b80      	subs	r0, r0, r6
}
 80239a0:	b005      	add	sp, #20
 80239a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080239a4 <sys_mbox_valid>:
 80239a4:	6800      	ldr	r0, [r0, #0]
 80239a6:	3800      	subs	r0, #0
 80239a8:	bf18      	it	ne
 80239aa:	2001      	movne	r0, #1
 80239ac:	4770      	bx	lr
 80239ae:	bf00      	nop

080239b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80239b0:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80239b2:	4803      	ldr	r0, [pc, #12]	; (80239c0 <sys_init+0x10>)
 80239b4:	f7f1 fd7a 	bl	80154ac <osMutexCreate>
 80239b8:	4b02      	ldr	r3, [pc, #8]	; (80239c4 <sys_init+0x14>)
 80239ba:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80239bc:	bd08      	pop	{r3, pc}
 80239be:	bf00      	nop
 80239c0:	08045b5c 	.word	0x08045b5c
 80239c4:	2002e474 	.word	0x2002e474

080239c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80239c8:	b510      	push	{r4, lr}
 80239ca:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80239cc:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80239ce:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239d0:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 80239d2:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239d6:	f7f1 fd69 	bl	80154ac <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80239da:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80239de:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 80239e0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80239e2:	4258      	negs	r0, r3
 80239e4:	b002      	add	sp, #8
 80239e6:	bd10      	pop	{r4, pc}

080239e8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80239e8:	f04f 31ff 	mov.w	r1, #4294967295
 80239ec:	6800      	ldr	r0, [r0, #0]
 80239ee:	f7f1 bd65 	b.w	80154bc <osMutexWait>
 80239f2:	bf00      	nop

080239f4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80239f4:	6800      	ldr	r0, [r0, #0]
 80239f6:	f7f1 bd8d 	b.w	8015514 <osMutexRelease>
 80239fa:	bf00      	nop

080239fc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80239fc:	b510      	push	{r4, lr}
 80239fe:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a00:	2400      	movs	r4, #0
 8023a02:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8023a06:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 8023a08:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 8023a0c:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8023a0e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8023a12:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8023a16:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 8023a1a:	f7f1 fceb 	bl	80153f4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8023a1e:	b008      	add	sp, #32
 8023a20:	bd10      	pop	{r4, pc}
 8023a22:	bf00      	nop

08023a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8023a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8023a26:	2200      	movs	r2, #0
 8023a28:	4917      	ldr	r1, [pc, #92]	; (8023a88 <MX_USB_DEVICE_Init+0x64>)
 8023a2a:	4818      	ldr	r0, [pc, #96]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a2c:	f7f1 f84c 	bl	8014ac8 <USBD_Init>
 8023a30:	b970      	cbnz	r0, 8023a50 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023a32:	4917      	ldr	r1, [pc, #92]	; (8023a90 <MX_USB_DEVICE_Init+0x6c>)
 8023a34:	4815      	ldr	r0, [pc, #84]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a36:	f7f1 f85f 	bl	8014af8 <USBD_RegisterClass>
 8023a3a:	b988      	cbnz	r0, 8023a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023a3c:	4915      	ldr	r1, [pc, #84]	; (8023a94 <MX_USB_DEVICE_Init+0x70>)
 8023a3e:	4813      	ldr	r0, [pc, #76]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a40:	f7f1 f80c 	bl	8014a5c <USBD_CDC_RegisterInterface>
 8023a44:	b9a0      	cbnz	r0, 8023a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023a46:	4811      	ldr	r0, [pc, #68]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a48:	f7f1 f86c 	bl	8014b24 <USBD_Start>
 8023a4c:	b9b8      	cbnz	r0, 8023a7e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8023a4e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8023a50:	f7e0 fa6c 	bl	8003f2c <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023a54:	490e      	ldr	r1, [pc, #56]	; (8023a90 <MX_USB_DEVICE_Init+0x6c>)
 8023a56:	480d      	ldr	r0, [pc, #52]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a58:	f7f1 f84e 	bl	8014af8 <USBD_RegisterClass>
 8023a5c:	2800      	cmp	r0, #0
 8023a5e:	d0ed      	beq.n	8023a3c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8023a60:	f7e0 fa64 	bl	8003f2c <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023a64:	490b      	ldr	r1, [pc, #44]	; (8023a94 <MX_USB_DEVICE_Init+0x70>)
 8023a66:	4809      	ldr	r0, [pc, #36]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a68:	f7f0 fff8 	bl	8014a5c <USBD_CDC_RegisterInterface>
 8023a6c:	2800      	cmp	r0, #0
 8023a6e:	d0ea      	beq.n	8023a46 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8023a70:	f7e0 fa5c 	bl	8003f2c <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023a74:	4805      	ldr	r0, [pc, #20]	; (8023a8c <MX_USB_DEVICE_Init+0x68>)
 8023a76:	f7f1 f855 	bl	8014b24 <USBD_Start>
 8023a7a:	2800      	cmp	r0, #0
 8023a7c:	d0e7      	beq.n	8023a4e <MX_USB_DEVICE_Init+0x2a>
}
 8023a7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8023a82:	f7e0 ba53 	b.w	8003f2c <Error_Handler>
 8023a86:	bf00      	nop
 8023a88:	20000430 	.word	0x20000430
 8023a8c:	2002e478 	.word	0x2002e478
 8023a90:	20000300 	.word	0x20000300
 8023a94:	2000041c 	.word	0x2000041c

08023a98 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8023a98:	2000      	movs	r0, #0
 8023a9a:	4770      	bx	lr

08023a9c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8023a9c:	2000      	movs	r0, #0
 8023a9e:	4770      	bx	lr

08023aa0 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8023aa0:	2000      	movs	r0, #0
 8023aa2:	4770      	bx	lr

08023aa4 <CDC_Receive_FS>:
{
 8023aa4:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023aa6:	4c05      	ldr	r4, [pc, #20]	; (8023abc <CDC_Receive_FS+0x18>)
{
 8023aa8:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023aaa:	4620      	mov	r0, r4
 8023aac:	f7f0 ffe8 	bl	8014a80 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023ab0:	4620      	mov	r0, r4
 8023ab2:	f7f0 ffed 	bl	8014a90 <USBD_CDC_ReceivePacket>
}
 8023ab6:	2000      	movs	r0, #0
 8023ab8:	bd10      	pop	{r4, pc}
 8023aba:	bf00      	nop
 8023abc:	2002e478 	.word	0x2002e478

08023ac0 <CDC_Init_FS>:
{
 8023ac0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8023ac2:	4c06      	ldr	r4, [pc, #24]	; (8023adc <CDC_Init_FS+0x1c>)
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	4906      	ldr	r1, [pc, #24]	; (8023ae0 <CDC_Init_FS+0x20>)
 8023ac8:	4620      	mov	r0, r4
 8023aca:	f7f0 ffcf 	bl	8014a6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8023ace:	4905      	ldr	r1, [pc, #20]	; (8023ae4 <CDC_Init_FS+0x24>)
 8023ad0:	4620      	mov	r0, r4
 8023ad2:	f7f0 ffd5 	bl	8014a80 <USBD_CDC_SetRxBuffer>
}
 8023ad6:	2000      	movs	r0, #0
 8023ad8:	bd10      	pop	{r4, pc}
 8023ada:	bf00      	nop
 8023adc:	2002e478 	.word	0x2002e478
 8023ae0:	2002ef48 	.word	0x2002ef48
 8023ae4:	2002e748 	.word	0x2002e748

08023ae8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8023ae8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8023aea:	4801      	ldr	r0, [pc, #4]	; (8023af0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8023aec:	800b      	strh	r3, [r1, #0]
}
 8023aee:	4770      	bx	lr
 8023af0:	2000045c 	.word	0x2000045c

08023af4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8023af4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8023af6:	4801      	ldr	r0, [pc, #4]	; (8023afc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8023af8:	800b      	strh	r3, [r1, #0]
}
 8023afa:	4770      	bx	lr
 8023afc:	20000470 	.word	0x20000470

08023b00 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8023b00:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8023b02:	4801      	ldr	r0, [pc, #4]	; (8023b08 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8023b04:	800b      	strh	r3, [r1, #0]
}
 8023b06:	4770      	bx	lr
 8023b08:	20000450 	.word	0x20000450

08023b0c <USBD_FS_ManufacturerStrDescriptor>:
{
 8023b0c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023b0e:	4c04      	ldr	r4, [pc, #16]	; (8023b20 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8023b10:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8023b12:	4804      	ldr	r0, [pc, #16]	; (8023b24 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8023b14:	4621      	mov	r1, r4
 8023b16:	f7f1 fbc9 	bl	80152ac <USBD_GetString>
}
 8023b1a:	4620      	mov	r0, r4
 8023b1c:	bd10      	pop	{r4, pc}
 8023b1e:	bf00      	nop
 8023b20:	2002f748 	.word	0x2002f748
 8023b24:	08045b64 	.word	0x08045b64

08023b28 <USBD_FS_ProductStrDescriptor>:
{
 8023b28:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023b2a:	4c04      	ldr	r4, [pc, #16]	; (8023b3c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8023b2c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8023b2e:	4804      	ldr	r0, [pc, #16]	; (8023b40 <USBD_FS_ProductStrDescriptor+0x18>)
 8023b30:	4621      	mov	r1, r4
 8023b32:	f7f1 fbbb 	bl	80152ac <USBD_GetString>
}
 8023b36:	4620      	mov	r0, r4
 8023b38:	bd10      	pop	{r4, pc}
 8023b3a:	bf00      	nop
 8023b3c:	2002f748 	.word	0x2002f748
 8023b40:	08045b78 	.word	0x08045b78

08023b44 <USBD_FS_ConfigStrDescriptor>:
{
 8023b44:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023b46:	4c04      	ldr	r4, [pc, #16]	; (8023b58 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8023b48:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023b4a:	4804      	ldr	r0, [pc, #16]	; (8023b5c <USBD_FS_ConfigStrDescriptor+0x18>)
 8023b4c:	4621      	mov	r1, r4
 8023b4e:	f7f1 fbad 	bl	80152ac <USBD_GetString>
}
 8023b52:	4620      	mov	r0, r4
 8023b54:	bd10      	pop	{r4, pc}
 8023b56:	bf00      	nop
 8023b58:	2002f748 	.word	0x2002f748
 8023b5c:	08045b90 	.word	0x08045b90

08023b60 <USBD_FS_InterfaceStrDescriptor>:
{
 8023b60:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023b62:	4c04      	ldr	r4, [pc, #16]	; (8023b74 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8023b64:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023b66:	4804      	ldr	r0, [pc, #16]	; (8023b78 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8023b68:	4621      	mov	r1, r4
 8023b6a:	f7f1 fb9f 	bl	80152ac <USBD_GetString>
}
 8023b6e:	4620      	mov	r0, r4
 8023b70:	bd10      	pop	{r4, pc}
 8023b72:	bf00      	nop
 8023b74:	2002f748 	.word	0x2002f748
 8023b78:	08045b9c 	.word	0x08045b9c

08023b7c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8023b7c:	4b21      	ldr	r3, [pc, #132]	; (8023c04 <USBD_FS_SerialStrDescriptor+0x88>)
 8023b7e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8023b82:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8023b86:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8023b88:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 8023b8a:	f04f 041a 	mov.w	r4, #26
 8023b8e:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8023b90:	d101      	bne.n	8023b96 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8023b92:	481d      	ldr	r0, [pc, #116]	; (8023c08 <USBD_FS_SerialStrDescriptor+0x8c>)
 8023b94:	bd30      	pop	{r4, r5, pc}
 8023b96:	491c      	ldr	r1, [pc, #112]	; (8023c08 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023b98:	f04f 0e00 	mov.w	lr, #0
 8023b9c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8023ba0:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8023ba2:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8023ba4:	0f13      	lsrs	r3, r2, #28
 8023ba6:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023baa:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 8023bae:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8023bb2:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023bb6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023bba:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 8023bbe:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8023bc2:	bf34      	ite	cc
 8023bc4:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023bc8:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 8023bcc:	f1be 0f10 	cmp.w	lr, #16
 8023bd0:	d1e8      	bne.n	8023ba4 <USBD_FS_SerialStrDescriptor+0x28>
 8023bd2:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 8023bd4:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 8023bd6:	0f03      	lsrs	r3, r0, #28
 8023bd8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 8023bdc:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 8023be0:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 8023be2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023be6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 8023bea:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8023bee:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8023bf2:	bf34      	ite	cc
 8023bf4:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023bf8:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 8023bfa:	2a08      	cmp	r2, #8
 8023bfc:	d1eb      	bne.n	8023bd6 <USBD_FS_SerialStrDescriptor+0x5a>
}
 8023bfe:	4802      	ldr	r0, [pc, #8]	; (8023c08 <USBD_FS_SerialStrDescriptor+0x8c>)
 8023c00:	bd30      	pop	{r4, r5, pc}
 8023c02:	bf00      	nop
 8023c04:	1ff0f000 	.word	0x1ff0f000
 8023c08:	20000474 	.word	0x20000474

08023c0c <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c0c:	6803      	ldr	r3, [r0, #0]
{
 8023c0e:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8023c14:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8023c16:	f04f 0400 	mov.w	r4, #0
 8023c1a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8023c1e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8023c22:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8023c24:	d001      	beq.n	8023c2a <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8023c26:	b009      	add	sp, #36	; 0x24
 8023c28:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c2a:	4d1e      	ldr	r5, [pc, #120]	; (8023ca4 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8023c2c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c30:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c32:	481d      	ldr	r0, [pc, #116]	; (8023ca8 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023c36:	f043 0301 	orr.w	r3, r3, #1
 8023c3a:	632b      	str	r3, [r5, #48]	; 0x30
 8023c3c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023c3e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023c42:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c46:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023c48:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023c4a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023c4c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c4e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023c50:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023c54:	f7e7 fd6e 	bl	800b734 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8023c58:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023c5c:	a903      	add	r1, sp, #12
 8023c5e:	4812      	ldr	r0, [pc, #72]	; (8023ca8 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023c60:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023c62:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023c66:	f7e7 fd65 	bl	800b734 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023c6c:	4622      	mov	r2, r4
 8023c6e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023c74:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023c76:	636b      	str	r3, [r5, #52]	; 0x34
 8023c78:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8023c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023c7e:	9301      	str	r3, [sp, #4]
 8023c80:	9b01      	ldr	r3, [sp, #4]
 8023c82:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8023c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023c88:	646b      	str	r3, [r5, #68]	; 0x44
 8023c8a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8023c8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023c90:	9302      	str	r3, [sp, #8]
 8023c92:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023c94:	f7e4 fed0 	bl	8008a38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8023c98:	2043      	movs	r0, #67	; 0x43
 8023c9a:	f7e4 ff17 	bl	8008acc <HAL_NVIC_EnableIRQ>
}
 8023c9e:	b009      	add	sp, #36	; 0x24
 8023ca0:	bd30      	pop	{r4, r5, pc}
 8023ca2:	bf00      	nop
 8023ca4:	40023800 	.word	0x40023800
 8023ca8:	40020000 	.word	0x40020000

08023cac <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8023cac:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8023cb0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023cb4:	f7f0 bf48 	b.w	8014b48 <USBD_LL_SetupStage>

08023cb8 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023cb8:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8023cbc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023cc0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023cc4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8023cc8:	f7f0 bf6c 	b.w	8014ba4 <USBD_LL_DataOutStage>

08023ccc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8023ccc:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8023cd0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023cd4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8023cda:	f7f0 bf99 	b.w	8014c10 <USBD_LL_DataInStage>
 8023cde:	bf00      	nop

08023ce0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8023ce0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023ce4:	f7f1 b830 	b.w	8014d48 <USBD_LL_SOF>

08023ce8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023ce8:	68c1      	ldr	r1, [r0, #12]
{
 8023cea:	b510      	push	{r4, lr}
 8023cec:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8023cee:	b111      	cbz	r1, 8023cf6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8023cf0:	2902      	cmp	r1, #2
 8023cf2:	d10a      	bne.n	8023d0a <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8023cf4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8023cf6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8023cfa:	f7f1 f80d 	bl	8014d18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023cfe:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8023d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8023d06:	f7f0 bfdf 	b.w	8014cc8 <USBD_LL_Reset>
    Error_Handler();
 8023d0a:	f7e0 f90f 	bl	8003f2c <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8023d0e:	2101      	movs	r1, #1
 8023d10:	e7f1      	b.n	8023cf6 <HAL_PCD_ResetCallback+0xe>
 8023d12:	bf00      	nop

08023d14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8023d14:	b510      	push	{r4, lr}
 8023d16:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8023d18:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d1c:	f7f1 f800 	bl	8014d20 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023d20:	6822      	ldr	r2, [r4, #0]
 8023d22:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023d26:	f043 0301 	orr.w	r3, r3, #1
 8023d2a:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8023d2e:	6a23      	ldr	r3, [r4, #32]
 8023d30:	b123      	cbz	r3, 8023d3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023d32:	4a03      	ldr	r2, [pc, #12]	; (8023d40 <HAL_PCD_SuspendCallback+0x2c>)
 8023d34:	6913      	ldr	r3, [r2, #16]
 8023d36:	f043 0306 	orr.w	r3, r3, #6
 8023d3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8023d3c:	bd10      	pop	{r4, pc}
 8023d3e:	bf00      	nop
 8023d40:	e000ed00 	.word	0xe000ed00

08023d44 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023d44:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d48:	f7f0 bff4 	b.w	8014d34 <USBD_LL_Resume>

08023d4c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023d4c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d50:	f7f1 b80a 	b.w	8014d68 <USBD_LL_IsoOUTIncomplete>

08023d54 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023d54:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d58:	f7f1 b804 	b.w	8014d64 <USBD_LL_IsoINIncomplete>

08023d5c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8023d5c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d60:	f7f1 b804 	b.w	8014d6c <USBD_LL_DevConnected>

08023d64 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8023d64:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023d68:	f7f1 b802 	b.w	8014d70 <USBD_LL_DevDisconnected>

08023d6c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8023d6c:	7802      	ldrb	r2, [r0, #0]
 8023d6e:	b10a      	cbz	r2, 8023d74 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8023d70:	2000      	movs	r0, #0
 8023d72:	4770      	bx	lr
{
 8023d74:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8023d76:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8023d78:	4b14      	ldr	r3, [pc, #80]	; (8023dcc <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023d7a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023d7c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023d80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8023d82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8023d84:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8023d88:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8023d8c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8023d8e:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023d90:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023d92:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8023d94:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8023d98:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8023d9c:	2206      	movs	r2, #6
 8023d9e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8023da0:	f7e8 fe00 	bl	800c9a4 <HAL_PCD_Init>
 8023da4:	b978      	cbnz	r0, 8023dc6 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8023da6:	2180      	movs	r1, #128	; 0x80
 8023da8:	4808      	ldr	r0, [pc, #32]	; (8023dcc <USBD_LL_Init+0x60>)
 8023daa:	f7e9 fb65 	bl	800d478 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8023dae:	2240      	movs	r2, #64	; 0x40
 8023db0:	2100      	movs	r1, #0
 8023db2:	4806      	ldr	r0, [pc, #24]	; (8023dcc <USBD_LL_Init+0x60>)
 8023db4:	f7e9 fb36 	bl	800d424 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8023db8:	2280      	movs	r2, #128	; 0x80
 8023dba:	2101      	movs	r1, #1
 8023dbc:	4803      	ldr	r0, [pc, #12]	; (8023dcc <USBD_LL_Init+0x60>)
 8023dbe:	f7e9 fb31 	bl	800d424 <HAL_PCDEx_SetTxFiFo>
}
 8023dc2:	2000      	movs	r0, #0
 8023dc4:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023dc6:	f7e0 f8b1 	bl	8003f2c <Error_Handler>
 8023dca:	e7ec      	b.n	8023da6 <USBD_LL_Init+0x3a>
 8023dcc:	2002f948 	.word	0x2002f948

08023dd0 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8023dd0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023dd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023dd6:	f7e8 fe93 	bl	800cb00 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8023dda:	2803      	cmp	r0, #3
 8023ddc:	d802      	bhi.n	8023de4 <USBD_LL_Start+0x14>
 8023dde:	4b02      	ldr	r3, [pc, #8]	; (8023de8 <USBD_LL_Start+0x18>)
 8023de0:	5c18      	ldrb	r0, [r3, r0]
}
 8023de2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8023de4:	2003      	movs	r0, #3
}
 8023de6:	bd08      	pop	{r3, pc}
 8023de8:	08045bac 	.word	0x08045bac

08023dec <USBD_LL_OpenEP>:
{
 8023dec:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023dee:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023df2:	461a      	mov	r2, r3
 8023df4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023df6:	4663      	mov	r3, ip
 8023df8:	f7e9 f9c6 	bl	800d188 <HAL_PCD_EP_Open>
  switch (hal_status)
 8023dfc:	2803      	cmp	r0, #3
 8023dfe:	d802      	bhi.n	8023e06 <USBD_LL_OpenEP+0x1a>
 8023e00:	4b02      	ldr	r3, [pc, #8]	; (8023e0c <USBD_LL_OpenEP+0x20>)
 8023e02:	5c18      	ldrb	r0, [r3, r0]
}
 8023e04:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8023e06:	2003      	movs	r0, #3
}
 8023e08:	bd08      	pop	{r3, pc}
 8023e0a:	bf00      	nop
 8023e0c:	08045bac 	.word	0x08045bac

08023e10 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e10:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e16:	f7e9 f9f5 	bl	800d204 <HAL_PCD_EP_Close>
  switch (hal_status)
 8023e1a:	2803      	cmp	r0, #3
 8023e1c:	d802      	bhi.n	8023e24 <USBD_LL_CloseEP+0x14>
 8023e1e:	4b02      	ldr	r3, [pc, #8]	; (8023e28 <USBD_LL_CloseEP+0x18>)
 8023e20:	5c18      	ldrb	r0, [r3, r0]
}
 8023e22:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8023e24:	2003      	movs	r0, #3
}
 8023e26:	bd08      	pop	{r3, pc}
 8023e28:	08045bac 	.word	0x08045bac

08023e2c <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e2c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e32:	f7e9 fa77 	bl	800d324 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023e36:	2803      	cmp	r0, #3
 8023e38:	d802      	bhi.n	8023e40 <USBD_LL_StallEP+0x14>
 8023e3a:	4b02      	ldr	r3, [pc, #8]	; (8023e44 <USBD_LL_StallEP+0x18>)
 8023e3c:	5c18      	ldrb	r0, [r3, r0]
}
 8023e3e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023e40:	2003      	movs	r0, #3
}
 8023e42:	bd08      	pop	{r3, pc}
 8023e44:	08045bac 	.word	0x08045bac

08023e48 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e48:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e4e:	f7e9 faad 	bl	800d3ac <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8023e52:	2803      	cmp	r0, #3
 8023e54:	d802      	bhi.n	8023e5c <USBD_LL_ClearStallEP+0x14>
 8023e56:	4b02      	ldr	r3, [pc, #8]	; (8023e60 <USBD_LL_ClearStallEP+0x18>)
 8023e58:	5c18      	ldrb	r0, [r3, r0]
}
 8023e5a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023e5c:	2003      	movs	r0, #3
}
 8023e5e:	bd08      	pop	{r3, pc}
 8023e60:	08045bac 	.word	0x08045bac

08023e64 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8023e64:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023e66:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8023e6a:	d406      	bmi.n	8023e7a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8023e6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023e70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023e74:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8023e78:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8023e7a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8023e7e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023e82:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023e86:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8023e8a:	4770      	bx	lr

08023e8c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023e8c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023e90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023e92:	f7e9 f963 	bl	800d15c <HAL_PCD_SetAddress>
  switch (hal_status)
 8023e96:	2803      	cmp	r0, #3
 8023e98:	d802      	bhi.n	8023ea0 <USBD_LL_SetUSBAddress+0x14>
 8023e9a:	4b02      	ldr	r3, [pc, #8]	; (8023ea4 <USBD_LL_SetUSBAddress+0x18>)
 8023e9c:	5c18      	ldrb	r0, [r3, r0]
}
 8023e9e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023ea0:	2003      	movs	r0, #3
}
 8023ea2:	bd08      	pop	{r3, pc}
 8023ea4:	08045bac 	.word	0x08045bac

08023ea8 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ea8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023eac:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023eae:	f7e9 fa11 	bl	800d2d4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8023eb2:	2803      	cmp	r0, #3
 8023eb4:	d802      	bhi.n	8023ebc <USBD_LL_Transmit+0x14>
 8023eb6:	4b02      	ldr	r3, [pc, #8]	; (8023ec0 <USBD_LL_Transmit+0x18>)
 8023eb8:	5c18      	ldrb	r0, [r3, r0]
}
 8023eba:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023ebc:	2003      	movs	r0, #3
}
 8023ebe:	bd08      	pop	{r3, pc}
 8023ec0:	08045bac 	.word	0x08045bac

08023ec4 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023ec4:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023ec8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023eca:	f7e9 f9d1 	bl	800d270 <HAL_PCD_EP_Receive>
  switch (hal_status)
 8023ece:	2803      	cmp	r0, #3
 8023ed0:	d802      	bhi.n	8023ed8 <USBD_LL_PrepareReceive+0x14>
 8023ed2:	4b02      	ldr	r3, [pc, #8]	; (8023edc <USBD_LL_PrepareReceive+0x18>)
 8023ed4:	5c18      	ldrb	r0, [r3, r0]
}
 8023ed6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023ed8:	2003      	movs	r0, #3
}
 8023eda:	bd08      	pop	{r3, pc}
 8023edc:	08045bac 	.word	0x08045bac

08023ee0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8023ee0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8023ee4:	f7e9 b9ec 	b.w	800d2c0 <HAL_PCD_EP_GetRxCount>

08023ee8 <HAL_PCDEx_LPM_Callback>:
{
 8023ee8:	b510      	push	{r4, lr}
 8023eea:	4604      	mov	r4, r0
  switch (msg)
 8023eec:	b1a1      	cbz	r1, 8023f18 <HAL_PCDEx_LPM_Callback+0x30>
 8023eee:	2901      	cmp	r1, #1
 8023ef0:	d111      	bne.n	8023f16 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023ef2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8023ef4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8023ef8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023efc:	f043 0301 	orr.w	r3, r3, #1
 8023f00:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8023f04:	f7f0 ff0c 	bl	8014d20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8023f08:	6a23      	ldr	r3, [r4, #32]
 8023f0a:	b123      	cbz	r3, 8023f16 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023f0c:	4a0e      	ldr	r2, [pc, #56]	; (8023f48 <HAL_PCDEx_LPM_Callback+0x60>)
 8023f0e:	6913      	ldr	r3, [r2, #16]
 8023f10:	f043 0306 	orr.w	r3, r3, #6
 8023f14:	6113      	str	r3, [r2, #16]
}
 8023f16:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8023f18:	6a03      	ldr	r3, [r0, #32]
 8023f1a:	b963      	cbnz	r3, 8023f36 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f1c:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8023f1e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f22:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8023f26:	f023 0301 	bic.w	r3, r3, #1
}
 8023f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8023f2e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8023f32:	f7f0 beff 	b.w	8014d34 <USBD_LL_Resume>
  SystemClock_Config();
 8023f36:	f7e0 f801 	bl	8003f3c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023f3a:	4a03      	ldr	r2, [pc, #12]	; (8023f48 <HAL_PCDEx_LPM_Callback+0x60>)
 8023f3c:	6913      	ldr	r3, [r2, #16]
 8023f3e:	f023 0306 	bic.w	r3, r3, #6
 8023f42:	6113      	str	r3, [r2, #16]
 8023f44:	e7ea      	b.n	8023f1c <HAL_PCDEx_LPM_Callback+0x34>
 8023f46:	bf00      	nop
 8023f48:	e000ed00 	.word	0xe000ed00

08023f4c <atoi>:
 8023f4c:	220a      	movs	r2, #10
 8023f4e:	2100      	movs	r1, #0
 8023f50:	f002 ba8c 	b.w	802646c <strtol>

08023f54 <ctime>:
 8023f54:	b508      	push	{r3, lr}
 8023f56:	f000 f91f 	bl	8024198 <localtime>
 8023f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8023f5e:	f002 be1f 	b.w	8026ba0 <asctime>
 8023f62:	Address 0x0000000008023f62 is out of bounds.


08023f64 <std>:
 8023f64:	2300      	movs	r3, #0
 8023f66:	b510      	push	{r4, lr}
 8023f68:	4604      	mov	r4, r0
 8023f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8023f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023f72:	6083      	str	r3, [r0, #8]
 8023f74:	8181      	strh	r1, [r0, #12]
 8023f76:	6643      	str	r3, [r0, #100]	; 0x64
 8023f78:	81c2      	strh	r2, [r0, #14]
 8023f7a:	6183      	str	r3, [r0, #24]
 8023f7c:	4619      	mov	r1, r3
 8023f7e:	2208      	movs	r2, #8
 8023f80:	305c      	adds	r0, #92	; 0x5c
 8023f82:	f000 fa69 	bl	8024458 <memset>
 8023f86:	4b05      	ldr	r3, [pc, #20]	; (8023f9c <std+0x38>)
 8023f88:	6263      	str	r3, [r4, #36]	; 0x24
 8023f8a:	4b05      	ldr	r3, [pc, #20]	; (8023fa0 <std+0x3c>)
 8023f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8023f8e:	4b05      	ldr	r3, [pc, #20]	; (8023fa4 <std+0x40>)
 8023f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023f92:	4b05      	ldr	r3, [pc, #20]	; (8023fa8 <std+0x44>)
 8023f94:	6224      	str	r4, [r4, #32]
 8023f96:	6323      	str	r3, [r4, #48]	; 0x30
 8023f98:	bd10      	pop	{r4, pc}
 8023f9a:	bf00      	nop
 8023f9c:	08025801 	.word	0x08025801
 8023fa0:	08025827 	.word	0x08025827
 8023fa4:	0802585f 	.word	0x0802585f
 8023fa8:	08025883 	.word	0x08025883

08023fac <_cleanup_r>:
 8023fac:	4901      	ldr	r1, [pc, #4]	; (8023fb4 <_cleanup_r+0x8>)
 8023fae:	f000 b8af 	b.w	8024110 <_fwalk_reent>
 8023fb2:	bf00      	nop
 8023fb4:	080279c5 	.word	0x080279c5

08023fb8 <__sfmoreglue>:
 8023fb8:	b570      	push	{r4, r5, r6, lr}
 8023fba:	2268      	movs	r2, #104	; 0x68
 8023fbc:	1e4d      	subs	r5, r1, #1
 8023fbe:	4355      	muls	r5, r2
 8023fc0:	460e      	mov	r6, r1
 8023fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023fc6:	f000 fd2d 	bl	8024a24 <_malloc_r>
 8023fca:	4604      	mov	r4, r0
 8023fcc:	b140      	cbz	r0, 8023fe0 <__sfmoreglue+0x28>
 8023fce:	2100      	movs	r1, #0
 8023fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8023fd4:	300c      	adds	r0, #12
 8023fd6:	60a0      	str	r0, [r4, #8]
 8023fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023fdc:	f000 fa3c 	bl	8024458 <memset>
 8023fe0:	4620      	mov	r0, r4
 8023fe2:	bd70      	pop	{r4, r5, r6, pc}

08023fe4 <__sfp_lock_acquire>:
 8023fe4:	4801      	ldr	r0, [pc, #4]	; (8023fec <__sfp_lock_acquire+0x8>)
 8023fe6:	f000 b9eb 	b.w	80243c0 <__retarget_lock_acquire_recursive>
 8023fea:	bf00      	nop
 8023fec:	2002fd4e 	.word	0x2002fd4e

08023ff0 <__sfp_lock_release>:
 8023ff0:	4801      	ldr	r0, [pc, #4]	; (8023ff8 <__sfp_lock_release+0x8>)
 8023ff2:	f000 b9e7 	b.w	80243c4 <__retarget_lock_release_recursive>
 8023ff6:	bf00      	nop
 8023ff8:	2002fd4e 	.word	0x2002fd4e

08023ffc <__sinit_lock_acquire>:
 8023ffc:	4801      	ldr	r0, [pc, #4]	; (8024004 <__sinit_lock_acquire+0x8>)
 8023ffe:	f000 b9df 	b.w	80243c0 <__retarget_lock_acquire_recursive>
 8024002:	bf00      	nop
 8024004:	2002fd4f 	.word	0x2002fd4f

08024008 <__sinit_lock_release>:
 8024008:	4801      	ldr	r0, [pc, #4]	; (8024010 <__sinit_lock_release+0x8>)
 802400a:	f000 b9db 	b.w	80243c4 <__retarget_lock_release_recursive>
 802400e:	bf00      	nop
 8024010:	2002fd4f 	.word	0x2002fd4f

08024014 <__sinit>:
 8024014:	b510      	push	{r4, lr}
 8024016:	4604      	mov	r4, r0
 8024018:	f7ff fff0 	bl	8023ffc <__sinit_lock_acquire>
 802401c:	69a3      	ldr	r3, [r4, #24]
 802401e:	b11b      	cbz	r3, 8024028 <__sinit+0x14>
 8024020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024024:	f7ff bff0 	b.w	8024008 <__sinit_lock_release>
 8024028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802402c:	6523      	str	r3, [r4, #80]	; 0x50
 802402e:	4b13      	ldr	r3, [pc, #76]	; (802407c <__sinit+0x68>)
 8024030:	4a13      	ldr	r2, [pc, #76]	; (8024080 <__sinit+0x6c>)
 8024032:	681b      	ldr	r3, [r3, #0]
 8024034:	62a2      	str	r2, [r4, #40]	; 0x28
 8024036:	42a3      	cmp	r3, r4
 8024038:	bf04      	itt	eq
 802403a:	2301      	moveq	r3, #1
 802403c:	61a3      	streq	r3, [r4, #24]
 802403e:	4620      	mov	r0, r4
 8024040:	f000 f820 	bl	8024084 <__sfp>
 8024044:	6060      	str	r0, [r4, #4]
 8024046:	4620      	mov	r0, r4
 8024048:	f000 f81c 	bl	8024084 <__sfp>
 802404c:	60a0      	str	r0, [r4, #8]
 802404e:	4620      	mov	r0, r4
 8024050:	f000 f818 	bl	8024084 <__sfp>
 8024054:	2200      	movs	r2, #0
 8024056:	60e0      	str	r0, [r4, #12]
 8024058:	2104      	movs	r1, #4
 802405a:	6860      	ldr	r0, [r4, #4]
 802405c:	f7ff ff82 	bl	8023f64 <std>
 8024060:	68a0      	ldr	r0, [r4, #8]
 8024062:	2201      	movs	r2, #1
 8024064:	2109      	movs	r1, #9
 8024066:	f7ff ff7d 	bl	8023f64 <std>
 802406a:	68e0      	ldr	r0, [r4, #12]
 802406c:	2202      	movs	r2, #2
 802406e:	2112      	movs	r1, #18
 8024070:	f7ff ff78 	bl	8023f64 <std>
 8024074:	2301      	movs	r3, #1
 8024076:	61a3      	str	r3, [r4, #24]
 8024078:	e7d2      	b.n	8024020 <__sinit+0xc>
 802407a:	bf00      	nop
 802407c:	08045d14 	.word	0x08045d14
 8024080:	08023fad 	.word	0x08023fad

08024084 <__sfp>:
 8024084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024086:	4607      	mov	r7, r0
 8024088:	f7ff ffac 	bl	8023fe4 <__sfp_lock_acquire>
 802408c:	4b1e      	ldr	r3, [pc, #120]	; (8024108 <__sfp+0x84>)
 802408e:	681e      	ldr	r6, [r3, #0]
 8024090:	69b3      	ldr	r3, [r6, #24]
 8024092:	b913      	cbnz	r3, 802409a <__sfp+0x16>
 8024094:	4630      	mov	r0, r6
 8024096:	f7ff ffbd 	bl	8024014 <__sinit>
 802409a:	3648      	adds	r6, #72	; 0x48
 802409c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80240a0:	3b01      	subs	r3, #1
 80240a2:	d503      	bpl.n	80240ac <__sfp+0x28>
 80240a4:	6833      	ldr	r3, [r6, #0]
 80240a6:	b30b      	cbz	r3, 80240ec <__sfp+0x68>
 80240a8:	6836      	ldr	r6, [r6, #0]
 80240aa:	e7f7      	b.n	802409c <__sfp+0x18>
 80240ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80240b0:	b9d5      	cbnz	r5, 80240e8 <__sfp+0x64>
 80240b2:	4b16      	ldr	r3, [pc, #88]	; (802410c <__sfp+0x88>)
 80240b4:	60e3      	str	r3, [r4, #12]
 80240b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80240ba:	6665      	str	r5, [r4, #100]	; 0x64
 80240bc:	f000 f97e 	bl	80243bc <__retarget_lock_init_recursive>
 80240c0:	f7ff ff96 	bl	8023ff0 <__sfp_lock_release>
 80240c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80240c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80240cc:	6025      	str	r5, [r4, #0]
 80240ce:	61a5      	str	r5, [r4, #24]
 80240d0:	2208      	movs	r2, #8
 80240d2:	4629      	mov	r1, r5
 80240d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80240d8:	f000 f9be 	bl	8024458 <memset>
 80240dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80240e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80240e4:	4620      	mov	r0, r4
 80240e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80240e8:	3468      	adds	r4, #104	; 0x68
 80240ea:	e7d9      	b.n	80240a0 <__sfp+0x1c>
 80240ec:	2104      	movs	r1, #4
 80240ee:	4638      	mov	r0, r7
 80240f0:	f7ff ff62 	bl	8023fb8 <__sfmoreglue>
 80240f4:	4604      	mov	r4, r0
 80240f6:	6030      	str	r0, [r6, #0]
 80240f8:	2800      	cmp	r0, #0
 80240fa:	d1d5      	bne.n	80240a8 <__sfp+0x24>
 80240fc:	f7ff ff78 	bl	8023ff0 <__sfp_lock_release>
 8024100:	230c      	movs	r3, #12
 8024102:	603b      	str	r3, [r7, #0]
 8024104:	e7ee      	b.n	80240e4 <__sfp+0x60>
 8024106:	bf00      	nop
 8024108:	08045d14 	.word	0x08045d14
 802410c:	ffff0001 	.word	0xffff0001

08024110 <_fwalk_reent>:
 8024110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024114:	4606      	mov	r6, r0
 8024116:	4688      	mov	r8, r1
 8024118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802411c:	2700      	movs	r7, #0
 802411e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024122:	f1b9 0901 	subs.w	r9, r9, #1
 8024126:	d505      	bpl.n	8024134 <_fwalk_reent+0x24>
 8024128:	6824      	ldr	r4, [r4, #0]
 802412a:	2c00      	cmp	r4, #0
 802412c:	d1f7      	bne.n	802411e <_fwalk_reent+0xe>
 802412e:	4638      	mov	r0, r7
 8024130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024134:	89ab      	ldrh	r3, [r5, #12]
 8024136:	2b01      	cmp	r3, #1
 8024138:	d907      	bls.n	802414a <_fwalk_reent+0x3a>
 802413a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802413e:	3301      	adds	r3, #1
 8024140:	d003      	beq.n	802414a <_fwalk_reent+0x3a>
 8024142:	4629      	mov	r1, r5
 8024144:	4630      	mov	r0, r6
 8024146:	47c0      	blx	r8
 8024148:	4307      	orrs	r7, r0
 802414a:	3568      	adds	r5, #104	; 0x68
 802414c:	e7e9      	b.n	8024122 <_fwalk_reent+0x12>
 802414e:	Address 0x000000000802414e is out of bounds.


08024150 <__libc_init_array>:
 8024150:	b570      	push	{r4, r5, r6, lr}
 8024152:	4d0d      	ldr	r5, [pc, #52]	; (8024188 <__libc_init_array+0x38>)
 8024154:	4c0d      	ldr	r4, [pc, #52]	; (802418c <__libc_init_array+0x3c>)
 8024156:	1b64      	subs	r4, r4, r5
 8024158:	10a4      	asrs	r4, r4, #2
 802415a:	2600      	movs	r6, #0
 802415c:	42a6      	cmp	r6, r4
 802415e:	d109      	bne.n	8024174 <__libc_init_array+0x24>
 8024160:	4d0b      	ldr	r5, [pc, #44]	; (8024190 <__libc_init_array+0x40>)
 8024162:	4c0c      	ldr	r4, [pc, #48]	; (8024194 <__libc_init_array+0x44>)
 8024164:	f005 f938 	bl	80293d8 <_init>
 8024168:	1b64      	subs	r4, r4, r5
 802416a:	10a4      	asrs	r4, r4, #2
 802416c:	2600      	movs	r6, #0
 802416e:	42a6      	cmp	r6, r4
 8024170:	d105      	bne.n	802417e <__libc_init_array+0x2e>
 8024172:	bd70      	pop	{r4, r5, r6, pc}
 8024174:	f855 3b04 	ldr.w	r3, [r5], #4
 8024178:	4798      	blx	r3
 802417a:	3601      	adds	r6, #1
 802417c:	e7ee      	b.n	802415c <__libc_init_array+0xc>
 802417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8024182:	4798      	blx	r3
 8024184:	3601      	adds	r6, #1
 8024186:	e7f2      	b.n	802416e <__libc_init_array+0x1e>
 8024188:	0804649c 	.word	0x0804649c
 802418c:	0804649c 	.word	0x0804649c
 8024190:	0804649c 	.word	0x0804649c
 8024194:	080464a0 	.word	0x080464a0

08024198 <localtime>:
 8024198:	b538      	push	{r3, r4, r5, lr}
 802419a:	4b0b      	ldr	r3, [pc, #44]	; (80241c8 <localtime+0x30>)
 802419c:	681d      	ldr	r5, [r3, #0]
 802419e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80241a0:	4604      	mov	r4, r0
 80241a2:	b953      	cbnz	r3, 80241ba <localtime+0x22>
 80241a4:	2024      	movs	r0, #36	; 0x24
 80241a6:	f000 f90f 	bl	80243c8 <malloc>
 80241aa:	4602      	mov	r2, r0
 80241ac:	63e8      	str	r0, [r5, #60]	; 0x3c
 80241ae:	b920      	cbnz	r0, 80241ba <localtime+0x22>
 80241b0:	4b06      	ldr	r3, [pc, #24]	; (80241cc <localtime+0x34>)
 80241b2:	4807      	ldr	r0, [pc, #28]	; (80241d0 <localtime+0x38>)
 80241b4:	2132      	movs	r1, #50	; 0x32
 80241b6:	f002 fd3b 	bl	8026c30 <__assert_func>
 80241ba:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80241bc:	4620      	mov	r0, r4
 80241be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80241c2:	f000 b807 	b.w	80241d4 <localtime_r>
 80241c6:	bf00      	nop
 80241c8:	20000490 	.word	0x20000490
 80241cc:	08045d18 	.word	0x08045d18
 80241d0:	08045d2f 	.word	0x08045d2f

080241d4 <localtime_r>:
 80241d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80241d8:	4680      	mov	r8, r0
 80241da:	9101      	str	r1, [sp, #4]
 80241dc:	f003 fc84 	bl	8027ae8 <__gettzinfo>
 80241e0:	9901      	ldr	r1, [sp, #4]
 80241e2:	4605      	mov	r5, r0
 80241e4:	4640      	mov	r0, r8
 80241e6:	f003 fc83 	bl	8027af0 <gmtime_r>
 80241ea:	6943      	ldr	r3, [r0, #20]
 80241ec:	0799      	lsls	r1, r3, #30
 80241ee:	4604      	mov	r4, r0
 80241f0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 80241f4:	d105      	bne.n	8024202 <localtime_r+0x2e>
 80241f6:	2264      	movs	r2, #100	; 0x64
 80241f8:	fb97 f3f2 	sdiv	r3, r7, r2
 80241fc:	fb02 7313 	mls	r3, r2, r3, r7
 8024200:	bb73      	cbnz	r3, 8024260 <localtime_r+0x8c>
 8024202:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8024206:	fb97 f6f3 	sdiv	r6, r7, r3
 802420a:	fb03 7616 	mls	r6, r3, r6, r7
 802420e:	fab6 f386 	clz	r3, r6
 8024212:	095b      	lsrs	r3, r3, #5
 8024214:	4e67      	ldr	r6, [pc, #412]	; (80243b4 <localtime_r+0x1e0>)
 8024216:	2230      	movs	r2, #48	; 0x30
 8024218:	fb02 6603 	mla	r6, r2, r3, r6
 802421c:	f002 fa58 	bl	80266d0 <__tz_lock>
 8024220:	f002 fa62 	bl	80266e8 <_tzset_unlocked>
 8024224:	4b64      	ldr	r3, [pc, #400]	; (80243b8 <localtime_r+0x1e4>)
 8024226:	681b      	ldr	r3, [r3, #0]
 8024228:	b34b      	cbz	r3, 802427e <localtime_r+0xaa>
 802422a:	686b      	ldr	r3, [r5, #4]
 802422c:	42bb      	cmp	r3, r7
 802422e:	d119      	bne.n	8024264 <localtime_r+0x90>
 8024230:	682f      	ldr	r7, [r5, #0]
 8024232:	e9d8 2300 	ldrd	r2, r3, [r8]
 8024236:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802423a:	b9df      	cbnz	r7, 8024274 <localtime_r+0xa0>
 802423c:	4282      	cmp	r2, r0
 802423e:	eb73 0101 	sbcs.w	r1, r3, r1
 8024242:	da23      	bge.n	802428c <localtime_r+0xb8>
 8024244:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8024248:	4282      	cmp	r2, r0
 802424a:	eb73 0701 	sbcs.w	r7, r3, r1
 802424e:	bfb4      	ite	lt
 8024250:	2701      	movlt	r7, #1
 8024252:	2700      	movge	r7, #0
 8024254:	4282      	cmp	r2, r0
 8024256:	418b      	sbcs	r3, r1
 8024258:	6227      	str	r7, [r4, #32]
 802425a:	db19      	blt.n	8024290 <localtime_r+0xbc>
 802425c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802425e:	e018      	b.n	8024292 <localtime_r+0xbe>
 8024260:	2301      	movs	r3, #1
 8024262:	e7d7      	b.n	8024214 <localtime_r+0x40>
 8024264:	4638      	mov	r0, r7
 8024266:	f002 f989 	bl	802657c <__tzcalc_limits>
 802426a:	2800      	cmp	r0, #0
 802426c:	d1e0      	bne.n	8024230 <localtime_r+0x5c>
 802426e:	f04f 33ff 	mov.w	r3, #4294967295
 8024272:	e004      	b.n	802427e <localtime_r+0xaa>
 8024274:	4282      	cmp	r2, r0
 8024276:	eb73 0101 	sbcs.w	r1, r3, r1
 802427a:	da02      	bge.n	8024282 <localtime_r+0xae>
 802427c:	2300      	movs	r3, #0
 802427e:	6223      	str	r3, [r4, #32]
 8024280:	e7ec      	b.n	802425c <localtime_r+0x88>
 8024282:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8024286:	4282      	cmp	r2, r0
 8024288:	418b      	sbcs	r3, r1
 802428a:	daf7      	bge.n	802427c <localtime_r+0xa8>
 802428c:	2301      	movs	r3, #1
 802428e:	6223      	str	r3, [r4, #32]
 8024290:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8024292:	6861      	ldr	r1, [r4, #4]
 8024294:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8024298:	203c      	movs	r0, #60	; 0x3c
 802429a:	fb93 f5f2 	sdiv	r5, r3, r2
 802429e:	fb02 3315 	mls	r3, r2, r5, r3
 80242a2:	fb93 f2f0 	sdiv	r2, r3, r0
 80242a6:	fb00 3012 	mls	r0, r0, r2, r3
 80242aa:	6823      	ldr	r3, [r4, #0]
 80242ac:	1a89      	subs	r1, r1, r2
 80242ae:	68a2      	ldr	r2, [r4, #8]
 80242b0:	6061      	str	r1, [r4, #4]
 80242b2:	1a1b      	subs	r3, r3, r0
 80242b4:	1b52      	subs	r2, r2, r5
 80242b6:	2b3b      	cmp	r3, #59	; 0x3b
 80242b8:	6023      	str	r3, [r4, #0]
 80242ba:	60a2      	str	r2, [r4, #8]
 80242bc:	dd35      	ble.n	802432a <localtime_r+0x156>
 80242be:	3101      	adds	r1, #1
 80242c0:	6061      	str	r1, [r4, #4]
 80242c2:	3b3c      	subs	r3, #60	; 0x3c
 80242c4:	6023      	str	r3, [r4, #0]
 80242c6:	6863      	ldr	r3, [r4, #4]
 80242c8:	2b3b      	cmp	r3, #59	; 0x3b
 80242ca:	dd34      	ble.n	8024336 <localtime_r+0x162>
 80242cc:	3201      	adds	r2, #1
 80242ce:	60a2      	str	r2, [r4, #8]
 80242d0:	3b3c      	subs	r3, #60	; 0x3c
 80242d2:	6063      	str	r3, [r4, #4]
 80242d4:	68a3      	ldr	r3, [r4, #8]
 80242d6:	2b17      	cmp	r3, #23
 80242d8:	dd33      	ble.n	8024342 <localtime_r+0x16e>
 80242da:	69e2      	ldr	r2, [r4, #28]
 80242dc:	3201      	adds	r2, #1
 80242de:	61e2      	str	r2, [r4, #28]
 80242e0:	69a2      	ldr	r2, [r4, #24]
 80242e2:	3201      	adds	r2, #1
 80242e4:	2a06      	cmp	r2, #6
 80242e6:	bfc8      	it	gt
 80242e8:	2200      	movgt	r2, #0
 80242ea:	61a2      	str	r2, [r4, #24]
 80242ec:	68e2      	ldr	r2, [r4, #12]
 80242ee:	3b18      	subs	r3, #24
 80242f0:	3201      	adds	r2, #1
 80242f2:	60a3      	str	r3, [r4, #8]
 80242f4:	6923      	ldr	r3, [r4, #16]
 80242f6:	60e2      	str	r2, [r4, #12]
 80242f8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80242fc:	428a      	cmp	r2, r1
 80242fe:	dd0e      	ble.n	802431e <localtime_r+0x14a>
 8024300:	2b0b      	cmp	r3, #11
 8024302:	eba2 0201 	sub.w	r2, r2, r1
 8024306:	60e2      	str	r2, [r4, #12]
 8024308:	f103 0201 	add.w	r2, r3, #1
 802430c:	bf09      	itett	eq
 802430e:	6963      	ldreq	r3, [r4, #20]
 8024310:	6122      	strne	r2, [r4, #16]
 8024312:	2200      	moveq	r2, #0
 8024314:	3301      	addeq	r3, #1
 8024316:	bf02      	ittt	eq
 8024318:	6122      	streq	r2, [r4, #16]
 802431a:	6163      	streq	r3, [r4, #20]
 802431c:	61e2      	streq	r2, [r4, #28]
 802431e:	f002 f9dd 	bl	80266dc <__tz_unlock>
 8024322:	4620      	mov	r0, r4
 8024324:	b002      	add	sp, #8
 8024326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802432a:	2b00      	cmp	r3, #0
 802432c:	dacb      	bge.n	80242c6 <localtime_r+0xf2>
 802432e:	3901      	subs	r1, #1
 8024330:	6061      	str	r1, [r4, #4]
 8024332:	333c      	adds	r3, #60	; 0x3c
 8024334:	e7c6      	b.n	80242c4 <localtime_r+0xf0>
 8024336:	2b00      	cmp	r3, #0
 8024338:	dacc      	bge.n	80242d4 <localtime_r+0x100>
 802433a:	3a01      	subs	r2, #1
 802433c:	60a2      	str	r2, [r4, #8]
 802433e:	333c      	adds	r3, #60	; 0x3c
 8024340:	e7c7      	b.n	80242d2 <localtime_r+0xfe>
 8024342:	2b00      	cmp	r3, #0
 8024344:	daeb      	bge.n	802431e <localtime_r+0x14a>
 8024346:	69e2      	ldr	r2, [r4, #28]
 8024348:	3a01      	subs	r2, #1
 802434a:	61e2      	str	r2, [r4, #28]
 802434c:	69a2      	ldr	r2, [r4, #24]
 802434e:	3a01      	subs	r2, #1
 8024350:	bf48      	it	mi
 8024352:	2206      	movmi	r2, #6
 8024354:	61a2      	str	r2, [r4, #24]
 8024356:	68e2      	ldr	r2, [r4, #12]
 8024358:	3318      	adds	r3, #24
 802435a:	3a01      	subs	r2, #1
 802435c:	60e2      	str	r2, [r4, #12]
 802435e:	60a3      	str	r3, [r4, #8]
 8024360:	2a00      	cmp	r2, #0
 8024362:	d1dc      	bne.n	802431e <localtime_r+0x14a>
 8024364:	6923      	ldr	r3, [r4, #16]
 8024366:	3b01      	subs	r3, #1
 8024368:	d405      	bmi.n	8024376 <localtime_r+0x1a2>
 802436a:	6123      	str	r3, [r4, #16]
 802436c:	6923      	ldr	r3, [r4, #16]
 802436e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024372:	60e3      	str	r3, [r4, #12]
 8024374:	e7d3      	b.n	802431e <localtime_r+0x14a>
 8024376:	230b      	movs	r3, #11
 8024378:	6123      	str	r3, [r4, #16]
 802437a:	6963      	ldr	r3, [r4, #20]
 802437c:	1e5a      	subs	r2, r3, #1
 802437e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8024382:	6162      	str	r2, [r4, #20]
 8024384:	079a      	lsls	r2, r3, #30
 8024386:	d105      	bne.n	8024394 <localtime_r+0x1c0>
 8024388:	2164      	movs	r1, #100	; 0x64
 802438a:	fb93 f2f1 	sdiv	r2, r3, r1
 802438e:	fb01 3212 	mls	r2, r1, r2, r3
 8024392:	b962      	cbnz	r2, 80243ae <localtime_r+0x1da>
 8024394:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024398:	fb93 f1f2 	sdiv	r1, r3, r2
 802439c:	fb02 3311 	mls	r3, r2, r1, r3
 80243a0:	fab3 f383 	clz	r3, r3
 80243a4:	095b      	lsrs	r3, r3, #5
 80243a6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80243aa:	61e3      	str	r3, [r4, #28]
 80243ac:	e7de      	b.n	802436c <localtime_r+0x198>
 80243ae:	2301      	movs	r3, #1
 80243b0:	e7f9      	b.n	80243a6 <localtime_r+0x1d2>
 80243b2:	bf00      	nop
 80243b4:	08045dec 	.word	0x08045dec
 80243b8:	2002fd7c 	.word	0x2002fd7c

080243bc <__retarget_lock_init_recursive>:
 80243bc:	4770      	bx	lr

080243be <__retarget_lock_acquire>:
 80243be:	4770      	bx	lr

080243c0 <__retarget_lock_acquire_recursive>:
 80243c0:	4770      	bx	lr

080243c2 <__retarget_lock_release>:
 80243c2:	4770      	bx	lr

080243c4 <__retarget_lock_release_recursive>:
 80243c4:	4770      	bx	lr
 80243c6:	Address 0x00000000080243c6 is out of bounds.


080243c8 <malloc>:
 80243c8:	4b02      	ldr	r3, [pc, #8]	; (80243d4 <malloc+0xc>)
 80243ca:	4601      	mov	r1, r0
 80243cc:	6818      	ldr	r0, [r3, #0]
 80243ce:	f000 bb29 	b.w	8024a24 <_malloc_r>
 80243d2:	bf00      	nop
 80243d4:	20000490 	.word	0x20000490

080243d8 <free>:
 80243d8:	4b02      	ldr	r3, [pc, #8]	; (80243e4 <free+0xc>)
 80243da:	4601      	mov	r1, r0
 80243dc:	6818      	ldr	r0, [r3, #0]
 80243de:	f000 bab5 	b.w	802494c <_free_r>
 80243e2:	bf00      	nop
 80243e4:	20000490 	.word	0x20000490

080243e8 <memcmp>:
 80243e8:	b510      	push	{r4, lr}
 80243ea:	3901      	subs	r1, #1
 80243ec:	4402      	add	r2, r0
 80243ee:	4290      	cmp	r0, r2
 80243f0:	d101      	bne.n	80243f6 <memcmp+0xe>
 80243f2:	2000      	movs	r0, #0
 80243f4:	e005      	b.n	8024402 <memcmp+0x1a>
 80243f6:	7803      	ldrb	r3, [r0, #0]
 80243f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80243fc:	42a3      	cmp	r3, r4
 80243fe:	d001      	beq.n	8024404 <memcmp+0x1c>
 8024400:	1b18      	subs	r0, r3, r4
 8024402:	bd10      	pop	{r4, pc}
 8024404:	3001      	adds	r0, #1
 8024406:	e7f2      	b.n	80243ee <memcmp+0x6>

08024408 <memcpy>:
 8024408:	440a      	add	r2, r1
 802440a:	4291      	cmp	r1, r2
 802440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8024410:	d100      	bne.n	8024414 <memcpy+0xc>
 8024412:	4770      	bx	lr
 8024414:	b510      	push	{r4, lr}
 8024416:	f811 4b01 	ldrb.w	r4, [r1], #1
 802441a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802441e:	4291      	cmp	r1, r2
 8024420:	d1f9      	bne.n	8024416 <memcpy+0xe>
 8024422:	bd10      	pop	{r4, pc}

08024424 <memmove>:
 8024424:	4288      	cmp	r0, r1
 8024426:	b510      	push	{r4, lr}
 8024428:	eb01 0402 	add.w	r4, r1, r2
 802442c:	d902      	bls.n	8024434 <memmove+0x10>
 802442e:	4284      	cmp	r4, r0
 8024430:	4623      	mov	r3, r4
 8024432:	d807      	bhi.n	8024444 <memmove+0x20>
 8024434:	1e43      	subs	r3, r0, #1
 8024436:	42a1      	cmp	r1, r4
 8024438:	d008      	beq.n	802444c <memmove+0x28>
 802443a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802443e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8024442:	e7f8      	b.n	8024436 <memmove+0x12>
 8024444:	4402      	add	r2, r0
 8024446:	4601      	mov	r1, r0
 8024448:	428a      	cmp	r2, r1
 802444a:	d100      	bne.n	802444e <memmove+0x2a>
 802444c:	bd10      	pop	{r4, pc}
 802444e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8024456:	e7f7      	b.n	8024448 <memmove+0x24>

08024458 <memset>:
 8024458:	4402      	add	r2, r0
 802445a:	4603      	mov	r3, r0
 802445c:	4293      	cmp	r3, r2
 802445e:	d100      	bne.n	8024462 <memset+0xa>
 8024460:	4770      	bx	lr
 8024462:	f803 1b01 	strb.w	r1, [r3], #1
 8024466:	e7f9      	b.n	802445c <memset+0x4>

08024468 <validate_structure>:
 8024468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802446a:	6801      	ldr	r1, [r0, #0]
 802446c:	293b      	cmp	r1, #59	; 0x3b
 802446e:	4604      	mov	r4, r0
 8024470:	d911      	bls.n	8024496 <validate_structure+0x2e>
 8024472:	223c      	movs	r2, #60	; 0x3c
 8024474:	4668      	mov	r0, sp
 8024476:	f002 fc09 	bl	8026c8c <div>
 802447a:	9a01      	ldr	r2, [sp, #4]
 802447c:	6863      	ldr	r3, [r4, #4]
 802447e:	9900      	ldr	r1, [sp, #0]
 8024480:	2a00      	cmp	r2, #0
 8024482:	440b      	add	r3, r1
 8024484:	6063      	str	r3, [r4, #4]
 8024486:	bfbb      	ittet	lt
 8024488:	323c      	addlt	r2, #60	; 0x3c
 802448a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802448e:	6022      	strge	r2, [r4, #0]
 8024490:	6022      	strlt	r2, [r4, #0]
 8024492:	bfb8      	it	lt
 8024494:	6063      	strlt	r3, [r4, #4]
 8024496:	6861      	ldr	r1, [r4, #4]
 8024498:	293b      	cmp	r1, #59	; 0x3b
 802449a:	d911      	bls.n	80244c0 <validate_structure+0x58>
 802449c:	223c      	movs	r2, #60	; 0x3c
 802449e:	4668      	mov	r0, sp
 80244a0:	f002 fbf4 	bl	8026c8c <div>
 80244a4:	9a01      	ldr	r2, [sp, #4]
 80244a6:	68a3      	ldr	r3, [r4, #8]
 80244a8:	9900      	ldr	r1, [sp, #0]
 80244aa:	2a00      	cmp	r2, #0
 80244ac:	440b      	add	r3, r1
 80244ae:	60a3      	str	r3, [r4, #8]
 80244b0:	bfbb      	ittet	lt
 80244b2:	323c      	addlt	r2, #60	; 0x3c
 80244b4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80244b8:	6062      	strge	r2, [r4, #4]
 80244ba:	6062      	strlt	r2, [r4, #4]
 80244bc:	bfb8      	it	lt
 80244be:	60a3      	strlt	r3, [r4, #8]
 80244c0:	68a1      	ldr	r1, [r4, #8]
 80244c2:	2917      	cmp	r1, #23
 80244c4:	d911      	bls.n	80244ea <validate_structure+0x82>
 80244c6:	2218      	movs	r2, #24
 80244c8:	4668      	mov	r0, sp
 80244ca:	f002 fbdf 	bl	8026c8c <div>
 80244ce:	9a01      	ldr	r2, [sp, #4]
 80244d0:	68e3      	ldr	r3, [r4, #12]
 80244d2:	9900      	ldr	r1, [sp, #0]
 80244d4:	2a00      	cmp	r2, #0
 80244d6:	440b      	add	r3, r1
 80244d8:	60e3      	str	r3, [r4, #12]
 80244da:	bfbb      	ittet	lt
 80244dc:	3218      	addlt	r2, #24
 80244de:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80244e2:	60a2      	strge	r2, [r4, #8]
 80244e4:	60a2      	strlt	r2, [r4, #8]
 80244e6:	bfb8      	it	lt
 80244e8:	60e3      	strlt	r3, [r4, #12]
 80244ea:	6921      	ldr	r1, [r4, #16]
 80244ec:	290b      	cmp	r1, #11
 80244ee:	d911      	bls.n	8024514 <validate_structure+0xac>
 80244f0:	220c      	movs	r2, #12
 80244f2:	4668      	mov	r0, sp
 80244f4:	f002 fbca 	bl	8026c8c <div>
 80244f8:	9a01      	ldr	r2, [sp, #4]
 80244fa:	6963      	ldr	r3, [r4, #20]
 80244fc:	9900      	ldr	r1, [sp, #0]
 80244fe:	2a00      	cmp	r2, #0
 8024500:	440b      	add	r3, r1
 8024502:	6163      	str	r3, [r4, #20]
 8024504:	bfbb      	ittet	lt
 8024506:	320c      	addlt	r2, #12
 8024508:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802450c:	6122      	strge	r2, [r4, #16]
 802450e:	6122      	strlt	r2, [r4, #16]
 8024510:	bfb8      	it	lt
 8024512:	6163      	strlt	r3, [r4, #20]
 8024514:	6963      	ldr	r3, [r4, #20]
 8024516:	0798      	lsls	r0, r3, #30
 8024518:	d120      	bne.n	802455c <validate_structure+0xf4>
 802451a:	2164      	movs	r1, #100	; 0x64
 802451c:	fb93 f2f1 	sdiv	r2, r3, r1
 8024520:	fb01 3212 	mls	r2, r1, r2, r3
 8024524:	b9e2      	cbnz	r2, 8024560 <validate_structure+0xf8>
 8024526:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 802452a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802452e:	fb93 f1f2 	sdiv	r1, r3, r2
 8024532:	fb02 3311 	mls	r3, r2, r1, r3
 8024536:	2b00      	cmp	r3, #0
 8024538:	bf14      	ite	ne
 802453a:	231c      	movne	r3, #28
 802453c:	231d      	moveq	r3, #29
 802453e:	68e2      	ldr	r2, [r4, #12]
 8024540:	2a00      	cmp	r2, #0
 8024542:	dc0f      	bgt.n	8024564 <validate_structure+0xfc>
 8024544:	4f33      	ldr	r7, [pc, #204]	; (8024614 <validate_structure+0x1ac>)
 8024546:	260b      	movs	r6, #11
 8024548:	2064      	movs	r0, #100	; 0x64
 802454a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802454e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8024552:	f1bc 0f00 	cmp.w	ip, #0
 8024556:	dd31      	ble.n	80245bc <validate_structure+0x154>
 8024558:	b003      	add	sp, #12
 802455a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802455c:	231c      	movs	r3, #28
 802455e:	e7ee      	b.n	802453e <validate_structure+0xd6>
 8024560:	231d      	movs	r3, #29
 8024562:	e7ec      	b.n	802453e <validate_structure+0xd6>
 8024564:	4e2b      	ldr	r6, [pc, #172]	; (8024614 <validate_structure+0x1ac>)
 8024566:	2700      	movs	r7, #0
 8024568:	2064      	movs	r0, #100	; 0x64
 802456a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802456e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8024572:	2a01      	cmp	r2, #1
 8024574:	bf14      	ite	ne
 8024576:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802457a:	469c      	moveq	ip, r3
 802457c:	4561      	cmp	r1, ip
 802457e:	ddeb      	ble.n	8024558 <validate_structure+0xf0>
 8024580:	3201      	adds	r2, #1
 8024582:	eba1 010c 	sub.w	r1, r1, ip
 8024586:	2a0c      	cmp	r2, #12
 8024588:	60e1      	str	r1, [r4, #12]
 802458a:	6122      	str	r2, [r4, #16]
 802458c:	d1ef      	bne.n	802456e <validate_structure+0x106>
 802458e:	6963      	ldr	r3, [r4, #20]
 8024590:	1c5a      	adds	r2, r3, #1
 8024592:	0791      	lsls	r1, r2, #30
 8024594:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8024598:	d137      	bne.n	802460a <validate_structure+0x1a2>
 802459a:	fb92 f1f0 	sdiv	r1, r2, r0
 802459e:	fb00 2211 	mls	r2, r0, r1, r2
 80245a2:	2a00      	cmp	r2, #0
 80245a4:	d133      	bne.n	802460e <validate_structure+0x1a6>
 80245a6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80245aa:	fb93 f2f5 	sdiv	r2, r3, r5
 80245ae:	fb05 3312 	mls	r3, r5, r2, r3
 80245b2:	2b00      	cmp	r3, #0
 80245b4:	bf14      	ite	ne
 80245b6:	231c      	movne	r3, #28
 80245b8:	231d      	moveq	r3, #29
 80245ba:	e7d8      	b.n	802456e <validate_structure+0x106>
 80245bc:	6921      	ldr	r1, [r4, #16]
 80245be:	3901      	subs	r1, #1
 80245c0:	6121      	str	r1, [r4, #16]
 80245c2:	3101      	adds	r1, #1
 80245c4:	d114      	bne.n	80245f0 <validate_structure+0x188>
 80245c6:	6963      	ldr	r3, [r4, #20]
 80245c8:	1e5a      	subs	r2, r3, #1
 80245ca:	0791      	lsls	r1, r2, #30
 80245cc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80245d0:	d117      	bne.n	8024602 <validate_structure+0x19a>
 80245d2:	fb92 f1f0 	sdiv	r1, r2, r0
 80245d6:	fb00 2211 	mls	r2, r0, r1, r2
 80245da:	b9a2      	cbnz	r2, 8024606 <validate_structure+0x19e>
 80245dc:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80245e0:	fb93 f2f5 	sdiv	r2, r3, r5
 80245e4:	fb05 3312 	mls	r3, r5, r2, r3
 80245e8:	2b00      	cmp	r3, #0
 80245ea:	bf14      	ite	ne
 80245ec:	231c      	movne	r3, #28
 80245ee:	231d      	moveq	r3, #29
 80245f0:	6922      	ldr	r2, [r4, #16]
 80245f2:	2a01      	cmp	r2, #1
 80245f4:	bf14      	ite	ne
 80245f6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80245fa:	461a      	moveq	r2, r3
 80245fc:	4462      	add	r2, ip
 80245fe:	60e2      	str	r2, [r4, #12]
 8024600:	e7a5      	b.n	802454e <validate_structure+0xe6>
 8024602:	231c      	movs	r3, #28
 8024604:	e7f4      	b.n	80245f0 <validate_structure+0x188>
 8024606:	231d      	movs	r3, #29
 8024608:	e7f2      	b.n	80245f0 <validate_structure+0x188>
 802460a:	231c      	movs	r3, #28
 802460c:	e7af      	b.n	802456e <validate_structure+0x106>
 802460e:	231d      	movs	r3, #29
 8024610:	e7ad      	b.n	802456e <validate_structure+0x106>
 8024612:	bf00      	nop
 8024614:	08045d8c 	.word	0x08045d8c

08024618 <mktime>:
 8024618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802461c:	b085      	sub	sp, #20
 802461e:	4607      	mov	r7, r0
 8024620:	f003 fa62 	bl	8027ae8 <__gettzinfo>
 8024624:	4681      	mov	r9, r0
 8024626:	4638      	mov	r0, r7
 8024628:	f7ff ff1e 	bl	8024468 <validate_structure>
 802462c:	e9d7 4000 	ldrd	r4, r0, [r7]
 8024630:	233c      	movs	r3, #60	; 0x3c
 8024632:	fb03 4400 	mla	r4, r3, r0, r4
 8024636:	68b8      	ldr	r0, [r7, #8]
 8024638:	4abc      	ldr	r2, [pc, #752]	; (802492c <mktime+0x314>)
 802463a:	697e      	ldr	r6, [r7, #20]
 802463c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8024640:	fb03 4400 	mla	r4, r3, r0, r4
 8024644:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8024648:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802464c:	3d01      	subs	r5, #1
 802464e:	2b01      	cmp	r3, #1
 8024650:	4415      	add	r5, r2
 8024652:	dd11      	ble.n	8024678 <mktime+0x60>
 8024654:	07b1      	lsls	r1, r6, #30
 8024656:	d10f      	bne.n	8024678 <mktime+0x60>
 8024658:	2264      	movs	r2, #100	; 0x64
 802465a:	fb96 f3f2 	sdiv	r3, r6, r2
 802465e:	fb02 6313 	mls	r3, r2, r3, r6
 8024662:	b943      	cbnz	r3, 8024676 <mktime+0x5e>
 8024664:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8024668:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802466c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024670:	fb02 3311 	mls	r3, r2, r1, r3
 8024674:	b903      	cbnz	r3, 8024678 <mktime+0x60>
 8024676:	3501      	adds	r5, #1
 8024678:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802467c:	3310      	adds	r3, #16
 802467e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8024682:	4293      	cmp	r3, r2
 8024684:	61fd      	str	r5, [r7, #28]
 8024686:	f200 815d 	bhi.w	8024944 <mktime+0x32c>
 802468a:	2e46      	cmp	r6, #70	; 0x46
 802468c:	dd71      	ble.n	8024772 <mktime+0x15a>
 802468e:	2346      	movs	r3, #70	; 0x46
 8024690:	f240 1c6d 	movw	ip, #365	; 0x16d
 8024694:	2164      	movs	r1, #100	; 0x64
 8024696:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802469a:	079a      	lsls	r2, r3, #30
 802469c:	d163      	bne.n	8024766 <mktime+0x14e>
 802469e:	fb93 f2f1 	sdiv	r2, r3, r1
 80246a2:	fb01 3212 	mls	r2, r1, r2, r3
 80246a6:	2a00      	cmp	r2, #0
 80246a8:	d160      	bne.n	802476c <mktime+0x154>
 80246aa:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80246ae:	fb92 fef0 	sdiv	lr, r2, r0
 80246b2:	fb00 221e 	mls	r2, r0, lr, r2
 80246b6:	2a00      	cmp	r2, #0
 80246b8:	bf14      	ite	ne
 80246ba:	4662      	movne	r2, ip
 80246bc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80246c0:	3301      	adds	r3, #1
 80246c2:	429e      	cmp	r6, r3
 80246c4:	4415      	add	r5, r2
 80246c6:	d1e8      	bne.n	802469a <mktime+0x82>
 80246c8:	4b99      	ldr	r3, [pc, #612]	; (8024930 <mktime+0x318>)
 80246ca:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80246ce:	fbc5 4803 	smlal	r4, r8, r5, r3
 80246d2:	f001 fffd 	bl	80266d0 <__tz_lock>
 80246d6:	f002 f807 	bl	80266e8 <_tzset_unlocked>
 80246da:	4b96      	ldr	r3, [pc, #600]	; (8024934 <mktime+0x31c>)
 80246dc:	f8d3 b000 	ldr.w	fp, [r3]
 80246e0:	f1bb 0f00 	cmp.w	fp, #0
 80246e4:	d039      	beq.n	802475a <mktime+0x142>
 80246e6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80246ea:	6978      	ldr	r0, [r7, #20]
 80246ec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80246f0:	f1bb 0f01 	cmp.w	fp, #1
 80246f4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80246f8:	46da      	mov	sl, fp
 80246fa:	bfa8      	it	ge
 80246fc:	f04f 0a01 	movge.w	sl, #1
 8024700:	4283      	cmp	r3, r0
 8024702:	d178      	bne.n	80247f6 <mktime+0x1de>
 8024704:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8024708:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802470c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8024710:	1a5b      	subs	r3, r3, r1
 8024712:	9302      	str	r3, [sp, #8]
 8024714:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8024718:	9303      	str	r3, [sp, #12]
 802471a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802471e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 8024722:	9301      	str	r3, [sp, #4]
 8024724:	ebb3 0c02 	subs.w	ip, r3, r2
 8024728:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 802472c:	4564      	cmp	r4, ip
 802472e:	eb78 0300 	sbcs.w	r3, r8, r0
 8024732:	da66      	bge.n	8024802 <mktime+0x1ea>
 8024734:	f8d9 3000 	ldr.w	r3, [r9]
 8024738:	2b00      	cmp	r3, #0
 802473a:	d06f      	beq.n	802481c <mktime+0x204>
 802473c:	9b02      	ldr	r3, [sp, #8]
 802473e:	429c      	cmp	r4, r3
 8024740:	9b03      	ldr	r3, [sp, #12]
 8024742:	eb78 0303 	sbcs.w	r3, r8, r3
 8024746:	db03      	blt.n	8024750 <mktime+0x138>
 8024748:	4564      	cmp	r4, ip
 802474a:	eb78 0300 	sbcs.w	r3, r8, r0
 802474e:	db6b      	blt.n	8024828 <mktime+0x210>
 8024750:	f1bb 0f00 	cmp.w	fp, #0
 8024754:	f04f 0b00 	mov.w	fp, #0
 8024758:	da6b      	bge.n	8024832 <mktime+0x21a>
 802475a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802475e:	190c      	adds	r4, r1, r4
 8024760:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8024764:	e0a9      	b.n	80248ba <mktime+0x2a2>
 8024766:	f240 126d 	movw	r2, #365	; 0x16d
 802476a:	e7a9      	b.n	80246c0 <mktime+0xa8>
 802476c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024770:	e7a6      	b.n	80246c0 <mktime+0xa8>
 8024772:	d0a9      	beq.n	80246c8 <mktime+0xb0>
 8024774:	2345      	movs	r3, #69	; 0x45
 8024776:	f240 1c6d 	movw	ip, #365	; 0x16d
 802477a:	2164      	movs	r1, #100	; 0x64
 802477c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8024780:	e012      	b.n	80247a8 <mktime+0x190>
 8024782:	bb62      	cbnz	r2, 80247de <mktime+0x1c6>
 8024784:	fb93 f2f1 	sdiv	r2, r3, r1
 8024788:	fb01 3212 	mls	r2, r1, r2, r3
 802478c:	bb52      	cbnz	r2, 80247e4 <mktime+0x1cc>
 802478e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8024792:	fb92 fef0 	sdiv	lr, r2, r0
 8024796:	fb00 221e 	mls	r2, r0, lr, r2
 802479a:	2a00      	cmp	r2, #0
 802479c:	bf14      	ite	ne
 802479e:	4662      	movne	r2, ip
 80247a0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80247a4:	1aad      	subs	r5, r5, r2
 80247a6:	3b01      	subs	r3, #1
 80247a8:	429e      	cmp	r6, r3
 80247aa:	f003 0203 	and.w	r2, r3, #3
 80247ae:	dbe8      	blt.n	8024782 <mktime+0x16a>
 80247b0:	b9da      	cbnz	r2, 80247ea <mktime+0x1d2>
 80247b2:	2264      	movs	r2, #100	; 0x64
 80247b4:	fb96 f3f2 	sdiv	r3, r6, r2
 80247b8:	fb02 6313 	mls	r3, r2, r3, r6
 80247bc:	b9c3      	cbnz	r3, 80247f0 <mktime+0x1d8>
 80247be:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80247c2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80247c6:	fb93 f1f2 	sdiv	r1, r3, r2
 80247ca:	fb02 3311 	mls	r3, r2, r1, r3
 80247ce:	2b00      	cmp	r3, #0
 80247d0:	f240 136d 	movw	r3, #365	; 0x16d
 80247d4:	bf08      	it	eq
 80247d6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80247da:	1aed      	subs	r5, r5, r3
 80247dc:	e774      	b.n	80246c8 <mktime+0xb0>
 80247de:	f240 126d 	movw	r2, #365	; 0x16d
 80247e2:	e7df      	b.n	80247a4 <mktime+0x18c>
 80247e4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80247e8:	e7dc      	b.n	80247a4 <mktime+0x18c>
 80247ea:	f240 136d 	movw	r3, #365	; 0x16d
 80247ee:	e7f4      	b.n	80247da <mktime+0x1c2>
 80247f0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80247f4:	e7f1      	b.n	80247da <mktime+0x1c2>
 80247f6:	f001 fec1 	bl	802657c <__tzcalc_limits>
 80247fa:	2800      	cmp	r0, #0
 80247fc:	d182      	bne.n	8024704 <mktime+0xec>
 80247fe:	46d3      	mov	fp, sl
 8024800:	e050      	b.n	80248a4 <mktime+0x28c>
 8024802:	9b01      	ldr	r3, [sp, #4]
 8024804:	1a5b      	subs	r3, r3, r1
 8024806:	9301      	str	r3, [sp, #4]
 8024808:	ea4f 73e1 	mov.w	r3, r1, asr #31
 802480c:	eb6e 0e03 	sbc.w	lr, lr, r3
 8024810:	9b01      	ldr	r3, [sp, #4]
 8024812:	429c      	cmp	r4, r3
 8024814:	eb78 030e 	sbcs.w	r3, r8, lr
 8024818:	dbf1      	blt.n	80247fe <mktime+0x1e6>
 802481a:	e78b      	b.n	8024734 <mktime+0x11c>
 802481c:	9b02      	ldr	r3, [sp, #8]
 802481e:	429c      	cmp	r4, r3
 8024820:	9b03      	ldr	r3, [sp, #12]
 8024822:	eb78 0303 	sbcs.w	r3, r8, r3
 8024826:	db8f      	blt.n	8024748 <mktime+0x130>
 8024828:	f1bb 0f00 	cmp.w	fp, #0
 802482c:	db3e      	blt.n	80248ac <mktime+0x294>
 802482e:	f04f 0b01 	mov.w	fp, #1
 8024832:	ea8a 0a0b 	eor.w	sl, sl, fp
 8024836:	f1ba 0f01 	cmp.w	sl, #1
 802483a:	d133      	bne.n	80248a4 <mktime+0x28c>
 802483c:	f1bb 0f00 	cmp.w	fp, #0
 8024840:	d04e      	beq.n	80248e0 <mktime+0x2c8>
 8024842:	1a52      	subs	r2, r2, r1
 8024844:	683b      	ldr	r3, [r7, #0]
 8024846:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802484a:	4413      	add	r3, r2
 802484c:	1914      	adds	r4, r2, r4
 802484e:	603b      	str	r3, [r7, #0]
 8024850:	4638      	mov	r0, r7
 8024852:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8024856:	f7ff fe07 	bl	8024468 <validate_structure>
 802485a:	68fa      	ldr	r2, [r7, #12]
 802485c:	ebb2 020a 	subs.w	r2, r2, sl
 8024860:	d020      	beq.n	80248a4 <mktime+0x28c>
 8024862:	2a01      	cmp	r2, #1
 8024864:	dc3e      	bgt.n	80248e4 <mktime+0x2cc>
 8024866:	1c90      	adds	r0, r2, #2
 8024868:	bfd8      	it	le
 802486a:	2201      	movle	r2, #1
 802486c:	69fb      	ldr	r3, [r7, #28]
 802486e:	18d3      	adds	r3, r2, r3
 8024870:	4415      	add	r5, r2
 8024872:	d540      	bpl.n	80248f6 <mktime+0x2de>
 8024874:	1e73      	subs	r3, r6, #1
 8024876:	0799      	lsls	r1, r3, #30
 8024878:	d137      	bne.n	80248ea <mktime+0x2d2>
 802487a:	2264      	movs	r2, #100	; 0x64
 802487c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024880:	fb02 3311 	mls	r3, r2, r1, r3
 8024884:	bba3      	cbnz	r3, 80248f0 <mktime+0x2d8>
 8024886:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802488a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802488e:	fb96 f2f3 	sdiv	r2, r6, r3
 8024892:	fb03 6612 	mls	r6, r3, r2, r6
 8024896:	2e00      	cmp	r6, #0
 8024898:	f240 136d 	movw	r3, #365	; 0x16d
 802489c:	bf18      	it	ne
 802489e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80248a2:	61fb      	str	r3, [r7, #28]
 80248a4:	f1bb 0f01 	cmp.w	fp, #1
 80248a8:	f47f af57 	bne.w	802475a <mktime+0x142>
 80248ac:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80248b0:	190c      	adds	r4, r1, r4
 80248b2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80248b6:	f04f 0b01 	mov.w	fp, #1
 80248ba:	f001 ff0f 	bl	80266dc <__tz_unlock>
 80248be:	3504      	adds	r5, #4
 80248c0:	2307      	movs	r3, #7
 80248c2:	fb95 f3f3 	sdiv	r3, r5, r3
 80248c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80248ca:	1aed      	subs	r5, r5, r3
 80248cc:	bf48      	it	mi
 80248ce:	3507      	addmi	r5, #7
 80248d0:	f8c7 b020 	str.w	fp, [r7, #32]
 80248d4:	61bd      	str	r5, [r7, #24]
 80248d6:	4620      	mov	r0, r4
 80248d8:	4641      	mov	r1, r8
 80248da:	b005      	add	sp, #20
 80248dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248e0:	1a8a      	subs	r2, r1, r2
 80248e2:	e7af      	b.n	8024844 <mktime+0x22c>
 80248e4:	f04f 32ff 	mov.w	r2, #4294967295
 80248e8:	e7c0      	b.n	802486c <mktime+0x254>
 80248ea:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80248ee:	e7d8      	b.n	80248a2 <mktime+0x28a>
 80248f0:	f240 136d 	movw	r3, #365	; 0x16d
 80248f4:	e7d5      	b.n	80248a2 <mktime+0x28a>
 80248f6:	07b2      	lsls	r2, r6, #30
 80248f8:	d11e      	bne.n	8024938 <mktime+0x320>
 80248fa:	2164      	movs	r1, #100	; 0x64
 80248fc:	fb96 f2f1 	sdiv	r2, r6, r1
 8024900:	fb01 6212 	mls	r2, r1, r2, r6
 8024904:	b9da      	cbnz	r2, 802493e <mktime+0x326>
 8024906:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802490a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802490e:	fb96 f1f2 	sdiv	r1, r6, r2
 8024912:	fb02 6611 	mls	r6, r2, r1, r6
 8024916:	2e00      	cmp	r6, #0
 8024918:	f240 126d 	movw	r2, #365	; 0x16d
 802491c:	bf08      	it	eq
 802491e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8024922:	4293      	cmp	r3, r2
 8024924:	bfa8      	it	ge
 8024926:	1a9b      	subge	r3, r3, r2
 8024928:	e7bb      	b.n	80248a2 <mktime+0x28a>
 802492a:	bf00      	nop
 802492c:	08045dbc 	.word	0x08045dbc
 8024930:	00015180 	.word	0x00015180
 8024934:	2002fd7c 	.word	0x2002fd7c
 8024938:	f240 126d 	movw	r2, #365	; 0x16d
 802493c:	e7f1      	b.n	8024922 <mktime+0x30a>
 802493e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024942:	e7ee      	b.n	8024922 <mktime+0x30a>
 8024944:	f04f 34ff 	mov.w	r4, #4294967295
 8024948:	46a0      	mov	r8, r4
 802494a:	e7c4      	b.n	80248d6 <mktime+0x2be>

0802494c <_free_r>:
 802494c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802494e:	2900      	cmp	r1, #0
 8024950:	d044      	beq.n	80249dc <_free_r+0x90>
 8024952:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024956:	9001      	str	r0, [sp, #4]
 8024958:	2b00      	cmp	r3, #0
 802495a:	f1a1 0404 	sub.w	r4, r1, #4
 802495e:	bfb8      	it	lt
 8024960:	18e4      	addlt	r4, r4, r3
 8024962:	f003 f9f1 	bl	8027d48 <__malloc_lock>
 8024966:	4a1e      	ldr	r2, [pc, #120]	; (80249e0 <_free_r+0x94>)
 8024968:	9801      	ldr	r0, [sp, #4]
 802496a:	6813      	ldr	r3, [r2, #0]
 802496c:	b933      	cbnz	r3, 802497c <_free_r+0x30>
 802496e:	6063      	str	r3, [r4, #4]
 8024970:	6014      	str	r4, [r2, #0]
 8024972:	b003      	add	sp, #12
 8024974:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024978:	f003 b9ec 	b.w	8027d54 <__malloc_unlock>
 802497c:	42a3      	cmp	r3, r4
 802497e:	d908      	bls.n	8024992 <_free_r+0x46>
 8024980:	6825      	ldr	r5, [r4, #0]
 8024982:	1961      	adds	r1, r4, r5
 8024984:	428b      	cmp	r3, r1
 8024986:	bf01      	itttt	eq
 8024988:	6819      	ldreq	r1, [r3, #0]
 802498a:	685b      	ldreq	r3, [r3, #4]
 802498c:	1949      	addeq	r1, r1, r5
 802498e:	6021      	streq	r1, [r4, #0]
 8024990:	e7ed      	b.n	802496e <_free_r+0x22>
 8024992:	461a      	mov	r2, r3
 8024994:	685b      	ldr	r3, [r3, #4]
 8024996:	b10b      	cbz	r3, 802499c <_free_r+0x50>
 8024998:	42a3      	cmp	r3, r4
 802499a:	d9fa      	bls.n	8024992 <_free_r+0x46>
 802499c:	6811      	ldr	r1, [r2, #0]
 802499e:	1855      	adds	r5, r2, r1
 80249a0:	42a5      	cmp	r5, r4
 80249a2:	d10b      	bne.n	80249bc <_free_r+0x70>
 80249a4:	6824      	ldr	r4, [r4, #0]
 80249a6:	4421      	add	r1, r4
 80249a8:	1854      	adds	r4, r2, r1
 80249aa:	42a3      	cmp	r3, r4
 80249ac:	6011      	str	r1, [r2, #0]
 80249ae:	d1e0      	bne.n	8024972 <_free_r+0x26>
 80249b0:	681c      	ldr	r4, [r3, #0]
 80249b2:	685b      	ldr	r3, [r3, #4]
 80249b4:	6053      	str	r3, [r2, #4]
 80249b6:	4421      	add	r1, r4
 80249b8:	6011      	str	r1, [r2, #0]
 80249ba:	e7da      	b.n	8024972 <_free_r+0x26>
 80249bc:	d902      	bls.n	80249c4 <_free_r+0x78>
 80249be:	230c      	movs	r3, #12
 80249c0:	6003      	str	r3, [r0, #0]
 80249c2:	e7d6      	b.n	8024972 <_free_r+0x26>
 80249c4:	6825      	ldr	r5, [r4, #0]
 80249c6:	1961      	adds	r1, r4, r5
 80249c8:	428b      	cmp	r3, r1
 80249ca:	bf04      	itt	eq
 80249cc:	6819      	ldreq	r1, [r3, #0]
 80249ce:	685b      	ldreq	r3, [r3, #4]
 80249d0:	6063      	str	r3, [r4, #4]
 80249d2:	bf04      	itt	eq
 80249d4:	1949      	addeq	r1, r1, r5
 80249d6:	6021      	streq	r1, [r4, #0]
 80249d8:	6054      	str	r4, [r2, #4]
 80249da:	e7ca      	b.n	8024972 <_free_r+0x26>
 80249dc:	b003      	add	sp, #12
 80249de:	bd30      	pop	{r4, r5, pc}
 80249e0:	2002fd54 	.word	0x2002fd54

080249e4 <sbrk_aligned>:
 80249e4:	b570      	push	{r4, r5, r6, lr}
 80249e6:	4e0e      	ldr	r6, [pc, #56]	; (8024a20 <sbrk_aligned+0x3c>)
 80249e8:	460c      	mov	r4, r1
 80249ea:	6831      	ldr	r1, [r6, #0]
 80249ec:	4605      	mov	r5, r0
 80249ee:	b911      	cbnz	r1, 80249f6 <sbrk_aligned+0x12>
 80249f0:	f000 fe76 	bl	80256e0 <_sbrk_r>
 80249f4:	6030      	str	r0, [r6, #0]
 80249f6:	4621      	mov	r1, r4
 80249f8:	4628      	mov	r0, r5
 80249fa:	f000 fe71 	bl	80256e0 <_sbrk_r>
 80249fe:	1c43      	adds	r3, r0, #1
 8024a00:	d00a      	beq.n	8024a18 <sbrk_aligned+0x34>
 8024a02:	1cc4      	adds	r4, r0, #3
 8024a04:	f024 0403 	bic.w	r4, r4, #3
 8024a08:	42a0      	cmp	r0, r4
 8024a0a:	d007      	beq.n	8024a1c <sbrk_aligned+0x38>
 8024a0c:	1a21      	subs	r1, r4, r0
 8024a0e:	4628      	mov	r0, r5
 8024a10:	f000 fe66 	bl	80256e0 <_sbrk_r>
 8024a14:	3001      	adds	r0, #1
 8024a16:	d101      	bne.n	8024a1c <sbrk_aligned+0x38>
 8024a18:	f04f 34ff 	mov.w	r4, #4294967295
 8024a1c:	4620      	mov	r0, r4
 8024a1e:	bd70      	pop	{r4, r5, r6, pc}
 8024a20:	2002fd58 	.word	0x2002fd58

08024a24 <_malloc_r>:
 8024a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a28:	1ccd      	adds	r5, r1, #3
 8024a2a:	f025 0503 	bic.w	r5, r5, #3
 8024a2e:	3508      	adds	r5, #8
 8024a30:	2d0c      	cmp	r5, #12
 8024a32:	bf38      	it	cc
 8024a34:	250c      	movcc	r5, #12
 8024a36:	2d00      	cmp	r5, #0
 8024a38:	4607      	mov	r7, r0
 8024a3a:	db01      	blt.n	8024a40 <_malloc_r+0x1c>
 8024a3c:	42a9      	cmp	r1, r5
 8024a3e:	d905      	bls.n	8024a4c <_malloc_r+0x28>
 8024a40:	230c      	movs	r3, #12
 8024a42:	603b      	str	r3, [r7, #0]
 8024a44:	2600      	movs	r6, #0
 8024a46:	4630      	mov	r0, r6
 8024a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a4c:	4e2e      	ldr	r6, [pc, #184]	; (8024b08 <_malloc_r+0xe4>)
 8024a4e:	f003 f97b 	bl	8027d48 <__malloc_lock>
 8024a52:	6833      	ldr	r3, [r6, #0]
 8024a54:	461c      	mov	r4, r3
 8024a56:	bb34      	cbnz	r4, 8024aa6 <_malloc_r+0x82>
 8024a58:	4629      	mov	r1, r5
 8024a5a:	4638      	mov	r0, r7
 8024a5c:	f7ff ffc2 	bl	80249e4 <sbrk_aligned>
 8024a60:	1c43      	adds	r3, r0, #1
 8024a62:	4604      	mov	r4, r0
 8024a64:	d14d      	bne.n	8024b02 <_malloc_r+0xde>
 8024a66:	6834      	ldr	r4, [r6, #0]
 8024a68:	4626      	mov	r6, r4
 8024a6a:	2e00      	cmp	r6, #0
 8024a6c:	d140      	bne.n	8024af0 <_malloc_r+0xcc>
 8024a6e:	6823      	ldr	r3, [r4, #0]
 8024a70:	4631      	mov	r1, r6
 8024a72:	4638      	mov	r0, r7
 8024a74:	eb04 0803 	add.w	r8, r4, r3
 8024a78:	f000 fe32 	bl	80256e0 <_sbrk_r>
 8024a7c:	4580      	cmp	r8, r0
 8024a7e:	d13a      	bne.n	8024af6 <_malloc_r+0xd2>
 8024a80:	6821      	ldr	r1, [r4, #0]
 8024a82:	3503      	adds	r5, #3
 8024a84:	1a6d      	subs	r5, r5, r1
 8024a86:	f025 0503 	bic.w	r5, r5, #3
 8024a8a:	3508      	adds	r5, #8
 8024a8c:	2d0c      	cmp	r5, #12
 8024a8e:	bf38      	it	cc
 8024a90:	250c      	movcc	r5, #12
 8024a92:	4629      	mov	r1, r5
 8024a94:	4638      	mov	r0, r7
 8024a96:	f7ff ffa5 	bl	80249e4 <sbrk_aligned>
 8024a9a:	3001      	adds	r0, #1
 8024a9c:	d02b      	beq.n	8024af6 <_malloc_r+0xd2>
 8024a9e:	6823      	ldr	r3, [r4, #0]
 8024aa0:	442b      	add	r3, r5
 8024aa2:	6023      	str	r3, [r4, #0]
 8024aa4:	e00e      	b.n	8024ac4 <_malloc_r+0xa0>
 8024aa6:	6822      	ldr	r2, [r4, #0]
 8024aa8:	1b52      	subs	r2, r2, r5
 8024aaa:	d41e      	bmi.n	8024aea <_malloc_r+0xc6>
 8024aac:	2a0b      	cmp	r2, #11
 8024aae:	d916      	bls.n	8024ade <_malloc_r+0xba>
 8024ab0:	1961      	adds	r1, r4, r5
 8024ab2:	42a3      	cmp	r3, r4
 8024ab4:	6025      	str	r5, [r4, #0]
 8024ab6:	bf18      	it	ne
 8024ab8:	6059      	strne	r1, [r3, #4]
 8024aba:	6863      	ldr	r3, [r4, #4]
 8024abc:	bf08      	it	eq
 8024abe:	6031      	streq	r1, [r6, #0]
 8024ac0:	5162      	str	r2, [r4, r5]
 8024ac2:	604b      	str	r3, [r1, #4]
 8024ac4:	4638      	mov	r0, r7
 8024ac6:	f104 060b 	add.w	r6, r4, #11
 8024aca:	f003 f943 	bl	8027d54 <__malloc_unlock>
 8024ace:	f026 0607 	bic.w	r6, r6, #7
 8024ad2:	1d23      	adds	r3, r4, #4
 8024ad4:	1af2      	subs	r2, r6, r3
 8024ad6:	d0b6      	beq.n	8024a46 <_malloc_r+0x22>
 8024ad8:	1b9b      	subs	r3, r3, r6
 8024ada:	50a3      	str	r3, [r4, r2]
 8024adc:	e7b3      	b.n	8024a46 <_malloc_r+0x22>
 8024ade:	6862      	ldr	r2, [r4, #4]
 8024ae0:	42a3      	cmp	r3, r4
 8024ae2:	bf0c      	ite	eq
 8024ae4:	6032      	streq	r2, [r6, #0]
 8024ae6:	605a      	strne	r2, [r3, #4]
 8024ae8:	e7ec      	b.n	8024ac4 <_malloc_r+0xa0>
 8024aea:	4623      	mov	r3, r4
 8024aec:	6864      	ldr	r4, [r4, #4]
 8024aee:	e7b2      	b.n	8024a56 <_malloc_r+0x32>
 8024af0:	4634      	mov	r4, r6
 8024af2:	6876      	ldr	r6, [r6, #4]
 8024af4:	e7b9      	b.n	8024a6a <_malloc_r+0x46>
 8024af6:	230c      	movs	r3, #12
 8024af8:	603b      	str	r3, [r7, #0]
 8024afa:	4638      	mov	r0, r7
 8024afc:	f003 f92a 	bl	8027d54 <__malloc_unlock>
 8024b00:	e7a1      	b.n	8024a46 <_malloc_r+0x22>
 8024b02:	6025      	str	r5, [r4, #0]
 8024b04:	e7de      	b.n	8024ac4 <_malloc_r+0xa0>
 8024b06:	bf00      	nop
 8024b08:	2002fd54 	.word	0x2002fd54

08024b0c <__cvt>:
 8024b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024b0e:	ed2d 8b02 	vpush	{d8}
 8024b12:	eeb0 8b40 	vmov.f64	d8, d0
 8024b16:	b085      	sub	sp, #20
 8024b18:	4617      	mov	r7, r2
 8024b1a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024b1c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8024b1e:	ee18 2a90 	vmov	r2, s17
 8024b22:	f025 0520 	bic.w	r5, r5, #32
 8024b26:	2a00      	cmp	r2, #0
 8024b28:	bfb6      	itet	lt
 8024b2a:	222d      	movlt	r2, #45	; 0x2d
 8024b2c:	2200      	movge	r2, #0
 8024b2e:	eeb1 8b40 	vneglt.f64	d8, d0
 8024b32:	2d46      	cmp	r5, #70	; 0x46
 8024b34:	460c      	mov	r4, r1
 8024b36:	701a      	strb	r2, [r3, #0]
 8024b38:	d004      	beq.n	8024b44 <__cvt+0x38>
 8024b3a:	2d45      	cmp	r5, #69	; 0x45
 8024b3c:	d100      	bne.n	8024b40 <__cvt+0x34>
 8024b3e:	3401      	adds	r4, #1
 8024b40:	2102      	movs	r1, #2
 8024b42:	e000      	b.n	8024b46 <__cvt+0x3a>
 8024b44:	2103      	movs	r1, #3
 8024b46:	ab03      	add	r3, sp, #12
 8024b48:	9301      	str	r3, [sp, #4]
 8024b4a:	ab02      	add	r3, sp, #8
 8024b4c:	9300      	str	r3, [sp, #0]
 8024b4e:	4622      	mov	r2, r4
 8024b50:	4633      	mov	r3, r6
 8024b52:	eeb0 0b48 	vmov.f64	d0, d8
 8024b56:	f002 f93b 	bl	8026dd0 <_dtoa_r>
 8024b5a:	2d47      	cmp	r5, #71	; 0x47
 8024b5c:	d101      	bne.n	8024b62 <__cvt+0x56>
 8024b5e:	07fb      	lsls	r3, r7, #31
 8024b60:	d51a      	bpl.n	8024b98 <__cvt+0x8c>
 8024b62:	2d46      	cmp	r5, #70	; 0x46
 8024b64:	eb00 0204 	add.w	r2, r0, r4
 8024b68:	d10c      	bne.n	8024b84 <__cvt+0x78>
 8024b6a:	7803      	ldrb	r3, [r0, #0]
 8024b6c:	2b30      	cmp	r3, #48	; 0x30
 8024b6e:	d107      	bne.n	8024b80 <__cvt+0x74>
 8024b70:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b78:	bf1c      	itt	ne
 8024b7a:	f1c4 0401 	rsbne	r4, r4, #1
 8024b7e:	6034      	strne	r4, [r6, #0]
 8024b80:	6833      	ldr	r3, [r6, #0]
 8024b82:	441a      	add	r2, r3
 8024b84:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b8c:	bf08      	it	eq
 8024b8e:	9203      	streq	r2, [sp, #12]
 8024b90:	2130      	movs	r1, #48	; 0x30
 8024b92:	9b03      	ldr	r3, [sp, #12]
 8024b94:	4293      	cmp	r3, r2
 8024b96:	d307      	bcc.n	8024ba8 <__cvt+0x9c>
 8024b98:	9b03      	ldr	r3, [sp, #12]
 8024b9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024b9c:	1a1b      	subs	r3, r3, r0
 8024b9e:	6013      	str	r3, [r2, #0]
 8024ba0:	b005      	add	sp, #20
 8024ba2:	ecbd 8b02 	vpop	{d8}
 8024ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ba8:	1c5c      	adds	r4, r3, #1
 8024baa:	9403      	str	r4, [sp, #12]
 8024bac:	7019      	strb	r1, [r3, #0]
 8024bae:	e7f0      	b.n	8024b92 <__cvt+0x86>

08024bb0 <__exponent>:
 8024bb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024bb2:	4603      	mov	r3, r0
 8024bb4:	2900      	cmp	r1, #0
 8024bb6:	bfb8      	it	lt
 8024bb8:	4249      	neglt	r1, r1
 8024bba:	f803 2b02 	strb.w	r2, [r3], #2
 8024bbe:	bfb4      	ite	lt
 8024bc0:	222d      	movlt	r2, #45	; 0x2d
 8024bc2:	222b      	movge	r2, #43	; 0x2b
 8024bc4:	2909      	cmp	r1, #9
 8024bc6:	7042      	strb	r2, [r0, #1]
 8024bc8:	dd2a      	ble.n	8024c20 <__exponent+0x70>
 8024bca:	f10d 0407 	add.w	r4, sp, #7
 8024bce:	46a4      	mov	ip, r4
 8024bd0:	270a      	movs	r7, #10
 8024bd2:	46a6      	mov	lr, r4
 8024bd4:	460a      	mov	r2, r1
 8024bd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8024bda:	fb07 1516 	mls	r5, r7, r6, r1
 8024bde:	3530      	adds	r5, #48	; 0x30
 8024be0:	2a63      	cmp	r2, #99	; 0x63
 8024be2:	f104 34ff 	add.w	r4, r4, #4294967295
 8024be6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024bea:	4631      	mov	r1, r6
 8024bec:	dcf1      	bgt.n	8024bd2 <__exponent+0x22>
 8024bee:	3130      	adds	r1, #48	; 0x30
 8024bf0:	f1ae 0502 	sub.w	r5, lr, #2
 8024bf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024bf8:	1c44      	adds	r4, r0, #1
 8024bfa:	4629      	mov	r1, r5
 8024bfc:	4561      	cmp	r1, ip
 8024bfe:	d30a      	bcc.n	8024c16 <__exponent+0x66>
 8024c00:	f10d 0209 	add.w	r2, sp, #9
 8024c04:	eba2 020e 	sub.w	r2, r2, lr
 8024c08:	4565      	cmp	r5, ip
 8024c0a:	bf88      	it	hi
 8024c0c:	2200      	movhi	r2, #0
 8024c0e:	4413      	add	r3, r2
 8024c10:	1a18      	subs	r0, r3, r0
 8024c12:	b003      	add	sp, #12
 8024c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024c1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8024c1e:	e7ed      	b.n	8024bfc <__exponent+0x4c>
 8024c20:	2330      	movs	r3, #48	; 0x30
 8024c22:	3130      	adds	r1, #48	; 0x30
 8024c24:	7083      	strb	r3, [r0, #2]
 8024c26:	70c1      	strb	r1, [r0, #3]
 8024c28:	1d03      	adds	r3, r0, #4
 8024c2a:	e7f1      	b.n	8024c10 <__exponent+0x60>
 8024c2c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08024c30 <_printf_float>:
 8024c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c34:	b08b      	sub	sp, #44	; 0x2c
 8024c36:	460c      	mov	r4, r1
 8024c38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8024c3c:	4616      	mov	r6, r2
 8024c3e:	461f      	mov	r7, r3
 8024c40:	4605      	mov	r5, r0
 8024c42:	f003 f805 	bl	8027c50 <_localeconv_r>
 8024c46:	f8d0 b000 	ldr.w	fp, [r0]
 8024c4a:	4658      	mov	r0, fp
 8024c4c:	f7db fb02 	bl	8000254 <strlen>
 8024c50:	2300      	movs	r3, #0
 8024c52:	9308      	str	r3, [sp, #32]
 8024c54:	f8d8 3000 	ldr.w	r3, [r8]
 8024c58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8024c5c:	6822      	ldr	r2, [r4, #0]
 8024c5e:	3307      	adds	r3, #7
 8024c60:	f023 0307 	bic.w	r3, r3, #7
 8024c64:	f103 0108 	add.w	r1, r3, #8
 8024c68:	f8c8 1000 	str.w	r1, [r8]
 8024c6c:	4682      	mov	sl, r0
 8024c6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024c72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8024c76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024ed8 <_printf_float+0x2a8>
 8024c7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8024c7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8024c82:	eeb4 6b47 	vcmp.f64	d6, d7
 8024c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c8a:	dd24      	ble.n	8024cd6 <_printf_float+0xa6>
 8024c8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c94:	d502      	bpl.n	8024c9c <_printf_float+0x6c>
 8024c96:	232d      	movs	r3, #45	; 0x2d
 8024c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024c9c:	4b90      	ldr	r3, [pc, #576]	; (8024ee0 <_printf_float+0x2b0>)
 8024c9e:	4891      	ldr	r0, [pc, #580]	; (8024ee4 <_printf_float+0x2b4>)
 8024ca0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8024ca4:	bf94      	ite	ls
 8024ca6:	4698      	movls	r8, r3
 8024ca8:	4680      	movhi	r8, r0
 8024caa:	2303      	movs	r3, #3
 8024cac:	6123      	str	r3, [r4, #16]
 8024cae:	f022 0204 	bic.w	r2, r2, #4
 8024cb2:	2300      	movs	r3, #0
 8024cb4:	6022      	str	r2, [r4, #0]
 8024cb6:	9304      	str	r3, [sp, #16]
 8024cb8:	9700      	str	r7, [sp, #0]
 8024cba:	4633      	mov	r3, r6
 8024cbc:	aa09      	add	r2, sp, #36	; 0x24
 8024cbe:	4621      	mov	r1, r4
 8024cc0:	4628      	mov	r0, r5
 8024cc2:	f000 f9d3 	bl	802506c <_printf_common>
 8024cc6:	3001      	adds	r0, #1
 8024cc8:	f040 808a 	bne.w	8024de0 <_printf_float+0x1b0>
 8024ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8024cd0:	b00b      	add	sp, #44	; 0x2c
 8024cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024cd6:	eeb4 0b40 	vcmp.f64	d0, d0
 8024cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024cde:	d709      	bvc.n	8024cf4 <_printf_float+0xc4>
 8024ce0:	ee10 3a90 	vmov	r3, s1
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	bfbc      	itt	lt
 8024ce8:	232d      	movlt	r3, #45	; 0x2d
 8024cea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024cee:	487e      	ldr	r0, [pc, #504]	; (8024ee8 <_printf_float+0x2b8>)
 8024cf0:	4b7e      	ldr	r3, [pc, #504]	; (8024eec <_printf_float+0x2bc>)
 8024cf2:	e7d5      	b.n	8024ca0 <_printf_float+0x70>
 8024cf4:	6863      	ldr	r3, [r4, #4]
 8024cf6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8024cfa:	9104      	str	r1, [sp, #16]
 8024cfc:	1c59      	adds	r1, r3, #1
 8024cfe:	d13c      	bne.n	8024d7a <_printf_float+0x14a>
 8024d00:	2306      	movs	r3, #6
 8024d02:	6063      	str	r3, [r4, #4]
 8024d04:	2300      	movs	r3, #0
 8024d06:	9303      	str	r3, [sp, #12]
 8024d08:	ab08      	add	r3, sp, #32
 8024d0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024d0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8024d12:	ab07      	add	r3, sp, #28
 8024d14:	6861      	ldr	r1, [r4, #4]
 8024d16:	9300      	str	r3, [sp, #0]
 8024d18:	6022      	str	r2, [r4, #0]
 8024d1a:	f10d 031b 	add.w	r3, sp, #27
 8024d1e:	4628      	mov	r0, r5
 8024d20:	f7ff fef4 	bl	8024b0c <__cvt>
 8024d24:	9b04      	ldr	r3, [sp, #16]
 8024d26:	9907      	ldr	r1, [sp, #28]
 8024d28:	2b47      	cmp	r3, #71	; 0x47
 8024d2a:	4680      	mov	r8, r0
 8024d2c:	d108      	bne.n	8024d40 <_printf_float+0x110>
 8024d2e:	1cc8      	adds	r0, r1, #3
 8024d30:	db02      	blt.n	8024d38 <_printf_float+0x108>
 8024d32:	6863      	ldr	r3, [r4, #4]
 8024d34:	4299      	cmp	r1, r3
 8024d36:	dd41      	ble.n	8024dbc <_printf_float+0x18c>
 8024d38:	f1a9 0902 	sub.w	r9, r9, #2
 8024d3c:	fa5f f989 	uxtb.w	r9, r9
 8024d40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024d44:	d820      	bhi.n	8024d88 <_printf_float+0x158>
 8024d46:	3901      	subs	r1, #1
 8024d48:	464a      	mov	r2, r9
 8024d4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8024d4e:	9107      	str	r1, [sp, #28]
 8024d50:	f7ff ff2e 	bl	8024bb0 <__exponent>
 8024d54:	9a08      	ldr	r2, [sp, #32]
 8024d56:	9004      	str	r0, [sp, #16]
 8024d58:	1813      	adds	r3, r2, r0
 8024d5a:	2a01      	cmp	r2, #1
 8024d5c:	6123      	str	r3, [r4, #16]
 8024d5e:	dc02      	bgt.n	8024d66 <_printf_float+0x136>
 8024d60:	6822      	ldr	r2, [r4, #0]
 8024d62:	07d2      	lsls	r2, r2, #31
 8024d64:	d501      	bpl.n	8024d6a <_printf_float+0x13a>
 8024d66:	3301      	adds	r3, #1
 8024d68:	6123      	str	r3, [r4, #16]
 8024d6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8024d6e:	2b00      	cmp	r3, #0
 8024d70:	d0a2      	beq.n	8024cb8 <_printf_float+0x88>
 8024d72:	232d      	movs	r3, #45	; 0x2d
 8024d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024d78:	e79e      	b.n	8024cb8 <_printf_float+0x88>
 8024d7a:	9904      	ldr	r1, [sp, #16]
 8024d7c:	2947      	cmp	r1, #71	; 0x47
 8024d7e:	d1c1      	bne.n	8024d04 <_printf_float+0xd4>
 8024d80:	2b00      	cmp	r3, #0
 8024d82:	d1bf      	bne.n	8024d04 <_printf_float+0xd4>
 8024d84:	2301      	movs	r3, #1
 8024d86:	e7bc      	b.n	8024d02 <_printf_float+0xd2>
 8024d88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8024d8c:	d118      	bne.n	8024dc0 <_printf_float+0x190>
 8024d8e:	2900      	cmp	r1, #0
 8024d90:	6863      	ldr	r3, [r4, #4]
 8024d92:	dd0b      	ble.n	8024dac <_printf_float+0x17c>
 8024d94:	6121      	str	r1, [r4, #16]
 8024d96:	b913      	cbnz	r3, 8024d9e <_printf_float+0x16e>
 8024d98:	6822      	ldr	r2, [r4, #0]
 8024d9a:	07d0      	lsls	r0, r2, #31
 8024d9c:	d502      	bpl.n	8024da4 <_printf_float+0x174>
 8024d9e:	3301      	adds	r3, #1
 8024da0:	440b      	add	r3, r1
 8024da2:	6123      	str	r3, [r4, #16]
 8024da4:	2300      	movs	r3, #0
 8024da6:	65a1      	str	r1, [r4, #88]	; 0x58
 8024da8:	9304      	str	r3, [sp, #16]
 8024daa:	e7de      	b.n	8024d6a <_printf_float+0x13a>
 8024dac:	b913      	cbnz	r3, 8024db4 <_printf_float+0x184>
 8024dae:	6822      	ldr	r2, [r4, #0]
 8024db0:	07d2      	lsls	r2, r2, #31
 8024db2:	d501      	bpl.n	8024db8 <_printf_float+0x188>
 8024db4:	3302      	adds	r3, #2
 8024db6:	e7f4      	b.n	8024da2 <_printf_float+0x172>
 8024db8:	2301      	movs	r3, #1
 8024dba:	e7f2      	b.n	8024da2 <_printf_float+0x172>
 8024dbc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8024dc0:	9b08      	ldr	r3, [sp, #32]
 8024dc2:	4299      	cmp	r1, r3
 8024dc4:	db05      	blt.n	8024dd2 <_printf_float+0x1a2>
 8024dc6:	6823      	ldr	r3, [r4, #0]
 8024dc8:	6121      	str	r1, [r4, #16]
 8024dca:	07d8      	lsls	r0, r3, #31
 8024dcc:	d5ea      	bpl.n	8024da4 <_printf_float+0x174>
 8024dce:	1c4b      	adds	r3, r1, #1
 8024dd0:	e7e7      	b.n	8024da2 <_printf_float+0x172>
 8024dd2:	2900      	cmp	r1, #0
 8024dd4:	bfd4      	ite	le
 8024dd6:	f1c1 0202 	rsble	r2, r1, #2
 8024dda:	2201      	movgt	r2, #1
 8024ddc:	4413      	add	r3, r2
 8024dde:	e7e0      	b.n	8024da2 <_printf_float+0x172>
 8024de0:	6823      	ldr	r3, [r4, #0]
 8024de2:	055a      	lsls	r2, r3, #21
 8024de4:	d407      	bmi.n	8024df6 <_printf_float+0x1c6>
 8024de6:	6923      	ldr	r3, [r4, #16]
 8024de8:	4642      	mov	r2, r8
 8024dea:	4631      	mov	r1, r6
 8024dec:	4628      	mov	r0, r5
 8024dee:	47b8      	blx	r7
 8024df0:	3001      	adds	r0, #1
 8024df2:	d12a      	bne.n	8024e4a <_printf_float+0x21a>
 8024df4:	e76a      	b.n	8024ccc <_printf_float+0x9c>
 8024df6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024dfa:	f240 80e2 	bls.w	8024fc2 <_printf_float+0x392>
 8024dfe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024e02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e0a:	d133      	bne.n	8024e74 <_printf_float+0x244>
 8024e0c:	4a38      	ldr	r2, [pc, #224]	; (8024ef0 <_printf_float+0x2c0>)
 8024e0e:	2301      	movs	r3, #1
 8024e10:	4631      	mov	r1, r6
 8024e12:	4628      	mov	r0, r5
 8024e14:	47b8      	blx	r7
 8024e16:	3001      	adds	r0, #1
 8024e18:	f43f af58 	beq.w	8024ccc <_printf_float+0x9c>
 8024e1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024e20:	429a      	cmp	r2, r3
 8024e22:	db02      	blt.n	8024e2a <_printf_float+0x1fa>
 8024e24:	6823      	ldr	r3, [r4, #0]
 8024e26:	07d8      	lsls	r0, r3, #31
 8024e28:	d50f      	bpl.n	8024e4a <_printf_float+0x21a>
 8024e2a:	4653      	mov	r3, sl
 8024e2c:	465a      	mov	r2, fp
 8024e2e:	4631      	mov	r1, r6
 8024e30:	4628      	mov	r0, r5
 8024e32:	47b8      	blx	r7
 8024e34:	3001      	adds	r0, #1
 8024e36:	f43f af49 	beq.w	8024ccc <_printf_float+0x9c>
 8024e3a:	f04f 0800 	mov.w	r8, #0
 8024e3e:	f104 091a 	add.w	r9, r4, #26
 8024e42:	9b08      	ldr	r3, [sp, #32]
 8024e44:	3b01      	subs	r3, #1
 8024e46:	4543      	cmp	r3, r8
 8024e48:	dc09      	bgt.n	8024e5e <_printf_float+0x22e>
 8024e4a:	6823      	ldr	r3, [r4, #0]
 8024e4c:	079b      	lsls	r3, r3, #30
 8024e4e:	f100 8108 	bmi.w	8025062 <_printf_float+0x432>
 8024e52:	68e0      	ldr	r0, [r4, #12]
 8024e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e56:	4298      	cmp	r0, r3
 8024e58:	bfb8      	it	lt
 8024e5a:	4618      	movlt	r0, r3
 8024e5c:	e738      	b.n	8024cd0 <_printf_float+0xa0>
 8024e5e:	2301      	movs	r3, #1
 8024e60:	464a      	mov	r2, r9
 8024e62:	4631      	mov	r1, r6
 8024e64:	4628      	mov	r0, r5
 8024e66:	47b8      	blx	r7
 8024e68:	3001      	adds	r0, #1
 8024e6a:	f43f af2f 	beq.w	8024ccc <_printf_float+0x9c>
 8024e6e:	f108 0801 	add.w	r8, r8, #1
 8024e72:	e7e6      	b.n	8024e42 <_printf_float+0x212>
 8024e74:	9b07      	ldr	r3, [sp, #28]
 8024e76:	2b00      	cmp	r3, #0
 8024e78:	dc3c      	bgt.n	8024ef4 <_printf_float+0x2c4>
 8024e7a:	4a1d      	ldr	r2, [pc, #116]	; (8024ef0 <_printf_float+0x2c0>)
 8024e7c:	2301      	movs	r3, #1
 8024e7e:	4631      	mov	r1, r6
 8024e80:	4628      	mov	r0, r5
 8024e82:	47b8      	blx	r7
 8024e84:	3001      	adds	r0, #1
 8024e86:	f43f af21 	beq.w	8024ccc <_printf_float+0x9c>
 8024e8a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024e8e:	4313      	orrs	r3, r2
 8024e90:	d102      	bne.n	8024e98 <_printf_float+0x268>
 8024e92:	6823      	ldr	r3, [r4, #0]
 8024e94:	07d9      	lsls	r1, r3, #31
 8024e96:	d5d8      	bpl.n	8024e4a <_printf_float+0x21a>
 8024e98:	4653      	mov	r3, sl
 8024e9a:	465a      	mov	r2, fp
 8024e9c:	4631      	mov	r1, r6
 8024e9e:	4628      	mov	r0, r5
 8024ea0:	47b8      	blx	r7
 8024ea2:	3001      	adds	r0, #1
 8024ea4:	f43f af12 	beq.w	8024ccc <_printf_float+0x9c>
 8024ea8:	f04f 0900 	mov.w	r9, #0
 8024eac:	f104 0a1a 	add.w	sl, r4, #26
 8024eb0:	9b07      	ldr	r3, [sp, #28]
 8024eb2:	425b      	negs	r3, r3
 8024eb4:	454b      	cmp	r3, r9
 8024eb6:	dc01      	bgt.n	8024ebc <_printf_float+0x28c>
 8024eb8:	9b08      	ldr	r3, [sp, #32]
 8024eba:	e795      	b.n	8024de8 <_printf_float+0x1b8>
 8024ebc:	2301      	movs	r3, #1
 8024ebe:	4652      	mov	r2, sl
 8024ec0:	4631      	mov	r1, r6
 8024ec2:	4628      	mov	r0, r5
 8024ec4:	47b8      	blx	r7
 8024ec6:	3001      	adds	r0, #1
 8024ec8:	f43f af00 	beq.w	8024ccc <_printf_float+0x9c>
 8024ecc:	f109 0901 	add.w	r9, r9, #1
 8024ed0:	e7ee      	b.n	8024eb0 <_printf_float+0x280>
 8024ed2:	bf00      	nop
 8024ed4:	f3af 8000 	nop.w
 8024ed8:	ffffffff 	.word	0xffffffff
 8024edc:	7fefffff 	.word	0x7fefffff
 8024ee0:	08045e4c 	.word	0x08045e4c
 8024ee4:	08045e50 	.word	0x08045e50
 8024ee8:	08045e58 	.word	0x08045e58
 8024eec:	08045e54 	.word	0x08045e54
 8024ef0:	08046471 	.word	0x08046471
 8024ef4:	9a08      	ldr	r2, [sp, #32]
 8024ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024ef8:	429a      	cmp	r2, r3
 8024efa:	bfa8      	it	ge
 8024efc:	461a      	movge	r2, r3
 8024efe:	2a00      	cmp	r2, #0
 8024f00:	4691      	mov	r9, r2
 8024f02:	dc38      	bgt.n	8024f76 <_printf_float+0x346>
 8024f04:	2300      	movs	r3, #0
 8024f06:	9305      	str	r3, [sp, #20]
 8024f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f0c:	f104 021a 	add.w	r2, r4, #26
 8024f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024f12:	9905      	ldr	r1, [sp, #20]
 8024f14:	9304      	str	r3, [sp, #16]
 8024f16:	eba3 0309 	sub.w	r3, r3, r9
 8024f1a:	428b      	cmp	r3, r1
 8024f1c:	dc33      	bgt.n	8024f86 <_printf_float+0x356>
 8024f1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024f22:	429a      	cmp	r2, r3
 8024f24:	db3c      	blt.n	8024fa0 <_printf_float+0x370>
 8024f26:	6823      	ldr	r3, [r4, #0]
 8024f28:	07da      	lsls	r2, r3, #31
 8024f2a:	d439      	bmi.n	8024fa0 <_printf_float+0x370>
 8024f2c:	9b08      	ldr	r3, [sp, #32]
 8024f2e:	9a04      	ldr	r2, [sp, #16]
 8024f30:	9907      	ldr	r1, [sp, #28]
 8024f32:	1a9a      	subs	r2, r3, r2
 8024f34:	eba3 0901 	sub.w	r9, r3, r1
 8024f38:	4591      	cmp	r9, r2
 8024f3a:	bfa8      	it	ge
 8024f3c:	4691      	movge	r9, r2
 8024f3e:	f1b9 0f00 	cmp.w	r9, #0
 8024f42:	dc35      	bgt.n	8024fb0 <_printf_float+0x380>
 8024f44:	f04f 0800 	mov.w	r8, #0
 8024f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024f4c:	f104 0a1a 	add.w	sl, r4, #26
 8024f50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024f54:	1a9b      	subs	r3, r3, r2
 8024f56:	eba3 0309 	sub.w	r3, r3, r9
 8024f5a:	4543      	cmp	r3, r8
 8024f5c:	f77f af75 	ble.w	8024e4a <_printf_float+0x21a>
 8024f60:	2301      	movs	r3, #1
 8024f62:	4652      	mov	r2, sl
 8024f64:	4631      	mov	r1, r6
 8024f66:	4628      	mov	r0, r5
 8024f68:	47b8      	blx	r7
 8024f6a:	3001      	adds	r0, #1
 8024f6c:	f43f aeae 	beq.w	8024ccc <_printf_float+0x9c>
 8024f70:	f108 0801 	add.w	r8, r8, #1
 8024f74:	e7ec      	b.n	8024f50 <_printf_float+0x320>
 8024f76:	4613      	mov	r3, r2
 8024f78:	4631      	mov	r1, r6
 8024f7a:	4642      	mov	r2, r8
 8024f7c:	4628      	mov	r0, r5
 8024f7e:	47b8      	blx	r7
 8024f80:	3001      	adds	r0, #1
 8024f82:	d1bf      	bne.n	8024f04 <_printf_float+0x2d4>
 8024f84:	e6a2      	b.n	8024ccc <_printf_float+0x9c>
 8024f86:	2301      	movs	r3, #1
 8024f88:	4631      	mov	r1, r6
 8024f8a:	4628      	mov	r0, r5
 8024f8c:	9204      	str	r2, [sp, #16]
 8024f8e:	47b8      	blx	r7
 8024f90:	3001      	adds	r0, #1
 8024f92:	f43f ae9b 	beq.w	8024ccc <_printf_float+0x9c>
 8024f96:	9b05      	ldr	r3, [sp, #20]
 8024f98:	9a04      	ldr	r2, [sp, #16]
 8024f9a:	3301      	adds	r3, #1
 8024f9c:	9305      	str	r3, [sp, #20]
 8024f9e:	e7b7      	b.n	8024f10 <_printf_float+0x2e0>
 8024fa0:	4653      	mov	r3, sl
 8024fa2:	465a      	mov	r2, fp
 8024fa4:	4631      	mov	r1, r6
 8024fa6:	4628      	mov	r0, r5
 8024fa8:	47b8      	blx	r7
 8024faa:	3001      	adds	r0, #1
 8024fac:	d1be      	bne.n	8024f2c <_printf_float+0x2fc>
 8024fae:	e68d      	b.n	8024ccc <_printf_float+0x9c>
 8024fb0:	9a04      	ldr	r2, [sp, #16]
 8024fb2:	464b      	mov	r3, r9
 8024fb4:	4442      	add	r2, r8
 8024fb6:	4631      	mov	r1, r6
 8024fb8:	4628      	mov	r0, r5
 8024fba:	47b8      	blx	r7
 8024fbc:	3001      	adds	r0, #1
 8024fbe:	d1c1      	bne.n	8024f44 <_printf_float+0x314>
 8024fc0:	e684      	b.n	8024ccc <_printf_float+0x9c>
 8024fc2:	9a08      	ldr	r2, [sp, #32]
 8024fc4:	2a01      	cmp	r2, #1
 8024fc6:	dc01      	bgt.n	8024fcc <_printf_float+0x39c>
 8024fc8:	07db      	lsls	r3, r3, #31
 8024fca:	d537      	bpl.n	802503c <_printf_float+0x40c>
 8024fcc:	2301      	movs	r3, #1
 8024fce:	4642      	mov	r2, r8
 8024fd0:	4631      	mov	r1, r6
 8024fd2:	4628      	mov	r0, r5
 8024fd4:	47b8      	blx	r7
 8024fd6:	3001      	adds	r0, #1
 8024fd8:	f43f ae78 	beq.w	8024ccc <_printf_float+0x9c>
 8024fdc:	4653      	mov	r3, sl
 8024fde:	465a      	mov	r2, fp
 8024fe0:	4631      	mov	r1, r6
 8024fe2:	4628      	mov	r0, r5
 8024fe4:	47b8      	blx	r7
 8024fe6:	3001      	adds	r0, #1
 8024fe8:	f43f ae70 	beq.w	8024ccc <_printf_float+0x9c>
 8024fec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024ff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ff8:	d01b      	beq.n	8025032 <_printf_float+0x402>
 8024ffa:	9b08      	ldr	r3, [sp, #32]
 8024ffc:	f108 0201 	add.w	r2, r8, #1
 8025000:	3b01      	subs	r3, #1
 8025002:	4631      	mov	r1, r6
 8025004:	4628      	mov	r0, r5
 8025006:	47b8      	blx	r7
 8025008:	3001      	adds	r0, #1
 802500a:	d10e      	bne.n	802502a <_printf_float+0x3fa>
 802500c:	e65e      	b.n	8024ccc <_printf_float+0x9c>
 802500e:	2301      	movs	r3, #1
 8025010:	464a      	mov	r2, r9
 8025012:	4631      	mov	r1, r6
 8025014:	4628      	mov	r0, r5
 8025016:	47b8      	blx	r7
 8025018:	3001      	adds	r0, #1
 802501a:	f43f ae57 	beq.w	8024ccc <_printf_float+0x9c>
 802501e:	f108 0801 	add.w	r8, r8, #1
 8025022:	9b08      	ldr	r3, [sp, #32]
 8025024:	3b01      	subs	r3, #1
 8025026:	4543      	cmp	r3, r8
 8025028:	dcf1      	bgt.n	802500e <_printf_float+0x3de>
 802502a:	9b04      	ldr	r3, [sp, #16]
 802502c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8025030:	e6db      	b.n	8024dea <_printf_float+0x1ba>
 8025032:	f04f 0800 	mov.w	r8, #0
 8025036:	f104 091a 	add.w	r9, r4, #26
 802503a:	e7f2      	b.n	8025022 <_printf_float+0x3f2>
 802503c:	2301      	movs	r3, #1
 802503e:	4642      	mov	r2, r8
 8025040:	e7df      	b.n	8025002 <_printf_float+0x3d2>
 8025042:	2301      	movs	r3, #1
 8025044:	464a      	mov	r2, r9
 8025046:	4631      	mov	r1, r6
 8025048:	4628      	mov	r0, r5
 802504a:	47b8      	blx	r7
 802504c:	3001      	adds	r0, #1
 802504e:	f43f ae3d 	beq.w	8024ccc <_printf_float+0x9c>
 8025052:	f108 0801 	add.w	r8, r8, #1
 8025056:	68e3      	ldr	r3, [r4, #12]
 8025058:	9909      	ldr	r1, [sp, #36]	; 0x24
 802505a:	1a5b      	subs	r3, r3, r1
 802505c:	4543      	cmp	r3, r8
 802505e:	dcf0      	bgt.n	8025042 <_printf_float+0x412>
 8025060:	e6f7      	b.n	8024e52 <_printf_float+0x222>
 8025062:	f04f 0800 	mov.w	r8, #0
 8025066:	f104 0919 	add.w	r9, r4, #25
 802506a:	e7f4      	b.n	8025056 <_printf_float+0x426>

0802506c <_printf_common>:
 802506c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025070:	4616      	mov	r6, r2
 8025072:	4699      	mov	r9, r3
 8025074:	688a      	ldr	r2, [r1, #8]
 8025076:	690b      	ldr	r3, [r1, #16]
 8025078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802507c:	4293      	cmp	r3, r2
 802507e:	bfb8      	it	lt
 8025080:	4613      	movlt	r3, r2
 8025082:	6033      	str	r3, [r6, #0]
 8025084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8025088:	4607      	mov	r7, r0
 802508a:	460c      	mov	r4, r1
 802508c:	b10a      	cbz	r2, 8025092 <_printf_common+0x26>
 802508e:	3301      	adds	r3, #1
 8025090:	6033      	str	r3, [r6, #0]
 8025092:	6823      	ldr	r3, [r4, #0]
 8025094:	0699      	lsls	r1, r3, #26
 8025096:	bf42      	ittt	mi
 8025098:	6833      	ldrmi	r3, [r6, #0]
 802509a:	3302      	addmi	r3, #2
 802509c:	6033      	strmi	r3, [r6, #0]
 802509e:	6825      	ldr	r5, [r4, #0]
 80250a0:	f015 0506 	ands.w	r5, r5, #6
 80250a4:	d106      	bne.n	80250b4 <_printf_common+0x48>
 80250a6:	f104 0a19 	add.w	sl, r4, #25
 80250aa:	68e3      	ldr	r3, [r4, #12]
 80250ac:	6832      	ldr	r2, [r6, #0]
 80250ae:	1a9b      	subs	r3, r3, r2
 80250b0:	42ab      	cmp	r3, r5
 80250b2:	dc26      	bgt.n	8025102 <_printf_common+0x96>
 80250b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80250b8:	1e13      	subs	r3, r2, #0
 80250ba:	6822      	ldr	r2, [r4, #0]
 80250bc:	bf18      	it	ne
 80250be:	2301      	movne	r3, #1
 80250c0:	0692      	lsls	r2, r2, #26
 80250c2:	d42b      	bmi.n	802511c <_printf_common+0xb0>
 80250c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80250c8:	4649      	mov	r1, r9
 80250ca:	4638      	mov	r0, r7
 80250cc:	47c0      	blx	r8
 80250ce:	3001      	adds	r0, #1
 80250d0:	d01e      	beq.n	8025110 <_printf_common+0xa4>
 80250d2:	6823      	ldr	r3, [r4, #0]
 80250d4:	68e5      	ldr	r5, [r4, #12]
 80250d6:	6832      	ldr	r2, [r6, #0]
 80250d8:	f003 0306 	and.w	r3, r3, #6
 80250dc:	2b04      	cmp	r3, #4
 80250de:	bf08      	it	eq
 80250e0:	1aad      	subeq	r5, r5, r2
 80250e2:	68a3      	ldr	r3, [r4, #8]
 80250e4:	6922      	ldr	r2, [r4, #16]
 80250e6:	bf0c      	ite	eq
 80250e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80250ec:	2500      	movne	r5, #0
 80250ee:	4293      	cmp	r3, r2
 80250f0:	bfc4      	itt	gt
 80250f2:	1a9b      	subgt	r3, r3, r2
 80250f4:	18ed      	addgt	r5, r5, r3
 80250f6:	2600      	movs	r6, #0
 80250f8:	341a      	adds	r4, #26
 80250fa:	42b5      	cmp	r5, r6
 80250fc:	d11a      	bne.n	8025134 <_printf_common+0xc8>
 80250fe:	2000      	movs	r0, #0
 8025100:	e008      	b.n	8025114 <_printf_common+0xa8>
 8025102:	2301      	movs	r3, #1
 8025104:	4652      	mov	r2, sl
 8025106:	4649      	mov	r1, r9
 8025108:	4638      	mov	r0, r7
 802510a:	47c0      	blx	r8
 802510c:	3001      	adds	r0, #1
 802510e:	d103      	bne.n	8025118 <_printf_common+0xac>
 8025110:	f04f 30ff 	mov.w	r0, #4294967295
 8025114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025118:	3501      	adds	r5, #1
 802511a:	e7c6      	b.n	80250aa <_printf_common+0x3e>
 802511c:	18e1      	adds	r1, r4, r3
 802511e:	1c5a      	adds	r2, r3, #1
 8025120:	2030      	movs	r0, #48	; 0x30
 8025122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025126:	4422      	add	r2, r4
 8025128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802512c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8025130:	3302      	adds	r3, #2
 8025132:	e7c7      	b.n	80250c4 <_printf_common+0x58>
 8025134:	2301      	movs	r3, #1
 8025136:	4622      	mov	r2, r4
 8025138:	4649      	mov	r1, r9
 802513a:	4638      	mov	r0, r7
 802513c:	47c0      	blx	r8
 802513e:	3001      	adds	r0, #1
 8025140:	d0e6      	beq.n	8025110 <_printf_common+0xa4>
 8025142:	3601      	adds	r6, #1
 8025144:	e7d9      	b.n	80250fa <_printf_common+0x8e>
 8025146:	Address 0x0000000008025146 is out of bounds.


08025148 <_printf_i>:
 8025148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802514c:	7e0f      	ldrb	r7, [r1, #24]
 802514e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8025150:	2f78      	cmp	r7, #120	; 0x78
 8025152:	4691      	mov	r9, r2
 8025154:	4680      	mov	r8, r0
 8025156:	460c      	mov	r4, r1
 8025158:	469a      	mov	sl, r3
 802515a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802515e:	d807      	bhi.n	8025170 <_printf_i+0x28>
 8025160:	2f62      	cmp	r7, #98	; 0x62
 8025162:	d80a      	bhi.n	802517a <_printf_i+0x32>
 8025164:	2f00      	cmp	r7, #0
 8025166:	f000 80d8 	beq.w	802531a <_printf_i+0x1d2>
 802516a:	2f58      	cmp	r7, #88	; 0x58
 802516c:	f000 80a3 	beq.w	80252b6 <_printf_i+0x16e>
 8025170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8025178:	e03a      	b.n	80251f0 <_printf_i+0xa8>
 802517a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802517e:	2b15      	cmp	r3, #21
 8025180:	d8f6      	bhi.n	8025170 <_printf_i+0x28>
 8025182:	a101      	add	r1, pc, #4	; (adr r1, 8025188 <_printf_i+0x40>)
 8025184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025188:	080251e1 	.word	0x080251e1
 802518c:	080251f5 	.word	0x080251f5
 8025190:	08025171 	.word	0x08025171
 8025194:	08025171 	.word	0x08025171
 8025198:	08025171 	.word	0x08025171
 802519c:	08025171 	.word	0x08025171
 80251a0:	080251f5 	.word	0x080251f5
 80251a4:	08025171 	.word	0x08025171
 80251a8:	08025171 	.word	0x08025171
 80251ac:	08025171 	.word	0x08025171
 80251b0:	08025171 	.word	0x08025171
 80251b4:	08025301 	.word	0x08025301
 80251b8:	08025225 	.word	0x08025225
 80251bc:	080252e3 	.word	0x080252e3
 80251c0:	08025171 	.word	0x08025171
 80251c4:	08025171 	.word	0x08025171
 80251c8:	08025323 	.word	0x08025323
 80251cc:	08025171 	.word	0x08025171
 80251d0:	08025225 	.word	0x08025225
 80251d4:	08025171 	.word	0x08025171
 80251d8:	08025171 	.word	0x08025171
 80251dc:	080252eb 	.word	0x080252eb
 80251e0:	682b      	ldr	r3, [r5, #0]
 80251e2:	1d1a      	adds	r2, r3, #4
 80251e4:	681b      	ldr	r3, [r3, #0]
 80251e6:	602a      	str	r2, [r5, #0]
 80251e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80251ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80251f0:	2301      	movs	r3, #1
 80251f2:	e0a3      	b.n	802533c <_printf_i+0x1f4>
 80251f4:	6820      	ldr	r0, [r4, #0]
 80251f6:	6829      	ldr	r1, [r5, #0]
 80251f8:	0606      	lsls	r6, r0, #24
 80251fa:	f101 0304 	add.w	r3, r1, #4
 80251fe:	d50a      	bpl.n	8025216 <_printf_i+0xce>
 8025200:	680e      	ldr	r6, [r1, #0]
 8025202:	602b      	str	r3, [r5, #0]
 8025204:	2e00      	cmp	r6, #0
 8025206:	da03      	bge.n	8025210 <_printf_i+0xc8>
 8025208:	232d      	movs	r3, #45	; 0x2d
 802520a:	4276      	negs	r6, r6
 802520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025210:	485e      	ldr	r0, [pc, #376]	; (802538c <_printf_i+0x244>)
 8025212:	230a      	movs	r3, #10
 8025214:	e019      	b.n	802524a <_printf_i+0x102>
 8025216:	680e      	ldr	r6, [r1, #0]
 8025218:	602b      	str	r3, [r5, #0]
 802521a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802521e:	bf18      	it	ne
 8025220:	b236      	sxthne	r6, r6
 8025222:	e7ef      	b.n	8025204 <_printf_i+0xbc>
 8025224:	682b      	ldr	r3, [r5, #0]
 8025226:	6820      	ldr	r0, [r4, #0]
 8025228:	1d19      	adds	r1, r3, #4
 802522a:	6029      	str	r1, [r5, #0]
 802522c:	0601      	lsls	r1, r0, #24
 802522e:	d501      	bpl.n	8025234 <_printf_i+0xec>
 8025230:	681e      	ldr	r6, [r3, #0]
 8025232:	e002      	b.n	802523a <_printf_i+0xf2>
 8025234:	0646      	lsls	r6, r0, #25
 8025236:	d5fb      	bpl.n	8025230 <_printf_i+0xe8>
 8025238:	881e      	ldrh	r6, [r3, #0]
 802523a:	4854      	ldr	r0, [pc, #336]	; (802538c <_printf_i+0x244>)
 802523c:	2f6f      	cmp	r7, #111	; 0x6f
 802523e:	bf0c      	ite	eq
 8025240:	2308      	moveq	r3, #8
 8025242:	230a      	movne	r3, #10
 8025244:	2100      	movs	r1, #0
 8025246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802524a:	6865      	ldr	r5, [r4, #4]
 802524c:	60a5      	str	r5, [r4, #8]
 802524e:	2d00      	cmp	r5, #0
 8025250:	bfa2      	ittt	ge
 8025252:	6821      	ldrge	r1, [r4, #0]
 8025254:	f021 0104 	bicge.w	r1, r1, #4
 8025258:	6021      	strge	r1, [r4, #0]
 802525a:	b90e      	cbnz	r6, 8025260 <_printf_i+0x118>
 802525c:	2d00      	cmp	r5, #0
 802525e:	d04d      	beq.n	80252fc <_printf_i+0x1b4>
 8025260:	4615      	mov	r5, r2
 8025262:	fbb6 f1f3 	udiv	r1, r6, r3
 8025266:	fb03 6711 	mls	r7, r3, r1, r6
 802526a:	5dc7      	ldrb	r7, [r0, r7]
 802526c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025270:	4637      	mov	r7, r6
 8025272:	42bb      	cmp	r3, r7
 8025274:	460e      	mov	r6, r1
 8025276:	d9f4      	bls.n	8025262 <_printf_i+0x11a>
 8025278:	2b08      	cmp	r3, #8
 802527a:	d10b      	bne.n	8025294 <_printf_i+0x14c>
 802527c:	6823      	ldr	r3, [r4, #0]
 802527e:	07de      	lsls	r6, r3, #31
 8025280:	d508      	bpl.n	8025294 <_printf_i+0x14c>
 8025282:	6923      	ldr	r3, [r4, #16]
 8025284:	6861      	ldr	r1, [r4, #4]
 8025286:	4299      	cmp	r1, r3
 8025288:	bfde      	ittt	le
 802528a:	2330      	movle	r3, #48	; 0x30
 802528c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025290:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025294:	1b52      	subs	r2, r2, r5
 8025296:	6122      	str	r2, [r4, #16]
 8025298:	f8cd a000 	str.w	sl, [sp]
 802529c:	464b      	mov	r3, r9
 802529e:	aa03      	add	r2, sp, #12
 80252a0:	4621      	mov	r1, r4
 80252a2:	4640      	mov	r0, r8
 80252a4:	f7ff fee2 	bl	802506c <_printf_common>
 80252a8:	3001      	adds	r0, #1
 80252aa:	d14c      	bne.n	8025346 <_printf_i+0x1fe>
 80252ac:	f04f 30ff 	mov.w	r0, #4294967295
 80252b0:	b004      	add	sp, #16
 80252b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80252b6:	4835      	ldr	r0, [pc, #212]	; (802538c <_printf_i+0x244>)
 80252b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80252bc:	6829      	ldr	r1, [r5, #0]
 80252be:	6823      	ldr	r3, [r4, #0]
 80252c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80252c4:	6029      	str	r1, [r5, #0]
 80252c6:	061d      	lsls	r5, r3, #24
 80252c8:	d514      	bpl.n	80252f4 <_printf_i+0x1ac>
 80252ca:	07df      	lsls	r7, r3, #31
 80252cc:	bf44      	itt	mi
 80252ce:	f043 0320 	orrmi.w	r3, r3, #32
 80252d2:	6023      	strmi	r3, [r4, #0]
 80252d4:	b91e      	cbnz	r6, 80252de <_printf_i+0x196>
 80252d6:	6823      	ldr	r3, [r4, #0]
 80252d8:	f023 0320 	bic.w	r3, r3, #32
 80252dc:	6023      	str	r3, [r4, #0]
 80252de:	2310      	movs	r3, #16
 80252e0:	e7b0      	b.n	8025244 <_printf_i+0xfc>
 80252e2:	6823      	ldr	r3, [r4, #0]
 80252e4:	f043 0320 	orr.w	r3, r3, #32
 80252e8:	6023      	str	r3, [r4, #0]
 80252ea:	2378      	movs	r3, #120	; 0x78
 80252ec:	4828      	ldr	r0, [pc, #160]	; (8025390 <_printf_i+0x248>)
 80252ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80252f2:	e7e3      	b.n	80252bc <_printf_i+0x174>
 80252f4:	0659      	lsls	r1, r3, #25
 80252f6:	bf48      	it	mi
 80252f8:	b2b6      	uxthmi	r6, r6
 80252fa:	e7e6      	b.n	80252ca <_printf_i+0x182>
 80252fc:	4615      	mov	r5, r2
 80252fe:	e7bb      	b.n	8025278 <_printf_i+0x130>
 8025300:	682b      	ldr	r3, [r5, #0]
 8025302:	6826      	ldr	r6, [r4, #0]
 8025304:	6961      	ldr	r1, [r4, #20]
 8025306:	1d18      	adds	r0, r3, #4
 8025308:	6028      	str	r0, [r5, #0]
 802530a:	0635      	lsls	r5, r6, #24
 802530c:	681b      	ldr	r3, [r3, #0]
 802530e:	d501      	bpl.n	8025314 <_printf_i+0x1cc>
 8025310:	6019      	str	r1, [r3, #0]
 8025312:	e002      	b.n	802531a <_printf_i+0x1d2>
 8025314:	0670      	lsls	r0, r6, #25
 8025316:	d5fb      	bpl.n	8025310 <_printf_i+0x1c8>
 8025318:	8019      	strh	r1, [r3, #0]
 802531a:	2300      	movs	r3, #0
 802531c:	6123      	str	r3, [r4, #16]
 802531e:	4615      	mov	r5, r2
 8025320:	e7ba      	b.n	8025298 <_printf_i+0x150>
 8025322:	682b      	ldr	r3, [r5, #0]
 8025324:	1d1a      	adds	r2, r3, #4
 8025326:	602a      	str	r2, [r5, #0]
 8025328:	681d      	ldr	r5, [r3, #0]
 802532a:	6862      	ldr	r2, [r4, #4]
 802532c:	2100      	movs	r1, #0
 802532e:	4628      	mov	r0, r5
 8025330:	f7da ff9e 	bl	8000270 <memchr>
 8025334:	b108      	cbz	r0, 802533a <_printf_i+0x1f2>
 8025336:	1b40      	subs	r0, r0, r5
 8025338:	6060      	str	r0, [r4, #4]
 802533a:	6863      	ldr	r3, [r4, #4]
 802533c:	6123      	str	r3, [r4, #16]
 802533e:	2300      	movs	r3, #0
 8025340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025344:	e7a8      	b.n	8025298 <_printf_i+0x150>
 8025346:	6923      	ldr	r3, [r4, #16]
 8025348:	462a      	mov	r2, r5
 802534a:	4649      	mov	r1, r9
 802534c:	4640      	mov	r0, r8
 802534e:	47d0      	blx	sl
 8025350:	3001      	adds	r0, #1
 8025352:	d0ab      	beq.n	80252ac <_printf_i+0x164>
 8025354:	6823      	ldr	r3, [r4, #0]
 8025356:	079b      	lsls	r3, r3, #30
 8025358:	d413      	bmi.n	8025382 <_printf_i+0x23a>
 802535a:	68e0      	ldr	r0, [r4, #12]
 802535c:	9b03      	ldr	r3, [sp, #12]
 802535e:	4298      	cmp	r0, r3
 8025360:	bfb8      	it	lt
 8025362:	4618      	movlt	r0, r3
 8025364:	e7a4      	b.n	80252b0 <_printf_i+0x168>
 8025366:	2301      	movs	r3, #1
 8025368:	4632      	mov	r2, r6
 802536a:	4649      	mov	r1, r9
 802536c:	4640      	mov	r0, r8
 802536e:	47d0      	blx	sl
 8025370:	3001      	adds	r0, #1
 8025372:	d09b      	beq.n	80252ac <_printf_i+0x164>
 8025374:	3501      	adds	r5, #1
 8025376:	68e3      	ldr	r3, [r4, #12]
 8025378:	9903      	ldr	r1, [sp, #12]
 802537a:	1a5b      	subs	r3, r3, r1
 802537c:	42ab      	cmp	r3, r5
 802537e:	dcf2      	bgt.n	8025366 <_printf_i+0x21e>
 8025380:	e7eb      	b.n	802535a <_printf_i+0x212>
 8025382:	2500      	movs	r5, #0
 8025384:	f104 0619 	add.w	r6, r4, #25
 8025388:	e7f5      	b.n	8025376 <_printf_i+0x22e>
 802538a:	bf00      	nop
 802538c:	08045e5c 	.word	0x08045e5c
 8025390:	08045e6d 	.word	0x08045e6d

08025394 <iprintf>:
 8025394:	b40f      	push	{r0, r1, r2, r3}
 8025396:	4b0a      	ldr	r3, [pc, #40]	; (80253c0 <iprintf+0x2c>)
 8025398:	b513      	push	{r0, r1, r4, lr}
 802539a:	681c      	ldr	r4, [r3, #0]
 802539c:	b124      	cbz	r4, 80253a8 <iprintf+0x14>
 802539e:	69a3      	ldr	r3, [r4, #24]
 80253a0:	b913      	cbnz	r3, 80253a8 <iprintf+0x14>
 80253a2:	4620      	mov	r0, r4
 80253a4:	f7fe fe36 	bl	8024014 <__sinit>
 80253a8:	ab05      	add	r3, sp, #20
 80253aa:	9a04      	ldr	r2, [sp, #16]
 80253ac:	68a1      	ldr	r1, [r4, #8]
 80253ae:	9301      	str	r3, [sp, #4]
 80253b0:	4620      	mov	r0, r4
 80253b2:	f003 fbc7 	bl	8028b44 <_vfiprintf_r>
 80253b6:	b002      	add	sp, #8
 80253b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253bc:	b004      	add	sp, #16
 80253be:	4770      	bx	lr
 80253c0:	20000490 	.word	0x20000490

080253c4 <putchar>:
 80253c4:	4b09      	ldr	r3, [pc, #36]	; (80253ec <putchar+0x28>)
 80253c6:	b513      	push	{r0, r1, r4, lr}
 80253c8:	681c      	ldr	r4, [r3, #0]
 80253ca:	4601      	mov	r1, r0
 80253cc:	b134      	cbz	r4, 80253dc <putchar+0x18>
 80253ce:	69a3      	ldr	r3, [r4, #24]
 80253d0:	b923      	cbnz	r3, 80253dc <putchar+0x18>
 80253d2:	9001      	str	r0, [sp, #4]
 80253d4:	4620      	mov	r0, r4
 80253d6:	f7fe fe1d 	bl	8024014 <__sinit>
 80253da:	9901      	ldr	r1, [sp, #4]
 80253dc:	68a2      	ldr	r2, [r4, #8]
 80253de:	4620      	mov	r0, r4
 80253e0:	b002      	add	sp, #8
 80253e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253e6:	f003 be2f 	b.w	8029048 <_putc_r>
 80253ea:	bf00      	nop
 80253ec:	20000490 	.word	0x20000490

080253f0 <_puts_r>:
 80253f0:	b570      	push	{r4, r5, r6, lr}
 80253f2:	460e      	mov	r6, r1
 80253f4:	4605      	mov	r5, r0
 80253f6:	b118      	cbz	r0, 8025400 <_puts_r+0x10>
 80253f8:	6983      	ldr	r3, [r0, #24]
 80253fa:	b90b      	cbnz	r3, 8025400 <_puts_r+0x10>
 80253fc:	f7fe fe0a 	bl	8024014 <__sinit>
 8025400:	69ab      	ldr	r3, [r5, #24]
 8025402:	68ac      	ldr	r4, [r5, #8]
 8025404:	b913      	cbnz	r3, 802540c <_puts_r+0x1c>
 8025406:	4628      	mov	r0, r5
 8025408:	f7fe fe04 	bl	8024014 <__sinit>
 802540c:	4b2c      	ldr	r3, [pc, #176]	; (80254c0 <_puts_r+0xd0>)
 802540e:	429c      	cmp	r4, r3
 8025410:	d120      	bne.n	8025454 <_puts_r+0x64>
 8025412:	686c      	ldr	r4, [r5, #4]
 8025414:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025416:	07db      	lsls	r3, r3, #31
 8025418:	d405      	bmi.n	8025426 <_puts_r+0x36>
 802541a:	89a3      	ldrh	r3, [r4, #12]
 802541c:	0598      	lsls	r0, r3, #22
 802541e:	d402      	bmi.n	8025426 <_puts_r+0x36>
 8025420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025422:	f7fe ffcd 	bl	80243c0 <__retarget_lock_acquire_recursive>
 8025426:	89a3      	ldrh	r3, [r4, #12]
 8025428:	0719      	lsls	r1, r3, #28
 802542a:	d51d      	bpl.n	8025468 <_puts_r+0x78>
 802542c:	6923      	ldr	r3, [r4, #16]
 802542e:	b1db      	cbz	r3, 8025468 <_puts_r+0x78>
 8025430:	3e01      	subs	r6, #1
 8025432:	68a3      	ldr	r3, [r4, #8]
 8025434:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025438:	3b01      	subs	r3, #1
 802543a:	60a3      	str	r3, [r4, #8]
 802543c:	bb39      	cbnz	r1, 802548e <_puts_r+0x9e>
 802543e:	2b00      	cmp	r3, #0
 8025440:	da38      	bge.n	80254b4 <_puts_r+0xc4>
 8025442:	4622      	mov	r2, r4
 8025444:	210a      	movs	r1, #10
 8025446:	4628      	mov	r0, r5
 8025448:	f001 fad4 	bl	80269f4 <__swbuf_r>
 802544c:	3001      	adds	r0, #1
 802544e:	d011      	beq.n	8025474 <_puts_r+0x84>
 8025450:	250a      	movs	r5, #10
 8025452:	e011      	b.n	8025478 <_puts_r+0x88>
 8025454:	4b1b      	ldr	r3, [pc, #108]	; (80254c4 <_puts_r+0xd4>)
 8025456:	429c      	cmp	r4, r3
 8025458:	d101      	bne.n	802545e <_puts_r+0x6e>
 802545a:	68ac      	ldr	r4, [r5, #8]
 802545c:	e7da      	b.n	8025414 <_puts_r+0x24>
 802545e:	4b1a      	ldr	r3, [pc, #104]	; (80254c8 <_puts_r+0xd8>)
 8025460:	429c      	cmp	r4, r3
 8025462:	bf08      	it	eq
 8025464:	68ec      	ldreq	r4, [r5, #12]
 8025466:	e7d5      	b.n	8025414 <_puts_r+0x24>
 8025468:	4621      	mov	r1, r4
 802546a:	4628      	mov	r0, r5
 802546c:	f001 fb26 	bl	8026abc <__swsetup_r>
 8025470:	2800      	cmp	r0, #0
 8025472:	d0dd      	beq.n	8025430 <_puts_r+0x40>
 8025474:	f04f 35ff 	mov.w	r5, #4294967295
 8025478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802547a:	07da      	lsls	r2, r3, #31
 802547c:	d405      	bmi.n	802548a <_puts_r+0x9a>
 802547e:	89a3      	ldrh	r3, [r4, #12]
 8025480:	059b      	lsls	r3, r3, #22
 8025482:	d402      	bmi.n	802548a <_puts_r+0x9a>
 8025484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025486:	f7fe ff9d 	bl	80243c4 <__retarget_lock_release_recursive>
 802548a:	4628      	mov	r0, r5
 802548c:	bd70      	pop	{r4, r5, r6, pc}
 802548e:	2b00      	cmp	r3, #0
 8025490:	da04      	bge.n	802549c <_puts_r+0xac>
 8025492:	69a2      	ldr	r2, [r4, #24]
 8025494:	429a      	cmp	r2, r3
 8025496:	dc06      	bgt.n	80254a6 <_puts_r+0xb6>
 8025498:	290a      	cmp	r1, #10
 802549a:	d004      	beq.n	80254a6 <_puts_r+0xb6>
 802549c:	6823      	ldr	r3, [r4, #0]
 802549e:	1c5a      	adds	r2, r3, #1
 80254a0:	6022      	str	r2, [r4, #0]
 80254a2:	7019      	strb	r1, [r3, #0]
 80254a4:	e7c5      	b.n	8025432 <_puts_r+0x42>
 80254a6:	4622      	mov	r2, r4
 80254a8:	4628      	mov	r0, r5
 80254aa:	f001 faa3 	bl	80269f4 <__swbuf_r>
 80254ae:	3001      	adds	r0, #1
 80254b0:	d1bf      	bne.n	8025432 <_puts_r+0x42>
 80254b2:	e7df      	b.n	8025474 <_puts_r+0x84>
 80254b4:	6823      	ldr	r3, [r4, #0]
 80254b6:	250a      	movs	r5, #10
 80254b8:	1c5a      	adds	r2, r3, #1
 80254ba:	6022      	str	r2, [r4, #0]
 80254bc:	701d      	strb	r5, [r3, #0]
 80254be:	e7db      	b.n	8025478 <_puts_r+0x88>
 80254c0:	08045cd4 	.word	0x08045cd4
 80254c4:	08045cf4 	.word	0x08045cf4
 80254c8:	08045cb4 	.word	0x08045cb4

080254cc <puts>:
 80254cc:	4b02      	ldr	r3, [pc, #8]	; (80254d8 <puts+0xc>)
 80254ce:	4601      	mov	r1, r0
 80254d0:	6818      	ldr	r0, [r3, #0]
 80254d2:	f7ff bf8d 	b.w	80253f0 <_puts_r>
 80254d6:	bf00      	nop
 80254d8:	20000490 	.word	0x20000490

080254dc <rand>:
 80254dc:	4b16      	ldr	r3, [pc, #88]	; (8025538 <rand+0x5c>)
 80254de:	b510      	push	{r4, lr}
 80254e0:	681c      	ldr	r4, [r3, #0]
 80254e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80254e4:	b9b3      	cbnz	r3, 8025514 <rand+0x38>
 80254e6:	2018      	movs	r0, #24
 80254e8:	f7fe ff6e 	bl	80243c8 <malloc>
 80254ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80254ee:	b928      	cbnz	r0, 80254fc <rand+0x20>
 80254f0:	4602      	mov	r2, r0
 80254f2:	4b12      	ldr	r3, [pc, #72]	; (802553c <rand+0x60>)
 80254f4:	4812      	ldr	r0, [pc, #72]	; (8025540 <rand+0x64>)
 80254f6:	214e      	movs	r1, #78	; 0x4e
 80254f8:	f001 fb9a 	bl	8026c30 <__assert_func>
 80254fc:	4a11      	ldr	r2, [pc, #68]	; (8025544 <rand+0x68>)
 80254fe:	4b12      	ldr	r3, [pc, #72]	; (8025548 <rand+0x6c>)
 8025500:	e9c0 2300 	strd	r2, r3, [r0]
 8025504:	4b11      	ldr	r3, [pc, #68]	; (802554c <rand+0x70>)
 8025506:	6083      	str	r3, [r0, #8]
 8025508:	230b      	movs	r3, #11
 802550a:	8183      	strh	r3, [r0, #12]
 802550c:	2201      	movs	r2, #1
 802550e:	2300      	movs	r3, #0
 8025510:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025514:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025516:	4a0e      	ldr	r2, [pc, #56]	; (8025550 <rand+0x74>)
 8025518:	6920      	ldr	r0, [r4, #16]
 802551a:	6963      	ldr	r3, [r4, #20]
 802551c:	490d      	ldr	r1, [pc, #52]	; (8025554 <rand+0x78>)
 802551e:	4342      	muls	r2, r0
 8025520:	fb01 2203 	mla	r2, r1, r3, r2
 8025524:	fba0 0101 	umull	r0, r1, r0, r1
 8025528:	1c43      	adds	r3, r0, #1
 802552a:	eb42 0001 	adc.w	r0, r2, r1
 802552e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8025532:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025536:	bd10      	pop	{r4, pc}
 8025538:	20000490 	.word	0x20000490
 802553c:	08045d18 	.word	0x08045d18
 8025540:	08045e7e 	.word	0x08045e7e
 8025544:	abcd330e 	.word	0xabcd330e
 8025548:	e66d1234 	.word	0xe66d1234
 802554c:	0005deec 	.word	0x0005deec
 8025550:	5851f42d 	.word	0x5851f42d
 8025554:	4c957f2d 	.word	0x4c957f2d

08025558 <cleanup_glue>:
 8025558:	b538      	push	{r3, r4, r5, lr}
 802555a:	460c      	mov	r4, r1
 802555c:	6809      	ldr	r1, [r1, #0]
 802555e:	4605      	mov	r5, r0
 8025560:	b109      	cbz	r1, 8025566 <cleanup_glue+0xe>
 8025562:	f7ff fff9 	bl	8025558 <cleanup_glue>
 8025566:	4621      	mov	r1, r4
 8025568:	4628      	mov	r0, r5
 802556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802556e:	f7ff b9ed 	b.w	802494c <_free_r>
 8025572:	Address 0x0000000008025572 is out of bounds.


08025574 <_reclaim_reent>:
 8025574:	4b2c      	ldr	r3, [pc, #176]	; (8025628 <_reclaim_reent+0xb4>)
 8025576:	681b      	ldr	r3, [r3, #0]
 8025578:	4283      	cmp	r3, r0
 802557a:	b570      	push	{r4, r5, r6, lr}
 802557c:	4604      	mov	r4, r0
 802557e:	d051      	beq.n	8025624 <_reclaim_reent+0xb0>
 8025580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025582:	b143      	cbz	r3, 8025596 <_reclaim_reent+0x22>
 8025584:	68db      	ldr	r3, [r3, #12]
 8025586:	2b00      	cmp	r3, #0
 8025588:	d14a      	bne.n	8025620 <_reclaim_reent+0xac>
 802558a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802558c:	6819      	ldr	r1, [r3, #0]
 802558e:	b111      	cbz	r1, 8025596 <_reclaim_reent+0x22>
 8025590:	4620      	mov	r0, r4
 8025592:	f7ff f9db 	bl	802494c <_free_r>
 8025596:	6961      	ldr	r1, [r4, #20]
 8025598:	b111      	cbz	r1, 80255a0 <_reclaim_reent+0x2c>
 802559a:	4620      	mov	r0, r4
 802559c:	f7ff f9d6 	bl	802494c <_free_r>
 80255a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80255a2:	b111      	cbz	r1, 80255aa <_reclaim_reent+0x36>
 80255a4:	4620      	mov	r0, r4
 80255a6:	f7ff f9d1 	bl	802494c <_free_r>
 80255aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80255ac:	b111      	cbz	r1, 80255b4 <_reclaim_reent+0x40>
 80255ae:	4620      	mov	r0, r4
 80255b0:	f7ff f9cc 	bl	802494c <_free_r>
 80255b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80255b6:	b111      	cbz	r1, 80255be <_reclaim_reent+0x4a>
 80255b8:	4620      	mov	r0, r4
 80255ba:	f7ff f9c7 	bl	802494c <_free_r>
 80255be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80255c0:	b111      	cbz	r1, 80255c8 <_reclaim_reent+0x54>
 80255c2:	4620      	mov	r0, r4
 80255c4:	f7ff f9c2 	bl	802494c <_free_r>
 80255c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80255ca:	b111      	cbz	r1, 80255d2 <_reclaim_reent+0x5e>
 80255cc:	4620      	mov	r0, r4
 80255ce:	f7ff f9bd 	bl	802494c <_free_r>
 80255d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80255d4:	b111      	cbz	r1, 80255dc <_reclaim_reent+0x68>
 80255d6:	4620      	mov	r0, r4
 80255d8:	f7ff f9b8 	bl	802494c <_free_r>
 80255dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80255de:	b111      	cbz	r1, 80255e6 <_reclaim_reent+0x72>
 80255e0:	4620      	mov	r0, r4
 80255e2:	f7ff f9b3 	bl	802494c <_free_r>
 80255e6:	69a3      	ldr	r3, [r4, #24]
 80255e8:	b1e3      	cbz	r3, 8025624 <_reclaim_reent+0xb0>
 80255ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80255ec:	4620      	mov	r0, r4
 80255ee:	4798      	blx	r3
 80255f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80255f2:	b1b9      	cbz	r1, 8025624 <_reclaim_reent+0xb0>
 80255f4:	4620      	mov	r0, r4
 80255f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80255fa:	f7ff bfad 	b.w	8025558 <cleanup_glue>
 80255fe:	5949      	ldr	r1, [r1, r5]
 8025600:	b941      	cbnz	r1, 8025614 <_reclaim_reent+0xa0>
 8025602:	3504      	adds	r5, #4
 8025604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025606:	2d80      	cmp	r5, #128	; 0x80
 8025608:	68d9      	ldr	r1, [r3, #12]
 802560a:	d1f8      	bne.n	80255fe <_reclaim_reent+0x8a>
 802560c:	4620      	mov	r0, r4
 802560e:	f7ff f99d 	bl	802494c <_free_r>
 8025612:	e7ba      	b.n	802558a <_reclaim_reent+0x16>
 8025614:	680e      	ldr	r6, [r1, #0]
 8025616:	4620      	mov	r0, r4
 8025618:	f7ff f998 	bl	802494c <_free_r>
 802561c:	4631      	mov	r1, r6
 802561e:	e7ef      	b.n	8025600 <_reclaim_reent+0x8c>
 8025620:	2500      	movs	r5, #0
 8025622:	e7ef      	b.n	8025604 <_reclaim_reent+0x90>
 8025624:	bd70      	pop	{r4, r5, r6, pc}
 8025626:	bf00      	nop
 8025628:	20000490 	.word	0x20000490

0802562c <modf>:
 802562c:	b570      	push	{r4, r5, r6, lr}
 802562e:	ed2d 8b02 	vpush	{d8}
 8025632:	eeb0 8b40 	vmov.f64	d8, d0
 8025636:	ee18 5a90 	vmov	r5, s17
 802563a:	4604      	mov	r4, r0
 802563c:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8025640:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8025644:	2b13      	cmp	r3, #19
 8025646:	ee10 1a10 	vmov	r1, s0
 802564a:	dc23      	bgt.n	8025694 <modf+0x68>
 802564c:	2b00      	cmp	r3, #0
 802564e:	da09      	bge.n	8025664 <modf+0x38>
 8025650:	2200      	movs	r2, #0
 8025652:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025656:	e9c4 2300 	strd	r2, r3, [r4]
 802565a:	eeb0 0b48 	vmov.f64	d0, d8
 802565e:	ecbd 8b02 	vpop	{d8}
 8025662:	bd70      	pop	{r4, r5, r6, pc}
 8025664:	481d      	ldr	r0, [pc, #116]	; (80256dc <modf+0xb0>)
 8025666:	4118      	asrs	r0, r3
 8025668:	ea05 0300 	and.w	r3, r5, r0
 802566c:	4319      	orrs	r1, r3
 802566e:	d107      	bne.n	8025680 <modf+0x54>
 8025670:	ed84 0b00 	vstr	d0, [r4]
 8025674:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025678:	460a      	mov	r2, r1
 802567a:	ec43 2b18 	vmov	d8, r2, r3
 802567e:	e7ec      	b.n	802565a <modf+0x2e>
 8025680:	2200      	movs	r2, #0
 8025682:	ea25 0300 	bic.w	r3, r5, r0
 8025686:	ec43 2b17 	vmov	d7, r2, r3
 802568a:	e9c4 2300 	strd	r2, r3, [r4]
 802568e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8025692:	e7e2      	b.n	802565a <modf+0x2e>
 8025694:	2b33      	cmp	r3, #51	; 0x33
 8025696:	dd0d      	ble.n	80256b4 <modf+0x88>
 8025698:	ed84 0b00 	vstr	d0, [r4]
 802569c:	f003 fd2e 	bl	80290fc <__fpclassifyd>
 80256a0:	b920      	cbnz	r0, 80256ac <modf+0x80>
 80256a2:	ee38 8b08 	vadd.f64	d8, d8, d8
 80256a6:	ed84 8b00 	vstr	d8, [r4]
 80256aa:	e7d6      	b.n	802565a <modf+0x2e>
 80256ac:	2200      	movs	r2, #0
 80256ae:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80256b2:	e7e2      	b.n	802567a <modf+0x4e>
 80256b4:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 80256b8:	f04f 30ff 	mov.w	r0, #4294967295
 80256bc:	40d8      	lsrs	r0, r3
 80256be:	ea11 0600 	ands.w	r6, r1, r0
 80256c2:	d105      	bne.n	80256d0 <modf+0xa4>
 80256c4:	ed84 0b00 	vstr	d0, [r4]
 80256c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80256cc:	4632      	mov	r2, r6
 80256ce:	e7d4      	b.n	802567a <modf+0x4e>
 80256d0:	ee18 3a90 	vmov	r3, s17
 80256d4:	ea21 0200 	bic.w	r2, r1, r0
 80256d8:	e7d5      	b.n	8025686 <modf+0x5a>
 80256da:	bf00      	nop
 80256dc:	000fffff 	.word	0x000fffff

080256e0 <_sbrk_r>:
 80256e0:	b538      	push	{r3, r4, r5, lr}
 80256e2:	4d06      	ldr	r5, [pc, #24]	; (80256fc <_sbrk_r+0x1c>)
 80256e4:	2300      	movs	r3, #0
 80256e6:	4604      	mov	r4, r0
 80256e8:	4608      	mov	r0, r1
 80256ea:	602b      	str	r3, [r5, #0]
 80256ec:	f7e1 fe4a 	bl	8007384 <_sbrk>
 80256f0:	1c43      	adds	r3, r0, #1
 80256f2:	d102      	bne.n	80256fa <_sbrk_r+0x1a>
 80256f4:	682b      	ldr	r3, [r5, #0]
 80256f6:	b103      	cbz	r3, 80256fa <_sbrk_r+0x1a>
 80256f8:	6023      	str	r3, [r4, #0]
 80256fa:	bd38      	pop	{r3, r4, r5, pc}
 80256fc:	2002fd5c 	.word	0x2002fd5c

08025700 <sniprintf>:
 8025700:	b40c      	push	{r2, r3}
 8025702:	b530      	push	{r4, r5, lr}
 8025704:	4b17      	ldr	r3, [pc, #92]	; (8025764 <sniprintf+0x64>)
 8025706:	1e0c      	subs	r4, r1, #0
 8025708:	681d      	ldr	r5, [r3, #0]
 802570a:	b09d      	sub	sp, #116	; 0x74
 802570c:	da08      	bge.n	8025720 <sniprintf+0x20>
 802570e:	238b      	movs	r3, #139	; 0x8b
 8025710:	602b      	str	r3, [r5, #0]
 8025712:	f04f 30ff 	mov.w	r0, #4294967295
 8025716:	b01d      	add	sp, #116	; 0x74
 8025718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802571c:	b002      	add	sp, #8
 802571e:	4770      	bx	lr
 8025720:	f44f 7302 	mov.w	r3, #520	; 0x208
 8025724:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025728:	bf14      	ite	ne
 802572a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802572e:	4623      	moveq	r3, r4
 8025730:	9304      	str	r3, [sp, #16]
 8025732:	9307      	str	r3, [sp, #28]
 8025734:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8025738:	9002      	str	r0, [sp, #8]
 802573a:	9006      	str	r0, [sp, #24]
 802573c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025740:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025742:	ab21      	add	r3, sp, #132	; 0x84
 8025744:	a902      	add	r1, sp, #8
 8025746:	4628      	mov	r0, r5
 8025748:	9301      	str	r3, [sp, #4]
 802574a:	f002 feff 	bl	802854c <_svfiprintf_r>
 802574e:	1c43      	adds	r3, r0, #1
 8025750:	bfbc      	itt	lt
 8025752:	238b      	movlt	r3, #139	; 0x8b
 8025754:	602b      	strlt	r3, [r5, #0]
 8025756:	2c00      	cmp	r4, #0
 8025758:	d0dd      	beq.n	8025716 <sniprintf+0x16>
 802575a:	9b02      	ldr	r3, [sp, #8]
 802575c:	2200      	movs	r2, #0
 802575e:	701a      	strb	r2, [r3, #0]
 8025760:	e7d9      	b.n	8025716 <sniprintf+0x16>
 8025762:	bf00      	nop
 8025764:	20000490 	.word	0x20000490

08025768 <siprintf>:
 8025768:	b40e      	push	{r1, r2, r3}
 802576a:	b500      	push	{lr}
 802576c:	b09c      	sub	sp, #112	; 0x70
 802576e:	ab1d      	add	r3, sp, #116	; 0x74
 8025770:	9002      	str	r0, [sp, #8]
 8025772:	9006      	str	r0, [sp, #24]
 8025774:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025778:	4809      	ldr	r0, [pc, #36]	; (80257a0 <siprintf+0x38>)
 802577a:	9107      	str	r1, [sp, #28]
 802577c:	9104      	str	r1, [sp, #16]
 802577e:	4909      	ldr	r1, [pc, #36]	; (80257a4 <siprintf+0x3c>)
 8025780:	f853 2b04 	ldr.w	r2, [r3], #4
 8025784:	9105      	str	r1, [sp, #20]
 8025786:	6800      	ldr	r0, [r0, #0]
 8025788:	9301      	str	r3, [sp, #4]
 802578a:	a902      	add	r1, sp, #8
 802578c:	f002 fede 	bl	802854c <_svfiprintf_r>
 8025790:	9b02      	ldr	r3, [sp, #8]
 8025792:	2200      	movs	r2, #0
 8025794:	701a      	strb	r2, [r3, #0]
 8025796:	b01c      	add	sp, #112	; 0x70
 8025798:	f85d eb04 	ldr.w	lr, [sp], #4
 802579c:	b003      	add	sp, #12
 802579e:	4770      	bx	lr
 80257a0:	20000490 	.word	0x20000490
 80257a4:	ffff0208 	.word	0xffff0208

080257a8 <siscanf>:
 80257a8:	b40e      	push	{r1, r2, r3}
 80257aa:	b510      	push	{r4, lr}
 80257ac:	b09f      	sub	sp, #124	; 0x7c
 80257ae:	ac21      	add	r4, sp, #132	; 0x84
 80257b0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80257b4:	f854 2b04 	ldr.w	r2, [r4], #4
 80257b8:	9201      	str	r2, [sp, #4]
 80257ba:	f8ad 101c 	strh.w	r1, [sp, #28]
 80257be:	9004      	str	r0, [sp, #16]
 80257c0:	9008      	str	r0, [sp, #32]
 80257c2:	f7da fd47 	bl	8000254 <strlen>
 80257c6:	4b0c      	ldr	r3, [pc, #48]	; (80257f8 <siscanf+0x50>)
 80257c8:	9005      	str	r0, [sp, #20]
 80257ca:	9009      	str	r0, [sp, #36]	; 0x24
 80257cc:	930d      	str	r3, [sp, #52]	; 0x34
 80257ce:	480b      	ldr	r0, [pc, #44]	; (80257fc <siscanf+0x54>)
 80257d0:	9a01      	ldr	r2, [sp, #4]
 80257d2:	6800      	ldr	r0, [r0, #0]
 80257d4:	9403      	str	r4, [sp, #12]
 80257d6:	2300      	movs	r3, #0
 80257d8:	9311      	str	r3, [sp, #68]	; 0x44
 80257da:	9316      	str	r3, [sp, #88]	; 0x58
 80257dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80257e0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80257e4:	a904      	add	r1, sp, #16
 80257e6:	4623      	mov	r3, r4
 80257e8:	f003 f80a 	bl	8028800 <__ssvfiscanf_r>
 80257ec:	b01f      	add	sp, #124	; 0x7c
 80257ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80257f2:	b003      	add	sp, #12
 80257f4:	4770      	bx	lr
 80257f6:	bf00      	nop
 80257f8:	08025823 	.word	0x08025823
 80257fc:	20000490 	.word	0x20000490

08025800 <__sread>:
 8025800:	b510      	push	{r4, lr}
 8025802:	460c      	mov	r4, r1
 8025804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025808:	f003 fc66 	bl	80290d8 <_read_r>
 802580c:	2800      	cmp	r0, #0
 802580e:	bfab      	itete	ge
 8025810:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8025812:	89a3      	ldrhlt	r3, [r4, #12]
 8025814:	181b      	addge	r3, r3, r0
 8025816:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802581a:	bfac      	ite	ge
 802581c:	6563      	strge	r3, [r4, #84]	; 0x54
 802581e:	81a3      	strhlt	r3, [r4, #12]
 8025820:	bd10      	pop	{r4, pc}

08025822 <__seofread>:
 8025822:	2000      	movs	r0, #0
 8025824:	4770      	bx	lr

08025826 <__swrite>:
 8025826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802582a:	461f      	mov	r7, r3
 802582c:	898b      	ldrh	r3, [r1, #12]
 802582e:	05db      	lsls	r3, r3, #23
 8025830:	4605      	mov	r5, r0
 8025832:	460c      	mov	r4, r1
 8025834:	4616      	mov	r6, r2
 8025836:	d505      	bpl.n	8025844 <__swrite+0x1e>
 8025838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802583c:	2302      	movs	r3, #2
 802583e:	2200      	movs	r2, #0
 8025840:	f002 fa0a 	bl	8027c58 <_lseek_r>
 8025844:	89a3      	ldrh	r3, [r4, #12]
 8025846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802584a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802584e:	81a3      	strh	r3, [r4, #12]
 8025850:	4632      	mov	r2, r6
 8025852:	463b      	mov	r3, r7
 8025854:	4628      	mov	r0, r5
 8025856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802585a:	f001 b91d 	b.w	8026a98 <_write_r>

0802585e <__sseek>:
 802585e:	b510      	push	{r4, lr}
 8025860:	460c      	mov	r4, r1
 8025862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025866:	f002 f9f7 	bl	8027c58 <_lseek_r>
 802586a:	1c43      	adds	r3, r0, #1
 802586c:	89a3      	ldrh	r3, [r4, #12]
 802586e:	bf15      	itete	ne
 8025870:	6560      	strne	r0, [r4, #84]	; 0x54
 8025872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802587a:	81a3      	strheq	r3, [r4, #12]
 802587c:	bf18      	it	ne
 802587e:	81a3      	strhne	r3, [r4, #12]
 8025880:	bd10      	pop	{r4, pc}

08025882 <__sclose>:
 8025882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025886:	f001 b9f1 	b.w	8026c6c <_close_r>

0802588a <stpcpy>:
 802588a:	4603      	mov	r3, r0
 802588c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025890:	4618      	mov	r0, r3
 8025892:	f803 2b01 	strb.w	r2, [r3], #1
 8025896:	2a00      	cmp	r2, #0
 8025898:	d1f8      	bne.n	802588c <stpcpy+0x2>
 802589a:	4770      	bx	lr

0802589c <strchr>:
 802589c:	b2c9      	uxtb	r1, r1
 802589e:	4603      	mov	r3, r0
 80258a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80258a4:	b11a      	cbz	r2, 80258ae <strchr+0x12>
 80258a6:	428a      	cmp	r2, r1
 80258a8:	d1f9      	bne.n	802589e <strchr+0x2>
 80258aa:	4618      	mov	r0, r3
 80258ac:	4770      	bx	lr
 80258ae:	2900      	cmp	r1, #0
 80258b0:	bf18      	it	ne
 80258b2:	2300      	movne	r3, #0
 80258b4:	e7f9      	b.n	80258aa <strchr+0xe>

080258b6 <strcpy>:
 80258b6:	4603      	mov	r3, r0
 80258b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80258bc:	f803 2b01 	strb.w	r2, [r3], #1
 80258c0:	2a00      	cmp	r2, #0
 80258c2:	d1f9      	bne.n	80258b8 <strcpy+0x2>
 80258c4:	4770      	bx	lr
 80258c6:	Address 0x00000000080258c6 is out of bounds.


080258c8 <iso_year_adjust>:
 80258c8:	6942      	ldr	r2, [r0, #20]
 80258ca:	2a00      	cmp	r2, #0
 80258cc:	f240 736c 	movw	r3, #1900	; 0x76c
 80258d0:	bfa8      	it	ge
 80258d2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80258d6:	4413      	add	r3, r2
 80258d8:	0792      	lsls	r2, r2, #30
 80258da:	d105      	bne.n	80258e8 <iso_year_adjust+0x20>
 80258dc:	2164      	movs	r1, #100	; 0x64
 80258de:	fb93 f2f1 	sdiv	r2, r3, r1
 80258e2:	fb01 3212 	mls	r2, r1, r2, r3
 80258e6:	b9da      	cbnz	r2, 8025920 <iso_year_adjust+0x58>
 80258e8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80258ec:	fb93 f1f2 	sdiv	r1, r3, r2
 80258f0:	fb02 3311 	mls	r3, r2, r1, r3
 80258f4:	fab3 f383 	clz	r3, r3
 80258f8:	095b      	lsrs	r3, r3, #5
 80258fa:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80258fe:	0040      	lsls	r0, r0, #1
 8025900:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8025904:	4418      	add	r0, r3
 8025906:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802590a:	4298      	cmp	r0, r3
 802590c:	d03a      	beq.n	8025984 <iso_year_adjust+0xbc>
 802590e:	dc21      	bgt.n	8025954 <iso_year_adjust+0x8c>
 8025910:	2801      	cmp	r0, #1
 8025912:	dc1a      	bgt.n	802594a <iso_year_adjust+0x82>
 8025914:	2800      	cmp	r0, #0
 8025916:	bfb4      	ite	lt
 8025918:	2000      	movlt	r0, #0
 802591a:	f04f 30ff 	movge.w	r0, #4294967295
 802591e:	4770      	bx	lr
 8025920:	2301      	movs	r3, #1
 8025922:	e7ea      	b.n	80258fa <iso_year_adjust+0x32>
 8025924:	2817      	cmp	r0, #23
 8025926:	d813      	bhi.n	8025950 <iso_year_adjust+0x88>
 8025928:	e8df f000 	tbb	[pc, r0]
 802592c:	0c0c0c0c 	.word	0x0c0c0c0c
 8025930:	0c0c1212 	.word	0x0c0c1212
 8025934:	12121212 	.word	0x12121212
 8025938:	12121212 	.word	0x12121212
 802593c:	0c0c1212 	.word	0x0c0c1212
 8025940:	0c0c1212 	.word	0x0c0c1212
 8025944:	f04f 30ff 	mov.w	r0, #4294967295
 8025948:	4770      	bx	lr
 802594a:	380a      	subs	r0, #10
 802594c:	2817      	cmp	r0, #23
 802594e:	d9e9      	bls.n	8025924 <iso_year_adjust+0x5c>
 8025950:	2000      	movs	r0, #0
 8025952:	4770      	bx	lr
 8025954:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8025958:	4298      	cmp	r0, r3
 802595a:	dc06      	bgt.n	802596a <iso_year_adjust+0xa2>
 802595c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8025960:	4298      	cmp	r0, r3
 8025962:	bfd4      	ite	le
 8025964:	2000      	movle	r0, #0
 8025966:	2001      	movgt	r0, #1
 8025968:	4770      	bx	lr
 802596a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802596e:	3802      	subs	r0, #2
 8025970:	2815      	cmp	r0, #21
 8025972:	d8ed      	bhi.n	8025950 <iso_year_adjust+0x88>
 8025974:	2301      	movs	r3, #1
 8025976:	4083      	lsls	r3, r0
 8025978:	4803      	ldr	r0, [pc, #12]	; (8025988 <iso_year_adjust+0xc0>)
 802597a:	4018      	ands	r0, r3
 802597c:	3800      	subs	r0, #0
 802597e:	bf18      	it	ne
 8025980:	2001      	movne	r0, #1
 8025982:	4770      	bx	lr
 8025984:	2001      	movs	r0, #1
 8025986:	4770      	bx	lr
 8025988:	002a001f 	.word	0x002a001f

0802598c <__strftime.isra.0>:
 802598c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025990:	b08f      	sub	sp, #60	; 0x3c
 8025992:	461e      	mov	r6, r3
 8025994:	2300      	movs	r3, #0
 8025996:	4607      	mov	r7, r0
 8025998:	460d      	mov	r5, r1
 802599a:	9302      	str	r3, [sp, #8]
 802599c:	461c      	mov	r4, r3
 802599e:	7813      	ldrb	r3, [r2, #0]
 80259a0:	2b00      	cmp	r3, #0
 80259a2:	f000 84ba 	beq.w	802631a <__strftime.isra.0+0x98e>
 80259a6:	2b25      	cmp	r3, #37	; 0x25
 80259a8:	d11f      	bne.n	80259ea <__strftime.isra.0+0x5e>
 80259aa:	f892 b001 	ldrb.w	fp, [r2, #1]
 80259ae:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 80259b2:	d024      	beq.n	80259fe <__strftime.isra.0+0x72>
 80259b4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 80259b8:	d021      	beq.n	80259fe <__strftime.isra.0+0x72>
 80259ba:	f102 0801 	add.w	r8, r2, #1
 80259be:	f04f 0b00 	mov.w	fp, #0
 80259c2:	f898 2000 	ldrb.w	r2, [r8]
 80259c6:	3a31      	subs	r2, #49	; 0x31
 80259c8:	2a08      	cmp	r2, #8
 80259ca:	d81b      	bhi.n	8025a04 <__strftime.isra.0+0x78>
 80259cc:	4640      	mov	r0, r8
 80259ce:	220a      	movs	r2, #10
 80259d0:	a906      	add	r1, sp, #24
 80259d2:	f000 fdc9 	bl	8026568 <strtoul>
 80259d6:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80259da:	4681      	mov	r9, r0
 80259dc:	f898 2000 	ldrb.w	r2, [r8]
 80259e0:	2a45      	cmp	r2, #69	; 0x45
 80259e2:	d112      	bne.n	8025a0a <__strftime.isra.0+0x7e>
 80259e4:	f108 0801 	add.w	r8, r8, #1
 80259e8:	e011      	b.n	8025a0e <__strftime.isra.0+0x82>
 80259ea:	1e69      	subs	r1, r5, #1
 80259ec:	42a1      	cmp	r1, r4
 80259ee:	d802      	bhi.n	80259f6 <__strftime.isra.0+0x6a>
 80259f0:	2400      	movs	r4, #0
 80259f2:	f000 bc95 	b.w	8026320 <__strftime.isra.0+0x994>
 80259f6:	553b      	strb	r3, [r7, r4]
 80259f8:	3201      	adds	r2, #1
 80259fa:	3401      	adds	r4, #1
 80259fc:	e7cf      	b.n	802599e <__strftime.isra.0+0x12>
 80259fe:	f102 0802 	add.w	r8, r2, #2
 8025a02:	e7de      	b.n	80259c2 <__strftime.isra.0+0x36>
 8025a04:	f04f 0900 	mov.w	r9, #0
 8025a08:	e7e8      	b.n	80259dc <__strftime.isra.0+0x50>
 8025a0a:	2a4f      	cmp	r2, #79	; 0x4f
 8025a0c:	d0ea      	beq.n	80259e4 <__strftime.isra.0+0x58>
 8025a0e:	f898 0000 	ldrb.w	r0, [r8]
 8025a12:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8025a16:	2a55      	cmp	r2, #85	; 0x55
 8025a18:	d8ea      	bhi.n	80259f0 <__strftime.isra.0+0x64>
 8025a1a:	a301      	add	r3, pc, #4	; (adr r3, 8025a20 <__strftime.isra.0+0x94>)
 8025a1c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8025a20:	0802630f 	.word	0x0802630f
 8025a24:	080259f1 	.word	0x080259f1
 8025a28:	080259f1 	.word	0x080259f1
 8025a2c:	080259f1 	.word	0x080259f1
 8025a30:	080259f1 	.word	0x080259f1
 8025a34:	080259f1 	.word	0x080259f1
 8025a38:	080259f1 	.word	0x080259f1
 8025a3c:	080259f1 	.word	0x080259f1
 8025a40:	080259f1 	.word	0x080259f1
 8025a44:	080259f1 	.word	0x080259f1
 8025a48:	080259f1 	.word	0x080259f1
 8025a4c:	080259f1 	.word	0x080259f1
 8025a50:	080259f1 	.word	0x080259f1
 8025a54:	080259f1 	.word	0x080259f1
 8025a58:	080259f1 	.word	0x080259f1
 8025a5c:	080259f1 	.word	0x080259f1
 8025a60:	080259f1 	.word	0x080259f1
 8025a64:	080259f1 	.word	0x080259f1
 8025a68:	080259f1 	.word	0x080259f1
 8025a6c:	080259f1 	.word	0x080259f1
 8025a70:	080259f1 	.word	0x080259f1
 8025a74:	080259f1 	.word	0x080259f1
 8025a78:	080259f1 	.word	0x080259f1
 8025a7c:	080259f1 	.word	0x080259f1
 8025a80:	080259f1 	.word	0x080259f1
 8025a84:	080259f1 	.word	0x080259f1
 8025a88:	080259f1 	.word	0x080259f1
 8025a8c:	080259f1 	.word	0x080259f1
 8025a90:	08025bb5 	.word	0x08025bb5
 8025a94:	08025c0d 	.word	0x08025c0d
 8025a98:	08025c7b 	.word	0x08025c7b
 8025a9c:	08025d19 	.word	0x08025d19
 8025aa0:	080259f1 	.word	0x080259f1
 8025aa4:	08025d65 	.word	0x08025d65
 8025aa8:	08025e51 	.word	0x08025e51
 8025aac:	08025f2b 	.word	0x08025f2b
 8025ab0:	08025f39 	.word	0x08025f39
 8025ab4:	080259f1 	.word	0x080259f1
 8025ab8:	080259f1 	.word	0x080259f1
 8025abc:	080259f1 	.word	0x080259f1
 8025ac0:	08025f69 	.word	0x08025f69
 8025ac4:	080259f1 	.word	0x080259f1
 8025ac8:	080259f1 	.word	0x080259f1
 8025acc:	08025f7d 	.word	0x08025f7d
 8025ad0:	080259f1 	.word	0x080259f1
 8025ad4:	08025fcf 	.word	0x08025fcf
 8025ad8:	080260e3 	.word	0x080260e3
 8025adc:	080260f3 	.word	0x080260f3
 8025ae0:	0802611b 	.word	0x0802611b
 8025ae4:	08026155 	.word	0x08026155
 8025ae8:	080261c9 	.word	0x080261c9
 8025aec:	08025c73 	.word	0x08025c73
 8025af0:	080261f5 	.word	0x080261f5
 8025af4:	080262bd 	.word	0x080262bd
 8025af8:	080259f1 	.word	0x080259f1
 8025afc:	080259f1 	.word	0x080259f1
 8025b00:	080259f1 	.word	0x080259f1
 8025b04:	080259f1 	.word	0x080259f1
 8025b08:	080259f1 	.word	0x080259f1
 8025b0c:	080259f1 	.word	0x080259f1
 8025b10:	08025b79 	.word	0x08025b79
 8025b14:	08025be3 	.word	0x08025be3
 8025b18:	08025c39 	.word	0x08025c39
 8025b1c:	08025cf5 	.word	0x08025cf5
 8025b20:	08025cf5 	.word	0x08025cf5
 8025b24:	080259f1 	.word	0x080259f1
 8025b28:	08025db7 	.word	0x08025db7
 8025b2c:	08025be3 	.word	0x08025be3
 8025b30:	080259f1 	.word	0x080259f1
 8025b34:	08025f5b 	.word	0x08025f5b
 8025b38:	08025f2b 	.word	0x08025f2b
 8025b3c:	08025f39 	.word	0x08025f39
 8025b40:	08025f63 	.word	0x08025f63
 8025b44:	08025f6d 	.word	0x08025f6d
 8025b48:	080259f1 	.word	0x080259f1
 8025b4c:	08025f7d 	.word	0x08025f7d
 8025b50:	080259f1 	.word	0x080259f1
 8025b54:	08025c63 	.word	0x08025c63
 8025b58:	08025fe1 	.word	0x08025fe1
 8025b5c:	080260e7 	.word	0x080260e7
 8025b60:	08026101 	.word	0x08026101
 8025b64:	080259f1 	.word	0x080259f1
 8025b68:	080261bb 	.word	0x080261bb
 8025b6c:	08025c6b 	.word	0x08025c6b
 8025b70:	080261d9 	.word	0x080261d9
 8025b74:	08026247 	.word	0x08026247
 8025b78:	69b3      	ldr	r3, [r6, #24]
 8025b7a:	4aa9      	ldr	r2, [pc, #676]	; (8025e20 <__strftime.isra.0+0x494>)
 8025b7c:	3318      	adds	r3, #24
 8025b7e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025b82:	4648      	mov	r0, r9
 8025b84:	f7da fb66 	bl	8000254 <strlen>
 8025b88:	f109 39ff 	add.w	r9, r9, #4294967295
 8025b8c:	4420      	add	r0, r4
 8025b8e:	1e6b      	subs	r3, r5, #1
 8025b90:	42a0      	cmp	r0, r4
 8025b92:	d107      	bne.n	8025ba4 <__strftime.isra.0+0x218>
 8025b94:	f898 3000 	ldrb.w	r3, [r8]
 8025b98:	2b00      	cmp	r3, #0
 8025b9a:	f000 83be 	beq.w	802631a <__strftime.isra.0+0x98e>
 8025b9e:	f108 0201 	add.w	r2, r8, #1
 8025ba2:	e6fc      	b.n	802599e <__strftime.isra.0+0x12>
 8025ba4:	42a3      	cmp	r3, r4
 8025ba6:	f67f af23 	bls.w	80259f0 <__strftime.isra.0+0x64>
 8025baa:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025bae:	553a      	strb	r2, [r7, r4]
 8025bb0:	3401      	adds	r4, #1
 8025bb2:	e7ed      	b.n	8025b90 <__strftime.isra.0+0x204>
 8025bb4:	69b2      	ldr	r2, [r6, #24]
 8025bb6:	4b9a      	ldr	r3, [pc, #616]	; (8025e20 <__strftime.isra.0+0x494>)
 8025bb8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025bbc:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025bc0:	4648      	mov	r0, r9
 8025bc2:	f7da fb47 	bl	8000254 <strlen>
 8025bc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bca:	4420      	add	r0, r4
 8025bcc:	1e6b      	subs	r3, r5, #1
 8025bce:	42a0      	cmp	r0, r4
 8025bd0:	d0e0      	beq.n	8025b94 <__strftime.isra.0+0x208>
 8025bd2:	42a3      	cmp	r3, r4
 8025bd4:	f67f af0c 	bls.w	80259f0 <__strftime.isra.0+0x64>
 8025bd8:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025bdc:	553a      	strb	r2, [r7, r4]
 8025bde:	3401      	adds	r4, #1
 8025be0:	e7f5      	b.n	8025bce <__strftime.isra.0+0x242>
 8025be2:	4b8f      	ldr	r3, [pc, #572]	; (8025e20 <__strftime.isra.0+0x494>)
 8025be4:	6932      	ldr	r2, [r6, #16]
 8025be6:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 8025bea:	4648      	mov	r0, r9
 8025bec:	f7da fb32 	bl	8000254 <strlen>
 8025bf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8025bf4:	4420      	add	r0, r4
 8025bf6:	1e6b      	subs	r3, r5, #1
 8025bf8:	42a0      	cmp	r0, r4
 8025bfa:	d0cb      	beq.n	8025b94 <__strftime.isra.0+0x208>
 8025bfc:	42a3      	cmp	r3, r4
 8025bfe:	f67f aef7 	bls.w	80259f0 <__strftime.isra.0+0x64>
 8025c02:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025c06:	553a      	strb	r2, [r7, r4]
 8025c08:	3401      	adds	r4, #1
 8025c0a:	e7f5      	b.n	8025bf8 <__strftime.isra.0+0x26c>
 8025c0c:	6933      	ldr	r3, [r6, #16]
 8025c0e:	4a84      	ldr	r2, [pc, #528]	; (8025e20 <__strftime.isra.0+0x494>)
 8025c10:	330c      	adds	r3, #12
 8025c12:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025c16:	4648      	mov	r0, r9
 8025c18:	f7da fb1c 	bl	8000254 <strlen>
 8025c1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8025c20:	4420      	add	r0, r4
 8025c22:	1e6b      	subs	r3, r5, #1
 8025c24:	42a0      	cmp	r0, r4
 8025c26:	d0b5      	beq.n	8025b94 <__strftime.isra.0+0x208>
 8025c28:	42a3      	cmp	r3, r4
 8025c2a:	f67f aee1 	bls.w	80259f0 <__strftime.isra.0+0x64>
 8025c2e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025c32:	553a      	strb	r2, [r7, r4]
 8025c34:	3401      	adds	r4, #1
 8025c36:	e7f5      	b.n	8025c24 <__strftime.isra.0+0x298>
 8025c38:	4b79      	ldr	r3, [pc, #484]	; (8025e20 <__strftime.isra.0+0x494>)
 8025c3a:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 8025c3e:	4648      	mov	r0, r9
 8025c40:	f7da fb08 	bl	8000254 <strlen>
 8025c44:	f899 3000 	ldrb.w	r3, [r9]
 8025c48:	2b00      	cmp	r3, #0
 8025c4a:	d0a3      	beq.n	8025b94 <__strftime.isra.0+0x208>
 8025c4c:	4633      	mov	r3, r6
 8025c4e:	464a      	mov	r2, r9
 8025c50:	1b29      	subs	r1, r5, r4
 8025c52:	1938      	adds	r0, r7, r4
 8025c54:	f7ff fe9a 	bl	802598c <__strftime.isra.0>
 8025c58:	2800      	cmp	r0, #0
 8025c5a:	f77f aec9 	ble.w	80259f0 <__strftime.isra.0+0x64>
 8025c5e:	4404      	add	r4, r0
 8025c60:	e798      	b.n	8025b94 <__strftime.isra.0+0x208>
 8025c62:	4b6f      	ldr	r3, [pc, #444]	; (8025e20 <__strftime.isra.0+0x494>)
 8025c64:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8025c68:	e7e9      	b.n	8025c3e <__strftime.isra.0+0x2b2>
 8025c6a:	4b6d      	ldr	r3, [pc, #436]	; (8025e20 <__strftime.isra.0+0x494>)
 8025c6c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8025c70:	e7e5      	b.n	8025c3e <__strftime.isra.0+0x2b2>
 8025c72:	4b6b      	ldr	r3, [pc, #428]	; (8025e20 <__strftime.isra.0+0x494>)
 8025c74:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8025c78:	e7e1      	b.n	8025c3e <__strftime.isra.0+0x2b2>
 8025c7a:	496a      	ldr	r1, [pc, #424]	; (8025e24 <__strftime.isra.0+0x498>)
 8025c7c:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8025c80:	458a      	cmp	sl, r1
 8025c82:	bfac      	ite	ge
 8025c84:	2100      	movge	r1, #0
 8025c86:	2101      	movlt	r1, #1
 8025c88:	f1ba 0f00 	cmp.w	sl, #0
 8025c8c:	db11      	blt.n	8025cb2 <__strftime.isra.0+0x326>
 8025c8e:	2064      	movs	r0, #100	; 0x64
 8025c90:	fb9a f0f0 	sdiv	r0, sl, r0
 8025c94:	3013      	adds	r0, #19
 8025c96:	f1bb 0f00 	cmp.w	fp, #0
 8025c9a:	d014      	beq.n	8025cc6 <__strftime.isra.0+0x33a>
 8025c9c:	2863      	cmp	r0, #99	; 0x63
 8025c9e:	dd27      	ble.n	8025cf0 <__strftime.isra.0+0x364>
 8025ca0:	4b61      	ldr	r3, [pc, #388]	; (8025e28 <__strftime.isra.0+0x49c>)
 8025ca2:	4a62      	ldr	r2, [pc, #392]	; (8025e2c <__strftime.isra.0+0x4a0>)
 8025ca4:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025ca8:	bf18      	it	ne
 8025caa:	461a      	movne	r2, r3
 8025cac:	f8df c198 	ldr.w	ip, [pc, #408]	; 8025e48 <__strftime.isra.0+0x4bc>
 8025cb0:	e00c      	b.n	8025ccc <__strftime.isra.0+0x340>
 8025cb2:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8025cb6:	9103      	str	r1, [sp, #12]
 8025cb8:	f000 ff6e 	bl	8026b98 <abs>
 8025cbc:	2264      	movs	r2, #100	; 0x64
 8025cbe:	9903      	ldr	r1, [sp, #12]
 8025cc0:	fb90 f0f2 	sdiv	r0, r0, r2
 8025cc4:	e7e7      	b.n	8025c96 <__strftime.isra.0+0x30a>
 8025cc6:	4a58      	ldr	r2, [pc, #352]	; (8025e28 <__strftime.isra.0+0x49c>)
 8025cc8:	f8df c180 	ldr.w	ip, [pc, #384]	; 8025e4c <__strftime.isra.0+0x4c0>
 8025ccc:	4b58      	ldr	r3, [pc, #352]	; (8025e30 <__strftime.isra.0+0x4a4>)
 8025cce:	9001      	str	r0, [sp, #4]
 8025cd0:	f1b9 0f02 	cmp.w	r9, #2
 8025cd4:	bf2c      	ite	cs
 8025cd6:	ebc1 0109 	rsbcs	r1, r1, r9
 8025cda:	f1c1 0102 	rsbcc	r1, r1, #2
 8025cde:	9100      	str	r1, [sp, #0]
 8025ce0:	4950      	ldr	r1, [pc, #320]	; (8025e24 <__strftime.isra.0+0x498>)
 8025ce2:	458a      	cmp	sl, r1
 8025ce4:	bfa8      	it	ge
 8025ce6:	4613      	movge	r3, r2
 8025ce8:	4662      	mov	r2, ip
 8025cea:	1b29      	subs	r1, r5, r4
 8025cec:	1938      	adds	r0, r7, r4
 8025cee:	e028      	b.n	8025d42 <__strftime.isra.0+0x3b6>
 8025cf0:	4a4d      	ldr	r2, [pc, #308]	; (8025e28 <__strftime.isra.0+0x49c>)
 8025cf2:	e7db      	b.n	8025cac <__strftime.isra.0+0x320>
 8025cf4:	494f      	ldr	r1, [pc, #316]	; (8025e34 <__strftime.isra.0+0x4a8>)
 8025cf6:	4a50      	ldr	r2, [pc, #320]	; (8025e38 <__strftime.isra.0+0x4ac>)
 8025cf8:	68f3      	ldr	r3, [r6, #12]
 8025cfa:	2864      	cmp	r0, #100	; 0x64
 8025cfc:	bf08      	it	eq
 8025cfe:	460a      	moveq	r2, r1
 8025d00:	1b29      	subs	r1, r5, r4
 8025d02:	1938      	adds	r0, r7, r4
 8025d04:	f7ff fcfc 	bl	8025700 <sniprintf>
 8025d08:	2800      	cmp	r0, #0
 8025d0a:	f6ff ae71 	blt.w	80259f0 <__strftime.isra.0+0x64>
 8025d0e:	4404      	add	r4, r0
 8025d10:	42a5      	cmp	r5, r4
 8025d12:	f63f af3f 	bhi.w	8025b94 <__strftime.isra.0+0x208>
 8025d16:	e66b      	b.n	80259f0 <__strftime.isra.0+0x64>
 8025d18:	6970      	ldr	r0, [r6, #20]
 8025d1a:	6933      	ldr	r3, [r6, #16]
 8025d1c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8025d20:	2800      	cmp	r0, #0
 8025d22:	eb07 0904 	add.w	r9, r7, r4
 8025d26:	eba5 0104 	sub.w	r1, r5, r4
 8025d2a:	f103 0301 	add.w	r3, r3, #1
 8025d2e:	db0b      	blt.n	8025d48 <__strftime.isra.0+0x3bc>
 8025d30:	2264      	movs	r2, #100	; 0x64
 8025d32:	fb90 fcf2 	sdiv	ip, r0, r2
 8025d36:	fb02 001c 	mls	r0, r2, ip, r0
 8025d3a:	4a40      	ldr	r2, [pc, #256]	; (8025e3c <__strftime.isra.0+0x4b0>)
 8025d3c:	e9cd a000 	strd	sl, r0, [sp]
 8025d40:	4648      	mov	r0, r9
 8025d42:	f7ff fcdd 	bl	8025700 <sniprintf>
 8025d46:	e7df      	b.n	8025d08 <__strftime.isra.0+0x37c>
 8025d48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025d4c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8025d50:	f000 ff22 	bl	8026b98 <abs>
 8025d54:	2264      	movs	r2, #100	; 0x64
 8025d56:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8025d5a:	fb90 fcf2 	sdiv	ip, r0, r2
 8025d5e:	fb0c 0012 	mls	r0, ip, r2, r0
 8025d62:	e7ea      	b.n	8025d3a <__strftime.isra.0+0x3ae>
 8025d64:	2225      	movs	r2, #37	; 0x25
 8025d66:	f88d 2018 	strb.w	r2, [sp, #24]
 8025d6a:	f1bb 0f00 	cmp.w	fp, #0
 8025d6e:	d011      	beq.n	8025d94 <__strftime.isra.0+0x408>
 8025d70:	f1b9 0f06 	cmp.w	r9, #6
 8025d74:	bf38      	it	cc
 8025d76:	f04f 0906 	movcc.w	r9, #6
 8025d7a:	f1b9 0306 	subs.w	r3, r9, #6
 8025d7e:	f88d b019 	strb.w	fp, [sp, #25]
 8025d82:	d10c      	bne.n	8025d9e <__strftime.isra.0+0x412>
 8025d84:	f10d 001a 	add.w	r0, sp, #26
 8025d88:	492d      	ldr	r1, [pc, #180]	; (8025e40 <__strftime.isra.0+0x4b4>)
 8025d8a:	f7ff fd94 	bl	80258b6 <strcpy>
 8025d8e:	4633      	mov	r3, r6
 8025d90:	aa06      	add	r2, sp, #24
 8025d92:	e75d      	b.n	8025c50 <__strftime.isra.0+0x2c4>
 8025d94:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8025d98:	f04f 090a 	mov.w	r9, #10
 8025d9c:	e7ed      	b.n	8025d7a <__strftime.isra.0+0x3ee>
 8025d9e:	4a29      	ldr	r2, [pc, #164]	; (8025e44 <__strftime.isra.0+0x4b8>)
 8025da0:	211e      	movs	r1, #30
 8025da2:	f10d 001a 	add.w	r0, sp, #26
 8025da6:	f7ff fcab 	bl	8025700 <sniprintf>
 8025daa:	2800      	cmp	r0, #0
 8025dac:	ddea      	ble.n	8025d84 <__strftime.isra.0+0x3f8>
 8025dae:	f10d 031a 	add.w	r3, sp, #26
 8025db2:	4418      	add	r0, r3
 8025db4:	e7e8      	b.n	8025d88 <__strftime.isra.0+0x3fc>
 8025db6:	4630      	mov	r0, r6
 8025db8:	f7ff fd86 	bl	80258c8 <iso_year_adjust>
 8025dbc:	4681      	mov	r9, r0
 8025dbe:	6970      	ldr	r0, [r6, #20]
 8025dc0:	2800      	cmp	r0, #0
 8025dc2:	db11      	blt.n	8025de8 <__strftime.isra.0+0x45c>
 8025dc4:	2364      	movs	r3, #100	; 0x64
 8025dc6:	fb90 f2f3 	sdiv	r2, r0, r3
 8025dca:	fb03 0012 	mls	r0, r3, r2, r0
 8025dce:	2264      	movs	r2, #100	; 0x64
 8025dd0:	4481      	add	r9, r0
 8025dd2:	fb99 f3f2 	sdiv	r3, r9, r2
 8025dd6:	fb02 9913 	mls	r9, r2, r3, r9
 8025dda:	4491      	add	r9, r2
 8025ddc:	fbb9 f3f2 	udiv	r3, r9, r2
 8025de0:	fb02 9313 	mls	r3, r2, r3, r9
 8025de4:	4a13      	ldr	r2, [pc, #76]	; (8025e34 <__strftime.isra.0+0x4a8>)
 8025de6:	e78b      	b.n	8025d00 <__strftime.isra.0+0x374>
 8025de8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025dec:	f000 fed4 	bl	8026b98 <abs>
 8025df0:	2364      	movs	r3, #100	; 0x64
 8025df2:	f1b9 0f00 	cmp.w	r9, #0
 8025df6:	fb90 f2f3 	sdiv	r2, r0, r3
 8025dfa:	fb02 0013 	mls	r0, r2, r3, r0
 8025dfe:	da07      	bge.n	8025e10 <__strftime.isra.0+0x484>
 8025e00:	6972      	ldr	r2, [r6, #20]
 8025e02:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8025e06:	429a      	cmp	r2, r3
 8025e08:	bfb8      	it	lt
 8025e0a:	f04f 0901 	movlt.w	r9, #1
 8025e0e:	e7de      	b.n	8025dce <__strftime.isra.0+0x442>
 8025e10:	d0dd      	beq.n	8025dce <__strftime.isra.0+0x442>
 8025e12:	6972      	ldr	r2, [r6, #20]
 8025e14:	4b03      	ldr	r3, [pc, #12]	; (8025e24 <__strftime.isra.0+0x498>)
 8025e16:	429a      	cmp	r2, r3
 8025e18:	bfb8      	it	lt
 8025e1a:	f04f 39ff 	movlt.w	r9, #4294967295
 8025e1e:	e7d6      	b.n	8025dce <__strftime.isra.0+0x442>
 8025e20:	08046060 	.word	0x08046060
 8025e24:	fffff894 	.word	0xfffff894
 8025e28:	08046213 	.word	0x08046213
 8025e2c:	08045ee8 	.word	0x08045ee8
 8025e30:	0804646e 	.word	0x0804646e
 8025e34:	08045ef8 	.word	0x08045ef8
 8025e38:	08045eea 	.word	0x08045eea
 8025e3c:	08045eee 	.word	0x08045eee
 8025e40:	08045f01 	.word	0x08045f01
 8025e44:	08045efd 	.word	0x08045efd
 8025e48:	08045ee0 	.word	0x08045ee0
 8025e4c:	08045ed9 	.word	0x08045ed9
 8025e50:	6971      	ldr	r1, [r6, #20]
 8025e52:	4ab6      	ldr	r2, [pc, #728]	; (802612c <__strftime.isra.0+0x7a0>)
 8025e54:	4291      	cmp	r1, r2
 8025e56:	bfac      	ite	ge
 8025e58:	2300      	movge	r3, #0
 8025e5a:	2301      	movlt	r3, #1
 8025e5c:	4630      	mov	r0, r6
 8025e5e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8025e62:	f7ff fd31 	bl	80258c8 <iso_year_adjust>
 8025e66:	9904      	ldr	r1, [sp, #16]
 8025e68:	2900      	cmp	r1, #0
 8025e6a:	4682      	mov	sl, r0
 8025e6c:	db2c      	blt.n	8025ec8 <__strftime.isra.0+0x53c>
 8025e6e:	2264      	movs	r2, #100	; 0x64
 8025e70:	fb91 f2f2 	sdiv	r2, r1, r2
 8025e74:	3213      	adds	r2, #19
 8025e76:	6970      	ldr	r0, [r6, #20]
 8025e78:	2800      	cmp	r0, #0
 8025e7a:	db30      	blt.n	8025ede <__strftime.isra.0+0x552>
 8025e7c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025e80:	fb90 fefc 	sdiv	lr, r0, ip
 8025e84:	fb0c 001e 	mls	r0, ip, lr, r0
 8025e88:	f1ba 0f00 	cmp.w	sl, #0
 8025e8c:	da36      	bge.n	8025efc <__strftime.isra.0+0x570>
 8025e8e:	6971      	ldr	r1, [r6, #20]
 8025e90:	4ba7      	ldr	r3, [pc, #668]	; (8026130 <__strftime.isra.0+0x7a4>)
 8025e92:	4299      	cmp	r1, r3
 8025e94:	db3d      	blt.n	8025f12 <__strftime.isra.0+0x586>
 8025e96:	4482      	add	sl, r0
 8025e98:	f1ba 3fff 	cmp.w	sl, #4294967295
 8025e9c:	d13e      	bne.n	8025f1c <__strftime.isra.0+0x590>
 8025e9e:	3a01      	subs	r2, #1
 8025ea0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8025ea4:	9b03      	ldr	r3, [sp, #12]
 8025ea6:	2064      	movs	r0, #100	; 0x64
 8025ea8:	fb00 aa02 	mla	sl, r0, r2, sl
 8025eac:	2b00      	cmp	r3, #0
 8025eae:	f000 81ad 	beq.w	802620c <__strftime.isra.0+0x880>
 8025eb2:	222d      	movs	r2, #45	; 0x2d
 8025eb4:	f88d 2018 	strb.w	r2, [sp, #24]
 8025eb8:	f1b9 0f00 	cmp.w	r9, #0
 8025ebc:	d001      	beq.n	8025ec2 <__strftime.isra.0+0x536>
 8025ebe:	f109 39ff 	add.w	r9, r9, #4294967295
 8025ec2:	f10d 0219 	add.w	r2, sp, #25
 8025ec6:	e1ac      	b.n	8026222 <__strftime.isra.0+0x896>
 8025ec8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8025ecc:	9104      	str	r1, [sp, #16]
 8025ece:	f000 fe63 	bl	8026b98 <abs>
 8025ed2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025ed6:	9904      	ldr	r1, [sp, #16]
 8025ed8:	fb90 f2fc 	sdiv	r2, r0, ip
 8025edc:	e7cb      	b.n	8025e76 <__strftime.isra.0+0x4ea>
 8025ede:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025ee2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8025ee6:	f000 fe57 	bl	8026b98 <abs>
 8025eea:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025eee:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8025ef2:	fb90 fefc 	sdiv	lr, r0, ip
 8025ef6:	fb0e 001c 	mls	r0, lr, ip, r0
 8025efa:	e7c5      	b.n	8025e88 <__strftime.isra.0+0x4fc>
 8025efc:	d0cb      	beq.n	8025e96 <__strftime.isra.0+0x50a>
 8025efe:	4b8b      	ldr	r3, [pc, #556]	; (802612c <__strftime.isra.0+0x7a0>)
 8025f00:	4299      	cmp	r1, r3
 8025f02:	bfb4      	ite	lt
 8025f04:	2301      	movlt	r3, #1
 8025f06:	2300      	movge	r3, #0
 8025f08:	9303      	str	r3, [sp, #12]
 8025f0a:	bfb8      	it	lt
 8025f0c:	f04f 3aff 	movlt.w	sl, #4294967295
 8025f10:	e7c1      	b.n	8025e96 <__strftime.isra.0+0x50a>
 8025f12:	f04f 0a01 	mov.w	sl, #1
 8025f16:	f8cd a00c 	str.w	sl, [sp, #12]
 8025f1a:	e7bc      	b.n	8025e96 <__strftime.isra.0+0x50a>
 8025f1c:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8025f20:	bf04      	itt	eq
 8025f22:	3201      	addeq	r2, #1
 8025f24:	f04f 0a00 	moveq.w	sl, #0
 8025f28:	e7bc      	b.n	8025ea4 <__strftime.isra.0+0x518>
 8025f2a:	4982      	ldr	r1, [pc, #520]	; (8026134 <__strftime.isra.0+0x7a8>)
 8025f2c:	4a82      	ldr	r2, [pc, #520]	; (8026138 <__strftime.isra.0+0x7ac>)
 8025f2e:	68b3      	ldr	r3, [r6, #8]
 8025f30:	286b      	cmp	r0, #107	; 0x6b
 8025f32:	bf08      	it	eq
 8025f34:	460a      	moveq	r2, r1
 8025f36:	e6e3      	b.n	8025d00 <__strftime.isra.0+0x374>
 8025f38:	68b3      	ldr	r3, [r6, #8]
 8025f3a:	b163      	cbz	r3, 8025f56 <__strftime.isra.0+0x5ca>
 8025f3c:	2b0c      	cmp	r3, #12
 8025f3e:	d004      	beq.n	8025f4a <__strftime.isra.0+0x5be>
 8025f40:	210c      	movs	r1, #12
 8025f42:	fb93 f2f1 	sdiv	r2, r3, r1
 8025f46:	fb01 3312 	mls	r3, r1, r2, r3
 8025f4a:	497b      	ldr	r1, [pc, #492]	; (8026138 <__strftime.isra.0+0x7ac>)
 8025f4c:	4a79      	ldr	r2, [pc, #484]	; (8026134 <__strftime.isra.0+0x7a8>)
 8025f4e:	2849      	cmp	r0, #73	; 0x49
 8025f50:	bf08      	it	eq
 8025f52:	460a      	moveq	r2, r1
 8025f54:	e6d4      	b.n	8025d00 <__strftime.isra.0+0x374>
 8025f56:	230c      	movs	r3, #12
 8025f58:	e7f7      	b.n	8025f4a <__strftime.isra.0+0x5be>
 8025f5a:	69f3      	ldr	r3, [r6, #28]
 8025f5c:	4a77      	ldr	r2, [pc, #476]	; (802613c <__strftime.isra.0+0x7b0>)
 8025f5e:	3301      	adds	r3, #1
 8025f60:	e6ce      	b.n	8025d00 <__strftime.isra.0+0x374>
 8025f62:	6933      	ldr	r3, [r6, #16]
 8025f64:	3301      	adds	r3, #1
 8025f66:	e73d      	b.n	8025de4 <__strftime.isra.0+0x458>
 8025f68:	6873      	ldr	r3, [r6, #4]
 8025f6a:	e73b      	b.n	8025de4 <__strftime.isra.0+0x458>
 8025f6c:	1e6b      	subs	r3, r5, #1
 8025f6e:	429c      	cmp	r4, r3
 8025f70:	f4bf ad3e 	bcs.w	80259f0 <__strftime.isra.0+0x64>
 8025f74:	230a      	movs	r3, #10
 8025f76:	553b      	strb	r3, [r7, r4]
 8025f78:	3401      	adds	r4, #1
 8025f7a:	e60b      	b.n	8025b94 <__strftime.isra.0+0x208>
 8025f7c:	68b3      	ldr	r3, [r6, #8]
 8025f7e:	2b0b      	cmp	r3, #11
 8025f80:	4b6f      	ldr	r3, [pc, #444]	; (8026140 <__strftime.isra.0+0x7b4>)
 8025f82:	bfd4      	ite	le
 8025f84:	2200      	movle	r2, #0
 8025f86:	2201      	movgt	r2, #1
 8025f88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025f8c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8025f90:	4648      	mov	r0, r9
 8025f92:	f7da f95f 	bl	8000254 <strlen>
 8025f96:	f109 32ff 	add.w	r2, r9, #4294967295
 8025f9a:	4420      	add	r0, r4
 8025f9c:	f105 3cff 	add.w	ip, r5, #4294967295
 8025fa0:	42a0      	cmp	r0, r4
 8025fa2:	f43f adf7 	beq.w	8025b94 <__strftime.isra.0+0x208>
 8025fa6:	45a4      	cmp	ip, r4
 8025fa8:	f67f ad22 	bls.w	80259f0 <__strftime.isra.0+0x64>
 8025fac:	f898 1000 	ldrb.w	r1, [r8]
 8025fb0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025fb4:	2950      	cmp	r1, #80	; 0x50
 8025fb6:	d107      	bne.n	8025fc8 <__strftime.isra.0+0x63c>
 8025fb8:	4962      	ldr	r1, [pc, #392]	; (8026144 <__strftime.isra.0+0x7b8>)
 8025fba:	5cc9      	ldrb	r1, [r1, r3]
 8025fbc:	f001 0103 	and.w	r1, r1, #3
 8025fc0:	2901      	cmp	r1, #1
 8025fc2:	bf08      	it	eq
 8025fc4:	3320      	addeq	r3, #32
 8025fc6:	b2db      	uxtb	r3, r3
 8025fc8:	553b      	strb	r3, [r7, r4]
 8025fca:	3401      	adds	r4, #1
 8025fcc:	e7e8      	b.n	8025fa0 <__strftime.isra.0+0x614>
 8025fce:	6873      	ldr	r3, [r6, #4]
 8025fd0:	9300      	str	r3, [sp, #0]
 8025fd2:	4a5d      	ldr	r2, [pc, #372]	; (8026148 <__strftime.isra.0+0x7bc>)
 8025fd4:	68b3      	ldr	r3, [r6, #8]
 8025fd6:	1b29      	subs	r1, r5, r4
 8025fd8:	1938      	adds	r0, r7, r4
 8025fda:	f7ff fb91 	bl	8025700 <sniprintf>
 8025fde:	e693      	b.n	8025d08 <__strftime.isra.0+0x37c>
 8025fe0:	6a33      	ldr	r3, [r6, #32]
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	db7a      	blt.n	80260dc <__strftime.isra.0+0x750>
 8025fe6:	f000 fb73 	bl	80266d0 <__tz_lock>
 8025fea:	9b02      	ldr	r3, [sp, #8]
 8025fec:	b90b      	cbnz	r3, 8025ff2 <__strftime.isra.0+0x666>
 8025fee:	f000 fb7b 	bl	80266e8 <_tzset_unlocked>
 8025ff2:	f001 fd79 	bl	8027ae8 <__gettzinfo>
 8025ff6:	6a33      	ldr	r3, [r6, #32]
 8025ff8:	2b00      	cmp	r3, #0
 8025ffa:	bfd4      	ite	le
 8025ffc:	2200      	movle	r2, #0
 8025ffe:	2201      	movgt	r2, #1
 8026000:	2328      	movs	r3, #40	; 0x28
 8026002:	fb02 3303 	mla	r3, r2, r3, r3
 8026006:	58c3      	ldr	r3, [r0, r3]
 8026008:	f1c3 0900 	rsb	r9, r3, #0
 802600c:	f000 fb66 	bl	80266dc <__tz_unlock>
 8026010:	2301      	movs	r3, #1
 8026012:	9302      	str	r3, [sp, #8]
 8026014:	6972      	ldr	r2, [r6, #20]
 8026016:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 802601a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 802601e:	f16c 0c00 	sbc.w	ip, ip, #0
 8026022:	f1bc 0f00 	cmp.w	ip, #0
 8026026:	eba5 0104 	sub.w	r1, r5, r4
 802602a:	eb07 0004 	add.w	r0, r7, r4
 802602e:	da02      	bge.n	8026036 <__strftime.isra.0+0x6aa>
 8026030:	3303      	adds	r3, #3
 8026032:	f14c 0c00 	adc.w	ip, ip, #0
 8026036:	089b      	lsrs	r3, r3, #2
 8026038:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 802603c:	f102 3aff 	add.w	sl, r2, #4294967295
 8026040:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8026044:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8026048:	fb9a fefe 	sdiv	lr, sl, lr
 802604c:	ebb3 030e 	subs.w	r3, r3, lr
 8026050:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8026054:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8026058:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 802605c:	fb9a fefe 	sdiv	lr, sl, lr
 8026060:	eb13 030e 	adds.w	r3, r3, lr
 8026064:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8026068:	3a46      	subs	r2, #70	; 0x46
 802606a:	f240 1c6d 	movw	ip, #365	; 0x16d
 802606e:	fb0c f202 	mul.w	r2, ip, r2
 8026072:	189b      	adds	r3, r3, r2
 8026074:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8026078:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 802607c:	f04f 0c18 	mov.w	ip, #24
 8026080:	eb13 030e 	adds.w	r3, r3, lr
 8026084:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8026088:	fba3 3e0c 	umull	r3, lr, r3, ip
 802608c:	fb0c e202 	mla	r2, ip, r2, lr
 8026090:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8026094:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8026098:	eb13 030e 	adds.w	r3, r3, lr
 802609c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 80260a0:	fba3 320c 	umull	r3, r2, r3, ip
 80260a4:	fb0c 220e 	mla	r2, ip, lr, r2
 80260a8:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80260ac:	eb13 030e 	adds.w	r3, r3, lr
 80260b0:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80260b4:	fba3 3e0c 	umull	r3, lr, r3, ip
 80260b8:	fb0c e202 	mla	r2, ip, r2, lr
 80260bc:	f8d6 e000 	ldr.w	lr, [r6]
 80260c0:	eb13 030e 	adds.w	r3, r3, lr
 80260c4:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 80260c8:	ebb3 0309 	subs.w	r3, r3, r9
 80260cc:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 80260d0:	e9cd 3200 	strd	r3, r2, [sp]
 80260d4:	4a1d      	ldr	r2, [pc, #116]	; (802614c <__strftime.isra.0+0x7c0>)
 80260d6:	f7ff fb13 	bl	8025700 <sniprintf>
 80260da:	e615      	b.n	8025d08 <__strftime.isra.0+0x37c>
 80260dc:	f04f 0900 	mov.w	r9, #0
 80260e0:	e798      	b.n	8026014 <__strftime.isra.0+0x688>
 80260e2:	6833      	ldr	r3, [r6, #0]
 80260e4:	e67e      	b.n	8025de4 <__strftime.isra.0+0x458>
 80260e6:	1e6b      	subs	r3, r5, #1
 80260e8:	429c      	cmp	r4, r3
 80260ea:	f4bf ac81 	bcs.w	80259f0 <__strftime.isra.0+0x64>
 80260ee:	2309      	movs	r3, #9
 80260f0:	e741      	b.n	8025f76 <__strftime.isra.0+0x5ea>
 80260f2:	6833      	ldr	r3, [r6, #0]
 80260f4:	9301      	str	r3, [sp, #4]
 80260f6:	6873      	ldr	r3, [r6, #4]
 80260f8:	9300      	str	r3, [sp, #0]
 80260fa:	4a15      	ldr	r2, [pc, #84]	; (8026150 <__strftime.isra.0+0x7c4>)
 80260fc:	68b3      	ldr	r3, [r6, #8]
 80260fe:	e5f4      	b.n	8025cea <__strftime.isra.0+0x35e>
 8026100:	1e6b      	subs	r3, r5, #1
 8026102:	429c      	cmp	r4, r3
 8026104:	f4bf ac74 	bcs.w	80259f0 <__strftime.isra.0+0x64>
 8026108:	69b3      	ldr	r3, [r6, #24]
 802610a:	1c62      	adds	r2, r4, #1
 802610c:	b91b      	cbnz	r3, 8026116 <__strftime.isra.0+0x78a>
 802610e:	2337      	movs	r3, #55	; 0x37
 8026110:	553b      	strb	r3, [r7, r4]
 8026112:	4614      	mov	r4, r2
 8026114:	e53e      	b.n	8025b94 <__strftime.isra.0+0x208>
 8026116:	3330      	adds	r3, #48	; 0x30
 8026118:	e7fa      	b.n	8026110 <__strftime.isra.0+0x784>
 802611a:	69f3      	ldr	r3, [r6, #28]
 802611c:	69b2      	ldr	r2, [r6, #24]
 802611e:	3307      	adds	r3, #7
 8026120:	1a9b      	subs	r3, r3, r2
 8026122:	2207      	movs	r2, #7
 8026124:	fb93 f3f2 	sdiv	r3, r3, r2
 8026128:	e65c      	b.n	8025de4 <__strftime.isra.0+0x458>
 802612a:	bf00      	nop
 802612c:	fffff894 	.word	0xfffff894
 8026130:	fffff895 	.word	0xfffff895
 8026134:	08045eea 	.word	0x08045eea
 8026138:	08045ef8 	.word	0x08045ef8
 802613c:	08045f0d 	.word	0x08045f0d
 8026140:	08046060 	.word	0x08046060
 8026144:	08045bb1 	.word	0x08045bb1
 8026148:	08045f1c 	.word	0x08045f1c
 802614c:	08045f12 	.word	0x08045f12
 8026150:	08045f17 	.word	0x08045f17
 8026154:	4630      	mov	r0, r6
 8026156:	f7ff fbb7 	bl	80258c8 <iso_year_adjust>
 802615a:	69b2      	ldr	r2, [r6, #24]
 802615c:	b132      	cbz	r2, 802616c <__strftime.isra.0+0x7e0>
 802615e:	3a01      	subs	r2, #1
 8026160:	2800      	cmp	r0, #0
 8026162:	dc28      	bgt.n	80261b6 <__strftime.isra.0+0x82a>
 8026164:	69f3      	ldr	r3, [r6, #28]
 8026166:	d103      	bne.n	8026170 <__strftime.isra.0+0x7e4>
 8026168:	330a      	adds	r3, #10
 802616a:	e7d9      	b.n	8026120 <__strftime.isra.0+0x794>
 802616c:	2206      	movs	r2, #6
 802616e:	e7f7      	b.n	8026160 <__strftime.isra.0+0x7d4>
 8026170:	6971      	ldr	r1, [r6, #20]
 8026172:	2900      	cmp	r1, #0
 8026174:	eba2 0203 	sub.w	r2, r2, r3
 8026178:	f240 736b 	movw	r3, #1899	; 0x76b
 802617c:	bfa8      	it	ge
 802617e:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8026182:	440b      	add	r3, r1
 8026184:	0799      	lsls	r1, r3, #30
 8026186:	d105      	bne.n	8026194 <__strftime.isra.0+0x808>
 8026188:	2064      	movs	r0, #100	; 0x64
 802618a:	fb93 f1f0 	sdiv	r1, r3, r0
 802618e:	fb00 3111 	mls	r1, r0, r1, r3
 8026192:	b971      	cbnz	r1, 80261b2 <__strftime.isra.0+0x826>
 8026194:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026198:	fb93 f0f1 	sdiv	r0, r3, r1
 802619c:	fb01 3310 	mls	r3, r1, r0, r3
 80261a0:	fab3 f383 	clz	r3, r3
 80261a4:	095b      	lsrs	r3, r3, #5
 80261a6:	1ad3      	subs	r3, r2, r3
 80261a8:	2b05      	cmp	r3, #5
 80261aa:	bfb4      	ite	lt
 80261ac:	2335      	movlt	r3, #53	; 0x35
 80261ae:	2334      	movge	r3, #52	; 0x34
 80261b0:	e618      	b.n	8025de4 <__strftime.isra.0+0x458>
 80261b2:	2301      	movs	r3, #1
 80261b4:	e7f7      	b.n	80261a6 <__strftime.isra.0+0x81a>
 80261b6:	2301      	movs	r3, #1
 80261b8:	e614      	b.n	8025de4 <__strftime.isra.0+0x458>
 80261ba:	1e6b      	subs	r3, r5, #1
 80261bc:	429c      	cmp	r4, r3
 80261be:	f4bf ac17 	bcs.w	80259f0 <__strftime.isra.0+0x64>
 80261c2:	69b3      	ldr	r3, [r6, #24]
 80261c4:	3330      	adds	r3, #48	; 0x30
 80261c6:	e6d6      	b.n	8025f76 <__strftime.isra.0+0x5ea>
 80261c8:	69b2      	ldr	r2, [r6, #24]
 80261ca:	b11a      	cbz	r2, 80261d4 <__strftime.isra.0+0x848>
 80261cc:	3a01      	subs	r2, #1
 80261ce:	69f3      	ldr	r3, [r6, #28]
 80261d0:	3307      	adds	r3, #7
 80261d2:	e7a5      	b.n	8026120 <__strftime.isra.0+0x794>
 80261d4:	2206      	movs	r2, #6
 80261d6:	e7fa      	b.n	80261ce <__strftime.isra.0+0x842>
 80261d8:	6970      	ldr	r0, [r6, #20]
 80261da:	2800      	cmp	r0, #0
 80261dc:	db05      	blt.n	80261ea <__strftime.isra.0+0x85e>
 80261de:	2364      	movs	r3, #100	; 0x64
 80261e0:	fb90 f2f3 	sdiv	r2, r0, r3
 80261e4:	fb02 0313 	mls	r3, r2, r3, r0
 80261e8:	e5fc      	b.n	8025de4 <__strftime.isra.0+0x458>
 80261ea:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80261ee:	f000 fcd3 	bl	8026b98 <abs>
 80261f2:	e7f4      	b.n	80261de <__strftime.isra.0+0x852>
 80261f4:	6972      	ldr	r2, [r6, #20]
 80261f6:	494c      	ldr	r1, [pc, #304]	; (8026328 <__strftime.isra.0+0x99c>)
 80261f8:	428a      	cmp	r2, r1
 80261fa:	da05      	bge.n	8026208 <__strftime.isra.0+0x87c>
 80261fc:	202d      	movs	r0, #45	; 0x2d
 80261fe:	f88d 0018 	strb.w	r0, [sp, #24]
 8026202:	eba1 0a02 	sub.w	sl, r1, r2
 8026206:	e657      	b.n	8025eb8 <__strftime.isra.0+0x52c>
 8026208:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 802620c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8026210:	d106      	bne.n	8026220 <__strftime.isra.0+0x894>
 8026212:	f242 720f 	movw	r2, #9999	; 0x270f
 8026216:	4592      	cmp	sl, r2
 8026218:	d902      	bls.n	8026220 <__strftime.isra.0+0x894>
 802621a:	f88d b018 	strb.w	fp, [sp, #24]
 802621e:	e64b      	b.n	8025eb8 <__strftime.isra.0+0x52c>
 8026220:	aa06      	add	r2, sp, #24
 8026222:	2125      	movs	r1, #37	; 0x25
 8026224:	7011      	strb	r1, [r2, #0]
 8026226:	f1bb 0f00 	cmp.w	fp, #0
 802622a:	d108      	bne.n	802623e <__strftime.isra.0+0x8b2>
 802622c:	1c50      	adds	r0, r2, #1
 802622e:	493f      	ldr	r1, [pc, #252]	; (802632c <__strftime.isra.0+0x9a0>)
 8026230:	f7ff fb41 	bl	80258b6 <strcpy>
 8026234:	f8cd a000 	str.w	sl, [sp]
 8026238:	464b      	mov	r3, r9
 802623a:	aa06      	add	r2, sp, #24
 802623c:	e6cb      	b.n	8025fd6 <__strftime.isra.0+0x64a>
 802623e:	2330      	movs	r3, #48	; 0x30
 8026240:	1c90      	adds	r0, r2, #2
 8026242:	7053      	strb	r3, [r2, #1]
 8026244:	e7f3      	b.n	802622e <__strftime.isra.0+0x8a2>
 8026246:	6a33      	ldr	r3, [r6, #32]
 8026248:	2b00      	cmp	r3, #0
 802624a:	f6ff aca3 	blt.w	8025b94 <__strftime.isra.0+0x208>
 802624e:	f000 fa3f 	bl	80266d0 <__tz_lock>
 8026252:	9b02      	ldr	r3, [sp, #8]
 8026254:	b90b      	cbnz	r3, 802625a <__strftime.isra.0+0x8ce>
 8026256:	f000 fa47 	bl	80266e8 <_tzset_unlocked>
 802625a:	f001 fc45 	bl	8027ae8 <__gettzinfo>
 802625e:	6a33      	ldr	r3, [r6, #32]
 8026260:	2b00      	cmp	r3, #0
 8026262:	bfd4      	ite	le
 8026264:	2200      	movle	r2, #0
 8026266:	2201      	movgt	r2, #1
 8026268:	2328      	movs	r3, #40	; 0x28
 802626a:	fb02 3303 	mla	r3, r2, r3, r3
 802626e:	eb07 0a04 	add.w	sl, r7, r4
 8026272:	58c3      	ldr	r3, [r0, r3]
 8026274:	f1c3 0900 	rsb	r9, r3, #0
 8026278:	f000 fa30 	bl	80266dc <__tz_unlock>
 802627c:	233c      	movs	r3, #60	; 0x3c
 802627e:	fb99 f0f3 	sdiv	r0, r9, r3
 8026282:	f001 fce1 	bl	8027c48 <labs>
 8026286:	233c      	movs	r3, #60	; 0x3c
 8026288:	eba5 0b04 	sub.w	fp, r5, r4
 802628c:	fb90 f2f3 	sdiv	r2, r0, r3
 8026290:	fb02 0013 	mls	r0, r2, r3, r0
 8026294:	9000      	str	r0, [sp, #0]
 8026296:	4a26      	ldr	r2, [pc, #152]	; (8026330 <__strftime.isra.0+0x9a4>)
 8026298:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802629c:	4659      	mov	r1, fp
 802629e:	4650      	mov	r0, sl
 80262a0:	fb99 f3f3 	sdiv	r3, r9, r3
 80262a4:	f7ff fa2c 	bl	8025700 <sniprintf>
 80262a8:	2800      	cmp	r0, #0
 80262aa:	f6ff aba1 	blt.w	80259f0 <__strftime.isra.0+0x64>
 80262ae:	4404      	add	r4, r0
 80262b0:	42a5      	cmp	r5, r4
 80262b2:	f67f ab9d 	bls.w	80259f0 <__strftime.isra.0+0x64>
 80262b6:	2301      	movs	r3, #1
 80262b8:	9302      	str	r3, [sp, #8]
 80262ba:	e46b      	b.n	8025b94 <__strftime.isra.0+0x208>
 80262bc:	6a33      	ldr	r3, [r6, #32]
 80262be:	2b00      	cmp	r3, #0
 80262c0:	f6ff ac68 	blt.w	8025b94 <__strftime.isra.0+0x208>
 80262c4:	f000 fa04 	bl	80266d0 <__tz_lock>
 80262c8:	9b02      	ldr	r3, [sp, #8]
 80262ca:	b90b      	cbnz	r3, 80262d0 <__strftime.isra.0+0x944>
 80262cc:	f000 fa0c 	bl	80266e8 <_tzset_unlocked>
 80262d0:	6a33      	ldr	r3, [r6, #32]
 80262d2:	4a18      	ldr	r2, [pc, #96]	; (8026334 <__strftime.isra.0+0x9a8>)
 80262d4:	2b00      	cmp	r3, #0
 80262d6:	bfd4      	ite	le
 80262d8:	2300      	movle	r3, #0
 80262da:	2301      	movgt	r3, #1
 80262dc:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80262e0:	4648      	mov	r0, r9
 80262e2:	f7d9 ffb7 	bl	8000254 <strlen>
 80262e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80262ea:	4420      	add	r0, r4
 80262ec:	1e6b      	subs	r3, r5, #1
 80262ee:	42a0      	cmp	r0, r4
 80262f0:	d102      	bne.n	80262f8 <__strftime.isra.0+0x96c>
 80262f2:	f000 f9f3 	bl	80266dc <__tz_unlock>
 80262f6:	e7de      	b.n	80262b6 <__strftime.isra.0+0x92a>
 80262f8:	42a3      	cmp	r3, r4
 80262fa:	d904      	bls.n	8026306 <__strftime.isra.0+0x97a>
 80262fc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8026300:	553a      	strb	r2, [r7, r4]
 8026302:	3401      	adds	r4, #1
 8026304:	e7f3      	b.n	80262ee <__strftime.isra.0+0x962>
 8026306:	f000 f9e9 	bl	80266dc <__tz_unlock>
 802630a:	f7ff bb71 	b.w	80259f0 <__strftime.isra.0+0x64>
 802630e:	1e6b      	subs	r3, r5, #1
 8026310:	429c      	cmp	r4, r3
 8026312:	f4bf ab6d 	bcs.w	80259f0 <__strftime.isra.0+0x64>
 8026316:	2325      	movs	r3, #37	; 0x25
 8026318:	e62d      	b.n	8025f76 <__strftime.isra.0+0x5ea>
 802631a:	b10d      	cbz	r5, 8026320 <__strftime.isra.0+0x994>
 802631c:	2300      	movs	r3, #0
 802631e:	553b      	strb	r3, [r7, r4]
 8026320:	4620      	mov	r0, r4
 8026322:	b00f      	add	sp, #60	; 0x3c
 8026324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026328:	fffff894 	.word	0xfffff894
 802632c:	08045f09 	.word	0x08045f09
 8026330:	08045f26 	.word	0x08045f26
 8026334:	200004f4 	.word	0x200004f4

08026338 <strftime>:
 8026338:	f7ff bb28 	b.w	802598c <__strftime.isra.0>

0802633c <strncmp>:
 802633c:	b510      	push	{r4, lr}
 802633e:	b17a      	cbz	r2, 8026360 <strncmp+0x24>
 8026340:	4603      	mov	r3, r0
 8026342:	3901      	subs	r1, #1
 8026344:	1884      	adds	r4, r0, r2
 8026346:	f813 0b01 	ldrb.w	r0, [r3], #1
 802634a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802634e:	4290      	cmp	r0, r2
 8026350:	d101      	bne.n	8026356 <strncmp+0x1a>
 8026352:	42a3      	cmp	r3, r4
 8026354:	d101      	bne.n	802635a <strncmp+0x1e>
 8026356:	1a80      	subs	r0, r0, r2
 8026358:	bd10      	pop	{r4, pc}
 802635a:	2800      	cmp	r0, #0
 802635c:	d1f3      	bne.n	8026346 <strncmp+0xa>
 802635e:	e7fa      	b.n	8026356 <strncmp+0x1a>
 8026360:	4610      	mov	r0, r2
 8026362:	e7f9      	b.n	8026358 <strncmp+0x1c>

08026364 <_strtol_l.constprop.0>:
 8026364:	2b01      	cmp	r3, #1
 8026366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802636a:	d001      	beq.n	8026370 <_strtol_l.constprop.0+0xc>
 802636c:	2b24      	cmp	r3, #36	; 0x24
 802636e:	d906      	bls.n	802637e <_strtol_l.constprop.0+0x1a>
 8026370:	f001 fa9c 	bl	80278ac <__errno>
 8026374:	2316      	movs	r3, #22
 8026376:	6003      	str	r3, [r0, #0]
 8026378:	2000      	movs	r0, #0
 802637a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802637e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8026464 <_strtol_l.constprop.0+0x100>
 8026382:	460d      	mov	r5, r1
 8026384:	462e      	mov	r6, r5
 8026386:	f815 4b01 	ldrb.w	r4, [r5], #1
 802638a:	f814 700c 	ldrb.w	r7, [r4, ip]
 802638e:	f017 0708 	ands.w	r7, r7, #8
 8026392:	d1f7      	bne.n	8026384 <_strtol_l.constprop.0+0x20>
 8026394:	2c2d      	cmp	r4, #45	; 0x2d
 8026396:	d132      	bne.n	80263fe <_strtol_l.constprop.0+0x9a>
 8026398:	782c      	ldrb	r4, [r5, #0]
 802639a:	2701      	movs	r7, #1
 802639c:	1cb5      	adds	r5, r6, #2
 802639e:	2b00      	cmp	r3, #0
 80263a0:	d05b      	beq.n	802645a <_strtol_l.constprop.0+0xf6>
 80263a2:	2b10      	cmp	r3, #16
 80263a4:	d109      	bne.n	80263ba <_strtol_l.constprop.0+0x56>
 80263a6:	2c30      	cmp	r4, #48	; 0x30
 80263a8:	d107      	bne.n	80263ba <_strtol_l.constprop.0+0x56>
 80263aa:	782c      	ldrb	r4, [r5, #0]
 80263ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80263b0:	2c58      	cmp	r4, #88	; 0x58
 80263b2:	d14d      	bne.n	8026450 <_strtol_l.constprop.0+0xec>
 80263b4:	786c      	ldrb	r4, [r5, #1]
 80263b6:	2310      	movs	r3, #16
 80263b8:	3502      	adds	r5, #2
 80263ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80263be:	f108 38ff 	add.w	r8, r8, #4294967295
 80263c2:	f04f 0c00 	mov.w	ip, #0
 80263c6:	fbb8 f9f3 	udiv	r9, r8, r3
 80263ca:	4666      	mov	r6, ip
 80263cc:	fb03 8a19 	mls	sl, r3, r9, r8
 80263d0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80263d4:	f1be 0f09 	cmp.w	lr, #9
 80263d8:	d816      	bhi.n	8026408 <_strtol_l.constprop.0+0xa4>
 80263da:	4674      	mov	r4, lr
 80263dc:	42a3      	cmp	r3, r4
 80263de:	dd24      	ble.n	802642a <_strtol_l.constprop.0+0xc6>
 80263e0:	f1bc 0f00 	cmp.w	ip, #0
 80263e4:	db1e      	blt.n	8026424 <_strtol_l.constprop.0+0xc0>
 80263e6:	45b1      	cmp	r9, r6
 80263e8:	d31c      	bcc.n	8026424 <_strtol_l.constprop.0+0xc0>
 80263ea:	d101      	bne.n	80263f0 <_strtol_l.constprop.0+0x8c>
 80263ec:	45a2      	cmp	sl, r4
 80263ee:	db19      	blt.n	8026424 <_strtol_l.constprop.0+0xc0>
 80263f0:	fb06 4603 	mla	r6, r6, r3, r4
 80263f4:	f04f 0c01 	mov.w	ip, #1
 80263f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80263fc:	e7e8      	b.n	80263d0 <_strtol_l.constprop.0+0x6c>
 80263fe:	2c2b      	cmp	r4, #43	; 0x2b
 8026400:	bf04      	itt	eq
 8026402:	782c      	ldrbeq	r4, [r5, #0]
 8026404:	1cb5      	addeq	r5, r6, #2
 8026406:	e7ca      	b.n	802639e <_strtol_l.constprop.0+0x3a>
 8026408:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802640c:	f1be 0f19 	cmp.w	lr, #25
 8026410:	d801      	bhi.n	8026416 <_strtol_l.constprop.0+0xb2>
 8026412:	3c37      	subs	r4, #55	; 0x37
 8026414:	e7e2      	b.n	80263dc <_strtol_l.constprop.0+0x78>
 8026416:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802641a:	f1be 0f19 	cmp.w	lr, #25
 802641e:	d804      	bhi.n	802642a <_strtol_l.constprop.0+0xc6>
 8026420:	3c57      	subs	r4, #87	; 0x57
 8026422:	e7db      	b.n	80263dc <_strtol_l.constprop.0+0x78>
 8026424:	f04f 3cff 	mov.w	ip, #4294967295
 8026428:	e7e6      	b.n	80263f8 <_strtol_l.constprop.0+0x94>
 802642a:	f1bc 0f00 	cmp.w	ip, #0
 802642e:	da05      	bge.n	802643c <_strtol_l.constprop.0+0xd8>
 8026430:	2322      	movs	r3, #34	; 0x22
 8026432:	6003      	str	r3, [r0, #0]
 8026434:	4646      	mov	r6, r8
 8026436:	b942      	cbnz	r2, 802644a <_strtol_l.constprop.0+0xe6>
 8026438:	4630      	mov	r0, r6
 802643a:	e79e      	b.n	802637a <_strtol_l.constprop.0+0x16>
 802643c:	b107      	cbz	r7, 8026440 <_strtol_l.constprop.0+0xdc>
 802643e:	4276      	negs	r6, r6
 8026440:	2a00      	cmp	r2, #0
 8026442:	d0f9      	beq.n	8026438 <_strtol_l.constprop.0+0xd4>
 8026444:	f1bc 0f00 	cmp.w	ip, #0
 8026448:	d000      	beq.n	802644c <_strtol_l.constprop.0+0xe8>
 802644a:	1e69      	subs	r1, r5, #1
 802644c:	6011      	str	r1, [r2, #0]
 802644e:	e7f3      	b.n	8026438 <_strtol_l.constprop.0+0xd4>
 8026450:	2430      	movs	r4, #48	; 0x30
 8026452:	2b00      	cmp	r3, #0
 8026454:	d1b1      	bne.n	80263ba <_strtol_l.constprop.0+0x56>
 8026456:	2308      	movs	r3, #8
 8026458:	e7af      	b.n	80263ba <_strtol_l.constprop.0+0x56>
 802645a:	2c30      	cmp	r4, #48	; 0x30
 802645c:	d0a5      	beq.n	80263aa <_strtol_l.constprop.0+0x46>
 802645e:	230a      	movs	r3, #10
 8026460:	e7ab      	b.n	80263ba <_strtol_l.constprop.0+0x56>
 8026462:	bf00      	nop
 8026464:	08045bb1 	.word	0x08045bb1

08026468 <_strtol_r>:
 8026468:	f7ff bf7c 	b.w	8026364 <_strtol_l.constprop.0>

0802646c <strtol>:
 802646c:	4613      	mov	r3, r2
 802646e:	460a      	mov	r2, r1
 8026470:	4601      	mov	r1, r0
 8026472:	4802      	ldr	r0, [pc, #8]	; (802647c <strtol+0x10>)
 8026474:	6800      	ldr	r0, [r0, #0]
 8026476:	f7ff bf75 	b.w	8026364 <_strtol_l.constprop.0>
 802647a:	bf00      	nop
 802647c:	20000490 	.word	0x20000490

08026480 <_strtoul_l.constprop.0>:
 8026480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026484:	4f36      	ldr	r7, [pc, #216]	; (8026560 <_strtoul_l.constprop.0+0xe0>)
 8026486:	4686      	mov	lr, r0
 8026488:	460d      	mov	r5, r1
 802648a:	4628      	mov	r0, r5
 802648c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8026490:	5de6      	ldrb	r6, [r4, r7]
 8026492:	f016 0608 	ands.w	r6, r6, #8
 8026496:	d1f8      	bne.n	802648a <_strtoul_l.constprop.0+0xa>
 8026498:	2c2d      	cmp	r4, #45	; 0x2d
 802649a:	d12f      	bne.n	80264fc <_strtoul_l.constprop.0+0x7c>
 802649c:	782c      	ldrb	r4, [r5, #0]
 802649e:	2601      	movs	r6, #1
 80264a0:	1c85      	adds	r5, r0, #2
 80264a2:	2b00      	cmp	r3, #0
 80264a4:	d057      	beq.n	8026556 <_strtoul_l.constprop.0+0xd6>
 80264a6:	2b10      	cmp	r3, #16
 80264a8:	d109      	bne.n	80264be <_strtoul_l.constprop.0+0x3e>
 80264aa:	2c30      	cmp	r4, #48	; 0x30
 80264ac:	d107      	bne.n	80264be <_strtoul_l.constprop.0+0x3e>
 80264ae:	7828      	ldrb	r0, [r5, #0]
 80264b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80264b4:	2858      	cmp	r0, #88	; 0x58
 80264b6:	d149      	bne.n	802654c <_strtoul_l.constprop.0+0xcc>
 80264b8:	786c      	ldrb	r4, [r5, #1]
 80264ba:	2310      	movs	r3, #16
 80264bc:	3502      	adds	r5, #2
 80264be:	f04f 38ff 	mov.w	r8, #4294967295
 80264c2:	2700      	movs	r7, #0
 80264c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80264c8:	fb03 f908 	mul.w	r9, r3, r8
 80264cc:	ea6f 0909 	mvn.w	r9, r9
 80264d0:	4638      	mov	r0, r7
 80264d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80264d6:	f1bc 0f09 	cmp.w	ip, #9
 80264da:	d814      	bhi.n	8026506 <_strtoul_l.constprop.0+0x86>
 80264dc:	4664      	mov	r4, ip
 80264de:	42a3      	cmp	r3, r4
 80264e0:	dd22      	ble.n	8026528 <_strtoul_l.constprop.0+0xa8>
 80264e2:	2f00      	cmp	r7, #0
 80264e4:	db1d      	blt.n	8026522 <_strtoul_l.constprop.0+0xa2>
 80264e6:	4580      	cmp	r8, r0
 80264e8:	d31b      	bcc.n	8026522 <_strtoul_l.constprop.0+0xa2>
 80264ea:	d101      	bne.n	80264f0 <_strtoul_l.constprop.0+0x70>
 80264ec:	45a1      	cmp	r9, r4
 80264ee:	db18      	blt.n	8026522 <_strtoul_l.constprop.0+0xa2>
 80264f0:	fb00 4003 	mla	r0, r0, r3, r4
 80264f4:	2701      	movs	r7, #1
 80264f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80264fa:	e7ea      	b.n	80264d2 <_strtoul_l.constprop.0+0x52>
 80264fc:	2c2b      	cmp	r4, #43	; 0x2b
 80264fe:	bf04      	itt	eq
 8026500:	782c      	ldrbeq	r4, [r5, #0]
 8026502:	1c85      	addeq	r5, r0, #2
 8026504:	e7cd      	b.n	80264a2 <_strtoul_l.constprop.0+0x22>
 8026506:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802650a:	f1bc 0f19 	cmp.w	ip, #25
 802650e:	d801      	bhi.n	8026514 <_strtoul_l.constprop.0+0x94>
 8026510:	3c37      	subs	r4, #55	; 0x37
 8026512:	e7e4      	b.n	80264de <_strtoul_l.constprop.0+0x5e>
 8026514:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8026518:	f1bc 0f19 	cmp.w	ip, #25
 802651c:	d804      	bhi.n	8026528 <_strtoul_l.constprop.0+0xa8>
 802651e:	3c57      	subs	r4, #87	; 0x57
 8026520:	e7dd      	b.n	80264de <_strtoul_l.constprop.0+0x5e>
 8026522:	f04f 37ff 	mov.w	r7, #4294967295
 8026526:	e7e6      	b.n	80264f6 <_strtoul_l.constprop.0+0x76>
 8026528:	2f00      	cmp	r7, #0
 802652a:	da07      	bge.n	802653c <_strtoul_l.constprop.0+0xbc>
 802652c:	2322      	movs	r3, #34	; 0x22
 802652e:	f8ce 3000 	str.w	r3, [lr]
 8026532:	f04f 30ff 	mov.w	r0, #4294967295
 8026536:	b932      	cbnz	r2, 8026546 <_strtoul_l.constprop.0+0xc6>
 8026538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802653c:	b106      	cbz	r6, 8026540 <_strtoul_l.constprop.0+0xc0>
 802653e:	4240      	negs	r0, r0
 8026540:	2a00      	cmp	r2, #0
 8026542:	d0f9      	beq.n	8026538 <_strtoul_l.constprop.0+0xb8>
 8026544:	b107      	cbz	r7, 8026548 <_strtoul_l.constprop.0+0xc8>
 8026546:	1e69      	subs	r1, r5, #1
 8026548:	6011      	str	r1, [r2, #0]
 802654a:	e7f5      	b.n	8026538 <_strtoul_l.constprop.0+0xb8>
 802654c:	2430      	movs	r4, #48	; 0x30
 802654e:	2b00      	cmp	r3, #0
 8026550:	d1b5      	bne.n	80264be <_strtoul_l.constprop.0+0x3e>
 8026552:	2308      	movs	r3, #8
 8026554:	e7b3      	b.n	80264be <_strtoul_l.constprop.0+0x3e>
 8026556:	2c30      	cmp	r4, #48	; 0x30
 8026558:	d0a9      	beq.n	80264ae <_strtoul_l.constprop.0+0x2e>
 802655a:	230a      	movs	r3, #10
 802655c:	e7af      	b.n	80264be <_strtoul_l.constprop.0+0x3e>
 802655e:	bf00      	nop
 8026560:	08045bb1 	.word	0x08045bb1

08026564 <_strtoul_r>:
 8026564:	f7ff bf8c 	b.w	8026480 <_strtoul_l.constprop.0>

08026568 <strtoul>:
 8026568:	4613      	mov	r3, r2
 802656a:	460a      	mov	r2, r1
 802656c:	4601      	mov	r1, r0
 802656e:	4802      	ldr	r0, [pc, #8]	; (8026578 <strtoul+0x10>)
 8026570:	6800      	ldr	r0, [r0, #0]
 8026572:	f7ff bf85 	b.w	8026480 <_strtoul_l.constprop.0>
 8026576:	bf00      	nop
 8026578:	20000490 	.word	0x20000490

0802657c <__tzcalc_limits>:
 802657c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026580:	4605      	mov	r5, r0
 8026582:	f001 fab1 	bl	8027ae8 <__gettzinfo>
 8026586:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802658a:	429d      	cmp	r5, r3
 802658c:	f340 8099 	ble.w	80266c2 <__tzcalc_limits+0x146>
 8026590:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8026594:	18ac      	adds	r4, r5, r2
 8026596:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802659a:	f240 126d 	movw	r2, #365	; 0x16d
 802659e:	10a4      	asrs	r4, r4, #2
 80265a0:	fb02 4403 	mla	r4, r2, r3, r4
 80265a4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80265a8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 80265ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80265b0:	441c      	add	r4, r3
 80265b2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80265b6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 80265ba:	fb95 fcf3 	sdiv	ip, r5, r3
 80265be:	fb03 5c1c 	mls	ip, r3, ip, r5
 80265c2:	186a      	adds	r2, r5, r1
 80265c4:	fabc f68c 	clz	r6, ip
 80265c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80265cc:	f005 0303 	and.w	r3, r5, #3
 80265d0:	4414      	add	r4, r2
 80265d2:	2264      	movs	r2, #100	; 0x64
 80265d4:	6045      	str	r5, [r0, #4]
 80265d6:	fb95 f7f2 	sdiv	r7, r5, r2
 80265da:	0976      	lsrs	r6, r6, #5
 80265dc:	fb02 5717 	mls	r7, r2, r7, r5
 80265e0:	4601      	mov	r1, r0
 80265e2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80265e6:	9300      	str	r3, [sp, #0]
 80265e8:	f04f 0a07 	mov.w	sl, #7
 80265ec:	7a0d      	ldrb	r5, [r1, #8]
 80265ee:	694b      	ldr	r3, [r1, #20]
 80265f0:	2d4a      	cmp	r5, #74	; 0x4a
 80265f2:	d12d      	bne.n	8026650 <__tzcalc_limits+0xd4>
 80265f4:	9a00      	ldr	r2, [sp, #0]
 80265f6:	eb04 0e03 	add.w	lr, r4, r3
 80265fa:	b902      	cbnz	r2, 80265fe <__tzcalc_limits+0x82>
 80265fc:	b917      	cbnz	r7, 8026604 <__tzcalc_limits+0x88>
 80265fe:	f1bc 0f00 	cmp.w	ip, #0
 8026602:	d123      	bne.n	802664c <__tzcalc_limits+0xd0>
 8026604:	2b3b      	cmp	r3, #59	; 0x3b
 8026606:	bfd4      	ite	le
 8026608:	2300      	movle	r3, #0
 802660a:	2301      	movgt	r3, #1
 802660c:	4473      	add	r3, lr
 802660e:	3b01      	subs	r3, #1
 8026610:	698d      	ldr	r5, [r1, #24]
 8026612:	4a2d      	ldr	r2, [pc, #180]	; (80266c8 <__tzcalc_limits+0x14c>)
 8026614:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8026618:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802661c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802661e:	18ed      	adds	r5, r5, r3
 8026620:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8026624:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8026628:	3128      	adds	r1, #40	; 0x28
 802662a:	458b      	cmp	fp, r1
 802662c:	d1de      	bne.n	80265ec <__tzcalc_limits+0x70>
 802662e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8026632:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8026636:	428c      	cmp	r4, r1
 8026638:	eb72 0303 	sbcs.w	r3, r2, r3
 802663c:	bfb4      	ite	lt
 802663e:	2301      	movlt	r3, #1
 8026640:	2300      	movge	r3, #0
 8026642:	6003      	str	r3, [r0, #0]
 8026644:	2001      	movs	r0, #1
 8026646:	b003      	add	sp, #12
 8026648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802664c:	2300      	movs	r3, #0
 802664e:	e7dd      	b.n	802660c <__tzcalc_limits+0x90>
 8026650:	2d44      	cmp	r5, #68	; 0x44
 8026652:	d101      	bne.n	8026658 <__tzcalc_limits+0xdc>
 8026654:	4423      	add	r3, r4
 8026656:	e7db      	b.n	8026610 <__tzcalc_limits+0x94>
 8026658:	9a00      	ldr	r2, [sp, #0]
 802665a:	bb62      	cbnz	r2, 80266b6 <__tzcalc_limits+0x13a>
 802665c:	2f00      	cmp	r7, #0
 802665e:	bf0c      	ite	eq
 8026660:	4635      	moveq	r5, r6
 8026662:	2501      	movne	r5, #1
 8026664:	68ca      	ldr	r2, [r1, #12]
 8026666:	9201      	str	r2, [sp, #4]
 8026668:	4a18      	ldr	r2, [pc, #96]	; (80266cc <__tzcalc_limits+0x150>)
 802666a:	f04f 0930 	mov.w	r9, #48	; 0x30
 802666e:	fb09 2505 	mla	r5, r9, r5, r2
 8026672:	46a6      	mov	lr, r4
 8026674:	f04f 0800 	mov.w	r8, #0
 8026678:	3d04      	subs	r5, #4
 802667a:	9a01      	ldr	r2, [sp, #4]
 802667c:	f108 0801 	add.w	r8, r8, #1
 8026680:	4542      	cmp	r2, r8
 8026682:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8026686:	dc18      	bgt.n	80266ba <__tzcalc_limits+0x13e>
 8026688:	f10e 0504 	add.w	r5, lr, #4
 802668c:	fb95 f8fa 	sdiv	r8, r5, sl
 8026690:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8026694:	eba5 0808 	sub.w	r8, r5, r8
 8026698:	ebb3 0808 	subs.w	r8, r3, r8
 802669c:	690b      	ldr	r3, [r1, #16]
 802669e:	f103 33ff 	add.w	r3, r3, #4294967295
 80266a2:	bf48      	it	mi
 80266a4:	f108 0807 	addmi.w	r8, r8, #7
 80266a8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80266ac:	4443      	add	r3, r8
 80266ae:	454b      	cmp	r3, r9
 80266b0:	da05      	bge.n	80266be <__tzcalc_limits+0x142>
 80266b2:	4473      	add	r3, lr
 80266b4:	e7ac      	b.n	8026610 <__tzcalc_limits+0x94>
 80266b6:	4635      	mov	r5, r6
 80266b8:	e7d4      	b.n	8026664 <__tzcalc_limits+0xe8>
 80266ba:	44ce      	add	lr, r9
 80266bc:	e7dd      	b.n	802667a <__tzcalc_limits+0xfe>
 80266be:	3b07      	subs	r3, #7
 80266c0:	e7f5      	b.n	80266ae <__tzcalc_limits+0x132>
 80266c2:	2000      	movs	r0, #0
 80266c4:	e7bf      	b.n	8026646 <__tzcalc_limits+0xca>
 80266c6:	bf00      	nop
 80266c8:	00015180 	.word	0x00015180
 80266cc:	08045dec 	.word	0x08045dec

080266d0 <__tz_lock>:
 80266d0:	4801      	ldr	r0, [pc, #4]	; (80266d8 <__tz_lock+0x8>)
 80266d2:	f7fd be74 	b.w	80243be <__retarget_lock_acquire>
 80266d6:	bf00      	nop
 80266d8:	2002fd50 	.word	0x2002fd50

080266dc <__tz_unlock>:
 80266dc:	4801      	ldr	r0, [pc, #4]	; (80266e4 <__tz_unlock+0x8>)
 80266de:	f7fd be70 	b.w	80243c2 <__retarget_lock_release>
 80266e2:	bf00      	nop
 80266e4:	2002fd50 	.word	0x2002fd50

080266e8 <_tzset_unlocked>:
 80266e8:	4b01      	ldr	r3, [pc, #4]	; (80266f0 <_tzset_unlocked+0x8>)
 80266ea:	6818      	ldr	r0, [r3, #0]
 80266ec:	f000 b802 	b.w	80266f4 <_tzset_unlocked_r>
 80266f0:	20000490 	.word	0x20000490

080266f4 <_tzset_unlocked_r>:
 80266f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266f8:	b08d      	sub	sp, #52	; 0x34
 80266fa:	4607      	mov	r7, r0
 80266fc:	f001 f9f4 	bl	8027ae8 <__gettzinfo>
 8026700:	49b0      	ldr	r1, [pc, #704]	; (80269c4 <_tzset_unlocked_r+0x2d0>)
 8026702:	4eb1      	ldr	r6, [pc, #708]	; (80269c8 <_tzset_unlocked_r+0x2d4>)
 8026704:	4605      	mov	r5, r0
 8026706:	4638      	mov	r0, r7
 8026708:	f001 f9e6 	bl	8027ad8 <_getenv_r>
 802670c:	4604      	mov	r4, r0
 802670e:	b970      	cbnz	r0, 802672e <_tzset_unlocked_r+0x3a>
 8026710:	4bae      	ldr	r3, [pc, #696]	; (80269cc <_tzset_unlocked_r+0x2d8>)
 8026712:	4aaf      	ldr	r2, [pc, #700]	; (80269d0 <_tzset_unlocked_r+0x2dc>)
 8026714:	6018      	str	r0, [r3, #0]
 8026716:	4baf      	ldr	r3, [pc, #700]	; (80269d4 <_tzset_unlocked_r+0x2e0>)
 8026718:	6018      	str	r0, [r3, #0]
 802671a:	4baf      	ldr	r3, [pc, #700]	; (80269d8 <_tzset_unlocked_r+0x2e4>)
 802671c:	6830      	ldr	r0, [r6, #0]
 802671e:	e9c3 2200 	strd	r2, r2, [r3]
 8026722:	f7fd fe59 	bl	80243d8 <free>
 8026726:	6034      	str	r4, [r6, #0]
 8026728:	b00d      	add	sp, #52	; 0x34
 802672a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802672e:	6831      	ldr	r1, [r6, #0]
 8026730:	2900      	cmp	r1, #0
 8026732:	d162      	bne.n	80267fa <_tzset_unlocked_r+0x106>
 8026734:	6830      	ldr	r0, [r6, #0]
 8026736:	f7fd fe4f 	bl	80243d8 <free>
 802673a:	4620      	mov	r0, r4
 802673c:	f7d9 fd8a 	bl	8000254 <strlen>
 8026740:	1c41      	adds	r1, r0, #1
 8026742:	4638      	mov	r0, r7
 8026744:	f7fe f96e 	bl	8024a24 <_malloc_r>
 8026748:	6030      	str	r0, [r6, #0]
 802674a:	2800      	cmp	r0, #0
 802674c:	d15a      	bne.n	8026804 <_tzset_unlocked_r+0x110>
 802674e:	7823      	ldrb	r3, [r4, #0]
 8026750:	4aa2      	ldr	r2, [pc, #648]	; (80269dc <_tzset_unlocked_r+0x2e8>)
 8026752:	49a3      	ldr	r1, [pc, #652]	; (80269e0 <_tzset_unlocked_r+0x2ec>)
 8026754:	2b3a      	cmp	r3, #58	; 0x3a
 8026756:	bf08      	it	eq
 8026758:	3401      	addeq	r4, #1
 802675a:	ae0a      	add	r6, sp, #40	; 0x28
 802675c:	4633      	mov	r3, r6
 802675e:	4620      	mov	r0, r4
 8026760:	f7ff f822 	bl	80257a8 <siscanf>
 8026764:	2800      	cmp	r0, #0
 8026766:	dddf      	ble.n	8026728 <_tzset_unlocked_r+0x34>
 8026768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802676a:	18e7      	adds	r7, r4, r3
 802676c:	5ce3      	ldrb	r3, [r4, r3]
 802676e:	2b2d      	cmp	r3, #45	; 0x2d
 8026770:	d14c      	bne.n	802680c <_tzset_unlocked_r+0x118>
 8026772:	3701      	adds	r7, #1
 8026774:	f04f 38ff 	mov.w	r8, #4294967295
 8026778:	f10d 0a20 	add.w	sl, sp, #32
 802677c:	f10d 0b1e 	add.w	fp, sp, #30
 8026780:	2400      	movs	r4, #0
 8026782:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8026786:	4997      	ldr	r1, [pc, #604]	; (80269e4 <_tzset_unlocked_r+0x2f0>)
 8026788:	9603      	str	r6, [sp, #12]
 802678a:	f8cd b000 	str.w	fp, [sp]
 802678e:	4633      	mov	r3, r6
 8026790:	aa07      	add	r2, sp, #28
 8026792:	4638      	mov	r0, r7
 8026794:	f8ad 401e 	strh.w	r4, [sp, #30]
 8026798:	f8ad 4020 	strh.w	r4, [sp, #32]
 802679c:	f7ff f804 	bl	80257a8 <siscanf>
 80267a0:	42a0      	cmp	r0, r4
 80267a2:	ddc1      	ble.n	8026728 <_tzset_unlocked_r+0x34>
 80267a4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80267a8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80267ac:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80269f0 <_tzset_unlocked_r+0x2fc>
 80267b0:	213c      	movs	r1, #60	; 0x3c
 80267b2:	fb01 3302 	mla	r3, r1, r2, r3
 80267b6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80267ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80267be:	fb01 3302 	mla	r3, r1, r2, r3
 80267c2:	fb08 f303 	mul.w	r3, r8, r3
 80267c6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80269d8 <_tzset_unlocked_r+0x2e4>
 80267ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80267cc:	4b83      	ldr	r3, [pc, #524]	; (80269dc <_tzset_unlocked_r+0x2e8>)
 80267ce:	f8c8 3000 	str.w	r3, [r8]
 80267d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80267d4:	4982      	ldr	r1, [pc, #520]	; (80269e0 <_tzset_unlocked_r+0x2ec>)
 80267d6:	441f      	add	r7, r3
 80267d8:	464a      	mov	r2, r9
 80267da:	4633      	mov	r3, r6
 80267dc:	4638      	mov	r0, r7
 80267de:	f7fe ffe3 	bl	80257a8 <siscanf>
 80267e2:	42a0      	cmp	r0, r4
 80267e4:	dc18      	bgt.n	8026818 <_tzset_unlocked_r+0x124>
 80267e6:	f8d8 3000 	ldr.w	r3, [r8]
 80267ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80267ee:	4b77      	ldr	r3, [pc, #476]	; (80269cc <_tzset_unlocked_r+0x2d8>)
 80267f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80267f2:	601a      	str	r2, [r3, #0]
 80267f4:	4b77      	ldr	r3, [pc, #476]	; (80269d4 <_tzset_unlocked_r+0x2e0>)
 80267f6:	601c      	str	r4, [r3, #0]
 80267f8:	e796      	b.n	8026728 <_tzset_unlocked_r+0x34>
 80267fa:	f7d9 fd21 	bl	8000240 <strcmp>
 80267fe:	2800      	cmp	r0, #0
 8026800:	d198      	bne.n	8026734 <_tzset_unlocked_r+0x40>
 8026802:	e791      	b.n	8026728 <_tzset_unlocked_r+0x34>
 8026804:	4621      	mov	r1, r4
 8026806:	f7ff f856 	bl	80258b6 <strcpy>
 802680a:	e7a0      	b.n	802674e <_tzset_unlocked_r+0x5a>
 802680c:	2b2b      	cmp	r3, #43	; 0x2b
 802680e:	bf08      	it	eq
 8026810:	3701      	addeq	r7, #1
 8026812:	f04f 0801 	mov.w	r8, #1
 8026816:	e7af      	b.n	8026778 <_tzset_unlocked_r+0x84>
 8026818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802681a:	f8c8 9004 	str.w	r9, [r8, #4]
 802681e:	18fc      	adds	r4, r7, r3
 8026820:	5cfb      	ldrb	r3, [r7, r3]
 8026822:	2b2d      	cmp	r3, #45	; 0x2d
 8026824:	f040 808b 	bne.w	802693e <_tzset_unlocked_r+0x24a>
 8026828:	3401      	adds	r4, #1
 802682a:	f04f 37ff 	mov.w	r7, #4294967295
 802682e:	2300      	movs	r3, #0
 8026830:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026834:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026838:	f8ad 3020 	strh.w	r3, [sp, #32]
 802683c:	930a      	str	r3, [sp, #40]	; 0x28
 802683e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8026842:	e9cd b600 	strd	fp, r6, [sp]
 8026846:	4967      	ldr	r1, [pc, #412]	; (80269e4 <_tzset_unlocked_r+0x2f0>)
 8026848:	4633      	mov	r3, r6
 802684a:	aa07      	add	r2, sp, #28
 802684c:	4620      	mov	r0, r4
 802684e:	f7fe ffab 	bl	80257a8 <siscanf>
 8026852:	2800      	cmp	r0, #0
 8026854:	dc78      	bgt.n	8026948 <_tzset_unlocked_r+0x254>
 8026856:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8026858:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802685c:	652b      	str	r3, [r5, #80]	; 0x50
 802685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026860:	462f      	mov	r7, r5
 8026862:	441c      	add	r4, r3
 8026864:	f04f 0900 	mov.w	r9, #0
 8026868:	7823      	ldrb	r3, [r4, #0]
 802686a:	2b2c      	cmp	r3, #44	; 0x2c
 802686c:	bf08      	it	eq
 802686e:	3401      	addeq	r4, #1
 8026870:	f894 8000 	ldrb.w	r8, [r4]
 8026874:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8026878:	d178      	bne.n	802696c <_tzset_unlocked_r+0x278>
 802687a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802687e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8026882:	ab09      	add	r3, sp, #36	; 0x24
 8026884:	9300      	str	r3, [sp, #0]
 8026886:	4958      	ldr	r1, [pc, #352]	; (80269e8 <_tzset_unlocked_r+0x2f4>)
 8026888:	9603      	str	r6, [sp, #12]
 802688a:	4633      	mov	r3, r6
 802688c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8026890:	4620      	mov	r0, r4
 8026892:	f7fe ff89 	bl	80257a8 <siscanf>
 8026896:	2803      	cmp	r0, #3
 8026898:	f47f af46 	bne.w	8026728 <_tzset_unlocked_r+0x34>
 802689c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80268a0:	1e4b      	subs	r3, r1, #1
 80268a2:	2b0b      	cmp	r3, #11
 80268a4:	f63f af40 	bhi.w	8026728 <_tzset_unlocked_r+0x34>
 80268a8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80268ac:	1e53      	subs	r3, r2, #1
 80268ae:	2b04      	cmp	r3, #4
 80268b0:	f63f af3a 	bhi.w	8026728 <_tzset_unlocked_r+0x34>
 80268b4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80268b8:	2b06      	cmp	r3, #6
 80268ba:	f63f af35 	bhi.w	8026728 <_tzset_unlocked_r+0x34>
 80268be:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80268c2:	f887 8008 	strb.w	r8, [r7, #8]
 80268c6:	617b      	str	r3, [r7, #20]
 80268c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80268ca:	eb04 0803 	add.w	r8, r4, r3
 80268ce:	2302      	movs	r3, #2
 80268d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80268d4:	2300      	movs	r3, #0
 80268d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80268da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80268de:	930a      	str	r3, [sp, #40]	; 0x28
 80268e0:	f898 3000 	ldrb.w	r3, [r8]
 80268e4:	2b2f      	cmp	r3, #47	; 0x2f
 80268e6:	d109      	bne.n	80268fc <_tzset_unlocked_r+0x208>
 80268e8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80268ec:	e9cd b600 	strd	fp, r6, [sp]
 80268f0:	493e      	ldr	r1, [pc, #248]	; (80269ec <_tzset_unlocked_r+0x2f8>)
 80268f2:	4633      	mov	r3, r6
 80268f4:	aa07      	add	r2, sp, #28
 80268f6:	4640      	mov	r0, r8
 80268f8:	f7fe ff56 	bl	80257a8 <siscanf>
 80268fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026900:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026904:	213c      	movs	r1, #60	; 0x3c
 8026906:	fb01 3302 	mla	r3, r1, r2, r3
 802690a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802690e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8026912:	fb01 3302 	mla	r3, r1, r2, r3
 8026916:	61bb      	str	r3, [r7, #24]
 8026918:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802691a:	3728      	adds	r7, #40	; 0x28
 802691c:	4444      	add	r4, r8
 802691e:	f1b9 0f00 	cmp.w	r9, #0
 8026922:	d020      	beq.n	8026966 <_tzset_unlocked_r+0x272>
 8026924:	6868      	ldr	r0, [r5, #4]
 8026926:	f7ff fe29 	bl	802657c <__tzcalc_limits>
 802692a:	4b28      	ldr	r3, [pc, #160]	; (80269cc <_tzset_unlocked_r+0x2d8>)
 802692c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802692e:	601a      	str	r2, [r3, #0]
 8026930:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8026932:	1a9b      	subs	r3, r3, r2
 8026934:	4a27      	ldr	r2, [pc, #156]	; (80269d4 <_tzset_unlocked_r+0x2e0>)
 8026936:	bf18      	it	ne
 8026938:	2301      	movne	r3, #1
 802693a:	6013      	str	r3, [r2, #0]
 802693c:	e6f4      	b.n	8026728 <_tzset_unlocked_r+0x34>
 802693e:	2b2b      	cmp	r3, #43	; 0x2b
 8026940:	bf08      	it	eq
 8026942:	3401      	addeq	r4, #1
 8026944:	2701      	movs	r7, #1
 8026946:	e772      	b.n	802682e <_tzset_unlocked_r+0x13a>
 8026948:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802694c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026950:	213c      	movs	r1, #60	; 0x3c
 8026952:	fb01 3302 	mla	r3, r1, r2, r3
 8026956:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802695a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802695e:	fb01 3302 	mla	r3, r1, r2, r3
 8026962:	437b      	muls	r3, r7
 8026964:	e77a      	b.n	802685c <_tzset_unlocked_r+0x168>
 8026966:	f04f 0901 	mov.w	r9, #1
 802696a:	e77d      	b.n	8026868 <_tzset_unlocked_r+0x174>
 802696c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8026970:	bf06      	itte	eq
 8026972:	3401      	addeq	r4, #1
 8026974:	4643      	moveq	r3, r8
 8026976:	2344      	movne	r3, #68	; 0x44
 8026978:	220a      	movs	r2, #10
 802697a:	a90b      	add	r1, sp, #44	; 0x2c
 802697c:	4620      	mov	r0, r4
 802697e:	9305      	str	r3, [sp, #20]
 8026980:	f7ff fdf2 	bl	8026568 <strtoul>
 8026984:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8026988:	9b05      	ldr	r3, [sp, #20]
 802698a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802698e:	45a0      	cmp	r8, r4
 8026990:	d114      	bne.n	80269bc <_tzset_unlocked_r+0x2c8>
 8026992:	234d      	movs	r3, #77	; 0x4d
 8026994:	f1b9 0f00 	cmp.w	r9, #0
 8026998:	d107      	bne.n	80269aa <_tzset_unlocked_r+0x2b6>
 802699a:	722b      	strb	r3, [r5, #8]
 802699c:	2103      	movs	r1, #3
 802699e:	2302      	movs	r3, #2
 80269a0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80269a4:	f8c5 9014 	str.w	r9, [r5, #20]
 80269a8:	e791      	b.n	80268ce <_tzset_unlocked_r+0x1da>
 80269aa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80269ae:	220b      	movs	r2, #11
 80269b0:	2301      	movs	r3, #1
 80269b2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80269b6:	2300      	movs	r3, #0
 80269b8:	63eb      	str	r3, [r5, #60]	; 0x3c
 80269ba:	e788      	b.n	80268ce <_tzset_unlocked_r+0x1da>
 80269bc:	b280      	uxth	r0, r0
 80269be:	723b      	strb	r3, [r7, #8]
 80269c0:	6178      	str	r0, [r7, #20]
 80269c2:	e784      	b.n	80268ce <_tzset_unlocked_r+0x1da>
 80269c4:	0804615c 	.word	0x0804615c
 80269c8:	2002fd78 	.word	0x2002fd78
 80269cc:	2002fd80 	.word	0x2002fd80
 80269d0:	0804615f 	.word	0x0804615f
 80269d4:	2002fd7c 	.word	0x2002fd7c
 80269d8:	200004f4 	.word	0x200004f4
 80269dc:	2002fd6b 	.word	0x2002fd6b
 80269e0:	08046163 	.word	0x08046163
 80269e4:	08046186 	.word	0x08046186
 80269e8:	08046172 	.word	0x08046172
 80269ec:	08046185 	.word	0x08046185
 80269f0:	2002fd60 	.word	0x2002fd60

080269f4 <__swbuf_r>:
 80269f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80269f6:	460e      	mov	r6, r1
 80269f8:	4614      	mov	r4, r2
 80269fa:	4605      	mov	r5, r0
 80269fc:	b118      	cbz	r0, 8026a06 <__swbuf_r+0x12>
 80269fe:	6983      	ldr	r3, [r0, #24]
 8026a00:	b90b      	cbnz	r3, 8026a06 <__swbuf_r+0x12>
 8026a02:	f7fd fb07 	bl	8024014 <__sinit>
 8026a06:	4b21      	ldr	r3, [pc, #132]	; (8026a8c <__swbuf_r+0x98>)
 8026a08:	429c      	cmp	r4, r3
 8026a0a:	d12b      	bne.n	8026a64 <__swbuf_r+0x70>
 8026a0c:	686c      	ldr	r4, [r5, #4]
 8026a0e:	69a3      	ldr	r3, [r4, #24]
 8026a10:	60a3      	str	r3, [r4, #8]
 8026a12:	89a3      	ldrh	r3, [r4, #12]
 8026a14:	071a      	lsls	r2, r3, #28
 8026a16:	d52f      	bpl.n	8026a78 <__swbuf_r+0x84>
 8026a18:	6923      	ldr	r3, [r4, #16]
 8026a1a:	b36b      	cbz	r3, 8026a78 <__swbuf_r+0x84>
 8026a1c:	6923      	ldr	r3, [r4, #16]
 8026a1e:	6820      	ldr	r0, [r4, #0]
 8026a20:	1ac0      	subs	r0, r0, r3
 8026a22:	6963      	ldr	r3, [r4, #20]
 8026a24:	b2f6      	uxtb	r6, r6
 8026a26:	4283      	cmp	r3, r0
 8026a28:	4637      	mov	r7, r6
 8026a2a:	dc04      	bgt.n	8026a36 <__swbuf_r+0x42>
 8026a2c:	4621      	mov	r1, r4
 8026a2e:	4628      	mov	r0, r5
 8026a30:	f000 ffc8 	bl	80279c4 <_fflush_r>
 8026a34:	bb30      	cbnz	r0, 8026a84 <__swbuf_r+0x90>
 8026a36:	68a3      	ldr	r3, [r4, #8]
 8026a38:	3b01      	subs	r3, #1
 8026a3a:	60a3      	str	r3, [r4, #8]
 8026a3c:	6823      	ldr	r3, [r4, #0]
 8026a3e:	1c5a      	adds	r2, r3, #1
 8026a40:	6022      	str	r2, [r4, #0]
 8026a42:	701e      	strb	r6, [r3, #0]
 8026a44:	6963      	ldr	r3, [r4, #20]
 8026a46:	3001      	adds	r0, #1
 8026a48:	4283      	cmp	r3, r0
 8026a4a:	d004      	beq.n	8026a56 <__swbuf_r+0x62>
 8026a4c:	89a3      	ldrh	r3, [r4, #12]
 8026a4e:	07db      	lsls	r3, r3, #31
 8026a50:	d506      	bpl.n	8026a60 <__swbuf_r+0x6c>
 8026a52:	2e0a      	cmp	r6, #10
 8026a54:	d104      	bne.n	8026a60 <__swbuf_r+0x6c>
 8026a56:	4621      	mov	r1, r4
 8026a58:	4628      	mov	r0, r5
 8026a5a:	f000 ffb3 	bl	80279c4 <_fflush_r>
 8026a5e:	b988      	cbnz	r0, 8026a84 <__swbuf_r+0x90>
 8026a60:	4638      	mov	r0, r7
 8026a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026a64:	4b0a      	ldr	r3, [pc, #40]	; (8026a90 <__swbuf_r+0x9c>)
 8026a66:	429c      	cmp	r4, r3
 8026a68:	d101      	bne.n	8026a6e <__swbuf_r+0x7a>
 8026a6a:	68ac      	ldr	r4, [r5, #8]
 8026a6c:	e7cf      	b.n	8026a0e <__swbuf_r+0x1a>
 8026a6e:	4b09      	ldr	r3, [pc, #36]	; (8026a94 <__swbuf_r+0xa0>)
 8026a70:	429c      	cmp	r4, r3
 8026a72:	bf08      	it	eq
 8026a74:	68ec      	ldreq	r4, [r5, #12]
 8026a76:	e7ca      	b.n	8026a0e <__swbuf_r+0x1a>
 8026a78:	4621      	mov	r1, r4
 8026a7a:	4628      	mov	r0, r5
 8026a7c:	f000 f81e 	bl	8026abc <__swsetup_r>
 8026a80:	2800      	cmp	r0, #0
 8026a82:	d0cb      	beq.n	8026a1c <__swbuf_r+0x28>
 8026a84:	f04f 37ff 	mov.w	r7, #4294967295
 8026a88:	e7ea      	b.n	8026a60 <__swbuf_r+0x6c>
 8026a8a:	bf00      	nop
 8026a8c:	08045cd4 	.word	0x08045cd4
 8026a90:	08045cf4 	.word	0x08045cf4
 8026a94:	08045cb4 	.word	0x08045cb4

08026a98 <_write_r>:
 8026a98:	b538      	push	{r3, r4, r5, lr}
 8026a9a:	4d07      	ldr	r5, [pc, #28]	; (8026ab8 <_write_r+0x20>)
 8026a9c:	4604      	mov	r4, r0
 8026a9e:	4608      	mov	r0, r1
 8026aa0:	4611      	mov	r1, r2
 8026aa2:	2200      	movs	r2, #0
 8026aa4:	602a      	str	r2, [r5, #0]
 8026aa6:	461a      	mov	r2, r3
 8026aa8:	f7dc fb72 	bl	8003190 <_write>
 8026aac:	1c43      	adds	r3, r0, #1
 8026aae:	d102      	bne.n	8026ab6 <_write_r+0x1e>
 8026ab0:	682b      	ldr	r3, [r5, #0]
 8026ab2:	b103      	cbz	r3, 8026ab6 <_write_r+0x1e>
 8026ab4:	6023      	str	r3, [r4, #0]
 8026ab6:	bd38      	pop	{r3, r4, r5, pc}
 8026ab8:	2002fd5c 	.word	0x2002fd5c

08026abc <__swsetup_r>:
 8026abc:	4b32      	ldr	r3, [pc, #200]	; (8026b88 <__swsetup_r+0xcc>)
 8026abe:	b570      	push	{r4, r5, r6, lr}
 8026ac0:	681d      	ldr	r5, [r3, #0]
 8026ac2:	4606      	mov	r6, r0
 8026ac4:	460c      	mov	r4, r1
 8026ac6:	b125      	cbz	r5, 8026ad2 <__swsetup_r+0x16>
 8026ac8:	69ab      	ldr	r3, [r5, #24]
 8026aca:	b913      	cbnz	r3, 8026ad2 <__swsetup_r+0x16>
 8026acc:	4628      	mov	r0, r5
 8026ace:	f7fd faa1 	bl	8024014 <__sinit>
 8026ad2:	4b2e      	ldr	r3, [pc, #184]	; (8026b8c <__swsetup_r+0xd0>)
 8026ad4:	429c      	cmp	r4, r3
 8026ad6:	d10f      	bne.n	8026af8 <__swsetup_r+0x3c>
 8026ad8:	686c      	ldr	r4, [r5, #4]
 8026ada:	89a3      	ldrh	r3, [r4, #12]
 8026adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026ae0:	0719      	lsls	r1, r3, #28
 8026ae2:	d42c      	bmi.n	8026b3e <__swsetup_r+0x82>
 8026ae4:	06dd      	lsls	r5, r3, #27
 8026ae6:	d411      	bmi.n	8026b0c <__swsetup_r+0x50>
 8026ae8:	2309      	movs	r3, #9
 8026aea:	6033      	str	r3, [r6, #0]
 8026aec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026af0:	81a3      	strh	r3, [r4, #12]
 8026af2:	f04f 30ff 	mov.w	r0, #4294967295
 8026af6:	e03e      	b.n	8026b76 <__swsetup_r+0xba>
 8026af8:	4b25      	ldr	r3, [pc, #148]	; (8026b90 <__swsetup_r+0xd4>)
 8026afa:	429c      	cmp	r4, r3
 8026afc:	d101      	bne.n	8026b02 <__swsetup_r+0x46>
 8026afe:	68ac      	ldr	r4, [r5, #8]
 8026b00:	e7eb      	b.n	8026ada <__swsetup_r+0x1e>
 8026b02:	4b24      	ldr	r3, [pc, #144]	; (8026b94 <__swsetup_r+0xd8>)
 8026b04:	429c      	cmp	r4, r3
 8026b06:	bf08      	it	eq
 8026b08:	68ec      	ldreq	r4, [r5, #12]
 8026b0a:	e7e6      	b.n	8026ada <__swsetup_r+0x1e>
 8026b0c:	0758      	lsls	r0, r3, #29
 8026b0e:	d512      	bpl.n	8026b36 <__swsetup_r+0x7a>
 8026b10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026b12:	b141      	cbz	r1, 8026b26 <__swsetup_r+0x6a>
 8026b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026b18:	4299      	cmp	r1, r3
 8026b1a:	d002      	beq.n	8026b22 <__swsetup_r+0x66>
 8026b1c:	4630      	mov	r0, r6
 8026b1e:	f7fd ff15 	bl	802494c <_free_r>
 8026b22:	2300      	movs	r3, #0
 8026b24:	6363      	str	r3, [r4, #52]	; 0x34
 8026b26:	89a3      	ldrh	r3, [r4, #12]
 8026b28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026b2c:	81a3      	strh	r3, [r4, #12]
 8026b2e:	2300      	movs	r3, #0
 8026b30:	6063      	str	r3, [r4, #4]
 8026b32:	6923      	ldr	r3, [r4, #16]
 8026b34:	6023      	str	r3, [r4, #0]
 8026b36:	89a3      	ldrh	r3, [r4, #12]
 8026b38:	f043 0308 	orr.w	r3, r3, #8
 8026b3c:	81a3      	strh	r3, [r4, #12]
 8026b3e:	6923      	ldr	r3, [r4, #16]
 8026b40:	b94b      	cbnz	r3, 8026b56 <__swsetup_r+0x9a>
 8026b42:	89a3      	ldrh	r3, [r4, #12]
 8026b44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8026b4c:	d003      	beq.n	8026b56 <__swsetup_r+0x9a>
 8026b4e:	4621      	mov	r1, r4
 8026b50:	4630      	mov	r0, r6
 8026b52:	f001 f8b9 	bl	8027cc8 <__smakebuf_r>
 8026b56:	89a0      	ldrh	r0, [r4, #12]
 8026b58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026b5c:	f010 0301 	ands.w	r3, r0, #1
 8026b60:	d00a      	beq.n	8026b78 <__swsetup_r+0xbc>
 8026b62:	2300      	movs	r3, #0
 8026b64:	60a3      	str	r3, [r4, #8]
 8026b66:	6963      	ldr	r3, [r4, #20]
 8026b68:	425b      	negs	r3, r3
 8026b6a:	61a3      	str	r3, [r4, #24]
 8026b6c:	6923      	ldr	r3, [r4, #16]
 8026b6e:	b943      	cbnz	r3, 8026b82 <__swsetup_r+0xc6>
 8026b70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026b74:	d1ba      	bne.n	8026aec <__swsetup_r+0x30>
 8026b76:	bd70      	pop	{r4, r5, r6, pc}
 8026b78:	0781      	lsls	r1, r0, #30
 8026b7a:	bf58      	it	pl
 8026b7c:	6963      	ldrpl	r3, [r4, #20]
 8026b7e:	60a3      	str	r3, [r4, #8]
 8026b80:	e7f4      	b.n	8026b6c <__swsetup_r+0xb0>
 8026b82:	2000      	movs	r0, #0
 8026b84:	e7f7      	b.n	8026b76 <__swsetup_r+0xba>
 8026b86:	bf00      	nop
 8026b88:	20000490 	.word	0x20000490
 8026b8c:	08045cd4 	.word	0x08045cd4
 8026b90:	08045cf4 	.word	0x08045cf4
 8026b94:	08045cb4 	.word	0x08045cb4

08026b98 <abs>:
 8026b98:	2800      	cmp	r0, #0
 8026b9a:	bfb8      	it	lt
 8026b9c:	4240      	neglt	r0, r0
 8026b9e:	4770      	bx	lr

08026ba0 <asctime>:
 8026ba0:	4b0d      	ldr	r3, [pc, #52]	; (8026bd8 <asctime+0x38>)
 8026ba2:	b570      	push	{r4, r5, r6, lr}
 8026ba4:	681d      	ldr	r5, [r3, #0]
 8026ba6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8026ba8:	4604      	mov	r4, r0
 8026baa:	b976      	cbnz	r6, 8026bca <asctime+0x2a>
 8026bac:	201a      	movs	r0, #26
 8026bae:	f7fd fc0b 	bl	80243c8 <malloc>
 8026bb2:	4602      	mov	r2, r0
 8026bb4:	6428      	str	r0, [r5, #64]	; 0x40
 8026bb6:	b920      	cbnz	r0, 8026bc2 <asctime+0x22>
 8026bb8:	4b08      	ldr	r3, [pc, #32]	; (8026bdc <asctime+0x3c>)
 8026bba:	4809      	ldr	r0, [pc, #36]	; (8026be0 <asctime+0x40>)
 8026bbc:	2137      	movs	r1, #55	; 0x37
 8026bbe:	f000 f837 	bl	8026c30 <__assert_func>
 8026bc2:	221a      	movs	r2, #26
 8026bc4:	4631      	mov	r1, r6
 8026bc6:	f7fd fc47 	bl	8024458 <memset>
 8026bca:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8026bcc:	4620      	mov	r0, r4
 8026bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026bd2:	f000 b807 	b.w	8026be4 <asctime_r>
 8026bd6:	bf00      	nop
 8026bd8:	20000490 	.word	0x20000490
 8026bdc:	08045d18 	.word	0x08045d18
 8026be0:	08046198 	.word	0x08046198

08026be4 <asctime_r>:
 8026be4:	b510      	push	{r4, lr}
 8026be6:	460c      	mov	r4, r1
 8026be8:	6941      	ldr	r1, [r0, #20]
 8026bea:	6903      	ldr	r3, [r0, #16]
 8026bec:	6982      	ldr	r2, [r0, #24]
 8026bee:	b086      	sub	sp, #24
 8026bf0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8026bf4:	9104      	str	r1, [sp, #16]
 8026bf6:	6801      	ldr	r1, [r0, #0]
 8026bf8:	9103      	str	r1, [sp, #12]
 8026bfa:	6841      	ldr	r1, [r0, #4]
 8026bfc:	9102      	str	r1, [sp, #8]
 8026bfe:	6881      	ldr	r1, [r0, #8]
 8026c00:	9101      	str	r1, [sp, #4]
 8026c02:	68c1      	ldr	r1, [r0, #12]
 8026c04:	9100      	str	r1, [sp, #0]
 8026c06:	4907      	ldr	r1, [pc, #28]	; (8026c24 <asctime_r+0x40>)
 8026c08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8026c0c:	440b      	add	r3, r1
 8026c0e:	4906      	ldr	r1, [pc, #24]	; (8026c28 <asctime_r+0x44>)
 8026c10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8026c14:	440a      	add	r2, r1
 8026c16:	4620      	mov	r0, r4
 8026c18:	4904      	ldr	r1, [pc, #16]	; (8026c2c <asctime_r+0x48>)
 8026c1a:	f7fe fda5 	bl	8025768 <siprintf>
 8026c1e:	4620      	mov	r0, r4
 8026c20:	b006      	add	sp, #24
 8026c22:	bd10      	pop	{r4, pc}
 8026c24:	08046229 	.word	0x08046229
 8026c28:	08046214 	.word	0x08046214
 8026c2c:	080461f4 	.word	0x080461f4

08026c30 <__assert_func>:
 8026c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026c32:	4614      	mov	r4, r2
 8026c34:	461a      	mov	r2, r3
 8026c36:	4b09      	ldr	r3, [pc, #36]	; (8026c5c <__assert_func+0x2c>)
 8026c38:	681b      	ldr	r3, [r3, #0]
 8026c3a:	4605      	mov	r5, r0
 8026c3c:	68d8      	ldr	r0, [r3, #12]
 8026c3e:	b14c      	cbz	r4, 8026c54 <__assert_func+0x24>
 8026c40:	4b07      	ldr	r3, [pc, #28]	; (8026c60 <__assert_func+0x30>)
 8026c42:	9100      	str	r1, [sp, #0]
 8026c44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026c48:	4906      	ldr	r1, [pc, #24]	; (8026c64 <__assert_func+0x34>)
 8026c4a:	462b      	mov	r3, r5
 8026c4c:	f000 fef6 	bl	8027a3c <fiprintf>
 8026c50:	f002 faf0 	bl	8029234 <abort>
 8026c54:	4b04      	ldr	r3, [pc, #16]	; (8026c68 <__assert_func+0x38>)
 8026c56:	461c      	mov	r4, r3
 8026c58:	e7f3      	b.n	8026c42 <__assert_func+0x12>
 8026c5a:	bf00      	nop
 8026c5c:	20000490 	.word	0x20000490
 8026c60:	0804624d 	.word	0x0804624d
 8026c64:	0804625a 	.word	0x0804625a
 8026c68:	08046213 	.word	0x08046213

08026c6c <_close_r>:
 8026c6c:	b538      	push	{r3, r4, r5, lr}
 8026c6e:	4d06      	ldr	r5, [pc, #24]	; (8026c88 <_close_r+0x1c>)
 8026c70:	2300      	movs	r3, #0
 8026c72:	4604      	mov	r4, r0
 8026c74:	4608      	mov	r0, r1
 8026c76:	602b      	str	r3, [r5, #0]
 8026c78:	f7e0 fb76 	bl	8007368 <_close>
 8026c7c:	1c43      	adds	r3, r0, #1
 8026c7e:	d102      	bne.n	8026c86 <_close_r+0x1a>
 8026c80:	682b      	ldr	r3, [r5, #0]
 8026c82:	b103      	cbz	r3, 8026c86 <_close_r+0x1a>
 8026c84:	6023      	str	r3, [r4, #0]
 8026c86:	bd38      	pop	{r3, r4, r5, pc}
 8026c88:	2002fd5c 	.word	0x2002fd5c

08026c8c <div>:
 8026c8c:	2900      	cmp	r1, #0
 8026c8e:	b510      	push	{r4, lr}
 8026c90:	fb91 f4f2 	sdiv	r4, r1, r2
 8026c94:	fb02 1314 	mls	r3, r2, r4, r1
 8026c98:	db06      	blt.n	8026ca8 <div+0x1c>
 8026c9a:	2b00      	cmp	r3, #0
 8026c9c:	da01      	bge.n	8026ca2 <div+0x16>
 8026c9e:	3401      	adds	r4, #1
 8026ca0:	1a9b      	subs	r3, r3, r2
 8026ca2:	e9c0 4300 	strd	r4, r3, [r0]
 8026ca6:	bd10      	pop	{r4, pc}
 8026ca8:	2b00      	cmp	r3, #0
 8026caa:	bfc4      	itt	gt
 8026cac:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8026cb0:	189b      	addgt	r3, r3, r2
 8026cb2:	e7f6      	b.n	8026ca2 <div+0x16>

08026cb4 <quorem>:
 8026cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cb8:	6903      	ldr	r3, [r0, #16]
 8026cba:	690c      	ldr	r4, [r1, #16]
 8026cbc:	42a3      	cmp	r3, r4
 8026cbe:	4607      	mov	r7, r0
 8026cc0:	f2c0 8081 	blt.w	8026dc6 <quorem+0x112>
 8026cc4:	3c01      	subs	r4, #1
 8026cc6:	f101 0814 	add.w	r8, r1, #20
 8026cca:	f100 0514 	add.w	r5, r0, #20
 8026cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026cd2:	9301      	str	r3, [sp, #4]
 8026cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026cdc:	3301      	adds	r3, #1
 8026cde:	429a      	cmp	r2, r3
 8026ce0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8026cec:	d331      	bcc.n	8026d52 <quorem+0x9e>
 8026cee:	f04f 0e00 	mov.w	lr, #0
 8026cf2:	4640      	mov	r0, r8
 8026cf4:	46ac      	mov	ip, r5
 8026cf6:	46f2      	mov	sl, lr
 8026cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8026cfc:	b293      	uxth	r3, r2
 8026cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8026d02:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026d06:	b29b      	uxth	r3, r3
 8026d08:	ebaa 0303 	sub.w	r3, sl, r3
 8026d0c:	f8dc a000 	ldr.w	sl, [ip]
 8026d10:	0c12      	lsrs	r2, r2, #16
 8026d12:	fa13 f38a 	uxtah	r3, r3, sl
 8026d16:	fb06 e202 	mla	r2, r6, r2, lr
 8026d1a:	9300      	str	r3, [sp, #0]
 8026d1c:	9b00      	ldr	r3, [sp, #0]
 8026d1e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026d22:	b292      	uxth	r2, r2
 8026d24:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026d28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026d2c:	f8bd 3000 	ldrh.w	r3, [sp]
 8026d30:	4581      	cmp	r9, r0
 8026d32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026d36:	f84c 3b04 	str.w	r3, [ip], #4
 8026d3a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8026d3e:	d2db      	bcs.n	8026cf8 <quorem+0x44>
 8026d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8026d44:	b92b      	cbnz	r3, 8026d52 <quorem+0x9e>
 8026d46:	9b01      	ldr	r3, [sp, #4]
 8026d48:	3b04      	subs	r3, #4
 8026d4a:	429d      	cmp	r5, r3
 8026d4c:	461a      	mov	r2, r3
 8026d4e:	d32e      	bcc.n	8026dae <quorem+0xfa>
 8026d50:	613c      	str	r4, [r7, #16]
 8026d52:	4638      	mov	r0, r7
 8026d54:	f001 fa86 	bl	8028264 <__mcmp>
 8026d58:	2800      	cmp	r0, #0
 8026d5a:	db24      	blt.n	8026da6 <quorem+0xf2>
 8026d5c:	3601      	adds	r6, #1
 8026d5e:	4628      	mov	r0, r5
 8026d60:	f04f 0c00 	mov.w	ip, #0
 8026d64:	f858 2b04 	ldr.w	r2, [r8], #4
 8026d68:	f8d0 e000 	ldr.w	lr, [r0]
 8026d6c:	b293      	uxth	r3, r2
 8026d6e:	ebac 0303 	sub.w	r3, ip, r3
 8026d72:	0c12      	lsrs	r2, r2, #16
 8026d74:	fa13 f38e 	uxtah	r3, r3, lr
 8026d78:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8026d7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026d80:	b29b      	uxth	r3, r3
 8026d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026d86:	45c1      	cmp	r9, r8
 8026d88:	f840 3b04 	str.w	r3, [r0], #4
 8026d8c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8026d90:	d2e8      	bcs.n	8026d64 <quorem+0xb0>
 8026d92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026d96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026d9a:	b922      	cbnz	r2, 8026da6 <quorem+0xf2>
 8026d9c:	3b04      	subs	r3, #4
 8026d9e:	429d      	cmp	r5, r3
 8026da0:	461a      	mov	r2, r3
 8026da2:	d30a      	bcc.n	8026dba <quorem+0x106>
 8026da4:	613c      	str	r4, [r7, #16]
 8026da6:	4630      	mov	r0, r6
 8026da8:	b003      	add	sp, #12
 8026daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026dae:	6812      	ldr	r2, [r2, #0]
 8026db0:	3b04      	subs	r3, #4
 8026db2:	2a00      	cmp	r2, #0
 8026db4:	d1cc      	bne.n	8026d50 <quorem+0x9c>
 8026db6:	3c01      	subs	r4, #1
 8026db8:	e7c7      	b.n	8026d4a <quorem+0x96>
 8026dba:	6812      	ldr	r2, [r2, #0]
 8026dbc:	3b04      	subs	r3, #4
 8026dbe:	2a00      	cmp	r2, #0
 8026dc0:	d1f0      	bne.n	8026da4 <quorem+0xf0>
 8026dc2:	3c01      	subs	r4, #1
 8026dc4:	e7eb      	b.n	8026d9e <quorem+0xea>
 8026dc6:	2000      	movs	r0, #0
 8026dc8:	e7ee      	b.n	8026da8 <quorem+0xf4>
 8026dca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8026dce:	Address 0x0000000008026dce is out of bounds.


08026dd0 <_dtoa_r>:
 8026dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dd4:	ed2d 8b02 	vpush	{d8}
 8026dd8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8026dda:	b091      	sub	sp, #68	; 0x44
 8026ddc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026de0:	ec59 8b10 	vmov	r8, r9, d0
 8026de4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026de6:	9106      	str	r1, [sp, #24]
 8026de8:	4606      	mov	r6, r0
 8026dea:	9208      	str	r2, [sp, #32]
 8026dec:	930c      	str	r3, [sp, #48]	; 0x30
 8026dee:	b975      	cbnz	r5, 8026e0e <_dtoa_r+0x3e>
 8026df0:	2010      	movs	r0, #16
 8026df2:	f7fd fae9 	bl	80243c8 <malloc>
 8026df6:	4602      	mov	r2, r0
 8026df8:	6270      	str	r0, [r6, #36]	; 0x24
 8026dfa:	b920      	cbnz	r0, 8026e06 <_dtoa_r+0x36>
 8026dfc:	4baa      	ldr	r3, [pc, #680]	; (80270a8 <_dtoa_r+0x2d8>)
 8026dfe:	21ea      	movs	r1, #234	; 0xea
 8026e00:	48aa      	ldr	r0, [pc, #680]	; (80270ac <_dtoa_r+0x2dc>)
 8026e02:	f7ff ff15 	bl	8026c30 <__assert_func>
 8026e06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8026e0a:	6005      	str	r5, [r0, #0]
 8026e0c:	60c5      	str	r5, [r0, #12]
 8026e0e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026e10:	6819      	ldr	r1, [r3, #0]
 8026e12:	b151      	cbz	r1, 8026e2a <_dtoa_r+0x5a>
 8026e14:	685a      	ldr	r2, [r3, #4]
 8026e16:	604a      	str	r2, [r1, #4]
 8026e18:	2301      	movs	r3, #1
 8026e1a:	4093      	lsls	r3, r2
 8026e1c:	608b      	str	r3, [r1, #8]
 8026e1e:	4630      	mov	r0, r6
 8026e20:	f000 ffde 	bl	8027de0 <_Bfree>
 8026e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026e26:	2200      	movs	r2, #0
 8026e28:	601a      	str	r2, [r3, #0]
 8026e2a:	f1b9 0300 	subs.w	r3, r9, #0
 8026e2e:	bfbb      	ittet	lt
 8026e30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026e34:	9303      	strlt	r3, [sp, #12]
 8026e36:	2300      	movge	r3, #0
 8026e38:	2201      	movlt	r2, #1
 8026e3a:	bfac      	ite	ge
 8026e3c:	6023      	strge	r3, [r4, #0]
 8026e3e:	6022      	strlt	r2, [r4, #0]
 8026e40:	4b9b      	ldr	r3, [pc, #620]	; (80270b0 <_dtoa_r+0x2e0>)
 8026e42:	9c03      	ldr	r4, [sp, #12]
 8026e44:	43a3      	bics	r3, r4
 8026e46:	d11c      	bne.n	8026e82 <_dtoa_r+0xb2>
 8026e48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8026e4e:	6013      	str	r3, [r2, #0]
 8026e50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8026e54:	ea53 0308 	orrs.w	r3, r3, r8
 8026e58:	f000 84fd 	beq.w	8027856 <_dtoa_r+0xa86>
 8026e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026e5e:	b963      	cbnz	r3, 8026e7a <_dtoa_r+0xaa>
 8026e60:	4b94      	ldr	r3, [pc, #592]	; (80270b4 <_dtoa_r+0x2e4>)
 8026e62:	e01f      	b.n	8026ea4 <_dtoa_r+0xd4>
 8026e64:	4b94      	ldr	r3, [pc, #592]	; (80270b8 <_dtoa_r+0x2e8>)
 8026e66:	9301      	str	r3, [sp, #4]
 8026e68:	3308      	adds	r3, #8
 8026e6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8026e6c:	6013      	str	r3, [r2, #0]
 8026e6e:	9801      	ldr	r0, [sp, #4]
 8026e70:	b011      	add	sp, #68	; 0x44
 8026e72:	ecbd 8b02 	vpop	{d8}
 8026e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e7a:	4b8e      	ldr	r3, [pc, #568]	; (80270b4 <_dtoa_r+0x2e4>)
 8026e7c:	9301      	str	r3, [sp, #4]
 8026e7e:	3303      	adds	r3, #3
 8026e80:	e7f3      	b.n	8026e6a <_dtoa_r+0x9a>
 8026e82:	ed9d 8b02 	vldr	d8, [sp, #8]
 8026e86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8026e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e8e:	d10b      	bne.n	8026ea8 <_dtoa_r+0xd8>
 8026e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026e92:	2301      	movs	r3, #1
 8026e94:	6013      	str	r3, [r2, #0]
 8026e96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026e98:	2b00      	cmp	r3, #0
 8026e9a:	f000 84d9 	beq.w	8027850 <_dtoa_r+0xa80>
 8026e9e:	4887      	ldr	r0, [pc, #540]	; (80270bc <_dtoa_r+0x2ec>)
 8026ea0:	6018      	str	r0, [r3, #0]
 8026ea2:	1e43      	subs	r3, r0, #1
 8026ea4:	9301      	str	r3, [sp, #4]
 8026ea6:	e7e2      	b.n	8026e6e <_dtoa_r+0x9e>
 8026ea8:	a90f      	add	r1, sp, #60	; 0x3c
 8026eaa:	aa0e      	add	r2, sp, #56	; 0x38
 8026eac:	4630      	mov	r0, r6
 8026eae:	eeb0 0b48 	vmov.f64	d0, d8
 8026eb2:	f001 fa7d 	bl	80283b0 <__d2b>
 8026eb6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8026eba:	4605      	mov	r5, r0
 8026ebc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026ebe:	2900      	cmp	r1, #0
 8026ec0:	d046      	beq.n	8026f50 <_dtoa_r+0x180>
 8026ec2:	ee18 4a90 	vmov	r4, s17
 8026ec6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8026eca:	ec53 2b18 	vmov	r2, r3, d8
 8026ece:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026ed2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026ed6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8026eda:	2400      	movs	r4, #0
 8026edc:	ec43 2b16 	vmov	d6, r2, r3
 8026ee0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026ee4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8027090 <_dtoa_r+0x2c0>
 8026ee8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8026eec:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8027098 <_dtoa_r+0x2c8>
 8026ef0:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026ef4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80270a0 <_dtoa_r+0x2d0>
 8026ef8:	ee07 1a90 	vmov	s15, r1
 8026efc:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026f00:	eeb0 7b46 	vmov.f64	d7, d6
 8026f04:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026f08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8026f0c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f14:	ee16 ba90 	vmov	fp, s13
 8026f18:	940a      	str	r4, [sp, #40]	; 0x28
 8026f1a:	d508      	bpl.n	8026f2e <_dtoa_r+0x15e>
 8026f1c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8026f20:	eeb4 6b47 	vcmp.f64	d6, d7
 8026f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f28:	bf18      	it	ne
 8026f2a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8026f2e:	f1bb 0f16 	cmp.w	fp, #22
 8026f32:	d82f      	bhi.n	8026f94 <_dtoa_r+0x1c4>
 8026f34:	4b62      	ldr	r3, [pc, #392]	; (80270c0 <_dtoa_r+0x2f0>)
 8026f36:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026f3a:	ed93 7b00 	vldr	d7, [r3]
 8026f3e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026f46:	d501      	bpl.n	8026f4c <_dtoa_r+0x17c>
 8026f48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026f4c:	2300      	movs	r3, #0
 8026f4e:	e022      	b.n	8026f96 <_dtoa_r+0x1c6>
 8026f50:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026f52:	4401      	add	r1, r0
 8026f54:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8026f58:	2b20      	cmp	r3, #32
 8026f5a:	bfc1      	itttt	gt
 8026f5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026f60:	fa04 f303 	lslgt.w	r3, r4, r3
 8026f64:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8026f68:	fa28 f804 	lsrgt.w	r8, r8, r4
 8026f6c:	bfd6      	itet	le
 8026f6e:	f1c3 0320 	rsble	r3, r3, #32
 8026f72:	ea43 0808 	orrgt.w	r8, r3, r8
 8026f76:	fa08 f803 	lslle.w	r8, r8, r3
 8026f7a:	ee07 8a90 	vmov	s15, r8
 8026f7e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8026f82:	3901      	subs	r1, #1
 8026f84:	ee17 4a90 	vmov	r4, s15
 8026f88:	ec53 2b17 	vmov	r2, r3, d7
 8026f8c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8026f90:	2401      	movs	r4, #1
 8026f92:	e7a3      	b.n	8026edc <_dtoa_r+0x10c>
 8026f94:	2301      	movs	r3, #1
 8026f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8026f98:	1a43      	subs	r3, r0, r1
 8026f9a:	1e5a      	subs	r2, r3, #1
 8026f9c:	bf45      	ittet	mi
 8026f9e:	f1c3 0301 	rsbmi	r3, r3, #1
 8026fa2:	9304      	strmi	r3, [sp, #16]
 8026fa4:	2300      	movpl	r3, #0
 8026fa6:	2300      	movmi	r3, #0
 8026fa8:	9205      	str	r2, [sp, #20]
 8026faa:	bf54      	ite	pl
 8026fac:	9304      	strpl	r3, [sp, #16]
 8026fae:	9305      	strmi	r3, [sp, #20]
 8026fb0:	f1bb 0f00 	cmp.w	fp, #0
 8026fb4:	db18      	blt.n	8026fe8 <_dtoa_r+0x218>
 8026fb6:	9b05      	ldr	r3, [sp, #20]
 8026fb8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8026fbc:	445b      	add	r3, fp
 8026fbe:	9305      	str	r3, [sp, #20]
 8026fc0:	2300      	movs	r3, #0
 8026fc2:	9a06      	ldr	r2, [sp, #24]
 8026fc4:	2a09      	cmp	r2, #9
 8026fc6:	d849      	bhi.n	802705c <_dtoa_r+0x28c>
 8026fc8:	2a05      	cmp	r2, #5
 8026fca:	bfc4      	itt	gt
 8026fcc:	3a04      	subgt	r2, #4
 8026fce:	9206      	strgt	r2, [sp, #24]
 8026fd0:	9a06      	ldr	r2, [sp, #24]
 8026fd2:	f1a2 0202 	sub.w	r2, r2, #2
 8026fd6:	bfcc      	ite	gt
 8026fd8:	2400      	movgt	r4, #0
 8026fda:	2401      	movle	r4, #1
 8026fdc:	2a03      	cmp	r2, #3
 8026fde:	d848      	bhi.n	8027072 <_dtoa_r+0x2a2>
 8026fe0:	e8df f002 	tbb	[pc, r2]
 8026fe4:	3a2c2e0b 	.word	0x3a2c2e0b
 8026fe8:	9b04      	ldr	r3, [sp, #16]
 8026fea:	2200      	movs	r2, #0
 8026fec:	eba3 030b 	sub.w	r3, r3, fp
 8026ff0:	9304      	str	r3, [sp, #16]
 8026ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8026ff4:	f1cb 0300 	rsb	r3, fp, #0
 8026ff8:	e7e3      	b.n	8026fc2 <_dtoa_r+0x1f2>
 8026ffa:	2200      	movs	r2, #0
 8026ffc:	9207      	str	r2, [sp, #28]
 8026ffe:	9a08      	ldr	r2, [sp, #32]
 8027000:	2a00      	cmp	r2, #0
 8027002:	dc39      	bgt.n	8027078 <_dtoa_r+0x2a8>
 8027004:	f04f 0a01 	mov.w	sl, #1
 8027008:	46d1      	mov	r9, sl
 802700a:	4652      	mov	r2, sl
 802700c:	f8cd a020 	str.w	sl, [sp, #32]
 8027010:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8027012:	2100      	movs	r1, #0
 8027014:	6079      	str	r1, [r7, #4]
 8027016:	2004      	movs	r0, #4
 8027018:	f100 0c14 	add.w	ip, r0, #20
 802701c:	4594      	cmp	ip, r2
 802701e:	6879      	ldr	r1, [r7, #4]
 8027020:	d92f      	bls.n	8027082 <_dtoa_r+0x2b2>
 8027022:	4630      	mov	r0, r6
 8027024:	930d      	str	r3, [sp, #52]	; 0x34
 8027026:	f000 fe9b 	bl	8027d60 <_Balloc>
 802702a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802702c:	9001      	str	r0, [sp, #4]
 802702e:	4602      	mov	r2, r0
 8027030:	2800      	cmp	r0, #0
 8027032:	d149      	bne.n	80270c8 <_dtoa_r+0x2f8>
 8027034:	4b23      	ldr	r3, [pc, #140]	; (80270c4 <_dtoa_r+0x2f4>)
 8027036:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 802703a:	e6e1      	b.n	8026e00 <_dtoa_r+0x30>
 802703c:	2201      	movs	r2, #1
 802703e:	e7dd      	b.n	8026ffc <_dtoa_r+0x22c>
 8027040:	2200      	movs	r2, #0
 8027042:	9207      	str	r2, [sp, #28]
 8027044:	9a08      	ldr	r2, [sp, #32]
 8027046:	eb0b 0a02 	add.w	sl, fp, r2
 802704a:	f10a 0901 	add.w	r9, sl, #1
 802704e:	464a      	mov	r2, r9
 8027050:	2a01      	cmp	r2, #1
 8027052:	bfb8      	it	lt
 8027054:	2201      	movlt	r2, #1
 8027056:	e7db      	b.n	8027010 <_dtoa_r+0x240>
 8027058:	2201      	movs	r2, #1
 802705a:	e7f2      	b.n	8027042 <_dtoa_r+0x272>
 802705c:	2401      	movs	r4, #1
 802705e:	2200      	movs	r2, #0
 8027060:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8027064:	f04f 3aff 	mov.w	sl, #4294967295
 8027068:	2100      	movs	r1, #0
 802706a:	46d1      	mov	r9, sl
 802706c:	2212      	movs	r2, #18
 802706e:	9108      	str	r1, [sp, #32]
 8027070:	e7ce      	b.n	8027010 <_dtoa_r+0x240>
 8027072:	2201      	movs	r2, #1
 8027074:	9207      	str	r2, [sp, #28]
 8027076:	e7f5      	b.n	8027064 <_dtoa_r+0x294>
 8027078:	f8dd a020 	ldr.w	sl, [sp, #32]
 802707c:	46d1      	mov	r9, sl
 802707e:	4652      	mov	r2, sl
 8027080:	e7c6      	b.n	8027010 <_dtoa_r+0x240>
 8027082:	3101      	adds	r1, #1
 8027084:	6079      	str	r1, [r7, #4]
 8027086:	0040      	lsls	r0, r0, #1
 8027088:	e7c6      	b.n	8027018 <_dtoa_r+0x248>
 802708a:	bf00      	nop
 802708c:	f3af 8000 	nop.w
 8027090:	636f4361 	.word	0x636f4361
 8027094:	3fd287a7 	.word	0x3fd287a7
 8027098:	8b60c8b3 	.word	0x8b60c8b3
 802709c:	3fc68a28 	.word	0x3fc68a28
 80270a0:	509f79fb 	.word	0x509f79fb
 80270a4:	3fd34413 	.word	0x3fd34413
 80270a8:	08045d18 	.word	0x08045d18
 80270ac:	08046296 	.word	0x08046296
 80270b0:	7ff00000 	.word	0x7ff00000
 80270b4:	08046292 	.word	0x08046292
 80270b8:	08046289 	.word	0x08046289
 80270bc:	08046472 	.word	0x08046472
 80270c0:	08046388 	.word	0x08046388
 80270c4:	080462f1 	.word	0x080462f1
 80270c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80270ca:	9901      	ldr	r1, [sp, #4]
 80270cc:	6011      	str	r1, [r2, #0]
 80270ce:	f1b9 0f0e 	cmp.w	r9, #14
 80270d2:	d86c      	bhi.n	80271ae <_dtoa_r+0x3de>
 80270d4:	2c00      	cmp	r4, #0
 80270d6:	d06a      	beq.n	80271ae <_dtoa_r+0x3de>
 80270d8:	f1bb 0f00 	cmp.w	fp, #0
 80270dc:	f340 80a0 	ble.w	8027220 <_dtoa_r+0x450>
 80270e0:	49c1      	ldr	r1, [pc, #772]	; (80273e8 <_dtoa_r+0x618>)
 80270e2:	f00b 020f 	and.w	r2, fp, #15
 80270e6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80270ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80270ee:	ed92 7b00 	vldr	d7, [r2]
 80270f2:	ea4f 112b 	mov.w	r1, fp, asr #4
 80270f6:	f000 8087 	beq.w	8027208 <_dtoa_r+0x438>
 80270fa:	4abc      	ldr	r2, [pc, #752]	; (80273ec <_dtoa_r+0x61c>)
 80270fc:	ed92 6b08 	vldr	d6, [r2, #32]
 8027100:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8027104:	ed8d 6b02 	vstr	d6, [sp, #8]
 8027108:	f001 010f 	and.w	r1, r1, #15
 802710c:	2203      	movs	r2, #3
 802710e:	48b7      	ldr	r0, [pc, #732]	; (80273ec <_dtoa_r+0x61c>)
 8027110:	2900      	cmp	r1, #0
 8027112:	d17b      	bne.n	802720c <_dtoa_r+0x43c>
 8027114:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027118:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802711c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027120:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8027122:	2900      	cmp	r1, #0
 8027124:	f000 80a2 	beq.w	802726c <_dtoa_r+0x49c>
 8027128:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802712c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027130:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027138:	f140 8098 	bpl.w	802726c <_dtoa_r+0x49c>
 802713c:	f1b9 0f00 	cmp.w	r9, #0
 8027140:	f000 8094 	beq.w	802726c <_dtoa_r+0x49c>
 8027144:	f1ba 0f00 	cmp.w	sl, #0
 8027148:	dd2f      	ble.n	80271aa <_dtoa_r+0x3da>
 802714a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802714e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027152:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027156:	f10b 37ff 	add.w	r7, fp, #4294967295
 802715a:	3201      	adds	r2, #1
 802715c:	4650      	mov	r0, sl
 802715e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8027162:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8027166:	ee07 2a90 	vmov	s15, r2
 802716a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802716e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8027172:	ee15 4a90 	vmov	r4, s11
 8027176:	ec52 1b15 	vmov	r1, r2, d5
 802717a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 802717e:	2800      	cmp	r0, #0
 8027180:	d177      	bne.n	8027272 <_dtoa_r+0x4a2>
 8027182:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8027186:	ee36 6b47 	vsub.f64	d6, d6, d7
 802718a:	ec42 1b17 	vmov	d7, r1, r2
 802718e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027196:	f300 8263 	bgt.w	8027660 <_dtoa_r+0x890>
 802719a:	eeb1 7b47 	vneg.f64	d7, d7
 802719e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80271a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271a6:	f100 8258 	bmi.w	802765a <_dtoa_r+0x88a>
 80271aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80271ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80271b0:	2a00      	cmp	r2, #0
 80271b2:	f2c0 811d 	blt.w	80273f0 <_dtoa_r+0x620>
 80271b6:	f1bb 0f0e 	cmp.w	fp, #14
 80271ba:	f300 8119 	bgt.w	80273f0 <_dtoa_r+0x620>
 80271be:	4b8a      	ldr	r3, [pc, #552]	; (80273e8 <_dtoa_r+0x618>)
 80271c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80271c4:	ed93 6b00 	vldr	d6, [r3]
 80271c8:	9b08      	ldr	r3, [sp, #32]
 80271ca:	2b00      	cmp	r3, #0
 80271cc:	f280 80b7 	bge.w	802733e <_dtoa_r+0x56e>
 80271d0:	f1b9 0f00 	cmp.w	r9, #0
 80271d4:	f300 80b3 	bgt.w	802733e <_dtoa_r+0x56e>
 80271d8:	f040 823f 	bne.w	802765a <_dtoa_r+0x88a>
 80271dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80271e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80271e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80271e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80271ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80271f0:	464c      	mov	r4, r9
 80271f2:	464f      	mov	r7, r9
 80271f4:	f280 8215 	bge.w	8027622 <_dtoa_r+0x852>
 80271f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80271fc:	2331      	movs	r3, #49	; 0x31
 80271fe:	f808 3b01 	strb.w	r3, [r8], #1
 8027202:	f10b 0b01 	add.w	fp, fp, #1
 8027206:	e211      	b.n	802762c <_dtoa_r+0x85c>
 8027208:	2202      	movs	r2, #2
 802720a:	e780      	b.n	802710e <_dtoa_r+0x33e>
 802720c:	07cc      	lsls	r4, r1, #31
 802720e:	d504      	bpl.n	802721a <_dtoa_r+0x44a>
 8027210:	ed90 6b00 	vldr	d6, [r0]
 8027214:	3201      	adds	r2, #1
 8027216:	ee27 7b06 	vmul.f64	d7, d7, d6
 802721a:	1049      	asrs	r1, r1, #1
 802721c:	3008      	adds	r0, #8
 802721e:	e777      	b.n	8027110 <_dtoa_r+0x340>
 8027220:	d022      	beq.n	8027268 <_dtoa_r+0x498>
 8027222:	f1cb 0100 	rsb	r1, fp, #0
 8027226:	4a70      	ldr	r2, [pc, #448]	; (80273e8 <_dtoa_r+0x618>)
 8027228:	f001 000f 	and.w	r0, r1, #15
 802722c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8027230:	ed92 7b00 	vldr	d7, [r2]
 8027234:	ee28 7b07 	vmul.f64	d7, d8, d7
 8027238:	ed8d 7b02 	vstr	d7, [sp, #8]
 802723c:	486b      	ldr	r0, [pc, #428]	; (80273ec <_dtoa_r+0x61c>)
 802723e:	1109      	asrs	r1, r1, #4
 8027240:	2400      	movs	r4, #0
 8027242:	2202      	movs	r2, #2
 8027244:	b929      	cbnz	r1, 8027252 <_dtoa_r+0x482>
 8027246:	2c00      	cmp	r4, #0
 8027248:	f43f af6a 	beq.w	8027120 <_dtoa_r+0x350>
 802724c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8027250:	e766      	b.n	8027120 <_dtoa_r+0x350>
 8027252:	07cf      	lsls	r7, r1, #31
 8027254:	d505      	bpl.n	8027262 <_dtoa_r+0x492>
 8027256:	ed90 6b00 	vldr	d6, [r0]
 802725a:	3201      	adds	r2, #1
 802725c:	2401      	movs	r4, #1
 802725e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8027262:	1049      	asrs	r1, r1, #1
 8027264:	3008      	adds	r0, #8
 8027266:	e7ed      	b.n	8027244 <_dtoa_r+0x474>
 8027268:	2202      	movs	r2, #2
 802726a:	e759      	b.n	8027120 <_dtoa_r+0x350>
 802726c:	465f      	mov	r7, fp
 802726e:	4648      	mov	r0, r9
 8027270:	e775      	b.n	802715e <_dtoa_r+0x38e>
 8027272:	ec42 1b17 	vmov	d7, r1, r2
 8027276:	4a5c      	ldr	r2, [pc, #368]	; (80273e8 <_dtoa_r+0x618>)
 8027278:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 802727c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8027280:	9a01      	ldr	r2, [sp, #4]
 8027282:	1814      	adds	r4, r2, r0
 8027284:	9a07      	ldr	r2, [sp, #28]
 8027286:	b352      	cbz	r2, 80272de <_dtoa_r+0x50e>
 8027288:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 802728c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8027290:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027294:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8027298:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 802729c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80272a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80272a4:	ee14 2a90 	vmov	r2, s9
 80272a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80272ac:	3230      	adds	r2, #48	; 0x30
 80272ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80272b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80272b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272ba:	f808 2b01 	strb.w	r2, [r8], #1
 80272be:	d439      	bmi.n	8027334 <_dtoa_r+0x564>
 80272c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80272c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80272c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80272cc:	d472      	bmi.n	80273b4 <_dtoa_r+0x5e4>
 80272ce:	45a0      	cmp	r8, r4
 80272d0:	f43f af6b 	beq.w	80271aa <_dtoa_r+0x3da>
 80272d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80272d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80272dc:	e7e0      	b.n	80272a0 <_dtoa_r+0x4d0>
 80272de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80272e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80272e6:	4621      	mov	r1, r4
 80272e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80272ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80272f0:	ee14 2a90 	vmov	r2, s9
 80272f4:	3230      	adds	r2, #48	; 0x30
 80272f6:	f808 2b01 	strb.w	r2, [r8], #1
 80272fa:	45a0      	cmp	r8, r4
 80272fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8027300:	ee36 6b45 	vsub.f64	d6, d6, d5
 8027304:	d118      	bne.n	8027338 <_dtoa_r+0x568>
 8027306:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802730a:	ee37 4b05 	vadd.f64	d4, d7, d5
 802730e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8027312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027316:	dc4d      	bgt.n	80273b4 <_dtoa_r+0x5e4>
 8027318:	ee35 7b47 	vsub.f64	d7, d5, d7
 802731c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8027320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027324:	f57f af41 	bpl.w	80271aa <_dtoa_r+0x3da>
 8027328:	4688      	mov	r8, r1
 802732a:	3901      	subs	r1, #1
 802732c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8027330:	2b30      	cmp	r3, #48	; 0x30
 8027332:	d0f9      	beq.n	8027328 <_dtoa_r+0x558>
 8027334:	46bb      	mov	fp, r7
 8027336:	e02a      	b.n	802738e <_dtoa_r+0x5be>
 8027338:	ee26 6b03 	vmul.f64	d6, d6, d3
 802733c:	e7d6      	b.n	80272ec <_dtoa_r+0x51c>
 802733e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8027342:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8027346:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802734a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802734e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8027352:	ee15 3a10 	vmov	r3, s10
 8027356:	3330      	adds	r3, #48	; 0x30
 8027358:	f808 3b01 	strb.w	r3, [r8], #1
 802735c:	9b01      	ldr	r3, [sp, #4]
 802735e:	eba8 0303 	sub.w	r3, r8, r3
 8027362:	4599      	cmp	r9, r3
 8027364:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8027368:	eea3 7b46 	vfms.f64	d7, d3, d6
 802736c:	d133      	bne.n	80273d6 <_dtoa_r+0x606>
 802736e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8027372:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8027376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802737a:	dc1a      	bgt.n	80273b2 <_dtoa_r+0x5e2>
 802737c:	eeb4 7b46 	vcmp.f64	d7, d6
 8027380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8027384:	d103      	bne.n	802738e <_dtoa_r+0x5be>
 8027386:	ee15 3a10 	vmov	r3, s10
 802738a:	07d9      	lsls	r1, r3, #31
 802738c:	d411      	bmi.n	80273b2 <_dtoa_r+0x5e2>
 802738e:	4629      	mov	r1, r5
 8027390:	4630      	mov	r0, r6
 8027392:	f000 fd25 	bl	8027de0 <_Bfree>
 8027396:	2300      	movs	r3, #0
 8027398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802739a:	f888 3000 	strb.w	r3, [r8]
 802739e:	f10b 0301 	add.w	r3, fp, #1
 80273a2:	6013      	str	r3, [r2, #0]
 80273a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	f43f ad61 	beq.w	8026e6e <_dtoa_r+0x9e>
 80273ac:	f8c3 8000 	str.w	r8, [r3]
 80273b0:	e55d      	b.n	8026e6e <_dtoa_r+0x9e>
 80273b2:	465f      	mov	r7, fp
 80273b4:	4643      	mov	r3, r8
 80273b6:	4698      	mov	r8, r3
 80273b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80273bc:	2a39      	cmp	r2, #57	; 0x39
 80273be:	d106      	bne.n	80273ce <_dtoa_r+0x5fe>
 80273c0:	9a01      	ldr	r2, [sp, #4]
 80273c2:	429a      	cmp	r2, r3
 80273c4:	d1f7      	bne.n	80273b6 <_dtoa_r+0x5e6>
 80273c6:	9901      	ldr	r1, [sp, #4]
 80273c8:	2230      	movs	r2, #48	; 0x30
 80273ca:	3701      	adds	r7, #1
 80273cc:	700a      	strb	r2, [r1, #0]
 80273ce:	781a      	ldrb	r2, [r3, #0]
 80273d0:	3201      	adds	r2, #1
 80273d2:	701a      	strb	r2, [r3, #0]
 80273d4:	e7ae      	b.n	8027334 <_dtoa_r+0x564>
 80273d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80273da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80273de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80273e2:	d1b2      	bne.n	802734a <_dtoa_r+0x57a>
 80273e4:	e7d3      	b.n	802738e <_dtoa_r+0x5be>
 80273e6:	bf00      	nop
 80273e8:	08046388 	.word	0x08046388
 80273ec:	08046360 	.word	0x08046360
 80273f0:	9907      	ldr	r1, [sp, #28]
 80273f2:	2900      	cmp	r1, #0
 80273f4:	f000 80d0 	beq.w	8027598 <_dtoa_r+0x7c8>
 80273f8:	9906      	ldr	r1, [sp, #24]
 80273fa:	2901      	cmp	r1, #1
 80273fc:	f300 80b4 	bgt.w	8027568 <_dtoa_r+0x798>
 8027400:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027402:	2900      	cmp	r1, #0
 8027404:	f000 80ac 	beq.w	8027560 <_dtoa_r+0x790>
 8027408:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802740c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027410:	461c      	mov	r4, r3
 8027412:	930a      	str	r3, [sp, #40]	; 0x28
 8027414:	9b04      	ldr	r3, [sp, #16]
 8027416:	4413      	add	r3, r2
 8027418:	9304      	str	r3, [sp, #16]
 802741a:	9b05      	ldr	r3, [sp, #20]
 802741c:	2101      	movs	r1, #1
 802741e:	4413      	add	r3, r2
 8027420:	4630      	mov	r0, r6
 8027422:	9305      	str	r3, [sp, #20]
 8027424:	f000 fd94 	bl	8027f50 <__i2b>
 8027428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802742a:	4607      	mov	r7, r0
 802742c:	f1b8 0f00 	cmp.w	r8, #0
 8027430:	dd0d      	ble.n	802744e <_dtoa_r+0x67e>
 8027432:	9a05      	ldr	r2, [sp, #20]
 8027434:	2a00      	cmp	r2, #0
 8027436:	dd0a      	ble.n	802744e <_dtoa_r+0x67e>
 8027438:	4542      	cmp	r2, r8
 802743a:	9904      	ldr	r1, [sp, #16]
 802743c:	bfa8      	it	ge
 802743e:	4642      	movge	r2, r8
 8027440:	1a89      	subs	r1, r1, r2
 8027442:	9104      	str	r1, [sp, #16]
 8027444:	9905      	ldr	r1, [sp, #20]
 8027446:	eba8 0802 	sub.w	r8, r8, r2
 802744a:	1a8a      	subs	r2, r1, r2
 802744c:	9205      	str	r2, [sp, #20]
 802744e:	b303      	cbz	r3, 8027492 <_dtoa_r+0x6c2>
 8027450:	9a07      	ldr	r2, [sp, #28]
 8027452:	2a00      	cmp	r2, #0
 8027454:	f000 80a5 	beq.w	80275a2 <_dtoa_r+0x7d2>
 8027458:	2c00      	cmp	r4, #0
 802745a:	dd13      	ble.n	8027484 <_dtoa_r+0x6b4>
 802745c:	4639      	mov	r1, r7
 802745e:	4622      	mov	r2, r4
 8027460:	4630      	mov	r0, r6
 8027462:	930d      	str	r3, [sp, #52]	; 0x34
 8027464:	f000 fe34 	bl	80280d0 <__pow5mult>
 8027468:	462a      	mov	r2, r5
 802746a:	4601      	mov	r1, r0
 802746c:	4607      	mov	r7, r0
 802746e:	4630      	mov	r0, r6
 8027470:	f000 fd84 	bl	8027f7c <__multiply>
 8027474:	4629      	mov	r1, r5
 8027476:	900a      	str	r0, [sp, #40]	; 0x28
 8027478:	4630      	mov	r0, r6
 802747a:	f000 fcb1 	bl	8027de0 <_Bfree>
 802747e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027482:	4615      	mov	r5, r2
 8027484:	1b1a      	subs	r2, r3, r4
 8027486:	d004      	beq.n	8027492 <_dtoa_r+0x6c2>
 8027488:	4629      	mov	r1, r5
 802748a:	4630      	mov	r0, r6
 802748c:	f000 fe20 	bl	80280d0 <__pow5mult>
 8027490:	4605      	mov	r5, r0
 8027492:	2101      	movs	r1, #1
 8027494:	4630      	mov	r0, r6
 8027496:	f000 fd5b 	bl	8027f50 <__i2b>
 802749a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802749c:	2b00      	cmp	r3, #0
 802749e:	4604      	mov	r4, r0
 80274a0:	f340 8081 	ble.w	80275a6 <_dtoa_r+0x7d6>
 80274a4:	461a      	mov	r2, r3
 80274a6:	4601      	mov	r1, r0
 80274a8:	4630      	mov	r0, r6
 80274aa:	f000 fe11 	bl	80280d0 <__pow5mult>
 80274ae:	9b06      	ldr	r3, [sp, #24]
 80274b0:	2b01      	cmp	r3, #1
 80274b2:	4604      	mov	r4, r0
 80274b4:	dd7a      	ble.n	80275ac <_dtoa_r+0x7dc>
 80274b6:	2300      	movs	r3, #0
 80274b8:	930a      	str	r3, [sp, #40]	; 0x28
 80274ba:	6922      	ldr	r2, [r4, #16]
 80274bc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80274c0:	6910      	ldr	r0, [r2, #16]
 80274c2:	f000 fcf5 	bl	8027eb0 <__hi0bits>
 80274c6:	f1c0 0020 	rsb	r0, r0, #32
 80274ca:	9b05      	ldr	r3, [sp, #20]
 80274cc:	4418      	add	r0, r3
 80274ce:	f010 001f 	ands.w	r0, r0, #31
 80274d2:	f000 808c 	beq.w	80275ee <_dtoa_r+0x81e>
 80274d6:	f1c0 0220 	rsb	r2, r0, #32
 80274da:	2a04      	cmp	r2, #4
 80274dc:	f340 8085 	ble.w	80275ea <_dtoa_r+0x81a>
 80274e0:	f1c0 001c 	rsb	r0, r0, #28
 80274e4:	9b04      	ldr	r3, [sp, #16]
 80274e6:	4403      	add	r3, r0
 80274e8:	9304      	str	r3, [sp, #16]
 80274ea:	9b05      	ldr	r3, [sp, #20]
 80274ec:	4403      	add	r3, r0
 80274ee:	4480      	add	r8, r0
 80274f0:	9305      	str	r3, [sp, #20]
 80274f2:	9b04      	ldr	r3, [sp, #16]
 80274f4:	2b00      	cmp	r3, #0
 80274f6:	dd05      	ble.n	8027504 <_dtoa_r+0x734>
 80274f8:	4629      	mov	r1, r5
 80274fa:	461a      	mov	r2, r3
 80274fc:	4630      	mov	r0, r6
 80274fe:	f000 fe41 	bl	8028184 <__lshift>
 8027502:	4605      	mov	r5, r0
 8027504:	9b05      	ldr	r3, [sp, #20]
 8027506:	2b00      	cmp	r3, #0
 8027508:	dd05      	ble.n	8027516 <_dtoa_r+0x746>
 802750a:	4621      	mov	r1, r4
 802750c:	461a      	mov	r2, r3
 802750e:	4630      	mov	r0, r6
 8027510:	f000 fe38 	bl	8028184 <__lshift>
 8027514:	4604      	mov	r4, r0
 8027516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027518:	2b00      	cmp	r3, #0
 802751a:	d06a      	beq.n	80275f2 <_dtoa_r+0x822>
 802751c:	4621      	mov	r1, r4
 802751e:	4628      	mov	r0, r5
 8027520:	f000 fea0 	bl	8028264 <__mcmp>
 8027524:	2800      	cmp	r0, #0
 8027526:	da64      	bge.n	80275f2 <_dtoa_r+0x822>
 8027528:	2300      	movs	r3, #0
 802752a:	4629      	mov	r1, r5
 802752c:	220a      	movs	r2, #10
 802752e:	4630      	mov	r0, r6
 8027530:	f000 fc78 	bl	8027e24 <__multadd>
 8027534:	9b07      	ldr	r3, [sp, #28]
 8027536:	f10b 3bff 	add.w	fp, fp, #4294967295
 802753a:	4605      	mov	r5, r0
 802753c:	2b00      	cmp	r3, #0
 802753e:	f000 8191 	beq.w	8027864 <_dtoa_r+0xa94>
 8027542:	4639      	mov	r1, r7
 8027544:	2300      	movs	r3, #0
 8027546:	220a      	movs	r2, #10
 8027548:	4630      	mov	r0, r6
 802754a:	f000 fc6b 	bl	8027e24 <__multadd>
 802754e:	f1ba 0f00 	cmp.w	sl, #0
 8027552:	4607      	mov	r7, r0
 8027554:	f300 808d 	bgt.w	8027672 <_dtoa_r+0x8a2>
 8027558:	9b06      	ldr	r3, [sp, #24]
 802755a:	2b02      	cmp	r3, #2
 802755c:	dc50      	bgt.n	8027600 <_dtoa_r+0x830>
 802755e:	e088      	b.n	8027672 <_dtoa_r+0x8a2>
 8027560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027562:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8027566:	e751      	b.n	802740c <_dtoa_r+0x63c>
 8027568:	f109 34ff 	add.w	r4, r9, #4294967295
 802756c:	42a3      	cmp	r3, r4
 802756e:	bfbf      	itttt	lt
 8027570:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8027572:	1ae3      	sublt	r3, r4, r3
 8027574:	18d2      	addlt	r2, r2, r3
 8027576:	9209      	strlt	r2, [sp, #36]	; 0x24
 8027578:	bfb6      	itet	lt
 802757a:	4623      	movlt	r3, r4
 802757c:	1b1c      	subge	r4, r3, r4
 802757e:	2400      	movlt	r4, #0
 8027580:	f1b9 0f00 	cmp.w	r9, #0
 8027584:	bfb5      	itete	lt
 8027586:	9a04      	ldrlt	r2, [sp, #16]
 8027588:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 802758c:	eba2 0809 	sublt.w	r8, r2, r9
 8027590:	464a      	movge	r2, r9
 8027592:	bfb8      	it	lt
 8027594:	2200      	movlt	r2, #0
 8027596:	e73c      	b.n	8027412 <_dtoa_r+0x642>
 8027598:	f8dd 8010 	ldr.w	r8, [sp, #16]
 802759c:	9f07      	ldr	r7, [sp, #28]
 802759e:	461c      	mov	r4, r3
 80275a0:	e744      	b.n	802742c <_dtoa_r+0x65c>
 80275a2:	461a      	mov	r2, r3
 80275a4:	e770      	b.n	8027488 <_dtoa_r+0x6b8>
 80275a6:	9b06      	ldr	r3, [sp, #24]
 80275a8:	2b01      	cmp	r3, #1
 80275aa:	dc18      	bgt.n	80275de <_dtoa_r+0x80e>
 80275ac:	9b02      	ldr	r3, [sp, #8]
 80275ae:	b9b3      	cbnz	r3, 80275de <_dtoa_r+0x80e>
 80275b0:	9b03      	ldr	r3, [sp, #12]
 80275b2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80275b6:	b9a2      	cbnz	r2, 80275e2 <_dtoa_r+0x812>
 80275b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80275bc:	0d12      	lsrs	r2, r2, #20
 80275be:	0512      	lsls	r2, r2, #20
 80275c0:	b18a      	cbz	r2, 80275e6 <_dtoa_r+0x816>
 80275c2:	9b04      	ldr	r3, [sp, #16]
 80275c4:	3301      	adds	r3, #1
 80275c6:	9304      	str	r3, [sp, #16]
 80275c8:	9b05      	ldr	r3, [sp, #20]
 80275ca:	3301      	adds	r3, #1
 80275cc:	9305      	str	r3, [sp, #20]
 80275ce:	2301      	movs	r3, #1
 80275d0:	930a      	str	r3, [sp, #40]	; 0x28
 80275d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80275d4:	2b00      	cmp	r3, #0
 80275d6:	f47f af70 	bne.w	80274ba <_dtoa_r+0x6ea>
 80275da:	2001      	movs	r0, #1
 80275dc:	e775      	b.n	80274ca <_dtoa_r+0x6fa>
 80275de:	2300      	movs	r3, #0
 80275e0:	e7f6      	b.n	80275d0 <_dtoa_r+0x800>
 80275e2:	9b02      	ldr	r3, [sp, #8]
 80275e4:	e7f4      	b.n	80275d0 <_dtoa_r+0x800>
 80275e6:	920a      	str	r2, [sp, #40]	; 0x28
 80275e8:	e7f3      	b.n	80275d2 <_dtoa_r+0x802>
 80275ea:	d082      	beq.n	80274f2 <_dtoa_r+0x722>
 80275ec:	4610      	mov	r0, r2
 80275ee:	301c      	adds	r0, #28
 80275f0:	e778      	b.n	80274e4 <_dtoa_r+0x714>
 80275f2:	f1b9 0f00 	cmp.w	r9, #0
 80275f6:	dc37      	bgt.n	8027668 <_dtoa_r+0x898>
 80275f8:	9b06      	ldr	r3, [sp, #24]
 80275fa:	2b02      	cmp	r3, #2
 80275fc:	dd34      	ble.n	8027668 <_dtoa_r+0x898>
 80275fe:	46ca      	mov	sl, r9
 8027600:	f1ba 0f00 	cmp.w	sl, #0
 8027604:	d10d      	bne.n	8027622 <_dtoa_r+0x852>
 8027606:	4621      	mov	r1, r4
 8027608:	4653      	mov	r3, sl
 802760a:	2205      	movs	r2, #5
 802760c:	4630      	mov	r0, r6
 802760e:	f000 fc09 	bl	8027e24 <__multadd>
 8027612:	4601      	mov	r1, r0
 8027614:	4604      	mov	r4, r0
 8027616:	4628      	mov	r0, r5
 8027618:	f000 fe24 	bl	8028264 <__mcmp>
 802761c:	2800      	cmp	r0, #0
 802761e:	f73f adeb 	bgt.w	80271f8 <_dtoa_r+0x428>
 8027622:	9b08      	ldr	r3, [sp, #32]
 8027624:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027628:	ea6f 0b03 	mvn.w	fp, r3
 802762c:	f04f 0900 	mov.w	r9, #0
 8027630:	4621      	mov	r1, r4
 8027632:	4630      	mov	r0, r6
 8027634:	f000 fbd4 	bl	8027de0 <_Bfree>
 8027638:	2f00      	cmp	r7, #0
 802763a:	f43f aea8 	beq.w	802738e <_dtoa_r+0x5be>
 802763e:	f1b9 0f00 	cmp.w	r9, #0
 8027642:	d005      	beq.n	8027650 <_dtoa_r+0x880>
 8027644:	45b9      	cmp	r9, r7
 8027646:	d003      	beq.n	8027650 <_dtoa_r+0x880>
 8027648:	4649      	mov	r1, r9
 802764a:	4630      	mov	r0, r6
 802764c:	f000 fbc8 	bl	8027de0 <_Bfree>
 8027650:	4639      	mov	r1, r7
 8027652:	4630      	mov	r0, r6
 8027654:	f000 fbc4 	bl	8027de0 <_Bfree>
 8027658:	e699      	b.n	802738e <_dtoa_r+0x5be>
 802765a:	2400      	movs	r4, #0
 802765c:	4627      	mov	r7, r4
 802765e:	e7e0      	b.n	8027622 <_dtoa_r+0x852>
 8027660:	46bb      	mov	fp, r7
 8027662:	4604      	mov	r4, r0
 8027664:	4607      	mov	r7, r0
 8027666:	e5c7      	b.n	80271f8 <_dtoa_r+0x428>
 8027668:	9b07      	ldr	r3, [sp, #28]
 802766a:	46ca      	mov	sl, r9
 802766c:	2b00      	cmp	r3, #0
 802766e:	f000 8100 	beq.w	8027872 <_dtoa_r+0xaa2>
 8027672:	f1b8 0f00 	cmp.w	r8, #0
 8027676:	dd05      	ble.n	8027684 <_dtoa_r+0x8b4>
 8027678:	4639      	mov	r1, r7
 802767a:	4642      	mov	r2, r8
 802767c:	4630      	mov	r0, r6
 802767e:	f000 fd81 	bl	8028184 <__lshift>
 8027682:	4607      	mov	r7, r0
 8027684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027686:	2b00      	cmp	r3, #0
 8027688:	d05d      	beq.n	8027746 <_dtoa_r+0x976>
 802768a:	6879      	ldr	r1, [r7, #4]
 802768c:	4630      	mov	r0, r6
 802768e:	f000 fb67 	bl	8027d60 <_Balloc>
 8027692:	4680      	mov	r8, r0
 8027694:	b928      	cbnz	r0, 80276a2 <_dtoa_r+0x8d2>
 8027696:	4b82      	ldr	r3, [pc, #520]	; (80278a0 <_dtoa_r+0xad0>)
 8027698:	4602      	mov	r2, r0
 802769a:	f240 21ea 	movw	r1, #746	; 0x2ea
 802769e:	f7ff bbaf 	b.w	8026e00 <_dtoa_r+0x30>
 80276a2:	693a      	ldr	r2, [r7, #16]
 80276a4:	3202      	adds	r2, #2
 80276a6:	0092      	lsls	r2, r2, #2
 80276a8:	f107 010c 	add.w	r1, r7, #12
 80276ac:	300c      	adds	r0, #12
 80276ae:	f7fc feab 	bl	8024408 <memcpy>
 80276b2:	2201      	movs	r2, #1
 80276b4:	4641      	mov	r1, r8
 80276b6:	4630      	mov	r0, r6
 80276b8:	f000 fd64 	bl	8028184 <__lshift>
 80276bc:	9b01      	ldr	r3, [sp, #4]
 80276be:	3301      	adds	r3, #1
 80276c0:	9304      	str	r3, [sp, #16]
 80276c2:	9b01      	ldr	r3, [sp, #4]
 80276c4:	4453      	add	r3, sl
 80276c6:	9308      	str	r3, [sp, #32]
 80276c8:	9b02      	ldr	r3, [sp, #8]
 80276ca:	f003 0301 	and.w	r3, r3, #1
 80276ce:	46b9      	mov	r9, r7
 80276d0:	9307      	str	r3, [sp, #28]
 80276d2:	4607      	mov	r7, r0
 80276d4:	9b04      	ldr	r3, [sp, #16]
 80276d6:	4621      	mov	r1, r4
 80276d8:	3b01      	subs	r3, #1
 80276da:	4628      	mov	r0, r5
 80276dc:	9302      	str	r3, [sp, #8]
 80276de:	f7ff fae9 	bl	8026cb4 <quorem>
 80276e2:	4603      	mov	r3, r0
 80276e4:	3330      	adds	r3, #48	; 0x30
 80276e6:	9005      	str	r0, [sp, #20]
 80276e8:	4649      	mov	r1, r9
 80276ea:	4628      	mov	r0, r5
 80276ec:	9309      	str	r3, [sp, #36]	; 0x24
 80276ee:	f000 fdb9 	bl	8028264 <__mcmp>
 80276f2:	463a      	mov	r2, r7
 80276f4:	4682      	mov	sl, r0
 80276f6:	4621      	mov	r1, r4
 80276f8:	4630      	mov	r0, r6
 80276fa:	f000 fdcf 	bl	802829c <__mdiff>
 80276fe:	68c2      	ldr	r2, [r0, #12]
 8027700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027702:	4680      	mov	r8, r0
 8027704:	bb0a      	cbnz	r2, 802774a <_dtoa_r+0x97a>
 8027706:	4601      	mov	r1, r0
 8027708:	4628      	mov	r0, r5
 802770a:	f000 fdab 	bl	8028264 <__mcmp>
 802770e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027710:	4602      	mov	r2, r0
 8027712:	4641      	mov	r1, r8
 8027714:	4630      	mov	r0, r6
 8027716:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802771a:	f000 fb61 	bl	8027de0 <_Bfree>
 802771e:	9b06      	ldr	r3, [sp, #24]
 8027720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027722:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027726:	ea43 0102 	orr.w	r1, r3, r2
 802772a:	9b07      	ldr	r3, [sp, #28]
 802772c:	430b      	orrs	r3, r1
 802772e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027730:	d10d      	bne.n	802774e <_dtoa_r+0x97e>
 8027732:	2b39      	cmp	r3, #57	; 0x39
 8027734:	d029      	beq.n	802778a <_dtoa_r+0x9ba>
 8027736:	f1ba 0f00 	cmp.w	sl, #0
 802773a:	dd01      	ble.n	8027740 <_dtoa_r+0x970>
 802773c:	9b05      	ldr	r3, [sp, #20]
 802773e:	3331      	adds	r3, #49	; 0x31
 8027740:	9a02      	ldr	r2, [sp, #8]
 8027742:	7013      	strb	r3, [r2, #0]
 8027744:	e774      	b.n	8027630 <_dtoa_r+0x860>
 8027746:	4638      	mov	r0, r7
 8027748:	e7b8      	b.n	80276bc <_dtoa_r+0x8ec>
 802774a:	2201      	movs	r2, #1
 802774c:	e7e1      	b.n	8027712 <_dtoa_r+0x942>
 802774e:	f1ba 0f00 	cmp.w	sl, #0
 8027752:	db06      	blt.n	8027762 <_dtoa_r+0x992>
 8027754:	9906      	ldr	r1, [sp, #24]
 8027756:	ea41 0a0a 	orr.w	sl, r1, sl
 802775a:	9907      	ldr	r1, [sp, #28]
 802775c:	ea5a 0101 	orrs.w	r1, sl, r1
 8027760:	d120      	bne.n	80277a4 <_dtoa_r+0x9d4>
 8027762:	2a00      	cmp	r2, #0
 8027764:	ddec      	ble.n	8027740 <_dtoa_r+0x970>
 8027766:	4629      	mov	r1, r5
 8027768:	2201      	movs	r2, #1
 802776a:	4630      	mov	r0, r6
 802776c:	9304      	str	r3, [sp, #16]
 802776e:	f000 fd09 	bl	8028184 <__lshift>
 8027772:	4621      	mov	r1, r4
 8027774:	4605      	mov	r5, r0
 8027776:	f000 fd75 	bl	8028264 <__mcmp>
 802777a:	2800      	cmp	r0, #0
 802777c:	9b04      	ldr	r3, [sp, #16]
 802777e:	dc02      	bgt.n	8027786 <_dtoa_r+0x9b6>
 8027780:	d1de      	bne.n	8027740 <_dtoa_r+0x970>
 8027782:	07da      	lsls	r2, r3, #31
 8027784:	d5dc      	bpl.n	8027740 <_dtoa_r+0x970>
 8027786:	2b39      	cmp	r3, #57	; 0x39
 8027788:	d1d8      	bne.n	802773c <_dtoa_r+0x96c>
 802778a:	9a02      	ldr	r2, [sp, #8]
 802778c:	2339      	movs	r3, #57	; 0x39
 802778e:	7013      	strb	r3, [r2, #0]
 8027790:	4643      	mov	r3, r8
 8027792:	4698      	mov	r8, r3
 8027794:	3b01      	subs	r3, #1
 8027796:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 802779a:	2a39      	cmp	r2, #57	; 0x39
 802779c:	d051      	beq.n	8027842 <_dtoa_r+0xa72>
 802779e:	3201      	adds	r2, #1
 80277a0:	701a      	strb	r2, [r3, #0]
 80277a2:	e745      	b.n	8027630 <_dtoa_r+0x860>
 80277a4:	2a00      	cmp	r2, #0
 80277a6:	dd03      	ble.n	80277b0 <_dtoa_r+0x9e0>
 80277a8:	2b39      	cmp	r3, #57	; 0x39
 80277aa:	d0ee      	beq.n	802778a <_dtoa_r+0x9ba>
 80277ac:	3301      	adds	r3, #1
 80277ae:	e7c7      	b.n	8027740 <_dtoa_r+0x970>
 80277b0:	9a04      	ldr	r2, [sp, #16]
 80277b2:	9908      	ldr	r1, [sp, #32]
 80277b4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80277b8:	428a      	cmp	r2, r1
 80277ba:	d02b      	beq.n	8027814 <_dtoa_r+0xa44>
 80277bc:	4629      	mov	r1, r5
 80277be:	2300      	movs	r3, #0
 80277c0:	220a      	movs	r2, #10
 80277c2:	4630      	mov	r0, r6
 80277c4:	f000 fb2e 	bl	8027e24 <__multadd>
 80277c8:	45b9      	cmp	r9, r7
 80277ca:	4605      	mov	r5, r0
 80277cc:	f04f 0300 	mov.w	r3, #0
 80277d0:	f04f 020a 	mov.w	r2, #10
 80277d4:	4649      	mov	r1, r9
 80277d6:	4630      	mov	r0, r6
 80277d8:	d107      	bne.n	80277ea <_dtoa_r+0xa1a>
 80277da:	f000 fb23 	bl	8027e24 <__multadd>
 80277de:	4681      	mov	r9, r0
 80277e0:	4607      	mov	r7, r0
 80277e2:	9b04      	ldr	r3, [sp, #16]
 80277e4:	3301      	adds	r3, #1
 80277e6:	9304      	str	r3, [sp, #16]
 80277e8:	e774      	b.n	80276d4 <_dtoa_r+0x904>
 80277ea:	f000 fb1b 	bl	8027e24 <__multadd>
 80277ee:	4639      	mov	r1, r7
 80277f0:	4681      	mov	r9, r0
 80277f2:	2300      	movs	r3, #0
 80277f4:	220a      	movs	r2, #10
 80277f6:	4630      	mov	r0, r6
 80277f8:	f000 fb14 	bl	8027e24 <__multadd>
 80277fc:	4607      	mov	r7, r0
 80277fe:	e7f0      	b.n	80277e2 <_dtoa_r+0xa12>
 8027800:	f1ba 0f00 	cmp.w	sl, #0
 8027804:	9a01      	ldr	r2, [sp, #4]
 8027806:	bfcc      	ite	gt
 8027808:	46d0      	movgt	r8, sl
 802780a:	f04f 0801 	movle.w	r8, #1
 802780e:	4490      	add	r8, r2
 8027810:	f04f 0900 	mov.w	r9, #0
 8027814:	4629      	mov	r1, r5
 8027816:	2201      	movs	r2, #1
 8027818:	4630      	mov	r0, r6
 802781a:	9302      	str	r3, [sp, #8]
 802781c:	f000 fcb2 	bl	8028184 <__lshift>
 8027820:	4621      	mov	r1, r4
 8027822:	4605      	mov	r5, r0
 8027824:	f000 fd1e 	bl	8028264 <__mcmp>
 8027828:	2800      	cmp	r0, #0
 802782a:	dcb1      	bgt.n	8027790 <_dtoa_r+0x9c0>
 802782c:	d102      	bne.n	8027834 <_dtoa_r+0xa64>
 802782e:	9b02      	ldr	r3, [sp, #8]
 8027830:	07db      	lsls	r3, r3, #31
 8027832:	d4ad      	bmi.n	8027790 <_dtoa_r+0x9c0>
 8027834:	4643      	mov	r3, r8
 8027836:	4698      	mov	r8, r3
 8027838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802783c:	2a30      	cmp	r2, #48	; 0x30
 802783e:	d0fa      	beq.n	8027836 <_dtoa_r+0xa66>
 8027840:	e6f6      	b.n	8027630 <_dtoa_r+0x860>
 8027842:	9a01      	ldr	r2, [sp, #4]
 8027844:	429a      	cmp	r2, r3
 8027846:	d1a4      	bne.n	8027792 <_dtoa_r+0x9c2>
 8027848:	f10b 0b01 	add.w	fp, fp, #1
 802784c:	2331      	movs	r3, #49	; 0x31
 802784e:	e778      	b.n	8027742 <_dtoa_r+0x972>
 8027850:	4b14      	ldr	r3, [pc, #80]	; (80278a4 <_dtoa_r+0xad4>)
 8027852:	f7ff bb27 	b.w	8026ea4 <_dtoa_r+0xd4>
 8027856:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027858:	2b00      	cmp	r3, #0
 802785a:	f47f ab03 	bne.w	8026e64 <_dtoa_r+0x94>
 802785e:	4b12      	ldr	r3, [pc, #72]	; (80278a8 <_dtoa_r+0xad8>)
 8027860:	f7ff bb20 	b.w	8026ea4 <_dtoa_r+0xd4>
 8027864:	f1ba 0f00 	cmp.w	sl, #0
 8027868:	dc03      	bgt.n	8027872 <_dtoa_r+0xaa2>
 802786a:	9b06      	ldr	r3, [sp, #24]
 802786c:	2b02      	cmp	r3, #2
 802786e:	f73f aec7 	bgt.w	8027600 <_dtoa_r+0x830>
 8027872:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027876:	4621      	mov	r1, r4
 8027878:	4628      	mov	r0, r5
 802787a:	f7ff fa1b 	bl	8026cb4 <quorem>
 802787e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8027882:	f808 3b01 	strb.w	r3, [r8], #1
 8027886:	9a01      	ldr	r2, [sp, #4]
 8027888:	eba8 0202 	sub.w	r2, r8, r2
 802788c:	4592      	cmp	sl, r2
 802788e:	ddb7      	ble.n	8027800 <_dtoa_r+0xa30>
 8027890:	4629      	mov	r1, r5
 8027892:	2300      	movs	r3, #0
 8027894:	220a      	movs	r2, #10
 8027896:	4630      	mov	r0, r6
 8027898:	f000 fac4 	bl	8027e24 <__multadd>
 802789c:	4605      	mov	r5, r0
 802789e:	e7ea      	b.n	8027876 <_dtoa_r+0xaa6>
 80278a0:	080462f1 	.word	0x080462f1
 80278a4:	08046471 	.word	0x08046471
 80278a8:	08046289 	.word	0x08046289

080278ac <__errno>:
 80278ac:	4b01      	ldr	r3, [pc, #4]	; (80278b4 <__errno+0x8>)
 80278ae:	6818      	ldr	r0, [r3, #0]
 80278b0:	4770      	bx	lr
 80278b2:	bf00      	nop
 80278b4:	20000490 	.word	0x20000490

080278b8 <__sflush_r>:
 80278b8:	898a      	ldrh	r2, [r1, #12]
 80278ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278be:	4605      	mov	r5, r0
 80278c0:	0710      	lsls	r0, r2, #28
 80278c2:	460c      	mov	r4, r1
 80278c4:	d458      	bmi.n	8027978 <__sflush_r+0xc0>
 80278c6:	684b      	ldr	r3, [r1, #4]
 80278c8:	2b00      	cmp	r3, #0
 80278ca:	dc05      	bgt.n	80278d8 <__sflush_r+0x20>
 80278cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80278ce:	2b00      	cmp	r3, #0
 80278d0:	dc02      	bgt.n	80278d8 <__sflush_r+0x20>
 80278d2:	2000      	movs	r0, #0
 80278d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80278da:	2e00      	cmp	r6, #0
 80278dc:	d0f9      	beq.n	80278d2 <__sflush_r+0x1a>
 80278de:	2300      	movs	r3, #0
 80278e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80278e4:	682f      	ldr	r7, [r5, #0]
 80278e6:	602b      	str	r3, [r5, #0]
 80278e8:	d032      	beq.n	8027950 <__sflush_r+0x98>
 80278ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80278ec:	89a3      	ldrh	r3, [r4, #12]
 80278ee:	075a      	lsls	r2, r3, #29
 80278f0:	d505      	bpl.n	80278fe <__sflush_r+0x46>
 80278f2:	6863      	ldr	r3, [r4, #4]
 80278f4:	1ac0      	subs	r0, r0, r3
 80278f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80278f8:	b10b      	cbz	r3, 80278fe <__sflush_r+0x46>
 80278fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80278fc:	1ac0      	subs	r0, r0, r3
 80278fe:	2300      	movs	r3, #0
 8027900:	4602      	mov	r2, r0
 8027902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027904:	6a21      	ldr	r1, [r4, #32]
 8027906:	4628      	mov	r0, r5
 8027908:	47b0      	blx	r6
 802790a:	1c43      	adds	r3, r0, #1
 802790c:	89a3      	ldrh	r3, [r4, #12]
 802790e:	d106      	bne.n	802791e <__sflush_r+0x66>
 8027910:	6829      	ldr	r1, [r5, #0]
 8027912:	291d      	cmp	r1, #29
 8027914:	d82c      	bhi.n	8027970 <__sflush_r+0xb8>
 8027916:	4a2a      	ldr	r2, [pc, #168]	; (80279c0 <__sflush_r+0x108>)
 8027918:	40ca      	lsrs	r2, r1
 802791a:	07d6      	lsls	r6, r2, #31
 802791c:	d528      	bpl.n	8027970 <__sflush_r+0xb8>
 802791e:	2200      	movs	r2, #0
 8027920:	6062      	str	r2, [r4, #4]
 8027922:	04d9      	lsls	r1, r3, #19
 8027924:	6922      	ldr	r2, [r4, #16]
 8027926:	6022      	str	r2, [r4, #0]
 8027928:	d504      	bpl.n	8027934 <__sflush_r+0x7c>
 802792a:	1c42      	adds	r2, r0, #1
 802792c:	d101      	bne.n	8027932 <__sflush_r+0x7a>
 802792e:	682b      	ldr	r3, [r5, #0]
 8027930:	b903      	cbnz	r3, 8027934 <__sflush_r+0x7c>
 8027932:	6560      	str	r0, [r4, #84]	; 0x54
 8027934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027936:	602f      	str	r7, [r5, #0]
 8027938:	2900      	cmp	r1, #0
 802793a:	d0ca      	beq.n	80278d2 <__sflush_r+0x1a>
 802793c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027940:	4299      	cmp	r1, r3
 8027942:	d002      	beq.n	802794a <__sflush_r+0x92>
 8027944:	4628      	mov	r0, r5
 8027946:	f7fd f801 	bl	802494c <_free_r>
 802794a:	2000      	movs	r0, #0
 802794c:	6360      	str	r0, [r4, #52]	; 0x34
 802794e:	e7c1      	b.n	80278d4 <__sflush_r+0x1c>
 8027950:	6a21      	ldr	r1, [r4, #32]
 8027952:	2301      	movs	r3, #1
 8027954:	4628      	mov	r0, r5
 8027956:	47b0      	blx	r6
 8027958:	1c41      	adds	r1, r0, #1
 802795a:	d1c7      	bne.n	80278ec <__sflush_r+0x34>
 802795c:	682b      	ldr	r3, [r5, #0]
 802795e:	2b00      	cmp	r3, #0
 8027960:	d0c4      	beq.n	80278ec <__sflush_r+0x34>
 8027962:	2b1d      	cmp	r3, #29
 8027964:	d001      	beq.n	802796a <__sflush_r+0xb2>
 8027966:	2b16      	cmp	r3, #22
 8027968:	d101      	bne.n	802796e <__sflush_r+0xb6>
 802796a:	602f      	str	r7, [r5, #0]
 802796c:	e7b1      	b.n	80278d2 <__sflush_r+0x1a>
 802796e:	89a3      	ldrh	r3, [r4, #12]
 8027970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027974:	81a3      	strh	r3, [r4, #12]
 8027976:	e7ad      	b.n	80278d4 <__sflush_r+0x1c>
 8027978:	690f      	ldr	r7, [r1, #16]
 802797a:	2f00      	cmp	r7, #0
 802797c:	d0a9      	beq.n	80278d2 <__sflush_r+0x1a>
 802797e:	0793      	lsls	r3, r2, #30
 8027980:	680e      	ldr	r6, [r1, #0]
 8027982:	bf08      	it	eq
 8027984:	694b      	ldreq	r3, [r1, #20]
 8027986:	600f      	str	r7, [r1, #0]
 8027988:	bf18      	it	ne
 802798a:	2300      	movne	r3, #0
 802798c:	eba6 0807 	sub.w	r8, r6, r7
 8027990:	608b      	str	r3, [r1, #8]
 8027992:	f1b8 0f00 	cmp.w	r8, #0
 8027996:	dd9c      	ble.n	80278d2 <__sflush_r+0x1a>
 8027998:	6a21      	ldr	r1, [r4, #32]
 802799a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802799c:	4643      	mov	r3, r8
 802799e:	463a      	mov	r2, r7
 80279a0:	4628      	mov	r0, r5
 80279a2:	47b0      	blx	r6
 80279a4:	2800      	cmp	r0, #0
 80279a6:	dc06      	bgt.n	80279b6 <__sflush_r+0xfe>
 80279a8:	89a3      	ldrh	r3, [r4, #12]
 80279aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80279ae:	81a3      	strh	r3, [r4, #12]
 80279b0:	f04f 30ff 	mov.w	r0, #4294967295
 80279b4:	e78e      	b.n	80278d4 <__sflush_r+0x1c>
 80279b6:	4407      	add	r7, r0
 80279b8:	eba8 0800 	sub.w	r8, r8, r0
 80279bc:	e7e9      	b.n	8027992 <__sflush_r+0xda>
 80279be:	bf00      	nop
 80279c0:	20400001 	.word	0x20400001

080279c4 <_fflush_r>:
 80279c4:	b538      	push	{r3, r4, r5, lr}
 80279c6:	690b      	ldr	r3, [r1, #16]
 80279c8:	4605      	mov	r5, r0
 80279ca:	460c      	mov	r4, r1
 80279cc:	b913      	cbnz	r3, 80279d4 <_fflush_r+0x10>
 80279ce:	2500      	movs	r5, #0
 80279d0:	4628      	mov	r0, r5
 80279d2:	bd38      	pop	{r3, r4, r5, pc}
 80279d4:	b118      	cbz	r0, 80279de <_fflush_r+0x1a>
 80279d6:	6983      	ldr	r3, [r0, #24]
 80279d8:	b90b      	cbnz	r3, 80279de <_fflush_r+0x1a>
 80279da:	f7fc fb1b 	bl	8024014 <__sinit>
 80279de:	4b14      	ldr	r3, [pc, #80]	; (8027a30 <_fflush_r+0x6c>)
 80279e0:	429c      	cmp	r4, r3
 80279e2:	d11b      	bne.n	8027a1c <_fflush_r+0x58>
 80279e4:	686c      	ldr	r4, [r5, #4]
 80279e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d0ef      	beq.n	80279ce <_fflush_r+0xa>
 80279ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80279f0:	07d0      	lsls	r0, r2, #31
 80279f2:	d404      	bmi.n	80279fe <_fflush_r+0x3a>
 80279f4:	0599      	lsls	r1, r3, #22
 80279f6:	d402      	bmi.n	80279fe <_fflush_r+0x3a>
 80279f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80279fa:	f7fc fce1 	bl	80243c0 <__retarget_lock_acquire_recursive>
 80279fe:	4628      	mov	r0, r5
 8027a00:	4621      	mov	r1, r4
 8027a02:	f7ff ff59 	bl	80278b8 <__sflush_r>
 8027a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027a08:	07da      	lsls	r2, r3, #31
 8027a0a:	4605      	mov	r5, r0
 8027a0c:	d4e0      	bmi.n	80279d0 <_fflush_r+0xc>
 8027a0e:	89a3      	ldrh	r3, [r4, #12]
 8027a10:	059b      	lsls	r3, r3, #22
 8027a12:	d4dd      	bmi.n	80279d0 <_fflush_r+0xc>
 8027a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027a16:	f7fc fcd5 	bl	80243c4 <__retarget_lock_release_recursive>
 8027a1a:	e7d9      	b.n	80279d0 <_fflush_r+0xc>
 8027a1c:	4b05      	ldr	r3, [pc, #20]	; (8027a34 <_fflush_r+0x70>)
 8027a1e:	429c      	cmp	r4, r3
 8027a20:	d101      	bne.n	8027a26 <_fflush_r+0x62>
 8027a22:	68ac      	ldr	r4, [r5, #8]
 8027a24:	e7df      	b.n	80279e6 <_fflush_r+0x22>
 8027a26:	4b04      	ldr	r3, [pc, #16]	; (8027a38 <_fflush_r+0x74>)
 8027a28:	429c      	cmp	r4, r3
 8027a2a:	bf08      	it	eq
 8027a2c:	68ec      	ldreq	r4, [r5, #12]
 8027a2e:	e7da      	b.n	80279e6 <_fflush_r+0x22>
 8027a30:	08045cd4 	.word	0x08045cd4
 8027a34:	08045cf4 	.word	0x08045cf4
 8027a38:	08045cb4 	.word	0x08045cb4

08027a3c <fiprintf>:
 8027a3c:	b40e      	push	{r1, r2, r3}
 8027a3e:	b503      	push	{r0, r1, lr}
 8027a40:	4601      	mov	r1, r0
 8027a42:	ab03      	add	r3, sp, #12
 8027a44:	4805      	ldr	r0, [pc, #20]	; (8027a5c <fiprintf+0x20>)
 8027a46:	f853 2b04 	ldr.w	r2, [r3], #4
 8027a4a:	6800      	ldr	r0, [r0, #0]
 8027a4c:	9301      	str	r3, [sp, #4]
 8027a4e:	f001 f879 	bl	8028b44 <_vfiprintf_r>
 8027a52:	b002      	add	sp, #8
 8027a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8027a58:	b003      	add	sp, #12
 8027a5a:	4770      	bx	lr
 8027a5c:	20000490 	.word	0x20000490

08027a60 <_findenv_r>:
 8027a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027a64:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027ad4 <_findenv_r+0x74>
 8027a68:	4607      	mov	r7, r0
 8027a6a:	4689      	mov	r9, r1
 8027a6c:	4616      	mov	r6, r2
 8027a6e:	f001 fbe9 	bl	8029244 <__env_lock>
 8027a72:	f8da 4000 	ldr.w	r4, [sl]
 8027a76:	b134      	cbz	r4, 8027a86 <_findenv_r+0x26>
 8027a78:	464b      	mov	r3, r9
 8027a7a:	4698      	mov	r8, r3
 8027a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027a80:	b13a      	cbz	r2, 8027a92 <_findenv_r+0x32>
 8027a82:	2a3d      	cmp	r2, #61	; 0x3d
 8027a84:	d1f9      	bne.n	8027a7a <_findenv_r+0x1a>
 8027a86:	4638      	mov	r0, r7
 8027a88:	f001 fbe2 	bl	8029250 <__env_unlock>
 8027a8c:	2000      	movs	r0, #0
 8027a8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a92:	eba8 0809 	sub.w	r8, r8, r9
 8027a96:	46a3      	mov	fp, r4
 8027a98:	f854 0b04 	ldr.w	r0, [r4], #4
 8027a9c:	2800      	cmp	r0, #0
 8027a9e:	d0f2      	beq.n	8027a86 <_findenv_r+0x26>
 8027aa0:	4642      	mov	r2, r8
 8027aa2:	4649      	mov	r1, r9
 8027aa4:	f7fe fc4a 	bl	802633c <strncmp>
 8027aa8:	2800      	cmp	r0, #0
 8027aaa:	d1f4      	bne.n	8027a96 <_findenv_r+0x36>
 8027aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8027ab0:	eb03 0508 	add.w	r5, r3, r8
 8027ab4:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027ab8:	2b3d      	cmp	r3, #61	; 0x3d
 8027aba:	d1ec      	bne.n	8027a96 <_findenv_r+0x36>
 8027abc:	f8da 3000 	ldr.w	r3, [sl]
 8027ac0:	ebab 0303 	sub.w	r3, fp, r3
 8027ac4:	109b      	asrs	r3, r3, #2
 8027ac6:	4638      	mov	r0, r7
 8027ac8:	6033      	str	r3, [r6, #0]
 8027aca:	f001 fbc1 	bl	8029250 <__env_unlock>
 8027ace:	1c68      	adds	r0, r5, #1
 8027ad0:	e7dd      	b.n	8027a8e <_findenv_r+0x2e>
 8027ad2:	bf00      	nop
 8027ad4:	20000280 	.word	0x20000280

08027ad8 <_getenv_r>:
 8027ad8:	b507      	push	{r0, r1, r2, lr}
 8027ada:	aa01      	add	r2, sp, #4
 8027adc:	f7ff ffc0 	bl	8027a60 <_findenv_r>
 8027ae0:	b003      	add	sp, #12
 8027ae2:	f85d fb04 	ldr.w	pc, [sp], #4
 8027ae6:	Address 0x0000000008027ae6 is out of bounds.


08027ae8 <__gettzinfo>:
 8027ae8:	4800      	ldr	r0, [pc, #0]	; (8027aec <__gettzinfo+0x4>)
 8027aea:	4770      	bx	lr
 8027aec:	20000500 	.word	0x20000500

08027af0 <gmtime_r>:
 8027af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027af4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8027af8:	460c      	mov	r4, r1
 8027afa:	4a4f      	ldr	r2, [pc, #316]	; (8027c38 <gmtime_r+0x148>)
 8027afc:	2300      	movs	r3, #0
 8027afe:	4630      	mov	r0, r6
 8027b00:	4639      	mov	r1, r7
 8027b02:	f7d8 fc05 	bl	8000310 <__aeabi_ldivmod>
 8027b06:	4639      	mov	r1, r7
 8027b08:	4605      	mov	r5, r0
 8027b0a:	4a4b      	ldr	r2, [pc, #300]	; (8027c38 <gmtime_r+0x148>)
 8027b0c:	4630      	mov	r0, r6
 8027b0e:	2300      	movs	r3, #0
 8027b10:	f7d8 fbfe 	bl	8000310 <__aeabi_ldivmod>
 8027b14:	2a00      	cmp	r2, #0
 8027b16:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8027b1a:	bfb7      	itett	lt
 8027b1c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8027b20:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8027b24:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8027b28:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8027b2c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8027b30:	fbb2 f1f0 	udiv	r1, r2, r0
 8027b34:	fb00 2211 	mls	r2, r0, r1, r2
 8027b38:	203c      	movs	r0, #60	; 0x3c
 8027b3a:	60a1      	str	r1, [r4, #8]
 8027b3c:	fbb2 f1f0 	udiv	r1, r2, r0
 8027b40:	fb00 2211 	mls	r2, r0, r1, r2
 8027b44:	6061      	str	r1, [r4, #4]
 8027b46:	6022      	str	r2, [r4, #0]
 8027b48:	2107      	movs	r1, #7
 8027b4a:	1cda      	adds	r2, r3, #3
 8027b4c:	fb92 f1f1 	sdiv	r1, r2, r1
 8027b50:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8027b54:	1a52      	subs	r2, r2, r1
 8027b56:	bf48      	it	mi
 8027b58:	3207      	addmi	r2, #7
 8027b5a:	4d38      	ldr	r5, [pc, #224]	; (8027c3c <gmtime_r+0x14c>)
 8027b5c:	4838      	ldr	r0, [pc, #224]	; (8027c40 <gmtime_r+0x150>)
 8027b5e:	61a2      	str	r2, [r4, #24]
 8027b60:	2b00      	cmp	r3, #0
 8027b62:	bfb7      	itett	lt
 8027b64:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8027b68:	fb93 f5f5 	sdivge	r5, r3, r5
 8027b6c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8027b70:	fb92 f5f5 	sdivlt	r5, r2, r5
 8027b74:	fb00 3005 	mla	r0, r0, r5, r3
 8027b78:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8027b7c:	fbb0 f2f2 	udiv	r2, r0, r2
 8027b80:	4402      	add	r2, r0
 8027b82:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8027b86:	fbb0 f1f3 	udiv	r1, r0, r3
 8027b8a:	1a52      	subs	r2, r2, r1
 8027b8c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8027b90:	492c      	ldr	r1, [pc, #176]	; (8027c44 <gmtime_r+0x154>)
 8027b92:	fbb0 f1f1 	udiv	r1, r0, r1
 8027b96:	2764      	movs	r7, #100	; 0x64
 8027b98:	1a52      	subs	r2, r2, r1
 8027b9a:	fbb2 f1fc 	udiv	r1, r2, ip
 8027b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8027ba2:	fbb1 f6f7 	udiv	r6, r1, r7
 8027ba6:	1af3      	subs	r3, r6, r3
 8027ba8:	4403      	add	r3, r0
 8027baa:	fb0c 3311 	mls	r3, ip, r1, r3
 8027bae:	2299      	movs	r2, #153	; 0x99
 8027bb0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8027bb4:	f10e 0e02 	add.w	lr, lr, #2
 8027bb8:	f103 0c01 	add.w	ip, r3, #1
 8027bbc:	fbbe f0f2 	udiv	r0, lr, r2
 8027bc0:	4342      	muls	r2, r0
 8027bc2:	3202      	adds	r2, #2
 8027bc4:	f04f 0805 	mov.w	r8, #5
 8027bc8:	fbb2 f2f8 	udiv	r2, r2, r8
 8027bcc:	ebac 0c02 	sub.w	ip, ip, r2
 8027bd0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8027bd4:	4596      	cmp	lr, r2
 8027bd6:	bf94      	ite	ls
 8027bd8:	2202      	movls	r2, #2
 8027bda:	f06f 0209 	mvnhi.w	r2, #9
 8027bde:	4410      	add	r0, r2
 8027be0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027be4:	fb02 1505 	mla	r5, r2, r5, r1
 8027be8:	2801      	cmp	r0, #1
 8027bea:	bf98      	it	ls
 8027bec:	3501      	addls	r5, #1
 8027bee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8027bf2:	d30d      	bcc.n	8027c10 <gmtime_r+0x120>
 8027bf4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8027bf8:	61e3      	str	r3, [r4, #28]
 8027bfa:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8027bfe:	2300      	movs	r3, #0
 8027c00:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8027c04:	f8c4 c00c 	str.w	ip, [r4, #12]
 8027c08:	6223      	str	r3, [r4, #32]
 8027c0a:	4620      	mov	r0, r4
 8027c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027c10:	078a      	lsls	r2, r1, #30
 8027c12:	d102      	bne.n	8027c1a <gmtime_r+0x12a>
 8027c14:	fb07 1616 	mls	r6, r7, r6, r1
 8027c18:	b95e      	cbnz	r6, 8027c32 <gmtime_r+0x142>
 8027c1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027c1e:	fbb1 f6f2 	udiv	r6, r1, r2
 8027c22:	fb02 1216 	mls	r2, r2, r6, r1
 8027c26:	fab2 f282 	clz	r2, r2
 8027c2a:	0952      	lsrs	r2, r2, #5
 8027c2c:	333b      	adds	r3, #59	; 0x3b
 8027c2e:	4413      	add	r3, r2
 8027c30:	e7e2      	b.n	8027bf8 <gmtime_r+0x108>
 8027c32:	2201      	movs	r2, #1
 8027c34:	e7fa      	b.n	8027c2c <gmtime_r+0x13c>
 8027c36:	bf00      	nop
 8027c38:	00015180 	.word	0x00015180
 8027c3c:	00023ab1 	.word	0x00023ab1
 8027c40:	fffdc54f 	.word	0xfffdc54f
 8027c44:	00023ab0 	.word	0x00023ab0

08027c48 <labs>:
 8027c48:	2800      	cmp	r0, #0
 8027c4a:	bfb8      	it	lt
 8027c4c:	4240      	neglt	r0, r0
 8027c4e:	4770      	bx	lr

08027c50 <_localeconv_r>:
 8027c50:	4800      	ldr	r0, [pc, #0]	; (8027c54 <_localeconv_r+0x4>)
 8027c52:	4770      	bx	lr
 8027c54:	20000648 	.word	0x20000648

08027c58 <_lseek_r>:
 8027c58:	b538      	push	{r3, r4, r5, lr}
 8027c5a:	4d07      	ldr	r5, [pc, #28]	; (8027c78 <_lseek_r+0x20>)
 8027c5c:	4604      	mov	r4, r0
 8027c5e:	4608      	mov	r0, r1
 8027c60:	4611      	mov	r1, r2
 8027c62:	2200      	movs	r2, #0
 8027c64:	602a      	str	r2, [r5, #0]
 8027c66:	461a      	mov	r2, r3
 8027c68:	f7df fb8a 	bl	8007380 <_lseek>
 8027c6c:	1c43      	adds	r3, r0, #1
 8027c6e:	d102      	bne.n	8027c76 <_lseek_r+0x1e>
 8027c70:	682b      	ldr	r3, [r5, #0]
 8027c72:	b103      	cbz	r3, 8027c76 <_lseek_r+0x1e>
 8027c74:	6023      	str	r3, [r4, #0]
 8027c76:	bd38      	pop	{r3, r4, r5, pc}
 8027c78:	2002fd5c 	.word	0x2002fd5c

08027c7c <__swhatbuf_r>:
 8027c7c:	b570      	push	{r4, r5, r6, lr}
 8027c7e:	460e      	mov	r6, r1
 8027c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027c84:	2900      	cmp	r1, #0
 8027c86:	b096      	sub	sp, #88	; 0x58
 8027c88:	4614      	mov	r4, r2
 8027c8a:	461d      	mov	r5, r3
 8027c8c:	da08      	bge.n	8027ca0 <__swhatbuf_r+0x24>
 8027c8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8027c92:	2200      	movs	r2, #0
 8027c94:	602a      	str	r2, [r5, #0]
 8027c96:	061a      	lsls	r2, r3, #24
 8027c98:	d410      	bmi.n	8027cbc <__swhatbuf_r+0x40>
 8027c9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8027c9e:	e00e      	b.n	8027cbe <__swhatbuf_r+0x42>
 8027ca0:	466a      	mov	r2, sp
 8027ca2:	f001 fadb 	bl	802925c <_fstat_r>
 8027ca6:	2800      	cmp	r0, #0
 8027ca8:	dbf1      	blt.n	8027c8e <__swhatbuf_r+0x12>
 8027caa:	9a01      	ldr	r2, [sp, #4]
 8027cac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8027cb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8027cb4:	425a      	negs	r2, r3
 8027cb6:	415a      	adcs	r2, r3
 8027cb8:	602a      	str	r2, [r5, #0]
 8027cba:	e7ee      	b.n	8027c9a <__swhatbuf_r+0x1e>
 8027cbc:	2340      	movs	r3, #64	; 0x40
 8027cbe:	2000      	movs	r0, #0
 8027cc0:	6023      	str	r3, [r4, #0]
 8027cc2:	b016      	add	sp, #88	; 0x58
 8027cc4:	bd70      	pop	{r4, r5, r6, pc}
 8027cc6:	Address 0x0000000008027cc6 is out of bounds.


08027cc8 <__smakebuf_r>:
 8027cc8:	898b      	ldrh	r3, [r1, #12]
 8027cca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8027ccc:	079d      	lsls	r5, r3, #30
 8027cce:	4606      	mov	r6, r0
 8027cd0:	460c      	mov	r4, r1
 8027cd2:	d507      	bpl.n	8027ce4 <__smakebuf_r+0x1c>
 8027cd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027cd8:	6023      	str	r3, [r4, #0]
 8027cda:	6123      	str	r3, [r4, #16]
 8027cdc:	2301      	movs	r3, #1
 8027cde:	6163      	str	r3, [r4, #20]
 8027ce0:	b002      	add	sp, #8
 8027ce2:	bd70      	pop	{r4, r5, r6, pc}
 8027ce4:	ab01      	add	r3, sp, #4
 8027ce6:	466a      	mov	r2, sp
 8027ce8:	f7ff ffc8 	bl	8027c7c <__swhatbuf_r>
 8027cec:	9900      	ldr	r1, [sp, #0]
 8027cee:	4605      	mov	r5, r0
 8027cf0:	4630      	mov	r0, r6
 8027cf2:	f7fc fe97 	bl	8024a24 <_malloc_r>
 8027cf6:	b948      	cbnz	r0, 8027d0c <__smakebuf_r+0x44>
 8027cf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027cfc:	059a      	lsls	r2, r3, #22
 8027cfe:	d4ef      	bmi.n	8027ce0 <__smakebuf_r+0x18>
 8027d00:	f023 0303 	bic.w	r3, r3, #3
 8027d04:	f043 0302 	orr.w	r3, r3, #2
 8027d08:	81a3      	strh	r3, [r4, #12]
 8027d0a:	e7e3      	b.n	8027cd4 <__smakebuf_r+0xc>
 8027d0c:	4b0d      	ldr	r3, [pc, #52]	; (8027d44 <__smakebuf_r+0x7c>)
 8027d0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027d10:	89a3      	ldrh	r3, [r4, #12]
 8027d12:	6020      	str	r0, [r4, #0]
 8027d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027d18:	81a3      	strh	r3, [r4, #12]
 8027d1a:	9b00      	ldr	r3, [sp, #0]
 8027d1c:	6163      	str	r3, [r4, #20]
 8027d1e:	9b01      	ldr	r3, [sp, #4]
 8027d20:	6120      	str	r0, [r4, #16]
 8027d22:	b15b      	cbz	r3, 8027d3c <__smakebuf_r+0x74>
 8027d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027d28:	4630      	mov	r0, r6
 8027d2a:	f001 faa9 	bl	8029280 <_isatty_r>
 8027d2e:	b128      	cbz	r0, 8027d3c <__smakebuf_r+0x74>
 8027d30:	89a3      	ldrh	r3, [r4, #12]
 8027d32:	f023 0303 	bic.w	r3, r3, #3
 8027d36:	f043 0301 	orr.w	r3, r3, #1
 8027d3a:	81a3      	strh	r3, [r4, #12]
 8027d3c:	89a0      	ldrh	r0, [r4, #12]
 8027d3e:	4305      	orrs	r5, r0
 8027d40:	81a5      	strh	r5, [r4, #12]
 8027d42:	e7cd      	b.n	8027ce0 <__smakebuf_r+0x18>
 8027d44:	08023fad 	.word	0x08023fad

08027d48 <__malloc_lock>:
 8027d48:	4801      	ldr	r0, [pc, #4]	; (8027d50 <__malloc_lock+0x8>)
 8027d4a:	f7fc bb39 	b.w	80243c0 <__retarget_lock_acquire_recursive>
 8027d4e:	bf00      	nop
 8027d50:	2002fd4d 	.word	0x2002fd4d

08027d54 <__malloc_unlock>:
 8027d54:	4801      	ldr	r0, [pc, #4]	; (8027d5c <__malloc_unlock+0x8>)
 8027d56:	f7fc bb35 	b.w	80243c4 <__retarget_lock_release_recursive>
 8027d5a:	bf00      	nop
 8027d5c:	2002fd4d 	.word	0x2002fd4d

08027d60 <_Balloc>:
 8027d60:	b570      	push	{r4, r5, r6, lr}
 8027d62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027d64:	4604      	mov	r4, r0
 8027d66:	460d      	mov	r5, r1
 8027d68:	b976      	cbnz	r6, 8027d88 <_Balloc+0x28>
 8027d6a:	2010      	movs	r0, #16
 8027d6c:	f7fc fb2c 	bl	80243c8 <malloc>
 8027d70:	4602      	mov	r2, r0
 8027d72:	6260      	str	r0, [r4, #36]	; 0x24
 8027d74:	b920      	cbnz	r0, 8027d80 <_Balloc+0x20>
 8027d76:	4b18      	ldr	r3, [pc, #96]	; (8027dd8 <_Balloc+0x78>)
 8027d78:	4818      	ldr	r0, [pc, #96]	; (8027ddc <_Balloc+0x7c>)
 8027d7a:	2166      	movs	r1, #102	; 0x66
 8027d7c:	f7fe ff58 	bl	8026c30 <__assert_func>
 8027d80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027d84:	6006      	str	r6, [r0, #0]
 8027d86:	60c6      	str	r6, [r0, #12]
 8027d88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8027d8a:	68f3      	ldr	r3, [r6, #12]
 8027d8c:	b183      	cbz	r3, 8027db0 <_Balloc+0x50>
 8027d8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027d90:	68db      	ldr	r3, [r3, #12]
 8027d92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8027d96:	b9b8      	cbnz	r0, 8027dc8 <_Balloc+0x68>
 8027d98:	2101      	movs	r1, #1
 8027d9a:	fa01 f605 	lsl.w	r6, r1, r5
 8027d9e:	1d72      	adds	r2, r6, #5
 8027da0:	0092      	lsls	r2, r2, #2
 8027da2:	4620      	mov	r0, r4
 8027da4:	f000 fb60 	bl	8028468 <_calloc_r>
 8027da8:	b160      	cbz	r0, 8027dc4 <_Balloc+0x64>
 8027daa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8027dae:	e00e      	b.n	8027dce <_Balloc+0x6e>
 8027db0:	2221      	movs	r2, #33	; 0x21
 8027db2:	2104      	movs	r1, #4
 8027db4:	4620      	mov	r0, r4
 8027db6:	f000 fb57 	bl	8028468 <_calloc_r>
 8027dba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8027dbc:	60f0      	str	r0, [r6, #12]
 8027dbe:	68db      	ldr	r3, [r3, #12]
 8027dc0:	2b00      	cmp	r3, #0
 8027dc2:	d1e4      	bne.n	8027d8e <_Balloc+0x2e>
 8027dc4:	2000      	movs	r0, #0
 8027dc6:	bd70      	pop	{r4, r5, r6, pc}
 8027dc8:	6802      	ldr	r2, [r0, #0]
 8027dca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8027dce:	2300      	movs	r3, #0
 8027dd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027dd4:	e7f7      	b.n	8027dc6 <_Balloc+0x66>
 8027dd6:	bf00      	nop
 8027dd8:	08045d18 	.word	0x08045d18
 8027ddc:	08046302 	.word	0x08046302

08027de0 <_Bfree>:
 8027de0:	b570      	push	{r4, r5, r6, lr}
 8027de2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027de4:	4605      	mov	r5, r0
 8027de6:	460c      	mov	r4, r1
 8027de8:	b976      	cbnz	r6, 8027e08 <_Bfree+0x28>
 8027dea:	2010      	movs	r0, #16
 8027dec:	f7fc faec 	bl	80243c8 <malloc>
 8027df0:	4602      	mov	r2, r0
 8027df2:	6268      	str	r0, [r5, #36]	; 0x24
 8027df4:	b920      	cbnz	r0, 8027e00 <_Bfree+0x20>
 8027df6:	4b09      	ldr	r3, [pc, #36]	; (8027e1c <_Bfree+0x3c>)
 8027df8:	4809      	ldr	r0, [pc, #36]	; (8027e20 <_Bfree+0x40>)
 8027dfa:	218a      	movs	r1, #138	; 0x8a
 8027dfc:	f7fe ff18 	bl	8026c30 <__assert_func>
 8027e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027e04:	6006      	str	r6, [r0, #0]
 8027e06:	60c6      	str	r6, [r0, #12]
 8027e08:	b13c      	cbz	r4, 8027e1a <_Bfree+0x3a>
 8027e0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8027e0c:	6862      	ldr	r2, [r4, #4]
 8027e0e:	68db      	ldr	r3, [r3, #12]
 8027e10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027e14:	6021      	str	r1, [r4, #0]
 8027e16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027e1a:	bd70      	pop	{r4, r5, r6, pc}
 8027e1c:	08045d18 	.word	0x08045d18
 8027e20:	08046302 	.word	0x08046302

08027e24 <__multadd>:
 8027e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027e28:	690d      	ldr	r5, [r1, #16]
 8027e2a:	4607      	mov	r7, r0
 8027e2c:	460c      	mov	r4, r1
 8027e2e:	461e      	mov	r6, r3
 8027e30:	f101 0c14 	add.w	ip, r1, #20
 8027e34:	2000      	movs	r0, #0
 8027e36:	f8dc 3000 	ldr.w	r3, [ip]
 8027e3a:	b299      	uxth	r1, r3
 8027e3c:	fb02 6101 	mla	r1, r2, r1, r6
 8027e40:	0c1e      	lsrs	r6, r3, #16
 8027e42:	0c0b      	lsrs	r3, r1, #16
 8027e44:	fb02 3306 	mla	r3, r2, r6, r3
 8027e48:	b289      	uxth	r1, r1
 8027e4a:	3001      	adds	r0, #1
 8027e4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027e50:	4285      	cmp	r5, r0
 8027e52:	f84c 1b04 	str.w	r1, [ip], #4
 8027e56:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027e5a:	dcec      	bgt.n	8027e36 <__multadd+0x12>
 8027e5c:	b30e      	cbz	r6, 8027ea2 <__multadd+0x7e>
 8027e5e:	68a3      	ldr	r3, [r4, #8]
 8027e60:	42ab      	cmp	r3, r5
 8027e62:	dc19      	bgt.n	8027e98 <__multadd+0x74>
 8027e64:	6861      	ldr	r1, [r4, #4]
 8027e66:	4638      	mov	r0, r7
 8027e68:	3101      	adds	r1, #1
 8027e6a:	f7ff ff79 	bl	8027d60 <_Balloc>
 8027e6e:	4680      	mov	r8, r0
 8027e70:	b928      	cbnz	r0, 8027e7e <__multadd+0x5a>
 8027e72:	4602      	mov	r2, r0
 8027e74:	4b0c      	ldr	r3, [pc, #48]	; (8027ea8 <__multadd+0x84>)
 8027e76:	480d      	ldr	r0, [pc, #52]	; (8027eac <__multadd+0x88>)
 8027e78:	21b5      	movs	r1, #181	; 0xb5
 8027e7a:	f7fe fed9 	bl	8026c30 <__assert_func>
 8027e7e:	6922      	ldr	r2, [r4, #16]
 8027e80:	3202      	adds	r2, #2
 8027e82:	f104 010c 	add.w	r1, r4, #12
 8027e86:	0092      	lsls	r2, r2, #2
 8027e88:	300c      	adds	r0, #12
 8027e8a:	f7fc fabd 	bl	8024408 <memcpy>
 8027e8e:	4621      	mov	r1, r4
 8027e90:	4638      	mov	r0, r7
 8027e92:	f7ff ffa5 	bl	8027de0 <_Bfree>
 8027e96:	4644      	mov	r4, r8
 8027e98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027e9c:	3501      	adds	r5, #1
 8027e9e:	615e      	str	r6, [r3, #20]
 8027ea0:	6125      	str	r5, [r4, #16]
 8027ea2:	4620      	mov	r0, r4
 8027ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ea8:	080462f1 	.word	0x080462f1
 8027eac:	08046302 	.word	0x08046302

08027eb0 <__hi0bits>:
 8027eb0:	0c03      	lsrs	r3, r0, #16
 8027eb2:	041b      	lsls	r3, r3, #16
 8027eb4:	b9d3      	cbnz	r3, 8027eec <__hi0bits+0x3c>
 8027eb6:	0400      	lsls	r0, r0, #16
 8027eb8:	2310      	movs	r3, #16
 8027eba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8027ebe:	bf04      	itt	eq
 8027ec0:	0200      	lsleq	r0, r0, #8
 8027ec2:	3308      	addeq	r3, #8
 8027ec4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027ec8:	bf04      	itt	eq
 8027eca:	0100      	lsleq	r0, r0, #4
 8027ecc:	3304      	addeq	r3, #4
 8027ece:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027ed2:	bf04      	itt	eq
 8027ed4:	0080      	lsleq	r0, r0, #2
 8027ed6:	3302      	addeq	r3, #2
 8027ed8:	2800      	cmp	r0, #0
 8027eda:	db05      	blt.n	8027ee8 <__hi0bits+0x38>
 8027edc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027ee0:	f103 0301 	add.w	r3, r3, #1
 8027ee4:	bf08      	it	eq
 8027ee6:	2320      	moveq	r3, #32
 8027ee8:	4618      	mov	r0, r3
 8027eea:	4770      	bx	lr
 8027eec:	2300      	movs	r3, #0
 8027eee:	e7e4      	b.n	8027eba <__hi0bits+0xa>

08027ef0 <__lo0bits>:
 8027ef0:	6803      	ldr	r3, [r0, #0]
 8027ef2:	f013 0207 	ands.w	r2, r3, #7
 8027ef6:	4601      	mov	r1, r0
 8027ef8:	d00b      	beq.n	8027f12 <__lo0bits+0x22>
 8027efa:	07da      	lsls	r2, r3, #31
 8027efc:	d423      	bmi.n	8027f46 <__lo0bits+0x56>
 8027efe:	0798      	lsls	r0, r3, #30
 8027f00:	bf49      	itett	mi
 8027f02:	085b      	lsrmi	r3, r3, #1
 8027f04:	089b      	lsrpl	r3, r3, #2
 8027f06:	2001      	movmi	r0, #1
 8027f08:	600b      	strmi	r3, [r1, #0]
 8027f0a:	bf5c      	itt	pl
 8027f0c:	600b      	strpl	r3, [r1, #0]
 8027f0e:	2002      	movpl	r0, #2
 8027f10:	4770      	bx	lr
 8027f12:	b298      	uxth	r0, r3
 8027f14:	b9a8      	cbnz	r0, 8027f42 <__lo0bits+0x52>
 8027f16:	0c1b      	lsrs	r3, r3, #16
 8027f18:	2010      	movs	r0, #16
 8027f1a:	b2da      	uxtb	r2, r3
 8027f1c:	b90a      	cbnz	r2, 8027f22 <__lo0bits+0x32>
 8027f1e:	3008      	adds	r0, #8
 8027f20:	0a1b      	lsrs	r3, r3, #8
 8027f22:	071a      	lsls	r2, r3, #28
 8027f24:	bf04      	itt	eq
 8027f26:	091b      	lsreq	r3, r3, #4
 8027f28:	3004      	addeq	r0, #4
 8027f2a:	079a      	lsls	r2, r3, #30
 8027f2c:	bf04      	itt	eq
 8027f2e:	089b      	lsreq	r3, r3, #2
 8027f30:	3002      	addeq	r0, #2
 8027f32:	07da      	lsls	r2, r3, #31
 8027f34:	d403      	bmi.n	8027f3e <__lo0bits+0x4e>
 8027f36:	085b      	lsrs	r3, r3, #1
 8027f38:	f100 0001 	add.w	r0, r0, #1
 8027f3c:	d005      	beq.n	8027f4a <__lo0bits+0x5a>
 8027f3e:	600b      	str	r3, [r1, #0]
 8027f40:	4770      	bx	lr
 8027f42:	4610      	mov	r0, r2
 8027f44:	e7e9      	b.n	8027f1a <__lo0bits+0x2a>
 8027f46:	2000      	movs	r0, #0
 8027f48:	4770      	bx	lr
 8027f4a:	2020      	movs	r0, #32
 8027f4c:	4770      	bx	lr
 8027f4e:	Address 0x0000000008027f4e is out of bounds.


08027f50 <__i2b>:
 8027f50:	b510      	push	{r4, lr}
 8027f52:	460c      	mov	r4, r1
 8027f54:	2101      	movs	r1, #1
 8027f56:	f7ff ff03 	bl	8027d60 <_Balloc>
 8027f5a:	4602      	mov	r2, r0
 8027f5c:	b928      	cbnz	r0, 8027f6a <__i2b+0x1a>
 8027f5e:	4b05      	ldr	r3, [pc, #20]	; (8027f74 <__i2b+0x24>)
 8027f60:	4805      	ldr	r0, [pc, #20]	; (8027f78 <__i2b+0x28>)
 8027f62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027f66:	f7fe fe63 	bl	8026c30 <__assert_func>
 8027f6a:	2301      	movs	r3, #1
 8027f6c:	6144      	str	r4, [r0, #20]
 8027f6e:	6103      	str	r3, [r0, #16]
 8027f70:	bd10      	pop	{r4, pc}
 8027f72:	bf00      	nop
 8027f74:	080462f1 	.word	0x080462f1
 8027f78:	08046302 	.word	0x08046302

08027f7c <__multiply>:
 8027f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f80:	4691      	mov	r9, r2
 8027f82:	690a      	ldr	r2, [r1, #16]
 8027f84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027f88:	429a      	cmp	r2, r3
 8027f8a:	bfb8      	it	lt
 8027f8c:	460b      	movlt	r3, r1
 8027f8e:	460c      	mov	r4, r1
 8027f90:	bfbc      	itt	lt
 8027f92:	464c      	movlt	r4, r9
 8027f94:	4699      	movlt	r9, r3
 8027f96:	6927      	ldr	r7, [r4, #16]
 8027f98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027f9c:	68a3      	ldr	r3, [r4, #8]
 8027f9e:	6861      	ldr	r1, [r4, #4]
 8027fa0:	eb07 060a 	add.w	r6, r7, sl
 8027fa4:	42b3      	cmp	r3, r6
 8027fa6:	b085      	sub	sp, #20
 8027fa8:	bfb8      	it	lt
 8027faa:	3101      	addlt	r1, #1
 8027fac:	f7ff fed8 	bl	8027d60 <_Balloc>
 8027fb0:	b930      	cbnz	r0, 8027fc0 <__multiply+0x44>
 8027fb2:	4602      	mov	r2, r0
 8027fb4:	4b44      	ldr	r3, [pc, #272]	; (80280c8 <__multiply+0x14c>)
 8027fb6:	4845      	ldr	r0, [pc, #276]	; (80280cc <__multiply+0x150>)
 8027fb8:	f240 115d 	movw	r1, #349	; 0x15d
 8027fbc:	f7fe fe38 	bl	8026c30 <__assert_func>
 8027fc0:	f100 0514 	add.w	r5, r0, #20
 8027fc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027fc8:	462b      	mov	r3, r5
 8027fca:	2200      	movs	r2, #0
 8027fcc:	4543      	cmp	r3, r8
 8027fce:	d321      	bcc.n	8028014 <__multiply+0x98>
 8027fd0:	f104 0314 	add.w	r3, r4, #20
 8027fd4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027fd8:	f109 0314 	add.w	r3, r9, #20
 8027fdc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027fe0:	9202      	str	r2, [sp, #8]
 8027fe2:	1b3a      	subs	r2, r7, r4
 8027fe4:	3a15      	subs	r2, #21
 8027fe6:	f022 0203 	bic.w	r2, r2, #3
 8027fea:	3204      	adds	r2, #4
 8027fec:	f104 0115 	add.w	r1, r4, #21
 8027ff0:	428f      	cmp	r7, r1
 8027ff2:	bf38      	it	cc
 8027ff4:	2204      	movcc	r2, #4
 8027ff6:	9201      	str	r2, [sp, #4]
 8027ff8:	9a02      	ldr	r2, [sp, #8]
 8027ffa:	9303      	str	r3, [sp, #12]
 8027ffc:	429a      	cmp	r2, r3
 8027ffe:	d80c      	bhi.n	802801a <__multiply+0x9e>
 8028000:	2e00      	cmp	r6, #0
 8028002:	dd03      	ble.n	802800c <__multiply+0x90>
 8028004:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8028008:	2b00      	cmp	r3, #0
 802800a:	d05a      	beq.n	80280c2 <__multiply+0x146>
 802800c:	6106      	str	r6, [r0, #16]
 802800e:	b005      	add	sp, #20
 8028010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028014:	f843 2b04 	str.w	r2, [r3], #4
 8028018:	e7d8      	b.n	8027fcc <__multiply+0x50>
 802801a:	f8b3 a000 	ldrh.w	sl, [r3]
 802801e:	f1ba 0f00 	cmp.w	sl, #0
 8028022:	d024      	beq.n	802806e <__multiply+0xf2>
 8028024:	f104 0e14 	add.w	lr, r4, #20
 8028028:	46a9      	mov	r9, r5
 802802a:	f04f 0c00 	mov.w	ip, #0
 802802e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8028032:	f8d9 1000 	ldr.w	r1, [r9]
 8028036:	fa1f fb82 	uxth.w	fp, r2
 802803a:	b289      	uxth	r1, r1
 802803c:	fb0a 110b 	mla	r1, sl, fp, r1
 8028040:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8028044:	f8d9 2000 	ldr.w	r2, [r9]
 8028048:	4461      	add	r1, ip
 802804a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802804e:	fb0a c20b 	mla	r2, sl, fp, ip
 8028052:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8028056:	b289      	uxth	r1, r1
 8028058:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802805c:	4577      	cmp	r7, lr
 802805e:	f849 1b04 	str.w	r1, [r9], #4
 8028062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8028066:	d8e2      	bhi.n	802802e <__multiply+0xb2>
 8028068:	9a01      	ldr	r2, [sp, #4]
 802806a:	f845 c002 	str.w	ip, [r5, r2]
 802806e:	9a03      	ldr	r2, [sp, #12]
 8028070:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8028074:	3304      	adds	r3, #4
 8028076:	f1b9 0f00 	cmp.w	r9, #0
 802807a:	d020      	beq.n	80280be <__multiply+0x142>
 802807c:	6829      	ldr	r1, [r5, #0]
 802807e:	f104 0c14 	add.w	ip, r4, #20
 8028082:	46ae      	mov	lr, r5
 8028084:	f04f 0a00 	mov.w	sl, #0
 8028088:	f8bc b000 	ldrh.w	fp, [ip]
 802808c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8028090:	fb09 220b 	mla	r2, r9, fp, r2
 8028094:	4492      	add	sl, r2
 8028096:	b289      	uxth	r1, r1
 8028098:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 802809c:	f84e 1b04 	str.w	r1, [lr], #4
 80280a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80280a4:	f8be 1000 	ldrh.w	r1, [lr]
 80280a8:	0c12      	lsrs	r2, r2, #16
 80280aa:	fb09 1102 	mla	r1, r9, r2, r1
 80280ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80280b2:	4567      	cmp	r7, ip
 80280b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80280b8:	d8e6      	bhi.n	8028088 <__multiply+0x10c>
 80280ba:	9a01      	ldr	r2, [sp, #4]
 80280bc:	50a9      	str	r1, [r5, r2]
 80280be:	3504      	adds	r5, #4
 80280c0:	e79a      	b.n	8027ff8 <__multiply+0x7c>
 80280c2:	3e01      	subs	r6, #1
 80280c4:	e79c      	b.n	8028000 <__multiply+0x84>
 80280c6:	bf00      	nop
 80280c8:	080462f1 	.word	0x080462f1
 80280cc:	08046302 	.word	0x08046302

080280d0 <__pow5mult>:
 80280d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80280d4:	4615      	mov	r5, r2
 80280d6:	f012 0203 	ands.w	r2, r2, #3
 80280da:	4606      	mov	r6, r0
 80280dc:	460f      	mov	r7, r1
 80280de:	d007      	beq.n	80280f0 <__pow5mult+0x20>
 80280e0:	4c25      	ldr	r4, [pc, #148]	; (8028178 <__pow5mult+0xa8>)
 80280e2:	3a01      	subs	r2, #1
 80280e4:	2300      	movs	r3, #0
 80280e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80280ea:	f7ff fe9b 	bl	8027e24 <__multadd>
 80280ee:	4607      	mov	r7, r0
 80280f0:	10ad      	asrs	r5, r5, #2
 80280f2:	d03d      	beq.n	8028170 <__pow5mult+0xa0>
 80280f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80280f6:	b97c      	cbnz	r4, 8028118 <__pow5mult+0x48>
 80280f8:	2010      	movs	r0, #16
 80280fa:	f7fc f965 	bl	80243c8 <malloc>
 80280fe:	4602      	mov	r2, r0
 8028100:	6270      	str	r0, [r6, #36]	; 0x24
 8028102:	b928      	cbnz	r0, 8028110 <__pow5mult+0x40>
 8028104:	4b1d      	ldr	r3, [pc, #116]	; (802817c <__pow5mult+0xac>)
 8028106:	481e      	ldr	r0, [pc, #120]	; (8028180 <__pow5mult+0xb0>)
 8028108:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 802810c:	f7fe fd90 	bl	8026c30 <__assert_func>
 8028110:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8028114:	6004      	str	r4, [r0, #0]
 8028116:	60c4      	str	r4, [r0, #12]
 8028118:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 802811c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8028120:	b94c      	cbnz	r4, 8028136 <__pow5mult+0x66>
 8028122:	f240 2171 	movw	r1, #625	; 0x271
 8028126:	4630      	mov	r0, r6
 8028128:	f7ff ff12 	bl	8027f50 <__i2b>
 802812c:	2300      	movs	r3, #0
 802812e:	f8c8 0008 	str.w	r0, [r8, #8]
 8028132:	4604      	mov	r4, r0
 8028134:	6003      	str	r3, [r0, #0]
 8028136:	f04f 0900 	mov.w	r9, #0
 802813a:	07eb      	lsls	r3, r5, #31
 802813c:	d50a      	bpl.n	8028154 <__pow5mult+0x84>
 802813e:	4639      	mov	r1, r7
 8028140:	4622      	mov	r2, r4
 8028142:	4630      	mov	r0, r6
 8028144:	f7ff ff1a 	bl	8027f7c <__multiply>
 8028148:	4639      	mov	r1, r7
 802814a:	4680      	mov	r8, r0
 802814c:	4630      	mov	r0, r6
 802814e:	f7ff fe47 	bl	8027de0 <_Bfree>
 8028152:	4647      	mov	r7, r8
 8028154:	106d      	asrs	r5, r5, #1
 8028156:	d00b      	beq.n	8028170 <__pow5mult+0xa0>
 8028158:	6820      	ldr	r0, [r4, #0]
 802815a:	b938      	cbnz	r0, 802816c <__pow5mult+0x9c>
 802815c:	4622      	mov	r2, r4
 802815e:	4621      	mov	r1, r4
 8028160:	4630      	mov	r0, r6
 8028162:	f7ff ff0b 	bl	8027f7c <__multiply>
 8028166:	6020      	str	r0, [r4, #0]
 8028168:	f8c0 9000 	str.w	r9, [r0]
 802816c:	4604      	mov	r4, r0
 802816e:	e7e4      	b.n	802813a <__pow5mult+0x6a>
 8028170:	4638      	mov	r0, r7
 8028172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028176:	bf00      	nop
 8028178:	08046450 	.word	0x08046450
 802817c:	08045d18 	.word	0x08045d18
 8028180:	08046302 	.word	0x08046302

08028184 <__lshift>:
 8028184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028188:	460c      	mov	r4, r1
 802818a:	6849      	ldr	r1, [r1, #4]
 802818c:	6923      	ldr	r3, [r4, #16]
 802818e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8028192:	68a3      	ldr	r3, [r4, #8]
 8028194:	4607      	mov	r7, r0
 8028196:	4691      	mov	r9, r2
 8028198:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802819c:	f108 0601 	add.w	r6, r8, #1
 80281a0:	42b3      	cmp	r3, r6
 80281a2:	db0b      	blt.n	80281bc <__lshift+0x38>
 80281a4:	4638      	mov	r0, r7
 80281a6:	f7ff fddb 	bl	8027d60 <_Balloc>
 80281aa:	4605      	mov	r5, r0
 80281ac:	b948      	cbnz	r0, 80281c2 <__lshift+0x3e>
 80281ae:	4602      	mov	r2, r0
 80281b0:	4b2a      	ldr	r3, [pc, #168]	; (802825c <__lshift+0xd8>)
 80281b2:	482b      	ldr	r0, [pc, #172]	; (8028260 <__lshift+0xdc>)
 80281b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80281b8:	f7fe fd3a 	bl	8026c30 <__assert_func>
 80281bc:	3101      	adds	r1, #1
 80281be:	005b      	lsls	r3, r3, #1
 80281c0:	e7ee      	b.n	80281a0 <__lshift+0x1c>
 80281c2:	2300      	movs	r3, #0
 80281c4:	f100 0114 	add.w	r1, r0, #20
 80281c8:	f100 0210 	add.w	r2, r0, #16
 80281cc:	4618      	mov	r0, r3
 80281ce:	4553      	cmp	r3, sl
 80281d0:	db37      	blt.n	8028242 <__lshift+0xbe>
 80281d2:	6920      	ldr	r0, [r4, #16]
 80281d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80281d8:	f104 0314 	add.w	r3, r4, #20
 80281dc:	f019 091f 	ands.w	r9, r9, #31
 80281e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80281e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80281e8:	d02f      	beq.n	802824a <__lshift+0xc6>
 80281ea:	f1c9 0e20 	rsb	lr, r9, #32
 80281ee:	468a      	mov	sl, r1
 80281f0:	f04f 0c00 	mov.w	ip, #0
 80281f4:	681a      	ldr	r2, [r3, #0]
 80281f6:	fa02 f209 	lsl.w	r2, r2, r9
 80281fa:	ea42 020c 	orr.w	r2, r2, ip
 80281fe:	f84a 2b04 	str.w	r2, [sl], #4
 8028202:	f853 2b04 	ldr.w	r2, [r3], #4
 8028206:	4298      	cmp	r0, r3
 8028208:	fa22 fc0e 	lsr.w	ip, r2, lr
 802820c:	d8f2      	bhi.n	80281f4 <__lshift+0x70>
 802820e:	1b03      	subs	r3, r0, r4
 8028210:	3b15      	subs	r3, #21
 8028212:	f023 0303 	bic.w	r3, r3, #3
 8028216:	3304      	adds	r3, #4
 8028218:	f104 0215 	add.w	r2, r4, #21
 802821c:	4290      	cmp	r0, r2
 802821e:	bf38      	it	cc
 8028220:	2304      	movcc	r3, #4
 8028222:	f841 c003 	str.w	ip, [r1, r3]
 8028226:	f1bc 0f00 	cmp.w	ip, #0
 802822a:	d001      	beq.n	8028230 <__lshift+0xac>
 802822c:	f108 0602 	add.w	r6, r8, #2
 8028230:	3e01      	subs	r6, #1
 8028232:	4638      	mov	r0, r7
 8028234:	612e      	str	r6, [r5, #16]
 8028236:	4621      	mov	r1, r4
 8028238:	f7ff fdd2 	bl	8027de0 <_Bfree>
 802823c:	4628      	mov	r0, r5
 802823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028242:	f842 0f04 	str.w	r0, [r2, #4]!
 8028246:	3301      	adds	r3, #1
 8028248:	e7c1      	b.n	80281ce <__lshift+0x4a>
 802824a:	3904      	subs	r1, #4
 802824c:	f853 2b04 	ldr.w	r2, [r3], #4
 8028250:	f841 2f04 	str.w	r2, [r1, #4]!
 8028254:	4298      	cmp	r0, r3
 8028256:	d8f9      	bhi.n	802824c <__lshift+0xc8>
 8028258:	e7ea      	b.n	8028230 <__lshift+0xac>
 802825a:	bf00      	nop
 802825c:	080462f1 	.word	0x080462f1
 8028260:	08046302 	.word	0x08046302

08028264 <__mcmp>:
 8028264:	b530      	push	{r4, r5, lr}
 8028266:	6902      	ldr	r2, [r0, #16]
 8028268:	690c      	ldr	r4, [r1, #16]
 802826a:	1b12      	subs	r2, r2, r4
 802826c:	d10e      	bne.n	802828c <__mcmp+0x28>
 802826e:	f100 0314 	add.w	r3, r0, #20
 8028272:	3114      	adds	r1, #20
 8028274:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8028278:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802827c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8028280:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8028284:	42a5      	cmp	r5, r4
 8028286:	d003      	beq.n	8028290 <__mcmp+0x2c>
 8028288:	d305      	bcc.n	8028296 <__mcmp+0x32>
 802828a:	2201      	movs	r2, #1
 802828c:	4610      	mov	r0, r2
 802828e:	bd30      	pop	{r4, r5, pc}
 8028290:	4283      	cmp	r3, r0
 8028292:	d3f3      	bcc.n	802827c <__mcmp+0x18>
 8028294:	e7fa      	b.n	802828c <__mcmp+0x28>
 8028296:	f04f 32ff 	mov.w	r2, #4294967295
 802829a:	e7f7      	b.n	802828c <__mcmp+0x28>

0802829c <__mdiff>:
 802829c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80282a0:	460c      	mov	r4, r1
 80282a2:	4606      	mov	r6, r0
 80282a4:	4611      	mov	r1, r2
 80282a6:	4620      	mov	r0, r4
 80282a8:	4690      	mov	r8, r2
 80282aa:	f7ff ffdb 	bl	8028264 <__mcmp>
 80282ae:	1e05      	subs	r5, r0, #0
 80282b0:	d110      	bne.n	80282d4 <__mdiff+0x38>
 80282b2:	4629      	mov	r1, r5
 80282b4:	4630      	mov	r0, r6
 80282b6:	f7ff fd53 	bl	8027d60 <_Balloc>
 80282ba:	b930      	cbnz	r0, 80282ca <__mdiff+0x2e>
 80282bc:	4b3a      	ldr	r3, [pc, #232]	; (80283a8 <__mdiff+0x10c>)
 80282be:	4602      	mov	r2, r0
 80282c0:	f240 2132 	movw	r1, #562	; 0x232
 80282c4:	4839      	ldr	r0, [pc, #228]	; (80283ac <__mdiff+0x110>)
 80282c6:	f7fe fcb3 	bl	8026c30 <__assert_func>
 80282ca:	2301      	movs	r3, #1
 80282cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80282d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80282d4:	bfa4      	itt	ge
 80282d6:	4643      	movge	r3, r8
 80282d8:	46a0      	movge	r8, r4
 80282da:	4630      	mov	r0, r6
 80282dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80282e0:	bfa6      	itte	ge
 80282e2:	461c      	movge	r4, r3
 80282e4:	2500      	movge	r5, #0
 80282e6:	2501      	movlt	r5, #1
 80282e8:	f7ff fd3a 	bl	8027d60 <_Balloc>
 80282ec:	b920      	cbnz	r0, 80282f8 <__mdiff+0x5c>
 80282ee:	4b2e      	ldr	r3, [pc, #184]	; (80283a8 <__mdiff+0x10c>)
 80282f0:	4602      	mov	r2, r0
 80282f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80282f6:	e7e5      	b.n	80282c4 <__mdiff+0x28>
 80282f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80282fc:	6926      	ldr	r6, [r4, #16]
 80282fe:	60c5      	str	r5, [r0, #12]
 8028300:	f104 0914 	add.w	r9, r4, #20
 8028304:	f108 0514 	add.w	r5, r8, #20
 8028308:	f100 0e14 	add.w	lr, r0, #20
 802830c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8028310:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8028314:	f108 0210 	add.w	r2, r8, #16
 8028318:	46f2      	mov	sl, lr
 802831a:	2100      	movs	r1, #0
 802831c:	f859 3b04 	ldr.w	r3, [r9], #4
 8028320:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8028324:	fa1f f883 	uxth.w	r8, r3
 8028328:	fa11 f18b 	uxtah	r1, r1, fp
 802832c:	0c1b      	lsrs	r3, r3, #16
 802832e:	eba1 0808 	sub.w	r8, r1, r8
 8028332:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8028336:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802833a:	fa1f f888 	uxth.w	r8, r8
 802833e:	1419      	asrs	r1, r3, #16
 8028340:	454e      	cmp	r6, r9
 8028342:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8028346:	f84a 3b04 	str.w	r3, [sl], #4
 802834a:	d8e7      	bhi.n	802831c <__mdiff+0x80>
 802834c:	1b33      	subs	r3, r6, r4
 802834e:	3b15      	subs	r3, #21
 8028350:	f023 0303 	bic.w	r3, r3, #3
 8028354:	3304      	adds	r3, #4
 8028356:	3415      	adds	r4, #21
 8028358:	42a6      	cmp	r6, r4
 802835a:	bf38      	it	cc
 802835c:	2304      	movcc	r3, #4
 802835e:	441d      	add	r5, r3
 8028360:	4473      	add	r3, lr
 8028362:	469e      	mov	lr, r3
 8028364:	462e      	mov	r6, r5
 8028366:	4566      	cmp	r6, ip
 8028368:	d30e      	bcc.n	8028388 <__mdiff+0xec>
 802836a:	f10c 0203 	add.w	r2, ip, #3
 802836e:	1b52      	subs	r2, r2, r5
 8028370:	f022 0203 	bic.w	r2, r2, #3
 8028374:	3d03      	subs	r5, #3
 8028376:	45ac      	cmp	ip, r5
 8028378:	bf38      	it	cc
 802837a:	2200      	movcc	r2, #0
 802837c:	441a      	add	r2, r3
 802837e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8028382:	b17b      	cbz	r3, 80283a4 <__mdiff+0x108>
 8028384:	6107      	str	r7, [r0, #16]
 8028386:	e7a3      	b.n	80282d0 <__mdiff+0x34>
 8028388:	f856 8b04 	ldr.w	r8, [r6], #4
 802838c:	fa11 f288 	uxtah	r2, r1, r8
 8028390:	1414      	asrs	r4, r2, #16
 8028392:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8028396:	b292      	uxth	r2, r2
 8028398:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802839c:	f84e 2b04 	str.w	r2, [lr], #4
 80283a0:	1421      	asrs	r1, r4, #16
 80283a2:	e7e0      	b.n	8028366 <__mdiff+0xca>
 80283a4:	3f01      	subs	r7, #1
 80283a6:	e7ea      	b.n	802837e <__mdiff+0xe2>
 80283a8:	080462f1 	.word	0x080462f1
 80283ac:	08046302 	.word	0x08046302

080283b0 <__d2b>:
 80283b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80283b4:	4689      	mov	r9, r1
 80283b6:	2101      	movs	r1, #1
 80283b8:	ec57 6b10 	vmov	r6, r7, d0
 80283bc:	4690      	mov	r8, r2
 80283be:	f7ff fccf 	bl	8027d60 <_Balloc>
 80283c2:	4604      	mov	r4, r0
 80283c4:	b930      	cbnz	r0, 80283d4 <__d2b+0x24>
 80283c6:	4602      	mov	r2, r0
 80283c8:	4b25      	ldr	r3, [pc, #148]	; (8028460 <__d2b+0xb0>)
 80283ca:	4826      	ldr	r0, [pc, #152]	; (8028464 <__d2b+0xb4>)
 80283cc:	f240 310a 	movw	r1, #778	; 0x30a
 80283d0:	f7fe fc2e 	bl	8026c30 <__assert_func>
 80283d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80283d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80283dc:	bb35      	cbnz	r5, 802842c <__d2b+0x7c>
 80283de:	2e00      	cmp	r6, #0
 80283e0:	9301      	str	r3, [sp, #4]
 80283e2:	d028      	beq.n	8028436 <__d2b+0x86>
 80283e4:	4668      	mov	r0, sp
 80283e6:	9600      	str	r6, [sp, #0]
 80283e8:	f7ff fd82 	bl	8027ef0 <__lo0bits>
 80283ec:	9900      	ldr	r1, [sp, #0]
 80283ee:	b300      	cbz	r0, 8028432 <__d2b+0x82>
 80283f0:	9a01      	ldr	r2, [sp, #4]
 80283f2:	f1c0 0320 	rsb	r3, r0, #32
 80283f6:	fa02 f303 	lsl.w	r3, r2, r3
 80283fa:	430b      	orrs	r3, r1
 80283fc:	40c2      	lsrs	r2, r0
 80283fe:	6163      	str	r3, [r4, #20]
 8028400:	9201      	str	r2, [sp, #4]
 8028402:	9b01      	ldr	r3, [sp, #4]
 8028404:	61a3      	str	r3, [r4, #24]
 8028406:	2b00      	cmp	r3, #0
 8028408:	bf14      	ite	ne
 802840a:	2202      	movne	r2, #2
 802840c:	2201      	moveq	r2, #1
 802840e:	6122      	str	r2, [r4, #16]
 8028410:	b1d5      	cbz	r5, 8028448 <__d2b+0x98>
 8028412:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8028416:	4405      	add	r5, r0
 8028418:	f8c9 5000 	str.w	r5, [r9]
 802841c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8028420:	f8c8 0000 	str.w	r0, [r8]
 8028424:	4620      	mov	r0, r4
 8028426:	b003      	add	sp, #12
 8028428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802842c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028430:	e7d5      	b.n	80283de <__d2b+0x2e>
 8028432:	6161      	str	r1, [r4, #20]
 8028434:	e7e5      	b.n	8028402 <__d2b+0x52>
 8028436:	a801      	add	r0, sp, #4
 8028438:	f7ff fd5a 	bl	8027ef0 <__lo0bits>
 802843c:	9b01      	ldr	r3, [sp, #4]
 802843e:	6163      	str	r3, [r4, #20]
 8028440:	2201      	movs	r2, #1
 8028442:	6122      	str	r2, [r4, #16]
 8028444:	3020      	adds	r0, #32
 8028446:	e7e3      	b.n	8028410 <__d2b+0x60>
 8028448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802844c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8028450:	f8c9 0000 	str.w	r0, [r9]
 8028454:	6918      	ldr	r0, [r3, #16]
 8028456:	f7ff fd2b 	bl	8027eb0 <__hi0bits>
 802845a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802845e:	e7df      	b.n	8028420 <__d2b+0x70>
 8028460:	080462f1 	.word	0x080462f1
 8028464:	08046302 	.word	0x08046302

08028468 <_calloc_r>:
 8028468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802846a:	fba1 2402 	umull	r2, r4, r1, r2
 802846e:	b94c      	cbnz	r4, 8028484 <_calloc_r+0x1c>
 8028470:	4611      	mov	r1, r2
 8028472:	9201      	str	r2, [sp, #4]
 8028474:	f7fc fad6 	bl	8024a24 <_malloc_r>
 8028478:	9a01      	ldr	r2, [sp, #4]
 802847a:	4605      	mov	r5, r0
 802847c:	b930      	cbnz	r0, 802848c <_calloc_r+0x24>
 802847e:	4628      	mov	r0, r5
 8028480:	b003      	add	sp, #12
 8028482:	bd30      	pop	{r4, r5, pc}
 8028484:	220c      	movs	r2, #12
 8028486:	6002      	str	r2, [r0, #0]
 8028488:	2500      	movs	r5, #0
 802848a:	e7f8      	b.n	802847e <_calloc_r+0x16>
 802848c:	4621      	mov	r1, r4
 802848e:	f7fb ffe3 	bl	8024458 <memset>
 8028492:	e7f4      	b.n	802847e <_calloc_r+0x16>

08028494 <__ssputs_r>:
 8028494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028498:	688e      	ldr	r6, [r1, #8]
 802849a:	429e      	cmp	r6, r3
 802849c:	4682      	mov	sl, r0
 802849e:	460c      	mov	r4, r1
 80284a0:	4690      	mov	r8, r2
 80284a2:	461f      	mov	r7, r3
 80284a4:	d838      	bhi.n	8028518 <__ssputs_r+0x84>
 80284a6:	898a      	ldrh	r2, [r1, #12]
 80284a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80284ac:	d032      	beq.n	8028514 <__ssputs_r+0x80>
 80284ae:	6825      	ldr	r5, [r4, #0]
 80284b0:	6909      	ldr	r1, [r1, #16]
 80284b2:	eba5 0901 	sub.w	r9, r5, r1
 80284b6:	6965      	ldr	r5, [r4, #20]
 80284b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80284bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80284c0:	3301      	adds	r3, #1
 80284c2:	444b      	add	r3, r9
 80284c4:	106d      	asrs	r5, r5, #1
 80284c6:	429d      	cmp	r5, r3
 80284c8:	bf38      	it	cc
 80284ca:	461d      	movcc	r5, r3
 80284cc:	0553      	lsls	r3, r2, #21
 80284ce:	d531      	bpl.n	8028534 <__ssputs_r+0xa0>
 80284d0:	4629      	mov	r1, r5
 80284d2:	f7fc faa7 	bl	8024a24 <_malloc_r>
 80284d6:	4606      	mov	r6, r0
 80284d8:	b950      	cbnz	r0, 80284f0 <__ssputs_r+0x5c>
 80284da:	230c      	movs	r3, #12
 80284dc:	f8ca 3000 	str.w	r3, [sl]
 80284e0:	89a3      	ldrh	r3, [r4, #12]
 80284e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80284e6:	81a3      	strh	r3, [r4, #12]
 80284e8:	f04f 30ff 	mov.w	r0, #4294967295
 80284ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80284f0:	6921      	ldr	r1, [r4, #16]
 80284f2:	464a      	mov	r2, r9
 80284f4:	f7fb ff88 	bl	8024408 <memcpy>
 80284f8:	89a3      	ldrh	r3, [r4, #12]
 80284fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80284fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8028502:	81a3      	strh	r3, [r4, #12]
 8028504:	6126      	str	r6, [r4, #16]
 8028506:	6165      	str	r5, [r4, #20]
 8028508:	444e      	add	r6, r9
 802850a:	eba5 0509 	sub.w	r5, r5, r9
 802850e:	6026      	str	r6, [r4, #0]
 8028510:	60a5      	str	r5, [r4, #8]
 8028512:	463e      	mov	r6, r7
 8028514:	42be      	cmp	r6, r7
 8028516:	d900      	bls.n	802851a <__ssputs_r+0x86>
 8028518:	463e      	mov	r6, r7
 802851a:	6820      	ldr	r0, [r4, #0]
 802851c:	4632      	mov	r2, r6
 802851e:	4641      	mov	r1, r8
 8028520:	f7fb ff80 	bl	8024424 <memmove>
 8028524:	68a3      	ldr	r3, [r4, #8]
 8028526:	1b9b      	subs	r3, r3, r6
 8028528:	60a3      	str	r3, [r4, #8]
 802852a:	6823      	ldr	r3, [r4, #0]
 802852c:	4433      	add	r3, r6
 802852e:	6023      	str	r3, [r4, #0]
 8028530:	2000      	movs	r0, #0
 8028532:	e7db      	b.n	80284ec <__ssputs_r+0x58>
 8028534:	462a      	mov	r2, r5
 8028536:	f000 fec5 	bl	80292c4 <_realloc_r>
 802853a:	4606      	mov	r6, r0
 802853c:	2800      	cmp	r0, #0
 802853e:	d1e1      	bne.n	8028504 <__ssputs_r+0x70>
 8028540:	6921      	ldr	r1, [r4, #16]
 8028542:	4650      	mov	r0, sl
 8028544:	f7fc fa02 	bl	802494c <_free_r>
 8028548:	e7c7      	b.n	80284da <__ssputs_r+0x46>
 802854a:	Address 0x000000000802854a is out of bounds.


0802854c <_svfiprintf_r>:
 802854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028550:	4698      	mov	r8, r3
 8028552:	898b      	ldrh	r3, [r1, #12]
 8028554:	061b      	lsls	r3, r3, #24
 8028556:	b09d      	sub	sp, #116	; 0x74
 8028558:	4607      	mov	r7, r0
 802855a:	460d      	mov	r5, r1
 802855c:	4614      	mov	r4, r2
 802855e:	d50e      	bpl.n	802857e <_svfiprintf_r+0x32>
 8028560:	690b      	ldr	r3, [r1, #16]
 8028562:	b963      	cbnz	r3, 802857e <_svfiprintf_r+0x32>
 8028564:	2140      	movs	r1, #64	; 0x40
 8028566:	f7fc fa5d 	bl	8024a24 <_malloc_r>
 802856a:	6028      	str	r0, [r5, #0]
 802856c:	6128      	str	r0, [r5, #16]
 802856e:	b920      	cbnz	r0, 802857a <_svfiprintf_r+0x2e>
 8028570:	230c      	movs	r3, #12
 8028572:	603b      	str	r3, [r7, #0]
 8028574:	f04f 30ff 	mov.w	r0, #4294967295
 8028578:	e0d1      	b.n	802871e <_svfiprintf_r+0x1d2>
 802857a:	2340      	movs	r3, #64	; 0x40
 802857c:	616b      	str	r3, [r5, #20]
 802857e:	2300      	movs	r3, #0
 8028580:	9309      	str	r3, [sp, #36]	; 0x24
 8028582:	2320      	movs	r3, #32
 8028584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028588:	f8cd 800c 	str.w	r8, [sp, #12]
 802858c:	2330      	movs	r3, #48	; 0x30
 802858e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028738 <_svfiprintf_r+0x1ec>
 8028592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028596:	f04f 0901 	mov.w	r9, #1
 802859a:	4623      	mov	r3, r4
 802859c:	469a      	mov	sl, r3
 802859e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80285a2:	b10a      	cbz	r2, 80285a8 <_svfiprintf_r+0x5c>
 80285a4:	2a25      	cmp	r2, #37	; 0x25
 80285a6:	d1f9      	bne.n	802859c <_svfiprintf_r+0x50>
 80285a8:	ebba 0b04 	subs.w	fp, sl, r4
 80285ac:	d00b      	beq.n	80285c6 <_svfiprintf_r+0x7a>
 80285ae:	465b      	mov	r3, fp
 80285b0:	4622      	mov	r2, r4
 80285b2:	4629      	mov	r1, r5
 80285b4:	4638      	mov	r0, r7
 80285b6:	f7ff ff6d 	bl	8028494 <__ssputs_r>
 80285ba:	3001      	adds	r0, #1
 80285bc:	f000 80aa 	beq.w	8028714 <_svfiprintf_r+0x1c8>
 80285c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80285c2:	445a      	add	r2, fp
 80285c4:	9209      	str	r2, [sp, #36]	; 0x24
 80285c6:	f89a 3000 	ldrb.w	r3, [sl]
 80285ca:	2b00      	cmp	r3, #0
 80285cc:	f000 80a2 	beq.w	8028714 <_svfiprintf_r+0x1c8>
 80285d0:	2300      	movs	r3, #0
 80285d2:	f04f 32ff 	mov.w	r2, #4294967295
 80285d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80285da:	f10a 0a01 	add.w	sl, sl, #1
 80285de:	9304      	str	r3, [sp, #16]
 80285e0:	9307      	str	r3, [sp, #28]
 80285e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80285e6:	931a      	str	r3, [sp, #104]	; 0x68
 80285e8:	4654      	mov	r4, sl
 80285ea:	2205      	movs	r2, #5
 80285ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80285f0:	4851      	ldr	r0, [pc, #324]	; (8028738 <_svfiprintf_r+0x1ec>)
 80285f2:	f7d7 fe3d 	bl	8000270 <memchr>
 80285f6:	9a04      	ldr	r2, [sp, #16]
 80285f8:	b9d8      	cbnz	r0, 8028632 <_svfiprintf_r+0xe6>
 80285fa:	06d0      	lsls	r0, r2, #27
 80285fc:	bf44      	itt	mi
 80285fe:	2320      	movmi	r3, #32
 8028600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028604:	0711      	lsls	r1, r2, #28
 8028606:	bf44      	itt	mi
 8028608:	232b      	movmi	r3, #43	; 0x2b
 802860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802860e:	f89a 3000 	ldrb.w	r3, [sl]
 8028612:	2b2a      	cmp	r3, #42	; 0x2a
 8028614:	d015      	beq.n	8028642 <_svfiprintf_r+0xf6>
 8028616:	9a07      	ldr	r2, [sp, #28]
 8028618:	4654      	mov	r4, sl
 802861a:	2000      	movs	r0, #0
 802861c:	f04f 0c0a 	mov.w	ip, #10
 8028620:	4621      	mov	r1, r4
 8028622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028626:	3b30      	subs	r3, #48	; 0x30
 8028628:	2b09      	cmp	r3, #9
 802862a:	d94e      	bls.n	80286ca <_svfiprintf_r+0x17e>
 802862c:	b1b0      	cbz	r0, 802865c <_svfiprintf_r+0x110>
 802862e:	9207      	str	r2, [sp, #28]
 8028630:	e014      	b.n	802865c <_svfiprintf_r+0x110>
 8028632:	eba0 0308 	sub.w	r3, r0, r8
 8028636:	fa09 f303 	lsl.w	r3, r9, r3
 802863a:	4313      	orrs	r3, r2
 802863c:	9304      	str	r3, [sp, #16]
 802863e:	46a2      	mov	sl, r4
 8028640:	e7d2      	b.n	80285e8 <_svfiprintf_r+0x9c>
 8028642:	9b03      	ldr	r3, [sp, #12]
 8028644:	1d19      	adds	r1, r3, #4
 8028646:	681b      	ldr	r3, [r3, #0]
 8028648:	9103      	str	r1, [sp, #12]
 802864a:	2b00      	cmp	r3, #0
 802864c:	bfbb      	ittet	lt
 802864e:	425b      	neglt	r3, r3
 8028650:	f042 0202 	orrlt.w	r2, r2, #2
 8028654:	9307      	strge	r3, [sp, #28]
 8028656:	9307      	strlt	r3, [sp, #28]
 8028658:	bfb8      	it	lt
 802865a:	9204      	strlt	r2, [sp, #16]
 802865c:	7823      	ldrb	r3, [r4, #0]
 802865e:	2b2e      	cmp	r3, #46	; 0x2e
 8028660:	d10c      	bne.n	802867c <_svfiprintf_r+0x130>
 8028662:	7863      	ldrb	r3, [r4, #1]
 8028664:	2b2a      	cmp	r3, #42	; 0x2a
 8028666:	d135      	bne.n	80286d4 <_svfiprintf_r+0x188>
 8028668:	9b03      	ldr	r3, [sp, #12]
 802866a:	1d1a      	adds	r2, r3, #4
 802866c:	681b      	ldr	r3, [r3, #0]
 802866e:	9203      	str	r2, [sp, #12]
 8028670:	2b00      	cmp	r3, #0
 8028672:	bfb8      	it	lt
 8028674:	f04f 33ff 	movlt.w	r3, #4294967295
 8028678:	3402      	adds	r4, #2
 802867a:	9305      	str	r3, [sp, #20]
 802867c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028748 <_svfiprintf_r+0x1fc>
 8028680:	7821      	ldrb	r1, [r4, #0]
 8028682:	2203      	movs	r2, #3
 8028684:	4650      	mov	r0, sl
 8028686:	f7d7 fdf3 	bl	8000270 <memchr>
 802868a:	b140      	cbz	r0, 802869e <_svfiprintf_r+0x152>
 802868c:	2340      	movs	r3, #64	; 0x40
 802868e:	eba0 000a 	sub.w	r0, r0, sl
 8028692:	fa03 f000 	lsl.w	r0, r3, r0
 8028696:	9b04      	ldr	r3, [sp, #16]
 8028698:	4303      	orrs	r3, r0
 802869a:	3401      	adds	r4, #1
 802869c:	9304      	str	r3, [sp, #16]
 802869e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80286a2:	4826      	ldr	r0, [pc, #152]	; (802873c <_svfiprintf_r+0x1f0>)
 80286a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80286a8:	2206      	movs	r2, #6
 80286aa:	f7d7 fde1 	bl	8000270 <memchr>
 80286ae:	2800      	cmp	r0, #0
 80286b0:	d038      	beq.n	8028724 <_svfiprintf_r+0x1d8>
 80286b2:	4b23      	ldr	r3, [pc, #140]	; (8028740 <_svfiprintf_r+0x1f4>)
 80286b4:	bb1b      	cbnz	r3, 80286fe <_svfiprintf_r+0x1b2>
 80286b6:	9b03      	ldr	r3, [sp, #12]
 80286b8:	3307      	adds	r3, #7
 80286ba:	f023 0307 	bic.w	r3, r3, #7
 80286be:	3308      	adds	r3, #8
 80286c0:	9303      	str	r3, [sp, #12]
 80286c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80286c4:	4433      	add	r3, r6
 80286c6:	9309      	str	r3, [sp, #36]	; 0x24
 80286c8:	e767      	b.n	802859a <_svfiprintf_r+0x4e>
 80286ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80286ce:	460c      	mov	r4, r1
 80286d0:	2001      	movs	r0, #1
 80286d2:	e7a5      	b.n	8028620 <_svfiprintf_r+0xd4>
 80286d4:	2300      	movs	r3, #0
 80286d6:	3401      	adds	r4, #1
 80286d8:	9305      	str	r3, [sp, #20]
 80286da:	4619      	mov	r1, r3
 80286dc:	f04f 0c0a 	mov.w	ip, #10
 80286e0:	4620      	mov	r0, r4
 80286e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80286e6:	3a30      	subs	r2, #48	; 0x30
 80286e8:	2a09      	cmp	r2, #9
 80286ea:	d903      	bls.n	80286f4 <_svfiprintf_r+0x1a8>
 80286ec:	2b00      	cmp	r3, #0
 80286ee:	d0c5      	beq.n	802867c <_svfiprintf_r+0x130>
 80286f0:	9105      	str	r1, [sp, #20]
 80286f2:	e7c3      	b.n	802867c <_svfiprintf_r+0x130>
 80286f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80286f8:	4604      	mov	r4, r0
 80286fa:	2301      	movs	r3, #1
 80286fc:	e7f0      	b.n	80286e0 <_svfiprintf_r+0x194>
 80286fe:	ab03      	add	r3, sp, #12
 8028700:	9300      	str	r3, [sp, #0]
 8028702:	462a      	mov	r2, r5
 8028704:	4b0f      	ldr	r3, [pc, #60]	; (8028744 <_svfiprintf_r+0x1f8>)
 8028706:	a904      	add	r1, sp, #16
 8028708:	4638      	mov	r0, r7
 802870a:	f7fc fa91 	bl	8024c30 <_printf_float>
 802870e:	1c42      	adds	r2, r0, #1
 8028710:	4606      	mov	r6, r0
 8028712:	d1d6      	bne.n	80286c2 <_svfiprintf_r+0x176>
 8028714:	89ab      	ldrh	r3, [r5, #12]
 8028716:	065b      	lsls	r3, r3, #25
 8028718:	f53f af2c 	bmi.w	8028574 <_svfiprintf_r+0x28>
 802871c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802871e:	b01d      	add	sp, #116	; 0x74
 8028720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028724:	ab03      	add	r3, sp, #12
 8028726:	9300      	str	r3, [sp, #0]
 8028728:	462a      	mov	r2, r5
 802872a:	4b06      	ldr	r3, [pc, #24]	; (8028744 <_svfiprintf_r+0x1f8>)
 802872c:	a904      	add	r1, sp, #16
 802872e:	4638      	mov	r0, r7
 8028730:	f7fc fd0a 	bl	8025148 <_printf_i>
 8028734:	e7eb      	b.n	802870e <_svfiprintf_r+0x1c2>
 8028736:	bf00      	nop
 8028738:	0804645c 	.word	0x0804645c
 802873c:	08046466 	.word	0x08046466
 8028740:	08024c31 	.word	0x08024c31
 8028744:	08028495 	.word	0x08028495
 8028748:	08046462 	.word	0x08046462

0802874c <_sungetc_r>:
 802874c:	b538      	push	{r3, r4, r5, lr}
 802874e:	1c4b      	adds	r3, r1, #1
 8028750:	4614      	mov	r4, r2
 8028752:	d103      	bne.n	802875c <_sungetc_r+0x10>
 8028754:	f04f 35ff 	mov.w	r5, #4294967295
 8028758:	4628      	mov	r0, r5
 802875a:	bd38      	pop	{r3, r4, r5, pc}
 802875c:	8993      	ldrh	r3, [r2, #12]
 802875e:	f023 0320 	bic.w	r3, r3, #32
 8028762:	8193      	strh	r3, [r2, #12]
 8028764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028766:	6852      	ldr	r2, [r2, #4]
 8028768:	b2cd      	uxtb	r5, r1
 802876a:	b18b      	cbz	r3, 8028790 <_sungetc_r+0x44>
 802876c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802876e:	4293      	cmp	r3, r2
 8028770:	dd08      	ble.n	8028784 <_sungetc_r+0x38>
 8028772:	6823      	ldr	r3, [r4, #0]
 8028774:	1e5a      	subs	r2, r3, #1
 8028776:	6022      	str	r2, [r4, #0]
 8028778:	f803 5c01 	strb.w	r5, [r3, #-1]
 802877c:	6863      	ldr	r3, [r4, #4]
 802877e:	3301      	adds	r3, #1
 8028780:	6063      	str	r3, [r4, #4]
 8028782:	e7e9      	b.n	8028758 <_sungetc_r+0xc>
 8028784:	4621      	mov	r1, r4
 8028786:	f000 fd1b 	bl	80291c0 <__submore>
 802878a:	2800      	cmp	r0, #0
 802878c:	d0f1      	beq.n	8028772 <_sungetc_r+0x26>
 802878e:	e7e1      	b.n	8028754 <_sungetc_r+0x8>
 8028790:	6921      	ldr	r1, [r4, #16]
 8028792:	6823      	ldr	r3, [r4, #0]
 8028794:	b151      	cbz	r1, 80287ac <_sungetc_r+0x60>
 8028796:	4299      	cmp	r1, r3
 8028798:	d208      	bcs.n	80287ac <_sungetc_r+0x60>
 802879a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802879e:	42a9      	cmp	r1, r5
 80287a0:	d104      	bne.n	80287ac <_sungetc_r+0x60>
 80287a2:	3b01      	subs	r3, #1
 80287a4:	3201      	adds	r2, #1
 80287a6:	6023      	str	r3, [r4, #0]
 80287a8:	6062      	str	r2, [r4, #4]
 80287aa:	e7d5      	b.n	8028758 <_sungetc_r+0xc>
 80287ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80287b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80287b4:	6363      	str	r3, [r4, #52]	; 0x34
 80287b6:	2303      	movs	r3, #3
 80287b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80287ba:	4623      	mov	r3, r4
 80287bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80287c0:	6023      	str	r3, [r4, #0]
 80287c2:	2301      	movs	r3, #1
 80287c4:	e7dc      	b.n	8028780 <_sungetc_r+0x34>

080287c6 <__ssrefill_r>:
 80287c6:	b510      	push	{r4, lr}
 80287c8:	460c      	mov	r4, r1
 80287ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80287cc:	b169      	cbz	r1, 80287ea <__ssrefill_r+0x24>
 80287ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80287d2:	4299      	cmp	r1, r3
 80287d4:	d001      	beq.n	80287da <__ssrefill_r+0x14>
 80287d6:	f7fc f8b9 	bl	802494c <_free_r>
 80287da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80287dc:	6063      	str	r3, [r4, #4]
 80287de:	2000      	movs	r0, #0
 80287e0:	6360      	str	r0, [r4, #52]	; 0x34
 80287e2:	b113      	cbz	r3, 80287ea <__ssrefill_r+0x24>
 80287e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80287e6:	6023      	str	r3, [r4, #0]
 80287e8:	bd10      	pop	{r4, pc}
 80287ea:	6923      	ldr	r3, [r4, #16]
 80287ec:	6023      	str	r3, [r4, #0]
 80287ee:	2300      	movs	r3, #0
 80287f0:	6063      	str	r3, [r4, #4]
 80287f2:	89a3      	ldrh	r3, [r4, #12]
 80287f4:	f043 0320 	orr.w	r3, r3, #32
 80287f8:	81a3      	strh	r3, [r4, #12]
 80287fa:	f04f 30ff 	mov.w	r0, #4294967295
 80287fe:	e7f3      	b.n	80287e8 <__ssrefill_r+0x22>

08028800 <__ssvfiscanf_r>:
 8028800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028804:	460c      	mov	r4, r1
 8028806:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802880a:	2100      	movs	r1, #0
 802880c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028810:	49a6      	ldr	r1, [pc, #664]	; (8028aac <__ssvfiscanf_r+0x2ac>)
 8028812:	91a0      	str	r1, [sp, #640]	; 0x280
 8028814:	f10d 0804 	add.w	r8, sp, #4
 8028818:	49a5      	ldr	r1, [pc, #660]	; (8028ab0 <__ssvfiscanf_r+0x2b0>)
 802881a:	4fa6      	ldr	r7, [pc, #664]	; (8028ab4 <__ssvfiscanf_r+0x2b4>)
 802881c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8028ab8 <__ssvfiscanf_r+0x2b8>
 8028820:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028824:	4606      	mov	r6, r0
 8028826:	91a1      	str	r1, [sp, #644]	; 0x284
 8028828:	9300      	str	r3, [sp, #0]
 802882a:	7813      	ldrb	r3, [r2, #0]
 802882c:	2b00      	cmp	r3, #0
 802882e:	f000 815a 	beq.w	8028ae6 <__ssvfiscanf_r+0x2e6>
 8028832:	5dd9      	ldrb	r1, [r3, r7]
 8028834:	f011 0108 	ands.w	r1, r1, #8
 8028838:	f102 0501 	add.w	r5, r2, #1
 802883c:	d019      	beq.n	8028872 <__ssvfiscanf_r+0x72>
 802883e:	6863      	ldr	r3, [r4, #4]
 8028840:	2b00      	cmp	r3, #0
 8028842:	dd0f      	ble.n	8028864 <__ssvfiscanf_r+0x64>
 8028844:	6823      	ldr	r3, [r4, #0]
 8028846:	781a      	ldrb	r2, [r3, #0]
 8028848:	5cba      	ldrb	r2, [r7, r2]
 802884a:	0712      	lsls	r2, r2, #28
 802884c:	d401      	bmi.n	8028852 <__ssvfiscanf_r+0x52>
 802884e:	462a      	mov	r2, r5
 8028850:	e7eb      	b.n	802882a <__ssvfiscanf_r+0x2a>
 8028852:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028854:	3201      	adds	r2, #1
 8028856:	9245      	str	r2, [sp, #276]	; 0x114
 8028858:	6862      	ldr	r2, [r4, #4]
 802885a:	3301      	adds	r3, #1
 802885c:	3a01      	subs	r2, #1
 802885e:	6062      	str	r2, [r4, #4]
 8028860:	6023      	str	r3, [r4, #0]
 8028862:	e7ec      	b.n	802883e <__ssvfiscanf_r+0x3e>
 8028864:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028866:	4621      	mov	r1, r4
 8028868:	4630      	mov	r0, r6
 802886a:	4798      	blx	r3
 802886c:	2800      	cmp	r0, #0
 802886e:	d0e9      	beq.n	8028844 <__ssvfiscanf_r+0x44>
 8028870:	e7ed      	b.n	802884e <__ssvfiscanf_r+0x4e>
 8028872:	2b25      	cmp	r3, #37	; 0x25
 8028874:	d012      	beq.n	802889c <__ssvfiscanf_r+0x9c>
 8028876:	469a      	mov	sl, r3
 8028878:	6863      	ldr	r3, [r4, #4]
 802887a:	2b00      	cmp	r3, #0
 802887c:	f340 8091 	ble.w	80289a2 <__ssvfiscanf_r+0x1a2>
 8028880:	6822      	ldr	r2, [r4, #0]
 8028882:	7813      	ldrb	r3, [r2, #0]
 8028884:	4553      	cmp	r3, sl
 8028886:	f040 812e 	bne.w	8028ae6 <__ssvfiscanf_r+0x2e6>
 802888a:	6863      	ldr	r3, [r4, #4]
 802888c:	3b01      	subs	r3, #1
 802888e:	6063      	str	r3, [r4, #4]
 8028890:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8028892:	3201      	adds	r2, #1
 8028894:	3301      	adds	r3, #1
 8028896:	6022      	str	r2, [r4, #0]
 8028898:	9345      	str	r3, [sp, #276]	; 0x114
 802889a:	e7d8      	b.n	802884e <__ssvfiscanf_r+0x4e>
 802889c:	9141      	str	r1, [sp, #260]	; 0x104
 802889e:	9143      	str	r1, [sp, #268]	; 0x10c
 80288a0:	7853      	ldrb	r3, [r2, #1]
 80288a2:	2b2a      	cmp	r3, #42	; 0x2a
 80288a4:	bf02      	ittt	eq
 80288a6:	2310      	moveq	r3, #16
 80288a8:	1c95      	addeq	r5, r2, #2
 80288aa:	9341      	streq	r3, [sp, #260]	; 0x104
 80288ac:	220a      	movs	r2, #10
 80288ae:	46aa      	mov	sl, r5
 80288b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80288b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80288b8:	2b09      	cmp	r3, #9
 80288ba:	d91d      	bls.n	80288f8 <__ssvfiscanf_r+0xf8>
 80288bc:	487e      	ldr	r0, [pc, #504]	; (8028ab8 <__ssvfiscanf_r+0x2b8>)
 80288be:	2203      	movs	r2, #3
 80288c0:	f7d7 fcd6 	bl	8000270 <memchr>
 80288c4:	b140      	cbz	r0, 80288d8 <__ssvfiscanf_r+0xd8>
 80288c6:	2301      	movs	r3, #1
 80288c8:	eba0 0009 	sub.w	r0, r0, r9
 80288cc:	fa03 f000 	lsl.w	r0, r3, r0
 80288d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80288d2:	4318      	orrs	r0, r3
 80288d4:	9041      	str	r0, [sp, #260]	; 0x104
 80288d6:	4655      	mov	r5, sl
 80288d8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80288dc:	2b78      	cmp	r3, #120	; 0x78
 80288de:	d806      	bhi.n	80288ee <__ssvfiscanf_r+0xee>
 80288e0:	2b57      	cmp	r3, #87	; 0x57
 80288e2:	d810      	bhi.n	8028906 <__ssvfiscanf_r+0x106>
 80288e4:	2b25      	cmp	r3, #37	; 0x25
 80288e6:	d0c6      	beq.n	8028876 <__ssvfiscanf_r+0x76>
 80288e8:	d856      	bhi.n	8028998 <__ssvfiscanf_r+0x198>
 80288ea:	2b00      	cmp	r3, #0
 80288ec:	d064      	beq.n	80289b8 <__ssvfiscanf_r+0x1b8>
 80288ee:	2303      	movs	r3, #3
 80288f0:	9347      	str	r3, [sp, #284]	; 0x11c
 80288f2:	230a      	movs	r3, #10
 80288f4:	9342      	str	r3, [sp, #264]	; 0x108
 80288f6:	e071      	b.n	80289dc <__ssvfiscanf_r+0x1dc>
 80288f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80288fa:	fb02 1103 	mla	r1, r2, r3, r1
 80288fe:	3930      	subs	r1, #48	; 0x30
 8028900:	9143      	str	r1, [sp, #268]	; 0x10c
 8028902:	4655      	mov	r5, sl
 8028904:	e7d3      	b.n	80288ae <__ssvfiscanf_r+0xae>
 8028906:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802890a:	2a20      	cmp	r2, #32
 802890c:	d8ef      	bhi.n	80288ee <__ssvfiscanf_r+0xee>
 802890e:	a101      	add	r1, pc, #4	; (adr r1, 8028914 <__ssvfiscanf_r+0x114>)
 8028910:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028914:	080289c7 	.word	0x080289c7
 8028918:	080288ef 	.word	0x080288ef
 802891c:	080288ef 	.word	0x080288ef
 8028920:	08028a25 	.word	0x08028a25
 8028924:	080288ef 	.word	0x080288ef
 8028928:	080288ef 	.word	0x080288ef
 802892c:	080288ef 	.word	0x080288ef
 8028930:	080288ef 	.word	0x080288ef
 8028934:	080288ef 	.word	0x080288ef
 8028938:	080288ef 	.word	0x080288ef
 802893c:	080288ef 	.word	0x080288ef
 8028940:	08028a3b 	.word	0x08028a3b
 8028944:	08028a11 	.word	0x08028a11
 8028948:	0802899f 	.word	0x0802899f
 802894c:	0802899f 	.word	0x0802899f
 8028950:	0802899f 	.word	0x0802899f
 8028954:	080288ef 	.word	0x080288ef
 8028958:	08028a15 	.word	0x08028a15
 802895c:	080288ef 	.word	0x080288ef
 8028960:	080288ef 	.word	0x080288ef
 8028964:	080288ef 	.word	0x080288ef
 8028968:	080288ef 	.word	0x080288ef
 802896c:	08028a4b 	.word	0x08028a4b
 8028970:	08028a1d 	.word	0x08028a1d
 8028974:	080289bf 	.word	0x080289bf
 8028978:	080288ef 	.word	0x080288ef
 802897c:	080288ef 	.word	0x080288ef
 8028980:	08028a47 	.word	0x08028a47
 8028984:	080288ef 	.word	0x080288ef
 8028988:	08028a11 	.word	0x08028a11
 802898c:	080288ef 	.word	0x080288ef
 8028990:	080288ef 	.word	0x080288ef
 8028994:	080289c7 	.word	0x080289c7
 8028998:	3b45      	subs	r3, #69	; 0x45
 802899a:	2b02      	cmp	r3, #2
 802899c:	d8a7      	bhi.n	80288ee <__ssvfiscanf_r+0xee>
 802899e:	2305      	movs	r3, #5
 80289a0:	e01b      	b.n	80289da <__ssvfiscanf_r+0x1da>
 80289a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80289a4:	4621      	mov	r1, r4
 80289a6:	4630      	mov	r0, r6
 80289a8:	4798      	blx	r3
 80289aa:	2800      	cmp	r0, #0
 80289ac:	f43f af68 	beq.w	8028880 <__ssvfiscanf_r+0x80>
 80289b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80289b2:	2800      	cmp	r0, #0
 80289b4:	f040 808d 	bne.w	8028ad2 <__ssvfiscanf_r+0x2d2>
 80289b8:	f04f 30ff 	mov.w	r0, #4294967295
 80289bc:	e08f      	b.n	8028ade <__ssvfiscanf_r+0x2de>
 80289be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80289c0:	f042 0220 	orr.w	r2, r2, #32
 80289c4:	9241      	str	r2, [sp, #260]	; 0x104
 80289c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80289c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80289cc:	9241      	str	r2, [sp, #260]	; 0x104
 80289ce:	2210      	movs	r2, #16
 80289d0:	2b6f      	cmp	r3, #111	; 0x6f
 80289d2:	9242      	str	r2, [sp, #264]	; 0x108
 80289d4:	bf34      	ite	cc
 80289d6:	2303      	movcc	r3, #3
 80289d8:	2304      	movcs	r3, #4
 80289da:	9347      	str	r3, [sp, #284]	; 0x11c
 80289dc:	6863      	ldr	r3, [r4, #4]
 80289de:	2b00      	cmp	r3, #0
 80289e0:	dd42      	ble.n	8028a68 <__ssvfiscanf_r+0x268>
 80289e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80289e4:	0659      	lsls	r1, r3, #25
 80289e6:	d404      	bmi.n	80289f2 <__ssvfiscanf_r+0x1f2>
 80289e8:	6823      	ldr	r3, [r4, #0]
 80289ea:	781a      	ldrb	r2, [r3, #0]
 80289ec:	5cba      	ldrb	r2, [r7, r2]
 80289ee:	0712      	lsls	r2, r2, #28
 80289f0:	d441      	bmi.n	8028a76 <__ssvfiscanf_r+0x276>
 80289f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80289f4:	2b02      	cmp	r3, #2
 80289f6:	dc50      	bgt.n	8028a9a <__ssvfiscanf_r+0x29a>
 80289f8:	466b      	mov	r3, sp
 80289fa:	4622      	mov	r2, r4
 80289fc:	a941      	add	r1, sp, #260	; 0x104
 80289fe:	4630      	mov	r0, r6
 8028a00:	f000 f9d0 	bl	8028da4 <_scanf_chars>
 8028a04:	2801      	cmp	r0, #1
 8028a06:	d06e      	beq.n	8028ae6 <__ssvfiscanf_r+0x2e6>
 8028a08:	2802      	cmp	r0, #2
 8028a0a:	f47f af20 	bne.w	802884e <__ssvfiscanf_r+0x4e>
 8028a0e:	e7cf      	b.n	80289b0 <__ssvfiscanf_r+0x1b0>
 8028a10:	220a      	movs	r2, #10
 8028a12:	e7dd      	b.n	80289d0 <__ssvfiscanf_r+0x1d0>
 8028a14:	2300      	movs	r3, #0
 8028a16:	9342      	str	r3, [sp, #264]	; 0x108
 8028a18:	2303      	movs	r3, #3
 8028a1a:	e7de      	b.n	80289da <__ssvfiscanf_r+0x1da>
 8028a1c:	2308      	movs	r3, #8
 8028a1e:	9342      	str	r3, [sp, #264]	; 0x108
 8028a20:	2304      	movs	r3, #4
 8028a22:	e7da      	b.n	80289da <__ssvfiscanf_r+0x1da>
 8028a24:	4629      	mov	r1, r5
 8028a26:	4640      	mov	r0, r8
 8028a28:	f000 fb92 	bl	8029150 <__sccl>
 8028a2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a32:	9341      	str	r3, [sp, #260]	; 0x104
 8028a34:	4605      	mov	r5, r0
 8028a36:	2301      	movs	r3, #1
 8028a38:	e7cf      	b.n	80289da <__ssvfiscanf_r+0x1da>
 8028a3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028a40:	9341      	str	r3, [sp, #260]	; 0x104
 8028a42:	2300      	movs	r3, #0
 8028a44:	e7c9      	b.n	80289da <__ssvfiscanf_r+0x1da>
 8028a46:	2302      	movs	r3, #2
 8028a48:	e7c7      	b.n	80289da <__ssvfiscanf_r+0x1da>
 8028a4a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8028a4c:	06c3      	lsls	r3, r0, #27
 8028a4e:	f53f aefe 	bmi.w	802884e <__ssvfiscanf_r+0x4e>
 8028a52:	9b00      	ldr	r3, [sp, #0]
 8028a54:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a56:	1d19      	adds	r1, r3, #4
 8028a58:	9100      	str	r1, [sp, #0]
 8028a5a:	681b      	ldr	r3, [r3, #0]
 8028a5c:	f010 0f01 	tst.w	r0, #1
 8028a60:	bf14      	ite	ne
 8028a62:	801a      	strhne	r2, [r3, #0]
 8028a64:	601a      	streq	r2, [r3, #0]
 8028a66:	e6f2      	b.n	802884e <__ssvfiscanf_r+0x4e>
 8028a68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028a6a:	4621      	mov	r1, r4
 8028a6c:	4630      	mov	r0, r6
 8028a6e:	4798      	blx	r3
 8028a70:	2800      	cmp	r0, #0
 8028a72:	d0b6      	beq.n	80289e2 <__ssvfiscanf_r+0x1e2>
 8028a74:	e79c      	b.n	80289b0 <__ssvfiscanf_r+0x1b0>
 8028a76:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a78:	3201      	adds	r2, #1
 8028a7a:	9245      	str	r2, [sp, #276]	; 0x114
 8028a7c:	6862      	ldr	r2, [r4, #4]
 8028a7e:	3a01      	subs	r2, #1
 8028a80:	2a00      	cmp	r2, #0
 8028a82:	6062      	str	r2, [r4, #4]
 8028a84:	dd02      	ble.n	8028a8c <__ssvfiscanf_r+0x28c>
 8028a86:	3301      	adds	r3, #1
 8028a88:	6023      	str	r3, [r4, #0]
 8028a8a:	e7ad      	b.n	80289e8 <__ssvfiscanf_r+0x1e8>
 8028a8c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028a8e:	4621      	mov	r1, r4
 8028a90:	4630      	mov	r0, r6
 8028a92:	4798      	blx	r3
 8028a94:	2800      	cmp	r0, #0
 8028a96:	d0a7      	beq.n	80289e8 <__ssvfiscanf_r+0x1e8>
 8028a98:	e78a      	b.n	80289b0 <__ssvfiscanf_r+0x1b0>
 8028a9a:	2b04      	cmp	r3, #4
 8028a9c:	dc0e      	bgt.n	8028abc <__ssvfiscanf_r+0x2bc>
 8028a9e:	466b      	mov	r3, sp
 8028aa0:	4622      	mov	r2, r4
 8028aa2:	a941      	add	r1, sp, #260	; 0x104
 8028aa4:	4630      	mov	r0, r6
 8028aa6:	f000 f9d7 	bl	8028e58 <_scanf_i>
 8028aaa:	e7ab      	b.n	8028a04 <__ssvfiscanf_r+0x204>
 8028aac:	0802874d 	.word	0x0802874d
 8028ab0:	080287c7 	.word	0x080287c7
 8028ab4:	08045bb1 	.word	0x08045bb1
 8028ab8:	08046462 	.word	0x08046462
 8028abc:	4b0b      	ldr	r3, [pc, #44]	; (8028aec <__ssvfiscanf_r+0x2ec>)
 8028abe:	2b00      	cmp	r3, #0
 8028ac0:	f43f aec5 	beq.w	802884e <__ssvfiscanf_r+0x4e>
 8028ac4:	466b      	mov	r3, sp
 8028ac6:	4622      	mov	r2, r4
 8028ac8:	a941      	add	r1, sp, #260	; 0x104
 8028aca:	4630      	mov	r0, r6
 8028acc:	f3af 8000 	nop.w
 8028ad0:	e798      	b.n	8028a04 <__ssvfiscanf_r+0x204>
 8028ad2:	89a3      	ldrh	r3, [r4, #12]
 8028ad4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028ad8:	bf18      	it	ne
 8028ada:	f04f 30ff 	movne.w	r0, #4294967295
 8028ade:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8028ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028ae6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028ae8:	e7f9      	b.n	8028ade <__ssvfiscanf_r+0x2de>
 8028aea:	bf00      	nop
 8028aec:	00000000 	.word	0x00000000

08028af0 <__sfputc_r>:
 8028af0:	6893      	ldr	r3, [r2, #8]
 8028af2:	3b01      	subs	r3, #1
 8028af4:	2b00      	cmp	r3, #0
 8028af6:	b410      	push	{r4}
 8028af8:	6093      	str	r3, [r2, #8]
 8028afa:	da08      	bge.n	8028b0e <__sfputc_r+0x1e>
 8028afc:	6994      	ldr	r4, [r2, #24]
 8028afe:	42a3      	cmp	r3, r4
 8028b00:	db01      	blt.n	8028b06 <__sfputc_r+0x16>
 8028b02:	290a      	cmp	r1, #10
 8028b04:	d103      	bne.n	8028b0e <__sfputc_r+0x1e>
 8028b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b0a:	f7fd bf73 	b.w	80269f4 <__swbuf_r>
 8028b0e:	6813      	ldr	r3, [r2, #0]
 8028b10:	1c58      	adds	r0, r3, #1
 8028b12:	6010      	str	r0, [r2, #0]
 8028b14:	7019      	strb	r1, [r3, #0]
 8028b16:	4608      	mov	r0, r1
 8028b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8028b1c:	4770      	bx	lr

08028b1e <__sfputs_r>:
 8028b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028b20:	4606      	mov	r6, r0
 8028b22:	460f      	mov	r7, r1
 8028b24:	4614      	mov	r4, r2
 8028b26:	18d5      	adds	r5, r2, r3
 8028b28:	42ac      	cmp	r4, r5
 8028b2a:	d101      	bne.n	8028b30 <__sfputs_r+0x12>
 8028b2c:	2000      	movs	r0, #0
 8028b2e:	e007      	b.n	8028b40 <__sfputs_r+0x22>
 8028b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028b34:	463a      	mov	r2, r7
 8028b36:	4630      	mov	r0, r6
 8028b38:	f7ff ffda 	bl	8028af0 <__sfputc_r>
 8028b3c:	1c43      	adds	r3, r0, #1
 8028b3e:	d1f3      	bne.n	8028b28 <__sfputs_r+0xa>
 8028b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028b42:	Address 0x0000000008028b42 is out of bounds.


08028b44 <_vfiprintf_r>:
 8028b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b48:	460d      	mov	r5, r1
 8028b4a:	b09d      	sub	sp, #116	; 0x74
 8028b4c:	4614      	mov	r4, r2
 8028b4e:	4698      	mov	r8, r3
 8028b50:	4606      	mov	r6, r0
 8028b52:	b118      	cbz	r0, 8028b5c <_vfiprintf_r+0x18>
 8028b54:	6983      	ldr	r3, [r0, #24]
 8028b56:	b90b      	cbnz	r3, 8028b5c <_vfiprintf_r+0x18>
 8028b58:	f7fb fa5c 	bl	8024014 <__sinit>
 8028b5c:	4b89      	ldr	r3, [pc, #548]	; (8028d84 <_vfiprintf_r+0x240>)
 8028b5e:	429d      	cmp	r5, r3
 8028b60:	d11b      	bne.n	8028b9a <_vfiprintf_r+0x56>
 8028b62:	6875      	ldr	r5, [r6, #4]
 8028b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028b66:	07d9      	lsls	r1, r3, #31
 8028b68:	d405      	bmi.n	8028b76 <_vfiprintf_r+0x32>
 8028b6a:	89ab      	ldrh	r3, [r5, #12]
 8028b6c:	059a      	lsls	r2, r3, #22
 8028b6e:	d402      	bmi.n	8028b76 <_vfiprintf_r+0x32>
 8028b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028b72:	f7fb fc25 	bl	80243c0 <__retarget_lock_acquire_recursive>
 8028b76:	89ab      	ldrh	r3, [r5, #12]
 8028b78:	071b      	lsls	r3, r3, #28
 8028b7a:	d501      	bpl.n	8028b80 <_vfiprintf_r+0x3c>
 8028b7c:	692b      	ldr	r3, [r5, #16]
 8028b7e:	b9eb      	cbnz	r3, 8028bbc <_vfiprintf_r+0x78>
 8028b80:	4629      	mov	r1, r5
 8028b82:	4630      	mov	r0, r6
 8028b84:	f7fd ff9a 	bl	8026abc <__swsetup_r>
 8028b88:	b1c0      	cbz	r0, 8028bbc <_vfiprintf_r+0x78>
 8028b8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028b8c:	07dc      	lsls	r4, r3, #31
 8028b8e:	d50e      	bpl.n	8028bae <_vfiprintf_r+0x6a>
 8028b90:	f04f 30ff 	mov.w	r0, #4294967295
 8028b94:	b01d      	add	sp, #116	; 0x74
 8028b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028b9a:	4b7b      	ldr	r3, [pc, #492]	; (8028d88 <_vfiprintf_r+0x244>)
 8028b9c:	429d      	cmp	r5, r3
 8028b9e:	d101      	bne.n	8028ba4 <_vfiprintf_r+0x60>
 8028ba0:	68b5      	ldr	r5, [r6, #8]
 8028ba2:	e7df      	b.n	8028b64 <_vfiprintf_r+0x20>
 8028ba4:	4b79      	ldr	r3, [pc, #484]	; (8028d8c <_vfiprintf_r+0x248>)
 8028ba6:	429d      	cmp	r5, r3
 8028ba8:	bf08      	it	eq
 8028baa:	68f5      	ldreq	r5, [r6, #12]
 8028bac:	e7da      	b.n	8028b64 <_vfiprintf_r+0x20>
 8028bae:	89ab      	ldrh	r3, [r5, #12]
 8028bb0:	0598      	lsls	r0, r3, #22
 8028bb2:	d4ed      	bmi.n	8028b90 <_vfiprintf_r+0x4c>
 8028bb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028bb6:	f7fb fc05 	bl	80243c4 <__retarget_lock_release_recursive>
 8028bba:	e7e9      	b.n	8028b90 <_vfiprintf_r+0x4c>
 8028bbc:	2300      	movs	r3, #0
 8028bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8028bc0:	2320      	movs	r3, #32
 8028bc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8028bc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8028bca:	2330      	movs	r3, #48	; 0x30
 8028bcc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8028d90 <_vfiprintf_r+0x24c>
 8028bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028bd4:	f04f 0901 	mov.w	r9, #1
 8028bd8:	4623      	mov	r3, r4
 8028bda:	469a      	mov	sl, r3
 8028bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028be0:	b10a      	cbz	r2, 8028be6 <_vfiprintf_r+0xa2>
 8028be2:	2a25      	cmp	r2, #37	; 0x25
 8028be4:	d1f9      	bne.n	8028bda <_vfiprintf_r+0x96>
 8028be6:	ebba 0b04 	subs.w	fp, sl, r4
 8028bea:	d00b      	beq.n	8028c04 <_vfiprintf_r+0xc0>
 8028bec:	465b      	mov	r3, fp
 8028bee:	4622      	mov	r2, r4
 8028bf0:	4629      	mov	r1, r5
 8028bf2:	4630      	mov	r0, r6
 8028bf4:	f7ff ff93 	bl	8028b1e <__sfputs_r>
 8028bf8:	3001      	adds	r0, #1
 8028bfa:	f000 80aa 	beq.w	8028d52 <_vfiprintf_r+0x20e>
 8028bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028c00:	445a      	add	r2, fp
 8028c02:	9209      	str	r2, [sp, #36]	; 0x24
 8028c04:	f89a 3000 	ldrb.w	r3, [sl]
 8028c08:	2b00      	cmp	r3, #0
 8028c0a:	f000 80a2 	beq.w	8028d52 <_vfiprintf_r+0x20e>
 8028c0e:	2300      	movs	r3, #0
 8028c10:	f04f 32ff 	mov.w	r2, #4294967295
 8028c14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028c18:	f10a 0a01 	add.w	sl, sl, #1
 8028c1c:	9304      	str	r3, [sp, #16]
 8028c1e:	9307      	str	r3, [sp, #28]
 8028c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028c24:	931a      	str	r3, [sp, #104]	; 0x68
 8028c26:	4654      	mov	r4, sl
 8028c28:	2205      	movs	r2, #5
 8028c2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028c2e:	4858      	ldr	r0, [pc, #352]	; (8028d90 <_vfiprintf_r+0x24c>)
 8028c30:	f7d7 fb1e 	bl	8000270 <memchr>
 8028c34:	9a04      	ldr	r2, [sp, #16]
 8028c36:	b9d8      	cbnz	r0, 8028c70 <_vfiprintf_r+0x12c>
 8028c38:	06d1      	lsls	r1, r2, #27
 8028c3a:	bf44      	itt	mi
 8028c3c:	2320      	movmi	r3, #32
 8028c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c42:	0713      	lsls	r3, r2, #28
 8028c44:	bf44      	itt	mi
 8028c46:	232b      	movmi	r3, #43	; 0x2b
 8028c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8028c50:	2b2a      	cmp	r3, #42	; 0x2a
 8028c52:	d015      	beq.n	8028c80 <_vfiprintf_r+0x13c>
 8028c54:	9a07      	ldr	r2, [sp, #28]
 8028c56:	4654      	mov	r4, sl
 8028c58:	2000      	movs	r0, #0
 8028c5a:	f04f 0c0a 	mov.w	ip, #10
 8028c5e:	4621      	mov	r1, r4
 8028c60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028c64:	3b30      	subs	r3, #48	; 0x30
 8028c66:	2b09      	cmp	r3, #9
 8028c68:	d94e      	bls.n	8028d08 <_vfiprintf_r+0x1c4>
 8028c6a:	b1b0      	cbz	r0, 8028c9a <_vfiprintf_r+0x156>
 8028c6c:	9207      	str	r2, [sp, #28]
 8028c6e:	e014      	b.n	8028c9a <_vfiprintf_r+0x156>
 8028c70:	eba0 0308 	sub.w	r3, r0, r8
 8028c74:	fa09 f303 	lsl.w	r3, r9, r3
 8028c78:	4313      	orrs	r3, r2
 8028c7a:	9304      	str	r3, [sp, #16]
 8028c7c:	46a2      	mov	sl, r4
 8028c7e:	e7d2      	b.n	8028c26 <_vfiprintf_r+0xe2>
 8028c80:	9b03      	ldr	r3, [sp, #12]
 8028c82:	1d19      	adds	r1, r3, #4
 8028c84:	681b      	ldr	r3, [r3, #0]
 8028c86:	9103      	str	r1, [sp, #12]
 8028c88:	2b00      	cmp	r3, #0
 8028c8a:	bfbb      	ittet	lt
 8028c8c:	425b      	neglt	r3, r3
 8028c8e:	f042 0202 	orrlt.w	r2, r2, #2
 8028c92:	9307      	strge	r3, [sp, #28]
 8028c94:	9307      	strlt	r3, [sp, #28]
 8028c96:	bfb8      	it	lt
 8028c98:	9204      	strlt	r2, [sp, #16]
 8028c9a:	7823      	ldrb	r3, [r4, #0]
 8028c9c:	2b2e      	cmp	r3, #46	; 0x2e
 8028c9e:	d10c      	bne.n	8028cba <_vfiprintf_r+0x176>
 8028ca0:	7863      	ldrb	r3, [r4, #1]
 8028ca2:	2b2a      	cmp	r3, #42	; 0x2a
 8028ca4:	d135      	bne.n	8028d12 <_vfiprintf_r+0x1ce>
 8028ca6:	9b03      	ldr	r3, [sp, #12]
 8028ca8:	1d1a      	adds	r2, r3, #4
 8028caa:	681b      	ldr	r3, [r3, #0]
 8028cac:	9203      	str	r2, [sp, #12]
 8028cae:	2b00      	cmp	r3, #0
 8028cb0:	bfb8      	it	lt
 8028cb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8028cb6:	3402      	adds	r4, #2
 8028cb8:	9305      	str	r3, [sp, #20]
 8028cba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8028da0 <_vfiprintf_r+0x25c>
 8028cbe:	7821      	ldrb	r1, [r4, #0]
 8028cc0:	2203      	movs	r2, #3
 8028cc2:	4650      	mov	r0, sl
 8028cc4:	f7d7 fad4 	bl	8000270 <memchr>
 8028cc8:	b140      	cbz	r0, 8028cdc <_vfiprintf_r+0x198>
 8028cca:	2340      	movs	r3, #64	; 0x40
 8028ccc:	eba0 000a 	sub.w	r0, r0, sl
 8028cd0:	fa03 f000 	lsl.w	r0, r3, r0
 8028cd4:	9b04      	ldr	r3, [sp, #16]
 8028cd6:	4303      	orrs	r3, r0
 8028cd8:	3401      	adds	r4, #1
 8028cda:	9304      	str	r3, [sp, #16]
 8028cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028ce0:	482c      	ldr	r0, [pc, #176]	; (8028d94 <_vfiprintf_r+0x250>)
 8028ce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028ce6:	2206      	movs	r2, #6
 8028ce8:	f7d7 fac2 	bl	8000270 <memchr>
 8028cec:	2800      	cmp	r0, #0
 8028cee:	d03f      	beq.n	8028d70 <_vfiprintf_r+0x22c>
 8028cf0:	4b29      	ldr	r3, [pc, #164]	; (8028d98 <_vfiprintf_r+0x254>)
 8028cf2:	bb1b      	cbnz	r3, 8028d3c <_vfiprintf_r+0x1f8>
 8028cf4:	9b03      	ldr	r3, [sp, #12]
 8028cf6:	3307      	adds	r3, #7
 8028cf8:	f023 0307 	bic.w	r3, r3, #7
 8028cfc:	3308      	adds	r3, #8
 8028cfe:	9303      	str	r3, [sp, #12]
 8028d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028d02:	443b      	add	r3, r7
 8028d04:	9309      	str	r3, [sp, #36]	; 0x24
 8028d06:	e767      	b.n	8028bd8 <_vfiprintf_r+0x94>
 8028d08:	fb0c 3202 	mla	r2, ip, r2, r3
 8028d0c:	460c      	mov	r4, r1
 8028d0e:	2001      	movs	r0, #1
 8028d10:	e7a5      	b.n	8028c5e <_vfiprintf_r+0x11a>
 8028d12:	2300      	movs	r3, #0
 8028d14:	3401      	adds	r4, #1
 8028d16:	9305      	str	r3, [sp, #20]
 8028d18:	4619      	mov	r1, r3
 8028d1a:	f04f 0c0a 	mov.w	ip, #10
 8028d1e:	4620      	mov	r0, r4
 8028d20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028d24:	3a30      	subs	r2, #48	; 0x30
 8028d26:	2a09      	cmp	r2, #9
 8028d28:	d903      	bls.n	8028d32 <_vfiprintf_r+0x1ee>
 8028d2a:	2b00      	cmp	r3, #0
 8028d2c:	d0c5      	beq.n	8028cba <_vfiprintf_r+0x176>
 8028d2e:	9105      	str	r1, [sp, #20]
 8028d30:	e7c3      	b.n	8028cba <_vfiprintf_r+0x176>
 8028d32:	fb0c 2101 	mla	r1, ip, r1, r2
 8028d36:	4604      	mov	r4, r0
 8028d38:	2301      	movs	r3, #1
 8028d3a:	e7f0      	b.n	8028d1e <_vfiprintf_r+0x1da>
 8028d3c:	ab03      	add	r3, sp, #12
 8028d3e:	9300      	str	r3, [sp, #0]
 8028d40:	462a      	mov	r2, r5
 8028d42:	4b16      	ldr	r3, [pc, #88]	; (8028d9c <_vfiprintf_r+0x258>)
 8028d44:	a904      	add	r1, sp, #16
 8028d46:	4630      	mov	r0, r6
 8028d48:	f7fb ff72 	bl	8024c30 <_printf_float>
 8028d4c:	4607      	mov	r7, r0
 8028d4e:	1c78      	adds	r0, r7, #1
 8028d50:	d1d6      	bne.n	8028d00 <_vfiprintf_r+0x1bc>
 8028d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028d54:	07d9      	lsls	r1, r3, #31
 8028d56:	d405      	bmi.n	8028d64 <_vfiprintf_r+0x220>
 8028d58:	89ab      	ldrh	r3, [r5, #12]
 8028d5a:	059a      	lsls	r2, r3, #22
 8028d5c:	d402      	bmi.n	8028d64 <_vfiprintf_r+0x220>
 8028d5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028d60:	f7fb fb30 	bl	80243c4 <__retarget_lock_release_recursive>
 8028d64:	89ab      	ldrh	r3, [r5, #12]
 8028d66:	065b      	lsls	r3, r3, #25
 8028d68:	f53f af12 	bmi.w	8028b90 <_vfiprintf_r+0x4c>
 8028d6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028d6e:	e711      	b.n	8028b94 <_vfiprintf_r+0x50>
 8028d70:	ab03      	add	r3, sp, #12
 8028d72:	9300      	str	r3, [sp, #0]
 8028d74:	462a      	mov	r2, r5
 8028d76:	4b09      	ldr	r3, [pc, #36]	; (8028d9c <_vfiprintf_r+0x258>)
 8028d78:	a904      	add	r1, sp, #16
 8028d7a:	4630      	mov	r0, r6
 8028d7c:	f7fc f9e4 	bl	8025148 <_printf_i>
 8028d80:	e7e4      	b.n	8028d4c <_vfiprintf_r+0x208>
 8028d82:	bf00      	nop
 8028d84:	08045cd4 	.word	0x08045cd4
 8028d88:	08045cf4 	.word	0x08045cf4
 8028d8c:	08045cb4 	.word	0x08045cb4
 8028d90:	0804645c 	.word	0x0804645c
 8028d94:	08046466 	.word	0x08046466
 8028d98:	08024c31 	.word	0x08024c31
 8028d9c:	08028b1f 	.word	0x08028b1f
 8028da0:	08046462 	.word	0x08046462

08028da4 <_scanf_chars>:
 8028da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028da8:	4615      	mov	r5, r2
 8028daa:	688a      	ldr	r2, [r1, #8]
 8028dac:	4680      	mov	r8, r0
 8028dae:	460c      	mov	r4, r1
 8028db0:	b932      	cbnz	r2, 8028dc0 <_scanf_chars+0x1c>
 8028db2:	698a      	ldr	r2, [r1, #24]
 8028db4:	2a00      	cmp	r2, #0
 8028db6:	bf0c      	ite	eq
 8028db8:	2201      	moveq	r2, #1
 8028dba:	f04f 32ff 	movne.w	r2, #4294967295
 8028dbe:	608a      	str	r2, [r1, #8]
 8028dc0:	6822      	ldr	r2, [r4, #0]
 8028dc2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028e54 <_scanf_chars+0xb0>
 8028dc6:	06d1      	lsls	r1, r2, #27
 8028dc8:	bf5f      	itttt	pl
 8028dca:	681a      	ldrpl	r2, [r3, #0]
 8028dcc:	1d11      	addpl	r1, r2, #4
 8028dce:	6019      	strpl	r1, [r3, #0]
 8028dd0:	6816      	ldrpl	r6, [r2, #0]
 8028dd2:	2700      	movs	r7, #0
 8028dd4:	69a0      	ldr	r0, [r4, #24]
 8028dd6:	b188      	cbz	r0, 8028dfc <_scanf_chars+0x58>
 8028dd8:	2801      	cmp	r0, #1
 8028dda:	d107      	bne.n	8028dec <_scanf_chars+0x48>
 8028ddc:	682a      	ldr	r2, [r5, #0]
 8028dde:	7811      	ldrb	r1, [r2, #0]
 8028de0:	6962      	ldr	r2, [r4, #20]
 8028de2:	5c52      	ldrb	r2, [r2, r1]
 8028de4:	b952      	cbnz	r2, 8028dfc <_scanf_chars+0x58>
 8028de6:	2f00      	cmp	r7, #0
 8028de8:	d031      	beq.n	8028e4e <_scanf_chars+0xaa>
 8028dea:	e022      	b.n	8028e32 <_scanf_chars+0x8e>
 8028dec:	2802      	cmp	r0, #2
 8028dee:	d120      	bne.n	8028e32 <_scanf_chars+0x8e>
 8028df0:	682b      	ldr	r3, [r5, #0]
 8028df2:	781b      	ldrb	r3, [r3, #0]
 8028df4:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028df8:	071b      	lsls	r3, r3, #28
 8028dfa:	d41a      	bmi.n	8028e32 <_scanf_chars+0x8e>
 8028dfc:	6823      	ldr	r3, [r4, #0]
 8028dfe:	06da      	lsls	r2, r3, #27
 8028e00:	bf5e      	ittt	pl
 8028e02:	682b      	ldrpl	r3, [r5, #0]
 8028e04:	781b      	ldrbpl	r3, [r3, #0]
 8028e06:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028e0a:	682a      	ldr	r2, [r5, #0]
 8028e0c:	686b      	ldr	r3, [r5, #4]
 8028e0e:	3201      	adds	r2, #1
 8028e10:	602a      	str	r2, [r5, #0]
 8028e12:	68a2      	ldr	r2, [r4, #8]
 8028e14:	3b01      	subs	r3, #1
 8028e16:	3a01      	subs	r2, #1
 8028e18:	606b      	str	r3, [r5, #4]
 8028e1a:	3701      	adds	r7, #1
 8028e1c:	60a2      	str	r2, [r4, #8]
 8028e1e:	b142      	cbz	r2, 8028e32 <_scanf_chars+0x8e>
 8028e20:	2b00      	cmp	r3, #0
 8028e22:	dcd7      	bgt.n	8028dd4 <_scanf_chars+0x30>
 8028e24:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028e28:	4629      	mov	r1, r5
 8028e2a:	4640      	mov	r0, r8
 8028e2c:	4798      	blx	r3
 8028e2e:	2800      	cmp	r0, #0
 8028e30:	d0d0      	beq.n	8028dd4 <_scanf_chars+0x30>
 8028e32:	6823      	ldr	r3, [r4, #0]
 8028e34:	f013 0310 	ands.w	r3, r3, #16
 8028e38:	d105      	bne.n	8028e46 <_scanf_chars+0xa2>
 8028e3a:	68e2      	ldr	r2, [r4, #12]
 8028e3c:	3201      	adds	r2, #1
 8028e3e:	60e2      	str	r2, [r4, #12]
 8028e40:	69a2      	ldr	r2, [r4, #24]
 8028e42:	b102      	cbz	r2, 8028e46 <_scanf_chars+0xa2>
 8028e44:	7033      	strb	r3, [r6, #0]
 8028e46:	6923      	ldr	r3, [r4, #16]
 8028e48:	443b      	add	r3, r7
 8028e4a:	6123      	str	r3, [r4, #16]
 8028e4c:	2000      	movs	r0, #0
 8028e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028e52:	bf00      	nop
 8028e54:	08045bb1 	.word	0x08045bb1

08028e58 <_scanf_i>:
 8028e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028e5c:	4698      	mov	r8, r3
 8028e5e:	4b76      	ldr	r3, [pc, #472]	; (8029038 <_scanf_i+0x1e0>)
 8028e60:	460c      	mov	r4, r1
 8028e62:	4682      	mov	sl, r0
 8028e64:	4616      	mov	r6, r2
 8028e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028e6a:	b087      	sub	sp, #28
 8028e6c:	ab03      	add	r3, sp, #12
 8028e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028e72:	4b72      	ldr	r3, [pc, #456]	; (802903c <_scanf_i+0x1e4>)
 8028e74:	69a1      	ldr	r1, [r4, #24]
 8028e76:	4a72      	ldr	r2, [pc, #456]	; (8029040 <_scanf_i+0x1e8>)
 8028e78:	2903      	cmp	r1, #3
 8028e7a:	bf18      	it	ne
 8028e7c:	461a      	movne	r2, r3
 8028e7e:	68a3      	ldr	r3, [r4, #8]
 8028e80:	9201      	str	r2, [sp, #4]
 8028e82:	1e5a      	subs	r2, r3, #1
 8028e84:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028e88:	bf88      	it	hi
 8028e8a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028e8e:	4627      	mov	r7, r4
 8028e90:	bf82      	ittt	hi
 8028e92:	eb03 0905 	addhi.w	r9, r3, r5
 8028e96:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028e9a:	60a3      	strhi	r3, [r4, #8]
 8028e9c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028ea0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028ea4:	bf98      	it	ls
 8028ea6:	f04f 0900 	movls.w	r9, #0
 8028eaa:	6023      	str	r3, [r4, #0]
 8028eac:	463d      	mov	r5, r7
 8028eae:	f04f 0b00 	mov.w	fp, #0
 8028eb2:	6831      	ldr	r1, [r6, #0]
 8028eb4:	ab03      	add	r3, sp, #12
 8028eb6:	7809      	ldrb	r1, [r1, #0]
 8028eb8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028ebc:	2202      	movs	r2, #2
 8028ebe:	f7d7 f9d7 	bl	8000270 <memchr>
 8028ec2:	b328      	cbz	r0, 8028f10 <_scanf_i+0xb8>
 8028ec4:	f1bb 0f01 	cmp.w	fp, #1
 8028ec8:	d159      	bne.n	8028f7e <_scanf_i+0x126>
 8028eca:	6862      	ldr	r2, [r4, #4]
 8028ecc:	b92a      	cbnz	r2, 8028eda <_scanf_i+0x82>
 8028ece:	6822      	ldr	r2, [r4, #0]
 8028ed0:	2308      	movs	r3, #8
 8028ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028ed6:	6063      	str	r3, [r4, #4]
 8028ed8:	6022      	str	r2, [r4, #0]
 8028eda:	6822      	ldr	r2, [r4, #0]
 8028edc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028ee0:	6022      	str	r2, [r4, #0]
 8028ee2:	68a2      	ldr	r2, [r4, #8]
 8028ee4:	1e51      	subs	r1, r2, #1
 8028ee6:	60a1      	str	r1, [r4, #8]
 8028ee8:	b192      	cbz	r2, 8028f10 <_scanf_i+0xb8>
 8028eea:	6832      	ldr	r2, [r6, #0]
 8028eec:	1c51      	adds	r1, r2, #1
 8028eee:	6031      	str	r1, [r6, #0]
 8028ef0:	7812      	ldrb	r2, [r2, #0]
 8028ef2:	f805 2b01 	strb.w	r2, [r5], #1
 8028ef6:	6872      	ldr	r2, [r6, #4]
 8028ef8:	3a01      	subs	r2, #1
 8028efa:	2a00      	cmp	r2, #0
 8028efc:	6072      	str	r2, [r6, #4]
 8028efe:	dc07      	bgt.n	8028f10 <_scanf_i+0xb8>
 8028f00:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028f04:	4631      	mov	r1, r6
 8028f06:	4650      	mov	r0, sl
 8028f08:	4790      	blx	r2
 8028f0a:	2800      	cmp	r0, #0
 8028f0c:	f040 8085 	bne.w	802901a <_scanf_i+0x1c2>
 8028f10:	f10b 0b01 	add.w	fp, fp, #1
 8028f14:	f1bb 0f03 	cmp.w	fp, #3
 8028f18:	d1cb      	bne.n	8028eb2 <_scanf_i+0x5a>
 8028f1a:	6863      	ldr	r3, [r4, #4]
 8028f1c:	b90b      	cbnz	r3, 8028f22 <_scanf_i+0xca>
 8028f1e:	230a      	movs	r3, #10
 8028f20:	6063      	str	r3, [r4, #4]
 8028f22:	6863      	ldr	r3, [r4, #4]
 8028f24:	4947      	ldr	r1, [pc, #284]	; (8029044 <_scanf_i+0x1ec>)
 8028f26:	6960      	ldr	r0, [r4, #20]
 8028f28:	1ac9      	subs	r1, r1, r3
 8028f2a:	f000 f911 	bl	8029150 <__sccl>
 8028f2e:	f04f 0b00 	mov.w	fp, #0
 8028f32:	68a3      	ldr	r3, [r4, #8]
 8028f34:	6822      	ldr	r2, [r4, #0]
 8028f36:	2b00      	cmp	r3, #0
 8028f38:	d03d      	beq.n	8028fb6 <_scanf_i+0x15e>
 8028f3a:	6831      	ldr	r1, [r6, #0]
 8028f3c:	6960      	ldr	r0, [r4, #20]
 8028f3e:	f891 c000 	ldrb.w	ip, [r1]
 8028f42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028f46:	2800      	cmp	r0, #0
 8028f48:	d035      	beq.n	8028fb6 <_scanf_i+0x15e>
 8028f4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8028f4e:	d124      	bne.n	8028f9a <_scanf_i+0x142>
 8028f50:	0510      	lsls	r0, r2, #20
 8028f52:	d522      	bpl.n	8028f9a <_scanf_i+0x142>
 8028f54:	f10b 0b01 	add.w	fp, fp, #1
 8028f58:	f1b9 0f00 	cmp.w	r9, #0
 8028f5c:	d003      	beq.n	8028f66 <_scanf_i+0x10e>
 8028f5e:	3301      	adds	r3, #1
 8028f60:	f109 39ff 	add.w	r9, r9, #4294967295
 8028f64:	60a3      	str	r3, [r4, #8]
 8028f66:	6873      	ldr	r3, [r6, #4]
 8028f68:	3b01      	subs	r3, #1
 8028f6a:	2b00      	cmp	r3, #0
 8028f6c:	6073      	str	r3, [r6, #4]
 8028f6e:	dd1b      	ble.n	8028fa8 <_scanf_i+0x150>
 8028f70:	6833      	ldr	r3, [r6, #0]
 8028f72:	3301      	adds	r3, #1
 8028f74:	6033      	str	r3, [r6, #0]
 8028f76:	68a3      	ldr	r3, [r4, #8]
 8028f78:	3b01      	subs	r3, #1
 8028f7a:	60a3      	str	r3, [r4, #8]
 8028f7c:	e7d9      	b.n	8028f32 <_scanf_i+0xda>
 8028f7e:	f1bb 0f02 	cmp.w	fp, #2
 8028f82:	d1ae      	bne.n	8028ee2 <_scanf_i+0x8a>
 8028f84:	6822      	ldr	r2, [r4, #0]
 8028f86:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028f8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028f8e:	d1bf      	bne.n	8028f10 <_scanf_i+0xb8>
 8028f90:	2310      	movs	r3, #16
 8028f92:	6063      	str	r3, [r4, #4]
 8028f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028f98:	e7a2      	b.n	8028ee0 <_scanf_i+0x88>
 8028f9a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028f9e:	6022      	str	r2, [r4, #0]
 8028fa0:	780b      	ldrb	r3, [r1, #0]
 8028fa2:	f805 3b01 	strb.w	r3, [r5], #1
 8028fa6:	e7de      	b.n	8028f66 <_scanf_i+0x10e>
 8028fa8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028fac:	4631      	mov	r1, r6
 8028fae:	4650      	mov	r0, sl
 8028fb0:	4798      	blx	r3
 8028fb2:	2800      	cmp	r0, #0
 8028fb4:	d0df      	beq.n	8028f76 <_scanf_i+0x11e>
 8028fb6:	6823      	ldr	r3, [r4, #0]
 8028fb8:	05db      	lsls	r3, r3, #23
 8028fba:	d50d      	bpl.n	8028fd8 <_scanf_i+0x180>
 8028fbc:	42bd      	cmp	r5, r7
 8028fbe:	d909      	bls.n	8028fd4 <_scanf_i+0x17c>
 8028fc0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028fc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028fc8:	4632      	mov	r2, r6
 8028fca:	4650      	mov	r0, sl
 8028fcc:	4798      	blx	r3
 8028fce:	f105 39ff 	add.w	r9, r5, #4294967295
 8028fd2:	464d      	mov	r5, r9
 8028fd4:	42bd      	cmp	r5, r7
 8028fd6:	d02d      	beq.n	8029034 <_scanf_i+0x1dc>
 8028fd8:	6822      	ldr	r2, [r4, #0]
 8028fda:	f012 0210 	ands.w	r2, r2, #16
 8028fde:	d113      	bne.n	8029008 <_scanf_i+0x1b0>
 8028fe0:	702a      	strb	r2, [r5, #0]
 8028fe2:	6863      	ldr	r3, [r4, #4]
 8028fe4:	9e01      	ldr	r6, [sp, #4]
 8028fe6:	4639      	mov	r1, r7
 8028fe8:	4650      	mov	r0, sl
 8028fea:	47b0      	blx	r6
 8028fec:	6821      	ldr	r1, [r4, #0]
 8028fee:	f8d8 3000 	ldr.w	r3, [r8]
 8028ff2:	f011 0f20 	tst.w	r1, #32
 8028ff6:	d013      	beq.n	8029020 <_scanf_i+0x1c8>
 8028ff8:	1d1a      	adds	r2, r3, #4
 8028ffa:	f8c8 2000 	str.w	r2, [r8]
 8028ffe:	681b      	ldr	r3, [r3, #0]
 8029000:	6018      	str	r0, [r3, #0]
 8029002:	68e3      	ldr	r3, [r4, #12]
 8029004:	3301      	adds	r3, #1
 8029006:	60e3      	str	r3, [r4, #12]
 8029008:	1bed      	subs	r5, r5, r7
 802900a:	44ab      	add	fp, r5
 802900c:	6925      	ldr	r5, [r4, #16]
 802900e:	445d      	add	r5, fp
 8029010:	6125      	str	r5, [r4, #16]
 8029012:	2000      	movs	r0, #0
 8029014:	b007      	add	sp, #28
 8029016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802901a:	f04f 0b00 	mov.w	fp, #0
 802901e:	e7ca      	b.n	8028fb6 <_scanf_i+0x15e>
 8029020:	1d1a      	adds	r2, r3, #4
 8029022:	f8c8 2000 	str.w	r2, [r8]
 8029026:	681b      	ldr	r3, [r3, #0]
 8029028:	f011 0f01 	tst.w	r1, #1
 802902c:	bf14      	ite	ne
 802902e:	8018      	strhne	r0, [r3, #0]
 8029030:	6018      	streq	r0, [r3, #0]
 8029032:	e7e6      	b.n	8029002 <_scanf_i+0x1aa>
 8029034:	2001      	movs	r0, #1
 8029036:	e7ed      	b.n	8029014 <_scanf_i+0x1bc>
 8029038:	080295d0 	.word	0x080295d0
 802903c:	08026565 	.word	0x08026565
 8029040:	08026469 	.word	0x08026469
 8029044:	08046486 	.word	0x08046486

08029048 <_putc_r>:
 8029048:	b570      	push	{r4, r5, r6, lr}
 802904a:	460d      	mov	r5, r1
 802904c:	4614      	mov	r4, r2
 802904e:	4606      	mov	r6, r0
 8029050:	b118      	cbz	r0, 802905a <_putc_r+0x12>
 8029052:	6983      	ldr	r3, [r0, #24]
 8029054:	b90b      	cbnz	r3, 802905a <_putc_r+0x12>
 8029056:	f7fa ffdd 	bl	8024014 <__sinit>
 802905a:	4b1c      	ldr	r3, [pc, #112]	; (80290cc <_putc_r+0x84>)
 802905c:	429c      	cmp	r4, r3
 802905e:	d124      	bne.n	80290aa <_putc_r+0x62>
 8029060:	6874      	ldr	r4, [r6, #4]
 8029062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029064:	07d8      	lsls	r0, r3, #31
 8029066:	d405      	bmi.n	8029074 <_putc_r+0x2c>
 8029068:	89a3      	ldrh	r3, [r4, #12]
 802906a:	0599      	lsls	r1, r3, #22
 802906c:	d402      	bmi.n	8029074 <_putc_r+0x2c>
 802906e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8029070:	f7fb f9a6 	bl	80243c0 <__retarget_lock_acquire_recursive>
 8029074:	68a3      	ldr	r3, [r4, #8]
 8029076:	3b01      	subs	r3, #1
 8029078:	2b00      	cmp	r3, #0
 802907a:	60a3      	str	r3, [r4, #8]
 802907c:	da05      	bge.n	802908a <_putc_r+0x42>
 802907e:	69a2      	ldr	r2, [r4, #24]
 8029080:	4293      	cmp	r3, r2
 8029082:	db1c      	blt.n	80290be <_putc_r+0x76>
 8029084:	b2eb      	uxtb	r3, r5
 8029086:	2b0a      	cmp	r3, #10
 8029088:	d019      	beq.n	80290be <_putc_r+0x76>
 802908a:	6823      	ldr	r3, [r4, #0]
 802908c:	1c5a      	adds	r2, r3, #1
 802908e:	6022      	str	r2, [r4, #0]
 8029090:	701d      	strb	r5, [r3, #0]
 8029092:	b2ed      	uxtb	r5, r5
 8029094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8029096:	07da      	lsls	r2, r3, #31
 8029098:	d405      	bmi.n	80290a6 <_putc_r+0x5e>
 802909a:	89a3      	ldrh	r3, [r4, #12]
 802909c:	059b      	lsls	r3, r3, #22
 802909e:	d402      	bmi.n	80290a6 <_putc_r+0x5e>
 80290a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80290a2:	f7fb f98f 	bl	80243c4 <__retarget_lock_release_recursive>
 80290a6:	4628      	mov	r0, r5
 80290a8:	bd70      	pop	{r4, r5, r6, pc}
 80290aa:	4b09      	ldr	r3, [pc, #36]	; (80290d0 <_putc_r+0x88>)
 80290ac:	429c      	cmp	r4, r3
 80290ae:	d101      	bne.n	80290b4 <_putc_r+0x6c>
 80290b0:	68b4      	ldr	r4, [r6, #8]
 80290b2:	e7d6      	b.n	8029062 <_putc_r+0x1a>
 80290b4:	4b07      	ldr	r3, [pc, #28]	; (80290d4 <_putc_r+0x8c>)
 80290b6:	429c      	cmp	r4, r3
 80290b8:	bf08      	it	eq
 80290ba:	68f4      	ldreq	r4, [r6, #12]
 80290bc:	e7d1      	b.n	8029062 <_putc_r+0x1a>
 80290be:	4629      	mov	r1, r5
 80290c0:	4622      	mov	r2, r4
 80290c2:	4630      	mov	r0, r6
 80290c4:	f7fd fc96 	bl	80269f4 <__swbuf_r>
 80290c8:	4605      	mov	r5, r0
 80290ca:	e7e3      	b.n	8029094 <_putc_r+0x4c>
 80290cc:	08045cd4 	.word	0x08045cd4
 80290d0:	08045cf4 	.word	0x08045cf4
 80290d4:	08045cb4 	.word	0x08045cb4

080290d8 <_read_r>:
 80290d8:	b538      	push	{r3, r4, r5, lr}
 80290da:	4d07      	ldr	r5, [pc, #28]	; (80290f8 <_read_r+0x20>)
 80290dc:	4604      	mov	r4, r0
 80290de:	4608      	mov	r0, r1
 80290e0:	4611      	mov	r1, r2
 80290e2:	2200      	movs	r2, #0
 80290e4:	602a      	str	r2, [r5, #0]
 80290e6:	461a      	mov	r2, r3
 80290e8:	f7de f930 	bl	800734c <_read>
 80290ec:	1c43      	adds	r3, r0, #1
 80290ee:	d102      	bne.n	80290f6 <_read_r+0x1e>
 80290f0:	682b      	ldr	r3, [r5, #0]
 80290f2:	b103      	cbz	r3, 80290f6 <_read_r+0x1e>
 80290f4:	6023      	str	r3, [r4, #0]
 80290f6:	bd38      	pop	{r3, r4, r5, pc}
 80290f8:	2002fd5c 	.word	0x2002fd5c

080290fc <__fpclassifyd>:
 80290fc:	ec51 0b10 	vmov	r0, r1, d0
 8029100:	b510      	push	{r4, lr}
 8029102:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8029106:	460b      	mov	r3, r1
 8029108:	d019      	beq.n	802913e <__fpclassifyd+0x42>
 802910a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 802910e:	490e      	ldr	r1, [pc, #56]	; (8029148 <__fpclassifyd+0x4c>)
 8029110:	428a      	cmp	r2, r1
 8029112:	d90e      	bls.n	8029132 <__fpclassifyd+0x36>
 8029114:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8029118:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 802911c:	428a      	cmp	r2, r1
 802911e:	d908      	bls.n	8029132 <__fpclassifyd+0x36>
 8029120:	4a0a      	ldr	r2, [pc, #40]	; (802914c <__fpclassifyd+0x50>)
 8029122:	4213      	tst	r3, r2
 8029124:	d007      	beq.n	8029136 <__fpclassifyd+0x3a>
 8029126:	4294      	cmp	r4, r2
 8029128:	d107      	bne.n	802913a <__fpclassifyd+0x3e>
 802912a:	fab0 f080 	clz	r0, r0
 802912e:	0940      	lsrs	r0, r0, #5
 8029130:	bd10      	pop	{r4, pc}
 8029132:	2004      	movs	r0, #4
 8029134:	e7fc      	b.n	8029130 <__fpclassifyd+0x34>
 8029136:	2003      	movs	r0, #3
 8029138:	e7fa      	b.n	8029130 <__fpclassifyd+0x34>
 802913a:	2000      	movs	r0, #0
 802913c:	e7f8      	b.n	8029130 <__fpclassifyd+0x34>
 802913e:	2800      	cmp	r0, #0
 8029140:	d1ee      	bne.n	8029120 <__fpclassifyd+0x24>
 8029142:	2002      	movs	r0, #2
 8029144:	e7f4      	b.n	8029130 <__fpclassifyd+0x34>
 8029146:	bf00      	nop
 8029148:	7fdfffff 	.word	0x7fdfffff
 802914c:	7ff00000 	.word	0x7ff00000

08029150 <__sccl>:
 8029150:	b570      	push	{r4, r5, r6, lr}
 8029152:	780b      	ldrb	r3, [r1, #0]
 8029154:	4604      	mov	r4, r0
 8029156:	2b5e      	cmp	r3, #94	; 0x5e
 8029158:	bf0b      	itete	eq
 802915a:	784b      	ldrbeq	r3, [r1, #1]
 802915c:	1c48      	addne	r0, r1, #1
 802915e:	1c88      	addeq	r0, r1, #2
 8029160:	2200      	movne	r2, #0
 8029162:	bf08      	it	eq
 8029164:	2201      	moveq	r2, #1
 8029166:	1e61      	subs	r1, r4, #1
 8029168:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802916c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8029170:	42a9      	cmp	r1, r5
 8029172:	d1fb      	bne.n	802916c <__sccl+0x1c>
 8029174:	b90b      	cbnz	r3, 802917a <__sccl+0x2a>
 8029176:	3801      	subs	r0, #1
 8029178:	bd70      	pop	{r4, r5, r6, pc}
 802917a:	f082 0201 	eor.w	r2, r2, #1
 802917e:	54e2      	strb	r2, [r4, r3]
 8029180:	4605      	mov	r5, r0
 8029182:	4628      	mov	r0, r5
 8029184:	f810 1b01 	ldrb.w	r1, [r0], #1
 8029188:	292d      	cmp	r1, #45	; 0x2d
 802918a:	d006      	beq.n	802919a <__sccl+0x4a>
 802918c:	295d      	cmp	r1, #93	; 0x5d
 802918e:	d0f3      	beq.n	8029178 <__sccl+0x28>
 8029190:	b909      	cbnz	r1, 8029196 <__sccl+0x46>
 8029192:	4628      	mov	r0, r5
 8029194:	e7f0      	b.n	8029178 <__sccl+0x28>
 8029196:	460b      	mov	r3, r1
 8029198:	e7f1      	b.n	802917e <__sccl+0x2e>
 802919a:	786e      	ldrb	r6, [r5, #1]
 802919c:	2e5d      	cmp	r6, #93	; 0x5d
 802919e:	d0fa      	beq.n	8029196 <__sccl+0x46>
 80291a0:	42b3      	cmp	r3, r6
 80291a2:	dcf8      	bgt.n	8029196 <__sccl+0x46>
 80291a4:	3502      	adds	r5, #2
 80291a6:	4619      	mov	r1, r3
 80291a8:	3101      	adds	r1, #1
 80291aa:	428e      	cmp	r6, r1
 80291ac:	5462      	strb	r2, [r4, r1]
 80291ae:	dcfb      	bgt.n	80291a8 <__sccl+0x58>
 80291b0:	1af1      	subs	r1, r6, r3
 80291b2:	3901      	subs	r1, #1
 80291b4:	1c58      	adds	r0, r3, #1
 80291b6:	42b3      	cmp	r3, r6
 80291b8:	bfa8      	it	ge
 80291ba:	2100      	movge	r1, #0
 80291bc:	1843      	adds	r3, r0, r1
 80291be:	e7e0      	b.n	8029182 <__sccl+0x32>

080291c0 <__submore>:
 80291c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80291c4:	460c      	mov	r4, r1
 80291c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80291c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80291cc:	4299      	cmp	r1, r3
 80291ce:	d11d      	bne.n	802920c <__submore+0x4c>
 80291d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80291d4:	f7fb fc26 	bl	8024a24 <_malloc_r>
 80291d8:	b918      	cbnz	r0, 80291e2 <__submore+0x22>
 80291da:	f04f 30ff 	mov.w	r0, #4294967295
 80291de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80291e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80291e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80291e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80291ec:	6360      	str	r0, [r4, #52]	; 0x34
 80291ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80291f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80291f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80291fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80291fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8029202:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8029206:	6020      	str	r0, [r4, #0]
 8029208:	2000      	movs	r0, #0
 802920a:	e7e8      	b.n	80291de <__submore+0x1e>
 802920c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802920e:	0077      	lsls	r7, r6, #1
 8029210:	463a      	mov	r2, r7
 8029212:	f000 f857 	bl	80292c4 <_realloc_r>
 8029216:	4605      	mov	r5, r0
 8029218:	2800      	cmp	r0, #0
 802921a:	d0de      	beq.n	80291da <__submore+0x1a>
 802921c:	eb00 0806 	add.w	r8, r0, r6
 8029220:	4601      	mov	r1, r0
 8029222:	4632      	mov	r2, r6
 8029224:	4640      	mov	r0, r8
 8029226:	f7fb f8ef 	bl	8024408 <memcpy>
 802922a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802922e:	f8c4 8000 	str.w	r8, [r4]
 8029232:	e7e9      	b.n	8029208 <__submore+0x48>

08029234 <abort>:
 8029234:	b508      	push	{r3, lr}
 8029236:	2006      	movs	r0, #6
 8029238:	f000 f89c 	bl	8029374 <raise>
 802923c:	2001      	movs	r0, #1
 802923e:	f7de f87f 	bl	8007340 <_exit>
 8029242:	Address 0x0000000008029242 is out of bounds.


08029244 <__env_lock>:
 8029244:	4801      	ldr	r0, [pc, #4]	; (802924c <__env_lock+0x8>)
 8029246:	f7fb b8bb 	b.w	80243c0 <__retarget_lock_acquire_recursive>
 802924a:	bf00      	nop
 802924c:	2002fd4c 	.word	0x2002fd4c

08029250 <__env_unlock>:
 8029250:	4801      	ldr	r0, [pc, #4]	; (8029258 <__env_unlock+0x8>)
 8029252:	f7fb b8b7 	b.w	80243c4 <__retarget_lock_release_recursive>
 8029256:	bf00      	nop
 8029258:	2002fd4c 	.word	0x2002fd4c

0802925c <_fstat_r>:
 802925c:	b538      	push	{r3, r4, r5, lr}
 802925e:	4d07      	ldr	r5, [pc, #28]	; (802927c <_fstat_r+0x20>)
 8029260:	2300      	movs	r3, #0
 8029262:	4604      	mov	r4, r0
 8029264:	4608      	mov	r0, r1
 8029266:	4611      	mov	r1, r2
 8029268:	602b      	str	r3, [r5, #0]
 802926a:	f7de f881 	bl	8007370 <_fstat>
 802926e:	1c43      	adds	r3, r0, #1
 8029270:	d102      	bne.n	8029278 <_fstat_r+0x1c>
 8029272:	682b      	ldr	r3, [r5, #0]
 8029274:	b103      	cbz	r3, 8029278 <_fstat_r+0x1c>
 8029276:	6023      	str	r3, [r4, #0]
 8029278:	bd38      	pop	{r3, r4, r5, pc}
 802927a:	bf00      	nop
 802927c:	2002fd5c 	.word	0x2002fd5c

08029280 <_isatty_r>:
 8029280:	b538      	push	{r3, r4, r5, lr}
 8029282:	4d06      	ldr	r5, [pc, #24]	; (802929c <_isatty_r+0x1c>)
 8029284:	2300      	movs	r3, #0
 8029286:	4604      	mov	r4, r0
 8029288:	4608      	mov	r0, r1
 802928a:	602b      	str	r3, [r5, #0]
 802928c:	f7de f876 	bl	800737c <_isatty>
 8029290:	1c43      	adds	r3, r0, #1
 8029292:	d102      	bne.n	802929a <_isatty_r+0x1a>
 8029294:	682b      	ldr	r3, [r5, #0]
 8029296:	b103      	cbz	r3, 802929a <_isatty_r+0x1a>
 8029298:	6023      	str	r3, [r4, #0]
 802929a:	bd38      	pop	{r3, r4, r5, pc}
 802929c:	2002fd5c 	.word	0x2002fd5c

080292a0 <__ascii_mbtowc>:
 80292a0:	b082      	sub	sp, #8
 80292a2:	b901      	cbnz	r1, 80292a6 <__ascii_mbtowc+0x6>
 80292a4:	a901      	add	r1, sp, #4
 80292a6:	b142      	cbz	r2, 80292ba <__ascii_mbtowc+0x1a>
 80292a8:	b14b      	cbz	r3, 80292be <__ascii_mbtowc+0x1e>
 80292aa:	7813      	ldrb	r3, [r2, #0]
 80292ac:	600b      	str	r3, [r1, #0]
 80292ae:	7812      	ldrb	r2, [r2, #0]
 80292b0:	1e10      	subs	r0, r2, #0
 80292b2:	bf18      	it	ne
 80292b4:	2001      	movne	r0, #1
 80292b6:	b002      	add	sp, #8
 80292b8:	4770      	bx	lr
 80292ba:	4610      	mov	r0, r2
 80292bc:	e7fb      	b.n	80292b6 <__ascii_mbtowc+0x16>
 80292be:	f06f 0001 	mvn.w	r0, #1
 80292c2:	e7f8      	b.n	80292b6 <__ascii_mbtowc+0x16>

080292c4 <_realloc_r>:
 80292c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80292c8:	4680      	mov	r8, r0
 80292ca:	4614      	mov	r4, r2
 80292cc:	460e      	mov	r6, r1
 80292ce:	b921      	cbnz	r1, 80292da <_realloc_r+0x16>
 80292d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80292d4:	4611      	mov	r1, r2
 80292d6:	f7fb bba5 	b.w	8024a24 <_malloc_r>
 80292da:	b92a      	cbnz	r2, 80292e8 <_realloc_r+0x24>
 80292dc:	f7fb fb36 	bl	802494c <_free_r>
 80292e0:	4625      	mov	r5, r4
 80292e2:	4628      	mov	r0, r5
 80292e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80292e8:	f000 f86d 	bl	80293c6 <_malloc_usable_size_r>
 80292ec:	4284      	cmp	r4, r0
 80292ee:	4607      	mov	r7, r0
 80292f0:	d802      	bhi.n	80292f8 <_realloc_r+0x34>
 80292f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80292f6:	d812      	bhi.n	802931e <_realloc_r+0x5a>
 80292f8:	4621      	mov	r1, r4
 80292fa:	4640      	mov	r0, r8
 80292fc:	f7fb fb92 	bl	8024a24 <_malloc_r>
 8029300:	4605      	mov	r5, r0
 8029302:	2800      	cmp	r0, #0
 8029304:	d0ed      	beq.n	80292e2 <_realloc_r+0x1e>
 8029306:	42bc      	cmp	r4, r7
 8029308:	4622      	mov	r2, r4
 802930a:	4631      	mov	r1, r6
 802930c:	bf28      	it	cs
 802930e:	463a      	movcs	r2, r7
 8029310:	f7fb f87a 	bl	8024408 <memcpy>
 8029314:	4631      	mov	r1, r6
 8029316:	4640      	mov	r0, r8
 8029318:	f7fb fb18 	bl	802494c <_free_r>
 802931c:	e7e1      	b.n	80292e2 <_realloc_r+0x1e>
 802931e:	4635      	mov	r5, r6
 8029320:	e7df      	b.n	80292e2 <_realloc_r+0x1e>

08029322 <_raise_r>:
 8029322:	291f      	cmp	r1, #31
 8029324:	b538      	push	{r3, r4, r5, lr}
 8029326:	4604      	mov	r4, r0
 8029328:	460d      	mov	r5, r1
 802932a:	d904      	bls.n	8029336 <_raise_r+0x14>
 802932c:	2316      	movs	r3, #22
 802932e:	6003      	str	r3, [r0, #0]
 8029330:	f04f 30ff 	mov.w	r0, #4294967295
 8029334:	bd38      	pop	{r3, r4, r5, pc}
 8029336:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029338:	b112      	cbz	r2, 8029340 <_raise_r+0x1e>
 802933a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802933e:	b94b      	cbnz	r3, 8029354 <_raise_r+0x32>
 8029340:	4620      	mov	r0, r4
 8029342:	f000 f831 	bl	80293a8 <_getpid_r>
 8029346:	462a      	mov	r2, r5
 8029348:	4601      	mov	r1, r0
 802934a:	4620      	mov	r0, r4
 802934c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029350:	f000 b818 	b.w	8029384 <_kill_r>
 8029354:	2b01      	cmp	r3, #1
 8029356:	d00a      	beq.n	802936e <_raise_r+0x4c>
 8029358:	1c59      	adds	r1, r3, #1
 802935a:	d103      	bne.n	8029364 <_raise_r+0x42>
 802935c:	2316      	movs	r3, #22
 802935e:	6003      	str	r3, [r0, #0]
 8029360:	2001      	movs	r0, #1
 8029362:	e7e7      	b.n	8029334 <_raise_r+0x12>
 8029364:	2400      	movs	r4, #0
 8029366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802936a:	4628      	mov	r0, r5
 802936c:	4798      	blx	r3
 802936e:	2000      	movs	r0, #0
 8029370:	e7e0      	b.n	8029334 <_raise_r+0x12>
 8029372:	Address 0x0000000008029372 is out of bounds.


08029374 <raise>:
 8029374:	4b02      	ldr	r3, [pc, #8]	; (8029380 <raise+0xc>)
 8029376:	4601      	mov	r1, r0
 8029378:	6818      	ldr	r0, [r3, #0]
 802937a:	f7ff bfd2 	b.w	8029322 <_raise_r>
 802937e:	bf00      	nop
 8029380:	20000490 	.word	0x20000490

08029384 <_kill_r>:
 8029384:	b538      	push	{r3, r4, r5, lr}
 8029386:	4d07      	ldr	r5, [pc, #28]	; (80293a4 <_kill_r+0x20>)
 8029388:	2300      	movs	r3, #0
 802938a:	4604      	mov	r4, r0
 802938c:	4608      	mov	r0, r1
 802938e:	4611      	mov	r1, r2
 8029390:	602b      	str	r3, [r5, #0]
 8029392:	f7dd ffcd 	bl	8007330 <_kill>
 8029396:	1c43      	adds	r3, r0, #1
 8029398:	d102      	bne.n	80293a0 <_kill_r+0x1c>
 802939a:	682b      	ldr	r3, [r5, #0]
 802939c:	b103      	cbz	r3, 80293a0 <_kill_r+0x1c>
 802939e:	6023      	str	r3, [r4, #0]
 80293a0:	bd38      	pop	{r3, r4, r5, pc}
 80293a2:	bf00      	nop
 80293a4:	2002fd5c 	.word	0x2002fd5c

080293a8 <_getpid_r>:
 80293a8:	f7dd bfc0 	b.w	800732c <_getpid>

080293ac <__ascii_wctomb>:
 80293ac:	b149      	cbz	r1, 80293c2 <__ascii_wctomb+0x16>
 80293ae:	2aff      	cmp	r2, #255	; 0xff
 80293b0:	bf85      	ittet	hi
 80293b2:	238a      	movhi	r3, #138	; 0x8a
 80293b4:	6003      	strhi	r3, [r0, #0]
 80293b6:	700a      	strbls	r2, [r1, #0]
 80293b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80293bc:	bf98      	it	ls
 80293be:	2001      	movls	r0, #1
 80293c0:	4770      	bx	lr
 80293c2:	4608      	mov	r0, r1
 80293c4:	4770      	bx	lr

080293c6 <_malloc_usable_size_r>:
 80293c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80293ca:	1f18      	subs	r0, r3, #4
 80293cc:	2b00      	cmp	r3, #0
 80293ce:	bfbc      	itt	lt
 80293d0:	580b      	ldrlt	r3, [r1, r0]
 80293d2:	18c0      	addlt	r0, r0, r3
 80293d4:	4770      	bx	lr
 80293d6:	Address 0x00000000080293d6 is out of bounds.


080293d8 <_init>:
 80293d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293da:	bf00      	nop
 80293dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293de:	bc08      	pop	{r3}
 80293e0:	469e      	mov	lr, r3
 80293e2:	4770      	bx	lr

080293e4 <_fini>:
 80293e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80293e6:	bf00      	nop
 80293e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80293ea:	bc08      	pop	{r3}
 80293ec:	469e      	mov	lr, r3
 80293ee:	4770      	bx	lr
